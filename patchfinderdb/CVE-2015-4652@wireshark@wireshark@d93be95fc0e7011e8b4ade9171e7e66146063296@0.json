{
  "cve_id": "CVE-2015-4652",
  "cve_desc": "epan/dissectors/packet-gsm_a_dtap.c in the GSM DTAP dissector in Wireshark 1.12.x before 1.12.6 does not properly validate digit characters, which allows remote attackers to cause a denial of service (application crash) via a crafted packet, related to the de_emerg_num_list and de_bcd_num functions.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d93be95fc0e7011e8b4ade9171e7e66146063296",
  "patch_info": {
    "commit_hash": "d93be95fc0e7011e8b4ade9171e7e66146063296",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d93be95fc0e7011e8b4ade9171e7e66146063296",
    "files": [
      "epan/dissectors/packet-gsm_a_dtap.c"
    ],
    "message": "Clean up handling of BDC coded numbers a bit.\n\nChange-Id: Ic3d523664e3c78b4ed289b7e5acf3f53614c6d54\nReviewed-on: https://code.wireshark.org/review/5027\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
      "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1065: de_emerg_num_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
      "1066: {",
      "1067:     guint32     curr_offset;",
      "1069:     guint8      count;",
      "1071:     proto_tree *subtree;",
      "1072:     proto_item *item;",
      "1075:     curr_offset = offset;",
      "",
      "[Removed Lines]",
      "1068:     guint8      en_len, oct, i;",
      "1070:     guint8     *poctets;",
      "1073:     gboolean    malformed_number;",
      "",
      "[Added Lines]",
      "1068:     guint8      en_len;",
      "1072:     const char *digit_str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1101:         curr_offset++;",
      "1102:         en_len--;",
      "1130:             expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
      "1132:         curr_offset = curr_offset + en_len;",
      "1133:         count++;",
      "",
      "[Removed Lines]",
      "1104:         poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
      "1106:         my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
      "1108:         item = proto_tree_add_string_format(subtree, hf_gsm_a_dtap_emergency_bcd_num,",
      "1109:             tvb, curr_offset, en_len,",
      "1110:             a_bigbuf,",
      "1111:             \"BCD Digits: %s\",",
      "1112:             a_bigbuf);",
      "1114:         malformed_number = FALSE;",
      "1115:         for(i = 0; i < en_len - 1; i++)",
      "1116:         {",
      "1117:             oct = poctets[i];",
      "1118:             if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
      "1119:             {",
      "1120:                 malformed_number = TRUE;",
      "1121:                 break;",
      "1122:             }",
      "1123:         }",
      "1125:         oct = poctets[en_len - 1];",
      "1126:         if ((oct & 0x0f) == 0x0f)",
      "1127:             malformed_number = TRUE;",
      "1129:         if (malformed_number)",
      "",
      "[Added Lines]",
      "1103:         digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, en_len, NULL, FALSE);",
      "1104:         item = proto_tree_add_string(subtree, hf_gsm_a_dtap_emergency_bcd_num, tvb, curr_offset, en_len, digit_str);",
      "1111:         if(strchr(digit_str,'?')){",
      "1113:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2151: de_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, int header_field, gboolean *address_extracted)",
      "2152: {",
      "2153:     guint8     *poctets;",
      "2156:     proto_item *item;",
      "2160:     curr_offset = offset;",
      "",
      "[Removed Lines]",
      "2154:     guint8      extension, oct;",
      "2155:     guint32     curr_offset, i, num_string_len;",
      "2157:     gboolean    malformed_number;",
      "",
      "[Added Lines]",
      "2137:     guint8      extension;",
      "2138:     guint32     curr_offset, num_string_len;",
      "2140:     const char *digit_str;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2183:     my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
      "2184:         &Dgt_mbcd);",
      "2186:     item = proto_tree_add_string_format(tree, header_field,",
      "2187:         tvb, curr_offset, num_string_len,",
      "2188:         a_bigbuf,",
      "2189:         \"BCD Digits: %s\",",
      "2190:         a_bigbuf);",
      "2208:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
      "2210:     return (len);",
      "2211: }",
      "",
      "[Removed Lines]",
      "2192:     malformed_number = FALSE;",
      "2193:     for(i = 0; i < num_string_len - 1; i++)",
      "2194:     {",
      "2195:         oct = poctets[i];",
      "2196:         if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
      "2197:         {",
      "2198:             malformed_number = TRUE;",
      "2199:             break;",
      "2200:         }",
      "2201:     }",
      "2203:     oct = poctets[num_string_len - 1];",
      "2204:     if ((oct & 0x0f) == 0x0f)",
      "2205:         malformed_number = TRUE;",
      "2207:     if (malformed_number)",
      "",
      "[Added Lines]",
      "2169:     digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, num_string_len, NULL, FALSE);",
      "2170:     item = proto_tree_add_string(tree, header_field, tvb, curr_offset, num_string_len, digit_str);",
      "2182:     if(strchr(digit_str,'?')){",
      "2184:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9fa6881060b46b6ea1a3c89529f6ebebc1caf77f",
      "candidate_info": {
        "commit_hash": "9fa6881060b46b6ea1a3c89529f6ebebc1caf77f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9fa6881060b46b6ea1a3c89529f6ebebc1caf77f",
        "files": [
          "epan/dissectors/packet-gsm_a_dtap.c"
        ],
        "message": "Clean up handling of BDC coded numbers a bit.\n\n[Back-ported to 1.12 to fix the fuzz failure reported in bug 11201.]\n\nBug: 11201\nChange-Id: Ic3d523664e3c78b4ed289b7e5acf3f53614c6d54\nReviewed-on: https://code.wireshark.org/review/5027\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d93be95fc0e7011e8b4ade9171e7e66146063296)\nConflicts:\n\tepan/dissectors/packet-gsm_a_dtap.c\nReviewed-on: https://code.wireshark.org/review/8730\nPetri-Dish: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
          "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063: static guint16",
          "1064: de_emerg_num_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "1065: {",
          "1136: }",
          "",
          "[Removed Lines]",
          "1066:  guint32     curr_offset;",
          "1067:  guint8      en_len, oct, i;",
          "1068:  guint8      count;",
          "1069:  guint8     *poctets;",
          "1070:  proto_tree *subtree;",
          "1071:  proto_item *item;",
          "1072:  gboolean    malformed_number;",
          "1074:  curr_offset = offset;",
          "1076:  count = 1;",
          "1077:  while ((curr_offset - offset) < len){",
          "1082:   en_len = tvb_get_guint8(tvb, curr_offset);",
          "1084:   item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1085:    tvb, curr_offset, en_len + 1, count);",
          "1086:   subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1087:   proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1089:   curr_offset++;",
          "1094:   proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1095:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1096:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1100:   curr_offset++;",
          "1101:   en_len--;",
          "1103:   poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "1105:   my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
          "1107:   item = proto_tree_add_string_format(subtree, hf_gsm_a_dtap_emergency_bcd_num,",
          "1108:    tvb, curr_offset, en_len,",
          "1109:    a_bigbuf,",
          "1110:    \"BCD Digits: %s\",",
          "1111:    a_bigbuf);",
          "1113:   malformed_number = FALSE;",
          "1114:   for(i = 0; i < en_len - 1; i++)",
          "1115:   {",
          "1116:    oct = poctets[i];",
          "1117:    if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "1118:    {",
          "1119:     malformed_number = TRUE;",
          "1120:     break;",
          "1121:    }",
          "1122:   }",
          "1124:   oct = poctets[en_len - 1];",
          "1125:   if ((oct & 0x0f) == 0x0f)",
          "1126:    malformed_number = TRUE;",
          "1128:   if(malformed_number)",
          "1129:    expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1131:   curr_offset = curr_offset + en_len;",
          "1132:   count++;",
          "1133:  }",
          "1135:  return(len);",
          "",
          "[Added Lines]",
          "1066:     guint32     curr_offset;",
          "1067:     guint8      en_len;",
          "1068:     guint8      count;",
          "1069:     proto_tree *subtree;",
          "1070:     proto_item *item;",
          "1071:     const char *digit_str;",
          "1073:     curr_offset = offset;",
          "1075:     count = 1;",
          "1076:     while ((curr_offset - offset) < len) {",
          "1081:         en_len = tvb_get_guint8(tvb, curr_offset);",
          "1083:         item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1084:             tvb, curr_offset, en_len + 1, count);",
          "1085:         subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1086:         proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1088:         curr_offset++;",
          "1093:         proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1094:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1095:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1096:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:         curr_offset++;",
          "1100:         en_len--;",
          "1102:         digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, en_len, NULL, FALSE);",
          "1103:         item = proto_tree_add_string(subtree, hf_gsm_a_dtap_emergency_bcd_num, tvb, curr_offset, en_len, digit_str);",
          "1110:         if(strchr(digit_str,'?')){",
          "1111:             expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1112:         }",
          "1114:         curr_offset = curr_offset + en_len;",
          "1115:         count++;",
          "1116:     }",
          "1118:     return (len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2177: static guint16",
          "2178: de_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, int header_field, gboolean *address_extracted)",
          "2179: {",
          "2238: }",
          "",
          "[Removed Lines]",
          "2180:  guint8     *poctets;",
          "2181:  guint8      extension, oct;",
          "2182:  guint32     curr_offset, i, num_string_len;",
          "2183:  proto_item *item;",
          "2184:  gboolean    malformed_number;",
          "2187:  curr_offset = offset;",
          "2189:  extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2190:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2191:  proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2192:  proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2193:  curr_offset++;",
          "2195:  if (!extension)",
          "2196:  {",
          "2197:   proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2198:   proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2199:   proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2200:   proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2201:   curr_offset++;",
          "2202:  }",
          "2204:  NO_MORE_DATA_CHECK(len);",
          "2206:  num_string_len = len - (curr_offset - offset);",
          "2207:  poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2210:  my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2211:   &Dgt_mbcd);",
          "2213:  item = proto_tree_add_string_format(tree, header_field,",
          "2214:   tvb, curr_offset, num_string_len,",
          "2215:   a_bigbuf,",
          "2216:   \"BCD Digits: %s\",",
          "2217:   a_bigbuf);",
          "2219:  malformed_number = FALSE;",
          "2220:  for(i = 0; i < num_string_len - 1; i++)",
          "2221:  {",
          "2222:   oct = poctets[i];",
          "2223:   if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "2224:   {",
          "2225:    malformed_number = TRUE;",
          "2226:    break;",
          "2227:   }",
          "2228:  }",
          "2230:  oct = poctets[num_string_len - 1];",
          "2231:  if ((oct & 0x0f) == 0x0f)",
          "2232:   malformed_number = TRUE;",
          "2234:  if(malformed_number)",
          "2235:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2237:  return(len);",
          "",
          "[Added Lines]",
          "2163:     guint8     *poctets;",
          "2164:     guint8      extension;",
          "2165:     guint32     curr_offset, num_string_len;",
          "2166:     proto_item *item;",
          "2167:     const char *digit_str;",
          "2170:     curr_offset = offset;",
          "2172:     extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2173:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2174:     proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2175:     proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2176:     curr_offset++;",
          "2178:     if (!extension)",
          "2179:     {",
          "2180:         proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2181:         proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2182:         proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2183:         proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2184:         curr_offset++;",
          "2185:     }",
          "2187:     NO_MORE_DATA_CHECK(len);",
          "2189:     num_string_len = len - (curr_offset - offset);",
          "2190:     poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2193:     my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2194:         &Dgt_mbcd);",
          "2196:     digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, num_string_len, NULL, FALSE);",
          "2197:     item = proto_tree_add_string(tree, header_field, tvb, curr_offset, num_string_len, digit_str);",
          "2198:     item = proto_tree_add_string_format(tree, header_field,",
          "2199:         tvb, curr_offset, num_string_len,",
          "2200:         a_bigbuf,",
          "2201:         \"BCD Digits: %s\",",
          "2202:         a_bigbuf);",
          "2209:     if(strchr(digit_str,'?')){",
          "2210:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2211:     }",
          "2213:     return (len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f83b56a4dc2d32aa5129c228de195be6a44d9da8",
      "candidate_info": {
        "commit_hash": "f83b56a4dc2d32aa5129c228de195be6a44d9da8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f83b56a4dc2d32aa5129c228de195be6a44d9da8",
        "files": [
          "epan/dissectors/packet-gsm_a_dtap.c"
        ],
        "message": "Clean up handling of BDC coded numbers a bit.\n\n[Back-ported to 1.12 to fix the fuzz failure reported in bug 11201.]\n\nBug: 11201\nChange-Id: Ic3d523664e3c78b4ed289b7e5acf3f53614c6d54\nReviewed-on: https://code.wireshark.org/review/5027\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d93be95fc0e7011e8b4ade9171e7e66146063296)\nConflicts:\n\tepan/dissectors/packet-gsm_a_dtap.c\nReviewed-on: https://code.wireshark.org/review/8730\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 9fa6881060b46b6ea1a3c89529f6ebebc1caf77f)\nReviewed-on: https://code.wireshark.org/review/9045\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
          "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063: static guint16",
          "1064: de_emerg_num_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "1065: {",
          "1136: }",
          "",
          "[Removed Lines]",
          "1066:  guint32     curr_offset;",
          "1067:  guint8      en_len, oct, i;",
          "1068:  guint8      count;",
          "1069:  guint8     *poctets;",
          "1070:  proto_tree *subtree;",
          "1071:  proto_item *item;",
          "1072:  gboolean    malformed_number;",
          "1074:  curr_offset = offset;",
          "1076:  count = 1;",
          "1077:  while ((curr_offset - offset) < len){",
          "1082:   en_len = tvb_get_guint8(tvb, curr_offset);",
          "1084:   item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1085:    tvb, curr_offset, en_len + 1, count);",
          "1086:   subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1087:   proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1089:   curr_offset++;",
          "1094:   proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1095:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1096:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1100:   curr_offset++;",
          "1101:   en_len--;",
          "1103:   poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "1105:   my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
          "1107:   item = proto_tree_add_string_format(subtree, hf_gsm_a_dtap_emergency_bcd_num,",
          "1108:    tvb, curr_offset, en_len,",
          "1109:    a_bigbuf,",
          "1110:    \"BCD Digits: %s\",",
          "1111:    a_bigbuf);",
          "1113:   malformed_number = FALSE;",
          "1114:   for(i = 0; i < en_len - 1; i++)",
          "1115:   {",
          "1116:    oct = poctets[i];",
          "1117:    if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "1118:    {",
          "1119:     malformed_number = TRUE;",
          "1120:     break;",
          "1121:    }",
          "1122:   }",
          "1124:   oct = poctets[en_len - 1];",
          "1125:   if ((oct & 0x0f) == 0x0f)",
          "1126:    malformed_number = TRUE;",
          "1128:   if(malformed_number)",
          "1129:    expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1131:   curr_offset = curr_offset + en_len;",
          "1132:   count++;",
          "1133:  }",
          "1135:  return(len);",
          "",
          "[Added Lines]",
          "1066:     guint32     curr_offset;",
          "1067:     guint8      en_len;",
          "1068:     guint8      count;",
          "1069:     proto_tree *subtree;",
          "1070:     proto_item *item;",
          "1071:     const char *digit_str;",
          "1073:     curr_offset = offset;",
          "1075:     count = 1;",
          "1076:     while ((curr_offset - offset) < len) {",
          "1081:         en_len = tvb_get_guint8(tvb, curr_offset);",
          "1083:         item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1084:             tvb, curr_offset, en_len + 1, count);",
          "1085:         subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1086:         proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1088:         curr_offset++;",
          "1093:         proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1094:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1095:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1096:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:         curr_offset++;",
          "1100:         en_len--;",
          "1102:         digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, en_len, NULL, FALSE);",
          "1103:         item = proto_tree_add_string(subtree, hf_gsm_a_dtap_emergency_bcd_num, tvb, curr_offset, en_len, digit_str);",
          "1110:         if(strchr(digit_str,'?')){",
          "1111:             expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1112:         }",
          "1114:         curr_offset = curr_offset + en_len;",
          "1115:         count++;",
          "1116:     }",
          "1118:     return (len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2177: static guint16",
          "2178: de_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, int header_field, gboolean *address_extracted)",
          "2179: {",
          "2238: }",
          "",
          "[Removed Lines]",
          "2180:  guint8     *poctets;",
          "2181:  guint8      extension, oct;",
          "2182:  guint32     curr_offset, i, num_string_len;",
          "2183:  proto_item *item;",
          "2184:  gboolean    malformed_number;",
          "2187:  curr_offset = offset;",
          "2189:  extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2190:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2191:  proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2192:  proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2193:  curr_offset++;",
          "2195:  if (!extension)",
          "2196:  {",
          "2197:   proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2198:   proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2199:   proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2200:   proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2201:   curr_offset++;",
          "2202:  }",
          "2204:  NO_MORE_DATA_CHECK(len);",
          "2206:  num_string_len = len - (curr_offset - offset);",
          "2207:  poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2210:  my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2211:   &Dgt_mbcd);",
          "2213:  item = proto_tree_add_string_format(tree, header_field,",
          "2214:   tvb, curr_offset, num_string_len,",
          "2215:   a_bigbuf,",
          "2216:   \"BCD Digits: %s\",",
          "2217:   a_bigbuf);",
          "2219:  malformed_number = FALSE;",
          "2220:  for(i = 0; i < num_string_len - 1; i++)",
          "2221:  {",
          "2222:   oct = poctets[i];",
          "2223:   if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "2224:   {",
          "2225:    malformed_number = TRUE;",
          "2226:    break;",
          "2227:   }",
          "2228:  }",
          "2230:  oct = poctets[num_string_len - 1];",
          "2231:  if ((oct & 0x0f) == 0x0f)",
          "2232:   malformed_number = TRUE;",
          "2234:  if(malformed_number)",
          "2235:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2237:  return(len);",
          "",
          "[Added Lines]",
          "2163:     guint8     *poctets;",
          "2164:     guint8      extension;",
          "2165:     guint32     curr_offset, num_string_len;",
          "2166:     proto_item *item;",
          "2167:     const char *digit_str;",
          "2170:     curr_offset = offset;",
          "2172:     extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2173:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2174:     proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2175:     proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2176:     curr_offset++;",
          "2178:     if (!extension)",
          "2179:     {",
          "2180:         proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2181:         proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2182:         proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2183:         proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2184:         curr_offset++;",
          "2185:     }",
          "2187:     NO_MORE_DATA_CHECK(len);",
          "2189:     num_string_len = len - (curr_offset - offset);",
          "2190:     poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2193:     my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2194:         &Dgt_mbcd);",
          "2196:     digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, num_string_len, NULL, FALSE);",
          "2197:     item = proto_tree_add_string(tree, header_field, tvb, curr_offset, num_string_len, digit_str);",
          "2198:     item = proto_tree_add_string_format(tree, header_field,",
          "2199:         tvb, curr_offset, num_string_len,",
          "2200:         a_bigbuf,",
          "2201:         \"BCD Digits: %s\",",
          "2202:         a_bigbuf);",
          "2209:     if(strchr(digit_str,'?')){",
          "2210:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2211:     }",
          "2213:     return (len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "232879a1513119289f09c7cad1d03bd649504bee",
      "candidate_info": {
        "commit_hash": "232879a1513119289f09c7cad1d03bd649504bee",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/232879a1513119289f09c7cad1d03bd649504bee",
        "files": [
          "epan/dissectors/packet-gsm_a_dtap.c"
        ],
        "message": "gsm a dtap: Fix Dead Store (Dead assignement/Dead increment) warning found by Clang\n\nChange-Id: Ifbe59a51e5fa6158f9073402f1a1ab63df2dfa42\nReviewed-on: https://code.wireshark.org/review/5071\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
          "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2167:         &Dgt_mbcd);",
          "2169:     digit_str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, num_string_len, NULL, FALSE);",
          "2171:     item = proto_tree_add_string_format(tree, header_field,",
          "2172:         tvb, curr_offset, num_string_len,",
          "2173:         a_bigbuf,",
          "",
          "[Removed Lines]",
          "2170:     item = proto_tree_add_string(tree, header_field, tvb, curr_offset, num_string_len, digit_str);",
          "",
          "[Added Lines]",
          "2170:     proto_tree_add_string(tree, header_field, tvb, curr_offset, num_string_len, digit_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8676c2fd756176136ec48c1dace955ebebe640c",
      "candidate_info": {
        "commit_hash": "a8676c2fd756176136ec48c1dace955ebebe640c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a8676c2fd756176136ec48c1dace955ebebe640c",
        "files": [
          "epan/dissectors/packet-gsm_a_common.c",
          "epan/dissectors/packet-gsm_a_dtap.c"
        ],
        "message": "Fix dissection of BCD numbers\n\nDo not use of tvb_get_string(): what we really want is the byte string, not an ASCII string\n\nChange-Id: I8b9a8b7ccacbdaf6d9525771ff8ed883ba01ad34\nReviewed-on: https://code.wireshark.org/review/329\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_a_common.c||epan/dissectors/packet-gsm_a_common.c",
          "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_a_common.c||epan/dissectors/packet-gsm_a_common.c": [
          "File: epan/dissectors/packet-gsm_a_common.c -> epan/dissectors/packet-gsm_a_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2288:         a_bigbuf[0] = Dgt1_9_bcd.out[(oct & 0xf0) >> 4];",
          "2289:         curr_offset++;",
          "2293:         my_dgt_tbcd_unpack(&a_bigbuf[1], poctets, len - (curr_offset - offset),",
          "2294:             &Dgt1_9_bcd);",
          "",
          "[Removed Lines]",
          "2291:         poctets = tvb_get_string(wmem_packet_scope(), tvb, curr_offset, len - (curr_offset - offset));",
          "",
          "[Added Lines]",
          "2289:         poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, len - (curr_offset - offset));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
          "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662: static dgt_set_t Dgt_mbcd = {",
          "663:  {",
          "666:  }",
          "667: };",
          "",
          "[Removed Lines]",
          "665:   '0','1','2','3','4','5','6','7','8','9','*','#','a','b','c','?'",
          "",
          "[Added Lines]",
          "663:    '0','1','2','3','4','5','6','7','8','9','*','#','a','b','c','?'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1102:   curr_offset++;",
          "1103:   en_len--;",
          "1107:   my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
          "",
          "[Removed Lines]",
          "1105:   poctets = tvb_get_string(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "",
          "[Added Lines]",
          "1103:   poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2206:  NO_MORE_DATA_CHECK(len);",
          "2208:  num_string_len = len - (curr_offset - offset);",
          "2212:  my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "",
          "[Removed Lines]",
          "2209:  poctets = tvb_get_string(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "",
          "[Added Lines]",
          "2207:  poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2287:   if (afi == 0x50)",
          "2288:   {",
          "2289:    ia5_string_len = len - (curr_offset - offset);",
          "2292:    invalid_ia5_char = FALSE;",
          "2293:    for(i = 0; i < ia5_string_len; i++)",
          "",
          "[Removed Lines]",
          "2290:    ia5_string = tvb_get_string(wmem_packet_scope(), tvb, curr_offset, ia5_string_len);",
          "",
          "[Added Lines]",
          "2288:    ia5_string = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, ia5_string_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "facb76ad8f47e6428b7c84b47dd8326ff9ad4f3f",
      "candidate_info": {
        "commit_hash": "facb76ad8f47e6428b7c84b47dd8326ff9ad4f3f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/facb76ad8f47e6428b7c84b47dd8326ff9ad4f3f",
        "files": [
          "epan/dissectors/packet-gsm_a_dtap.c"
        ],
        "message": "packet-gsm_a_dtap.c: various changes (mostly indentation/whitespace/formatting);\n\n- Remove #include <epan/prefs.h> (no prefs);\n- tvb_length() --> tvb_reported_length()\n- Use '4 space' indentation;\n- Use consistent whitespace formatting;\n- Reformat hf[] entries for readability;\n\nChange-Id: I4fd7e860efa795256972d6a31155f0502fb7dcfd\nReviewed-on: https://code.wireshark.org/review/3612\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gsm_a_dtap.c||epan/dissectors/packet-gsm_a_dtap.c": [
          "File: epan/dissectors/packet-gsm_a_dtap.c -> epan/dissectors/packet-gsm_a_dtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: #include <glib.h>",
          "104: #include <epan/packet.h>",
          "106: #include <epan/tap.h>",
          "107: #include <epan/wmem/wmem.h>",
          "108: #include <epan/asn1.h>",
          "",
          "[Removed Lines]",
          "100: # include \"config.h\"",
          "105: #include <epan/prefs.h>",
          "",
          "[Added Lines]",
          "100: #include \"config.h\"",
          "105: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: #include \"packet-gsm_a_common.h\"",
          "116: #include \"packet-ppp.h\"",
          "117: #include \"packet-gsm_sms.h\"",
          "119: #include \"packet-isup.h\"",
          "121: void proto_register_gsm_a_dtap(void);",
          "",
          "[Removed Lines]",
          "118: #include \"expert.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: const value_string gsm_a_dtap_msg_mm_strings[] = {",
          "151: };",
          "153: const value_string gsm_a_dtap_msg_cc_strings[] = {",
          "190: };",
          "192: const value_string gsm_a_dtap_msg_sms_strings[] = {",
          "197: };",
          "199: const value_string gsm_a_dtap_msg_ss_strings[] = {",
          "204: };",
          "206: const value_string gsm_a_dtap_msg_tp_strings[] = {",
          "245: };",
          "247: static const value_string gsm_dtap_elem_strings[] = {",
          "336: };",
          "337: value_string_ext gsm_dtap_elem_strings_ext = VALUE_STRING_EXT_INIT(gsm_dtap_elem_strings);",
          "339: const gchar *gsm_a_pd_str[] = {",
          "356: };",
          "358: const value_string protocol_discriminator_vals[] = {",
          "376: };",
          "378: const value_string gsm_a_pd_short_str_vals[] = {",
          "396: };",
          "398: static const true_false_string tfs_acceptable_not_acceptable = { \"Acceptable\", \"Not Acceptable\" };",
          "414: static int proto_a_dtap = -1;",
          "",
          "[Removed Lines]",
          "127:  { 0x01, \"IMSI Detach Indication\" },",
          "128:  { 0x02, \"Location Updating Accept\" },",
          "129:  { 0x04, \"Location Updating Reject\" },",
          "130:  { 0x08, \"Location Updating Request\" },",
          "131:  { 0x11, \"Authentication Reject\" },",
          "132:  { 0x12, \"Authentication Request\" },",
          "133:  { 0x14, \"Authentication Response\" },",
          "134:  { 0x1c, \"Authentication Failure\" },",
          "135:  { 0x18, \"Identity Request\" },",
          "136:  { 0x19, \"Identity Response\" },",
          "137:  { 0x1a, \"TMSI Reallocation Command\" },",
          "138:  { 0x1b, \"TMSI Reallocation Complete\" },",
          "139:  { 0x21, \"CM Service Accept\" },",
          "140:  { 0x22, \"CM Service Reject\" },",
          "141:  { 0x23, \"CM Service Abort\" },",
          "142:  { 0x24, \"CM Service Request\" },",
          "143:  { 0x25, \"CM Service Prompt\" },",
          "144:  { 0x26, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "145:  { 0x28, \"CM Re-establishment Request\" },",
          "146:  { 0x29, \"Abort\" },",
          "147:  { 0x30, \"MM Null\" },",
          "148:  { 0x31, \"MM Status\" },",
          "149:  { 0x32, \"MM Information\" },",
          "150:  { 0, NULL }",
          "154:  { 0x01, \"Alerting\" },",
          "155:  { 0x08, \"Call Confirmed\" },",
          "156:  { 0x02, \"Call Proceeding\" },",
          "157:  { 0x07, \"Connect\" },",
          "158:  { 0x0f, \"Connect Acknowledge\" },",
          "159:  { 0x0e, \"Emergency Setup\" },",
          "160:  { 0x03, \"Progress\" },",
          "161:  { 0x04, \"CC-Establishment\" },",
          "162:  { 0x06, \"CC-Establishment Confirmed\" },",
          "163:  { 0x0b, \"Recall\" },",
          "164:  { 0x09, \"Start CC\" },",
          "165:  { 0x05, \"Setup\" },",
          "166:  { 0x17, \"Modify\" },",
          "167:  { 0x1f, \"Modify Complete\" },",
          "168:  { 0x13, \"Modify Reject\" },",
          "169:  { 0x10, \"User Information\" },",
          "170:  { 0x18, \"Hold\" },",
          "171:  { 0x19, \"Hold Acknowledge\" },",
          "172:  { 0x1a, \"Hold Reject\" },",
          "173:  { 0x1c, \"Retrieve\" },",
          "174:  { 0x1d, \"Retrieve Acknowledge\" },",
          "175:  { 0x1e, \"Retrieve Reject\" },",
          "176:  { 0x25, \"Disconnect\" },",
          "177:  { 0x2d, \"Release\" },",
          "178:  { 0x2a, \"Release Complete\" },",
          "179:  { 0x39, \"Congestion Control\" },",
          "180:  { 0x3e, \"Notify\" },",
          "181:  { 0x3d, \"Status\" },",
          "182:  { 0x34, \"Status Enquiry\" },",
          "183:  { 0x35, \"Start DTMF\" },",
          "184:  { 0x31, \"Stop DTMF\" },",
          "185:  { 0x32, \"Stop DTMF Acknowledge\" },",
          "186:  { 0x36, \"Start DTMF Acknowledge\" },",
          "187:  { 0x37, \"Start DTMF Reject\" },",
          "188:  { 0x3a, \"Facility\" },",
          "189:  { 0, NULL }",
          "193:  { 0x01, \"CP-DATA\" },",
          "194:  { 0x04, \"CP-ACK\" },",
          "195:  { 0x10, \"CP-ERROR\" },",
          "196:  { 0, NULL }",
          "200:  { 0x2a, \"Release Complete\" },",
          "201:  { 0x3a, \"Facility\" },",
          "202:  { 0x3b, \"Register\" },",
          "203:  { 0, NULL }",
          "207:  { 0x00, \"Close TCH Loop Cmd\" },",
          "208:  { 0x01, \"Close TCH Loop Ack\" },",
          "209:  { 0x06, \"Open Loop Cmd\" },",
          "210:  { 0x0c, \"Act EMMI Cmd\" },",
          "211:  { 0x0d, \"Act EMMI Ack\" },",
          "212:  { 0x10, \"Deact EMMI\" },",
          "213:  { 0x14, \"Test Interface\" },",
          "214:  { 0x20, \"Close Multi-slot Loop Cmd\" },",
          "215:  { 0x21, \"Close Multi-slot Loop Ack\" },",
          "216:  { 0x22, \"Open Multi-slot Loop Cmd\" },",
          "217:  { 0x23, \"Open Multi-slot Loop Ack\" },",
          "218:  { 0x24, \"GPRS Test Mode Cmd\" },",
          "219:  { 0x25, \"EGPRS Start Radio Block Loopback Cmd\" },",
          "220:  { 0x26, \"Reset MS Positioning Stored Information\" },",
          "221:  { 0x40, \"Close UE Test Loop\" },",
          "222:  { 0x41, \"Close UE Test Loop Complete\" },",
          "223:  { 0x42, \"Open UE Test Loop\" },",
          "224:  { 0x43, \"Open UE Test Loop Complete\" },",
          "225:  { 0x44, \"Activate RB Test Mode\" },",
          "226:  { 0x45, \"Activate RB Test Mode Complete\" },",
          "227:  { 0x46, \"Deactivate RB Test Mode\" },",
          "228:  { 0x47, \"Deactivate RB Test Mode Complete\" },",
          "229:  { 0x48, \"Reset UE Positioning Stored Information\" },",
          "230:  { 0x49, \"UE Test Loop Mode 3 RLC SDU Counter Request\" },",
          "231:  { 0x4A, \"UE Test Loop Mode 3 RLC SDU Counter Response\" },",
          "232:  { 0x80, \"Close UE Test Loop\" },",
          "233:  { 0x81, \"Close UE Test Loop Complete\" },",
          "234:  { 0x82, \"Open UE Test Loop\" },",
          "235:  { 0x83, \"Open UE Test Loop Complete\" },",
          "236:  { 0x84, \"Activate Test Mode\" },",
          "237:  { 0x85, \"Activate Test Mode Complete\" },",
          "238:  { 0x86, \"Deactivate Test Mode\" },",
          "239:  { 0x87, \"Deactivate Test Mode Complete\" },",
          "240:  { 0x88, \"Reset UE Positioning Stored Information\" },",
          "241:  { 0x89, \"UE Test Loop Mode C MBMS Packet Counter Request\" },",
          "242:  { 0x8a, \"UE Test Loop Mode C MBMS Packet Counter Response\" },",
          "243:  { 0x8b, \"Update UE Location Information\" },",
          "244:  { 0, NULL }",
          "249:  { DE_AUTH_PARAM_RAND, \"Authentication Parameter RAND\" },",
          "250:  { DE_AUTH_PARAM_AUTN, \"Authentication Parameter AUTN (UMTS and EPS authentication challenge)\" },",
          "251:  { DE_AUTH_RESP_PARAM, \"Authentication Response Parameter\" },",
          "252:  { DE_AUTH_RESP_PARAM_EXT, \"Authentication Response Parameter (extension) (UMTS authentication challenge only)\" },",
          "253:  { DE_AUTH_FAIL_PARAM, \"Authentication Failure Parameter (UMTS and EPS authentication challenge)\" },",
          "254:  { DE_CM_SRVC_TYPE, \"CM Service Type\" },",
          "255:  { DE_ID_TYPE, \"Identity Type\" },",
          "256:  { DE_LOC_UPD_TYPE, \"Location Updating Type\" },",
          "257:  { DE_NETWORK_NAME, \"Network Name\" },",
          "258:  { DE_REJ_CAUSE, \"Reject Cause\" },",
          "259:  { DE_FOP, \"Follow-on Proceed\" },",
          "260:  { DE_TIME_ZONE, \"Time Zone\" },",
          "261:  { DE_TIME_ZONE_TIME, \"Time Zone and Time\" },",
          "262:  { DE_CTS_PERM, \"CTS Permission\" },",
          "263:  { DE_LSA_ID, \"LSA Identifier\" },",
          "264:  { DE_DAY_SAVING_TIME, \"Daylight Saving Time\" },",
          "265:  { DE_EMERGENCY_NUM_LIST, \"Emergency Number List\" },",
          "266:  { DE_ADD_UPD_PARAMS, \"Additional update parameters\" },",
          "267:  { DE_MM_TIMER, \"MM Timer\" },",
          "271:  { DE_CC_CAP, \"Call Control Capabilities\" },",
          "272:  { DE_CALL_STATE, \"Call State\" },",
          "273:  { DE_CLD_PARTY_BCD_NUM, \"Called Party BCD Number\" },",
          "274:  { DE_CLD_PARTY_SUB_ADDR, \"Called Party Subaddress\" },",
          "275:  { DE_CLG_PARTY_BCD_NUM, \"Calling Party BCD Number\" },",
          "276:  { DE_CLG_PARTY_SUB_ADDR, \"Calling Party Subaddress\" },",
          "277:  { DE_CAUSE, \"Cause\" },",
          "278:  { DE_CLIR_SUP, \"CLIR Suppression\" },",
          "279:  { DE_CLIR_INV, \"CLIR Invocation\" },",
          "280:  { DE_CONGESTION, \"Congestion Level\" },",
          "281:  { DE_CONN_NUM, \"Connected Number\" },",
          "282:  { DE_CONN_SUB_ADDR, \"Connected Subaddress\" },",
          "283:  { DE_FACILITY, \"Facility\" },",
          "284:  { DE_HLC, \"High Layer Compatibility\" },",
          "285:  { DE_KEYPAD_FACILITY, \"Keypad Facility\" },",
          "286:  { DE_LLC, \"Low Layer Compatibility\" },",
          "287:  { DE_MORE_DATA, \"More Data\" },",
          "288:  { DE_NOT_IND, \"Notification Indicator\" },",
          "289:  { DE_PROG_IND, \"Progress Indicator\" },",
          "290:  { DE_RECALL_TYPE, \"Recall type $(CCBS)$\" },",
          "291:  { DE_RED_PARTY_BCD_NUM, \"Redirecting Party BCD Number\" },",
          "292:  { DE_RED_PARTY_SUB_ADDR, \"Redirecting Party Subaddress\" },",
          "293:  { DE_REPEAT_IND, \"Repeat Indicator\" },",
          "294:  { DE_REV_CALL_SETUP_DIR, \"Reverse Call Setup Direction\" },",
          "295:  { DE_SETUP_CONTAINER, \"SETUP Container $(CCBS)$\" },",
          "296:  { DE_SIGNAL, \"Signal\" },",
          "297:  { DE_SS_VER_IND, \"SS Version Indicator\" },",
          "298:  { DE_USER_USER, \"User-user\" },",
          "300:  { DE_ALLOWED_ACTIONS, \"Allowed Actions $(CCBS)$\" },",
          "301:  { DE_SI, \"Stream Identifier\" },",
          "302:  { DE_NET_CC_CAP, \"Network Call Control Capabilities\" },",
          "308:  { DE_NET_INIT_SERV_UPG, \"Network-initiated Service Upgrade indicator\" },",
          "311:  { DE_CP_USER_DATA, \"CP-User Data\" },",
          "312:  { DE_CP_CAUSE, \"CP-Cause\" },",
          "314:  { DE_TP_SUB_CHANNEL, \"Close TCH Loop Cmd Sub-channel\"},",
          "315:  { DE_TP_ACK, \"Open Loop Cmd Ack\"},",
          "316:  { DE_TP_LOOP_TYPE, \"Close Multi-slot Loop Cmd Loop type\"},",
          "317:  { DE_TP_LOOP_ACK, \"Close Multi-slot Loop Ack Result\"},",
          "318:  { DE_TP_TESTED_DEVICE, \"Test Interface Tested device\"},",
          "319:  { DE_TP_PDU_DESCRIPTION, \"GPRS Test Mode Cmd PDU description\"},",
          "320:  { DE_TP_MODE_FLAG, \"GPRS Test Mode Cmd Mode flag\"},",
          "321:  { DE_TP_EGPRS_MODE_FLAG, \"EGPRS Start Radio Block Loopback Cmd Mode flag\"},",
          "322:  { DE_TP_MS_POSITIONING_TECHNOLOGY, \"MS Positioning Technology\"},",
          "323:  { DE_TP_UE_TEST_LOOP_MODE, \"Close UE Test Loop Mode\"},",
          "324:  { DE_TP_UE_POSITIONING_TECHNOLOGY, \"UE Positioning Technology\"},",
          "325:  { DE_TP_RLC_SDU_COUNTER_VALUE, \"RLC SDU Counter Value\"},",
          "326:  { DE_TP_EPC_UE_TEST_LOOP_MODE, \"UE Test Loop Mode\"},",
          "327:  { DE_TP_EPC_UE_TL_A_LB_SETUP, \"UE Test Loop Mode A LB Setup\"},",
          "328:  { DE_TP_EPC_UE_TL_B_LB_SETUP, \"UE Test Loop Mode B LB Setup\"},",
          "329:  { DE_TP_EPC_UE_TL_C_SETUP, \"UE Test Loop Mode C Setup\"},",
          "330:  { DE_TP_EPC_UE_POSITIONING_TECHNOLOGY, \"UE Positioning Technology\"},",
          "331:  { DE_TP_EPC_MBMS_PACKET_COUNTER_VALUE, \"MBMS Packet Counter Value\"},",
          "332:  { DE_TP_EPC_ELLIPSOID_POINT_WITH_ALT, \"Ellipsoid Point With Altitude\"},",
          "333:  { DE_TP_EPC_HORIZONTAL_VELOCITY, \"Horizontal Velocity\"},",
          "334:  { DE_TP_EPC_GNSS_TOD_MSEC, \"GNSS-TOD-msec\"},",
          "335:  { 0, NULL }",
          "340:  \"Group Call Control\",",
          "341:  \"Broadcast Call Control\",",
          "342:  \"EPS session management messages\",",
          "343:  \"Call Control; call related SS messages\",",
          "344:  \"GPRS Transparent Transport Protocol (GTTP)\",",
          "345:  \"Mobility Management messages\",",
          "346:  \"Radio Resources Management messages\",",
          "347:  \"EPS mobility management messages\",",
          "348:  \"GPRS Mobility Management messages\",",
          "349:  \"SMS messages\",",
          "350:  \"GPRS Session Management messages\",",
          "351:  \"Non call related SS messages\",",
          "352:  \"Location services specified in 3GPP TS 44.071\",",
          "353:  \"Unknown\",",
          "354:  \"Reserved for extension of the PD to one octet length\",",
          "355:  \"Special conformance testing functions\"",
          "359:  {0x0,  \"Group call control\"},",
          "360:  {0x1,  \"Broadcast call control\"},",
          "361:  {0x2,  \"EPS session management messages\"},",
          "362:  {0x3,  \"Call Control; call related SS messages\"},",
          "363:  {0x4,  \"GPRS Transparent Transport Protocol (GTTP)\"},",
          "364:  {0x5,  \"Mobility Management messages\"},",
          "365:  {0x6,  \"Radio Resources Management messages\"},",
          "366:  {0x7,  \"EPS mobility management messages\"},",
          "367:  {0x8,  \"GPRS mobility management messages\"},",
          "368:  {0x9,  \"SMS messages\"},",
          "369:  {0xa,  \"GPRS session management messages\"},",
          "370:  {0xb,  \"Non call related SS messages\"},",
          "371:  {0xc,  \"Location services specified in 3GPP TS 44.071\"},",
          "372:  {0xd,  \"Unknown\"},",
          "373:  {0xe,  \"Reserved for extension of the PD to one octet length \"},",
          "374:  {0xf,  \"Tests procedures described in 3GPP TS 44.014, 3GPP TS 34.109 and 3GPP TS 36.509\"},",
          "375:  { 0, NULL }",
          "386:  {0x7,  \"Unknown\"},",
          "388:  {0x9,  \"SMS\"},",
          "390:  {0xb,  \"SS\"},",
          "392:  {0xd,  \"Unknown\"},",
          "395:  { 0, NULL }",
          "401: #define DTAP_PD_MASK  0x0f",
          "402: #define DTAP_SKIP_MASK  0xf0",
          "403: #define DTAP_TI_MASK  DTAP_SKIP_MASK",
          "405: #define DTAP_TIE_MASK  0x7f",
          "407: #define DTAP_MM_IEI_MASK 0x3f",
          "408: #define DTAP_CC_IEI_MASK 0x3f",
          "409: #define DTAP_SMS_IEI_MASK 0xff",
          "410: #define DTAP_SS_IEI_MASK 0x3f",
          "411: #define DTAP_TP_IEI_MASK 0xff",
          "",
          "[Added Lines]",
          "126:     { 0x01, \"IMSI Detach Indication\" },",
          "127:     { 0x02, \"Location Updating Accept\" },",
          "128:     { 0x04, \"Location Updating Reject\" },",
          "129:     { 0x08, \"Location Updating Request\" },",
          "130:     { 0x11, \"Authentication Reject\" },",
          "131:     { 0x12, \"Authentication Request\" },",
          "132:     { 0x14, \"Authentication Response\" },",
          "133:     { 0x1c, \"Authentication Failure\" },",
          "134:     { 0x18, \"Identity Request\" },",
          "135:     { 0x19, \"Identity Response\" },",
          "136:     { 0x1a, \"TMSI Reallocation Command\" },",
          "137:     { 0x1b, \"TMSI Reallocation Complete\" },",
          "138:     { 0x21, \"CM Service Accept\" },",
          "139:     { 0x22, \"CM Service Reject\" },",
          "140:     { 0x23, \"CM Service Abort\" },",
          "141:     { 0x24, \"CM Service Request\" },",
          "142:     { 0x25, \"CM Service Prompt\" },",
          "143:     { 0x26, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "144:     { 0x28, \"CM Re-establishment Request\" },",
          "145:     { 0x29, \"Abort\" },",
          "146:     { 0x30, \"MM Null\" },",
          "147:     { 0x31, \"MM Status\" },",
          "148:     { 0x32, \"MM Information\" },",
          "149:     { 0, NULL }",
          "153:     { 0x01, \"Alerting\" },",
          "154:     { 0x08, \"Call Confirmed\" },",
          "155:     { 0x02, \"Call Proceeding\" },",
          "156:     { 0x07, \"Connect\" },",
          "157:     { 0x0f, \"Connect Acknowledge\" },",
          "158:     { 0x0e, \"Emergency Setup\" },",
          "159:     { 0x03, \"Progress\" },",
          "160:     { 0x04, \"CC-Establishment\" },",
          "161:     { 0x06, \"CC-Establishment Confirmed\" },",
          "162:     { 0x0b, \"Recall\" },",
          "163:     { 0x09, \"Start CC\" },",
          "164:     { 0x05, \"Setup\" },",
          "165:     { 0x17, \"Modify\" },",
          "166:     { 0x1f, \"Modify Complete\" },",
          "167:     { 0x13, \"Modify Reject\" },",
          "168:     { 0x10, \"User Information\" },",
          "169:     { 0x18, \"Hold\" },",
          "170:     { 0x19, \"Hold Acknowledge\" },",
          "171:     { 0x1a, \"Hold Reject\" },",
          "172:     { 0x1c, \"Retrieve\" },",
          "173:     { 0x1d, \"Retrieve Acknowledge\" },",
          "174:     { 0x1e, \"Retrieve Reject\" },",
          "175:     { 0x25, \"Disconnect\" },",
          "176:     { 0x2d, \"Release\" },",
          "177:     { 0x2a, \"Release Complete\" },",
          "178:     { 0x39, \"Congestion Control\" },",
          "179:     { 0x3e, \"Notify\" },",
          "180:     { 0x3d, \"Status\" },",
          "181:     { 0x34, \"Status Enquiry\" },",
          "182:     { 0x35, \"Start DTMF\" },",
          "183:     { 0x31, \"Stop DTMF\" },",
          "184:     { 0x32, \"Stop DTMF Acknowledge\" },",
          "185:     { 0x36, \"Start DTMF Acknowledge\" },",
          "186:     { 0x37, \"Start DTMF Reject\" },",
          "187:     { 0x3a, \"Facility\" },",
          "188:     { 0, NULL }",
          "192:     { 0x01, \"CP-DATA\" },",
          "193:     { 0x04, \"CP-ACK\" },",
          "194:     { 0x10, \"CP-ERROR\" },",
          "195:     { 0, NULL }",
          "199:     { 0x2a, \"Release Complete\" },",
          "200:     { 0x3a, \"Facility\" },",
          "201:     { 0x3b, \"Register\" },",
          "202:     { 0, NULL }",
          "206:     { 0x00, \"Close TCH Loop Cmd\" },",
          "207:     { 0x01, \"Close TCH Loop Ack\" },",
          "208:     { 0x06, \"Open Loop Cmd\" },",
          "209:     { 0x0c, \"Act EMMI Cmd\" },",
          "210:     { 0x0d, \"Act EMMI Ack\" },",
          "211:     { 0x10, \"Deact EMMI\" },",
          "212:     { 0x14, \"Test Interface\" },",
          "213:     { 0x20, \"Close Multi-slot Loop Cmd\" },",
          "214:     { 0x21, \"Close Multi-slot Loop Ack\" },",
          "215:     { 0x22, \"Open Multi-slot Loop Cmd\" },",
          "216:     { 0x23, \"Open Multi-slot Loop Ack\" },",
          "217:     { 0x24, \"GPRS Test Mode Cmd\" },",
          "218:     { 0x25, \"EGPRS Start Radio Block Loopback Cmd\" },",
          "219:     { 0x26, \"Reset MS Positioning Stored Information\" },",
          "220:     { 0x40, \"Close UE Test Loop\" },",
          "221:     { 0x41, \"Close UE Test Loop Complete\" },",
          "222:     { 0x42, \"Open UE Test Loop\" },",
          "223:     { 0x43, \"Open UE Test Loop Complete\" },",
          "224:     { 0x44, \"Activate RB Test Mode\" },",
          "225:     { 0x45, \"Activate RB Test Mode Complete\" },",
          "226:     { 0x46, \"Deactivate RB Test Mode\" },",
          "227:     { 0x47, \"Deactivate RB Test Mode Complete\" },",
          "228:     { 0x48, \"Reset UE Positioning Stored Information\" },",
          "229:     { 0x49, \"UE Test Loop Mode 3 RLC SDU Counter Request\" },",
          "230:     { 0x4A, \"UE Test Loop Mode 3 RLC SDU Counter Response\" },",
          "231:     { 0x80, \"Close UE Test Loop\" },",
          "232:     { 0x81, \"Close UE Test Loop Complete\" },",
          "233:     { 0x82, \"Open UE Test Loop\" },",
          "234:     { 0x83, \"Open UE Test Loop Complete\" },",
          "235:     { 0x84, \"Activate Test Mode\" },",
          "236:     { 0x85, \"Activate Test Mode Complete\" },",
          "237:     { 0x86, \"Deactivate Test Mode\" },",
          "238:     { 0x87, \"Deactivate Test Mode Complete\" },",
          "239:     { 0x88, \"Reset UE Positioning Stored Information\" },",
          "240:     { 0x89, \"UE Test Loop Mode C MBMS Packet Counter Request\" },",
          "241:     { 0x8a, \"UE Test Loop Mode C MBMS Packet Counter Response\" },",
          "242:     { 0x8b, \"Update UE Location Information\" },",
          "243:     { 0, NULL }",
          "248:     { DE_AUTH_PARAM_RAND,                  \"Authentication Parameter RAND\" },",
          "249:     { DE_AUTH_PARAM_AUTN,                  \"Authentication Parameter AUTN (UMTS and EPS authentication challenge)\" },",
          "250:     { DE_AUTH_RESP_PARAM,                  \"Authentication Response Parameter\" },",
          "251:     { DE_AUTH_RESP_PARAM_EXT,              \"Authentication Response Parameter (extension) (UMTS authentication challenge only)\" },",
          "252:     { DE_AUTH_FAIL_PARAM,                  \"Authentication Failure Parameter (UMTS and EPS authentication challenge)\" },",
          "253:     { DE_CM_SRVC_TYPE,                     \"CM Service Type\" },",
          "254:     { DE_ID_TYPE,                          \"Identity Type\" },",
          "255:     { DE_LOC_UPD_TYPE,                     \"Location Updating Type\" },",
          "256:     { DE_NETWORK_NAME,                     \"Network Name\" },",
          "257:     { DE_REJ_CAUSE,                        \"Reject Cause\" },",
          "258:     { DE_FOP,                              \"Follow-on Proceed\" },",
          "259:     { DE_TIME_ZONE,                        \"Time Zone\" },",
          "260:     { DE_TIME_ZONE_TIME,                   \"Time Zone and Time\" },",
          "261:     { DE_CTS_PERM,                         \"CTS Permission\" },",
          "262:     { DE_LSA_ID,                           \"LSA Identifier\" },",
          "263:     { DE_DAY_SAVING_TIME,                  \"Daylight Saving Time\" },",
          "264:     { DE_EMERGENCY_NUM_LIST,               \"Emergency Number List\" },",
          "265:     { DE_ADD_UPD_PARAMS,                   \"Additional update parameters\" },",
          "266:     { DE_MM_TIMER,                         \"MM Timer\" },",
          "270:     { DE_CC_CAP,                           \"Call Control Capabilities\" },",
          "271:     { DE_CALL_STATE,                       \"Call State\" },",
          "272:     { DE_CLD_PARTY_BCD_NUM,                \"Called Party BCD Number\" },",
          "273:     { DE_CLD_PARTY_SUB_ADDR,               \"Called Party Subaddress\" },",
          "274:     { DE_CLG_PARTY_BCD_NUM,                \"Calling Party BCD Number\" },",
          "275:     { DE_CLG_PARTY_SUB_ADDR,               \"Calling Party Subaddress\" },",
          "276:     { DE_CAUSE,                            \"Cause\" },",
          "277:     { DE_CLIR_SUP,                         \"CLIR Suppression\" },",
          "278:     { DE_CLIR_INV,                         \"CLIR Invocation\" },",
          "279:     { DE_CONGESTION,                       \"Congestion Level\" },",
          "280:     { DE_CONN_NUM,                         \"Connected Number\" },",
          "281:     { DE_CONN_SUB_ADDR,                    \"Connected Subaddress\" },",
          "282:     { DE_FACILITY,                         \"Facility\" },",
          "283:     { DE_HLC,                              \"High Layer Compatibility\" },",
          "284:     { DE_KEYPAD_FACILITY,                  \"Keypad Facility\" },",
          "285:     { DE_LLC,                              \"Low Layer Compatibility\" },",
          "286:     { DE_MORE_DATA,                        \"More Data\" },",
          "287:     { DE_NOT_IND,                          \"Notification Indicator\" },",
          "288:     { DE_PROG_IND,                         \"Progress Indicator\" },",
          "289:     { DE_RECALL_TYPE,                      \"Recall type $(CCBS)$\" },",
          "290:     { DE_RED_PARTY_BCD_NUM,                \"Redirecting Party BCD Number\" },",
          "291:     { DE_RED_PARTY_SUB_ADDR,               \"Redirecting Party Subaddress\" },",
          "292:     { DE_REPEAT_IND,                       \"Repeat Indicator\" },",
          "293:     { DE_REV_CALL_SETUP_DIR,               \"Reverse Call Setup Direction\" },",
          "294:     { DE_SETUP_CONTAINER,                  \"SETUP Container $(CCBS)$\" },",
          "295:     { DE_SIGNAL,                           \"Signal\" },",
          "296:     { DE_SS_VER_IND,                       \"SS Version Indicator\" },",
          "297:     { DE_USER_USER,                        \"User-user\" },",
          "299:     { DE_ALLOWED_ACTIONS,                  \"Allowed Actions $(CCBS)$\" },",
          "300:     { DE_SI,                               \"Stream Identifier\" },",
          "301:     { DE_NET_CC_CAP,                       \"Network Call Control Capabilities\" },",
          "307:     { DE_NET_INIT_SERV_UPG,                \"Network-initiated Service Upgrade indicator\" },",
          "310:     { DE_CP_USER_DATA,                     \"CP-User Data\" },",
          "311:     { DE_CP_CAUSE,                         \"CP-Cause\" },",
          "313:     { DE_TP_SUB_CHANNEL,                   \"Close TCH Loop Cmd Sub-channel\"},",
          "314:     { DE_TP_ACK,                           \"Open Loop Cmd Ack\"},",
          "315:     { DE_TP_LOOP_TYPE,                     \"Close Multi-slot Loop Cmd Loop type\"},",
          "316:     { DE_TP_LOOP_ACK,                      \"Close Multi-slot Loop Ack Result\"},",
          "317:     { DE_TP_TESTED_DEVICE,                 \"Test Interface Tested device\"},",
          "318:     { DE_TP_PDU_DESCRIPTION,               \"GPRS Test Mode Cmd PDU description\"},",
          "319:     { DE_TP_MODE_FLAG,                     \"GPRS Test Mode Cmd Mode flag\"},",
          "320:     { DE_TP_EGPRS_MODE_FLAG,               \"EGPRS Start Radio Block Loopback Cmd Mode flag\"},",
          "321:     { DE_TP_MS_POSITIONING_TECHNOLOGY,     \"MS Positioning Technology\"},",
          "322:     { DE_TP_UE_TEST_LOOP_MODE,             \"Close UE Test Loop Mode\"},",
          "323:     { DE_TP_UE_POSITIONING_TECHNOLOGY,     \"UE Positioning Technology\"},",
          "324:     { DE_TP_RLC_SDU_COUNTER_VALUE,         \"RLC SDU Counter Value\"},",
          "325:     { DE_TP_EPC_UE_TEST_LOOP_MODE,         \"UE Test Loop Mode\"},",
          "326:     { DE_TP_EPC_UE_TL_A_LB_SETUP,          \"UE Test Loop Mode A LB Setup\"},",
          "327:     { DE_TP_EPC_UE_TL_B_LB_SETUP,          \"UE Test Loop Mode B LB Setup\"},",
          "328:     { DE_TP_EPC_UE_TL_C_SETUP,             \"UE Test Loop Mode C Setup\"},",
          "329:     { DE_TP_EPC_UE_POSITIONING_TECHNOLOGY, \"UE Positioning Technology\"},",
          "330:     { DE_TP_EPC_MBMS_PACKET_COUNTER_VALUE, \"MBMS Packet Counter Value\"},",
          "331:     { DE_TP_EPC_ELLIPSOID_POINT_WITH_ALT,  \"Ellipsoid Point With Altitude\"},",
          "332:     { DE_TP_EPC_HORIZONTAL_VELOCITY,       \"Horizontal Velocity\"},",
          "333:     { DE_TP_EPC_GNSS_TOD_MSEC,             \"GNSS-TOD-msec\"},",
          "334:     { 0, NULL }",
          "339:     \"Group Call Control\",",
          "340:     \"Broadcast Call Control\",",
          "341:     \"EPS session management messages\",",
          "342:     \"Call Control; call related SS messages\",",
          "343:     \"GPRS Transparent Transport Protocol (GTTP)\",",
          "344:     \"Mobility Management messages\",",
          "345:     \"Radio Resources Management messages\",",
          "346:     \"EPS mobility management messages\",",
          "347:     \"GPRS Mobility Management messages\",",
          "348:     \"SMS messages\",",
          "349:     \"GPRS Session Management messages\",",
          "350:     \"Non call related SS messages\",",
          "351:     \"Location services specified in 3GPP TS 44.071\",",
          "352:     \"Unknown\",",
          "353:     \"Reserved for extension of the PD to one octet length\",",
          "354:     \"Special conformance testing functions\"",
          "358:     {0x0,       \"Group call control\"},",
          "359:     {0x1,       \"Broadcast call control\"},",
          "360:     {0x2,       \"EPS session management messages\"},",
          "361:     {0x3,       \"Call Control; call related SS messages\"},",
          "362:     {0x4,       \"GPRS Transparent Transport Protocol (GTTP)\"},",
          "363:     {0x5,       \"Mobility Management messages\"},",
          "364:     {0x6,       \"Radio Resources Management messages\"},",
          "365:     {0x7,       \"EPS mobility management messages\"},",
          "366:     {0x8,       \"GPRS mobility management messages\"},",
          "367:     {0x9,       \"SMS messages\"},",
          "368:     {0xa,       \"GPRS session management messages\"},",
          "369:     {0xb,       \"Non call related SS messages\"},",
          "370:     {0xc,       \"Location services specified in 3GPP TS 44.071\"},",
          "371:     {0xd,       \"Unknown\"},",
          "372:     {0xe,       \"Reserved for extension of the PD to one octet length \"},",
          "373:     {0xf,       \"Tests procedures described in 3GPP TS 44.014, 3GPP TS 34.109 and 3GPP TS 36.509\"},",
          "374:     { 0,    NULL }",
          "385:     {0x7,       \"Unknown\"},",
          "387:     {0x9,       \"SMS\"},",
          "389:     {0xb,       \"SS\"},",
          "391:     {0xd,       \"Unknown\"},",
          "394:     { 0,    NULL }",
          "400: #define DTAP_PD_MASK        0x0f",
          "401: #define DTAP_SKIP_MASK      0xf0",
          "402: #define DTAP_TI_MASK        DTAP_SKIP_MASK",
          "404: #define DTAP_TIE_MASK       0x7f",
          "406: #define DTAP_MM_IEI_MASK    0x3f",
          "407: #define DTAP_CC_IEI_MASK    0x3f",
          "408: #define DTAP_SMS_IEI_MASK   0xff",
          "409: #define DTAP_SS_IEI_MASK    0x3f",
          "410: #define DTAP_TP_IEI_MASK    0xff",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "422: int hf_gsm_a_dtap_elem_id = -1;",
          "423: static int hf_gsm_a_dtap_cld_party_bcd_num = -1;",
          "424: static int hf_gsm_a_dtap_clg_party_bcd_num = -1;",
          "426: static int hf_gsm_a_dtap_red_party_bcd_num = -1;",
          "427: static int hf_gsm_a_dtap_present_ind = -1;",
          "428: static int hf_gsm_a_dtap_screening_ind = -1;",
          "432: static int hf_gsm_a_dtap_cause = -1;",
          "435: static int hf_gsm_a_dtap_emerg_num_info_length = -1;",
          "437: static int hf_gsm_a_dtap_type_of_number = -1;",
          "",
          "[Removed Lines]",
          "425: static int hf_gsm_a_dtap_conn_num = -1;",
          "429: static int hf_gsm_a_dtap_type_of_sub_addr = -1;",
          "430: static int hf_gsm_a_dtap_odd_even_ind = -1;",
          "433: static int hf_gsm_a_dtap_cause_ss_diagnostics = -1;",
          "434: static int hf_gsm_a_dtap_emergency_bcd_num = -1;",
          "",
          "[Added Lines]",
          "424: static int hf_gsm_a_dtap_conn_num   = -1;",
          "428: static int hf_gsm_a_dtap_type_of_sub_addr   = -1;",
          "429: static int hf_gsm_a_dtap_odd_even_ind   = -1;",
          "432: static int hf_gsm_a_dtap_cause_ss_diagnostics   = -1;",
          "433: static int hf_gsm_a_dtap_emergency_bcd_num  = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476: static int hf_gsm_a_dtap_codec_pdc_efr = -1;",
          "478: static int hf_gsm_a_dtap_notification_description = -1;",
          "495: static int hf_gsm_a_dtap_autn_sqn_xor_ak = -1;",
          "501: static int hf_gsm_a_dtap_epc_ue_tl_mode = -1;",
          "502: static int hf_gsm_a_dtap_epc_ue_tl_a_ul_sdu_size = -1;",
          "",
          "[Removed Lines]",
          "479: static int hf_gsm_a_dtap_recall_type = -1;",
          "480: static int hf_gsm_a_dtap_coding_standard = -1;",
          "481: static int hf_gsm_a_dtap_call_state = -1;",
          "482: static int hf_gsm_a_dtap_prog_coding_standard  = -1;",
          "483: static int hf_gsm_a_dtap_location = -1;",
          "484: static int hf_gsm_a_dtap_progress_description = -1;",
          "485: static int hf_gsm_a_dtap_afi = -1;",
          "486: static int hf_gsm_a_dtap_rej_cause = -1;",
          "487: static int hf_gsm_a_dtap_u2u_prot_discr = -1;",
          "488: static int hf_gsm_a_dtap_mcat = -1;",
          "489: static int hf_gsm_a_dtap_enicm = -1;",
          "490: static int hf_gsm_a_dtap_rand = -1;",
          "491: static int hf_gsm_a_dtap_autn = -1;",
          "492: static int hf_gsm_a_dtap_xres = -1;",
          "493: static int hf_gsm_a_dtap_sres = -1;",
          "494: static int hf_gsm_a_dtap_auts = -1;",
          "496: static int hf_gsm_a_dtap_autn_amf = -1;",
          "497: static int hf_gsm_a_dtap_autn_mac = -1;",
          "498: static int hf_gsm_a_dtap_auts_sqn_ms_xor_ak  = -1;",
          "499: static int hf_gsm_a_dtap_auts_mac_s = -1;",
          "",
          "[Added Lines]",
          "478: static int hf_gsm_a_dtap_recall_type    = -1;",
          "479: static int hf_gsm_a_dtap_coding_standard    = -1;",
          "480: static int hf_gsm_a_dtap_call_state = -1;",
          "481: static int hf_gsm_a_dtap_prog_coding_standard    = -1;",
          "482: static int hf_gsm_a_dtap_location   = -1;",
          "483: static int hf_gsm_a_dtap_progress_description   = -1;",
          "484: static int hf_gsm_a_dtap_afi    = -1;",
          "485: static int hf_gsm_a_dtap_rej_cause  = -1;",
          "486: static int hf_gsm_a_dtap_u2u_prot_discr = -1;",
          "487: static int hf_gsm_a_dtap_mcat   = -1;",
          "488: static int hf_gsm_a_dtap_enicm  = -1;",
          "489: static int hf_gsm_a_dtap_rand   = -1;",
          "490: static int hf_gsm_a_dtap_autn   = -1;",
          "491: static int hf_gsm_a_dtap_xres   = -1;",
          "492: static int hf_gsm_a_dtap_sres   = -1;",
          "493: static int hf_gsm_a_dtap_auts   = -1;",
          "495: static int hf_gsm_a_dtap_autn_amf   = -1;",
          "496: static int hf_gsm_a_dtap_autn_mac   = -1;",
          "497: static int hf_gsm_a_dtap_auts_sqn_ms_xor_ak  = -1;",
          "498: static int hf_gsm_a_dtap_auts_mac_s = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "654: static gint is_uplink;",
          "655: static guint8 epc_test_loop_mode;",
          "658: gint ett_gsm_dtap_elem[NUM_GSM_DTAP_ELEM];",
          "660: static dgt_set_t Dgt_mbcd = {",
          "665: };",
          "",
          "[Removed Lines]",
          "657: #define NUM_GSM_DTAP_ELEM (sizeof(gsm_dtap_elem_strings)/sizeof(value_string))",
          "661:  {",
          "663:    '0','1','2','3','4','5','6','7','8','9','*','#','a','b','c','?'",
          "664:  }",
          "",
          "[Added Lines]",
          "656: #define NUM_GSM_DTAP_ELEM (sizeof(gsm_dtap_elem_strings)/sizeof(value_string))",
          "660:     {",
          "662:       '0','1','2','3','4','5','6','7','8','9','*','#','a','b','c','?'",
          "663:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "670: static guint16",
          "671: de_auth_param_rand(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "672: {",
          "678: }",
          "",
          "[Removed Lines]",
          "674:  proto_tree_add_item(tree, hf_gsm_a_dtap_rand, tvb, offset, 16, ENC_NA);",
          "677:  return(16);",
          "",
          "[Added Lines]",
          "673:     proto_tree_add_item(tree, hf_gsm_a_dtap_rand, tvb, offset, 16, ENC_NA);",
          "676:     return (16);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "683: static guint16",
          "684: de_auth_param_autn(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "685: {",
          "702: }",
          "",
          "[Removed Lines]",
          "686:  proto_item *item;",
          "687:  proto_tree *subtree;",
          "689:  item = proto_tree_add_item(tree, hf_gsm_a_dtap_autn, tvb, offset, len, ENC_NA);",
          "690:  subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_AUTH_PARAM_AUTN]);",
          "692:  if(len == 16)",
          "693:  {",
          "694:   proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_sqn_xor_ak, tvb, offset, 6, ENC_NA);",
          "695:   proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_amf, tvb, offset + 6, 2, ENC_NA);",
          "696:   proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_mac, tvb, offset + 8, 8, ENC_NA);",
          "697:  }",
          "698:  else",
          "699:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_autn);",
          "701:  return(len);",
          "",
          "[Added Lines]",
          "685:     proto_item *item;",
          "686:     proto_tree *subtree;",
          "688:     item = proto_tree_add_item(tree, hf_gsm_a_dtap_autn, tvb, offset, len, ENC_NA);",
          "689:     subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_AUTH_PARAM_AUTN]);",
          "691:     if (len == 16)",
          "692:     {",
          "693:         proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_sqn_xor_ak, tvb, offset, 6, ENC_NA);",
          "694:         proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_amf, tvb, offset + 6, 2, ENC_NA);",
          "695:         proto_tree_add_item(subtree, hf_gsm_a_dtap_autn_mac, tvb, offset + 8, 8, ENC_NA);",
          "696:     }",
          "697:     else",
          "698:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_autn);",
          "700:     return (len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "707: static guint16",
          "708: de_auth_resp_param(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "709: {",
          "715: }",
          "",
          "[Removed Lines]",
          "711:  proto_tree_add_item(tree, hf_gsm_a_dtap_sres, tvb, offset, 4, ENC_NA);",
          "714:  return(4);",
          "",
          "[Added Lines]",
          "710:     proto_tree_add_item(tree, hf_gsm_a_dtap_sres, tvb, offset, 4, ENC_NA);",
          "713:     return (4);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "720: static guint16",
          "721: de_auth_resp_param_ext(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "722: {",
          "727: }",
          "",
          "[Removed Lines]",
          "724:  proto_tree_add_item(tree, hf_gsm_a_dtap_xres, tvb, offset, len, ENC_NA);",
          "726:  return(len);",
          "",
          "[Added Lines]",
          "723:     proto_tree_add_item(tree, hf_gsm_a_dtap_xres, tvb, offset, len, ENC_NA);",
          "725:     return (len);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "732: static guint16",
          "733: de_auth_fail_param(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "734: {",
          "750: }",
          "",
          "[Removed Lines]",
          "735:  proto_item *item;",
          "736:  proto_tree *subtree;",
          "738:  item = proto_tree_add_item(tree, hf_gsm_a_dtap_auts, tvb, offset, len, ENC_NA);",
          "739:  subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_AUTH_FAIL_PARAM]);",
          "741:  if(len == 14)",
          "742:  {",
          "743:   proto_tree_add_item(subtree, hf_gsm_a_dtap_auts_sqn_ms_xor_ak, tvb, offset, 6, ENC_NA);",
          "744:   proto_tree_add_item(subtree, hf_gsm_a_dtap_auts_mac_s, tvb, offset + 6, 8, ENC_NA);",
          "745:  }",
          "746:  else",
          "747:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_auts);",
          "749:  return(len);",
          "",
          "[Added Lines]",
          "734:     proto_item *item;",
          "735:     proto_tree *subtree;",
          "737:     item = proto_tree_add_item(tree, hf_gsm_a_dtap_auts, tvb, offset, len, ENC_NA);",
          "738:     subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_AUTH_FAIL_PARAM]);",
          "740:     if (len == 14)",
          "741:     {",
          "742:         proto_tree_add_item(subtree, hf_gsm_a_dtap_auts_sqn_ms_xor_ak, tvb, offset, 6, ENC_NA);",
          "743:         proto_tree_add_item(subtree, hf_gsm_a_dtap_auts_mac_s, tvb, offset + 6, 8, ENC_NA);",
          "744:     }",
          "745:     else",
          "746:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_auts);",
          "748:     return (len);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "767: static const value_string gsm_a_dtap_number_of_spare_bits_vals[] = {",
          "777: };",
          "779: const true_false_string tfs_add_ci = { \"The MS should add the letters for the Country's Initials and a separator (e.g. a space) to the text string\",",
          "",
          "[Removed Lines]",
          "768:  { 0, \"this field carries no information about the number of spare bits in octet n\"},",
          "769:  { 1, \"bit 8 is spare and set to '0' in octet n\"},",
          "770:  { 2, \"bits 7 and 8 are spare and set to '0' in octet n\"},",
          "771:  { 3, \"bits 6 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "772:  { 4, \"bits 5 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "773:  { 5, \"bits 4 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "774:  { 6, \"bits 3 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "775:  { 7, \"bits 2 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "776:  { 0, NULL }",
          "",
          "[Added Lines]",
          "767:     { 0, \"this field carries no information about the number of spare bits in octet n\"},",
          "768:     { 1, \"bit 8 is spare and set to '0' in octet n\"},",
          "769:     { 2, \"bits 7 and 8 are spare and set to '0' in octet n\"},",
          "770:     { 3, \"bits 6 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "771:     { 4, \"bits 5 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "772:     { 5, \"bits 4 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "773:     { 6, \"bits 3 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "774:     { 7, \"bits 2 to 8(inclusive) are spare and set to '0' in octet n\"},",
          "775:     { 0, NULL }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "782: static guint16",
          "783: de_network_name(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "784: {",
          "839: }",
          "844: static const range_string gsm_a_dtap_rej_cause_vals[] = {",
          "874: };",
          "876: guint16",
          "877: de_rej_cause(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "878: {",
          "899: }",
          "",
          "[Removed Lines]",
          "785:  guint8       oct;",
          "786:  guint32      curr_offset;",
          "787:  const gchar *str;",
          "788:  guint8       coding_scheme, num_spare_bits;",
          "789:  guint32      num_text_bits;",
          "790:  gchar       *net_name     = NULL;",
          "791:  proto_item  *item;",
          "793:  curr_offset = offset;",
          "795:  oct = tvb_get_guint8(tvb, curr_offset);",
          "797:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "799:  coding_scheme = (oct & 0x70) >> 4;",
          "800:  switch (coding_scheme)",
          "801:  {",
          "802:  case 0x00: str = \"Cell Broadcast data coding scheme, GSM default alphabet, language unspecified, defined in 3GPP TS 23.038\"; break;",
          "803:  case 0x01: str = \"UCS2 (16 bit)\"; break;",
          "804:  default:",
          "805:   str = \"Reserved\";",
          "806:  break;",
          "807:  }",
          "809:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_coding_scheme, tvb, curr_offset, 1, oct, \"%s\", str);",
          "810:  proto_tree_add_item(tree, hf_gsm_a_dtap_add_ci, tvb, curr_offset, 1, ENC_NA);",
          "812:  num_spare_bits = oct & 0x07;",
          "813:  item = proto_tree_add_item(tree, hf_gsm_a_dtap_number_of_spare_bits, tvb, curr_offset, 1, ENC_NA);",
          "814:  curr_offset++;",
          "816:  NO_MORE_DATA_CHECK(len);",
          "817:  switch(coding_scheme)",
          "818:  {",
          "819:  case 0:",
          "821:   num_text_bits = ((len - 1) << 3) - num_spare_bits;",
          "822:   if (num_spare_bits && (num_text_bits % 7))",
          "823:   {",
          "824:    expert_add_info(pinfo, item, &ei_gsm_a_dtap_text_string_not_multiple_of_7);",
          "825:   }",
          "826:   proto_tree_add_ts_23_038_7bits_item(tree, hf_gsm_a_dtap_text_string, tvb, curr_offset<<3, num_text_bits/7);",
          "827:   break;",
          "828:  case 1:",
          "829:   net_name = tvb_get_string_enc(wmem_packet_scope(), tvb, curr_offset, (len - 1), ENC_UCS_2|ENC_BIG_ENDIAN);",
          "830:   proto_tree_add_string(tree, hf_gsm_a_dtap_text_string, tvb, curr_offset, len - 1, net_name);",
          "831:   break;",
          "832:  default:",
          "833:   proto_tree_add_text(tree,",
          "834:    tvb, curr_offset, len - 1,",
          "835:    \"Text string encoded according to an unknown Coding Scheme\");",
          "836:  }",
          "838:  return(len);",
          "845:  { 0x02, 0x02, \"IMSI unknown in HLR\"},",
          "846:  { 0x03, 0x03, \"Illegal MS\"},",
          "847:  { 0x04, 0x04, \"IMSI unknown in VLR\"},",
          "848:  { 0x05, 0x05, \"IMEI not accepted\"},",
          "849:  { 0x06, 0x06, \"Illegal ME\"},",
          "850:  { 0x0b, 0x0b, \"PLMN not allowed\"},",
          "851:  { 0x0c, 0x0c, \"Location Area not allowed\"},",
          "852:  { 0x0d, 0x0d, \"Roaming not allowed in this location area\"},",
          "853:  { 0x0f, 0x0f, \"No Suitable Cells In Location Area\"},",
          "854:  { 0x11, 0x11, \"Network failure\"},",
          "855:  { 0x14, 0x14, \"MAC failure\"},",
          "856:  { 0x15, 0x15, \"Synch failure\"},",
          "857:  { 0x16, 0x16, \"Congestion\"},",
          "858:  { 0x17, 0x17, \"GSM authentication unacceptable\"},",
          "859:  { 0x19, 0x19, \"Not authorized for this CSG\"},",
          "860:  { 0x20, 0x20, \"Service option not supported\"},",
          "861:  { 0x21, 0x21, \"Requested service option not subscribed\"},",
          "862:  { 0x22, 0x22, \"Service option temporarily out of order\"},",
          "863:  { 0x26, 0x26, \"Call cannot be identified\"},",
          "864:  { 0x30, 0x3f, \"Retry upon entry into a new cell\"},",
          "865:  { 0x5f, 0x5f, \"Semantically incorrect message\"},",
          "866:  { 0x60, 0x60, \"Invalid mandatory information\"},",
          "867:  { 0x61, 0x61, \"Message type non-existent or not implemented\"},",
          "868:  { 0x62, 0x62, \"Message type not compatible with the protocol state\"},",
          "869:  { 0x63, 0x63, \"Information element non-existent or not implemented\"},",
          "870:  { 0x64, 0x64, \"Conditional IE error\"},",
          "871:  { 0x65, 0x65, \"Message not compatible with the protocol state\"},",
          "872:  { 0x6f, 0x6f, \"Protocol error, unspecified\"},",
          "873:  { 0, 0, NULL }",
          "879:  guint8       oct;",
          "880:  const gchar *str;",
          "882:  oct = tvb_get_guint8(tvb, offset);",
          "884:  str = try_rval_to_str(oct, gsm_a_dtap_rej_cause_vals);",
          "885:  if(!str)",
          "886:  {",
          "887:   if(is_uplink == IS_UPLINK_TRUE)",
          "888:    str = \"Protocol error, unspecified\";",
          "889:   else",
          "890:    str = \"Service option temporarily out of order\";",
          "891:  }",
          "893:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_rej_cause, tvb,",
          "894:     offset, 1, oct, \"%s (%u)\", str, oct);",
          "898:  return(1);",
          "",
          "[Added Lines]",
          "784:     guint8       oct;",
          "785:     guint32      curr_offset;",
          "786:     const gchar *str;",
          "787:     guint8       coding_scheme, num_spare_bits;",
          "788:     guint32      num_text_bits;",
          "789:     gchar       *net_name     = NULL;",
          "790:     proto_item  *item;",
          "792:     curr_offset = offset;",
          "794:     oct = tvb_get_guint8(tvb, curr_offset);",
          "796:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "798:     coding_scheme = (oct & 0x70) >> 4;",
          "799:     switch (coding_scheme)",
          "800:     {",
          "801:     case 0x00: str = \"Cell Broadcast data coding scheme, GSM default alphabet, language unspecified, defined in 3GPP TS 23.038\"; break;",
          "802:     case 0x01: str = \"UCS2 (16 bit)\"; break;",
          "803:     default:",
          "804:         str = \"Reserved\";",
          "805:     break;",
          "806:     }",
          "808:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_coding_scheme, tvb, curr_offset, 1, oct, \"%s\", str);",
          "809:     proto_tree_add_item(tree, hf_gsm_a_dtap_add_ci, tvb, curr_offset, 1, ENC_NA);",
          "811:     num_spare_bits = oct & 0x07;",
          "812:     item = proto_tree_add_item(tree, hf_gsm_a_dtap_number_of_spare_bits, tvb, curr_offset, 1, ENC_NA);",
          "813:     curr_offset++;",
          "815:     NO_MORE_DATA_CHECK(len);",
          "816:     switch (coding_scheme)",
          "817:     {",
          "818:     case 0:",
          "820:         num_text_bits = ((len - 1) << 3) - num_spare_bits;",
          "821:         if (num_spare_bits && (num_text_bits % 7))",
          "822:         {",
          "823:             expert_add_info(pinfo, item, &ei_gsm_a_dtap_text_string_not_multiple_of_7);",
          "824:         }",
          "825:         proto_tree_add_ts_23_038_7bits_item(tree, hf_gsm_a_dtap_text_string, tvb, curr_offset<<3, num_text_bits/7);",
          "826:         break;",
          "827:     case 1:",
          "828:         net_name = tvb_get_string_enc(wmem_packet_scope(), tvb, curr_offset, (len - 1), ENC_UCS_2|ENC_BIG_ENDIAN);",
          "829:         proto_tree_add_string(tree, hf_gsm_a_dtap_text_string, tvb, curr_offset, len - 1, net_name);",
          "830:         break;",
          "831:     default:",
          "832:         proto_tree_add_text(tree,",
          "833:             tvb, curr_offset, len - 1,",
          "834:             \"Text string encoded according to an unknown Coding Scheme\");",
          "835:     }",
          "837:     return (len);",
          "844:     { 0x02, 0x02, \"IMSI unknown in HLR\"},",
          "845:     { 0x03, 0x03, \"Illegal MS\"},",
          "846:     { 0x04, 0x04, \"IMSI unknown in VLR\"},",
          "847:     { 0x05, 0x05, \"IMEI not accepted\"},",
          "848:     { 0x06, 0x06, \"Illegal ME\"},",
          "849:     { 0x0b, 0x0b, \"PLMN not allowed\"},",
          "850:     { 0x0c, 0x0c, \"Location Area not allowed\"},",
          "851:     { 0x0d, 0x0d, \"Roaming not allowed in this location area\"},",
          "852:     { 0x0f, 0x0f, \"No Suitable Cells In Location Area\"},",
          "853:     { 0x11, 0x11, \"Network failure\"},",
          "854:     { 0x14, 0x14, \"MAC failure\"},",
          "855:     { 0x15, 0x15, \"Synch failure\"},",
          "856:     { 0x16, 0x16, \"Congestion\"},",
          "857:     { 0x17, 0x17, \"GSM authentication unacceptable\"},",
          "858:     { 0x19, 0x19, \"Not authorized for this CSG\"},",
          "859:     { 0x20, 0x20, \"Service option not supported\"},",
          "860:     { 0x21, 0x21, \"Requested service option not subscribed\"},",
          "861:     { 0x22, 0x22, \"Service option temporarily out of order\"},",
          "862:     { 0x26, 0x26, \"Call cannot be identified\"},",
          "863:     { 0x30, 0x3f, \"Retry upon entry into a new cell\"},",
          "864:     { 0x5f, 0x5f, \"Semantically incorrect message\"},",
          "865:     { 0x60, 0x60, \"Invalid mandatory information\"},",
          "866:     { 0x61, 0x61, \"Message type non-existent or not implemented\"},",
          "867:     { 0x62, 0x62, \"Message type not compatible with the protocol state\"},",
          "868:     { 0x63, 0x63, \"Information element non-existent or not implemented\"},",
          "869:     { 0x64, 0x64, \"Conditional IE error\"},",
          "870:     { 0x65, 0x65, \"Message not compatible with the protocol state\"},",
          "871:     { 0x6f, 0x6f, \"Protocol error, unspecified\"},",
          "872:     { 0, 0, NULL }",
          "878:     guint8       oct;",
          "879:     const gchar *str;",
          "881:     oct = tvb_get_guint8(tvb, offset);",
          "883:     str = try_rval_to_str(oct, gsm_a_dtap_rej_cause_vals);",
          "884:     if (!str)",
          "885:     {",
          "886:         if (is_uplink == IS_UPLINK_TRUE)",
          "887:             str = \"Protocol error, unspecified\";",
          "888:         else",
          "889:             str = \"Service option temporarily out of order\";",
          "890:     }",
          "892:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_rej_cause, tvb,",
          "893:                 offset, 1, oct, \"%s (%u)\", str, oct);",
          "897:     return (1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "908: guint16",
          "909: de_time_zone(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "910: {",
          "939: }",
          "",
          "[Removed Lines]",
          "911:  guint8 oct;",
          "912:  guint32 curr_offset;",
          "913:  char    sign;",
          "915:  curr_offset = offset;",
          "926:  oct = tvb_get_guint8(tvb, curr_offset);",
          "927:  sign = (oct & 0x08)?'-':'+';",
          "928:  oct = (oct >> 4) + (oct & 0x07) * 10;",
          "930:  proto_tree_add_text(tree,",
          "931:   tvb, curr_offset, 1,",
          "932:   \"Timezone: GMT %c %d hours %d minutes\",",
          "933:   sign, oct / 4, oct % 4 * 15);",
          "934:  curr_offset++;",
          "938:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "910:     guint8  oct;",
          "911:     guint32 curr_offset;",
          "912:     char    sign;",
          "914:     curr_offset = offset;",
          "925:     oct = tvb_get_guint8(tvb, curr_offset);",
          "926:     sign = (oct & 0x08)?'-':'+';",
          "927:     oct = (oct >> 4) + (oct & 0x07) * 10;",
          "929:     proto_tree_add_text(tree,",
          "930:         tvb, curr_offset, 1,",
          "931:         \"Timezone: GMT %c %d hours %d minutes\",",
          "932:         sign, oct / 4, oct % 4 * 15);",
          "933:     curr_offset++;",
          "937:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "944: static guint16",
          "945: de_time_zone_time(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "946: {",
          "951:     struct tm tm;",
          "1003: }",
          "",
          "[Removed Lines]",
          "947:  guint8 oct;",
          "948:  guint32 curr_offset;",
          "949:  char    sign;",
          "950:  nstime_t tv;",
          "953:  curr_offset = offset;",
          "956:  tm.tm_wday = 0;",
          "957:  tm.tm_yday = 0;",
          "958:  tm.tm_isdst = -1;",
          "960:  oct = tvb_get_guint8(tvb, curr_offset);",
          "961:  tm.tm_year = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4) + 100;",
          "962:  oct = tvb_get_guint8(tvb, curr_offset+1);",
          "963:  tm.tm_mon = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4) - 1;",
          "964:  oct = tvb_get_guint8(tvb, curr_offset+2);",
          "965:  tm.tm_mday = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "966:  oct = tvb_get_guint8(tvb, curr_offset+3);",
          "967:  tm.tm_hour = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "968:  oct = tvb_get_guint8(tvb, curr_offset+4);",
          "969:  tm.tm_min = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "970:  oct = tvb_get_guint8(tvb, curr_offset+5);",
          "971:  tm.tm_sec = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "973:  tv.secs = mktime(&tm);",
          "974:  tv.nsecs = 0;",
          "976:  proto_tree_add_time_format_value(tree, hf_gsm_a_dtap_time_zone_time, tvb, curr_offset, 6,",
          "977:                                   &tv, \"%s\", abs_time_to_str(wmem_packet_scope(), &tv, ABSOLUTE_TIME_LOCAL, FALSE));",
          "978:  curr_offset += 6;",
          "989:  oct = tvb_get_guint8(tvb, curr_offset);",
          "990:  sign = (oct & 0x08)?'-':'+';",
          "991:  oct = (oct >> 4) + (oct & 0x07) * 10;",
          "993:  proto_tree_add_text(tree,",
          "994:   tvb, curr_offset, 1,",
          "995:   \"Timezone: GMT %c %d hours %d minutes\",",
          "996:   sign, oct / 4, oct % 4 * 15);",
          "998:  curr_offset++;",
          "1002:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "946:     guint8  oct;",
          "947:     guint32 curr_offset;",
          "948:     char    sign;",
          "949:     nstime_t tv;",
          "952:     curr_offset = offset;",
          "955:     tm.tm_wday = 0;",
          "956:     tm.tm_yday = 0;",
          "957:     tm.tm_isdst = -1;",
          "959:     oct = tvb_get_guint8(tvb, curr_offset);",
          "960:     tm.tm_year = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4) + 100;",
          "961:     oct = tvb_get_guint8(tvb, curr_offset+1);",
          "962:     tm.tm_mon = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4) - 1;",
          "963:     oct = tvb_get_guint8(tvb, curr_offset+2);",
          "964:     tm.tm_mday = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "965:     oct = tvb_get_guint8(tvb, curr_offset+3);",
          "966:     tm.tm_hour = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "967:     oct = tvb_get_guint8(tvb, curr_offset+4);",
          "968:     tm.tm_min = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "969:     oct = tvb_get_guint8(tvb, curr_offset+5);",
          "970:     tm.tm_sec = (oct & 0x0f)*10 + ((oct & 0xf0) >> 4);",
          "972:     tv.secs = mktime(&tm);",
          "973:     tv.nsecs = 0;",
          "975:     proto_tree_add_time_format_value(tree, hf_gsm_a_dtap_time_zone_time, tvb, curr_offset, 6,",
          "976:                                      &tv, \"%s\", abs_time_to_str(wmem_packet_scope(), &tv, ABSOLUTE_TIME_LOCAL, FALSE));",
          "977:     curr_offset += 6;",
          "988:     oct = tvb_get_guint8(tvb, curr_offset);",
          "989:     sign = (oct & 0x08)?'-':'+';",
          "990:     oct = (oct >> 4) + (oct & 0x07) * 10;",
          "992:     proto_tree_add_text(tree,",
          "993:         tvb, curr_offset, 1,",
          "994:         \"Timezone: GMT %c %d hours %d minutes\",",
          "995:         sign, oct / 4, oct % 4 * 15);",
          "997:     curr_offset++;",
          "1001:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1012: static guint16",
          "1013: de_lsa_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "1014: {",
          "1030: }",
          "1035: static const value_string gsm_a_dtap_dst_adjustment_vals[] = {",
          "1041: };",
          "1043: static guint16",
          "1044: de_day_saving_time(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "1045: {",
          "1058: }",
          "",
          "[Removed Lines]",
          "1015:  guint32 curr_offset;",
          "1017:  curr_offset = offset;",
          "1019:  if (len == 0){",
          "1020:   proto_tree_add_text(tree,tvb, curr_offset, len,\"LSA ID not included\");",
          "1021:  }else{",
          "1022:   proto_tree_add_item(tree, hf_gsm_a_dtap_lsa_id, tvb, curr_offset, 3, ENC_BIG_ENDIAN);",
          "1023:  }",
          "1025:  curr_offset += len;",
          "1027:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1029:  return(curr_offset - offset);",
          "1036:  { 0, \"No adjustment for Daylight Saving Time\"},",
          "1037:  { 1, \"+1 hour adjustment for Daylight Saving Time\"},",
          "1038:  { 2, \"+2 hours adjustment for Daylight Saving Time\"},",
          "1039:  { 3, \"Reserved\"},",
          "1040:  { 0, NULL }",
          "1046:  guint32      curr_offset;",
          "1048:  curr_offset = offset;",
          "1050:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 6, ENC_BIG_ENDIAN);",
          "1052:  proto_tree_add_item(tree, hf_gsm_a_dtap_dst_adjustment, tvb, curr_offset, 1, ENC_NA);",
          "1053:  curr_offset++;",
          "1055:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1057:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "1014:     guint32 curr_offset;",
          "1016:     curr_offset = offset;",
          "1018:     if (len == 0) {",
          "1019:         proto_tree_add_text(tree,tvb, curr_offset, len,\"LSA ID not included\");",
          "1020:     }",
          "1021:     else",
          "1022:     {",
          "1023:         proto_tree_add_item(tree, hf_gsm_a_dtap_lsa_id, tvb, curr_offset, 3, ENC_BIG_ENDIAN);",
          "1024:     }",
          "1026:     curr_offset += len;",
          "1028:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1030:     return (curr_offset - offset);",
          "1037:     { 0, \"No adjustment for Daylight Saving Time\"},",
          "1038:     { 1, \"+1 hour adjustment for Daylight Saving Time\"},",
          "1039:     { 2, \"+2 hours adjustment for Daylight Saving Time\"},",
          "1040:     { 3, \"Reserved\"},",
          "1041:     { 0, NULL }",
          "1047:     guint32      curr_offset;",
          "1049:     curr_offset = offset;",
          "1051:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 6, ENC_BIG_ENDIAN);",
          "1053:     proto_tree_add_item(tree, hf_gsm_a_dtap_dst_adjustment, tvb, curr_offset, 1, ENC_NA);",
          "1054:     curr_offset++;",
          "1056:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1058:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1063: static guint16",
          "1064: de_emerg_num_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "1065: {",
          "1136: }",
          "1141: static const true_false_string gsm_a_dtap_csmo_value = {",
          "1144: };",
          "1146: static const true_false_string gsm_a_dtap_csmt_value = {",
          "1149: };",
          "1151: static guint16",
          "1152: de_add_upd_params(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "1153: {",
          "1163: }",
          "1168: static const value_string gsm_a_dtap_mm_timer_unit_vals[] = {",
          "1174: };",
          "1176: static guint16",
          "1177: de_mm_timer(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "1178: {",
          "1219: }",
          "",
          "[Removed Lines]",
          "1066:  guint32     curr_offset;",
          "1067:  guint8      en_len, oct, i;",
          "1068:  guint8      count;",
          "1069:  guint8     *poctets;",
          "1070:  proto_tree *subtree;",
          "1071:  proto_item *item;",
          "1072:  gboolean    malformed_number;",
          "1074:  curr_offset = offset;",
          "1076:  count = 1;",
          "1077:  while ((curr_offset - offset) < len){",
          "1082:   en_len = tvb_get_guint8(tvb, curr_offset);",
          "1084:   item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1085:    tvb, curr_offset, en_len + 1, count);",
          "1086:   subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1087:   proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1089:   curr_offset++;",
          "1094:   proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1095:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1096:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:   proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1100:   curr_offset++;",
          "1101:   en_len--;",
          "1103:   poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "1105:   my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
          "1107:   item = proto_tree_add_string_format(subtree, hf_gsm_a_dtap_emergency_bcd_num,",
          "1108:    tvb, curr_offset, en_len,",
          "1109:    a_bigbuf,",
          "1110:    \"BCD Digits: %s\",",
          "1111:    a_bigbuf);",
          "1113:   malformed_number = FALSE;",
          "1114:   for(i = 0; i < en_len - 1; i++)",
          "1115:   {",
          "1116:    oct = poctets[i];",
          "1117:    if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "1118:    {",
          "1119:     malformed_number = TRUE;",
          "1120:     break;",
          "1121:    }",
          "1122:   }",
          "1124:   oct = poctets[en_len - 1];",
          "1125:   if ((oct & 0x0f) == 0x0f)",
          "1126:    malformed_number = TRUE;",
          "1128:   if(malformed_number)",
          "1129:    expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1131:   curr_offset = curr_offset + en_len;",
          "1132:   count++;",
          "1133:  }",
          "1135:  return(len);",
          "1142:  \"CS fallback mobile originating call\",",
          "1143:  \"No additional information\"",
          "1147:  \"CS fallback mobile terminating call\",",
          "1148:  \"No additional information\"",
          "1154:  guint32 curr_offset;",
          "1156:  curr_offset = offset;",
          "1158:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 2, ENC_BIG_ENDIAN);",
          "1159:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_csmo, tvb, (curr_offset<<3)+6, 1, ENC_BIG_ENDIAN);",
          "1160:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_csmt, tvb, (curr_offset<<3)+7, 1, ENC_BIG_ENDIAN);",
          "1162:  return(len);",
          "1169:  { 0x00, \"value is incremented in multiples of 2 seconds\" },",
          "1170:  { 0x01, \"value is incremented in multiples of 1 minute\" },",
          "1171:  { 0x02, \"value is incremented in multiples of decihours\" },",
          "1172:  { 0x07, \"value indicates that the timer is deactivated\" },",
          "1173:  { 0, NULL }",
          "1179:  guint8       oct;",
          "1180:  guint16      val;",
          "1181:  const gchar *str;",
          "1182:  proto_tree  *subtree;",
          "1183:  proto_item  *item = NULL;",
          "1185:  oct = tvb_get_guint8(tvb, offset);",
          "1186:  val = oct&0x1f;",
          "1188:  switch (oct>>5)",
          "1189:  {",
          "1190:   case 0:",
          "1191:    str = \"sec\"; val*=2;",
          "1192:    break;",
          "1193:   case 1:",
          "1194:    str = \"min\";",
          "1195:    break;",
          "1196:   case 2:",
          "1197:    str = \"min\"; val*=6;",
          "1198:    break;",
          "1199:   case 7:",
          "1200:    str = \"\";",
          "1201:    item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_mm_timer, tvb, offset, 1,",
          "1202:                               oct, \"timer is deactivated\");",
          "1203:    break;",
          "1204:   default:",
          "1205:    str = \"min\";",
          "1206:    break;",
          "1207:  }",
          "1209:  if (item == NULL) {",
          "1210:   item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_mm_timer, tvb, offset, 1, val,",
          "1211:                              \"%u %s\", val, str);",
          "1212:  }",
          "1214:  subtree = proto_item_add_subtree(item, ett_mm_timer);",
          "1215:  proto_tree_add_item(subtree, hf_gsm_a_dtap_mm_timer_unit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1216:  proto_tree_add_item(subtree, hf_gsm_a_dtap_mm_timer_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1218:  return (1);",
          "",
          "[Added Lines]",
          "1067:     guint32     curr_offset;",
          "1068:     guint8      en_len, oct, i;",
          "1069:     guint8      count;",
          "1070:     guint8     *poctets;",
          "1071:     proto_tree *subtree;",
          "1072:     proto_item *item;",
          "1073:     gboolean    malformed_number;",
          "1075:     curr_offset = offset;",
          "1077:     count = 1;",
          "1078:     while ((curr_offset - offset) < len) {",
          "1083:         en_len = tvb_get_guint8(tvb, curr_offset);",
          "1085:         item = proto_tree_add_uint(tree, hf_gsm_a_dtap_emergency_number_information,",
          "1086:             tvb, curr_offset, en_len + 1, count);",
          "1087:         subtree = proto_item_add_subtree(item, ett_gsm_dtap_elem[DE_EMERGENCY_NUM_LIST]);",
          "1088:         proto_tree_add_item(subtree, hf_gsm_a_dtap_emerg_num_info_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1090:         curr_offset++;",
          "1095:         proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 3, ENC_BIG_ENDIAN);",
          "1096:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1097:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1098:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1099:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1100:         proto_tree_add_item(subtree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1101:         curr_offset++;",
          "1102:         en_len--;",
          "1104:         poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, en_len);",
          "1106:         my_dgt_tbcd_unpack(a_bigbuf, poctets, en_len, &Dgt_mbcd);",
          "1108:         item = proto_tree_add_string_format(subtree, hf_gsm_a_dtap_emergency_bcd_num,",
          "1109:             tvb, curr_offset, en_len,",
          "1110:             a_bigbuf,",
          "1111:             \"BCD Digits: %s\",",
          "1112:             a_bigbuf);",
          "1114:         malformed_number = FALSE;",
          "1115:         for(i = 0; i < en_len - 1; i++)",
          "1116:         {",
          "1117:             oct = poctets[i];",
          "1118:             if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "1119:             {",
          "1120:                 malformed_number = TRUE;",
          "1121:                 break;",
          "1122:             }",
          "1123:         }",
          "1125:         oct = poctets[en_len - 1];",
          "1126:         if ((oct & 0x0f) == 0x0f)",
          "1127:             malformed_number = TRUE;",
          "1129:         if (malformed_number)",
          "1130:             expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "1132:         curr_offset = curr_offset + en_len;",
          "1133:         count++;",
          "1134:     }",
          "1136:     return (len);",
          "1143:     \"CS fallback mobile originating call\",",
          "1144:     \"No additional information\"",
          "1148:     \"CS fallback mobile terminating call\",",
          "1149:     \"No additional information\"",
          "1155:     guint32 curr_offset;",
          "1157:     curr_offset = offset;",
          "1159:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 2, ENC_BIG_ENDIAN);",
          "1160:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_csmo, tvb, (curr_offset<<3)+6, 1, ENC_BIG_ENDIAN);",
          "1161:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_csmt, tvb, (curr_offset<<3)+7, 1, ENC_BIG_ENDIAN);",
          "1163:     return (len);",
          "1170:     { 0x00, \"value is incremented in multiples of 2 seconds\" },",
          "1171:     { 0x01, \"value is incremented in multiples of 1 minute\" },",
          "1172:     { 0x02, \"value is incremented in multiples of decihours\" },",
          "1173:     { 0x07, \"value indicates that the timer is deactivated\" },",
          "1174:     { 0, NULL }",
          "1180:     guint8       oct;",
          "1181:     guint16      val;",
          "1182:     const gchar *str;",
          "1183:     proto_tree  *subtree;",
          "1184:     proto_item  *item = NULL;",
          "1186:     oct = tvb_get_guint8(tvb, offset);",
          "1187:     val = oct&0x1f;",
          "1189:     switch (oct>>5)",
          "1190:     {",
          "1191:     case 0:",
          "1192:         str = \"sec\"; val*=2;",
          "1193:         break;",
          "1194:     case 1:",
          "1195:         str = \"min\";",
          "1196:         break;",
          "1197:     case 2:",
          "1198:         str = \"min\"; val*=6;",
          "1199:         break;",
          "1200:     case 7:",
          "1201:         str = \"\";",
          "1202:         item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_mm_timer, tvb, offset, 1,",
          "1203:                             oct, \"timer is deactivated\");",
          "1204:         break;",
          "1205:     default:",
          "1206:         str = \"min\";",
          "1207:         break;",
          "1208:     }",
          "1210:     if (item == NULL) {",
          "1211:         item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_mm_timer, tvb, offset, 1, val,",
          "1212:                                    \"%u %s\", val, str);",
          "1213:     }",
          "1215:     subtree = proto_item_add_subtree(item, ett_mm_timer);",
          "1216:     proto_tree_add_item(subtree, hf_gsm_a_dtap_mm_timer_unit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1217:     proto_tree_add_item(subtree, hf_gsm_a_dtap_mm_timer_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1219:     return (1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1225: static const value_string gsm_a_dtap_hold_auxilary_state_vals[] = {",
          "1231: };",
          "1233: static const value_string gsm_a_dtap_multi_party_auxilary_state_vals[] = {",
          "1239: };",
          "1241: static guint16",
          "1242: de_aux_states(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "1243: {",
          "1258: }",
          "",
          "[Removed Lines]",
          "1226:  { 0x00, \"Idle\" },",
          "1227:  { 0x01, \"Hold request\" },",
          "1228:  { 0x02, \"Call held\" },",
          "1229:  { 0x03, \"Retrieve request\" },",
          "1230:  { 0, NULL }",
          "1234:  { 0x00, \"Idle\" },",
          "1235:  { 0x01, \"MPTY request\" },",
          "1236:  { 0x02, \"Call in MPTY\" },",
          "1237:  { 0x03, \"Split request\" },",
          "1238:  { 0, NULL }",
          "1244:  guint32      curr_offset;",
          "1246:  curr_offset = offset;",
          "1248:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1250:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+1, 3, ENC_BIG_ENDIAN);",
          "1251:  proto_tree_add_item(tree, hf_gsm_a_dtap_hold_auxiliary_state, tvb, curr_offset, 1, ENC_NA);",
          "1252:  proto_tree_add_item(tree, hf_gsm_a_dtap_multi_party_auxiliary_state, tvb, curr_offset, 1, ENC_NA);",
          "1253:  curr_offset++;",
          "1255:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1257:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "1227:     { 0x00, \"Idle\" },",
          "1228:     { 0x01, \"Hold request\" },",
          "1229:     { 0x02, \"Call held\" },",
          "1230:     { 0x03, \"Retrieve request\" },",
          "1231:     { 0, NULL }",
          "1235:     { 0x00, \"Idle\" },",
          "1236:     { 0x01, \"MPTY request\" },",
          "1237:     { 0x02, \"Call in MPTY\" },",
          "1238:     { 0x03, \"Split request\" },",
          "1239:     { 0, NULL }",
          "1245:     guint32      curr_offset;",
          "1247:     curr_offset = offset;",
          "1249:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1251:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+1, 3, ENC_BIG_ENDIAN);",
          "1252:     proto_tree_add_item(tree, hf_gsm_a_dtap_hold_auxiliary_state, tvb, curr_offset, 1, ENC_NA);",
          "1253:     proto_tree_add_item(tree, hf_gsm_a_dtap_multi_party_auxiliary_state, tvb, curr_offset, 1, ENC_NA);",
          "1254:     curr_offset++;",
          "1256:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1258:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1267: static const value_string gsm_a_dtap_speech_vers_ind_values[] = {",
          "1285: };",
          "",
          "[Removed Lines]",
          "1268:  { 0x0, \"GSM full rate speech version 1(GSM FR)\" },",
          "1269:  { 0x1, \"GSM half rate speech version 1(GSM HR)\" },",
          "1270:  { 0x2, \"GSM full rate speech version 2(GSM EFR)\" },",
          "1271:  { 0x3, \"Speech version tbd\" },",
          "1272:  { 0x4, \"GSM full rate speech version 3(FR AMR)\" },",
          "1273:  { 0x5, \"GSM half rate speech version 3(HR AMR)\" },",
          "1274:  { 0x6, \"GSM full rate speech version 4(OFR AMR-WB)\" },",
          "1275:  { 0x7, \"GSM half rate speech version 4(OHR AMR-WB)\" },",
          "1276:  { 0x8, \"GSM full rate speech version 5(FR AMR-WB)\" },",
          "1277:  { 0x9, \"Speech version tbd\" },",
          "1278:  { 0xa, \"Speech version tbd\" },",
          "1279:  { 0xb, \"GSM half rate speech version 6(OHR AMR)\" },",
          "1280:  { 0xc, \"Speech version tbd\" },",
          "1281:  { 0xd, \"Speech version tbd\" },",
          "1282:  { 0xe, \"Speech version tbd\" },",
          "1283:  { 0xf, \"No speech version supported for GERAN\" },",
          "1284:  { 0, NULL }",
          "",
          "[Added Lines]",
          "1269:     { 0x0,  \"GSM full rate speech version 1(GSM FR)\" },",
          "1270:     { 0x1,  \"GSM half rate speech version 1(GSM HR)\" },",
          "1271:     { 0x2,  \"GSM full rate speech version 2(GSM EFR)\" },",
          "1272:     { 0x3,  \"Speech version tbd\" },",
          "1273:     { 0x4,  \"GSM full rate speech version 3(FR AMR)\" },",
          "1274:     { 0x5,  \"GSM half rate speech version 3(HR AMR)\" },",
          "1275:     { 0x6,  \"GSM full rate speech version 4(OFR AMR-WB)\" },",
          "1276:     { 0x7,  \"GSM half rate speech version 4(OHR AMR-WB)\" },",
          "1277:     { 0x8,  \"GSM full rate speech version 5(FR AMR-WB)\" },",
          "1278:     { 0x9,  \"Speech version tbd\" },",
          "1279:     { 0xa,  \"Speech version tbd\" },",
          "1280:     { 0xb,  \"GSM half rate speech version 6(OHR AMR)\" },",
          "1281:     { 0xc,  \"Speech version tbd\" },",
          "1282:     { 0xd,  \"Speech version tbd\" },",
          "1283:     { 0xe,  \"Speech version tbd\" },",
          "1284:     { 0xf,  \"No speech version supported for GERAN\" },",
          "1285:     { 0, NULL }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1292: static const value_string gsm_a_dtap_itc_values[] = {",
          "1300: };",
          "1302: static const value_string gsm_a_dtap_structure_vals[] = {",
          "1308: };",
          "1310: static const value_string gsm_a_dtap_access_identity_vals[] = {",
          "1316: };",
          "1318: static const value_string gsm_a_dtap_rate_adaption_vals[] = {",
          "1324: };",
          "1326: static const value_string gsm_a_dtap_signal_access_protocol_vals[] = {",
          "1336: };",
          "1338: static const value_string gsm_a_dtap_other_itc_vals[] = {",
          "1344: };",
          "1346: static const value_string gsm_a_dtap_other_rate_adaption_vals[] = {",
          "1352: };",
          "1354: static const value_string gsm_a_dtap_user_rate_vals[] = {",
          "1363: };",
          "1365: static const value_string gsm_a_dtap_v110_x30_rate_adaptation_vals[] = {",
          "1371: };",
          "1373: static const value_string gsm_a_dtap_parity_info_vals[] = {",
          "1383: };",
          "1385: static const value_string gsm_a_dtap_connection_element_vals[] = {",
          "1391: };",
          "1393: static const value_string gsm_a_dtap_modem_type_vals[] = {",
          "1404: };",
          "1406: static const value_string gsm_a_dtap_other_modem_type_vals[] = {",
          "1412: };",
          "1414: static const value_string gsm_a_dtap_fixed_network_user_rate_vals[] = {",
          "1415:     { 0x00, \"Fixed network user rate not applicable/No meaning is associated with this value\"},",
          "1428: };",
          "1430: static const value_string gsm_a_dtap_uimi_vals[] = {",
          "1440: };",
          "1442: static const value_string gsm_a_dtap_wanted_air_rate_vals[] = {",
          "1460: };",
          "1462: static const value_string gsm_a_dtap_channel_coding_asymmetry_ind_vals[] = {",
          "1468: };",
          "1470: static const value_string gsm_a_dtap_user_info_layer2_vals[] = {",
          "1478: };",
          "1480: static const true_false_string tfs_bearer_cap_coding_standard = { \"reserved\", \"GSM standardized coding\" };",
          "",
          "[Removed Lines]",
          "1293:  { 0x0, \"Speech\" },",
          "1294:  { 0x1, \"Unrestricted digital information\" },",
          "1295:  { 0x2, \"3.1 kHz audio, ex PLMN\" },",
          "1296:  { 0x3, \"Facsimile group 3\" },",
          "1297:  { 0x5, \"Other ITC (See Octet 5a)\" },",
          "1298:  { 0x7, \"Reserved,(In Network alternate speech/facsimile group 3)\" },",
          "1299:  { 0, NULL }",
          "1303:  { 0x0, \"Service data unit integrity\" },",
          "1304:  { 0x1, \"Reserved\" },",
          "1305:  { 0x2, \"Reserved\" },",
          "1306:  { 0x3, \"Unstructured\" },",
          "1307:  { 0, NULL }",
          "1311:  { 0x0, \"Octet identifier\" },",
          "1312:  { 0x1, \"Octet identifier\" },",
          "1313:  { 0x2, \"Octet identifier\" },",
          "1314:  { 0x3, \"Reserved\" },",
          "1315:  { 0, NULL }",
          "1319:  { 0x0, \"No rate adaption\" },",
          "1320:  { 0x1, \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1321:  { 0x2, \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1322:  { 0x3, \"Other rate adaption (see octet 5a)\" },",
          "1323:  { 0, NULL }",
          "1327:  { 0x0, \"Reserved\" },",
          "1328:  { 0x1, \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1329:  { 0x2, \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1330:  { 0x3, \"Other rate adaption (see octet 5a)\" },",
          "1331:  { 0x4, \"No rate adaption\" },",
          "1332:  { 0x5, \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1333:  { 0x6, \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1334:  { 0x7, \"Reserved\" },",
          "1335:  { 0, NULL }",
          "1339:  { 0x0, \"Restricted digital information\" },",
          "1340:  { 0x1, \"Restricted digital information\" },",
          "1341:  { 0x2, \"Restricted digital information\" },",
          "1342:  { 0x3, \"Reserved\" },",
          "1343:  { 0, NULL }",
          "1347:  { 0x0, \"According to ITU-T Rec. V.120\" },",
          "1348:  { 0x1, \"According to ITU-T Rec. H.223 and ITU-T Rec. H.245\" },",
          "1349:  { 0x2, \"PIAFS\" },",
          "1350:  { 0x3, \"Reserved\" },",
          "1351:  { 0, NULL }",
          "1355:  { 0x1, \"0.3 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1356:  { 0x2, \"1.2 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1357:  { 0x3, \"2.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1358:  { 0x4, \"4.8 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1359:  { 0x5, \"9.6 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1360:  { 0x6, \"12.0 kbit/s transparent (non compliance with ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1361:  { 0x7, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1362:  { 0, NULL }",
          "1366:  { 0x0, \"Reserved\" },",
          "1367:  { 0x1, \"Reserved\" },",
          "1368:  { 0x2, \"8 kbit/s\" },",
          "1369:  { 0x3, \"16 kbit/s\" },",
          "1370:  { 0, NULL }",
          "1374:  { 0x0, \"Odd\" },",
          "1375:  { 0x1, \"Reserved\" },",
          "1376:  { 0x2, \"Even\" },",
          "1377:  { 0x3, \"None\" },",
          "1378:  { 0x4, \"Forced to 0\" },",
          "1379:  { 0x5, \"Forced to 1\" },",
          "1380:  { 0x6, \"Reserved\" },",
          "1381:  { 0x7, \"Reserved\" },",
          "1382:  { 0, NULL }",
          "1386:  { 0x0, \"Transparent\" },",
          "1387:  { 0x1, \"Non transparent (RLP)\" },",
          "1388:  { 0x2, \"Both, transparent preferred\" },",
          "1389:  { 0x3, \"Both, non transparent preferred\" },",
          "1390:  { 0, NULL }",
          "1394:  { 0x0, \"None\" },",
          "1395:  { 0x1, \"According to ITU-T Rec. V.21\" },",
          "1396:  { 0x2, \"According to ITU-T Rec. V.22\" },",
          "1397:  { 0x3, \"According to ITU-T Rec. V.22 bis\" },",
          "1398:  { 0x4, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1399:  { 0x5, \"According to ITU-T Rec. V.26 ter\" },",
          "1400:  { 0x6, \"According to ITU-T Rec. V.32\" },",
          "1401:  { 0x7, \"Modem for undefined interface\" },",
          "1402:  { 0x8, \"Autobauding type 1\" },",
          "1403:  { 0, NULL }",
          "1407:  { 0x0, \"No other modem type specified in this field\" },",
          "1408:  { 0x1, \"Reserved\" },",
          "1409:  { 0x2, \"According to ITU-T Rec. V.34\" },",
          "1410:  { 0x3, \"Reserved\" },",
          "1411:  { 0, NULL }",
          "1416:  { 0x01, \"9.6 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1417:  { 0x02, \"14.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1418:  { 0x03, \"19.2 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1419:  { 0x04, \"28.8 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1420:  { 0x05, \"38.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1421:  { 0x06, \"48.0 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110 (synch))\"},",
          "1422:  { 0x07, \"56.0 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110 (synch) /bit transparent)\"},",
          "1423:  { 0x08, \"64.0 kbit/s bit transparent\"},",
          "1424:  { 0x09, \"33.6 kbit/s bit transparent\"},",
          "1425:  { 0x0a, \"32.0 kbit/s (according to ITU-T Rec. I.460)\"},",
          "1426:  { 0x0b, \"31.2 kbit/s (according to ITU-T Rec. V.34)\"},",
          "1427:  { 0, NULL }",
          "1431:  { 0x0, \"not allowed/required/applicable\" },",
          "1432:  { 0x1, \"up to 1 TCH/F allowed/may be requested\" },",
          "1433:  { 0x2, \"up to 2 TCH/F allowed/may be requested\" },",
          "1434:  { 0x3, \"up to 3 TCH/F allowed/may be requested\" },",
          "1435:  { 0x4, \"up to 4 TCH/F allowed/may be requested\" },",
          "1436:  { 0x5, \"up to 4 TCH/F may be requested\" },",
          "1437:  { 0x6, \"up to 4 TCH/F may be requested\" },",
          "1438:  { 0x7, \"up to 4 TCH/F may be requested\" },",
          "1439:  { 0, NULL }",
          "1443:  { 0x0, \"Air interface user rate not applicable/No meaning associated with this value\" },",
          "1444:  { 0x1, \"9.6 kbit/s\" },",
          "1445:  { 0x2, \"14.4 kbit/s\" },",
          "1446:  { 0x3, \"19.2 kbit/s\" },",
          "1447:  { 0x4, \"Reserved\" },",
          "1448:  { 0x5, \"28.8 kbit/s\" },",
          "1449:  { 0x6, \"38.4 kbit/s\" },",
          "1450:  { 0x7, \"43.2 kbit/s\" },",
          "1451:  { 0x8, \"57.6 kbit/s\" },",
          "1452:  { 0x9, \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1453:  { 0xa, \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1454:  { 0xb, \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1455:  { 0xc, \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1456:  { 0xd, \"Reserved\" },",
          "1457:  { 0xe, \"Reserved\" },",
          "1458:  { 0xf, \"Reserved\" },",
          "1459:  { 0, NULL }",
          "1463:  { 0x0, \"Channel coding symmetry preferred\" },",
          "1464:  { 0x1, \"Uplink biased channel coding asymmetry is preferred\" },",
          "1465:  { 0x2, \"Downlink biased channel coding asymmetry is preferred\" },",
          "1466:  { 0x3, \"Unused, treat as Channel coding symmetry preferred\" },",
          "1467:  { 0, NULL }",
          "1471:  { 0x06, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1472:  { 0x08, \"According to ISO/IEC 6429, codeset 0 (DC1/DC3)\" },",
          "1473:  { 0x09, \"Reserved: was allocated but never used in earlier phases of the protocol\" },",
          "1474:  { 0x0a, \"Videotex profile 1\" },",
          "1475:  { 0x0c, \"COPnoFlCt (Character oriented Protocol with no Flow Control mechanism)\" },",
          "1476:  { 0x0d, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1477:  { 0, NULL }",
          "",
          "[Added Lines]",
          "1294:     { 0x0,  \"Speech\" },",
          "1295:     { 0x1,  \"Unrestricted digital information\" },",
          "1296:     { 0x2,  \"3.1 kHz audio, ex PLMN\" },",
          "1297:     { 0x3,  \"Facsimile group 3\" },",
          "1298:     { 0x5,  \"Other ITC (See Octet 5a)\" },",
          "1299:     { 0x7,  \"Reserved,(In Network alternate speech/facsimile group 3)\" },",
          "1300:     { 0, NULL }",
          "1304:     { 0x0,  \"Service data unit integrity\" },",
          "1305:     { 0x1,  \"Reserved\" },",
          "1306:     { 0x2,  \"Reserved\" },",
          "1307:     { 0x3,  \"Unstructured\" },",
          "1308:     { 0, NULL }",
          "1312:     { 0x0,  \"Octet identifier\" },",
          "1313:     { 0x1,  \"Octet identifier\" },",
          "1314:     { 0x2,  \"Octet identifier\" },",
          "1315:     { 0x3,  \"Reserved\" },",
          "1316:     { 0, NULL }",
          "1320:     { 0x0,  \"No rate adaption\" },",
          "1321:     { 0x1,  \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1322:     { 0x2,  \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1323:     { 0x3,  \"Other rate adaption (see octet 5a)\" },",
          "1324:     { 0, NULL }",
          "1328:     { 0x0,  \"Reserved\" },",
          "1329:     { 0x1,  \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1330:     { 0x2,  \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1331:     { 0x3,  \"Other rate adaption (see octet 5a)\" },",
          "1332:     { 0x4,  \"No rate adaption\" },",
          "1333:     { 0x5,  \"Rate adaptation according to ITU-T Rec. V.110 and ITU-T Rec. X.30\" },",
          "1334:     { 0x6,  \"Flag stuffing according to ITU-T Rec. X.31\" },",
          "1335:     { 0x7,  \"Reserved\" },",
          "1336:     { 0, NULL }",
          "1340:     { 0x0,  \"Restricted digital information\" },",
          "1341:     { 0x1,  \"Restricted digital information\" },",
          "1342:     { 0x2,  \"Restricted digital information\" },",
          "1343:     { 0x3,  \"Reserved\" },",
          "1344:     { 0, NULL }",
          "1348:     { 0x0,  \"According to ITU-T Rec. V.120\" },",
          "1349:     { 0x1,  \"According to ITU-T Rec. H.223 and ITU-T Rec. H.245\" },",
          "1350:     { 0x2,  \"PIAFS\" },",
          "1351:     { 0x3,  \"Reserved\" },",
          "1352:     { 0, NULL }",
          "1356:     { 0x1,  \"0.3 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1357:     { 0x2,  \"1.2 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1358:     { 0x3,  \"2.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1359:     { 0x4,  \"4.8 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1360:     { 0x5,  \"9.6 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1361:     { 0x6,  \"12.0 kbit/s transparent (non compliance with ITU-T Rec. X.1 and ITU-T Rec. V.110)\" },",
          "1362:     { 0x7,  \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1363:     { 0, NULL }",
          "1367:     { 0x0,  \"Reserved\" },",
          "1368:     { 0x1,  \"Reserved\" },",
          "1369:     { 0x2,  \"8 kbit/s\" },",
          "1370:     { 0x3,  \"16 kbit/s\" },",
          "1371:     { 0, NULL }",
          "1375:     { 0x0,  \"Odd\" },",
          "1376:     { 0x1,  \"Reserved\" },",
          "1377:     { 0x2,  \"Even\" },",
          "1378:     { 0x3,  \"None\" },",
          "1379:     { 0x4,  \"Forced to 0\" },",
          "1380:     { 0x5,  \"Forced to 1\" },",
          "1381:     { 0x6,  \"Reserved\" },",
          "1382:     { 0x7,  \"Reserved\" },",
          "1383:     { 0, NULL }",
          "1387:     { 0x0,  \"Transparent\" },",
          "1388:     { 0x1,  \"Non transparent (RLP)\" },",
          "1389:     { 0x2,  \"Both, transparent preferred\" },",
          "1390:     { 0x3,  \"Both, non transparent preferred\" },",
          "1391:     { 0, NULL }",
          "1395:     { 0x0,  \"None\" },",
          "1396:     { 0x1,  \"According to ITU-T Rec. V.21\" },",
          "1397:     { 0x2,  \"According to ITU-T Rec. V.22\" },",
          "1398:     { 0x3,  \"According to ITU-T Rec. V.22 bis\" },",
          "1399:     { 0x4,  \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1400:     { 0x5,  \"According to ITU-T Rec. V.26 ter\" },",
          "1401:     { 0x6,  \"According to ITU-T Rec. V.32\" },",
          "1402:     { 0x7,  \"Modem for undefined interface\" },",
          "1403:     { 0x8,  \"Autobauding type 1\" },",
          "1404:     { 0, NULL }",
          "1408:     { 0x0,  \"No other modem type specified in this field\" },",
          "1409:     { 0x1,  \"Reserved\" },",
          "1410:     { 0x2,  \"According to ITU-T Rec. V.34\" },",
          "1411:     { 0x3,  \"Reserved\" },",
          "1412:     { 0, NULL }",
          "1417:     { 0x01, \"9.6 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1418:     { 0x02, \"14.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1419:     { 0x03, \"19.2 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1420:     { 0x04, \"28.8 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1421:     { 0x05, \"38.4 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110)\"},",
          "1422:     { 0x06, \"48.0 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110 (synch))\"},",
          "1423:     { 0x07, \"56.0 kbit/s (according to ITU-T Rec. X.1 and ITU-T Rec. V.110 (synch) /bit transparent)\"},",
          "1424:     { 0x08, \"64.0 kbit/s bit transparent\"},",
          "1425:     { 0x09, \"33.6 kbit/s bit transparent\"},",
          "1426:     { 0x0a, \"32.0 kbit/s (according to ITU-T Rec. I.460)\"},",
          "1427:     { 0x0b, \"31.2 kbit/s (according to ITU-T Rec. V.34)\"},",
          "1428:     { 0, NULL }",
          "1432:     { 0x0,  \"not allowed/required/applicable\" },",
          "1433:     { 0x1,  \"up to 1 TCH/F allowed/may be requested\" },",
          "1434:     { 0x2,  \"up to 2 TCH/F allowed/may be requested\" },",
          "1435:     { 0x3,  \"up to 3 TCH/F allowed/may be requested\" },",
          "1436:     { 0x4,  \"up to 4 TCH/F allowed/may be requested\" },",
          "1437:     { 0x5,  \"up to 4 TCH/F may be requested\" },",
          "1438:     { 0x6,  \"up to 4 TCH/F may be requested\" },",
          "1439:     { 0x7,  \"up to 4 TCH/F may be requested\" },",
          "1440:     { 0, NULL }",
          "1444:     { 0x0,  \"Air interface user rate not applicable/No meaning associated with this value\" },",
          "1445:     { 0x1,  \"9.6 kbit/s\" },",
          "1446:     { 0x2,  \"14.4 kbit/s\" },",
          "1447:     { 0x3,  \"19.2 kbit/s\" },",
          "1448:     { 0x4,  \"Reserved\" },",
          "1449:     { 0x5,  \"28.8 kbit/s\" },",
          "1450:     { 0x6,  \"38.4 kbit/s\" },",
          "1451:     { 0x7,  \"43.2 kbit/s\" },",
          "1452:     { 0x8,  \"57.6 kbit/s\" },",
          "1453:     { 0x9,  \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1454:     { 0xa,  \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1455:     { 0xb,  \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1456:     { 0xc,  \"interpreted by the network as 38.4 kbit/s in this version of the protocol\" },",
          "1457:     { 0xd,  \"Reserved\" },",
          "1458:     { 0xe,  \"Reserved\" },",
          "1459:     { 0xf,  \"Reserved\" },",
          "1460:     { 0, NULL }",
          "1464:     { 0x0,  \"Channel coding symmetry preferred\" },",
          "1465:     { 0x1,  \"Uplink biased channel coding asymmetry is preferred\" },",
          "1466:     { 0x2,  \"Downlink biased channel coding asymmetry is preferred\" },",
          "1467:     { 0x3,  \"Unused, treat as Channel coding symmetry preferred\" },",
          "1468:     { 0, NULL }",
          "1472:     { 0x06, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1473:     { 0x08, \"According to ISO/IEC 6429, codeset 0 (DC1/DC3)\" },",
          "1474:     { 0x09, \"Reserved: was allocated but never used in earlier phases of the protocol\" },",
          "1475:     { 0x0a, \"Videotex profile 1\" },",
          "1476:     { 0x0c, \"COPnoFlCt (Character oriented Protocol with no Flow Control mechanism)\" },",
          "1477:     { 0x0d, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "1478:     { 0, NULL }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1483: static const true_false_string tfs_duplex_mode = { \"Full\", \"Half\" };",
          "1484: static const true_false_string tfs_bearer_cap_configuration = { \"Reserved\", \"Point-to-point\" };",
          "1485: static const true_false_string tfs_nirr = { \"Data up to and including 4.8 kb/s, full rate, non-transparent, 6 kb/s radio interface rate is requested\",",
          "1487: static const true_false_string tfs_bearer_cap_establishment = { \"Reserved\", \"Demand\" };",
          "1488: static const true_false_string tfs_included_not_included = { \"Included\", \"Not Included\" };",
          "1489: static const true_false_string tfs_frame_est_supported_not_supported = { \"Supported\", \"Not supported, only UI frames allowed\" };",
          "",
          "[Removed Lines]",
          "1486:                                                              \"No meaning is associated with this value\" };",
          "",
          "[Added Lines]",
          "1487:                         \"No meaning is associated with this value\" };",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1491: static const true_false_string tfs_log_link_neg = { \"Full protocol negotiation\", \"Default, LLI=256 only\" };",
          "1492: static const true_false_string tfs_assignor_assignee = { \"Message originator is assignor only\", \"Message originator is default assignee\" };",
          "1493: static const true_false_string tfs_in_out_band = { \"Negotiation is done with USER INFORMATION messages on a temporary signalling connection\",",
          "1495: static const true_false_string tfs_asynchronous_synchronous = { \"Asynchronous\", \"Synchronous\" };",
          "1496: static const true_false_string tfs_stop_bits = { \"2\", \"1\" };",
          "1497: static const true_false_string tfs_negotiation = { \"Reserved\", \"In-band negotiation not possible\" };",
          "1498: static const true_false_string tfs_parity_bits = { \"8\", \"7\" };",
          "1499: static const true_false_string tfs_nic_on_tx = { \"requires to send data with network independent clock\",",
          "1501: static const true_false_string tfs_nic_on_rx = { \"can accept data with network independent clock\",",
          "1504: guint16",
          "1505: de_bearer_cap(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len)",
          "1506: {",
          "1729: bc_octet_6:",
          "1869:             (oct & 0x07) + 1, \"%u TCH\", (oct & 0x07) + 1);",
          "1874:             oct, \"Spare\");",
          "1876:             oct, \"Spare\");",
          "1906:             oct, \"Spare\");",
          "1944: bc_octet_7:",
          "1958:         oct, \"%s\", val_to_str_const(oct & 0x1F, gsm_a_dtap_user_info_layer2_vals, \"Reserved\"));",
          "1965: }",
          "1968: guint16",
          "1969: de_bearer_cap_uplink(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len)",
          "1970: {",
          "1974: }",
          "",
          "[Removed Lines]",
          "1494:                                                    \"Negotiation is done in-band using logical link zero\" };",
          "1500:                                                  \"does not require to send data with network independent clock\" };",
          "1502:                                                  \"cannot accept data with network independent clock\" };",
          "1507:  guint8       oct;",
          "1508:  guint8       itc;",
          "1509:  gboolean     extended;",
          "1510:  guint32      curr_offset;",
          "1511:  guint32      saved_offset;",
          "1512:  proto_tree  *subtree;",
          "1513:  proto_item  *item;",
          "1514:  const gchar *str;",
          "1516: #define DE_BC_ITC_SPEECH 0x00",
          "1517: #define DE_BC_ITC_UDI  0x01",
          "1518: #define DE_BC_ITC_EX_PLMN 0x02",
          "1519: #define DE_BC_ITC_FASC_G3 0x03",
          "1520: #define DE_BC_ITC_OTHER_ITC 0x05",
          "1521: #define DE_BC_ITC_RSVD_NET 0x07",
          "1523:  curr_offset = offset;",
          "1525:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1533:  subtree =",
          "1534:   proto_tree_add_subtree(tree,",
          "1535:    tvb, curr_offset, 1,",
          "1536:    ett_bc_oct_3, NULL, \"Octet 3\");",
          "1538:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1539:  itc = oct & 0x07;",
          "1541:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1543:  switch (is_uplink)",
          "1544:  {",
          "1545:  case IS_UPLINK_FALSE:",
          "1546:   str = \"Spare\";",
          "1547:   break;",
          "1549:  case IS_UPLINK_TRUE:",
          "1553:   switch (itc)",
          "1554:   {",
          "1555:   case DE_BC_ITC_SPEECH:",
          "1556:    if (extended)",
          "1557:    {",
          "1558:     switch ((oct & 0x60) >> 5)",
          "1559:     {",
          "1560:     case 1: str = \"MS supports at least full rate speech version 1 but does not support half rate speech version 1\"; break;",
          "1561:     case 2: str = \"MS supports at least full rate speech version 1 and half rate speech version 1. MS has a greater preference for half rate speech version 1 than for full rate speech version 1\"; break;",
          "1562:     case 3: str = \"MS supports at least full rate speech version 1 and half rate speech version 1. MS has a greater preference for full rate speech version 1 than for half rate speech version 1\"; break;",
          "1563:     default:",
          "1564:      str = \"Reserved\";",
          "1565:      break;",
          "1566:     }",
          "1567:    }",
          "1568:    else",
          "1569:    {",
          "1570:     switch ((oct & 0x60) >> 5)",
          "1571:     {",
          "1572:     case 1: str = \"Full rate support only MS/fullrate speech version 1 supported\"; break;",
          "1573:     case 2: str = \"Dual rate support MS/half rate speech version 1 preferred, full rate speech version 1 also supported\"; break;",
          "1574:     case 3: str = \"Dual rate support MS/full rate speech version 1 preferred, half rate speech version 1 also supported\"; break;",
          "1575:     default:",
          "1576:      str = \"Reserved\";",
          "1577:      break;",
          "1578:     }",
          "1579:    }",
          "1580:    break;",
          "1582:   default:",
          "1583:    switch ((oct & 0x60) >> 5)",
          "1584:    {",
          "1585:    case 1: str = \"Full rate support only MS\"; break;",
          "1586:    case 2: str = \"Dual rate support MS/half rate preferred\"; break;",
          "1587:    case 3: str = \"Dual rate support MS/full rate preferred\"; break;",
          "1588:    default:",
          "1589:     str = \"Reserved\";",
          "1590:     break;",
          "1591:    }",
          "1592:    break;",
          "1593:   }",
          "1594:   break;",
          "1596:   default:",
          "1597:    str = \"(dissect problem)\";",
          "1598:    break;",
          "1599:   }",
          "1601:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_radio_channel_requirement, tvb, curr_offset, 1,",
          "1602:                                oct, \"%s\", str);",
          "1604:  proto_tree_add_item(subtree, hf_gsm_a_dtap_bearer_cap_coding_standard, tvb, curr_offset, 1, ENC_NA);",
          "1605:  proto_tree_add_item(subtree, hf_gsm_a_dtap_transfer_mode, tvb, curr_offset, 1, ENC_NA);",
          "1607:  proto_tree_add_item(subtree, hf_gsm_a_dtap_itc, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1609:  if (add_string)",
          "1610:   g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "1612:  curr_offset++;",
          "1614:  NO_MORE_DATA_CHECK(len);",
          "1616:  switch (itc)",
          "1617:  {",
          "1618:  case DE_BC_ITC_SPEECH:",
          "1621:   subtree =",
          "1622:    proto_tree_add_subtree(tree,",
          "1623:     tvb, curr_offset, -1, ett_bc_oct_3a, &item,",
          "1624:     \"Octets 3a - Speech Versions\");",
          "1626:   saved_offset = curr_offset;",
          "1628:   do",
          "1629:   {",
          "1630:    oct = tvb_get_guint8(tvb, curr_offset);",
          "1632:    extended = (oct & 0x80) ? FALSE : TRUE;",
          "1634:    proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1635:    proto_tree_add_item(subtree, hf_gsm_a_dtap_coding, tvb, curr_offset, 1, ENC_NA);",
          "1636:    proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+2, 2, ENC_BIG_ENDIAN);",
          "1637:    proto_tree_add_item(subtree, hf_gsm_a_dtap_speech_vers_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1638:    curr_offset++;",
          "1639:   }",
          "1640:   while (extended &&",
          "1641:    ((len - (curr_offset - offset)) > 0));",
          "1643:   proto_item_set_len(item, curr_offset - saved_offset);",
          "1644:   break;",
          "1646:   default:",
          "1649:   subtree =",
          "1650:    proto_tree_add_subtree(tree,",
          "1651:     tvb, curr_offset, 1,",
          "1652:     ett_bc_oct_4, NULL, \"Octet 4\");",
          "1654:   proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1655:   proto_tree_add_item(subtree, is_uplink ? hf_gsm_a_dtap_compression_up : hf_gsm_a_dtap_compression,",
          "1656:    tvb, curr_offset, 1, ENC_NA);",
          "1658:   proto_tree_add_item(subtree, hf_gsm_a_dtap_structure, tvb, curr_offset, 1, ENC_NA);",
          "1659:   proto_tree_add_item(subtree, hf_gsm_a_dtap_duplex_mode, tvb, curr_offset, 1, ENC_NA);",
          "1660:   proto_tree_add_item(subtree, hf_gsm_a_dtap_configuration, tvb, curr_offset, 1, ENC_NA);",
          "1661:   proto_tree_add_item(subtree, hf_gsm_a_dtap_nirr, tvb, curr_offset, 1, ENC_NA);",
          "1662:   proto_tree_add_item(subtree, hf_gsm_a_dtap_establishment, tvb, curr_offset, 1, ENC_NA);",
          "1663:   curr_offset++;",
          "1665:  NO_MORE_DATA_CHECK(len);",
          "1669:  subtree =",
          "1670:   proto_tree_add_subtree(tree,",
          "1671:   tvb, curr_offset, 1,",
          "1672:   ett_bc_oct_5, NULL, \"Octet 5\");",
          "1674:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1676:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1678:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1679:  proto_tree_add_item(subtree, hf_gsm_a_dtap_access_identity, tvb, curr_offset, 1, ENC_NA);",
          "1680:  proto_tree_add_item(subtree, hf_gsm_a_dtap_rate_adaption, tvb, curr_offset, 1, ENC_NA);",
          "1681:  proto_tree_add_item(subtree, hf_gsm_a_dtap_signalling_access_protocol, tvb, curr_offset, 1, ENC_NA);",
          "1682:  curr_offset++;",
          "1684:  NO_MORE_DATA_CHECK(len);",
          "1686:  if (!extended) goto bc_octet_6;",
          "1690:  subtree =",
          "1691:   proto_tree_add_subtree(tree,",
          "1692:   tvb, curr_offset, 1,",
          "1693:   ett_bc_oct_5a, NULL, \"Octet 5a\");",
          "1695:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1697:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1699:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1700:  proto_tree_add_item(subtree, hf_gsm_a_dtap_other_itc, tvb, curr_offset, 1, ENC_NA);",
          "1701:  proto_tree_add_item(subtree, hf_gsm_a_dtap_other_rate_adaption, tvb, curr_offset, 1, ENC_NA);",
          "1702:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 3, ENC_BIG_ENDIAN);",
          "1703:  curr_offset++;",
          "1705:  NO_MORE_DATA_CHECK(len);",
          "1707:  if (!extended) goto bc_octet_6;",
          "1711:  subtree =",
          "1712:   proto_tree_add_subtree(tree,",
          "1713:   tvb, curr_offset, 1,",
          "1714:   ett_bc_oct_5b, NULL, \"Octet 5b\");",
          "1716:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1717:  proto_tree_add_item(subtree, hf_gsm_a_dtap_rate_adaption_header, tvb, curr_offset, 1, ENC_NA);",
          "1718:  proto_tree_add_item(subtree, hf_gsm_a_dtap_multiple_frame_establishment_support, tvb, curr_offset, 1, ENC_NA);",
          "1719:  proto_tree_add_item(subtree, hf_gsm_a_dtap_mode_of_operation, tvb, curr_offset, 1, ENC_NA);",
          "1720:  proto_tree_add_item(subtree, hf_gsm_a_dtap_logical_link_identifier_negotiation, tvb, curr_offset, 1, ENC_NA);",
          "1721:  proto_tree_add_item(subtree, hf_gsm_a_dtap_assignor_assignee, tvb, curr_offset, 1, ENC_NA);",
          "1722:  proto_tree_add_item(subtree, hf_gsm_a_dtap_in_out_band, tvb, curr_offset, 1, ENC_NA);",
          "1723:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+7, 1, ENC_BIG_ENDIAN);",
          "1725:  curr_offset++;",
          "1727:  NO_MORE_DATA_CHECK(len);",
          "1733:  subtree =",
          "1734:   proto_tree_add_subtree(tree,",
          "1735:   tvb, curr_offset, 1,",
          "1736:   ett_bc_oct_6, NULL, \"Octet 6\");",
          "1738:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1740:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1742:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1744:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_layer_1_identity, tvb, curr_offset, 1, oct,",
          "1745:   \"%s\", ((oct & 0x60) == 0x20) ? \"Octet identifier\" : \"Reserved\");",
          "1747:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_information_layer_1_protocol,",
          "1748:   tvb, curr_offset, 1, oct, \"%s\",",
          "1749:   (oct & 0x1e) ? \"Reserved\" : \"Default layer 1 protocol\");",
          "1751:  proto_tree_add_item(subtree, hf_gsm_a_dtap_synchronous, tvb, curr_offset, 1, ENC_NA);",
          "1752:  curr_offset++;",
          "1754:  NO_MORE_DATA_CHECK(len);",
          "1756:  if (!extended) goto bc_octet_7;",
          "1760:  subtree =",
          "1761:   proto_tree_add_subtree(tree,",
          "1762:   tvb, curr_offset, 1,",
          "1763:   ett_bc_oct_6a, NULL, \"Octet 6a\");",
          "1765:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1767:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1769:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1770:  proto_tree_add_item(subtree, hf_gsm_a_dtap_number_of_stop_bits, tvb, curr_offset, 1, ENC_NA);",
          "1771:  proto_tree_add_item(subtree, hf_gsm_a_dtap_negotiation, tvb, curr_offset, 1, ENC_NA);",
          "1772:  proto_tree_add_item(subtree, hf_gsm_a_dtap_number_of_data_bits, tvb, curr_offset, 1, ENC_NA);",
          "1774:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_rate,",
          "1775:   tvb, curr_offset, 1, oct, \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_user_rate_vals, \"Reserved\"));",
          "1777:  curr_offset++;",
          "1779:  NO_MORE_DATA_CHECK(len);",
          "1781:  if (!extended) goto bc_octet_7;",
          "1785:  subtree =",
          "1786:   proto_tree_add_subtree(tree,",
          "1787:   tvb, curr_offset, 1,",
          "1788:   ett_bc_oct_6b, NULL, \"Octet 6b\");",
          "1790:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1792:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1794:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1795:  proto_tree_add_item(subtree, hf_gsm_a_dtap_v110_x30_rate_adaptation, tvb, curr_offset, 1, ENC_NA);",
          "1796:  proto_tree_add_item(subtree, hf_gsm_a_dtap_nic_on_tx, tvb, curr_offset, 1, ENC_NA);",
          "1797:  proto_tree_add_item(subtree, hf_gsm_a_dtap_nic_on_rx, tvb, curr_offset, 1, ENC_NA);",
          "1798:  proto_tree_add_item(subtree, hf_gsm_a_dtap_parity_information, tvb, curr_offset, 1, ENC_NA);",
          "1799:  curr_offset++;",
          "1801:  NO_MORE_DATA_CHECK(len);",
          "1803:  if (!extended) goto bc_octet_7;",
          "1807:  subtree =",
          "1808:   proto_tree_add_subtree(tree,",
          "1809:   tvb, curr_offset, 1,",
          "1810:   ett_bc_oct_6c, NULL, \"Octet 6c\");",
          "1812:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1814:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1816:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1817:  proto_tree_add_item(subtree, hf_gsm_a_dtap_connection_element, tvb, curr_offset, 1, ENC_NA);",
          "1818:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_modem_type, tvb, curr_offset, 1,",
          "1819:   oct, \"%s\", val_to_str_const(oct & 0x1f, gsm_a_dtap_modem_type_vals, \"Reserved\"));",
          "1821:  curr_offset++;",
          "1823:  NO_MORE_DATA_CHECK(len);",
          "1825:  if (!extended) goto bc_octet_7;",
          "1829:  subtree =",
          "1830:   proto_tree_add_subtree(tree,",
          "1831:   tvb, curr_offset, 1,",
          "1832:   ett_bc_oct_6d, NULL, \"Octet 6d\");",
          "1834:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1836:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1838:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1839:  proto_tree_add_item(subtree, hf_gsm_a_dtap_other_modem_type, tvb, curr_offset, 1, ENC_NA);",
          "1840:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_fixed_network_user_rate, tvb, curr_offset, 1,",
          "1841:   oct, \"%s\", val_to_str_const(oct & 0x1f, gsm_a_dtap_fixed_network_user_rate_vals, \"Reserved\"));",
          "1842:  curr_offset++;",
          "1844:  NO_MORE_DATA_CHECK(len);",
          "1846:  if (!extended) goto bc_octet_7;",
          "1850:  subtree =",
          "1851:   proto_tree_add_subtree(tree,",
          "1852:   tvb, curr_offset, 1,",
          "1853:   ett_bc_oct_6e, NULL, \"Octet 6e\");",
          "1855:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1857:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1859:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1861:  if (is_uplink == IS_UPLINK_TRUE)",
          "1862:  {",
          "1863:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F14_4, tvb, curr_offset, 1, ENC_NA);",
          "1864:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_spare20, tvb, curr_offset, 1, ENC_NA);",
          "1865:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F9_6, tvb, curr_offset, 1, ENC_NA);",
          "1866:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F4_8, tvb, curr_offset, 1, ENC_NA);",
          "1868:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_maximum_number_of_traffic_channels, tvb, curr_offset, 1,",
          "1870:  }",
          "1871:  else",
          "1872:  {",
          "1873:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_acceptable_channel_codings_spare78, tvb, curr_offset, 1,",
          "1875:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_maximum_number_of_traffic_channels, tvb, curr_offset, 1,",
          "1877:  }",
          "1879:  curr_offset++;",
          "1881:  NO_MORE_DATA_CHECK(len);",
          "1883:  if (!extended) goto bc_octet_7;",
          "1887:  subtree =",
          "1888:   proto_tree_add_subtree(tree,",
          "1889:   tvb, curr_offset, 1,",
          "1890:   ett_bc_oct_6f, NULL, \"Octet 6f\");",
          "1892:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1894:  extended = (oct & 0x80) ? FALSE : TRUE;",
          "1896:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1897:  proto_tree_add_item(subtree, hf_gsm_a_dtap_uimi, tvb, curr_offset, 1, ENC_NA);",
          "1899:  if (is_uplink == IS_UPLINK_TRUE)",
          "1900:  {",
          "1901:   proto_tree_add_item(subtree, hf_gsm_a_dtap_wanted_air_interface_user_rate, tvb, curr_offset, 1, ENC_NA);",
          "1902:  }",
          "1903:  else",
          "1904:  {",
          "1905:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_wanted_air_interface_user_rate, tvb, curr_offset, 1,",
          "1907:  }",
          "1909:  curr_offset++;",
          "1911:  NO_MORE_DATA_CHECK(len);",
          "1913:  if (!extended) goto bc_octet_7;",
          "1917:  subtree =",
          "1918:   proto_tree_add_subtree(tree,",
          "1919:   tvb, curr_offset, 1,",
          "1920:   ett_bc_oct_6g, NULL, \"Octet 6g\");",
          "1922:  oct = tvb_get_guint8(tvb, curr_offset);",
          "1924:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1926:  if (is_uplink == IS_UPLINK_TRUE)",
          "1927:  {",
          "1928:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F28_8, tvb, curr_offset, 1, ENC_NA);",
          "1929:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F32_0, tvb, curr_offset, 1, ENC_NA);",
          "1930:   proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F43_2, tvb, curr_offset, 1, ENC_NA);",
          "1931:   proto_tree_add_item(subtree, hf_gsm_a_dtap_channel_coding_asymmetry_indication, tvb, curr_offset, 1, ENC_NA);",
          "1932:  }",
          "1933:  else",
          "1934:  {",
          "1935:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_edge_channel_codings, tvb, curr_offset, 1, oct, \"Spare\");",
          "1936:  }",
          "1938:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+6, 2, ENC_BIG_ENDIAN);",
          "1940:  curr_offset++;",
          "1942:  NO_MORE_DATA_CHECK(len);",
          "1947:  subtree =",
          "1948:   proto_tree_add_subtree(tree,",
          "1949:   tvb, curr_offset, 1,",
          "1950:   ett_bc_oct_7, NULL, \"Octet 7\");",
          "1952:  proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1954:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_layer_2_identity, tvb, curr_offset, 1, oct,",
          "1955:   \"%s\", ((oct & 0x60) == 0x40) ? \"Octet identifier\" : \"Reserved\");",
          "1957:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_information_layer_2_protocol, tvb, curr_offset, 1,",
          "1959:  break;",
          "1960:  }",
          "1962:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1964:  return(curr_offset - offset);",
          "1971:  is_uplink = IS_UPLINK_TRUE;",
          "1972:  return de_bearer_cap(tvb, tree, pinfo, offset, len, add_string, string_len);",
          "",
          "[Added Lines]",
          "1495:                            \"Negotiation is done in-band using logical link zero\" };",
          "1501:                          \"does not require to send data with network independent clock\" };",
          "1503:                          \"cannot accept data with network independent clock\" };",
          "1508:     guint8       oct;",
          "1509:     guint8       itc;",
          "1510:     gboolean     extended;",
          "1511:     guint32      curr_offset;",
          "1512:     guint32      saved_offset;",
          "1513:     proto_tree  *subtree;",
          "1514:     proto_item  *item;",
          "1515:     const gchar *str;",
          "1517: #define DE_BC_ITC_SPEECH    0x00",
          "1518: #define DE_BC_ITC_UDI       0x01",
          "1519: #define DE_BC_ITC_EX_PLMN   0x02",
          "1520: #define DE_BC_ITC_FASC_G3   0x03",
          "1521: #define DE_BC_ITC_OTHER_ITC 0x05",
          "1522: #define DE_BC_ITC_RSVD_NET  0x07",
          "1524:     curr_offset = offset;",
          "1526:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1534:     subtree =",
          "1535:         proto_tree_add_subtree(tree,",
          "1536:             tvb, curr_offset, 1,",
          "1537:             ett_bc_oct_3, NULL, \"Octet 3\");",
          "1539:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1540:     itc = oct & 0x07;",
          "1542:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1544:     switch (is_uplink)",
          "1545:     {",
          "1546:     case IS_UPLINK_FALSE:",
          "1547:         str = \"Spare\";",
          "1548:         break;",
          "1550:     case IS_UPLINK_TRUE:",
          "1554:         switch (itc)",
          "1555:         {",
          "1556:         case DE_BC_ITC_SPEECH:",
          "1557:             if (extended)",
          "1558:             {",
          "1559:                 switch ((oct & 0x60) >> 5)",
          "1560:                 {",
          "1561:                 case 1: str = \"MS supports at least full rate speech version 1 but does not support half rate speech version 1\"; break;",
          "1562:                 case 2: str = \"MS supports at least full rate speech version 1 and half rate speech version 1. MS has a greater preference for half rate speech version 1 than for full rate speech version 1\"; break;",
          "1563:                 case 3: str = \"MS supports at least full rate speech version 1 and half rate speech version 1. MS has a greater preference for full rate speech version 1 than for half rate speech version 1\"; break;",
          "1564:                 default:",
          "1565:                     str = \"Reserved\";",
          "1566:                     break;",
          "1567:                 }",
          "1568:             }",
          "1569:             else",
          "1570:             {",
          "1571:                 switch ((oct & 0x60) >> 5)",
          "1572:                 {",
          "1573:                 case 1: str = \"Full rate support only MS/fullrate speech version 1 supported\"; break;",
          "1574:                 case 2: str = \"Dual rate support MS/half rate speech version 1 preferred, full rate speech version 1 also supported\"; break;",
          "1575:                 case 3: str = \"Dual rate support MS/full rate speech version 1 preferred, half rate speech version 1 also supported\"; break;",
          "1576:                 default:",
          "1577:                     str = \"Reserved\";",
          "1578:                     break;",
          "1579:                 }",
          "1580:             }",
          "1581:             break;",
          "1583:         default:",
          "1584:             switch ((oct & 0x60) >> 5)",
          "1585:             {",
          "1586:             case 1: str = \"Full rate support only MS\"; break;",
          "1587:             case 2: str = \"Dual rate support MS/half rate preferred\"; break;",
          "1588:             case 3: str = \"Dual rate support MS/full rate preferred\"; break;",
          "1589:             default:",
          "1590:                 str = \"Reserved\";",
          "1591:                 break;",
          "1592:             }",
          "1593:             break;",
          "1594:         }",
          "1595:         break;",
          "1597:         default:",
          "1598:             str = \"(dissect problem)\";",
          "1599:             break;",
          "1600:         }",
          "1602:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_radio_channel_requirement, tvb, curr_offset, 1,",
          "1603:                                      oct, \"%s\", str);",
          "1605:     proto_tree_add_item(subtree, hf_gsm_a_dtap_bearer_cap_coding_standard, tvb, curr_offset, 1, ENC_NA);",
          "1606:     proto_tree_add_item(subtree, hf_gsm_a_dtap_transfer_mode, tvb, curr_offset, 1, ENC_NA);",
          "1608:     proto_tree_add_item(subtree, hf_gsm_a_dtap_itc, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1610:     if (add_string)",
          "1611:         g_snprintf(add_string, string_len, \" - (%s)\", str);",
          "1613:     curr_offset++;",
          "1615:     NO_MORE_DATA_CHECK(len);",
          "1617:     switch (itc)",
          "1618:     {",
          "1619:     case DE_BC_ITC_SPEECH:",
          "1622:         subtree =",
          "1623:             proto_tree_add_subtree(tree,",
          "1624:                 tvb, curr_offset, -1, ett_bc_oct_3a, &item,",
          "1625:                 \"Octets 3a - Speech Versions\");",
          "1627:         saved_offset = curr_offset;",
          "1629:         do",
          "1630:         {",
          "1631:             oct = tvb_get_guint8(tvb, curr_offset);",
          "1633:             extended = (oct & 0x80) ? FALSE : TRUE;",
          "1635:             proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1636:             proto_tree_add_item(subtree, hf_gsm_a_dtap_coding, tvb, curr_offset, 1, ENC_NA);",
          "1637:             proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+2, 2, ENC_BIG_ENDIAN);",
          "1638:             proto_tree_add_item(subtree, hf_gsm_a_dtap_speech_vers_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1639:             curr_offset++;",
          "1640:         }",
          "1641:         while (extended &&",
          "1642:             ((len - (curr_offset - offset)) > 0));",
          "1644:         proto_item_set_len(item, curr_offset - saved_offset);",
          "1645:         break;",
          "1647:         default:",
          "1650:         subtree =",
          "1651:             proto_tree_add_subtree(tree,",
          "1652:                 tvb, curr_offset, 1,",
          "1653:                 ett_bc_oct_4, NULL, \"Octet 4\");",
          "1655:         proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1656:         proto_tree_add_item(subtree, is_uplink ? hf_gsm_a_dtap_compression_up : hf_gsm_a_dtap_compression,",
          "1657:             tvb, curr_offset, 1, ENC_NA);",
          "1659:         proto_tree_add_item(subtree, hf_gsm_a_dtap_structure, tvb, curr_offset, 1, ENC_NA);",
          "1660:         proto_tree_add_item(subtree, hf_gsm_a_dtap_duplex_mode, tvb, curr_offset, 1, ENC_NA);",
          "1661:         proto_tree_add_item(subtree, hf_gsm_a_dtap_configuration, tvb, curr_offset, 1, ENC_NA);",
          "1662:         proto_tree_add_item(subtree, hf_gsm_a_dtap_nirr, tvb, curr_offset, 1, ENC_NA);",
          "1663:         proto_tree_add_item(subtree, hf_gsm_a_dtap_establishment, tvb, curr_offset, 1, ENC_NA);",
          "1664:         curr_offset++;",
          "1666:     NO_MORE_DATA_CHECK(len);",
          "1670:     subtree =",
          "1671:         proto_tree_add_subtree(tree,",
          "1672:         tvb, curr_offset, 1,",
          "1673:         ett_bc_oct_5, NULL, \"Octet 5\");",
          "1675:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1677:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1679:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1680:     proto_tree_add_item(subtree, hf_gsm_a_dtap_access_identity, tvb, curr_offset, 1, ENC_NA);",
          "1681:     proto_tree_add_item(subtree, hf_gsm_a_dtap_rate_adaption, tvb, curr_offset, 1, ENC_NA);",
          "1682:     proto_tree_add_item(subtree, hf_gsm_a_dtap_signalling_access_protocol, tvb, curr_offset, 1, ENC_NA);",
          "1683:     curr_offset++;",
          "1685:     NO_MORE_DATA_CHECK(len);",
          "1687:     if (!extended) goto bc_octet_6;",
          "1691:     subtree =",
          "1692:         proto_tree_add_subtree(tree,",
          "1693:         tvb, curr_offset, 1,",
          "1694:         ett_bc_oct_5a, NULL, \"Octet 5a\");",
          "1696:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1698:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1700:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1701:     proto_tree_add_item(subtree, hf_gsm_a_dtap_other_itc, tvb, curr_offset, 1, ENC_NA);",
          "1702:     proto_tree_add_item(subtree, hf_gsm_a_dtap_other_rate_adaption, tvb, curr_offset, 1, ENC_NA);",
          "1703:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 3, ENC_BIG_ENDIAN);",
          "1704:     curr_offset++;",
          "1706:     NO_MORE_DATA_CHECK(len);",
          "1708:     if (!extended) goto bc_octet_6;",
          "1712:     subtree =",
          "1713:         proto_tree_add_subtree(tree,",
          "1714:         tvb, curr_offset, 1,",
          "1715:         ett_bc_oct_5b, NULL, \"Octet 5b\");",
          "1717:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1718:     proto_tree_add_item(subtree, hf_gsm_a_dtap_rate_adaption_header, tvb, curr_offset, 1, ENC_NA);",
          "1719:     proto_tree_add_item(subtree, hf_gsm_a_dtap_multiple_frame_establishment_support, tvb, curr_offset, 1, ENC_NA);",
          "1720:     proto_tree_add_item(subtree, hf_gsm_a_dtap_mode_of_operation, tvb, curr_offset, 1, ENC_NA);",
          "1721:     proto_tree_add_item(subtree, hf_gsm_a_dtap_logical_link_identifier_negotiation, tvb, curr_offset, 1, ENC_NA);",
          "1722:     proto_tree_add_item(subtree, hf_gsm_a_dtap_assignor_assignee, tvb, curr_offset, 1, ENC_NA);",
          "1723:     proto_tree_add_item(subtree, hf_gsm_a_dtap_in_out_band, tvb, curr_offset, 1, ENC_NA);",
          "1724:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+7, 1, ENC_BIG_ENDIAN);",
          "1726:     curr_offset++;",
          "1728:     NO_MORE_DATA_CHECK(len);",
          "1734:     subtree =",
          "1735:         proto_tree_add_subtree(tree,",
          "1736:         tvb, curr_offset, 1,",
          "1737:         ett_bc_oct_6, NULL, \"Octet 6\");",
          "1739:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1741:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1743:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1745:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_layer_1_identity, tvb, curr_offset, 1, oct,",
          "1746:         \"%s\", ((oct & 0x60) == 0x20) ? \"Octet identifier\" : \"Reserved\");",
          "1748:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_information_layer_1_protocol,",
          "1749:         tvb, curr_offset, 1, oct, \"%s\",",
          "1750:         (oct & 0x1e) ? \"Reserved\" : \"Default layer 1 protocol\");",
          "1752:     proto_tree_add_item(subtree, hf_gsm_a_dtap_synchronous, tvb, curr_offset, 1, ENC_NA);",
          "1753:     curr_offset++;",
          "1755:     NO_MORE_DATA_CHECK(len);",
          "1757:     if (!extended) goto bc_octet_7;",
          "1761:     subtree =",
          "1762:         proto_tree_add_subtree(tree,",
          "1763:         tvb, curr_offset, 1,",
          "1764:         ett_bc_oct_6a, NULL, \"Octet 6a\");",
          "1766:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1768:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1770:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1771:     proto_tree_add_item(subtree, hf_gsm_a_dtap_number_of_stop_bits, tvb, curr_offset, 1, ENC_NA);",
          "1772:     proto_tree_add_item(subtree, hf_gsm_a_dtap_negotiation, tvb, curr_offset, 1, ENC_NA);",
          "1773:     proto_tree_add_item(subtree, hf_gsm_a_dtap_number_of_data_bits, tvb, curr_offset, 1, ENC_NA);",
          "1775:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_rate,",
          "1776:         tvb, curr_offset, 1, oct, \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_user_rate_vals, \"Reserved\"));",
          "1778:     curr_offset++;",
          "1780:     NO_MORE_DATA_CHECK(len);",
          "1782:     if (!extended) goto bc_octet_7;",
          "1786:     subtree =",
          "1787:         proto_tree_add_subtree(tree,",
          "1788:         tvb, curr_offset, 1,",
          "1789:         ett_bc_oct_6b, NULL, \"Octet 6b\");",
          "1791:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1793:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1795:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1796:     proto_tree_add_item(subtree, hf_gsm_a_dtap_v110_x30_rate_adaptation, tvb, curr_offset, 1, ENC_NA);",
          "1797:     proto_tree_add_item(subtree, hf_gsm_a_dtap_nic_on_tx, tvb, curr_offset, 1, ENC_NA);",
          "1798:     proto_tree_add_item(subtree, hf_gsm_a_dtap_nic_on_rx, tvb, curr_offset, 1, ENC_NA);",
          "1799:     proto_tree_add_item(subtree, hf_gsm_a_dtap_parity_information, tvb, curr_offset, 1, ENC_NA);",
          "1800:     curr_offset++;",
          "1802:     NO_MORE_DATA_CHECK(len);",
          "1804:     if (!extended) goto bc_octet_7;",
          "1808:     subtree =",
          "1809:         proto_tree_add_subtree(tree,",
          "1810:         tvb, curr_offset, 1,",
          "1811:         ett_bc_oct_6c, NULL, \"Octet 6c\");",
          "1813:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1815:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1817:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1818:     proto_tree_add_item(subtree, hf_gsm_a_dtap_connection_element, tvb, curr_offset, 1, ENC_NA);",
          "1819:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_modem_type, tvb, curr_offset, 1,",
          "1820:         oct, \"%s\", val_to_str_const(oct & 0x1f, gsm_a_dtap_modem_type_vals, \"Reserved\"));",
          "1822:     curr_offset++;",
          "1824:     NO_MORE_DATA_CHECK(len);",
          "1826:     if (!extended) goto bc_octet_7;",
          "1830:     subtree =",
          "1831:         proto_tree_add_subtree(tree,",
          "1832:         tvb, curr_offset, 1,",
          "1833:         ett_bc_oct_6d, NULL, \"Octet 6d\");",
          "1835:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1837:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1839:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1840:     proto_tree_add_item(subtree, hf_gsm_a_dtap_other_modem_type, tvb, curr_offset, 1, ENC_NA);",
          "1841:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_fixed_network_user_rate, tvb, curr_offset, 1,",
          "1842:         oct, \"%s\", val_to_str_const(oct & 0x1f, gsm_a_dtap_fixed_network_user_rate_vals, \"Reserved\"));",
          "1843:     curr_offset++;",
          "1845:     NO_MORE_DATA_CHECK(len);",
          "1847:     if (!extended) goto bc_octet_7;",
          "1851:     subtree =",
          "1852:         proto_tree_add_subtree(tree,",
          "1853:         tvb, curr_offset, 1,",
          "1854:         ett_bc_oct_6e, NULL, \"Octet 6e\");",
          "1856:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1858:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1860:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1862:     if (is_uplink == IS_UPLINK_TRUE)",
          "1863:     {",
          "1864:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F14_4, tvb, curr_offset, 1, ENC_NA);",
          "1865:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_spare20, tvb, curr_offset, 1, ENC_NA);",
          "1866:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F9_6, tvb, curr_offset, 1, ENC_NA);",
          "1867:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_TCH_F4_8, tvb, curr_offset, 1, ENC_NA);",
          "1869:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_maximum_number_of_traffic_channels, tvb, curr_offset, 1,",
          "1871:     }",
          "1872:     else",
          "1873:     {",
          "1874:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_acceptable_channel_codings_spare78, tvb, curr_offset, 1,",
          "1876:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_maximum_number_of_traffic_channels, tvb, curr_offset, 1,",
          "1878:     }",
          "1880:     curr_offset++;",
          "1882:     NO_MORE_DATA_CHECK(len);",
          "1884:     if (!extended) goto bc_octet_7;",
          "1888:     subtree =",
          "1889:         proto_tree_add_subtree(tree,",
          "1890:         tvb, curr_offset, 1,",
          "1891:         ett_bc_oct_6f, NULL, \"Octet 6f\");",
          "1893:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1895:     extended = (oct & 0x80) ? FALSE : TRUE;",
          "1897:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1898:     proto_tree_add_item(subtree, hf_gsm_a_dtap_uimi, tvb, curr_offset, 1, ENC_NA);",
          "1900:     if (is_uplink == IS_UPLINK_TRUE)",
          "1901:     {",
          "1902:         proto_tree_add_item(subtree, hf_gsm_a_dtap_wanted_air_interface_user_rate, tvb, curr_offset, 1, ENC_NA);",
          "1903:     }",
          "1904:     else",
          "1905:     {",
          "1906:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_wanted_air_interface_user_rate, tvb, curr_offset, 1,",
          "1908:     }",
          "1910:     curr_offset++;",
          "1912:     NO_MORE_DATA_CHECK(len);",
          "1914:     if (!extended) goto bc_octet_7;",
          "1918:     subtree =",
          "1919:         proto_tree_add_subtree(tree,",
          "1920:         tvb, curr_offset, 1,",
          "1921:         ett_bc_oct_6g, NULL, \"Octet 6g\");",
          "1923:     oct = tvb_get_guint8(tvb, curr_offset);",
          "1925:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1927:     if (is_uplink == IS_UPLINK_TRUE)",
          "1928:     {",
          "1929:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F28_8, tvb, curr_offset, 1, ENC_NA);",
          "1930:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F32_0, tvb, curr_offset, 1, ENC_NA);",
          "1931:         proto_tree_add_item(subtree, hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F43_2, tvb, curr_offset, 1, ENC_NA);",
          "1932:         proto_tree_add_item(subtree, hf_gsm_a_dtap_channel_coding_asymmetry_indication, tvb, curr_offset, 1, ENC_NA);",
          "1933:     }",
          "1934:     else",
          "1935:     {",
          "1936:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_edge_channel_codings, tvb, curr_offset, 1, oct, \"Spare\");",
          "1937:     }",
          "1939:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+6, 2, ENC_BIG_ENDIAN);",
          "1941:     curr_offset++;",
          "1943:     NO_MORE_DATA_CHECK(len);",
          "1948:     subtree =",
          "1949:         proto_tree_add_subtree(tree,",
          "1950:         tvb, curr_offset, 1,",
          "1951:         ett_bc_oct_7, NULL, \"Octet 7\");",
          "1953:     proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "1955:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_layer_2_identity, tvb, curr_offset, 1, oct,",
          "1956:         \"%s\", ((oct & 0x60) == 0x40) ? \"Octet identifier\" : \"Reserved\");",
          "1958:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_user_information_layer_2_protocol, tvb, curr_offset, 1,",
          "1960:     break;",
          "1961:     }",
          "1963:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "1965:     return (curr_offset - offset);",
          "1972:     is_uplink = IS_UPLINK_TRUE;",
          "1973:     return de_bearer_cap(tvb, tree, pinfo, offset, len, add_string, string_len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1979: const true_false_string gsm_a_dtap_mcat_value = {",
          "1982: };",
          "1984: const true_false_string gsm_a_dtap_enicm_value = {",
          "1987: };",
          "1989: const true_false_string gsm_a_dtap_dtmf_value = {",
          "1992: };",
          "1994: static guint16",
          "2003:     if (((oct & 0xf0) >> 4) == 0)",
          "2004:     {",
          "2006:     }",
          "2007:     else",
          "2008:     {",
          "2010:     }",
          "2029: }",
          "2034: static const value_string gsm_a_dtap_coding_standard_vals[] = {",
          "2040: };",
          "2042: static const value_string gsm_a_dtap_call_state_vals[] = {",
          "2065: };",
          "2067: static guint16",
          "2068: de_call_state(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2069: {",
          "2107: }",
          "2112: const value_string gsm_a_dtap_type_of_number_values[] = {",
          "2122: };",
          "2124: const value_string gsm_a_dtap_numbering_plan_id_values[] = {",
          "2135: };",
          "2137: const value_string gsm_a_dtap_present_ind_values[] = {",
          "2143: };",
          "2145: const value_string gsm_a_dtap_screening_ind_values[] = {",
          "2151: };",
          "2153: static guint16",
          "2154: de_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, int header_field, gboolean *address_extracted)",
          "2155: {",
          "2214: }",
          "2219: const value_string gsm_a_dtap_type_of_sub_addr_values[] = {",
          "2223: };",
          "2225: const value_string gsm_a_dtap_odd_even_ind_values[] = {",
          "2229: };",
          "2232: static guint16",
          "2233: de_sub_addr(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gboolean *address_extracted)",
          "2234: {",
          "2297: }",
          "",
          "[Removed Lines]",
          "1980:  \"The mobile station supports Multimedia CAT during the alerting phase of a mobile originated multimedia call establishment\",",
          "1981:  \"The mobile station does not support Multimedia CAT\"",
          "1985:  \"The mobile station supports the Enhanced Network-initiated In-Call Modification procedure\",",
          "1986:  \"The mobile station does not support the Enhanced Network-initiated In-Call Modification procedure\"",
          "1990:  \"the mobile station supports DTMF as specified in subclause 5.5.7 of TS 24.008\",",
          "1991:  \"reserved for earlier versions of the protocol\"",
          "1995: de_cc_cap(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_){",
          "1996:  guint8 oct;",
          "1997:  guint32 curr_offset;",
          "1999:  curr_offset = offset;",
          "2001:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2005:      proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_maximum_number_of_supported_bearers, tvb, curr_offset, 1, 0, \"1\");",
          "2009:      proto_tree_add_item(tree, hf_gsm_a_dtap_maximum_number_of_supported_bearers, tvb, curr_offset, 1, ENC_NA);",
          "2012:  proto_tree_add_item(tree, hf_gsm_a_dtap_mcat, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2013:  proto_tree_add_item(tree, hf_gsm_a_dtap_enicm, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2014:  proto_tree_add_item(tree, hf_gsm_a_dtap_pcp, tvb, curr_offset, 1, ENC_NA);",
          "2015:  proto_tree_add_item(tree, hf_gsm_a_dtap_dtmf, tvb, curr_offset, 1, ENC_NA);",
          "2017:  curr_offset++;",
          "2019:  NO_MORE_DATA_CHECK(len);",
          "2021:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "2022:  proto_tree_add_item(tree, hf_gsm_a_dtap_max_num_of_speech_bearers, tvb, curr_offset, 1, ENC_NA);",
          "2024:  curr_offset++;",
          "2026:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2028:  return(curr_offset - offset);",
          "2035:  { 0x00, \"standardized coding as described in ITU-T Rec. Q.931\" },",
          "2036:  { 0x01, \"reserved for other international standards\" },",
          "2037:  { 0x02, \"national standard\" },",
          "2038:  { 0x03, \"standard defined for the GSM PLMNS as described below\" },",
          "2039:  { 0, NULL }",
          "2043:  { 0x00, \"U0/N0 - null\" },",
          "2044:  { 0x02, \"U0.1/N0.1 - MM connection pending\" },",
          "2045:  { 0x22, \"U0.2 - CC prompt present / N0.2 - CC connection pending\" },",
          "2046:  { 0x23, \"U0.3 - Wait for network information / N0.3 - Network answer pending\" },",
          "2047:  { 0x24, \"U0.4/N0.4 - CC-Establishment present\" },",
          "2048:  { 0x25, \"U0.5/N0.5 - CC-Establishment confirmed\" },",
          "2049:  { 0x26, \"U0.6/N0.6 - Recall present\" },",
          "2050:  { 0x01, \"U1/N1 - call initiated\" },",
          "2051:  { 0x03, \"U3/N3 - mobile originating call proceeding\" },",
          "2052:  { 0x04, \"U4/N4 - call delivered\" },",
          "2053:  { 0x06, \"U6/N6 - call present\" },",
          "2054:  { 0x07, \"U7/N7 - call received\" },",
          "2055:  { 0x08, \"U8/N8 - connect request\" },",
          "2056:  { 0x09, \"U9/N9 - mobile terminating call confirmed\" },",
          "2057:  { 0x0a, \"U10/N10 - active\" },",
          "2058:  { 0x0b, \"U11 - disconnect request\" },",
          "2059:  { 0x0c, \"U12/N12 - disconnect indication\" },",
          "2060:  { 0x13, \"U19/N19 - release request\" },",
          "2061:  { 0x1a, \"U26/N26 - mobile originating modify\" },",
          "2062:  { 0x1b, \"U27/N27 - mobile terminating modify\" },",
          "2063:  { 0x1c, \"N28 - connect indication\" },",
          "2064:  { 0, NULL }",
          "2070:  guint8      oct, coding_standard, call_state;",
          "2071:  proto_tree *subtree;",
          "2073:  subtree =",
          "2074:  proto_tree_add_subtree(tree,",
          "2075:   tvb, offset, 1, ett_gsm_dtap_elem[DE_CALL_STATE], NULL,",
          "2076:   val_to_str_ext_const(DE_CALL_STATE, &gsm_dtap_elem_strings_ext, \"\"));",
          "2078:  proto_tree_add_item(subtree, hf_gsm_a_dtap_coding_standard, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2080:  oct = tvb_get_guint8(tvb, offset);",
          "2081:  coding_standard = (oct & 0xc0) >> 6;",
          "2082:  call_state = oct & 0x3f;",
          "2084:  switch (coding_standard)",
          "2085:  {",
          "2086:  case 0:",
          "2087:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_call_state, tvb,",
          "2088:     offset, 1, call_state, \"%s (%u)\",",
          "2089:     val_to_str_ext_const(call_state, &q931_call_state_vals_ext, \"Reserved\"),",
          "2090:     call_state);",
          "2091:   break;",
          "2092:  case 1:",
          "2093:  case 2:",
          "2094:   proto_tree_add_item(subtree, hf_gsm_a_dtap_call_state, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2095:   break;",
          "2096:  default:",
          "2097:   proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_call_state, tvb,",
          "2098:     offset, 1, call_state, \"%s (%u)\",",
          "2099:     val_to_str_const(call_state, gsm_a_dtap_call_state_vals, \"Reserved\"),",
          "2100:     call_state);",
          "2101:   break;",
          "2102:  }",
          "2106:  return(1);",
          "2113:  { 0x00, \"unknown\" },",
          "2114:  { 0x01, \"International Number\" },",
          "2115:  { 0x02, \"National number\" },",
          "2116:  { 0x03, \"Network Specific Number\" },",
          "2117:  { 0x04, \"Dedicated access, short code\" },",
          "2118:  { 0x05, \"Reserved\" },",
          "2119:  { 0x06, \"Reserved\" },",
          "2120:  { 0x07, \"Reserved for extension\" },",
          "2121:  { 0, NULL }",
          "2125:  { 0x00, \"unknown\" },",
          "2126:  { 0x01, \"ISDN/Telephony Numbering (ITU-T Rec. E.164 / ITU-T Rec. E.163)\" },",
          "2127:  { 0x02, \"spare\" },",
          "2128:  { 0x03, \"Data Numbering (ITU-T Rec. X.121)\" },",
          "2129:  { 0x04, \"Telex Numbering (ITU-T Rec. F.69)\" },",
          "2130:  { 0x08, \"National Numbering\" },",
          "2131:  { 0x09, \"Private Numbering\" },",
          "2132:  { 0x0d, \"Reserved for CTS (see 3GPP TS 44.056)\" },",
          "2133:  { 0x0f, \"Reserved for extension\" },",
          "2134:  { 0, NULL }",
          "2138:  { 0x00, \"Presentation allowed\" },",
          "2139:  { 0x01, \"Presentation restricted\" },",
          "2140:  { 0x02, \"Number not available due to interworking\" },",
          "2141:  { 0x03, \"Reserved\" },",
          "2142:  { 0, NULL }",
          "2146:  { 0x00, \"User-provided, not screened\" },",
          "2147:  { 0x01, \"User-provided, verified and passed\" },",
          "2148:  { 0x02, \"User-provided, verified and failed\" },",
          "2149:  { 0x03, \"Network provided\" },",
          "2150:  { 0, NULL }",
          "2156:  guint8     *poctets;",
          "2157:  guint8      extension, oct;",
          "2158:  guint32     curr_offset, i, num_string_len;",
          "2159:  proto_item *item;",
          "2160:  gboolean    malformed_number;",
          "2163:  curr_offset = offset;",
          "2165:  extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2166:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2167:  proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2168:  proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2169:  curr_offset++;",
          "2171:  if (!extension)",
          "2172:  {",
          "2173:   proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2174:   proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2175:   proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2176:   proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2177:   curr_offset++;",
          "2178:  }",
          "2180:  NO_MORE_DATA_CHECK(len);",
          "2182:  num_string_len = len - (curr_offset - offset);",
          "2183:  poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2186:  my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2187:   &Dgt_mbcd);",
          "2189:  item = proto_tree_add_string_format(tree, header_field,",
          "2190:   tvb, curr_offset, num_string_len,",
          "2191:   a_bigbuf,",
          "2192:   \"BCD Digits: %s\",",
          "2193:   a_bigbuf);",
          "2195:  malformed_number = FALSE;",
          "2196:  for(i = 0; i < num_string_len - 1; i++)",
          "2197:  {",
          "2198:   oct = poctets[i];",
          "2199:   if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "2200:   {",
          "2201:    malformed_number = TRUE;",
          "2202:    break;",
          "2203:   }",
          "2204:  }",
          "2206:  oct = poctets[num_string_len - 1];",
          "2207:  if ((oct & 0x0f) == 0x0f)",
          "2208:   malformed_number = TRUE;",
          "2210:  if(malformed_number)",
          "2211:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2213:  return(len);",
          "2220:  { 0x00, \"NSAP (ITU-T Rec. X.213/ISO 8348 AD2)\" },",
          "2221:  { 0x02, \"User specified\" },",
          "2222:  { 0, NULL }",
          "2226:  { 0x00, \"even number of address signals\" },",
          "2227:  { 0x01, \"odd number of address signals\" },",
          "2228:  { 0, NULL }",
          "2235:  guint32     curr_offset, ia5_string_len, i;",
          "2236:  guint8      type_of_sub_addr, afi, dig1, dig2, oct;",
          "2237:  gchar      *ia5_string;",
          "2238:  gboolean    invalid_ia5_char;",
          "2239:  proto_item *item;",
          "2241:  curr_offset = offset;",
          "2244:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2245:  proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_sub_addr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2246:  proto_tree_add_item(tree, hf_gsm_a_dtap_odd_even_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2247:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 3, ENC_BIG_ENDIAN);",
          "2248:  type_of_sub_addr = (tvb_get_guint8(tvb, curr_offset) & 0x70) >> 4;",
          "2249:  curr_offset++;",
          "2251:  NO_MORE_DATA_CHECK(len);",
          "2253:  if(!type_of_sub_addr)",
          "2254:  {",
          "2255:   afi = tvb_get_guint8(tvb, curr_offset);",
          "2256:   proto_tree_add_item(tree, hf_gsm_a_dtap_afi, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2257:   curr_offset++;",
          "2259:   NO_MORE_DATA_CHECK(len);",
          "2261:   if (afi == 0x50)",
          "2262:   {",
          "2263:    ia5_string_len = len - (curr_offset - offset);",
          "2264:    ia5_string = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, ia5_string_len);",
          "2266:    invalid_ia5_char = FALSE;",
          "2267:    for(i = 0; i < ia5_string_len; i++)",
          "2268:    {",
          "2269:     dig1 = (ia5_string[i] & 0xf0) >> 4;",
          "2270:     dig2 = ia5_string[i] & 0x0f;",
          "2271:     oct = (dig1 * 10) + dig2 + 32;",
          "2272:     if (oct > 127)",
          "2273:      invalid_ia5_char = TRUE;",
          "2274:     ia5_string[i] = oct;",
          "2276:    }",
          "2278:    IA5_7BIT_decode(a_bigbuf, ia5_string, ia5_string_len);",
          "2281:    item = proto_tree_add_text(tree,",
          "2282:     tvb, curr_offset, len - (curr_offset - offset),",
          "2283:     \"Subaddress: %s\", a_bigbuf);",
          "2285:    if(invalid_ia5_char)",
          "2286:     expert_add_info(pinfo, item, &ei_gsm_a_dtap_invalid_ia5_character);",
          "2288:    return(len);",
          "2289:   }",
          "2290:  }",
          "2292:  proto_tree_add_text(tree,",
          "2293:   tvb, curr_offset, len - (curr_offset - offset),",
          "2294:   \"Subaddress information\");",
          "2296:  return(len);",
          "",
          "[Added Lines]",
          "1981:     \"The mobile station supports Multimedia CAT during the alerting phase of a mobile originated multimedia call establishment\",",
          "1982:     \"The mobile station does not support Multimedia CAT\"",
          "1986:     \"The mobile station supports the Enhanced Network-initiated In-Call Modification procedure\",",
          "1987:     \"The mobile station does not support the Enhanced Network-initiated In-Call Modification procedure\"",
          "1991:     \"the mobile station supports DTMF as specified in subclause 5.5.7 of TS 24.008\",",
          "1992:     \"reserved for earlier versions of the protocol\"",
          "1996: de_cc_cap(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_) {",
          "1997:     guint8  oct;",
          "1998:     guint32 curr_offset;",
          "2000:     curr_offset = offset;",
          "2002:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2006:         proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_maximum_number_of_supported_bearers, tvb, curr_offset, 1, 0, \"1\");",
          "2010:         proto_tree_add_item(tree, hf_gsm_a_dtap_maximum_number_of_supported_bearers, tvb, curr_offset, 1, ENC_NA);",
          "2013:     proto_tree_add_item(tree, hf_gsm_a_dtap_mcat, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2014:     proto_tree_add_item(tree, hf_gsm_a_dtap_enicm, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2015:     proto_tree_add_item(tree, hf_gsm_a_dtap_pcp, tvb, curr_offset, 1, ENC_NA);",
          "2016:     proto_tree_add_item(tree, hf_gsm_a_dtap_dtmf, tvb, curr_offset, 1, ENC_NA);",
          "2018:     curr_offset++;",
          "2020:     NO_MORE_DATA_CHECK(len);",
          "2022:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "2023:     proto_tree_add_item(tree, hf_gsm_a_dtap_max_num_of_speech_bearers, tvb, curr_offset, 1, ENC_NA);",
          "2025:     curr_offset++;",
          "2027:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2029:     return (curr_offset - offset);",
          "2036:     { 0x00, \"standardized coding as described in ITU-T Rec. Q.931\" },",
          "2037:     { 0x01, \"reserved for other international standards\" },",
          "2038:     { 0x02, \"national standard\" },",
          "2039:     { 0x03, \"standard defined for the GSM PLMNS as described below\" },",
          "2040:     { 0, NULL }",
          "2044:     { 0x00, \"U0/N0 - null\" },",
          "2045:     { 0x02, \"U0.1/N0.1 - MM connection pending\" },",
          "2046:     { 0x22, \"U0.2 - CC prompt present / N0.2 - CC connection pending\" },",
          "2047:     { 0x23, \"U0.3 - Wait for network information / N0.3 - Network answer pending\" },",
          "2048:     { 0x24, \"U0.4/N0.4 - CC-Establishment present\" },",
          "2049:     { 0x25, \"U0.5/N0.5 - CC-Establishment confirmed\" },",
          "2050:     { 0x26, \"U0.6/N0.6 - Recall present\" },",
          "2051:     { 0x01, \"U1/N1 - call initiated\" },",
          "2052:     { 0x03, \"U3/N3 - mobile originating call proceeding\" },",
          "2053:     { 0x04, \"U4/N4 - call delivered\" },",
          "2054:     { 0x06, \"U6/N6 - call present\" },",
          "2055:     { 0x07, \"U7/N7 - call received\" },",
          "2056:     { 0x08, \"U8/N8 - connect request\" },",
          "2057:     { 0x09, \"U9/N9 - mobile terminating call confirmed\" },",
          "2058:     { 0x0a, \"U10/N10 - active\" },",
          "2059:     { 0x0b, \"U11 - disconnect request\" },",
          "2060:     { 0x0c, \"U12/N12 - disconnect indication\" },",
          "2061:     { 0x13, \"U19/N19 - release request\" },",
          "2062:     { 0x1a, \"U26/N26 - mobile originating modify\" },",
          "2063:     { 0x1b, \"U27/N27 - mobile terminating modify\" },",
          "2064:     { 0x1c, \"N28 - connect indication\" },",
          "2065:     { 0, NULL }",
          "2071:     guint8      oct, coding_standard, call_state;",
          "2072:     proto_tree *subtree;",
          "2074:     subtree =",
          "2075:     proto_tree_add_subtree(tree,",
          "2076:         tvb, offset, 1, ett_gsm_dtap_elem[DE_CALL_STATE], NULL,",
          "2077:         val_to_str_ext_const(DE_CALL_STATE, &gsm_dtap_elem_strings_ext, \"\"));",
          "2079:     proto_tree_add_item(subtree, hf_gsm_a_dtap_coding_standard, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2081:     oct = tvb_get_guint8(tvb, offset);",
          "2082:     coding_standard = (oct & 0xc0) >> 6;",
          "2083:     call_state = oct & 0x3f;",
          "2085:     switch (coding_standard)",
          "2086:     {",
          "2087:     case 0:",
          "2088:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_call_state, tvb,",
          "2089:                 offset, 1, call_state, \"%s (%u)\",",
          "2090:                 val_to_str_ext_const(call_state, &q931_call_state_vals_ext, \"Reserved\"),",
          "2091:                 call_state);",
          "2092:         break;",
          "2093:     case 1:",
          "2094:     case 2:",
          "2095:         proto_tree_add_item(subtree, hf_gsm_a_dtap_call_state, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2096:         break;",
          "2097:     default:",
          "2098:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_call_state, tvb,",
          "2099:                 offset, 1, call_state, \"%s (%u)\",",
          "2100:                 val_to_str_const(call_state, gsm_a_dtap_call_state_vals, \"Reserved\"),",
          "2101:                 call_state);",
          "2102:         break;",
          "2103:     }",
          "2107:     return (1);",
          "2114:     { 0x00, \"unknown\" },",
          "2115:     { 0x01, \"International Number\" },",
          "2116:     { 0x02, \"National number\" },",
          "2117:     { 0x03, \"Network Specific Number\" },",
          "2118:     { 0x04, \"Dedicated access, short code\" },",
          "2119:     { 0x05, \"Reserved\" },",
          "2120:     { 0x06, \"Reserved\" },",
          "2121:     { 0x07, \"Reserved for extension\" },",
          "2122:     { 0, NULL }",
          "2126:     { 0x00, \"unknown\" },",
          "2127:     { 0x01, \"ISDN/Telephony Numbering (ITU-T Rec. E.164 / ITU-T Rec. E.163)\" },",
          "2128:     { 0x02, \"spare\" },",
          "2129:     { 0x03, \"Data Numbering (ITU-T Rec. X.121)\" },",
          "2130:     { 0x04, \"Telex Numbering (ITU-T Rec. F.69)\" },",
          "2131:     { 0x08, \"National Numbering\" },",
          "2132:     { 0x09, \"Private Numbering\" },",
          "2133:     { 0x0d, \"Reserved for CTS (see 3GPP TS 44.056)\" },",
          "2134:     { 0x0f, \"Reserved for extension\" },",
          "2135:     { 0, NULL }",
          "2139:     { 0x00, \"Presentation allowed\" },",
          "2140:     { 0x01, \"Presentation restricted\" },",
          "2141:     { 0x02, \"Number not available due to interworking\" },",
          "2142:     { 0x03, \"Reserved\" },",
          "2143:     { 0, NULL }",
          "2147:     { 0x00, \"User-provided, not screened\" },",
          "2148:     { 0x01, \"User-provided, verified and passed\" },",
          "2149:     { 0x02, \"User-provided, verified and failed\" },",
          "2150:     { 0x03, \"Network provided\" },",
          "2151:     { 0, NULL }",
          "2157:     guint8     *poctets;",
          "2158:     guint8      extension, oct;",
          "2159:     guint32     curr_offset, i, num_string_len;",
          "2160:     proto_item *item;",
          "2161:     gboolean    malformed_number;",
          "2164:     curr_offset = offset;",
          "2166:     extension = tvb_get_guint8(tvb, curr_offset) & 0x80;",
          "2167:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2168:     proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_number, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2169:     proto_tree_add_item(tree, hf_gsm_a_dtap_numbering_plan_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2170:     curr_offset++;",
          "2172:     if (!extension)",
          "2173:     {",
          "2174:         proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2175:         proto_tree_add_item(tree, hf_gsm_a_dtap_present_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2176:         proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 3, ENC_BIG_ENDIAN);",
          "2177:         proto_tree_add_item(tree, hf_gsm_a_dtap_screening_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2178:         curr_offset++;",
          "2179:     }",
          "2181:     NO_MORE_DATA_CHECK(len);",
          "2183:     num_string_len = len - (curr_offset - offset);",
          "2184:     poctets = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, num_string_len);",
          "2187:     my_dgt_tbcd_unpack(a_bigbuf, poctets, num_string_len,",
          "2188:         &Dgt_mbcd);",
          "2190:     item = proto_tree_add_string_format(tree, header_field,",
          "2191:         tvb, curr_offset, num_string_len,",
          "2192:         a_bigbuf,",
          "2193:         \"BCD Digits: %s\",",
          "2194:         a_bigbuf);",
          "2196:     malformed_number = FALSE;",
          "2197:     for(i = 0; i < num_string_len - 1; i++)",
          "2198:     {",
          "2199:         oct = poctets[i];",
          "2200:         if (((oct & 0xf0) == 0xf0) || ((oct & 0x0f) == 0x0f))",
          "2201:         {",
          "2202:             malformed_number = TRUE;",
          "2203:             break;",
          "2204:         }",
          "2205:     }",
          "2207:     oct = poctets[num_string_len - 1];",
          "2208:     if ((oct & 0x0f) == 0x0f)",
          "2209:         malformed_number = TRUE;",
          "2211:     if (malformed_number)",
          "2212:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_end_mark_unexpected);",
          "2214:     return (len);",
          "2221:     { 0x00, \"NSAP (ITU-T Rec. X.213/ISO 8348 AD2)\" },",
          "2222:     { 0x02, \"User specified\" },",
          "2223:     { 0, NULL }",
          "2227:     { 0x00, \"even number of address signals\" },",
          "2228:     { 0x01, \"odd number of address signals\" },",
          "2229:     { 0, NULL }",
          "2236:     guint32     curr_offset, ia5_string_len, i;",
          "2237:     guint8      type_of_sub_addr, afi, dig1, dig2, oct;",
          "2238:     gchar      *ia5_string;",
          "2239:     gboolean    invalid_ia5_char;",
          "2240:     proto_item *item;",
          "2242:     curr_offset = offset;",
          "2245:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2246:     proto_tree_add_item(tree, hf_gsm_a_dtap_type_of_sub_addr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2247:     proto_tree_add_item(tree, hf_gsm_a_dtap_odd_even_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2248:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 3, ENC_BIG_ENDIAN);",
          "2249:     type_of_sub_addr = (tvb_get_guint8(tvb, curr_offset) & 0x70) >> 4;",
          "2250:     curr_offset++;",
          "2252:     NO_MORE_DATA_CHECK(len);",
          "2254:     if (!type_of_sub_addr)",
          "2255:     {",
          "2256:         afi = tvb_get_guint8(tvb, curr_offset);",
          "2257:         proto_tree_add_item(tree, hf_gsm_a_dtap_afi, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2258:         curr_offset++;",
          "2260:         NO_MORE_DATA_CHECK(len);",
          "2262:         if (afi == 0x50)",
          "2263:         {",
          "2264:             ia5_string_len = len - (curr_offset - offset);",
          "2265:             ia5_string = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, curr_offset, ia5_string_len);",
          "2267:             invalid_ia5_char = FALSE;",
          "2268:             for(i = 0; i < ia5_string_len; i++)",
          "2269:             {",
          "2270:                 dig1 = (ia5_string[i] & 0xf0) >> 4;",
          "2271:                 dig2 = ia5_string[i] & 0x0f;",
          "2272:                 oct = (dig1 * 10) + dig2 + 32;",
          "2273:                 if (oct > 127)",
          "2274:                     invalid_ia5_char = TRUE;",
          "2275:                 ia5_string[i] = oct;",
          "2277:             }",
          "2279:             IA5_7BIT_decode(a_bigbuf, ia5_string, ia5_string_len);",
          "2282:             item = proto_tree_add_text(tree,",
          "2283:                 tvb, curr_offset, len - (curr_offset - offset),",
          "2284:                 \"Subaddress: %s\", a_bigbuf);",
          "2286:             if (invalid_ia5_char)",
          "2287:                 expert_add_info(pinfo, item, &ei_gsm_a_dtap_invalid_ia5_character);",
          "2289:             return (len);",
          "2290:         }",
          "2291:     }",
          "2293:     proto_tree_add_text(tree,",
          "2294:         tvb, curr_offset, len - (curr_offset - offset),",
          "2295:         \"Subaddress information\");",
          "2297:     return (len);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2302: guint16",
          "2303: de_cld_party_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len)",
          "2304: {",
          "2319: }",
          "",
          "[Removed Lines]",
          "2305:  gboolean addr_extr;",
          "2307:  de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_cld_party_bcd_num, &addr_extr);",
          "2309:  if(addr_extr) {",
          "2310:   if (sccp_assoc && ! sccp_assoc->called_party) {",
          "2311:    sccp_assoc->called_party = wmem_strdup(wmem_file_scope(), a_bigbuf);",
          "2312:   }",
          "2314:   if (add_string)",
          "2315:    g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2316:  }",
          "2318:  return(len);",
          "",
          "[Added Lines]",
          "2306:     gboolean addr_extr;",
          "2308:     de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_cld_party_bcd_num, &addr_extr);",
          "2310:     if (addr_extr) {",
          "2311:         if (sccp_assoc && ! sccp_assoc->called_party) {",
          "2312:             sccp_assoc->called_party = wmem_strdup(wmem_file_scope(), a_bigbuf);",
          "2313:         }",
          "2315:         if (add_string)",
          "2316:             g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2317:     }",
          "2319:     return (len);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2324: static guint16",
          "2325: de_cld_party_sub_addr(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2326: {",
          "2335: }",
          "",
          "[Removed Lines]",
          "2327:  gboolean addr_extr;",
          "2329:  de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2331:  if (addr_extr && add_string)",
          "2332:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2334:  return(len);",
          "",
          "[Added Lines]",
          "2328:     gboolean addr_extr;",
          "2330:     de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2332:     if (addr_extr && add_string)",
          "2333:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2335:     return (len);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2340: static guint16",
          "2341: de_clg_party_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len)",
          "2342: {",
          "2351: }",
          "",
          "[Removed Lines]",
          "2343:  gboolean addr_extr;",
          "2345:  de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_clg_party_bcd_num, &addr_extr);",
          "2347:  if (addr_extr && add_string)",
          "2348:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2350:  return(len);",
          "",
          "[Added Lines]",
          "2344:     gboolean addr_extr;",
          "2346:     de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_clg_party_bcd_num, &addr_extr);",
          "2348:     if (addr_extr && add_string)",
          "2349:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2351:     return (len);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2356: static guint16",
          "2357: de_clg_party_sub_addr(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2358: {",
          "2367: }",
          "2372: static const value_string gsm_a_dtap_cause_ss_diagnostics_vals[] = {",
          "2382: };",
          "2384: static const value_string gsm_a_dtap_de_cause_coding_standard_vals[] = {",
          "2390: };",
          "2392: static guint16",
          "2393: de_cause(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len)",
          "2394: {",
          "2534: }",
          "",
          "[Removed Lines]",
          "2359:  gboolean addr_extr;",
          "2361:  de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2363:  if (addr_extr && add_string)",
          "2364:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2366:  return(len);",
          "2373:  { 0x01, \"Outgoing calls barred within CUG\" },",
          "2374:  { 0x02, \"No CUG selected\" },",
          "2375:  { 0x03, \"Unknown CUG index\" },",
          "2376:  { 0x04, \"CUG index incompatible with requested basic service\" },",
          "2377:  { 0x05, \"CUG call failure, unspecified\" },",
          "2378:  { 0x06, \"CLIR not subscribed\" },",
          "2379:  { 0x07, \"CCBS possible\" },",
          "2380:  { 0x08, \"CCBS not possible\" },",
          "2381:  { 0, NULL }",
          "2385:  { 0x00, \"Coding as specified in ITU-T Rec. Q.931\" },",
          "2386:  { 0x01, \"Reserved for other international standards\" },",
          "2387:  { 0x02, \"National standard\" },",
          "2388:  { 0x03, \"Standard defined for the GSM PLMNS\" },",
          "2389:  { 0, NULL }",
          "2395:  guint8       oct;",
          "2396:  guint8       cause;",
          "2397:  guint32      curr_offset;",
          "2398:  guint32      diag_length;",
          "2399:  proto_tree  *subtree;",
          "2400:  const gchar *str;",
          "2402:  curr_offset = offset;",
          "2404:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2405:  proto_tree_add_item(tree, hf_gsm_a_dtap_de_cause_coding_standard, tvb, curr_offset, 1, ENC_NA);",
          "2407:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 1, ENC_BIG_ENDIAN);",
          "2409:  proto_tree_add_item(tree, hf_gsm_a_dtap_location, tvb, curr_offset, 1, ENC_NA);",
          "2410:  curr_offset++;",
          "2412:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2414:  if (!(oct & 0x80))",
          "2415:  {",
          "2416:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2417:  proto_tree_add_item(tree, hf_gsm_a_dtap_recommendation, tvb, curr_offset, 1, ENC_NA);",
          "2419:  curr_offset++;",
          "2421:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2422:  }",
          "2424:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2426:  cause = oct & 0x7f;",
          "2427:  switch (cause)",
          "2428:  {",
          "2429:  case 1: str = \"Unassigned (unallocated) number\"; break;",
          "2430:  case 3: str = \"No route to destination\"; break;",
          "2431:  case 6: str = \"Channel unacceptable\"; break;",
          "2432:  case 8: str = \"Operator determined barring\"; break;",
          "2433:  case 16: str = \"Normal call clearing\"; break;",
          "2434:  case 17: str = \"User busy\"; break;",
          "2435:  case 18: str = \"No user responding\"; break;",
          "2436:  case 19: str = \"User alerting, no answer\"; break;",
          "2437:  case 21: str = \"Call rejected\"; break;",
          "2438:  case 22: str = \"Call rejected due to feature at the destination\"; break;",
          "2439:  case 24: str = \"Number changed\"; break;",
          "2440:  case 25: str = \"Pre-emption\"; break;",
          "2441:  case 26: str = \"Non selected user clearing\"; break;",
          "2442:  case 27: str = \"Destination out of order\"; break;",
          "2443:  case 28: str = \"Invalid number format (incomplete number)\"; break;",
          "2444:  case 29: str = \"Facility rejected\"; break;",
          "2445:  case 30: str = \"Response to STATUS ENQUIRY\"; break;",
          "2446:  case 31: str = \"Normal, unspecified\"; break;",
          "2447:  case 34: str = \"No circuit/channel available\"; break;",
          "2448:  case 38: str = \"Network out of order\"; break;",
          "2449:  case 41: str = \"Temporary failure\"; break;",
          "2450:  case 42: str = \"Switching equipment congestion\"; break;",
          "2451:  case 43: str = \"Access information discarded\"; break;",
          "2452:  case 44: str = \"requested circuit/channel not available\"; break;",
          "2453:  case 47: str = \"Resources unavailable, unspecified\"; break;",
          "2454:  case 49: str = \"Quality of service unavailable\"; break;",
          "2455:  case 50: str = \"Requested facility not subscribed\"; break;",
          "2456:  case 55: str = \"Incoming calls barred within the CUG\"; break;",
          "2457:  case 57: str = \"Bearer capability not authorized\"; break;",
          "2458:  case 58: str = \"Bearer capability not presently available\"; break;",
          "2459:  case 63: str = \"Service or option not available, unspecified\"; break;",
          "2460:  case 65: str = \"Bearer service not implemented\"; break;",
          "2461:  case 68: str = \"ACM equal to or greater than ACMmax\"; break;",
          "2462:  case 69: str = \"Requested facility not implemented\"; break;",
          "2463:  case 70: str = \"Only restricted digital information bearer capability is available\"; break;",
          "2464:  case 79: str = \"Service or option not implemented, unspecified\"; break;",
          "2465:  case 81: str = \"Invalid transaction identifier value\"; break;",
          "2466:  case 87: str = \"User not member of CUG\"; break;",
          "2467:  case 88: str = \"Incompatible destination\"; break;",
          "2468:  case 91: str = \"Invalid transit network selection\"; break;",
          "2469:  case 95: str = \"Semantically incorrect message\"; break;",
          "2470:  case 96: str = \"Invalid mandatory information\"; break;",
          "2471:  case 97: str = \"Message type non-existent or not implemented\"; break;",
          "2472:  case 98: str = \"Message type not compatible with protocol state\"; break;",
          "2473:  case 99: str = \"Information element non-existent or not implemented\"; break;",
          "2474:  case 100: str = \"Conditional IE error\"; break;",
          "2475:  case 101: str = \"Message not compatible with protocol state\"; break;",
          "2476:  case 102: str = \"Recovery on timer expiry\"; break;",
          "2477:  case 111: str = \"Protocol error, unspecified\"; break;",
          "2478:  case 127: str = \"Interworking, unspecified\"; break;",
          "2479:  default:",
          "2480:   if (cause <= 31) { str = \"Treat as Normal, unspecified\"; }",
          "2481:   else if ((cause >= 32) && (cause <= 47)) { str = \"Treat as Resources unavailable, unspecified\"; }",
          "2482:   else if ((cause >= 48) && (cause <= 63)) { str = \"Treat as Service or option not available, unspecified\"; }",
          "2483:   else if ((cause >= 64) && (cause <= 79)) { str = \"Treat as Service or option not implemented, unspecified\"; }",
          "2484:   else if ((cause >= 80) && (cause <= 95)) { str = \"Treat as Semantically incorrect message\"; }",
          "2485:   else if ((cause >= 96) && (cause <= 111)) { str = \"Treat as Protocol error, unspecified\"; }",
          "2486:   else { str = \"Treat as Interworking, unspecified\"; }",
          "2487:   break;",
          "2488:  }",
          "2490:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cause,",
          "2491:   tvb, curr_offset, 1, cause,",
          "2492:   \"Cause: (%u) %s\",",
          "2493:   cause,",
          "2494:   str);",
          "2496:  curr_offset++;",
          "2498:  if (add_string)",
          "2499:   g_snprintf(add_string, string_len, \" - (%u) %s\", cause, str);",
          "2501:  NO_MORE_DATA_CHECK(len);",
          "2503:  subtree = proto_tree_add_subtree(tree, tvb, curr_offset, len - (curr_offset - offset),",
          "2504:           ett_gsm_dtap_elem[DE_CAUSE], NULL, \"Diagnostics\");",
          "2517:  if ((cause == 17) || (cause == 29) || (cause == 34) || (cause == 50) ||",
          "2518:   (cause == 55) || (cause == 69) || (cause == 87))",
          "2519:  {",
          "2520:   proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2521:   proto_tree_add_item(subtree, hf_gsm_a_dtap_cause_ss_diagnostics, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2522:   curr_offset++;",
          "2523:  }",
          "2524:  else",
          "2525:  {",
          "2526:   diag_length = len - (curr_offset - offset);",
          "2527:   proto_tree_add_item(subtree, hf_gsm_a_dtap_data, tvb, curr_offset, diag_length, ENC_NA);",
          "2528:   curr_offset += diag_length;",
          "2529:  }",
          "2531:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2533:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2360:     gboolean addr_extr;",
          "2362:     de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2364:     if (addr_extr && add_string)",
          "2365:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2367:     return (len);",
          "2374:     { 0x01, \"Outgoing calls barred within CUG\" },",
          "2375:     { 0x02, \"No CUG selected\" },",
          "2376:     { 0x03, \"Unknown CUG index\" },",
          "2377:     { 0x04, \"CUG index incompatible with requested basic service\" },",
          "2378:     { 0x05, \"CUG call failure, unspecified\" },",
          "2379:     { 0x06, \"CLIR not subscribed\" },",
          "2380:     { 0x07, \"CCBS possible\" },",
          "2381:     { 0x08, \"CCBS not possible\" },",
          "2382:     { 0, NULL }",
          "2386:     { 0x00, \"Coding as specified in ITU-T Rec. Q.931\" },",
          "2387:     { 0x01, \"Reserved for other international standards\" },",
          "2388:     { 0x02, \"National standard\" },",
          "2389:     { 0x03, \"Standard defined for the GSM PLMNS\" },",
          "2390:     { 0, NULL }",
          "2396:     guint8       oct;",
          "2397:     guint8       cause;",
          "2398:     guint32      curr_offset;",
          "2399:     guint32      diag_length;",
          "2400:     proto_tree  *subtree;",
          "2401:     const gchar *str;",
          "2403:     curr_offset = offset;",
          "2405:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2406:     proto_tree_add_item(tree, hf_gsm_a_dtap_de_cause_coding_standard, tvb, curr_offset, 1, ENC_NA);",
          "2408:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+3, 1, ENC_BIG_ENDIAN);",
          "2410:     proto_tree_add_item(tree, hf_gsm_a_dtap_location, tvb, curr_offset, 1, ENC_NA);",
          "2411:     curr_offset++;",
          "2413:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2415:     if (!(oct & 0x80))",
          "2416:     {",
          "2417:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2418:     proto_tree_add_item(tree, hf_gsm_a_dtap_recommendation, tvb, curr_offset, 1, ENC_NA);",
          "2420:     curr_offset++;",
          "2422:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2423:     }",
          "2425:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2427:     cause = oct & 0x7f;",
          "2428:     switch (cause)",
          "2429:     {",
          "2430:     case   1: str = \"Unassigned (unallocated) number\";                                    break;",
          "2431:     case   3: str = \"No route to destination\";                                            break;",
          "2432:     case   6: str = \"Channel unacceptable\";                                               break;",
          "2433:     case   8: str = \"Operator determined barring\";                                        break;",
          "2434:     case  16: str = \"Normal call clearing\";                                               break;",
          "2435:     case  17: str = \"User busy\";                                                          break;",
          "2436:     case  18: str = \"No user responding\";                                                 break;",
          "2437:     case  19: str = \"User alerting, no answer\";                                           break;",
          "2438:     case  21: str = \"Call rejected\";                                                      break;",
          "2439:     case  22: str = \"Call rejected due to feature at the destination\";                    break;",
          "2440:     case  24: str = \"Number changed\";                                                     break;",
          "2441:     case  25: str = \"Pre-emption\";                                                        break;",
          "2442:     case  26: str = \"Non selected user clearing\";                                         break;",
          "2443:     case  27: str = \"Destination out of order\";                                           break;",
          "2444:     case  28: str = \"Invalid number format (incomplete number)\";                          break;",
          "2445:     case  29: str = \"Facility rejected\";                                                  break;",
          "2446:     case  30: str = \"Response to STATUS ENQUIRY\";                                         break;",
          "2447:     case  31: str = \"Normal, unspecified\";                                                break;",
          "2448:     case  34: str = \"No circuit/channel available\";                                       break;",
          "2449:     case  38: str = \"Network out of order\";                                               break;",
          "2450:     case  41: str = \"Temporary failure\";                                                  break;",
          "2451:     case  42: str = \"Switching equipment congestion\";                                     break;",
          "2452:     case  43: str = \"Access information discarded\";                                       break;",
          "2453:     case  44: str = \"requested circuit/channel not available\";                            break;",
          "2454:     case  47: str = \"Resources unavailable, unspecified\";                                 break;",
          "2455:     case  49: str = \"Quality of service unavailable\";                                     break;",
          "2456:     case  50: str = \"Requested facility not subscribed\";                                  break;",
          "2457:     case  55: str = \"Incoming calls barred within the CUG\";                               break;",
          "2458:     case  57: str = \"Bearer capability not authorized\";                                   break;",
          "2459:     case  58: str = \"Bearer capability not presently available\";                          break;",
          "2460:     case  63: str = \"Service or option not available, unspecified\";                       break;",
          "2461:     case  65: str = \"Bearer service not implemented\";                                     break;",
          "2462:     case  68: str = \"ACM equal to or greater than ACMmax\";                                break;",
          "2463:     case  69: str = \"Requested facility not implemented\";                                 break;",
          "2464:     case  70: str = \"Only restricted digital information bearer capability is available\"; break;",
          "2465:     case  79: str = \"Service or option not implemented, unspecified\";                     break;",
          "2466:     case  81: str = \"Invalid transaction identifier value\";                               break;",
          "2467:     case  87: str = \"User not member of CUG\";                                             break;",
          "2468:     case  88: str = \"Incompatible destination\";                                           break;",
          "2469:     case  91: str = \"Invalid transit network selection\";                                  break;",
          "2470:     case  95: str = \"Semantically incorrect message\";                                     break;",
          "2471:     case  96: str = \"Invalid mandatory information\";                                      break;",
          "2472:     case  97: str = \"Message type non-existent or not implemented\";                       break;",
          "2473:     case  98: str = \"Message type not compatible with protocol state\";                    break;",
          "2474:     case  99: str = \"Information element non-existent or not implemented\";                break;",
          "2475:     case 100: str = \"Conditional IE error\";                                               break;",
          "2476:     case 101: str = \"Message not compatible with protocol state\";                         break;",
          "2477:     case 102: str = \"Recovery on timer expiry\";                                           break;",
          "2478:     case 111: str = \"Protocol error, unspecified\";                                        break;",
          "2479:     case 127: str = \"Interworking, unspecified\";                                          break;",
          "2480:     default:",
          "2481:         if (cause <= 31) { str = \"Treat as Normal, unspecified\"; }",
          "2482:         else if ((cause >= 32) && (cause <= 47)) { str = \"Treat as Resources unavailable, unspecified\"; }",
          "2483:         else if ((cause >= 48) && (cause <= 63)) { str = \"Treat as Service or option not available, unspecified\"; }",
          "2484:         else if ((cause >= 64) && (cause <= 79)) { str = \"Treat as Service or option not implemented, unspecified\"; }",
          "2485:         else if ((cause >= 80) && (cause <= 95)) { str = \"Treat as Semantically incorrect message\"; }",
          "2486:         else if ((cause >= 96) && (cause <= 111)) { str = \"Treat as Protocol error, unspecified\"; }",
          "2487:         else { str = \"Treat as Interworking, unspecified\"; }",
          "2488:         break;",
          "2489:     }",
          "2491:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cause,",
          "2492:         tvb, curr_offset, 1, cause,",
          "2493:         \"Cause: (%u) %s\",",
          "2494:         cause,",
          "2495:         str);",
          "2497:     curr_offset++;",
          "2499:     if (add_string)",
          "2500:         g_snprintf(add_string, string_len, \" - (%u) %s\", cause, str);",
          "2502:     NO_MORE_DATA_CHECK(len);",
          "2504:     subtree = proto_tree_add_subtree(tree, tvb, curr_offset, len - (curr_offset - offset),",
          "2505:                                         ett_gsm_dtap_elem[DE_CAUSE], NULL, \"Diagnostics\");",
          "2518:     if ((cause == 17) || (cause == 29) || (cause == 34) || (cause == 50) ||",
          "2519:         (cause == 55) || (cause == 69) || (cause == 87))",
          "2520:     {",
          "2521:         proto_tree_add_item(subtree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2522:         proto_tree_add_item(subtree, hf_gsm_a_dtap_cause_ss_diagnostics, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2523:         curr_offset++;",
          "2524:     }",
          "2525:     else",
          "2526:     {",
          "2527:         diag_length = len - (curr_offset - offset);",
          "2528:         proto_tree_add_item(subtree, hf_gsm_a_dtap_data, tvb, curr_offset, diag_length, ENC_NA);",
          "2529:         curr_offset += diag_length;",
          "2530:     }",
          "2532:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2534:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2550: static guint16",
          "2551: de_conn_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len)",
          "2552: {",
          "2561: }",
          "",
          "[Removed Lines]",
          "2553:  gboolean addr_extr;",
          "2555:  de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_conn_num, &addr_extr);",
          "2557:  if (addr_extr && add_string)",
          "2558:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2560:  return(len);",
          "",
          "[Added Lines]",
          "2554:     gboolean addr_extr;",
          "2556:     de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_conn_num, &addr_extr);",
          "2558:     if (addr_extr && add_string)",
          "2559:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2561:     return (len);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2566: static guint16",
          "2567: de_conn_sub_addr(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2568: {",
          "2577: }",
          "",
          "[Removed Lines]",
          "2569:  gboolean addr_extr;",
          "2571:  de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2573:  if (addr_extr && add_string)",
          "2574:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2576:  return(len);",
          "",
          "[Added Lines]",
          "2570:     gboolean addr_extr;",
          "2572:     de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2574:     if (addr_extr && add_string)",
          "2575:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2577:     return (len);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2583: static guint16",
          "2584: de_facility(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint fac_len, gchar *add_string _U_, int string_len _U_)",
          "2585: {",
          "2625: }",
          "",
          "[Removed Lines]",
          "2586:  guint        saved_offset;",
          "2587:  gint8        appclass;",
          "2588:  gboolean     pc;",
          "2589:  gboolean     ind           = FALSE;",
          "2590:  guint32      component_len = 0;",
          "2591:  guint32      header_end_offset;",
          "2592:  guint32      header_len;",
          "2593:  asn1_ctx_t   asn1_ctx;",
          "2594:  tvbuff_t    *SS_tvb        = NULL;",
          "2595:  void        *save_private_data;",
          "2596:  static gint  comp_type_tag;",
          "2598:  asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);",
          "2600:  save_private_data= pinfo->private_data;",
          "2601:  saved_offset = offset;",
          "2602:  pinfo->private_data = NULL;",
          "2603:  col_append_str(pinfo->cinfo, COL_PROTOCOL,\"/\");",
          "2604:  col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "2605:  while ( fac_len > (offset - saved_offset)){",
          "2609:   header_end_offset = get_ber_identifier(tvb, offset, &appclass, &pc, &comp_type_tag);",
          "2610:   header_end_offset = get_ber_length(tvb, header_end_offset, &component_len, &ind);",
          "2611:   header_len = header_end_offset - offset;",
          "2612:   component_len = header_len + component_len;",
          "2614:   dissect_ROS_Component(FALSE, tvb, offset, &asn1_ctx, tree, hf_ROS_component);",
          "2615:   TODO Call gsm map here",
          "2617:   SS_tvb = tvb_new_subset_length(tvb, offset, component_len);",
          "2618:   col_append_str(pinfo->cinfo, COL_INFO,\"(GSM MAP) \");",
          "2619:   col_set_fence(pinfo->cinfo, COL_INFO);",
          "2620:   call_dissector(gsm_map_handle, SS_tvb, pinfo, tree);",
          "2621:   offset = offset + component_len;",
          "2622:  }",
          "2623:  pinfo->private_data = save_private_data;",
          "2624:  return(fac_len);",
          "",
          "[Added Lines]",
          "2587:     guint        saved_offset;",
          "2588:     gint8        appclass;",
          "2589:     gboolean     pc;",
          "2590:     gboolean     ind           = FALSE;",
          "2591:     guint32      component_len = 0;",
          "2592:     guint32      header_end_offset;",
          "2593:     guint32      header_len;",
          "2594:     asn1_ctx_t   asn1_ctx;",
          "2595:     tvbuff_t    *SS_tvb        = NULL;",
          "2596:     void        *save_private_data;",
          "2597:     static gint  comp_type_tag;",
          "2599:     asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);",
          "2601:     save_private_data= pinfo->private_data;",
          "2602:     saved_offset = offset;",
          "2603:     pinfo->private_data = NULL;",
          "2604:     col_append_str(pinfo->cinfo, COL_PROTOCOL,\"/\");",
          "2605:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "2606:     while (fac_len > (offset - saved_offset)) {",
          "2610:         header_end_offset = get_ber_identifier(tvb, offset, &appclass, &pc, &comp_type_tag);",
          "2611:         header_end_offset = get_ber_length(tvb, header_end_offset, &component_len, &ind);",
          "2612:         header_len = header_end_offset - offset;",
          "2613:         component_len = header_len + component_len;",
          "2615:         dissect_ROS_Component(FALSE, tvb, offset, &asn1_ctx, tree, hf_ROS_component);",
          "2616:         TODO Call gsm map here",
          "2618:         SS_tvb = tvb_new_subset_length(tvb, offset, component_len);",
          "2619:         col_append_str(pinfo->cinfo, COL_INFO,\"(GSM MAP) \");",
          "2620:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "2621:         call_dissector(gsm_map_handle, SS_tvb, pinfo, tree);",
          "2622:         offset = offset + component_len;",
          "2623:     }",
          "2624:     pinfo->private_data = save_private_data;",
          "2625:     return (fac_len);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2629: static guint16",
          "2630: de_hlc(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2631: {",
          "2640: }",
          "",
          "[Removed Lines]",
          "2632:  guint32 curr_offset;",
          "2634:  curr_offset = offset;",
          "2636:  dissect_q931_high_layer_compat_ie(tvb, offset, len, tree);",
          "2638:  curr_offset = curr_offset + len;",
          "2639:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2633:     guint32 curr_offset;",
          "2635:     curr_offset = offset;",
          "2637:     dissect_q931_high_layer_compat_ie(tvb, offset, len, tree);",
          "2639:     curr_offset = curr_offset + len;",
          "2640:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2645: static guint16",
          "2646: de_keypad_facility(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "2647: {",
          "2673: }",
          "",
          "[Removed Lines]",
          "2648:  guint8      keypad_char;",
          "2649:  guint32     curr_offset;",
          "2650:  proto_item *item;",
          "2652:  curr_offset = offset;",
          "2654:  keypad_char = tvb_get_guint8(tvb, curr_offset) & 0x7f;",
          "2656:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "2658:  item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_keypad_information, tvb, curr_offset, 1,",
          "2659:                     keypad_char, \"%c\", keypad_char);",
          "2661:  if (((keypad_char < '0') || (keypad_char > '9')) &&",
          "2662:   ((keypad_char < 'A') || (keypad_char > 'D')) &&",
          "2663:   (keypad_char != '*') && (keypad_char != '#'))",
          "2664:   expert_add_info(pinfo, item, &ei_gsm_a_dtap_keypad_info_not_dtmf_digit);",
          "2665:  curr_offset++;",
          "2667:  if (add_string)",
          "2668:   g_snprintf(add_string, string_len, \" - %c\", keypad_char);",
          "2672:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2649:     guint8      keypad_char;",
          "2650:     guint32     curr_offset;",
          "2651:     proto_item *item;",
          "2653:     curr_offset = offset;",
          "2655:     keypad_char = tvb_get_guint8(tvb, curr_offset) & 0x7f;",
          "2657:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "2659:     item = proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_keypad_information, tvb, curr_offset, 1,",
          "2660:         keypad_char, \"%c\", keypad_char);",
          "2662:     if (((keypad_char < '0') || (keypad_char > '9')) &&",
          "2663:         ((keypad_char < 'A') || (keypad_char > 'D')) &&",
          "2664:         (keypad_char != '*') && (keypad_char != '#'))",
          "2665:         expert_add_info(pinfo, item, &ei_gsm_a_dtap_keypad_info_not_dtmf_digit);",
          "2666:     curr_offset++;",
          "2668:     if (add_string)",
          "2669:         g_snprintf(add_string, string_len, \" - %c\", keypad_char);",
          "2673:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2678: static guint16",
          "2679: de_llc(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2680: {",
          "2689: }",
          "",
          "[Removed Lines]",
          "2681:  guint32 curr_offset;",
          "2683:  curr_offset = offset;",
          "2685:  dissect_q931_bearer_capability_ie(tvb, offset, len, tree);",
          "2687:  curr_offset = curr_offset + len;",
          "2688:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2682:     guint32 curr_offset;",
          "2684:     curr_offset = offset;",
          "2686:     dissect_q931_bearer_capability_ie(tvb, offset, len, tree);",
          "2688:     curr_offset = curr_offset + len;",
          "2689:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2698: static const value_string gsm_a_dtap_notification_description_vals[] = {",
          "2703: };",
          "2705: static guint16",
          "2706: de_notif_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2707: {",
          "2712: }",
          "2716: static const value_string gsm_a_dtap_location_vals[] = {",
          "2726: };",
          "2728: static const value_string gsm_a_dtap_progress_description_vals[] = {",
          "2738: };",
          "2740: static guint16",
          "2741: de_prog_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2742: {",
          "2784: }",
          "2789: static const range_string gsm_a_dtap_recall_type_vals[] = {",
          "2793: };",
          "2795: static guint16",
          "2796: de_recall_type(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2797: {",
          "2802: }",
          "",
          "[Removed Lines]",
          "2699:  { 0x00, \"User suspended\" },",
          "2700:  { 0x01, \"User resumed\" },",
          "2701:  { 0x02, \"Bearer change\" },",
          "2702:  { 0, NULL }",
          "2708:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2709:  proto_tree_add_item(tree, hf_gsm_a_dtap_notification_description, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2711:  return 1;",
          "2717:  { 0x00, \"User\" },",
          "2718:  { 0x01, \"Private network serving the local user\" },",
          "2719:  { 0x02, \"Public network serving the local user\" },",
          "2720:  { 0x03, \"Transit network\" },",
          "2721:  { 0x04, \"Public network serving the remote user\" },",
          "2722:  { 0x05, \"Private network serving the remote user\" },",
          "2723:  { 0x07, \"International network\" },",
          "2724:  { 0x0a, \"Network beyond interworking point\" },",
          "2725:  { 0, NULL }",
          "2729:  { 0x01, \"Call is not end-to-end PLMN/ISDN, further call progress information may be available in-band\" },",
          "2730:  { 0x02, \"Destination address in non-PLMN/ISDN\" },",
          "2731:  { 0x03, \"Origination address in non-PLMN/ISDN\" },",
          "2732:  { 0x04, \"Call has returned to the PLMN/ISDN\" },",
          "2733:  { 0x08, \"In-band information or appropriate pattern now available\" },",
          "2734:  { 0x09, \"In-band multimedia CAT available\" },",
          "2735:  { 0x20, \"Call is end-to-end PLMN/ISDN\" },",
          "2736:  { 0x40, \"Queueing\" },",
          "2737:  { 0, NULL }",
          "2743:  guint8 oct, coding_standard, progress_description;",
          "2744:  guint32 curr_offset;",
          "2746:  curr_offset = offset;",
          "2748:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2749:  coding_standard = (oct & 0x60) >> 5;",
          "2750:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2751:  proto_tree_add_item(tree, hf_gsm_a_dtap_prog_coding_standard, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2752:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 3, 1, ENC_BIG_ENDIAN);",
          "2753:  proto_tree_add_item(tree, hf_gsm_a_dtap_location, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2754:  curr_offset++;",
          "2756:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2757:  progress_description = oct & 0x7f;",
          "2758:  proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2760:  switch (coding_standard)",
          "2761:  {",
          "2762:  case 0:",
          "2763:   proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_progress_description, tvb,",
          "2764:     curr_offset, 1, progress_description, \"%s (%u)\",",
          "2765:     val_to_str_ext_const(progress_description, &q931_progress_description_vals_ext, \"Reserved\"),",
          "2766:     progress_description);",
          "2767:   break;",
          "2768:  case 1:",
          "2769:  case 2:",
          "2770:   proto_tree_add_item(tree, hf_gsm_a_dtap_progress_description, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2771:   break;",
          "2772:  default:",
          "2773:   proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_progress_description, tvb,",
          "2774:     curr_offset, 1, progress_description, \"%s (%u)\",",
          "2775:     val_to_str_const(progress_description, gsm_a_dtap_progress_description_vals, \"Unspecific\"),",
          "2776:     progress_description);",
          "2777:   break;",
          "2778:  }",
          "2779:  curr_offset++;",
          "2781:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2783:  return(curr_offset - offset);",
          "2790:  { 0x00, 0x00, \"CCBS\" },",
          "2791:  { 0x01, 0x06, \"shall be treated as CCBS (intended for other similar type of Recall)\" },",
          "2792:  { 0, 0, NULL }",
          "2798:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (offset<<3), 5, ENC_BIG_ENDIAN);",
          "2799:  proto_tree_add_item(tree, hf_gsm_a_dtap_recall_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2801:  return(1);",
          "",
          "[Added Lines]",
          "2700:     { 0x00, \"User suspended\" },",
          "2701:     { 0x01, \"User resumed\" },",
          "2702:     { 0x02, \"Bearer change\" },",
          "2703:     { 0, NULL }",
          "2709:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2710:     proto_tree_add_item(tree, hf_gsm_a_dtap_notification_description, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2712:     return 1;",
          "2718:     { 0x00, \"User\" },",
          "2719:     { 0x01, \"Private network serving the local user\" },",
          "2720:     { 0x02, \"Public network serving the local user\" },",
          "2721:     { 0x03, \"Transit network\" },",
          "2722:     { 0x04, \"Public network serving the remote user\" },",
          "2723:     { 0x05, \"Private network serving the remote user\" },",
          "2724:     { 0x07, \"International network\" },",
          "2725:     { 0x0a, \"Network beyond interworking point\" },",
          "2726:     { 0, NULL }",
          "2730:     { 0x01, \"Call is not end-to-end PLMN/ISDN, further call progress information may be available in-band\" },",
          "2731:     { 0x02, \"Destination address in non-PLMN/ISDN\" },",
          "2732:     { 0x03, \"Origination address in non-PLMN/ISDN\" },",
          "2733:     { 0x04, \"Call has returned to the PLMN/ISDN\" },",
          "2734:     { 0x08, \"In-band information or appropriate pattern now available\" },",
          "2735:     { 0x09, \"In-band multimedia CAT available\" },",
          "2736:     { 0x20, \"Call is end-to-end PLMN/ISDN\" },",
          "2737:     { 0x40, \"Queueing\" },",
          "2738:     { 0, NULL }",
          "2744:     guint8  oct, coding_standard, progress_description;",
          "2745:     guint32 curr_offset;",
          "2747:     curr_offset = offset;",
          "2749:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2750:     coding_standard = (oct & 0x60) >> 5;",
          "2751:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2752:     proto_tree_add_item(tree, hf_gsm_a_dtap_prog_coding_standard, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2753:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 3, 1, ENC_BIG_ENDIAN);",
          "2754:     proto_tree_add_item(tree, hf_gsm_a_dtap_location, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2755:     curr_offset++;",
          "2757:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2758:     progress_description = oct & 0x7f;",
          "2759:     proto_tree_add_item(tree, hf_gsm_a_extension, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2761:     switch (coding_standard)",
          "2762:     {",
          "2763:     case 0:",
          "2764:         proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_progress_description, tvb,",
          "2765:                 curr_offset, 1, progress_description, \"%s (%u)\",",
          "2766:                 val_to_str_ext_const(progress_description, &q931_progress_description_vals_ext, \"Reserved\"),",
          "2767:                 progress_description);",
          "2768:         break;",
          "2769:     case 1:",
          "2770:     case 2:",
          "2771:         proto_tree_add_item(tree, hf_gsm_a_dtap_progress_description, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2772:         break;",
          "2773:     default:",
          "2774:         proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_progress_description, tvb,",
          "2775:                 curr_offset, 1, progress_description, \"%s (%u)\",",
          "2776:                 val_to_str_const(progress_description, gsm_a_dtap_progress_description_vals, \"Unspecific\"),",
          "2777:                 progress_description);",
          "2778:         break;",
          "2779:     }",
          "2780:     curr_offset++;",
          "2782:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2784:     return (curr_offset - offset);",
          "2791:     { 0x00, 0x00, \"CCBS\" },",
          "2792:     { 0x01, 0x06, \"shall be treated as CCBS (intended for other similar type of Recall)\" },",
          "2793:     { 0, 0, NULL }",
          "2799:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (offset<<3), 5, ENC_BIG_ENDIAN);",
          "2800:     proto_tree_add_item(tree, hf_gsm_a_dtap_recall_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2802:     return (1);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2807: static guint16",
          "2808: de_red_party_bcd_num(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len)",
          "2809: {",
          "2818: }",
          "",
          "[Removed Lines]",
          "2810:  gboolean addr_extr;",
          "2812:  de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_red_party_bcd_num, &addr_extr);",
          "2814:  if (addr_extr && add_string)",
          "2815:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2817:  return(len);",
          "",
          "[Added Lines]",
          "2811:     gboolean    addr_extr;",
          "2813:     de_bcd_num(tvb, tree, pinfo, offset, len, hf_gsm_a_dtap_red_party_bcd_num, &addr_extr);",
          "2815:     if (addr_extr && add_string)",
          "2816:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2818:     return (len);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2823: static guint16",
          "2824: de_red_party_sub_addr(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2825: {",
          "2834: }",
          "2839: static const value_string gsm_a_dtap_repeat_indicator_vals[] = {",
          "2844: };",
          "2846: static guint16",
          "2847: de_repeat_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2848: {",
          "2863: }",
          "",
          "[Removed Lines]",
          "2826:  gboolean addr_extr;",
          "2828:  de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2830:  if (addr_extr && add_string)",
          "2831:   g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2833:  return(len);",
          "2840:  { 0x01, \"Circular for successive selection 'mode 1 alternate mode 2'\" },",
          "2841:  { 0x02, \"Support of fallback mode 1 preferred, mode 2 selected if setup of mode 1 fails\" },",
          "2842:  { 0x03, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "2843:  { 0, NULL }",
          "2849:  guint8 oct;",
          "2850:  guint32 curr_offset;",
          "2852:  curr_offset = offset;",
          "2854:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2856:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_repeat_indicator, tvb, curr_offset, 1, oct,",
          "2857:             \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_repeat_indicator_vals, \"Reserved\"));",
          "2858:  curr_offset++;",
          "2862:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2827:     gboolean    addr_extr;",
          "2829:     de_sub_addr(tvb, tree, pinfo, offset, len, &addr_extr);",
          "2831:     if (addr_extr && add_string)",
          "2832:         g_snprintf(add_string, string_len, \" - (%s)\", a_bigbuf);",
          "2834:     return (len);",
          "2841:     { 0x01, \"Circular for successive selection 'mode 1 alternate mode 2'\" },",
          "2842:     { 0x02, \"Support of fallback mode 1 preferred, mode 2 selected if setup of mode 1 fails\" },",
          "2843:     { 0x03, \"Reserved: was allocated in earlier phases of the protocol\" },",
          "2844:     { 0, NULL }",
          "2850:     guint8  oct;",
          "2851:     guint32 curr_offset;",
          "2853:     curr_offset = offset;",
          "2855:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2857:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_repeat_indicator, tvb, curr_offset, 1, oct,",
          "2858:         \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_repeat_indicator_vals, \"Reserved\"));",
          "2859:     curr_offset++;",
          "2863:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2874: static guint16",
          "2875: de_setup_cont(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2876: {",
          "2880: }",
          "2885: static const value_string gsm_a_dtap_signal_value_vals[] = {",
          "2898: };",
          "2900: static guint16",
          "2901: de_signal(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2902: {",
          "2906: }",
          "2911: static const value_string gsm_a_dtap_ss_ver_ind_vals[] = {",
          "2915: };",
          "2917: static guint16",
          "2918: de_ss_ver_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "2919: {",
          "2934: }",
          "",
          "[Removed Lines]",
          "2877:  dtap_cc_setup(tvb, tree, pinfo, offset, len);",
          "2879:  return (len);",
          "2886:  { 0x00, \"dial tone on\" },",
          "2887:  { 0x01, \"ring back tone on\" },",
          "2888:  { 0x02, \"intercept tone on\" },",
          "2889:  { 0x03, \"network congestion tone on\" },",
          "2890:  { 0x04, \"busy tone on\" },",
          "2891:  { 0x05, \"confirm tone on\" },",
          "2892:  { 0x06, \"answer tone on\" },",
          "2893:  { 0x07, \"call waiting tone on\" },",
          "2894:  { 0x08, \"off-hook warning tone on\" },",
          "2895:  { 0x3f, \"tones off\" },",
          "2896:  { 0x4f, \"alerting off\" },",
          "2897:  { 0, NULL }",
          "2903:  proto_tree_add_item(tree, hf_gsm_a_dtap_signal_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2905:  return 1;",
          "2912:  { 0x00, \"Phase 2 service, ellipsis notation, and phase 2 error handling is supported\" },",
          "2913:  { 0x01, \"SS-Protocol version 3 is supported, and phase 2 error handling is supported\" },",
          "2914:  { 0, NULL }",
          "2920:  guint8       oct;",
          "2921:  guint32      curr_offset;",
          "2923:  curr_offset = offset;",
          "2925:  oct = tvb_get_guint8(tvb, curr_offset);",
          "2927:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ss_version_indicator, tvb, curr_offset, 1,",
          "2928:                         oct, \"%s\", val_to_str_const(oct, gsm_a_dtap_ss_ver_ind_vals, \"Reserved\"));",
          "2929:  curr_offset++;",
          "2931:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2933:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "2878:     dtap_cc_setup(tvb, tree, pinfo, offset, len);",
          "2880:     return (len);",
          "2887:     { 0x00, \"dial tone on\" },",
          "2888:     { 0x01, \"ring back tone on\" },",
          "2889:     { 0x02, \"intercept tone on\" },",
          "2890:     { 0x03, \"network congestion tone on\" },",
          "2891:     { 0x04, \"busy tone on\" },",
          "2892:     { 0x05, \"confirm tone on\" },",
          "2893:     { 0x06, \"answer tone on\" },",
          "2894:     { 0x07, \"call waiting tone on\" },",
          "2895:     { 0x08, \"off-hook warning tone on\" },",
          "2896:     { 0x3f, \"tones off\" },",
          "2897:     { 0x4f, \"alerting off\" },",
          "2898:     { 0, NULL }",
          "2904:     proto_tree_add_item(tree, hf_gsm_a_dtap_signal_value, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2906:     return 1;",
          "2913:     { 0x00, \"Phase 2 service, ellipsis notation, and phase 2 error handling is supported\" },",
          "2914:     { 0x01, \"SS-Protocol version 3 is supported, and phase 2 error handling is supported\" },",
          "2915:     { 0, NULL }",
          "2921:     guint8       oct;",
          "2922:     guint32      curr_offset;",
          "2924:     curr_offset = offset;",
          "2926:     oct = tvb_get_guint8(tvb, curr_offset);",
          "2928:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ss_version_indicator, tvb, curr_offset, 1,",
          "2929:         oct, \"%s\", val_to_str_const(oct, gsm_a_dtap_ss_ver_ind_vals, \"Reserved\"));",
          "2930:     curr_offset++;",
          "2932:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "2934:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2939: User-user protocol discriminator (octet 3)",
          "2940: Bits",
          "2963: All other values are reserved.",
          "2965: static const range_string gsm_a_dtap_u2u_prot_discr_vals[] = {",
          "2978: };",
          "2980: static guint16",
          "2981: de_u2u(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "2982: {",
          "2994: }",
          "2998: static const value_string gsm_a_alerting_pattern_vals[] = {",
          "3008: };",
          "3010: static guint16",
          "3011: de_alert_pat(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3012: {",
          "3024: }",
          "3028: const true_false_string gsm_a_ccbs_activation_value = {",
          "3031: };",
          "3032: static guint16",
          "3033: de_allowed_act(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3034: {",
          "3047: }",
          "",
          "[Removed Lines]",
          "2941: 8 7 6 5 4 3 2 1",
          "2942: 0 0 0 0 0 0 0 0  User specific protocol (Note 1)",
          "2943: 0 0 0 0 0 0 0 1  OSI high layer protocols",
          "2944: 0 0 0 0 0 0 1 0  X.244 (Note 2)",
          "2945: 0 0 0 0 0 0 1 1  Reserved for system management convergence function",
          "2946: 0 0 0 0 0 1 0 0  IA5 characters (Note 3)",
          "2947: 0 0 0 0 0 1 1 1  Rec.V.120 rate adaption",
          "2948: 0 0 0 0 1 0 0 0  Q.931 (I.451) user-network call control messages",
          "2950: 0 0 0 1 0 0 0 0  Reserved for other network layer or",
          "2951: through  layer 3 protocols",
          "2952: 0 0 1 1 1 1 1 1",
          "2954: 0 1 0 0 0 0 0 0",
          "2955: through  National use",
          "2956: 0 1 0 0 1 1 1 0",
          "2957: 0 1 0 0 1 1 1 1  3GPP capability exchange protocol (NOTE 4)",
          "2959: 0 1 0 1 0 0 0 0  Reserved for other network",
          "2960: through  layer or layer 3 protocols",
          "2961: 1 1 1 1 1 1 1 0",
          "2966:  { 0x00, 0x00, \"User specific protocol\" },",
          "2967:  { 0x01, 0x01, \"OSI high layer protocols\" },",
          "2968:  { 0x02, 0x02, \"X.244\" },",
          "2969:  { 0x03, 0x03, \"Reserved for system management convergence function\" },",
          "2970:  { 0x04, 0x04, \"IA5 characters\" },",
          "2971:  { 0x07, 0x07, \"Rate adaption according to ITU-T Rec. V.120\" },",
          "2972:  { 0x08, 0x08, \"User-network call control messages according to ITU-T Rec. Q.931\" },",
          "2973:  { 0x10, 0x3F, \"Reserved for other network layer or layer 3 protocols\" },",
          "2974:  { 0x40, 0x4E, \"National use\" },",
          "2975:  { 0x4F, 0x4F, \"3GPP capability exchange protocol\" },",
          "2976:  { 0x50, 0xFE, \"Reserved for other network layer or layer 3 protocols\" },",
          "2977:  { 0, 0, NULL }",
          "2983:  guint32     curr_offset;",
          "2984:  proto_tree *subtree;",
          "2986:  curr_offset = offset;",
          "2987:  proto_tree_add_item(tree, hf_gsm_a_dtap_u2u_prot_discr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2988:  curr_offset++;",
          "2990:  subtree = proto_tree_add_subtree(tree, tvb, curr_offset, len - 1, ett_gsm_dtap_elem[DE_USER_USER], NULL, \"User-user information\");",
          "2991:  proto_tree_add_item(subtree, hf_gsm_a_dtap_data, tvb, curr_offset, len - 1, ENC_NA);",
          "2993:  return(len);",
          "2999:  { 0x00, \"Alerting Pattern 1\" },",
          "3000:  { 0x01, \"Alerting Pattern 2\" },",
          "3001:  { 0x02, \"Alerting Pattern 3\" },",
          "3002:  { 0x04, \"Alerting Pattern 5\" },",
          "3003:  { 0x05, \"Alerting Pattern 6\" },",
          "3004:  { 0x06, \"Alerting Pattern 7\" },",
          "3005:  { 0x07, \"Alerting Pattern 8\" },",
          "3006:  { 0x08, \"Alerting Pattern 9\" },",
          "3007:  { 0, NULL }",
          "3013:  guint32 curr_offset;",
          "3015:  curr_offset = offset;",
          "3017:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3), 4, ENC_BIG_ENDIAN);",
          "3018:  proto_tree_add_item(tree, hf_gsm_a_dtap_alerting_pattern, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3019:  curr_offset++;",
          "3021:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3023:  return(len);",
          "3029:  \"Activation of CCBS possible\",",
          "3030:  \"Activation of CCBS not possible\"",
          "3035:  guint32 curr_offset;",
          "3037:  curr_offset = offset;",
          "3039:  proto_tree_add_item(tree, hf_gsm_a_dtap_ccbs_activation, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3040:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 1, 7, ENC_BIG_ENDIAN);",
          "3042:  curr_offset++;",
          "3044:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3046:  return(len);",
          "",
          "[Added Lines]",
          "2942: 8   7   6   5   4   3   2   1",
          "2943: 0   0   0   0   0   0   0   0       User specific protocol (Note 1)",
          "2944: 0   0   0   0   0   0   0   1       OSI high layer protocols",
          "2945: 0   0   0   0   0   0   1   0       X.244 (Note 2)",
          "2946: 0   0   0   0   0   0   1   1       Reserved for system management convergence function",
          "2947: 0   0   0   0   0   1   0   0       IA5 characters (Note 3)",
          "2948: 0   0   0   0   0   1   1   1       Rec.V.120 rate adaption",
          "2949: 0   0   0   0   1   0   0   0       Q.931 (I.451) user-network call control messages",
          "2951: 0   0   0   1   0   0   0   0       Reserved for other network layer or",
          "2952: through     layer 3 protocols",
          "2953: 0   0   1   1   1   1   1   1",
          "2955: 0   1   0   0   0   0   0   0",
          "2956: through     National use",
          "2957: 0   1   0   0   1   1   1   0",
          "2958: 0   1   0   0   1   1   1   1       3GPP capability exchange protocol (NOTE 4)",
          "2960: 0   1   0   1   0   0   0   0       Reserved for other network",
          "2961: through     layer or layer 3 protocols",
          "2962: 1   1   1   1   1   1   1   0",
          "2967:     { 0x00, 0x00, \"User specific protocol\" },",
          "2968:     { 0x01, 0x01, \"OSI high layer protocols\" },",
          "2969:     { 0x02, 0x02, \"X.244\" },",
          "2970:     { 0x03, 0x03, \"Reserved for system management convergence function\" },",
          "2971:     { 0x04, 0x04, \"IA5 characters\" },",
          "2972:     { 0x07, 0x07, \"Rate adaption according to ITU-T Rec. V.120\" },",
          "2973:     { 0x08, 0x08, \"User-network call control messages according to ITU-T Rec. Q.931\" },",
          "2974:     { 0x10, 0x3F, \"Reserved for other network layer or layer 3 protocols\" },",
          "2975:     { 0x40, 0x4E, \"National use\" },",
          "2976:     { 0x4F, 0x4F, \"3GPP capability exchange protocol\" },",
          "2977:     { 0x50, 0xFE, \"Reserved for other network layer or layer 3 protocols\" },",
          "2978:     { 0, 0, NULL }",
          "2984:     guint32     curr_offset;",
          "2985:     proto_tree *subtree;",
          "2987:     curr_offset = offset;",
          "2988:     proto_tree_add_item(tree, hf_gsm_a_dtap_u2u_prot_discr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "2989:     curr_offset++;",
          "2991:     subtree = proto_tree_add_subtree(tree, tvb, curr_offset, len - 1, ett_gsm_dtap_elem[DE_USER_USER], NULL, \"User-user information\");",
          "2992:     proto_tree_add_item(subtree, hf_gsm_a_dtap_data, tvb, curr_offset, len - 1, ENC_NA);",
          "2994:     return (len);",
          "3000:     { 0x00, \"Alerting Pattern 1\" },",
          "3001:     { 0x01, \"Alerting Pattern 2\" },",
          "3002:     { 0x02, \"Alerting Pattern 3\" },",
          "3003:     { 0x04, \"Alerting Pattern 5\" },",
          "3004:     { 0x05, \"Alerting Pattern 6\" },",
          "3005:     { 0x06, \"Alerting Pattern 7\" },",
          "3006:     { 0x07, \"Alerting Pattern 8\" },",
          "3007:     { 0x08, \"Alerting Pattern 9\" },",
          "3008:     { 0, NULL }",
          "3014:     guint32 curr_offset;",
          "3016:     curr_offset = offset;",
          "3018:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3), 4, ENC_BIG_ENDIAN);",
          "3019:     proto_tree_add_item(tree, hf_gsm_a_dtap_alerting_pattern, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3020:     curr_offset++;",
          "3022:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3024:     return (len);",
          "3030:     \"Activation of CCBS possible\",",
          "3031:     \"Activation of CCBS not possible\"",
          "3036:     guint32 curr_offset;",
          "3038:     curr_offset = offset;",
          "3040:     proto_tree_add_item(tree, hf_gsm_a_dtap_ccbs_activation, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3041:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 1, 7, ENC_BIG_ENDIAN);",
          "3043:     curr_offset++;",
          "3045:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3047:     return (len);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3051: static guint16",
          "3052: de_stream_id(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "3053: {",
          "3081: }",
          "3086: static const true_false_string gsm_a_mcs_value = {",
          "3089: };",
          "3090: static guint16",
          "3091: de_nw_call_ctrl_cap(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3092: {",
          "3105: }",
          "3109: static const value_string gsm_a_cause_of_no_cli_values[] = {",
          "3115: };",
          "3117: static guint16",
          "3118: de_ca_of_no_cli(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "3119: {",
          "3139: }",
          "",
          "[Removed Lines]",
          "3054:  guint32 curr_offset;",
          "3055:  guint8 oct;",
          "3057:  curr_offset = offset;",
          "3059:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3060:  if (oct == 0x00)",
          "3061:  {",
          "3062:   proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_stream_identifier, tvb, curr_offset, 1, oct,",
          "3063:    \"No Bearer (%u)\", oct);",
          "3065:   if (add_string)",
          "3066:    g_snprintf(add_string, string_len, \" - (No Bearer)\");",
          "3067:  }",
          "3068:  else",
          "3069:  {",
          "3070:   proto_tree_add_item(tree, hf_gsm_a_dtap_stream_identifier, tvb, curr_offset, 1, ENC_NA);",
          "3072:   if (add_string)",
          "3073:    g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "3074:  }",
          "3076:  curr_offset++;",
          "3078:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3080:  return(len);",
          "3087:  \"This value indicates that the network supports the multicall\",",
          "3088:  \"This value indicates that the network does not support the multicall\"",
          "3093:  guint32 curr_offset;",
          "3095:  curr_offset = offset;",
          "3097:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3), 7, ENC_BIG_ENDIAN);",
          "3098:  proto_tree_add_item(tree, hf_gsm_a_dtap_mcs, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3100:  curr_offset++;",
          "3102:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3104:  return(len);",
          "3110:  { 0x00, \"Unavailable\" },",
          "3111:  { 0x01, \"Reject by user\" },",
          "3112:  { 0x02, \"Interaction with other service\" },",
          "3113:  { 0x03, \"Coin line/payphone\" },",
          "3114:  { 0, NULL }",
          "3120:  guint32 curr_offset;",
          "3121:  guint8  oct;",
          "3123:  curr_offset = offset;",
          "3125:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3126:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cause_of_no_cli, tvb, curr_offset, 1, oct,",
          "3127:        \"%s (%u)\",",
          "3128:        val_to_str_const(oct, gsm_a_cause_of_no_cli_values, \"Unavailable\"),",
          "3129:        oct);",
          "3131:  curr_offset++;",
          "3133:  if (add_string)",
          "3134:   g_snprintf(add_string, string_len, \" - (%s)\", val_to_str_const(oct, gsm_a_cause_of_no_cli_values, \"Unavailable\"));",
          "3136:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3138:  return(len);",
          "",
          "[Added Lines]",
          "3055:     guint32 curr_offset;",
          "3056:     guint8 oct;",
          "3058:     curr_offset = offset;",
          "3060:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3061:     if (oct == 0x00)",
          "3062:     {",
          "3063:         proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_stream_identifier, tvb, curr_offset, 1, oct,",
          "3064:             \"No Bearer (%u)\", oct);",
          "3066:         if (add_string)",
          "3067:             g_snprintf(add_string, string_len, \" - (No Bearer)\");",
          "3068:     }",
          "3069:     else",
          "3070:     {",
          "3071:         proto_tree_add_item(tree, hf_gsm_a_dtap_stream_identifier, tvb, curr_offset, 1, ENC_NA);",
          "3073:         if (add_string)",
          "3074:             g_snprintf(add_string, string_len, \" - (%u)\", oct);",
          "3075:     }",
          "3077:     curr_offset++;",
          "3079:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3081:     return (len);",
          "3088:     \"This value indicates that the network supports the multicall\",",
          "3089:     \"This value indicates that the network does not support the multicall\"",
          "3094:     guint32 curr_offset;",
          "3096:     curr_offset = offset;",
          "3098:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3), 7, ENC_BIG_ENDIAN);",
          "3099:     proto_tree_add_item(tree, hf_gsm_a_dtap_mcs, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3101:     curr_offset++;",
          "3103:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3105:     return (len);",
          "3111:     { 0x00, \"Unavailable\" },",
          "3112:     { 0x01, \"Reject by user\" },",
          "3113:     { 0x02, \"Interaction with other service\" },",
          "3114:     { 0x03, \"Coin line/payphone\" },",
          "3115:     { 0, NULL }",
          "3121:     guint32 curr_offset;",
          "3122:     guint8  oct;",
          "3124:     curr_offset = offset;",
          "3126:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3127:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cause_of_no_cli, tvb, curr_offset, 1, oct,",
          "3128:                    \"%s (%u)\",",
          "3129:                    val_to_str_const(oct, gsm_a_cause_of_no_cli_values, \"Unavailable\"),",
          "3130:                    oct);",
          "3132:     curr_offset++;",
          "3134:     if (add_string)",
          "3135:         g_snprintf(add_string, string_len, \" - (%s)\", val_to_str_const(oct, gsm_a_cause_of_no_cli_values, \"Unavailable\"));",
          "3137:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3139:     return (len);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3153: static const value_string gsm_a_dtap_sysid_values[] = {",
          "3157: };",
          "3158: guint16",
          "3159: de_sup_codec_list(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "3160: {",
          "3239: }",
          "",
          "[Removed Lines]",
          "3154:  { 0x0, \"GSM\" },",
          "3155:  { 0x4, \"UMTS\" },",
          "3156:  { 0, NULL }",
          "3161:  guint32     curr_offset;",
          "3162:  guint8      length;",
          "3163:  proto_tree *subtree;",
          "3164:  guint8      sysid_counter;",
          "3166:  curr_offset = offset;",
          "3173:  sysid_counter = 0;",
          "3174:  while (len>(curr_offset-offset)){",
          "3175:   sysid_counter++;",
          "3176:   proto_tree_add_item(tree, hf_gsm_a_dtap_sysid, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3177:   curr_offset++;",
          "3179:   proto_tree_add_item(tree, hf_gsm_a_dtap_bitmap_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3180:   length = tvb_get_guint8(tvb,curr_offset);",
          "3181:   curr_offset++;",
          "3182:   if (length > 0)",
          "3183:   {",
          "3184:    subtree = proto_tree_add_subtree_format(tree, tvb, curr_offset, length, ett_gsm_dtap_elem[DE_SUP_CODEC_LIST], NULL,",
          "3185:             \"Codec Bitmap for SysID %u\", sysid_counter);",
          "3206:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_tdma_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3207:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr_2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3208:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3209:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_hr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3210:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_fr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3211:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3212:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_hr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3213:    proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_fr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3214:    curr_offset++;",
          "3215:    length--;",
          "3217:    if (length > 0)",
          "3218:    {",
          "3222:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset << 3, 2, ENC_BIG_ENDIAN);",
          "3223:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ohr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3224:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ofr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3225:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ohr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3226:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3227:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_fr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3228:     proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_pdc_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3229:     curr_offset++;",
          "3230:     length--;",
          "3231:    }",
          "3232:   }",
          "3234:   curr_offset = curr_offset + length;",
          "3235:  }",
          "3238:  return(curr_offset-offset);",
          "",
          "[Added Lines]",
          "3155:     { 0x0,  \"GSM\" },",
          "3156:     { 0x4,  \"UMTS\" },",
          "3157:     { 0, NULL }",
          "3162:     guint32     curr_offset;",
          "3163:     guint8      length;",
          "3164:     proto_tree *subtree;",
          "3165:     guint8      sysid_counter;",
          "3167:     curr_offset = offset;",
          "3174:     sysid_counter = 0;",
          "3175:     while (len>(curr_offset-offset)) {",
          "3176:         sysid_counter++;",
          "3177:         proto_tree_add_item(tree, hf_gsm_a_dtap_sysid, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3178:         curr_offset++;",
          "3180:         proto_tree_add_item(tree, hf_gsm_a_dtap_bitmap_length, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3181:         length = tvb_get_guint8(tvb,curr_offset);",
          "3182:         curr_offset++;",
          "3183:         if (length > 0)",
          "3184:         {",
          "3185:             subtree = proto_tree_add_subtree_format(tree, tvb, curr_offset, length, ett_gsm_dtap_elem[DE_SUP_CODEC_LIST], NULL,",
          "3186:                                                 \"Codec Bitmap for SysID %u\", sysid_counter);",
          "3207:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_tdma_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3208:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr_2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3209:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3210:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_hr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3211:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_fr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3212:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3213:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_hr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3214:             proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_gsm_fr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3215:             curr_offset++;",
          "3216:             length--;",
          "3218:             if (length > 0)",
          "3219:             {",
          "3223:                 proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset << 3, 2, ENC_BIG_ENDIAN);",
          "3224:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ohr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3225:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ofr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3226:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_ohr_amr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3227:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_umts_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3228:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_fr_amr_wb, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3229:                 proto_tree_add_item(subtree, hf_gsm_a_dtap_codec_pdc_efr, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3230:                 curr_offset++;",
          "3231:                 length--;",
          "3232:             }",
          "3233:         }",
          "3235:         curr_offset = curr_offset + length;",
          "3236:     }",
          "3239:     return (curr_offset-offset);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3256: guint16",
          "3257: de_serv_cat(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3258: {",
          "3274: }",
          "",
          "[Removed Lines]",
          "3259:  guint32 curr_offset;",
          "3261:  curr_offset = offset;",
          "3263:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3264:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b7, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3265:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b6, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3266:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3267:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3268:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3269:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3270:  proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3271:  curr_offset++;",
          "3273:  return len;",
          "",
          "[Added Lines]",
          "3260:     guint32 curr_offset;",
          "3262:     curr_offset = offset;",
          "3264:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3265:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b7, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3266:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b6, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3267:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b5, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3268:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b4, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3269:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b3, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3270:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b2, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3271:     proto_tree_add_item(tree, hf_gsm_a_dtap_serv_cat_b1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);",
          "3272:     curr_offset++;",
          "3274:     return len;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3286: static guint16",
          "3287: de_cp_user_data(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_)",
          "3288: {",
          "3309: }",
          "",
          "[Removed Lines]",
          "3289:  guint32   curr_offset;",
          "3290:  tvbuff_t *rp_tvb;",
          "3292:  curr_offset = offset;",
          "3294:  proto_tree_add_text(tree, tvb, curr_offset, len,",
          "3295:   \"RPDU (not displayed)\");",
          "3300:  rp_tvb = tvb_new_subset_length(tvb, curr_offset, len);",
          "3302:  call_dissector(rp_handle, rp_tvb, pinfo, g_tree);",
          "3304:  curr_offset += len;",
          "3306:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3308:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "3290:     guint32   curr_offset;",
          "3291:     tvbuff_t *rp_tvb;",
          "3293:     curr_offset = offset;",
          "3295:     proto_tree_add_text(tree, tvb, curr_offset, len,",
          "3296:         \"RPDU (not displayed)\");",
          "3301:     rp_tvb = tvb_new_subset_length(tvb, curr_offset, len);",
          "3303:     call_dissector(rp_handle, rp_tvb, pinfo, g_tree);",
          "3305:     curr_offset += len;",
          "3307:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3309:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3314: static const value_string gsm_a_dtap_cp_cause_values[] = {",
          "3315:     { 17, \"Network failure\"},",
          "3325: };",
          "3327: static guint16",
          "3328: de_cp_cause(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string, int string_len)",
          "3329: {",
          "3337:     str = val_to_str_const(oct, gsm_a_dtap_cp_cause_values, \"Reserved, treat as Protocol error, unspecified\");",
          "3339:         oct, \"(%u) %s\", oct, str);",
          "3348: }",
          "3350: static guint16",
          "3351: de_tp_sub_channel(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3352: {",
          "3392: }",
          "3394: static guint16",
          "3395: de_tp_ack(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3396: {",
          "3412: }",
          "3414: static const value_string gsm_channel_coding_vals[] = {",
          "3420: };",
          "3422: static guint16",
          "3423: de_tp_loop_type(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3424: {",
          "3432:     proto_tree_add_item(tree, hf_gsm_a_dtap_channel_coding03, tvb, curr_offset, 1, ENC_NA);",
          "3451: }",
          "3453: static guint16",
          "3454: de_tp_loop_ack(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3455: {",
          "3463:     proto_tree_add_item(tree, hf_gsm_a_dtap_channel_coding30, tvb, curr_offset, 1, ENC_NA);",
          "3486: }",
          "3488: static const value_string gsm_tp_tested_device_vals[] = {",
          "3494: };",
          "3496: static guint16",
          "3497: de_tp_tested_device(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3498: {",
          "3505:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_tested_device, tvb, curr_offset, 1,",
          "3510: }",
          "3512: static guint16",
          "3513: de_tp_pdu_description(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3514: {",
          "3537: }",
          "3539: static guint16",
          "3540: de_tp_mode_flag(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3541: {",
          "3559: }",
          "3561: static guint16",
          "3562: de_tp_egprs_mode_flag(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3563: {",
          "3581: }",
          "3583: static const value_string gsm_positioning_technology_vals[] = {",
          "3587: };",
          "3589: static guint16",
          "3590: de_tp_ms_positioning_technology(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3591: {",
          "3599:         oct, \"%s\", val_to_str(oct, gsm_positioning_technology_vals, \"Reserved (%d)\"));",
          "3603: }",
          "3605: static guint16",
          "3606: de_tp_ue_test_loop_mode(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3607: {",
          "3652: }",
          "3654: static guint16",
          "3655: de_tp_ue_positioning_technology(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3656: {",
          "3665:         oct, \"%s\", val_to_str(oct, gsm_positioning_technology_vals, \"Reserved (%d)\"));",
          "3669: }",
          "3671: static guint16",
          "3672: de_tp_rlc_sdu_counter_value(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3673: {",
          "3685: }",
          "3687: static const value_string epc_ue_test_loop_mode_vals[] = {",
          "3693: };",
          "3694: static guint16",
          "3695: de_tp_epc_ue_test_loop_mode(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3696: {",
          "3712: }",
          "3714: static guint16",
          "3715: de_tp_epc_ue_tl_a_lb_setup(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3716: {",
          "3744: }",
          "3746: static guint16",
          "3747: de_tp_epc_ue_tl_b_lb_setup(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3748: {",
          "3757: }",
          "3759: static guint16",
          "3760: de_tp_epc_ue_tl_c_setup(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3761: {",
          "3774: }",
          "3776: static const value_string epc_ue_positioning_technology_vals[] = {",
          "3780: };",
          "3782: static guint16",
          "3783: de_tp_epc_ue_positioning_technology(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3784: {",
          "3793: }",
          "3795: static guint16",
          "3796: de_tp_epc_mbms_packet_counter_value(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3797: {",
          "3806: }",
          "3808: static const true_false_string epc_latitude_sign_value = {",
          "3811: };",
          "3813: static const true_false_string epc_altitude_dir_value = {",
          "3816: };",
          "3818: static guint16",
          "3819: de_tp_epc_ellipsoid_point_with_alt(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3820: {",
          "3839: }",
          "3841: static guint16",
          "3842: de_tp_epc_horizontal_velocity(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3843: {",
          "3853: }",
          "3855: static guint16",
          "3856: de_tp_epc_gnss_tod_msec(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_)",
          "3857: {",
          "3866: }",
          "3868: guint16 (*dtap_elem_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len, gchar *add_string, int string_len) = {",
          "3955: };",
          "",
          "[Removed Lines]",
          "3316:  { 22, \"Congestion\"},",
          "3317:  { 81, \"Invalid Transaction Identifier value\"},",
          "3318:  { 95, \"Semantically incorrect message\"},",
          "3319:  { 96, \"Invalid mandatory information\"},",
          "3320:  { 97, \"Message type non-existent or not implemented\"},",
          "3321:  { 98, \"Message not compatible with the short message protocol state\"},",
          "3322:  { 99, \"Information element non-existent or not implemented\"},",
          "3323:  { 111, \"Protocol error, unspecified\"},",
          "3324:  { 0, NULL }",
          "3330:  guint8       oct;",
          "3331:  guint32      curr_offset;",
          "3332:  const gchar *str;",
          "3334:  curr_offset = offset;",
          "3336:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3338:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cp_cause, tvb, curr_offset, 1,",
          "3340:  curr_offset++;",
          "3342:  if (add_string)",
          "3343:   g_snprintf(add_string, string_len, \" - (%u) %s\", oct, str);",
          "3347:  return(curr_offset - offset);",
          "3353:  guint32      curr_offset;",
          "3354:  guchar       oct;",
          "3355:  const gchar *str;",
          "3357:  curr_offset = offset;",
          "3359:  oct = tvb_get_guint8(tvb, curr_offset) & 0x3f;",
          "3360:  if ((oct & 0x38) == 0x38)",
          "3361:   str = \"I\";",
          "3362:  else if ((oct & 0x38) == 0x18)",
          "3363:   str = \"F\";",
          "3364:  else if ((oct & 0x38) == 0x10)",
          "3365:   str = \"E\";",
          "3366:  else if ((oct & 0x38) == 0x08)",
          "3367:   str = \"D\";",
          "3368:  else if ((oct & 0x3c) == 0x04)",
          "3369:   str = \"C\";",
          "3370:  else if ((oct & 0x3e) == 0x02)",
          "3371:   str = \"B\";",
          "3372:  else if ((oct & 0x3e) == 0x00)",
          "3373:   str = \"A\";",
          "3374:  else",
          "3375:   str = \"unknown\";",
          "3377:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_test_loop, tvb, curr_offset, 1,",
          "3378:                 oct, \"%s\", str);",
          "3380:  if (oct & 0x01)",
          "3381:   proto_tree_add_text(tree,",
          "3382:    tvb, curr_offset, 1,",
          "3383:    \"Only one TCH active or sub-channel 0 of two half rate channels is to be looped\");",
          "3384:  else",
          "3385:   proto_tree_add_text(tree,",
          "3386:    tvb, curr_offset, 1,",
          "3387:    \"Sub-channel 1 of two half rate channels is to be looped\");",
          "3389:  curr_offset+= 1;",
          "3391:  return(curr_offset - offset);",
          "3397:  guint32 curr_offset;",
          "3398:  guchar oct;",
          "3400:  curr_offset = offset;",
          "3402:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3404:  if ((oct & 0xF0) == 0x80)",
          "3405:   proto_tree_add_text(tree,tvb, curr_offset, 1, \"Acknowledgment element: %d\",oct&0x01);",
          "3406:  else",
          "3407:   proto_tree_add_text(tree,tvb, curr_offset, 1, \"No acknowledgment element present\");",
          "3409:  curr_offset+= 1;",
          "3411:  return(curr_offset - offset);",
          "3415:  { 0x00, \"not needed. The Burst-by-Burst loop is activated, type G\" },",
          "3416:  { 0x01, \"Channel coding needed. Frame erasure is to be signalled, type H\" },",
          "3417:  { 0x02, \"reserved\" },",
          "3418:  { 0x03, \"reserved\" },",
          "3419:  { 0, NULL }",
          "3425:  guint32 curr_offset;",
          "3426:  guchar oct;",
          "3428:  curr_offset = offset;",
          "3430:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3434:  switch (oct & 0x1c)",
          "3435:  {",
          "3436:   case 0x00:",
          "3437:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 1\");",
          "3438:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Timeslot number %d\",(oct & 0xe0)>>5);",
          "3439:    break;",
          "3440:   case 0x04:",
          "3441:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 2\");",
          "3442:    break;",
          "3443:   default:",
          "3444:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Loop mechanism reserved (%d)\",(oct & 0x1c)>>2);",
          "3445:    break;",
          "3446:  }",
          "3448:  curr_offset+= 1;",
          "3450:  return(curr_offset - offset);",
          "3456:  guint32 curr_offset;",
          "3457:  guchar oct;",
          "3459:  curr_offset = offset;",
          "3461:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3465:  switch (oct & 0x0e)",
          "3466:  {",
          "3467:   case 0x00:",
          "3468:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 1\");",
          "3469:    break;",
          "3470:   case 0x02:",
          "3471:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 2\");",
          "3472:    break;",
          "3473:   default:",
          "3474:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"Loop mechanism reserved (%d)\",(oct & 0x0e)>>1);",
          "3475:    break;",
          "3476:  }",
          "3478:  if (oct & 0x01)",
          "3479:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot TCH loop was not closed due to error\");",
          "3480:  else",
          "3481:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot TCH loop was closed successfully\");",
          "3483:  curr_offset+= 1;",
          "3485:  return(curr_offset - offset);",
          "3489:  { 0x00, \"Normal operation (no tested device via DAI)\" },",
          "3490:  { 0x01, \"Test of speech decoder / DTX functions (downlink)\" },",
          "3491:  { 0x02, \"Test of speech encoder / DTX functions (uplink)\" },",
          "3492:  { 0x03, \"Test of acoustic devices and A/D & D/A\" },",
          "3493:  { 0, NULL }",
          "3499:  guint32 curr_offset;",
          "3500:  guchar oct;",
          "3502:  curr_offset = offset;",
          "3504:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3506:                 oct, \"%s\", val_to_str(oct, gsm_tp_tested_device_vals, \"Reserved (%d)\"));",
          "3507:  curr_offset+= 1;",
          "3509:  return(curr_offset - offset);",
          "3515:  guint32 curr_offset;",
          "3516:  guint16 value;",
          "3518:  curr_offset = offset;",
          "3520:  value = tvb_get_ntohs(tvb, curr_offset);",
          "3521:  curr_offset += 2;",
          "3523:  if (value & 0x8000)",
          "3524:  {",
          "3525:   if ((value & 0xfff) == 0)",
          "3526:    proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3527:                     tvb, curr_offset, 2, value, \"Infinite number of PDUs to be transmitted in the TBF\");",
          "3528:   else",
          "3529:    proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3530:                     tvb, curr_offset, 2, value & 0xfff, \"%d PDUs to be transmitted in the TBF\", value & 0xfff);",
          "3531:  }",
          "3532:  else",
          "3533:   proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3534:                     tvb, curr_offset, 2, value, \"reserved\");",
          "3536:  return(curr_offset - offset);",
          "3542:  guint32 curr_offset;",
          "3543:  guchar oct;",
          "3545:  curr_offset = offset;",
          "3547:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3549:  if (oct & 0x01)",
          "3550:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS shall select the loop back option\");",
          "3551:  else",
          "3552:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS shall itself generate the pseudorandom data\");",
          "3554:  proto_tree_add_item(tree, hf_gsm_a_dtap_downlink_timeslot_offset, tvb, curr_offset, 1, ENC_NA);",
          "3556:  curr_offset+= 1;",
          "3558:  return(curr_offset - offset);",
          "3564:  guint32 curr_offset;",
          "3565:  guchar oct;",
          "3567:  curr_offset = offset;",
          "3569:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3571:  if (oct & 0x01)",
          "3572:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS loops back blocks on the uplink using GMSK modulation only\");",
          "3573:  else",
          "3574:   proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS loops back blocks on the uplink using either GMSK or 8-PSK modulation following the detected received modulation\");",
          "3576:  proto_tree_add_item(tree, hf_gsm_a_dtap_downlink_timeslot_offset, tvb, curr_offset, 1, ENC_NA);",
          "3578:  curr_offset+= 1;",
          "3580:  return(curr_offset - offset);",
          "3584:  { 0x00, \"AGPS\" },",
          "3585:  { 0x01, \"AGNSS\" },",
          "3586:  { 0, NULL }",
          "3592:  guint32 curr_offset;",
          "3593:  guchar oct;",
          "3595:  curr_offset = offset;",
          "3597:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3598:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ms_positioning_technology, tvb, curr_offset, 1,",
          "3600:  curr_offset+= 1;",
          "3602:  return(curr_offset - offset);",
          "3608:  guint32 curr_offset;",
          "3609:  guchar oct;",
          "3610:  guint8 lb_setup_length,i,j;",
          "3611:  guint16 value;",
          "3613:  curr_offset = offset;",
          "3615:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3616:  curr_offset+= 1;",
          "3618:  switch (oct & 0x03)",
          "3619:  {",
          "3620:   case 0:",
          "3621:   {",
          "3622:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 1 loop back (loopback of RLC SDUs or PDCP SDUs)\");",
          "3623:    lb_setup_length = tvb_get_guint8(tvb, curr_offset);",
          "3624:    curr_offset += 1;",
          "3625:    for (i=0,j=0; (i<lb_setup_length) && (j<4); i+=3,j++)",
          "3626:    {",
          "3627:     proto_tree_add_text(tree, tvb, curr_offset, 1, \"LB setup RB IE %d\",j+1);",
          "3628:     value = tvb_get_ntohs(tvb, curr_offset);",
          "3629:     curr_offset += 2;",
          "3630:     proto_tree_add_text(tree, tvb, curr_offset, 1, \"Uplink RLC SDU size is %d bits\",value);",
          "3631:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3632:     curr_offset+= 1;",
          "3633:     proto_tree_add_text(tree, tvb, curr_offset, 1, \"Radio Bearer %d\",oct & 0x1f);",
          "3634:    }",
          "3635:    break;",
          "3636:   }",
          "3637:   case 1:",
          "3638:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 2 loop back (loopback of transport block data and CRC bits)\");",
          "3639:    break;",
          "3640:   case 2:",
          "3641:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 3 RLC SDU counting (counting of received RLC SDUs)\");",
          "3642:    oct = tvb_get_guint8(tvb, curr_offset);",
          "3643:    curr_offset+= 1;",
          "3644:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"MBMS short transmission identity %d\",(oct & 0x1f)+1);",
          "3645:    break;",
          "3646:   default:",
          "3647:    proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode reserved (%d)\",oct & 0x03);",
          "3648:    break;",
          "3649:  }",
          "3651:  return(curr_offset - offset);",
          "3657:  guint32 curr_offset;",
          "3658:  guchar oct;",
          "3660:  curr_offset = offset;",
          "3662:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3664:  proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ue_positioning_technology, tvb, curr_offset, 1,",
          "3666:  curr_offset+= 1;",
          "3668:  return(curr_offset - offset);",
          "3674:  guint32 curr_offset;",
          "3675:  guint32 value;",
          "3677:  curr_offset = offset;",
          "3679:  value = tvb_get_ntohl(tvb, curr_offset);",
          "3680:  curr_offset+= 4;",
          "3682:  proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE received RLC SDU counter value: %d\",value);",
          "3684:  return(curr_offset - offset);",
          "3688:  { 0, \"A\"},",
          "3689:  { 1, \"B\"},",
          "3690:  { 2, \"C\"},",
          "3691:  { 3, \"reserved\"},",
          "3692:  { 0, NULL }",
          "3697:  guint32 curr_offset;",
          "3698:  guint32 bit_offset;",
          "3700:  curr_offset = offset;",
          "3701:  bit_offset = curr_offset<<3;",
          "3703:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, bit_offset, 6, ENC_BIG_ENDIAN);",
          "3704:  bit_offset += 6;",
          "3705:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_mode, tvb, bit_offset, 2, ENC_BIG_ENDIAN);",
          "3708:  epc_test_loop_mode = tvb_get_guint8(tvb, curr_offset) & 0x03;",
          "3709:  curr_offset++;",
          "3711:  return(curr_offset - offset);",
          "3717:  guint32     curr_offset;",
          "3718:  guint32     count, nb_lb;",
          "3719:  guint8      drb;",
          "3720:  proto_tree *lb_setup_tree = NULL;",
          "3722:  curr_offset = offset;",
          "3724:  count = 0;",
          "3725:  nb_lb = len / 3;",
          "3727:  proto_tree_add_text(tree, tvb, curr_offset, len, \"Number of LB entities: %d\", nb_lb);",
          "3728:  while ((count < nb_lb) && (count < 8)){",
          "3729:   lb_setup_tree = proto_tree_add_subtree_format(tree, tvb, curr_offset, 3,",
          "3730:         ett_epc_ue_tl_a_lb_setup, NULL, \"LB entity %d\", count);",
          "3732:   proto_tree_add_bits_item(lb_setup_tree, hf_gsm_a_dtap_epc_ue_tl_a_ul_sdu_size, tvb, curr_offset<<3, 16, ENC_BIG_ENDIAN);",
          "3733:   curr_offset += 2;",
          "3734:   drb = tvb_get_guint8(tvb, curr_offset) & 0x1f;",
          "3735:   proto_tree_add_uint_format_value(lb_setup_tree, hf_gsm_a_dtap_epc_ue_tl_a_drb, tvb, curr_offset, 1,",
          "3736:                                    drb, \"%d (%d)\", drb+1, drb);",
          "3737:   curr_offset++;",
          "3738:   count++;",
          "3739:  }",
          "3741:  EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3743:  return(len);",
          "3749:  guint32 curr_offset;",
          "3751:  curr_offset = offset;",
          "3753:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_b_ip_pdu_delay, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3754:  curr_offset++;",
          "3756:  return(curr_offset - offset);",
          "3762:  guint32 curr_offset;",
          "3764:  curr_offset = offset;",
          "3766:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_mbsfn_area_id, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3767:  curr_offset++;",
          "3768:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_mch_id, tvb, (curr_offset<<3)+4, 4, ENC_BIG_ENDIAN);",
          "3769:  curr_offset++;",
          "3770:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_lcid, tvb, (curr_offset<<3)+3, 5, ENC_BIG_ENDIAN);",
          "3771:  curr_offset++;",
          "3773:  return(curr_offset - offset);",
          "3777:  { 0, \"AGNSS\"},",
          "3778:  { 1, \"OTDOA\"},",
          "3779:  { 0, NULL }",
          "3785:  guint32 curr_offset;",
          "3787:  curr_offset = offset;",
          "3789:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_positioning_technology, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3790:  curr_offset++;",
          "3792:  return(curr_offset - offset);",
          "3798:  guint32 curr_offset;",
          "3800:  curr_offset = offset;",
          "3802:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_mbms_packet_counter_value, tvb, curr_offset<<3, 32, ENC_BIG_ENDIAN);",
          "3803:  curr_offset += 4;",
          "3805:  return(curr_offset - offset);",
          "3809:  \"South\",",
          "3810:  \"North\"",
          "3814:  \"Depth\",",
          "3815:  \"Height\"",
          "3821:  guint32 curr_offset;",
          "3822:  guint32 longitude;",
          "3824:  curr_offset = offset;",
          "3826:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_latitude_sign, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3827:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_degrees_latitude, tvb, (curr_offset<<3)+1, 23, ENC_BIG_ENDIAN);",
          "3828:  curr_offset += 3;",
          "3829:  longitude = tvb_get_ntoh24(tvb, curr_offset);",
          "3830:  proto_tree_add_int_format(tree, hf_gsm_a_dtap_epc_degrees_longitude, tvb, curr_offset, 3, longitude,",
          "3831:                            \"%s = %s: %d\", decode_bits_in_field(curr_offset<<3, 24, longitude),",
          "3832:                            proto_registrar_get_name(hf_gsm_a_dtap_epc_degrees_longitude), longitude-8388608);",
          "3833:  curr_offset += 3;",
          "3834:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_altitude_dir, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3835:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_altitude, tvb, (curr_offset<<3)+1, 15, ENC_BIG_ENDIAN);",
          "3836:  curr_offset += 2;",
          "3838:  return(curr_offset - offset);",
          "3844:  guint32 curr_offset;",
          "3846:  curr_offset = offset;",
          "3848:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_bearing, tvb, curr_offset<<3, 9, ENC_BIG_ENDIAN);",
          "3849:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_horizontal_speed, tvb, (curr_offset<<3)+9, 11, ENC_BIG_ENDIAN);",
          "3850:  curr_offset += 3;",
          "3852:  return(curr_offset - offset);",
          "3858:  guint32 curr_offset;",
          "3860:  curr_offset = offset;",
          "3862:  proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_gnss_tod_msec, tvb, (curr_offset<<3)+2, 22, ENC_BIG_ENDIAN);",
          "3863:  curr_offset += 3;",
          "3865:  return(curr_offset - offset);",
          "",
          "[Added Lines]",
          "3317:     { 22, \"Congestion\"},",
          "3318:     { 81, \"Invalid Transaction Identifier value\"},",
          "3319:     { 95, \"Semantically incorrect message\"},",
          "3320:     { 96, \"Invalid mandatory information\"},",
          "3321:     { 97, \"Message type non-existent or not implemented\"},",
          "3322:     { 98, \"Message not compatible with the short message protocol state\"},",
          "3323:     { 99, \"Information element non-existent or not implemented\"},",
          "3324:     { 111, \"Protocol error, unspecified\"},",
          "3325:     { 0, NULL }",
          "3331:     guint8       oct;",
          "3332:     guint32      curr_offset;",
          "3333:     const gchar *str;",
          "3335:     curr_offset = offset;",
          "3337:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3339:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_cp_cause, tvb, curr_offset, 1,",
          "3341:     curr_offset++;",
          "3343:     if (add_string)",
          "3344:         g_snprintf(add_string, string_len, \" - (%u) %s\", oct, str);",
          "3348:     return (curr_offset - offset);",
          "3354:     guint32      curr_offset;",
          "3355:     guchar       oct;",
          "3356:     const gchar *str;",
          "3358:     curr_offset = offset;",
          "3360:     oct = tvb_get_guint8(tvb, curr_offset) & 0x3f;",
          "3361:     if ((oct & 0x38) == 0x38)",
          "3362:         str = \"I\";",
          "3363:     else if ((oct & 0x38) == 0x18)",
          "3364:         str = \"F\";",
          "3365:     else if ((oct & 0x38) == 0x10)",
          "3366:         str = \"E\";",
          "3367:     else if ((oct & 0x38) == 0x08)",
          "3368:         str = \"D\";",
          "3369:     else if ((oct & 0x3c) == 0x04)",
          "3370:         str = \"C\";",
          "3371:     else if ((oct & 0x3e) == 0x02)",
          "3372:         str = \"B\";",
          "3373:     else if ((oct & 0x3e) == 0x00)",
          "3374:         str = \"A\";",
          "3375:     else",
          "3376:         str = \"unknown\";",
          "3378:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_test_loop, tvb, curr_offset, 1,",
          "3379:         oct, \"%s\", str);",
          "3381:     if (oct & 0x01)",
          "3382:         proto_tree_add_text(tree,",
          "3383:             tvb, curr_offset, 1,",
          "3384:             \"Only one TCH active or sub-channel 0 of two half rate channels is to be looped\");",
          "3385:     else",
          "3386:         proto_tree_add_text(tree,",
          "3387:             tvb, curr_offset, 1,",
          "3388:             \"Sub-channel 1 of two half rate channels is to be looped\");",
          "3390:     curr_offset+= 1;",
          "3392:     return (curr_offset - offset);",
          "3398:     guint32 curr_offset;",
          "3399:     guchar  oct;",
          "3401:     curr_offset = offset;",
          "3403:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3405:     if ((oct & 0xF0) == 0x80)",
          "3406:         proto_tree_add_text(tree,tvb, curr_offset, 1, \"Acknowledgment element: %d\",oct&0x01);",
          "3407:     else",
          "3408:         proto_tree_add_text(tree,tvb, curr_offset, 1, \"No acknowledgment element present\");",
          "3410:     curr_offset+= 1;",
          "3412:     return (curr_offset - offset);",
          "3416:     { 0x00, \"not needed. The Burst-by-Burst loop is activated, type G\" },",
          "3417:     { 0x01, \"Channel coding needed. Frame erasure is to be signalled, type H\" },",
          "3418:     { 0x02, \"reserved\" },",
          "3419:     { 0x03, \"reserved\" },",
          "3420:     { 0, NULL }",
          "3426:     guint32 curr_offset;",
          "3427:     guchar  oct;",
          "3429:     curr_offset = offset;",
          "3431:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3435:     switch (oct & 0x1c)",
          "3436:     {",
          "3437:     case 0x00:",
          "3438:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 1\");",
          "3439:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Timeslot number %d\",(oct & 0xe0)>>5);",
          "3440:         break;",
          "3441:     case 0x04:",
          "3442:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 2\");",
          "3443:         break;",
          "3444:     default:",
          "3445:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Loop mechanism reserved (%d)\",(oct & 0x1c)>>2);",
          "3446:         break;",
          "3447:     }",
          "3449:     curr_offset+= 1;",
          "3451:     return (curr_offset - offset);",
          "3457:     guint32 curr_offset;",
          "3458:     guchar  oct;",
          "3460:     curr_offset = offset;",
          "3462:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3466:     switch (oct & 0x0e)",
          "3467:     {",
          "3468:     case 0x00:",
          "3469:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 1\");",
          "3470:         break;",
          "3471:     case 0x02:",
          "3472:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot mechanism 2\");",
          "3473:         break;",
          "3474:     default:",
          "3475:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Loop mechanism reserved (%d)\",(oct & 0x0e)>>1);",
          "3476:         break;",
          "3477:     }",
          "3479:     if (oct & 0x01)",
          "3480:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot TCH loop was not closed due to error\");",
          "3481:     else",
          "3482:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"Multi-slot TCH loop was closed successfully\");",
          "3484:     curr_offset+= 1;",
          "3486:     return (curr_offset - offset);",
          "3490:     { 0x00, \"Normal operation (no tested device via DAI)\" },",
          "3491:     { 0x01, \"Test of speech decoder / DTX functions (downlink)\" },",
          "3492:     { 0x02, \"Test of speech encoder / DTX functions (uplink)\" },",
          "3493:     { 0x03, \"Test of acoustic devices and A/D & D/A\" },",
          "3494:     { 0, NULL }",
          "3500:     guint32 curr_offset;",
          "3501:     guchar  oct;",
          "3503:     curr_offset = offset;",
          "3505:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3507:         oct, \"%s\", val_to_str(oct, gsm_tp_tested_device_vals, \"Reserved (%d)\"));",
          "3508:     curr_offset+= 1;",
          "3510:     return (curr_offset - offset);",
          "3516:     guint32 curr_offset;",
          "3517:     guint16 value;",
          "3519:     curr_offset = offset;",
          "3521:     value = tvb_get_ntohs(tvb, curr_offset);",
          "3522:     curr_offset += 2;",
          "3524:     if (value & 0x8000)",
          "3525:     {",
          "3526:         if ((value & 0xfff) == 0)",
          "3527:             proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3528:                 tvb, curr_offset, 2, value, \"Infinite number of PDUs to be transmitted in the TBF\");",
          "3529:         else",
          "3530:             proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3531:                 tvb, curr_offset, 2, value & 0xfff, \"%d PDUs to be transmitted in the TBF\", value & 0xfff);",
          "3532:     }",
          "3533:     else",
          "3534:         proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_tp_pdu_description,",
          "3535:             tvb, curr_offset, 2, value, \"reserved\");",
          "3537:     return (curr_offset - offset);",
          "3543:     guint32 curr_offset;",
          "3544:     guchar  oct;",
          "3546:     curr_offset = offset;",
          "3548:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3550:     if (oct & 0x01)",
          "3551:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS shall select the loop back option\");",
          "3552:     else",
          "3553:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS shall itself generate the pseudorandom data\");",
          "3555:     proto_tree_add_item(tree, hf_gsm_a_dtap_downlink_timeslot_offset, tvb, curr_offset, 1, ENC_NA);",
          "3557:     curr_offset+= 1;",
          "3559:     return (curr_offset - offset);",
          "3565:     guint32 curr_offset;",
          "3566:     guchar  oct;",
          "3568:     curr_offset = offset;",
          "3570:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3572:     if (oct & 0x01)",
          "3573:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS loops back blocks on the uplink using GMSK modulation only\");",
          "3574:     else",
          "3575:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"MS loops back blocks on the uplink using either GMSK or 8-PSK modulation following the detected received modulation\");",
          "3577:     proto_tree_add_item(tree, hf_gsm_a_dtap_downlink_timeslot_offset, tvb, curr_offset, 1, ENC_NA);",
          "3579:     curr_offset+= 1;",
          "3581:     return (curr_offset - offset);",
          "3585:     { 0x00, \"AGPS\" },",
          "3586:     { 0x01, \"AGNSS\" },",
          "3587:     { 0, NULL }",
          "3593:     guint32 curr_offset;",
          "3594:     guchar  oct;",
          "3596:     curr_offset = offset;",
          "3598:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3599:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ms_positioning_technology, tvb, curr_offset, 1,",
          "3601:     curr_offset+= 1;",
          "3603:     return (curr_offset - offset);",
          "3609:     guint32 curr_offset;",
          "3610:     guchar  oct;",
          "3611:     guint8  lb_setup_length,i,j;",
          "3612:     guint16 value;",
          "3614:     curr_offset = offset;",
          "3616:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3617:     curr_offset+= 1;",
          "3619:     switch (oct & 0x03)",
          "3620:     {",
          "3621:     case 0:",
          "3622:     {",
          "3623:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 1 loop back (loopback of RLC SDUs or PDCP SDUs)\");",
          "3624:         lb_setup_length = tvb_get_guint8(tvb, curr_offset);",
          "3625:         curr_offset += 1;",
          "3626:         for (i=0,j=0; (i<lb_setup_length) && (j<4); i+=3,j++)",
          "3627:         {",
          "3628:             proto_tree_add_text(tree, tvb, curr_offset, 1, \"LB setup RB IE %d\",j+1);",
          "3629:             value = tvb_get_ntohs(tvb, curr_offset);",
          "3630:             curr_offset += 2;",
          "3631:             proto_tree_add_text(tree, tvb, curr_offset, 1, \"Uplink RLC SDU size is %d bits\",value);",
          "3632:             oct = tvb_get_guint8(tvb, curr_offset);",
          "3633:             curr_offset+= 1;",
          "3634:             proto_tree_add_text(tree, tvb, curr_offset, 1, \"Radio Bearer %d\",oct & 0x1f);",
          "3635:         }",
          "3636:         break;",
          "3637:     }",
          "3638:     case 1:",
          "3639:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 2 loop back (loopback of transport block data and CRC bits)\");",
          "3640:         break;",
          "3641:     case 2:",
          "3642:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode 3 RLC SDU counting (counting of received RLC SDUs)\");",
          "3643:         oct = tvb_get_guint8(tvb, curr_offset);",
          "3644:         curr_offset+= 1;",
          "3645:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"MBMS short transmission identity %d\",(oct & 0x1f)+1);",
          "3646:         break;",
          "3647:     default:",
          "3648:         proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE test loop mode reserved (%d)\",oct & 0x03);",
          "3649:         break;",
          "3650:     }",
          "3652:     return (curr_offset - offset);",
          "3658:     guint32 curr_offset;",
          "3659:     guchar  oct;",
          "3661:     curr_offset = offset;",
          "3663:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3665:     proto_tree_add_uint_format_value(tree, hf_gsm_a_dtap_ue_positioning_technology, tvb, curr_offset, 1,",
          "3667:     curr_offset+= 1;",
          "3669:     return (curr_offset - offset);",
          "3675:     guint32 curr_offset;",
          "3676:     guint32 value;",
          "3678:     curr_offset = offset;",
          "3680:     value = tvb_get_ntohl(tvb, curr_offset);",
          "3681:     curr_offset+= 4;",
          "3683:     proto_tree_add_text(tree, tvb, curr_offset, 1, \"UE received RLC SDU counter value: %d\",value);",
          "3685:     return (curr_offset - offset);",
          "3689:     { 0,    \"A\"},",
          "3690:     { 1,    \"B\"},",
          "3691:     { 2,    \"C\"},",
          "3692:     { 3,    \"reserved\"},",
          "3693:     { 0, NULL }",
          "3698:     guint32 curr_offset;",
          "3699:     guint32 bit_offset;",
          "3701:     curr_offset = offset;",
          "3702:     bit_offset = curr_offset<<3;",
          "3704:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, bit_offset, 6, ENC_BIG_ENDIAN);",
          "3705:     bit_offset += 6;",
          "3706:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_mode, tvb, bit_offset, 2, ENC_BIG_ENDIAN);",
          "3709:     epc_test_loop_mode = tvb_get_guint8(tvb, curr_offset) & 0x03;",
          "3710:     curr_offset++;",
          "3712:     return (curr_offset - offset);",
          "3718:     guint32     curr_offset;",
          "3719:     guint32     count, nb_lb;",
          "3720:     guint8      drb;",
          "3721:     proto_tree *lb_setup_tree = NULL;",
          "3723:     curr_offset = offset;",
          "3725:     count = 0;",
          "3726:     nb_lb = len / 3;",
          "3728:     proto_tree_add_text(tree, tvb, curr_offset, len, \"Number of LB entities: %d\", nb_lb);",
          "3729:     while ((count < nb_lb) && (count < 8)) {",
          "3730:         lb_setup_tree = proto_tree_add_subtree_format(tree, tvb, curr_offset, 3,",
          "3731:                                 ett_epc_ue_tl_a_lb_setup, NULL, \"LB entity %d\", count);",
          "3733:         proto_tree_add_bits_item(lb_setup_tree, hf_gsm_a_dtap_epc_ue_tl_a_ul_sdu_size, tvb, curr_offset<<3, 16, ENC_BIG_ENDIAN);",
          "3734:         curr_offset += 2;",
          "3735:         drb = tvb_get_guint8(tvb, curr_offset) & 0x1f;",
          "3736:         proto_tree_add_uint_format_value(lb_setup_tree, hf_gsm_a_dtap_epc_ue_tl_a_drb, tvb, curr_offset, 1,",
          "3737:                                          drb, \"%d (%d)\", drb+1, drb);",
          "3738:         curr_offset++;",
          "3739:         count++;",
          "3740:     }",
          "3742:     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);",
          "3744:     return (len);",
          "3750:     guint32 curr_offset;",
          "3752:     curr_offset = offset;",
          "3754:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_b_ip_pdu_delay, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3755:     curr_offset++;",
          "3757:     return (curr_offset - offset);",
          "3763:     guint32 curr_offset;",
          "3765:     curr_offset = offset;",
          "3767:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_mbsfn_area_id, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3768:     curr_offset++;",
          "3769:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_mch_id, tvb, (curr_offset<<3)+4, 4, ENC_BIG_ENDIAN);",
          "3770:     curr_offset++;",
          "3771:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_tl_c_lcid, tvb, (curr_offset<<3)+3, 5, ENC_BIG_ENDIAN);",
          "3772:     curr_offset++;",
          "3774:     return (curr_offset - offset);",
          "3778:     { 0,    \"AGNSS\"},",
          "3779:     { 1,    \"OTDOA\"},",
          "3780:     { 0, NULL }",
          "3786:     guint32 curr_offset;",
          "3788:     curr_offset = offset;",
          "3790:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_ue_positioning_technology, tvb, curr_offset<<3, 8, ENC_BIG_ENDIAN);",
          "3791:     curr_offset++;",
          "3793:     return (curr_offset - offset);",
          "3799:     guint32 curr_offset;",
          "3801:     curr_offset = offset;",
          "3803:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_mbms_packet_counter_value, tvb, curr_offset<<3, 32, ENC_BIG_ENDIAN);",
          "3804:     curr_offset += 4;",
          "3806:     return (curr_offset - offset);",
          "3810:     \"South\",",
          "3811:     \"North\"",
          "3815:     \"Depth\",",
          "3816:     \"Height\"",
          "3822:     guint32 curr_offset;",
          "3823:     guint32 longitude;",
          "3825:     curr_offset = offset;",
          "3827:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_latitude_sign, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3828:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_degrees_latitude, tvb, (curr_offset<<3)+1, 23, ENC_BIG_ENDIAN);",
          "3829:     curr_offset += 3;",
          "3830:     longitude = tvb_get_ntoh24(tvb, curr_offset);",
          "3831:     proto_tree_add_int_format(tree, hf_gsm_a_dtap_epc_degrees_longitude, tvb, curr_offset, 3, longitude,",
          "3832:                               \"%s = %s: %d\", decode_bits_in_field(curr_offset<<3, 24, longitude),",
          "3833:                               proto_registrar_get_name(hf_gsm_a_dtap_epc_degrees_longitude), longitude-8388608);",
          "3834:     curr_offset += 3;",
          "3835:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_altitude_dir, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "3836:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_altitude, tvb, (curr_offset<<3)+1, 15, ENC_BIG_ENDIAN);",
          "3837:     curr_offset += 2;",
          "3839:     return (curr_offset - offset);",
          "3845:     guint32 curr_offset;",
          "3847:     curr_offset = offset;",
          "3849:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_bearing, tvb, curr_offset<<3, 9, ENC_BIG_ENDIAN);",
          "3850:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_horizontal_speed, tvb, (curr_offset<<3)+9, 11, ENC_BIG_ENDIAN);",
          "3851:     curr_offset += 3;",
          "3853:     return (curr_offset - offset);",
          "3859:     guint32 curr_offset;",
          "3861:     curr_offset = offset;",
          "3863:     proto_tree_add_bits_item(tree, hf_gsm_a_dtap_epc_gnss_tod_msec, tvb, (curr_offset<<3)+2, 22, ENC_BIG_ENDIAN);",
          "3864:     curr_offset += 3;",
          "3866:     return (curr_offset - offset);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3962: static void",
          "3963: dtap_mm_auth_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "3964: {",
          "3993:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1,",
          "4012: }",
          "",
          "[Removed Lines]",
          "3965:  guint32     curr_offset;",
          "3966:  guint32     consumed;",
          "3967:  guint       curr_len;",
          "3968:  guint8      oct;",
          "3969:  proto_tree *subtree;",
          "3971:  curr_offset = offset;",
          "3972:  curr_len = len;",
          "3974:  is_uplink = IS_UPLINK_FALSE;",
          "3979:  oct = tvb_get_guint8(tvb, curr_offset);",
          "3981:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "3983:  subtree =",
          "3984:  proto_tree_add_subtree(tree,",
          "3985:   tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "3986:   val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "3988:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "3990:  switch (oct & 0x07)",
          "3991:  {",
          "3992:  case 0x07:",
          "3994:                                         oct, \"No key is available\");",
          "3995:   break;",
          "3997:  default:",
          "3998:   proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1, ENC_NA);",
          "3999:   break;",
          "4000:  }",
          "4002:  curr_offset++;",
          "4003:  curr_len--;",
          "4005:  if ((signed)curr_len <= 0) return;",
          "4007:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_AUTH_PARAM_RAND, \" - UMTS challenge or GSM challenge\");",
          "4009:  ELEM_OPT_TLV(0x20, GSM_A_PDU_TYPE_DTAP, DE_AUTH_PARAM_AUTN, NULL);",
          "4011:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "3966:     guint32     curr_offset;",
          "3967:     guint32     consumed;",
          "3968:     guint       curr_len;",
          "3969:     guint8      oct;",
          "3970:     proto_tree *subtree;",
          "3972:     curr_offset = offset;",
          "3973:     curr_len = len;",
          "3975:     is_uplink = IS_UPLINK_FALSE;",
          "3980:     oct = tvb_get_guint8(tvb, curr_offset);",
          "3982:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "3984:     subtree =",
          "3985:     proto_tree_add_subtree(tree,",
          "3986:         tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "3987:         val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "3989:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "3991:     switch (oct & 0x07)",
          "3992:     {",
          "3993:     case 0x07:",
          "3995:             oct, \"No key is available\");",
          "3996:         break;",
          "3998:     default:",
          "3999:         proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1, ENC_NA);",
          "4000:         break;",
          "4001:     }",
          "4003:     curr_offset++;",
          "4004:     curr_len--;",
          "4006:     if ((signed)curr_len <= 0) return;",
          "4008:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_AUTH_PARAM_RAND, \" - UMTS challenge or GSM challenge\");",
          "4010:     ELEM_OPT_TLV(0x20, GSM_A_PDU_TYPE_DTAP, DE_AUTH_PARAM_AUTN, NULL);",
          "4012:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4017: static void",
          "4018: dtap_mm_auth_resp(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4019: {",
          "4034: }",
          "",
          "[Removed Lines]",
          "4020:  guint32 curr_offset;",
          "4021:  guint32 consumed;",
          "4022:  guint curr_len;",
          "4024:  curr_offset = offset;",
          "4025:  curr_len = len;",
          "4027:  is_uplink = IS_UPLINK_TRUE;",
          "4029:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_AUTH_RESP_PARAM, NULL);",
          "4031:  ELEM_OPT_TLV(0x21, GSM_A_PDU_TYPE_DTAP, DE_AUTH_RESP_PARAM_EXT, NULL);",
          "4033:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4021:     guint32 curr_offset;",
          "4022:     guint32 consumed;",
          "4023:     guint   curr_len;",
          "4025:     curr_offset = offset;",
          "4026:     curr_len = len;",
          "4028:     is_uplink = IS_UPLINK_TRUE;",
          "4030:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_AUTH_RESP_PARAM, NULL);",
          "4032:     ELEM_OPT_TLV(0x21, GSM_A_PDU_TYPE_DTAP, DE_AUTH_RESP_PARAM_EXT, NULL);",
          "4034:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4039: static void",
          "4040: dtap_mm_auth_fail(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4041: {",
          "4056: }",
          "",
          "[Removed Lines]",
          "4042:  guint32 curr_offset;",
          "4043:  guint32 consumed;",
          "4044:  guint curr_len;",
          "4046:  curr_offset = offset;",
          "4047:  curr_len = len;",
          "4049:  is_uplink = IS_UPLINK_TRUE;",
          "4051:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4053:  ELEM_OPT_TLV(0x22, GSM_A_PDU_TYPE_DTAP, DE_AUTH_FAIL_PARAM, NULL);",
          "4055:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4043:     guint32 curr_offset;",
          "4044:     guint32 consumed;",
          "4045:     guint   curr_len;",
          "4047:     curr_offset = offset;",
          "4048:     curr_len = len;",
          "4050:     is_uplink = IS_UPLINK_TRUE;",
          "4052:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4054:     ELEM_OPT_TLV(0x22, GSM_A_PDU_TYPE_DTAP, DE_AUTH_FAIL_PARAM, NULL);",
          "4056:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4061: static void",
          "4062: dtap_mm_cm_reestab_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4063: {",
          "4092:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1,",
          "4116: }",
          "",
          "[Removed Lines]",
          "4064:  guint32     curr_offset;",
          "4065:  guint32     consumed;",
          "4066:  guint       curr_len;",
          "4067:  guint8      oct;",
          "4068:  proto_tree *subtree;",
          "4070:  curr_offset = offset;",
          "4071:  curr_len = len;",
          "4073:  is_uplink = IS_UPLINK_TRUE;",
          "4078:  oct = tvb_get_guint8(tvb, curr_offset);",
          "4080:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4082:  subtree =",
          "4083:  proto_tree_add_subtree(tree,",
          "4084:   tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4085:   val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4087:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "4089:  switch (oct & 0x07)",
          "4090:  {",
          "4091:  case 0x07:",
          "4093:                                         oct, \"No key is available\");",
          "4094:   break;",
          "4096:  default:",
          "4097:   proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1, ENC_NA);",
          "4098:   break;",
          "4099:  }",
          "4101:  curr_offset++;",
          "4102:  curr_len--;",
          "4104:  if ((signed)curr_len <= 0) return;",
          "4106:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, NULL);",
          "4108:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4110:  ELEM_OPT_TV(0x13, GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4112:  ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4115:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4065:     guint32     curr_offset;",
          "4066:     guint32     consumed;",
          "4067:     guint       curr_len;",
          "4068:     guint8      oct;",
          "4069:     proto_tree *subtree;",
          "4071:     curr_offset = offset;",
          "4072:     curr_len = len;",
          "4074:     is_uplink = IS_UPLINK_TRUE;",
          "4079:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4081:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4083:     subtree =",
          "4084:     proto_tree_add_subtree(tree,",
          "4085:         tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4086:         val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4088:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "4090:     switch (oct & 0x07)",
          "4091:     {",
          "4092:     case 0x07:",
          "4094:             oct, \"No key is available\");",
          "4095:         break;",
          "4097:     default:",
          "4098:         proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number, tvb, curr_offset, 1, ENC_NA);",
          "4099:         break;",
          "4100:     }",
          "4102:     curr_offset++;",
          "4103:     curr_len--;",
          "4105:     if ((signed)curr_len <= 0) return;",
          "4107:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, NULL);",
          "4109:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4111:     ELEM_OPT_TV(0x13, GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4113:     ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4116:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4121: static void",
          "4122: dtap_mm_cm_srvc_prompt(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4123: {",
          "4136: }",
          "",
          "[Removed Lines]",
          "4124:  guint32 curr_offset;",
          "4125:  guint32 consumed;",
          "4126:  guint curr_len;",
          "4128:  curr_offset = offset;",
          "4129:  curr_len = len;",
          "4131:  is_uplink = IS_UPLINK_FALSE;",
          "4133:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_PD_SAPI, NULL);",
          "4135:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4125:     guint32 curr_offset;",
          "4126:     guint32 consumed;",
          "4127:     guint   curr_len;",
          "4129:     curr_offset = offset;",
          "4130:     curr_len = len;",
          "4132:     is_uplink = IS_UPLINK_FALSE;",
          "4134:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_PD_SAPI, NULL);",
          "4136:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4141: static void",
          "4142: dtap_mm_cm_srvc_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4143: {",
          "4158: }",
          "",
          "[Removed Lines]",
          "4144:  guint32 curr_offset;",
          "4145:  guint32 consumed;",
          "4146:  guint curr_len;",
          "4148:  curr_offset = offset;",
          "4149:  curr_len = len;",
          "4151:  is_uplink = IS_UPLINK_FALSE;",
          "4153:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4155:  ELEM_OPT_TLV(0x36, GSM_A_PDU_TYPE_DTAP, DE_MM_TIMER, \" - T3246 value\");",
          "4157:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4145:     guint32 curr_offset;",
          "4146:     guint32 consumed;",
          "4147:     guint   curr_len;",
          "4149:     curr_offset = offset;",
          "4150:     curr_len = len;",
          "4152:     is_uplink = IS_UPLINK_FALSE;",
          "4154:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4156:     ELEM_OPT_TLV(0x36, GSM_A_PDU_TYPE_DTAP, DE_MM_TIMER, \" - T3246 value\");",
          "4158:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4163: static void",
          "4164: dtap_mm_abort(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4165: {",
          "4178: }",
          "4183: static const value_string gsm_a_dtap_service_type_vals[] = {",
          "4185:     { 0x01, \"Mobile originating call establishment or packet mode connection establishment\"},",
          "4201: };",
          "4203: static void",
          "4204: dtap_mm_cm_srvc_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4205: {",
          "4232:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1,",
          "4264: }",
          "4269: static const value_string gsm_a_dtap_type_of_identity_vals[] = {",
          "4271:     { 0x01, \"IMSI\"},",
          "4279: };",
          "4281: static void",
          "4282: dtap_mm_id_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4283: {",
          "4310: }",
          "",
          "[Removed Lines]",
          "4166:  guint32 curr_offset;",
          "4167:  guint32 consumed;",
          "4168:  guint curr_len;",
          "4170:  curr_offset = offset;",
          "4171:  curr_len = len;",
          "4173:  is_uplink = IS_UPLINK_FALSE;",
          "4175:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4177:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4184:  { 0x00, \"Reserved\"},",
          "4186:  { 0x02, \"Emergency call establishment\"},",
          "4187:  { 0x03, \"Reserved\"},",
          "4188:  { 0x04, \"Short message service\"},",
          "4189:  { 0x05, \"Reserved\"},",
          "4190:  { 0x06, \"Reserved\"},",
          "4191:  { 0x07, \"Reserved\"},",
          "4192:  { 0x08, \"Supplementary service activation\"},",
          "4193:  { 0x09, \"Voice group call establishment\"},",
          "4194:  { 0x0a, \"Voice broadcast call establishment\"},",
          "4195:  { 0x0b, \"Location Services\"},",
          "4196:  { 0x0c, \"Reserved\"},",
          "4197:  { 0x0d, \"Reserved\"},",
          "4198:  { 0x0e, \"Reserved\"},",
          "4199:  { 0x0f, \"Reserved\"},",
          "4200:  { 0, NULL }",
          "4206:  guint32      curr_offset;",
          "4207:  guint32      consumed;",
          "4208:  guint        curr_len;",
          "4209:  guint8       oct;",
          "4210:  proto_tree  *subtree;",
          "4212:  curr_offset = offset;",
          "4213:  curr_len = len;",
          "4215:  is_uplink = IS_UPLINK_TRUE;",
          "4220:  oct = tvb_get_guint8(tvb, curr_offset);",
          "4222:  subtree =",
          "4223:  proto_tree_add_subtree(tree,",
          "4224:   tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4225:   val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4227:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "4229:  switch ((oct & 0x70) >> 4)",
          "4230:  {",
          "4231:  case 0x07:",
          "4233:                                         oct, \"No key is available\");",
          "4234:   break;",
          "4236:  default:",
          "4237:   proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1, ENC_NA);",
          "4238:   break;",
          "4239:  }",
          "4241:  subtree =",
          "4242:  proto_tree_add_subtree(tree,",
          "4243:   tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_CM_SRVC_TYPE], NULL,",
          "4244:   val_to_str_ext_const(DE_CM_SRVC_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4246:  proto_tree_add_item(subtree, hf_gsm_a_dtap_service_type, tvb, curr_offset, 1, ENC_NA);",
          "4248:  curr_offset++;",
          "4249:  curr_len--;",
          "4251:  if ((signed)curr_len <= 0) return;",
          "4253:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, NULL);",
          "4255:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4257:  ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "4259:  ELEM_OPT_TV_SHORT(0xC0, GSM_A_PDU_TYPE_DTAP, DE_ADD_UPD_PARAMS, NULL);",
          "4261:  ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4263:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4270:  { 0x00, \"Reserved\"},",
          "4272:  { 0x02, \"IMEI\"},",
          "4273:  { 0x03, \"IMEISV\"},",
          "4274:  { 0x04, \"TMSI\"},",
          "4275:  { 0x05, \"P-TMSI, RAI, P-TMSI signature\"},",
          "4276:  { 0x06, \"Reserved\"},",
          "4277:  { 0x07, \"Reserved\"},",
          "4278:  { 0, NULL }",
          "4284:  guint32      curr_offset;",
          "4285:  guint        curr_len;",
          "4286:  proto_tree  *subtree;",
          "4288:  curr_offset = offset;",
          "4289:  curr_len = len;",
          "4291:  is_uplink = IS_UPLINK_FALSE;",
          "4296:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4298:  subtree =",
          "4299:  proto_tree_add_subtree(tree,",
          "4300:   tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_ID_TYPE], NULL,",
          "4301:   val_to_str_ext_const(DE_ID_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4303:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "4304:  proto_tree_add_item(subtree, hf_gsm_a_dtap_type_of_identity, tvb, curr_offset, 1, ENC_NA);",
          "4306:  curr_offset++;",
          "4307:  curr_len--;",
          "4309:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4167:     guint32 curr_offset;",
          "4168:     guint32 consumed;",
          "4169:     guint   curr_len;",
          "4171:     curr_offset = offset;",
          "4172:     curr_len = len;",
          "4174:     is_uplink = IS_UPLINK_FALSE;",
          "4176:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4178:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4185:     { 0x00, \"Reserved\"},",
          "4187:     { 0x02, \"Emergency call establishment\"},",
          "4188:     { 0x03, \"Reserved\"},",
          "4189:     { 0x04, \"Short message service\"},",
          "4190:     { 0x05, \"Reserved\"},",
          "4191:     { 0x06, \"Reserved\"},",
          "4192:     { 0x07, \"Reserved\"},",
          "4193:     { 0x08, \"Supplementary service activation\"},",
          "4194:     { 0x09, \"Voice group call establishment\"},",
          "4195:     { 0x0a, \"Voice broadcast call establishment\"},",
          "4196:     { 0x0b, \"Location Services\"},",
          "4197:     { 0x0c, \"Reserved\"},",
          "4198:     { 0x0d, \"Reserved\"},",
          "4199:     { 0x0e, \"Reserved\"},",
          "4200:     { 0x0f, \"Reserved\"},",
          "4201:     { 0, NULL }",
          "4207:     guint32      curr_offset;",
          "4208:     guint32      consumed;",
          "4209:     guint        curr_len;",
          "4210:     guint8       oct;",
          "4211:     proto_tree  *subtree;",
          "4213:     curr_offset = offset;",
          "4214:     curr_len = len;",
          "4216:     is_uplink = IS_UPLINK_TRUE;",
          "4221:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4223:     subtree =",
          "4224:     proto_tree_add_subtree(tree,",
          "4225:         tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4226:         val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4228:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "4230:     switch ((oct & 0x70) >> 4)",
          "4231:     {",
          "4232:     case 0x07:",
          "4234:             oct, \"No key is available\");",
          "4235:         break;",
          "4237:     default:",
          "4238:         proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1, ENC_NA);",
          "4239:         break;",
          "4240:     }",
          "4242:     subtree =",
          "4243:     proto_tree_add_subtree(tree,",
          "4244:         tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_CM_SRVC_TYPE], NULL,",
          "4245:         val_to_str_ext_const(DE_CM_SRVC_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4247:     proto_tree_add_item(subtree, hf_gsm_a_dtap_service_type, tvb, curr_offset, 1, ENC_NA);",
          "4249:     curr_offset++;",
          "4250:     curr_len--;",
          "4252:     if ((signed)curr_len <= 0) return;",
          "4254:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, NULL);",
          "4256:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4258:     ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "4260:     ELEM_OPT_TV_SHORT(0xC0, GSM_A_PDU_TYPE_DTAP, DE_ADD_UPD_PARAMS, NULL);",
          "4262:     ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4264:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4271:     { 0x00, \"Reserved\"},",
          "4273:     { 0x02, \"IMEI\"},",
          "4274:     { 0x03, \"IMEISV\"},",
          "4275:     { 0x04, \"TMSI\"},",
          "4276:     { 0x05, \"P-TMSI, RAI, P-TMSI signature\"},",
          "4277:     { 0x06, \"Reserved\"},",
          "4278:     { 0x07, \"Reserved\"},",
          "4279:     { 0, NULL }",
          "4285:     guint32      curr_offset;",
          "4286:     guint        curr_len;",
          "4287:     proto_tree  *subtree;",
          "4289:     curr_offset = offset;",
          "4290:     curr_len = len;",
          "4292:     is_uplink = IS_UPLINK_FALSE;",
          "4297:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4299:     subtree =",
          "4300:     proto_tree_add_subtree(tree,",
          "4301:         tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_ID_TYPE], NULL,",
          "4302:         val_to_str_ext_const(DE_ID_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4304:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+4, 1, ENC_BIG_ENDIAN);",
          "4305:     proto_tree_add_item(subtree, hf_gsm_a_dtap_type_of_identity, tvb, curr_offset, 1, ENC_NA);",
          "4307:     curr_offset++;",
          "4308:     curr_len--;",
          "4310:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4315: static void",
          "4316: dtap_mm_id_resp(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4317: {",
          "4336: }",
          "",
          "[Removed Lines]",
          "4318:  guint32 curr_offset;",
          "4319:  guint32 consumed;",
          "4320:  guint curr_len;",
          "4322:  curr_offset = offset;",
          "4323:  curr_len = len;",
          "4325:  is_uplink = IS_UPLINK_TRUE;",
          "4327:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4329:  ELEM_OPT_TV_SHORT(0xE0, GSM_A_PDU_TYPE_GM, DE_PTMSI_TYPE, NULL);",
          "4331:  ELEM_OPT_TLV( 0x1B, GSM_A_PDU_TYPE_GM, DE_RAI_2, \" - Routing area identification\");",
          "4333:  ELEM_OPT_TLV( 0x19, GSM_A_PDU_TYPE_GM, DE_P_TMSI_SIG_2, \" - P-TMSI signature\");",
          "4335:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4319:     guint32 curr_offset;",
          "4320:     guint32 consumed;",
          "4321:     guint   curr_len;",
          "4323:     curr_offset = offset;",
          "4324:     curr_len = len;",
          "4326:     is_uplink = IS_UPLINK_TRUE;",
          "4328:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4330:     ELEM_OPT_TV_SHORT(0xE0, GSM_A_PDU_TYPE_GM, DE_PTMSI_TYPE, NULL);",
          "4332:     ELEM_OPT_TLV( 0x1B, GSM_A_PDU_TYPE_GM, DE_RAI_2, \" - Routing area identification\");",
          "4334:     ELEM_OPT_TLV( 0x19, GSM_A_PDU_TYPE_GM, DE_P_TMSI_SIG_2, \" - P-TMSI signature\");",
          "4336:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4341: static void",
          "4342: dtap_mm_imsi_det_ind(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4343: {",
          "4358: }",
          "",
          "[Removed Lines]",
          "4344:  guint32 curr_offset;",
          "4345:  guint32 consumed;",
          "4346:  guint curr_len;",
          "4348:  curr_offset = offset;",
          "4349:  curr_len = len;",
          "4351:  is_uplink = IS_UPLINK_TRUE;",
          "4353:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_1, NULL);",
          "4355:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4357:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4345:     guint32 curr_offset;",
          "4346:     guint32 consumed;",
          "4347:     guint   curr_len;",
          "4349:     curr_offset = offset;",
          "4350:     curr_len = len;",
          "4352:     is_uplink = IS_UPLINK_TRUE;",
          "4354:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_1, NULL);",
          "4356:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4358:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4363: static void",
          "4364: dtap_mm_loc_upd_acc(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4365: {",
          "4393: }",
          "",
          "[Removed Lines]",
          "4366:  guint32 curr_offset;",
          "4367:  guint32 consumed;",
          "4368:  guint curr_len;",
          "4370:  curr_offset = offset;",
          "4371:  curr_len = len;",
          "4373:  is_uplink = IS_UPLINK_FALSE;",
          "4375:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4377:  ELEM_OPT_TLV(0x17, GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4379:  ELEM_OPT_T(0xa1, GSM_A_PDU_TYPE_DTAP, DE_FOP, NULL);",
          "4382:  ELEM_OPT_T(0xa2, GSM_A_PDU_TYPE_DTAP, DE_CTS_PERM, NULL);",
          "4385:  ELEM_OPT_TLV(0x4a, GSM_A_PDU_TYPE_COMMON, DE_PLMN_LIST, \" Equivalent\");",
          "4388:  ELEM_OPT_TLV(0x34, GSM_A_PDU_TYPE_DTAP, DE_EMERGENCY_NUM_LIST, NULL);",
          "4390:  ELEM_OPT_TLV(0x35, GSM_A_PDU_TYPE_GM, DE_GPRS_TIMER_3, \" - Per MS T3212\");",
          "4392:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4367:     guint32 curr_offset;",
          "4368:     guint32 consumed;",
          "4369:     guint   curr_len;",
          "4371:     curr_offset = offset;",
          "4372:     curr_len = len;",
          "4374:     is_uplink = IS_UPLINK_FALSE;",
          "4376:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4378:     ELEM_OPT_TLV(0x17, GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4380:     ELEM_OPT_T(0xa1, GSM_A_PDU_TYPE_DTAP, DE_FOP, NULL);",
          "4383:     ELEM_OPT_T(0xa2, GSM_A_PDU_TYPE_DTAP, DE_CTS_PERM, NULL);",
          "4386:     ELEM_OPT_TLV(0x4a, GSM_A_PDU_TYPE_COMMON, DE_PLMN_LIST, \" Equivalent\");",
          "4389:     ELEM_OPT_TLV(0x34, GSM_A_PDU_TYPE_DTAP, DE_EMERGENCY_NUM_LIST, NULL);",
          "4391:     ELEM_OPT_TLV(0x35, GSM_A_PDU_TYPE_GM, DE_GPRS_TIMER_3, \" - Per MS T3212\");",
          "4393:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4398: static void",
          "4399: dtap_mm_loc_upd_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4400: {",
          "4415: }",
          "4420: static const value_string gsm_a_dtap_updating_type_vals[] = {",
          "4422:     { 0x01, \"Periodic\"},",
          "4426: };",
          "4428: static const true_false_string tfs_follow_on_request_value = {",
          "4431: };",
          "4433: static void",
          "4434: dtap_mm_loc_upd_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4435: {",
          "4463:         proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1,",
          "4505: }",
          "",
          "[Removed Lines]",
          "4401:  guint32 curr_offset;",
          "4402:  guint32 consumed;",
          "4403:  guint curr_len;",
          "4405:  curr_offset = offset;",
          "4406:  curr_len = len;",
          "4408:  is_uplink = IS_UPLINK_FALSE;",
          "4410:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4412:  ELEM_OPT_TLV(0x36, GSM_A_PDU_TYPE_DTAP, DE_MM_TIMER, \" - T3246 value\");",
          "4414:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4421:  { 0x00, \"Normal\"},",
          "4423:  { 0x02, \"IMSI attach\"},",
          "4424:  { 0x03, \"Reserved\"},",
          "4425:  { 0, NULL }",
          "4429:  \"Follow-on request pending\",",
          "4430:  \"No follow-on request pending\"",
          "4436:  guint32 curr_offset;",
          "4437:  guint32 consumed;",
          "4438:  guint curr_len;",
          "4439:  guint8 oct;",
          "4440:  proto_tree *subtree;",
          "4441:  proto_item  *item;",
          "4443:  curr_offset = offset;",
          "4444:  curr_len = len;",
          "4446:  is_uplink = IS_UPLINK_TRUE;",
          "4451:  oct = tvb_get_guint8(tvb, curr_offset);",
          "4453:  subtree =",
          "4454:  proto_tree_add_subtree(tree,",
          "4455:   tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4456:   val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4458:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "4460:  switch ((oct & 0x70) >> 4)",
          "4461:  {",
          "4462:  case 0x07:",
          "4464:                                         oct, \"No key is available\");",
          "4465:   break;",
          "4467:  default:",
          "4468:   proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1, ENC_NA);",
          "4469:   break;",
          "4470:  }",
          "4472:  subtree =",
          "4473:  proto_tree_add_subtree(tree,",
          "4474:   tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_LOC_UPD_TYPE], &item,",
          "4475:   val_to_str_ext_const(DE_LOC_UPD_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4477:  proto_tree_add_item(subtree, hf_gsm_a_dtap_follow_on_request, tvb, curr_offset, 1, ENC_NA);",
          "4479:  proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 1, ENC_BIG_ENDIAN);",
          "4481:  proto_tree_add_item(subtree, hf_gsm_a_dtap_updating_type, tvb, curr_offset, 1, ENC_NA);",
          "4483:  proto_item_append_text(item, \" - %s\", val_to_str_const(oct & 0x03, gsm_a_dtap_updating_type_vals, \"Reserved\"));",
          "4485:  curr_offset++;",
          "4486:  curr_len--;",
          "4488:  if ((signed)curr_len <= 0) return;",
          "4490:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4492:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_1, NULL);",
          "4494:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4496:  ELEM_OPT_TLV(0x33, GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, \" - Mobile station classmark for UMTS\");",
          "4498:  ELEM_OPT_TV_SHORT(0xc0, GSM_A_PDU_TYPE_DTAP, DE_ADD_UPD_PARAMS, NULL);",
          "4500:  ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4502:  ELEM_OPT_TV_SHORT(0xC0, GSM_A_PDU_TYPE_COMMON, DE_MS_NET_FEAT_SUP, NULL);",
          "4504:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4402:     guint32 curr_offset;",
          "4403:     guint32 consumed;",
          "4404:     guint   curr_len;",
          "4406:     curr_offset = offset;",
          "4407:     curr_len = len;",
          "4409:     is_uplink = IS_UPLINK_FALSE;",
          "4411:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4413:     ELEM_OPT_TLV(0x36, GSM_A_PDU_TYPE_DTAP, DE_MM_TIMER, \" - T3246 value\");",
          "4415:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4422:     { 0x00, \"Normal\"},",
          "4424:     { 0x02, \"IMSI attach\"},",
          "4425:     { 0x03, \"Reserved\"},",
          "4426:     { 0, NULL }",
          "4430:     \"Follow-on request pending\",",
          "4431:     \"No follow-on request pending\"",
          "4437:     guint32 curr_offset;",
          "4438:     guint32 consumed;",
          "4439:     guint   curr_len;",
          "4440:     guint8  oct;",
          "4441:     proto_tree  *subtree;",
          "4442:     proto_item  *item;",
          "4444:     curr_offset = offset;",
          "4445:     curr_len = len;",
          "4447:     is_uplink = IS_UPLINK_TRUE;",
          "4452:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4454:     subtree =",
          "4455:     proto_tree_add_subtree(tree,",
          "4456:         tvb, curr_offset, 1, ett_gsm_common_elem[DE_CIPH_KEY_SEQ_NUM], NULL,",
          "4457:         val_to_str_ext_const(DE_CIPH_KEY_SEQ_NUM, &gsm_common_elem_strings_ext, \"\"));",
          "4459:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 1, ENC_BIG_ENDIAN);",
          "4461:     switch ((oct & 0x70) >> 4)",
          "4462:     {",
          "4463:     case 0x07:",
          "4465:             oct, \"No key is available\");",
          "4466:         break;",
          "4468:     default:",
          "4469:         proto_tree_add_item(subtree, hf_gsm_a_dtap_ciphering_key_sequence_number70, tvb, curr_offset, 1, ENC_NA);",
          "4470:         break;",
          "4471:     }",
          "4473:     subtree =",
          "4474:     proto_tree_add_subtree(tree,",
          "4475:         tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_LOC_UPD_TYPE], &item,",
          "4476:         val_to_str_ext_const(DE_LOC_UPD_TYPE, &gsm_dtap_elem_strings_ext, \"\"));",
          "4478:     proto_tree_add_item(subtree, hf_gsm_a_dtap_follow_on_request, tvb, curr_offset, 1, ENC_NA);",
          "4480:     proto_tree_add_bits_item(subtree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3)+5, 1, ENC_BIG_ENDIAN);",
          "4482:     proto_tree_add_item(subtree, hf_gsm_a_dtap_updating_type, tvb, curr_offset, 1, ENC_NA);",
          "4484:     proto_item_append_text(item, \" - %s\", val_to_str_const(oct & 0x03, gsm_a_dtap_updating_type_vals, \"Reserved\"));",
          "4486:     curr_offset++;",
          "4487:     curr_len--;",
          "4489:     if ((signed)curr_len <= 0) return;",
          "4491:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4493:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_MS_CM_1, NULL);",
          "4495:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4497:     ELEM_OPT_TLV(0x33, GSM_A_PDU_TYPE_COMMON, DE_MS_CM_2, \" - Mobile station classmark for UMTS\");",
          "4499:     ELEM_OPT_TV_SHORT(0xc0, GSM_A_PDU_TYPE_DTAP, DE_ADD_UPD_PARAMS, NULL);",
          "4501:     ELEM_OPT_TV_SHORT(0xD0, GSM_A_PDU_TYPE_GM, DE_DEVICE_PROPERTIES, NULL);",
          "4503:     ELEM_OPT_TV_SHORT(0xC0, GSM_A_PDU_TYPE_COMMON, DE_MS_NET_FEAT_SUP, NULL);",
          "4505:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "4511: void",
          "4512: dtap_mm_mm_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4513: {",
          "4536: }",
          "",
          "[Removed Lines]",
          "4514:  guint32 curr_offset;",
          "4515:  guint32 consumed;",
          "4516:  guint curr_len;",
          "4518:  curr_offset = offset;",
          "4519:  curr_len = len;",
          "4521:  is_uplink = IS_UPLINK_TRUE;",
          "4523:  ELEM_OPT_TLV(0x43, GSM_A_PDU_TYPE_DTAP, DE_NETWORK_NAME, \" - Full Name\");",
          "4525:  ELEM_OPT_TLV(0x45, GSM_A_PDU_TYPE_DTAP, DE_NETWORK_NAME, \" - Short Name\");",
          "4527:  ELEM_OPT_TV(0x46, GSM_A_PDU_TYPE_DTAP, DE_TIME_ZONE, \" - Local\");",
          "4529:  ELEM_OPT_TV(0x47, GSM_A_PDU_TYPE_DTAP, DE_TIME_ZONE_TIME, \" - Universal Time and Local Time Zone\");",
          "4531:  ELEM_OPT_TLV(0x48, GSM_A_PDU_TYPE_DTAP, DE_LSA_ID, NULL);",
          "4533:  ELEM_OPT_TLV(0x49, GSM_A_PDU_TYPE_DTAP, DE_DAY_SAVING_TIME, NULL);",
          "4535:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4515:     guint32 curr_offset;",
          "4516:     guint32 consumed;",
          "4517:     guint   curr_len;",
          "4519:     curr_offset = offset;",
          "4520:     curr_len = len;",
          "4522:     is_uplink = IS_UPLINK_TRUE;",
          "4524:     ELEM_OPT_TLV(0x43, GSM_A_PDU_TYPE_DTAP, DE_NETWORK_NAME, \" - Full Name\");",
          "4526:     ELEM_OPT_TLV(0x45, GSM_A_PDU_TYPE_DTAP, DE_NETWORK_NAME, \" - Short Name\");",
          "4528:     ELEM_OPT_TV(0x46, GSM_A_PDU_TYPE_DTAP, DE_TIME_ZONE, \" - Local\");",
          "4530:     ELEM_OPT_TV(0x47, GSM_A_PDU_TYPE_DTAP, DE_TIME_ZONE_TIME, \" - Universal Time and Local Time Zone\");",
          "4532:     ELEM_OPT_TLV(0x48, GSM_A_PDU_TYPE_DTAP, DE_LSA_ID, NULL);",
          "4534:     ELEM_OPT_TLV(0x49, GSM_A_PDU_TYPE_DTAP, DE_DAY_SAVING_TIME, NULL);",
          "4536:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "4541: static void",
          "4542: dtap_mm_mm_status(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4543: {",
          "4556: }",
          "",
          "[Removed Lines]",
          "4544:  guint32 curr_offset;",
          "4545:  guint32 consumed;",
          "4546:  guint curr_len;",
          "4548:  curr_offset = offset;",
          "4549:  curr_len = len;",
          "4551:  is_uplink = IS_UPLINK_TRUE;",
          "4553:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4555:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4545:     guint32 curr_offset;",
          "4546:     guint32 consumed;",
          "4547:     guint   curr_len;",
          "4549:     curr_offset = offset;",
          "4550:     curr_len = len;",
          "4552:     is_uplink = IS_UPLINK_TRUE;",
          "4554:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_REJ_CAUSE, NULL);",
          "4556:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "4561: static void",
          "4562: dtap_mm_tmsi_realloc_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4563: {",
          "4578: }",
          "",
          "[Removed Lines]",
          "4564:  guint32 curr_offset;",
          "4565:  guint32 consumed;",
          "4566:  guint curr_len;",
          "4568:  curr_offset = offset;",
          "4569:  curr_len = len;",
          "4571:  is_uplink = IS_UPLINK_FALSE;",
          "4573:  ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4575:  ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4577:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4565:     guint32 curr_offset;",
          "4566:     guint32 consumed;",
          "4567:     guint   curr_len;",
          "4569:     curr_offset = offset;",
          "4570:     curr_len = len;",
          "4572:     is_uplink = IS_UPLINK_FALSE;",
          "4574:     ELEM_MAND_V(GSM_A_PDU_TYPE_COMMON, DE_LAI, NULL);",
          "4576:     ELEM_MAND_LV(GSM_A_PDU_TYPE_COMMON, DE_MID, NULL);",
          "4578:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "4592: static void",
          "4593: dtap_cc_alerting(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4594: {",
          "4615: }",
          "",
          "[Removed Lines]",
          "4595:  guint32 curr_offset;",
          "4596:  guint32 consumed;",
          "4597:  guint curr_len;",
          "4599:  curr_offset = offset;",
          "4600:  curr_len = len;",
          "4602:  is_uplink = IS_UPLINK_TRUE;",
          "4604:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4606:  ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4608:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4612:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4614:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4596:     guint32 curr_offset;",
          "4597:     guint32 consumed;",
          "4598:     guint   curr_len;",
          "4600:     curr_offset = offset;",
          "4601:     curr_len = len;",
          "4603:     is_uplink = IS_UPLINK_TRUE;",
          "4605:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4607:     ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4609:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4613:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4615:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "4620: static void",
          "4621: dtap_cc_call_conf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4622: {",
          "4647: }",
          "",
          "[Removed Lines]",
          "4623:  guint32 curr_offset;",
          "4624:  guint32 consumed;",
          "4625:  guint curr_len;",
          "4627:  curr_offset = offset;",
          "4628:  curr_len = len;",
          "4630:  is_uplink = IS_UPLINK_TRUE;",
          "4632:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "4634:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "4636:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "4638:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4640:  ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "4642:  ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4644:  ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "4646:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4624:     guint32 curr_offset;",
          "4625:     guint32 consumed;",
          "4626:     guint   curr_len;",
          "4628:     curr_offset = offset;",
          "4629:     curr_len = len;",
          "4631:     is_uplink = IS_UPLINK_TRUE;",
          "4633:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "4635:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "4637:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "4639:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4641:     ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "4643:     ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4645:     ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "4647:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "4652: static void",
          "4653: dtap_cc_call_proceed(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4654: {",
          "4679: }",
          "4684: static const value_string gsm_a_dtap_congestion_level_vals[] = {",
          "4688: };",
          "4690: static void",
          "4691: dtap_cc_congestion_control(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4692: {",
          "4727: }",
          "",
          "[Removed Lines]",
          "4655:  guint32 curr_offset;",
          "4656:  guint32 consumed;",
          "4657:  guint curr_len;",
          "4659:  curr_offset = offset;",
          "4660:  curr_len = len;",
          "4662:  is_uplink = IS_UPLINK_FALSE;",
          "4664:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "4666:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "4668:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "4670:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4672:  ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4674:  ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "4676:  ELEM_OPT_TLV(0x2f, GSM_A_PDU_TYPE_DTAP, DE_NET_CC_CAP, NULL);",
          "4678:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4685:  { 0, \"Receiver ready\"},",
          "4686:  { 15, \"Receiver not ready\"},",
          "4687:  { 0, NULL }",
          "4693:  guint32      curr_offset;",
          "4694:  guint32      consumed;",
          "4695:  guint        curr_len;",
          "4696:  guint8       oct;",
          "4697:  proto_tree  *subtree;",
          "4699:  curr_offset = offset;",
          "4700:  curr_len = len;",
          "4702:  is_uplink = IS_UPLINK_FALSE;",
          "4707:  oct = tvb_get_guint8(tvb, curr_offset);",
          "4709:  proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4711:  subtree =",
          "4712:  proto_tree_add_subtree(tree,",
          "4713:    tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_CONGESTION], NULL,",
          "4714:    val_to_str_ext_const(DE_CONGESTION, &gsm_dtap_elem_strings_ext, \"\"));",
          "4716:  proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_congestion_level, tvb, curr_offset, 1,",
          "4717:             oct, \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_congestion_level_vals, \"Reserved\"));",
          "4719:  curr_offset++;",
          "4720:  curr_len--;",
          "4722:  if ((signed)curr_len <= 0) return;",
          "4724:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4726:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4656:     guint32 curr_offset;",
          "4657:     guint32 consumed;",
          "4658:     guint   curr_len;",
          "4660:     curr_offset = offset;",
          "4661:     curr_len = len;",
          "4663:     is_uplink = IS_UPLINK_FALSE;",
          "4665:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "4667:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "4669:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "4671:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4673:     ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4675:     ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "4677:     ELEM_OPT_TLV(0x2f, GSM_A_PDU_TYPE_DTAP, DE_NET_CC_CAP, NULL);",
          "4679:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "4686:     { 0, \"Receiver ready\"},",
          "4687:     { 15, \"Receiver not ready\"},",
          "4688:     { 0, NULL }",
          "4694:     guint32      curr_offset;",
          "4695:     guint32      consumed;",
          "4696:     guint        curr_len;",
          "4697:     guint8       oct;",
          "4698:     proto_tree  *subtree;",
          "4700:     curr_offset = offset;",
          "4701:     curr_len = len;",
          "4703:     is_uplink = IS_UPLINK_FALSE;",
          "4708:     oct = tvb_get_guint8(tvb, curr_offset);",
          "4710:     proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, curr_offset<<3, 4, ENC_BIG_ENDIAN);",
          "4712:     subtree =",
          "4713:     proto_tree_add_subtree(tree,",
          "4714:             tvb, curr_offset, 1, ett_gsm_dtap_elem[DE_CONGESTION], NULL,",
          "4715:             val_to_str_ext_const(DE_CONGESTION, &gsm_dtap_elem_strings_ext, \"\"));",
          "4717:     proto_tree_add_uint_format_value(subtree, hf_gsm_a_dtap_congestion_level, tvb, curr_offset, 1,",
          "4718:         oct, \"%s\", val_to_str_const(oct & 0xF, gsm_a_dtap_congestion_level_vals, \"Reserved\"));",
          "4720:     curr_offset++;",
          "4721:     curr_len--;",
          "4723:     if ((signed)curr_len <= 0) return;",
          "4725:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4727:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "4732: static void",
          "4733: dtap_cc_connect(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4734: {",
          "4761: }",
          "",
          "[Removed Lines]",
          "4735:  guint32 curr_offset;",
          "4736:  guint32 consumed;",
          "4737:  guint curr_len;",
          "4739:  curr_offset = offset;",
          "4740:  curr_len = len;",
          "4742:  is_uplink = IS_UPLINK_TRUE;",
          "4744:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4746:  ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4748:  ELEM_OPT_TLV(0x4c, GSM_A_PDU_TYPE_DTAP, DE_CONN_NUM, NULL);",
          "4750:  ELEM_OPT_TLV(0x4d, GSM_A_PDU_TYPE_DTAP, DE_CONN_SUB_ADDR, NULL);",
          "4752:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4756:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4758:  ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4760:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4736:     guint32 curr_offset;",
          "4737:     guint32 consumed;",
          "4738:     guint   curr_len;",
          "4740:     curr_offset = offset;",
          "4741:     curr_len = len;",
          "4743:     is_uplink = IS_UPLINK_TRUE;",
          "4745:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4747:     ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4749:     ELEM_OPT_TLV(0x4c, GSM_A_PDU_TYPE_DTAP, DE_CONN_NUM, NULL);",
          "4751:     ELEM_OPT_TLV(0x4d, GSM_A_PDU_TYPE_DTAP, DE_CONN_SUB_ADDR, NULL);",
          "4753:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4757:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4759:     ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4761:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "4766: static void",
          "4767: dtap_cc_disconnect(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4768: {",
          "4793: }",
          "",
          "[Removed Lines]",
          "4769:  guint32 curr_offset;",
          "4770:  guint32 consumed;",
          "4771:  guint curr_len;",
          "4773:  curr_offset = offset;",
          "4774:  curr_len = len;",
          "4776:  is_uplink = IS_UPLINK_TRUE;",
          "4778:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4780:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4782:  ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4784:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4786:  ELEM_OPT_TLV(0x7b, GSM_A_PDU_TYPE_DTAP, DE_ALLOWED_ACTIONS, NULL);",
          "4790:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4792:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4770:     guint32 curr_offset;",
          "4771:     guint32 consumed;",
          "4772:     guint   curr_len;",
          "4774:     curr_offset = offset;",
          "4775:     curr_len = len;",
          "4777:     is_uplink = IS_UPLINK_TRUE;",
          "4779:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4781:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4783:     ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4785:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4787:     ELEM_OPT_TLV(0x7b, GSM_A_PDU_TYPE_DTAP, DE_ALLOWED_ACTIONS, NULL);",
          "4791:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4793:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "4798: static void",
          "4799: dtap_cc_emerg_setup(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4800: {",
          "4819: }",
          "",
          "[Removed Lines]",
          "4801:  guint32 curr_offset;",
          "4802:  guint32 consumed;",
          "4803:  guint curr_len;",
          "4805:  curr_offset = offset;",
          "4806:  curr_len = len;",
          "4808:  is_uplink = IS_UPLINK_TRUE;",
          "4810:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4812:  ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4814:  ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "4816:  ELEM_OPT_TLV(0x2e, GSM_A_PDU_TYPE_DTAP, DE_SERV_CAT, \" - Emergency category\");",
          "4818:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4802:     guint32 curr_offset;",
          "4803:     guint32 consumed;",
          "4804:     guint   curr_len;",
          "4806:     curr_offset = offset;",
          "4807:     curr_len = len;",
          "4809:     is_uplink = IS_UPLINK_TRUE;",
          "4811:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4813:     ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "4815:     ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "4817:     ELEM_OPT_TLV(0x2e, GSM_A_PDU_TYPE_DTAP, DE_SERV_CAT, \" - Emergency category\");",
          "4819:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "4824: static void",
          "4825: dtap_cc_facility(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4826: {",
          "4843: }",
          "",
          "[Removed Lines]",
          "4827:  guint32 curr_offset;",
          "4828:  guint32 consumed;",
          "4829:  guint curr_len;",
          "4831:  curr_offset = offset;",
          "4832:  curr_len = len;",
          "4834:  is_uplink = IS_UPLINK_TRUE;",
          "4836:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4840:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4842:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4828:     guint32 curr_offset;",
          "4829:     guint32 consumed;",
          "4830:     guint   curr_len;",
          "4832:     curr_offset = offset;",
          "4833:     curr_len = len;",
          "4835:     is_uplink = IS_UPLINK_TRUE;",
          "4837:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "4841:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "4843:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "4854: static void",
          "4855: dtap_cc_hold_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4856: {",
          "4869: }",
          "",
          "[Removed Lines]",
          "4857:  guint32 curr_offset;",
          "4858:  guint32 consumed;",
          "4859:  guint curr_len;",
          "4861:  curr_offset = offset;",
          "4862:  curr_len = len;",
          "4864:  is_uplink = IS_UPLINK_FALSE;",
          "4866:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4868:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4858:     guint32 curr_offset;",
          "4859:     guint32 consumed;",
          "4860:     guint   curr_len;",
          "4862:     curr_offset = offset;",
          "4863:     curr_len = len;",
          "4865:     is_uplink = IS_UPLINK_FALSE;",
          "4867:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4869:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "4874: static void",
          "4875: dtap_cc_modify(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4876: {",
          "4897: }",
          "",
          "[Removed Lines]",
          "4877:  guint32 curr_offset;",
          "4878:  guint32 consumed;",
          "4879:  guint curr_len;",
          "4881:  curr_offset = offset;",
          "4882:  curr_len = len;",
          "4884:  is_uplink = IS_UPLINK_TRUE;",
          "4886:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4888:  ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4890:  ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4892:  ELEM_OPT_T(0xa3, GSM_A_PDU_TYPE_DTAP, DE_REV_CALL_SETUP_DIR, NULL);",
          "4894:  ELEM_OPT_T(0xa4, GSM_A_PDU_TYPE_DTAP, DE_NET_INIT_SERV_UPG, NULL);",
          "4896:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4878:     guint32 curr_offset;",
          "4879:     guint32 consumed;",
          "4880:     guint   curr_len;",
          "4882:     curr_offset = offset;",
          "4883:     curr_len = len;",
          "4885:     is_uplink = IS_UPLINK_TRUE;",
          "4887:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4889:     ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4891:     ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4893:     ELEM_OPT_T(0xa3, GSM_A_PDU_TYPE_DTAP, DE_REV_CALL_SETUP_DIR, NULL);",
          "4895:     ELEM_OPT_T(0xa4, GSM_A_PDU_TYPE_DTAP, DE_NET_INIT_SERV_UPG, NULL);",
          "4897:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "4902: static void",
          "4903: dtap_cc_modify_complete(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4904: {",
          "4923: }",
          "",
          "[Removed Lines]",
          "4905:  guint32 curr_offset;",
          "4906:  guint32 consumed;",
          "4907:  guint curr_len;",
          "4909:  curr_offset = offset;",
          "4910:  curr_len = len;",
          "4912:  is_uplink = IS_UPLINK_TRUE;",
          "4914:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4916:  ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4918:  ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4920:  ELEM_OPT_T(0xa3, GSM_A_PDU_TYPE_DTAP, DE_REV_CALL_SETUP_DIR, NULL);",
          "4922:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4906:     guint32 curr_offset;",
          "4907:     guint32 consumed;",
          "4908:     guint   curr_len;",
          "4910:     curr_offset = offset;",
          "4911:     curr_len = len;",
          "4913:     is_uplink = IS_UPLINK_TRUE;",
          "4915:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4917:     ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4919:     ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4921:     ELEM_OPT_T(0xa3, GSM_A_PDU_TYPE_DTAP, DE_REV_CALL_SETUP_DIR, NULL);",
          "4923:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "4928: static void",
          "4929: dtap_cc_modify_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4930: {",
          "4949: }",
          "",
          "[Removed Lines]",
          "4931:  guint32 curr_offset;",
          "4932:  guint32 consumed;",
          "4933:  guint curr_len;",
          "4935:  curr_offset = offset;",
          "4936:  curr_len = len;",
          "4938:  is_uplink = IS_UPLINK_FALSE;",
          "4940:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4942:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4944:  ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4946:  ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4948:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4932:     guint32 curr_offset;",
          "4933:     guint32 consumed;",
          "4934:     guint   curr_len;",
          "4936:     curr_offset = offset;",
          "4937:     curr_len = len;",
          "4939:     is_uplink = IS_UPLINK_FALSE;",
          "4941:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "4943:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "4945:     ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, NULL);",
          "4947:     ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, NULL);",
          "4949:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4954: static void",
          "4955: dtap_cc_notify(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4956: {",
          "4969: }",
          "",
          "[Removed Lines]",
          "4957:  guint32 curr_offset;",
          "4958:  guint32 consumed;",
          "4959:  guint curr_len;",
          "4961:  curr_offset = offset;",
          "4962:  curr_len = len;",
          "4964:  is_uplink = IS_UPLINK_FALSE;",
          "4966:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_NOT_IND, NULL);",
          "4968:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4958:     guint32 curr_offset;",
          "4959:     guint32 consumed;",
          "4960:     guint   curr_len;",
          "4962:     curr_offset = offset;",
          "4963:     curr_len = len;",
          "4965:     is_uplink = IS_UPLINK_FALSE;",
          "4967:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_NOT_IND, NULL);",
          "4969:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4974: static void",
          "4975: dtap_cc_progress(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4976: {",
          "4991: }",
          "",
          "[Removed Lines]",
          "4977:  guint32 curr_offset;",
          "4978:  guint32 consumed;",
          "4979:  guint curr_len;",
          "4981:  curr_offset = offset;",
          "4982:  curr_len = len;",
          "4984:  is_uplink = IS_UPLINK_FALSE;",
          "4986:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4988:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4990:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "4978:     guint32 curr_offset;",
          "4979:     guint32 consumed;",
          "4980:     guint   curr_len;",
          "4982:     curr_offset = offset;",
          "4983:     curr_len = len;",
          "4985:     is_uplink = IS_UPLINK_FALSE;",
          "4987:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "4989:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "4991:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4996: static void",
          "4997: dtap_cc_cc_est(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "4998: {",
          "5011: }",
          "",
          "[Removed Lines]",
          "4999:  guint32 curr_offset;",
          "5000:  guint32 consumed;",
          "5001:  guint curr_len;",
          "5003:  curr_offset = offset;",
          "5004:  curr_len = len;",
          "5006:  is_uplink = IS_UPLINK_FALSE;",
          "5008:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_SETUP_CONTAINER, NULL);",
          "5010:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5000:     guint32 curr_offset;",
          "5001:     guint32 consumed;",
          "5002:     guint   curr_len;",
          "5004:     curr_offset = offset;",
          "5005:     curr_len = len;",
          "5007:     is_uplink = IS_UPLINK_FALSE;",
          "5009:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_SETUP_CONTAINER, NULL);",
          "5011:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "5016: static void",
          "5017: dtap_cc_cc_est_conf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5018: {",
          "5039: }",
          "",
          "[Removed Lines]",
          "5019:  guint32 curr_offset;",
          "5020:  guint32 consumed;",
          "5021:  guint curr_len;",
          "5023:  curr_offset = offset;",
          "5024:  curr_len = len;",
          "5026:  is_uplink = IS_UPLINK_TRUE;",
          "5028:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" Repeat indicator\");",
          "5030:  ELEM_MAND_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "5032:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "5034:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5036:  ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "5038:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5020:     guint32 curr_offset;",
          "5021:     guint32 consumed;",
          "5022:     guint   curr_len;",
          "5024:     curr_offset = offset;",
          "5025:     curr_len = len;",
          "5027:     is_uplink = IS_UPLINK_TRUE;",
          "5029:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" Repeat indicator\");",
          "5031:     ELEM_MAND_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "5033:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "5035:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5037:     ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "5039:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "5044: static void",
          "5045: dtap_cc_release(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5046: {",
          "5069: }",
          "",
          "[Removed Lines]",
          "5047:  guint32 curr_offset;",
          "5048:  guint32 consumed;",
          "5049:  guint curr_len;",
          "5051:  curr_offset = offset;",
          "5052:  curr_len = len;",
          "5054:  is_uplink = IS_UPLINK_TRUE;",
          "5056:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5058:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, \" 2\");",
          "5060:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5062:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5066:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5068:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5048:     guint32 curr_offset;",
          "5049:     guint32 consumed;",
          "5050:     guint   curr_len;",
          "5052:     curr_offset = offset;",
          "5053:     curr_len = len;",
          "5055:     is_uplink = IS_UPLINK_TRUE;",
          "5057:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5059:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, \" 2\");",
          "5061:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5063:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5067:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5069:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "5074: static void",
          "5075: dtap_cc_recall(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5076: {",
          "5091: }",
          "",
          "[Removed Lines]",
          "5077:  guint32 curr_offset;",
          "5078:  guint32 consumed;",
          "5079:  guint curr_len;",
          "5081:  curr_offset = offset;",
          "5082:  curr_len = len;",
          "5084:  is_uplink = IS_UPLINK_FALSE;",
          "5086:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_RECALL_TYPE, NULL);",
          "5088:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5090:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5078:     guint32 curr_offset;",
          "5079:     guint32 consumed;",
          "5080:     guint   curr_len;",
          "5082:     curr_offset = offset;",
          "5083:     curr_len = len;",
          "5085:     is_uplink = IS_UPLINK_FALSE;",
          "5087:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_RECALL_TYPE, NULL);",
          "5089:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5091:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "5096: static void",
          "5097: dtap_cc_release_complete(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5098: {",
          "5119: }",
          "",
          "[Removed Lines]",
          "5099:  guint32 curr_offset;",
          "5100:  guint32 consumed;",
          "5101:  guint curr_len;",
          "5103:  curr_offset = offset;",
          "5104:  curr_len = len;",
          "5106:  is_uplink = IS_UPLINK_FALSE;",
          "5108:  ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5110:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5112:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5116:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5118:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5100:     guint32 curr_offset;",
          "5101:     guint32 consumed;",
          "5102:     guint   curr_len;",
          "5104:     curr_offset = offset;",
          "5105:     curr_len = len;",
          "5107:     is_uplink = IS_UPLINK_FALSE;",
          "5109:     ELEM_OPT_TLV(0x08, GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5111:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5113:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5117:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5119:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "5124: static void",
          "5125: dtap_cc_retrieve_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5126: {",
          "5139: }",
          "",
          "[Removed Lines]",
          "5127:  guint32 curr_offset;",
          "5128:  guint32 consumed;",
          "5129:  guint curr_len;",
          "5131:  curr_offset = offset;",
          "5132:  curr_len = len;",
          "5134:  is_uplink = IS_UPLINK_FALSE;",
          "5136:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5138:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5128:     guint32 curr_offset;",
          "5129:     guint32 consumed;",
          "5130:     guint   curr_len;",
          "5132:     curr_offset = offset;",
          "5133:     curr_len = len;",
          "5135:     is_uplink = IS_UPLINK_FALSE;",
          "5137:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5139:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "5153: static void",
          "5154: dtap_cc_setup(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5155: {",
          "5238: }",
          "",
          "[Removed Lines]",
          "5156:  guint32 curr_offset;",
          "5157:  guint32 consumed;",
          "5158:  guint curr_len;",
          "5160:  curr_offset = offset;",
          "5161:  curr_len = len;",
          "5163:  is_uplink = IS_UPLINK_TRUE;",
          "5165:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "5167:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "5169:  ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "5171:  ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5173:  ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "5175:  ELEM_OPT_TV(0x34, GSM_A_PDU_TYPE_DTAP, DE_SIGNAL, NULL);",
          "5177:  ELEM_OPT_TLV(0x5c, GSM_A_PDU_TYPE_DTAP, DE_CLG_PARTY_BCD_NUM, NULL);",
          "5179:  ELEM_OPT_TLV(0x5d, GSM_A_PDU_TYPE_DTAP, DE_CLG_PARTY_SUB_ADDR, NULL);",
          "5181:  ELEM_OPT_TLV(0x5e, GSM_A_PDU_TYPE_DTAP, DE_CLD_PARTY_BCD_NUM, NULL);",
          "5183:  ELEM_OPT_TLV(0x6d, GSM_A_PDU_TYPE_DTAP, DE_CLD_PARTY_SUB_ADDR, NULL);",
          "5185:  ELEM_OPT_TLV(0x74, GSM_A_PDU_TYPE_DTAP, DE_RED_PARTY_BCD_NUM, NULL);",
          "5187:  ELEM_OPT_TLV(0x75, GSM_A_PDU_TYPE_DTAP, DE_RED_PARTY_SUB_ADDR, NULL);",
          "5189:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" LLC repeat indicator\");",
          "5191:  ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, \" 1\");",
          "5193:  ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, \" 2\");",
          "5195:  ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" HLC repeat indicator\");",
          "5197:  ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, \" 1\");",
          "5199:  ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, \" 2\");",
          "5201:  ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5205:  ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "5207:  ELEM_OPT_TLV(0x19, GSM_A_PDU_TYPE_DTAP, DE_ALERT_PATTERN, NULL);",
          "5209:  ELEM_OPT_TLV(0x2f, GSM_A_PDU_TYPE_DTAP, DE_NET_CC_CAP, NULL);",
          "5211:  ELEM_OPT_TLV(0x3a, GSM_A_PDU_TYPE_DTAP, DE_CAUSE_NO_CLI, NULL);",
          "5214:  ELEM_OPT_TLV(0x41, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "5218:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5220:  ELEM_OPT_T(0xa1, GSM_A_PDU_TYPE_DTAP, DE_CLIR_SUP, NULL);",
          "5222:  ELEM_OPT_T(0xa2, GSM_A_PDU_TYPE_DTAP, DE_CLIR_INV, NULL);",
          "5224:  ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "5226:  ELEM_OPT_TLV(0x1d, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, \" $(CCBS)$ (advanced recall alignment)\");",
          "5228:  ELEM_OPT_TLV(0x1b, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, \" (recall alignment Not essential) $(CCBS)$\");",
          "5230:  ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "5232:  ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "5235:  ELEM_OPT_T(0xA3, GSM_A_PDU_TYPE_DTAP, DE_REDIAL, NULL);",
          "5237:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5157:     guint32 curr_offset;",
          "5158:     guint32 consumed;",
          "5159:     guint   curr_len;",
          "5161:     curr_offset = offset;",
          "5162:     curr_len = len;",
          "5164:     is_uplink = IS_UPLINK_TRUE;",
          "5166:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" BC repeat indicator\");",
          "5168:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 1\");",
          "5170:     ELEM_OPT_TLV(0x04, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, \" 2\");",
          "5172:     ELEM_OPT_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5174:     ELEM_OPT_TLV(0x1e, GSM_A_PDU_TYPE_DTAP, DE_PROG_IND, NULL);",
          "5176:     ELEM_OPT_TV(0x34, GSM_A_PDU_TYPE_DTAP, DE_SIGNAL, NULL);",
          "5178:     ELEM_OPT_TLV(0x5c, GSM_A_PDU_TYPE_DTAP, DE_CLG_PARTY_BCD_NUM, NULL);",
          "5180:     ELEM_OPT_TLV(0x5d, GSM_A_PDU_TYPE_DTAP, DE_CLG_PARTY_SUB_ADDR, NULL);",
          "5182:     ELEM_OPT_TLV(0x5e, GSM_A_PDU_TYPE_DTAP, DE_CLD_PARTY_BCD_NUM, NULL);",
          "5184:     ELEM_OPT_TLV(0x6d, GSM_A_PDU_TYPE_DTAP, DE_CLD_PARTY_SUB_ADDR, NULL);",
          "5186:     ELEM_OPT_TLV(0x74, GSM_A_PDU_TYPE_DTAP, DE_RED_PARTY_BCD_NUM, NULL);",
          "5188:     ELEM_OPT_TLV(0x75, GSM_A_PDU_TYPE_DTAP, DE_RED_PARTY_SUB_ADDR, NULL);",
          "5190:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" LLC repeat indicator\");",
          "5192:     ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, \" 1\");",
          "5194:     ELEM_OPT_TLV(0x7c, GSM_A_PDU_TYPE_DTAP, DE_LLC, \" 2\");",
          "5196:     ELEM_OPT_TV_SHORT(0xd0, GSM_A_PDU_TYPE_DTAP, DE_REPEAT_IND, \" HLC repeat indicator\");",
          "5198:     ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, \" 1\");",
          "5200:     ELEM_OPT_TLV(0x7d, GSM_A_PDU_TYPE_DTAP, DE_HLC, \" 2\");",
          "5202:     ELEM_OPT_TLV(0x7e, GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5206:     ELEM_OPT_TV_SHORT(0x80, GSM_A_PDU_TYPE_COMMON, DE_PRIO, NULL);",
          "5208:     ELEM_OPT_TLV(0x19, GSM_A_PDU_TYPE_DTAP, DE_ALERT_PATTERN, NULL);",
          "5210:     ELEM_OPT_TLV(0x2f, GSM_A_PDU_TYPE_DTAP, DE_NET_CC_CAP, NULL);",
          "5212:     ELEM_OPT_TLV(0x3a, GSM_A_PDU_TYPE_DTAP, DE_CAUSE_NO_CLI, NULL);",
          "5215:     ELEM_OPT_TLV(0x41, GSM_A_PDU_TYPE_DTAP, DE_BEARER_CAP, NULL);",
          "5219:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5221:     ELEM_OPT_T(0xa1, GSM_A_PDU_TYPE_DTAP, DE_CLIR_SUP, NULL);",
          "5223:     ELEM_OPT_T(0xa2, GSM_A_PDU_TYPE_DTAP, DE_CLIR_INV, NULL);",
          "5225:     ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "5227:     ELEM_OPT_TLV(0x1d, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, \" $(CCBS)$ (advanced recall alignment)\");",
          "5229:     ELEM_OPT_TLV(0x1b, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, \" (recall alignment Not essential) $(CCBS)$\");",
          "5231:     ELEM_OPT_TLV(0x2d, GSM_A_PDU_TYPE_DTAP, DE_SI, NULL);",
          "5233:     ELEM_OPT_TLV(0x40, GSM_A_PDU_TYPE_DTAP, DE_SUP_CODEC_LIST, NULL);",
          "5236:     ELEM_OPT_T(0xA3, GSM_A_PDU_TYPE_DTAP, DE_REDIAL, NULL);",
          "5238:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "5243: static void",
          "5244: dtap_cc_start_cc(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5245: {",
          "5258: }",
          "",
          "[Removed Lines]",
          "5246:  guint32 curr_offset;",
          "5247:  guint32 consumed;",
          "5248:  guint curr_len;",
          "5250:  curr_offset = offset;",
          "5251:  curr_len = len;",
          "5253:  is_uplink = IS_UPLINK_FALSE;",
          "5255:  ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "5257:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5247:     guint32 curr_offset;",
          "5248:     guint32 consumed;",
          "5249:     guint   curr_len;",
          "5251:     curr_offset = offset;",
          "5252:     curr_len = len;",
          "5254:     is_uplink = IS_UPLINK_FALSE;",
          "5256:     ELEM_OPT_TLV(0x15, GSM_A_PDU_TYPE_DTAP, DE_CC_CAP, NULL);",
          "5258:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "5263: static void",
          "5264: dtap_cc_start_dtmf(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5265: {",
          "5278: }",
          "",
          "[Removed Lines]",
          "5266:  guint32 curr_offset;",
          "5267:  guint32 consumed;",
          "5268:  guint curr_len;",
          "5270:  curr_offset = offset;",
          "5271:  curr_len = len;",
          "5273:  is_uplink = IS_UPLINK_TRUE;",
          "5275:  ELEM_MAND_TV(0x2c, GSM_A_PDU_TYPE_DTAP, DE_KEYPAD_FACILITY, NULL);",
          "5277:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5267:     guint32 curr_offset;",
          "5268:     guint32 consumed;",
          "5269:     guint   curr_len;",
          "5271:     curr_offset = offset;",
          "5272:     curr_len = len;",
          "5274:     is_uplink = IS_UPLINK_TRUE;",
          "5276:     ELEM_MAND_TV(0x2c, GSM_A_PDU_TYPE_DTAP, DE_KEYPAD_FACILITY, NULL);",
          "5278:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "5283: static void",
          "5284: dtap_cc_start_dtmf_ack(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5285: {",
          "5298: }",
          "",
          "[Removed Lines]",
          "5286:  guint32 curr_offset;",
          "5287:  guint32 consumed;",
          "5288:  guint curr_len;",
          "5290:  curr_offset = offset;",
          "5291:  curr_len = len;",
          "5293:  is_uplink = IS_UPLINK_FALSE;",
          "5295:  ELEM_MAND_TV(0x2c, GSM_A_PDU_TYPE_DTAP, DE_KEYPAD_FACILITY, NULL);",
          "5297:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5287:     guint32 curr_offset;",
          "5288:     guint32 consumed;",
          "5289:     guint   curr_len;",
          "5291:     curr_offset = offset;",
          "5292:     curr_len = len;",
          "5294:     is_uplink = IS_UPLINK_FALSE;",
          "5296:     ELEM_MAND_TV(0x2c, GSM_A_PDU_TYPE_DTAP, DE_KEYPAD_FACILITY, NULL);",
          "5298:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "5303: static void",
          "5304: dtap_cc_start_dtmf_rej(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5305: {",
          "5318: }",
          "",
          "[Removed Lines]",
          "5306:  guint32 curr_offset;",
          "5307:  guint32 consumed;",
          "5308:  guint curr_len;",
          "5310:  curr_offset = offset;",
          "5311:  curr_len = len;",
          "5313:  is_uplink = IS_UPLINK_FALSE;",
          "5315:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5317:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5307:     guint32 curr_offset;",
          "5308:     guint32 consumed;",
          "5309:     guint   curr_len;",
          "5311:     curr_offset = offset;",
          "5312:     curr_len = len;",
          "5314:     is_uplink = IS_UPLINK_FALSE;",
          "5316:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5318:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "5323: static void",
          "5324: dtap_cc_status(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5325: {",
          "5342: }",
          "",
          "[Removed Lines]",
          "5326:  guint32 curr_offset;",
          "5327:  guint32 consumed;",
          "5328:  guint curr_len;",
          "5330:  curr_offset = offset;",
          "5331:  curr_len = len;",
          "5333:  is_uplink = IS_UPLINK_FALSE;",
          "5335:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5337:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_CALL_STATE, NULL);",
          "5339:  ELEM_OPT_TLV(0x24, GSM_A_PDU_TYPE_DTAP, DE_AUX_STATES, NULL);",
          "5341:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5327:     guint32 curr_offset;",
          "5328:     guint32 consumed;",
          "5329:     guint   curr_len;",
          "5331:     curr_offset = offset;",
          "5332:     curr_len = len;",
          "5334:     is_uplink = IS_UPLINK_FALSE;",
          "5336:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CAUSE, NULL);",
          "5338:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_CALL_STATE, NULL);",
          "5340:     ELEM_OPT_TLV(0x24, GSM_A_PDU_TYPE_DTAP, DE_AUX_STATES, NULL);",
          "5342:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "5358: static void",
          "5359: dtap_cc_user_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5360: {",
          "5375: }",
          "",
          "[Removed Lines]",
          "5361:  guint32 curr_offset;",
          "5362:  guint32 consumed;",
          "5363:  guint curr_len;",
          "5365:  curr_offset = offset;",
          "5366:  curr_len = len;",
          "5368:  is_uplink = IS_UPLINK_TRUE;",
          "5370:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5372:  ELEM_OPT_T(0xa0, GSM_A_PDU_TYPE_DTAP, DE_MORE_DATA, NULL);",
          "5374:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5362:     guint32 curr_offset;",
          "5363:     guint32 consumed;",
          "5364:     guint   curr_len;",
          "5366:     curr_offset = offset;",
          "5367:     curr_len = len;",
          "5369:     is_uplink = IS_UPLINK_TRUE;",
          "5371:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_USER_USER, NULL);",
          "5373:     ELEM_OPT_T(0xa0, GSM_A_PDU_TYPE_DTAP, DE_MORE_DATA, NULL);",
          "5375:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "5381: static void",
          "5382: dtap_ss_register(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5383: {",
          "5398: }",
          "",
          "[Removed Lines]",
          "5384:  guint32 curr_offset;",
          "5385:  guint32 consumed;",
          "5386:  guint curr_len;",
          "5388:  curr_offset = offset;",
          "5389:  curr_len = len;",
          "5391:  is_uplink = IS_UPLINK_TRUE;",
          "5393:  ELEM_MAND_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5395:  ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5397:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5385:     guint32 curr_offset;",
          "5386:     guint32 consumed;",
          "5387:     guint   curr_len;",
          "5389:     curr_offset = offset;",
          "5390:     curr_len = len;",
          "5392:     is_uplink = IS_UPLINK_TRUE;",
          "5394:     ELEM_MAND_TLV(0x1c, GSM_A_PDU_TYPE_DTAP, DE_FACILITY, NULL);",
          "5396:     ELEM_OPT_TLV(0x7f, GSM_A_PDU_TYPE_DTAP, DE_SS_VER_IND, NULL);",
          "5398:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "5404: static void",
          "5405: dtap_sms_cp_data(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5406: {",
          "5419: }",
          "",
          "[Removed Lines]",
          "5407:  guint32 curr_offset;",
          "5408:  guint32 consumed;",
          "5409:  guint curr_len;",
          "5411:  curr_offset = offset;",
          "5412:  curr_len = len;",
          "5414:  is_uplink = IS_UPLINK_TRUE;",
          "5416:  ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CP_USER_DATA, NULL);",
          "5418:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "[Added Lines]",
          "5408:     guint32 curr_offset;",
          "5409:     guint32 consumed;",
          "5410:     guint   curr_len;",
          "5412:     curr_offset = offset;",
          "5413:     curr_len = len;",
          "5415:     is_uplink = IS_UPLINK_TRUE;",
          "5417:     ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_CP_USER_DATA, NULL);",
          "5419:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "5424: static void",
          "5425: dtap_sms_cp_error(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5426: {",
          "5439: }",
          "5441: static void",
          "5442: dtap_tp_close_tch_loop_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5443: {",
          "5454: }",
          "5456: static void",
          "5457: dtap_tp_open_loop_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5458: {",
          "5470: }",
          "5472: static void",
          "5473: dtap_tp_multi_slot_loop_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5474: {",
          "5485: }",
          "5487: static void",
          "5488: dtap_tp_multi_slot_loop_ack(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5489: {",
          "5500: }",
          "5502: static void",
          "5503: dtap_tp_test_interface(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5504: {",
          "5515: }",
          "5517: static void",
          "5518: dtap_tp_gprs_test_mode_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5519: {",
          "5532: }",
          "5534: static void",
          "5535: dtap_tp_egprs_start_radio_block_loopback_cmd(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5536: {",
          "5547: }",
          "5549: static void",
          "5550: dtap_tp_reset_ms_positioning_stored_information(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5551: {",
          "5562: }",
          "5564: static void",
          "5565: dtap_tp_close_ue_test_loop(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5566: {",
          "5577: }",
          "5579: static void",
          "5580: dtap_tp_reset_ue_positioning_stored_information(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5581: {",
          "5592: }",
          "5594: static void",
          "5595: dtap_tp_ue_test_loop_mode_3_rlc_sdu_counter_response(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5596: {",
          "5607: }",
          "5609: static void",
          "5610: dtap_tp_epc_close_ue_test_loop(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5611: {",
          "5637: }",
          "5639: static void",
          "5640: dtap_tp_epc_activate_test_mode(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5641: {",
          "5652: }",
          "5654: static void",
          "5655: dtap_tp_epc_reset_ue_positioning_stored_information(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5656: {",
          "5667: }",
          "5669: static void",
          "5670: dtap_tp_epc_test_loop_mode_c_mbms_packet_counter_response(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5671: {",
          "5682: }",
          "5683: static void",
          "5684: dtap_tp_epc_update_ue_location_information(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)",
          "5685: {",
          "5700: }",
          "5703: static gint ett_gsm_dtap_msg_mm[NUM_GSM_DTAP_MSG_MM];",
          "5704: static void (*dtap_msg_mm_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len) = {",
          "5729: };",
          "5732: static gint ett_gsm_dtap_msg_cc[NUM_GSM_DTAP_MSG_CC];",
          "5733: static void (*dtap_msg_cc_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len) = {",
          "5770: };",
          "5773: static gint ett_gsm_dtap_msg_sms[NUM_GSM_DTAP_MSG_SMS];",
          "5774: static void (*dtap_msg_sms_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len) = {",
          "5779: };",
          "5782: static gint ett_gsm_dtap_msg_ss[NUM_GSM_DTAP_MSG_SS];",
          "5783: static void (*dtap_msg_ss_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len) = {",
          "5788: };",
          "5791: static gint ett_gsm_dtap_msg_tp[NUM_GSM_DTAP_MSG_TP];",
          "5792: static void (*dtap_msg_tp_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len) = {",
          "5831: };",
          "",
          "[Removed Lines]",
          "5427:  guint32 curr_offset;",
          "5428:  guint32 consumed;",
          "5429:  guint curr_len;",
          "5431:  curr_offset = offset;",
          "5432:  curr_len = len;",
          "5434:  is_uplink = IS_UPLINK_TRUE;",
          "5436:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_CP_CAUSE, NULL);",
          "5438:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5444:  guint32 curr_offset;",
          "5445:  guint32 consumed;",
          "5446:  guint curr_len;",
          "5448:  curr_len = len;",
          "5449:  curr_offset = offset;",
          "5451:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_SUB_CHANNEL, NULL);",
          "5453:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5459:  guint32 curr_offset;",
          "5460:  guint32 consumed;",
          "5461:  guint curr_len;",
          "5463:  curr_len = len;",
          "5464:  curr_offset = offset;",
          "5466:  if (curr_len)",
          "5467:   ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_ACK, NULL);",
          "5469:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5475:  guint32 curr_offset;",
          "5476:  guint32 consumed;",
          "5477:  guint curr_len;",
          "5479:  curr_len = len;",
          "5480:  curr_offset = offset;",
          "5482:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_LOOP_TYPE, NULL);",
          "5484:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5490:  guint32 curr_offset;",
          "5491:  guint32 consumed;",
          "5492:  guint curr_len;",
          "5494:  curr_len = len;",
          "5495:  curr_offset = offset;",
          "5497:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_LOOP_ACK, NULL);",
          "5499:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5505:  guint32 curr_offset;",
          "5506:  guint32 consumed;",
          "5507:  guint curr_len;",
          "5509:  curr_len = len;",
          "5510:  curr_offset = offset;",
          "5512:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_TESTED_DEVICE, NULL);",
          "5514:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5520:  guint32 curr_offset;",
          "5521:  guint32 consumed;",
          "5522:  guint curr_len;",
          "5524:  curr_len = len;",
          "5525:  curr_offset = offset;",
          "5527:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_PDU_DESCRIPTION, NULL);",
          "5529:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_MODE_FLAG, NULL);",
          "5531:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5537:  guint32 curr_offset;",
          "5538:  guint32 consumed;",
          "5539:  guint curr_len;",
          "5541:  curr_len = len;",
          "5542:  curr_offset = offset;",
          "5544:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EGPRS_MODE_FLAG, NULL);",
          "5546:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5552:  guint32 curr_offset;",
          "5553:  guint32 consumed;",
          "5554:  guint curr_len;",
          "5556:  curr_len = len;",
          "5557:  curr_offset = offset;",
          "5559:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_MS_POSITIONING_TECHNOLOGY, NULL);",
          "5561:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5567:  guint32 curr_offset;",
          "5568:  guint32 consumed;",
          "5569:  guint curr_len;",
          "5571:  curr_len = len;",
          "5572:  curr_offset = offset;",
          "5574:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_UE_TEST_LOOP_MODE, NULL);",
          "5576:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5582:  guint32 curr_offset;",
          "5583:  guint32 consumed;",
          "5584:  guint curr_len;",
          "5586:  curr_len = len;",
          "5587:  curr_offset = offset;",
          "5589:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_UE_POSITIONING_TECHNOLOGY, NULL);",
          "5591:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5597:  guint32 curr_offset;",
          "5598:  guint32 consumed;",
          "5599:  guint curr_len;",
          "5601:  curr_len = len;",
          "5602:  curr_offset = offset;",
          "5604:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_RLC_SDU_COUNTER_VALUE, NULL);",
          "5606:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5612:  guint32 curr_offset;",
          "5613:  guint32 consumed;",
          "5614:  guint   curr_len;",
          "5616:  curr_len = len;",
          "5617:  curr_offset = offset;",
          "5619:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TEST_LOOP_MODE, NULL);",
          "5621:  switch (epc_test_loop_mode)",
          "5622:  {",
          "5623:  case 0:",
          "5624:   ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_A_LB_SETUP, NULL);",
          "5625:   break;",
          "5626:  case 1:",
          "5627:   ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_B_LB_SETUP, NULL);",
          "5628:   break;",
          "5629:  case 2:",
          "5630:   ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_C_SETUP, NULL);",
          "5631:   break;",
          "5632:  default:",
          "5633:   break;",
          "5634:  }",
          "5636:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5642:  guint32 curr_offset;",
          "5643:  guint32 consumed;",
          "5644:  guint   curr_len;",
          "5646:  curr_len = len;",
          "5647:  curr_offset = offset;",
          "5649:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TEST_LOOP_MODE, NULL);",
          "5651:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5657:  guint32 curr_offset;",
          "5658:  guint32 consumed;",
          "5659:  guint   curr_len;",
          "5661:  curr_len = len;",
          "5662:  curr_offset = offset;",
          "5664:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_POSITIONING_TECHNOLOGY, NULL);",
          "5666:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5672:  guint32 curr_offset;",
          "5673:  guint32 consumed;",
          "5674:  guint   curr_len;",
          "5676:  curr_len = len;",
          "5677:  curr_offset = offset;",
          "5679:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_MBMS_PACKET_COUNTER_VALUE, NULL);",
          "5681:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5686:  guint32 curr_offset;",
          "5687:  guint32 consumed;",
          "5688:  guint   curr_len;",
          "5690:  curr_len = len;",
          "5691:  curr_offset = offset;",
          "5693:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_ELLIPSOID_POINT_WITH_ALT, NULL);",
          "5695:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_HORIZONTAL_VELOCITY, NULL);",
          "5697:  ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_GNSS_TOD_MSEC, NULL);",
          "5699:  EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5702: #define NUM_GSM_DTAP_MSG_MM (sizeof(gsm_a_dtap_msg_mm_strings)/sizeof(value_string))",
          "5731: #define NUM_GSM_DTAP_MSG_CC (sizeof(gsm_a_dtap_msg_cc_strings)/sizeof(value_string))",
          "5772: #define NUM_GSM_DTAP_MSG_SMS (sizeof(gsm_a_dtap_msg_sms_strings)/sizeof(value_string))",
          "5781: #define NUM_GSM_DTAP_MSG_SS (sizeof(gsm_a_dtap_msg_ss_strings)/sizeof(value_string))",
          "5790: #define NUM_GSM_DTAP_MSG_TP (sizeof(gsm_a_dtap_msg_tp_strings)/sizeof(value_string))",
          "",
          "[Added Lines]",
          "5428:     guint32 curr_offset;",
          "5429:     guint32 consumed;",
          "5430:     guint   curr_len;",
          "5432:     curr_offset = offset;",
          "5433:     curr_len = len;",
          "5435:     is_uplink = IS_UPLINK_TRUE;",
          "5437:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_CP_CAUSE, NULL);",
          "5439:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5445:     guint32 curr_offset;",
          "5446:     guint32 consumed;",
          "5447:     guint   curr_len;",
          "5449:     curr_len = len;",
          "5450:     curr_offset = offset;",
          "5452:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_SUB_CHANNEL, NULL);",
          "5454:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5460:     guint32 curr_offset;",
          "5461:     guint32 consumed;",
          "5462:     guint   curr_len;",
          "5464:     curr_len = len;",
          "5465:     curr_offset = offset;",
          "5467:     if (curr_len)",
          "5468:         ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_ACK, NULL);",
          "5470:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5476:     guint32 curr_offset;",
          "5477:     guint32 consumed;",
          "5478:     guint   curr_len;",
          "5480:     curr_len = len;",
          "5481:     curr_offset = offset;",
          "5483:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_LOOP_TYPE, NULL);",
          "5485:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5491:     guint32 curr_offset;",
          "5492:     guint32 consumed;",
          "5493:     guint   curr_len;",
          "5495:     curr_len = len;",
          "5496:     curr_offset = offset;",
          "5498:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_LOOP_ACK, NULL);",
          "5500:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5506:     guint32 curr_offset;",
          "5507:     guint32 consumed;",
          "5508:     guint   curr_len;",
          "5510:     curr_len = len;",
          "5511:     curr_offset = offset;",
          "5513:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_TESTED_DEVICE, NULL);",
          "5515:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5521:     guint32 curr_offset;",
          "5522:     guint32 consumed;",
          "5523:     guint   curr_len;",
          "5525:     curr_len = len;",
          "5526:     curr_offset = offset;",
          "5528:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_PDU_DESCRIPTION, NULL);",
          "5530:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_MODE_FLAG, NULL);",
          "5532:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5538:     guint32 curr_offset;",
          "5539:     guint32 consumed;",
          "5540:     guint   curr_len;",
          "5542:     curr_len = len;",
          "5543:     curr_offset = offset;",
          "5545:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EGPRS_MODE_FLAG, NULL);",
          "5547:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5553:     guint32 curr_offset;",
          "5554:     guint32 consumed;",
          "5555:     guint   curr_len;",
          "5557:     curr_len = len;",
          "5558:     curr_offset = offset;",
          "5560:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_MS_POSITIONING_TECHNOLOGY, NULL);",
          "5562:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5568:     guint32 curr_offset;",
          "5569:     guint32 consumed;",
          "5570:     guint   curr_len;",
          "5572:     curr_len = len;",
          "5573:     curr_offset = offset;",
          "5575:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_UE_TEST_LOOP_MODE, NULL);",
          "5577:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5583:     guint32 curr_offset;",
          "5584:     guint32 consumed;",
          "5585:     guint   curr_len;",
          "5587:     curr_len = len;",
          "5588:     curr_offset = offset;",
          "5590:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_UE_POSITIONING_TECHNOLOGY, NULL);",
          "5592:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5598:     guint32 curr_offset;",
          "5599:     guint32 consumed;",
          "5600:     guint   curr_len;",
          "5602:     curr_len = len;",
          "5603:     curr_offset = offset;",
          "5605:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_RLC_SDU_COUNTER_VALUE, NULL);",
          "5607:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5613:     guint32 curr_offset;",
          "5614:     guint32 consumed;",
          "5615:     guint   curr_len;",
          "5617:     curr_len = len;",
          "5618:     curr_offset = offset;",
          "5620:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TEST_LOOP_MODE, NULL);",
          "5622:     switch (epc_test_loop_mode)",
          "5623:     {",
          "5624:     case 0:",
          "5625:         ELEM_MAND_LV(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_A_LB_SETUP, NULL);",
          "5626:         break;",
          "5627:     case 1:",
          "5628:         ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_B_LB_SETUP, NULL);",
          "5629:         break;",
          "5630:     case 2:",
          "5631:         ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TL_C_SETUP, NULL);",
          "5632:         break;",
          "5633:     default:",
          "5634:         break;",
          "5635:     }",
          "5637:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5643:     guint32 curr_offset;",
          "5644:     guint32 consumed;",
          "5645:     guint   curr_len;",
          "5647:     curr_len = len;",
          "5648:     curr_offset = offset;",
          "5650:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_TEST_LOOP_MODE, NULL);",
          "5652:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5658:     guint32 curr_offset;",
          "5659:     guint32 consumed;",
          "5660:     guint   curr_len;",
          "5662:     curr_len = len;",
          "5663:     curr_offset = offset;",
          "5665:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_UE_POSITIONING_TECHNOLOGY, NULL);",
          "5667:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5673:     guint32 curr_offset;",
          "5674:     guint32 consumed;",
          "5675:     guint   curr_len;",
          "5677:     curr_len = len;",
          "5678:     curr_offset = offset;",
          "5680:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_MBMS_PACKET_COUNTER_VALUE, NULL);",
          "5682:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5687:     guint32 curr_offset;",
          "5688:     guint32 consumed;",
          "5689:     guint   curr_len;",
          "5691:     curr_len = len;",
          "5692:     curr_offset = offset;",
          "5694:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_ELLIPSOID_POINT_WITH_ALT, NULL);",
          "5696:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_HORIZONTAL_VELOCITY, NULL);",
          "5698:     ELEM_MAND_V(GSM_A_PDU_TYPE_DTAP, DE_TP_EPC_GNSS_TOD_MSEC, NULL);",
          "5700:     EXTRANEOUS_DATA_CHECK(curr_len, 0);",
          "5703: #define NUM_GSM_DTAP_MSG_MM (sizeof(gsm_a_dtap_msg_mm_strings)/sizeof(value_string))",
          "5732: #define NUM_GSM_DTAP_MSG_CC (sizeof(gsm_a_dtap_msg_cc_strings)/sizeof(value_string))",
          "5773: #define NUM_GSM_DTAP_MSG_SMS (sizeof(gsm_a_dtap_msg_sms_strings)/sizeof(value_string))",
          "5782: #define NUM_GSM_DTAP_MSG_SS (sizeof(gsm_a_dtap_msg_ss_strings)/sizeof(value_string))",
          "5791: #define NUM_GSM_DTAP_MSG_TP (sizeof(gsm_a_dtap_msg_tp_strings)/sizeof(value_string))",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "5837: static void",
          "5838: dissect_dtap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "5839: {",
          "6124: }",
          "",
          "[Removed Lines]",
          "5840:  static gsm_a_tap_rec_t tap_rec[4];",
          "5841:  static gsm_a_tap_rec_t *tap_p;",
          "5842:  static guint            tap_current = 0;",
          "5844:  void  (*dtap_msg_fcn)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len);",
          "5846:  guint8       oct;",
          "5847:  guint8       pd;",
          "5848:  guint32       offset;",
          "5849:  guint32       len;",
          "5850:  guint32       oct_1;",
          "5851:  gint       idx;",
          "5852:  proto_item   *dtap_item   = NULL;",
          "5853:  proto_tree   *dtap_tree   = NULL;",
          "5854:  proto_item   *oct_1_item  = NULL;",
          "5855:  proto_tree   *pd_tree     = NULL;",
          "5856:  const gchar  *msg_str;",
          "5857:  gint       ett_tree;",
          "5858:  gint       ti;",
          "5859:  int       hf_idx;",
          "5860:  gboolean      nsd;",
          "5863:  len = tvb_length(tvb);",
          "5865:  if (len < 2)",
          "5866:  {",
          "5870:   call_dissector(data_handle, tvb, pinfo, tree);",
          "5871:   return;",
          "5872:  }",
          "5874:  col_append_str(pinfo->cinfo, COL_INFO, \"(DTAP) \");",
          "5879:  tap_current++;",
          "5880:  if (tap_current >= 4)",
          "5881:  {",
          "5882:   tap_current = 0;",
          "5883:  }",
          "5884:  tap_p = &tap_rec[tap_current];",
          "5887:  offset = 0;",
          "5889:  g_tree = tree;",
          "5894:  oct_1 = tvb_get_guint8(tvb, offset++);",
          "5896:  if ((((oct_1 & DTAP_TI_MASK) >> 4) & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "5897:  {",
          "5903:   offset++;",
          "5904:  }",
          "5906:  oct = tvb_get_guint8(tvb, offset);",
          "5908:  pd = oct_1 & DTAP_PD_MASK;",
          "5909:  ti = -1;",
          "5910:  msg_str = NULL;",
          "5911:  ett_tree = -1;",
          "5912:  hf_idx = -1;",
          "5913:  dtap_msg_fcn = NULL;",
          "5914:  nsd = FALSE;",
          "5915:  col_append_fstr(pinfo->cinfo, COL_INFO, \"(%s) \",val_to_str_const(pd,gsm_a_pd_short_str_vals,\"unknown\"));",
          "5922:  switch (pd)",
          "5923:  {",
          "5924:  case 3:",
          "5925:   msg_str = try_val_to_str_idx((guint32) (oct & DTAP_CC_IEI_MASK), gsm_a_dtap_msg_cc_strings, &idx);",
          "5926:   if (msg_str != NULL)",
          "5927:   {",
          "5928:    ett_tree = ett_gsm_dtap_msg_cc[idx];",
          "5929:    dtap_msg_fcn = dtap_msg_cc_fcn[idx];",
          "5930:   }",
          "5931:   hf_idx = hf_gsm_a_dtap_msg_cc_type;",
          "5932:   ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5933:   nsd = TRUE;",
          "5934:   break;",
          "5936:  case 5:",
          "5937:   msg_str = try_val_to_str_idx((guint32) (oct & DTAP_MM_IEI_MASK), gsm_a_dtap_msg_mm_strings, &idx);",
          "5938:   if (msg_str != NULL)",
          "5939:   {",
          "5940:    ett_tree = ett_gsm_dtap_msg_mm[idx];",
          "5941:    dtap_msg_fcn = dtap_msg_mm_fcn[idx];",
          "5942:   }",
          "5943:   hf_idx = hf_gsm_a_dtap_msg_mm_type;",
          "5944:   nsd = TRUE;",
          "5945:   break;",
          "5947:  case 6:",
          "5948:   get_rr_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5949:   break;",
          "5951:  case 8:",
          "5952:   get_gmm_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5953:   break;",
          "5955:  case 9:",
          "5956:   msg_str = try_val_to_str_idx((guint32) (oct & DTAP_SMS_IEI_MASK), gsm_a_dtap_msg_sms_strings, &idx);",
          "5957:   hf_idx = hf_gsm_a_dtap_msg_sms_type;",
          "5958:   if (msg_str != NULL)",
          "5959:   {",
          "5960:    ett_tree = ett_gsm_dtap_msg_sms[idx];",
          "5961:    dtap_msg_fcn = dtap_msg_sms_fcn[idx];",
          "5962:   }",
          "5963:   ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5964:   break;",
          "5966:  case 10:",
          "5967:   get_sm_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5968:   ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5969:   break;",
          "5971:  case 11:",
          "5972:   msg_str = try_val_to_str_idx((guint32) (oct & DTAP_SS_IEI_MASK), gsm_a_dtap_msg_ss_strings, &idx);",
          "5973:   hf_idx = hf_gsm_a_dtap_msg_ss_type;",
          "5974:   if (msg_str != NULL)",
          "5975:   {",
          "5976:    ett_tree = ett_gsm_dtap_msg_ss[idx];",
          "5977:    dtap_msg_fcn = dtap_msg_ss_fcn[idx];",
          "5978:   }",
          "5979:   ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5980:   nsd = TRUE;",
          "5981:   break;",
          "5983:  case 15:",
          "5984:   msg_str = try_val_to_str_idx((guint32) (oct & DTAP_TP_IEI_MASK), gsm_a_dtap_msg_tp_strings, &idx);",
          "5985:   hf_idx = hf_gsm_a_dtap_msg_tp_type;",
          "5986:   if (msg_str != NULL)",
          "5987:   {",
          "5988:    ett_tree = ett_gsm_dtap_msg_tp[idx];",
          "5989:    dtap_msg_fcn = dtap_msg_tp_fcn[idx];",
          "5990:   }",
          "5991:   nsd = TRUE;",
          "5992:   break;",
          "5994:  default:",
          "5996:   return;",
          "5997:  }",
          "5999:  sccp_msg = pinfo->sccp_info;",
          "6001:  if (sccp_msg && sccp_msg->data.co.assoc) {",
          "6002:   sccp_assoc = sccp_msg->data.co.assoc;",
          "6003:  } else {",
          "6004:   sccp_assoc = NULL;",
          "6005:   sccp_msg = NULL;",
          "6006:  }",
          "6011:  if (msg_str == NULL)",
          "6012:  {",
          "6013:   dtap_item =",
          "6014:    proto_tree_add_protocol_format(tree, proto_a_dtap, tvb, 0, len,",
          "6015:    \"GSM A-I/F DTAP - Unknown DTAP Message Type (0x%02x)\",",
          "6016:    oct);",
          "6018:   dtap_tree = proto_item_add_subtree(dtap_item, ett_dtap_msg);",
          "6020:   if (sccp_msg && !sccp_msg->data.co.label) {",
          "6021:    sccp_msg->data.co.label = wmem_strdup_printf(wmem_file_scope(), \"DTAP (0x%02x)\",oct);",
          "6022:   }",
          "6025:  }",
          "6026:  else",
          "6027:  {",
          "6028:   dtap_item =",
          "6029:    proto_tree_add_protocol_format(tree, proto_a_dtap, tvb, 0, -1,",
          "6030:     \"GSM A-I/F DTAP - %s\",",
          "6031:     msg_str);",
          "6033:   dtap_tree = proto_item_add_subtree(dtap_item, ett_tree);",
          "6035:   if (sccp_msg && !sccp_msg->data.co.label) {",
          "6036:    sccp_msg->data.co.label = wmem_strdup(wmem_file_scope(), msg_str);",
          "6037:   }",
          "6039:   col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", msg_str);",
          "6040:   col_set_fence(pinfo->cinfo, COL_INFO);",
          "6041:  }",
          "6043:  oct_1_item = proto_tree_add_uint(dtap_tree, hf_gsm_a_dtap_protocol_discriminator, tvb, 0, 1, pd);",
          "6044:  pd_tree = proto_item_add_subtree(oct_1_item, ett_dtap_oct_1);",
          "6046:  proto_tree_add_item(pd_tree, hf_gsm_a_L3_protocol_discriminator, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6048:  if (ti == -1)",
          "6049:  {",
          "6050:   proto_tree_add_item(pd_tree, hf_gsm_a_skip_ind, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6051:  }",
          "6052:  else",
          "6053:  {",
          "6055:   proto_tree_add_item(pd_tree, hf_gsm_a_dtap_ti_flag, tvb, 0, 1, ENC_NA);",
          "6057:   if ((ti & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "6058:   {",
          "6060:    proto_tree_add_uint_format_value(pd_tree, hf_gsm_a_dtap_tio, tvb, 0, 1,",
          "6061:                     oct_1, \"The TI value is given by the TIE in octet 2\");",
          "6062:   }",
          "6063:   else",
          "6064:   {",
          "6065:    proto_tree_add_item(pd_tree, hf_gsm_a_dtap_tio, tvb, 0, 1, ENC_NA);",
          "6066:   }",
          "6067:  }",
          "6069:  if ((ti != -1) &&",
          "6070:   (ti & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "6071:  {",
          "6072:   proto_tree_add_item(tree, hf_gsm_a_extension, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "6073:   proto_tree_add_item(pd_tree, hf_gsm_a_dtap_tie, tvb, 1, 1, ENC_NA);",
          "6074:  }",
          "6079:  if ((pinfo->p2p_dir == P2P_DIR_RECV) &&",
          "6080:   nsd)",
          "6081:  {",
          "6083:  }",
          "6092:  if((pd==5)||(pd==3)||(pd==10)){",
          "6093:   proto_tree_add_item(dtap_tree, hf_gsm_a_seq_no, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6094:  }",
          "6098:  proto_tree_add_item(dtap_tree, hf_idx, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6099:  offset++;",
          "6101:  tap_p->pdu_type = GSM_A_PDU_TYPE_DTAP;",
          "6102:  tap_p->message_type = (nsd ? (oct & 0x3f) : oct);",
          "6103:  tap_p->protocol_disc = (gsm_a_pd_str_e)pd;",
          "6105:  tap_queue_packet(gsm_a_tap, pinfo, tap_p);",
          "6107:  if (msg_str == NULL) return;",
          "6109:  if (offset >= len) return;",
          "6114:  if (dtap_msg_fcn == NULL)",
          "6115:  {",
          "6116:   proto_tree_add_text(dtap_tree,",
          "6117:    tvb, offset, len - offset,",
          "6118:    \"Message Elements\");",
          "6119:  }",
          "6120:  else",
          "6121:  {",
          "6122:   (*dtap_msg_fcn)(tvb, dtap_tree, pinfo, offset, len - offset);",
          "6123:  }",
          "",
          "[Added Lines]",
          "5841:     static gsm_a_tap_rec_t  tap_rec[4];",
          "5842:     static gsm_a_tap_rec_t *tap_p;",
          "5843:     static guint            tap_current = 0;",
          "5845:     void  (*dtap_msg_fcn)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len);",
          "5847:     guint8        oct;",
          "5848:     guint8        pd;",
          "5849:     guint32       offset;",
          "5850:     guint32       len;",
          "5851:     guint32       oct_1;",
          "5852:     gint          idx;",
          "5853:     proto_item   *dtap_item   = NULL;",
          "5854:     proto_tree   *dtap_tree   = NULL;",
          "5855:     proto_item   *oct_1_item  = NULL;",
          "5856:     proto_tree   *pd_tree     = NULL;",
          "5857:     const gchar  *msg_str;",
          "5858:     gint          ett_tree;",
          "5859:     gint          ti;",
          "5860:     int       hf_idx;",
          "5861:     gboolean      nsd;",
          "5864:     len = tvb_reported_length(tvb);",
          "5866:     if (len < 2)",
          "5867:     {",
          "5871:         call_dissector(data_handle, tvb, pinfo, tree);",
          "5872:         return;",
          "5873:     }",
          "5875:     col_append_str(pinfo->cinfo, COL_INFO, \"(DTAP) \");",
          "5880:     tap_current++;",
          "5881:     if (tap_current >= 4)",
          "5882:     {",
          "5883:         tap_current = 0;",
          "5884:     }",
          "5885:     tap_p = &tap_rec[tap_current];",
          "5888:     offset = 0;",
          "5890:     g_tree = tree;",
          "5895:     oct_1 = tvb_get_guint8(tvb, offset++);",
          "5897:     if ((((oct_1 & DTAP_TI_MASK) >> 4) & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "5898:     {",
          "5904:         offset++;",
          "5905:     }",
          "5907:     oct = tvb_get_guint8(tvb, offset);",
          "5909:     pd = oct_1 & DTAP_PD_MASK;",
          "5910:     ti = -1;",
          "5911:     msg_str = NULL;",
          "5912:     ett_tree = -1;",
          "5913:     hf_idx = -1;",
          "5914:     dtap_msg_fcn = NULL;",
          "5915:     nsd = FALSE;",
          "5916:     col_append_fstr(pinfo->cinfo, COL_INFO, \"(%s) \",val_to_str_const(pd,gsm_a_pd_short_str_vals,\"unknown\"));",
          "5923:     switch (pd)",
          "5924:     {",
          "5925:     case 3:",
          "5926:         msg_str = try_val_to_str_idx((guint32) (oct & DTAP_CC_IEI_MASK), gsm_a_dtap_msg_cc_strings, &idx);",
          "5927:         if (msg_str != NULL)",
          "5928:         {",
          "5929:             ett_tree = ett_gsm_dtap_msg_cc[idx];",
          "5930:             dtap_msg_fcn = dtap_msg_cc_fcn[idx];",
          "5931:         }",
          "5932:         hf_idx = hf_gsm_a_dtap_msg_cc_type;",
          "5933:         ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5934:         nsd = TRUE;",
          "5935:         break;",
          "5937:     case 5:",
          "5938:         msg_str = try_val_to_str_idx((guint32) (oct & DTAP_MM_IEI_MASK), gsm_a_dtap_msg_mm_strings, &idx);",
          "5939:         if (msg_str != NULL)",
          "5940:         {",
          "5941:             ett_tree = ett_gsm_dtap_msg_mm[idx];",
          "5942:             dtap_msg_fcn = dtap_msg_mm_fcn[idx];",
          "5943:         }",
          "5944:         hf_idx = hf_gsm_a_dtap_msg_mm_type;",
          "5945:         nsd = TRUE;",
          "5946:         break;",
          "5948:     case 6:",
          "5949:         get_rr_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5950:         break;",
          "5952:     case 8:",
          "5953:         get_gmm_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5954:         break;",
          "5956:     case 9:",
          "5957:         msg_str = try_val_to_str_idx((guint32) (oct & DTAP_SMS_IEI_MASK), gsm_a_dtap_msg_sms_strings, &idx);",
          "5958:         hf_idx = hf_gsm_a_dtap_msg_sms_type;",
          "5959:         if (msg_str != NULL)",
          "5960:         {",
          "5961:             ett_tree = ett_gsm_dtap_msg_sms[idx];",
          "5962:             dtap_msg_fcn = dtap_msg_sms_fcn[idx];",
          "5963:         }",
          "5964:         ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5965:         break;",
          "5967:     case 10:",
          "5968:         get_sm_msg_params(oct, &msg_str, &ett_tree, &hf_idx, &dtap_msg_fcn);",
          "5969:         ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5970:         break;",
          "5972:     case 11:",
          "5973:         msg_str = try_val_to_str_idx((guint32) (oct & DTAP_SS_IEI_MASK), gsm_a_dtap_msg_ss_strings, &idx);",
          "5974:         hf_idx = hf_gsm_a_dtap_msg_ss_type;",
          "5975:         if (msg_str != NULL)",
          "5976:         {",
          "5977:             ett_tree = ett_gsm_dtap_msg_ss[idx];",
          "5978:             dtap_msg_fcn = dtap_msg_ss_fcn[idx];",
          "5979:         }",
          "5980:         ti = (oct_1 & DTAP_TI_MASK) >> 4;",
          "5981:         nsd = TRUE;",
          "5982:         break;",
          "5984:     case 15:",
          "5985:         msg_str = try_val_to_str_idx((guint32) (oct & DTAP_TP_IEI_MASK), gsm_a_dtap_msg_tp_strings, &idx);",
          "5986:         hf_idx = hf_gsm_a_dtap_msg_tp_type;",
          "5987:         if (msg_str != NULL)",
          "5988:         {",
          "5989:             ett_tree = ett_gsm_dtap_msg_tp[idx];",
          "5990:             dtap_msg_fcn = dtap_msg_tp_fcn[idx];",
          "5991:         }",
          "5992:         nsd = TRUE;",
          "5993:         break;",
          "5995:     default:",
          "5997:         return;",
          "5998:     }",
          "6000:     sccp_msg = pinfo->sccp_info;",
          "6002:     if (sccp_msg && sccp_msg->data.co.assoc) {",
          "6003:         sccp_assoc = sccp_msg->data.co.assoc;",
          "6004:     }",
          "6005:     else",
          "6006:     {",
          "6007:         sccp_assoc = NULL;",
          "6008:         sccp_msg = NULL;",
          "6009:     }",
          "6014:     if (msg_str == NULL)",
          "6015:     {",
          "6016:         dtap_item =",
          "6017:             proto_tree_add_protocol_format(tree, proto_a_dtap, tvb, 0, len,",
          "6018:             \"GSM A-I/F DTAP - Unknown DTAP Message Type (0x%02x)\",",
          "6019:             oct);",
          "6021:         dtap_tree = proto_item_add_subtree(dtap_item, ett_dtap_msg);",
          "6023:         if (sccp_msg && !sccp_msg->data.co.label) {",
          "6024:             sccp_msg->data.co.label = wmem_strdup_printf(wmem_file_scope(), \"DTAP (0x%02x)\",oct);",
          "6025:         }",
          "6028:     }",
          "6029:     else",
          "6030:     {",
          "6031:         dtap_item =",
          "6032:             proto_tree_add_protocol_format(tree, proto_a_dtap, tvb, 0, -1,",
          "6033:                 \"GSM A-I/F DTAP - %s\",",
          "6034:                 msg_str);",
          "6036:         dtap_tree = proto_item_add_subtree(dtap_item, ett_tree);",
          "6038:         if (sccp_msg && !sccp_msg->data.co.label) {",
          "6039:             sccp_msg->data.co.label = wmem_strdup(wmem_file_scope(), msg_str);",
          "6040:         }",
          "6042:         col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", msg_str);",
          "6043:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "6044:     }",
          "6046:     oct_1_item = proto_tree_add_uint(dtap_tree, hf_gsm_a_dtap_protocol_discriminator, tvb, 0, 1, pd);",
          "6047:     pd_tree = proto_item_add_subtree(oct_1_item, ett_dtap_oct_1);",
          "6049:     proto_tree_add_item(pd_tree, hf_gsm_a_L3_protocol_discriminator, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6051:     if (ti == -1)",
          "6052:     {",
          "6053:         proto_tree_add_item(pd_tree, hf_gsm_a_skip_ind, tvb, 0, 1, ENC_BIG_ENDIAN);",
          "6054:     }",
          "6055:     else",
          "6056:     {",
          "6058:         proto_tree_add_item(pd_tree, hf_gsm_a_dtap_ti_flag, tvb, 0, 1, ENC_NA);",
          "6060:         if ((ti & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "6061:         {",
          "6063:             proto_tree_add_uint_format_value(pd_tree, hf_gsm_a_dtap_tio, tvb, 0, 1,",
          "6064:                 oct_1, \"The TI value is given by the TIE in octet 2\");",
          "6065:         }",
          "6066:         else",
          "6067:         {",
          "6068:             proto_tree_add_item(pd_tree, hf_gsm_a_dtap_tio, tvb, 0, 1, ENC_NA);",
          "6069:         }",
          "6070:     }",
          "6072:     if ((ti != -1) &&",
          "6073:         (ti & DTAP_TIE_PRES_MASK) == DTAP_TIE_PRES_MASK)",
          "6074:     {",
          "6075:         proto_tree_add_item(tree, hf_gsm_a_extension, tvb, 1, 1, ENC_BIG_ENDIAN);",
          "6076:         proto_tree_add_item(pd_tree, hf_gsm_a_dtap_tie, tvb, 1, 1, ENC_NA);",
          "6077:     }",
          "6082:     if ((pinfo->p2p_dir == P2P_DIR_RECV) &&",
          "6083:         nsd)",
          "6084:     {",
          "6086:     }",
          "6095:     if ((pd == 5) || (pd == 3) || (pd == 10)) {",
          "6096:         proto_tree_add_item(dtap_tree, hf_gsm_a_seq_no, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6097:     }",
          "6101:     proto_tree_add_item(dtap_tree, hf_idx, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6102:     offset++;",
          "6104:     tap_p->pdu_type = GSM_A_PDU_TYPE_DTAP;",
          "6105:     tap_p->message_type = (nsd ? (oct & 0x3f) : oct);",
          "6106:     tap_p->protocol_disc = (gsm_a_pd_str_e)pd;",
          "6108:     tap_queue_packet(gsm_a_tap, pinfo, tap_p);",
          "6110:     if (msg_str == NULL) return;",
          "6112:     if (offset >= len) return;",
          "6117:     if (dtap_msg_fcn == NULL)",
          "6118:     {",
          "6119:         proto_tree_add_text(dtap_tree,",
          "6120:             tvb, offset, len - offset,",
          "6121:             \"Message Elements\");",
          "6122:     }",
          "6123:     else",
          "6124:     {",
          "6125:         (*dtap_msg_fcn)(tvb, dtap_tree, pinfo, offset, len - offset);",
          "6126:     }",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "6128: void",
          "6129: proto_register_gsm_a_dtap(void)",
          "6130: {",
          "6714: #define NUM_INDIVIDUAL_ELEMS    21",
          "6805: }",
          "6807: void",
          "6808: proto_reg_handoff_gsm_a_dtap(void)",
          "6809: {",
          "6823: }",
          "",
          "[Removed Lines]",
          "6131:  guint i;",
          "6132:  guint last_offset;",
          "6136:  static hf_register_info hf[] =",
          "6137:  {",
          "6138:  { &hf_gsm_a_seq_no,",
          "6139:   { \"Sequence number\", \"gsm_a.dtap.seq_no\",",
          "6140:   FT_UINT8, BASE_DEC, NULL, 0xc0,",
          "6141:   NULL, HFILL }",
          "6142:  },",
          "6143:  { &hf_gsm_a_dtap_msg_mm_type,",
          "6144:   { \"DTAP Mobility Management Message Type\", \"gsm_a.dtap.msg_mm_type\",",
          "6145:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_mm_strings), 0x3f,",
          "6146:   NULL, HFILL }",
          "6147:  },",
          "6148:  { &hf_gsm_a_dtap_msg_cc_type,",
          "6149:   { \"DTAP Call Control Message Type\", \"gsm_a.dtap.msg_cc_type\",",
          "6150:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_cc_strings), 0x3f,",
          "6151:   NULL, HFILL }",
          "6152:  },",
          "6153:  { &hf_gsm_a_dtap_msg_sms_type,",
          "6154:   { \"DTAP Short Message Service Message Type\", \"gsm_a.dtap.msg_sms_type\",",
          "6155:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_sms_strings), 0x0,",
          "6156:   NULL, HFILL }",
          "6157:  },",
          "6158:  { &hf_gsm_a_dtap_msg_ss_type,",
          "6159:   { \"DTAP Non call Supplementary Service Message Type\", \"gsm_a.dtap.msg_ss_type\",",
          "6160:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_ss_strings), 0x3f,",
          "6161:   NULL, HFILL }",
          "6162:  },",
          "6163:  { &hf_gsm_a_dtap_msg_tp_type,",
          "6164:   { \"DTAP Tests Procedures Message Type\", \"gsm_a.dtap.msg_tp_type\",",
          "6165:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_tp_strings), 0x0,",
          "6166:   NULL, HFILL }",
          "6167:  },",
          "6168:  { &hf_gsm_a_dtap_elem_id,",
          "6169:   { \"Element ID\", \"gsm_a.dtap.elem_id\",",
          "6170:   FT_UINT8, BASE_HEX, NULL, 0,",
          "6171:   NULL, HFILL }",
          "6172:  },",
          "6173:  { &hf_gsm_a_dtap_cld_party_bcd_num,",
          "6174:   { \"Called Party BCD Number\", \"gsm_a.dtap.cld_party_bcd_num\",",
          "6175:   FT_STRING, BASE_NONE, 0, 0,",
          "6176:   NULL, HFILL }",
          "6177:  },",
          "6178:  { &hf_gsm_a_dtap_clg_party_bcd_num,",
          "6179:   { \"Calling Party BCD Number\", \"gsm_a.dtap.clg_party_bcd_num\",",
          "6180:   FT_STRING, BASE_NONE, 0, 0,",
          "6181:   NULL, HFILL }",
          "6182:  },",
          "6183:  { &hf_gsm_a_dtap_conn_num,",
          "6184:   { \"Connected Number\", \"gsm_a.dtap.conn_num\",",
          "6185:   FT_STRING, BASE_NONE, 0, 0,",
          "6186:   NULL, HFILL }",
          "6187:  },",
          "6188:  { &hf_gsm_a_dtap_red_party_bcd_num,",
          "6189:   { \"Redirecting Party BCD Number\", \"gsm_a.dtap.red_party_bcd_num\",",
          "6190:   FT_STRING, BASE_NONE, 0, 0,",
          "6191:   NULL, HFILL }",
          "6192:  },",
          "6193:  { &hf_gsm_a_dtap_cause,",
          "6194:   { \"DTAP Cause\", \"gsm_a.dtap.cause\",",
          "6195:   FT_UINT8, BASE_HEX, 0, 0x7f,",
          "6196:   NULL, HFILL }",
          "6197:  },",
          "6198:  { &hf_gsm_a_dtap_type_of_number,",
          "6199:   { \"Type of number\", \"gsm_a.dtap.type_of_number\",",
          "6200:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_type_of_number_values), 0x70,",
          "6201:   NULL, HFILL }",
          "6202:  },",
          "6203:  { &hf_gsm_a_dtap_numbering_plan_id,",
          "6204:   { \"Numbering plan identification\", \"gsm_a.dtap.numbering_plan_id\",",
          "6205:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_numbering_plan_id_values), 0x0f,",
          "6206:   NULL, HFILL }",
          "6207:  },",
          "6208:  { &hf_gsm_a_dtap_present_ind,",
          "6209:   { \"Presentation indicator\", \"gsm_a.dtap.present_ind\",",
          "6210:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_present_ind_values), 0x60,",
          "6211:   NULL, HFILL }",
          "6212:  },",
          "6213:  { &hf_gsm_a_dtap_screening_ind,",
          "6214:   { \"Screening indicator\", \"gsm_a.dtap.screening_ind\",",
          "6215:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_screening_ind_values), 0x03,",
          "6216:   NULL, HFILL }",
          "6217:  },",
          "6218:  { &hf_gsm_a_dtap_type_of_sub_addr,",
          "6219:   { \"Type of subaddress\", \"gsm_a.dtap.type_of_sub_addr\",",
          "6220:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_type_of_sub_addr_values), 0x70,",
          "6221:   NULL, HFILL }",
          "6222:  },",
          "6223:  { &hf_gsm_a_dtap_odd_even_ind,",
          "6224:   { \"Odd/even indicator\", \"gsm_a.dtap.odd_even_ind\",",
          "6225:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_odd_even_ind_values), 0x08,",
          "6226:   NULL, HFILL }",
          "6227:  },",
          "6228:  { &hf_gsm_a_dtap_lsa_id,",
          "6229:   { \"LSA Identifier\", \"gsm_a.dtap.lsa_id\",",
          "6230:   FT_UINT24, BASE_HEX, NULL, 0x0,",
          "6231:   NULL, HFILL }",
          "6232:  },",
          "6233:  { &hf_gsm_a_dtap_speech_vers_ind,",
          "6234:   { \"Speech version indication\", \"gsm_a.dtap.speech_vers_ind\",",
          "6235:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_speech_vers_ind_values), 0x0f,",
          "6236:   NULL, HFILL }",
          "6237:  },",
          "6238:  { &hf_gsm_a_dtap_itc,",
          "6239:   { \"Information transfer capability\", \"gsm_a.dtap.itc\",",
          "6240:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_itc_values), 0x07,",
          "6241:   NULL, HFILL }",
          "6242:  },",
          "6243:  { &hf_gsm_a_dtap_sysid,",
          "6244:   { \"System Identification (SysID)\", \"gsm_a.dtap.sysid\",",
          "6245:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_sysid_values), 0x0,",
          "6246:   NULL, HFILL }",
          "6247:  },",
          "6248:  { &hf_gsm_a_dtap_bitmap_length,",
          "6249:   { \"Bitmap Length\", \"gsm_a.dtap.bitmap_length\",",
          "6250:   FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6251:   NULL, HFILL }",
          "6252:  },",
          "6253:  { &hf_gsm_a_dtap_serv_cat_b7,",
          "6254:   { \"Automatically initiated eCall\", \"gsm_a.dtap.serv_cat_b7\",",
          "6255:   FT_BOOLEAN, 8, NULL, 0x40,",
          "6256:   NULL, HFILL }",
          "6257:  },",
          "6258:  { &hf_gsm_a_dtap_serv_cat_b6,",
          "6259:   { \"Manually initiated eCall\", \"gsm_a.dtap.serv_cat_b6\",",
          "6260:   FT_BOOLEAN, 8, NULL, 0x20,",
          "6261:   NULL, HFILL }",
          "6262:  },",
          "6263:  { &hf_gsm_a_dtap_serv_cat_b5,",
          "6264:   { \"Mountain Rescue\", \"gsm_a.dtap.serv_cat_b5\",",
          "6265:   FT_BOOLEAN, 8, NULL, 0x10,",
          "6266:   NULL, HFILL }",
          "6267:  },",
          "6268:  { &hf_gsm_a_dtap_serv_cat_b4,",
          "6269:   { \"Marine Guard\", \"gsm_a.dtap.serv_cat_b4\",",
          "6270:   FT_BOOLEAN, 8, NULL, 0x08,",
          "6271:   NULL, HFILL }",
          "6272:  },",
          "6273:  { &hf_gsm_a_dtap_serv_cat_b3,",
          "6274:   { \"Fire Brigade\", \"gsm_a.dtap.serv_cat_b3\",",
          "6275:   FT_BOOLEAN, 8, NULL, 0x04,",
          "6276:   NULL, HFILL }",
          "6277:  },",
          "6278:  { &hf_gsm_a_dtap_serv_cat_b2,",
          "6279:   { \"Ambulance\", \"gsm_a.dtap.serv_cat_b2\",",
          "6280:   FT_BOOLEAN, 8, NULL, 0x02,",
          "6281:   NULL, HFILL }",
          "6282:  },",
          "6283:  { &hf_gsm_a_dtap_serv_cat_b1,",
          "6284:   { \"Police\", \"gsm_a.dtap.serv_cat_b1\",",
          "6285:   FT_BOOLEAN, 8, NULL, 0x01,",
          "6286:   NULL, HFILL }",
          "6287:  },",
          "6288:  { &hf_gsm_a_dtap_csmo,",
          "6289:   { \"CSMO\", \"gsm_a.dtap.csmo\",",
          "6290:   FT_BOOLEAN, BASE_NONE, TFS(&gsm_a_dtap_csmo_value), 0x0,",
          "6291:   NULL, HFILL }",
          "6292:  },",
          "6293:  { &hf_gsm_a_dtap_csmt,",
          "6294:   { \"CSMT\", \"gsm_a.dtap.csmt\",",
          "6295:   FT_BOOLEAN, BASE_NONE, TFS(&gsm_a_dtap_csmt_value), 0x0,",
          "6296:   NULL, HFILL }",
          "6297:  },",
          "6298:  { &hf_gsm_a_dtap_mm_timer_unit,",
          "6299:   { \"Unit\", \"gsm_a.dtap.mm_timer_unit\",",
          "6300:   FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_mm_timer_unit_vals), 0xe0,",
          "6301:   NULL, HFILL }",
          "6302:  },",
          "6303:  { &hf_gsm_a_dtap_mm_timer_value,",
          "6304:   { \"Timer value\", \"gsm_a.dtap.mm_timer_value\",",
          "6305:   FT_UINT8, BASE_DEC, NULL, 0x1f,",
          "6306:   NULL, HFILL }",
          "6307:  },",
          "6308:  { &hf_gsm_a_dtap_alerting_pattern,",
          "6309:   { \"Alerting Pattern\", \"gsm_a.dtap.alerting_pattern\",",
          "6310:   FT_UINT8, BASE_DEC, VALS(gsm_a_alerting_pattern_vals), 0x0f,",
          "6311:   NULL, HFILL }",
          "6312:  },",
          "6313:  { &hf_gsm_a_dtap_ccbs_activation,",
          "6314:   { \"CCBS Activation\", \"gsm_a.dtap.ccbs_activation\",",
          "6315:   FT_BOOLEAN, 8, TFS(&gsm_a_ccbs_activation_value), 0x80,",
          "6316:   NULL, HFILL }",
          "6317:  },",
          "6318:  { &hf_gsm_a_dtap_stream_identifier,",
          "6319:   { \"Stream Identifier\", \"gsm_a.dtap.stream_identifier\",",
          "6320:   FT_UINT8, BASE_HEX, 0, 0x0,",
          "6321:   NULL, HFILL }",
          "6322:  },",
          "6323:  { &hf_gsm_a_dtap_mcs,",
          "6324:   { \"MCS\", \"gsm_a.dtap.mcs\",",
          "6325:   FT_BOOLEAN, 8, TFS(&gsm_a_mcs_value), 0x01,",
          "6326:   NULL, HFILL }",
          "6327:  },",
          "6328:  { &hf_gsm_a_dtap_cause_of_no_cli,",
          "6329:   { \"Cause of no CLI\", \"gsm_a.dtap.cause_of_no_cli\",",
          "6330:   FT_UINT8, BASE_HEX, 0, 0x0,",
          "6331:   NULL, HFILL }",
          "6332:  },",
          "6333:  { &hf_gsm_a_dtap_cause_ss_diagnostics,",
          "6334:   { \"Supplementary Services Diagnostics\", \"gsm_a.dtap.cause_ss_diagnostics\",",
          "6335:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_cause_ss_diagnostics_vals), 0x7f,",
          "6336:   NULL, HFILL }",
          "6337:  },",
          "6338:  { &hf_gsm_a_dtap_codec_tdma_efr,",
          "6339:   { \"TDMA EFR\", \"gsm_a.dtap.codec.tdma_efr\",",
          "6340:   FT_BOOLEAN, 8, NULL, 0x80,",
          "6341:   NULL, HFILL }",
          "6342:  },",
          "6343:  { &hf_gsm_a_dtap_codec_umts_amr_2,",
          "6344:   { \"UMTS AMR 2\", \"gsm_a.dtap.codec.umts_amr_2\",",
          "6345:   FT_BOOLEAN, 8, NULL, 0x40,",
          "6346:   NULL, HFILL }",
          "6347:  },",
          "6348:  { &hf_gsm_a_dtap_codec_umts_amr,",
          "6349:   { \"UMTS AMR\", \"gsm_a.dtap.codec.umts_amr\",",
          "6350:   FT_BOOLEAN, 8, NULL, 0x20,",
          "6351:   NULL, HFILL }",
          "6352:  },",
          "6353:  { &hf_gsm_a_dtap_codec_hr_amr,",
          "6354:   { \"HR AMR\", \"gsm_a.dtap.codec.hr_amr\",",
          "6355:   FT_BOOLEAN, 8, NULL, 0x10,",
          "6356:   NULL, HFILL }",
          "6357:  },",
          "6358:  { &hf_gsm_a_dtap_codec_fr_amr,",
          "6359:   { \"FR AMR\", \"gsm_a.dtap.codec.fr_amr\",",
          "6360:   FT_BOOLEAN, 8, NULL, 0x08,",
          "6361:   NULL, HFILL }",
          "6362:  },",
          "6363:  { &hf_gsm_a_dtap_codec_gsm_efr,",
          "6364:   { \"GSM EFR\", \"gsm_a.dtap.codec.gsm_efr\",",
          "6365:   FT_BOOLEAN, 8, NULL, 0x04,",
          "6366:   NULL, HFILL }",
          "6367:  },",
          "6368:  { &hf_gsm_a_dtap_codec_gsm_hr,",
          "6369:   { \"GSM HR\", \"gsm_a.dtap.codec.gsm_hr\",",
          "6370:   FT_BOOLEAN, 8, NULL, 0x02,",
          "6371:   NULL, HFILL }",
          "6372:  },",
          "6373:  { &hf_gsm_a_dtap_codec_gsm_fr,",
          "6374:   { \"GSM FR\", \"gsm_a.dtap.codec.gsm_fr\",",
          "6375:   FT_BOOLEAN, 8, NULL, 0x01,",
          "6376:   NULL, HFILL }",
          "6377:  },",
          "6378:  { &hf_gsm_a_dtap_codec_ohr_amr_wb,",
          "6379:   { \"OHR AMR-WB\", \"gsm_a.dtap.codec.ohr_amr_wb\",",
          "6380:   FT_BOOLEAN, 8, NULL, 0x20,",
          "6381:   NULL, HFILL }",
          "6382:  },",
          "6383:  { &hf_gsm_a_dtap_codec_ofr_amr_wb,",
          "6384:   { \"OFR AMR-WB\", \"gsm_a.dtap.codec.ofr_amr_wb\",",
          "6385:   FT_BOOLEAN, 8, NULL, 0x10,",
          "6386:   NULL, HFILL }",
          "6387:  },",
          "6388:  { &hf_gsm_a_dtap_codec_ohr_amr,",
          "6389:   { \"OHR AMR\", \"gsm_a.dtap.codec.ohr_amr\",",
          "6390:   FT_BOOLEAN, 8, NULL, 0x08,",
          "6391:   NULL, HFILL }",
          "6392:  },",
          "6393:  { &hf_gsm_a_dtap_codec_umts_amr_wb,",
          "6394:   { \"UMTS AMR-WB\", \"gsm_a.dtap.codec.umts_amr_wb\",",
          "6395:   FT_BOOLEAN, 8, NULL, 0x04,",
          "6396:   NULL, HFILL }",
          "6397:  },",
          "6398:  { &hf_gsm_a_dtap_codec_fr_amr_wb,",
          "6399:   { \"FR AMR-WB\", \"gsm_a.dtap.codec.fr_amr_wb\",",
          "6400:   FT_BOOLEAN, 8, NULL, 0x02,",
          "6401:   NULL, HFILL }",
          "6402:  },",
          "6403:  { &hf_gsm_a_dtap_codec_pdc_efr,",
          "6404:   { \"PDC EFR\", \"gsm_a.dtap.codec.pdc_efr\",",
          "6405:   FT_BOOLEAN, 8, NULL, 0x01,",
          "6406:   NULL, HFILL }",
          "6407:  },",
          "6408:  { &hf_gsm_a_dtap_notification_description,",
          "6409:   { \"Notification description\", \"gsm_a.dtap.notif_descr\",",
          "6410:   FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_notification_description_vals), 0x7f,",
          "6411:   NULL, HFILL }",
          "6412:  },",
          "6413:  { &hf_gsm_a_dtap_emerg_num_info_length,",
          "6414:   { \"Emergency Number Info length\", \"gsm_a.dtap.emerg_num_info_length\",",
          "6415:   FT_UINT8, BASE_DEC, 0, 0x0,",
          "6416:   NULL, HFILL }",
          "6417:  },",
          "6418:  { &hf_gsm_a_dtap_emergency_bcd_num,",
          "6419:   { \"Emergency BCD Number\", \"gsm_a.dtap.emergency_bcd_num\",",
          "6420:   FT_STRING, BASE_NONE, 0, 0,",
          "6421:   NULL, HFILL }",
          "6422:  },",
          "6423:  { &hf_gsm_a_dtap_signal_value,",
          "6424:   { \"Signal value\", \"gsm_a.dtap.signal_value\",",
          "6425:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_signal_value_vals), 0x0,",
          "6426:   NULL, HFILL }",
          "6427:  },",
          "6428:  { &hf_gsm_a_dtap_recall_type,",
          "6429:   { \"Recall type\", \"gsm_a.dtap.recall_type\",",
          "6430:   FT_UINT8, BASE_HEX|BASE_RANGE_STRING, RVALS(gsm_a_dtap_recall_type_vals), 0x07,",
          "6431:   NULL, HFILL }",
          "6432:  },",
          "6433:  { &hf_gsm_a_dtap_coding_standard,",
          "6434:   { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6435:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_coding_standard_vals), 0xc0,",
          "6436:   NULL, HFILL }",
          "6437:  },",
          "6438:  { &hf_gsm_a_dtap_call_state,",
          "6439:   { \"Call state\", \"gsm_a.dtap.call_state\",",
          "6440:   FT_UINT8, BASE_DEC, NULL, 0x3f,",
          "6441:   NULL, HFILL }",
          "6442:  },",
          "6443:  { &hf_gsm_a_dtap_prog_coding_standard,",
          "6444:   { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6445:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_coding_standard_vals), 0x60,",
          "6446:   NULL, HFILL }",
          "6447:  },",
          "6448:  { &hf_gsm_a_dtap_location,",
          "6449:   { \"Location\", \"gsm_a.dtap.location\",",
          "6450:   FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_location_vals), 0x0f,",
          "6451:   NULL, HFILL }",
          "6452:  },",
          "6453:  { &hf_gsm_a_dtap_progress_description,",
          "6454:   { \"Progress description\", \"gsm_a.dtap.progress_description\",",
          "6455:   FT_UINT8, BASE_DEC, NULL, 0x7f,",
          "6456:   NULL, HFILL }",
          "6457:  },",
          "6458:  { &hf_gsm_a_dtap_afi,",
          "6459:   { \"Authority and Format Identifier\", \"gsm_a.dtap.afi\",",
          "6460:   FT_UINT8, BASE_HEX|BASE_EXT_STRING, &x213_afi_value_ext, 0x0,",
          "6461:   NULL, HFILL }",
          "6462:  },",
          "6463:  { &hf_gsm_a_dtap_rej_cause,",
          "6464:   { \"Reject cause\", \"gsm_a.dtap.rej_cause\",",
          "6465:   FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6466:   NULL, HFILL }",
          "6467:  },",
          "6468:  { &hf_gsm_a_dtap_u2u_prot_discr,",
          "6469:   { \"User-user protocol discriminator\", \"gsm_a.dtap.u2u_prot_discr\",",
          "6470:   FT_UINT8, BASE_HEX|BASE_RANGE_STRING, RVALS(gsm_a_dtap_u2u_prot_discr_vals), 0x00,",
          "6471:   NULL, HFILL }",
          "6472:  },",
          "6473:  { &hf_gsm_a_dtap_mcat,",
          "6474:   { \"MCAT\", \"gsm_a.dtap.mcat\",",
          "6475:   FT_BOOLEAN, 8, TFS(&gsm_a_dtap_mcat_value), 0x08,",
          "6476:   NULL, HFILL }",
          "6477:  },",
          "6478:  { &hf_gsm_a_dtap_enicm,",
          "6479:   { \"ENICM\", \"gsm_a.dtap.mcat\",",
          "6480:   FT_BOOLEAN, 8, TFS(&gsm_a_dtap_enicm_value), 0x04,",
          "6481:   NULL, HFILL }",
          "6482:  },",
          "6483:  { &hf_gsm_a_dtap_rand,",
          "6484:   { \"RAND value\", \"gsm_a.dtap.rand\",",
          "6485:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6486:   NULL, HFILL }",
          "6487:  },",
          "6488:  { &hf_gsm_a_dtap_autn,",
          "6489:   { \"AUTN value\", \"gsm_a.dtap.autn\",",
          "6490:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6491:   NULL, HFILL }",
          "6492:  },",
          "6493:  { &hf_gsm_a_dtap_sres,",
          "6494:   { \"SRES value\", \"gsm_a.dtap.sres\",",
          "6495:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6496:   NULL, HFILL }",
          "6497:  },",
          "6498:  { &hf_gsm_a_dtap_xres,",
          "6499:   { \"XRES value\", \"gsm_a.dtap.xres\",",
          "6500:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6501:   NULL, HFILL }",
          "6502:  },",
          "6503:  { &hf_gsm_a_dtap_auts,",
          "6504:   { \"AUTS value\", \"gsm_a.dtap.auts\",",
          "6505:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6506:   NULL, HFILL }",
          "6507:  },",
          "6508:  { &hf_gsm_a_dtap_autn_sqn_xor_ak,",
          "6509:   { \"SQN xor AK\", \"gsm_a.dtap.autn.sqn_xor_ak\",",
          "6510:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6511:   NULL, HFILL }",
          "6512:  },",
          "6513:  { &hf_gsm_a_dtap_autn_amf,",
          "6514:   { \"AMF\", \"gsm_a.dtap.autn.amf\",",
          "6515:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6516:   NULL, HFILL }",
          "6517:  },",
          "6518:  { &hf_gsm_a_dtap_autn_mac,",
          "6519:   { \"MAC\", \"gsm_a.dtap.autn.mac\",",
          "6520:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6521:   NULL, HFILL }",
          "6522:  },",
          "6523:  { &hf_gsm_a_dtap_auts_sqn_ms_xor_ak,",
          "6524:   { \"SQN_MS xor AK\", \"gsm_a.dtap.auts.sqn_ms_xor_ak\",",
          "6525:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6526:   NULL, HFILL }",
          "6527:  },",
          "6528:  { &hf_gsm_a_dtap_auts_mac_s,",
          "6529:   { \"MAC-S\", \"gsm_a.dtap.auts.mac_s\",",
          "6530:   FT_BYTES, FT_NONE, NULL, 0x00,",
          "6531:   NULL, HFILL }",
          "6532:  },",
          "6533:  { &hf_gsm_a_dtap_epc_ue_tl_mode,",
          "6534:   { \"UE test loop mode\",\"gsm_a.dtap.epc.ue_tl_mode\",",
          "6535:   FT_UINT8,BASE_DEC, VALS(epc_ue_test_loop_mode_vals), 0x0,",
          "6536:   NULL, HFILL }",
          "6537:  },",
          "6538:  { &hf_gsm_a_dtap_epc_ue_tl_a_ul_sdu_size,",
          "6539:   { \"Uplink PDCP SDU size in bits\",\"gsm_a.dtap.epc.ue_tl_a_ul_sdu_size\",",
          "6540:   FT_UINT16,BASE_DEC, NULL, 0x0,",
          "6541:   NULL, HFILL }",
          "6542:  },",
          "6543:  { &hf_gsm_a_dtap_epc_ue_tl_a_drb,",
          "6544:   { \"Data Radio Bearer identity number\",\"gsm_a.dtap.epc.ue_tl_a_drb\",",
          "6545:   FT_UINT8,BASE_DEC, NULL, 0x1f,",
          "6546:   NULL, HFILL }",
          "6547:  },",
          "6548:  { &hf_gsm_a_dtap_epc_ue_tl_b_ip_pdu_delay,",
          "6549:   { \"IP PDU delay in seconds\",\"gsm_a.dtap.epc.ue_tl_b_ip_pdu_delay\",",
          "6550:   FT_UINT8,BASE_DEC, NULL, 0x0,",
          "6551:   NULL, HFILL }",
          "6552:  },",
          "6553:  { &hf_gsm_a_dtap_epc_ue_tl_c_mbsfn_area_id,",
          "6554:   { \"MBSFN area identity\",\"gsm_a.dtap.epc.ue_tl_c_mbsfn_area_id\",",
          "6555:   FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6556:   NULL, HFILL }",
          "6557:  },",
          "6558:  { &hf_gsm_a_dtap_epc_ue_tl_c_mch_id,",
          "6559:   { \"MCH identity\",\"gsm_a.dtap.epc.ue_tl_c_mch_id\",",
          "6560:   FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6561:   NULL, HFILL }",
          "6562:  },",
          "6563:  { &hf_gsm_a_dtap_epc_ue_tl_c_lcid,",
          "6564:   { \"Logical channel identity\",\"gsm_a.dtap.epc.ue_tl_c_lcid\",",
          "6565:   FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6566:   NULL, HFILL }",
          "6567:  },",
          "6568:  { &hf_gsm_a_dtap_epc_ue_positioning_technology,",
          "6569:   { \"UE positioning technology\",\"gsm_a.dtap.epc.ue_positioning_technology\",",
          "6570:   FT_UINT8, BASE_DEC, VALS(epc_ue_positioning_technology_vals), 0x0,",
          "6571:   NULL, HFILL }",
          "6572:  },",
          "6573:  { &hf_gsm_a_dtap_epc_mbms_packet_counter_value,",
          "6574:   { \"MBMS packet counter value\",\"gsm_a.dtap.epc.mbms_packet_counter_value\",",
          "6575:   FT_UINT32, BASE_DEC, NULL, 0x0,",
          "6576:   NULL, HFILL }",
          "6577:  },",
          "6578:  { &hf_gsm_a_dtap_epc_latitude_sign,",
          "6579:   { \"Latitude Sign\",\"gsm_a.dtap.epc.latitude_sign\",",
          "6580:   FT_BOOLEAN, BASE_NONE, TFS(&epc_latitude_sign_value), 0x0,",
          "6581:   NULL, HFILL }",
          "6582:  },",
          "6583:  { &hf_gsm_a_dtap_epc_degrees_latitude,",
          "6584:   { \"Degrees Latitude\",\"gsm_a.dtap.epc.degrees_latitude\",",
          "6585:   FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6586:   NULL, HFILL }",
          "6587:  },",
          "6588:  { &hf_gsm_a_dtap_epc_degrees_longitude,",
          "6589:   { \"Degrees Longitude\",\"gsm_a.dtap.epc.degrees_longitude\",",
          "6590:   FT_INT24, BASE_DEC, NULL, 0x0,",
          "6591:   NULL, HFILL }",
          "6592:  },",
          "6593:  { &hf_gsm_a_dtap_epc_altitude_dir,",
          "6594:   { \"Altitude Direction\",\"gsm_a.dtap.epc.altitude_direction\",",
          "6595:   FT_BOOLEAN, BASE_NONE, TFS(&epc_altitude_dir_value), 0x0,",
          "6596:   NULL, HFILL }",
          "6597:  },",
          "6598:  { &hf_gsm_a_dtap_epc_altitude,",
          "6599:   { \"Altitude\",\"gsm_a.dtap.epc.altitude\",",
          "6600:   FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6601:   NULL, HFILL }",
          "6602:  },",
          "6603:  { &hf_gsm_a_dtap_epc_bearing,",
          "6604:   { \"Bearing\",\"gsm_a.dtap.epc.bearing\",",
          "6605:   FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6606:   NULL, HFILL }",
          "6607:  },",
          "6608:  { &hf_gsm_a_dtap_epc_horizontal_speed,",
          "6609:   { \"Horizontal Speed\",\"gsm_a.dtap.epc.horizontal_speed\",",
          "6610:   FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6611:   NULL, HFILL }",
          "6612:  },",
          "6613:  { &hf_gsm_a_dtap_epc_gnss_tod_msec,",
          "6614:   { \"GNSS-TOD-msec\",\"gsm_a.dtap.epc.gnss_tod_msec\",",
          "6615:   FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6616:   NULL, HFILL }",
          "6617:  },",
          "6619:       { &hf_gsm_a_dtap_coding_scheme, { \"Coding Scheme\", \"gsm_a.dtap.coding_scheme\", FT_UINT8, BASE_DEC, NULL, 0x70, NULL, HFILL }},",
          "6620:       { &hf_gsm_a_dtap_add_ci, { \"Add CI\", \"gsm_a.dtap.add_ci\", FT_BOOLEAN, 8, TFS(&tfs_add_ci), 0x08, NULL, HFILL }},",
          "6621:       { &hf_gsm_a_dtap_number_of_spare_bits, { \"Number of spare bits in last octet\", \"gsm_a.dtap.number_of_spare_bits\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_number_of_spare_bits_vals), 0x07, NULL, HFILL }},",
          "6622:       { &hf_gsm_a_dtap_text_string, { \"Text String\", \"gsm_a.dtap.text_string\", FT_STRING, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "6623:       { &hf_gsm_a_dtap_time_zone_time, { \"Time\", \"gsm_a.dtap.time_zone_time\", FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0x0, NULL, HFILL }},",
          "6624:       { &hf_gsm_a_dtap_dst_adjustment, { \"DST Adjustment\", \"gsm_a.dtap.dst_adjustment\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_dst_adjustment_vals), 0x03, NULL, HFILL }},",
          "6625:       { &hf_gsm_a_dtap_emergency_number_information, { \"Emergency Number Information\", \"gsm_a.dtap.emergency_number_information\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "6626:       { &hf_gsm_a_dtap_mm_timer, { \"MM Timer\", \"gsm_a.dtap.mm_timer\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }},",
          "6627:       { &hf_gsm_a_dtap_hold_auxiliary_state, { \"Hold auxiliary state\", \"gsm_a.dtap.hold_auxiliary_state\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_hold_auxilary_state_vals), 0x0C, NULL, HFILL }},",
          "6628:       { &hf_gsm_a_dtap_multi_party_auxiliary_state, { \"Multi party auxiliary state\", \"gsm_a.dtap.multi_party_auxiliary_state\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_multi_party_auxilary_state_vals), 0x03, NULL, HFILL }},",
          "6629:       { &hf_gsm_a_dtap_radio_channel_requirement, { \"Radio channel requirement\", \"gsm_a.dtap.radio_channel_requirement\", FT_UINT8, BASE_DEC, NULL, 0x60, NULL, HFILL }},",
          "6630:       { &hf_gsm_a_dtap_bearer_cap_coding_standard, { \"Coding standard\", \"gsm_a.dtap.coding_standard\", FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_coding_standard), 0x10, NULL, HFILL }},",
          "6631:       { &hf_gsm_a_dtap_transfer_mode, { \"Transfer mode\", \"gsm_a.dtap.transfer_mode\", FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_transfer_mode), 0x08, NULL, HFILL }},",
          "6632:       { &hf_gsm_a_dtap_coding, { \"Coding\", \"gsm_a.dtap.coding\", FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_coding), 0x40, NULL, HFILL }},",
          "6633:       { &hf_gsm_a_dtap_compression, { \"Compression\", \"gsm_a.dtap.compression\", FT_BOOLEAN, 8, TFS(&tfs_possible_not_possible), 0x40, NULL, HFILL }},",
          "6634:       { &hf_gsm_a_dtap_compression_up, { \"Compression\", \"gsm_a.dtap.compression\", FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x40, NULL, HFILL }},",
          "6635:       { &hf_gsm_a_dtap_structure, { \"Structure\", \"gsm_a.dtap.structure\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_structure_vals), 0x30, NULL, HFILL }},",
          "6636:       { &hf_gsm_a_dtap_duplex_mode, { \"Duplex mode\", \"gsm_a.dtap.duplex_mode\", FT_BOOLEAN, 8, TFS(&tfs_duplex_mode), 0x08, NULL, HFILL }},",
          "6637:       { &hf_gsm_a_dtap_configuration, { \"Configuration\", \"gsm_a.dtap.configuration\", FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_configuration), 0x04, NULL, HFILL }},",
          "6638:       { &hf_gsm_a_dtap_nirr, { \"NIRR\", \"gsm_a.dtap.nirr\", FT_BOOLEAN, 8, TFS(&tfs_nirr), 0x02, NULL, HFILL }},",
          "6639:       { &hf_gsm_a_dtap_establishment, { \"Establishment\", \"gsm_a.dtap.establishment\", FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_establishment), 0x01, NULL, HFILL }},",
          "6640:       { &hf_gsm_a_dtap_access_identity, { \"Access Identity\", \"gsm_a.dtap.access_identity\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_access_identity_vals), 0x60, NULL, HFILL }},",
          "6641:       { &hf_gsm_a_dtap_rate_adaption, { \"Rate Adaption\", \"gsm_a.dtap.rate_adaption\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_rate_adaption_vals), 0x18, NULL, HFILL }},",
          "6642:       { &hf_gsm_a_dtap_signalling_access_protocol, { \"Signalling Access Protocol\", \"gsm_a.dtap.signalling_access_protocol\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_signal_access_protocol_vals), 0x07, NULL, HFILL }},",
          "6643:       { &hf_gsm_a_dtap_other_itc, { \"Other ITC\", \"gsm_a.dtap.other_itc\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_itc_vals), 0x60, NULL, HFILL }},",
          "6644:       { &hf_gsm_a_dtap_other_rate_adaption, { \"Other Rate Adaption\", \"gsm_a.dtap.other_rate_adaption\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_rate_adaption_vals), 0x18, NULL, HFILL }},",
          "6645:       { &hf_gsm_a_dtap_rate_adaption_header, { \"Rate Adaption Header\", \"gsm_a.dtap.rate_adaption_header\", FT_BOOLEAN, 8, TFS(&tfs_included_not_included), 0x40, NULL, HFILL }},",
          "6646:       { &hf_gsm_a_dtap_multiple_frame_establishment_support, { \"Multiple frame establishment support in data link\", \"gsm_a.dtap.multiple_frame_establishment_support\", FT_BOOLEAN, 8, TFS(&tfs_frame_est_supported_not_supported), 0x20, NULL, HFILL }},",
          "6647:       { &hf_gsm_a_dtap_mode_of_operation, { \"Mode of operation\", \"gsm_a.dtap.mode_of_operation\", FT_BOOLEAN, 8, TFS(&tfs_mode_of_operation), 0x10, NULL, HFILL }},",
          "6648:       { &hf_gsm_a_dtap_logical_link_identifier_negotiation, { \"Logical link identifier negotiation\", \"gsm_a.dtap.logical_link_identifier_negotiation\", FT_BOOLEAN, 8, TFS(&tfs_log_link_neg), 0x08, NULL, HFILL }},",
          "6649:       { &hf_gsm_a_dtap_assignor_assignee, { \"Assignor/Assignee\", \"gsm_a.dtap.assignor_assignee\", FT_BOOLEAN, 8, TFS(&tfs_assignor_assignee), 0x04, NULL, HFILL }},",
          "6650:       { &hf_gsm_a_dtap_in_out_band, { \"In band/Out of band negotiation\", \"gsm_a.dtap.in_out_band\", FT_BOOLEAN, 8, TFS(&tfs_in_out_band), 0x02, NULL, HFILL }},",
          "6651:       { &hf_gsm_a_dtap_layer_1_identity, { \"Layer 1 Identity\", \"gsm_a.dtap.layer_1_identity\", FT_UINT8, BASE_DEC, NULL, 0x60, NULL, HFILL }},",
          "6652:       { &hf_gsm_a_dtap_user_information_layer_1_protocol, { \"User information layer 1 protocol\", \"gsm_a.dtap.user_information_layer_1_protocol\", FT_UINT8, BASE_DEC, NULL, 0x1e, NULL, HFILL }},",
          "6653:       { &hf_gsm_a_dtap_synchronous, { \"Synchronous/asynchronous\", \"gsm_a.dtap.synchronous\", FT_BOOLEAN, 8, TFS(&tfs_asynchronous_synchronous), 0x01, NULL, HFILL }},",
          "6654:       { &hf_gsm_a_dtap_number_of_stop_bits, { \"Number of Stop Bits\", \"gsm_a.dtap.number_of_stop_bits\", FT_BOOLEAN, 8, TFS(&tfs_stop_bits), 0x40, NULL, HFILL }},",
          "6655:       { &hf_gsm_a_dtap_negotiation, { \"Negotiation\", \"gsm_a.dtap.negotiation\", FT_BOOLEAN, 8, TFS(&tfs_negotiation), 0x20, NULL, HFILL }},",
          "6656:       { &hf_gsm_a_dtap_number_of_data_bits, { \"Number of data bits excluding parity bit if present\", \"gsm_a.dtap.number_of_data_bits\", FT_BOOLEAN, 8, TFS(&tfs_parity_bits), 0x10, NULL, HFILL }},",
          "6657:       { &hf_gsm_a_dtap_user_rate, { \"User rate\", \"gsm_a.dtap.user_rate\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_user_rate_vals), 0x0F, NULL, HFILL }},",
          "6658:       { &hf_gsm_a_dtap_v110_x30_rate_adaptation, { \"V.110/X.30 rate adaptation Intermediate rate\", \"gsm_a.dtap.v110_x30_rate_adaptation\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_v110_x30_rate_adaptation_vals), 0x60, NULL, HFILL }},",
          "6659:       { &hf_gsm_a_dtap_nic_on_tx, { \"Network independent clock (NIC) on transmission (Tx)\", \"gsm_a.dtap.nic_on_tx\", FT_BOOLEAN, 8, TFS(&tfs_nic_on_tx), 0x10, NULL, HFILL }},",
          "6660:       { &hf_gsm_a_dtap_nic_on_rx, { \"Network independent clock (NIC) on reception (Rx)\", \"gsm_a.dtap.nic_on_rx\", FT_BOOLEAN, 8, TFS(&tfs_nic_on_rx), 0x08, NULL, HFILL }},",
          "6661:       { &hf_gsm_a_dtap_parity_information, { \"Parity information\", \"gsm_a.dtap.parity_information\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_parity_info_vals), 0x07, NULL, HFILL }},",
          "6662:       { &hf_gsm_a_dtap_connection_element, { \"Connection element\", \"gsm_a.dtap.connection_element\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_connection_element_vals), 0x60, NULL, HFILL }},",
          "6663:       { &hf_gsm_a_dtap_modem_type, { \"Modem type\", \"gsm_a.dtap.modem_type\", FT_UINT8, BASE_DEC, NULL, 0x1f, NULL, HFILL }},",
          "6664:       { &hf_gsm_a_dtap_other_modem_type, { \"Other modem type\", \"gsm_a.dtap.other_modem_type\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_modem_type_vals), 0x60, NULL, HFILL }},",
          "6665:       { &hf_gsm_a_dtap_fixed_network_user_rate, { \"Fixed network user rate\", \"gsm_a.dtap.fixed_network_user_rate\", FT_UINT8, BASE_DEC, NULL, 0x1f, NULL, HFILL }},",
          "6666:       { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F14_4, { \"Acceptable channel codings (TCH/F14.4)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F14_4\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x40, NULL, HFILL }},",
          "6667:       { &hf_gsm_a_dtap_acceptable_channel_codings_spare20, { \"Acceptable channel codings (Spare)\", \"gsm_a.dtap.acceptable_channel_codings.spare\", FT_BOOLEAN, 8, NULL, 0x20, NULL, HFILL }},",
          "6668:       { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F9_6, { \"Acceptable channel codings (TCH/F9.6)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F9_6\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x10, NULL, HFILL }},",
          "6669:       { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F4_8, { \"Acceptable channel codings (TCH/F4.8)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F4_8\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x08, NULL, HFILL }},",
          "6670:       { &hf_gsm_a_dtap_maximum_number_of_traffic_channels, { \"Maximum number of traffic channels\", \"gsm_a.dtap.maximum_number_of_traffic_channels\", FT_UINT8, BASE_DEC, NULL, 0x07, NULL, HFILL }},",
          "6671:       { &hf_gsm_a_dtap_acceptable_channel_codings_spare78, { \"Acceptable channel codings\", \"gsm_a.dtap.acceptable_channel_codings\", FT_UINT8, BASE_DEC, NULL, 0x78, NULL, HFILL }},",
          "6672:       { &hf_gsm_a_dtap_uimi, { \"UIMI, User initiated modification indication\", \"gsm_a.dtap.uimi\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_uimi_vals), 0x70, NULL, HFILL }},",
          "6673:       { &hf_gsm_a_dtap_wanted_air_interface_user_rate, { \"Wanted air interface user rate\", \"gsm_a.dtap.wanted_air_interface_user_rate\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_wanted_air_rate_vals), 0x0F, NULL, HFILL }},",
          "6674:       { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F28_8, { \"Acceptable channel codings extended (TCH/F28.8)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F28_8\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x40, NULL, HFILL }},",
          "6675:       { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F32_0, { \"Acceptable channel codings extended (TCH/F32.0)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F32_0\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x20, NULL, HFILL }},",
          "6676:       { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F43_2, { \"Acceptable channel codings extended (TCH/F43.2)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F43_2\", FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x10, NULL, HFILL }},",
          "6677:       { &hf_gsm_a_dtap_channel_coding_asymmetry_indication, { \"Channel Coding Asymmetry Indication\", \"gsm_a.dtap.channel_coding_asymmetry_indication\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_channel_coding_asymmetry_ind_vals), 0x0c, NULL, HFILL }},",
          "6678:       { &hf_gsm_a_dtap_edge_channel_codings, { \"EDGE Channel Codings\", \"gsm_a.dtap.edge_channel_codings\", FT_UINT8, BASE_DEC, NULL, 0x7c, NULL, HFILL }},",
          "6679:       { &hf_gsm_a_dtap_layer_2_identity, { \"Layer 2 Identity\", \"gsm_a.dtap.layer_2_identity\", FT_UINT8, BASE_DEC, NULL, 0x60, NULL, HFILL }},",
          "6680:       { &hf_gsm_a_dtap_user_information_layer_2_protocol, { \"User information layer 2 protocol\", \"gsm_a.dtap.user_information_layer_2_protocol\", FT_UINT8, BASE_DEC, NULL, 0x1f, NULL, HFILL }},",
          "6681:       { &hf_gsm_a_dtap_maximum_number_of_supported_bearers, { \"Maximum number of supported bearers\", \"gsm_a.dtap.maximum_number_of_supported_bearers\", FT_UINT8, BASE_DEC, NULL, 0xf0, NULL, HFILL }},",
          "6682:       { &hf_gsm_a_dtap_pcp, { \"Prolonged Clearing Procedure\", \"gsm_a.dtap.pcp\", FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02, NULL, HFILL }},",
          "6683:       { &hf_gsm_a_dtap_dtmf, { \"DTMF\", \"gsm_a.dtap.dtmf\", FT_BOOLEAN, 8, TFS(&gsm_a_dtap_dtmf_value), 0x01, NULL, HFILL }},",
          "6684:       { &hf_gsm_a_dtap_max_num_of_speech_bearers, { \"Maximum number of speech bearers\", \"gsm_a.dtap.max_num_of_speech_bearers\", FT_UINT8, BASE_DEC, NULL, 0x0f, NULL, HFILL }},",
          "6685:       { &hf_gsm_a_dtap_de_cause_coding_standard, { \"Coding standard\", \"gsm_a.dtap.coding_standard\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_de_cause_coding_standard_vals), 0x60, NULL, HFILL }},",
          "6686:       { &hf_gsm_a_dtap_recommendation, { \"Recommendation\", \"gsm_a.dtap.recommendation\", FT_UINT8, BASE_DEC, NULL, 0x7f, NULL, HFILL }},",
          "6687:       { &hf_gsm_a_dtap_data, { \"Data\", \"gsm_a.dtap.data\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "6688:       { &hf_gsm_a_dtap_keypad_information, { \"Keypad information\", \"gsm_a.dtap.keypad_information\", FT_UINT8, BASE_DEC, NULL, 0x7f, NULL, HFILL }},",
          "6689:       { &hf_gsm_a_dtap_repeat_indicator, { \"Repeat Indicator\", \"gsm_a.dtap.repeat_indicator\", FT_UINT8, BASE_DEC, NULL, 0x0f, NULL, HFILL }},",
          "6690:       { &hf_gsm_a_dtap_ss_version_indicator, { \"SS Version Indicator\", \"gsm_a.dtap.ss_version_indicator\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "6691:       { &hf_gsm_a_dtap_cp_cause, { \"Cause\", \"gsm_a.dtap.cp_cause\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "6692:       { &hf_gsm_a_dtap_test_loop, { \"Test Loop\", \"gsm_a.dtap.test_loop\", FT_UINT8, BASE_DEC, NULL, 0x3f, NULL, HFILL }},",
          "6693:       { &hf_gsm_a_dtap_channel_coding03, { \"Channel coding\", \"gsm_a.dtap.channel_coding\", FT_UINT8, BASE_DEC, VALS(gsm_channel_coding_vals), 0x03, NULL, HFILL }},",
          "6694:       { &hf_gsm_a_dtap_channel_coding30, { \"Channel coding\", \"gsm_a.dtap.channel_coding\", FT_UINT8, BASE_DEC, VALS(gsm_channel_coding_vals), 0x30, NULL, HFILL }},",
          "6695:       { &hf_gsm_a_dtap_tp_tested_device, { \"Tested device\", \"gsm_a.dtap.tp_tested_device\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "6696:       { &hf_gsm_a_dtap_tp_pdu_description, { \"PDUs transmitted\", \"gsm_a.dtap.tp_pdu_description\", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "6697:       { &hf_gsm_a_dtap_downlink_timeslot_offset, { \"Downlink Timeslot Offset\", \"gsm_a.dtap.downlink_timeslot_offset\", FT_UINT8, BASE_DEC, NULL, 0x0E, NULL, HFILL }},",
          "6698:       { &hf_gsm_a_dtap_ms_positioning_technology, { \"MS positioning technology\", \"gsm_a.dtap.ms_positioning_technology\", FT_UINT8, BASE_DEC, VALS(gsm_positioning_technology_vals), 0x0, NULL, HFILL }},",
          "6699:       { &hf_gsm_a_dtap_ue_positioning_technology, { \"UE positioning technology\", \"gsm_a.dtap.ue_positioning_technology\", FT_UINT8, BASE_DEC, VALS(gsm_positioning_technology_vals), 0x0, NULL, HFILL }},",
          "6700:       { &hf_gsm_a_dtap_ciphering_key_sequence_number, { \"Ciphering Key Sequence Number\", \"gsm_a.dtap.ciphering_key_sequence_number\", FT_UINT8, BASE_DEC, NULL, 0x07, NULL, HFILL }},",
          "6701:       { &hf_gsm_a_dtap_ciphering_key_sequence_number70, { \"Ciphering Key Sequence Number\", \"gsm_a.dtap.ciphering_key_sequence_number\", FT_UINT8, BASE_DEC, NULL, 0x70, NULL, HFILL }},",
          "6702:       { &hf_gsm_a_dtap_service_type, { \"Service Type\", \"gsm_a.dtap.service_type\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_service_type_vals), 0x0F, NULL, HFILL }},",
          "6703:       { &hf_gsm_a_dtap_type_of_identity, { \"Type of identity\", \"gsm_a.dtap.type_of_identity\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_type_of_identity_vals), 0x07, NULL, HFILL }},",
          "6704:       { &hf_gsm_a_dtap_follow_on_request, { \"Follow-On Request (FOR)\", \"gsm_a.dtap.follow_on_request\", FT_BOOLEAN, 8, TFS(&tfs_follow_on_request_value ), 0x08, NULL, HFILL }},",
          "6705:       { &hf_gsm_a_dtap_updating_type, { \"Updating Type\", \"gsm_a.dtap.updating_type\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_updating_type_vals), 0x03, NULL, HFILL }},",
          "6706:       { &hf_gsm_a_dtap_congestion_level, { \"Congestion level\", \"gsm_a.dtap.congestion_level\", FT_UINT8, BASE_DEC, NULL, 0x0F, NULL, HFILL }},",
          "6707:       { &hf_gsm_a_dtap_protocol_discriminator, { \"Protocol Discriminator\", \"gsm_a.dtap.protocol_discriminator\", FT_UINT8, BASE_DEC, VALS(protocol_discriminator_vals), 0x0, NULL, HFILL }},",
          "6708:       { &hf_gsm_a_dtap_ti_flag, { \"TI flag\", \"gsm_a.dtap.ti_flag\", FT_BOOLEAN, 8, TFS(&tfs_ti_flags), 0x80, NULL, HFILL }},",
          "6709:       { &hf_gsm_a_dtap_tio, { \"TIO\", \"gsm_a.dtap.tio\", FT_UINT8, BASE_DEC, NULL, 0x70, NULL, HFILL }},",
          "6710:       { &hf_gsm_a_dtap_tie, { \"TIE\", \"gsm_a.dtap.tie\", FT_UINT8, BASE_DEC, NULL, DTAP_TIE_MASK, NULL, HFILL }},",
          "6711:  };",
          "6715:  gint *ett[NUM_INDIVIDUAL_ELEMS +",
          "6716:     NUM_GSM_DTAP_MSG_MM + NUM_GSM_DTAP_MSG_CC +",
          "6717:     NUM_GSM_DTAP_MSG_SMS + NUM_GSM_DTAP_MSG_SS + NUM_GSM_DTAP_MSG_TP +",
          "6718:     NUM_GSM_DTAP_ELEM];",
          "6720:  static ei_register_info ei[] = {",
          "6721:   { &ei_gsm_a_dtap_autn, { \"gsm_a.dtap.autn.invalid\", PI_MALFORMED, PI_WARN, \"AUTN length not equal to 16\", EXPFILL }},",
          "6722:   { &ei_gsm_a_dtap_auts, { \"gsm_a.dtap.auts.invalid\", PI_MALFORMED, PI_WARN, \"AUTS length not equal to 14\", EXPFILL }},",
          "6723:   { &ei_gsm_a_dtap_text_string_not_multiple_of_7, { \"gsm_a.dtap.text_string_not_multiple_of_7\", PI_MALFORMED, PI_WARN, \"Value leads to a Text String whose length is not a multiple of 7 bits\", EXPFILL }},",
          "6724:   { &ei_gsm_a_dtap_end_mark_unexpected, { \"gsm_a.dtap.end_mark_unexpected\", PI_MALFORMED, PI_WARN, \"\\'f\\' end mark present in unexpected position\", EXPFILL }},",
          "6725:   { &ei_gsm_a_dtap_invalid_ia5_character, { \"gsm_a.dtap.invalid_ia5_character\", PI_MALFORMED, PI_WARN, \"Invalid IA5 character(s) in string (value > 127)\", EXPFILL }},",
          "6726:   { &ei_gsm_a_dtap_keypad_info_not_dtmf_digit, { \"gsm_a.dtap.keypad_info_not_dtmf_digit\", PI_MALFORMED, PI_WARN, \"Keypad information contains character that is not a DTMF digit\", EXPFILL }},",
          "6727:   };",
          "6729:  expert_module_t* expert_a_dtap;",
          "6731:  ett[0]  = &ett_dtap_msg;",
          "6732:  ett[1]  = &ett_dtap_oct_1;",
          "6733:  ett[2]  = &ett_cm_srvc_type;",
          "6734:  ett[3]  = &ett_gsm_enc_info;",
          "6735:  ett[4]  = &ett_bc_oct_3;",
          "6736:  ett[5]  = &ett_bc_oct_3a;",
          "6737:  ett[6]  = &ett_bc_oct_4;",
          "6738:  ett[7]  = &ett_bc_oct_5;",
          "6739:  ett[8]  = &ett_bc_oct_5a;",
          "6740:  ett[9]  = &ett_bc_oct_5b;",
          "6741:  ett[10] = &ett_bc_oct_6;",
          "6742:  ett[11] = &ett_bc_oct_6a;",
          "6743:  ett[12] = &ett_bc_oct_6b;",
          "6744:  ett[13] = &ett_bc_oct_6c;",
          "6745:  ett[14] = &ett_bc_oct_6d;",
          "6746:  ett[15] = &ett_bc_oct_6e;",
          "6747:  ett[16] = &ett_bc_oct_6f;",
          "6748:  ett[17] = &ett_bc_oct_6g;",
          "6749:  ett[18] = &ett_bc_oct_7;",
          "6750:  ett[19] = &ett_epc_ue_tl_a_lb_setup;",
          "6751:  ett[20] = &ett_mm_timer;",
          "6753:  last_offset = NUM_INDIVIDUAL_ELEMS;",
          "6755:  for (i=0; i < NUM_GSM_DTAP_MSG_MM; i++, last_offset++)",
          "6756:  {",
          "6757:   ett_gsm_dtap_msg_mm[i] = -1;",
          "6758:   ett[last_offset] = &ett_gsm_dtap_msg_mm[i];",
          "6759:  }",
          "6761:  for (i=0; i < NUM_GSM_DTAP_MSG_CC; i++, last_offset++)",
          "6762:  {",
          "6763:   ett_gsm_dtap_msg_cc[i] = -1;",
          "6764:   ett[last_offset] = &ett_gsm_dtap_msg_cc[i];",
          "6765:  }",
          "6767:  for (i=0; i < NUM_GSM_DTAP_MSG_SMS; i++, last_offset++)",
          "6768:  {",
          "6769:   ett_gsm_dtap_msg_sms[i] = -1;",
          "6770:   ett[last_offset] = &ett_gsm_dtap_msg_sms[i];",
          "6771:  }",
          "6773:  for (i=0; i < NUM_GSM_DTAP_MSG_SS; i++, last_offset++)",
          "6774:  {",
          "6775:   ett_gsm_dtap_msg_ss[i] = -1;",
          "6776:   ett[last_offset] = &ett_gsm_dtap_msg_ss[i];",
          "6777:  }",
          "6779:  for (i=0; i < NUM_GSM_DTAP_MSG_TP; i++, last_offset++)",
          "6780:  {",
          "6781:   ett_gsm_dtap_msg_tp[i] = -1;",
          "6782:   ett[last_offset] = &ett_gsm_dtap_msg_tp[i];",
          "6783:  }",
          "6785:  for (i=0; i < NUM_GSM_DTAP_ELEM; i++, last_offset++)",
          "6786:  {",
          "6787:   ett_gsm_dtap_elem[i] = -1;",
          "6788:   ett[last_offset] = &ett_gsm_dtap_elem[i];",
          "6789:  }",
          "6793:  proto_a_dtap =",
          "6794:   proto_register_protocol(\"GSM A-I/F DTAP\", \"GSM DTAP\", \"gsm_a.dtap\");",
          "6796:  proto_register_field_array(proto_a_dtap, hf, array_length(hf));",
          "6798:  proto_register_subtree_array(ett, array_length(ett));",
          "6799:  expert_a_dtap = expert_register_protocol(proto_a_dtap);",
          "6800:  expert_register_field_array(expert_a_dtap, ei, array_length(ei));",
          "6804:  register_dissector(\"gsm_a_dtap\", dissect_dtap, proto_a_dtap);",
          "6810:  dissector_handle_t dtap_handle;",
          "6812:  dtap_handle = find_dissector(\"gsm_a_dtap\");",
          "6813:  dissector_add_uint(\"bssap.pdu_type\", BSSAP_PDU_TYPE_DTAP, dtap_handle);",
          "6814:  dissector_add_uint(\"ranap.nas_pdu\", BSSAP_PDU_TYPE_DTAP, dtap_handle);",
          "6820:  data_handle    = find_dissector(\"data\");",
          "6821:  gsm_map_handle = find_dissector(\"gsm_map\");",
          "6822:  rp_handle      = find_dissector(\"gsm_a_rp\");",
          "",
          "[Added Lines]",
          "6134:     guint i;",
          "6135:     guint last_offset;",
          "6139:     static hf_register_info hf[] = {",
          "6140:         { &hf_gsm_a_seq_no,",
          "6141:           { \"Sequence number\", \"gsm_a.dtap.seq_no\",",
          "6142:             FT_UINT8, BASE_DEC, NULL, 0xc0,",
          "6143:             NULL, HFILL }",
          "6144:         },",
          "6145:         { &hf_gsm_a_dtap_msg_mm_type,",
          "6146:           { \"DTAP Mobility Management Message Type\", \"gsm_a.dtap.msg_mm_type\",",
          "6147:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_mm_strings), 0x3f,",
          "6148:             NULL, HFILL }",
          "6149:         },",
          "6150:         { &hf_gsm_a_dtap_msg_cc_type,",
          "6151:           { \"DTAP Call Control Message Type\", \"gsm_a.dtap.msg_cc_type\",",
          "6152:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_cc_strings), 0x3f,",
          "6153:             NULL, HFILL }",
          "6154:         },",
          "6155:         { &hf_gsm_a_dtap_msg_sms_type,",
          "6156:           { \"DTAP Short Message Service Message Type\", \"gsm_a.dtap.msg_sms_type\",",
          "6157:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_sms_strings), 0x0,",
          "6158:             NULL, HFILL }",
          "6159:         },",
          "6160:         { &hf_gsm_a_dtap_msg_ss_type,",
          "6161:           { \"DTAP Non call Supplementary Service Message Type\", \"gsm_a.dtap.msg_ss_type\",",
          "6162:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_ss_strings), 0x3f,",
          "6163:             NULL, HFILL }",
          "6164:         },",
          "6165:         { &hf_gsm_a_dtap_msg_tp_type,",
          "6166:           { \"DTAP Tests Procedures Message Type\", \"gsm_a.dtap.msg_tp_type\",",
          "6167:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_msg_tp_strings), 0x0,",
          "6168:             NULL, HFILL }",
          "6169:         },",
          "6170:         { &hf_gsm_a_dtap_elem_id,",
          "6171:           { \"Element ID\", \"gsm_a.dtap.elem_id\",",
          "6172:             FT_UINT8, BASE_HEX, NULL, 0,",
          "6173:             NULL, HFILL }",
          "6174:         },",
          "6175:         { &hf_gsm_a_dtap_cld_party_bcd_num,",
          "6176:           { \"Called Party BCD Number\", \"gsm_a.dtap.cld_party_bcd_num\",",
          "6177:             FT_STRING, BASE_NONE, 0, 0,",
          "6178:             NULL, HFILL }",
          "6179:         },",
          "6180:         { &hf_gsm_a_dtap_clg_party_bcd_num,",
          "6181:           { \"Calling Party BCD Number\", \"gsm_a.dtap.clg_party_bcd_num\",",
          "6182:             FT_STRING, BASE_NONE, 0, 0,",
          "6183:             NULL, HFILL }",
          "6184:         },",
          "6185:         { &hf_gsm_a_dtap_conn_num,",
          "6186:           { \"Connected Number\", \"gsm_a.dtap.conn_num\",",
          "6187:             FT_STRING, BASE_NONE, 0, 0,",
          "6188:             NULL, HFILL }",
          "6189:         },",
          "6190:         { &hf_gsm_a_dtap_red_party_bcd_num,",
          "6191:           { \"Redirecting Party BCD Number\", \"gsm_a.dtap.red_party_bcd_num\",",
          "6192:             FT_STRING, BASE_NONE, 0, 0,",
          "6193:             NULL, HFILL }",
          "6194:         },",
          "6195:         { &hf_gsm_a_dtap_cause,",
          "6196:           { \"DTAP Cause\", \"gsm_a.dtap.cause\",",
          "6197:             FT_UINT8, BASE_HEX, 0, 0x7f,",
          "6198:             NULL, HFILL }",
          "6199:         },",
          "6200:         { &hf_gsm_a_dtap_type_of_number,",
          "6201:           { \"Type of number\", \"gsm_a.dtap.type_of_number\",",
          "6202:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_type_of_number_values), 0x70,",
          "6203:             NULL, HFILL }",
          "6204:         },",
          "6205:         { &hf_gsm_a_dtap_numbering_plan_id,",
          "6206:           { \"Numbering plan identification\", \"gsm_a.dtap.numbering_plan_id\",",
          "6207:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_numbering_plan_id_values), 0x0f,",
          "6208:             NULL, HFILL }",
          "6209:         },",
          "6210:         { &hf_gsm_a_dtap_present_ind,",
          "6211:           { \"Presentation indicator\", \"gsm_a.dtap.present_ind\",",
          "6212:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_present_ind_values), 0x60,",
          "6213:             NULL, HFILL }",
          "6214:         },",
          "6215:         { &hf_gsm_a_dtap_screening_ind,",
          "6216:           { \"Screening indicator\", \"gsm_a.dtap.screening_ind\",",
          "6217:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_screening_ind_values), 0x03,",
          "6218:             NULL, HFILL }",
          "6219:         },",
          "6220:         { &hf_gsm_a_dtap_type_of_sub_addr,",
          "6221:           { \"Type of subaddress\", \"gsm_a.dtap.type_of_sub_addr\",",
          "6222:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_type_of_sub_addr_values), 0x70,",
          "6223:             NULL, HFILL }",
          "6224:         },",
          "6225:         { &hf_gsm_a_dtap_odd_even_ind,",
          "6226:           { \"Odd/even indicator\", \"gsm_a.dtap.odd_even_ind\",",
          "6227:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_odd_even_ind_values), 0x08,",
          "6228:             NULL, HFILL }",
          "6229:         },",
          "6230:         { &hf_gsm_a_dtap_lsa_id,",
          "6231:           { \"LSA Identifier\", \"gsm_a.dtap.lsa_id\",",
          "6232:             FT_UINT24, BASE_HEX, NULL, 0x0,",
          "6233:             NULL, HFILL }",
          "6234:         },",
          "6235:         { &hf_gsm_a_dtap_speech_vers_ind,",
          "6236:           { \"Speech version indication\", \"gsm_a.dtap.speech_vers_ind\",",
          "6237:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_speech_vers_ind_values), 0x0f,",
          "6238:             NULL, HFILL }",
          "6239:         },",
          "6240:         { &hf_gsm_a_dtap_itc,",
          "6241:           { \"Information transfer capability\", \"gsm_a.dtap.itc\",",
          "6242:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_itc_values), 0x07,",
          "6243:             NULL, HFILL }",
          "6244:         },",
          "6245:         { &hf_gsm_a_dtap_sysid,",
          "6246:           { \"System Identification (SysID)\", \"gsm_a.dtap.sysid\",",
          "6247:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_sysid_values), 0x0,",
          "6248:             NULL, HFILL }",
          "6249:         },",
          "6250:         { &hf_gsm_a_dtap_bitmap_length,",
          "6251:           { \"Bitmap Length\", \"gsm_a.dtap.bitmap_length\",",
          "6252:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6253:             NULL, HFILL }",
          "6254:         },",
          "6255:         { &hf_gsm_a_dtap_serv_cat_b7,",
          "6256:           { \"Automatically initiated eCall\", \"gsm_a.dtap.serv_cat_b7\",",
          "6257:             FT_BOOLEAN, 8, NULL, 0x40,",
          "6258:             NULL, HFILL }",
          "6259:         },",
          "6260:         { &hf_gsm_a_dtap_serv_cat_b6,",
          "6261:           { \"Manually initiated eCall\", \"gsm_a.dtap.serv_cat_b6\",",
          "6262:             FT_BOOLEAN, 8, NULL, 0x20,",
          "6263:             NULL, HFILL }",
          "6264:         },",
          "6265:         { &hf_gsm_a_dtap_serv_cat_b5,",
          "6266:           { \"Mountain Rescue\", \"gsm_a.dtap.serv_cat_b5\",",
          "6267:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6268:             NULL, HFILL }",
          "6269:         },",
          "6270:         { &hf_gsm_a_dtap_serv_cat_b4,",
          "6271:           { \"Marine Guard\", \"gsm_a.dtap.serv_cat_b4\",",
          "6272:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6273:             NULL, HFILL }",
          "6274:         },",
          "6275:         { &hf_gsm_a_dtap_serv_cat_b3,",
          "6276:           { \"Fire Brigade\", \"gsm_a.dtap.serv_cat_b3\",",
          "6277:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6278:             NULL, HFILL }",
          "6279:         },",
          "6280:         { &hf_gsm_a_dtap_serv_cat_b2,",
          "6281:           { \"Ambulance\", \"gsm_a.dtap.serv_cat_b2\",",
          "6282:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6283:             NULL, HFILL }",
          "6284:         },",
          "6285:         { &hf_gsm_a_dtap_serv_cat_b1,",
          "6286:           { \"Police\", \"gsm_a.dtap.serv_cat_b1\",",
          "6287:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6288:             NULL, HFILL }",
          "6289:         },",
          "6290:         { &hf_gsm_a_dtap_csmo,",
          "6291:           { \"CSMO\", \"gsm_a.dtap.csmo\",",
          "6292:             FT_BOOLEAN, BASE_NONE, TFS(&gsm_a_dtap_csmo_value), 0x0,",
          "6293:             NULL, HFILL }",
          "6294:         },",
          "6295:         { &hf_gsm_a_dtap_csmt,",
          "6296:           { \"CSMT\", \"gsm_a.dtap.csmt\",",
          "6297:             FT_BOOLEAN, BASE_NONE, TFS(&gsm_a_dtap_csmt_value), 0x0,",
          "6298:             NULL, HFILL }",
          "6299:         },",
          "6300:         { &hf_gsm_a_dtap_mm_timer_unit,",
          "6301:           { \"Unit\", \"gsm_a.dtap.mm_timer_unit\",",
          "6302:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_mm_timer_unit_vals), 0xe0,",
          "6303:             NULL, HFILL }",
          "6304:         },",
          "6305:         { &hf_gsm_a_dtap_mm_timer_value,",
          "6306:           { \"Timer value\", \"gsm_a.dtap.mm_timer_value\",",
          "6307:             FT_UINT8, BASE_DEC, NULL, 0x1f,",
          "6308:             NULL, HFILL }",
          "6309:         },",
          "6310:         { &hf_gsm_a_dtap_alerting_pattern,",
          "6311:           { \"Alerting Pattern\", \"gsm_a.dtap.alerting_pattern\",",
          "6312:             FT_UINT8, BASE_DEC, VALS(gsm_a_alerting_pattern_vals), 0x0f,",
          "6313:             NULL, HFILL }",
          "6314:         },",
          "6315:         { &hf_gsm_a_dtap_ccbs_activation,",
          "6316:           { \"CCBS Activation\", \"gsm_a.dtap.ccbs_activation\",",
          "6317:             FT_BOOLEAN, 8, TFS(&gsm_a_ccbs_activation_value), 0x80,",
          "6318:             NULL, HFILL }",
          "6319:         },",
          "6320:         { &hf_gsm_a_dtap_stream_identifier,",
          "6321:           { \"Stream Identifier\", \"gsm_a.dtap.stream_identifier\",",
          "6322:             FT_UINT8, BASE_HEX, 0, 0x0,",
          "6323:             NULL, HFILL }",
          "6324:         },",
          "6325:         { &hf_gsm_a_dtap_mcs,",
          "6326:           { \"MCS\", \"gsm_a.dtap.mcs\",",
          "6327:             FT_BOOLEAN, 8, TFS(&gsm_a_mcs_value), 0x01,",
          "6328:             NULL, HFILL }",
          "6329:         },",
          "6330:         { &hf_gsm_a_dtap_cause_of_no_cli,",
          "6331:           { \"Cause of no CLI\", \"gsm_a.dtap.cause_of_no_cli\",",
          "6332:             FT_UINT8, BASE_HEX, 0, 0x0,",
          "6333:             NULL, HFILL }",
          "6334:         },",
          "6335:         { &hf_gsm_a_dtap_cause_ss_diagnostics,",
          "6336:           { \"Supplementary Services Diagnostics\", \"gsm_a.dtap.cause_ss_diagnostics\",",
          "6337:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_cause_ss_diagnostics_vals), 0x7f,",
          "6338:             NULL, HFILL }",
          "6339:         },",
          "6340:         { &hf_gsm_a_dtap_codec_tdma_efr,",
          "6341:           { \"TDMA EFR\", \"gsm_a.dtap.codec.tdma_efr\",",
          "6342:             FT_BOOLEAN, 8, NULL, 0x80,",
          "6343:             NULL, HFILL }",
          "6344:         },",
          "6345:         { &hf_gsm_a_dtap_codec_umts_amr_2,",
          "6346:           { \"UMTS AMR 2\", \"gsm_a.dtap.codec.umts_amr_2\",",
          "6347:             FT_BOOLEAN, 8, NULL, 0x40,",
          "6348:             NULL, HFILL }",
          "6349:         },",
          "6350:         { &hf_gsm_a_dtap_codec_umts_amr,",
          "6351:           { \"UMTS AMR\", \"gsm_a.dtap.codec.umts_amr\",",
          "6352:             FT_BOOLEAN, 8, NULL, 0x20,",
          "6353:             NULL, HFILL }",
          "6354:         },",
          "6355:         { &hf_gsm_a_dtap_codec_hr_amr,",
          "6356:           { \"HR AMR\", \"gsm_a.dtap.codec.hr_amr\",",
          "6357:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6358:             NULL, HFILL }",
          "6359:         },",
          "6360:         { &hf_gsm_a_dtap_codec_fr_amr,",
          "6361:           { \"FR AMR\", \"gsm_a.dtap.codec.fr_amr\",",
          "6362:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6363:             NULL, HFILL }",
          "6364:         },",
          "6365:         { &hf_gsm_a_dtap_codec_gsm_efr,",
          "6366:           { \"GSM EFR\", \"gsm_a.dtap.codec.gsm_efr\",",
          "6367:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6368:             NULL, HFILL }",
          "6369:         },",
          "6370:         { &hf_gsm_a_dtap_codec_gsm_hr,",
          "6371:           { \"GSM HR\", \"gsm_a.dtap.codec.gsm_hr\",",
          "6372:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6373:             NULL, HFILL }",
          "6374:         },",
          "6375:         { &hf_gsm_a_dtap_codec_gsm_fr,",
          "6376:           { \"GSM FR\", \"gsm_a.dtap.codec.gsm_fr\",",
          "6377:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6378:             NULL, HFILL }",
          "6379:         },",
          "6380:         { &hf_gsm_a_dtap_codec_ohr_amr_wb,",
          "6381:           { \"OHR AMR-WB\", \"gsm_a.dtap.codec.ohr_amr_wb\",",
          "6382:             FT_BOOLEAN, 8, NULL, 0x20,",
          "6383:             NULL, HFILL }",
          "6384:         },",
          "6385:         { &hf_gsm_a_dtap_codec_ofr_amr_wb,",
          "6386:           { \"OFR AMR-WB\", \"gsm_a.dtap.codec.ofr_amr_wb\",",
          "6387:             FT_BOOLEAN, 8, NULL, 0x10,",
          "6388:             NULL, HFILL }",
          "6389:         },",
          "6390:         { &hf_gsm_a_dtap_codec_ohr_amr,",
          "6391:           { \"OHR AMR\", \"gsm_a.dtap.codec.ohr_amr\",",
          "6392:             FT_BOOLEAN, 8, NULL, 0x08,",
          "6393:             NULL, HFILL }",
          "6394:         },",
          "6395:         { &hf_gsm_a_dtap_codec_umts_amr_wb,",
          "6396:           { \"UMTS AMR-WB\", \"gsm_a.dtap.codec.umts_amr_wb\",",
          "6397:             FT_BOOLEAN, 8, NULL, 0x04,",
          "6398:             NULL, HFILL }",
          "6399:         },",
          "6400:         { &hf_gsm_a_dtap_codec_fr_amr_wb,",
          "6401:           { \"FR AMR-WB\", \"gsm_a.dtap.codec.fr_amr_wb\",",
          "6402:             FT_BOOLEAN, 8, NULL, 0x02,",
          "6403:             NULL, HFILL }",
          "6404:         },",
          "6405:         { &hf_gsm_a_dtap_codec_pdc_efr,",
          "6406:           { \"PDC EFR\", \"gsm_a.dtap.codec.pdc_efr\",",
          "6407:             FT_BOOLEAN, 8, NULL, 0x01,",
          "6408:             NULL, HFILL }",
          "6409:         },",
          "6410:         { &hf_gsm_a_dtap_notification_description,",
          "6411:           { \"Notification description\", \"gsm_a.dtap.notif_descr\",",
          "6412:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_notification_description_vals), 0x7f,",
          "6413:             NULL, HFILL }",
          "6414:         },",
          "6415:         { &hf_gsm_a_dtap_emerg_num_info_length,",
          "6416:           { \"Emergency Number Info length\", \"gsm_a.dtap.emerg_num_info_length\",",
          "6417:             FT_UINT8, BASE_DEC, 0, 0x0,",
          "6418:             NULL, HFILL }",
          "6419:         },",
          "6420:         { &hf_gsm_a_dtap_emergency_bcd_num,",
          "6421:           { \"Emergency BCD Number\", \"gsm_a.dtap.emergency_bcd_num\",",
          "6422:             FT_STRING, BASE_NONE, 0, 0,",
          "6423:             NULL, HFILL }",
          "6424:         },",
          "6425:         { &hf_gsm_a_dtap_signal_value,",
          "6426:           { \"Signal value\", \"gsm_a.dtap.signal_value\",",
          "6427:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_signal_value_vals), 0x0,",
          "6428:             NULL, HFILL }",
          "6429:         },",
          "6430:         { &hf_gsm_a_dtap_recall_type,",
          "6431:           { \"Recall type\", \"gsm_a.dtap.recall_type\",",
          "6432:             FT_UINT8, BASE_HEX|BASE_RANGE_STRING, RVALS(gsm_a_dtap_recall_type_vals), 0x07,",
          "6433:             NULL, HFILL }",
          "6434:         },",
          "6435:         { &hf_gsm_a_dtap_coding_standard,",
          "6436:           { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6437:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_coding_standard_vals), 0xc0,",
          "6438:             NULL, HFILL }",
          "6439:         },",
          "6440:         { &hf_gsm_a_dtap_call_state,",
          "6441:           { \"Call state\", \"gsm_a.dtap.call_state\",",
          "6442:             FT_UINT8, BASE_DEC, NULL, 0x3f,",
          "6443:             NULL, HFILL }",
          "6444:         },",
          "6445:         { &hf_gsm_a_dtap_prog_coding_standard,",
          "6446:           { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6447:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_coding_standard_vals), 0x60,",
          "6448:             NULL, HFILL }",
          "6449:         },",
          "6450:         { &hf_gsm_a_dtap_location,",
          "6451:           { \"Location\", \"gsm_a.dtap.location\",",
          "6452:             FT_UINT8, BASE_HEX, VALS(gsm_a_dtap_location_vals), 0x0f,",
          "6453:             NULL, HFILL }",
          "6454:         },",
          "6455:         { &hf_gsm_a_dtap_progress_description,",
          "6456:           { \"Progress description\", \"gsm_a.dtap.progress_description\",",
          "6457:             FT_UINT8, BASE_DEC, NULL, 0x7f,",
          "6458:             NULL, HFILL }",
          "6459:         },",
          "6460:         { &hf_gsm_a_dtap_afi,",
          "6461:           { \"Authority and Format Identifier\", \"gsm_a.dtap.afi\",",
          "6462:             FT_UINT8, BASE_HEX|BASE_EXT_STRING, &x213_afi_value_ext, 0x0,",
          "6463:             NULL, HFILL }",
          "6464:         },",
          "6465:         { &hf_gsm_a_dtap_rej_cause,",
          "6466:           { \"Reject cause\", \"gsm_a.dtap.rej_cause\",",
          "6467:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6468:             NULL, HFILL }",
          "6469:         },",
          "6470:         { &hf_gsm_a_dtap_u2u_prot_discr,",
          "6471:           { \"User-user protocol discriminator\", \"gsm_a.dtap.u2u_prot_discr\",",
          "6472:             FT_UINT8, BASE_HEX|BASE_RANGE_STRING, RVALS(gsm_a_dtap_u2u_prot_discr_vals), 0x00,",
          "6473:             NULL, HFILL }",
          "6474:         },",
          "6475:         { &hf_gsm_a_dtap_mcat,",
          "6476:           { \"MCAT\", \"gsm_a.dtap.mcat\",",
          "6477:             FT_BOOLEAN, 8, TFS(&gsm_a_dtap_mcat_value), 0x08,",
          "6478:             NULL, HFILL }",
          "6479:         },",
          "6480:         { &hf_gsm_a_dtap_enicm,",
          "6481:           { \"ENICM\", \"gsm_a.dtap.mcat\",",
          "6482:             FT_BOOLEAN, 8, TFS(&gsm_a_dtap_enicm_value), 0x04,",
          "6483:             NULL, HFILL }",
          "6484:         },",
          "6485:         { &hf_gsm_a_dtap_rand,",
          "6486:           { \"RAND value\", \"gsm_a.dtap.rand\",",
          "6487:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6488:             NULL, HFILL }",
          "6489:         },",
          "6490:         { &hf_gsm_a_dtap_autn,",
          "6491:           { \"AUTN value\", \"gsm_a.dtap.autn\",",
          "6492:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6493:             NULL, HFILL }",
          "6494:         },",
          "6495:         { &hf_gsm_a_dtap_sres,",
          "6496:           { \"SRES value\", \"gsm_a.dtap.sres\",",
          "6497:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6498:             NULL, HFILL }",
          "6499:         },",
          "6500:         { &hf_gsm_a_dtap_xres,",
          "6501:           { \"XRES value\", \"gsm_a.dtap.xres\",",
          "6502:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6503:             NULL, HFILL }",
          "6504:         },",
          "6505:         { &hf_gsm_a_dtap_auts,",
          "6506:           { \"AUTS value\", \"gsm_a.dtap.auts\",",
          "6507:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6508:             NULL, HFILL }",
          "6509:         },",
          "6510:         { &hf_gsm_a_dtap_autn_sqn_xor_ak,",
          "6511:           { \"SQN xor AK\", \"gsm_a.dtap.autn.sqn_xor_ak\",",
          "6512:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6513:             NULL, HFILL }",
          "6514:         },",
          "6515:         { &hf_gsm_a_dtap_autn_amf,",
          "6516:           { \"AMF\", \"gsm_a.dtap.autn.amf\",",
          "6517:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6518:             NULL, HFILL }",
          "6519:         },",
          "6520:         { &hf_gsm_a_dtap_autn_mac,",
          "6521:           { \"MAC\", \"gsm_a.dtap.autn.mac\",",
          "6522:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6523:             NULL, HFILL }",
          "6524:         },",
          "6525:         { &hf_gsm_a_dtap_auts_sqn_ms_xor_ak,",
          "6526:           { \"SQN_MS xor AK\", \"gsm_a.dtap.auts.sqn_ms_xor_ak\",",
          "6527:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6528:             NULL, HFILL }",
          "6529:         },",
          "6530:         { &hf_gsm_a_dtap_auts_mac_s,",
          "6531:           { \"MAC-S\", \"gsm_a.dtap.auts.mac_s\",",
          "6532:             FT_BYTES, FT_NONE, NULL, 0x00,",
          "6533:             NULL, HFILL }",
          "6534:         },",
          "6535:         { &hf_gsm_a_dtap_epc_ue_tl_mode,",
          "6536:           { \"UE test loop mode\",\"gsm_a.dtap.epc.ue_tl_mode\",",
          "6537:             FT_UINT8,BASE_DEC, VALS(epc_ue_test_loop_mode_vals), 0x0,",
          "6538:             NULL, HFILL }",
          "6539:         },",
          "6540:         { &hf_gsm_a_dtap_epc_ue_tl_a_ul_sdu_size,",
          "6541:           { \"Uplink PDCP SDU size in bits\",\"gsm_a.dtap.epc.ue_tl_a_ul_sdu_size\",",
          "6542:             FT_UINT16,BASE_DEC, NULL, 0x0,",
          "6543:             NULL, HFILL }",
          "6544:         },",
          "6545:         { &hf_gsm_a_dtap_epc_ue_tl_a_drb,",
          "6546:           { \"Data Radio Bearer identity number\",\"gsm_a.dtap.epc.ue_tl_a_drb\",",
          "6547:             FT_UINT8,BASE_DEC, NULL, 0x1f,",
          "6548:             NULL, HFILL }",
          "6549:         },",
          "6550:         { &hf_gsm_a_dtap_epc_ue_tl_b_ip_pdu_delay,",
          "6551:           { \"IP PDU delay in seconds\",\"gsm_a.dtap.epc.ue_tl_b_ip_pdu_delay\",",
          "6552:             FT_UINT8,BASE_DEC, NULL, 0x0,",
          "6553:             NULL, HFILL }",
          "6554:         },",
          "6555:         { &hf_gsm_a_dtap_epc_ue_tl_c_mbsfn_area_id,",
          "6556:           { \"MBSFN area identity\",\"gsm_a.dtap.epc.ue_tl_c_mbsfn_area_id\",",
          "6557:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6558:             NULL, HFILL }",
          "6559:         },",
          "6560:         { &hf_gsm_a_dtap_epc_ue_tl_c_mch_id,",
          "6561:           { \"MCH identity\",\"gsm_a.dtap.epc.ue_tl_c_mch_id\",",
          "6562:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6563:             NULL, HFILL }",
          "6564:         },",
          "6565:         { &hf_gsm_a_dtap_epc_ue_tl_c_lcid,",
          "6566:           { \"Logical channel identity\",\"gsm_a.dtap.epc.ue_tl_c_lcid\",",
          "6567:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6568:             NULL, HFILL }",
          "6569:         },",
          "6570:         { &hf_gsm_a_dtap_epc_ue_positioning_technology,",
          "6571:           { \"UE positioning technology\",\"gsm_a.dtap.epc.ue_positioning_technology\",",
          "6572:             FT_UINT8, BASE_DEC, VALS(epc_ue_positioning_technology_vals), 0x0,",
          "6573:             NULL, HFILL }",
          "6574:         },",
          "6575:         { &hf_gsm_a_dtap_epc_mbms_packet_counter_value,",
          "6576:           { \"MBMS packet counter value\",\"gsm_a.dtap.epc.mbms_packet_counter_value\",",
          "6577:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "6578:             NULL, HFILL }",
          "6579:         },",
          "6580:         { &hf_gsm_a_dtap_epc_latitude_sign,",
          "6581:           { \"Latitude Sign\",\"gsm_a.dtap.epc.latitude_sign\",",
          "6582:             FT_BOOLEAN, BASE_NONE, TFS(&epc_latitude_sign_value), 0x0,",
          "6583:             NULL, HFILL }",
          "6584:         },",
          "6585:         { &hf_gsm_a_dtap_epc_degrees_latitude,",
          "6586:           { \"Degrees Latitude\",\"gsm_a.dtap.epc.degrees_latitude\",",
          "6587:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6588:             NULL, HFILL }",
          "6589:         },",
          "6590:         { &hf_gsm_a_dtap_epc_degrees_longitude,",
          "6591:           { \"Degrees Longitude\",\"gsm_a.dtap.epc.degrees_longitude\",",
          "6592:             FT_INT24, BASE_DEC, NULL, 0x0,",
          "6593:             NULL, HFILL }",
          "6594:         },",
          "6595:         { &hf_gsm_a_dtap_epc_altitude_dir,",
          "6596:           { \"Altitude Direction\",\"gsm_a.dtap.epc.altitude_direction\",",
          "6597:             FT_BOOLEAN, BASE_NONE, TFS(&epc_altitude_dir_value), 0x0,",
          "6598:             NULL, HFILL }",
          "6599:         },",
          "6600:         { &hf_gsm_a_dtap_epc_altitude,",
          "6601:           { \"Altitude\",\"gsm_a.dtap.epc.altitude\",",
          "6602:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6603:             NULL, HFILL }",
          "6604:         },",
          "6605:         { &hf_gsm_a_dtap_epc_bearing,",
          "6606:           { \"Bearing\",\"gsm_a.dtap.epc.bearing\",",
          "6607:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6608:             NULL, HFILL }",
          "6609:         },",
          "6610:         { &hf_gsm_a_dtap_epc_horizontal_speed,",
          "6611:           { \"Horizontal Speed\",\"gsm_a.dtap.epc.horizontal_speed\",",
          "6612:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "6613:             NULL, HFILL }",
          "6614:         },",
          "6615:         { &hf_gsm_a_dtap_epc_gnss_tod_msec,",
          "6616:           { \"GNSS-TOD-msec\",\"gsm_a.dtap.epc.gnss_tod_msec\",",
          "6617:             FT_UINT24, BASE_DEC, NULL, 0x0,",
          "6618:             NULL, HFILL }",
          "6619:         },",
          "6621:         { &hf_gsm_a_dtap_coding_scheme,",
          "6622:           { \"Coding Scheme\", \"gsm_a.dtap.coding_scheme\",",
          "6623:             FT_UINT8, BASE_DEC, NULL, 0x70,",
          "6624:             NULL, HFILL }",
          "6625:         },",
          "6626:         { &hf_gsm_a_dtap_add_ci,",
          "6627:           { \"Add CI\", \"gsm_a.dtap.add_ci\",",
          "6628:             FT_BOOLEAN, 8, TFS(&tfs_add_ci), 0x08,",
          "6629:             NULL, HFILL }",
          "6630:         },",
          "6631:         { &hf_gsm_a_dtap_number_of_spare_bits,",
          "6632:           { \"Number of spare bits in last octet\", \"gsm_a.dtap.number_of_spare_bits\",",
          "6633:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_number_of_spare_bits_vals), 0x07,",
          "6634:             NULL, HFILL }",
          "6635:         },",
          "6636:         { &hf_gsm_a_dtap_text_string,",
          "6637:           { \"Text String\", \"gsm_a.dtap.text_string\",",
          "6638:             FT_STRING, BASE_NONE, NULL, 0x0,",
          "6639:             NULL, HFILL }",
          "6640:         },",
          "6641:         { &hf_gsm_a_dtap_time_zone_time,",
          "6642:           { \"Time\", \"gsm_a.dtap.time_zone_time\",",
          "6643:             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0x0,",
          "6644:             NULL, HFILL }",
          "6645:         },",
          "6646:         { &hf_gsm_a_dtap_dst_adjustment,",
          "6647:           { \"DST Adjustment\", \"gsm_a.dtap.dst_adjustment\",",
          "6648:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_dst_adjustment_vals), 0x03,",
          "6649:             NULL, HFILL }",
          "6650:         },",
          "6651:         { &hf_gsm_a_dtap_emergency_number_information,",
          "6652:           { \"Emergency Number Information\", \"gsm_a.dtap.emergency_number_information\",",
          "6653:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "6654:             NULL, HFILL }",
          "6655:         },",
          "6656:         { &hf_gsm_a_dtap_mm_timer,",
          "6657:           { \"MM Timer\", \"gsm_a.dtap.mm_timer\",",
          "6658:             FT_UINT8, BASE_DEC, NULL, 0,",
          "6659:             NULL, HFILL }",
          "6660:         },",
          "6661:         { &hf_gsm_a_dtap_hold_auxiliary_state,",
          "6662:           { \"Hold auxiliary state\", \"gsm_a.dtap.hold_auxiliary_state\",",
          "6663:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_hold_auxilary_state_vals), 0x0C,",
          "6664:             NULL, HFILL }",
          "6665:         },",
          "6666:         { &hf_gsm_a_dtap_multi_party_auxiliary_state,",
          "6667:           { \"Multi party auxiliary state\", \"gsm_a.dtap.multi_party_auxiliary_state\",",
          "6668:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_multi_party_auxilary_state_vals), 0x03,",
          "6669:             NULL, HFILL }",
          "6670:         },",
          "6671:         { &hf_gsm_a_dtap_radio_channel_requirement,",
          "6672:           { \"Radio channel requirement\", \"gsm_a.dtap.radio_channel_requirement\",",
          "6673:             FT_UINT8, BASE_DEC, NULL, 0x60,",
          "6674:             NULL, HFILL }",
          "6675:         },",
          "6676:         { &hf_gsm_a_dtap_bearer_cap_coding_standard,",
          "6677:           { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6678:             FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_coding_standard), 0x10,",
          "6679:             NULL, HFILL }",
          "6680:         },",
          "6681:         { &hf_gsm_a_dtap_transfer_mode,",
          "6682:           { \"Transfer mode\", \"gsm_a.dtap.transfer_mode\",",
          "6683:             FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_transfer_mode), 0x08,",
          "6684:             NULL, HFILL }",
          "6685:         },",
          "6686:         { &hf_gsm_a_dtap_coding,",
          "6687:           { \"Coding\", \"gsm_a.dtap.coding\",",
          "6688:             FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_coding), 0x40,",
          "6689:             NULL, HFILL }",
          "6690:         },",
          "6691:         { &hf_gsm_a_dtap_compression,",
          "6692:           { \"Compression\", \"gsm_a.dtap.compression\",",
          "6693:             FT_BOOLEAN, 8, TFS(&tfs_possible_not_possible), 0x40,",
          "6694:             NULL, HFILL }",
          "6695:         },",
          "6696:         { &hf_gsm_a_dtap_compression_up,",
          "6697:           { \"Compression\", \"gsm_a.dtap.compression\",",
          "6698:             FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x40,",
          "6699:             NULL, HFILL }",
          "6700:         },",
          "6701:         { &hf_gsm_a_dtap_structure,",
          "6702:           { \"Structure\", \"gsm_a.dtap.structure\",",
          "6703:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_structure_vals), 0x30,",
          "6704:             NULL, HFILL }",
          "6705:         },",
          "6706:         { &hf_gsm_a_dtap_duplex_mode,",
          "6707:           { \"Duplex mode\", \"gsm_a.dtap.duplex_mode\",",
          "6708:             FT_BOOLEAN, 8, TFS(&tfs_duplex_mode), 0x08,",
          "6709:             NULL, HFILL }",
          "6710:         },",
          "6711:         { &hf_gsm_a_dtap_configuration,",
          "6712:           { \"Configuration\", \"gsm_a.dtap.configuration\",",
          "6713:             FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_configuration), 0x04,",
          "6714:             NULL, HFILL }",
          "6715:         },",
          "6716:         { &hf_gsm_a_dtap_nirr,",
          "6717:           { \"NIRR\", \"gsm_a.dtap.nirr\",",
          "6718:             FT_BOOLEAN, 8, TFS(&tfs_nirr), 0x02,",
          "6719:             NULL, HFILL }",
          "6720:         },",
          "6721:         { &hf_gsm_a_dtap_establishment,",
          "6722:           { \"Establishment\", \"gsm_a.dtap.establishment\",",
          "6723:             FT_BOOLEAN, 8, TFS(&tfs_bearer_cap_establishment), 0x01,",
          "6724:             NULL, HFILL }",
          "6725:         },",
          "6726:         { &hf_gsm_a_dtap_access_identity,",
          "6727:           { \"Access Identity\", \"gsm_a.dtap.access_identity\",",
          "6728:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_access_identity_vals), 0x60,",
          "6729:             NULL, HFILL }",
          "6730:         },",
          "6731:         { &hf_gsm_a_dtap_rate_adaption,",
          "6732:           { \"Rate Adaption\", \"gsm_a.dtap.rate_adaption\",",
          "6733:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_rate_adaption_vals), 0x18,",
          "6734:             NULL, HFILL }",
          "6735:         },",
          "6736:         { &hf_gsm_a_dtap_signalling_access_protocol,",
          "6737:           { \"Signalling Access Protocol\", \"gsm_a.dtap.signalling_access_protocol\",",
          "6738:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_signal_access_protocol_vals), 0x07,",
          "6739:             NULL, HFILL }",
          "6740:         },",
          "6741:         { &hf_gsm_a_dtap_other_itc,",
          "6742:           { \"Other ITC\", \"gsm_a.dtap.other_itc\",",
          "6743:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_itc_vals), 0x60,",
          "6744:             NULL, HFILL }",
          "6745:         },",
          "6746:         { &hf_gsm_a_dtap_other_rate_adaption,",
          "6747:           { \"Other Rate Adaption\", \"gsm_a.dtap.other_rate_adaption\",",
          "6748:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_rate_adaption_vals), 0x18,",
          "6749:             NULL, HFILL }",
          "6750:         },",
          "6751:         { &hf_gsm_a_dtap_rate_adaption_header,",
          "6752:           { \"Rate Adaption Header\", \"gsm_a.dtap.rate_adaption_header\",",
          "6753:             FT_BOOLEAN, 8, TFS(&tfs_included_not_included), 0x40,",
          "6754:             NULL, HFILL }",
          "6755:         },",
          "6756:         { &hf_gsm_a_dtap_multiple_frame_establishment_support,",
          "6757:           { \"Multiple frame establishment support in data link\", \"gsm_a.dtap.multiple_frame_establishment_support\",",
          "6758:             FT_BOOLEAN, 8, TFS(&tfs_frame_est_supported_not_supported), 0x20,",
          "6759:             NULL, HFILL }",
          "6760:         },",
          "6761:         { &hf_gsm_a_dtap_mode_of_operation,",
          "6762:           { \"Mode of operation\", \"gsm_a.dtap.mode_of_operation\",",
          "6763:             FT_BOOLEAN, 8, TFS(&tfs_mode_of_operation), 0x10,",
          "6764:             NULL, HFILL }",
          "6765:         },",
          "6766:         { &hf_gsm_a_dtap_logical_link_identifier_negotiation,",
          "6767:           { \"Logical link identifier negotiation\", \"gsm_a.dtap.logical_link_identifier_negotiation\",",
          "6768:             FT_BOOLEAN, 8, TFS(&tfs_log_link_neg), 0x08,",
          "6769:             NULL, HFILL }",
          "6770:         },",
          "6771:         { &hf_gsm_a_dtap_assignor_assignee,",
          "6772:           { \"Assignor/Assignee\", \"gsm_a.dtap.assignor_assignee\",",
          "6773:             FT_BOOLEAN, 8, TFS(&tfs_assignor_assignee), 0x04,",
          "6774:             NULL, HFILL }",
          "6775:         },",
          "6776:         { &hf_gsm_a_dtap_in_out_band,",
          "6777:           { \"In band/Out of band negotiation\", \"gsm_a.dtap.in_out_band\",",
          "6778:             FT_BOOLEAN, 8, TFS(&tfs_in_out_band), 0x02,",
          "6779:             NULL, HFILL }",
          "6780:         },",
          "6781:         { &hf_gsm_a_dtap_layer_1_identity,",
          "6782:           { \"Layer 1 Identity\", \"gsm_a.dtap.layer_1_identity\",",
          "6783:             FT_UINT8, BASE_DEC, NULL, 0x60,",
          "6784:             NULL, HFILL }",
          "6785:         },",
          "6786:         { &hf_gsm_a_dtap_user_information_layer_1_protocol,",
          "6787:           { \"User information layer 1 protocol\", \"gsm_a.dtap.user_information_layer_1_protocol\",",
          "6788:             FT_UINT8, BASE_DEC, NULL, 0x1e,",
          "6789:             NULL, HFILL }",
          "6790:         },",
          "6791:         { &hf_gsm_a_dtap_synchronous,",
          "6792:           { \"Synchronous/asynchronous\", \"gsm_a.dtap.synchronous\",",
          "6793:             FT_BOOLEAN, 8, TFS(&tfs_asynchronous_synchronous), 0x01,",
          "6794:             NULL, HFILL }",
          "6795:         },",
          "6796:         { &hf_gsm_a_dtap_number_of_stop_bits,",
          "6797:           { \"Number of Stop Bits\", \"gsm_a.dtap.number_of_stop_bits\",",
          "6798:             FT_BOOLEAN, 8, TFS(&tfs_stop_bits), 0x40,",
          "6799:             NULL, HFILL }",
          "6800:         },",
          "6801:         { &hf_gsm_a_dtap_negotiation,",
          "6802:           { \"Negotiation\", \"gsm_a.dtap.negotiation\",",
          "6803:             FT_BOOLEAN, 8, TFS(&tfs_negotiation), 0x20,",
          "6804:             NULL, HFILL }",
          "6805:         },",
          "6806:         { &hf_gsm_a_dtap_number_of_data_bits,",
          "6807:           { \"Number of data bits excluding parity bit if present\", \"gsm_a.dtap.number_of_data_bits\",",
          "6808:             FT_BOOLEAN, 8, TFS(&tfs_parity_bits), 0x10,",
          "6809:             NULL, HFILL }",
          "6810:         },",
          "6811:         { &hf_gsm_a_dtap_user_rate,",
          "6812:           { \"User rate\", \"gsm_a.dtap.user_rate\",",
          "6813:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_user_rate_vals), 0x0F,",
          "6814:             NULL, HFILL }",
          "6815:         },",
          "6816:         { &hf_gsm_a_dtap_v110_x30_rate_adaptation,",
          "6817:           { \"V.110/X.30 rate adaptation Intermediate rate\", \"gsm_a.dtap.v110_x30_rate_adaptation\",",
          "6818:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_v110_x30_rate_adaptation_vals), 0x60,",
          "6819:             NULL, HFILL }",
          "6820:         },",
          "6821:         { &hf_gsm_a_dtap_nic_on_tx,",
          "6822:           { \"Network independent clock (NIC) on transmission (Tx)\", \"gsm_a.dtap.nic_on_tx\",",
          "6823:             FT_BOOLEAN, 8, TFS(&tfs_nic_on_tx), 0x10,",
          "6824:             NULL, HFILL }",
          "6825:         },",
          "6826:         { &hf_gsm_a_dtap_nic_on_rx,",
          "6827:           { \"Network independent clock (NIC) on reception (Rx)\", \"gsm_a.dtap.nic_on_rx\",",
          "6828:             FT_BOOLEAN, 8, TFS(&tfs_nic_on_rx), 0x08,",
          "6829:             NULL, HFILL }",
          "6830:         },",
          "6831:         { &hf_gsm_a_dtap_parity_information,",
          "6832:           { \"Parity information\", \"gsm_a.dtap.parity_information\",",
          "6833:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_parity_info_vals), 0x07,",
          "6834:             NULL, HFILL }",
          "6835:         },",
          "6836:         { &hf_gsm_a_dtap_connection_element,",
          "6837:           { \"Connection element\", \"gsm_a.dtap.connection_element\",",
          "6838:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_connection_element_vals), 0x60,",
          "6839:             NULL, HFILL }",
          "6840:         },",
          "6841:         { &hf_gsm_a_dtap_modem_type,",
          "6842:           { \"Modem type\", \"gsm_a.dtap.modem_type\",",
          "6843:             FT_UINT8, BASE_DEC, NULL, 0x1f,",
          "6844:             NULL, HFILL }",
          "6845:         },",
          "6846:         { &hf_gsm_a_dtap_other_modem_type,",
          "6847:           { \"Other modem type\", \"gsm_a.dtap.other_modem_type\",",
          "6848:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_other_modem_type_vals), 0x60,",
          "6849:             NULL, HFILL }",
          "6850:         },",
          "6851:         { &hf_gsm_a_dtap_fixed_network_user_rate,",
          "6852:           { \"Fixed network user rate\", \"gsm_a.dtap.fixed_network_user_rate\",",
          "6853:             FT_UINT8, BASE_DEC, NULL, 0x1f,",
          "6854:             NULL, HFILL }",
          "6855:         },",
          "6856:         { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F14_4,",
          "6857:           { \"Acceptable channel codings (TCH/F14.4)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F14_4\",",
          "6858:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x40,",
          "6859:             NULL, HFILL }",
          "6860:         },",
          "6861:         { &hf_gsm_a_dtap_acceptable_channel_codings_spare20,",
          "6862:           { \"Acceptable channel codings (Spare)\", \"gsm_a.dtap.acceptable_channel_codings.spare\",",
          "6863:             FT_BOOLEAN, 8, NULL, 0x20,",
          "6864:             NULL, HFILL }",
          "6865:         },",
          "6866:         { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F9_6,",
          "6867:           { \"Acceptable channel codings (TCH/F9.6)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F9_6\",",
          "6868:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x10,",
          "6869:             NULL, HFILL }",
          "6870:         },",
          "6871:         { &hf_gsm_a_dtap_acceptable_channel_codings_TCH_F4_8,",
          "6872:           { \"Acceptable channel codings (TCH/F4.8)\", \"gsm_a.dtap.acceptable_channel_codings.TCH_F4_8\",",
          "6873:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x08,",
          "6874:             NULL, HFILL }",
          "6875:         },",
          "6876:         { &hf_gsm_a_dtap_maximum_number_of_traffic_channels,",
          "6877:           { \"Maximum number of traffic channels\", \"gsm_a.dtap.maximum_number_of_traffic_channels\",",
          "6878:             FT_UINT8, BASE_DEC, NULL, 0x07,",
          "6879:             NULL, HFILL }",
          "6880:         },",
          "6881:         { &hf_gsm_a_dtap_acceptable_channel_codings_spare78,",
          "6882:           { \"Acceptable channel codings\", \"gsm_a.dtap.acceptable_channel_codings\",",
          "6883:             FT_UINT8, BASE_DEC, NULL, 0x78,",
          "6884:             NULL, HFILL }",
          "6885:         },",
          "6886:         { &hf_gsm_a_dtap_uimi,",
          "6887:           { \"UIMI, User initiated modification indication\",",
          "6888:             \"gsm_a.dtap.uimi\", FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_uimi_vals),",
          "6889:             0x70, NULL, HFILL }",
          "6890:         },",
          "6891:         { &hf_gsm_a_dtap_wanted_air_interface_user_rate,",
          "6892:           { \"Wanted air interface user rate\", \"gsm_a.dtap.wanted_air_interface_user_rate\",",
          "6893:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_wanted_air_rate_vals), 0x0F,",
          "6894:             NULL, HFILL }",
          "6895:         },",
          "6896:         { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F28_8,",
          "6897:           { \"Acceptable channel codings extended (TCH/F28.8)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F28_8\",",
          "6898:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x40,",
          "6899:             NULL, HFILL }",
          "6900:         },",
          "6901:         { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F32_0,",
          "6902:           { \"Acceptable channel codings extended (TCH/F32.0)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F32_0\",",
          "6903:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x20,",
          "6904:             NULL, HFILL }",
          "6905:         },",
          "6906:         { &hf_gsm_a_dtap_acceptable_channel_codings_ext_TCH_F43_2,",
          "6907:           { \"Acceptable channel codings extended (TCH/F43.2)\", \"gsm_a.dtap.acceptable_channel_codings_ext.TCH_F43_2\",",
          "6908:             FT_BOOLEAN, 8, TFS(&tfs_acceptable_not_acceptable), 0x10,",
          "6909:             NULL, HFILL }",
          "6910:         },",
          "6911:         { &hf_gsm_a_dtap_channel_coding_asymmetry_indication,",
          "6912:           { \"Channel Coding Asymmetry Indication\", \"gsm_a.dtap.channel_coding_asymmetry_indication\",",
          "6913:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_channel_coding_asymmetry_ind_vals), 0x0c,",
          "6914:             NULL, HFILL }",
          "6915:         },",
          "6916:         { &hf_gsm_a_dtap_edge_channel_codings,",
          "6917:           { \"EDGE Channel Codings\", \"gsm_a.dtap.edge_channel_codings\",",
          "6918:             FT_UINT8, BASE_DEC, NULL, 0x7c,",
          "6919:             NULL, HFILL }",
          "6920:         },",
          "6921:         { &hf_gsm_a_dtap_layer_2_identity,",
          "6922:           { \"Layer 2 Identity\", \"gsm_a.dtap.layer_2_identity\",",
          "6923:             FT_UINT8, BASE_DEC, NULL, 0x60,",
          "6924:             NULL, HFILL }",
          "6925:         },",
          "6926:         { &hf_gsm_a_dtap_user_information_layer_2_protocol,",
          "6927:           { \"User information layer 2 protocol\", \"gsm_a.dtap.user_information_layer_2_protocol\",",
          "6928:             FT_UINT8, BASE_DEC, NULL, 0x1f,",
          "6929:             NULL, HFILL }",
          "6930:         },",
          "6931:         { &hf_gsm_a_dtap_maximum_number_of_supported_bearers,",
          "6932:           { \"Maximum number of supported bearers\", \"gsm_a.dtap.maximum_number_of_supported_bearers\",",
          "6933:             FT_UINT8, BASE_DEC, NULL, 0xf0,",
          "6934:             NULL, HFILL }",
          "6935:         },",
          "6936:         { &hf_gsm_a_dtap_pcp,",
          "6937:           { \"Prolonged Clearing Procedure\", \"gsm_a.dtap.pcp\",",
          "6938:             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,",
          "6939:             NULL, HFILL }",
          "6940:         },",
          "6941:         { &hf_gsm_a_dtap_dtmf,",
          "6942:           { \"DTMF\", \"gsm_a.dtap.dtmf\",",
          "6943:             FT_BOOLEAN, 8, TFS(&gsm_a_dtap_dtmf_value), 0x01,",
          "6944:             NULL, HFILL }",
          "6945:         },",
          "6946:         { &hf_gsm_a_dtap_max_num_of_speech_bearers,",
          "6947:           { \"Maximum number of speech bearers\", \"gsm_a.dtap.max_num_of_speech_bearers\",",
          "6948:             FT_UINT8, BASE_DEC, NULL, 0x0f,",
          "6949:             NULL, HFILL }",
          "6950:         },",
          "6951:         { &hf_gsm_a_dtap_de_cause_coding_standard,",
          "6952:           { \"Coding standard\", \"gsm_a.dtap.coding_standard\",",
          "6953:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_de_cause_coding_standard_vals), 0x60,",
          "6954:             NULL, HFILL }",
          "6955:         },",
          "6956:         { &hf_gsm_a_dtap_recommendation,",
          "6957:           { \"Recommendation\", \"gsm_a.dtap.recommendation\",",
          "6958:             FT_UINT8, BASE_DEC, NULL, 0x7f,",
          "6959:             NULL, HFILL }",
          "6960:         },",
          "6961:         { &hf_gsm_a_dtap_data,",
          "6962:           { \"Data\", \"gsm_a.dtap.data\",",
          "6963:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "6964:             NULL, HFILL }",
          "6965:         },",
          "6966:         { &hf_gsm_a_dtap_keypad_information,",
          "6967:           { \"Keypad information\", \"gsm_a.dtap.keypad_information\",",
          "6968:             FT_UINT8, BASE_DEC, NULL, 0x7f,",
          "6969:             NULL, HFILL }",
          "6970:         },",
          "6971:         { &hf_gsm_a_dtap_repeat_indicator,",
          "6972:           { \"Repeat Indicator\", \"gsm_a.dtap.repeat_indicator\",",
          "6973:             FT_UINT8, BASE_DEC, NULL, 0x0f,",
          "6974:             NULL, HFILL }",
          "6975:         },",
          "6976:         { &hf_gsm_a_dtap_ss_version_indicator,",
          "6977:           { \"SS Version Indicator\", \"gsm_a.dtap.ss_version_indicator\",",
          "6978:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6979:             NULL, HFILL }",
          "6980:         },",
          "6981:         { &hf_gsm_a_dtap_cp_cause,",
          "6982:           { \"Cause\", \"gsm_a.dtap.cp_cause\",",
          "6983:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "6984:             NULL, HFILL }",
          "6985:         },",
          "6986:         { &hf_gsm_a_dtap_test_loop,",
          "6987:           { \"Test Loop\", \"gsm_a.dtap.test_loop\",",
          "6988:             FT_UINT8, BASE_DEC, NULL, 0x3f,",
          "6989:             NULL, HFILL }",
          "6990:         },",
          "6991:         { &hf_gsm_a_dtap_channel_coding03,",
          "6992:           { \"Channel coding\", \"gsm_a.dtap.channel_coding\",",
          "6993:             FT_UINT8, BASE_DEC, VALS(gsm_channel_coding_vals), 0x03,",
          "6994:             NULL, HFILL }",
          "6995:         },",
          "6996:         { &hf_gsm_a_dtap_channel_coding30,",
          "6997:           { \"Channel coding\", \"gsm_a.dtap.channel_coding\",",
          "6998:             FT_UINT8, BASE_DEC, VALS(gsm_channel_coding_vals), 0x30,",
          "6999:             NULL, HFILL }",
          "7000:         },",
          "7001:         { &hf_gsm_a_dtap_tp_tested_device,",
          "7002:           { \"Tested device\", \"gsm_a.dtap.tp_tested_device\",",
          "7003:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "7004:             NULL, HFILL }",
          "7005:         },",
          "7006:         { &hf_gsm_a_dtap_tp_pdu_description,",
          "7007:           { \"PDUs transmitted\", \"gsm_a.dtap.tp_pdu_description\",",
          "7008:             FT_UINT16, BASE_DEC, NULL, 0x0,",
          "7009:             NULL, HFILL }",
          "7010:         },",
          "7011:         { &hf_gsm_a_dtap_downlink_timeslot_offset,",
          "7012:           { \"Downlink Timeslot Offset\", \"gsm_a.dtap.downlink_timeslot_offset\",",
          "7013:             FT_UINT8, BASE_DEC, NULL, 0x0E,",
          "7014:             NULL, HFILL }",
          "7015:         },",
          "7016:         { &hf_gsm_a_dtap_ms_positioning_technology,",
          "7017:           { \"MS positioning technology\", \"gsm_a.dtap.ms_positioning_technology\",",
          "7018:             FT_UINT8, BASE_DEC, VALS(gsm_positioning_technology_vals), 0x0,",
          "7019:             NULL, HFILL }",
          "7020:         },",
          "7021:         { &hf_gsm_a_dtap_ue_positioning_technology,",
          "7022:           { \"UE positioning technology\", \"gsm_a.dtap.ue_positioning_technology\",",
          "7023:             FT_UINT8, BASE_DEC, VALS(gsm_positioning_technology_vals), 0x0,",
          "7024:             NULL, HFILL }",
          "7025:         },",
          "7026:         { &hf_gsm_a_dtap_ciphering_key_sequence_number,",
          "7027:           { \"Ciphering Key Sequence Number\", \"gsm_a.dtap.ciphering_key_sequence_number\",",
          "7028:             FT_UINT8, BASE_DEC, NULL, 0x07,",
          "7029:             NULL, HFILL }",
          "7030:         },",
          "7031:         { &hf_gsm_a_dtap_ciphering_key_sequence_number70,",
          "7032:           { \"Ciphering Key Sequence Number\", \"gsm_a.dtap.ciphering_key_sequence_number\",",
          "7033:             FT_UINT8, BASE_DEC, NULL, 0x70,",
          "7034:             NULL, HFILL }",
          "7035:         },",
          "7036:         { &hf_gsm_a_dtap_service_type,",
          "7037:           { \"Service Type\", \"gsm_a.dtap.service_type\",",
          "7038:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_service_type_vals), 0x0F,",
          "7039:             NULL, HFILL }",
          "7040:         },",
          "7041:         { &hf_gsm_a_dtap_type_of_identity,",
          "7042:           { \"Type of identity\", \"gsm_a.dtap.type_of_identity\",",
          "7043:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_type_of_identity_vals), 0x07,",
          "7044:             NULL, HFILL }",
          "7045:         },",
          "7046:         { &hf_gsm_a_dtap_follow_on_request,",
          "7047:           { \"Follow-On Request (FOR)\", \"gsm_a.dtap.follow_on_request\",",
          "7048:             FT_BOOLEAN, 8, TFS(&tfs_follow_on_request_value ), 0x08,",
          "7049:             NULL, HFILL }",
          "7050:         },",
          "7051:         { &hf_gsm_a_dtap_updating_type,",
          "7052:           { \"Updating Type\", \"gsm_a.dtap.updating_type\",",
          "7053:             FT_UINT8, BASE_DEC, VALS(gsm_a_dtap_updating_type_vals), 0x03,",
          "7054:             NULL, HFILL }",
          "7055:         },",
          "7056:         { &hf_gsm_a_dtap_congestion_level,",
          "7057:           { \"Congestion level\", \"gsm_a.dtap.congestion_level\",",
          "7058:             FT_UINT8, BASE_DEC, NULL, 0x0F,",
          "7059:             NULL, HFILL }",
          "7060:         },",
          "7061:         { &hf_gsm_a_dtap_protocol_discriminator,",
          "7062:           { \"Protocol Discriminator\", \"gsm_a.dtap.protocol_discriminator\",",
          "7063:             FT_UINT8, BASE_DEC, VALS(protocol_discriminator_vals), 0x0,",
          "7064:             NULL, HFILL }",
          "7065:         },",
          "7066:         { &hf_gsm_a_dtap_ti_flag,",
          "7067:           { \"TI flag\", \"gsm_a.dtap.ti_flag\",",
          "7068:             FT_BOOLEAN, 8, TFS(&tfs_ti_flags), 0x80,",
          "7069:             NULL, HFILL }",
          "7070:         },",
          "7071:         { &hf_gsm_a_dtap_tio,",
          "7072:           { \"TIO\", \"gsm_a.dtap.tio\",",
          "7073:             FT_UINT8, BASE_DEC, NULL, 0x70,",
          "7074:             NULL, HFILL }",
          "7075:         },",
          "7076:         { &hf_gsm_a_dtap_tie,",
          "7077:           { \"TIE\", \"gsm_a.dtap.tie\",",
          "7078:             FT_UINT8, BASE_DEC, NULL, DTAP_TIE_MASK,",
          "7079:             NULL, HFILL }",
          "7080:         },",
          "7081:     };",
          "7085:     gint *ett[NUM_INDIVIDUAL_ELEMS +",
          "7086:           NUM_GSM_DTAP_MSG_MM + NUM_GSM_DTAP_MSG_CC +",
          "7087:           NUM_GSM_DTAP_MSG_SMS + NUM_GSM_DTAP_MSG_SS + NUM_GSM_DTAP_MSG_TP +",
          "7088:           NUM_GSM_DTAP_ELEM];",
          "7090:     static ei_register_info ei[] = {",
          "7091:         { &ei_gsm_a_dtap_autn, { \"gsm_a.dtap.autn.invalid\", PI_MALFORMED, PI_WARN, \"AUTN length not equal to 16\", EXPFILL }},",
          "7092:         { &ei_gsm_a_dtap_auts, { \"gsm_a.dtap.auts.invalid\", PI_MALFORMED, PI_WARN, \"AUTS length not equal to 14\", EXPFILL }},",
          "7093:         { &ei_gsm_a_dtap_text_string_not_multiple_of_7, { \"gsm_a.dtap.text_string_not_multiple_of_7\", PI_MALFORMED, PI_WARN, \"Value leads to a Text String whose length is not a multiple of 7 bits\", EXPFILL }},",
          "7094:         { &ei_gsm_a_dtap_end_mark_unexpected, { \"gsm_a.dtap.end_mark_unexpected\", PI_MALFORMED, PI_WARN, \"\\'f\\' end mark present in unexpected position\", EXPFILL }},",
          "7095:         { &ei_gsm_a_dtap_invalid_ia5_character, { \"gsm_a.dtap.invalid_ia5_character\", PI_MALFORMED, PI_WARN, \"Invalid IA5 character(s) in string (value > 127)\", EXPFILL }},",
          "7096:         { &ei_gsm_a_dtap_keypad_info_not_dtmf_digit, { \"gsm_a.dtap.keypad_info_not_dtmf_digit\", PI_MALFORMED, PI_WARN, \"Keypad information contains character that is not a DTMF digit\", EXPFILL }},",
          "7097:     };",
          "7099:     expert_module_t* expert_a_dtap;",
          "7101:     ett[0]  = &ett_dtap_msg;",
          "7102:     ett[1]  = &ett_dtap_oct_1;",
          "7103:     ett[2]  = &ett_cm_srvc_type;",
          "7104:     ett[3]  = &ett_gsm_enc_info;",
          "7105:     ett[4]  = &ett_bc_oct_3;",
          "7106:     ett[5]  = &ett_bc_oct_3a;",
          "7107:     ett[6]  = &ett_bc_oct_4;",
          "7108:     ett[7]  = &ett_bc_oct_5;",
          "7109:     ett[8]  = &ett_bc_oct_5a;",
          "7110:     ett[9]  = &ett_bc_oct_5b;",
          "7111:     ett[10] = &ett_bc_oct_6;",
          "7112:     ett[11] = &ett_bc_oct_6a;",
          "7113:     ett[12] = &ett_bc_oct_6b;",
          "7114:     ett[13] = &ett_bc_oct_6c;",
          "7115:     ett[14] = &ett_bc_oct_6d;",
          "7116:     ett[15] = &ett_bc_oct_6e;",
          "7117:     ett[16] = &ett_bc_oct_6f;",
          "7118:     ett[17] = &ett_bc_oct_6g;",
          "7119:     ett[18] = &ett_bc_oct_7;",
          "7120:     ett[19] = &ett_epc_ue_tl_a_lb_setup;",
          "7121:     ett[20] = &ett_mm_timer;",
          "7123:     last_offset = NUM_INDIVIDUAL_ELEMS;",
          "7125:     for (i=0; i < NUM_GSM_DTAP_MSG_MM; i++, last_offset++)",
          "7126:     {",
          "7127:         ett_gsm_dtap_msg_mm[i] = -1;",
          "7128:         ett[last_offset] = &ett_gsm_dtap_msg_mm[i];",
          "7129:     }",
          "7131:     for (i=0; i < NUM_GSM_DTAP_MSG_CC; i++, last_offset++)",
          "7132:     {",
          "7133:         ett_gsm_dtap_msg_cc[i] = -1;",
          "7134:         ett[last_offset] = &ett_gsm_dtap_msg_cc[i];",
          "7135:     }",
          "7137:     for (i=0; i < NUM_GSM_DTAP_MSG_SMS; i++, last_offset++)",
          "7138:     {",
          "7139:         ett_gsm_dtap_msg_sms[i] = -1;",
          "7140:         ett[last_offset] = &ett_gsm_dtap_msg_sms[i];",
          "7141:     }",
          "7143:     for (i=0; i < NUM_GSM_DTAP_MSG_SS; i++, last_offset++)",
          "7144:     {",
          "7145:         ett_gsm_dtap_msg_ss[i] = -1;",
          "7146:         ett[last_offset] = &ett_gsm_dtap_msg_ss[i];",
          "7147:     }",
          "7149:     for (i=0; i < NUM_GSM_DTAP_MSG_TP; i++, last_offset++)",
          "7150:     {",
          "7151:         ett_gsm_dtap_msg_tp[i] = -1;",
          "7152:         ett[last_offset] = &ett_gsm_dtap_msg_tp[i];",
          "7153:     }",
          "7155:     for (i=0; i < NUM_GSM_DTAP_ELEM; i++, last_offset++)",
          "7156:     {",
          "7157:         ett_gsm_dtap_elem[i] = -1;",
          "7158:         ett[last_offset] = &ett_gsm_dtap_elem[i];",
          "7159:     }",
          "7163:     proto_a_dtap =",
          "7164:         proto_register_protocol(\"GSM A-I/F DTAP\", \"GSM DTAP\", \"gsm_a.dtap\");",
          "7166:     proto_register_field_array(proto_a_dtap, hf, array_length(hf));",
          "7168:     proto_register_subtree_array(ett, array_length(ett));",
          "7169:     expert_a_dtap = expert_register_protocol(proto_a_dtap);",
          "7170:     expert_register_field_array(expert_a_dtap, ei, array_length(ei));",
          "7174:     register_dissector(\"gsm_a_dtap\", dissect_dtap, proto_a_dtap);",
          "7180:     dissector_handle_t dtap_handle;",
          "7182:     dtap_handle = find_dissector(\"gsm_a_dtap\");",
          "7183:     dissector_add_uint(\"bssap.pdu_type\", BSSAP_PDU_TYPE_DTAP, dtap_handle);",
          "7184:     dissector_add_uint(\"ranap.nas_pdu\", BSSAP_PDU_TYPE_DTAP, dtap_handle);",
          "7190:     data_handle    = find_dissector(\"data\");",
          "7191:     gsm_map_handle = find_dissector(\"gsm_map\");",
          "7192:     rp_handle      = find_dissector(\"gsm_a_rp\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}