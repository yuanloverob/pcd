{
  "cve_id": "CVE-2022-21727",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of shape inference for `Dequantize` is vulnerable to an integer overflow weakness. The `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes `axis + 1`, an attacker can trigger an integer overflow. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "b64638ec5ccaa77b7c1eb90958e3d85ce381f91b",
  "patch_info": {
    "commit_hash": "b64638ec5ccaa77b7c1eb90958e3d85ce381f91b",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/b64638ec5ccaa77b7c1eb90958e3d85ce381f91b",
    "files": [
      "tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ],
    "message": "Fix Integer overflow error in Dequantize op shape function, by adding a bound check on axis.\n\nPiperOrigin-RevId: 412121389\nChange-Id: I3088dbad9e90f9998d406b618c16694388a9dfb4",
    "before_after_code_files": [
      "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
      "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include \"tensorflow/core/framework/types.h\"",
      "25: #include \"tensorflow/core/framework/types.pb.h\"",
      "26: #include \"tensorflow/core/lib/core/errors.h\"",
      "27: #include \"tensorflow/core/util/mirror_pad_mode.h\"",
      "28: #include \"tensorflow/core/util/padding.h\"",
      "29: #include \"tensorflow/core/util/strided_slice_op.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #include \"tensorflow/core/platform/types.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3028:         return errors::InvalidArgument(\"axis should be at least -1, got \",",
      "3029:                                        axis);",
      "3030:       }",
      "3031:       const int minmax_rank = (axis == -1) ? 0 : 1;",
      "3032:       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));",
      "3033:       ShapeHandle minmax;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3032:       auto input_dims = c->Rank(c->input(0));",
      "3033:       if (axis > input_dims) {",
      "3034:         return errors::InvalidArgument(",
      "3035:             \"Axis must be less than input dimension(\", input_dims, \"), got \",",
      "3036:             axis);",
      "3037:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3035:       TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));",
      "3036:       if (axis != -1) {",
      "3037:         ShapeHandle input;",
      "3038:         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));",
      "3039:         DimensionHandle depth;",
      "3040:         TF_RETURN_IF_ERROR(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3045:         if (axis >= kint32max) {",
      "3049:           return errors::InvalidArgument(",
      "3050:               \"Axis cannot be >= kint32max value, got \", axis);",
      "3051:         }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1704:       output_grad = gradient_checker_v2.compute_gradient(f, [input_tensor])",
      "1705:       self.assertAllClose(output_grad[0], np.zeros([1, 4, 4]))",
      "1708: @test_util.run_all_in_graph_and_eager_modes",
      "1709: class SortedSearchTest(test_util.TensorFlowTestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1707:   def testOutOfBoundAxis(self):",
      "1708:     input_tensor = constant_op.constant([1., 1.])",
      "1709:     input_min = [0]",
      "1710:     input_max = [1]",
      "1711:     q_input, _, _ = array_ops.quantize(input_tensor, 0, 1, dtypes.qint32)",
      "1712:     error = (errors.InvalidArgumentError, ValueError)",
      "1713:     with self.assertRaisesRegex(error,",
      "1714:                                 r\".*Axis must be less than input dimension.*\"):",
      "1715:       self.evaluate(",
      "1716:           gen_array_ops.dequantize(",
      "1717:               input=q_input,",
      "1718:               min_range=input_min,",
      "1719:               max_range=input_max,",
      "1720:               axis=2**31 - 1))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e306b004c7fb3c8cec210c53a9777dbcf13263e",
      "candidate_info": {
        "commit_hash": "5e306b004c7fb3c8cec210c53a9777dbcf13263e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5e306b004c7fb3c8cec210c53a9777dbcf13263e",
        "files": [
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix Integer overflow error in Dequantize op shape function, by adding a bound check on axis.\n\nPiperOrigin-RevId: 412121389\nChange-Id: I3088dbad9e90f9998d406b618c16694388a9dfb4",
        "before_after_code_files": [
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/types.h\"",
          "25: #include \"tensorflow/core/framework/types.pb.h\"",
          "26: #include \"tensorflow/core/lib/core/errors.h\"",
          "27: #include \"tensorflow/core/util/mirror_pad_mode.h\"",
          "28: #include \"tensorflow/core/util/padding.h\"",
          "29: #include \"tensorflow/core/util/strided_slice_op.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3025:         return errors::InvalidArgument(\"axis should be at least -1, got \",",
          "3026:                                        axis);",
          "3027:       }",
          "3028:       const int minmax_rank = (axis == -1) ? 0 : 1;",
          "3029:       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));",
          "3030:       ShapeHandle minmax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3029:       auto input_dims = c->Rank(c->input(0));",
          "3030:       if (axis > input_dims) {",
          "3031:         return errors::InvalidArgument(",
          "3032:             \"Axis must be less than input dimension(\", input_dims, \"), got \",",
          "3033:             axis);",
          "3034:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3032:       TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));",
          "3033:       if (axis != -1) {",
          "3034:         ShapeHandle input;",
          "3035:         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));",
          "3036:         DimensionHandle depth;",
          "3037:         TF_RETURN_IF_ERROR(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3042:         if (axis >= kint32max) {",
          "3046:           return errors::InvalidArgument(",
          "3047:               \"Axis cannot be >= kint32max value, got \", axis);",
          "3048:         }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:       output_grad = gradient_checker_v2.compute_gradient(f, [input_tensor])",
          "1702:       self.assertAllClose(output_grad[0], np.zeros([1, 4, 4]))",
          "1705: @test_util.run_all_in_graph_and_eager_modes",
          "1706: class SortedSearchTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1704:   def testOutOfBoundAxis(self):",
          "1705:     input_tensor = constant_op.constant([1., 1.])",
          "1706:     input_min = [0]",
          "1707:     input_max = [1]",
          "1708:     q_input, _, _ = array_ops.quantize(input_tensor, 0, 1, dtypes.qint32)",
          "1709:     error = (errors.InvalidArgumentError, ValueError)",
          "1710:     with self.assertRaisesRegex(error,",
          "1711:                                 r\".*Axis must be less than input dimension.*\"):",
          "1712:       self.evaluate(",
          "1713:           gen_array_ops.dequantize(",
          "1714:               input=q_input,",
          "1715:               min_range=input_min,",
          "1716:               max_range=input_max,",
          "1717:               axis=2**31 - 1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0fe727a1b0bf61c6cce6354c1de5b8285156606",
      "candidate_info": {
        "commit_hash": "e0fe727a1b0bf61c6cce6354c1de5b8285156606",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e0fe727a1b0bf61c6cce6354c1de5b8285156606",
        "files": [
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix Integer overflow error in Dequantize op shape function, by adding a bound check on axis.\n\nPiperOrigin-RevId: 412121389\nChange-Id: I3088dbad9e90f9998d406b618c16694388a9dfb4",
        "before_after_code_files": [
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/types.h\"",
          "25: #include \"tensorflow/core/framework/types.pb.h\"",
          "26: #include \"tensorflow/core/lib/core/errors.h\"",
          "27: #include \"tensorflow/core/util/mirror_pad_mode.h\"",
          "28: #include \"tensorflow/core/util/padding.h\"",
          "29: #include \"tensorflow/core/util/strided_slice_op.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3022:         return errors::InvalidArgument(\"axis should be at least -1, got \",",
          "3023:                                        axis);",
          "3024:       }",
          "3025:       const int minmax_rank = (axis == -1) ? 0 : 1;",
          "3026:       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));",
          "3027:       ShapeHandle minmax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3026:       auto input_dims = c->Rank(c->input(0));",
          "3027:       if (axis > input_dims) {",
          "3028:         return errors::InvalidArgument(",
          "3029:             \"Axis must be less than input dimension(\", input_dims, \"), got \",",
          "3030:             axis);",
          "3031:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3029:       TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));",
          "3030:       if (axis != -1) {",
          "3031:         ShapeHandle input;",
          "3032:         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));",
          "3033:         DimensionHandle depth;",
          "3034:         TF_RETURN_IF_ERROR(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3039:         if (axis >= kint32max) {",
          "3043:           return errors::InvalidArgument(",
          "3044:               \"Axis cannot be >= kint32max value, got \", axis);",
          "3045:         }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:       output_grad = gradient_checker_v2.compute_gradient(f, [input_tensor])",
          "1702:       self.assertAllClose(output_grad[0], np.zeros([1, 4, 4]))",
          "1705: @test_util.run_all_in_graph_and_eager_modes",
          "1706: class SortedSearchTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1704:   def testOutOfBoundAxis(self):",
          "1705:     input_tensor = constant_op.constant([1., 1.])",
          "1706:     input_min = [0]",
          "1707:     input_max = [1]",
          "1708:     q_input, _, _ = array_ops.quantize(input_tensor, 0, 1, dtypes.qint32)",
          "1709:     error = (errors.InvalidArgumentError, ValueError)",
          "1710:     with self.assertRaisesRegex(error,",
          "1711:                                 r\".*Axis must be less than input dimension.*\"):",
          "1712:       self.evaluate(",
          "1713:           gen_array_ops.dequantize(",
          "1714:               input=q_input,",
          "1715:               min_range=input_min,",
          "1716:               max_range=input_max,",
          "1717:               axis=2**31 - 1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab44982f55d13d03d003b1bcbc7c77d3b27a8df1",
      "candidate_info": {
        "commit_hash": "ab44982f55d13d03d003b1bcbc7c77d3b27a8df1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ab44982f55d13d03d003b1bcbc7c77d3b27a8df1",
        "files": [
          "tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix Integer overflow error in Dequantize op shape function, by adding a bound check on axis.\n\nPiperOrigin-RevId: 412121389\nChange-Id: I3088dbad9e90f9998d406b618c16694388a9dfb4",
        "before_after_code_files": [
          "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/array_ops.cc||tensorflow/core/ops/array_ops.cc": [
          "File: tensorflow/core/ops/array_ops.cc -> tensorflow/core/ops/array_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"tensorflow/core/framework/types.h\"",
          "25: #include \"tensorflow/core/framework/types.pb.h\"",
          "26: #include \"tensorflow/core/lib/core/errors.h\"",
          "27: #include \"tensorflow/core/util/mirror_pad_mode.h\"",
          "28: #include \"tensorflow/core/util/padding.h\"",
          "29: #include \"tensorflow/core/util/strided_slice_op.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3033:         return errors::InvalidArgument(\"axis should be at least -1, got \",",
          "3034:                                        axis);",
          "3035:       }",
          "3036:       const int minmax_rank = (axis == -1) ? 0 : 1;",
          "3037:       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));",
          "3038:       ShapeHandle minmax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3037:       auto input_dims = c->Rank(c->input(0));",
          "3038:       if (axis > input_dims) {",
          "3039:         return errors::InvalidArgument(",
          "3040:             \"Axis must be less than input dimension(\", input_dims, \"), got \",",
          "3041:             axis);",
          "3042:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3040:       TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));",
          "3041:       if (axis != -1) {",
          "3042:         ShapeHandle input;",
          "3043:         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));",
          "3044:         DimensionHandle depth;",
          "3045:         TF_RETURN_IF_ERROR(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3050:         if (axis >= kint32max) {",
          "3054:           return errors::InvalidArgument(",
          "3055:               \"Axis cannot be >= kint32max value, got \", axis);",
          "3056:         }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1703:       output_grad = gradient_checker_v2.compute_gradient(f, [input_tensor])",
          "1704:       self.assertAllClose(output_grad[0], np.zeros([1, 4, 4]))",
          "1707: @test_util.run_all_in_graph_and_eager_modes",
          "1708: class SortedSearchTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1706:   def testOutOfBoundAxis(self):",
          "1707:     input_tensor = constant_op.constant([1., 1.])",
          "1708:     input_min = [0]",
          "1709:     input_max = [1]",
          "1710:     q_input, _, _ = array_ops.quantize(input_tensor, 0, 1, dtypes.qint32)",
          "1711:     error = (errors.InvalidArgumentError, ValueError)",
          "1712:     with self.assertRaisesRegex(error,",
          "1713:                                 r\".*Axis must be less than input dimension.*\"):",
          "1714:       self.evaluate(",
          "1715:           gen_array_ops.dequantize(",
          "1716:               input=q_input,",
          "1717:               min_range=input_min,",
          "1718:               max_range=input_max,",
          "1719:               axis=2**31 - 1))",
          "",
          "---------------"
        ]
      }
    }
  ]
}