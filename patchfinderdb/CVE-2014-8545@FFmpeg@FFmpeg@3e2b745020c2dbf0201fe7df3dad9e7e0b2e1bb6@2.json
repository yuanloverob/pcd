{
  "cve_id": "CVE-2014-8545",
  "cve_desc": "libavcodec/pngdec.c in FFmpeg before 2.4.2 accepts the monochrome-black format without verifying that the bits-per-pixel value is 1, which allows remote attackers to cause a denial of service (out-of-bounds access) or possibly have unspecified other impact via crafted PNG data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
  "patch_info": {
    "commit_hash": "3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
    "files": [
      "libavcodec/pngdec.c"
    ],
    "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/pngdec.c||libavcodec/pngdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/pngdec.c||libavcodec/pngdec.c": [
      "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "650:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
      "651:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
      "652:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
      "654:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
      "655:                 } else if (s->bit_depth == 8 &&",
      "656:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
      "",
      "[Removed Lines]",
      "653:                 } else if (s->bit_depth == 1) {",
      "",
      "[Added Lines]",
      "653:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99e737a7c787875b6c123e0b2ac32276fbeb5852",
      "candidate_info": {
        "commit_hash": "99e737a7c787875b6c123e0b2ac32276fbeb5852",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/99e737a7c787875b6c123e0b2ac32276fbeb5852",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "pngdec: return correct error code from decode_frame_common\n\nDuring the loop ret can get changed. Since it is not set on all failure\npaths, decode_frame_common can return 0 even though an error occurred.\n\nSigned-off-by: Andreas Cadhalpun <Andreas.Cadhalpun@googlemail.com>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 8f760be4d312bb6e78f80d39b9d0062253332e08)\nSigned-off-by: Andreas Cadhalpun <Andreas.Cadhalpun@googlemail.com>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:     AVDictionary *metadata  = NULL;",
          "969:     uint32_t tag, length;",
          "970:     int decode_next_dat = 0;",
          "972:     AVFrame *ref;",
          "974:     for (;;) {",
          "",
          "[Removed Lines]",
          "971:     int ret = AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "971:     int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:             if (   s->state & PNG_ALLIMAGE",
          "985:                 && avctx->strict_std_compliance <= FF_COMPLIANCE_NORMAL)",
          "986:                 goto exit_loop;",
          "987:             goto fail;",
          "988:         }",
          "990:         length = bytestream2_get_be32(&s->gb);",
          "991:         if (length > 0x7fffffff || length > bytestream2_get_bytes_left(&s->gb)) {",
          "992:             av_log(avctx, AV_LOG_ERROR, \"chunk too big\\n\");",
          "993:             goto fail;",
          "994:         }",
          "995:         tag = bytestream2_get_le32(&s->gb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:             ret = AVERROR_INVALIDDATA;",
          "994:             ret = AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1001:                 ((tag >> 24) & 0xff), length);",
          "1002:         switch (tag) {",
          "1003:         case MKTAG('I', 'H', 'D', 'R'):",
          "1005:                 goto fail;",
          "1006:             break;",
          "1007:         case MKTAG('p', 'H', 'Y', 's'):",
          "1009:                 goto fail;",
          "1010:             break;",
          "1011:         case MKTAG('f', 'c', 'T', 'L'):",
          "",
          "[Removed Lines]",
          "1004:             if (decode_ihdr_chunk(avctx, s, length) < 0)",
          "1008:             if (decode_phys_chunk(avctx, s) < 0)",
          "",
          "[Added Lines]",
          "1006:             if ((ret = decode_ihdr_chunk(avctx, s, length)) < 0)",
          "1010:             if ((ret = decode_phys_chunk(avctx, s)) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1018:         case MKTAG('f', 'd', 'A', 'T'):",
          "1019:             if (!CONFIG_APNG_DECODER || avctx->codec_id != AV_CODEC_ID_APNG)",
          "1020:                 goto skip_tag;",
          "1022:                 goto fail;",
          "1023:             bytestream2_get_be32(&s->gb);",
          "1024:             length -= 4;",
          "1026:         case MKTAG('I', 'D', 'A', 'T'):",
          "1027:             if (CONFIG_APNG_DECODER && avctx->codec_id == AV_CODEC_ID_APNG && !decode_next_dat)",
          "1028:                 goto skip_tag;",
          "1030:                 goto fail;",
          "1031:             break;",
          "1032:         case MKTAG('P', 'L', 'T', 'E'):",
          "",
          "[Removed Lines]",
          "1021:             if (!decode_next_dat)",
          "1029:             if (decode_idat_chunk(avctx, s, length, p) < 0)",
          "",
          "[Added Lines]",
          "1023:             if (!decode_next_dat) {",
          "1024:                 ret = AVERROR_INVALIDDATA;",
          "1026:             }",
          "1033:             if ((ret = decode_idat_chunk(avctx, s, length, p)) < 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1051:             if (!(s->state & PNG_ALLIMAGE))",
          "1052:                 av_log(avctx, AV_LOG_ERROR, \"IEND without all image\\n\");",
          "1053:             if (!(s->state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "1054:                 goto fail;",
          "1055:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:                 ret = AVERROR_INVALIDDATA;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b04f6dfd3c52bdf1be8158b5d0b8822b60c82432",
      "candidate_info": {
        "commit_hash": "b04f6dfd3c52bdf1be8158b5d0b8822b60c82432",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b04f6dfd3c52bdf1be8158b5d0b8822b60c82432",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "pngdec: return correct error code from decode_frame_common\n\nDuring the loop ret can get changed. Since it is not set on all failure\npaths, decode_frame_common can return 0 even though an error occurred.\n\nSigned-off-by: Andreas Cadhalpun <Andreas.Cadhalpun@googlemail.com>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 8f760be4d312bb6e78f80d39b9d0062253332e08)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "963:     AVDictionary *metadata  = NULL;",
          "964:     uint32_t tag, length;",
          "965:     int decode_next_dat = 0;",
          "967:     AVFrame *ref;",
          "969:     for (;;) {",
          "",
          "[Removed Lines]",
          "966:     int ret = AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "966:     int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:             if (   s->state & PNG_ALLIMAGE",
          "980:                 && avctx->strict_std_compliance <= FF_COMPLIANCE_NORMAL)",
          "981:                 goto exit_loop;",
          "982:             goto fail;",
          "983:         }",
          "985:         length = bytestream2_get_be32(&s->gb);",
          "986:         if (length > 0x7fffffff || length > bytestream2_get_bytes_left(&s->gb)) {",
          "987:             av_log(avctx, AV_LOG_ERROR, \"chunk too big\\n\");",
          "988:             goto fail;",
          "989:         }",
          "990:         tag = bytestream2_get_le32(&s->gb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:             ret = AVERROR_INVALIDDATA;",
          "989:             ret = AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "996:                 ((tag >> 24) & 0xff), length);",
          "997:         switch (tag) {",
          "998:         case MKTAG('I', 'H', 'D', 'R'):",
          "1000:                 goto fail;",
          "1001:             break;",
          "1002:         case MKTAG('p', 'H', 'Y', 's'):",
          "1004:                 goto fail;",
          "1005:             break;",
          "1006:         case MKTAG('f', 'c', 'T', 'L'):",
          "",
          "[Removed Lines]",
          "999:             if (decode_ihdr_chunk(avctx, s, length) < 0)",
          "1003:             if (decode_phys_chunk(avctx, s) < 0)",
          "",
          "[Added Lines]",
          "1001:             if ((ret = decode_ihdr_chunk(avctx, s, length)) < 0)",
          "1005:             if ((ret = decode_phys_chunk(avctx, s)) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1013:         case MKTAG('f', 'd', 'A', 'T'):",
          "1014:             if (!CONFIG_APNG_DECODER || avctx->codec_id != AV_CODEC_ID_APNG)",
          "1015:                 goto skip_tag;",
          "1017:                 goto fail;",
          "1018:             bytestream2_get_be32(&s->gb);",
          "1019:             length -= 4;",
          "1021:         case MKTAG('I', 'D', 'A', 'T'):",
          "1022:             if (CONFIG_APNG_DECODER && avctx->codec_id == AV_CODEC_ID_APNG && !decode_next_dat)",
          "1023:                 goto skip_tag;",
          "1025:                 goto fail;",
          "1026:             break;",
          "1027:         case MKTAG('P', 'L', 'T', 'E'):",
          "",
          "[Removed Lines]",
          "1016:             if (!decode_next_dat)",
          "1024:             if (decode_idat_chunk(avctx, s, length, p) < 0)",
          "",
          "[Added Lines]",
          "1018:             if (!decode_next_dat) {",
          "1019:                 ret = AVERROR_INVALIDDATA;",
          "1021:             }",
          "1028:             if ((ret = decode_idat_chunk(avctx, s, length, p)) < 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1046:             if (!(s->state & PNG_ALLIMAGE))",
          "1047:                 av_log(avctx, AV_LOG_ERROR, \"IEND without all image\\n\");",
          "1048:             if (!(s->state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "1049:                 goto fail;",
          "1050:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1053:                 ret = AVERROR_INVALIDDATA;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "613cbf31680324fd73558f0e4ad36f1eb062221e",
      "candidate_info": {
        "commit_hash": "613cbf31680324fd73558f0e4ad36f1eb062221e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/613cbf31680324fd73558f0e4ad36f1eb062221e",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "Fix some 1bit png samples, they can be palettised.\n\nFixes ticket #767.",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:                 } else if (s->bit_depth == 16 &&",
          "495:                            s->color_type == PNG_COLOR_TYPE_RGB) {",
          "496:                     avctx->pix_fmt = PIX_FMT_RGB48BE;",
          "499:                 } else if (s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "500:                     avctx->pix_fmt = PIX_FMT_PAL8;",
          "501:                 } else if (s->bit_depth == 8 &&",
          "502:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "503:                     avctx->pix_fmt = PIX_FMT_GRAY8A;",
          "",
          "[Removed Lines]",
          "497:                 } else if (s->bit_depth == 1) {",
          "498:                     avctx->pix_fmt = PIX_FMT_MONOBLACK;",
          "",
          "[Added Lines]",
          "499:                 } else if (s->bit_depth == 1) {",
          "500:                     avctx->pix_fmt = PIX_FMT_MONOBLACK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:     }",
          "610:  exit_loop:",
          "612:     if(s->bits_per_pixel == 2){",
          "613:         int i, j;",
          "614:         uint8_t *pd = s->current_picture->data[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:     if(s->bits_per_pixel == 1 && s->color_type == PNG_COLOR_TYPE_PALETTE){",
          "613:         int i, j;",
          "614:         uint8_t *pd = s->current_picture->data[0];",
          "615:         for(j=0; j < s->height; j++) {",
          "616:             for(i=s->width/8-1; i>=0; i--) {",
          "617:                 pd[8*i+7]=  pd[i]    &1;",
          "618:                 pd[8*i+6]= (pd[i]>>1)&1;",
          "619:                 pd[8*i+5]= (pd[i]>>2)&1;",
          "620:                 pd[8*i+4]= (pd[i]>>3)&1;",
          "621:                 pd[8*i+3]= (pd[i]>>4)&1;",
          "622:                 pd[8*i+2]= (pd[i]>>5)&1;",
          "623:                 pd[8*i+1]= (pd[i]>>6)&1;",
          "624:                 pd[8*i+0]=  pd[i]>>7;",
          "625:             }",
          "626:             pd += s->image_linesize;",
          "627:         }",
          "628:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b35fa041521cf2b183e94697d57584c63c64dc3f",
      "candidate_info": {
        "commit_hash": "b35fa041521cf2b183e94697d57584c63c64dc3f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b35fa041521cf2b183e94697d57584c63c64dc3f",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: create a function to decode IDAT chunk.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:     return 0;",
          "564: }",
          "566: static int decode_frame_png(AVCodecContext *avctx,",
          "567:                         void *data, int *got_frame,",
          "568:                         AVPacket *avpkt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: static int decode_idat_chunk(AVCodecContext *avctx, PNGDecContext *s,",
          "567:                              uint32_t length, AVFrame *p)",
          "568: {",
          "569:     int ret;",
          "571:     if (!(s->state & PNG_IHDR)) {",
          "572:         av_log(avctx, AV_LOG_ERROR, \"IDAT without IHDR\\n\");",
          "573:         return AVERROR_INVALIDDATA;",
          "574:     }",
          "575:     if (!(s->state & PNG_IDAT)) {",
          "577:         avctx->width  = s->width;",
          "578:         avctx->height = s->height;",
          "580:         s->channels       = ff_png_get_nb_channels(s->color_type);",
          "581:         s->bits_per_pixel = s->bit_depth * s->channels;",
          "582:         s->bpp            = (s->bits_per_pixel + 7) >> 3;",
          "583:         s->row_size       = (avctx->width * s->bits_per_pixel + 7) >> 3;",
          "585:         if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "586:                 s->color_type == PNG_COLOR_TYPE_RGB) {",
          "587:             avctx->pix_fmt = AV_PIX_FMT_RGB24;",
          "588:         } else if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "589:                 s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "590:             avctx->pix_fmt = AV_PIX_FMT_RGBA;",
          "591:         } else if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "592:                 s->color_type == PNG_COLOR_TYPE_GRAY) {",
          "593:             avctx->pix_fmt = AV_PIX_FMT_GRAY8;",
          "594:         } else if (s->bit_depth == 16 &&",
          "595:                 s->color_type == PNG_COLOR_TYPE_GRAY) {",
          "596:             avctx->pix_fmt = AV_PIX_FMT_GRAY16BE;",
          "597:         } else if (s->bit_depth == 16 &&",
          "598:                 s->color_type == PNG_COLOR_TYPE_RGB) {",
          "599:             avctx->pix_fmt = AV_PIX_FMT_RGB48BE;",
          "600:         } else if (s->bit_depth == 16 &&",
          "601:                 s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "602:             avctx->pix_fmt = AV_PIX_FMT_RGBA64BE;",
          "603:         } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
          "604:                 s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "605:             avctx->pix_fmt = AV_PIX_FMT_PAL8;",
          "606:         } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "607:             avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
          "608:         } else if (s->bit_depth == 8 &&",
          "609:                 s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "610:             avctx->pix_fmt = AV_PIX_FMT_YA8;",
          "611:         } else if (s->bit_depth == 16 &&",
          "612:                 s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "613:             avctx->pix_fmt = AV_PIX_FMT_YA16BE;",
          "614:         } else {",
          "615:             av_log(avctx, AV_LOG_ERROR, \"unsupported bit depth %d \"",
          "616:                     \"and color type %d\\n\",",
          "617:                     s->bit_depth, s->color_type);",
          "618:             return AVERROR_INVALIDDATA;",
          "619:         }",
          "621:         if ((ret = ff_thread_get_buffer(avctx, &s->picture, AV_GET_BUFFER_FLAG_REF)) < 0)",
          "622:             return ret;",
          "623:         ff_thread_finish_setup(avctx);",
          "625:         p->pict_type        = AV_PICTURE_TYPE_I;",
          "626:         p->key_frame        = 1;",
          "627:         p->interlaced_frame = !!s->interlace_type;",
          "630:         if (!s->interlace_type) {",
          "631:             s->crow_size = s->row_size + 1;",
          "632:         } else {",
          "633:             s->pass          = 0;",
          "634:             s->pass_row_size = ff_png_pass_row_size(s->pass,",
          "635:                     s->bits_per_pixel,",
          "636:                     s->width);",
          "637:             s->crow_size = s->pass_row_size + 1;",
          "638:         }",
          "639:         av_dlog(avctx, \"row_size=%d crow_size =%d\\n\",",
          "640:                 s->row_size, s->crow_size);",
          "641:         s->image_buf      = p->data[0];",
          "642:         s->image_linesize = p->linesize[0];",
          "644:         if (avctx->pix_fmt == AV_PIX_FMT_PAL8)",
          "645:             memcpy(p->data[1], s->palette, 256 * sizeof(uint32_t));",
          "647:         av_fast_padded_mallocz(&s->last_row, &s->last_row_size, s->row_size);",
          "648:         if (!s->last_row)",
          "649:             return AVERROR_INVALIDDATA;",
          "650:         if (s->interlace_type ||",
          "651:                 s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "652:             av_fast_padded_malloc(&s->tmp_row, &s->tmp_row_size, s->row_size);",
          "653:             if (!s->tmp_row)",
          "654:                 return AVERROR_INVALIDDATA;",
          "655:         }",
          "657:         av_fast_padded_malloc(&s->buffer, &s->buffer_size, s->row_size + 16);",
          "658:         if (!s->buffer)",
          "659:             return AVERROR(ENOMEM);",
          "662:         s->crow_buf          = s->buffer + 15;",
          "663:         s->zstream.avail_out = s->crow_size;",
          "664:         s->zstream.next_out  = s->crow_buf;",
          "665:     }",
          "666:     s->state |= PNG_IDAT;",
          "667:     if ((ret = png_decode_idat(s, length)) < 0)",
          "668:         return ret;",
          "671:     return 0;",
          "672: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:                 goto fail;",
          "633:             break;",
          "634:         case MKTAG('I', 'D', 'A', 'T'):",
          "732:                 goto fail;",
          "734:             break;",
          "735:         case MKTAG('P', 'L', 'T', 'E'):",
          "736:         {",
          "",
          "[Removed Lines]",
          "635:             if (!(s->state & PNG_IHDR)) {",
          "636:                 av_log(avctx, AV_LOG_ERROR, \"IDAT without IHDR\\n\");",
          "637:                 goto fail;",
          "638:             }",
          "639:             if (!(s->state & PNG_IDAT)) {",
          "641:                 avctx->width  = s->width;",
          "642:                 avctx->height = s->height;",
          "644:                 s->channels       = ff_png_get_nb_channels(s->color_type);",
          "645:                 s->bits_per_pixel = s->bit_depth * s->channels;",
          "646:                 s->bpp            = (s->bits_per_pixel + 7) >> 3;",
          "647:                 s->row_size       = (avctx->width * s->bits_per_pixel + 7) >> 3;",
          "649:                 if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "650:                     s->color_type == PNG_COLOR_TYPE_RGB) {",
          "651:                     avctx->pix_fmt = AV_PIX_FMT_RGB24;",
          "652:                 } else if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "653:                            s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "654:                     avctx->pix_fmt = AV_PIX_FMT_RGBA;",
          "655:                 } else if ((s->bit_depth == 2 || s->bit_depth == 4 || s->bit_depth == 8) &&",
          "656:                            s->color_type == PNG_COLOR_TYPE_GRAY) {",
          "657:                     avctx->pix_fmt = AV_PIX_FMT_GRAY8;",
          "658:                 } else if (s->bit_depth == 16 &&",
          "659:                            s->color_type == PNG_COLOR_TYPE_GRAY) {",
          "660:                     avctx->pix_fmt = AV_PIX_FMT_GRAY16BE;",
          "661:                 } else if (s->bit_depth == 16 &&",
          "662:                            s->color_type == PNG_COLOR_TYPE_RGB) {",
          "663:                     avctx->pix_fmt = AV_PIX_FMT_RGB48BE;",
          "664:                 } else if (s->bit_depth == 16 &&",
          "665:                            s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "666:                     avctx->pix_fmt = AV_PIX_FMT_RGBA64BE;",
          "667:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
          "668:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "669:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
          "670:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "671:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
          "672:                 } else if (s->bit_depth == 8 &&",
          "673:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "674:                     avctx->pix_fmt = AV_PIX_FMT_YA8;",
          "675:                 } else if (s->bit_depth == 16 &&",
          "676:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "677:                     avctx->pix_fmt = AV_PIX_FMT_YA16BE;",
          "678:                 } else {",
          "679:                     av_log(avctx, AV_LOG_ERROR, \"unsupported bit depth %d \"",
          "680:                                                 \"and color type %d\\n\",",
          "681:                                                  s->bit_depth, s->color_type);",
          "682:                     goto fail;",
          "683:                 }",
          "685:                 if (ff_thread_get_buffer(avctx, &s->picture, AV_GET_BUFFER_FLAG_REF) < 0)",
          "686:                     goto fail;",
          "687:                 ff_thread_finish_setup(avctx);",
          "689:                 p->pict_type        = AV_PICTURE_TYPE_I;",
          "690:                 p->key_frame        = 1;",
          "691:                 p->interlaced_frame = !!s->interlace_type;",
          "694:                 if (!s->interlace_type) {",
          "695:                     s->crow_size = s->row_size + 1;",
          "696:                 } else {",
          "697:                     s->pass          = 0;",
          "698:                     s->pass_row_size = ff_png_pass_row_size(s->pass,",
          "699:                                                             s->bits_per_pixel,",
          "700:                                                             s->width);",
          "701:                     s->crow_size = s->pass_row_size + 1;",
          "702:                 }",
          "703:                 av_dlog(avctx, \"row_size=%d crow_size =%d\\n\",",
          "704:                         s->row_size, s->crow_size);",
          "705:                 s->image_buf      = p->data[0];",
          "706:                 s->image_linesize = p->linesize[0];",
          "708:                 if (avctx->pix_fmt == AV_PIX_FMT_PAL8)",
          "709:                     memcpy(p->data[1], s->palette, 256 * sizeof(uint32_t));",
          "711:                 av_fast_padded_mallocz(&s->last_row, &s->last_row_size, s->row_size);",
          "712:                 if (!s->last_row)",
          "713:                     goto fail;",
          "714:                 if (s->interlace_type ||",
          "715:                     s->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {",
          "716:                     av_fast_padded_malloc(&s->tmp_row, &s->tmp_row_size, s->row_size);",
          "717:                     if (!s->tmp_row)",
          "718:                         goto fail;",
          "719:                 }",
          "721:                 av_fast_padded_malloc(&s->buffer, &s->buffer_size, s->row_size + 16);",
          "722:                 if (!s->buffer)",
          "723:                     goto fail;",
          "726:                 s->crow_buf          = s->buffer + 15;",
          "727:                 s->zstream.avail_out = s->crow_size;",
          "728:                 s->zstream.next_out  = s->crow_buf;",
          "729:             }",
          "730:             s->state |= PNG_IDAT;",
          "731:             if (png_decode_idat(s, length) < 0)",
          "",
          "[Added Lines]",
          "743:             if (decode_idat_chunk(avctx, s, length, p) < 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}