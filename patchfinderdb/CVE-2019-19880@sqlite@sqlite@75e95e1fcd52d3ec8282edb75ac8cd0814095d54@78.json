{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e81e9fdaec5a9492576f20cbdd569db425553df",
      "candidate_info": {
        "commit_hash": "5e81e9fdaec5a9492576f20cbdd569db425553df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e81e9fdaec5a9492576f20cbdd569db425553df",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "The nodeReaderInit() function in FTS3 may not assume that the node is non-empty.\n\nFossilOrigin-Name: 361eb2f682a303bba72b39d322d9de630494ca044fe0508dcb23b6130d312d85",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3797:   p->nNode = nNode;",
          "3802:     p->iOff = 1 + sqlite3Fts3GetVarint(&p->aNode[1], &p->iChild);",
          "3803:   }else{",
          "3804:     p->iOff = 1;",
          "3805:   }",
          "3808: }",
          "",
          "[Removed Lines]",
          "3800:   if( p->aNode[0] ){",
          "3807:   return nodeReaderNext(p);",
          "",
          "[Added Lines]",
          "3800:   if( aNode && aNode[0] ){",
          "3807:   return aNode ? nodeReaderNext(p) : SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 661a3789eb329a2487855e49c31067a9dde4c91c1a3a65b65375d079f906b1da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
      "candidate_info": {
        "commit_hash": "935d9d8260e34e01873ac51988b23f017434a5f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/935d9d8260e34e01873ac51988b23f017434a5f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Expand on header comment for sqlite3WindowCodeStep(). Further simplify the implementation of the same.\n\nFossilOrigin-Name: 5129bcc996b3c9f78ab6b674a4364787e7b353b90f15f027cad4431012022c30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 081263538332bb9c07e62630629007ccbba31bef5dc890f60b4ba58a355f70ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   Parse *pParse,",
          "1499:   ExprList *pOrderBy,",
          "1502: ){",
          "1503:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1505:   if( pOrderBy ){",
          "1506:     int nVal = pOrderBy->nExpr;",
          "1507:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pOrderBy, 0, 0);",
          "1508:     sqlite3VdbeAddOp3(v, OP_Compare, regOld, regNew, nVal);",
          "1509:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1512:     );",
          "1513:     VdbeCoverageEqNe(v);",
          "1514:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1515:   }else{",
          "1517:   }",
          "1519: }",
          "1521: typedef struct WindowCodeArg WindowCodeArg;",
          "",
          "[Removed Lines]",
          "1497: static int windowIfNewPeer(",
          "1504:   int addr;",
          "1510:     addr = sqlite3VdbeAddOp3(",
          "1511:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1518:   return addr;",
          "",
          "[Added Lines]",
          "1497: static void windowIfNewPeer(",
          "1510:     sqlite3VdbeAddOp3(v, OP_Jump,",
          "1511:       sqlite3VdbeCurrentAddr(v)+1, addr, sqlite3VdbeCurrentAddr(v)+1",
          "1516:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1708:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1709:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "1710:     windowReadPeerValues(p, csr, regTmp);",
          "1713:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1714:   }",
          "",
          "[Removed Lines]",
          "1711:     addr = windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg);",
          "1712:     sqlite3VdbeChangeP2(v, addr, addrContinue);",
          "",
          "[Added Lines]",
          "1710:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1969:   int addrShortcut = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1985:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1986:   );",
          "1992:   memset(&s, 0, sizeof(WindowCodeArg));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2134:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2083:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2084:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2085:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2087:     sqlite3VdbeJumpHere(v, addrGe);",
          "2088:   }",
          "2089:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "[Removed Lines]",
          "2086:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Added Lines]",
          "2231:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2104:   }",
          "2106:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2110:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2111:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2112:   if( regPeer ){",
          "2114:   }",
          "2115:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2116:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2107:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2113:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "",
          "[Added Lines]",
          "2252:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2258:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2158:       }",
          "2159:     }",
          "2160:   }",
          "2164:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "2169:   sqlite3WhereEnd(pWInfo);",
          "",
          "[Removed Lines]",
          "2161:   if( addrPeerJump ){",
          "2162:     sqlite3VdbeJumpHere(v, addrPeerJump);",
          "2163:   }",
          "2167:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2168:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "",
          "[Added Lines]",
          "2309:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2081dd859867674dccd51b95d77d42fdada14cf",
      "candidate_info": {
        "commit_hash": "e2081dd859867674dccd51b95d77d42fdada14cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2081dd859867674dccd51b95d77d42fdada14cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz001.test"
        ],
        "message": "Partially revert the test file changes in [4371a0c46e]. It is no longer required following [93ae382e97c23c90].\n\nFossilOrigin-Name: 593a7e6e20a2f91fe3497edd7effad50ac876f7f03c9222e332dfeb43d26882e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6fc0deffa4eed902fd13eefe6d2765f338f3dadc5b29f7cae5064e135417746b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: # cause a rebalance operation, which would leave the btree in a weird",
          "190: # state that would lead to segfaults and or assertion faults.",
          "191: #",
          "195:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "198: # This is a dbfuzz2-generate test case that can cause a page with",
          "199: # pPage->nCell==0 to enter the balancer.",
          "",
          "[Removed Lines]",
          "192: set res {0 {}}",
          "193: ifcapable oversize_cell_check { set res {1 {database disk image is malformed}} }",
          "194: do_catchsql_test dbfuzz001-110 {",
          "196: } $res",
          "",
          "[Added Lines]",
          "192: do_execsql_test dbfuzz001-110 {",
          "194: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a02f237e376effb4547ea5d53033a3f555e6925",
      "candidate_info": {
        "commit_hash": "6a02f237e376effb4547ea5d53033a3f555e6925",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a02f237e376effb4547ea5d53033a3f555e6925",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Remove an unreachable branch.\n\nFossilOrigin-Name: 4c976f171342ba2d39779279c28f3bc088572c440922e3e4421a3bf541263360",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a70958cd7d5cf750c293537856918e5789013b70f6a827f724d83559b38629c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   {",
          "117:     Parse *pParse = pWalker->pParse;",
          "118:     if( pParse && IN_RENAME_OBJECT ){",
          "120:     }",
          "121:   }",
          "122: #endif",
          "",
          "[Removed Lines]",
          "119:       if( walkWindowList(pWalker, p->pWinDefn) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "119:       int rc = walkWindowList(pWalker, p->pWinDefn);",
          "120:       assert( rc==WRC_Continue );",
          "121:       return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
      "candidate_info": {
        "commit_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b13365bbadb5e16da3579fcb8941799760817c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Ensure that a key comparison does not read a collating sequence past the end of the KeyInfo, even if the key field of an index is corrupted by having a string in the last column instead of the ROWID.\n\nFossilOrigin-Name: 058a8006dceda78a894ea9446f057aa60b6d38e96506d4d91bda0ee2f9314ba3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3906:     if( rc!=0 ){",
          "3908:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Removed Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i], pKeyInfo->aColl[i]);",
          "",
          "[Added Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i],",
          "3906:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4333:         mem1.n = (serial_type - 12) / 2;",
          "4334:         testcase( (d1+mem1.n)==(unsigned)nKey1 );",
          "4335:         testcase( (d1+mem1.n+1)==(unsigned)nKey1 );",
          "4337:           pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4340:           mem1.enc = pKeyInfo->enc;",
          "4341:           mem1.db = pKeyInfo->db;",
          "4342:           mem1.flags = MEM_Str;",
          "",
          "[Removed Lines]",
          "4336:         if( (d1+mem1.n) > (unsigned)nKey1 ){",
          "4339:         }else if( (pKeyInfo = pPKey2->pKeyInfo)->aColl[i] ){",
          "",
          "[Added Lines]",
          "4337:         if( (d1+mem1.n) > (unsigned)nKey1",
          "4338:          || (pKeyInfo = pPKey2->pKeyInfo)->nAllField<=i",
          "4339:         ){",
          "4342:         }else if( pKeyInfo->aColl[i] ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}