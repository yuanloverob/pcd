{
  "cve_id": "CVE-2019-19959",
  "cve_desc": "ext/misc/zipfile.c in SQLite 3.30.1 mishandles certain uses of INSERT INTO in situations involving embedded '\\0' characters in filenames, leading to a memory-management error that can be detected by (for example) valgrind.",
  "repo": "sqlite/sqlite",
  "patch_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
  "patch_info": {
    "commit_hash": "d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d8f2d46cbc9925e034a68aaaf60aad788d9373c1",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Fix the zipfile() function in the zipfile extension so that it is able to deal with goofy filenames that contain embedded zeros.\n\nFossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
      "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
      "1634:         zPath = (const char*)zFree;",
      "1636:       }",
      "1637:     }",
      "",
      "[Removed Lines]",
      "1635:         nPath++;",
      "",
      "[Added Lines]",
      "1635:         nPath = (int)strlen(zPath);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2033:   }else{",
      "2034:     if( zName[nName-1]!='/' ){",
      "2035:       zName = zFree = sqlite3_mprintf(\"%s/\", zName);",
      "2037:       if( zName==0 ){",
      "2038:         rc = SQLITE_NOMEM;",
      "2039:         goto zipfile_step_out;",
      "2040:       }",
      "2041:     }else{",
      "2042:       while( nName>1 && zName[nName-2]=='/' ) nName--;",
      "2043:     }",
      "",
      "[Removed Lines]",
      "2036:       nName++;",
      "",
      "[Added Lines]",
      "2040:       nName = (int)strlen(zName);",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4c50afafce8416369f89477ba7fe7d9b047399a5ee5754c73d0e67bbea8d877c",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "192cf36de68b1d29292dbf124e4e824fe93a6f3e",
      "candidate_info": {
        "commit_hash": "192cf36de68b1d29292dbf124e4e824fe93a6f3e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/192cf36de68b1d29292dbf124e4e824fe93a6f3e",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove an extra deflateInit2() call accidently left in check-in [f5ee30426e8876e7]\n\nFossilOrigin-Name: 953e6aa6d9ca09e549c88bc728c322fabdcef581f3b4a7763d95488dddbbd6a5",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/misc/zipfile.c||ext/misc/zipfile.c",
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "ext/misc/zipfile.c||ext/misc/zipfile.c",
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     int res;",
          "1000:     str.next_out = aOut;",
          "1001:     str.avail_out = nAlloc;",
          "1003:     res = deflate(&str, Z_FINISH);",
          "1004:     if( res==Z_STREAM_END ){",
          "",
          "[Removed Lines]",
          "1002:     deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eb95dac7f6482c36853a23234c5ce7af37c7beed8e3675d6a49c4d3a8307e076",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d262c2db8f6ac584d377b347a0dd810f998cbd93",
      "candidate_info": {
        "commit_hash": "d262c2db8f6ac584d377b347a0dd810f998cbd93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d262c2db8f6ac584d377b347a0dd810f998cbd93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "In the WHERE clause debugging output (the .wheretrace output) show the parent index of any WhereTerm that is a child.\n\nFossilOrigin-Name: 7fc733328c5914c747e048c830522ec13e433c0a86388bae47b198a3e220c6c2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56539e1c132632c075efc217ad5951a35e4459605ac128914aec3a7be1e25718",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1762:        iTerm, pTerm, zType, zLeft, pTerm->truthProb,",
          "1763:        pTerm->eOperator, pTerm->wtFlags);",
          "1764:     if( pTerm->iField ){",
          "1768:     }",
          "1769:     sqlite3TreeViewExpr(0, pTerm->pExpr, 0);",
          "1770:   }",
          "1771: }",
          "",
          "[Removed Lines]",
          "1765:       sqlite3DebugPrintf(\" iField=%d\\n\", pTerm->iField);",
          "1766:     }else{",
          "1767:       sqlite3DebugPrintf(\"\\n\");",
          "",
          "[Added Lines]",
          "1765:       sqlite3DebugPrintf(\" iField=%d\", pTerm->iField);",
          "1766:     }",
          "1767:     if( pTerm->iParent>=0 ){",
          "1768:       sqlite3DebugPrintf(\" iParent=%d\", pTerm->iParent);",
          "1770:     sqlite3DebugPrintf(\"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
      "candidate_info": {
        "commit_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d795026705020e58603a4005c99ad0fbfb73b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/update.test"
        ],
        "message": "Enhance the sqlite3VdbeMemAboutToChange() shallow-copy validation mechanism by adding the new OP_ReleaseReg opcode to tell MemAboutToChange() that a range of registers is no longer needed so that the source register can be freely changed.  This is a change to debugging and test builds only and does not impact release builds.  Fix for ticket [c62c5e58524b204d] and [5ad2aa6921faa1ee].  The previous fix to ticket [5ad2aa6921faa1ee] is backed out by this change since this change is a better fix.\n\nFossilOrigin-Name: 36fdeb4f0a66970a35de688b617f90899c89cfdfab659f864df99aa7ebf854ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3680:           }else",
          "3682:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3684:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3685:             return target;",
          "3686:           }else{",
          "",
          "[Removed Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_Copy, iSrc, target);",
          "",
          "[Added Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4065:         sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,",
          "4066:                                    pDef, pExpr->op2);",
          "4067:       }",
          "4070:       }",
          "4071:       return target;",
          "4072:     }",
          "",
          "[Removed Lines]",
          "4068:       if( nFarg && constMask==0 ){",
          "4069:         sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "",
          "[Added Lines]",
          "4068:       if( nFarg ){",
          "4069:         if( constMask==0 ){",
          "4070:           sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "4071:         }else{",
          "4072:           sqlite3VdbeReleaseRegisters(pParse, r1, nFarg, constMask);",
          "4073:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5709: void sqlite3ReleaseTempReg(Parse *pParse, int iReg){",
          "5712:   }",
          "5713: }",
          "",
          "[Removed Lines]",
          "5710:   if( iReg && pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5711:     pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "",
          "[Added Lines]",
          "5714:   if( iReg ){",
          "5715:     sqlite3VdbeReleaseRegisters(pParse, iReg, 1, 0);",
          "5716:     if( pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5717:       pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "5718:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5734:     sqlite3ReleaseTempReg(pParse, iReg);",
          "5735:     return;",
          "5736:   }",
          "5737:   if( nReg>pParse->nRangeReg ){",
          "5738:     pParse->nRangeReg = nReg;",
          "5739:     pParse->iRangeReg = iReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5744:   sqlite3VdbeReleaseRegisters(pParse, iReg, nReg, 0);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2143:   VdbeBranchTaken(iCompare!=0, 2);",
          "2144:   if( iCompare!=0 ) goto jump_to_p2;",
          "2145:   break;",
          "",
          "[Removed Lines]",
          "2140:   assert( pOp>aOp );",
          "2141:   assert( pOp[-1].opcode==OP_Lt || pOp[-1].opcode==OP_Gt );",
          "2142:   assert( pOp[-1].p5 & SQLITE_STOREP2 );",
          "",
          "[Added Lines]",
          "2146: #ifdef SQLITE_DEBUG",
          "2150:   int iAddr;",
          "2151:   for(iAddr = (int)(pOp - aOp) - 1; ALWAYS(iAddr>=0); iAddr--){",
          "2152:     if( aOp[iAddr].opcode==OP_ReleaseReg ) continue;",
          "2153:     assert( aOp[iAddr].opcode==OP_Lt || aOp[iAddr].opcode==OP_Gt );",
          "2154:     assert( aOp[iAddr].p5 & SQLITE_STOREP2 );",
          "2155:     break;",
          "2156:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7685: }",
          "7686: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7703: #ifdef SQLITE_DEBUG",
          "7732: case OP_ReleaseReg: {",
          "7733:   Mem *pMem;",
          "7734:   int i;",
          "7735:   u32 constMask;",
          "7736:   assert( pOp->p1>0 );",
          "7737:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "7738:   pMem = &aMem[pOp->p1];",
          "7739:   constMask = pOp->p3;",
          "7740:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7741:     if( (constMask & MASKBIT32(i))==0 ){",
          "7742:       pMem->pScopyFrom = 0;",
          "7744:     }",
          "7745:   }",
          "7746:   break;",
          "7747: }",
          "7748: #endif",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: void sqlite3VdbeJumpHere(Vdbe*, int addr);",
          "233: int sqlite3VdbeChangeToNoop(Vdbe*, int addr);",
          "234: int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);",
          "235: void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);",
          "236: void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);",
          "237: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #ifdef SQLITE_DEBUG",
          "236:   void sqlite3VdbeReleaseRegisters(Parse*,int addr, int n, u32 mask);",
          "237: #else",
          "238: # define sqlite3VdbeReleaseRegisters(P,A,N,M)",
          "239: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:   }",
          "1187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: #ifdef SQLITE_DEBUG",
          "1194: void sqlite3VdbeReleaseRegisters(Parse *pParse, int iFirst, int N, u32 mask){",
          "1195:   assert( pParse->pVdbe );",
          "1196:   while( N>0 && (mask&1)!=0 ){",
          "1197:     mask >>= 1;",
          "1198:     iFirst++;",
          "1199:     N--;",
          "1200:   }",
          "1201:   while( N>0 && N<=32 && (mask & MASKBIT32(N-1))!=0 ){",
          "1202:     mask &= ~MASKBIT32(N-1);",
          "1203:     N--;",
          "1204:   }",
          "1205:   if( N>0 ){",
          "1206:     sqlite3VdbeAddOp3(pParse->pVdbe, OP_ReleaseReg, iFirst, N, *(int*)&mask);",
          "1207:   }",
          "1208: }",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:   SELECT * FROM t0;",
          "673: } {xyz 345 uvw 345}",
          "675: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675: # 2019-12-22 ticket c62c5e58524b204d",
          "676: # This is really the same underlying problem as 5ad2aa6921faa1ee",
          "677: #",
          "678: reset_db",
          "679: do_execsql_test update-18.20 {",
          "680:   PRAGMA encoding = 'utf16';",
          "681:   CREATE TABLE t0(c0 TEXT);",
          "682:   CREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));",
          "683:   INSERT INTO t0(c0) VALUES (0), (0);",
          "684:   SELECT * FROM t0;",
          "685: } {0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
      "candidate_info": {
        "commit_hash": "9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9524a7ea9f7c693bd03f8a0df3fdea0d441473d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "When parsing a CREATE TABLE from the sqlite_master table, delete the CHECK constraints if there are any errors, since there might otherwise be attempts to use those CHECK constraints if PRAGMA writable_schema=ON is set. This undoes the fix in check-in [ea721b34477ab8b4] for a more general solution.\n\nFossilOrigin-Name: a982e6434cd66bfbe94d455f538bcbc4360b91572062d92acae6b77e9560e65d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c856404b4e98d295449a4e89a41495dc007319a8e9c35c1a763718d7c5f67e8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2244:   if( p->pCheck ){",
          "2245:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2246:   }",
          "2248: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2246:     if( pParse->nErr ){",
          "2249:       sqlite3ExprListDelete(db, p->pCheck);",
          "2250:       p->pCheck = 0;",
          "2251:     }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:           Table *pTab = pExpr->y.pTab;",
          "3650:           int iSrc;",
          "3651:           int iCol = pExpr->iColumn;",
          "3657:           assert( pTab!=0 );",
          "3658:           assert( iCol>=XN_ROWID );",
          "3659:           assert( iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "3652:           if( pTab==0 ){",
          "3653:             assert( CORRUPT_DB );",
          "3654:             sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3655:             return target;",
          "3656:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3722:     default: {",
          "3729:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3730:       return target;",
          "3731:     }",
          "",
          "[Removed Lines]",
          "3727:       assert( op==TK_NULL || CORRUPT_DB );",
          "3728:       testcase( op!=TK_NULL );",
          "",
          "[Added Lines]",
          "3722:       assert( op==TK_NULL );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3752:       sqlite3VdbeAddOp2(v, OP_Variable, pExpr->iColumn, target);",
          "3753:       if( pExpr->u.zToken[1]!=0 ){",
          "3754:         const char *z = sqlite3VListNumToName(pParse->pVList, pExpr->iColumn);",
          "3757:         sqlite3VdbeAppendP4(v, (char*)z, P4_STATIC);",
          "3758:       }",
          "",
          "[Removed Lines]",
          "3755:         assert( pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, z)==0 );",
          "",
          "[Added Lines]",
          "3749:         assert( pExpr->u.zToken[0]=='?' || (z && !strcmp(pExpr->u.zToken, z)) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
      "candidate_info": {
        "commit_hash": "2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/wherecode.c",
          "src/whereexpr.c",
          "test/window1.test"
        ],
        "message": "For expressions like (x, y) IN (SELECT ...) where the SELECT uses window-functions, require that all columns on the LHS be indexed before an index can be used. Fix for [d9ed4ebe].\n\nFossilOrigin-Name: 0b1dbd60f5db3abe2097dbc0b6de9671685ca5eaf7d3fc8e3f87ff5065a9d114",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bff38e2b5318ed032aaf1d350903c3494b4531f2dc59a6997144ec8e23defef4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3808:   pOrig = p->apCsr[pOp->p2];",
          "3811:   pCx = allocateCursor(p, pOp->p1, pOrig->nField, -1, CURTYPE_BTREE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3809:   assert( pOrig );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: ){",
          "417:   sqlite3 *db = pParse->db;",
          "418:   Expr *pNew;",
          "436:   pNew = sqlite3ExprDup(db, pX, 0);",
          "437:   if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "419: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "434:   if( sqlite3WindowRewrite(pParse, pX->x.pSelect) ) return 0;",
          "435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1360:   if( pWC->op==TK_AND && pExpr->op==TK_IN && pTerm->iField==0",
          "1361:    && pExpr->pLeft->op==TK_VECTOR",
          "1362:    && pExpr->x.pSelect->pPrior==0",
          "1363:   ){",
          "1364:     int i;",
          "1365:     for(i=0; i<sqlite3ExprVectorSize(pExpr->pLeft); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1365:    && pExpr->x.pSelect->pWin==0",
          "1366: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1347:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(1) FILTER(WHERE t1.c1));",
          "1348: } {1}",
          "1350: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1350: reset_db",
          "1351: do_execsql_test 39.1 {",
          "1352:   CREATE TABLE t0(c0 UNIQUE);",
          "1353: }",
          "1354: do_execsql_test 39.2 {",
          "1355:   SELECT FIRST_VALUE(0) OVER();",
          "1356: } {0}",
          "1357: do_execsql_test 39.3 {",
          "1358:   SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0);",
          "1359: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}