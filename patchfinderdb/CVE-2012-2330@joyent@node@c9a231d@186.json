{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22804a9eb88570b80295705da6620b68c3a6c69f",
      "candidate_info": {
        "commit_hash": "22804a9eb88570b80295705da6620b68c3a6c69f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/22804a9eb88570b80295705da6620b68c3a6c69f",
        "files": [
          "lib/module.js",
          "test/simple/test-debug-brk-no-arg.js"
        ],
        "message": "module: use 'repl' as the filename arg if missing\n\nFix #3859",
        "before_after_code_files": [
          "lib/module.js||limodule.js",
          "test/simple/test-debug-brk-no-arg.js||test/simple/test-debug-brk-no-arg.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   var compiledWrapper = runInThisContext(wrapper, filename, true);",
          "438:   if (global.v8debug) {",
          "439:     if (!resolvedArgv) {",
          "441:     }",
          "",
          "[Removed Lines]",
          "440:       resolvedArgv = Module._resolveFilename(process.argv[1], null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-debug-brk-no-arg.js||test/simple/test-debug-brk-no-arg.js": [
          "File: test/simple/test-debug-brk-no-arg.js -> test/simple/test-debug-brk-no-arg.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var spawn = require('child_process').spawn;",
          "26: var child = spawn(process.execPath, ['--debug-brk=' + common.PORT]);",
          "27: child.stderr.once('data', function(c) {",
          "28:   console.error('%j', c.toString());",
          "29:   child.stdin.end();",
          "30: });",
          "32: child.on('exit', function(c) {",
          "33:   assert(c === 0);",
          "34:   console.log('ok');",
          "35: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "075acfa2d6c823ec9ccedba5fdbca172752d1e4a",
      "candidate_info": {
        "commit_hash": "075acfa2d6c823ec9ccedba5fdbca172752d1e4a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/075acfa2d6c823ec9ccedba5fdbca172752d1e4a",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/process.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-pair.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: upgrade to 56a31f0",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-pair.c||deps/uv/test/test-pipe-pair.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "785: UV_EXTERN int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "792: UV_EXTERN uv_err_t uv_pipe_pair(uv_pipe_t* a, uv_pipe_t* b);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/dl.c||deps/uv/src/unix/dl.c": [
          "File: deps/uv/src/unix/dl.c -> deps/uv/src/unix/dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <dlfcn.h>",
          "26: #include <errno.h>",
          "29: uv_err_t uv_dlopen(const char* filename, uv_lib_t* library) {",
          "30:   void* handle = dlopen(filename, RTLD_LAZY);",
          "31:   if (handle == NULL) {",
          "33:   }",
          "",
          "[Removed Lines]",
          "32:     return uv__new_sys_error(errno);",
          "",
          "[Added Lines]",
          "32: static const uv_err_t uv_inval_ = { UV_EINVAL, EINVAL };",
          "38:     return uv_inval_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: uv_err_t uv_dlclose(uv_lib_t library) {",
          "41:   if (dlclose(library) != 0) {",
          "43:   }",
          "45:   return uv_ok_;",
          "",
          "[Removed Lines]",
          "42:     return uv__new_sys_error(errno);",
          "",
          "[Added Lines]",
          "48:     return uv_inval_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: uv_err_t uv_dlsym(uv_lib_t library, const char* name, void** ptr) {",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:   void* address = dlsym(library, name);",
          "51:   if (address == NULL) {",
          "52:     return uv__new_sys_error(errno);",
          "",
          "[Added Lines]",
          "56:   void* address;",
          "59:   dlerror();",
          "61:   address = dlsym(library, name);",
          "63:   if (dlerror()) {",
          "64:     return uv_inval_;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: void uv__fs_event_destroy(uv_fs_event_t* handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #define UV__F_IPC        (1 << 0)",
          "189: #define UV__F_NONBLOCK   (1 << 1)",
          "190: int uv__make_socketpair(int fds[2], int flags);",
          "191: int uv__make_pipe(int fds[2], int flags);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <stdlib.h>",
          "33: int uv_pipe_init(uv_loop_t* loop, uv_pipe_t* handle, int ipc) {",
          "34:   uv__stream_init(loop, (uv_stream_t*)handle, UV_NAMED_PIPE);",
          "35:   loop->counters.pipe_init++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: static uv_once_t uv__pipe_pair_lock_guard = UV_ONCE_INIT;",
          "34: static uv_mutex_t uv__pipe_pair_lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: }",
          "42: int uv_pipe_bind(uv_pipe_t* handle, const char* name) {",
          "43:   struct sockaddr_un saddr;",
          "44:   const char* pipe_fname;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: void uv__pipe_pair_lock_init() {",
          "47:   uv_mutex_init(&uv__pipe_pair_lock);",
          "48: }",
          "51: uv_err_t uv_pipe_pair(uv_pipe_t* a, uv_pipe_t* b) {",
          "52:   int fds[2];",
          "53:   int r;",
          "54:   uv_err_t err;",
          "57:   uv_once(&uv__pipe_pair_lock_guard, uv__pipe_pair_lock_init);",
          "59:   uv_mutex_lock(&uv__pipe_pair_lock);",
          "61:   r = uv__make_socketpair(fds, UV__F_NONBLOCK | UV__F_IPC);",
          "63:   if (r) {",
          "64:     err = uv__new_sys_error(errno);",
          "65:   } else {",
          "66:     uv_pipe_open(a, fds[0]);",
          "67:     uv_pipe_open(b, fds[1]);",
          "68:     err = uv_ok_;",
          "69:   }",
          "71:   uv_mutex_unlock(&uv__pipe_pair_lock);",
          "73:   return err;",
          "74: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c": [
          "File: deps/uv/src/unix/process.c -> deps/uv/src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: }",
          "70: #ifdef SOCK_NONBLOCK",
          "71:   int fl;",
          "",
          "[Removed Lines]",
          "66: #define UV__F_IPC        (1 << 0)",
          "67: #define UV__F_NONBLOCK   (1 << 1)",
          "69: static int uv__make_socketpair(int fds[2], int flags) {",
          "",
          "[Added Lines]",
          "66: int uv__make_socketpair(int fds[2], int flags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103: }",
          "107: #if HAVE_SYS_PIPE2",
          "108:   int fl;",
          "",
          "[Removed Lines]",
          "106: static int uv__make_pipe(int fds[2], int flags) {",
          "",
          "[Added Lines]",
          "103: int uv__make_pipe(int fds[2], int flags) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "94: static void uv_pipe_connection_init(uv_pipe_t* handle) {",
          "95:   uv_connection_init((uv_stream_t*) handle);",
          "96:   handle->read_req.data = handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94: uv_err_t uv_pipe_pair(uv_pipe_t* a, uv_pipe_t* b) {",
          "96:   return uv__new_artificial_error(UV_ENOSYS);",
          "97: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: TEST_DECLARE   (tcp_ref)",
          "30: TEST_DECLARE   (tcp_ref2)",
          "31: TEST_DECLARE   (pipe_ping_pong)",
          "32: TEST_DECLARE   (delayed_accept)",
          "33: TEST_DECLARE   (multiple_listen)",
          "34: TEST_DECLARE   (tcp_writealot)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: TEST_DECLARE   (pipe_pair)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   TEST_ENTRY  (pipe_ping_pong)",
          "166:   TEST_HELPER (pipe_ping_pong, pipe_echo_server)",
          "168:   TEST_ENTRY  (delayed_accept)",
          "169:   TEST_ENTRY  (multiple_listen)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   TEST_ENTRY  (pipe_pair)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-pipe-pair.c||deps/uv/test/test-pipe-pair.c": [
          "File: deps/uv/test/test-pipe-pair.c -> deps/uv/test/test-pipe-pair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdlib.h>",
          "26: #include <stdio.h>",
          "27: #include <string.h>",
          "29: #define PING \"PING\"",
          "31: static uv_pipe_t a;",
          "32: static uv_pipe_t b;",
          "33: static uv_write_t req;",
          "34: static uv_buf_t buf;",
          "35: static enum {",
          "36:   STATE_MAIN_START,",
          "37:   STATE_THREAD_START,",
          "38:   STATE_MAIN_CLOSE,",
          "39:   STATE_THREAD_CLOSE,",
          "40: } state;",
          "43: static void pinger_read_cb(uv_stream_t* stream, ssize_t nread, uv_buf_t buf) {",
          "44:   ASSERT(state == STATE_MAIN_CLOSE);",
          "45:   state = STATE_THREAD_CLOSE;",
          "47:   ASSERT((uv_pipe_t*)stream == &b);",
          "49:   ASSERT(nread < 0);",
          "50:   ASSERT(uv_last_error(stream->loop).code == UV_EOF);",
          "52:   free(buf.base);",
          "54:   uv_close((uv_handle_t*)stream, NULL);",
          "55: }",
          "58: static void main_thread_read_cb(uv_stream_t* stream, ssize_t nread,",
          "59:     uv_buf_t buf) {",
          "60:   ASSERT(state == STATE_THREAD_START);",
          "61:   state = STATE_MAIN_CLOSE;",
          "63:   ASSERT((uv_pipe_t*)stream == &a);",
          "64:   ASSERT(stream->loop == uv_default_loop());",
          "66:   if (nread > 0) {",
          "67:     ASSERT(strcmp(buf.base, PING) == 0);",
          "68:     uv_close((uv_handle_t*)stream, NULL);",
          "69:   }",
          "71:   free(buf.base);",
          "72: }",
          "75: static uv_buf_t alloc_cb(uv_handle_t* handle, size_t size) {",
          "76:   uv_buf_t buf;",
          "77:   buf.base = (char*)malloc(size);",
          "78:   buf.len = size;",
          "79:   return buf;",
          "80: }",
          "83: void start(void* data) {",
          "84:   uv_loop_t* loop;",
          "85:   int r;",
          "87:   ASSERT(state == STATE_MAIN_START);",
          "88:   state = STATE_THREAD_START;",
          "90:   loop = data;",
          "92:   buf = uv_buf_init(PING, strlen(PING));",
          "94:   if (uv_write(&req, (uv_stream_t*)&b, &buf, 1, NULL)) {",
          "95:     FATAL(\"uv_write failed\");",
          "96:   }",
          "98:   uv_read_start((uv_stream_t*)&b, alloc_cb, pinger_read_cb);",
          "100:   uv_run(loop);",
          "102:   ASSERT(state == STATE_THREAD_CLOSE);",
          "103: }",
          "106: TEST_IMPL(pipe_pair) {",
          "107:   int r;",
          "108:   uv_err_t err;",
          "109:   uv_thread_t tid;",
          "110:   uv_loop_t* loop;",
          "112:   state = STATE_MAIN_START;",
          "114:   r = uv_pipe_init(uv_default_loop(), &a, 1);",
          "115:   ASSERT(r == 0);",
          "117:   loop = uv_loop_new();",
          "118:   ASSERT(loop);",
          "120:   r = uv_pipe_init(loop, &b, 1);",
          "121:   ASSERT(r == 0);",
          "123:   err = uv_pipe_pair(&a, &b);",
          "124:   ASSERT(err.code == UV_OK);",
          "126:   r = uv_thread_create(&tid, start, loop);",
          "127:   ASSERT(r == 0);",
          "129:   uv_read_start((uv_stream_t*)&a, alloc_cb, main_thread_read_cb);",
          "131:   uv_run(uv_default_loop());",
          "132:   uv_thread_join(&tid);",
          "134:   ASSERT(state == STATE_THREAD_CLOSE);",
          "136:   return 0;",
          "137: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:         'test/test-ping-pong.c',",
          "303:         'test/test-pipe-bind-error.c',",
          "304:         'test/test-pipe-connect-error.c',",
          "305:         'test/test-platform-output.c',",
          "306:         'test/test-process-title.c',",
          "307:         'test/test-ref.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:         'test/test-pipe-pair.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d1fde751908795e7d0b61fc8057a3e4c1e55702",
      "candidate_info": {
        "commit_hash": "9d1fde751908795e7d0b61fc8057a3e4c1e55702",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9d1fde751908795e7d0b61fc8057a3e4c1e55702",
        "files": [
          "src/v8_typed_array.cc"
        ],
        "message": "typed arrays: root JS objects in HandleScope with Local<>",
        "before_after_code_files": [
          "src/v8_typed_array.cc||src/v8_typed_array.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:       length = obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "229:           v8::Integer::NewFromUnsigned(length * TBytes)};",
          "230:       buffer = ArrayBuffer::GetTemplate()->",
          "231:                  GetFunction()->NewInstance(1, argv);",
          "",
          "[Removed Lines]",
          "228:       v8::Handle<v8::Value> argv[1] = {",
          "",
          "[Added Lines]",
          "228:       v8::Local<v8::Value> argv[1] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:       length = args[0]->Uint32Value();",
          "257:           v8::Integer::NewFromUnsigned(length * TBytes)};",
          "259:       buffer = ArrayBuffer::GetTemplate()->",
          "",
          "[Removed Lines]",
          "256:       v8::Handle<v8::Value> argv[1] = {",
          "",
          "[Added Lines]",
          "256:       v8::Local<v8::Value> argv[1] = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "431:         args.This()->Get(v8::String::New(\"byteOffset\"))->Uint32Value();",
          "435:         args.This()->Get(v8::String::New(\"buffer\")),",
          "436:         v8::Integer::New(byte_offset),",
          "437:         v8::Integer::New(end - begin)};",
          "",
          "[Removed Lines]",
          "434:     v8::Handle<v8::Value> argv[] = {",
          "",
          "[Added Lines]",
          "434:     v8::Local<v8::Value> argv[] = {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa490f64971a38c98d74dc6b55b2d88dd1f6c463",
      "candidate_info": {
        "commit_hash": "fa490f64971a38c98d74dc6b55b2d88dd1f6c463",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/fa490f64971a38c98d74dc6b55b2d88dd1f6c463",
        "files": [
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-udp-multicast-join.c",
          "deps/uv/test/test-udp-options.c",
          "deps/uv/uv.gyp",
          "deps/uv/vcbuild.bat"
        ],
        "message": "uv: upgrade to 3eb94e9",
        "before_after_code_files": [
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-udp-multicast-join.c||deps/uv/test/test-udp-multicast-join.c",
          "deps/uv/test/test-udp-options.c||deps/uv/test/test-udp-options.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp",
          "deps/uv/vcbuild.bat||deps/uv/vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:   pipe = watcher->data;",
          "253:   assert(pipe->type == UV_NAMED_PIPE);",
          "256:   sockfd = uv__accept(pipe->fd, (struct sockaddr *)&saddr, sizeof saddr);",
          "257:   if (sockfd == -1) {",
          "",
          "[Removed Lines]",
          "254:   assert(pipe->pipe_fname != NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     goto out;",
          "341:   }",
          "344:   yes = 1;",
          "345:   if (setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &yes, sizeof yes) == -1) {",
          "346:     uv__set_sys_error(handle->loop, errno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351: #ifdef SO_REUSEPORT",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:   size_t len = wcslen(path);",
          "545:     return 1;",
          "546:   }",
          "",
          "[Removed Lines]",
          "544:   if (len == 0 && IS_SLASH(path[0])) {",
          "",
          "[Added Lines]",
          "544:   if (len == 1 && IS_SLASH(path[0])) {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:                     struct sockaddr* addr,",
          "167:                     int addrsize,",
          "168:                     unsigned int flags) {",
          "170:   int r;",
          "171:   SOCKET sock;",
          "173:   if ((flags & UV_UDP_IPV6ONLY) && domain != AF_INET6) {",
          "",
          "[Removed Lines]",
          "169:   DWORD err;",
          "",
          "[Added Lines]",
          "171:   DWORD no = 0, yes = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:   }",
          "192:   if (domain == AF_INET6 && !(flags & UV_UDP_IPV6ONLY)) {",
          "",
          "[Removed Lines]",
          "193:     DWORD off = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:     setsockopt(sock,",
          "201:                IPPROTO_IPV6,",
          "202:                IPV6_V6ONLY,",
          "205:   }",
          "209:   if (r == SOCKET_ERROR) {",
          "211:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "212:     return -1;",
          "213:   }",
          "",
          "[Removed Lines]",
          "203:                (const char*) &off,",
          "204:                sizeof off);",
          "207:   r = bind(handle->socket, addr, addrsize);",
          "210:     err = WSAGetLastError();",
          "",
          "[Added Lines]",
          "202:                (char*) &no,",
          "203:                sizeof no);",
          "206:   r = setsockopt(sock,",
          "207:                  SOL_SOCKET,",
          "208:                  SO_REUSEADDR,",
          "209:                  (char*) &yes,",
          "210:                  sizeof yes);",
          "211:   if (r == SOCKET_ERROR) {",
          "212:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "213:     return -1;",
          "214:   }",
          "216:   r = bind(handle->socket, addr, addrsize);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244: }",
          "256: static void uv_udp_queue_recv(uv_loop_t* loop, uv_udp_t* handle) {",
          "257:   uv_req_t* req;",
          "258:   uv_buf_t buf;",
          "",
          "[Removed Lines]",
          "247: int uv_udp_set_membership(uv_udp_t* handle, const char* multicast_addr,",
          "248:   const char* interface_addr, uv_membership membership) {",
          "251:   uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "252:   return -1;",
          "253: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "579: }",
          "592:     return -1;",
          "593:   }",
          "",
          "[Removed Lines]",
          "582: int uv_udp_set_multicast_loop(uv_udp_t* handle, int on) {",
          "583:   uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "584:   return -1;",
          "585: }",
          "588: int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl) {",
          "589:   if (setsockopt(handle->socket, IPPROTO_IP, IP_MULTICAST_TTL,",
          "590:       (const char*)&ttl, sizeof ttl) == -1) {",
          "591:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "",
          "[Added Lines]",
          "580: int uv_udp_set_membership(uv_udp_t* handle, const char* multicast_addr,",
          "581:     const char* interface_addr, uv_membership membership) {",
          "582:   int optname;",
          "583:   struct ip_mreq mreq;",
          "586:   if (!(handle->flags & UV_HANDLE_BOUND) &&",
          "587:       uv_udp_bind(handle, uv_addr_ip4_any_, 0) < 0) {",
          "588:     return -1;",
          "589:   }",
          "591:   if (handle->flags & UV_HANDLE_IPV6) {",
          "592:     uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "593:     return -1;",
          "594:   }",
          "596:   memset(&mreq, 0, sizeof mreq);",
          "598:   if (interface_addr) {",
          "599:     mreq.imr_interface.s_addr = inet_addr(interface_addr);",
          "600:   } else {",
          "601:     mreq.imr_interface.s_addr = htonl(INADDR_ANY);",
          "602:   }",
          "604:   mreq.imr_multiaddr.s_addr = inet_addr(multicast_addr);",
          "606:   switch (membership) {",
          "607:     case UV_JOIN_GROUP:",
          "608:       optname = IP_ADD_MEMBERSHIP;",
          "609:       break;",
          "610:     case UV_LEAVE_GROUP:",
          "611:       optname = IP_DROP_MEMBERSHIP;",
          "612:       break;",
          "613:     default:",
          "614:       uv__set_artificial_error(handle->loop, UV_EFAULT);",
          "615:       return -1;",
          "616:   }",
          "618:   if (setsockopt(handle->socket,",
          "619:                  IPPROTO_IP,",
          "620:                  optname,",
          "621:                  (char*) &mreq,",
          "622:                  sizeof mreq) == SOCKET_ERROR) {",
          "623:       uv__set_sys_error(handle->loop, WSAGetLastError());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596: }",
          "603:     return -1;",
          "604:   }",
          "606:   return 0;",
          "607: }",
          "",
          "[Removed Lines]",
          "599: int uv_udp_set_broadcast(uv_udp_t* handle, int on) {",
          "600:   if (setsockopt(handle->socket, SOL_SOCKET, SO_BROADCAST, (const char*)&on,",
          "601:       sizeof on) == -1) {",
          "602:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "610: int uv_udp_set_ttl(uv_udp_t* handle, int ttl) {",
          "611:   uv__set_artificial_error(handle->loop, UV_ENOSYS);",
          "612:   return -1;",
          "613: }",
          "",
          "[Added Lines]",
          "631: int uv_udp_set_broadcast(uv_udp_t* handle, int value) {",
          "632:   BOOL optval = (BOOL) value;",
          "635:   if (!(handle->flags & UV_HANDLE_BOUND) &&",
          "636:       uv_udp_bind(handle, uv_addr_ip4_any_, 0) < 0) {",
          "640:   if (setsockopt(handle->socket,",
          "641:                   SOL_SOCKET,",
          "642:                   SO_BROADCAST,",
          "643:                   (char*) &optval,",
          "644:                   sizeof optval)) {",
          "645:     uv__set_sys_error(handle->loop, WSAGetLastError());",
          "646:     return -1;",
          "647:   }",
          "652: #define SOCKOPT_SETTER(name, option4, option6)                                \\",
          "653:   int uv_udp_set_##name(uv_udp_t* handle, int value) {                        \\",
          "654:     DWORD optval = (DWORD) value;                                             \\",
          "655:                                                                               \\",
          "657:     if (!(handle->flags & UV_HANDLE_BOUND) &&                                 \\",
          "658:         uv_udp_bind(handle, uv_addr_ip4_any_, 0) < 0) {                       \\",
          "659:       return -1;                                                              \\",
          "660:     }                                                                         \\",
          "661:                                                                               \\",
          "662:     if (!(handle->flags & UV_HANDLE_IPV6)) {                                  \\",
          "664:       if (setsockopt(handle->socket,                                          \\",
          "665:                      IPPROTO_IP,                                              \\",
          "666:                      option4,                                                 \\",
          "667:                      (char*) &optval,                                         \\",
          "668:                      sizeof optval)) {                                        \\",
          "669:         uv__set_sys_error(handle->loop, WSAGetLastError());                   \\",
          "670:         return -1;                                                            \\",
          "671:       }                                                                       \\",
          "672:     } else {                                                                  \\",
          "674:       if (setsockopt(handle->socket,                                          \\",
          "675:                      IPPROTO_IPV6,                                            \\",
          "676:                      option6,                                                 \\",
          "677:                      (char*) &optval,                                         \\",
          "678:                      sizeof optval)) {                                        \\",
          "679:         uv__set_sys_error(handle->loop, WSAGetLastError());                   \\",
          "680:         return -1;                                                            \\",
          "681:       }                                                                       \\",
          "682:     }                                                                         \\",
          "683:     return 0;                                                                 \\",
          "684:   }",
          "686: SOCKOPT_SETTER(multicast_loop, IP_MULTICAST_LOOP, IPV6_MULTICAST_LOOP)",
          "687: SOCKOPT_SETTER(multicast_ttl, IP_MULTICAST_TTL, IPV6_MULTICAST_HOPS)",
          "688: SOCKOPT_SETTER(ttl, IP_TTL, IPV6_HOPLIMIT)",
          "690: #undef SOCKOPT_SETTER",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1293:   int r;",
          "1294:   uv_loop_t* loop = uv_default_loop();",
          "1296:   r = uv_fs_stat(loop, &stat_req, \"c:\\\\\", NULL);",
          "1297:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296:   r = uv_fs_stat(loop, &stat_req, \"\\\\\", NULL);",
          "1297:   ASSERT(r == 0);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: TEST_DECLARE   (udp_dgram_too_big)",
          "51: TEST_DECLARE   (udp_dual_stack)",
          "52: TEST_DECLARE   (udp_ipv6_only)",
          "53: TEST_DECLARE   (pipe_bind_error_addrinuse)",
          "54: TEST_DECLARE   (pipe_bind_error_addrnotavail)",
          "55: TEST_DECLARE   (pipe_bind_error_inval)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: TEST_DECLARE   (udp_options)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:   TEST_ENTRY  (udp_dgram_too_big)",
          "188:   TEST_ENTRY  (udp_dual_stack)",
          "189:   TEST_ENTRY  (udp_ipv6_only)",
          "190:   TEST_ENTRY  (udp_multicast_join)",
          "192:   TEST_ENTRY  (pipe_bind_error_addrinuse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:   TEST_ENTRY  (udp_options)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-udp-multicast-join.c||deps/uv/test/test-udp-multicast-join.c": [
          "File: deps/uv/test/test-udp-multicast-join.c -> deps/uv/test/test-udp-multicast-join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   int r;",
          "100:   uv_udp_send_t req;",
          "101:   uv_buf_t buf;",
          "104:   r = uv_udp_init(uv_default_loop(), &server);",
          "105:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "102:   struct sockaddr_in addr = uv_ip4_addr(\"239.255.0.1\", TEST_PORT);",
          "",
          "[Added Lines]",
          "102:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-udp-options.c||deps/uv/test/test-udp-options.c": [
          "File: deps/uv/test/test-udp-options.c -> deps/uv/test/test-udp-options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "30: TEST_IMPL(udp_options) {",
          "31:   uv_loop_t* loop;",
          "32:   uv_udp_t h;",
          "33:   int i, r;",
          "35:   loop = uv_default_loop();",
          "37:   r = uv_udp_init(loop, &h);",
          "38:   ASSERT(r == 0);",
          "42:   r = uv_udp_bind(&h, uv_ip4_addr(\"0.0.0.0\", TEST_PORT), 0);",
          "43:   ASSERT(r == 0);",
          "45:   r = uv_udp_set_broadcast(&h, 1);",
          "46:   r |= uv_udp_set_broadcast(&h, 1);",
          "47:   r |= uv_udp_set_broadcast(&h, 0);",
          "48:   r |= uv_udp_set_broadcast(&h, 0);",
          "49:   ASSERT(r == 0);",
          "52:   for (i = 0; i <= 255; i++) {",
          "53:     r = uv_udp_set_ttl(&h, i);",
          "54:     ASSERT(r == 0);",
          "55:   }",
          "58:   r = uv_udp_set_ttl(&h, 256);",
          "59:   ASSERT(r == -1);",
          "60:   ASSERT(uv_last_error(loop).code == UV_EINVAL);",
          "63:   r = uv_udp_set_multicast_loop(&h, 1);",
          "64:   r |= uv_udp_set_multicast_loop(&h, 1);",
          "65:   r |= uv_udp_set_multicast_loop(&h, 0);",
          "66:   r |= uv_udp_set_multicast_loop(&h, 0);",
          "67:   ASSERT(r == 0);",
          "70:   for (i = 0; i <= 255; i++) {",
          "71:     r = uv_udp_set_multicast_ttl(&h, i);",
          "72:     ASSERT(r == 0);",
          "73:   }",
          "76:   r = uv_udp_set_multicast_ttl(&h, 256);",
          "77:   ASSERT(r == -1);",
          "78:   ASSERT(uv_last_error(loop).code == UV_EINVAL);",
          "81:   r = uv_run(loop);",
          "82:   ASSERT(r == 0);",
          "84:   return 0;",
          "85: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:         'test/test-tty.c',",
          "318:         'test/test-udp-dgram-too-big.c',",
          "319:         'test/test-udp-ipv6.c',",
          "320:         'test/test-udp-send-and-recv.c',",
          "321:         'test/test-udp-multicast-join.c',",
          "322:         'test/test-counters-init.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:         'test/test-udp-options.c',",
          "",
          "---------------"
        ],
        "deps/uv/vcbuild.bat||deps/uv/vcbuild.bat": [
          "File: deps/uv/vcbuild.bat -> deps/uv/vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: @rem Skip project generation if requested.",
          "65: if defined nobuild goto run",
          "69: @rem Build the sln with msbuild.",
          "70: msbuild uv.sln /t:%target% /p:Configuration=%config% /clp:NoSummary;NoItemAndPropertyList;Verbosity=minimal /nologo",
          "71: if errorlevel 1 goto exit",
          "",
          "[Removed Lines]",
          "67: if not defined VCINSTALLDIR echo Build skipped. To build, this file needs to run from VS cmd prompt.& goto run",
          "",
          "[Added Lines]",
          "67: @rem If not running in the VS build env, try to start it. If that fails, bail",
          "68: @rem out.",
          "69: if defined VCINSTALLDIR goto msbuild-found",
          "70: if not defined VS100COMNTOOLS goto msbuild-not-found",
          "71: if not exist \"%VS100COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" goto msbuild-not-found",
          "72: call \"%VS100COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\"",
          "73: if not defined VCINSTALLDIR goto msbuild-not-found",
          "74: goto msbuild-found",
          "76: :msbuild-not-found",
          "77: echo Build skipped. To build, this file needs to run from VS cmd prompt.",
          "78: goto run",
          "81: :msbuild-found",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92e7433ff9f7e7bf051073978309ec392e329397",
      "candidate_info": {
        "commit_hash": "92e7433ff9f7e7bf051073978309ec392e329397",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/92e7433ff9f7e7bf051073978309ec392e329397",
        "files": [
          "lib/tls.js",
          "test/simple/test-tls-client-verify.js"
        ],
        "message": "tls: fix 'hostless' tls connection verification\n\nAnd fix last failing tests",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1238:   var sslcontext = crypto.createCredentials(options);",
          "1240:   convertNPNProtocols(options.NPNProtocols, this);",
          "1242:       pair = new SecurePair(sslcontext, false, true,",
          "1243:                             options.rejectUnauthorized === true ? true : false,",
          "1244:                             {",
          "",
          "[Removed Lines]",
          "1241:   var hostname = options.servername || options.host,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js": [
          "File: test/simple/test-tls-client-verify.js -> test/simple/test-tls-client-verify.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: }",
          "28: var testCases =",
          "29:     [{ ca: ['ca1-cert'],",
          "30:        key: 'agent2-key',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var hosterr = 'Hostname/IP doesn\\'t match certificate\\'s altnames';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     console.error('connecting...');",
          "103:     var client = tls.connect(clientOptions, function() {",
          "108:       server.close();",
          "109:     });",
          "",
          "[Removed Lines]",
          "105:       console.error('expected: ' + ok + ' authed: ' + client.authorized);",
          "107:       assert.equal(ok, client.authorized);",
          "",
          "[Added Lines]",
          "105:       var authorized = client.authorized ||",
          "106:                        client.authorizationError === hosterr;",
          "108:       console.error('expected: ' + ok + ' authed: ' + authorized);",
          "110:       assert.equal(ok, authorized);",
          "",
          "---------------"
        ]
      }
    }
  ]
}