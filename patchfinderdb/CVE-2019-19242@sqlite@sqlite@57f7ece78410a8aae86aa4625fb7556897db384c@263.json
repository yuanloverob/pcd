{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a50bffb85ec1246b95468341ccac3748577d9b31",
      "candidate_info": {
        "commit_hash": "a50bffb85ec1246b95468341ccac3748577d9b31",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a50bffb85ec1246b95468341ccac3748577d9b31",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the --async option to the \".backup\" command in the CLI.\n\nFossilOrigin-Name: 7b6a605b1883dfcbe237b0a58f6f0c233a109e88b521c3b3d97198526c8a0317",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af172b53b46759f491f522356e14c5e2374d3f25ec70fbc1e100cadded8f9b22",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3377: #endif",
          "3378:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3379:   \"       --append            Use the appendvfs\",",
          "3380:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3381:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3382:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3380:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5840:     sqlite3 *pDest;",
          "5841:     sqlite3_backup *pBackup;",
          "5842:     int j;",
          "5843:     const char *zVfs = 0;",
          "5844:     for(j=1; j<nArg; j++){",
          "5845:       const char *z = azArg[j];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5844:     int bAsync = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5848:         if( strcmp(z, \"-append\")==0 ){",
          "5849:           zVfs = \"apndvfs\";",
          "5850:         }else",
          "5851:         {",
          "5852:           utf8_printf(stderr, \"unknown option: %s\\n\", azArg[j]);",
          "5853:           return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5853:         if( strcmp(z, \"-async\")==0 ){",
          "5854:           bAsync = 1;",
          "5855:         }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5858:         zDb = zDestFile;",
          "5859:         zDestFile = azArg[j];",
          "5860:       }else{",
          "5862:         return 1;",
          "5863:       }",
          "5864:     }",
          "",
          "[Removed Lines]",
          "5861:         raw_printf(stderr, \"Usage: .backup ?DB? ?--append? FILENAME\\n\");",
          "",
          "[Added Lines]",
          "5866:         raw_printf(stderr, \"Usage: .backup ?DB? ?OPTIONS? FILENAME\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5874:       close_db(pDest);",
          "5875:       return 1;",
          "5876:     }",
          "5877:     open_db(p, 0);",
          "5878:     pBackup = sqlite3_backup_init(pDest, \"main\", p->db, zDb);",
          "5879:     if( pBackup==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5882:     if( bAsync ){",
          "5883:       sqlite3_exec(pDest, \"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;\",",
          "5884:                    0, 0, 0);",
          "5885:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
      "candidate_info": {
        "commit_hash": "e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4a9e4d0e57be6228936dc06936a7aa09e551d46",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Have ALTER TABLE commands ignore the lhs of \"expr IN ()\" and \"expr NOT IN ()\" expressions, just as other queries do. Fix for [533010b8ca].\n\nFossilOrigin-Name: 71643deb6bbad4b4a511bfd43b32245b50a555b508b90f33adf0656ae53292c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1182:       if( IN_RENAME_OBJECT==0 ){",
          "1183:         sqlite3ExprDelete(pParse->db, A);",
          "1184:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "1187:       }",
          "",
          "[Added Lines]",
          "1182:       sqlite3ExprDelete(pParse->db, A);",
          "1183:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: do_execsql_test 3.2 {",
          "81:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "84: #-------------------------------------------------------------------------",
          "85: reset_db",
          "",
          "[Removed Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "",
          "[Added Lines]",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (b IN ())}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "193: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: do_execsql_test 8.2.1 {",
          "193:   CREATE TABLE t2 (c0);",
          "194:   CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()));",
          "195:   ALTER TABLE t2 RENAME COLUMN c0 TO c1;",
          "196: }",
          "197: do_execsql_test 8.2.2 {",
          "198:   SELECT sql FROM sqlite_master WHERE tbl_name = 't2';",
          "199: } {",
          "200:   {CREATE TABLE t2 (c1)}",
          "201:   {CREATE INDEX i2 ON t2((LIKELIHOOD(c0, 100) IN ()))}",
          "202: }",
          "203: do_test 8.2.3 {",
          "204:   sqlite3 db2 test.db",
          "205:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "206:   db close",
          "207: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f354e77f3d222abed1b90359e78de3d0822d4118",
      "candidate_info": {
        "commit_hash": "f354e77f3d222abed1b90359e78de3d0822d4118",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f354e77f3d222abed1b90359e78de3d0822d4118",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the dbtotxt decoder in the CLI so that it ignores excess bytes.\n\nFossilOrigin-Name: 18740bd448887d618fafee0b5a7c004aa2f2632244f7d29e2428772baa36b828",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1201615cbbd3070158ea5fab3d2c8c95f41b25d6da096a44cb9257a7b7405efc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3786:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3787:     if( rc==17 ){",
          "3788:       k = iOffset+j;",
          "3792:       }",
          "3794:     }",
          "3795:   }",
          "",
          "[Removed Lines]",
          "3789:       if( k+16>n ){",
          "3790:         utf8_printf(stderr, \"continue exceeds file size\\n\");",
          "3791:         goto readHexDb_error;",
          "3793:       memcpy(a+k, x, 16);",
          "",
          "[Added Lines]",
          "3789:       if( k+16<=n ){",
          "3790:         memcpy(a+k, x, 16);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
      "candidate_info": {
        "commit_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2964225247f1b9418aef50a042b2997edb3b6ad6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Prevent the printf formatter from doing large memory allocations - larger than either the size of the static buffer for interfaces like sqlite3_snprintf(), or larger than SQLITE_LIMIT_LENGTH for interfaces that are associated with a database connection.  This helps to prevent DOS attacks on products that let hostile sources inject arbitrary SQL.  It also helps fuzzers run faster and more effectively.\n\nFossilOrigin-Name: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   return (char*)sqlite3_value_text(p->apArg[p->nUsed++]);",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "172:   }",
          "173:   z = sqlite3DbMallocRaw(pAccum->db, n);",
          "174:   if( z==0 ){",
          "175:     setStrAccumError(pAccum, SQLITE_NOMEM);",
          "176:   }",
          "177:   return z;",
          "178: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:           zOut = buf;",
          "423:         }else{",
          "424:           u64 n = (u64)precision + 10 + precision/3;",
          "430:           nOut = (int)n;",
          "431:         }",
          "432:         bufpt = &zOut[nOut-1];",
          "",
          "[Removed Lines]",
          "425:           zOut = zExtra = sqlite3Malloc( n );",
          "426:           if( zOut==0 ){",
          "427:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "428:             return;",
          "429:           }",
          "",
          "[Added Lines]",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         }else{",
          "546:           e2 = exp;",
          "547:         }",
          "554:           }",
          "555:         }",
          "556:         zOut = bufpt;",
          "",
          "[Removed Lines]",
          "548:         if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){",
          "549:           bufpt = zExtra",
          "550:               = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );",
          "551:           if( bufpt==0 ){",
          "552:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "553:             return;",
          "",
          "[Added Lines]",
          "566:         {",
          "568:           szBufNeeded = MAX(e2,0)+(i64)precision+(i64)width+15;",
          "569:           if( szBufNeeded > etBUFSIZE ){",
          "570:             bufpt = zExtra = printfTempBuf(pAccum, szBufNeeded);",
          "571:             if( bufpt==0 ) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:         needQuote = !isnull && xtype==etSQLESCAPE2;",
          "775:         n += i + 3;",
          "776:         if( n>etBUFSIZE ){",
          "782:         }else{",
          "783:           bufpt = buf;",
          "784:         }",
          "",
          "[Removed Lines]",
          "777:           bufpt = zExtra = sqlite3Malloc( n );",
          "778:           if( bufpt==0 ){",
          "779:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "780:             return;",
          "781:           }",
          "",
          "[Added Lines]",
          "795:           bufpt = zExtra = printfTempBuf(pAccum, n);",
          "796:           if( bufpt==0 ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
      "candidate_info": {
        "commit_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/fkey.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/window.c",
          "test/with1.test"
        ],
        "message": "Revamp the SrcList allocator routines to be methods of Parse instead of being methods of the \"sqlite3\" object, so that they can leave better error messages when the SrcList object grows too large.\n\nFossilOrigin-Name: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/window.c||src/window.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:     SrcList *pNew;",
          "3874:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3875:     int nGot;",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "3887:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3888:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3889:     if( pNew==0 ){",
          "3890:       assert( db->mallocFailed );",
          "3892:     }",
          "3893:     pSrc = pNew;",
          "3894:     nGot = (sqlite3DbMallocSize(db, pNew) - sizeof(*pSrc))/sizeof(pSrc->a[0])+1;",
          "",
          "[Removed Lines]",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3891:       return pSrc;",
          "",
          "[Added Lines]",
          "3877:     sqlite3 *db = pParse->db;",
          "3880:       sqlite3ErrorMsg(pParse, \"too many FROM clause terms, max: %d\",",
          "3881:                       SQLITE_MAX_SRCLIST);",
          "3882:       return 0;",
          "3889:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: SrcList *sqlite3SrcListAppend(",
          "3955: ){",
          "3956:   struct SrcList_item *pItem;",
          "3959:   if( pList==0 ){",
          "3961:     if( pList==0 ) return 0;",
          "3962:     pList->nAlloc = 1;",
          "3963:     pList->nSrc = 1;",
          "3964:     memset(&pList->a[0], 0, sizeof(pList->a[0]));",
          "3965:     pList->a[0].iCursor = -1;",
          "3966:   }else{",
          "3972:   }",
          "3973:   pItem = &pList->a[pList->nSrc-1];",
          "3974:   if( pDatabase && pDatabase->z==0 ){",
          "",
          "[Removed Lines]",
          "3958:   assert( db!=0 );",
          "3960:     pList = sqlite3DbMallocRawNN(db, sizeof(SrcList) );",
          "3967:     pList = sqlite3SrcListEnlarge(db, pList, 1, pList->nSrc);",
          "3968:   }",
          "3969:   if( db->mallocFailed ){",
          "3970:     sqlite3SrcListDelete(db, pList);",
          "3971:     return 0;",
          "",
          "[Added Lines]",
          "3956:   sqlite3 *db;",
          "3958:   assert( pParse!=0 );",
          "3959:   assert( pParse->db!=0 );",
          "3960:   db = pParse->db;",
          "3962:     pList = sqlite3DbMallocRawNN(pParse->db, sizeof(SrcList) );",
          "3969:     SrcList *pNew = sqlite3SrcListEnlarge(pParse, pList, 1, pList->nSrc);",
          "3970:     if( pNew==0 ){",
          "3971:       sqlite3SrcListDelete(db, pList);",
          "3972:       return 0;",
          "3973:     }else{",
          "3974:       pList = pNew;",
          "3975:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4057:     );",
          "4058:     goto append_from_error;",
          "4059:   }",
          "4061:   if( p==0 ){",
          "4062:     goto append_from_error;",
          "4063:   }",
          "",
          "[Removed Lines]",
          "4060:   p = sqlite3SrcListAppend(db, p, pTable, pDatabase);",
          "",
          "[Added Lines]",
          "4064:   p = sqlite3SrcListAppend(pParse, p, pTable, pDatabase);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   sqlite3 *db = pParse->db;",
          "118:   int iDb = sqlite3SchemaToIndex(db, pView->pSchema);",
          "119:   pWhere = sqlite3ExprDup(db, pWhere, 0);",
          "121:   if( pFrom ){",
          "122:     assert( pFrom->nSrc==1 );",
          "123:     pFrom->a[0].zName = sqlite3DbStrDup(db, pView->zName);",
          "",
          "[Removed Lines]",
          "120:   pFrom = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "120:   pFrom = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     if( pSrc ){",
          "1019:       struct SrcList_item *pItem = pSrc->a;",
          "1020:       pItem->pTab = pFKey->pFrom;",
          "",
          "[Removed Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:       }",
          "1292:       pSelect = sqlite3SelectNew(pParse,",
          "1293:           sqlite3ExprListAppend(pParse, 0, pRaise),",
          "1295:           pWhere,",
          "1296:           0, 0, 0, 0, 0",
          "1297:       );",
          "",
          "[Removed Lines]",
          "1294:           sqlite3SrcListAppend(db, 0, &tFrom, 0),",
          "",
          "[Added Lines]",
          "1294:           sqlite3SrcListAppend(pParse, 0, &tFrom, 0),",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "690: %type fullname {SrcList*}",
          "691: %destructor fullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "692: fullname(A) ::= nm(X).  {",
          "694:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &X);",
          "695: }",
          "696: fullname(A) ::= nm(X) DOT nm(Y). {",
          "698:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &Y);",
          "699: }",
          "701: %type xfullname {SrcList*}",
          "702: %destructor xfullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "703: xfullname(A) ::= nm(X).",
          "705: xfullname(A) ::= nm(X) DOT nm(Y).",
          "707: xfullname(A) ::= nm(X) DOT nm(Y) AS nm(Z).  {",
          "709:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "710: }",
          "711: xfullname(A) ::= nm(X) AS nm(Z). {",
          "713:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "714: }",
          "",
          "[Removed Lines]",
          "693:   A = sqlite3SrcListAppend(pParse->db,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse->db,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse->db,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse->db,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "[Added Lines]",
          "693:   A = sqlite3SrcListAppend(pParse,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:     if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1217:   }",
          "1218:   expr(A) ::= expr(A) in_op(N) nm(Y) dbnm(Z) paren_exprlist(E). [IN] {",
          "1220:     Select *pSelect = sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0);",
          "1221:     if( E )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, E);",
          "1222:     A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "",
          "[Removed Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse->db, 0,&Y,&Z);",
          "",
          "[Added Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse, 0,&Y,&Z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1287: cmd ::= createkw(S) uniqueflag(U) INDEX ifnotexists(NE) nm(X) dbnm(D)",
          "1288:         ON nm(Y) LP sortlist(Z) RP where_opt(W). {",
          "1289:   sqlite3CreateIndex(pParse, &X, &D,",
          "1291:                       &S, W, SQLITE_SO_ASC, NE, SQLITE_IDXTYPE_APPDEF);",
          "1292:   if( IN_RENAME_OBJECT && pParse->pNewIndex ){",
          "1293:     sqlite3RenameTokenMap(pParse, pParse->pNewIndex->zName, &Y);",
          "",
          "[Removed Lines]",
          "1290:                      sqlite3SrcListAppend(pParse->db,0,&Y,0), Z, U,",
          "",
          "[Added Lines]",
          "1290:                      sqlite3SrcListAppend(pParse,0,&Y,0), Z, U,",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3960:       jointype = pSubitem->fg.jointype;",
          "3961:     }else{",
          "3968:     }",
          "",
          "[Removed Lines]",
          "3963:       pSrc = pParent->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "3964:       if( pSrc==0 ){",
          "3965:         assert( db->mallocFailed );",
          "3966:         break;",
          "3967:       }",
          "",
          "[Added Lines]",
          "3963:       pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "3964:       if( pSrc==0 ) break;",
          "3965:       pParent->pSrc = pSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3985:     if( nSubSrc>1 ){",
          "3990:     }",
          "",
          "[Removed Lines]",
          "3986:       pParent->pSrc = pSrc = sqlite3SrcListEnlarge(db, pSrc, nSubSrc-1,iFrom+1);",
          "3987:       if( db->mallocFailed ){",
          "3988:         break;",
          "3989:       }",
          "",
          "[Added Lines]",
          "3984:       pSrc = sqlite3SrcListEnlarge(pParse, pSrc, nSubSrc-1,iFrom+1);",
          "3985:       if( pSrc==0 ) break;",
          "3986:       pParent->pSrc = pSrc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3929: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "3930: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "3931: int sqlite3IdListIndex(IdList*,const char*);",
          "3934: SrcList *sqlite3SrcListAppendFromTerm(Parse*, SrcList*, Token*, Token*,",
          "3935:                                       Token*, Select*, Expr*, IdList*);",
          "3936: void sqlite3SrcListIndexedBy(Parse *, SrcList *, Token *);",
          "",
          "[Removed Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(sqlite3*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(sqlite3*, SrcList*, Token*, Token*);",
          "",
          "[Added Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(Parse*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(Parse*, SrcList*, Token*, Token*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735:   if( pSrc ){",
          "736:     assert( pSrc->nSrc>0 );",
          "737:     pSrc->a[pSrc->nSrc-1].zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "",
          "[Removed Lines]",
          "734:   pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "734:   pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     pSub = sqlite3SelectNew(",
          "824:         pParse, pSublist, pSrc, pWhere, pGroupBy, pHaving, pSort, 0, 0",
          "825:     );",
          "828:     if( p->pSrc ){",
          "829:       p->pSrc->a[0].pSelect = pSub;",
          "830:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "",
          "[Removed Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "827:     assert( p->pSrc || db->mallocFailed );",
          "",
          "[Added Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "1092: } {1 {out of memory}}",
          "",
          "[Added Lines]",
          "1092: } {1 {at most 64 tables in a join}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}