{
  "cve_id": "CVE-2018-9256",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, the LWAPP dissector could crash. This was addressed in epan/dissectors/packet-lwapp.c by limiting the encapsulation levels to restrict the recursion depth.",
  "repo": "wireshark/wireshark",
  "patch_hash": "1592587e6f9fd8c8aa8fc7f67989690d0c6882c4",
  "patch_info": {
    "commit_hash": "1592587e6f9fd8c8aa8fc7f67989690d0c6882c4",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/1592587e6f9fd8c8aa8fc7f67989690d0c6882c4",
    "files": [
      "epan/dissectors/packet-lwapp.c"
    ],
    "message": "LWAPP: define a recursion depth limit\n\nAltough the dissection consumes a few ytes each time it is called,\nit can trigger a stack overflow for big packets.\nLet's limmit the number of allowed encapsulation for a given packet.\n\nBug: 14467\nChange-Id: I73e82e01810b63a4f603907e69b20f3715a4ad55\nReviewed-on: https://code.wireshark.org/review/26338\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c": [
      "File: epan/dissectors/packet-lwapp.c -> epan/dissectors/packet-lwapp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <epan/packet.h>",
      "18: #include <epan/prefs.h>",
      "20: void proto_register_lwapp(void);",
      "21: void proto_reg_handoff_lwapp(void);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: #include <epan/proto_data.h>",
      "20: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51: static gint hf_lwapp_control_seq_no = -1;",
      "52: static gint hf_lwapp_control_length = -1;",
      "54: static dissector_handle_t eth_withoutfcs_handle;",
      "55: static dissector_handle_t wlan_handle;",
      "56: static dissector_handle_t wlan_bsfc_handle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: #define LWAPP_MAX_NESTED_ENCAP 10",
      "58: static expert_field ei_lwapp_too_many_encap = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "351:         &hf_lwapp_flags_fragment_type,",
      "352:         NULL",
      "353:     };",
      "356:     proto_item      *ti;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360:     guint encap_nested_count;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "391:         col_append_str(pinfo->cinfo, COL_INFO,",
      "392:                         \" 802.11 Packet\");",
      "396:     if (tree) {",
      "400:         lwapp_tree = proto_item_add_subtree(ti, ett_lwapp);",
      "402:         if (have_destmac) {",
      "",
      "[Removed Lines]",
      "399:         ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
      "",
      "[Added Lines]",
      "402:     ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
      "403:     encap_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_lwapp, 0));",
      "404:     if (++encap_nested_count > LWAPP_MAX_NESTED_ENCAP) {",
      "405:         expert_add_info(pinfo, ti, &ei_lwapp_too_many_encap);",
      "406:         return tvb_captured_length(tvb);",
      "407:     }",
      "408:     p_add_proto_data(pinfo->pool, pinfo, proto_lwapp, 0, GUINT_TO_POINTER(encap_nested_count));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "503:         &ett_lwapp_control,",
      "504:         &ett_lwapp_flags",
      "505:     };",
      "506:     module_t *lwapp_module;",
      "508:     proto_lwapp = proto_register_protocol (\"LWAPP Encapsulated Packet\", \"LWAPP\", \"lwapp\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "520:     static ei_register_info ei[] = {",
      "521:         { &ei_lwapp_too_many_encap, { \"lwapp.too_many_encap\", PI_UNDECODED, PI_WARN, \"Too many LWAPP encapsulation levels\", EXPFILL }}",
      "522:     };",
      "524:     expert_module_t* expert_lwapp;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "512:     proto_lwapp_control = proto_register_protocol_in_name_only (\"LWAPP Control Message\", \"LWAPP-CNTL\", \"lwapp-cntl\", proto_lwapp, FT_PROTOCOL);",
      "513:     proto_register_field_array(proto_lwapp, hf, array_length(hf));",
      "514:     proto_register_subtree_array(ett, array_length(ett));",
      "516:     lwapp_module = prefs_register_protocol(proto_lwapp, NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "533:     expert_lwapp = expert_register_protocol(proto_lwapp);",
      "534:     expert_register_field_array(expert_lwapp, ei, array_length(ei));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dac48f148538c706c446e5105d84ebcb54587528",
      "candidate_info": {
        "commit_hash": "dac48f148538c706c446e5105d84ebcb54587528",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/dac48f148538c706c446e5105d84ebcb54587528",
        "files": [
          "epan/dissectors/packet-lwapp.c"
        ],
        "message": "LWAPP: define a recursion depth limit\n\nAltough the dissection consumes a few ytes each time it is called,\nit can trigger a stack overflow for big packets.\nLet's limmit the number of allowed encapsulation for a given packet.\n\nBug: 14467\nChange-Id: I73e82e01810b63a4f603907e69b20f3715a4ad55\nReviewed-on: https://code.wireshark.org/review/26338\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 1592587e6f9fd8c8aa8fc7f67989690d0c6882c4)\nReviewed-on: https://code.wireshark.org/review/26344",
        "before_after_code_files": [
          "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c": [
          "File: epan/dissectors/packet-lwapp.c -> epan/dissectors/packet-lwapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <epan/packet.h>",
          "30: #include <epan/prefs.h>",
          "32: void proto_register_lwapp(void);",
          "33: void proto_reg_handoff_lwapp(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <epan/proto_data.h>",
          "32: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: static gint hf_lwapp_control_seq_no = -1;",
          "61: static gint hf_lwapp_control_length = -1;",
          "63: static dissector_handle_t eth_withoutfcs_handle;",
          "64: static dissector_handle_t wlan_handle;",
          "65: static dissector_handle_t wlan_bsfc_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: #define LWAPP_MAX_NESTED_ENCAP 10",
          "67: static expert_field ei_lwapp_too_many_encap = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:         &hf_lwapp_flags_fragment_type,",
          "361:         NULL",
          "362:     };",
          "365:     proto_item      *ti;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     guint encap_nested_count;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:         col_append_str(pinfo->cinfo, COL_INFO,",
          "401:                         \" 802.11 Packet\");",
          "405:     if (tree) {",
          "409:         lwapp_tree = proto_item_add_subtree(ti, ett_lwapp);",
          "411:         if (have_destmac) {",
          "",
          "[Removed Lines]",
          "408:         ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
          "",
          "[Added Lines]",
          "411:     ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
          "412:     encap_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_lwapp, 0));",
          "413:     if (++encap_nested_count > LWAPP_MAX_NESTED_ENCAP) {",
          "414:         expert_add_info(pinfo, ti, &ei_lwapp_too_many_encap);",
          "415:         return tvb_captured_length(tvb);",
          "416:     }",
          "417:     p_add_proto_data(pinfo->pool, pinfo, proto_lwapp, 0, GUINT_TO_POINTER(encap_nested_count));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "512:         &ett_lwapp_control,",
          "513:         &ett_lwapp_flags",
          "514:     };",
          "515:     module_t *lwapp_module;",
          "517:     proto_lwapp = proto_register_protocol (\"LWAPP Encapsulated Packet\",",
          "518:                                          \"LWAPP\", \"lwapp\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:     static ei_register_info ei[] = {",
          "530:         { &ei_lwapp_too_many_encap, { \"lwapp.too_many_encap\", PI_UNDECODED, PI_WARN, \"Too many LWAPP encapsulation levels\", EXPFILL }}",
          "531:     };",
          "533:     expert_module_t* expert_lwapp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "524:                                          \"LWAPP-CNTL\", \"lwapp-cntl\");",
          "525:     proto_register_field_array(proto_lwapp, hf, array_length(hf));",
          "526:     proto_register_subtree_array(ett, array_length(ett));",
          "528:     lwapp_module = prefs_register_protocol(proto_lwapp, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:     expert_lwapp = expert_register_protocol(proto_lwapp);",
          "546:     expert_register_field_array(expert_lwapp, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13270b1bc0a29f9c31358ae1461c8eb9253cc08e",
      "candidate_info": {
        "commit_hash": "13270b1bc0a29f9c31358ae1461c8eb9253cc08e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/13270b1bc0a29f9c31358ae1461c8eb9253cc08e",
        "files": [
          "epan/dissectors/packet-lwapp.c"
        ],
        "message": "LWAPP: define a recursion depth limit\n\nAltough the dissection consumes a few ytes each time it is called,\nit can trigger a stack overflow for big packets.\nLet's limmit the number of allowed encapsulation for a given packet.\n\nBug: 14467\nChange-Id: I73e82e01810b63a4f603907e69b20f3715a4ad55\nReviewed-on: https://code.wireshark.org/review/26338\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 1592587e6f9fd8c8aa8fc7f67989690d0c6882c4)\nReviewed-on: https://code.wireshark.org/review/26343",
        "before_after_code_files": [
          "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-lwapp.c||epan/dissectors/packet-lwapp.c": [
          "File: epan/dissectors/packet-lwapp.c -> epan/dissectors/packet-lwapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <epan/packet.h>",
          "30: #include <epan/prefs.h>",
          "32: void proto_register_lwapp(void);",
          "33: void proto_reg_handoff_lwapp(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <epan/proto_data.h>",
          "32: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: static gint hf_lwapp_control_seq_no = -1;",
          "64: static gint hf_lwapp_control_length = -1;",
          "66: static dissector_handle_t eth_withoutfcs_handle;",
          "67: static dissector_handle_t wlan_handle;",
          "68: static dissector_handle_t wlan_bsfc_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: #define LWAPP_MAX_NESTED_ENCAP 10",
          "70: static expert_field ei_lwapp_too_many_encap = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:         &hf_lwapp_flags_fragment_type,",
          "364:         NULL",
          "365:     };",
          "368:     proto_item      *ti;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     guint encap_nested_count;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:         col_append_str(pinfo->cinfo, COL_INFO,",
          "404:                         \" 802.11 Packet\");",
          "408:     if (tree) {",
          "412:         lwapp_tree = proto_item_add_subtree(ti, ett_lwapp);",
          "414:         if (have_destmac) {",
          "",
          "[Removed Lines]",
          "411:         ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
          "",
          "[Added Lines]",
          "414:     ti = proto_tree_add_item(tree, proto_lwapp, tvb, offset, -1, ENC_NA);",
          "415:     encap_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_lwapp, 0));",
          "416:     if (++encap_nested_count > LWAPP_MAX_NESTED_ENCAP) {",
          "417:         expert_add_info(pinfo, ti, &ei_lwapp_too_many_encap);",
          "418:         return tvb_captured_length(tvb);",
          "419:     }",
          "420:     p_add_proto_data(pinfo->pool, pinfo, proto_lwapp, 0, GUINT_TO_POINTER(encap_nested_count));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515:         &ett_lwapp_control,",
          "516:         &ett_lwapp_flags",
          "517:     };",
          "518:     module_t *lwapp_module;",
          "520:     proto_lwapp = proto_register_protocol (\"LWAPP Encapsulated Packet\", \"LWAPP\", \"lwapp\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:     static ei_register_info ei[] = {",
          "533:         { &ei_lwapp_too_many_encap, { \"lwapp.too_many_encap\", PI_UNDECODED, PI_WARN, \"Too many LWAPP encapsulation levels\", EXPFILL }}",
          "534:     };",
          "536:     expert_module_t* expert_lwapp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "524:     proto_lwapp_control = proto_register_protocol_in_name_only (\"LWAPP Control Message\", \"LWAPP-CNTL\", \"lwapp-cntl\", proto_lwapp, FT_PROTOCOL);",
          "525:     proto_register_field_array(proto_lwapp, hf, array_length(hf));",
          "526:     proto_register_subtree_array(ett, array_length(ett));",
          "528:     lwapp_module = prefs_register_protocol(proto_lwapp, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:     expert_lwapp = expert_register_protocol(proto_lwapp);",
          "546:     expert_register_field_array(expert_lwapp, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    }
  ]
}