{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
      "candidate_info": {
        "commit_hash": "23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/23e6bf041bc5a5404cfa847dba1d2b2878e6f48c",
        "files": [
          "crypto/threads_pthread.c"
        ],
        "message": "Corrections according the review comments.\n\nUpdated indentations according project rules, renamed file-local define to the shorter version - USE_RWLOCK, fixed declaration after the if statement in CRYPTO_THREAD_lock_new().\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1981)\n(cherry picked from commit ec93a2921f6128ac931466ae171fba92a0eab45d)",
        "before_after_code_files": [
          "crypto/threads_pthread.c||crypto/threads_pthread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
          "18: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
          "19: {",
          "21:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_rwlock_t));",
          "22:     if (lock == NULL)",
          "23:         return NULL;",
          "",
          "[Removed Lines]",
          "14: #ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15:     #define OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "16: #endif",
          "20: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "",
          "[Added Lines]",
          "14: # ifdef PTHREAD_RWLOCK_INITIALIZER",
          "15: #  define USE_RWLOCK",
          "16: # endif",
          "20: # ifdef USE_RWLOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         OPENSSL_free(lock);",
          "27:         return NULL;",
          "28:     }",
          "30:     CRYPTO_RWLOCK *lock = OPENSSL_zalloc(sizeof(pthread_mutex_t));",
          "31:     if (lock == NULL)",
          "32:         return NULL;",
          "35:     pthread_mutexattr_init(&attr);",
          "36:     pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);",
          "38:     if (pthread_mutex_init(lock, &attr) != 0) {",
          "39:         pthread_mutexattr_destroy(&attr);",
          "40:         OPENSSL_free(lock);",
          "41:         return NULL;",
          "42:     }",
          "44:     pthread_mutexattr_destroy(&attr);",
          "47:     return lock;",
          "48: }",
          "50: int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)",
          "51: {",
          "53:     if (pthread_rwlock_rdlock(lock) != 0)",
          "54:         return 0;",
          "56:     if (pthread_mutex_lock(lock) != 0)",
          "57:         return 0;",
          "60:     return 1;",
          "61: }",
          "63: int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)",
          "64: {",
          "66:     if (pthread_rwlock_wrlock(lock) != 0)",
          "67:         return 0;",
          "69:     if (pthread_mutex_lock(lock) != 0)",
          "70:         return 0;",
          "73:     return 1;",
          "74: }",
          "76: int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)",
          "77: {",
          "79:     if (pthread_rwlock_unlock(lock) != 0)",
          "80:         return 0;",
          "82:     if (pthread_mutex_unlock(lock) != 0)",
          "83:         return 0;",
          "86:     return 1;",
          "87: }",
          "",
          "[Removed Lines]",
          "29: #else",
          "34:     pthread_mutexattr_t attr;",
          "45: #endif",
          "52: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "55: #else",
          "58: #endif",
          "65: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "68: #else",
          "71: #endif",
          "78: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "81: #else",
          "84: #endif",
          "",
          "[Added Lines]",
          "29: # else",
          "30:     pthread_mutexattr_t attr;",
          "46: # endif",
          "53: # ifdef USE_RWLOCK",
          "56: # else",
          "59: # endif",
          "66: # ifdef USE_RWLOCK",
          "69: # else",
          "72: # endif",
          "79: # ifdef USE_RWLOCK",
          "82: # else",
          "85: # endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     if (lock == NULL)",
          "92:         return;",
          "95:     pthread_rwlock_destroy(lock);",
          "97:     pthread_mutex_destroy(lock);",
          "99:     OPENSSL_free(lock);",
          "101:     return;",
          "",
          "[Removed Lines]",
          "94: #ifdef OPENSSL_THREADS_HAVE_PTHREAD_RWLOCK",
          "96: #else",
          "98: #endif",
          "",
          "[Added Lines]",
          "95: # ifdef USE_RWLOCK",
          "97: # else",
          "99: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53c6cbf6e9a6e4fe2433a89bf3c970355dd1e29a",
      "candidate_info": {
        "commit_hash": "53c6cbf6e9a6e4fe2433a89bf3c970355dd1e29a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/53c6cbf6e9a6e4fe2433a89bf3c970355dd1e29a",
        "files": [
          "crypto/aes/asm/aesp8-ppc.pl"
        ],
        "message": "aes/asm/aesp8-ppc.pl: improve [backward] portability.\n\nSome of stone-age assembler can't cope with r0 in address. It's actually\nsensible thing to do, because r0 is shunted to 0 in address arithmetic\nand by refusing r0 assembler effectively makes you understand that.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit a54aba531327285f64cf13a909bc129e9f9d5970)",
        "before_after_code_files": [
          "crypto/aes/asm/aesp8-ppc.pl||crypto/aes/asm/aesp8-ppc.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/aes/asm/aesp8-ppc.pl||crypto/aes/asm/aesp8-ppc.pl": [
          "File: crypto/aes/asm/aesp8-ppc.pl -> crypto/aes/asm/aesp8-ppc.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "3011:   vxor  $twk0,$twk0,v31",
          "3013:  vcipher  $out0,$out0,v26",
          "3015:  vcipher  $out1,$out1,v26",
          "3016:  vcipher  $out2,$out2,v26",
          "3017:  vcipher  $out3,$out3,v26",
          "",
          "[Removed Lines]",
          "3014:  lvsr  $inpperm,r0,$taillen # $in5 is no more",
          "",
          "[Added Lines]",
          "3014:  lvsr  $inpperm,0,$taillen # $in5 is no more",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
      "candidate_info": {
        "commit_hash": "6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6af62ee9af06d057f03ec2abc8b9dfd4ac11b16f",
        "files": [
          "crypto/evp/e_aes.c"
        ],
        "message": "Properly handle a partial block in OCB mode\n\nIf we have previously been passed a partial block in an \"Update\" call then\nmake sure we properly increment the output buffer when we use it.\n\nFixes #2273\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 7c12c7b61c5b37c9dff930ccc68421fb7de00271)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
          ],
          "candidate": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2587:             }",
          "2588:             written_len = AES_BLOCK_SIZE;",
          "2590:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2590:             if (out != NULL)",
          "2591:                 out += AES_BLOCK_SIZE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e15c45fb22eca69d0faffb91d4c501e11837d376",
      "candidate_info": {
        "commit_hash": "e15c45fb22eca69d0faffb91d4c501e11837d376",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e15c45fb22eca69d0faffb91d4c501e11837d376",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "Fix a missing function prototype in AFALG engine\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit a1fd1fb241069cc987d0d2cf13880bd16cada3c9)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     !defined(AF_ALG)",
          "29: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "30: # warning \"Skipping Compilation of AFALG engine\"",
          "31: void engine_load_afalg_int(void)",
          "32: {",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: void engine_load_afalg_int(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38a041a092fe50c5a9c76ea4f21be89ed086a8de",
      "candidate_info": {
        "commit_hash": "38a041a092fe50c5a9c76ea4f21be89ed086a8de",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/38a041a092fe50c5a9c76ea4f21be89ed086a8de",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Adjust in and in_len instead of donelen\n\nDon't use the temp variable donelen in the non-aad fragmented code path.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit ef055ec536a3c6e698dd9f45b41d57a32366b4fa)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1012:     EVP_CIPHER_CTX_set_padding(ctx, 0);",
          "1013:     err = \"CIPHERUPDATE_ERROR\";",
          "1014:     tmplen = 0;",
          "1016:     if (!frag) {",
          "1018:         if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &tmplen, in, in_len))",
          "",
          "[Removed Lines]",
          "1015:     donelen = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1023:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign, &chunklen, in, 1))",
          "1024:                 goto err;",
          "1025:             tmplen += chunklen;",
          "1027:         }",
          "1029:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1031:                 goto err;",
          "1032:             tmplen += chunklen;",
          "1034:         }",
          "1036:             if (!EVP_CipherUpdate(ctx, tmp + out_misalign + tmplen, &chunklen,",
          "1038:                 goto err;",
          "1039:             tmplen += chunklen;",
          "1040:         }",
          "",
          "[Removed Lines]",
          "1026:             donelen = 1;",
          "1028:         if (in_len > 2) {",
          "1030:                                   in + donelen, in_len - 2))",
          "1033:             donelen += in_len - 2;",
          "1035:         if (in_len > 1 ) {",
          "1037:                                   in + donelen, 1))",
          "",
          "[Added Lines]",
          "1025:             in++;",
          "1026:             in_len--;",
          "1028:         if (in_len > 1) {",
          "1030:                                   in, in_len - 1))",
          "1033:             in += in_len - 1;",
          "1034:             in_len = 1;",
          "1036:         if (in_len > 0 ) {",
          "1038:                                   in, 1))",
          "",
          "---------------"
        ]
      }
    }
  ]
}