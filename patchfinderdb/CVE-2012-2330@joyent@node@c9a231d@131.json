{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a811a4a13042a4b3ba019fbe1221f4c83b02a699",
      "candidate_info": {
        "commit_hash": "a811a4a13042a4b3ba019fbe1221f4c83b02a699",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a811a4a13042a4b3ba019fbe1221f4c83b02a699",
        "files": [
          "lib/querystring.js",
          "test/simple/test-querystring.js"
        ],
        "message": "Fix #3058 querystring: Fix incorrect handling of empty keys",
        "before_after_code_files": [
          "lib/querystring.js||liquerystring.js",
          "test/simple/test-querystring.js||test/simple/test-querystring.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/querystring.js||liquerystring.js": [
          "File: lib/querystring.js -> liquerystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         kstr = x.substring(0, idx),",
          "190:         vstr = x.substring(idx + 1), k, v;",
          "192:     try {",
          "193:       k = decodeURIComponent(kstr);",
          "194:       v = decodeURIComponent(vstr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-querystring.js||test/simple/test-querystring.js": [
          "File: test/simple/test-querystring.js -> test/simple/test-querystring.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     { hasOwnProperty: 'x',",
          "56:       toString: 'foo',",
          "57:       valueOf: 'bar',",
          "59: ];",
          "",
          "[Removed Lines]",
          "58:       __defineGetter__: 'baz' }]",
          "",
          "[Added Lines]",
          "58:       __defineGetter__: 'baz' }],",
          "60:   ['foo&bar=baz', 'foo=&bar=baz', { foo: '', bar: 'baz' }]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e02af94947bf3702648a9eb04d073090833d4e43",
      "candidate_info": {
        "commit_hash": "e02af94947bf3702648a9eb04d073090833d4e43",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e02af94947bf3702648a9eb04d073090833d4e43",
        "files": [
          "test/simple/test-http-client-timeout.js"
        ],
        "message": "test: add failing HTTP client timeout test\n\nSee #3231.",
        "before_after_code_files": [
          "test/simple/test-http-client-timeout.js||test/simple/test-http-client-timeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-http-client-timeout.js||test/simple/test-http-client-timeout.js": [
          "File: test/simple/test-http-client-timeout.js -> test/simple/test-http-client-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var options = {",
          "27:   method: 'GET',",
          "28:   port: common.PORT,",
          "29:   host: '127.0.0.1',",
          "30:   path: '/'",
          "31: };",
          "33: var server = http.createServer(function(req, res) {",
          "35: });",
          "37: server.listen(options.port, options.host, function() {",
          "38:   var req = http.request(options, function(res) {",
          "40:   });",
          "41:   req.on('close', function() {",
          "42:     server.close();",
          "43:   });",
          "44:   function destroy() {",
          "45:     req.destroy();",
          "46:   }",
          "47:   req.setTimeout(1, destroy);",
          "48:   req.on('error', destroy);",
          "49:   req.end();",
          "50: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f0557d78dfa3d4f92daf4558570384ce73b0953",
      "candidate_info": {
        "commit_hash": "0f0557d78dfa3d4f92daf4558570384ce73b0953",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0f0557d78dfa3d4f92daf4558570384ce73b0953",
        "files": [
          "src/stream_wrap.cc"
        ],
        "message": "stream_wrap: fix signedness compiler warnings",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     return;",
          "235:   }",
          "239:   if (handle_that_last_alloced == handle) {",
          "240:     slab_used -= (buf.len - nread);",
          "",
          "[Removed Lines]",
          "237:   assert(nread <= buf.len);",
          "",
          "[Added Lines]",
          "237:   assert(static_cast<size_t>(nread) <= buf.len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37537d5720a563cb63929a0f4014491467767874",
      "candidate_info": {
        "commit_hash": "37537d5720a563cb63929a0f4014491467767874",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/37537d5720a563cb63929a0f4014491467767874",
        "files": [
          "test/message/stdin_messages.js",
          "test/message/stdin_messages.out"
        ],
        "message": "test: stdin error messages",
        "before_after_code_files": [
          "test/message/stdin_messages.js||test/message/stdin_messages.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/message/stdin_messages.js||test/message/stdin_messages.js": [
          "File: test/message/stdin_messages.js -> test/message/stdin_messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "26: var spawn = require('child_process').spawn;",
          "28: function run(cmd, strict, cb) {",
          "29:   var args = [];",
          "30:   if (strict) args.push('--use_strict');",
          "31:   args.push('-p');",
          "32:   var child = spawn(process.execPath, args);",
          "33:   child.stdout.pipe(process.stdout);",
          "34:   child.stderr.pipe(process.stdout);",
          "35:   child.stdin.end(cmd);",
          "36:   child.on('close', cb);",
          "37: }",
          "39: var queue =",
          "40:   [ 'with(this){__filename}',",
          "41:     '42',",
          "42:     'throw new Error(\"hello\")',",
          "43:     'var x = 100; y = x;',",
          "44:     'var ______________________________________________; throw 10' ];",
          "46: function go() {",
          "47:   var c = queue.shift();",
          "48:   if (!c) return console.log('done');",
          "49:   run(c, false, function() {",
          "50:     run(c, true, go);",
          "51:   });",
          "52: }",
          "54: go();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b53b8b8ae7d7e1328319b04b9030a7afb97a7924",
      "candidate_info": {
        "commit_hash": "b53b8b8ae7d7e1328319b04b9030a7afb97a7924",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b53b8b8ae7d7e1328319b04b9030a7afb97a7924",
        "files": [
          "test/pummel/test-exec.js"
        ],
        "message": "test-exec: make it work on Windows",
        "before_after_code_files": [
          "test/pummel/test-exec.js||test/pummel/test-exec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-exec.js||test/pummel/test-exec.js": [
          "File: test/pummel/test-exec.js -> test/pummel/test-exec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var exec = require('child_process').exec;",
          "25: var success_count = 0;",
          "26: var error_count = 0;",
          "29:   if (err) {",
          "30:     error_count++;",
          "31:     console.log('error!: ' + err.code);",
          "",
          "[Removed Lines]",
          "28: exec('ls /', function(err, stdout, stderr) {",
          "",
          "[Added Lines]",
          "26: if (process.platform !== 'win32') {",
          "28:   var SLEEP3_COMMAND = \"sleep 3\";",
          "29: } else {",
          "32:   var SLEEP3_COMMAND = \"cmd /c choice /t 3 /c X /d X\";",
          "33: }",
          "40: exec(process.execPath + ' -p -e process.versions',",
          "41:      function(err, stdout, stderr) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: });",
          "43:   if (err) {",
          "44:     error_count++;",
          "45:     assert.equal('', stdout);",
          "",
          "[Removed Lines]",
          "42: exec('ls /DOES_NOT_EXIST', function(err, stdout, stderr) {",
          "",
          "[Added Lines]",
          "55: exec('thisisnotavalidcommand', function(err, stdout, stderr) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: var sleeperStart = new Date();",
          "63:   var diff = (new Date()) - sleeperStart;",
          "64:   console.log('\\'sleep 3\\' with timeout 50 took %d ms', diff);",
          "65:   assert.ok(diff < 500);",
          "",
          "[Removed Lines]",
          "62: exec('sleep 3', { timeout: 50 }, function(err, stdout, stderr) {",
          "",
          "[Added Lines]",
          "75: exec(SLEEP3_COMMAND, { timeout: 50 }, function(err, stdout, stderr) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74: var startSleep3 = new Date();",
          "77: process.nextTick(function() {",
          "78:   console.log('kill pid %d', killMeTwice.pid);",
          "",
          "[Removed Lines]",
          "75: var killMeTwice = exec('sleep 3', {timeout: 1000}, killMeTwiceCallback);",
          "",
          "[Added Lines]",
          "88: var killMeTwice = exec(SLEEP3_COMMAND, {timeout: 1000}, killMeTwiceCallback);",
          "",
          "---------------"
        ]
      }
    }
  ]
}