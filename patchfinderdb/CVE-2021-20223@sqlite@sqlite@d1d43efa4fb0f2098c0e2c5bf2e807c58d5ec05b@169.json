{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c879c4eac05f6fe5f6dc6c8efd214751a7add863",
      "candidate_info": {
        "commit_hash": "c879c4eac05f6fe5f6dc6c8efd214751a7add863",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c879c4eac05f6fe5f6dc6c8efd214751a7add863",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Separate OP_IdxInsert and OP_SorterInsert into completely separate opcodes, helping each one to run a little faster.\n\nFossilOrigin-Name: 447d71f0867a11f789eba164ea77470b3ae4953927556304b0861cf690250776",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b6185550f2bcfa11513898984f1fc2029e0356e9acdc786c5c4a8006b1da2ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5591:   VdbeCursor *pC;",
          "5592:   BtreePayload x;",
          "5594:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "5595:   pC = p->apCsr[pOp->p1];",
          "5596:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "5597:   assert( pC!=0 );",
          "5598:   assert( !isSorter(pC) );",
          "5599:   pIn2 = &aMem[pOp->p2];",
          "5600:   assert( pIn2->flags & MEM_Blob );",
          "5601:   if( pOp->p5 & OPFLAG_NCHANGE ) p->nChange++;",
          "5602:   assert( pC->eCurType==CURTYPE_BTREE );",
          "5603:   assert( pC->isTable==0 );",
          "5604:   rc = ExpandBlob(pIn2);",
          "5605:   if( rc ) goto abort_due_to_error;",
          "5606:   x.nKey = pIn2->n;",
          "5607:   x.pKey = pIn2->z;",
          "5608:   x.aMem = aMem + pOp->p3;",
          "5609:   x.nMem = (u16)pOp->p4.i;",
          "5610:   rc = sqlite3BtreeInsert(pC->uc.pCursor, &x,",
          "5611:        (pOp->p5 & (OPFLAG_APPEND|OPFLAG_SAVEPOSITION)),",
          "5612:       ((pOp->p5 & OPFLAG_USESEEKRESULT) ? pC->seekResult : 0)",
          "5613:       );",
          "5614:   assert( pC->deferredMoveto==0 );",
          "5615:   pC->cacheStatus = CACHE_STALE;",
          "5616:   if( rc) goto abort_due_to_error;",
          "5617:   break;",
          "5618: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5599:   VdbeCursor *pC;",
          "5602:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "5603:   pC = p->apCsr[pOp->p1];",
          "5604:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "5605:   assert( pC!=0 );",
          "5607:   pIn2 = &aMem[pOp->p2];",
          "5608:   assert( pIn2->flags & MEM_Blob );",
          "5611:   assert( pC->isTable==0 );",
          "5612:   rc = ExpandBlob(pIn2);",
          "5613:   if( rc ) goto abort_due_to_error;",
          "5628:   if( rc) goto abort_due_to_error;",
          "5629:   break;",
          "5630: }",
          "",
          "[Removed Lines]",
          "5600:   BtreePayload x;",
          "5606:   assert( isSorter(pC)==(pOp->opcode==OP_SorterInsert) );",
          "5609:   if( pOp->p5 & OPFLAG_NCHANGE ) p->nChange++;",
          "5610:   assert( pC->eCurType==CURTYPE_BTREE || pOp->opcode==OP_SorterInsert );",
          "5614:   if( pOp->opcode==OP_SorterInsert ){",
          "5615:     rc = sqlite3VdbeSorterWrite(pC, pIn2);",
          "5616:   }else{",
          "5617:     x.nKey = pIn2->n;",
          "5618:     x.pKey = pIn2->z;",
          "5619:     x.aMem = aMem + pOp->p3;",
          "5620:     x.nMem = (u16)pOp->p4.i;",
          "5621:     rc = sqlite3BtreeInsert(pC->uc.pCursor, &x,",
          "5622:          (pOp->p5 & (OPFLAG_APPEND|OPFLAG_SAVEPOSITION)),",
          "5623:         ((pOp->p5 & OPFLAG_USESEEKRESULT) ? pC->seekResult : 0)",
          "5624:         );",
          "5625:     assert( pC->deferredMoveto==0 );",
          "5626:     pC->cacheStatus = CACHE_STALE;",
          "5627:   }",
          "",
          "[Added Lines]",
          "5634:   assert( isSorter(pC) );",
          "5640:   rc = sqlite3VdbeSorterWrite(pC, pIn2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "399062cccbb0d14ab16e175a565e2efc1b1d0c8f",
      "candidate_info": {
        "commit_hash": "399062cccbb0d14ab16e175a565e2efc1b1d0c8f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/399062cccbb0d14ab16e175a565e2efc1b1d0c8f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Change a datatype from i16 to int to appease Converity and help eliminate a false-positive.\n\nFossilOrigin-Name: 5b560ec49041d89c87ea3315d8fc17f7fb0e03a82091934be7373b290183f82e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5cdd57150db914b61b8b9c61c6caac9690fe7b647ee2c003e75b9b62be62752",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "dc4f6fc099b3fd2476f95286503985f1a22370bc",
      "candidate_info": {
        "commit_hash": "dc4f6fc099b3fd2476f95286503985f1a22370bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc4f6fc099b3fd2476f95286503985f1a22370bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/fkey.c",
          "src/select.c",
          "src/update.c",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "During byte-code generation, strive to avoid jumps that merely jump to the following instruction.\n\nFossilOrigin-Name: bcf876e67e75f6709f2b25683a3952bbbb87c672bb9d7af456feebc0ab9f6c31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "src/select.c||src/select.c",
          "src/update.c||src/update.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a877221ce90e7523059353a68650c5fdd28ed032807afc2f10afbfbf864bdfe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:                                  iTabCur, aToOpen, &iDataCur, &iIdxCur);",
          "534:       assert( pPk || IsVirtual(pTab) || iDataCur==iTabCur );",
          "535:       assert( pPk || IsVirtual(pTab) || iIdxCur==iDataCur+1 );",
          "537:     }",
          "",
          "[Removed Lines]",
          "536:       if( eOnePass==ONEPASS_MULTI ) sqlite3VdbeJumpHere(v, iAddrOnce);",
          "",
          "[Added Lines]",
          "536:       if( eOnePass==ONEPASS_MULTI ){",
          "537:         sqlite3VdbeJumpHereOrPopInst(v, iAddrOnce);",
          "538:       }",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   sqlite3ExprDelete(db, pWhere);",
          "660:   if( iFkIfZero ){",
          "662:   }",
          "663: }",
          "",
          "[Removed Lines]",
          "661:     sqlite3VdbeJumpHere(v, iFkIfZero);",
          "",
          "[Added Lines]",
          "661:     sqlite3VdbeJumpHereOrPopInst(v, iFkIfZero);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5494:   pAggInfo->directMode = 0;",
          "5495:   if( addrHitTest ){",
          "5497:   }",
          "5498: }",
          "",
          "[Removed Lines]",
          "5496:     sqlite3VdbeJumpHere(v, addrHitTest);",
          "",
          "[Added Lines]",
          "5496:     sqlite3VdbeJumpHereOrPopInst(v, addrHitTest);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:       }",
          "617:       sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenWrite, 0, iBaseCur,",
          "618:                                  aToOpen, 0, 0);",
          "620:     }",
          "",
          "[Removed Lines]",
          "619:       if( addrOnce ) sqlite3VdbeJumpHere(v, addrOnce);",
          "",
          "[Added Lines]",
          "619:       if( addrOnce ){",
          "620:         sqlite3VdbeJumpHereOrPopInst(v, addrOnce);",
          "621:       }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);",
          "231: void sqlite3VdbeChangeP5(Vdbe*, u16 P5);",
          "232: void sqlite3VdbeJumpHere(Vdbe*, int addr);",
          "233: int sqlite3VdbeChangeToNoop(Vdbe*, int addr);",
          "234: int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);",
          "235: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: void sqlite3VdbeJumpHereOrPopInst(Vdbe*, int addr);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:   sqlite3VdbeChangeP2(p, addr, p->nOp);",
          "1066: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1081: void sqlite3VdbeJumpHereOrPopInst(Vdbe *p, int addr){",
          "1082:   if( addr==p->nOp-1 ){",
          "1083:     assert( p->aOp[addr].opcode==OP_Once",
          "1084:          || p->aOp[addr].opcode==OP_If",
          "1085:          || p->aOp[addr].opcode==OP_FkIfZero );",
          "1086:     assert( p->aOp[addr].p4type==0 );",
          "1087: #ifdef SQLITE_VDBE_COVERAGE",
          "1089: #endif",
          "1090:     p->nOp--;",
          "1091:   }else{",
          "1092:     sqlite3VdbeChangeP2(p, addr, p->nOp);",
          "1093:   }",
          "1094: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5748a550244deea5b0a0e1c09b240f85b7a0299",
      "candidate_info": {
        "commit_hash": "e5748a550244deea5b0a0e1c09b240f85b7a0299",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5748a550244deea5b0a0e1c09b240f85b7a0299",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Further enhancements to RTREE, following up to check-in [f898d04cf272ef01] so that constraints are allowed to be compared to strings that look like numbers.  Ticket [aa573a787b8f1fdf]\n\nFossilOrigin-Name: 32772dfd50b602c049d8c30bc28cde60a18b7495a997d728081f689ff417c956",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855:                 || (idxStr && (int)strlen(idxStr)==argc*2) );",
          "1856:         for(ii=0; ii<argc; ii++){",
          "1857:           RtreeConstraint *p = &pCsr->aConstraint[ii];",
          "1859:           p->op = idxStr[ii*2];",
          "1860:           p->iCoord = idxStr[ii*2+1]-'0';",
          "1861:           if( p->op>=RTREE_MATCH ){",
          "",
          "[Removed Lines]",
          "1858:           int eType = sqlite3_value_type(argv[ii]);",
          "",
          "[Added Lines]",
          "1858:           int eType = sqlite3_value_numeric_type(argv[ii]);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: do_test rtree-8.1.5 { execsql { SELECT ii FROM t6 WHERE x1>5 } }   {}",
          "381: do_test rtree-8.1.6 { execsql { SELECT ii FROM t6 WHERE x1>''} }   {}",
          "382: do_test rtree-8.1.7 { execsql { SELECT ii FROM t6 WHERE x1>null}}  {}",
          "383: do_test rtree-8.2.2 { execsql { SELECT ii FROM t6 WHERE x1>=2 } }  {1 2}",
          "384: do_test rtree-8.2.3 { execsql { SELECT ii FROM t6 WHERE x1>=3 } }  {1 2}",
          "385: do_test rtree-8.2.4 { execsql { SELECT ii FROM t6 WHERE x1>=4 } }  {2}",
          "386: do_test rtree-8.2.5 { execsql { SELECT ii FROM t6 WHERE x1>=5 } }  {}",
          "387: do_test rtree-8.2.6 { execsql { SELECT ii FROM t6 WHERE x1>=''} }  {}",
          "388: do_test rtree-8.2.7 { execsql { SELECT ii FROM t6 WHERE x1>=null}} {}",
          "389: do_test rtree-8.3.2 { execsql { SELECT ii FROM t6 WHERE x1<2 } }   {}",
          "390: do_test rtree-8.3.3 { execsql { SELECT ii FROM t6 WHERE x1<3 } }   {}",
          "391: do_test rtree-8.3.4 { execsql { SELECT ii FROM t6 WHERE x1<4 } }   {1}",
          "392: do_test rtree-8.3.5 { execsql { SELECT ii FROM t6 WHERE x1<5 } }   {1 2}",
          "393: do_test rtree-8.3.6 { execsql { SELECT ii FROM t6 WHERE x1<''} }   {1 2}",
          "394: do_test rtree-8.3.7 { execsql { SELECT ii FROM t6 WHERE x1<null}}  {}",
          "395: do_test rtree-8.4.2 { execsql { SELECT ii FROM t6 WHERE x1<=2 } }  {}",
          "396: do_test rtree-8.4.3 { execsql { SELECT ii FROM t6 WHERE x1<=3 } }  {1}",
          "397: do_test rtree-8.4.4 { execsql { SELECT ii FROM t6 WHERE x1<=4 } }  {1 2}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: do_test rtree-8.1.8 { execsql { SELECT ii FROM t6 WHERE x1>'2'} }   {1 2}",
          "384: do_test rtree-8.1.9 { execsql { SELECT ii FROM t6 WHERE x1>'3'} }   {2}",
          "391: do_test rtree-8.2.8 { execsql { SELECT ii FROM t6 WHERE x1>='4'} } {2}",
          "392: do_test rtree-8.2.9 { execsql { SELECT ii FROM t6 WHERE x1>='5'} } {}",
          "399: do_test rtree-8.3.8 { execsql { SELECT ii FROM t6 WHERE x1<'3'} }  {}",
          "400: do_test rtree-8.3.9 { execsql { SELECT ii FROM t6 WHERE x1<'4'} }  {1}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebf897e861c19e214c57f1e73841b505182202cc8d7d39e24d5a1e5625e26b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db535390dbe2506858a781e8250e3e51a3270f10",
      "candidate_info": {
        "commit_hash": "db535390dbe2506858a781e8250e3e51a3270f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db535390dbe2506858a781e8250e3e51a3270f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/join.test"
        ],
        "message": "The optimization of check-in [9b2879629c34fc0a] is incorrectly reasoned. The WHERE clause of the partial index might not be true if the table of the partial index is the right table of a left join.  So disable the optimization in that case.  Ticket [623eff57e76d45f6]\n\nFossilOrigin-Name: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c795c4d2b042d2932774bd1274fa0167ca2dc9838e127e0cf31eb9273a32f2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1870:                            iRowidReg, pPk->nKeyCol); VdbeCoverage(v);",
          "1871:     }",
          "1900:     }",
          "1903:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1904:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "1890:     if( pLevel->iLeftJoin==0 && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){",
          "1891:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1892:     }",
          "1898:     if( pIdx->pPartIdxWhere ){",
          "1899:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "",
          "[Added Lines]",
          "1873:     if( pLevel->iLeftJoin==0 ){",
          "1891:       if( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){",
          "1892:         whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1893:       }",
          "1902:       if( pIdx->pPartIdxWhere ){",
          "1903:         whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1904:       }",
          "1905:     }else{",
          "1906:       testcase( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 );",
          "1907:       testcase( pIdx->pPartIdxWhere );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     (b IS NOT NULL AND b IS NOT NULL) IS NOT NULL;",
          "936: } {0 {}}",
          "938: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "938: # 2019-11-02 ticket 623eff57e76d45f6",
          "939: # The optimization of exclusing the WHERE expression of a partial index",
          "940: # from the WHERE clause of the query if the index is used does not work",
          "941: # of the table of the index is the right-hand table of a LEFT JOIN.",
          "942: #",
          "943: db close",
          "944: sqlite3 db :memory:",
          "945: do_execsql_test join-20.1 {",
          "946:   CREATE TABLE t1(c1);",
          "947:   CREATE TABLE t0(c0);",
          "948:   INSERT INTO t0(c0) VALUES (0);",
          "949:   SELECT * FROM t0 LEFT JOIN t1 WHERE NULL IN (c1);",
          "950: } {}",
          "951: do_execsql_test join-20.2 {",
          "952:   CREATE INDEX t1x ON t1(0) WHERE NULL IN (c1);",
          "953:   SELECT * FROM t0 LEFT JOIN t1 WHERE NULL IN (c1);",
          "954: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}