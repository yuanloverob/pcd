{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90255b814923d03eb68c33f60ed29fbbbe977e31",
      "candidate_info": {
        "commit_hash": "90255b814923d03eb68c33f60ed29fbbbe977e31",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90255b814923d03eb68c33f60ed29fbbbe977e31",
        "files": [
          "ext/rbu/rbufault2.test",
          "ext/rbu/rbumisc.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c"
        ],
        "message": "Add tests for the RBU module.\n\nFossilOrigin-Name: a194e53670e25a48c2bb51b54755abff88ed6ae2596c5858fb4aac16cb452bdf",
        "before_after_code_files": [
          "ext/rbu/rbufault2.test||ext/rbu/rbufault2.test",
          "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbufault2.test||ext/rbu/rbufault2.test": [
          "File: ext/rbu/rbufault2.test -> ext/rbu/rbufault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "57: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: sqlite3rbu_create_vfs -default rbu \"\"",
          "56: sqlite3 db test.db",
          "57: set ::vfsname [file_control_vfsname db]",
          "58: do_faultsim_test 2 -faults oom* -prep {",
          "59: } -body {",
          "60:   file_control_vfsname db",
          "61: }",
          "62: db close",
          "63: sqlite3rbu_destroy_vfs rbu",
          "",
          "---------------"
        ],
        "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test": [
          "File: ext/rbu/rbumisc.test -> ext/rbu/rbumisc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: sqlite3_config_uri 1",
          "19: reset_db",
          "29:   forcedelete rbu.db",
          "30:   sqlite3 rbu rbu.db",
          "31:   rbu eval {",
          "",
          "[Removed Lines]",
          "21: #-------------------------------------------------------------------------",
          "22: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "23: # database.",
          "24: #",
          "25: do_execsql_test 1.0 {",
          "26:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "27: }",
          "28: do_test 1.1 {",
          "",
          "[Added Lines]",
          "21: proc populate_rbu_db {} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     INSERT INTO dat VALUES(3, 3, 3, 0);",
          "45:   }",
          "46:   rbu close",
          "47: } {}",
          "49: do_test 1.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: }",
          "42: #-------------------------------------------------------------------------",
          "43: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "44: # database.",
          "45: #",
          "46: do_execsql_test 1.0 {",
          "47:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "48: }",
          "49: do_test 1.1 {",
          "50:   populate_rbu_db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: do_test 1.4 {",
          "64:   db eval { DELETE FROM x1 }",
          "69:   sqlite3rbu rbu test.db rbu.db",
          "70:   rbu step",
          "",
          "[Removed Lines]",
          "65:   sqlite3 rbu rbu.db",
          "66:   rbu eval { DELETE FROM rbu_state }",
          "67:   rbu close",
          "",
          "[Added Lines]",
          "69:   populate_rbu_db",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   list [catch { rbu close } msg] $msg",
          "78: } {1 {SQLITE_ERROR - cannot update wal mode database}}",
          "80: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: #-------------------------------------------------------------------------",
          "83: # Test the effect of a wal file appearing after the target database has",
          "84: # been opened, but before it has been locked.",
          "85: #",
          "86: catch { db close }",
          "87: testvfs tvfs -default 1",
          "89: for {set N 1} {$N < 10} {incr N} {",
          "90:   reset_db",
          "91:   populate_rbu_db",
          "92:   do_execsql_test 2.$N.0 {",
          "93:     CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "94:   }",
          "96:   set nAccessCnt 0",
          "97:   do_test 2.$N.1 {",
          "98:     sqlite3rbu rbu test.db rbu.db",
          "99:     rbu step",
          "100:     rbu step",
          "101:     rbu close",
          "102:   } {SQLITE_OK}",
          "104:   tvfs script xAccess",
          "105:   tvfs filter xAccess",
          "106:   set nAccessCnt 0",
          "107:   proc xAccess {method file args} {",
          "108:     global nAccessCnt",
          "109:     if {[file tail $file]==\"test.db-wal\"} {",
          "110:       incr nAccessCnt -1",
          "111:       if {$nAccessCnt==0} {",
          "112:         set fd [open test.db-wal w]",
          "113:         puts -nonewline $fd [string repeat 0 2000]",
          "114:         close $fd",
          "115:       }",
          "116:     }",
          "117:     return SQLITE_OK",
          "118:   }",
          "120:   foreach r {",
          "121:      {1 {SQLITE_ERROR - cannot update wal mode database}}",
          "122:      {0 SQLITE_OK}",
          "123:      {1 {SQLITE_CANTOPEN - unable to open database file}}",
          "124:   } {",
          "125:     set RES($r) 1",
          "126:   }",
          "127:   do_test 2.$N.2 {",
          "128:     set ::nAccessCnt $N",
          "129:     set res [list [catch {",
          "130:       sqlite3rbu rbu test.db rbu.db",
          "131:       rbu step",
          "132:       rbu close",
          "133:     } msg ] $msg]",
          "134:     set RES($res)",
          "135:   } {1}",
          "136:   catch {rbu close}",
          "137: }",
          "138: catch {db close}",
          "139: catch {tvfs delete}",
          "141: #-------------------------------------------------------------------------",
          "142: testvfs tvfs -default 1",
          "143: reset_db",
          "144: populate_rbu_db",
          "145: do_execsql_test 3.0 {",
          "146:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "147: }",
          "149: tvfs script xFileControl",
          "150: tvfs filter xFileControl",
          "152: proc xFileControl {method file verb args} {",
          "153:   if {$verb==\"ZIPVFS\" && [info exists ::zipvfs_filecontrol]} {",
          "154:     return $::zipvfs_filecontrol",
          "155:   }",
          "156:   return \"SQLITE_NOTFOUND\"",
          "157: }",
          "159: breakpoint",
          "160: foreach {tn ret err} {",
          "161:   1 SQLITE_OK           0",
          "162:   2 SQLITE_ERROR        1",
          "163:   3 SQLITE_NOTFOUND     0",
          "164:   4 SQLITE_OMIT         1",
          "165: } {",
          "166:   set ::zipvfs_filecontrol $ret",
          "167:   do_test 3.$tn.1 {",
          "168:     catch {",
          "169:       sqlite3rbu rbu test.db rbu.db",
          "170:       rbu step",
          "171:       rbu close",
          "172:     }",
          "173:   } $err",
          "174: }",
          "175: catch {db close}",
          "176: catch {tvfs delete}",
          "178: #-------------------------------------------------------------------------",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4707:       }else if( rc==SQLITE_NOTFOUND ){",
          "4708:         pRbu->pTargetFd = p;",
          "4709:         p->pRbu = pRbu;",
          "4713:         if( p->pWalFd ) p->pWalFd->pRbu = pRbu;",
          "4714:         rc = SQLITE_OK;",
          "4715:       }",
          "",
          "[Removed Lines]",
          "4710:         if( p->openFlags & SQLITE_OPEN_MAIN_DB ){",
          "4711:           rbuMainlistAdd(p);",
          "4712:         }",
          "",
          "[Added Lines]",
          "4710:         rbuMainlistAdd(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4772:     if( ofst==WAL_LOCK_CKPT && n==1 ) rc = SQLITE_BUSY;",
          "4773:   }else{",
          "4774:     int bCapture = 0;",
          "4779:       bCapture = 1;",
          "4780:     }",
          "",
          "[Removed Lines]",
          "4775:     if( n==1 && (flags & SQLITE_SHM_EXCLUSIVE)",
          "4776:      && pRbu && pRbu->eStage==RBU_STAGE_CAPTURE",
          "4777:      && (ofst==WAL_LOCK_WRITE || ofst==WAL_LOCK_CKPT || ofst==WAL_LOCK_READ0)",
          "4778:     ){",
          "",
          "[Added Lines]",
          "4773:     if( pRbu && pRbu->eStage==RBU_STAGE_CAPTURE ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4810:   assert( p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) );",
          "4822:     }",
          "4825:       char *pNew = (char*)sqlite3_malloc64(szRegion);",
          "4826:       if( pNew==0 ){",
          "4827:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "4811:   if( eStage==RBU_STAGE_OAL || eStage==RBU_STAGE_MOVE ){",
          "4812:     if( iRegion<=p->nShm ){",
          "4813:       sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "4814:       char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4815:       if( apNew==0 ){",
          "4816:         rc = SQLITE_NOMEM;",
          "4817:       }else{",
          "4818:         memset(&apNew[p->nShm], 0, sizeof(char*) * (1 + iRegion - p->nShm));",
          "4819:         p->apShm = apNew;",
          "4820:         p->nShm = iRegion+1;",
          "4821:       }",
          "4824:     if( rc==SQLITE_OK && p->apShm[iRegion]==0 ){",
          "",
          "[Added Lines]",
          "4806:   if( eStage==RBU_STAGE_OAL ){",
          "4807:     sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "4808:     char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4814:     assert( iRegion==p->nShm );",
          "4815:     if( apNew==0 ){",
          "4816:       rc = SQLITE_NOMEM;",
          "4817:     }else{",
          "4818:       memset(&apNew[p->nShm], 0, sizeof(char*) * (1 + iRegion - p->nShm));",
          "4819:       p->apShm = apNew;",
          "4820:       p->nShm = iRegion+1;",
          "4823:     if( rc==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 956ca2a452aa3707bca553007a7ef221af3d4f6b0af747d17070926e000f2362",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "237:     { SQLITE_READONLY_CANTINIT, \"SQLITE_READONLY_CANTINIT\"   },",
          "238:     { -1,              \"SQLITE_OMIT\"   },",
          "239:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     { SQLITE_NOTFOUND, \"SQLITE_NOTFOUND\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:     } aF[] = {",
          "553:       { SQLITE_FCNTL_BEGIN_ATOMIC_WRITE, \"BEGIN_ATOMIC_WRITE\" },",
          "554:       { SQLITE_FCNTL_COMMIT_ATOMIC_WRITE, \"COMMIT_ATOMIC_WRITE\" },",
          "555:     };",
          "556:     int i;",
          "557:     for(i=0; i<sizeof(aF)/sizeof(aF[0]); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:       { SQLITE_FCNTL_ZIPVFS, \"ZIPVFS\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "565:           0, 0",
          "566:       );",
          "567:       tvfsResultCode(p, &rc);",
          "569:     }",
          "570:   }",
          "571:   return sqlite3OsFileControl(pFd->pReal, op, pArg);",
          "",
          "[Removed Lines]",
          "568:       if( rc ) return rc;",
          "",
          "[Added Lines]",
          "570:       if( rc ) return (rc<0 ? SQLITE_OK : rc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea5c040f878dbe8416cc85ece8d16fdec412e059",
      "candidate_info": {
        "commit_hash": "ea5c040f878dbe8416cc85ece8d16fdec412e059",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea5c040f878dbe8416cc85ece8d16fdec412e059",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/e_expr.test"
        ],
        "message": "Simplification to the logic underlying PRAGMA case_sensitive_like.\n\nFossilOrigin-Name: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8658574e3f435f03a87c04f398bd05078ebc53ecb4a477d3b24902d701d935c4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1795:   }",
          "1796: }",
          "",
          "[Removed Lines]",
          "1801: static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){",
          "1802:   FuncDef *pDef;",
          "1803:   pDef = sqlite3FindFunction(db, zName, 2, SQLITE_UTF8, 0);",
          "1804:   if( ALWAYS(pDef) ){",
          "1805:     pDef->funcFlags |= flagVal;",
          "1806:   }",
          "1807:   pDef = sqlite3FindFunction(db, zName, 3, SQLITE_UTF8, 0);",
          "1808:   if( pDef ){",
          "1809:     pDef->funcFlags |= flagVal;",
          "1810:   }",
          "1811: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1818: void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){",
          "1819:   struct compareInfo *pInfo;",
          "1820:   if( caseSensitive ){",
          "1821:     pInfo = (struct compareInfo*)&likeInfoAlt;",
          "1822:   }else{",
          "1823:     pInfo = (struct compareInfo*)&likeInfoNorm;",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829: }",
          "",
          "[Removed Lines]",
          "1827:   setLikeOptFlag(db, \"like\",",
          "1828:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "",
          "[Added Lines]",
          "1805:   int flags;",
          "1808:     flags = SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE;",
          "1811:     flags = SQLITE_FUNC_LIKE;",
          "1815:   sqlite3FindFunction(db, \"like\", 2, SQLITE_UTF8, 0)->funcFlags |= flags;",
          "1816:   sqlite3FindFunction(db, \"like\", 3, SQLITE_UTF8, 0)->funcFlags |= flags;",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013: # EVIDENCE-OF: R-22868-25880 The LIKE operator can be made case",
          "1014: # sensitive using the case_sensitive_like pragma.",
          "1015: #",
          "1024: # EVIDENCE-OF: R-52087-12043 The GLOB operator is similar to LIKE but",
          "1025: # uses the Unix file globbing syntax for its wildcards.",
          "",
          "[Removed Lines]",
          "1016: do_execsql_test e_expr-16.1.1 { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1017: do_execsql_test e_expr-16.1.2 { PRAGMA case_sensitive_like = 1 } {}",
          "1018: do_execsql_test e_expr-16.1.3 { SELECT 'abcxyz' LIKE 'ABC%' } 0",
          "1019: do_execsql_test e_expr-16.1.4 { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1020: do_execsql_test e_expr-16.1.5 { PRAGMA case_sensitive_like = 0 } {}",
          "1021: do_execsql_test e_expr-16.1.6 { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1022: do_execsql_test e_expr-16.1.7 { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "",
          "[Added Lines]",
          "1016: do_execsql_test e_expr-16.1.1  { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1017: do_execsql_test e_expr-16.1.1b { SELECT 'abc%xyz' LIKE 'ABC\\%x%' ESCAPE '\\' } 1",
          "1018: do_execsql_test e_expr-16.1.2  { PRAGMA case_sensitive_like = 1 } {}",
          "1019: do_execsql_test e_expr-16.1.3  { SELECT 'abcxyz' LIKE 'ABC%' } 0",
          "1020: do_execsql_test e_expr-16.1.3b { SELECT 'abc%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 0",
          "1021: do_execsql_test e_expr-16.1.4  { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1022: do_execsql_test e_expr-16.1.4b { SELECT 'ABC%xyz' LIKE 'ABC\\%x%' ESCAPE '\\' } 1",
          "1023: do_execsql_test e_expr-16.1.5  { PRAGMA case_sensitive_like = 0 } {}",
          "1024: do_execsql_test e_expr-16.1.6  { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1025: do_execsql_test e_expr-16.1.6b { SELECT 'abc%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 1",
          "1026: do_execsql_test e_expr-16.1.7  { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1027: do_execsql_test e_expr-16.1.7b { SELECT 'ABC%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7314495ff82c0ed4ac6f2776121282e3a8fe566a",
      "candidate_info": {
        "commit_hash": "7314495ff82c0ed4ac6f2776121282e3a8fe566a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7314495ff82c0ed4ac6f2776121282e3a8fe566a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/wherecode.c",
          "test/affinity2.test"
        ],
        "message": "When the affinity of a table column is INT or REAL, make the affinity of corresponding index columns NUMERIC.  This increases the precision of index lookups for large numbers so that it matches the precision of ordinary comparison operators.  Ticket [40812aea1fde9594]\n\nFossilOrigin-Name: e0d909c740b774d8a46731696e33342be83206cc4a95d07f42fdb3d8cc2d7a8e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67381dadede98a55d8d9e085d021e6fa6473071978967b6302e03b28cf2245e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "100:       }",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:       if( aff>SQLITE_AFF_NUMERIC) aff = SQLITE_AFF_NUMERIC;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:         if( sqlite3ExprNeedsNoAffinityChange(pRight, zAff[j]) ){",
          "756:           zAff[j] = SQLITE_AFF_BLOB;",
          "757:         }",
          "758:       }",
          "759:     }",
          "760:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:         if( zAff[j]==SQLITE_AFF_REAL ) zAff[j] = SQLITE_AFF_NUMERIC;",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "120: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
      "candidate_info": {
        "commit_hash": "860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/860d2b08c6990b8d56fc2d846ba59be7b42ef4fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Make sure the MEM_FromBind bit inthe Mem.flags field is not included in the MEM_TypeMask.  This critical changes was omitted from the previous two check-ins by mistake, and so those check-ins are not fully functional.\n\nFossilOrigin-Name: f7ba2daf91c96ba16958188d6084a0ff129310d348932de493d326f1d24679cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6f122faf8a34b986e58ba4622cff918c6d133d6f91d4b723b50bd086d5bed8e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ]
      }
    },
    {
      "candidate_hash": "fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
      "candidate_info": {
        "commit_hash": "fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/treeview.c",
          "src/window.c"
        ],
        "message": "Improved TreeView display of Window objects. Change the Window.eType field to Window.eFrmType to avoid confusion with other \"eType\" values.\n\nFossilOrigin-Name: ec2f207dedb223077bbd3e4584499250eb12219712c917e930acccfa2c46e23b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85e53ff13300132250221de769a2aa7d92d81bb48d60f6e99000bc69a5b1e6fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3555: struct Window {",
          "",
          "[Removed Lines]",
          "3564:   u8 eExclude;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: void sqlite3TreeViewWindow(TreeView *pView, const Window *pWin, u8 more){",
          "312:   pView = sqlite3TreeViewPush(pView, more);",
          "313:   if( pWin->zName ){",
          "314:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "315:   }else{",
          "316:     sqlite3TreeViewLine(pView, \"OVER\");",
          "317:   }",
          "318:   if( pWin->pPartition ){",
          "320:   }",
          "321:   if( pWin->pOrderBy ){",
          "323:   }",
          "326:     sqlite3TreeViewBound(pView, pWin->eStart, pWin->pStart, 1);",
          "327:     sqlite3TreeViewBound(pView, pWin->eEnd, pWin->pEnd, 0);",
          "328:     sqlite3TreeViewPop(pView);",
          "329:   }",
          "330:   sqlite3TreeViewPop(pView);",
          "331: }",
          "",
          "[Removed Lines]",
          "319:     sqlite3TreeViewExprList(pView, pWin->pPartition, 1, \"PARTITION-BY\");",
          "322:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, 1, \"ORDER-BY\");",
          "324:   if( pWin->eType ){",
          "325:     sqlite3TreeViewItem(pView, pWin->eType==TK_RANGE ? \"RANGE\" : \"ROWS\", 0);",
          "",
          "[Added Lines]",
          "312:   int nElement = 0;",
          "319:   if( pWin->pFilter )  nElement++;",
          "320:   if( pWin->zBase )    nElement++;",
          "321:   if( pWin->pOrderBy ) nElement++;",
          "322:   if( pWin->eFrmType ) nElement++;",
          "323:   if( pWin->eExclude ) nElement++;",
          "324:   if( pWin->pFilter ){",
          "325:     sqlite3TreeViewItem(pView, \"FILTER\", (--nElement)>0);",
          "326:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "327:     sqlite3TreeViewPop(pView);",
          "328:   }",
          "329:   if( pWin->zBase ){",
          "330:     sqlite3TreeViewPush(pView, (--nElement)>0);",
          "331:     sqlite3TreeViewLine(pView, \"window: %s\", pWin->zBase);",
          "332:     sqlite3TreeViewPop(pView);",
          "333:   }",
          "335:     sqlite3TreeViewExprList(pView, pWin->pPartition, nElement>0,\"PARTITION-BY\");",
          "338:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, (--nElement)>0, \"ORDER-BY\");",
          "340:   if( pWin->eFrmType ){",
          "341:     const char *zFrmType = \"ROWS\";",
          "342:     if( pWin->eFrmType==TK_RANGE ) zFrmType = \"RANGE\";",
          "343:     if( pWin->eFrmType==TK_GROUPS ) zFrmType = \"GROUPS\";",
          "344:     sqlite3TreeViewItem(pView, zFrmType, (--nElement)>0);",
          "349:   if( pWin->eExclude ){",
          "350:     char zBuf[30];",
          "351:     const char *zExclude;",
          "352:     switch( pWin->eExclude ){",
          "353:       case TK_NO:      zExclude = \"NO OTHERS\";   break;",
          "354:       case TK_CURRENT: zExclude = \"CURRENT ROW\"; break;",
          "355:       case TK_GROUP:   zExclude = \"GROUP\";       break;",
          "356:       case TK_TIES:    zExclude = \"TIES\";        break;",
          "357:       default:",
          "358:         sqlite3_snprintf(sizeof(zBuf),zBuf,\"invalid(%d)\", pWin->eExclude);",
          "359:         zExclude = zBuf;",
          "360:         break;",
          "361:     }",
          "362:     sqlite3TreeViewPush(pView, 0);",
          "363:     sqlite3TreeViewLine(pView, \"EXCLUDE %s\", zExclude);",
          "364:     sqlite3TreeViewPop(pView);",
          "365:   }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: ){",
          "666:     Window *p = windowFind(pParse, pList, pWin->zName);",
          "667:     if( p==0 ) return;",
          "668:     pWin->pPartition = sqlite3ExprListDup(pParse->db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "665:   if( pWin->zName && pWin->eType==0 ){",
          "",
          "[Added Lines]",
          "665:   if( pWin->zName && pWin->eFrmType==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671:     pWin->pEnd = sqlite3ExprDup(pParse->db, p->pEnd, 0);",
          "672:     pWin->eStart = p->eStart;",
          "673:     pWin->eEnd = p->eEnd;",
          "675:     pWin->eExclude = p->eExclude;",
          "676:   }else{",
          "677:     sqlite3WindowChain(pParse, pWin, pList);",
          "678:   }",
          "680:    && (pWin->pStart || pWin->pEnd)",
          "681:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "682:   ){",
          "",
          "[Removed Lines]",
          "674:     pWin->eType = p->eType;",
          "679:   if( (pWin->eType==TK_RANGE)",
          "",
          "[Added Lines]",
          "674:     pWin->eFrmType = p->eFrmType;",
          "679:   if( (pWin->eFrmType==TK_RANGE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "693:     }else{",
          "694:       struct WindowUpdate {",
          "695:         const char *zFunc;",
          "697:         int eStart;",
          "698:         int eEnd;",
          "699:       } aUp[] = {",
          "",
          "[Removed Lines]",
          "696:         int eType;",
          "",
          "[Added Lines]",
          "696:         int eFrmType;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "712:           sqlite3ExprDelete(db, pWin->pStart);",
          "713:           sqlite3ExprDelete(db, pWin->pEnd);",
          "714:           pWin->pEnd = pWin->pStart = 0;",
          "716:           pWin->eStart = aUp[i].eStart;",
          "717:           pWin->eEnd = aUp[i].eEnd;",
          "718:           pWin->eExclude = 0;",
          "",
          "[Removed Lines]",
          "715:           pWin->eType = aUp[i].eType;",
          "",
          "[Added Lines]",
          "715:           pWin->eFrmType = aUp[i].eFrmType;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1090:   pWin = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1091:   if( pWin==0 ) goto windowAllocErr;",
          "1093:   pWin->eStart = eStart;",
          "1094:   pWin->eEnd = eEnd;",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "",
          "[Removed Lines]",
          "1092:   pWin->eType = eType;",
          "",
          "[Added Lines]",
          "1092:   pWin->eFrmType = eType;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1200: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "1202:   if( p1->eStart!=p2->eStart ) return 1;",
          "1203:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1204:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "[Removed Lines]",
          "1201:   if( p1->eType!=p2->eType ) return 1;",
          "",
          "[Added Lines]",
          "1201:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1861:   int addrIf = 0;",
          "1862:   int addrContinue = 0;",
          "1863:   int addrGoto = 0;",
          "1866:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1867:   int addrNextRange = 0;",
          "",
          "[Removed Lines]",
          "1864:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "",
          "[Added Lines]",
          "1864:   int bPeer = (pMWin->eFrmType!=TK_ROWS);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1874:   }",
          "1876:   if( regCountdown>0 ){",
          "1878:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1879:       assert( op==WINDOW_AGGINVERSE || op==WINDOW_AGGSTEP );",
          "1880:       if( op==WINDOW_AGGINVERSE ){",
          "",
          "[Removed Lines]",
          "1877:     if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "1877:     if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1983:       pNew->pFunc = p->pFunc;",
          "1984:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "1985:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "1987:       pNew->eEnd = p->eEnd;",
          "1988:       pNew->eStart = p->eStart;",
          "1989:       pNew->eExclude = p->eExclude;",
          "",
          "[Removed Lines]",
          "1986:       pNew->eType = p->eType;",
          "",
          "[Added Lines]",
          "1986:       pNew->eFrmType = p->eFrmType;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2428:   switch( pMWin->eStart ){",
          "2429:     case TK_FOLLOWING:",
          "2431:         s.eDelete = WINDOW_RETURN_ROW;",
          "2432:       }",
          "2433:       break;",
          "2434:     case TK_UNBOUNDED:",
          "2435:       if( windowCacheFrame(pMWin)==0 ){",
          "2436:         if( pMWin->eEnd==TK_PRECEDING ){",
          "2438:             s.eDelete = WINDOW_AGGSTEP;",
          "2439:           }",
          "2440:         }else{",
          "",
          "[Removed Lines]",
          "2430:       if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pStart) ){",
          "2437:           if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pEnd) ){",
          "",
          "[Added Lines]",
          "2430:       if( pMWin->eFrmType!=TK_RANGE",
          "2431:        && windowExprGtZero(pParse, pMWin->pStart)",
          "2432:       ){",
          "2439:           if( pMWin->eFrmType!=TK_RANGE",
          "2440:            && windowExprGtZero(pParse, pMWin->pEnd)",
          "2441:           ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2472:     int nPeer = (pOrderBy ? pOrderBy->nExpr : 0);",
          "2473:     regNewPeer = regNew + pMWin->nBufferCol;",
          "2474:     if( pMWin->pPartition ) regNewPeer += pMWin->pPartition->nExpr;",
          "",
          "[Removed Lines]",
          "2471:   if( pMWin->eType!=TK_ROWS ){",
          "",
          "[Added Lines]",
          "2475:   if( pMWin->eFrmType!=TK_ROWS ){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2520:   if( regStart ){",
          "2521:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2523:   }",
          "2524:   if( regEnd ){",
          "2525:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2527:   }",
          "2529:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "[Removed Lines]",
          "2522:     windowCheckValue(pParse, regStart, 0 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "2526:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "",
          "[Added Lines]",
          "2526:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2530:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2538:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2539:     sqlite3VdbeJumpHere(v, addrGe);",
          "2540:   }",
          "2542:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2543:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2544:   }",
          "",
          "[Removed Lines]",
          "2541:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "[Added Lines]",
          "2545:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2567:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2568:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2569:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2571:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2572:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2573:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "",
          "[Removed Lines]",
          "2570:       if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2574:       if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2589:     int addr = 0;",
          "2590:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2591:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2593:         int lbl = 0;",
          "2594:         addr = sqlite3VdbeCurrentAddr(v);",
          "2595:         if( regEnd ){",
          "",
          "[Removed Lines]",
          "2592:       if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2596:       if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2635:     int addrBreak2;",
          "2636:     int addrBreak3;",
          "2637:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2639:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2640:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2641:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "",
          "[Removed Lines]",
          "2638:     if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2642:     if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}