{
  "cve_id": "CVE-2020-26575",
  "cve_desc": "In Wireshark through 3.2.7, the Facebook Zero Protocol (aka FBZERO) dissector could enter an infinite loop. This was addressed in epan/dissectors/packet-fbzero.c by correcting the implementation of offset advancement.",
  "repo": "wireshark/wireshark",
  "patch_hash": "3ff940652962c099b73ae3233322b8697b0d10ab",
  "patch_info": {
    "commit_hash": "3ff940652962c099b73ae3233322b8697b0d10ab",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/3ff940652962c099b73ae3233322b8697b0d10ab",
    "files": [
      "epan/dissectors/packet-fbzero.c"
    ],
    "message": "FBZERO: Make sure our offset advances.\n\nMake sure our offset advances so that we don't infinitely loop.\nFixes #16887.",
    "before_after_code_files": [
      "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c": [
      "File: epan/dissectors/packet-fbzero.c -> epan/dissectors/packet-fbzero.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "66: static expert_field ei_fb_zero_tag_undecoded = EI_INIT;",
      "67: static expert_field ei_fb_zero_tag_length = EI_INIT;",
      "68: static expert_field ei_fb_zero_tag_unknown = EI_INIT;",
      "70: #define FBZERO_MIN_LENGTH 3",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: static expert_field ei_fb_zero_length_invalid = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "261:                                  \"Dissector for FB Zero Tag\"",
      "262:                                  \" %s (%s) code not implemented, Contact\"",
      "263:                                  \" Wireshark developers if you want this supported\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset-8, 4, ENC_ASCII|ENC_NA), val_to_str(tag, tag_vals, \"Unknown\"));",
      "265:             break;",
      "266:         }",
      "268:         if(tag_offset != offset_end){",
      "270:             proto_tree_add_expert(tag_tree, pinfo, &ei_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, offset_end - tag_offset);",
      "272:         }",
      "274:         tag_number--;",
      "275:     }",
      "276:     return offset + total_tag_len;",
      "278: }",
      "",
      "[Removed Lines]",
      "264:                 tag_offset += tag_len;",
      "271:             tag_offset = offset_end;",
      "",
      "[Added Lines]",
      "265:                 goto end;",
      "273:             goto end;",
      "279:     end:",
      "280:     if (offset + total_tag_len <= offset) {",
      "281:         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
      "282:                          \"Invalid total tag length: %u\", total_tag_len);",
      "283:         return offset + tvb_reported_length_remaining(tvb, offset);",
      "284:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "562:         { &ei_fb_zero_tag_undecoded, { \"fb_zero.tag.undecoded\", PI_UNDECODED, PI_NOTE, \"Dissector for FB Zero Tag code not implemented, Contact Wireshark developers if you want this supported\", EXPFILL }},",
      "563:         { &ei_fb_zero_tag_length, { \"fb_zero.tag.length.truncated\", PI_MALFORMED, PI_NOTE, \"Truncated Tag Length...\", EXPFILL }},",
      "564:         { &ei_fb_zero_tag_unknown, { \"fb_zero.tag.unknown.data\", PI_UNDECODED, PI_NOTE, \"Unknown Data\", EXPFILL }},",
      "565:     };",
      "567:     expert_module_t *expert_fb_zero;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "574:         { &ei_fb_zero_length_invalid, { \"fb_zero.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b6648a5904dfaa39ffdbfaa09e6c5b9d051a471",
      "candidate_info": {
        "commit_hash": "2b6648a5904dfaa39ffdbfaa09e6c5b9d051a471",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2b6648a5904dfaa39ffdbfaa09e6c5b9d051a471",
        "files": [
          "epan/dissectors/packet-fbzero.c"
        ],
        "message": "FBZERO: Make sure our offset advances.\n\nMake sure our offset advances so that we don't infinitely loop.\nFixes #16887.\n\n\n(cherry picked from commit 3ff940652962c099b73ae3233322b8697b0d10ab)",
        "before_after_code_files": [
          "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ],
          "candidate": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c": [
          "File: epan/dissectors/packet-fbzero.c -> epan/dissectors/packet-fbzero.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: static expert_field ei_fb_zero_tag_undecoded = EI_INIT;",
          "67: static expert_field ei_fb_zero_tag_length = EI_INIT;",
          "68: static expert_field ei_fb_zero_tag_unknown = EI_INIT;",
          "70: #define FBZERO_MIN_LENGTH 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static expert_field ei_fb_zero_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:                                  \"Dissector for FB Zero Tag\"",
          "262:                                  \" %s (%s) code not implemented, Contact\"",
          "263:                                  \" Wireshark developers if you want this supported\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset-8, 4, ENC_ASCII|ENC_NA), val_to_str(tag, tag_vals, \"Unknown\"));",
          "265:             break;",
          "266:         }",
          "268:         if(tag_offset != offset_end){",
          "270:             proto_tree_add_expert(tag_tree, pinfo, &ei_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, offset_end - tag_offset);",
          "272:         }",
          "274:         tag_number--;",
          "275:     }",
          "276:     return offset + total_tag_len;",
          "278: }",
          "",
          "[Removed Lines]",
          "264:                 tag_offset += tag_len;",
          "271:             tag_offset = offset_end;",
          "",
          "[Added Lines]",
          "265:                 goto end;",
          "273:             goto end;",
          "279:     end:",
          "280:     if (offset + total_tag_len <= offset) {",
          "281:         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "282:                          \"Invalid total tag length: %u\", total_tag_len);",
          "283:         return offset + tvb_reported_length_remaining(tvb, offset);",
          "284:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:         { &ei_fb_zero_tag_undecoded, { \"fb_zero.tag.undecoded\", PI_UNDECODED, PI_NOTE, \"Dissector for FB Zero Tag code not implemented, Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "563:         { &ei_fb_zero_tag_length, { \"fb_zero.tag.length.truncated\", PI_MALFORMED, PI_NOTE, \"Truncated Tag Length...\", EXPFILL }},",
          "564:         { &ei_fb_zero_tag_unknown, { \"fb_zero.tag.unknown.data\", PI_UNDECODED, PI_NOTE, \"Unknown Data\", EXPFILL }},",
          "565:     };",
          "567:     expert_module_t *expert_fb_zero;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:         { &ei_fb_zero_length_invalid, { \"fb_zero.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bdcb78afd65d58af9ea72aff0f360408e388db8",
      "candidate_info": {
        "commit_hash": "2bdcb78afd65d58af9ea72aff0f360408e388db8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2bdcb78afd65d58af9ea72aff0f360408e388db8",
        "files": [
          "epan/dissectors/packet-fbzero.c"
        ],
        "message": "FBZERO: Make sure our offset advances.\n\nMake sure our offset advances so that we don't infinitely loop.\nFixes #16887.\n\n\n(cherry picked from commit 3ff940652962c099b73ae3233322b8697b0d10ab)",
        "before_after_code_files": [
          "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ],
          "candidate": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c": [
          "File: epan/dissectors/packet-fbzero.c -> epan/dissectors/packet-fbzero.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: static expert_field ei_fb_zero_tag_undecoded = EI_INIT;",
          "67: static expert_field ei_fb_zero_tag_length = EI_INIT;",
          "68: static expert_field ei_fb_zero_tag_unknown = EI_INIT;",
          "70: #define FBZERO_MIN_LENGTH 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static expert_field ei_fb_zero_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:                                  \"Dissector for FB Zero Tag\"",
          "262:                                  \" %s (%s) code not implemented, Contact\"",
          "263:                                  \" Wireshark developers if you want this supported\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset-8, 4, ENC_ASCII|ENC_NA), val_to_str(tag, tag_vals, \"Unknown\"));",
          "265:             break;",
          "266:         }",
          "268:         if(tag_offset != offset_end){",
          "270:             proto_tree_add_expert(tag_tree, pinfo, &ei_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, offset_end - tag_offset);",
          "272:         }",
          "274:         tag_number--;",
          "275:     }",
          "276:     return offset + total_tag_len;",
          "278: }",
          "",
          "[Removed Lines]",
          "264:                 tag_offset += tag_len;",
          "271:             tag_offset = offset_end;",
          "",
          "[Added Lines]",
          "265:                 goto end;",
          "273:             goto end;",
          "279:     end:",
          "280:     if (offset + total_tag_len <= offset) {",
          "281:         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "282:                          \"Invalid total tag length: %u\", total_tag_len);",
          "283:         return offset + tvb_reported_length_remaining(tvb, offset);",
          "284:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:         { &ei_fb_zero_tag_undecoded, { \"fb_zero.tag.undecoded\", PI_UNDECODED, PI_NOTE, \"Dissector for FB Zero Tag code not implemented, Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "563:         { &ei_fb_zero_tag_length, { \"fb_zero.tag.length.truncated\", PI_MALFORMED, PI_NOTE, \"Truncated Tag Length...\", EXPFILL }},",
          "564:         { &ei_fb_zero_tag_unknown, { \"fb_zero.tag.unknown.data\", PI_UNDECODED, PI_NOTE, \"Unknown Data\", EXPFILL }},",
          "565:     };",
          "567:     expert_module_t *expert_fb_zero;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:         { &ei_fb_zero_length_invalid, { \"fb_zero.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0e40cb744bc93ce491937fc9e6977fb4aecfc5e",
      "candidate_info": {
        "commit_hash": "e0e40cb744bc93ce491937fc9e6977fb4aecfc5e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e0e40cb744bc93ce491937fc9e6977fb4aecfc5e",
        "files": [
          "epan/dissectors/packet-fbzero.c"
        ],
        "message": "FBZERO: Make sure our offset advances.\n\nMake sure our offset advances so that we don't infinitely loop.\nFixes #16887.\n\n\n(cherry picked from commit 3ff940652962c099b73ae3233322b8697b0d10ab)",
        "before_after_code_files": [
          "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ],
          "candidate": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c": [
          "File: epan/dissectors/packet-fbzero.c -> epan/dissectors/packet-fbzero.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: static expert_field ei_fb_zero_tag_undecoded = EI_INIT;",
          "67: static expert_field ei_fb_zero_tag_length = EI_INIT;",
          "68: static expert_field ei_fb_zero_tag_unknown = EI_INIT;",
          "70: #define FBZERO_MIN_LENGTH 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static expert_field ei_fb_zero_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:                                  \"Dissector for FB Zero Tag\"",
          "262:                                  \" %s (%s) code not implemented, Contact\"",
          "263:                                  \" Wireshark developers if you want this supported\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset-8, 4, ENC_ASCII|ENC_NA), val_to_str(tag, tag_vals, \"Unknown\"));",
          "265:             break;",
          "266:         }",
          "268:         if(tag_offset != offset_end){",
          "270:             proto_tree_add_expert(tag_tree, pinfo, &ei_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, offset_end - tag_offset);",
          "272:         }",
          "274:         tag_number--;",
          "275:     }",
          "276:     return offset + total_tag_len;",
          "278: }",
          "",
          "[Removed Lines]",
          "264:                 tag_offset += tag_len;",
          "271:             tag_offset = offset_end;",
          "",
          "[Added Lines]",
          "265:                 goto end;",
          "273:             goto end;",
          "279:     end:",
          "280:     if (offset + total_tag_len <= offset) {",
          "281:         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "282:                          \"Invalid total tag length: %u\", total_tag_len);",
          "283:         return offset + tvb_reported_length_remaining(tvb, offset);",
          "284:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:         { &ei_fb_zero_tag_undecoded, { \"fb_zero.tag.undecoded\", PI_UNDECODED, PI_NOTE, \"Dissector for FB Zero Tag code not implemented, Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "563:         { &ei_fb_zero_tag_length, { \"fb_zero.tag.length.truncated\", PI_MALFORMED, PI_NOTE, \"Truncated Tag Length...\", EXPFILL }},",
          "564:         { &ei_fb_zero_tag_unknown, { \"fb_zero.tag.unknown.data\", PI_UNDECODED, PI_NOTE, \"Unknown Data\", EXPFILL }},",
          "565:     };",
          "567:     expert_module_t *expert_fb_zero;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:         { &ei_fb_zero_length_invalid, { \"fb_zero.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d76ee2cb89def39e9d7819486442846243bce1e8",
      "candidate_info": {
        "commit_hash": "d76ee2cb89def39e9d7819486442846243bce1e8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d76ee2cb89def39e9d7819486442846243bce1e8",
        "files": [
          "epan/dissectors/packet-fbzero.c"
        ],
        "message": "fbzero: do more detailed tag value offset checks.\n\nCheck the tag end offset - the offset in the packet of the tag's value's\nend - to make sure that 1) it's at or after the offset of the\n*beginning* of the tag's value and 2) that it's not past the end of the\npacket; in either case, report an error with an expert info, and do not\nshow the value of that tag or any subsequent tags, as we don't have a\nvalid value for the length of this tag's value or even the *offset* of\nsubsequent tags' values.\n\nFor tags whose values have a fixed length, report an error, with an\nexpert info, if the tag value length isn't the expected value, and don't\ndissect it.\n\nFor tags whose values have a minimum length, report an error, with an\nexpert value, if the tag value length isn't at least the minimum value,\nand don't dissect it.\n\nFor tags whose values consist of a sequence of zero or more fixed-length\nitems, report an error, with an expert value, if there's leftover data\nafter processing those items.\n\nAdd some comments while we're at it.",
        "before_after_code_files": [
          "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ],
          "candidate": [
            "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-fbzero.c||epan/dissectors/packet-fbzero.c": [
          "File: epan/dissectors/packet-fbzero.c -> epan/dissectors/packet-fbzero.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"config.h\"",
          "18: #include <epan/packet.h>",
          "",
          "[Removed Lines]",
          "13: Zero Protocol coming from Facebook and used the same framing like QUIC (tag-map value) but based on TCP",
          "14: It was reverse engineered based off of QUIC dissector functionality",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: static gint ett_fb_zero_tag_value = -1;",
          "66: static expert_field ei_fb_zero_tag_undecoded = EI_INIT;",
          "68: static expert_field ei_fb_zero_tag_unknown = EI_INIT;",
          "69: static expert_field ei_fb_zero_length_invalid = EI_INIT;",
          "",
          "[Removed Lines]",
          "67: static expert_field ei_fb_zero_tag_length = EI_INIT;",
          "",
          "[Added Lines]",
          "75: static expert_field ei_fb_zero_tag_offset_end_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:     guint32 tag_offset_start = offset + tag_number*4*2;",
          "162:     guint32 tag_offset = 0, total_tag_len = 0;",
          "163:     gint32 tag_len;",
          "165:     while(tag_number){",
          "167:         guint32 offset_end, tag;",
          "168:         const guint8* tag_str;",
          "171:         tag_tree = proto_item_add_subtree(ti_tag, ett_fb_zero_tag_value);",
          "172:         ti_type = proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_type, tvb, offset, 4, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "173:         tag = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "166:         proto_tree *tag_tree, *ti_len, *ti_tag, *ti_type;",
          "170:         ti_tag = proto_tree_add_item(fb_zero_tree, hf_fb_zero_tags, tvb, offset, 8, ENC_NA);",
          "",
          "[Added Lines]",
          "172:     gboolean tag_offset_valid = TRUE;",
          "175:         proto_tree *tag_tree;",
          "176:         proto_item *ti_tag, *ti_type, *ti_offset_len, *ti_len;",
          "185:         ti_tag = proto_tree_add_item(fb_zero_tree, hf_fb_zero_tags, tvb, offset, 4*2, ENC_NA);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "175:         proto_item_append_text(ti_tag, \": %s (%s)\", tag_str, val_to_str(tag, tag_vals, \"Unknown\"));",
          "176:         offset += 4;",
          "186:         offset += 4;",
          "193:         }",
          "197:         switch(tag){",
          "198:             case TAG_SNI:",
          "203:             case TAG_VERS:",
          "207:             break;",
          "208:             case TAG_SNO:",
          "211:             break;",
          "212:             case TAG_AEAD:",
          "219:                 }",
          "220:             break;",
          "221:             case TAG_SCID:",
          "224:             break;",
          "225:             case TAG_TIME:",
          "229:             break;",
          "230:             case TAG_ALPN:",
          "234:             break;",
          "235:             case TAG_PUBS:",
          "242:                 }",
          "243:             break;",
          "244:             case TAG_KEXS:",
          "251:                 }",
          "252:             break;",
          "253:             case TAG_NONC:",
          "257:             break;",
          "259:             default:",
          "261:                 expert_add_info_format(pinfo, ti_tag, &ei_fb_zero_tag_undecoded,",
          "262:                                  \"Dissector for FB Zero Tag\"",
          "263:                                  \" %s (%s) code not implemented, Contact\"",
          "264:                                  \" Wireshark developers if you want this supported\", tvb_get_string_enc(wmem_packet_scope(), tvb, offset-8, 4, ENC_ASCII|ENC_NA), val_to_str(tag, tag_vals, \"Unknown\"));",
          "274:         }",
          "276:         tag_number--;",
          "277:     }",
          "280:     if (offset + total_tag_len <= offset) {",
          "281:         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "282:                          \"Invalid total tag length: %u\", total_tag_len);",
          "",
          "[Removed Lines]",
          "178:         proto_tree_add_item(tag_tree, hf_fb_zero_tag_offset_end, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "179:         offset_end = tvb_get_letohl(tvb, offset);",
          "181:         tag_len = offset_end - tag_offset;",
          "182:         total_tag_len += tag_len;",
          "183:         ti_len = proto_tree_add_uint(tag_tree, hf_fb_zero_tag_length, tvb, offset, 4, tag_len);",
          "184:         proto_item_append_text(ti_tag, \" (l=%u)\", tag_len);",
          "185:         proto_item_set_generated(ti_len);",
          "189:         if( tag_len > tvb_reported_length_remaining(tvb, tag_offset_start + tag_offset)){",
          "190:             tag_len = tvb_reported_length_remaining(tvb, tag_offset_start + tag_offset);",
          "191:             offset_end = tag_offset + tag_len;",
          "192:             expert_add_info(pinfo, ti_len, &ei_fb_zero_tag_length);",
          "195:         proto_tree_add_item(tag_tree, hf_fb_zero_tag_value, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "199:                 proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_sni, tvb, tag_offset_start + tag_offset, tag_len, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "200:                 proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "201:                 tag_offset += tag_len;",
          "202:             break;",
          "204:                 proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_vers, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "205:                 proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "206:                 tag_offset += 4;",
          "209:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_sno, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "210:                 tag_offset += tag_len;",
          "213:                 while(offset_end - tag_offset >= 4){",
          "214:                     proto_tree *ti_aead;",
          "215:                     ti_aead = proto_tree_add_item(tag_tree, hf_fb_zero_tag_aead, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA);",
          "216:                     proto_item_append_text(ti_aead, \" (%s)\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_aead_vals, \"Unknown\"));",
          "217:                     proto_item_append_text(ti_tag, \", %s\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_aead_vals, \"Unknown\"));",
          "218:                     tag_offset += 4;",
          "222:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_scid, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "223:                 tag_offset += tag_len;",
          "226:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_time, tvb, tag_offset_start + tag_offset, 4, ENC_LITTLE_ENDIAN);",
          "227:                 proto_item_append_text(ti_tag, \": %u\", tvb_get_letohl(tvb, tag_offset_start + tag_offset));",
          "228:                 tag_offset += 4;",
          "231:                 proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_alpn, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "232:                 proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "233:                 tag_offset += 4;",
          "237:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_pubs, tvb, tag_offset_start + tag_offset, 2, ENC_LITTLE_ENDIAN);",
          "238:                 tag_offset += 2;",
          "239:                 while(offset_end - tag_offset >= 3){",
          "240:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_pubs, tvb, tag_offset_start + tag_offset, 3, ENC_LITTLE_ENDIAN);",
          "241:                     tag_offset += 3;",
          "245:                 while(offset_end - tag_offset >= 4){",
          "246:                     proto_tree *ti_kexs;",
          "247:                     ti_kexs = proto_tree_add_item(tag_tree, hf_fb_zero_tag_kexs, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA);",
          "248:                     proto_item_append_text(ti_kexs, \" (%s)\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_kexs_vals, \"Unknown\"));",
          "249:                     proto_item_append_text(ti_tag, \", %s\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_kexs_vals, \"Unknown\"));",
          "250:                     tag_offset += 4;",
          "255:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_nonc, tvb, tag_offset_start + tag_offset, 32, ENC_NA);",
          "256:                 tag_offset += 32;",
          "260:                 proto_tree_add_item(tag_tree, hf_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "265:                 goto end;",
          "266:             break;",
          "267:         }",
          "269:         if(tag_offset != offset_end){",
          "271:             proto_tree_add_expert(tag_tree, pinfo, &ei_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, offset_end - tag_offset);",
          "273:             goto end;",
          "279:     end:",
          "",
          "[Added Lines]",
          "193:         ti_offset_len = proto_tree_add_item_ret_uint(tag_tree, hf_fb_zero_tag_offset_end, tvb, offset, 4, ENC_LITTLE_ENDIAN, &offset_end);",
          "194:         if(offset_end < tag_offset){",
          "195:             expert_add_info_format(pinfo, ti_offset_len, &ei_fb_zero_tag_offset_end_invalid,",
          "196:                                    \"Invalid tag end offset %u < %u\",",
          "197:                                    offset_end, tag_offset);",
          "203:             tag_offset_valid = FALSE;",
          "204:         } else {",
          "205:             tag_len = offset_end - tag_offset;",
          "206:             if(!tvb_bytes_exist(tvb, tag_offset_start + tag_offset, tag_len)){",
          "207:                 expert_add_info_format(pinfo, ti_offset_len, &ei_fb_zero_tag_offset_end_invalid,",
          "208:                                        \"Invalid tag end offset %u past end of packet\",",
          "209:                                        offset_end);",
          "218:                 tag_offset_valid = FALSE;",
          "219:             }",
          "220:             total_tag_len += tag_len;",
          "221:             ti_len = proto_tree_add_uint(tag_tree, hf_fb_zero_tag_length, tvb, offset, 4, tag_len);",
          "222:             proto_item_append_text(ti_tag, \" (l=%u)\", tag_len);",
          "223:             proto_item_set_generated(ti_len);",
          "224:         }",
          "227:         if(tag_offset_valid){",
          "228:             proto_tree_add_item(tag_tree, hf_fb_zero_tag_value, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "233:                 if(tag_offset_valid){",
          "234:                     proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_sni, tvb, tag_offset_start + tag_offset, tag_len, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "235:                     proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "236:                     tag_offset += tag_len;",
          "237:                 }",
          "238:                 break;",
          "240:                 if(tag_offset_valid){",
          "241:                     if(tag_len != 4){",
          "242:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "243:                                                \"Invalid tag length: %u, should be 4\", tag_len);",
          "244:                         tag_offset += tag_len;",
          "245:                         break;",
          "246:                     }",
          "247:                     proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_vers, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "248:                     proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "249:                     tag_offset += 4;",
          "250:                 }",
          "253:                 if(tag_offset_valid){",
          "254:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_sno, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "255:                     tag_offset += tag_len;",
          "256:                 }",
          "259:                 if(tag_offset_valid){",
          "260:                     while(offset_end - tag_offset >= 4){",
          "261:                         proto_tree *ti_aead;",
          "262:                         ti_aead = proto_tree_add_item(tag_tree, hf_fb_zero_tag_aead, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA);",
          "263:                         proto_item_append_text(ti_aead, \" (%s)\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_aead_vals, \"Unknown\"));",
          "264:                         proto_item_append_text(ti_tag, \", %s\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_aead_vals, \"Unknown\"));",
          "265:                         tag_offset += 4;",
          "266:                     }",
          "267:                     if(offset_end - tag_offset > 0){",
          "268:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "269:                                                \"Invalid tag length: %u, should be a multiple of 4\", tag_len);",
          "270:                         tag_offset = offset_end;",
          "271:                     }",
          "275:                 if(tag_offset_valid){",
          "276:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_scid, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "277:                     tag_offset += tag_len;",
          "278:                 }",
          "281:                 if(tag_offset_valid){",
          "282:                     if(tag_len != 4){",
          "283:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "284:                                                \"Invalid tag length: %u, should be 4\", tag_len);",
          "285:                         tag_offset += tag_len;",
          "286:                         break;",
          "287:                     }",
          "288:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_time, tvb, tag_offset_start + tag_offset, 4, ENC_LITTLE_ENDIAN);",
          "289:                     proto_item_append_text(ti_tag, \": %u\", tvb_get_letohl(tvb, tag_offset_start + tag_offset));",
          "290:                     tag_offset += 4;",
          "291:                 }",
          "294:                 if(tag_offset_valid){",
          "295:                     if(tag_len != 4){",
          "296:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "297:                                                \"Invalid tag length: %u, should be 4\", tag_len);",
          "298:                         tag_offset += tag_len;",
          "299:                         break;",
          "300:                     }",
          "301:                     proto_tree_add_item_ret_string(tag_tree, hf_fb_zero_tag_alpn, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA, wmem_packet_scope(), &tag_str);",
          "302:                     proto_item_append_text(ti_tag, \": %s\", tag_str);",
          "303:                     tag_offset += 4;",
          "304:                 }",
          "307:                 if(tag_offset_valid){",
          "309:                     if(tag_len < 2){",
          "310:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "311:                                                \"Invalid tag length: %u, should be >= 2\", tag_len);",
          "312:                         tag_offset += tag_len;",
          "313:                         break;",
          "314:                     }",
          "315:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_pubs, tvb, tag_offset_start + tag_offset, 2, ENC_LITTLE_ENDIAN);",
          "316:                     tag_offset += 2;",
          "317:                     while(offset_end - tag_offset >= 3){",
          "318:                         proto_tree_add_item(tag_tree, hf_fb_zero_tag_pubs, tvb, tag_offset_start + tag_offset, 3, ENC_LITTLE_ENDIAN);",
          "319:                         tag_offset += 3;",
          "320:                     }",
          "321:                     if(offset_end - tag_offset > 0){",
          "322:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "323:                                                \"Invalid tag length: %u, should be a multiple of 3\", tag_len);",
          "324:                         tag_offset = offset_end;",
          "325:                     }",
          "329:                 if(tag_offset_valid){",
          "330:                     while(offset_end - tag_offset >= 4){",
          "331:                         proto_tree *ti_kexs;",
          "332:                         ti_kexs = proto_tree_add_item(tag_tree, hf_fb_zero_tag_kexs, tvb, tag_offset_start + tag_offset, 4, ENC_ASCII|ENC_NA);",
          "333:                         proto_item_append_text(ti_kexs, \" (%s)\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_kexs_vals, \"Unknown\"));",
          "334:                         proto_item_append_text(ti_tag, \", %s\", val_to_str(tvb_get_ntohl(tvb, tag_offset_start + tag_offset), tag_kexs_vals, \"Unknown\"));",
          "335:                         tag_offset += 4;",
          "336:                     }",
          "337:                     if(offset_end - tag_offset > 0){",
          "338:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "339:                                                \"Invalid tag length: %u, should be a multiple of 4\", tag_len);",
          "340:                         tag_offset = offset_end;",
          "341:                     }",
          "345:                 if(tag_offset_valid){",
          "347:                     if(tag_len != 32){",
          "348:                         expert_add_info_format(pinfo, fb_zero_tree, &ei_fb_zero_length_invalid,",
          "349:                                                \"Invalid tag length: %u, should be 32\", tag_len);",
          "350:                         tag_offset += tag_len;",
          "351:                         break;",
          "352:                     }",
          "353:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_nonc, tvb, tag_offset_start + tag_offset, 32, ENC_NA);",
          "354:                     tag_offset += 32;",
          "355:                 }",
          "362:                 if(tag_offset_valid){",
          "363:                     proto_tree_add_item(tag_tree, hf_fb_zero_tag_unknown, tvb, tag_offset_start + tag_offset, tag_len, ENC_NA);",
          "364:                     tag_offset += tag_len;",
          "365:                 }",
          "366:                 break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "570:     static ei_register_info ei[] = {",
          "571:         { &ei_fb_zero_tag_undecoded, { \"fb_zero.tag.undecoded\", PI_UNDECODED, PI_NOTE, \"Dissector for FB Zero Tag code not implemented, Contact Wireshark developers if you want this supported\", EXPFILL }},",
          "573:         { &ei_fb_zero_tag_unknown, { \"fb_zero.tag.unknown.data\", PI_UNDECODED, PI_NOTE, \"Unknown Data\", EXPFILL }},",
          "574:         { &ei_fb_zero_length_invalid, { \"fb_zero.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid length\", EXPFILL }},",
          "575:     };",
          "",
          "[Removed Lines]",
          "572:         { &ei_fb_zero_tag_length, { \"fb_zero.tag.length.truncated\", PI_MALFORMED, PI_NOTE, \"Truncated Tag Length...\", EXPFILL }},",
          "",
          "[Added Lines]",
          "671:         { &ei_fb_zero_tag_offset_end_invalid, { \"fb_zero.offset_end.invalid\", PI_PROTOCOL, PI_ERROR, \"Invalid tag end offset\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}