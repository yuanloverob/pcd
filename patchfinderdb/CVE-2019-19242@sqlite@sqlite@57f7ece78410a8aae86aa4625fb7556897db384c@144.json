{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1698993e6c84613e873929693f7886e151f30d9",
      "candidate_info": {
        "commit_hash": "a1698993e6c84613e873929693f7886e151f30d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1698993e6c84613e873929693f7886e151f30d9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Futher improvements to LEFT JOIN strength reduction.\n\nFossilOrigin-Name: 8a39167bd2d46496f7484cfec371e4bad22da882209b01da9459c4ed5877da25",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 548082dfab5d9484279ccc11cd2833ac131b54b7481372b576d7c28bbb3294ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5234:   if( p==0 ) return 0;",
          "5235:   if( p->op==TK_NOTNULL ){",
          "5236:     p = p->pLeft;",
          "5240:   }",
          "5241:   w.xExprCallback = impliesNotNullRow;",
          "5242:   w.xSelectCallback = 0;",
          "",
          "[Removed Lines]",
          "5237:   }else if( p->op==TK_AND ){",
          "5238:     if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5239:     p = p->pRight;",
          "",
          "[Added Lines]",
          "5237:   }else{",
          "5238:     while( p->op==TK_AND ){",
          "5239:       if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5240:       p = p->pRight;",
          "5241:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
      "candidate_info": {
        "commit_hash": "55700bcd7255b15861fec4a0c4ab24eda965420d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55700bcd7255b15861fec4a0c4ab24eda965420d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Remove code in the round() SQL function that became unreachable due to the optimization of check-in [e95138f5f4febde5]\n\nFossilOrigin-Name: b141bae3f6d16c0ebb59dac9b02086a4370839e71ade34004f647b09b1083d1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "404:     sqlite3_free(zBuf);",
          "405:   }",
          "406:   sqlite3_result_double(context, r);",
          "",
          "[Removed Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Added Lines]",
          "400:     sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725b1cfc53d19b4de268df83f3d83c0d96a51810",
      "candidate_info": {
        "commit_hash": "725b1cfc53d19b4de268df83f3d83c0d96a51810",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725b1cfc53d19b4de268df83f3d83c0d96a51810",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window6.test"
        ],
        "message": "Fix a problem with window frames that use \"BETWEEN <start> AND 0 PRECEDING\".\n\nFossilOrigin-Name: 7927b6b023502e990d23f30251b5b0918b547726b863bfb6747dcd7f1f71d19a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window6.test||test/window6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a063f7c426d1ac066bf05cc03288f49b1c92e06a8cb2bc271cce9bd3022a74ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2013:   return pRet;",
          "2014: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2024: static int windowExprGtZero(Parse *pParse, Expr *pExpr){",
          "2025:   int ret = 0;",
          "2026:   sqlite3 *db = pParse->db;",
          "2027:   sqlite3_value *pVal = 0;",
          "2028:   sqlite3ValueFromExpr(db, pExpr, db->enc, SQLITE_AFF_NUMERIC, &pVal);",
          "2029:   if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2030:     ret = 1;",
          "2031:   }",
          "2032:   sqlite3ValueFree(pVal);",
          "2033:   return ret;",
          "2034: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2408:   switch( pMWin->eStart ){",
          "2418:       }",
          "2419:       break;",
          "2421:     case TK_UNBOUNDED:",
          "2422:       if( windowCacheFrame(pMWin)==0 ){",
          "2423:         if( pMWin->eEnd==TK_PRECEDING ){",
          "2425:         }else{",
          "2426:           s.eDelete = WINDOW_RETURN_ROW;",
          "2427:         }",
          "",
          "[Removed Lines]",
          "2409:     case TK_FOLLOWING: {",
          "2410:       if( pMWin->eType!=TK_RANGE ){",
          "2411:         sqlite3 *db = pParse->db;",
          "2412:         sqlite3_value *pVal = 0;",
          "2413:         sqlite3ValueFromExpr(db,pMWin->pStart,db->enc,SQLITE_AFF_NUMERIC,&pVal);",
          "2414:         if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2415:           s.eDelete = WINDOW_RETURN_ROW;",
          "2416:         }",
          "2417:         sqlite3ValueFree(pVal);",
          "2420:     }",
          "2424:           s.eDelete = WINDOW_AGGSTEP;",
          "",
          "[Added Lines]",
          "2429:     case TK_FOLLOWING:",
          "2430:       if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pStart) ){",
          "2431:         s.eDelete = WINDOW_RETURN_ROW;",
          "2437:           if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pEnd) ){",
          "2438:             s.eDelete = WINDOW_AGGSTEP;",
          "2439:           }",
          "",
          "---------------"
        ],
        "test/window6.test||test/window6.test": [
          "File: test/window6.test -> test/window6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   25 {} 90    30 thirty 150   30 thirty 150   50 {} 200",
          "338: }",
          "340: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: do_execsql_test 11.3.1 {",
          "341:   SELECT a, sum(a) OVER win FROM t1",
          "342:   WINDOW win AS (ORDER BY a ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "343: } {",
          "344:   10 10 15 25 20 45 20 65 25 90 30 120 30 150 50 200",
          "345: }",
          "346: do_execsql_test 11.3.2 {",
          "347:   SELECT a, sum(a) OVER win FROM t1",
          "348:   WINDOW win AS (ORDER BY a ROWS BETWEEN UNBOUNDED PRECEDING AND 0 FOLLOWING)",
          "349: } {",
          "350:   10 10 15 25 20 45 20 65 25 90 30 120 30 150 50 200",
          "351: }",
          "352: do_execsql_test 11.3.3 {",
          "353:   SELECT a, sum(a) OVER win FROM t1",
          "354:   WINDOW win AS (ORDER BY a ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING)",
          "355: } {",
          "356:   10 10 15 25 20 45 20 65 25 90 30 120 30 150 50 200",
          "357: }",
          "359: do_execsql_test 11.4.1 {",
          "360:   SELECT y, group_concat(y, '.') OVER win FROM t3",
          "361:   WINDOW win AS (",
          "362:     ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND 10 PRECEDING",
          "363:   );",
          "364: } {",
          "365:   fifteen fifteen",
          "366:   ten     fifteen.ten",
          "367:   thirty  fifteen.ten.thirty",
          "368: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c0666d9e32ff96b6b7aee15071be8ef57e4fd37",
      "candidate_info": {
        "commit_hash": "5c0666d9e32ff96b6b7aee15071be8ef57e4fd37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5c0666d9e32ff96b6b7aee15071be8ef57e4fd37",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "In FTS3/4, the poslist end marker must be larger than any other possible poslist value, even on a corrupt poslist.\n\nFossilOrigin-Name: 752679aea5a6bbde24cbf39e2fa018f7dd1c226d463ca4bd74125303b2255170",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:   SQLITE_EXTENSION_INIT1",
          "309: #endif",
          "311: static int fts3EvalNext(Fts3Cursor *pCsr);",
          "312: static int fts3EvalStart(Fts3Cursor *pCsr);",
          "313: static int fts3TermSegReaderCursor(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: #ifndef SQLITE_AMALGAMATION",
          "319: # define LARGEST_INT64  (0xffffffff|(((sqlite3_int64)0x7fffffff)<<32))",
          "320: # define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)",
          "321: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086: }",
          "",
          "[Removed Lines]",
          "2092: #define POSITION_LIST_END 0x7fffffff",
          "",
          "[Added Lines]",
          "2105: #define POSITION_LIST_END LARGEST_INT64",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2165:       fts3GetVarint32(&p1[1], &iCol1);",
          "2166:       if( iCol1==0 ) return FTS_CORRUPT_VTAB;",
          "2167:     }",
          "2169:     else iCol1 = 0;",
          "2171:     if( *p2==POS_COLUMN ){",
          "2172:       fts3GetVarint32(&p2[1], &iCol2);",
          "2173:       if( iCol2==0 ) return FTS_CORRUPT_VTAB;",
          "2174:     }",
          "2176:     else iCol2 = 0;",
          "2178:     if( iCol1==iCol2 ){",
          "",
          "[Removed Lines]",
          "2168:     else if( *p1==POS_END ) iCol1 = POSITION_LIST_END;",
          "2175:     else if( *p2==POS_END ) iCol2 = POSITION_LIST_END;",
          "",
          "[Added Lines]",
          "2181:     else if( *p1==POS_END ) iCol1 = 0x7fffffff;",
          "2188:     else if( *p2==POS_END ) iCol2 = 0x7fffffff;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3182:   return rc;",
          "3183: }",
          "",
          "[Removed Lines]",
          "3192: #ifndef SQLITE_AMALGAMATION",
          "3193: # define LARGEST_INT64  (0xffffffff|(((sqlite3_int64)0x7fffffff)<<32))",
          "3194: # define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)",
          "3195: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 326cdc16f4db23c1d17596e4ef8d9d7abc672d48665950029ba53fd40c1b2d99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59145813d20c9bf91775928d4899eab20fb93f0d",
      "candidate_info": {
        "commit_hash": "59145813d20c9bf91775928d4899eab20fb93f0d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/59145813d20c9bf91775928d4899eab20fb93f0d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/with1.test"
        ],
        "message": "Renumber the Select.selId values in the copies of SELECT statements that implement VIEWs when the VIEW is expanded, so that when the same VIEW is used twice in the same join, each expansion as a distinct selId. This fixes ticket [ce823231949d3abf42453c8].\n\nFossilOrigin-Name: 3cacc4b940fd69776d930deec9512df47a2f22cb04fb955e354a0b25bdec287c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 42af7c819bc52ccb6953a58b1c05d3bd47cc438c5119a9555b1b796764eb9f20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4843:   if( (selFlags & SF_Expanded)!=0 ){",
          "4844:     return WRC_Prune;",
          "4845:   }",
          "4846:   pTabList = p->pSrc;",
          "4847:   pEList = p->pEList;",
          "4848:   sqlite3WithPush(pParse, p->pWith, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4846:   if( pWalker->eCode ){",
          "4848:     p->selId = ++pParse->nSelect;",
          "4849:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4892: #if !defined(SQLITE_OMIT_VIEW) || !defined (SQLITE_OMIT_VIRTUALTABLE)",
          "4893:       if( IsVirtual(pTab) || pTab->pSelect ){",
          "4894:         i16 nCol;",
          "4895:         if( sqlite3ViewGetColumnNames(pParse, pTab) ) return WRC_Abort;",
          "4896:         assert( pFrom->pSelect==0 );",
          "4897:         pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);",
          "4898:         nCol = pTab->nCol;",
          "4899:         pTab->nCol = -1;",
          "4900:         sqlite3WalkSelect(pWalker, pFrom->pSelect);",
          "4901:         pTab->nCol = nCol;",
          "4902:       }",
          "4903: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4899:         u8 eCodeOrig = pWalker->eCode;",
          "4907:         pWalker->eCode = eCodeOrig;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5147:   }",
          "5148:   w.xSelectCallback = selectExpander;",
          "5149:   w.xSelectCallback2 = selectPopWith;",
          "5150:   sqlite3WalkSelect(&w, pSelect);",
          "5151: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5157:   w.eCode = 0;",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {too many FROM clause terms, max: 200}}",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1094: # 2019-05-22",
          "1095: # ticket https://www.sqlite.org/src/tktview/ce823231949d3abf42453c8f20",
          "1096: #",
          "1097: sqlite3 db :memory:",
          "1098: do_execsql_test 23.1 {",
          "1099:   CREATE TABLE t1(id INTEGER NULL PRIMARY KEY, name Text);",
          "1100:   INSERT INTO t1 VALUES (1, 'john');",
          "1101:   INSERT INTO t1 VALUES (2, 'james');",
          "1102:   INSERT INTO t1 VALUES (3, 'jingle');",
          "1103:   INSERT INTO t1 VALUES (4, 'himer');",
          "1104:   INSERT INTO t1 VALUES (5, 'smith');",
          "1105:   CREATE VIEW v2 AS",
          "1106:     WITH t4(Name) AS (VALUES ('A'), ('B'))",
          "1107:     SELECT Name Name FROM t4;",
          "1108:   CREATE VIEW v3 AS",
          "1109:     WITH t4(Att, Val, Act) AS (VALUES",
          "1110:       ('C', 'D', 'E'),",
          "1111:       ('F', 'G', 'H')",
          "1112:     )",
          "1113:     SELECT D.Id Id, P.Name Protocol, T.Att Att, T.Val Val, T.Act Act",
          "1114:     FROM t1 D",
          "1115:     CROSS JOIN v2 P",
          "1116:     CROSS JOIN t4 T;",
          "1117:   SELECT * FROM v3;",
          "1118: } {1 A C D E 1 A F G H 1 B C D E 1 B F G H 2 A C D E 2 A F G H 2 B C D E 2 B F G H 3 A C D E 3 A F G H 3 B C D E 3 B F G H 4 A C D E 4 A F G H 4 B C D E 4 B F G H 5 A C D E 5 A F G H 5 B C D E 5 B F G H}",
          "",
          "---------------"
        ]
      }
    }
  ]
}