{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d1eb23cd26f755acd002b7e334feaebe22232d06",
      "candidate_info": {
        "commit_hash": "d1eb23cd26f755acd002b7e334feaebe22232d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1eb23cd26f755acd002b7e334feaebe22232d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzz_common.tcl"
        ],
        "message": "Fix a case in \"fuzz.test\" that could fail, as non-deterministic functions may no longer appear in CHECK constraints.\n\nFossilOrigin-Name: a370871e21bd1028ac968ca4f48e6b5f75e647ac40d4342aeb0504a848452908",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzz_common.tcl||test/fuzz_common.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 52206488f315803df73f964774270ef4783923407a2567936f56b0a1a88b4400",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzz_common.tcl||test/fuzz_common.tcl": [
          "File: test/fuzz_common.tcl -> test/fuzz_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:   lappend ::fuzzyopts(-errorlist) {ORDER BY}",
          "364:   lappend ::fuzzyopts(-errorlist) {GROUP BY}",
          "365:   lappend ::fuzzyopts(-errorlist) {datatype mismatch}",
          "367:   for {set ii 0} {$ii < $::fuzzyopts(-repeats)} {incr ii} {",
          "368:     do_test ${testname}.$ii {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:   lappend ::fuzzyopts(-errorlist) {non-deterministic functions prohibited}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccb2113a622f4d119f97185a59d088910cf827b7",
      "candidate_info": {
        "commit_hash": "ccb2113a622f4d119f97185a59d088910cf827b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ccb2113a622f4d119f97185a59d088910cf827b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h",
          "src/date.c",
          "src/loadext.c",
          "src/main.c",
          "src/mutex_unix.c",
          "src/mutex_w32.c",
          "src/notify.c",
          "src/os.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/test_multiplex.c",
          "src/test_osinst.c",
          "src/vdbeaux.c"
        ],
        "message": "Refactoring various names.  No changes in the resulting machine code.\n\nFossilOrigin-Name: 7bb08b1bfcf184e4b59c8c9028926a0052612ff6a6731914ccdb8dee07ea4a98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h",
          "src/date.c||src/date.c",
          "src/loadext.c||src/loadext.c",
          "src/main.c||src/main.c",
          "src/mutex_unix.c||src/mutex_unix.c",
          "src/mutex_w32.c||src/mutex_w32.c",
          "src/notify.c||src/notify.c",
          "src/os.c||src/os.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/test_multiplex.c||src/test_multiplex.c",
          "src/test_osinst.c||src/test_osinst.c",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a340c9bc7d939efc947e3b17ca79314482f74368b15567dd089d40e4270890e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2422: #if SQLITE_THREADSAFE",
          "2423:       mutexOpen = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_OPEN);",
          "2424:       sqlite3_mutex_enter(mutexOpen);",
          "2426:       sqlite3_mutex_enter(mutexShared);",
          "2427: #endif",
          "2428:       for(pBt=GLOBAL(BtShared*,sqlite3SharedCacheList); pBt; pBt=pBt->pNext){",
          "",
          "[Removed Lines]",
          "2425:       mutexShared = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "2425:       mutexShared = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2541:     pBt->nRef = 1;",
          "2542:     if( p->sharable ){",
          "2543:       MUTEX_LOGIC( sqlite3_mutex *mutexShared; )",
          "2545:       if( SQLITE_THREADSAFE && sqlite3GlobalConfig.bCoreMutex ){",
          "2546:         pBt->mutex = sqlite3MutexAlloc(SQLITE_MUTEX_FAST);",
          "2547:         if( pBt->mutex==0 ){",
          "",
          "[Removed Lines]",
          "2544:       MUTEX_LOGIC( mutexShared = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);)",
          "",
          "[Added Lines]",
          "2544:       MUTEX_LOGIC( mutexShared = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2635:   int removed = 0;",
          "2637:   assert( sqlite3_mutex_notheld(pBt->mutex) );",
          "2639:   sqlite3_mutex_enter(pMaster);",
          "2640:   pBt->nRef--;",
          "2641:   if( pBt->nRef<=0 ){",
          "",
          "[Removed Lines]",
          "2638:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )",
          "",
          "[Added Lines]",
          "2638:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN); )",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "515: #if !HAVE_LOCALTIME_R && !HAVE_LOCALTIME_S",
          "516:   struct tm *pX;",
          "517: #if SQLITE_THREADSAFE>0",
          "519: #endif",
          "520:   sqlite3_mutex_enter(mutex);",
          "521:   pX = localtime(t);",
          "",
          "[Removed Lines]",
          "518:   sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "518:   sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1211: #if HAVE_GMTIME_R",
          "1212:   pTm = gmtime_r(&t, &sNow);",
          "1213: #else",
          "1215:   pTm = gmtime(&t);",
          "1216:   if( pTm ) memcpy(&sNow, pTm, sizeof(sNow));",
          "1218: #endif",
          "1219:   if( pTm ){",
          "1220:     strftime(zBuf, 20, zFormat, &sNow);",
          "",
          "[Removed Lines]",
          "1214:   sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER));",
          "1217:   sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER));",
          "",
          "[Added Lines]",
          "1214:   sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));",
          "1217:   sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "731:   {",
          "732:     u32 i;",
          "733: #if SQLITE_THREADSAFE",
          "735: #endif",
          "736:     wsdAutoextInit;",
          "737:     sqlite3_mutex_enter(mutex);",
          "",
          "[Removed Lines]",
          "734:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "734:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "769:   void (*xInit)(void)",
          "770: ){",
          "771: #if SQLITE_THREADSAFE",
          "773: #endif",
          "774:   int i;",
          "775:   int n = 0;",
          "",
          "[Removed Lines]",
          "772:   sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "772:   sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: #endif",
          "797:   {",
          "798: #if SQLITE_THREADSAFE",
          "800: #endif",
          "801:     wsdAutoextInit;",
          "802:     sqlite3_mutex_enter(mutex);",
          "",
          "[Removed Lines]",
          "799:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "799:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "826:   for(i=0; go; i++){",
          "827:     char *zErrmsg;",
          "828: #if SQLITE_THREADSAFE",
          "830: #endif",
          "831: #ifdef SQLITE_OMIT_LOAD_EXTENSION",
          "832:     const sqlite3_api_routines *pThunk = 0;",
          "",
          "[Removed Lines]",
          "829:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "829:     sqlite3_mutex *mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   if( rc ) return rc;",
          "250:   sqlite3_mutex_enter(pMaster);",
          "251:   sqlite3GlobalConfig.isMutexInit = 1;",
          "252:   if( !sqlite3GlobalConfig.isMallocInit ){",
          "",
          "[Removed Lines]",
          "249:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )",
          "",
          "[Added Lines]",
          "249:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN); )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3112:                SQLITE_OPEN_MAIN_JOURNAL |",
          "3113:                SQLITE_OPEN_TEMP_JOURNAL |",
          "3114:                SQLITE_OPEN_SUBJOURNAL |",
          "3116:                SQLITE_OPEN_NOMUTEX |",
          "3117:                SQLITE_OPEN_FULLMUTEX |",
          "3118:                SQLITE_OPEN_WAL",
          "",
          "[Removed Lines]",
          "3115:                SQLITE_OPEN_MASTER_JOURNAL |",
          "",
          "[Added Lines]",
          "3115:                SQLITE_OPEN_SUPER_JOURNAL |",
          "",
          "---------------"
        ],
        "src/mutex_unix.c||src/mutex_unix.c": [
          "File: src/mutex_unix.c -> src/mutex_unix.c"
        ],
        "src/mutex_w32.c||src/mutex_w32.c": [
          "File: src/mutex_w32.c -> src/mutex_w32.c"
        ],
        "src/notify.c||src/notify.c": [
          "File: src/notify.c -> src/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define assertMutexHeld() \\",
          "40: static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;",
          "",
          "[Removed Lines]",
          "32:   assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) )",
          "",
          "[Added Lines]",
          "32:   assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN)) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: }",
          "113: static void enterMutex(void){",
          "115:   checkListProperties(0);",
          "116: }",
          "121: static void leaveMutex(void){",
          "122:   assertMutexHeld();",
          "123:   checkListProperties(0);",
          "125: }",
          "",
          "[Removed Lines]",
          "114:   sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER));",
          "124:   sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER));",
          "",
          "[Added Lines]",
          "114:   sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));",
          "124:   sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "353:   if( rc ) return 0;",
          "354: #endif",
          "355: #if SQLITE_THREADSAFE",
          "357: #endif",
          "358:   sqlite3_mutex_enter(mutex);",
          "359:   for(pVfs = vfsList; pVfs; pVfs=pVfs->pNext){",
          "",
          "[Removed Lines]",
          "356:   mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);",
          "",
          "[Added Lines]",
          "356:   mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370: static void vfsUnlink(sqlite3_vfs *pVfs){",
          "372:   if( pVfs==0 ){",
          "374:   }else if( vfsList==pVfs ){",
          "",
          "[Removed Lines]",
          "371:   assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) );",
          "",
          "[Added Lines]",
          "371:   assert( sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN)) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:   if( pVfs==0 ) return SQLITE_MISUSE_BKPT;",
          "400: #endif",
          "403:   sqlite3_mutex_enter(mutex);",
          "404:   vfsUnlink(pVfs);",
          "405:   if( makeDflt || vfsList==0 ){",
          "",
          "[Removed Lines]",
          "402:   MUTEX_LOGIC( mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )",
          "",
          "[Added Lines]",
          "402:   MUTEX_LOGIC( mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN); )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "423:   int rc = sqlite3_initialize();",
          "424:   if( rc ) return rc;",
          "425: #endif",
          "427:   sqlite3_mutex_enter(mutex);",
          "428:   vfsUnlink(pVfs);",
          "429:   sqlite3_mutex_leave(mutex);",
          "",
          "[Removed Lines]",
          "426:   MUTEX_LOGIC( mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )",
          "",
          "[Added Lines]",
          "426:   MUTEX_LOGIC( mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN); )",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5987:   int isNewJrnl = (isCreate && (",
          "5989:      || eType==SQLITE_OPEN_MAIN_JOURNAL",
          "5990:      || eType==SQLITE_OPEN_WAL",
          "5991:   ));",
          "",
          "[Removed Lines]",
          "5988:         eType==SQLITE_OPEN_MASTER_JOURNAL",
          "",
          "[Added Lines]",
          "5988:         eType==SQLITE_OPEN_SUPER_JOURNAL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6013:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );",
          "6014:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );",
          "6016:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );",
          "6019:   assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB",
          "6020:        || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL",
          "6022:        || eType==SQLITE_OPEN_TRANSIENT_DB || eType==SQLITE_OPEN_WAL",
          "6023:   );",
          "",
          "[Removed Lines]",
          "6015:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );",
          "6021:        || eType==SQLITE_OPEN_SUBJOURNAL   || eType==SQLITE_OPEN_MASTER_JOURNAL",
          "",
          "[Added Lines]",
          "6015:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_SUPER_JOURNAL );",
          "6021:        || eType==SQLITE_OPEN_SUBJOURNAL   || eType==SQLITE_OPEN_SUPER_JOURNAL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6211: #endif",
          "6213:   assert( zPath==0 || zPath[0]=='/'",
          "6215:   );",
          "6216:   rc = fillInUnixFile(pVfs, fd, pFile, zPath, ctrlFlags);",
          "",
          "[Removed Lines]",
          "6214:       || eType==SQLITE_OPEN_MASTER_JOURNAL || eType==SQLITE_OPEN_MAIN_JOURNAL",
          "",
          "[Added Lines]",
          "6214:       || eType==SQLITE_OPEN_SUPER_JOURNAL || eType==SQLITE_OPEN_MAIN_JOURNAL",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:   int rc;",
          "1296:   MUTEX_LOGIC( pMem = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM); )",
          "1297:   sqlite3_mutex_enter(pMaster);",
          "1298:   sqlite3_mutex_enter(pMem);",
          "",
          "[Removed Lines]",
          "1295:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )",
          "",
          "[Added Lines]",
          "1295:   MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN); )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5024: #ifndef NDEBUG",
          "5025:   int isOpenJournal = (isCreate && (",
          "5027:      || eType==SQLITE_OPEN_MAIN_JOURNAL",
          "5028:      || eType==SQLITE_OPEN_WAL",
          "5029:   ));",
          "",
          "[Removed Lines]",
          "5026:         eType==SQLITE_OPEN_MASTER_JOURNAL",
          "",
          "[Added Lines]",
          "5026:         eType==SQLITE_OPEN_SUPER_JOURNAL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB );",
          "5050:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL );",
          "5052:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_WAL );",
          "5055:   assert( eType==SQLITE_OPEN_MAIN_DB      || eType==SQLITE_OPEN_TEMP_DB",
          "5056:        || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL",
          "5058:        || eType==SQLITE_OPEN_TRANSIENT_DB || eType==SQLITE_OPEN_WAL",
          "5059:   );",
          "",
          "[Removed Lines]",
          "5051:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL );",
          "5057:        || eType==SQLITE_OPEN_SUBJOURNAL   || eType==SQLITE_OPEN_MASTER_JOURNAL",
          "",
          "[Added Lines]",
          "5051:   assert( (!isDelete && zName) || eType!=SQLITE_OPEN_SUPER_JOURNAL );",
          "5057:        || eType==SQLITE_OPEN_SUBJOURNAL   || eType==SQLITE_OPEN_SUPER_JOURNAL",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2501:   if( !pMaster ){",
          "2502:     rc = SQLITE_NOMEM_BKPT;",
          "2503:   }else{",
          "2505:     rc = sqlite3OsOpen(pVfs, zMaster, pMaster, flags, 0);",
          "2506:   }",
          "2507:   if( rc!=SQLITE_OK ) goto delmaster_out;",
          "",
          "[Removed Lines]",
          "2504:     const int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_MASTER_JOURNAL);",
          "",
          "[Added Lines]",
          "2504:     const int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_SUPER_JOURNAL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2543:       int c;",
          "2545:       rc = sqlite3OsOpen(pVfs, zJournal, pJournal, flags, 0);",
          "2546:       if( rc!=SQLITE_OK ){",
          "2547:         goto delmaster_out;",
          "",
          "[Removed Lines]",
          "2544:       int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_MASTER_JOURNAL);",
          "",
          "[Added Lines]",
          "2544:       int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_SUPER_JOURNAL);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7579: #define SQLITE_MUTEX_FAST             0",
          "7580: #define SQLITE_MUTEX_RECURSIVE        1",
          "",
          "[Removed Lines]",
          "7581: #define SQLITE_MUTEX_STATIC_MASTER    2",
          "",
          "[Added Lines]",
          "7583: #define SQLITE_MUTEX_STATIC_MAIN      2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7599: #define SQLITE_MUTEX_STATIC_MASTER    2",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4630:       { \"SQLITE_OPEN_MAIN_JOURNAL\", SQLITE_OPEN_MAIN_JOURNAL },",
          "4631:       { \"SQLITE_OPEN_TEMP_JOURNAL\", SQLITE_OPEN_TEMP_JOURNAL },",
          "4632:       { \"SQLITE_OPEN_SUBJOURNAL\", SQLITE_OPEN_SUBJOURNAL },",
          "4634:       { \"SQLITE_OPEN_NOMUTEX\", SQLITE_OPEN_NOMUTEX },",
          "4635:       { \"SQLITE_OPEN_FULLMUTEX\", SQLITE_OPEN_FULLMUTEX },",
          "4636:       { \"SQLITE_OPEN_SHAREDCACHE\", SQLITE_OPEN_SHAREDCACHE },",
          "",
          "[Removed Lines]",
          "4633:       { \"SQLITE_OPEN_MASTER_JOURNAL\", SQLITE_OPEN_MASTER_JOURNAL },",
          "",
          "[Added Lines]",
          "4633:       { \"SQLITE_OPEN_SUPER_JOURNAL\", SQLITE_OPEN_SUPER_JOURNAL },",
          "",
          "---------------"
        ],
        "src/test_multiplex.c||src/test_multiplex.c": [
          "File: src/test_multiplex.c -> src/test_multiplex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:       rc = pSubOpen->pMethods->xFileSize(pSubOpen, &sz64);",
          "546:       if( rc==SQLITE_OK && zName ){",
          "547:         int bExists;",
          "549:           pGroup->bEnabled = 0;",
          "550:         }else",
          "551:         if( sz64==0 ){",
          "",
          "[Removed Lines]",
          "548:         if( flags & SQLITE_OPEN_MASTER_JOURNAL ){",
          "",
          "[Added Lines]",
          "548:         if( flags & SQLITE_OPEN_SUPER_JOURNAL ){",
          "",
          "---------------"
        ],
        "src/test_osinst.c||src/test_osinst.c": [
          "File: src/test_osinst.c -> src/test_osinst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:   zFile = (char *)&p->base.zName[nVfs+1];",
          "741:   pParent->xFullPathname(pParent, zLog, pParent->mxPathname, zFile);",
          "744:   pParent->xDelete(pParent, zFile, 0);",
          "745:   rc = pParent->xOpen(pParent, zFile, p->pLog, flags, &flags);",
          "746:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "743:   flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|SQLITE_OPEN_MASTER_JOURNAL;",
          "",
          "[Added Lines]",
          "743:   flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|SQLITE_OPEN_SUPER_JOURNAL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893:   pVfs->xFullPathname(pVfs, zFile, pVfs->mxPathname, p->zFile);",
          "894:   sqlite3_free(zFile);",
          "897:   rc = pVfs->xOpen(pVfs, p->zFile, p->pFd, flags, &flags);",
          "899:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "896:   flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_MASTER_JOURNAL;",
          "",
          "[Added Lines]",
          "896:   flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_SUPER_JOURNAL;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2751:     int retryCount = 0;",
          "2752:     int nMainFile;",
          "2755:     nMainFile = sqlite3Strlen30(zMainFile);",
          "2759:     do {",
          "2760:       u32 iRandom;",
          "2761:       if( retryCount ){",
          "2762:         if( retryCount>100 ){",
          "2765:           break;",
          "2766:         }else if( retryCount==1 ){",
          "2768:         }",
          "2769:       }",
          "2770:       retryCount++;",
          "2771:       sqlite3_randomness(sizeof(iRandom), &iRandom);",
          "2773:                                (iRandom>>8)&0xffffff, iRandom&0xff);",
          "2779:     }while( rc==SQLITE_OK && res );",
          "2780:     if( rc==SQLITE_OK ){",
          "2783:           SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|",
          "2784:           SQLITE_OPEN_EXCLUSIVE|SQLITE_OPEN_MASTER_JOURNAL, 0",
          "2785:       );",
          "2786:     }",
          "2787:     if( rc!=SQLITE_OK ){",
          "2789:       return rc;",
          "2790:     }",
          "2798:     for(i=0; i<db->nDb; i++){",
          "",
          "[Removed Lines]",
          "2756:     zMaster = sqlite3MPrintf(db, \"%.4c%s%.16c\", 0,zMainFile,0);",
          "2757:     if( zMaster==0 ) return SQLITE_NOMEM_BKPT;",
          "2758:     zMaster += 4;",
          "2763:           sqlite3_log(SQLITE_FULL, \"MJ delete: %s\", zMaster);",
          "2764:           sqlite3OsDelete(pVfs, zMaster, 0);",
          "2767:           sqlite3_log(SQLITE_FULL, \"MJ collide: %s\", zMaster);",
          "2772:       sqlite3_snprintf(13, &zMaster[nMainFile], \"-mj%06X9%02X\",",
          "2776:       assert( zMaster[sqlite3Strlen30(zMaster)-3]=='9' );",
          "2777:       sqlite3FileSuffix3(zMainFile, zMaster);",
          "2778:       rc = sqlite3OsAccess(pVfs, zMaster, SQLITE_ACCESS_EXISTS, &res);",
          "2782:       rc = sqlite3OsOpenMalloc(pVfs, zMaster, &pMaster,",
          "2788:       sqlite3DbFree(db, zMaster-4);",
          "",
          "[Added Lines]",
          "2756:     zSuper = sqlite3MPrintf(db, \"%.4c%s%.16c\", 0,zMainFile,0);",
          "2757:     if( zSuper==0 ) return SQLITE_NOMEM_BKPT;",
          "2758:     zSuper += 4;",
          "2763:           sqlite3_log(SQLITE_FULL, \"MJ delete: %s\", zSuper);",
          "2764:           sqlite3OsDelete(pVfs, zSuper, 0);",
          "2767:           sqlite3_log(SQLITE_FULL, \"MJ collide: %s\", zSuper);",
          "2772:       sqlite3_snprintf(13, &zSuper[nMainFile], \"-mj%06X9%02X\",",
          "2776:       assert( zSuper[sqlite3Strlen30(zSuper)-3]=='9' );",
          "2777:       sqlite3FileSuffix3(zMainFile, zSuper);",
          "2778:       rc = sqlite3OsAccess(pVfs, zSuper, SQLITE_ACCESS_EXISTS, &res);",
          "2782:       rc = sqlite3OsOpenMalloc(pVfs, zSuper, &pMaster,",
          "2788:       sqlite3DbFree(db, zSuper-4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2807:         offset += sqlite3Strlen30(zFile)+1;",
          "2808:         if( rc!=SQLITE_OK ){",
          "2809:           sqlite3OsCloseFree(pMaster);",
          "2812:           return rc;",
          "2813:         }",
          "2814:       }",
          "2815:     }",
          "2820:     if( 0==(sqlite3OsDeviceCharacteristics(pMaster)&SQLITE_IOCAP_SEQUENTIAL)",
          "2821:      && SQLITE_OK!=(rc = sqlite3OsSync(pMaster, SQLITE_SYNC_NORMAL))",
          "2822:     ){",
          "2823:       sqlite3OsCloseFree(pMaster);",
          "2826:       return rc;",
          "2827:     }",
          "2839:     for(i=0; rc==SQLITE_OK && i<db->nDb; i++){",
          "2840:       Btree *pBt = db->aDb[i].pBt;",
          "2841:       if( pBt ){",
          "2843:       }",
          "2844:     }",
          "2845:     sqlite3OsCloseFree(pMaster);",
          "2846:     assert( rc!=SQLITE_BUSY );",
          "2847:     if( rc!=SQLITE_OK ){",
          "2849:       return rc;",
          "2850:     }",
          "2859:     if( rc ){",
          "2860:       return rc;",
          "2861:     }",
          "",
          "[Removed Lines]",
          "2810:           sqlite3OsDelete(pVfs, zMaster, 0);",
          "2811:           sqlite3DbFree(db, zMaster-4);",
          "2824:       sqlite3OsDelete(pVfs, zMaster, 0);",
          "2825:       sqlite3DbFree(db, zMaster-4);",
          "2842:         rc = sqlite3BtreeCommitPhaseOne(pBt, zMaster);",
          "2848:       sqlite3DbFree(db, zMaster-4);",
          "2856:     rc = sqlite3OsDelete(pVfs, zMaster, 1);",
          "2857:     sqlite3DbFree(db, zMaster-4);",
          "2858:     zMaster = 0;",
          "",
          "[Added Lines]",
          "2810:           sqlite3OsDelete(pVfs, zSuper, 0);",
          "2811:           sqlite3DbFree(db, zSuper-4);",
          "2824:       sqlite3OsDelete(pVfs, zSuper, 0);",
          "2825:       sqlite3DbFree(db, zSuper-4);",
          "2842:         rc = sqlite3BtreeCommitPhaseOne(pBt, zSuper);",
          "2848:       sqlite3DbFree(db, zSuper-4);",
          "2856:     rc = sqlite3OsDelete(pVfs, zSuper, 1);",
          "2857:     sqlite3DbFree(db, zSuper-4);",
          "2858:     zSuper = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e827fa27de5aa52bff6067e8051f01c019e5d27",
      "candidate_info": {
        "commit_hash": "6e827fa27de5aa52bff6067e8051f01c019e5d27",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e827fa27de5aa52bff6067e8051f01c019e5d27",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/join.test"
        ],
        "message": "When constructing the virtual MATCH term of the WHERE clause for a virtual table that is in a LEFT JOIN, be sure to set the correct Expr.iRightJoinTable value.  This value does not appear to ever be used, except inside of a single assert().  But it is good to set it correctly, nevertheless.  This fixes ticket [7929c1efb2d67e98], which as far as I can tell is completely harmless.\n\nFossilOrigin-Name: ef604882a275d3d5ebd4d5a08e3fe43e148f169b7d5c3a81464fbe7f54f3582a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fc733328c5914c747e048c830522ec13e433c0a86388bae47b198a3e220c6c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1298:             0, sqlite3ExprDup(db, pRight, 0));",
          "1299:         if( ExprHasProperty(pExpr, EP_FromJoin) && pNewExpr ){",
          "1300:           ExprSetProperty(pNewExpr, EP_FromJoin);",
          "1301:         }",
          "1302:         idxNew = whereClauseInsert(pWC, pNewExpr, TERM_VIRTUAL|TERM_DYNAMIC);",
          "1303:         testcase( idxNew==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1301:           pNewExpr->iRightJoinTable = pExpr->iRightJoinTable;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
          "989: } {11}",
          "991: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: # 2019-12-22 ticket 7929c1efb2d67e98",
          "992: #",
          "993: reset_db",
          "994: do_execsql_test join-23.10 {",
          "995:   CREATE TABLE t0(c0);",
          "996:   INSERT INTO t0(c0) VALUES(123);",
          "997:   CREATE VIEW v0(c0) AS SELECT 0 GROUP BY 1;",
          "998:   SELECT t0.c0, v0.c0, vt0.name",
          "999:    FROM v0, t0 LEFT JOIN pragma_table_info('t0') AS vt0",
          "1000:      ON vt0.name LIKE 'c0'",
          "1001:    WHERE v0.c0 == 0;",
          "1002: } {123 0 c0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68cf0ace3d160c8b3c12ee692c337f0d47e079d7",
      "candidate_info": {
        "commit_hash": "68cf0ace3d160c8b3c12ee692c337f0d47e079d7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68cf0ace3d160c8b3c12ee692c337f0d47e079d7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Revisiting the IN-scan optimization to try to fix it for the corner case where the statistics deceive the query planner into using a scan when an indexed lookup would be better.  This check-in changes the code generation to do the IN-scan using a new OP_SeekScan opcode.  That new opcode is designed to abandon the scan and fall back to a seek if it doesn't find a match quickly enough.  For this work-in-progress check-in, OP_SeekScan is still a no-op and OP_SeekGE still ends up doing all the work.\n\nFossilOrigin-Name: d720b6981eeb0ffdb14494ca63eca298ee724ae4ad4863c7c7cbfdad7fa52519",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43f7ddad800acf40917c5cc3d926640dbec17c34d5f1cbbb74bd80f44eeed0a5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4383:   break;",
          "4384: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4427: case OP_SeekScan: {",
          "4428:   assert( pOp[1].opcode==OP_SeekGE );",
          "4429:   assert( pOp[2].opcode==OP_IdxGT );",
          "4430:   assert( pOp[1].p1==pOp[2].p1 );",
          "4431:   assert( pOp[1].p2==pOp[2].p2 );",
          "4432:   assert( pOp[1].p3==pOp[2].p3 );",
          "4433:   assert( pOp[1].p4.i==pOp[2].p4.i );",
          "4434:   assert( pOp->p1>0 );",
          "4436: }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2564:           WHERETRACE(0x40,",
          "2565:             (\"Scan preferred over IN operator on column %d of \\\"%s\\\" (%d<%d)\\n\",",
          "2566:              saved_nEq, pProbe->zName, M+logK+10, nIn+rLogSize));",
          "2568:         }else{",
          "2569:           WHERETRACE(0x40,",
          "2570:             (\"IN operator preferred on column %d of \\\"%s\\\" (%d>=%d)\\n\",",
          "",
          "[Removed Lines]",
          "2567:           continue;",
          "",
          "[Added Lines]",
          "2567:           pNew->wsFlags |= WHERE_IN_SEEKSCAN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5197:         if( (pLoop->wsFlags & WHERE_CONSTRAINT)!=0",
          "5198:          && (pLoop->wsFlags & (WHERE_COLUMN_RANGE|WHERE_SKIPSCAN))==0",
          "5199:          && (pLoop->wsFlags & WHERE_BIGNULL_SORT)==0",
          "5200:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5201:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5202:         ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5200:          && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1806:       assert( op!=0 );",
          "1807:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1808:       VdbeCoverage(v);",
          "1809:       VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0 ){",
          "1808:         assert( op==OP_SeekGE );",
          "1809:         assert( regBignull==0 );",
          "1810:         sqlite3VdbeAddOp1(v, OP_SeekScan, 10);",
          "1811:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a56fce614ff945827281208358c1864b522bc05",
      "candidate_info": {
        "commit_hash": "1a56fce614ff945827281208358c1864b522bc05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a56fce614ff945827281208358c1864b522bc05",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix an assert() inside of debug-only code that can fail following an OOM.\n\nFossilOrigin-Name: 79da254f41a0d7d5fdc57f0cc40b3560bfcf7f79eed24a9fada1b6b4ca3adb5a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75a0288871ccb2a69a636cbb328fe19045a0d0ef96a193ecd118b9a196784d2d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1521:               sqlite3_str_appendf(&x, \"%d\", v1);",
          "1522:             }else if( pCtx->argc>1 ){",
          "1523:               sqlite3_str_appendf(&x, \"%d..%d\", v1, v1+pCtx->argc-1);",
          "1525:               assert( x.nChar>2 );",
          "1526:               x.nChar -= 2;",
          "1527:               ii++;",
          "",
          "[Removed Lines]",
          "1524:             }else{",
          "",
          "[Added Lines]",
          "1524:             }else if( x.accError==0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}