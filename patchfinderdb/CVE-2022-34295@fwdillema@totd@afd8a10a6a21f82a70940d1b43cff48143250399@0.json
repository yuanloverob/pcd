{
  "cve_id": "CVE-2022-34295",
  "cve_desc": "totd before 1.5.3 does not properly randomize mesg IDs.",
  "repo": "fwdillema/totd",
  "patch_hash": "afd8a10a6a21f82a70940d1b43cff48143250399",
  "patch_info": {
    "commit_hash": "afd8a10a6a21f82a70940d1b43cff48143250399",
    "repo": "fwdillema/totd",
    "commit_url": "https://github.com/fwdillema/totd/commit/afd8a10a6a21f82a70940d1b43cff48143250399",
    "files": [
      "config.log",
      "ne_mesg.c",
      "read_config.c"
    ],
    "message": "Patch provided by Gabor Lencse for generating better randomized mesg IDs.",
    "before_after_code_files": [
      "ne_mesg.c||ne_mesg.c",
      "read_config.c||read_config.c"
    ]
  },
  "patch_diff": {
    "ne_mesg.c||ne_mesg.c": [
      "File: ne_mesg.c -> ne_mesg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: static u_char *dname_redirect (u_char *, u_char *);",
      "19: static u_char *mesg_read_sec (G_List *, u_char *, int, u_char *, int);",
      "33: }",
      "35: int mesg_make_query (u_char *qname, uint16_t qtype, uint16_t qclass,",
      "36:        uint32_t id, int rd, u_char *buf, int buflen) {",
      "",
      "[Removed Lines]",
      "21: uint16_t mesg_id (void) {",
      "22:  static uint16_t id = 0;",
      "24:  if (!id) {",
      "25:   srandom (time (NULL));",
      "26:   id = random ();",
      "27:  }",
      "28:  id++;",
      "30:  if (T.debug > 4)",
      "31:   syslog (LOG_DEBUG, \"mesg_id() = %d\", id);",
      "32:  return id;",
      "",
      "[Added Lines]",
      "36: void make_random_permutation(int start) {",
      "37:         int i, j;",
      "39:         permutation[0] = start;",
      "40:         for (i = 1; i < ARRAY_SIZE; i++) {",
      "42:                 if (j != i) {",
      "43:                   permutation[i] = permutation[j];",
      "44:                 }",
      "45:                 permutation[j] = start + i;",
      "46:         }",
      "47: }",
      "51: uint16_t mesg_id (void) {",
      "53:         static int index;",
      "55:         if (!range) {",
      "58:                 make_random_permutation(LOW_START);",
      "60:         }",
      "62:                 if (range == 1) {",
      "64:                         make_random_permutation(HIGH_START);",
      "65:                 }",
      "66:                 else {",
      "68:                         make_random_permutation(LOW_START);",
      "69:                 }",
      "70:                 index = 0;",
      "71:         }",
      "72:  if (T.debug > 4) {",
      "73:   syslog (LOG_DEBUG, \"mesg_id() = %d\", permutation[index]);",
      "74:         }",
      "75:         return permutation[index++];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:  int i, written_len;",
      "40:  Mesg_Hdr *hdr;",
      "43:   syslog (LOG_DEBUG, \"%s: (qtype: %s, id: %d): start\", fn,",
      "44:    string_rtype (qtype), id);",
      "46:  hdr = (Mesg_Hdr *) buf;",
      "",
      "[Removed Lines]",
      "42:  if (T.debug > 4)",
      "",
      "[Added Lines]",
      "86:  if (T.debug > 4) {",
      "89:         }",
      "",
      "---------------"
    ],
    "read_config.c||read_config.c": [
      "File: read_config.c -> read_config.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     errcnt++;",
      "126:    }",
      "130:     if (i + argcnt-1 > MAXINTERFACES) {",
      "131:     syslog (LOG_ERR, \"line %d: to many interfaces, more than %d\", linenum, MAXINTERFACES);",
      "",
      "[Removed Lines]",
      "128:    for (i = 0; T.iflist[i] && i < MAXINTERFACES; i++);",
      "",
      "[Added Lines]",
      "128:    for (i = 0; T.iflist[i] && i < MAXINTERFACES; i++) {",
      "129:                         };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5df5768b32e3c55d72a1aba9959c970cd50885d",
      "candidate_info": {
        "commit_hash": "c5df5768b32e3c55d72a1aba9959c970cd50885d",
        "repo": "fwdillema/totd",
        "commit_url": "https://github.com/fwdillema/totd/commit/c5df5768b32e3c55d72a1aba9959c970cd50885d",
        "files": [
          "config.log",
          "ne_mesg.c",
          "read_config.c"
        ],
        "message": "Patch provided by Gabor Lencse for generating better randomized mesg IDs.",
        "before_after_code_files": [
          "ne_mesg.c||ne_mesg.c",
          "read_config.c||read_config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ne_mesg.c||ne_mesg.c",
            "read_config.c||read_config.c"
          ],
          "candidate": [
            "ne_mesg.c||ne_mesg.c",
            "read_config.c||read_config.c"
          ]
        }
      },
      "candidate_diff": {
        "ne_mesg.c||ne_mesg.c": [
          "File: ne_mesg.c -> ne_mesg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: static u_char *dname_redirect (u_char *, u_char *);",
          "19: static u_char *mesg_read_sec (G_List *, u_char *, int, u_char *, int);",
          "33: }",
          "35: int mesg_make_query (u_char *qname, uint16_t qtype, uint16_t qclass,",
          "36:        uint32_t id, int rd, u_char *buf, int buflen) {",
          "",
          "[Removed Lines]",
          "21: uint16_t mesg_id (void) {",
          "22:  static uint16_t id = 0;",
          "24:  if (!id) {",
          "25:   srandom (time (NULL));",
          "26:   id = random ();",
          "27:  }",
          "28:  id++;",
          "30:  if (T.debug > 4)",
          "31:   syslog (LOG_DEBUG, \"mesg_id() = %d\", id);",
          "32:  return id;",
          "",
          "[Added Lines]",
          "36: void make_random_permutation(int start) {",
          "37:         int i, j;",
          "39:         permutation[0] = start;",
          "40:         for (i = 1; i < ARRAY_SIZE; i++) {",
          "42:                 if (j != i) {",
          "43:                   permutation[i] = permutation[j];",
          "44:                 }",
          "45:                 permutation[j] = start + i;",
          "46:         }",
          "47: }",
          "51: uint16_t mesg_id (void) {",
          "53:         static int index;",
          "55:         if (!range) {",
          "58:                 make_random_permutation(LOW_START);",
          "60:         }",
          "62:                 if (range == 1) {",
          "64:                         make_random_permutation(HIGH_START);",
          "65:                 }",
          "66:                 else {",
          "68:                         make_random_permutation(LOW_START);",
          "69:                 }",
          "70:                 index = 0;",
          "71:         }",
          "72:  if (T.debug > 4) {",
          "73:   syslog (LOG_DEBUG, \"mesg_id() = %d\", permutation[index]);",
          "74:         }",
          "75:         return permutation[index++];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  int i, written_len;",
          "40:  Mesg_Hdr *hdr;",
          "43:   syslog (LOG_DEBUG, \"%s: (qtype: %s, id: %d): start\", fn,",
          "44:    string_rtype (qtype), id);",
          "46:  hdr = (Mesg_Hdr *) buf;",
          "",
          "[Removed Lines]",
          "42:  if (T.debug > 4)",
          "",
          "[Added Lines]",
          "86:  if (T.debug > 4) {",
          "89:         }",
          "",
          "---------------"
        ],
        "read_config.c||read_config.c": [
          "File: read_config.c -> read_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     errcnt++;",
          "126:    }",
          "130:     if (i + argcnt-1 > MAXINTERFACES) {",
          "131:     syslog (LOG_ERR, \"line %d: to many interfaces, more than %d\", linenum, MAXINTERFACES);",
          "",
          "[Removed Lines]",
          "128:    for (i = 0; T.iflist[i] && i < MAXINTERFACES; i++);",
          "",
          "[Added Lines]",
          "128:    for (i = 0; T.iflist[i] && i < MAXINTERFACES; i++) {",
          "129:                         };",
          "",
          "---------------"
        ]
      }
    }
  ]
}