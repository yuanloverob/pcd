{
  "cve_id": "CVE-2014-8710",
  "cve_desc": "The decompress_sigcomp_message function in epan/sigcomp-udvm.c in the SigComp UDVM dissector in Wireshark 1.10.x before 1.10.11 allows remote attackers to cause a denial of service (buffer over-read and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2bd15c7cefcf87aa6b2d9d53477f0ece897ba620",
  "patch_info": {
    "commit_hash": "2bd15c7cefcf87aa6b2d9d53477f0ece897ba620",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2bd15c7cefcf87aa6b2d9d53477f0ece897ba620",
    "files": [
      "epan/sigcomp-udvm.c"
    ],
    "message": "sigcomp-udvm: fix invalid access\n\nWay back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by\nlimiting the amount of buffer dealt with in the udvm_state_access call (changing\nit from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).\n\nThe very next line however, tries to read the same amount of buffer to display\nto the user - since it seems nobody ever applied a proper fix for the original\ncase, just apply the same workaround to the second call.\n\nBug: 10662\nChange-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b\nReviewed-on: https://code.wireshark.org/review/5124\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
    ]
  },
  "patch_diff": {
    "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
      "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
      "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
      "2710:     n++;",
      "",
      "[Removed Lines]",
      "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, state_minimum_access_length_buff[n]));",
      "",
      "[Added Lines]",
      "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a5ca5c76e199694bba8a21418f52ca0f30322d1",
      "candidate_info": {
        "commit_hash": "4a5ca5c76e199694bba8a21418f52ca0f30322d1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4a5ca5c76e199694bba8a21418f52ca0f30322d1",
        "files": [
          "epan/crypt/airpdcap.c",
          "epan/crypt/airpdcap_debug.h",
          "epan/dissectors/packet-ap1394.c",
          "epan/dissectors/packet-arp.c",
          "epan/dissectors/packet-ber.c",
          "epan/dissectors/packet-btsdp.c",
          "epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-ncp2222.inc",
          "epan/dissectors/packet-rtmpt.c",
          "epan/dissectors/packet-sigcomp.c",
          "epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ubertooth.c",
          "epan/dissectors/packet-yami.c",
          "epan/sigcomp-udvm.c",
          "epan/sigcomp_state_hdlr.c",
          "epan/to_str.c",
          "epan/to_str.h",
          "ui/gtk/lbm_stream_dlg.c",
          "ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/mcast_stream.c",
          "ui/qt/lbm_stream_dialog.cpp",
          "ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/uat_dialog.cpp"
        ],
        "message": "bytes_to_ep_str -> bytes_to_str\n\nChange-Id: Ifcda8328dedec0ef4104c3a124d6246f99493750\nReviewed-on: https://code.wireshark.org/review/6389\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/crypt/airpdcap.c||epan/crypt/airpdcap.c",
          "epan/crypt/airpdcap_debug.h||epan/crypt/airpdcap_debug.h",
          "epan/dissectors/packet-ap1394.c||epan/dissectors/packet-ap1394.c",
          "epan/dissectors/packet-arp.c||epan/dissectors/packet-arp.c",
          "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c",
          "epan/dissectors/packet-btsdp.c||epan/dissectors/packet-btsdp.c",
          "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c",
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc",
          "epan/dissectors/packet-rtmpt.c||epan/dissectors/packet-rtmpt.c",
          "epan/dissectors/packet-sigcomp.c||epan/dissectors/packet-sigcomp.c",
          "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c",
          "epan/dissectors/packet-ubertooth.c||epan/dissectors/packet-ubertooth.c",
          "epan/dissectors/packet-yami.c||epan/dissectors/packet-yami.c",
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c",
          "epan/sigcomp_state_hdlr.c||epan/sigcomp_state_hdlr.c",
          "epan/to_str.c||epan/to_str.c",
          "epan/to_str.h||epan/to_str.h",
          "ui/gtk/lbm_stream_dlg.c||ui/gtk/lbm_stream_dlg.c",
          "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c",
          "ui/gtk/mcast_stream.c||ui/gtk/mcast_stream.c",
          "ui/qt/lbm_stream_dialog.cpp||ui/qt/lbm_stream_dialog.cpp",
          "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp",
          "ui/qt/uat_dialog.cpp||ui/qt/uat_dialog.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ],
          "candidate": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/crypt/airpdcap.c||epan/crypt/airpdcap.c": [
          "File: epan/crypt/airpdcap.c -> epan/crypt/airpdcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1835: decryption_key_t*",
          "1836: parse_key_string(gchar* input_string, guint8 key_type)",
          "1837: {",
          "1839:     gchar *ssid;",
          "1841:     GString    *key_string = NULL;",
          "",
          "[Removed Lines]",
          "1838:     gchar *key;",
          "",
          "[Added Lines]",
          "1838:     gchar *key, *tmp_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1874:            dk->type = AIRPDCAP_KEY_TYPE_WEP;",
          "1878:            g_string_ascii_down(dk->key);",
          "1879:            dk->bits = key_ba->len * 8;",
          "1880:            dk->ssid = NULL;",
          "1882:            g_byte_array_free(key_ba, TRUE);",
          "1883:            return dk;",
          "1884:        }",
          "",
          "[Removed Lines]",
          "1877:            dk->key  = g_string_new(bytes_to_ep_str(key_ba->data, key_ba->len));",
          "",
          "[Added Lines]",
          "1877:            tmp_str = bytes_to_str(NULL, key_ba->data, key_ba->len);",
          "1878:            dk->key  = g_string_new(tmp_str);",
          "1883:            wmem_free(NULL, tmp_str);",
          "",
          "---------------"
        ],
        "epan/crypt/airpdcap_debug.h||epan/crypt/airpdcap_debug.h": [
          "File: epan/crypt/airpdcap_debug.h -> epan/crypt/airpdcap_debug.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: #endif",
          "88: #endif",
          "",
          "[Removed Lines]",
          "90: #define DEBUG_DUMP(x,y,z) g_warning(\"%s: %s\", x, bytes_to_ep_str(y, (z)))",
          "",
          "[Added Lines]",
          "90: #define DEBUG_DUMP(x,y,z) \\",
          "91:     { \\",
          "92:     char* tmp_str = (char*)bytes_to_str(NULL, y, (z)); \\",
          "93:     g_warning(\"%s: %s\", x, ) \\",
          "94:     wmem_free(NULL, tmp_str); \\",
          "95:     }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ap1394.c||epan/dissectors/packet-ap1394.c": [
          "File: epan/dissectors/packet-ap1394.c -> epan/dissectors/packet-ap1394.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: {",
          "67:   proto_item *ti;",
          "68:   proto_tree *fh_tree = NULL;",
          "70:   guint16    etype;",
          "71:   tvbuff_t *next_tvb;",
          "73:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"IP/IEEE1394\");",
          "74:   col_clear(pinfo->cinfo, COL_INFO);",
          "77:   TVB_SET_ADDRESS(&pinfo->dl_src,   AT_EUI64, tvb, 8, 8);",
          "78:   TVB_SET_ADDRESS(&pinfo->src,      AT_EUI64, tvb, 8, 8);",
          "80:   TVB_SET_ADDRESS(&pinfo->dl_dst,   AT_EUI64, tvb, 0, 8);",
          "81:   TVB_SET_ADDRESS(&pinfo->dst,      AT_EUI64, tvb, 0, 8);",
          "83:   if (tree) {",
          "84:     ti = proto_tree_add_protocol_format(tree, proto_ap1394, tvb, 0, 18,",
          "85:                 \"Apple IP-over-IEEE 1394, Src: %s, Dst: %s\",",
          "87:     fh_tree = proto_item_add_subtree(ti, ett_ap1394);",
          "88:     proto_tree_add_item(fh_tree, hf_ap1394_dst, tvb, 0, 8, ENC_NA);",
          "89:     proto_tree_add_item(fh_tree, hf_ap1394_src, tvb, 8, 8, ENC_NA);",
          "",
          "[Removed Lines]",
          "69:   const guint8 *src_addr, *dst_addr;",
          "76:   src_addr=tvb_get_ptr(tvb, 8, 8);",
          "79:   dst_addr=tvb_get_ptr(tvb, 0, 8);",
          "86:                 bytes_to_ep_str(src_addr, 8), bytes_to_ep_str(dst_addr, 8));",
          "",
          "[Added Lines]",
          "83:                 address_to_str(wmem_packet_scope(), &pinfo->src), address_to_str(wmem_packet_scope(), &pinfo->dst));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-arp.c||epan/dissectors/packet-arp.c": [
          "File: epan/dissectors/packet-arp.c -> epan/dissectors/packet-arp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     return address_to_str(wmem_packet_scope(), &addr);",
          "398:     }",
          "399:   }",
          "401: }",
          "403: #define MAX_E164_STR_LEN                20",
          "",
          "[Removed Lines]",
          "400:   return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "400:   return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   }",
          "436: }",
          "",
          "[Removed Lines]",
          "434:     return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "434:     return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456: }",
          "458: const value_string arp_hrd_vals[] = {",
          "",
          "[Removed Lines]",
          "455:   return bytes_to_ep_str(ad, ad_len);",
          "",
          "[Added Lines]",
          "455:   return bytes_to_str(wmem_packet_scope(), ad, ad_len);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ber.c||epan/dissectors/packet-ber.c": [
          "File: epan/dissectors/packet-ber.c -> epan/dissectors/packet-ber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3964:             if (bitstring[byteno]) {",
          "3965:                 expert_add_info_format(",
          "3966:                     actx->pinfo, item, &ei_ber_bits_unknown,",
          "3968:                 break;",
          "3969:             }",
          "3970:         }",
          "",
          "[Removed Lines]",
          "3967:                     \"Unknown bit(s): 0x%s\", bytes_to_ep_str(bitstring, len));",
          "",
          "[Added Lines]",
          "3967:                     \"Unknown bit(s): 0x%s\", bytes_to_str(wmem_packet_scope(), bitstring, len));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btsdp.c||epan/dissectors/packet-btsdp.c": [
          "File: epan/dissectors/packet-btsdp.c -> epan/dissectors/packet-btsdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "910:             i_uuid += 1;",
          "911:         }",
          "914:     }",
          "915: }",
          "",
          "[Removed Lines]",
          "913:         return bytes_to_ep_str(uuid->data, uuid->size);",
          "",
          "[Added Lines]",
          "913:         return bytes_to_str(wmem_packet_scope(), uuid->data, uuid->size);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isakmp.c||epan/dissectors/packet-isakmp.c": [
          "File: epan/dissectors/packet-isakmp.c -> epan/dissectors/packet-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4739:         if (tvb_memeql(tvb, offset, md, icd_len) == 0) {",
          "4740:           proto_item_append_text(icd_item, \"[correct]\");",
          "4741:         } else {",
          "4743:           expert_add_info(pinfo, icd_item, &ei_isakmp_ikev2_integrity_checksum);",
          "4744:         }",
          "4745:         gcry_md_close(md_hd);",
          "",
          "[Removed Lines]",
          "4742:           proto_item_append_text(icd_item, \"[incorrect, should be %s]\", bytes_to_ep_str(md, icd_len));",
          "",
          "[Added Lines]",
          "4742:           proto_item_append_text(icd_item, \"[incorrect, should be %s]\", bytes_to_str(wmem_packet_scope(), md, icd_len));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2782:                 }",
          "2783:             case 21:",
          "2786:                 break;",
          "2788:                 g_snprintf(buffer, (gulong) buffer_size, \"Unsupported Expert Type\");",
          "",
          "[Removed Lines]",
          "2785:                 g_snprintf(buffer, (gulong) buffer_size, \"%s\", bytes_to_ep_str(get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer))));",
          "",
          "[Added Lines]",
          "2785:                 g_snprintf(buffer, (gulong) buffer_size, \"%s\", bytes_to_str(wmem_packet_scope(), get_finfo_value_string(PTREE_FINFO(tree_pointer)), get_finfo_length(PTREE_FINFO(tree_pointer))));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7748:                         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "7749:                                         (const gchar*) ncp_rec->req_info_str->first_string,",
          "7750:                                         byte_string);",
          "",
          "[Removed Lines]",
          "7747:                         byte_string = bytes_to_ep_str(get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "[Added Lines]",
          "7747:                         byte_string = bytes_to_str(wmem_packet_scope(), get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7782:                         if (info_type == 1)",
          "7785:                             col_append_fstr(pinfo->cinfo, COL_INFO,",
          "7786:                                             (const gchar*) ncp_rec->req_info_str->repeat_string,",
          "7787:                                             byte_string);",
          "",
          "[Removed Lines]",
          "7784:                             byte_string = bytes_to_ep_str(get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "[Added Lines]",
          "7784:                             byte_string = bytes_to_str(wmem_packet_scope(), get_finfo_value_string(finfo), get_finfo_length(finfo));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtmpt.c||epan/dissectors/packet-rtmpt.c": [
          "File: epan/dissectors/packet-rtmpt.c -> epan/dissectors/packet-rtmpt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1530:                         iValueOffset += iValueLength;",
          "1531:                         iByteArrayValue = (guint8 *)tvb_memdup(wmem_packet_scope(), tvb, iValueOffset, iArrayLength);",
          "1532:                         proto_tree_add_bytes(val_tree, hf_amf_bytearray, tvb, iValueOffset, iArrayLength, iByteArrayValue);",
          "1534:                         if (parent_ti != NULL)",
          "1536:                 } else {",
          "1538:                         proto_tree_add_uint(val_tree, hf_amf_object_reference, tvb, iValueOffset, iValueLength, iIntegerValue >> 1);",
          "",
          "[Removed Lines]",
          "1533:                         proto_item_append_text(ti, \" %s\", bytes_to_ep_str(iByteArrayValue, iArrayLength));",
          "1535:                                 proto_item_append_text(parent_ti, \" %s\", bytes_to_ep_str(iByteArrayValue, iArrayLength));",
          "",
          "[Added Lines]",
          "1533:                         proto_item_append_text(ti, \" %s\", bytes_to_str(wmem_packet_scope(), iByteArrayValue, iArrayLength));",
          "1535:                                 proto_item_append_text(parent_ti, \" %s\", bytes_to_str(wmem_packet_scope(), iByteArrayValue, iArrayLength));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sigcomp.c||epan/dissectors/packet-sigcomp.c": [
          "File: epan/dissectors/packet-sigcomp.c -> epan/dissectors/packet-sigcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:             offset = offset + len;",
          "691:         }",
          "692:         tvb_memcpy(tvb, partial_state, offset, partial_state_len);",
          "694:         proto_tree_add_string(sigcomp_tree,hf_sigcomp_partial_state,",
          "695:             tvb, offset, partial_state_len, partial_state_str);",
          "696:         offset = offset + partial_state_len;",
          "",
          "[Removed Lines]",
          "693:         partial_state_str = bytes_to_ep_str(partial_state, partial_state_len);",
          "",
          "[Added Lines]",
          "693:         partial_state_str = bytes_to_str(wmem_packet_scope(), partial_state, partial_state_len);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ssl-utils.c||epan/dissectors/packet-ssl-utils.c": [
          "File: epan/dissectors/packet-ssl-utils.c -> epan/dissectors/packet-ssl-utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3603:     static char               buf_name[256];",
          "3604:     static char               buf_email[128];",
          "3605:     unsigned char             buf_keyid[32];",
          "3607:     gnutls_pkcs12_t       ssl_p12  = NULL;",
          "3608:     gnutls_x509_crt_t     ssl_cert = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3606:     char                     *tmp_str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3726:                     if (ret < 0) { g_strlcpy(buf_keyid, \"<ERROR>\", 32); }",
          "3728:                     private_key->x509_cert = ssl_cert;",
          "3730:                     break;",
          "3732:                 case GNUTLS_BAG_PKCS8_KEY:",
          "",
          "[Removed Lines]",
          "3729:                     ssl_debug_printf( \"Certificate imported: %s <%s>, KeyID %s\\n\", buf_name, buf_email, bytes_to_ep_str(buf_keyid, (int) buf_len));",
          "",
          "[Added Lines]",
          "3730:                     tmp_str = bytes_to_str(NULL, buf_keyid, (int) buf_len);",
          "3731:                     ssl_debug_printf( \"Certificate imported: %s <%s>, KeyID %s\\n\", buf_name, buf_email, tmp_str);",
          "3732:                     wmem_free(NULL, tmp_str);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ubertooth.c||epan/dissectors/packet-ubertooth.c": [
          "File: epan/dissectors/packet-ubertooth.c -> epan/dissectors/packet-ubertooth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1781:         proto_tree_add_bytes(main_tree, hf_serial_number, tvb,",
          "1782:                 offset, 16, (guint8 *) serial);",
          "1783:         col_append_fstr(pinfo->cinfo, COL_INFO, \" = %s\",",
          "1785:         offset += 16;",
          "1787:         break;",
          "",
          "[Removed Lines]",
          "1784:                 bytes_to_ep_str((guint8 *) serial, 16));",
          "",
          "[Added Lines]",
          "1784:                 bytes_to_str(wmem_packet_scope(), (guint8 *) serial, 16));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-yami.c||epan/dissectors/packet-yami.c": [
          "File: epan/dissectors/packet-yami.c -> epan/dissectors/packet-yami.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:    offset += 4;",
          "233:    val = tvb_get_ptr(tvb, offset, val_len);",
          "236:    proto_item_append_text(ti, \", Type: binary, Value: %s\", repr);",
          "237:    offset += (val_len + 3) & ~3;",
          "",
          "[Removed Lines]",
          "234:    repr = bytes_to_ep_str(val, val_len);",
          "",
          "[Added Lines]",
          "234:    repr = bytes_to_str(wmem_packet_scope(), val, val_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     offset += 4;",
          "397:     val = tvb_get_ptr(tvb, offset, val_len);",
          "400:     proto_item_append_text(ti, \"%s, \", repr);",
          "401:     offset += (val_len + 3) & ~3;",
          "",
          "[Removed Lines]",
          "398:     repr = bytes_to_ep_str(val, val_len);",
          "",
          "[Added Lines]",
          "398:     repr = bytes_to_str(wmem_packet_scope(), val, val_len);",
          "",
          "---------------"
        ],
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:   if (print_level_2 ){",
          "893:    proto_tree_add_text(udvm_tree, message_tvb, 0, -1,",
          "894:      \"Calculated SHA-1: %s\",",
          "896:   }",
          "898:   current_address = next_operand_address;",
          "",
          "[Removed Lines]",
          "895:      bytes_to_ep_str(sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "[Added Lines]",
          "895:      bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2695:     sha1_update( &ctx, (guint8 *) sha1buff, state_length_buff[n] + 8);",
          "2696:     sha1_finish( &ctx, sha1_digest_buf );",
          "2697:     if (print_level_3 ){",
          "2700:     }",
          "",
          "[Removed Lines]",
          "2698:      proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,\"SHA1 digest %s\",bytes_to_ep_str(sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "[Added Lines]",
          "2698:      proto_tree_add_text(udvm_tree, bytecode_tvb, 0, -1,\"SHA1 digest %s\", bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_BUFFER_SIZE));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2710:     n++;",
          "",
          "[Removed Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "[Added Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(wmem_packet_scope(), sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ],
        "epan/sigcomp_state_hdlr.c||epan/sigcomp_state_hdlr.c": [
          "File: epan/sigcomp_state_hdlr.c -> epan/sigcomp_state_hdlr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:  sip_sdp_buff = (guint8 *)g_malloc(SIP_SDP_STATE_LENGTH + 8);",
          "",
          "[Removed Lines]",
          "630:  partial_state_str = bytes_to_ep_str(sip_sdp_state_identifier, 6);",
          "",
          "[Added Lines]",
          "630:  partial_state_str = bytes_to_str(NULL, sip_sdp_state_identifier, 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638:  memcpy(sip_sdp_buff+8, sip_sdp_static_dictionaty_for_sigcomp, SIP_SDP_STATE_LENGTH);",
          "640:  g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), sip_sdp_buff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "641:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:  presence_buff = (guint8 *)g_malloc(PRESENCE_STATE_LENGTH + 8);",
          "650:  memset(presence_buff, 0, 8);",
          "651:  presence_buff[0] = PRESENCE_STATE_LENGTH >> 8;",
          "",
          "[Removed Lines]",
          "648:  partial_state_str = bytes_to_ep_str(presence_state_identifier, 6);",
          "",
          "[Added Lines]",
          "649:  partial_state_str = bytes_to_str(NULL, presence_state_identifier, 6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "653:  memcpy(presence_buff+8, presence_static_dictionary_for_sigcomp, PRESENCE_STATE_LENGTH);",
          "655:  g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), presence_buff);",
          "656: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "657:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "694:   partial_state[n] = buff[p_id_start + n];",
          "695:   n++;",
          "696:  }",
          "698:  proto_tree_add_text(tree,tvb, 0, -1,\"### Accessing state ###\");",
          "699:  proto_tree_add_string(tree,hf_id, tvb, 0, 0, partial_state_str);",
          "",
          "[Removed Lines]",
          "697:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "699:  partial_state_str = bytes_to_str(wmem_packet_scope(), partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "822:   partial_state[i] = state_identifier[i];",
          "823:   i++;",
          "824:  }",
          "827:  dummy_buff = (gchar *)g_hash_table_lookup(state_buffer_table, partial_state_str);",
          "828:  if ( dummy_buff == NULL ){",
          "",
          "[Removed Lines]",
          "825:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "827:  partial_state_str = bytes_to_str(NULL, partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "833:   g_free(state_buff);",
          "835:  }",
          "836: }",
          "838: #if 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "851:   partial_state[i] = buff[p_id_start + i];",
          "852:   i++;",
          "853:  }",
          "",
          "[Removed Lines]",
          "854:  partial_state_str = bytes_to_ep_str(partial_state, p_id_length);",
          "",
          "[Added Lines]",
          "857:  partial_state_str = bytes_to_str(NULL, partial_state, p_id_length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "863:   g_hash_table_remove (state_buffer_table, partial_state_str);",
          "864:   g_free(dummy_buff);",
          "865:  }",
          "866: }",
          "867: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:  wmem_free(NULL, partial_state_str);",
          "",
          "---------------"
        ],
        "epan/to_str.c||epan/to_str.c": [
          "File: epan/to_str.c -> epan/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:  return buf;",
          "200: }",
          "229: char *",
          "230: bytes_to_str(wmem_allocator_t *allocator, const guint8 *bd, int bd_len)",
          "231: {",
          "",
          "[Removed Lines]",
          "202: gchar *",
          "203: bytes_to_ep_str(const guint8 *bd, int bd_len)",
          "204: {",
          "205:  gchar *cur;",
          "206:  gchar *cur_ptr;",
          "207:  int truncated = 0;",
          "209:  if (!bd)",
          "210:   REPORT_DISSECTOR_BUG(\"Null pointer passed to bytes_to_ep_str()\");",
          "212:  cur=(gchar *)ep_alloc(MAX_BYTE_STR_LEN+3+1);",
          "213:  if (bd_len <= 0) { cur[0] = '\\0'; return cur; }",
          "216:   truncated = 1;",
          "217:   bd_len = MAX_BYTE_STR_LEN/2;",
          "218:  }",
          "222:  if (truncated)",
          "226:  return cur;",
          "227: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/to_str.h||epan/to_str.h": [
          "File: epan/to_str.h -> epan/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: WS_DLL_PUBLIC char *bytes_to_str(wmem_allocator_t *allocator, const guint8 *bd, int bd_len);",
          "",
          "[Removed Lines]",
          "127: WS_DLL_PUBLIC gchar *bytes_to_ep_str(const guint8 *bd, int bd_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/gtk/lbm_stream_dlg.c||ui/gtk/lbm_stream_dlg.c": [
          "File: ui/gtk/lbm_stream_dlg.c -> ui/gtk/lbm_stream_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: static lbmc_stream_dlg_info_t * global_stream_dialog_info = NULL;",
          "86: {",
          "87:     gchar * buf = NULL;",
          "88:     char* addr_str;",
          "90:     if (endpoint->type == lbm_uim_instance_stream)",
          "91:     {",
          "93:     }",
          "94:     else",
          "95:     {",
          "96:         addr_str = (char*)address_to_str(NULL, &(endpoint->stream_info.dest.addr));",
          "98:             \"%\" G_GUINT32_FORMAT \":%s:%\" G_GUINT16_FORMAT,",
          "99:             endpoint->stream_info.dest.domain,",
          "100:             addr_str,",
          "",
          "[Removed Lines]",
          "85: static gchar * lbmc_stream_dlg_format_endpoint_ep(const lbm_uim_stream_endpoint_t * endpoint)",
          "92:         buf = bytes_to_ep_str(endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst));",
          "97:         buf = ep_strdup_printf(",
          "",
          "[Added Lines]",
          "85: static gchar * lbmc_stream_dlg_format_endpoint(wmem_allocator_t *allocator, const lbm_uim_stream_endpoint_t * endpoint)",
          "92:         buf = bytes_to_str(allocator, endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst));",
          "97:         buf = wmem_strdup_printf(allocator,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:         stream = (lbmc_stream_dlg_stream_entry_t *)g_malloc(sizeof(lbmc_stream_dlg_stream_entry_t));",
          "572:         stream->channel = tapinfo->channel;",
          "575:         stream->first_frame = (guint32)(~0);",
          "576:         stream->last_frame = 0;",
          "577:         stream->messages = 0;",
          "",
          "[Removed Lines]",
          "573:         stream->endpoint_a = wmem_strdup(wmem_file_scope(), lbmc_stream_dlg_format_endpoint_ep(&(tapinfo->endpoint_a)));",
          "574:         stream->endpoint_b = wmem_strdup(wmem_file_scope(), lbmc_stream_dlg_format_endpoint_ep(&(tapinfo->endpoint_b)));",
          "",
          "[Added Lines]",
          "573:         stream->endpoint_a = lbmc_stream_dlg_format_endpoint(wmem_file_scope(), &(tapinfo->endpoint_a));",
          "574:         stream->endpoint_b = lbmc_stream_dlg_format_endpoint(wmem_file_scope(), &(tapinfo->endpoint_b));",
          "",
          "---------------"
        ],
        "ui/gtk/lbm_uimflow_dlg.c||ui/gtk/lbm_uimflow_dlg.c": [
          "File: ui/gtk/lbm_uimflow_dlg.c -> ui/gtk/lbm_uimflow_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     lbm_uim_stream_endpoint_t epa;",
          "95:     lbm_uim_stream_endpoint_t epb;",
          "96:     seq_analysis_item_t * item;",
          "99:     gboolean swap_endpoints = FALSE;",
          "100:     int rc;",
          "",
          "[Removed Lines]",
          "97:     gchar * ctxinst1 = NULL;",
          "98:     gchar * ctxinst2 = NULL;",
          "",
          "[Added Lines]",
          "97:     gchar * ctxinst1;",
          "98:     gchar * ctxinst2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:     }",
          "180:     if (epa.type == lbm_uim_instance_stream)",
          "181:     {",
          "184:         item->comment = g_strdup_printf(\"%s <-> %s [%\" G_GUINT64_FORMAT \"]\",",
          "185:             ctxinst1,",
          "186:             ctxinst2,",
          "",
          "[Removed Lines]",
          "182:         ctxinst1 = bytes_to_ep_str(epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "183:         ctxinst2 = bytes_to_ep_str(epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "[Added Lines]",
          "182:         ctxinst1 = bytes_to_str(pinfo->pool, epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "183:         ctxinst2 = bytes_to_str(pinfo->pool, epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "---------------"
        ],
        "ui/gtk/mcast_stream.c||ui/gtk/mcast_stream.c": [
          "File: ui/gtk/mcast_stream.c -> ui/gtk/mcast_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     if ((pinfo->dl_dst.type != AT_ETHER) ||",
          "180:         return 0;",
          "",
          "[Removed Lines]",
          "178:         ((g_ascii_strncasecmp(\"01005E\", bytes_to_ep_str((const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 6) != 0) &&",
          "179:          (g_ascii_strncasecmp(\"3333\", bytes_to_ep_str((const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 4) != 0)) )",
          "",
          "[Added Lines]",
          "178:         ((g_ascii_strncasecmp(\"01005E\", bytes_to_str(pinfo->pool, (const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 6) != 0) &&",
          "179:          (g_ascii_strncasecmp(\"3333\", bytes_to_str(pinfo->pool, (const guint8 *)pinfo->dl_dst.data, pinfo->dl_dst.len), 4) != 0)) )",
          "",
          "---------------"
        ],
        "ui/qt/lbm_stream_dialog.cpp||ui/qt/lbm_stream_dialog.cpp": [
          "File: ui/qt/lbm_stream_dialog.cpp -> ui/qt/lbm_stream_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: {",
          "194:     if (endpoint->type == lbm_uim_instance_stream)",
          "195:     {",
          "197:     }",
          "198:     else",
          "199:     {",
          "",
          "[Removed Lines]",
          "196:         return QString(bytes_to_ep_str(endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst)));",
          "",
          "[Added Lines]",
          "196:         return QString(bytes_to_str(pinfo->pool, endpoint->stream_info.ctxinst.ctxinst, sizeof(endpoint->stream_info.ctxinst.ctxinst)));",
          "",
          "---------------"
        ],
        "ui/qt/lbm_uimflow_dialog.cpp||ui/qt/lbm_uimflow_dialog.cpp": [
          "File: ui/qt/lbm_uimflow_dialog.cpp -> ui/qt/lbm_uimflow_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     }",
          "134:     if (epa.type == lbm_uim_instance_stream)",
          "135:     {",
          "138:         item->comment = g_strdup_printf(\"%s <-> %s [%\" G_GUINT64_FORMAT \"]\",",
          "139:             ctxinst1,",
          "140:             ctxinst2,",
          "",
          "[Removed Lines]",
          "136:         ctxinst1 = bytes_to_ep_str(epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "137:         ctxinst2 = bytes_to_ep_str(epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "[Added Lines]",
          "136:         ctxinst1 = bytes_to_str(pinfo->pool, epa.stream_info.ctxinst.ctxinst, sizeof(epa.stream_info.ctxinst.ctxinst));",
          "137:         ctxinst2 = bytes_to_str(pinfo->pool, epb.stream_info.ctxinst.ctxinst, sizeof(epb.stream_info.ctxinst.ctxinst));",
          "",
          "---------------"
        ],
        "ui/qt/uat_dialog.cpp||ui/qt/uat_dialog.cpp": [
          "File: ui/qt/uat_dialog.cpp -> ui/qt/uat_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:         string_rep = str;",
          "174:         break;",
          "175:     case PT_TXTMOD_HEXBYTES: {",
          "177:         break;",
          "178:     }",
          "179:     default:",
          "",
          "[Removed Lines]",
          "176:         string_rep = bytes_to_ep_str((const guint8 *) str, length);",
          "",
          "[Added Lines]",
          "176:         {",
          "177:             char* temp_str = bytes_to_str(NULL, (const guint8 *) str, length);",
          "178:             QString qstr(temp_str);",
          "179:             string_rep = qstr;",
          "180:             wmem_free(NULL, temp_str);",
          "181:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f8367d1a569a10778628981da8a877a1f6f9c3b",
      "candidate_info": {
        "commit_hash": "9f8367d1a569a10778628981da8a877a1f6f9c3b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9f8367d1a569a10778628981da8a877a1f6f9c3b",
        "files": [
          "epan/sigcomp-udvm.c"
        ],
        "message": "sigcomp-udvm: fix invalid access\n\nWay back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by\nlimiting the amount of buffer dealt with in the udvm_state_access call (changing\nit from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).\n\nThe very next line however, tries to read the same amount of buffer to display\nto the user - since it seems nobody ever applied a proper fix for the original\ncase, just apply the same workaround to the second call.\n\nBug: 10662\nChange-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b\nReviewed-on: https://code.wireshark.org/review/5125\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-on: https://code.wireshark.org/review/5331\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ],
          "candidate": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2710:     n++;",
          "",
          "[Removed Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, state_minimum_access_length_buff[n]));",
          "",
          "[Added Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "254436c43bdf59250780ff51fe07d1a8d0794ccd",
      "candidate_info": {
        "commit_hash": "254436c43bdf59250780ff51fe07d1a8d0794ccd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/254436c43bdf59250780ff51fe07d1a8d0794ccd",
        "files": [
          "epan/sigcomp-udvm.c"
        ],
        "message": "sigcomp-udvm: fix invalid access\n\nWay back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by\nlimiting the amount of buffer dealt with in the udvm_state_access call (changing\nit from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).\n\nThe very next line however, tries to read the same amount of buffer to display\nto the user - since it seems nobody ever applied a proper fix for the original\ncase, just apply the same workaround to the second call.\n\nBug: 10662\nChange-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b\nReviewed-on: https://code.wireshark.org/review/5125\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ],
          "candidate": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2710:     n++;",
          "",
          "[Removed Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, state_minimum_access_length_buff[n]));",
          "",
          "[Added Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_ep_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63b971cd752ac9cdb48d297a48e86851ef7e4ac1",
      "candidate_info": {
        "commit_hash": "63b971cd752ac9cdb48d297a48e86851ef7e4ac1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/63b971cd752ac9cdb48d297a48e86851ef7e4ac1",
        "files": [
          "epan/sigcomp-udvm.c"
        ],
        "message": "sigcomp-udvm: fix invalid access\n\nWay back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by\nlimiting the amount of buffer dealt with in the udvm_state_access call (changing\nit from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).\n\nThe very next line however, tries to read the same amount of buffer to display\nto the user - since it seems nobody ever applied a proper fix for the original\ncase, just apply the same workaround to the second call.\n\nConflicts:\n\tepan/sigcomp-udvm.c\n\nBug: 10662\nChange-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b\nReviewed-on: https://code.wireshark.org/review/5125\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-on: https://code.wireshark.org/review/5331\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/5355",
        "before_after_code_files": [
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ],
          "candidate": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2707:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2709:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2712:     n++;",
          "",
          "[Removed Lines]",
          "2710:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, state_minimum_access_length_buff[n]));",
          "",
          "[Added Lines]",
          "2710:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a2e8ead5c93e5af78881fb1c0e1ac4d648e2d58",
      "candidate_info": {
        "commit_hash": "9a2e8ead5c93e5af78881fb1c0e1ac4d648e2d58",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9a2e8ead5c93e5af78881fb1c0e1ac4d648e2d58",
        "files": [
          "epan/sigcomp-udvm.c"
        ],
        "message": "sigcomp-udvm: fix invalid access\n\nWay back in 2006, svn r20041 (now gd408f2f6fc) worked around a problem by\nlimiting the amount of buffer dealt with in the udvm_state_access call (changing\nit from state_minimum_access_length_buff[n] to STATE_MIN_ACCESS_LEN).\n\nThe very next line however, tries to read the same amount of buffer to display\nto the user - since it seems nobody ever applied a proper fix for the original\ncase, just apply the same workaround to the second call.\n\nBug: 10662\nChange-Id: I32c81ee2a8eb7b30ff7ab1fbbb6ea5f206385d4b\nReviewed-on: https://code.wireshark.org/review/5125\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 254436c43bdf59250780ff51fe07d1a8d0794ccd)\nConflicts: epan/sigcomp-udvm.c\nReviewed-on: https://code.wireshark.org/review/5177\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ],
          "candidate": [
            "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/sigcomp-udvm.c||epan/sigcomp-udvm.c": [
          "File: epan/sigcomp-udvm.c -> epan/sigcomp-udvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2705:     udvm_state_create(sha1buff, sha1_digest_buf, STATE_MIN_ACCESS_LEN);",
          "2707:     proto_tree_add_text(udvm_tree,bytecode_tvb, 0, -1,\"### Creating state ###\");",
          "2710:     n++;",
          "",
          "[Removed Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, state_minimum_access_length_buff[n]));",
          "",
          "[Added Lines]",
          "2708:     proto_tree_add_string(udvm_tree,hf_id, bytecode_tvb, 0, 0, bytes_to_str(sha1_digest_buf, STATE_MIN_ACCESS_LEN));",
          "",
          "---------------"
        ]
      }
    }
  ]
}