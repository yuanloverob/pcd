{
  "cve_id": "CVE-2018-7247",
  "cve_desc": "An issue was discovered in pixHtmlViewer in prog/htmlviewer.c in Leptonica before 1.75.3. Unsanitized input (rootname) can overflow a buffer, leading potentially to arbitrary code execution or possibly unspecified other impact.",
  "repo": "DanBloomberg/leptonica",
  "patch_hash": "c1079bb8e77cdd426759e466729917ca37a3ed9f",
  "patch_info": {
    "commit_hash": "c1079bb8e77cdd426759e466729917ca37a3ed9f",
    "repo": "DanBloomberg/leptonica",
    "commit_url": "https://github.com/DanBloomberg/leptonica/commit/c1079bb8e77cdd426759e466729917ca37a3ed9f",
    "files": [
      "prog/htmlviewer.c"
    ],
    "message": "prog/htmlviewer: Catch unbound memory access (CID 1386222)\n\nrootname can have any size, so limit the amount of copied bytes.\n\nSigned-off-by: Stefan Weil <sw@weilnetz.de>",
    "before_after_code_files": [
      "prog/htmlviewer.c||prog/htmlviewer.c"
    ]
  },
  "patch_diff": {
    "prog/htmlviewer.c||prog/htmlviewer.c": [
      "File: prog/htmlviewer.c -> prog/htmlviewer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:         return ERROR_INT(\"safiles not made\", procName, 1);",
      "175:     mainname = stringNew(charbuf);",
      "177:     linkname = stringNew(charbuf);",
      "178:     linknameshort = stringJoin(rootname, \"-links.html\");",
      "",
      "[Removed Lines]",
      "174:     sprintf(charbuf, \"%s/%s.html\", dirout, rootname);",
      "176:     sprintf(charbuf, \"%s/%s-links.html\", dirout, rootname);",
      "",
      "[Added Lines]",
      "174:     snprintf(charbuf, sizeof(charbuf), \"%s/%s.html\", dirout, rootname);",
      "176:     snprintf(charbuf, sizeof(charbuf), \"%s/%s-links.html\", dirout, rootname);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "197:         pixGetDimensions(pix, &w, NULL, &d);",
      "198:         factor = (l_float32)thumbwidth / (l_float32)w;",
      "199:         pixthumb = pixScale(pix, factor, factor);",
      "201:         sarrayAddString(sathumbs, charbuf, L_COPY);",
      "202:         outname = genPathname(dirout, charbuf);",
      "203:         WriteFormattedPix(outname, pixthumb);",
      "",
      "[Removed Lines]",
      "200:         sprintf(charbuf, \"%s_thumb_%03d\", rootname, index);",
      "",
      "[Added Lines]",
      "200:         snprintf(charbuf, sizeof(charbuf), \"%s_thumb_%03d\", rootname, index);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68898a24a54703bbde286b821699bcd3d2b624ed",
      "candidate_info": {
        "commit_hash": "68898a24a54703bbde286b821699bcd3d2b624ed",
        "repo": "DanBloomberg/leptonica",
        "commit_url": "https://github.com/DanBloomberg/leptonica/commit/68898a24a54703bbde286b821699bcd3d2b624ed",
        "files": [
          "prog/binmorph3_reg.c"
        ],
        "message": "prog/binmorph3_reg: Fix resource leaks (CID 1465179)\n\nSigned-off-by: Stefan Weil <sw@weilnetz.de>",
        "before_after_code_files": [
          "prog/binmorph3_reg.c||prog/binmorph3_reg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/DanBloomberg/leptonica/pull/309"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "prog/binmorph3_reg.c||prog/binmorph3_reg.c": [
          "File: prog/binmorph3_reg.c -> prog/binmorph3_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:         if (w > 1) {",
          "104:             if ((selnameh = selaGetBrickName(sela, w, 1)) == NULL) {",
          "105:                 selaDestroy(&sela);",
          "106:                 return ERROR_INT(\"dwa hor sel not defined\", rp->testname, 1);",
          "107:             }",
          "108:         }",
          "109:         if (h > 1) {",
          "110:             if ((selnamev = selaGetBrickName(sela, 1, h)) == NULL) {",
          "111:                 selaDestroy(&sela);",
          "112:                 return ERROR_INT(\"dwa vert sel not defined\", rp->testname, 1);",
          "113:             }",
          "114:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:                 selDestroy(&sel);",
          "113:                 selDestroy(&sel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "374e71e02ee204882921761bba5d2d85dfcb0b4e",
      "candidate_info": {
        "commit_hash": "374e71e02ee204882921761bba5d2d85dfcb0b4e",
        "repo": "DanBloomberg/leptonica",
        "commit_url": "https://github.com/DanBloomberg/leptonica/commit/374e71e02ee204882921761bba5d2d85dfcb0b4e",
        "files": [
          "prog/barcodetest.c",
          "prog/binmorph1_reg.c",
          "prog/binmorph2_reg.c",
          "prog/colormorph_reg.c",
          "prog/colorquant_reg.c",
          "prog/colorspace_reg.c",
          "prog/concatpdf.c",
          "prog/contrasttest.c",
          "prog/digitprep1.c",
          "prog/gammatest.c",
          "prog/graymorph1_reg.c",
          "prog/hashtest.c",
          "prog/htmlviewer.c",
          "prog/ioformats_reg.c",
          "prog/mtiff_reg.c",
          "prog/otsutest1.c",
          "prog/printsplitimage.c",
          "prog/ptra2_reg.c"
        ],
        "message": "Additional fixes to prog tests * Mostly replacing sprintf() by snprintf().",
        "before_after_code_files": [
          "prog/barcodetest.c||prog/barcodetest.c",
          "prog/binmorph1_reg.c||prog/binmorph1_reg.c",
          "prog/binmorph2_reg.c||prog/binmorph2_reg.c",
          "prog/colormorph_reg.c||prog/colormorph_reg.c",
          "prog/colorquant_reg.c||prog/colorquant_reg.c",
          "prog/colorspace_reg.c||prog/colorspace_reg.c",
          "prog/concatpdf.c||prog/concatpdf.c",
          "prog/contrasttest.c||prog/contrasttest.c",
          "prog/digitprep1.c||prog/digitprep1.c",
          "prog/gammatest.c||prog/gammatest.c",
          "prog/graymorph1_reg.c||prog/graymorph1_reg.c",
          "prog/hashtest.c||prog/hashtest.c",
          "prog/htmlviewer.c||prog/htmlviewer.c",
          "prog/ioformats_reg.c||prog/ioformats_reg.c",
          "prog/mtiff_reg.c||prog/mtiff_reg.c",
          "prog/otsutest1.c||prog/otsutest1.c",
          "prog/printsplitimage.c||prog/printsplitimage.c",
          "prog/ptra2_reg.c||prog/ptra2_reg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prog/htmlviewer.c||prog/htmlviewer.c"
          ],
          "candidate": [
            "prog/htmlviewer.c||prog/htmlviewer.c"
          ]
        }
      },
      "candidate_diff": {
        "prog/barcodetest.c||prog/barcodetest.c": [
          "File: prog/barcodetest.c -> prog/barcodetest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     sarrayDestroy(&sad2);",
          "75:     sarrayDestroy(&saw3);",
          "",
          "[Removed Lines]",
          "73:     sarrayWrite(\"/tmp/saw3\", saw3);",
          "74:     sarrayWrite(\"/tmp/sad3\", sad3);",
          "",
          "[Added Lines]",
          "73:     sarrayWrite(\"/tmp/lept/barc/saw3\", saw3);",
          "74:     sarrayWrite(\"/tmp/lept/barc/sad3\", sad3);",
          "",
          "---------------"
        ],
        "prog/binmorph1_reg.c||prog/binmorph1_reg.c": [
          "File: prog/binmorph1_reg.c -> prog/binmorph1_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     if (!same) {",
          "131:         fprintf(stderr, \"pixref != pix2 !\\n\"); ok = FALSE;",
          "132:     }",
          "135:     pixEqual(pixref, pix3, &same);",
          "136:     if (!same) {",
          "137:         fprintf(stderr, \"pixref != pix3 !\\n\"); ok = FALSE;",
          "138:     }",
          "141:     pixEqual(pixref, pix4, &same);",
          "142:     if (!same) {",
          "",
          "[Removed Lines]",
          "133:     sprintf(sequence, \"d%d.%d\", WIDTH, HEIGHT);",
          "139:     sprintf(sequence, \"d%d.1 + d1.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "133:     snprintf(sequence, sizeof(sequence), \"d%d.%d\", WIDTH, HEIGHT);",
          "139:     snprintf(sequence, sizeof(sequence), \"d%d.1 + d1.%d\", WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     if (!same) {",
          "183:         fprintf(stderr, \"pixref != pix11 !\\n\"); ok = FALSE;",
          "184:     }",
          "187:     pixEqual(pixref, pix12, &same);",
          "188:     if (!same) {",
          "",
          "[Removed Lines]",
          "185:     sprintf(sequence, \"d%d.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "185:     snprintf(sequence, sizeof(sequence), \"d%d.%d\", WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:     if (!same) {",
          "224:         fprintf(stderr, \"pixref != pix2 !\\n\"); ok = FALSE;",
          "225:     }",
          "228:     pixEqual(pixref, pix3, &same);",
          "229:     if (!same) {",
          "230:         fprintf(stderr, \"pixref != pix3 !\\n\"); ok = FALSE;",
          "231:     }",
          "234:     pixEqual(pixref, pix4, &same);",
          "235:     if (!same) {",
          "",
          "[Removed Lines]",
          "226:     sprintf(sequence, \"e%d.%d\", WIDTH, HEIGHT);",
          "232:     sprintf(sequence, \"e%d.1 + e1.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "226:     snprintf(sequence, sizeof(sequence), \"e%d.%d\", WIDTH, HEIGHT);",
          "232:     snprintf(sequence, sizeof(sequence), \"e%d.1 + e1.%d\", WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:         fprintf(stderr, \"pixref != pix11 !\\n\"); ok = FALSE;",
          "277:     }",
          "281:     pixEqual(pixref, pix12, &same);",
          "282:     if (!same) {",
          "",
          "[Removed Lines]",
          "279:     sprintf(sequence, \"e%d.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "279:     snprintf(sequence, sizeof(sequence), \"e%d.%d\", WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:     if (!same) {",
          "318:         fprintf(stderr, \"pixref != pix2 !\\n\"); ok = FALSE;",
          "319:     }",
          "322:     pixEqual(pixref, pix3, &same);",
          "323:     if (!same) {",
          "324:         fprintf(stderr, \"pixref != pix3 !\\n\"); ok = FALSE;",
          "325:     }",
          "328:     pixEqual(pixref, pix4, &same);",
          "329:     if (!same) {",
          "330:         fprintf(stderr, \"pixref != pix4 !\\n\"); ok = FALSE;",
          "331:     }",
          "335:     pixEqual(pixref, pix5, &same);",
          "336:     if (!same) {",
          "",
          "[Removed Lines]",
          "320:     sprintf(sequence, \"o%d.%d\", WIDTH, HEIGHT);",
          "326:     sprintf(sequence, \"e%d.%d + d%d.%d\", WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "332:     sprintf(sequence, \"e%d.1 + e1.%d + d%d.1 + d1.%d\", WIDTH, HEIGHT,",
          "333:             WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "320:     snprintf(sequence, sizeof(sequence), \"o%d.%d\", WIDTH, HEIGHT);",
          "326:     snprintf(sequence, sizeof(sequence), \"e%d.%d + d%d.%d\",",
          "327:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "333:     snprintf(sequence, sizeof(sequence), \"e%d.1 + e1.%d + d%d.1 + d1.%d\",",
          "334:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "370:     if (!same) {",
          "371:         fprintf(stderr, \"pixref != pix11 !\\n\"); ok = FALSE;",
          "372:     }",
          "375:     pixEqual(pixref, pix12, &same);",
          "376:     if (!same) {",
          "",
          "[Removed Lines]",
          "373:     sprintf(sequence, \"o%d.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "374:     snprintf(sequence, sizeof(sequence), \"o%d.%d\", WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:     if (!same) {",
          "421:         fprintf(stderr, \"pixref != pix2 !\\n\"); ok = FALSE;",
          "422:     }",
          "425:     pixEqual(pixref, pix3, &same);",
          "426:     if (!same) {",
          "427:         fprintf(stderr, \"pixref != pix3 !\\n\"); ok = FALSE;",
          "428:     }",
          "432:     pixEqual(pixref, pix4, &same);",
          "433:     if (!same) {",
          "",
          "[Removed Lines]",
          "423:     sprintf(sequence, \"d%d.%d + e%d.%d\", WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "429:     sprintf(sequence, \"d%d.1 + d1.%d + e%d.1 + e1.%d\", WIDTH, HEIGHT,",
          "430:             WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "424:     snprintf(sequence, sizeof(sequence), \"d%d.%d + e%d.%d\",",
          "425:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "431:     snprintf(sequence, sizeof(sequence), \"d%d.1 + d1.%d + e%d.1 + e1.%d\",",
          "432:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "474:     if (!same) {",
          "475:         fprintf(stderr, \"pixref != pix2 !\\n\"); ok = FALSE;",
          "476:     }",
          "479:     pixEqual(pixref, pix3, &same);",
          "480:     if (!same) {",
          "481:         fprintf(stderr, \"pixref != pix3 !\\n\"); ok = FALSE;",
          "482:     }",
          "485:     pixEqual(pixref, pix4, &same);",
          "486:     if (!same) {",
          "487:         fprintf(stderr, \"pixref != pix4 !\\n\"); ok = FALSE;",
          "488:     }",
          "492:     pixEqual(pixref, pix5, &same);",
          "493:     if (!same) {",
          "",
          "[Removed Lines]",
          "477:     sprintf(sequence, \"c%d.%d\", WIDTH, HEIGHT);",
          "483:     sprintf(sequence, \"b32 + d%d.%d + e%d.%d\", WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "489:     sprintf(sequence, \"b32 + d%d.1 + d1.%d + e%d.1 + e1.%d\", WIDTH, HEIGHT,",
          "490:             WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "479:     snprintf(sequence, sizeof(sequence), \"c%d.%d\", WIDTH, HEIGHT);",
          "485:     snprintf(sequence, sizeof(sequence), \"b32 + d%d.%d + e%d.%d\",",
          "486:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "492:     snprintf(sequence, sizeof(sequence), \"b32 + d%d.1 + d1.%d + e%d.1 + e1.%d\",",
          "493:              WIDTH, HEIGHT, WIDTH, HEIGHT);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "527:     if (!same) {",
          "528:         fprintf(stderr, \"pixref != pix11 !\\n\"); ok = FALSE;",
          "529:     }",
          "532:     pixEqual(pixref, pix12, &same);",
          "533:     if (!same) {",
          "",
          "[Removed Lines]",
          "530:     sprintf(sequence, \"c%d.%d\", WIDTH, HEIGHT);",
          "",
          "[Added Lines]",
          "533:     snprintf(sequence, sizeof(sequence), \"c%d.%d\", WIDTH, HEIGHT);",
          "",
          "---------------"
        ],
        "prog/binmorph2_reg.c||prog/binmorph2_reg.c": [
          "File: prog/binmorph2_reg.c -> prog/binmorph2_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         fprintf(stderr, \"%d: (%d, %d): %d\\n\", i, factor1, factor2, diff);",
          "69:         pixt1 = pixMorphSequence(pixsd, buffer1, 0);",
          "70:         pixt2 = pixMorphCompSequence(pixsd, buffer2, 0);",
          "71:         pixEqual(pixt1, pixt2, &same);",
          "",
          "[Removed Lines]",
          "67:         sprintf(buffer1, \"d%d.%d\", i + diff, i + diff);",
          "68:         sprintf(buffer2, \"d%d.%d\", i, i);",
          "",
          "[Added Lines]",
          "67:         snprintf(buffer1, sizeof(buffer1), \"d%d.%d\", i + diff, i + diff);",
          "68:         snprintf(buffer2, sizeof(buffer2), \"d%d.%d\", i, i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         pixDestroy(&pixt3);",
          "92:         pixt1 = pixMorphSequence(pixsd, buffer1, 0);",
          "93:         pixt2 = pixMorphCompSequence(pixsd, buffer2, 0);",
          "94:         pixEqual(pixt1, pixt2, &same);",
          "",
          "[Removed Lines]",
          "90:         sprintf(buffer1, \"e%d.%d\", i + diff, i + diff);",
          "91:         sprintf(buffer2, \"e%d.%d\", i, i);",
          "",
          "[Added Lines]",
          "90:         snprintf(buffer1, sizeof(buffer1), \"e%d.%d\", i + diff, i + diff);",
          "91:         snprintf(buffer2, sizeof(buffer2), \"e%d.%d\", i, i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:         pixDestroy(&pixt3);",
          "115:         pixt1 = pixMorphSequence(pixsd, buffer1, 0);",
          "116:         pixt2 = pixMorphCompSequence(pixsd, buffer2, 0);",
          "117:         pixEqual(pixt1, pixt2, &same);",
          "",
          "[Removed Lines]",
          "113:         sprintf(buffer1, \"o%d.%d\", i + diff, i + diff);",
          "114:         sprintf(buffer2, \"o%d.%d\", i, i);",
          "",
          "[Added Lines]",
          "113:         snprintf(buffer1, sizeof(buffer1), \"o%d.%d\", i + diff, i + diff);",
          "114:         snprintf(buffer2, sizeof(buffer2), \"o%d.%d\", i, i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         pixDestroy(&pixt3);",
          "138:         pixt1 = pixMorphSequence(pixsd, buffer1, 0);",
          "139:         pixt2 = pixMorphCompSequence(pixsd, buffer2, 0);",
          "140:         pixEqual(pixt1, pixt2, &same);",
          "",
          "[Removed Lines]",
          "136:         sprintf(buffer1, \"c%d.%d\", i + diff, i + diff);",
          "137:         sprintf(buffer2, \"c%d.%d\", i, i);",
          "",
          "[Added Lines]",
          "136:         snprintf(buffer1, sizeof(buffer1), \"c%d.%d\", i + diff, i + diff);",
          "137:         snprintf(buffer2, sizeof(buffer2), \"c%d.%d\", i, i);",
          "",
          "---------------"
        ],
        "prog/colormorph_reg.c||prog/colormorph_reg.c": [
          "File: prog/colormorph_reg.c -> prog/colormorph_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     pix1 = pixColorMorph(pixs, L_MORPH_DILATE, SIZE, SIZE);",
          "54:     pix2 = pixColorMorphSequence(pixs, buf, 0, 0);",
          "56:     pixaAddPix(pixa, pix1, L_INSERT);",
          "",
          "[Removed Lines]",
          "53:     sprintf(buf, \"d%d.%d\", SIZE, SIZE);",
          "",
          "[Added Lines]",
          "53:     snprintf(buf, sizeof(buf), \"d%d.%d\", SIZE, SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     pix1 = pixColorMorph(pixs, L_MORPH_ERODE, SIZE, SIZE);",
          "62:     pix2 = pixColorMorphSequence(pixs, buf, 0, 0);",
          "64:     pixaAddPix(pixa, pix1, L_INSERT);",
          "",
          "[Removed Lines]",
          "61:     sprintf(buf, \"e%d.%d\", SIZE, SIZE);",
          "",
          "[Added Lines]",
          "61:     snprintf(buf, sizeof(buf), \"e%d.%d\", SIZE, SIZE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     pix1 = pixColorMorph(pixs, L_MORPH_OPEN, SIZE, SIZE);",
          "70:     pix2 = pixColorMorphSequence(pixs, buf, 0, 0);",
          "72:     pixaAddPix(pixa, pix1, L_INSERT);",
          "",
          "[Removed Lines]",
          "69:     sprintf(buf, \"o%d.%d\", SIZE, SIZE);",
          "",
          "[Added Lines]",
          "69:     snprintf(buf, sizeof(buf), \"o%d.%d\", SIZE, SIZE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     pix1 = pixColorMorph(pixs, L_MORPH_CLOSE, SIZE, SIZE);",
          "78:     pix2 = pixColorMorphSequence(pixs, buf, 0, 0);",
          "80:     pixaAddPix(pixa, pix1, L_INSERT);",
          "",
          "[Removed Lines]",
          "77:     sprintf(buf, \"c%d.%d\", SIZE, SIZE);",
          "",
          "[Added Lines]",
          "77:     snprintf(buf, sizeof(buf), \"c%d.%d\", SIZE, SIZE);",
          "",
          "---------------"
        ],
        "prog/colorquant_reg.c||prog/colorquant_reg.c": [
          "File: prog/colorquant_reg.c -> prog/colorquant_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:     pixd = pixaDisplay(pixa, 0, 0);",
          "221:     pixDisplayWithTitle(pixd, 100, 100, NULL, rp->display);",
          "223:     pixWrite(buf, pixd, IFF_JFIF_JPEG);",
          "225:     pixDestroy(&pixs);",
          "",
          "[Removed Lines]",
          "222:     sprintf(buf, \"/tmp/lept/regout/disp.%d.jpg\", i);",
          "",
          "[Added Lines]",
          "222:     snprintf(buf, sizeof(buf), \"/tmp/lept/regout/disp.%d.jpg\", i);",
          "",
          "---------------"
        ],
        "prog/colorspace_reg.c||prog/colorspace_reg.c": [
          "File: prog/colorspace_reg.c -> prog/colorspace_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:                          \"white point space for red\", \"amount of color\");",
          "162:     for (j = 0; j < 6; j++) {",
          "163:         na = numaaGetNuma(naa1, j, L_CLONE);",
          "165:         gplotAddPlot(gplot1, naseq, na, GPLOT_LINES, label);",
          "166:         numaDestroy(&na);",
          "167:         na = numaaGetNuma(naa2, j, L_CLONE);",
          "",
          "[Removed Lines]",
          "164:         sprintf(label, \"thresh %d\", 30 + 10 * j);",
          "",
          "[Added Lines]",
          "164:         snprintf(label, sizeof(label), \"thresh %d\", 30 + 10 * j);",
          "",
          "---------------"
        ],
        "prog/concatpdf.c||prog/concatpdf.c": [
          "File: prog/concatpdf.c -> prog/concatpdf.c"
        ],
        "prog/contrasttest.c||prog/contrasttest.c": [
          "File: prog/contrasttest.c -> prog/contrasttest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:          char **argv)",
          "39: {",
          "40: char        *filein, *fileout;",
          "42: l_int32      iplot;",
          "44: l_float32    fact[] = {0.2f, 0.4f, 0.6f, 0.8f, 1.0f, -1.0f};",
          "",
          "[Removed Lines]",
          "41: char         bigbuf[512];",
          "",
          "[Added Lines]",
          "41: char         buf[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         \"value in\", \"value out\");",
          "73:     for (iplot = 0; fact[iplot] >= 0.0; iplot++) {",
          "74:         na = numaContrastTRC(fact[iplot]);",
          "77:         numaDestroy(&na);",
          "78:     }",
          "79:     gplotMakeOutput(gplot);",
          "",
          "[Removed Lines]",
          "75:         sprintf(bigbuf, \"factor = %3.1f\", fact[iplot]);",
          "76:         gplotAddPlot(gplot, nax, na, GPLOT_LINES, bigbuf);",
          "",
          "[Added Lines]",
          "75:         snprintf(buf, sizeof(buf), \"factor = %3.1f\", fact[iplot]);",
          "76:         gplotAddPlot(gplot, nax, na, GPLOT_LINES, buf);",
          "",
          "---------------"
        ],
        "prog/digitprep1.c||prog/digitprep1.c": [
          "File: prog/digitprep1.c -> prog/digitprep1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         pixt2 = pixScale(pixt1, scalefact, scalefact);",
          "76:         if (pixGetHeight(pixt2) != 32)",
          "77:             return ERROR_INT(\"height not 32!\", mainName, 1);",
          "79:         pixSetText(pixt2, buf);",
          "80:         pixaAddPix(pixad, pixt2, L_INSERT);",
          "81:         pixDestroy(&pixt1);",
          "",
          "[Removed Lines]",
          "78:         sprintf(buf, \"%d\", i);",
          "",
          "[Added Lines]",
          "78:         snprintf(buf, sizeof(buf), \"%d\", i);",
          "",
          "---------------"
        ],
        "prog/gammatest.c||prog/gammatest.c": [
          "File: prog/gammatest.c -> prog/gammatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:          char **argv)",
          "39: {",
          "40: char        *filein, *fileout;",
          "42: l_int32      iplot, same;",
          "43: l_float32    gam;",
          "44: l_float64    gamma[] = {.5, 1.0, 1.5, 2.0, 2.5, -1.0};",
          "",
          "[Removed Lines]",
          "41: char         bigbuf[512];",
          "",
          "[Added Lines]",
          "41: char         buf[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     nax = numaMakeSequence(0.0, 1.0, 256);",
          "82:     for (iplot = 0; gamma[iplot] >= 0.0; iplot++) {",
          "83:         na = numaGammaTRC(gamma[iplot], 30, 215);",
          "86:         numaDestroy(&na);",
          "87:     }",
          "88:     gplotMakeOutput(gplot);",
          "",
          "[Removed Lines]",
          "84:         sprintf(bigbuf, \"gamma = %3.1f\", gamma[iplot]);",
          "85:         gplotAddPlot(gplot, nax, na, GPLOT_LINES, bigbuf);",
          "",
          "[Added Lines]",
          "84:         snprintf(buf, sizeof(buf), \"gamma = %3.1f\", gamma[iplot]);",
          "85:         gplotAddPlot(gplot, nax, na, GPLOT_LINES, buf);",
          "",
          "---------------"
        ],
        "prog/graymorph1_reg.c||prog/graymorph1_reg.c": [
          "File: prog/graymorph1_reg.c -> prog/graymorph1_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: int main(int    argc,",
          "57:          char **argv)",
          "58: {",
          "62: l_int32       w, h;",
          "63: PIX          *pixs, *pix1, *pix2, *pix3, *pix4, *pix5;",
          "64: PIXA         *pixa;",
          "",
          "[Removed Lines]",
          "59: char          dilateseq[512], erodeseq[512];",
          "60: char          openseq[512], closeseq[512];",
          "61: char          wtophatseq[512], btophatseq[512];",
          "",
          "[Added Lines]",
          "59: char          seq[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     pix1 = pixDilateGray(pixs, WSIZE, HSIZE);",
          "83:     pixaAddPix(pixa, pix1, L_INSERT);",
          "84:     pixDestroy(&pix2);",
          "86:     pix1 = pixErodeGray(pixs, WSIZE, HSIZE);",
          "91:     pixaAddPix(pixa, pix1, L_INSERT);",
          "92:     pixDestroy(&pix2);",
          "94:     pix1 = pixOpenGray(pixs, WSIZE, HSIZE);",
          "99:     pixaAddPix(pixa, pix1, L_INSERT);",
          "100:     pixDestroy(&pix2);",
          "102:     pix1 = pixCloseGray(pixs, WSIZE, HSIZE);",
          "107:     pixaAddPix(pixa, pix1, L_INSERT);",
          "108:     pixDestroy(&pix2);",
          "110:     pix1 = pixTophat(pixs, WSIZE, HSIZE, L_TOPHAT_WHITE);",
          "115:     pixaAddPix(pixa, pix1, L_INSERT);",
          "116:     pixDestroy(&pix2);",
          "118:     pix1 = pixTophat(pixs, WSIZE, HSIZE, L_TOPHAT_BLACK);",
          "123:     pixaAddPix(pixa, pix1, L_INSERT);",
          "",
          "[Removed Lines]",
          "79:     sprintf(dilateseq, \"D%d.%d\", WSIZE, HSIZE);",
          "80:     pix2 = pixGrayMorphSequence(pixs, dilateseq, 0, 0);",
          "87:     sprintf(erodeseq, \"E%d.%d\", WSIZE, HSIZE);",
          "88:     pix2 = pixGrayMorphSequence(pixs, erodeseq, 0, 100);",
          "95:     sprintf(openseq, \"O%d.%d\", WSIZE, HSIZE);",
          "96:     pix2 = pixGrayMorphSequence(pixs, openseq, 0, 200);",
          "103:     sprintf(closeseq, \"C%d.%d\", WSIZE, HSIZE);",
          "104:     pix2 = pixGrayMorphSequence(pixs, closeseq, 0, 300);",
          "111:     sprintf(wtophatseq, \"Tw%d.%d\", WSIZE, HSIZE);",
          "112:     pix2 = pixGrayMorphSequence(pixs, wtophatseq, 0, 400);",
          "119:     sprintf(btophatseq, \"Tb%d.%d\", WSIZE, HSIZE);",
          "120:     pix2 = pixGrayMorphSequence(pixs, btophatseq, 0, 500);",
          "",
          "[Added Lines]",
          "77:     snprintf(seq, sizeof(seq), \"D%d.%d\", WSIZE, HSIZE);",
          "78:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 0);",
          "85:     snprintf(seq, sizeof(seq), \"E%d.%d\", WSIZE, HSIZE);",
          "86:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 100);",
          "93:     snprintf(seq, sizeof(seq), \"O%d.%d\", WSIZE, HSIZE);",
          "94:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 200);",
          "101:     snprintf(seq, sizeof(seq), \"C%d.%d\", WSIZE, HSIZE);",
          "102:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 300);",
          "109:     snprintf(seq, sizeof(seq), \"Tw%d.%d\", WSIZE, HSIZE);",
          "110:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 400);",
          "117:     snprintf(seq, sizeof(seq), \"Tb%d.%d\", WSIZE, HSIZE);",
          "118:     pix2 = pixGrayMorphSequence(pixs, seq, 0, 500);",
          "",
          "---------------"
        ],
        "prog/hashtest.c||prog/hashtest.c": [
          "File: prog/hashtest.c -> prog/hashtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     sa = sarrayCreate(1000);",
          "283:     for (i = 0; i < 26; i++) {",
          "285:         sarrayAddString(sa, buf, L_COPY);",
          "286:         for (j = 0; j < 26; j++) {",
          "288:             sarrayAddString(sa, buf, L_COPY);",
          "289:             for (k = 0; k < 26; k++) {",
          "291:                 sarrayAddString(sa, buf, L_COPY);",
          "293:                     sarrayAddString(sa, buf, L_COPY);",
          "294:                 if (nchars > 3) {",
          "295:                     for (l = 0; l < 26; l++) {",
          "298:                         sarrayAddString(sa, buf, L_COPY);",
          "300:                             sarrayAddString(sa, buf, L_COPY);",
          "301:                         if (nchars > 4) {",
          "302:                             for (m = 0; m < 26; m++) {",
          "305:                                 sarrayAddString(sa, buf, L_COPY);",
          "306:                                 if (!add_dups && i == 17 && j == 12 &&",
          "307:                                     k == 4 && l == 21) {",
          "",
          "[Removed Lines]",
          "284:         sprintf(buf, \"%c\", i + 0x61);",
          "287:             sprintf(buf, \"%c%c\", i + 0x61, j + 0x61);",
          "290:                 sprintf(buf, \"%c%c%c\", i + 0x61, j + 0x61, k + 0x61);",
          "296:                         sprintf(buf, \"%c%c%c%c\", i + 0x61, j + 0x61,",
          "297:                                 k + 0x61, l + 0x61);",
          "303:                                 sprintf(buf, \"%c%c%c%c%c\", i + 0x61, j + 0x61,",
          "304:                                         k + 0x61, l + 0x61, m + 0x61);",
          "",
          "[Added Lines]",
          "284:         snprintf(buf, sizeof(buf), \"%c\", i + 0x61);",
          "287:             snprintf(buf, sizeof(buf), \"%c%c\", i + 0x61, j + 0x61);",
          "290:                 snprintf(buf, sizeof(buf), \"%c%c%c\", i + 0x61, j + 0x61,",
          "291:                          k + 0x61);",
          "297:                         snprintf(buf, sizeof(buf), \"%c%c%c%c\", i + 0x61,",
          "298:                                  j + 0x61, k + 0x61, l + 0x61);",
          "304:                                 snprintf(buf, sizeof(buf), \"%c%c%c%c%c\",",
          "305:                                          i + 0x61, j + 0x61, k + 0x61,",
          "306:                                          l + 0x61, m + 0x61);",
          "",
          "---------------"
        ],
        "prog/htmlviewer.c||prog/htmlviewer.c": [
          "File: prog/htmlviewer.c -> prog/htmlviewer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: char      *mainname, *linkname, *linknameshort;",
          "126: char      *viewfile, *thumbfile;",
          "127: char      *shtml, *slink;",
          "129: char       htmlstring[] = \"<html>\";",
          "130: char       framestring[] = \"</frameset></html>\";",
          "131: l_int32    i, nfiles, index, w, d, nimages, ret;",
          "",
          "[Removed Lines]",
          "128: char       charbuf[512];",
          "",
          "[Added Lines]",
          "128: char       buf[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: #ifndef _WIN32",
          "162: #else",
          "163:     ret = CreateDirectory(dirout, NULL) ? 0 : 1;",
          "",
          "[Removed Lines]",
          "160:     snprintf(charbuf, sizeof(charbuf), \"mkdir -p %s\", dirout);",
          "161:     ret = system(charbuf);",
          "",
          "[Added Lines]",
          "160:     snprintf(buf, sizeof(buf), \"mkdir -p %s\", dirout);",
          "161:     ret = system(buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:         return ERROR_INT(\"safiles not made\", procName, 1);",
          "179:     linknameshort = stringJoin(rootname, \"-links.html\");",
          "",
          "[Removed Lines]",
          "175:     snprintf(charbuf, sizeof(charbuf), \"%s/%s.html\", dirout, rootname);",
          "176:     mainname = stringNew(charbuf);",
          "177:     snprintf(charbuf, sizeof(charbuf), \"%s/%s-links.html\", dirout, rootname);",
          "178:     linkname = stringNew(charbuf);",
          "",
          "[Added Lines]",
          "175:     snprintf(buf, sizeof(buf), \"%s/%s.html\", dirout, rootname);",
          "176:     mainname = stringNew(buf);",
          "177:     snprintf(buf, sizeof(buf), \"%s/%s-links.html\", dirout, rootname);",
          "178:     linkname = stringNew(buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:         pixGetDimensions(pix, &w, NULL, &d);",
          "199:         factor = (l_float32)thumbwidth / (l_float32)w;",
          "200:         pixthumb = pixScale(pix, factor, factor);",
          "204:         WriteFormattedPix(outname, pixthumb);",
          "205:         lept_free(outname);",
          "206:         pixDestroy(&pixthumb);",
          "",
          "[Removed Lines]",
          "201:         snprintf(charbuf, sizeof(charbuf), \"%s_thumb_%03d\", rootname, index);",
          "202:         sarrayAddString(sathumbs, charbuf, L_COPY);",
          "203:         outname = genPathname(dirout, charbuf);",
          "",
          "[Added Lines]",
          "201:         snprintf(buf, sizeof(buf), \"%s_thumb_%03d\", rootname, index);",
          "202:         sarrayAddString(sathumbs, buf, L_COPY);",
          "203:         outname = genPathname(dirout, buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:         else",
          "213:             pixview = pixScale(pix, factor, factor);",
          "217:         WriteFormattedPix(outname, pixview);",
          "218:         lept_free(outname);",
          "219:         pixDestroy(&pixview);",
          "",
          "[Removed Lines]",
          "214:         snprintf(charbuf, sizeof(charbuf), \"%s_view_%03d\", rootname, index);",
          "215:         sarrayAddString(saviews, charbuf, L_COPY);",
          "216:         outname = genPathname(dirout, charbuf);",
          "",
          "[Added Lines]",
          "214:         snprintf(buf, sizeof(buf), \"%s_view_%03d\", rootname, index);",
          "215:         sarrayAddString(saviews, buf, L_COPY);",
          "216:         outname = genPathname(dirout, buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "225:     sahtml = sarrayCreate(0);",
          "226:     sarrayAddString(sahtml, htmlstring, L_COPY);",
          "232:             sarrayGetString(saviews, 0, L_NOCOPY));",
          "234:     sarrayAddString(sahtml, framestring, L_COPY);",
          "235:     shtml = sarrayToString(sahtml, 1);",
          "236:     l_binaryWrite(mainname, \"w\", shtml, strlen(shtml));",
          "",
          "[Removed Lines]",
          "227:     sprintf(charbuf, \"<frameset cols=\\\"%d, *\\\">\", thumbwidth + 30);",
          "228:     sarrayAddString(sahtml, charbuf, L_COPY);",
          "229:     sprintf(charbuf, \"<frame name=\\\"thumbs\\\" src=\\\"%s\\\">\", linknameshort);",
          "230:     sarrayAddString(sahtml, charbuf, L_COPY);",
          "231:     sprintf(charbuf, \"<frame name=\\\"views\\\" src=\\\"%s\\\">\",",
          "233:     sarrayAddString(sahtml, charbuf, L_COPY);",
          "",
          "[Added Lines]",
          "227:     snprintf(buf, sizeof(buf), \"<frameset cols=\\\"%d, *\\\">\", thumbwidth + 30);",
          "228:     sarrayAddString(sahtml, buf, L_COPY);",
          "229:     snprintf(buf, sizeof(buf), \"<frame name=\\\"thumbs\\\" src=\\\"%s\\\">\",",
          "230:              linknameshort);",
          "231:     sarrayAddString(sahtml, buf, L_COPY);",
          "232:     snprintf(buf, sizeof(buf), \"<frame name=\\\"views\\\" src=\\\"%s\\\">\",",
          "234:     sarrayAddString(sahtml, buf, L_COPY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "247:     for (i = 0; i < nimages; i++) {",
          "248:         viewfile = sarrayGetString(saviews, i, L_NOCOPY);",
          "249:         thumbfile = sarrayGetString(sathumbs, i, L_NOCOPY);",
          "253:     }",
          "254:     slink = sarrayToString(salink, 1);",
          "255:     l_binaryWrite(linkname, \"w\", slink, strlen(slink));",
          "",
          "[Removed Lines]",
          "250:         sprintf(charbuf, \"<a href=\\\"%s\\\" TARGET=views><img src=\\\"%s\\\"></a>\",",
          "251:             viewfile, thumbfile);",
          "252:         sarrayAddString(salink, charbuf, L_COPY);",
          "",
          "[Added Lines]",
          "251:         snprintf(buf, sizeof(buf),",
          "252:                  \"<a href=\\\"%s\\\" TARGET=views><img src=\\\"%s\\\"></a>\",",
          "253:                  viewfile, thumbfile);",
          "254:         sarrayAddString(salink, buf, L_COPY);",
          "",
          "---------------"
        ],
        "prog/ioformats_reg.c||prog/ioformats_reg.c": [
          "File: prog/ioformats_reg.c -> prog/ioformats_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:             continue;",
          "342:         }",
          "343:         d = pixGetDepth(pix);",
          "345:         fprintf(stderr, \"%d bpp\\n\", d);",
          "346:         if (test_writemem(pix, IFF_PNM, NULL)) success = FALSE;",
          "347:         if (test_writemem(pix, IFF_PS, psname)) success = FALSE;",
          "",
          "[Removed Lines]",
          "344:         sprintf(psname, \"/tmp/lept/regout/junkps.%d\", d);",
          "",
          "[Added Lines]",
          "344:         snprintf(psname, sizeof(psname), \"/tmp/lept/regout/junkps.%d\", d);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "784:                           l_int32  format)",
          "785: {",
          "786:     if (format == IFF_TIFF_G4)",
          "788:     else if (format == IFF_TIFF_G3)",
          "790:     else if (format == IFF_TIFF_ZIP)",
          "792:     else if (format == IFF_TIFF_LZW)",
          "794:     else if (format == IFF_TIFF_RLE)",
          "796:     else if (format == IFF_TIFF_PACKBITS)",
          "798:     else if (format == IFF_TIFF)",
          "800:     else",
          "801:         fprintf(stderr, \"format %d: not tiff\\n\", format);",
          "802:     return;",
          "",
          "[Removed Lines]",
          "787:         sprintf(buf, \"tiff_g4\");",
          "789:         sprintf(buf, \"tiff_g3\");",
          "791:         sprintf(buf, \"tiff_zip\");",
          "793:         sprintf(buf, \"tiff_lzw\");",
          "795:         sprintf(buf, \"tiff_rle\");",
          "797:         sprintf(buf, \"tiff_packbits\");",
          "799:         sprintf(buf, \"tiff_uncompressed\");",
          "",
          "[Added Lines]",
          "787:         snprintf(buf, sizeof(buf), \"tiff_g4\");",
          "789:         snprintf(buf, sizeof(buf), \"tiff_g3\");",
          "791:         snprintf(buf, sizeof(buf), \"tiff_zip\");",
          "793:         snprintf(buf, sizeof(buf), \"tiff_lzw\");",
          "795:         snprintf(buf, sizeof(buf), \"tiff_rle\");",
          "797:         snprintf(buf, sizeof(buf), \"tiff_packbits\");",
          "799:         snprintf(buf, sizeof(buf), \"tiff_uncompressed\");",
          "",
          "---------------"
        ],
        "prog/mtiff_reg.c||prog/mtiff_reg.c": [
          "File: prog/mtiff_reg.c -> prog/mtiff_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: l_uint8      *data;",
          "47: char         *fname, *filename;",
          "48: const char   *str;",
          "50: l_int32       i, n, npages, equal, success;",
          "51: size_t        length, offset, size;",
          "52: FILE         *fp;",
          "",
          "[Removed Lines]",
          "49: char          buffer[512];",
          "",
          "[Added Lines]",
          "49: char          buf[512];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:         pix1 = pixReadTiff(weasel_orig, i);",
          "277:         if (!pix1) continue;",
          "280:         pixDestroy(&pix1);",
          "281:     }",
          "284:     for (i = npages - 1; i >= 0; i--) {",
          "287:         if (!pix1) continue;",
          "288:         if (i == npages - 1)",
          "289:             pixWriteTiff(weasel_rev, pix1, IFF_TIFF_ZIP, \"w+\");",
          "",
          "[Removed Lines]",
          "278:         sprintf(buffer, \"/tmp/lept/tiff/%03d.tif\", i);",
          "279:         pixWrite(buffer, pix1, IFF_TIFF_ZIP);",
          "285:         sprintf(buffer, \"/tmp/lept/tiff/%03d.tif\", i);",
          "286:         pix1 = pixRead(buffer);",
          "",
          "[Added Lines]",
          "278:         snprintf(buf, sizeof(buf), \"/tmp/lept/tiff/%03d.tif\", i);",
          "279:         pixWrite(buf, pix1, IFF_TIFF_ZIP);",
          "285:         snprintf(buf, sizeof(buf), \"/tmp/lept/tiff/%03d.tif\", i);",
          "286:         pix1 = pixRead(buf);",
          "",
          "---------------"
        ],
        "prog/otsutest1.c||prog/otsutest1.c": [
          "File: prog/otsutest1.c -> prog/otsutest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     pixa = pixaCreate(0);",
          "60:     for (i = 0; i < NTests; i++) {",
          "62:         pix = pixRead(buf);",
          "63:         pixSaveTiled(pix, pixa, 1.0, 1, 25, 32);",
          "64:         pixDestroy(&pix);",
          "66:         pix = pixRead(buf);",
          "67:         pixSaveTiled(pix, pixa, 1.0, 0, 25, 32);",
          "68:         pixDestroy(&pix);",
          "",
          "[Removed Lines]",
          "61:         sprintf(buf, \"/tmp/lept/otsu/plot.%d.png\", i);",
          "65:         sprintf(buf, \"/tmp/lept/otsu/plots.%d.png\", i);",
          "",
          "[Added Lines]",
          "61:         snprintf(buf, sizeof(buf), \"/tmp/lept/otsu/plot.%d.png\", i);",
          "65:         snprintf(buf, sizeof(buf), \"/tmp/lept/otsu/plots.%d.png\", i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     numaReplaceNumber(nay, 1, (l_int32)(0.5 * maxnum));",
          "111:     gplot = gplotCreate(buf, GPLOT_PNG,",
          "112:                         \"Histogram: mixture of 2 gaussians\",",
          "113:                         \"Grayscale value\", \"Number of pixels\");",
          "",
          "[Removed Lines]",
          "109:     sprintf(buf, \"/tmp/lept/otsu/plot.%d\", i);",
          "110:     sprintf(title, \"Plot %d\", i);",
          "",
          "[Added Lines]",
          "109:     snprintf(buf, sizeof(buf), \"/tmp/lept/otsu/plot.%d\", i);",
          "110:     snprintf(title, sizeof(title), \"Plot %d\", i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:     numaDestroy(&na2);",
          "124:     gplot = gplotCreate(buf, GPLOT_PNG,",
          "125:                         \"Otsu score function for splitting\",",
          "126:                         \"Grayscale value\", \"Score\");",
          "",
          "[Removed Lines]",
          "122:     sprintf(buf, \"/tmp/lept/otsu/plots.%d\", i);",
          "123:     sprintf(title, \"Plot %d\", i);",
          "",
          "[Added Lines]",
          "122:     snprintf(buf, sizeof(buf), \"/tmp/lept/otsu/plots.%d\", i);",
          "123:     snprintf(title, sizeof(title), \"Plot %d\", i);",
          "",
          "---------------"
        ],
        "prog/printsplitimage.c||prog/printsplitimage.c": [
          "File: prog/printsplitimage.c -> prog/printsplitimage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         printer = argv[4];",
          "77:     setLeptDebugOK(1);",
          "81:     if ((pixs = pixRead(filein)) == NULL)",
          "82:         return ERROR_INT(\"pixs not made\", mainName, 1);",
          "",
          "[Removed Lines]",
          "78:     lept_rmdir(\"split\");",
          "79:     lept_mkdir(\"split\");",
          "",
          "[Added Lines]",
          "78:     lept_rmdir(\"lept/split\");",
          "79:     lept_mkdir(\"lept/split\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:         pixt = pixaGetPix(pixa, i, L_CLONE);",
          "97:         pixGetDimensions(pixt, &w, &h, NULL);",
          "98:         scale = L_MIN(FILL_FACTOR * 2550 / w, FILL_FACTOR * 3300 / h);",
          "101:         fprintf(stderr, \"fname: %s\\n\", fname);",
          "102:         sarrayAddString(sa, fname, L_INSERT);",
          "103:         fp = lept_fopen(fname, \"wb+\");",
          "",
          "[Removed Lines]",
          "99:         sprintf(buf, \"image%d.ps\", i);",
          "100:         fname = genPathname(\"/tmp/split\", buf);",
          "",
          "[Added Lines]",
          "99:         snprintf(buf, sizeof(buf), \"image%d.ps\", i);",
          "100:         fname = genPathname(\"/tmp/lept/split\", buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     if (argc == 5) {",
          "110:         for (i = 0; i < n; i++) {",
          "111:             fname = sarrayGetString(sa, i, L_NOCOPY);",
          "113:             ignore = system(buf);",
          "114:         }",
          "115:     }",
          "",
          "[Removed Lines]",
          "112:             sprintf(buf, \"lpr -P%s %s &\", printer, fname);",
          "",
          "[Added Lines]",
          "112:             snprintf(buf, sizeof(buf), \"lpr -P%s %s &\", printer, fname);",
          "",
          "---------------"
        ],
        "prog/ptra2_reg.c||prog/ptra2_reg.c": [
          "File: prog/ptra2_reg.c -> prog/ptra2_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     boxa1 = boxaSort(boxa, L_SORT_BY_X, L_SORT_INCREASING, &nad1);",
          "76:     boxaWrite(buf, boxa1);",
          "78:     numaWrite(buf, nad1);",
          "80:     startTimer();",
          "81:     boxa2 = boxaBinSort(boxa, L_SORT_BY_X, L_SORT_INCREASING, &nad2);",
          "83:     boxaWrite(buf, boxa2);",
          "85:     numaWrite(buf, nad2);",
          "87:     boxaEqual(boxa1, boxa2, 0, &naindex, &same);",
          "",
          "[Removed Lines]",
          "75:     sprintf(buf, \"/tmp/lept/prta/boxa1.%d.ba\", index);",
          "77:     sprintf(buf, \"/tmp/lept/prta/nad1.%d.na\", index);",
          "82:     sprintf(buf, \"/tmp/lept/prta/boxa2.%d.ba\", index);",
          "84:     sprintf(buf, \"/tmp/lept/prta/nad2.%d.na\", index);",
          "",
          "[Added Lines]",
          "75:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/boxa1.%d.ba\", index);",
          "77:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/nad1.%d.na\", index);",
          "82:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/boxa2.%d.ba\", index);",
          "84:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/nad2.%d.na\", index);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         fprintf(stderr, \"boxa1 and boxa2 are same at maxdiff = 2\\n\");",
          "96:     else",
          "97:         fprintf(stderr, \"boxa1 and boxa2 differ at maxdiff = 2\\n\");",
          "99:     numaWrite(buf, naindex);",
          "100:     numaDestroy(&naindex);",
          "101:     boxaDestroy(&boxa1);",
          "",
          "[Removed Lines]",
          "98:     sprintf(buf, \"/tmp/lept/prta/naindex.%d.na\", index);",
          "",
          "[Added Lines]",
          "98:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/naindex.%d.na\", index);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     }",
          "157:     fprintf(stderr, \"Time for sort: %7.3f sec\\n\", stopTimer());",
          "159:     boxaWrite(buf, boxa3);",
          "161:     numaWrite(buf, nad3);",
          "163:     boxaDestroy(&boxa2);",
          "",
          "[Removed Lines]",
          "158:     sprintf(buf, \"/tmp/lept/prta/boxa3.%d.ba\", index);",
          "160:     sprintf(buf, \"/tmp/lept/prta/nad3.%d.na\", index);",
          "",
          "[Added Lines]",
          "158:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/boxa3.%d.ba\", index);",
          "160:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/nad3.%d.na\", index);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:     pixa1 = pixaSort(pixa, L_SORT_BY_X, L_SORT_INCREASING, &nap1, L_CLONE);",
          "192:     fprintf(stderr, \"Time for pixa sort: %7.3f sec\\n\", stopTimer());",
          "193:     boxa1 = pixaGetBoxa(pixa1, L_CLONE);",
          "195:     boxaWrite(buf, boxa1);",
          "197:     numaWrite(buf, nap1);",
          "199:     pixaWrite(buf, pixa1);",
          "201:     startTimer();",
          "202:     pixa2 = pixaBinSort(pixa, L_SORT_BY_X, L_SORT_INCREASING, &nap2, L_CLONE);",
          "203:     fprintf(stderr, \"Time for pixa sort: %7.3f sec\\n\", stopTimer());",
          "204:     boxa2 = pixaGetBoxa(pixa2, L_CLONE);",
          "206:     boxaWrite(buf, boxa2);",
          "208:     numaWrite(buf, nap2);",
          "210:     pixaWrite(buf, pixa2);",
          "212:     startTimer();",
          "",
          "[Removed Lines]",
          "194:     sprintf(buf, \"/tmp/lept/prta/bap1.%d.ba\", index);",
          "196:     sprintf(buf, \"/tmp/lept/prta/nap1.%d.na\", index);",
          "198:     sprintf(buf, \"/tmp/lept/prta/pixa1.%d.pa\", index);",
          "205:     sprintf(buf, \"/tmp/lept/prta/bap2.%d.ba\", index);",
          "207:     sprintf(buf, \"/tmp/lept/prta/nap2.%d.na\", index);",
          "209:     sprintf(buf, \"/tmp/lept/prta/pixa2.%d.pa\", index);",
          "",
          "[Added Lines]",
          "194:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/bap1.%d.ba\", index);",
          "196:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/nap1.%d.na\", index);",
          "198:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/pixa1.%d.pa\", index);",
          "205:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/bap2.%d.ba\", index);",
          "207:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/nap2.%d.na\", index);",
          "209:     snprintf(buf, sizeof(buf), \"/tmp/lept/prta/pixa2.%d.pa\", index);",
          "",
          "---------------"
        ]
      }
    }
  ]
}