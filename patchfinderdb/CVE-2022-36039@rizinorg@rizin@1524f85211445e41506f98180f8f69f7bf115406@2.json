{
  "cve_id": "CVE-2022-36039",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.4.0 and prior are vulnerable to out-of-bounds write when parsing DEX files. A user opening a malicious DEX file could be affected by this vulnerability, allowing an attacker to execute code on the user's machine. A patch is available on the `dev` branch of the repository.",
  "repo": "rizinorg/rizin",
  "patch_hash": "1524f85211445e41506f98180f8f69f7bf115406",
  "patch_info": {
    "commit_hash": "1524f85211445e41506f98180f8f69f7bf115406",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/1524f85211445e41506f98180f8f69f7bf115406",
    "files": [
      "librz/bin/format/dex/dex.c"
    ],
    "message": "fix #2969 - oob write (1 byte) in dex.c",
    "before_after_code_files": [
      "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
    ]
  },
  "patch_diff": {
    "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
      "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:  DexString *string = NULL;",
      "83:  read = rz_buf_uleb128(buf, &size);",
      "84:  data = malloc(size + 1);",
      "85:  if (!data || rz_buf_read(buf, (ut8 *)data, size) != size) {",
      "86:   free(data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:  if (UT64_ADD_OVFCHK(size, 1)) {",
      "85:   return NULL;",
      "86:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "905:  }",
      "906:  char *demangled = strdup(library + 1);",
      "907:  rz_str_replace_ch(demangled, '/', '.', 1);",
      "909:  return demangled;",
      "910: }",
      "",
      "[Removed Lines]",
      "908:  demangled[strlen(demangled) - 1] = 0;",
      "",
      "[Added Lines]",
      "912:  if (RZ_STR_ISNOTEMPTY(demangled)) {",
      "913:   demangled[strlen(demangled) - 1] = 0;",
      "914:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f674aecd2038a29e1c55a8e7dfe8917503bd3861",
      "candidate_info": {
        "commit_hash": "f674aecd2038a29e1c55a8e7dfe8917503bd3861",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/f674aecd2038a29e1c55a8e7dfe8917503bd3861",
        "files": [
          "librz/analysis/dwarf_process.c",
          "librz/bin/dwarf.c",
          "librz/include/rz_bin_dwarf.h"
        ],
        "message": "fix #2971 - null deref dwarf_process.c",
        "before_after_code_files": [
          "librz/analysis/dwarf_process.c||librz/analysis/dwarf_process.c",
          "librz/bin/dwarf.c||librz/bin/dwarf.c",
          "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/analysis/dwarf_process.c||librz/analysis/dwarf_process.c": [
          "File: librz/analysis/dwarf_process.c -> librz/analysis/dwarf_process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:      const RzBinDwarfAttrValue *val = &child_die->attr_values[i];",
          "1240:      switch (val->attr_name) {",
          "1241:      case DW_AT_name:",
          "1243:        name = val->string.content;",
          "1244:       }",
          "1245:       break;",
          "1246:      case DW_AT_linkage_name:",
          "1247:      case DW_AT_MIPS_linkage_name:",
          "1249:       has_linkage_name = true;",
          "1250:       break;",
          "1251:      case DW_AT_type:",
          "",
          "[Removed Lines]",
          "1242:       if (!get_linkage_name || !has_linkage_name) {",
          "1248:       name = val->string.content;",
          "",
          "[Added Lines]",
          "1242:       if ((!get_linkage_name || !has_linkage_name) && val->kind == DW_AT_KIND_STRING) {",
          "1248:       if (val->kind == DW_AT_KIND_STRING) {",
          "1249:        name = val->string.content;",
          "1250:       }",
          "",
          "---------------"
        ],
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1215:   return -1;",
          "1216:  }",
          "1217:  if (attr_count) {",
          "1219:   if (!die->attr_values) {",
          "1220:    return -1;",
          "1221:   }",
          "",
          "[Removed Lines]",
          "1218:   die->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);",
          "",
          "[Added Lines]",
          "1218:   die->attr_values = RZ_NEWS0(RzBinDwarfAttrValue, attr_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1725:  const char *comp_dir = NULL;",
          "1726:  ut64 line_info_offset = UT64_MAX;",
          "1727:  if (abbrev->count) {",
          "1729:    memset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));",
          "1731:    buf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],",
          "",
          "[Removed Lines]",
          "1728:   for (i = 0; i < abbrev->count - 1; i++) {",
          "",
          "[Added Lines]",
          "1728:   for (i = 0; i < abbrev->count - 1 && die->count < die->capacity; i++) {",
          "",
          "---------------"
        ],
        "librz/include/rz_bin_dwarf.h||librz/include/rz_bin_dwarf.h": [
          "File: librz/include/rz_bin_dwarf.h -> librz/include/rz_bin_dwarf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "679: } RzBinDwarfAttrDef;",
          "681: typedef struct {",
          "683:  ut8 *data;",
          "684: } RzBinDwarfBlock;",
          "",
          "[Removed Lines]",
          "682:  ut64 length;",
          "",
          "[Added Lines]",
          "683:  ut64 length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72f1e4a9cccaaf0daf4afc4e21587a3a624de24c",
      "candidate_info": {
        "commit_hash": "72f1e4a9cccaaf0daf4afc4e21587a3a624de24c",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/72f1e4a9cccaaf0daf4afc4e21587a3a624de24c",
        "files": [
          "librz/bin/p/bin_dyldcache.c"
        ],
        "message": "fix #2959 - oob write in bin_dyldcache.c",
        "before_after_code_files": [
          "librz/bin/p/bin_dyldcache.c||librz/bin/p/bin_dyldcache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/p/bin_dyldcache.c||librz/bin/p/bin_dyldcache.c": [
          "File: librz/bin/p/bin_dyldcache.c -> librz/bin/p/bin_dyldcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  opts.symbols_off = bin->symbols_off;",
          "48:  struct MACH0_(obj_t) *mach0 = MACH0_(new_buf)(buf, &opts);",
          "50:  mach0->user = cache;",
          "51:  mach0->va2pa = &bin_obj_va2pa;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:  if (!mach0) {",
          "50:   return NULL;",
          "51:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57b19a2c1b406c0c09165bf7b983f64ea0db94f0",
      "candidate_info": {
        "commit_hash": "57b19a2c1b406c0c09165bf7b983f64ea0db94f0",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/57b19a2c1b406c0c09165bf7b983f64ea0db94f0",
        "files": [
          "librz/bin/format/mach0/mach0.c",
          "librz/bin/format/mach0/mach0_rebase.c"
        ],
        "message": "fix #2965 - null deref and div by zero in mach0_rebase.c",
        "before_after_code_files": [
          "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c",
          "librz/bin/format/mach0/mach0_rebase.c||librz/bin/format/mach0/mach0_rebase.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c": [
          "File: librz/bin/format/mach0/mach0.c -> librz/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1514:    return false;",
          "1515:   }",
          "1516:   if (cur_seg->page_count > 0) {",
          "1518:    if (!page_start) {",
          "1519:     return false;",
          "1520:    }",
          "1521:    if (rz_buf_fread_at(bin->b, starts_at + seg_off + 22, (ut8 *)page_start, \"s\", cur_seg->page_count) != cur_seg->page_count * 2) {",
          "",
          "[Removed Lines]",
          "1517:    ut16 *page_start = malloc(sizeof(ut16) * cur_seg->page_count);",
          "",
          "[Added Lines]",
          "1517:    ut16 *page_start = RZ_NEWS0(ut16, cur_seg->page_count);",
          "1519:     cur_seg->page_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1599:       if (cur_seg->page_count > 0) {",
          "1600:        cur_seg->page_start = RZ_NEWS0(ut16, cur_seg->page_count);",
          "1601:        if (!cur_seg->page_start) {",
          "1602:         break;",
          "1603:        }",
          "1604:        memset(cur_seg->page_start, 0xff, sizeof(ut16) * cur_seg->page_count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1603:         cur_seg->page_count = 0;",
          "",
          "---------------"
        ],
        "librz/bin/format/mach0/mach0_rebase.c||librz/bin/format/mach0/mach0_rebase.c": [
          "File: librz/bin/format/mach0/mach0_rebase.c -> librz/bin/format/mach0/mach0_rebase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: RZ_API void MACH0_(rebase_buffer)(struct MACH0_(obj_t) * obj, ut64 off, ut8 *buf, ut64 count) {",
          "25:  rz_return_if_fail(obj && buf);",
          "26:  ut64 eob = off + count;",
          "28:  for (int i = 0; i < nsegs_to_rebase; i++) {",
          "29:   if (!obj->chained_starts[i]) {",
          "30:    continue;",
          "31:   }",
          "33:   ut64 start = obj->segs[i].fileoff;",
          "34:   ut64 end = start + obj->segs[i].filesize;",
          "36:    continue;",
          "37:   }",
          "38:   ut64 page_idx = (RZ_MAX(start, off) - start) / page_size;",
          "39:   ut64 page_end_idx = (RZ_MIN(eob, end) - start) / page_size;",
          "40:   for (; page_idx <= page_end_idx; page_idx++) {",
          "42:     break;",
          "43:    }",
          "45:    if (page_start == DYLD_CHAINED_PTR_START_NONE) {",
          "46:     continue;",
          "47:    }",
          "",
          "[Removed Lines]",
          "27:  int nsegs_to_rebase = RZ_MIN(obj->nchained_starts, obj->nsegs);",
          "32:   ut64 page_size = obj->chained_starts[i]->page_size;",
          "35:   if (end < off || start > eob) {",
          "41:    if (page_idx >= obj->chained_starts[i]->page_count) {",
          "44:    ut16 page_start = obj->chained_starts[i]->page_start[page_idx];",
          "",
          "[Added Lines]",
          "27:  ut64 nsegs_to_rebase = RZ_MIN(obj->nchained_starts, obj->nsegs);",
          "32:   struct rz_dyld_chained_starts_in_segment *segment = obj->chained_starts[i];",
          "33:   ut64 page_size = segment->page_size;",
          "36:   if (end < off || start > eob || page_size < 1) {",
          "42:    if (!segment->page_start || page_idx >= segment->page_count) {",
          "45:    ut16 page_start = segment->page_start[page_idx];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     ut64 ptr_value = raw_ptr;",
          "57:     ut64 delta;",
          "58:     ut64 stride = 8;",
          "60:     case DYLD_CHAINED_PTR_ARM64E: {",
          "61:      bool is_bind = IS_PTR_BIND(raw_ptr);",
          "62:      if (is_auth && is_bind) {",
          "",
          "[Removed Lines]",
          "59:     switch (obj->chained_starts[i]->pointer_format) {",
          "",
          "[Added Lines]",
          "60:     switch (segment->pointer_format) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:     }",
          "135:     default:",
          "136:      RZ_LOG_WARN(\"Unsupported Mach-O pointer format: %u at paddr 0x%\" PFMT64x \"\\n\",",
          "138:      goto break_it_all;",
          "139:     }",
          "140:     ut64 in_buf = cursor - off;",
          "",
          "[Removed Lines]",
          "137:       obj->chained_starts[i]->pointer_format, cursor);",
          "",
          "[Added Lines]",
          "138:       segment->pointer_format, cursor);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7211dfb38d0002c0839703c6522225a89a38cfa6",
      "candidate_info": {
        "commit_hash": "7211dfb38d0002c0839703c6522225a89a38cfa6",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/7211dfb38d0002c0839703c6522225a89a38cfa6",
        "files": [
          "librz/bin/format/mdmp/mdmp.c"
        ],
        "message": "fix #2968 - null deref in mdmp.c",
        "before_after_code_files": [
          "librz/bin/format/mdmp/mdmp.c||librz/bin/format/mdmp/mdmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/mdmp/mdmp.c||librz/bin/format/mdmp/mdmp.c": [
          "File: librz/bin/format/mdmp/mdmp.c -> librz/bin/format/mdmp/mdmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  }",
          "77: }",
          "82:   sdb_free(pe_bin->bin->kv);",
          "83:   Pe32_rz_bin_pe_free(pe_bin->bin);",
          "85:  }",
          "86: }",
          "91:   sdb_free(pe_bin->bin->kv);",
          "92:   Pe64_rz_bin_pe_free(pe_bin->bin);",
          "94:  }",
          "95: }",
          "97: void rz_bin_mdmp_free(struct rz_bin_mdmp_obj *obj) {",
          "",
          "[Removed Lines]",
          "79: static void rz_bin_mdmp_free_pe32_bin(void *pe_bin_) {",
          "80:  struct Pe32_rz_bin_mdmp_pe_bin *pe_bin = pe_bin_;",
          "81:  if (pe_bin) {",
          "84:   RZ_FREE(pe_bin);",
          "88: static void rz_bin_mdmp_free_pe64_bin(void *pe_bin_) {",
          "89:  struct Pe64_rz_bin_mdmp_pe_bin *pe_bin = pe_bin_;",
          "90:  if (pe_bin) {",
          "93:   RZ_FREE(pe_bin);",
          "",
          "[Added Lines]",
          "79: static void rz_bin_mdmp_free_pe32_bin(struct Pe32_rz_bin_mdmp_pe_bin *pe_bin) {",
          "80:  if (!pe_bin) {",
          "81:   return;",
          "82:  }",
          "83:  if (pe_bin->bin) {",
          "87:  free(pe_bin);",
          "90: static void rz_bin_mdmp_free_pe64_bin(struct Pe64_rz_bin_mdmp_pe_bin *pe_bin) {",
          "91:  if (!pe_bin) {",
          "92:   return;",
          "93:  }",
          "94:  if (pe_bin->bin) {",
          "98:  free(pe_bin);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1387: }",
          "1389: struct rz_bin_mdmp_obj *rz_bin_mdmp_new_buf(RzBuffer *buf) {",
          "1391:  struct rz_bin_mdmp_obj *obj = RZ_NEW0(struct rz_bin_mdmp_obj);",
          "1392:  if (!obj) {",
          "1393:   return NULL;",
          "1394:  }",
          "1395:  obj->kv = sdb_new0();",
          "1396:  obj->size = (ut32)rz_buf_size(buf);",
          "1413:   rz_bin_mdmp_free(obj);",
          "1414:   return NULL;",
          "1415:  }",
          "",
          "[Removed Lines]",
          "1390:  bool fail = false;",
          "1398:  fail |= (!(obj->streams.ex_threads = rz_list_new()));",
          "1399:  fail |= (!(obj->streams.memories = rz_list_newf((RzListFree)free)));",
          "1400:  fail |= (!(obj->streams.memories64.memories = rz_list_new()));",
          "1401:  fail |= (!(obj->streams.memory_infos = rz_list_newf((RzListFree)free)));",
          "1402:  fail |= (!(obj->streams.modules = rz_list_newf((RzListFree)free)));",
          "1403:  fail |= (!(obj->streams.operations = rz_list_newf((RzListFree)free)));",
          "1404:  fail |= (!(obj->streams.thread_infos = rz_list_newf((RzListFree)free)));",
          "1405:  fail |= (!(obj->streams.token_infos = rz_list_newf((RzListFree)free)));",
          "1406:  fail |= (!(obj->streams.threads = rz_list_new()));",
          "1407:  fail |= (!(obj->streams.unloaded_modules = rz_list_newf((RzListFree)free)));",
          "1409:  fail |= (!(obj->pe32_bins = rz_list_newf(rz_bin_mdmp_free_pe32_bin)));",
          "1410:  fail |= (!(obj->pe64_bins = rz_list_newf(rz_bin_mdmp_free_pe64_bin)));",
          "1412:  if (fail) {",
          "",
          "[Added Lines]",
          "1400:  if (!obj->kv ||",
          "1401:   !(obj->streams.ex_threads = rz_list_new()) ||",
          "1402:   !(obj->streams.memories = rz_list_newf((RzListFree)free)) ||",
          "1403:   !(obj->streams.memories64.memories = rz_list_new()) ||",
          "1404:   !(obj->streams.memory_infos = rz_list_newf((RzListFree)free)) ||",
          "1405:   !(obj->streams.modules = rz_list_newf((RzListFree)free)) ||",
          "1406:   !(obj->streams.operations = rz_list_newf((RzListFree)free)) ||",
          "1407:   !(obj->streams.thread_infos = rz_list_newf((RzListFree)free)) ||",
          "1408:   !(obj->streams.token_infos = rz_list_newf((RzListFree)free)) ||",
          "1409:   !(obj->streams.threads = rz_list_new()) ||",
          "1410:   !(obj->streams.unloaded_modules = rz_list_newf((RzListFree)free)) ||",
          "1411:   !(obj->pe32_bins = rz_list_newf((RzListFree)rz_bin_mdmp_free_pe32_bin)) ||",
          "1412:   !(obj->pe64_bins = rz_list_newf((RzListFree)rz_bin_mdmp_free_pe64_bin))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2c3ca7bd1694e0f53788df492f60670abfdb45b",
      "candidate_info": {
        "commit_hash": "a2c3ca7bd1694e0f53788df492f60670abfdb45b",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/a2c3ca7bd1694e0f53788df492f60670abfdb45b",
        "files": [
          "librz/bin/format/pe/pe_section.c"
        ],
        "message": "fix #2957 - oob read in pe_section.c",
        "before_after_code_files": [
          "librz/bin/format/pe/pe_section.c||librz/bin/format/pe/pe_section.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/pe/pe_section.c||librz/bin/format/pe/pe_section.c": [
          "File: librz/bin/format/pe/pe_section.c -> librz/bin/format/pe/pe_section.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:  struct rz_bin_pe_section_t *sections = NULL;",
          "245:  PE_(image_section_header) * shdr;",
          "246:  int i, j, section_count = 0;",
          "248:  if (!bin || !bin->nt_headers) {",
          "249:   return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:  char sec_name[PE_IMAGE_SIZEOF_SHORT_NAME + 1];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:    free(new_name);",
          "271:   } else if (shdr[i].Name[0] == '/') {",
          "274:    ut64 sym_tbl_off = bin->nt_headers->file_header.PointerToSymbolTable;",
          "275:    int num_symbols = bin->nt_headers->file_header.NumberOfSymbols;",
          "276:    st64 off = num_symbols * COFF_SYMBOL_SIZE;",
          "",
          "[Removed Lines]",
          "273:    int idx = atoi((const char *)shdr[i].Name + 1);",
          "",
          "[Added Lines]",
          "274:    memcpy(sec_name, shdr[i].Name, PE_IMAGE_SIZEOF_SHORT_NAME);",
          "275:    sec_name[PE_IMAGE_SIZEOF_SHORT_NAME] = '\\0';",
          "276:    int idx = atoi(sec_name + 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}