{
  "cve_id": "CVE-2018-11219",
  "cve_desc": "An Integer Overflow issue was discovered in the struct library in the Lua subsystem in Redis before 3.2.12, 4.x before 4.0.10, and 5.x before 5.0 RC2, leading to a failure of bounds checking.",
  "repo": "antirez/redis",
  "patch_hash": "e89086e09a38cc6713bcd4b9c29abf92cf393936",
  "patch_info": {
    "commit_hash": "e89086e09a38cc6713bcd4b9c29abf92cf393936",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/e89086e09a38cc6713bcd4b9c29abf92cf393936",
    "files": [
      "deps/lua/src/lua_struct.c"
    ],
    "message": "Security: fix Lua struct package offset handling.\n\nAfter the first fix to the struct package I found another similar\nproblem, which is fixed by this patch. It could be reproduced easily by\nrunning the following script:\n\n    return struct.unpack('f', \"xxxxxxxxxxxxx\",-3)\n\nThe above will access bytes before the 'data' pointer.",
    "before_after_code_files": [
      "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
    ]
  },
  "patch_diff": {
    "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c": [
      "File: deps/lua/src/lua_struct.c -> deps/lua/src/lua_struct.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "293:   const char *fmt = luaL_checkstring(L, 1);",
      "294:   size_t ld;",
      "295:   const char *data = luaL_checklstring(L, 2, &ld);",
      "298:   defaultoptions(&h);",
      "299:   while (*fmt) {",
      "300:     int opt = *fmt++;",
      "301:     size_t size = optsize(L, opt, &fmt);",
      "302:     pos += gettoalign(pos, &h, opt, size);",
      "305:     luaL_checkstack(L, 2, \"too many results\");",
      "306:     switch (opt) {",
      "",
      "[Removed Lines]",
      "296:   size_t pos = luaL_optinteger(L, 3, 1) - 1;",
      "303:     luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");",
      "",
      "[Added Lines]",
      "296:   size_t pos = luaL_optinteger(L, 3, 1);",
      "297:   luaL_argcheck(L, pos > 0, 3, \"offset must be 1 or greater\");",
      "298:   pos--; /* Lua indexes are 1-based, but here we want 0-based for C",
      "306:     luaL_argcheck(L, size <= ld && pos <= ld - size,",
      "307:                    2, \"data string too short\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e0d9841d447f9d8754a7f276b7bc622438d0b15",
      "candidate_info": {
        "commit_hash": "5e0d9841d447f9d8754a7f276b7bc622438d0b15",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/5e0d9841d447f9d8754a7f276b7bc622438d0b15",
        "files": [
          "deps/lua/src/lua_struct.c"
        ],
        "message": "Security: fix Lua struct package offset handling.\n\nAfter the first fix to the struct package I found another similar\nproblem, which is fixed by this patch. It could be reproduced easily by\nrunning the following script:\n\n    return struct.unpack('f', \"xxxxxxxxxxxxx\",-3)\n\nThe above will access bytes before the 'data' pointer.",
        "before_after_code_files": [
          "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ],
          "candidate": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ]
        }
      },
      "candidate_diff": {
        "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c": [
          "File: deps/lua/src/lua_struct.c -> deps/lua/src/lua_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   const char *fmt = luaL_checkstring(L, 1);",
          "294:   size_t ld;",
          "295:   const char *data = luaL_checklstring(L, 2, &ld);",
          "298:   defaultoptions(&h);",
          "299:   while (*fmt) {",
          "300:     int opt = *fmt++;",
          "301:     size_t size = optsize(L, opt, &fmt);",
          "302:     pos += gettoalign(pos, &h, opt, size);",
          "305:     luaL_checkstack(L, 2, \"too many results\");",
          "306:     switch (opt) {",
          "",
          "[Removed Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1) - 1;",
          "303:     luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");",
          "",
          "[Added Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1);",
          "297:   luaL_argcheck(L, pos > 0, 3, \"offset must be 1 or greater\");",
          "298:   pos--; /* Lua indexes are 1-based, but here we want 0-based for C",
          "306:     luaL_argcheck(L, size <= ld && pos <= ld - size,",
          "307:                    2, \"data string too short\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf7600714fc475b144278617078ee80da1c3f2e9",
      "candidate_info": {
        "commit_hash": "cf7600714fc475b144278617078ee80da1c3f2e9",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/cf7600714fc475b144278617078ee80da1c3f2e9",
        "files": [
          "deps/lua/src/lua_struct.c"
        ],
        "message": "Security: fix Lua struct package offset handling.\n\nAfter the first fix to the struct package I found another similar\nproblem, which is fixed by this patch. It could be reproduced easily by\nrunning the following script:\n\n    return struct.unpack('f', \"xxxxxxxxxxxxx\",-3)\n\nThe above will access bytes before the 'data' pointer.",
        "before_after_code_files": [
          "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ],
          "candidate": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ]
        }
      },
      "candidate_diff": {
        "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c": [
          "File: deps/lua/src/lua_struct.c -> deps/lua/src/lua_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   const char *fmt = luaL_checkstring(L, 1);",
          "294:   size_t ld;",
          "295:   const char *data = luaL_checklstring(L, 2, &ld);",
          "298:   defaultoptions(&h);",
          "299:   while (*fmt) {",
          "300:     int opt = *fmt++;",
          "301:     size_t size = optsize(L, opt, &fmt);",
          "302:     pos += gettoalign(pos, &h, opt, size);",
          "305:     luaL_checkstack(L, 2, \"too many results\");",
          "306:     switch (opt) {",
          "",
          "[Removed Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1) - 1;",
          "303:     luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");",
          "",
          "[Added Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1);",
          "297:   luaL_argcheck(L, pos > 0, 3, \"offset must be 1 or greater\");",
          "298:   pos--; /* Lua indexes are 1-based, but here we want 0-based for C",
          "306:     luaL_argcheck(L, size <= ld && pos <= ld - size,",
          "307:                    2, \"data string too short\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "299d5a4b2cb50f1f2d79e2f034b00cd937115db0",
      "candidate_info": {
        "commit_hash": "299d5a4b2cb50f1f2d79e2f034b00cd937115db0",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/299d5a4b2cb50f1f2d79e2f034b00cd937115db0",
        "files": [
          "deps/lua/src/lua_struct.c"
        ],
        "message": "Security: fix Lua struct package offset handling.\n\nAfter the first fix to the struct package I found another similar\nproblem, which is fixed by this patch. It could be reproduced easily by\nrunning the following script:\n\n    return struct.unpack('f', \"xxxxxxxxxxxxx\",-3)\n\nThe above will access bytes before the 'data' pointer.",
        "before_after_code_files": [
          "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ],
          "candidate": [
            "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c"
          ]
        }
      },
      "candidate_diff": {
        "deps/lua/src/lua_struct.c||deps/lua/src/lua_struct.c": [
          "File: deps/lua/src/lua_struct.c -> deps/lua/src/lua_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   const char *fmt = luaL_checkstring(L, 1);",
          "294:   size_t ld;",
          "295:   const char *data = luaL_checklstring(L, 2, &ld);",
          "298:   defaultoptions(&h);",
          "299:   while (*fmt) {",
          "300:     int opt = *fmt++;",
          "301:     size_t size = optsize(L, opt, &fmt);",
          "302:     pos += gettoalign(pos, &h, opt, size);",
          "305:     luaL_checkstack(L, 2, \"too many results\");",
          "306:     switch (opt) {",
          "",
          "[Removed Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1) - 1;",
          "303:     luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");",
          "",
          "[Added Lines]",
          "296:   size_t pos = luaL_optinteger(L, 3, 1);",
          "297:   luaL_argcheck(L, pos > 0, 3, \"offset must be 1 or greater\");",
          "298:   pos--; /* Lua indexes are 1-based, but here we want 0-based for C",
          "306:     luaL_argcheck(L, size <= ld && pos <= ld - size,",
          "307:                    2, \"data string too short\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}