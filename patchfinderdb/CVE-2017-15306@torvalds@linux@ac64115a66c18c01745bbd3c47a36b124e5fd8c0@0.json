{
  "cve_id": "CVE-2017-15306",
  "cve_desc": "The kvm_vm_ioctl_check_extension function in arch/powerpc/kvm/powerpc.c in the Linux kernel before 4.13.11 allows local users to cause a denial of service (NULL pointer dereference and system crash) via a KVM_CHECK_EXTENSION KVM_CAP_PPC_HTM ioctl call to /dev/kvm.",
  "repo": "torvalds/linux",
  "patch_hash": "ac64115a66c18c01745bbd3c47a36b124e5fd8c0",
  "patch_info": {
    "commit_hash": "ac64115a66c18c01745bbd3c47a36b124e5fd8c0",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ac64115a66c18c01745bbd3c47a36b124e5fd8c0",
    "files": [
      "arch/powerpc/kvm/powerpc.c"
    ],
    "message": "KVM: PPC: Fix oops when checking KVM_CAP_PPC_HTM\n\nThe following program causes a kernel oops:\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#include <linux/kvm.h>\n\nmain()\n{\n    int fd = open(\"/dev/kvm\", O_RDWR);\n    ioctl(fd, KVM_CHECK_EXTENSION, KVM_CAP_PPC_HTM);\n}\n\nThis happens because when using the global KVM fd with\nKVM_CHECK_EXTENSION, kvm_vm_ioctl_check_extension() gets\ncalled with a NULL kvm argument, which gets dereferenced\nin is_kvmppc_hv_enabled(). Spotted while reading the code.\n\nLet's use the hv_enabled fallback variable, like everywhere\nelse in this function.\n\nFixes: 23528bb21ee2 (\"KVM: PPC: Introduce KVM_CAP_PPC_HTM\")\nCc: stable@vger.kernel.org # v4.7+\nSigned-off-by: Greg Kurz <groug@kaod.org>\nReviewed-by: David Gibson <david@gibson.dropbear.id.au>\nReviewed-by: Thomas Huth <thuth@redhat.com>\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>",
    "before_after_code_files": [
      "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
    ]
  },
  "patch_diff": {
    "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c": [
      "File: arch/powerpc/kvm/powerpc.c -> arch/powerpc/kvm/powerpc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "644:   break;",
      "645: #endif",
      "646:  case KVM_CAP_PPC_HTM:",
      "649:   break;",
      "650:  default:",
      "651:   r = 0;",
      "",
      "[Removed Lines]",
      "647:   r = cpu_has_feature(CPU_FTR_TM_COMP) &&",
      "648:       is_kvmppc_hv_enabled(kvm);",
      "",
      "[Added Lines]",
      "647:   r = cpu_has_feature(CPU_FTR_TM_COMP) && hv_enabled;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a3d6553cbd791da4fb624c2500b4580b3f9d72f",
      "candidate_info": {
        "commit_hash": "2a3d6553cbd791da4fb624c2500b4580b3f9d72f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2a3d6553cbd791da4fb624c2500b4580b3f9d72f",
        "files": [
          "arch/powerpc/kvm/powerpc.c"
        ],
        "message": "KVM: PPC: Tie KVM_CAP_PPC_HTM to the user-visible TM feature\n\nCurrently we use CPU_FTR_TM to decide if the CPU/kernel can support\nTM (Transactional Memory), and if it's true we advertise that to\nQemu (or similar) via KVM_CAP_PPC_HTM.\n\nPPC_FEATURE2_HTM is the user-visible feature bit, which indicates that\nthe CPU and kernel can support TM. Currently CPU_FTR_TM and\nPPC_FEATURE2_HTM always have the same value, either true or false, so\nusing the former for KVM_CAP_PPC_HTM is correct.\n\nHowever some Power9 CPUs can operate in a mode where TM is enabled but\nTM suspended state is disabled. In this mode CPU_FTR_TM is true, but\nPPC_FEATURE2_HTM is false. Instead a different PPC_FEATURE2 bit is\nset, to indicate that this different mode of TM is available.\n\nIt is not safe to let guests use TM as-is, when the CPU is in this\nmode. So to prevent that from happening, use PPC_FEATURE2_HTM to\ndetermine the value of KVM_CAP_PPC_HTM.\n\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ],
          "candidate": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c": [
          "File: arch/powerpc/kvm/powerpc.c -> arch/powerpc/kvm/powerpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:   break;",
          "645: #endif",
          "646:  case KVM_CAP_PPC_HTM:",
          "649:   break;",
          "650:  default:",
          "651:   r = 0;",
          "",
          "[Removed Lines]",
          "647:   r = cpu_has_feature(CPU_FTR_TM_COMP) &&",
          "648:       is_kvmppc_hv_enabled(kvm);",
          "",
          "[Added Lines]",
          "647:   r = is_kvmppc_hv_enabled(kvm) &&",
          "648:       (cur_cpu_spec->cpu_user_features2 & PPC_FEATURE2_HTM_COMP);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bb3c7a0208fc13ca70598efd109901a7cd45ae7",
      "candidate_info": {
        "commit_hash": "4bb3c7a0208fc13ca70598efd109901a7cd45ae7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4bb3c7a0208fc13ca70598efd109901a7cd45ae7",
        "files": [
          "arch/powerpc/include/asm/kvm_asm.h",
          "arch/powerpc/include/asm/kvm_book3s.h",
          "arch/powerpc/include/asm/kvm_book3s_64.h",
          "arch/powerpc/include/asm/kvm_book3s_asm.h",
          "arch/powerpc/include/asm/kvm_host.h",
          "arch/powerpc/include/asm/ppc-opcode.h",
          "arch/powerpc/include/asm/reg.h",
          "arch/powerpc/kernel/asm-offsets.c",
          "arch/powerpc/kernel/cputable.c",
          "arch/powerpc/kernel/exceptions-64s.S",
          "arch/powerpc/kvm/Makefile",
          "arch/powerpc/kvm/book3s_hv.c",
          "arch/powerpc/kvm/book3s_hv_rmhandlers.S",
          "arch/powerpc/kvm/book3s_hv_tm.c",
          "arch/powerpc/kvm/book3s_hv_tm_builtin.c",
          "arch/powerpc/kvm/powerpc.c"
        ],
        "message": "KVM: PPC: Book3S HV: Work around transactional memory bugs in POWER9\n\nPOWER9 has hardware bugs relating to transactional memory and thread\nreconfiguration (changes to hardware SMT mode).  Specifically, the core\ndoes not have enough storage to store a complete checkpoint of all the\narchitected state for all four threads.  The DD2.2 version of POWER9\nincludes hardware modifications designed to allow hypervisor software\nto implement workarounds for these problems.  This patch implements\nthose workarounds in KVM code so that KVM guests see a full, working\ntransactional memory implementation.\n\nThe problems center around the use of TM suspended state, where the\nCPU has a checkpointed state but execution is not transactional.  The\nworkaround is to implement a \"fake suspend\" state, which looks to the\nguest like suspended state but the CPU does not store a checkpoint.\nIn this state, any instruction that would cause a transition to\ntransactional state (rfid, rfebb, mtmsrd, tresume) or would use the\ncheckpointed state (treclaim) causes a \"soft patch\" interrupt (vector\n0x1500) to the hypervisor so that it can be emulated.  The trechkpt\ninstruction also causes a soft patch interrupt.\n\nOn POWER9 DD2.2, we avoid returning to the guest in any state which\nwould require a checkpoint to be present.  The trechkpt in the guest\nentry path which would normally create that checkpoint is replaced by\neither a transition to fake suspend state, if the guest is in suspend\nstate, or a rollback to the pre-transactional state if the guest is in\ntransactional state.  Fake suspend state is indicated by a flag in the\nPACA plus a new bit in the PSSCR.  The new PSSCR bit is write-only and\nreads back as 0.\n\nOn exit from the guest, if the guest is in fake suspend state, we still\ndo the treclaim instruction as we would in real suspend state, in order\nto get into non-transactional state, but we do not save the resulting\nregister state since there was no checkpoint.\n\nEmulation of the instructions that cause a softpatch interrupt is\nhandled in two paths.  If the guest is in real suspend mode, we call\nkvmhv_p9_tm_emulation_early() to handle the cases where the guest is\ntransitioning to transactional state.  This is called before we do the\ntreclaim in the guest exit path; because we haven't done treclaim, we\ncan get back to the guest with the transaction still active.  If the\ninstruction is a case that kvmhv_p9_tm_emulation_early() doesn't\nhandle, or if the guest is in fake suspend state, then we proceed to\ndo the complete guest exit path and subsequently call\nkvmhv_p9_tm_emulation() in host context with the MMU on.  This handles\nall the cases including the cases that generate program interrupts\n(illegal instruction or TM Bad Thing) and facility unavailable\ninterrupts.\n\nThe emulation is reasonably straightforward and is mostly concerned\nwith checking for exception conditions and updating the state of\nregisters such as MSR and CR0.  The treclaim emulation takes care to\nensure that the TEXASR register gets updated as if it were the guest\ntreclaim instruction that had done failure recording, not the treclaim\ndone in hypervisor state in the guest exit path.\n\nWith this, the KVM_CAP_PPC_HTM capability returns true (1) even if\ntransactional memory is not available to host userspace.\n\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/include/asm/kvm_asm.h||arch/powerpc/include/asm/kvm_asm.h",
          "arch/powerpc/include/asm/kvm_book3s.h||arch/powerpc/include/asm/kvm_book3s.h",
          "arch/powerpc/include/asm/kvm_book3s_64.h||arch/powerpc/include/asm/kvm_book3s_64.h",
          "arch/powerpc/include/asm/kvm_book3s_asm.h||arch/powerpc/include/asm/kvm_book3s_asm.h",
          "arch/powerpc/include/asm/kvm_host.h||arch/powerpc/include/asm/kvm_host.h",
          "arch/powerpc/include/asm/ppc-opcode.h||arch/powerpc/include/asm/ppc-opcode.h",
          "arch/powerpc/include/asm/reg.h||arch/powerpc/include/asm/reg.h",
          "arch/powerpc/kernel/asm-offsets.c||arch/powerpc/kernel/asm-offsets.c",
          "arch/powerpc/kernel/cputable.c||arch/powerpc/kernel/cputable.c",
          "arch/powerpc/kernel/exceptions-64s.S||arch/powerpc/kernel/exceptions-64s.S",
          "arch/powerpc/kvm/book3s_hv.c||arch/powerpc/kvm/book3s_hv.c",
          "arch/powerpc/kvm/book3s_hv_rmhandlers.S||arch/powerpc/kvm/book3s_hv_rmhandlers.S",
          "arch/powerpc/kvm/book3s_hv_tm.c||arch/powerpc/kvm/book3s_hv_tm.c",
          "arch/powerpc/kvm/book3s_hv_tm_builtin.c||arch/powerpc/kvm/book3s_hv_tm_builtin.c",
          "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ],
          "candidate": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/kvm_asm.h||arch/powerpc/include/asm/kvm_asm.h": [
          "File: arch/powerpc/include/asm/kvm_asm.h -> arch/powerpc/include/asm/kvm_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: #define BOOK3S_INTERRUPT_HV_SOFTPATCH 0x1500",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/kvm_book3s.h||arch/powerpc/include/asm/kvm_book3s.h": [
          "File: arch/powerpc/include/asm/kvm_book3s.h -> arch/powerpc/include/asm/kvm_book3s.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:    unsigned long mask);",
          "242: extern void kvmppc_set_fscr(struct kvm_vcpu *vcpu, u64 fscr);",
          "244: extern void kvmppc_entry_trampoline(void);",
          "245: extern void kvmppc_hv_entry_trampoline(void);",
          "246: extern u32 kvmppc_alignment_dsisr(struct kvm_vcpu *vcpu, unsigned int inst);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244: extern int kvmhv_p9_tm_emulation_early(struct kvm_vcpu *vcpu);",
          "245: extern int kvmhv_p9_tm_emulation(struct kvm_vcpu *vcpu);",
          "246: extern void kvmhv_emulate_tm_rollback(struct kvm_vcpu *vcpu);",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/kvm_book3s_64.h||arch/powerpc/include/asm/kvm_book3s_64.h": [
          "File: arch/powerpc/include/asm/kvm_book3s_64.h -> arch/powerpc/include/asm/kvm_book3s_64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "472:    set_bit_le(i, map);",
          "473: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475: static inline u64 sanitize_msr(u64 msr)",
          "476: {",
          "477:  msr &= ~MSR_HV;",
          "478:  msr |= MSR_ME;",
          "479:  return msr;",
          "480: }",
          "482: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "483: static inline void copy_from_checkpoint(struct kvm_vcpu *vcpu)",
          "484: {",
          "485:  vcpu->arch.cr  = vcpu->arch.cr_tm;",
          "486:  vcpu->arch.xer = vcpu->arch.xer_tm;",
          "487:  vcpu->arch.lr  = vcpu->arch.lr_tm;",
          "488:  vcpu->arch.ctr = vcpu->arch.ctr_tm;",
          "489:  vcpu->arch.amr = vcpu->arch.amr_tm;",
          "490:  vcpu->arch.ppr = vcpu->arch.ppr_tm;",
          "491:  vcpu->arch.dscr = vcpu->arch.dscr_tm;",
          "492:  vcpu->arch.tar = vcpu->arch.tar_tm;",
          "493:  memcpy(vcpu->arch.gpr, vcpu->arch.gpr_tm,",
          "494:         sizeof(vcpu->arch.gpr));",
          "495:  vcpu->arch.fp  = vcpu->arch.fp_tm;",
          "496:  vcpu->arch.vr  = vcpu->arch.vr_tm;",
          "497:  vcpu->arch.vrsave = vcpu->arch.vrsave_tm;",
          "498: }",
          "500: static inline void copy_to_checkpoint(struct kvm_vcpu *vcpu)",
          "501: {",
          "502:  vcpu->arch.cr_tm  = vcpu->arch.cr;",
          "503:  vcpu->arch.xer_tm = vcpu->arch.xer;",
          "504:  vcpu->arch.lr_tm  = vcpu->arch.lr;",
          "505:  vcpu->arch.ctr_tm = vcpu->arch.ctr;",
          "506:  vcpu->arch.amr_tm = vcpu->arch.amr;",
          "507:  vcpu->arch.ppr_tm = vcpu->arch.ppr;",
          "508:  vcpu->arch.dscr_tm = vcpu->arch.dscr;",
          "509:  vcpu->arch.tar_tm = vcpu->arch.tar;",
          "510:  memcpy(vcpu->arch.gpr_tm, vcpu->arch.gpr,",
          "511:         sizeof(vcpu->arch.gpr));",
          "512:  vcpu->arch.fp_tm  = vcpu->arch.fp;",
          "513:  vcpu->arch.vr_tm  = vcpu->arch.vr;",
          "514:  vcpu->arch.vrsave_tm = vcpu->arch.vrsave;",
          "515: }",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/kvm_book3s_asm.h||arch/powerpc/include/asm/kvm_book3s_asm.h": [
          "File: arch/powerpc/include/asm/kvm_book3s_asm.h -> arch/powerpc/include/asm/kvm_book3s_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  u8 host_ipi;",
          "122:  struct kvm_vcpu *kvm_vcpu;",
          "123:  struct kvmppc_vcore *kvm_vcore;",
          "124:  void __iomem *xics_phys;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  u8 fake_suspend;",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/kvm_host.h||arch/powerpc/include/asm/kvm_host.h": [
          "File: arch/powerpc/include/asm/kvm_host.h -> arch/powerpc/include/asm/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:  u64 tfhar;",
          "611:  u64 texasr;",
          "612:  u64 tfiar;",
          "614:  u32 cr_tm;",
          "615:  u64 xer_tm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:  u64 orig_texasr;",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/ppc-opcode.h||arch/powerpc/include/asm/ppc-opcode.h": [
          "File: arch/powerpc/include/asm/ppc-opcode.h -> arch/powerpc/include/asm/ppc-opcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: #define PPC_INST_MSGSYNC  0x7c0006ec",
          "233: #define PPC_INST_MSGSNDP  0x7c00011c",
          "234: #define PPC_INST_MSGCLRP  0x7c00015c",
          "235: #define PPC_INST_MTTMR   0x7c0003dc",
          "236: #define PPC_INST_NOP   0x60000000",
          "237: #define PPC_INST_PASTE   0x7c20070d",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #define PPC_INST_MTMSRD   0x7c000164",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239: #define PPC_INST_POPCNTB_MASK  0xfc0007fe",
          "240: #define PPC_INST_POPCNTD  0x7c0003f4",
          "241: #define PPC_INST_POPCNTW  0x7c0002f4",
          "242: #define PPC_INST_RFCI   0x4c000066",
          "243: #define PPC_INST_RFDI   0x4c00004e",
          "244: #define PPC_INST_RFMCI   0x4c00004c",
          "245: #define PPC_INST_MFSPR   0x7c0002a6",
          "246: #define PPC_INST_MFSPR_DSCR  0x7c1102a6",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #define PPC_INST_RFEBB   0x4c000124",
          "246: #define PPC_INST_RFID   0x4c000024",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277: #define PPC_INST_TRECHKPT  0x7c0007dd",
          "278: #define PPC_INST_TRECLAIM  0x7c00075d",
          "279: #define PPC_INST_TABORT   0x7c00071d",
          "281: #define PPC_INST_NAP   0x4c000364",
          "282: #define PPC_INST_SLEEP   0x4c0003a4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: #define PPC_INST_TSR   0x7c0005dd",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/reg.h||arch/powerpc/include/asm/reg.h": [
          "File: arch/powerpc/include/asm/reg.h -> arch/powerpc/include/asm/reg.h"
        ],
        "arch/powerpc/kernel/asm-offsets.c||arch/powerpc/kernel/asm-offsets.c": [
          "File: arch/powerpc/kernel/asm-offsets.c -> arch/powerpc/kernel/asm-offsets.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:  OFFSET(VCPU_TFHAR, kvm_vcpu, arch.tfhar);",
          "569:  OFFSET(VCPU_TFIAR, kvm_vcpu, arch.tfiar);",
          "570:  OFFSET(VCPU_TEXASR, kvm_vcpu, arch.texasr);",
          "571:  OFFSET(VCPU_GPR_TM, kvm_vcpu, arch.gpr_tm);",
          "572:  OFFSET(VCPU_FPRS_TM, kvm_vcpu, arch.fp_tm.fpr);",
          "573:  OFFSET(VCPU_VRS_TM, kvm_vcpu, arch.vr_tm.vr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:  OFFSET(VCPU_ORIG_TEXASR, kvm_vcpu, arch.orig_texasr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "650:  HSTATE_FIELD(HSTATE_HOST_IPI, host_ipi);",
          "651:  HSTATE_FIELD(HSTATE_PTID, ptid);",
          "652:  HSTATE_FIELD(HSTATE_TID, tid);",
          "653:  HSTATE_FIELD(HSTATE_MMCR0, host_mmcr[0]);",
          "654:  HSTATE_FIELD(HSTATE_MMCR1, host_mmcr[1]);",
          "655:  HSTATE_FIELD(HSTATE_MMCRA, host_mmcr[2]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654:  HSTATE_FIELD(HSTATE_FAKE_SUSPEND, fake_suspend);",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/cputable.c||arch/powerpc/kernel/cputable.c": [
          "File: arch/powerpc/kernel/cputable.c -> arch/powerpc/kernel/cputable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:   .oprofile_type  = PPC_OPROFILE_INVALID,",
          "570:   .cpu_setup  = __setup_cpu_power9,",
          "571:   .cpu_restore  = __restore_cpu_power9,",
          "573:   .machine_check_early = __machine_check_early_realmode_p9,",
          "574:   .platform  = \"power9\",",
          "575:  },",
          "",
          "[Removed Lines]",
          "572:   .flush_tlb  = __flush_tlb_power9,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/exceptions-64s.S||arch/powerpc/kernel/exceptions-64s.S": [
          "File: arch/powerpc/kernel/exceptions-64s.S -> arch/powerpc/kernel/exceptions-64s.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:  bne+ denorm_assist",
          "1274: #endif",
          "1277:  EXCEPTION_PROLOG_PSERIES_1(denorm_common, EXC_HV)",
          "1278: EXC_REAL_END(denorm_exception_hv, 0x1500, 0x100)",
          "",
          "[Removed Lines]",
          "1276:  KVMTEST_PR(0x1500)",
          "",
          "[Added Lines]",
          "1276:  KVMTEST_HV(0x1500)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1285: EXC_VIRT_NONE(0x5500, 0x100)",
          "1286: #endif",
          "1290: #ifdef CONFIG_PPC_DENORMALISATION",
          "1291: TRAMP_REAL_BEGIN(denorm_assist)",
          "",
          "[Removed Lines]",
          "1288: TRAMP_KVM_SKIP(PACA_EXGEN, 0x1500)",
          "",
          "[Added Lines]",
          "1288: TRAMP_KVM_HV(PACA_EXGEN, 0x1500)",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_hv.c||arch/powerpc/kvm/book3s_hv.c": [
          "File: arch/powerpc/kvm/book3s_hv.c -> arch/powerpc/kvm/book3s_hv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206:    r = RESUME_GUEST;",
          "1207:   }",
          "1208:   break;",
          "1209:  case BOOK3S_INTERRUPT_HV_RM_HARD:",
          "1210:   r = RESUME_PASSTHROUGH;",
          "1211:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1210: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "1211:  case BOOK3S_INTERRUPT_HV_SOFTPATCH:",
          "1218:   r = kvmhv_p9_tm_emulation(vcpu);",
          "1219:   break;",
          "1220: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1980:  vcpu->arch.hfscr = mfspr(SPRN_HFSCR);",
          "1982:   vcpu->arch.hfscr &= ~HFSCR_TM;",
          "1983:  if (cpu_has_feature(CPU_FTR_ARCH_300))",
          "1984:   vcpu->arch.hfscr &= ~HFSCR_MSGP;",
          "",
          "[Removed Lines]",
          "1981:  if (!cpu_has_feature(CPU_FTR_TM))",
          "",
          "[Added Lines]",
          "1994:  if (cpu_has_feature(CPU_FTR_P9_TM_HV_ASSIST))",
          "1995:   vcpu->arch.hfscr |= HFSCR_TM;",
          "1996:  else if (!cpu_has_feature(CPU_FTR_TM_COMP))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2242:  tpaca = &paca[cpu];",
          "2243:  tpaca->kvm_hstate.kvm_vcpu = vcpu;",
          "2244:  tpaca->kvm_hstate.ptid = cpu - vc->pcpu;",
          "2246:  smp_wmb();",
          "2247:  tpaca->kvm_hstate.kvm_vcore = vc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2260:  tpaca->kvm_hstate.fake_suspend = 0;",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_hv_rmhandlers.S||arch/powerpc/kvm/book3s_hv_rmhandlers.S": [
          "File: arch/powerpc/kvm/book3s_hv_rmhandlers.S -> arch/powerpc/kvm/book3s_hv_rmhandlers.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "787: END_FTR_SECTION_IFCLR(CPU_FTR_ARCH_207S)",
          "789: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "790: BEGIN_FTR_SECTION",
          "794:  bl kvmppc_restore_tm",
          "796: #endif",
          "",
          "[Removed Lines]",
          "795: END_FTR_SECTION_IFSET(CPU_FTR_TM)",
          "",
          "[Added Lines]",
          "795:  b 91f",
          "796: END_FTR_SECTION(CPU_FTR_TM | CPU_FTR_P9_TM_HV_ASSIST, 0)",
          "801: 91:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915:  mtspr SPRN_ACOP, r6",
          "916:  mtspr SPRN_CSIGR, r7",
          "917:  mtspr SPRN_TACR, r8",
          "918: FTR_SECTION_ELSE",
          "920:  ld r5, VCPU_TID(r4)",
          "921:  ld r6, VCPU_PSSCR(r4)",
          "923:  ld r7, VCPU_HFSCR(r4)",
          "924:  mtspr SPRN_TIDR, r5",
          "925:  mtspr SPRN_PSSCR, r6",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:  nop",
          "929:  lbz r8, HSTATE_FAKE_SUSPEND(r13)",
          "931:  rldimi r6, r8, PSSCR_FAKE_SUSPEND_LG, 63 - PSSCR_FAKE_SUSPEND_LG",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1370:  std r3, VCPU_CTR(r9)",
          "1371:  std r4, VCPU_XER(r9)",
          "1374:  cmpwi r12, BOOK3S_INTERRUPT_H_DATA_STORAGE",
          "1375:  beq kvmppc_hdsi",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1382: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "1384:  cmpwi r12, BOOK3S_INTERRUPT_HV_SOFTPATCH",
          "1385:  beq kvmppc_tm_emul",
          "1386: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1729:  bl kvmppc_save_fp",
          "1731: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "1732: BEGIN_FTR_SECTION",
          "1736:  bl kvmppc_save_tm",
          "1738: #endif",
          "",
          "[Removed Lines]",
          "1737: END_FTR_SECTION_IFSET(CPU_FTR_TM)",
          "",
          "[Added Lines]",
          "1752:  b 91f",
          "1753: END_FTR_SECTION(CPU_FTR_TM | CPU_FTR_P9_TM_HV_ASSIST, 0)",
          "1758: 91:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2054:  mtlr r0",
          "2055:  blr",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "2084: kvmppc_tm_emul:",
          "2086:  mfspr r3, SPRN_HEIR",
          "2087:  stw r3, VCPU_HEIR(r9)",
          "2094:  lbz r0, HSTATE_FAKE_SUSPEND(r13)",
          "2096:  bne guest_exit_cont",
          "2097:  rldicl r3, r11, 64 - MSR_TS_S_LG, 62",
          "2099:  bne guest_exit_cont",
          "2102:  mr r3, r9",
          "2103:  bl kvmhv_p9_tm_emulation_early",
          "2104:  nop",
          "2105:  ld r9, HSTATE_KVM_VCPU(r13)",
          "2106:  li r12, BOOK3S_INTERRUPT_HV_SOFTPATCH",
          "2107:  cmpwi r3, 0",
          "2109:  ld r10, VCPU_PC(r9)",
          "2110:  ld r11, VCPU_MSR(r9)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2587:  bl kvmppc_save_fp",
          "2589: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "2590: BEGIN_FTR_SECTION",
          "2594:  ld r9, HSTATE_KVM_VCPU(r13)",
          "2595:  bl kvmppc_save_tm",
          "2597: #endif",
          "",
          "[Removed Lines]",
          "2596: END_FTR_SECTION_IFSET(CPU_FTR_TM)",
          "",
          "[Added Lines]",
          "2652:  b 91f",
          "2653: END_FTR_SECTION(CPU_FTR_TM | CPU_FTR_P9_TM_HV_ASSIST, 0)",
          "2659: 91:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2700: #endif",
          "2702: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "2703: BEGIN_FTR_SECTION",
          "2707:  bl kvmppc_restore_tm",
          "2709: #endif",
          "",
          "[Removed Lines]",
          "2708: END_FTR_SECTION_IFSET(CPU_FTR_TM)",
          "",
          "[Added Lines]",
          "2771:  b 91f",
          "2772: END_FTR_SECTION(CPU_FTR_TM | CPU_FTR_P9_TM_HV_ASSIST, 0)",
          "2777: 91:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3046:  std r1, HSTATE_HOST_R1(r13)",
          "3047:  li r3, TM_CAUSE_KVM_RESCHED",
          "3050:  li r5, 0",
          "3051:  mtmsrd r5, 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3118: BEGIN_FTR_SECTION",
          "3120:  mfspr r6, SPRN_TEXASR",
          "3121:  std r6, VCPU_ORIG_TEXASR(r9)",
          "3123:  rldicl. r8, r8, 64 - MSR_TS_S_LG, 62",
          "3124:  beq 3f",
          "3125: END_FTR_SECTION_IFSET(CPU_FTR_P9_TM_HV_ASSIST)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3057:  SET_SCRATCH0(r13)",
          "3058:  GET_PACA(r13)",
          "3059:  std r9, PACATMSCRATCH(r13)",
          "3060:  ld r9, HSTATE_KVM_VCPU(r13)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3140: BEGIN_FTR_SECTION",
          "3141: 3:",
          "3142:  lbz r9, HSTATE_FAKE_SUSPEND(r13)",
          "3143:  cmpwi r9, 0",
          "3144:  beq 2f",
          "3151:  ld r1, HSTATE_HOST_R1(r13)",
          "3152:  ld r2, PACATOC(r13)",
          "3153:  li r5, MSR_RI",
          "3154:  mtmsrd r5, 1",
          "3155:  HMT_MEDIUM",
          "3156:  ld r6, HSTATE_DSCR(r13)",
          "3157:  mtspr SPRN_DSCR, r6",
          "3158:  li r0, 0",
          "3159:  stb r0, HSTATE_FAKE_SUSPEND(r13)",
          "3160:  mfspr r3, SPRN_PSSCR",
          "3162:  li r0, PSSCR_FAKE_SUSPEND",
          "3163:  andc r3, r3, r0",
          "3164:  mtspr SPRN_PSSCR, r3",
          "3165:  ld r9, HSTATE_KVM_VCPU(r13)",
          "3166:  b 1f",
          "3167: 2:",
          "3168: END_FTR_SECTION_IFSET(CPU_FTR_P9_TM_HV_ASSIST)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3181:  oris r7, r7, (TEXASR_FS)@h",
          "3182:  mtspr SPRN_TEXASR, r7",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3299: BEGIN_FTR_SECTION",
          "3300:  b .Ldo_tm_fake_load",
          "3301: END_FTR_SECTION_IFSET(CPU_FTR_P9_TM_HV_ASSIST)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3254:  li r5, MSR_RI",
          "3255:  mtmsrd r5, 1",
          "3257:  ld r0, PPC_LR_STKOFF(r1)",
          "3258:  mtlr r0",
          "3259:  blr",
          "3260: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3375: 9:",
          "3380: .Ldo_tm_fake_load:",
          "3382:  bgt 10f",
          "3383:  stb r5, HSTATE_FAKE_SUSPEND(r13)",
          "3385: 10: stdu r1, -PPC_MIN_STKFRM(r1)",
          "3387:  mr r3, r4",
          "3388:  bl kvmhv_emulate_tm_rollback",
          "3389:  nop",
          "3391:  addi r1, r1, PPC_MIN_STKFRM",
          "3392:  b 9b",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_hv_tm.c||arch/powerpc/kvm/book3s_hv_tm.c": [
          "File: arch/powerpc/kvm/book3s_hv_tm.c -> arch/powerpc/kvm/book3s_hv_tm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <linux/kvm_host.h>",
          "11: #include <asm/kvm_ppc.h>",
          "12: #include <asm/kvm_book3s.h>",
          "13: #include <asm/kvm_book3s_64.h>",
          "14: #include <asm/reg.h>",
          "15: #include <asm/ppc-opcode.h>",
          "17: static void emulate_tx_failure(struct kvm_vcpu *vcpu, u64 failure_cause)",
          "18: {",
          "19:  u64 texasr, tfiar;",
          "20:  u64 msr = vcpu->arch.shregs.msr;",
          "22:  tfiar = vcpu->arch.pc & ~0x3ull;",
          "23:  texasr = (failure_cause << 56) | TEXASR_ABORT | TEXASR_FS | TEXASR_EXACT;",
          "24:  if (MSR_TM_SUSPENDED(vcpu->arch.shregs.msr))",
          "25:   texasr |= TEXASR_SUSP;",
          "26:  if (msr & MSR_PR) {",
          "27:   texasr |= TEXASR_PR;",
          "28:   tfiar |= 1;",
          "29:  }",
          "30:  vcpu->arch.tfiar = tfiar;",
          "32:  vcpu->arch.texasr = (vcpu->arch.texasr & 0x3ffffff) | texasr;",
          "33: }",
          "43: int kvmhv_p9_tm_emulation(struct kvm_vcpu *vcpu)",
          "44: {",
          "45:  u32 instr = vcpu->arch.emul_inst;",
          "46:  u64 msr = vcpu->arch.shregs.msr;",
          "47:  u64 newmsr, bescr;",
          "48:  int ra, rs;",
          "50:  switch (instr & 0xfc0007ff) {",
          "51:  case PPC_INST_RFID:",
          "53:   newmsr = vcpu->arch.shregs.srr1;",
          "55:   WARN_ON_ONCE(!(MSR_TM_SUSPENDED(msr) &&",
          "56:           MSR_TM_TRANSACTIONAL(newmsr) &&",
          "57:           (newmsr & MSR_TM)));",
          "58:   newmsr = sanitize_msr(newmsr);",
          "59:   vcpu->arch.shregs.msr = newmsr;",
          "60:   vcpu->arch.cfar = vcpu->arch.pc - 4;",
          "61:   vcpu->arch.pc = vcpu->arch.shregs.srr0;",
          "62:   return RESUME_GUEST;",
          "64:  case PPC_INST_RFEBB:",
          "65:   if ((msr & MSR_PR) && (vcpu->arch.vcore->pcr & PCR_ARCH_206)) {",
          "67:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "68:    return RESUME_GUEST;",
          "69:   }",
          "71:   if (!(vcpu->arch.hfscr & HFSCR_EBB)) {",
          "73:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "74:    return RESUME_GUEST;",
          "75:   }",
          "76:   if ((msr & MSR_PR) && !(vcpu->arch.fscr & FSCR_EBB)) {",
          "78:    vcpu->arch.fscr = (vcpu->arch.fscr & ~(0xffull << 56)) |",
          "79:     ((u64)FSCR_EBB_LG << 56);",
          "80:    kvmppc_book3s_queue_irqprio(vcpu, BOOK3S_INTERRUPT_FAC_UNAVAIL);",
          "81:    return RESUME_GUEST;",
          "82:   }",
          "83:   bescr = vcpu->arch.bescr;",
          "85:   WARN_ON_ONCE(!(MSR_TM_SUSPENDED(msr) &&",
          "86:           ((bescr >> 30) & 3) == 2));",
          "87:   bescr &= ~BESCR_GE;",
          "88:   if (instr & (1 << 11))",
          "89:    bescr |= BESCR_GE;",
          "90:   vcpu->arch.bescr = bescr;",
          "91:   msr = (msr & ~MSR_TS_MASK) | MSR_TS_T;",
          "92:   vcpu->arch.shregs.msr = msr;",
          "93:   vcpu->arch.cfar = vcpu->arch.pc - 4;",
          "94:   vcpu->arch.pc = vcpu->arch.ebbrr;",
          "95:   return RESUME_GUEST;",
          "97:  case PPC_INST_MTMSRD:",
          "99:   rs = (instr >> 21) & 0x1f;",
          "100:   newmsr = kvmppc_get_gpr(vcpu, rs);",
          "102:   WARN_ON_ONCE(!(MSR_TM_SUSPENDED(msr) &&",
          "103:           MSR_TM_TRANSACTIONAL(newmsr) &&",
          "104:           (newmsr & MSR_TM)));",
          "106:   newmsr = (newmsr & ~MSR_LE) | (msr & MSR_LE);",
          "107:   newmsr = sanitize_msr(newmsr);",
          "108:   vcpu->arch.shregs.msr = newmsr;",
          "109:   return RESUME_GUEST;",
          "111:  case PPC_INST_TSR:",
          "113:   if ((msr & MSR_PR) && (vcpu->arch.vcore->pcr & PCR_ARCH_206)) {",
          "115:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "116:    return RESUME_GUEST;",
          "117:   }",
          "119:   if (!(vcpu->arch.hfscr & HFSCR_TM)) {",
          "121:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "122:    return RESUME_GUEST;",
          "123:   }",
          "124:   if (!(msr & MSR_TM)) {",
          "126:    vcpu->arch.fscr = (vcpu->arch.fscr & ~(0xffull << 56)) |",
          "127:     ((u64)FSCR_TM_LG << 56);",
          "128:    kvmppc_book3s_queue_irqprio(vcpu,",
          "129:       BOOK3S_INTERRUPT_FAC_UNAVAIL);",
          "130:    return RESUME_GUEST;",
          "131:   }",
          "133:   vcpu->arch.cr = (vcpu->arch.cr & 0x0fffffff) |",
          "134:    (((msr & MSR_TS_MASK) >> MSR_TS_S_LG) << 28);",
          "136:   if (instr & (1 << 21)) {",
          "137:    if (MSR_TM_SUSPENDED(msr))",
          "138:     msr = (msr & ~MSR_TS_MASK) | MSR_TS_T;",
          "139:   } else {",
          "140:    if (MSR_TM_TRANSACTIONAL(msr))",
          "141:     msr = (msr & ~MSR_TS_MASK) | MSR_TS_S;",
          "142:   }",
          "143:   vcpu->arch.shregs.msr = msr;",
          "144:   return RESUME_GUEST;",
          "146:  case PPC_INST_TRECLAIM:",
          "148:   if (!(vcpu->arch.hfscr & HFSCR_TM)) {",
          "150:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "151:    return RESUME_GUEST;",
          "152:   }",
          "153:   if (!(msr & MSR_TM)) {",
          "155:    vcpu->arch.fscr = (vcpu->arch.fscr & ~(0xffull << 56)) |",
          "156:     ((u64)FSCR_TM_LG << 56);",
          "157:    kvmppc_book3s_queue_irqprio(vcpu,",
          "158:       BOOK3S_INTERRUPT_FAC_UNAVAIL);",
          "159:    return RESUME_GUEST;",
          "160:   }",
          "162:   if (!MSR_TM_ACTIVE(msr)) {",
          "163:    kvmppc_core_queue_program(vcpu, SRR1_PROGTM);",
          "164:    return RESUME_GUEST;",
          "165:   }",
          "167:   if (!(vcpu->arch.orig_texasr & TEXASR_FS)) {",
          "168:    ra = (instr >> 16) & 0x1f;",
          "169:    if (ra)",
          "170:     ra = kvmppc_get_gpr(vcpu, ra) & 0xff;",
          "171:    emulate_tx_failure(vcpu, ra);",
          "172:   }",
          "174:   copy_from_checkpoint(vcpu);",
          "177:   vcpu->arch.cr = (vcpu->arch.cr & 0x0fffffff) |",
          "178:    (((msr & MSR_TS_MASK) >> MSR_TS_S_LG) << 28);",
          "179:   vcpu->arch.shregs.msr &= ~MSR_TS_MASK;",
          "180:   return RESUME_GUEST;",
          "182:  case PPC_INST_TRECHKPT:",
          "185:   if (!(vcpu->arch.hfscr & HFSCR_TM)) {",
          "187:    kvmppc_core_queue_program(vcpu, SRR1_PROGILL);",
          "188:    return RESUME_GUEST;",
          "189:   }",
          "190:   if (!(msr & MSR_TM)) {",
          "192:    vcpu->arch.fscr = (vcpu->arch.fscr & ~(0xffull << 56)) |",
          "193:     ((u64)FSCR_TM_LG << 56);",
          "194:    kvmppc_book3s_queue_irqprio(vcpu,",
          "195:       BOOK3S_INTERRUPT_FAC_UNAVAIL);",
          "196:    return RESUME_GUEST;",
          "197:   }",
          "199:   if (MSR_TM_ACTIVE(msr) || !(vcpu->arch.texasr & TEXASR_FS)) {",
          "200:    kvmppc_core_queue_program(vcpu, SRR1_PROGTM);",
          "201:    return RESUME_GUEST;",
          "202:   }",
          "204:   copy_to_checkpoint(vcpu);",
          "207:   vcpu->arch.cr = (vcpu->arch.cr & 0x0fffffff) |",
          "208:    (((msr & MSR_TS_MASK) >> MSR_TS_S_LG) << 28);",
          "209:   vcpu->arch.shregs.msr = msr | MSR_TS_S;",
          "210:   return RESUME_GUEST;",
          "211:  }",
          "214:  WARN_ON_ONCE(1);",
          "215:  return RESUME_GUEST;",
          "216: }",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_hv_tm_builtin.c||arch/powerpc/kvm/book3s_hv_tm_builtin.c": [
          "File: arch/powerpc/kvm/book3s_hv_tm_builtin.c -> arch/powerpc/kvm/book3s_hv_tm_builtin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <linux/kvm_host.h>",
          "11: #include <asm/kvm_ppc.h>",
          "12: #include <asm/kvm_book3s.h>",
          "13: #include <asm/kvm_book3s_64.h>",
          "14: #include <asm/reg.h>",
          "15: #include <asm/ppc-opcode.h>",
          "23: int kvmhv_p9_tm_emulation_early(struct kvm_vcpu *vcpu)",
          "24: {",
          "25:  u32 instr = vcpu->arch.emul_inst;",
          "26:  u64 newmsr, msr, bescr;",
          "27:  int rs;",
          "29:  switch (instr & 0xfc0007ff) {",
          "30:  case PPC_INST_RFID:",
          "32:   newmsr = vcpu->arch.shregs.srr1;",
          "34:   if (!(MSR_TM_TRANSACTIONAL(newmsr) && (newmsr & MSR_TM)))",
          "35:    return 0;",
          "36:   newmsr = sanitize_msr(newmsr);",
          "37:   vcpu->arch.shregs.msr = newmsr;",
          "38:   vcpu->arch.cfar = vcpu->arch.pc - 4;",
          "39:   vcpu->arch.pc = vcpu->arch.shregs.srr0;",
          "40:   return 1;",
          "42:  case PPC_INST_RFEBB:",
          "44:   msr = vcpu->arch.shregs.msr;",
          "45:   if ((msr & MSR_PR) && (vcpu->arch.vcore->pcr & PCR_ARCH_206))",
          "46:    return 0;",
          "48:   if (!(vcpu->arch.hfscr & HFSCR_EBB) ||",
          "49:       ((msr & MSR_PR) && !(mfspr(SPRN_FSCR) & FSCR_EBB)))",
          "50:    return 0;",
          "51:   bescr = mfspr(SPRN_BESCR);",
          "53:   if (((bescr >> 30) & 3) != 2)",
          "54:    return 0;",
          "55:   bescr &= ~BESCR_GE;",
          "56:   if (instr & (1 << 11))",
          "57:    bescr |= BESCR_GE;",
          "58:   mtspr(SPRN_BESCR, bescr);",
          "59:   msr = (msr & ~MSR_TS_MASK) | MSR_TS_T;",
          "60:   vcpu->arch.shregs.msr = msr;",
          "61:   vcpu->arch.cfar = vcpu->arch.pc - 4;",
          "62:   vcpu->arch.pc = mfspr(SPRN_EBBRR);",
          "63:   return 1;",
          "65:  case PPC_INST_MTMSRD:",
          "67:   rs = (instr >> 21) & 0x1f;",
          "68:   newmsr = kvmppc_get_gpr(vcpu, rs);",
          "69:   msr = vcpu->arch.shregs.msr;",
          "71:   if (!(MSR_TM_TRANSACTIONAL(newmsr) && (newmsr & MSR_TM)))",
          "72:    return 0;",
          "74:   newmsr = (newmsr & ~MSR_LE) | (msr & MSR_LE);",
          "75:   newmsr = sanitize_msr(newmsr);",
          "76:   vcpu->arch.shregs.msr = newmsr;",
          "77:   return 1;",
          "79:  case PPC_INST_TSR:",
          "81:   msr = vcpu->arch.shregs.msr;",
          "83:   if ((msr & MSR_PR) && (vcpu->arch.vcore->pcr & PCR_ARCH_206))",
          "84:    return 0;",
          "86:   if (!(vcpu->arch.hfscr & HFSCR_TM) || !(msr & MSR_TM))",
          "87:    return 0;",
          "89:   if (instr & (1 << 21))",
          "90:    vcpu->arch.shregs.msr = (msr & ~MSR_TS_MASK) | MSR_TS_T;",
          "92:   vcpu->arch.cr = (vcpu->arch.cr & 0x0fffffff) | 0x20000000;",
          "93:   return 1;",
          "94:  }",
          "96:  return 0;",
          "97: }",
          "103: void kvmhv_emulate_tm_rollback(struct kvm_vcpu *vcpu)",
          "104: {",
          "106:  vcpu->arch.pc = vcpu->arch.tfhar;",
          "107:  copy_from_checkpoint(vcpu);",
          "108:  vcpu->arch.cr = (vcpu->arch.cr & 0x0fffffff) | 0xa0000000;",
          "109: }",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c": [
          "File: arch/powerpc/kvm/powerpc.c -> arch/powerpc/kvm/powerpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "646:   r = hv_enabled;",
          "647:   break;",
          "648: #endif",
          "649:  case KVM_CAP_PPC_HTM:",
          "650:   r = hv_enabled &&",
          "652:   break;",
          "653:  default:",
          "654:   r = 0;",
          "655:   break;",
          "",
          "[Removed Lines]",
          "651:       (cur_cpu_spec->cpu_user_features2 & PPC_FEATURE2_HTM_COMP);",
          "",
          "[Added Lines]",
          "649: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "652:       (!!(cur_cpu_spec->cpu_user_features2 & PPC_FEATURE2_HTM) ||",
          "653:        cpu_has_feature(CPU_FTR_P9_TM_HV_ASSIST));",
          "655: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d234d68eb7464c9ebd11e870404e83d3e9348406",
      "candidate_info": {
        "commit_hash": "d234d68eb7464c9ebd11e870404e83d3e9348406",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d234d68eb7464c9ebd11e870404e83d3e9348406",
        "files": [
          "arch/powerpc/kvm/powerpc.c"
        ],
        "message": "KVM: PPC: Book3S PR: Enable HTM for PR KVM for KVM_CHECK_EXTENSION ioctl\n\nWith current patch set, PR KVM now supports HTM. So this patch turns it\non for PR KVM.\n\nTested with:\nhttps://github.com/justdoitqd/publicFiles/blob/master/test_kvm_htm_cap.c\n\nSigned-off-by: Simon Guo <wei.guo.simon@gmail.com>\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>",
        "before_after_code_files": [
          "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ],
          "candidate": [
            "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/powerpc.c||arch/powerpc/kvm/powerpc.c": [
          "File: arch/powerpc/kvm/powerpc.c -> arch/powerpc/kvm/powerpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648: #endif",
          "649: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "650:  case KVM_CAP_PPC_HTM:",
          "654:   break;",
          "655: #endif",
          "656:  default:",
          "",
          "[Removed Lines]",
          "651:   r = hv_enabled &&",
          "652:       (!!(cur_cpu_spec->cpu_user_features2 & PPC_FEATURE2_HTM) ||",
          "653:        cpu_has_feature(CPU_FTR_P9_TM_HV_ASSIST));",
          "",
          "[Added Lines]",
          "651:   r = !!(cur_cpu_spec->cpu_user_features2 & PPC_FEATURE2_HTM) ||",
          "652:        (hv_enabled && cpu_has_feature(CPU_FTR_P9_TM_HV_ASSIST));",
          "",
          "---------------"
        ]
      }
    }
  ]
}