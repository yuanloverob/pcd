{
  "cve_id": "CVE-2016-0791",
  "cve_desc": "Jenkins before 1.650 and LTS before 1.642.2 do not use a constant-time algorithm to verify CSRF tokens, which makes it easier for remote attackers to bypass a CSRF protection mechanism via a brute-force approach.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "559566b1ac62ebe966613933baf1714137daeb8c",
  "patch_info": {
    "commit_hash": "559566b1ac62ebe966613933baf1714137daeb8c",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/559566b1ac62ebe966613933baf1714137daeb8c",
    "files": [
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
    ],
    "message": "[FIX SECURITY-245] Compare crumbs in constant time",
    "before_after_code_files": [
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
      "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:         if (request instanceof HttpServletRequest) {",
      "96:             String newCrumb = issueCrumb(request, salt);",
      "97:             if ((newCrumb != null) && (crumb != null)) {",
      "99:             }",
      "100:         }",
      "101:         return false;",
      "",
      "[Removed Lines]",
      "98:                 return newCrumb.equals(crumb);",
      "",
      "[Added Lines]",
      "98:                 return MessageDigest.isEqual(newCrumb.getBytes(), crumb.getBytes());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
      "candidate_info": {
        "commit_hash": "18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
        "files": [
          "core/src/main/java/hudson/util/XStream2.java",
          "test/src/test/java/hudson/util/XStream2Security247Test.java",
          "test/src/test/resources/hudson/util/XStream2Security247Test/config.xml"
        ],
        "message": "[FIX SECURITY-247] Prevent loading of MethodClosure from XML",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java",
          "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
          "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         registerConverter(new AssociatedConverterImpl(this), -10);",
          "162:         registerConverter(new DynamicProxyConverter(getMapper()) { // SECURITY-105 defense",
          "163:             @Override public boolean canConvert(Class type) {",
          "164:                 return /* this precedes NullConverter */ type != null && super.canConvert(type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         registerConverter(new BlacklistedTypesConverter(), PRIORITY_VERY_HIGH); // SECURITY-247 defense",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:     }",
          "437: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     private static class BlacklistedTypesConverter implements Converter {",
          "440:         @Override",
          "441:         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {",
          "442:             throw new UnsupportedOperationException(\"Cannot marshal MethodClosure\");",
          "443:         }",
          "445:         @Override",
          "446:         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {",
          "447:             throw new ConversionException(\"Cannot load MethodClosure for security reasons\");",
          "448:         }",
          "450:         @Override",
          "451:         public boolean canConvert(Class type) {",
          "452:             return type != null && \"org.codehaus.groovy.runtime.MethodClosure\".equals(type.getName());",
          "453:         }",
          "454:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java": [
          "File: test/src/test/java/hudson/util/XStream2Security247Test.java -> test/src/test/java/hudson/util/XStream2Security247Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.util;",
          "3: import hudson.Functions;",
          "4: import hudson.model.Items;",
          "5: import org.apache.commons.io.FileUtils;",
          "6: import org.junit.Rule;",
          "7: import org.junit.Test;",
          "8: import org.jvnet.hudson.test.Issue;",
          "9: import org.jvnet.hudson.test.JenkinsRule;",
          "11: import java.io.File;",
          "13: import static org.junit.Assert.assertFalse;",
          "15: public class XStream2Security247Test {",
          "17:     @Rule",
          "18:     public JenkinsRule j = new JenkinsRule();",
          "20:     @Test",
          "21:     @Issue(\"SECURITY-247\")",
          "22:     public void dontUnmarshalMethodClosure() throws Exception {",
          "23:         if (Functions.isWindows())  return;",
          "24:         File exploitFile = new File(\"/tmp/jenkins-security247test\");",
          "25:         try {",
          "27:             if (exploitFile.exists() && !exploitFile.delete()) {",
          "28:                 throw new IllegalStateException(\"file exists and cannot be deleted\");",
          "29:             }",
          "30:             File tempJobDir = new File(j.jenkins.getRootDir(), \"security247\");",
          "31:             FileUtils.copyInputStreamToFile(XStream2Security247Test.class.getResourceAsStream(\"/hudson/util/XStream2Security247Test/config.xml\"),",
          "32:                     new File(tempJobDir, \"config.xml\"));",
          "33:             try {",
          "34:                 Items.load(j.jenkins, tempJobDir);",
          "35:             } catch (Exception e) {",
          "37:             }",
          "38:             assertFalse(\"no file should be created here\", exploitFile.exists());",
          "39:         } finally {",
          "40:             exploitFile.delete();",
          "41:         }",
          "42:     }",
          "43: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37cea0a5e22fead9126cbf5ef5937f2cc953d9cc",
      "candidate_info": {
        "commit_hash": "37cea0a5e22fead9126cbf5ef5937f2cc953d9cc",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/37cea0a5e22fead9126cbf5ef5937f2cc953d9cc",
        "files": [
          "core/src/main/java/hudson/util/XStream2.java"
        ],
        "message": "[SECURITY-247] Need to call both overloads",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
          "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:                 return false;",
          "455:             }",
          "456:             try {",
          "457:                 ClassFilter.DEFAULT.check(type.getName());",
          "458:             } catch (SecurityException se) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:                 ClassFilter.DEFAULT.check(type);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1870fb817e8173144fb765c00764657903461130",
      "candidate_info": {
        "commit_hash": "1870fb817e8173144fb765c00764657903461130",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/1870fb817e8173144fb765c00764657903461130",
        "files": [
          "core/src/main/java/hudson/util/XStream2.java"
        ],
        "message": "[SECURITY-247] Reuse remoting's ClassFilter for better coverage",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
          "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import hudson.PluginManager;",
          "48: import hudson.PluginWrapper;",
          "49: import hudson.diagnosis.OldDataMonitor;",
          "50: import hudson.util.xstream.ImmutableSetConverter;",
          "51: import hudson.util.xstream.ImmutableSortedSetConverter;",
          "52: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import hudson.remoting.ClassFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:     private static class BlacklistedTypesConverter implements Converter {",
          "440:         @Override",
          "441:         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {",
          "443:         }",
          "445:         @Override",
          "446:         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {",
          "448:         }",
          "450:         @Override",
          "451:         public boolean canConvert(Class type) {",
          "453:         }",
          "454:     }",
          "455: }",
          "",
          "[Removed Lines]",
          "442:             throw new UnsupportedOperationException(\"Cannot marshal MethodClosure\");",
          "447:             throw new ConversionException(\"Cannot load MethodClosure for security reasons\");",
          "452:             return type != null && \"org.codehaus.groovy.runtime.MethodClosure\".equals(type.getName());",
          "",
          "[Added Lines]",
          "443:             throw new UnsupportedOperationException(\"Refusing to marshal for security reasons\");",
          "448:             throw new ConversionException(\"Refusing to unmarshal for security reasons\");",
          "453:             if (type == null) {",
          "454:                 return false;",
          "455:             }",
          "456:             try {",
          "457:                 ClassFilter.DEFAULT.check(type.getName());",
          "458:             } catch (SecurityException se) {",
          "460:                 return true;",
          "461:             }",
          "462:             return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e804fdf2746e224d175d2de764111aa22860a25",
      "candidate_info": {
        "commit_hash": "1e804fdf2746e224d175d2de764111aa22860a25",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/1e804fdf2746e224d175d2de764111aa22860a25",
        "files": [
          "test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "test/src/test/java/hudson/cli/HelpCommandTest.java"
        ],
        "message": "Looks like an interesting form of a merge conflict.",
        "before_after_code_files": [
          "test/src/test/java/hudson/cli/CLIRegistererTest.java||test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "test/src/test/java/hudson/cli/GroovyshCommandTest.java||test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "test/src/test/java/hudson/cli/HelpCommandTest.java||test/src/test/java/hudson/cli/HelpCommandTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/cli/CLIRegistererTest.java||test/src/test/java/hudson/cli/CLIRegistererTest.java": [
          "File: test/src/test/java/hudson/cli/CLIRegistererTest.java -> test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
          "4: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
          "5: import static org.hamcrest.MatcherAssert.assertThat;",
          "7: import static org.hamcrest.CoreMatchers.is;",
          "9: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "6: import static org.hamcrest.CoreMatchers.containsString;",
          "",
          "[Added Lines]",
          "6: import static org.hamcrest.Matchers.containsString;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/GroovyshCommandTest.java||test/src/test/java/hudson/cli/GroovyshCommandTest.java": [
          "File: test/src/test/java/hudson/cli/GroovyshCommandTest.java -> test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.*;",
          "28: import jenkins.model.Jenkins;",
          "29: import org.apache.tools.ant.filters.StringInputStream;",
          "31: import static org.junit.Assert.*;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "30: import static org.hamcrest.CoreMatchers.containsString;",
          "",
          "[Added Lines]",
          "30: import static org.hamcrest.Matchers.containsString;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/HelpCommandTest.java||test/src/test/java/hudson/cli/HelpCommandTest.java": [
          "File: test/src/test/java/hudson/cli/HelpCommandTest.java -> test/src/test/java/hudson/cli/HelpCommandTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.*;",
          "28: import static org.junit.Assert.*;",
          "29: import static org.hamcrest.CoreMatchers.*;",
          "30: import static org.hamcrest.text.StringContainsInOrder.stringContainsInOrder;",
          "32: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import static org.hamcrest.Matchers.*;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa8b855af393543d490c879ea037bfced0cf4b61",
      "candidate_info": {
        "commit_hash": "aa8b855af393543d490c879ea037bfced0cf4b61",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/aa8b855af393543d490c879ea037bfced0cf4b61",
        "files": [
          "test/src/test/java/hudson/util/XStream2Security247Test.java",
          "test/src/test/resources/hudson/util/XStream2Security247Test/config.xml"
        ],
        "message": "[SECURITY-247] Added doCreateItem test, improved loading test",
        "before_after_code_files": [
          "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java": [
          "File: test/src/test/java/hudson/util/XStream2Security247Test.java -> test/src/test/java/hudson/util/XStream2Security247Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.util;",
          "4: import hudson.model.Items;",
          "6: import org.junit.Rule;",
          "7: import org.junit.Test;",
          "8: import org.jvnet.hudson.test.Issue;",
          "9: import org.jvnet.hudson.test.JenkinsRule;",
          "11: import java.io.File;",
          "13: import static org.junit.Assert.assertFalse;",
          "15: public class XStream2Security247Test {",
          "17:     @Rule",
          "18:     public JenkinsRule j = new JenkinsRule();",
          "20:     @Test",
          "21:     @Issue(\"SECURITY-247\")",
          "25:         try {",
          "27:             if (exploitFile.exists() && !exploitFile.delete()) {",
          "28:                 throw new IllegalStateException(\"file exists and cannot be deleted\");",
          "29:             }",
          "30:             File tempJobDir = new File(j.jenkins.getRootDir(), \"security247\");",
          "33:             try {",
          "34:                 Items.load(j.jenkins, tempJobDir);",
          "35:             } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "3: import hudson.Functions;",
          "5: import org.apache.commons.io.FileUtils;",
          "22:     public void dontUnmarshalMethodClosure() throws Exception {",
          "23:         if (Functions.isWindows())  return;",
          "24:         File exploitFile = new File(\"/tmp/jenkins-security247test\");",
          "31:             FileUtils.copyInputStreamToFile(XStream2Security247Test.class.getResourceAsStream(\"/hudson/util/XStream2Security247Test/config.xml\"),",
          "32:                     new File(tempJobDir, \"config.xml\"));",
          "",
          "[Added Lines]",
          "4: import org.apache.commons.io.*;",
          "5: import org.apache.commons.io.IOUtils;",
          "6: import org.junit.Before;",
          "9: import org.junit.rules.TemporaryFolder;",
          "12: import org.kohsuke.stapler.StaplerRequest;",
          "13: import org.kohsuke.stapler.StaplerResponse;",
          "14: import org.mockito.Mock;",
          "15: import org.mockito.MockitoAnnotations;",
          "17: import javax.servlet.ServletInputStream;",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "23: import static org.mockito.Mockito.when;",
          "30:     @Rule",
          "31:     public TemporaryFolder f = new TemporaryFolder();",
          "33:     @Mock",
          "34:     private StaplerRequest req;",
          "36:     @Mock",
          "37:     private StaplerResponse rsp;",
          "39:     @Before",
          "40:     public void setUp() throws Exception {",
          "41:         MockitoAnnotations.initMocks(this);",
          "42:     }",
          "46:     public void testXmlLoad() throws Exception {",
          "47:         File exploitFile = f.newFile();",
          "55:             String exploitXml = org.apache.commons.io.IOUtils.toString(",
          "56:                     XStream2Security247Test.class.getResourceAsStream(",
          "57:                             \"/hudson/util/XStream2Security247Test/config.xml\"), \"UTF-8\");",
          "59:             exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());",
          "61:             FileUtils.write(new File(tempJobDir, \"config.xml\"), exploitXml);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:             exploitFile.delete();",
          "41:         }",
          "42:     }",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Test",
          "75:     @Issue(\"SECURITY-247\")",
          "76:     public void testPostJobXml() throws Exception {",
          "77:         File exploitFile = f.newFile();",
          "78:         try {",
          "80:             if (exploitFile.exists() && !exploitFile.delete()) {",
          "81:                 throw new IllegalStateException(\"file exists and cannot be deleted\");",
          "82:             }",
          "83:             File tempJobDir = new File(j.jenkins.getRootDir(), \"security247\");",
          "85:             String exploitXml = org.apache.commons.io.IOUtils.toString(",
          "86:                     XStream2Security247Test.class.getResourceAsStream(",
          "87:                             \"/hudson/util/XStream2Security247Test/config.xml\"), \"UTF-8\");",
          "89:             exploitXml = exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());",
          "91:             when(req.getMethod()).thenReturn(\"POST\");",
          "92:             when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));",
          "93:             when(req.getContentType()).thenReturn(\"application/xml\");",
          "94:             when(req.getParameter(\"name\")).thenReturn(\"foo\");",
          "96:             try {",
          "97:                 j.jenkins.doCreateItem(req, rsp);",
          "98:             } catch (Exception e) {",
          "100:             }",
          "102:             assertFalse(\"no file should be created here\", exploitFile.exists());",
          "103:         } finally {",
          "104:             exploitFile.delete();",
          "105:         }",
          "106:     }",
          "108:     private static class Stream extends ServletInputStream {",
          "109:         private final InputStream inner;",
          "111:         public Stream(final InputStream inner) {",
          "112:             this.inner = inner;",
          "113:         }",
          "115:         @Override",
          "116:         public int read() throws IOException {",
          "117:             return inner.read();",
          "118:         }",
          "119:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}