{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
      "candidate_info": {
        "commit_hash": "9443dbc493612588608e5cc6d3c46891c1c8025e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9443dbc493612588608e5cc6d3c46891c1c8025e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command so that it handles intkey pages linked into non-intkey b-trees, and vice-versa, better.\n\nFossilOrigin-Name: 9c458acba5a100a76148a3efb78ea9f57b85751e80788e4532694bd8976608a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: becaaa4d29d17ad613f2a120f0b173e53403b3de26f22beaf83f66ebf369bf60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6740:   );",
          "6741:   shellPrepare(pState->db, &rc,",
          "6742:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "6743:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6744:       \"GROUP BY cell\", &pCells",
          "6745:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6743:       \", min(field) \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6758:     int bNoop = 0;",
          "6759:     RecoverTable *pTab;",
          "6761:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6762:     if( bNoop || rc ) continue;",
          "6763:     if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6762:     assert( bIntkey==0 || bIntkey==1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6779:       sqlite3_bind_int(pCells, 1, iPgno);",
          "6780:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6781:         int nField = sqlite3_column_int(pCells, 0);",
          "6782:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6784:         nField = nField+1;",
          "6786:           raw_printf(pState->out,",
          "6787:               \"INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\\n\",",
          "6790:           );",
          "6791:         }else{",
          "6792:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6794:           );",
          "6795:         }",
          "6796:       }",
          "",
          "[Removed Lines]",
          "6785:         if( pTab==pOrphan ){",
          "6788:               pTab->zQuoted, iRoot, iPgno, nField,",
          "6789:               bIntkey ? \"\" : \"NULL, \", zVal, pTab->azlCol[nField]",
          "6793:               pTab->zQuoted, pTab->azlCol[nField], zVal",
          "",
          "[Added Lines]",
          "6784:         int iMin = sqlite3_column_int(pCells, 2);",
          "6787:         RecoverTable *pTab2 = pTab;",
          "6788:         if( pTab!=pOrphan && (iMin<0)!=bIntkey ){",
          "6789:           if( pOrphan==0 ){",
          "6790:             pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "6791:           }",
          "6792:           pTab2 = pOrphan;",
          "6793:           if( pTab2==0 ) break;",
          "6794:         }",
          "6797:         if( pTab2==pOrphan ){",
          "6800:               pTab2->zQuoted, iRoot, iPgno, nField,",
          "6801:               iMin<0 ? \"\" : \"NULL, \", zVal, pTab2->azlCol[nField]",
          "6805:               pTab2->zQuoted, pTab2->azlCol[nField], zVal",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
      "candidate_info": {
        "commit_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e46201e264082d02490e20f778b3f0fc00ba136f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c",
          "test/fkey8.test"
        ],
        "message": "Fix a bug in the code that detects self-referencing rows as part of foreign key processing. Fix for [50d2a6c2].\n\nFossilOrigin-Name: 16fff05347f42fe9fa0f3150290b98b59a9bb921e49dc07ca397aa1de7a7e17d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddf06db702761d663119d508afe21d7dfebe963d576bb42fc2f2024205ab86f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:       pNe = sqlite3PExpr(pParse, TK_NE, pLeft, pRight);",
          "616:     }else{",
          "617:       Expr *pEq, *pAll = 0;",
          "619:       assert( pIdx!=0 );",
          "621:         i16 iCol = pIdx->aiColumn[i];",
          "622:         assert( iCol>=0 );",
          "623:         pLeft = exprTableRegister(pParse, pTab, regData, iCol);",
          "626:         pAll = sqlite3ExprAnd(db, pAll, pEq);",
          "627:       }",
          "628:       pNe = sqlite3PExpr(pParse, TK_NOT, pAll, 0);",
          "",
          "[Removed Lines]",
          "618:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "620:       for(i=0; i<pPk->nKeyCol; i++){",
          "624:         pRight = exprTableColumn(db, pTab, pSrc->a[0].iCursor, iCol);",
          "625:         pEq = sqlite3PExpr(pParse, TK_EQ, pLeft, pRight);",
          "",
          "[Added Lines]",
          "622:       for(i=0; i<pIdx->nKeyCol; i++){",
          "626:         pRight = sqlite3Expr(db, TK_ID, pTab->aCol[iCol].zName);",
          "627:         pEq = sqlite3PExpr(pParse, TK_IS, pLeft, pRight);",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   DELETE FROM p3 WHERE a=1",
          "165: } {1 {FOREIGN KEY constraint failed}}",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: do_execsql_test 3.0 {",
          "169:   PRAGMA foreign_keys=ON;",
          "170:   CREATE TABLE t2(",
          "171:     a PRIMARY KEY, b, c, d, e,",
          "172:       FOREIGN KEY(b, c) REFERENCES t2(d, e)",
          "173:   ) WITHOUT ROWID;",
          "174:   CREATE UNIQUE INDEX idx ON t2(d, e);",
          "176:   INSERT INTO t2 VALUES(1, 'one', 'one', 'one', 'one'); -- row is parent of self",
          "177:   INSERT INTO t2 VALUES(2, 'one', 'one', 'one', NULL);  -- parent is row 1",
          "178: }",
          "180: do_catchsql_test 3.1 {",
          "181:   DELETE FROM t2 WHERE a=1;",
          "182: } {1 {FOREIGN KEY constraint failed}}",
          "184: do_execsql_test 4.0 {",
          "185:   CREATE TABLE t1 (",
          "186:       c1 PRIMARY KEY,",
          "187:       c2 NUMERIC,",
          "188:       FOREIGN KEY(c1) REFERENCES t1(c2)",
          "189:       ) WITHOUT ROWID ;",
          "190:   CREATE INDEX t1c1 ON t1(c1);",
          "191:   CREATE UNIQUE INDEX t1c1unique ON t1(c2);",
          "192: }",
          "193: do_catchsql_test 4.1 {",
          "194:   INSERT OR REPLACE INTO t1 VALUES(10000, 20000);",
          "195: } {1 {FOREIGN KEY constraint failed}}",
          "196: do_execsql_test 4.2 {",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "018dbb17a8edc12f35bac21db8986dff21067273",
      "candidate_info": {
        "commit_hash": "018dbb17a8edc12f35bac21db8986dff21067273",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/018dbb17a8edc12f35bac21db8986dff21067273",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Improvements to a comment.  No code changes.\n\nFossilOrigin-Name: 1a3671c7003bfff817a8239424c2f945d9dfced97daadb5a5acab203b9bda69b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 752679aea5a6bbde24cbf39e2fa018f7dd1c226d463ca4bd74125303b2255170",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c"
        ]
      }
    },
    {
      "candidate_hash": "b0c4c949966415a7f31d3862213527fd2d8ab0e7",
      "candidate_info": {
        "commit_hash": "b0c4c949966415a7f31d3862213527fd2d8ab0e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0c4c949966415a7f31d3862213527fd2d8ab0e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test",
          "test/dbfuzz001.test"
        ],
        "message": "Fix a potential problem with \"INSERT INTO ... SELECT * FROM\" (or VACUUM) statements on a corrupted database.\n\nFossilOrigin-Name: db4b4c2c1e9f1adacfb1b2fedb717a4d8bb0a299c3b11835404a99fcd67bf24b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b536f6fd8d58800042f130842f0586aaa357841ee0d1b690a9815c865d50826",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:   if( pKey ){",
          "807:     assert( nKey==(i64)(int)nKey );",
          "809:     if( pIdxKey==0 ) return SQLITE_NOMEM_BKPT;",
          "812:       rc = SQLITE_CORRUPT_BKPT;",
          "813:       goto moveto_done;",
          "814:     }",
          "",
          "[Removed Lines]",
          "808:     pIdxKey = sqlite3VdbeAllocUnpackedRecord(pCur->pKeyInfo);",
          "810:     sqlite3VdbeRecordUnpack(pCur->pKeyInfo, (int)nKey, pKey, pIdxKey);",
          "811:     if( pIdxKey->nField==0 ){",
          "",
          "[Added Lines]",
          "807:     KeyInfo *pKeyInfo = pCur->pKeyInfo;",
          "809:     pIdxKey = sqlite3VdbeAllocUnpackedRecord(pKeyInfo);",
          "811:     sqlite3VdbeRecordUnpack(pKeyInfo, (int)nKey, pKey, pIdxKey);",
          "812:     if( pIdxKey->nField==0 || pIdxKey->nField>pKeyInfo->nAllField ){",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   SELECT b,c FROM t1 ORDER BY a;",
          "231: } {1 {database disk image is malformed}}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: reset_db",
          "235: do_execsql_test 3.0 {",
          "236:   CREATE TABLE t1(a, b, c, d INTEGER PRIMARY KEY);",
          "237:   CREATE TABLE t2(a, b, c, d INTEGER PRIMARY KEY);",
          "239:   INSERT INTO t1(a, b, c, d) VALUES (1, 2, 3, 100), (4, 5, 6, 101);",
          "240:   INSERT INTO t2(a, b, c, d) VALUES (1, 100, 3, 1000), (4, 101, 6, 1001);",
          "242:   CREATE INDEX t1a ON t1(a);",
          "243:   CREATE INDEX t2a ON t2(a, b, c);",
          "245:   PRAGMA writable_schema = 1;",
          "246:   UPDATE sqlite_master SET sql = 'CREATE INDEX t2a ON t2(a)' WHERE name='t2a';",
          "247: }",
          "249: db close",
          "250: sqlite3 db test.db",
          "252: do_catchsql_test 3.1 {",
          "253:   INSERT INTO t1 SELECT * FROM t2;",
          "254: } {1 {database disk image is malformed}}",
          "256: #-------------------------------------------------------------------------",
          "257: reset_db",
          "258: do_test 4.0 {",
          "259:   sqlite3 db {}",
          "260:   db deserialize [decode_hexdb {",
          "261: | size 4096 pagesize 512 filename crash-6b48ba69806134.db",
          "262: | page 1 offset 0",
          "263: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "264: |     16: 02 00 01 01 00 40 20 20 00 ff ff ff ff 00 00 07   .....@  ........",
          "265: |     32: 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 04   ................",
          "266: |     48: 00 00 00 00 00 00 00 05 00 eb 00 01 00 00 00 00   ................",
          "267: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c   ................",
          "268: |     96: 00 2e 2c 50 0d 00 00 00 06 01 06 00 01 da 01 b0   ..,P............",
          "269: |    112: 05 56 01 86 01 2a 01 06 00 00 00 00 00 00 00 00   .V...*..........",
          "270: |    128: 00 ff 00 00 ff ff ff e1 00 00 00 00 00 00 00 00   ................",
          "271: |    144: 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00   ................",
          "272: |    160: 00 00 00 00 00 00 00 00 f2 00 00 00 00 00 00 00   ................",
          "273: |    176: 00 00 f9 ff ff ff ff ff ff ff 00 00 00 00 00 fb   ................",
          "274: |    208: 00 00 00 00 00 00 00 00 1e 00 00 00 fe 00 00 00   ................",
          "275: |    224: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ca 00   ................",
          "276: |    256: 00 00 00 00 ef ff 22 07 06 17 11 11 01 31 74 61   .............1ta",
          "277: |    272: 62 6c 65 74 38 38 74 04 43 52 45 41 54 45 20 54   blet88t.CREATE T",
          "278: |    288: 41 42 4c 45 20 74 34 28 87 29 2a 06 06 17 13 11   ABLE t4(.)*.....",
          "279: |    304: 01 3f 69 4f 64 65 78 74 33 78 74 33 05 43 52 45   .?iOdext3xt3.CRE",
          "280: |    320: 41 54 45 20 49 6e 44 45 58 20 74 33 78 20 4f 4e   ATE InDEX t3x ON",
          "281: |    336: 20 74 33 28 78 29 2e 04 06 17 15 11 01 45 69 6e    t3(x).......Ein",
          "282: |    352: 64 65 2e 74 32 63 64 74 3d 05 43 52 45 41 54 45   de.t2cdt=.CREATE",
          "283: |    368: 20 49 4e 44 45 58 20 74 32 63 64 20 4f 4e 20 74    INDEX t2cd ON t",
          "284: |    384: 32 28 0a 0c 44 29 28 05 06 17 11 11 01 3d 74 61   2(..D)(......=ta",
          "285: |    400: 62 6c 65 d4 33 74 33 04 43 52 45 41 54 45 20 54   ble.3t3.CREATE T",
          "286: |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "287: |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "288: |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "289: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "290: |    480: 01 35 74 60 62 6c 65 74 31 74 31 02 43 52 45 41   .5t`blet1t1.CREA",
          "291: |    496: 54 45 20 54 41 42 4c 45 20 74 30 28 61 2c 62 29   TE TABLE t0(a,b)",
          "292: | page 2 offset 512",
          "293: |      0: 0d 00 ff 11 04 01 cf 00 01 fa 01 f3 01 de 01 cf   ................",
          "294: |     32: 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 13   ................",
          "295: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 20 00 00   ............. ..",
          "296: |     64: 00 00 00 00 00 00 f8 ff ff ff 00 00 00 00 00 00   ................",
          "297: |    160: 01 64 00 00 00 00 00 80 ff ff ff 00 00 00 00 00   .d..............",
          "298: |    176: 00 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 03   ................",
          "299: |    192: 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00   ..@.............",
          "300: |    288: 00 00 00 00 00 00 ff ff ff e9 00 00 00 00 00 00   ................",
          "301: |    336: 01 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00   ................",
          "302: |    368: 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ...............",
          "303: |    384: 00 de ff 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "304: |    464: 00 00 00 00 00 13 76 65 6e 65 69 67 68 74 13 03   ......veneight..",
          "305: |    480: 03 40 07 07 14 00 54 45 20 49 4e 44 45 58 20 74   .@....TE INDEX t",
          "306: |    496: 32 63 64 20 4f 4e 20 74 32 28 0a 0c 44 09 01 02   2cd ON t2(..D...",
          "307: | page 3 offset 1024",
          "308: |      0: 0d 00 00 00 48 01 54 00 01 f7 01 ec 01 c5 01 aa   ....H.T.........",
          "309: |     16: 30 34 28 87 29 2a 06 06 17 13 11 01 3f 69 4f 64   04(.)*......?iOd",
          "310: |     32: 65 79 74 33 78 74 33 6d 6d 6d 6d 6d 6d 7d 6d 6d   eyt3xt3mmmmmm.mm",
          "311: |     48: 6d 41 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d   mAmmmmmmmmmmmmmm",
          "312: |     64: 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 66 6d 6d 6d 6d   mmmmmmmmmmmfmmmm",
          "313: |     80: 6d 4e 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d   mNmmmmmmmmmmmmmm",
          "314: |     96: 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d   mmmmmmmmmmmmmmmm",
          "315: |    112: 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d   mmmmmmmmmmmmmmmm",
          "316: |    128: 6d 6d 6d 6d 6d 00 00 00 00 00 00 00 00 00 00 00   mmmmm...........",
          "317: |    160: 80 00 00 00 00 00 00 03 00 00 00 ff e4 00 00 00   ................",
          "318: |    208: 00 00 00 00 00 00 00 00 00 00 00 00 00 c5 00 00   ................",
          "319: |    240: 14 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00   ................",
          "320: |    256: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f ec   ................",
          "321: |    304: 00 00 00 00 19 08 05 17 17 17 17 65 69 67 68 74   ...........eight",
          "322: |    320: 65 69 67 68 74 73 65 00 00 00 00 00 00 00 00 00   eightse.........",
          "323: |    336: 00 00 00 00 19 08 05 17 17 17 17 65 69 67 68 74   ...........eight",
          "324: |    352: 65 69 67 68 74 73 65 01 65 6e 00 00 00 10 25 07   eightse.en....%.",
          "325: |    368: 07 6e 25 07 07 07 40 18 00 00 00 00 00 00 40 18   .n%...@.......@.",
          "326: |    384: 00 00 00 00 00 00 40 14 00 00 00 00 00 00 40 14   ......@.......@.",
          "327: |    400: 00 00 00 00 00 00 09 06 05 01 01 01 01 04 04 03   ................",
          "328: |    416: 03 07 05 05 01 01 09 09 02 02 19 04 05 17 17 17   ................",
          "329: |    432: 17 10 65 76 65 6e 65 69 67 68 74 65 69 67 68 74   ..eveneighteight",
          "330: |    448: 73 65 76 65 6e 25 03 05 07 07 07 07 40 14 00 00   seven%......@...",
          "331: |    464: 00 00 00 00 40 18 00 00 00 00 00 00 40 18 00 00   ....@.......@...",
          "332: |    480: 00 00 00 00 40 14 00 00 00 00 e8 f6 09 02 00 00   ....@...........",
          "333: |    496: 00 00 00 00 00 00 00 00 00 00 64 00 00 00 00 02   ..........d.....",
          "334: | page 4 offset 1536",
          "335: |      0: 0d 00 00 00 00 02 00 00 00 00 00 00 00 00 00 fa   ................",
          "336: |     16: 1f a1 07 00 00 00 00 00 01 00 00 00 00 00 00 00   ................",
          "337: |     32: 00 00 00 00 00 00 00 00 00 00 00 00 00 73 69 6d   .............sim",
          "338: |     48: 70 6c 65 00 00 00 00 00 00 00 00 00 00 00 00 00   ple.............",
          "339: |     80: 00 00 00 00 00 10 00 00 00 00 00 00 01 00 00 00   ................",
          "340: |     96: 00 00 00 00 00 00 00 00 00 00 00 00 00 fe ff ff   ................",
          "341: |    112: ff 00 00 00 00 00 00 00 00 00 00 00 4a 00 00 00   ............J...",
          "342: |    144: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "343: |    176: e5 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "344: |    208: 00 00 00 00 00 00 00 00 00 00 36 36 00 00 00 00   ..........66....",
          "345: |    240: 00 00 00 6c 00 00 00 00 00 00 00 00 00 00 00 00   ...l............",
          "346: |    256: 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "347: |    320: 00 00 00 00 00 00 00 00 01 00 00 02 00 80 00 00   ................",
          "348: |    336: 00 00 00 00 00 19 08 05 17 17 17 17 65 69 67 68   ............eigh",
          "349: |    352: 74 65 69 67 68 74 73 65 76 65 6e 73 65 76 65 6e   teightsevenseven",
          "350: |    368: 25 07 05 07 07 07 07 40 18 00 00 00 00 00 00 40   %......@.......@",
          "351: |    384: 18 00 20 00 00 00 40 00 14 00 00 00 00 00 00 40   .. ...@........@",
          "352: |    400: 14 00 00 00 00 00 1c 09 06 05 01 01 01 01 04 04   ................",
          "353: |    416: 03 03 07 05 05 01 01 00 00 00 00 00 00 00 00 00   ................",
          "354: |    448: 74 73 65 76 65 6e 00 80 ff ff 00 00 00 00 00 aa   tseven..........",
          "355: |    464: 00 9e 00 00 00 00 00 00 00 00 00 00 00 70 6f 72   .............por",
          "356: |    480: 74 65 72 00 00 00 00 00 00 00 00 00 00 00 00 00   ter.............",
          "357: |    496: 00 00 00 00 00 00 29 00 00 00 00 00 00 00 00 00   ......).........",
          "358: | page 5 offset 2048",
          "359: |      0: 0a 00 00 00 08 01 96 00 01 fa 01 c5 01 f2 01 bc   ................",
          "360: |     16: 01 dc 01 a6 01 96 01 cc 00 00 00 00 00 00 00 00   ................",
          "361: |    112: 00 00 00 09 00 00 00 00 01 00 00 00 00 00 00 00   ................",
          "362: |    160: 74 72 69 67 62 ff ff ff ff fc 00 00 00 00 00 00   trigb...........",
          "363: |    240: 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00   ................",
          "364: |    256: e5 ff ff ff 00 00 54 00 00 00 00 00 00 00 00 00   ......T.........",
          "365: |    304: 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00 00   ................",
          "366: |    400: 00 00 00 00 00 09 00 00 00 00 01 00 00 00 00 00   ................",
          "367: |    448: 00 00 74 72 69 67 62 ff ff ff ff fc 00 00 07 05   ..trigb.........",
          "368: |    464: 05 01 01 09 09 02 02 19 04 05 17 17 17 17 10 65   ...............e",
          "369: |    480: 76 65 6e 65 69 67 68 74 65 40 18 00 00 00 00 01   veneighte@......",
          "370: |    496: 02 03 07 04 01 01 01 03 04 02 05 04 09 01 ff fd   ................",
          "371: | end crash-6b48ba69806134.db",
          "372: }]} {}",
          "374: do_catchsql_test 4.1 {",
          "375:   INSERT INTO t3 SELECT * FROM t2;",
          "376: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "347: |    496: 04 03 03 02 01 04 03 02 02 01 02 03 01 02 01 02   ................",
          "348: | end x/c02.db",
          "349:   }]",
          "353: } {}",
          "355: finish_test",
          "",
          "[Removed Lines]",
          "350:   execsql {",
          "351:     DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "352:   }",
          "",
          "[Added Lines]",
          "352: do_catchsql_test dbfuzz001-120 {",
          "353:   PRAGMA integrity_check;",
          "354: } {1 {database disk image is malformed}}",
          "356: do_catchsql_test dbfuzz001-130 {",
          "357:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "358: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
      "candidate_info": {
        "commit_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf1747b78259462caad907eecb10750993ee7e4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "The collating sequence of the column must be TEXT if the LIKE or GLOB pattern starts with a \"+\" sign.  This is another case of ticket [c94369cae9b561b1f996d005] that was discovered by Manuel Rigger.\n\nFossilOrigin-Name: b043a54c3de54b286c4eae564eab6b99118a410d99bdb63480faba3123d2ca11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e897702f8f789fe5119b9042fb93eca3fbfcc44564fbfa66c65628725b1157d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || (zNew[0]+1=='0' && iTo==1)",
          "281:         ){",
          "282:           if( pLeft->op!=TK_COLUMN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:          || zNew[0]=='+'",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   `--SEARCH TABLE t5b USING COVERING INDEX sqlite_autoindex_t5b_1 (x>? AND x<?)",
          "179: }",
          "181: # 2019-02-27",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # 2019-05-01",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "186:   CREATE INDEX t5c_0 ON t5c(c0 COLLATE NOCASE);",
          "187:   INSERT INTO t5c(rowid, c0) VALUES (99,'+/');",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "",
          "---------------"
        ]
      }
    }
  ]
}