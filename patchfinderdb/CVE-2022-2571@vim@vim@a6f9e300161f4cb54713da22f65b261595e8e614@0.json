{
  "cve_id": "CVE-2022-2571",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0101.",
  "repo": "vim/vim",
  "patch_hash": "a6f9e300161f4cb54713da22f65b261595e8e614",
  "patch_info": {
    "commit_hash": "a6f9e300161f4cb54713da22f65b261595e8e614",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/a6f9e300161f4cb54713da22f65b261595e8e614",
    "files": [
      "src/insexpand.c",
      "src/testdir/test_ins_complete.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0102: reading past end of line with insert mode completion\n\nProblem:    Reading past end of line with insert mode completion.\nSolution:   Check text length.",
    "before_after_code_files": [
      "src/insexpand.c||src/insexpand.c",
      "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/insexpand.c||src/insexpand.c": [
      "File: src/insexpand.c -> src/insexpand.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3501:     {",
      "3502:  char_u *tmp_ptr = ptr;",
      "3505:  {",
      "3506:      tmp_ptr += compl_length;",
      "",
      "[Removed Lines]",
      "3504:  if (compl_status_adding())",
      "",
      "[Added Lines]",
      "3504:  if (compl_status_adding() && compl_length <= (int)STRLEN(tmp_ptr))",
      "",
      "---------------"
    ],
    "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim": [
      "File: src/testdir/test_ins_complete.vim -> src/testdir/test_ins_complete.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "2143:   bwipe!",
      "2144: endfunc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2146: func Test_ins_complete_end_of_line()",
      "2147:   \" this was reading past the end of the line",
      "2148:   new",
      "2149:   norm 8o\u0080\u00fd",
      "2150:   sil! norm o\u0010\u0018\u0010\u0018\u0010",
      "2152:   bwipe!",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     101,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     102,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d2e007ccbfbd749a1f201d06965b8811ff50e6e",
      "candidate_info": {
        "commit_hash": "5d2e007ccbfbd749a1f201d06965b8811ff50e6e",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5d2e007ccbfbd749a1f201d06965b8811ff50e6e",
        "files": [
          "src/insexpand.c",
          "src/testdir/test_ins_complete.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3944: insert mode completion functions are too long\n\nProblem:    Insert mode completion functions are too long.\nSolution:   Split up into multiple functions. (Yegappan Lakshmanan,\n            closes #9431)",
        "before_after_code_files": [
          "src/insexpand.c||src/insexpand.c",
          "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/insexpand.c||src/insexpand.c",
            "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/insexpand.c||src/insexpand.c",
            "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1822:     ins_compl_addleader(c);",
          "1823: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1831:     static int",
          "1832: set_ctrl_x_mode(int c)",
          "1833: {",
          "1834:     int retval = FALSE;",
          "1836:     switch (c)",
          "1837:     {",
          "1838:  case Ctrl_E:",
          "1839:  case Ctrl_Y:",
          "1841:      ctrl_x_mode = CTRL_X_SCROLL;",
          "1842:      if (!(State & REPLACE_FLAG))",
          "1843:   edit_submode = (char_u *)_(\" (insert) Scroll (^E/^Y)\");",
          "1844:      else",
          "1845:   edit_submode = (char_u *)_(\" (replace) Scroll (^E/^Y)\");",
          "1846:      edit_submode_pre = NULL;",
          "1847:      showmode();",
          "1848:      break;",
          "1849:  case Ctrl_L:",
          "1851:      ctrl_x_mode = CTRL_X_WHOLE_LINE;",
          "1852:      break;",
          "1853:  case Ctrl_F:",
          "1855:      ctrl_x_mode = CTRL_X_FILES;",
          "1856:      break;",
          "1857:  case Ctrl_K:",
          "1859:      ctrl_x_mode = CTRL_X_DICTIONARY;",
          "1860:      break;",
          "1861:  case Ctrl_R:",
          "1864:      break;",
          "1865:  case Ctrl_T:",
          "1867:      ctrl_x_mode = CTRL_X_THESAURUS;",
          "1868:      break;",
          "1869: #ifdef FEAT_COMPL_FUNC",
          "1870:  case Ctrl_U:",
          "1872:      ctrl_x_mode = CTRL_X_FUNCTION;",
          "1873:      break;",
          "1874:  case Ctrl_O:",
          "1876:      ctrl_x_mode = CTRL_X_OMNI;",
          "1877:      break;",
          "1878: #endif",
          "1879:  case 's':",
          "1880:  case Ctrl_S:",
          "1882:      ctrl_x_mode = CTRL_X_SPELL;",
          "1883: #ifdef FEAT_SPELL",
          "1884:      ++emsg_off; // Avoid getting the E756 error twice.",
          "1885:      spell_back_to_badword();",
          "1886:      --emsg_off;",
          "1887: #endif",
          "1888:      break;",
          "1889:  case Ctrl_RSB:",
          "1891:      ctrl_x_mode = CTRL_X_TAGS;",
          "1892:      break;",
          "1893: #ifdef FEAT_FIND_ID",
          "1894:  case Ctrl_I:",
          "1895:  case K_S_TAB:",
          "1897:      ctrl_x_mode = CTRL_X_PATH_PATTERNS;",
          "1898:      break;",
          "1899:  case Ctrl_D:",
          "1901:      ctrl_x_mode = CTRL_X_PATH_DEFINES;",
          "1902:      break;",
          "1903: #endif",
          "1904:  case Ctrl_V:",
          "1905:  case Ctrl_Q:",
          "1907:      ctrl_x_mode = CTRL_X_CMDLINE;",
          "1908:      break;",
          "1909:  case Ctrl_Z:",
          "1911:      ctrl_x_mode = CTRL_X_NORMAL;",
          "1912:      edit_submode = NULL;",
          "1913:      showmode();",
          "1914:      retval = TRUE;",
          "1915:      break;",
          "1916:  case Ctrl_P:",
          "1917:  case Ctrl_N:",
          "1925:      if (!(compl_cont_status & CONT_INTRPT))",
          "1926:   compl_cont_status |= CONT_LOCAL;",
          "1927:      else if (compl_cont_mode != 0)",
          "1928:   compl_cont_status &= ~CONT_LOCAL;",
          "1930:  default:",
          "1941:      if (c == Ctrl_X)",
          "1942:      {",
          "1943:   if (compl_cont_mode != 0)",
          "1944:       compl_cont_status = 0;",
          "1945:   else",
          "1946:       compl_cont_mode = CTRL_X_NOT_DEFINED_YET;",
          "1947:      }",
          "1948:      ctrl_x_mode = CTRL_X_NORMAL;",
          "1949:      edit_submode = NULL;",
          "1950:      showmode();",
          "1951:      break;",
          "1952:     }",
          "1954:     return retval;",
          "1955: }",
          "1960:     static int",
          "1961: ins_compl_stop(int c, int prev_mode, int retval)",
          "1962: {",
          "1963:     char_u *ptr;",
          "1964: #ifdef FEAT_CINDENT",
          "1965:     int  want_cindent;",
          "1966: #endif",
          "1971:     if (compl_curr_match != NULL || compl_leader != NULL || c == Ctrl_E)",
          "1972:     {",
          "1979:  if (compl_curr_match != NULL && compl_used_match && c != Ctrl_E)",
          "1980:      ptr = compl_curr_match->cp_str;",
          "1981:  else",
          "1982:      ptr = NULL;",
          "1983:  ins_compl_fixRedoBufForLeader(ptr);",
          "1984:     }",
          "1986: #ifdef FEAT_CINDENT",
          "1987:     want_cindent = (get_can_cindent() && cindent_on());",
          "1988: #endif",
          "1991:     if (compl_cont_mode == CTRL_X_WHOLE_LINE)",
          "1992:     {",
          "1993: #ifdef FEAT_CINDENT",
          "1995:  if (want_cindent)",
          "1996:  {",
          "1997:      do_c_expr_indent();",
          "1998:      want_cindent = FALSE; // don't do it again",
          "1999:  }",
          "2000: #endif",
          "2001:     }",
          "2002:     else",
          "2003:     {",
          "2004:  int prev_col = curwin->w_cursor.col;",
          "2007:  if (prev_col > 0)",
          "2008:      dec_cursor();",
          "2010:  if (!arrow_used && !ins_need_undo_get() && c != Ctrl_E)",
          "2011:      insertchar(NUL, 0, -1);",
          "2012:  if (prev_col > 0",
          "2013:   && ml_get_curline()[curwin->w_cursor.col] != NUL)",
          "2014:      inc_cursor();",
          "2015:     }",
          "2020:     if ((c == Ctrl_Y || (compl_enter_selects",
          "2021:       && (c == CAR || c == K_KENTER || c == NL)))",
          "2022:      && pum_visible())",
          "2023:  retval = TRUE;",
          "2027:     if (c == Ctrl_E)",
          "2028:     {",
          "2029:  ins_compl_delete();",
          "2030:  if (compl_leader != NULL)",
          "2031:      ins_bytes(compl_leader + ins_compl_len());",
          "2032:  else if (compl_first_match != NULL)",
          "2033:      ins_bytes(compl_orig_text + ins_compl_len());",
          "2034:  retval = TRUE;",
          "2035:     }",
          "2037:     auto_format(FALSE, TRUE);",
          "2042:     ctrl_x_mode = prev_mode;",
          "2043:     ins_apply_autocmds(EVENT_COMPLETEDONEPRE);",
          "2045:     ins_compl_free();",
          "2046:     compl_started = FALSE;",
          "2047:     compl_matches = 0;",
          "2048:     if (!shortmess(SHM_COMPLETIONMENU))",
          "2049:  msg_clr_cmdline(); // necessary for \"noshowmode\"",
          "2050:     ctrl_x_mode = CTRL_X_NORMAL;",
          "2051:     compl_enter_selects = FALSE;",
          "2052:     if (edit_submode != NULL)",
          "2053:     {",
          "2054:  edit_submode = NULL;",
          "2055:  showmode();",
          "2056:     }",
          "2058: #ifdef FEAT_CMDWIN",
          "2059:     if (c == Ctrl_C && cmdwin_type != 0)",
          "2062:  update_screen(0);",
          "2063: #endif",
          "2064: #ifdef FEAT_CINDENT",
          "2066:     if (want_cindent && in_cinkeys(KEY_COMPLETE, ' ', inindent(0)))",
          "2067:  do_c_expr_indent();",
          "2068: #endif",
          "2071:     ins_apply_autocmds(EVENT_COMPLETEDONE);",
          "2073:     return retval;",
          "2074: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1830:     int",
          "1831: ins_compl_prep(int c)",
          "1832: {",
          "1837:     int  retval = FALSE;",
          "1838:     int  prev_mode = ctrl_x_mode;",
          "",
          "[Removed Lines]",
          "1833:     char_u *ptr;",
          "1834: #ifdef FEAT_CINDENT",
          "1835:     int  want_cindent;",
          "1836: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1910:     }",
          "1912:     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET)",
          "2020:     else if (ctrl_x_mode != CTRL_X_NORMAL)",
          "2021:     {",
          "",
          "[Removed Lines]",
          "1913:     {",
          "1916:  switch (c)",
          "1917:  {",
          "1918:      case Ctrl_E:",
          "1919:      case Ctrl_Y:",
          "1920:   ctrl_x_mode = CTRL_X_SCROLL;",
          "1921:   if (!(State & REPLACE_FLAG))",
          "1922:       edit_submode = (char_u *)_(\" (insert) Scroll (^E/^Y)\");",
          "1923:   else",
          "1924:       edit_submode = (char_u *)_(\" (replace) Scroll (^E/^Y)\");",
          "1925:   edit_submode_pre = NULL;",
          "1926:   showmode();",
          "1927:   break;",
          "1928:      case Ctrl_L:",
          "1929:   ctrl_x_mode = CTRL_X_WHOLE_LINE;",
          "1930:   break;",
          "1931:      case Ctrl_F:",
          "1932:   ctrl_x_mode = CTRL_X_FILES;",
          "1933:   break;",
          "1934:      case Ctrl_K:",
          "1935:   ctrl_x_mode = CTRL_X_DICTIONARY;",
          "1936:   break;",
          "1937:      case Ctrl_R:",
          "1939:   break;",
          "1940:      case Ctrl_T:",
          "1941:   ctrl_x_mode = CTRL_X_THESAURUS;",
          "1942:   break;",
          "1943: #ifdef FEAT_COMPL_FUNC",
          "1944:      case Ctrl_U:",
          "1945:   ctrl_x_mode = CTRL_X_FUNCTION;",
          "1946:   break;",
          "1947:      case Ctrl_O:",
          "1948:   ctrl_x_mode = CTRL_X_OMNI;",
          "1949:   break;",
          "1950: #endif",
          "1951:      case 's':",
          "1952:      case Ctrl_S:",
          "1953:   ctrl_x_mode = CTRL_X_SPELL;",
          "1954: #ifdef FEAT_SPELL",
          "1955:   ++emsg_off; // Avoid getting the E756 error twice.",
          "1956:   spell_back_to_badword();",
          "1957:   --emsg_off;",
          "1958: #endif",
          "1959:   break;",
          "1960:      case Ctrl_RSB:",
          "1961:   ctrl_x_mode = CTRL_X_TAGS;",
          "1962:   break;",
          "1963: #ifdef FEAT_FIND_ID",
          "1964:      case Ctrl_I:",
          "1965:      case K_S_TAB:",
          "1966:   ctrl_x_mode = CTRL_X_PATH_PATTERNS;",
          "1967:   break;",
          "1968:      case Ctrl_D:",
          "1969:   ctrl_x_mode = CTRL_X_PATH_DEFINES;",
          "1970:   break;",
          "1971: #endif",
          "1972:      case Ctrl_V:",
          "1973:      case Ctrl_Q:",
          "1974:   ctrl_x_mode = CTRL_X_CMDLINE;",
          "1975:   break;",
          "1976:      case Ctrl_Z:",
          "1977:   ctrl_x_mode = CTRL_X_NORMAL;",
          "1978:   edit_submode = NULL;",
          "1979:   showmode();",
          "1980:   retval = TRUE;",
          "1981:   break;",
          "1982:      case Ctrl_P:",
          "1983:      case Ctrl_N:",
          "1991:   if (!(compl_cont_status & CONT_INTRPT))",
          "1992:       compl_cont_status |= CONT_LOCAL;",
          "1993:   else if (compl_cont_mode != 0)",
          "1994:       compl_cont_status &= ~CONT_LOCAL;",
          "1996:      default:",
          "2007:   if (c == Ctrl_X)",
          "2008:   {",
          "2009:       if (compl_cont_mode != 0)",
          "2010:    compl_cont_status = 0;",
          "2011:       else",
          "2012:    compl_cont_mode = CTRL_X_NOT_DEFINED_YET;",
          "2013:   }",
          "2014:   ctrl_x_mode = CTRL_X_NORMAL;",
          "2015:   edit_submode = NULL;",
          "2016:   showmode();",
          "2017:   break;",
          "2018:  }",
          "2019:     }",
          "",
          "[Added Lines]",
          "2162:  retval = set_ctrl_x_mode(c);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2040:  if ((ctrl_x_mode == CTRL_X_NORMAL && c != Ctrl_N && c != Ctrl_P",
          "2041:            && c != Ctrl_R && !ins_compl_pum_key(c))",
          "2042:   || ctrl_x_mode == CTRL_X_FINISHED)",
          "2149:     }",
          "2150:     else if (ctrl_x_mode == CTRL_X_LOCAL_MSG)",
          "",
          "[Removed Lines]",
          "2043:  {",
          "2047:      if (compl_curr_match != NULL || compl_leader != NULL || c == Ctrl_E)",
          "2048:      {",
          "2055:   if (compl_curr_match != NULL && compl_used_match && c != Ctrl_E)",
          "2056:       ptr = compl_curr_match->cp_str;",
          "2057:   else",
          "2058:       ptr = NULL;",
          "2059:   ins_compl_fixRedoBufForLeader(ptr);",
          "2060:      }",
          "2062: #ifdef FEAT_CINDENT",
          "2063:      want_cindent = (get_can_cindent() && cindent_on());",
          "2064: #endif",
          "2067:      if (compl_cont_mode == CTRL_X_WHOLE_LINE)",
          "2068:      {",
          "2069: #ifdef FEAT_CINDENT",
          "2071:   if (want_cindent)",
          "2072:   {",
          "2073:       do_c_expr_indent();",
          "2074:       want_cindent = FALSE; // don't do it again",
          "2075:   }",
          "2076: #endif",
          "2077:      }",
          "2078:      else",
          "2079:      {",
          "2080:   int prev_col = curwin->w_cursor.col;",
          "2083:   if (prev_col > 0)",
          "2084:       dec_cursor();",
          "2086:   if (!arrow_used && !ins_need_undo_get() && c != Ctrl_E)",
          "2087:       insertchar(NUL, 0, -1);",
          "2088:   if (prev_col > 0",
          "2089:         && ml_get_curline()[curwin->w_cursor.col] != NUL)",
          "2090:       inc_cursor();",
          "2091:      }",
          "2096:      if ((c == Ctrl_Y || (compl_enter_selects",
          "2097:        && (c == CAR || c == K_KENTER || c == NL)))",
          "2098:       && pum_visible())",
          "2099:   retval = TRUE;",
          "2103:      if (c == Ctrl_E)",
          "2104:      {",
          "2105:   ins_compl_delete();",
          "2106:   if (compl_leader != NULL)",
          "2107:       ins_bytes(compl_leader + ins_compl_len());",
          "2108:   else if (compl_first_match != NULL)",
          "2109:       ins_bytes(compl_orig_text + ins_compl_len());",
          "2110:   retval = TRUE;",
          "2111:      }",
          "2113:      auto_format(FALSE, TRUE);",
          "2118:      ctrl_x_mode = prev_mode;",
          "2119:      ins_apply_autocmds(EVENT_COMPLETEDONEPRE);",
          "2121:      ins_compl_free();",
          "2122:      compl_started = FALSE;",
          "2123:      compl_matches = 0;",
          "2124:      if (!shortmess(SHM_COMPLETIONMENU))",
          "2125:   msg_clr_cmdline(); // necessary for \"noshowmode\"",
          "2126:      ctrl_x_mode = CTRL_X_NORMAL;",
          "2127:      compl_enter_selects = FALSE;",
          "2128:      if (edit_submode != NULL)",
          "2129:      {",
          "2130:   edit_submode = NULL;",
          "2131:   showmode();",
          "2132:      }",
          "2134: #ifdef FEAT_CMDWIN",
          "2135:      if (c == Ctrl_C && cmdwin_type != 0)",
          "2138:   update_screen(0);",
          "2139: #endif",
          "2140: #ifdef FEAT_CINDENT",
          "2142:      if (want_cindent && in_cinkeys(KEY_COMPLETE, ' ', inindent(0)))",
          "2143:   do_c_expr_indent();",
          "2144: #endif",
          "2147:      ins_apply_autocmds(EVENT_COMPLETEDONE);",
          "2148:  }",
          "",
          "[Added Lines]",
          "2186:      retval = ins_compl_stop(c, prev_mode, retval);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3198: #endif",
          "3199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3243:     static char_u *",
          "3244: ins_comp_get_next_word_or_line(",
          "3245:  buf_T *ins_buf,  // buffer being scanned",
          "3246:  pos_T *cur_match_pos,  // current match position",
          "3247:  int *match_len,",
          "3248:  int *cont_s_ipos)  // next ^X<> will set initial_pos",
          "3249: {",
          "3250:     char_u *ptr;",
          "3251:     int  len;",
          "3254:     ptr = ml_get_buf(ins_buf, cur_match_pos->lnum, FALSE) +",
          "3255:  cur_match_pos->col;",
          "3256:     if (ctrl_x_mode_line_or_eval())",
          "3257:     {",
          "3258:  if (compl_cont_status & CONT_ADDING)",
          "3259:  {",
          "3260:      if (cur_match_pos->lnum >= ins_buf->b_ml.ml_line_count)",
          "3261:   return NULL;",
          "3262:      ptr = ml_get_buf(ins_buf, cur_match_pos->lnum + 1, FALSE);",
          "3263:      if (!p_paste)",
          "3264:   ptr = skipwhite(ptr);",
          "3265:  }",
          "3266:  len = (int)STRLEN(ptr);",
          "3267:     }",
          "3268:     else",
          "3269:     {",
          "3270:  char_u *tmp_ptr = ptr;",
          "3272:  if (compl_cont_status & CONT_ADDING)",
          "3273:  {",
          "3274:      tmp_ptr += compl_length;",
          "3276:      if (vim_iswordp(tmp_ptr))",
          "3277:   return NULL;",
          "3279:      tmp_ptr = find_word_start(tmp_ptr);",
          "3280:  }",
          "3282:  tmp_ptr = find_word_end(tmp_ptr);",
          "3283:  len = (int)(tmp_ptr - ptr);",
          "3285:  if ((compl_cont_status & CONT_ADDING) && len == compl_length)",
          "3286:  {",
          "3287:      if (cur_match_pos->lnum < ins_buf->b_ml.ml_line_count)",
          "3288:      {",
          "3294:   STRNCPY(IObuff, ptr, len);",
          "3295:   ptr = ml_get_buf(ins_buf, cur_match_pos->lnum + 1, FALSE);",
          "3296:   tmp_ptr = ptr = skipwhite(ptr);",
          "3298:   tmp_ptr = find_word_start(tmp_ptr);",
          "3300:   tmp_ptr = find_word_end(tmp_ptr);",
          "3301:   if (tmp_ptr > ptr)",
          "3302:   {",
          "3303:       if (*ptr != ')' && IObuff[len - 1] != TAB)",
          "3304:       {",
          "3305:    if (IObuff[len - 1] != ' ')",
          "3306:        IObuff[len++] = ' ';",
          "3308:    if (p_js",
          "3309:     && (IObuff[len - 2] == '.'",
          "3310:         || (vim_strchr(p_cpo, CPO_JOINSP)",
          "3311:      == NULL",
          "3312:      && (IObuff[len - 2] == '?'",
          "3313:          || IObuff[len - 2] == '!'))))",
          "3314:        IObuff[len++] = ' ';",
          "3315:       }",
          "3317:       if (tmp_ptr - ptr >= IOSIZE - len)",
          "3318:    tmp_ptr = ptr + IOSIZE - len - 1;",
          "3319:       STRNCPY(IObuff + len, ptr, tmp_ptr - ptr);",
          "3320:       len += (int)(tmp_ptr - ptr);",
          "3322:   }",
          "3323:   IObuff[len] = NUL;",
          "3324:   ptr = IObuff;",
          "3325:      }",
          "3326:      if (len == compl_length)",
          "3327:   return NULL;",
          "3328:  }",
          "3329:     }",
          "3332:     return ptr;",
          "3333: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3299:   && start_pos->lnum == cur_match_pos->lnum",
          "3300:   && start_pos->col  == cur_match_pos->col)",
          "3301:      continue;",
          "3378:  if (ins_compl_add_infercase(ptr, len, p_ic,",
          "3379:       ins_buf == curbuf ? NULL : ins_buf->b_sfname,",
          "3380:       0, cont_s_ipos) != NOTDONE)",
          "",
          "[Removed Lines]",
          "3302:  ptr = ml_get_buf(ins_buf, cur_match_pos->lnum, FALSE) +",
          "3303:        cur_match_pos->col;",
          "3304:  if (ctrl_x_mode_line_or_eval())",
          "3305:  {",
          "3306:      if (compl_cont_status & CONT_ADDING)",
          "3307:      {",
          "3308:   if (cur_match_pos->lnum >= ins_buf->b_ml.ml_line_count)",
          "3309:       continue;",
          "3310:   ptr = ml_get_buf(ins_buf, cur_match_pos->lnum + 1, FALSE);",
          "3311:   if (!p_paste)",
          "3312:       ptr = skipwhite(ptr);",
          "3313:      }",
          "3314:      len = (int)STRLEN(ptr);",
          "3315:  }",
          "3316:  else",
          "3317:  {",
          "3318:      char_u *tmp_ptr = ptr;",
          "3320:      if (compl_cont_status & CONT_ADDING)",
          "3321:      {",
          "3322:   tmp_ptr += compl_length;",
          "3324:   if (vim_iswordp(tmp_ptr))",
          "3325:       continue;",
          "3327:   tmp_ptr = find_word_start(tmp_ptr);",
          "3328:      }",
          "3330:      tmp_ptr = find_word_end(tmp_ptr);",
          "3331:      len = (int)(tmp_ptr - ptr);",
          "3333:      if ((compl_cont_status & CONT_ADDING) && len == compl_length)",
          "3334:      {",
          "3335:   if (cur_match_pos->lnum < ins_buf->b_ml.ml_line_count)",
          "3336:   {",
          "3342:       STRNCPY(IObuff, ptr, len);",
          "3343:       ptr = ml_get_buf(ins_buf, cur_match_pos->lnum + 1, FALSE);",
          "3344:       tmp_ptr = ptr = skipwhite(ptr);",
          "3346:       tmp_ptr = find_word_start(tmp_ptr);",
          "3348:       tmp_ptr = find_word_end(tmp_ptr);",
          "3349:       if (tmp_ptr > ptr)",
          "3350:       {",
          "3351:    if (*ptr != ')' && IObuff[len - 1] != TAB)",
          "3352:    {",
          "3353:        if (IObuff[len - 1] != ' ')",
          "3354:     IObuff[len++] = ' ';",
          "3356:        if (p_js",
          "3357:         && (IObuff[len - 2] == '.'",
          "3358:      || (vim_strchr(p_cpo, CPO_JOINSP)",
          "3359:          == NULL",
          "3360:          && (IObuff[len - 2] == '?'",
          "3361:       || IObuff[len - 2] == '!'))))",
          "3362:     IObuff[len++] = ' ';",
          "3363:    }",
          "3365:    if (tmp_ptr - ptr >= IOSIZE - len)",
          "3366:        tmp_ptr = ptr + IOSIZE - len - 1;",
          "3367:    STRNCPY(IObuff + len, ptr, tmp_ptr - ptr);",
          "3368:    len += (int)(tmp_ptr - ptr);",
          "3369:    cont_s_ipos = TRUE;",
          "3370:       }",
          "3371:       IObuff[len] = NUL;",
          "3372:       ptr = IObuff;",
          "3373:   }",
          "3374:   if (len == compl_length)",
          "3375:       continue;",
          "3376:      }",
          "3377:  }",
          "",
          "[Added Lines]",
          "3437:  ptr = ins_comp_get_next_word_or_line(ins_buf, cur_match_pos, &len,",
          "3438:        &cont_s_ipos);",
          "3439:  if (ptr == NULL)",
          "3440:      continue;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3566:     return i;",
          "3567: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3637:     static void",
          "3638: ins_compl_update_shown_match(void)",
          "3639: {",
          "3640:     while (!ins_compl_equal(compl_shown_match,",
          "3641:   compl_leader, (int)STRLEN(compl_leader))",
          "3642:      && compl_shown_match->cp_next != NULL",
          "3643:      && compl_shown_match->cp_next != compl_first_match)",
          "3644:  compl_shown_match = compl_shown_match->cp_next;",
          "3648:     if (compl_shows_dir == BACKWARD",
          "3649:      && !ins_compl_equal(compl_shown_match,",
          "3650:   compl_leader, (int)STRLEN(compl_leader))",
          "3651:      && (compl_shown_match->cp_next == NULL",
          "3652:   || compl_shown_match->cp_next == compl_first_match))",
          "3653:     {",
          "3654:  while (!ins_compl_equal(compl_shown_match,",
          "3655:       compl_leader, (int)STRLEN(compl_leader))",
          "3656:   && compl_shown_match->cp_prev != NULL",
          "3657:   && compl_shown_match->cp_prev != compl_first_match)",
          "3658:      compl_shown_match = compl_shown_match->cp_prev;",
          "3659:     }",
          "3660: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3622: }",
          "3647: {",
          "3662:     {",
          "3678:  {",
          "3684:  }",
          "3685:     }",
          "3705:     while (--todo >= 0)",
          "3706:     {",
          "3707:  if (compl_shows_dir == FORWARD && compl_shown_match->cp_next != NULL)",
          "3708:  {",
          "3709:      compl_shown_match = compl_shown_match->cp_next;",
          "3710:      found_end = (compl_first_match != NULL",
          "3713:  }",
          "3714:  else if (compl_shows_dir == BACKWARD",
          "3716:  {",
          "3717:      found_end = (compl_shown_match == compl_first_match);",
          "3718:      compl_shown_match = compl_shown_match->cp_prev;",
          "",
          "[Removed Lines]",
          "3640:     static int",
          "3641: ins_compl_next(",
          "3642:     int     allow_get_expansion,",
          "3643:     int     count,  // repeat completion this many times; should",
          "3645:     int     insert_match, // Insert the newly selected match",
          "3646:     int     in_compl_func) // called from complete_check()",
          "3648:     int     num_matches = -1;",
          "3649:     int     todo = count;",
          "3650:     compl_T *found_compl = NULL;",
          "3651:     int     found_end = FALSE;",
          "3652:     int     advance;",
          "3653:     int     started = compl_started;",
          "3657:     if (compl_shown_match == NULL)",
          "3658:  return -1;",
          "3660:     if (compl_leader != NULL",
          "3661:         && (compl_shown_match->cp_flags & CP_ORIGINAL_TEXT) == 0)",
          "3665:  while (!ins_compl_equal(compl_shown_match,",
          "3666:           compl_leader, (int)STRLEN(compl_leader))",
          "3667:   && compl_shown_match->cp_next != NULL",
          "3668:   && compl_shown_match->cp_next != compl_first_match)",
          "3669:      compl_shown_match = compl_shown_match->cp_next;",
          "3673:  if (compl_shows_dir == BACKWARD",
          "3674:   && !ins_compl_equal(compl_shown_match,",
          "3675:           compl_leader, (int)STRLEN(compl_leader))",
          "3676:   && (compl_shown_match->cp_next == NULL",
          "3677:       || compl_shown_match->cp_next == compl_first_match))",
          "3679:      while (!ins_compl_equal(compl_shown_match,",
          "3680:           compl_leader, (int)STRLEN(compl_leader))",
          "3681:       && compl_shown_match->cp_prev != NULL",
          "3682:       && compl_shown_match->cp_prev != compl_first_match)",
          "3683:   compl_shown_match = compl_shown_match->cp_prev;",
          "3687:     if (allow_get_expansion && insert_match",
          "3688:      && (!(compl_get_longest || compl_restarting) || compl_used_match))",
          "3690:  ins_compl_delete();",
          "3694:     advance = count != 1 || !allow_get_expansion || !compl_get_longest;",
          "3697:     if (compl_restarting)",
          "3698:     {",
          "3699:  advance = FALSE;",
          "3700:  compl_restarting = FALSE;",
          "3701:     }",
          "3711:       && (compl_shown_match->cp_next == compl_first_match",
          "3712:           || compl_shown_match == compl_first_match));",
          "3715:      && compl_shown_match->cp_prev != NULL)",
          "",
          "[Added Lines]",
          "3721:     static void",
          "3722: ins_compl_show_filename(void)",
          "3724:     char *lead = _(\"match in file\");",
          "3725:     int  space = sc_col - vim_strsize((char_u *)lead) - 2;",
          "3726:     char_u *s;",
          "3727:     char_u *e;",
          "3729:     if (space <= 0)",
          "3730:  return;",
          "3735:     for (s = e = compl_shown_match->cp_fname; *e != NUL; MB_PTR_ADV(e))",
          "3737:  space -= ptr2cells(e);",
          "3738:  while (space < 0)",
          "3740:      space += ptr2cells(s);",
          "3741:      MB_PTR_ADV(s);",
          "3744:     msg_hist_off = TRUE;",
          "3745:     vim_snprintf((char *)IObuff, IOSIZE, \"%s %s%s\", lead,",
          "3746:      s > compl_shown_match->cp_fname ? \"<\" : \"\", s);",
          "3747:     msg((char *)IObuff);",
          "3748:     msg_hist_off = FALSE;",
          "3749:     redraw_cmdline = FALSE;     // don't overwrite!",
          "3750: }",
          "3765:     static int",
          "3766: find_next_completion_match(",
          "3767:  int allow_get_expansion,",
          "3768:  int todo,  // repeat completion this many times",
          "3769:  int advance,",
          "3770:  int *num_matches)",
          "3771: {",
          "3772:     int     found_end = FALSE;",
          "3773:     compl_T *found_compl = NULL;",
          "3781:       && (compl_shown_match->cp_next == compl_first_match",
          "3782:    || compl_shown_match == compl_first_match));",
          "3785:   && compl_shown_match->cp_prev != NULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3741:      }",
          "3747:      while (compl_pending != 0 && compl_direction == compl_shows_dir",
          "3749:      {",
          "3750:   if (compl_pending > 0 && compl_shown_match->cp_next != NULL)",
          "3751:   {",
          "",
          "[Removed Lines]",
          "3744:      num_matches = ins_compl_get_exp(&compl_startpos);",
          "3748:            && advance)",
          "",
          "[Added Lines]",
          "3818:       && advance)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3765:  if ((compl_shown_match->cp_flags & CP_ORIGINAL_TEXT) == 0",
          "3766:   && compl_leader != NULL",
          "3767:   && !ins_compl_equal(compl_shown_match,",
          "3769:      ++todo;",
          "3770:  else",
          "",
          "[Removed Lines]",
          "3768:          compl_leader, (int)STRLEN(compl_leader)))",
          "",
          "[Added Lines]",
          "3838:       compl_leader, (int)STRLEN(compl_leader)))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3783:  }",
          "3784:     }",
          "3787:     if (compl_no_insert && !started)",
          "3788:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3856:     return OK;",
          "3857: }",
          "3875:     static int",
          "3876: ins_compl_next(",
          "3877:     int     allow_get_expansion,",
          "3878:     int     count,  // repeat completion this many times; should",
          "3880:     int     insert_match, // Insert the newly selected match",
          "3881:     int     in_compl_func) // called from complete_check()",
          "3882: {",
          "3883:     int     num_matches = -1;",
          "3884:     int     todo = count;",
          "3885:     int     advance;",
          "3886:     int     started = compl_started;",
          "3890:     if (compl_shown_match == NULL)",
          "3891:  return -1;",
          "3893:     if (compl_leader != NULL",
          "3894:         && (compl_shown_match->cp_flags & CP_ORIGINAL_TEXT) == 0)",
          "3896:  ins_compl_update_shown_match();",
          "3898:     if (allow_get_expansion && insert_match",
          "3899:      && (!(compl_get_longest || compl_restarting) || compl_used_match))",
          "3901:  ins_compl_delete();",
          "3905:     advance = count != 1 || !allow_get_expansion || !compl_get_longest;",
          "3908:     if (compl_restarting)",
          "3909:     {",
          "3910:  advance = FALSE;",
          "3911:  compl_restarting = FALSE;",
          "3912:     }",
          "3916:     if (find_next_completion_match(allow_get_expansion, todo, advance,",
          "3917:        &num_matches) == -1)",
          "3918:  return -1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3836:  compl_enter_selects = !insert_match && compl_match_array != NULL;",
          "3840:     if (compl_shown_match->cp_fname != NULL)",
          "3870:     return num_matches;",
          "3871: }",
          "",
          "[Removed Lines]",
          "3841:     {",
          "3842:  char *lead = _(\"match in file\");",
          "3843:  int space = sc_col - vim_strsize((char_u *)lead) - 2;",
          "3844:  char_u *s;",
          "3845:  char_u *e;",
          "3847:  if (space > 0)",
          "3848:  {",
          "3852:      for (s = e = compl_shown_match->cp_fname; *e != NUL; MB_PTR_ADV(e))",
          "3853:      {",
          "3854:   space -= ptr2cells(e);",
          "3855:   while (space < 0)",
          "3856:   {",
          "3857:       space += ptr2cells(s);",
          "3858:       MB_PTR_ADV(s);",
          "3859:   }",
          "3860:      }",
          "3861:      msg_hist_off = TRUE;",
          "3862:      vim_snprintf((char *)IObuff, IOSIZE, \"%s %s%s\", lead,",
          "3863:     s > compl_shown_match->cp_fname ? \"<\" : \"\", s);",
          "3864:      msg((char *)IObuff);",
          "3865:      msg_hist_off = FALSE;",
          "3866:      redraw_cmdline = FALSE;     // don't overwrite!",
          "3867:  }",
          "3868:     }",
          "",
          "[Added Lines]",
          "3974:  ins_compl_show_filename();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4357: }",
          "4366: {",
          "4382:     {",
          "4407:  {",
          "4457:  }",
          "4458:  else",
          "4462:  {",
          "4490:      {",
          "4501:      }",
          "4502:  }",
          "4504:  {",
          "4507:  }",
          "4539:     }",
          "4541:  return FAIL;",
          "4562:     {",
          "4565:     }",
          "4568:     if (compl_first_match == compl_first_match->cp_next)",
          "4569:     {",
          "",
          "[Removed Lines]",
          "4364:     int",
          "4365: ins_complete(int c, int enable_pum)",
          "4367:     char_u *line;",
          "4368:     int  startcol = 0;     // column where searched text starts",
          "4369:     colnr_T curs_col;     // cursor column",
          "4370:     int  n;",
          "4371:     int  save_w_wrow;",
          "4372:     int  save_w_leftcol;",
          "4373:     int  insert_match;",
          "4374:     int  save_did_ai = did_ai;",
          "4375:     int  flags = CP_ORIGINAL_TEXT;",
          "4376:     int  line_invalid = FALSE;",
          "4378:     compl_direction = ins_compl_key2dir(c);",
          "4379:     insert_match = ins_compl_use_match(c);",
          "4381:     if (!compl_started)",
          "4385:  did_ai = FALSE;",
          "4386: #ifdef FEAT_SMARTINDENT",
          "4387:  did_si = FALSE;",
          "4388:  can_si = FALSE;",
          "4389:  can_si_back = FALSE;",
          "4390: #endif",
          "4391:  if (stop_arrow() == FAIL)",
          "4392:      return FAIL;",
          "4394:  line = ml_get(curwin->w_cursor.lnum);",
          "4395:  curs_col = curwin->w_cursor.col;",
          "4396:  compl_pending = 0;",
          "4405:  if ((compl_cont_status & CONT_INTRPT) == CONT_INTRPT",
          "4406:          && compl_cont_mode == ctrl_x_mode)",
          "4409:      compl_cont_status &= ~CONT_INTRPT; // remove INTRPT",
          "4410:      if (ctrl_x_mode == CTRL_X_NORMAL",
          "4411:       || ctrl_x_mode == CTRL_X_PATH_PATTERNS",
          "4412:       || ctrl_x_mode == CTRL_X_PATH_DEFINES)",
          "4413:      {",
          "4414:   if (compl_startpos.lnum != curwin->w_cursor.lnum)",
          "4415:   {",
          "4420:       compl_col = (colnr_T)getwhitecols(line);",
          "4421:       compl_startpos.col = compl_col;",
          "4422:       compl_startpos.lnum = curwin->w_cursor.lnum;",
          "4423:       compl_cont_status &= ~CONT_SOL;   // clear SOL if present",
          "4424:   }",
          "4425:   else",
          "4426:   {",
          "4430:       if (compl_cont_status & CONT_S_IPOS)",
          "4431:       {",
          "4432:    compl_cont_status |= CONT_SOL;",
          "4433:    compl_startpos.col = (colnr_T)(skipwhite(",
          "4434:       line + compl_length",
          "4435:       + compl_startpos.col) - line);",
          "4436:       }",
          "4437:       compl_col = compl_startpos.col;",
          "4438:   }",
          "4439:   compl_length = curwin->w_cursor.col - (int)compl_col;",
          "4442: #define MIN_SPACE 75",
          "4443:   if (compl_length > (IOSIZE - MIN_SPACE))",
          "4444:   {",
          "4445:       compl_cont_status &= ~CONT_SOL;",
          "4446:       compl_length = (IOSIZE - MIN_SPACE);",
          "4447:       compl_col = curwin->w_cursor.col - compl_length;",
          "4448:   }",
          "4449:   compl_cont_status |= CONT_ADDING | CONT_N_ADDS;",
          "4450:   if (compl_length < 1)",
          "4451:       compl_cont_status &= CONT_LOCAL;",
          "4452:      }",
          "4453:      else if (ctrl_x_mode_line_or_eval())",
          "4454:   compl_cont_status = CONT_ADDING | CONT_N_ADDS;",
          "4455:      else",
          "4456:   compl_cont_status = 0;",
          "4459:      compl_cont_status &= CONT_LOCAL;",
          "4461:  if (!(compl_cont_status & CONT_ADDING)) // normal expansion",
          "4463:      compl_cont_mode = ctrl_x_mode;",
          "4464:      if (ctrl_x_mode != CTRL_X_NORMAL)",
          "4466:   compl_cont_status = 0;",
          "4467:      compl_cont_status |= CONT_N_ADDS;",
          "4468:      compl_startpos = curwin->w_cursor;",
          "4469:      startcol = (int)curs_col;",
          "4470:      compl_col = 0;",
          "4471:  }",
          "4474:  if (compl_get_info(line, startcol, curs_col, &line_invalid) == FAIL)",
          "4475:  {",
          "4476:      if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI",
          "4477:            || thesaurus_func_complete(ctrl_x_mode))",
          "4479:   did_ai = save_did_ai;",
          "4480:      return FAIL;",
          "4481:  }",
          "4483:  if (line_invalid)",
          "4484:      line = ml_get(curwin->w_cursor.lnum);",
          "4486:  if (compl_cont_status & CONT_ADDING)",
          "4487:  {",
          "4488:      edit_submode_pre = (char_u *)_(\" Adding\");",
          "4489:      if (ctrl_x_mode_line_or_eval())",
          "4492:   char_u *old = curbuf->b_p_com;",
          "4494:   curbuf->b_p_com = (char_u *)\"\";",
          "4495:   compl_startpos.lnum = curwin->w_cursor.lnum;",
          "4496:   compl_startpos.col = compl_col;",
          "4497:   ins_eol('\\r');",
          "4498:   curbuf->b_p_com = old;",
          "4499:   compl_length = 0;",
          "4500:   compl_col = curwin->w_cursor.col;",
          "4503:  else",
          "4505:      edit_submode_pre = NULL;",
          "4506:      compl_startpos.col = compl_col;",
          "4509:  if (compl_cont_status & CONT_LOCAL)",
          "4510:      edit_submode = (char_u *)_(ctrl_x_msgs[CTRL_X_LOCAL_MSG]);",
          "4511:  else",
          "4512:      edit_submode = (char_u *)_(CTRL_X_MSG(ctrl_x_mode));",
          "4516:  ins_compl_fixRedoBufForLeader(NULL);",
          "4519:  vim_free(compl_orig_text);",
          "4520:  compl_orig_text = vim_strnsave(line + compl_col, compl_length);",
          "4521:  if (p_ic)",
          "4522:      flags |= CP_ICASE;",
          "4523:  if (compl_orig_text == NULL || ins_compl_add(compl_orig_text,",
          "4524:       -1, NULL, NULL, NULL, 0, flags, FALSE) != OK)",
          "4525:  {",
          "4526:      VIM_CLEAR(compl_pattern);",
          "4527:      VIM_CLEAR(compl_orig_text);",
          "4528:      return FAIL;",
          "4529:  }",
          "4534:  edit_submode_extra = (char_u *)_(\"-- Searching...\");",
          "4535:  edit_submode_highl = HLF_COUNT;",
          "4536:  showmode();",
          "4537:  edit_submode_extra = NULL;",
          "4538:  out_flush();",
          "4540:     else if (insert_match && stop_arrow() == FAIL)",
          "4543:     compl_shown_match = compl_curr_match;",
          "4544:     compl_shows_dir = compl_direction;",
          "4547:     save_w_wrow = curwin->w_wrow;",
          "4548:     save_w_leftcol = curwin->w_leftcol;",
          "4549:     n = ins_compl_next(TRUE, ins_compl_key2count(c), insert_match, FALSE);",
          "4552:     ins_compl_upd_pum();",
          "4554:     if (n > 1)  // all matches have been found",
          "4555:  compl_matches = n;",
          "4556:     compl_curr_match = compl_shown_match;",
          "4557:     compl_direction = compl_shows_dir;",
          "4561:     if (got_int && !global_busy)",
          "4563:  (void)vgetc();",
          "4564:  got_int = FALSE;",
          "",
          "[Added Lines]",
          "4475:     static void",
          "4476: ins_compl_continue_search(char_u *line)",
          "4479:     compl_cont_status &= ~CONT_INTRPT; // remove INTRPT",
          "4480:     if (ctrl_x_mode == CTRL_X_NORMAL",
          "4481:      || ctrl_x_mode == CTRL_X_PATH_PATTERNS",
          "4482:      || ctrl_x_mode == CTRL_X_PATH_DEFINES)",
          "4484:  if (compl_startpos.lnum != curwin->w_cursor.lnum)",
          "4490:      compl_col = (colnr_T)getwhitecols(line);",
          "4491:      compl_startpos.col = compl_col;",
          "4492:      compl_startpos.lnum = curwin->w_cursor.lnum;",
          "4493:      compl_cont_status &= ~CONT_SOL;   // clear SOL if present",
          "4500:      if (compl_cont_status & CONT_S_IPOS)",
          "4502:   compl_cont_status |= CONT_SOL;",
          "4503:   compl_startpos.col = (colnr_T)(skipwhite(",
          "4504:        line + compl_length",
          "4505:        + compl_startpos.col) - line);",
          "4507:      compl_col = compl_startpos.col;",
          "4509:  compl_length = curwin->w_cursor.col - (int)compl_col;",
          "4512: #define MIN_SPACE 75",
          "4513:  if (compl_length > (IOSIZE - MIN_SPACE))",
          "4515:      compl_cont_status &= ~CONT_SOL;",
          "4516:      compl_length = (IOSIZE - MIN_SPACE);",
          "4517:      compl_col = curwin->w_cursor.col - compl_length;",
          "4519:  compl_cont_status |= CONT_ADDING | CONT_N_ADDS;",
          "4520:  if (compl_length < 1)",
          "4521:      compl_cont_status &= CONT_LOCAL;",
          "4522:     }",
          "4523:     else if (ctrl_x_mode_line_or_eval())",
          "4524:  compl_cont_status = CONT_ADDING | CONT_N_ADDS;",
          "4525:     else",
          "4526:  compl_cont_status = 0;",
          "4527: }",
          "4532:     static int",
          "4533: ins_compl_start(void)",
          "4534: {",
          "4535:     char_u *line;",
          "4536:     int  startcol = 0;     // column where searched text starts",
          "4537:     colnr_T curs_col;     // cursor column",
          "4538:     int  line_invalid = FALSE;",
          "4539:     int  save_did_ai = did_ai;",
          "4540:     int  flags = CP_ORIGINAL_TEXT;",
          "4544:     did_ai = FALSE;",
          "4545: #ifdef FEAT_SMARTINDENT",
          "4546:     did_si = FALSE;",
          "4547:     can_si = FALSE;",
          "4548:     can_si_back = FALSE;",
          "4549: #endif",
          "4550:     if (stop_arrow() == FAIL)",
          "4551:  return FAIL;",
          "4553:     line = ml_get(curwin->w_cursor.lnum);",
          "4554:     curs_col = curwin->w_cursor.col;",
          "4555:     compl_pending = 0;",
          "4557:     if ((compl_cont_status & CONT_INTRPT) == CONT_INTRPT",
          "4558:      && compl_cont_mode == ctrl_x_mode)",
          "4561:  ins_compl_continue_search(line);",
          "4562:     else",
          "4563:  compl_cont_status &= CONT_LOCAL;",
          "4565:     if (!(compl_cont_status & CONT_ADDING)) // normal expansion",
          "4566:     {",
          "4567:  compl_cont_mode = ctrl_x_mode;",
          "4568:  if (ctrl_x_mode != CTRL_X_NORMAL)",
          "4570:      compl_cont_status = 0;",
          "4571:  compl_cont_status |= CONT_N_ADDS;",
          "4572:  compl_startpos = curwin->w_cursor;",
          "4573:  startcol = (int)curs_col;",
          "4574:  compl_col = 0;",
          "4578:     if (compl_get_info(line, startcol, curs_col, &line_invalid) == FAIL)",
          "4579:     {",
          "4580:  if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI",
          "4581:   || thesaurus_func_complete(ctrl_x_mode))",
          "4583:      did_ai = save_did_ai;",
          "4585:     }",
          "4587:     if (line_invalid)",
          "4588:  line = ml_get(curwin->w_cursor.lnum);",
          "4590:     if (compl_cont_status & CONT_ADDING)",
          "4591:     {",
          "4592:  edit_submode_pre = (char_u *)_(\" Adding\");",
          "4593:  if (ctrl_x_mode_line_or_eval())",
          "4594:  {",
          "4596:      char_u *old = curbuf->b_p_com;",
          "4598:      curbuf->b_p_com = (char_u *)\"\";",
          "4599:      compl_startpos.lnum = curwin->w_cursor.lnum;",
          "4600:      compl_startpos.col = compl_col;",
          "4601:      ins_eol('\\r');",
          "4602:      curbuf->b_p_com = old;",
          "4603:      compl_length = 0;",
          "4604:      compl_col = curwin->w_cursor.col;",
          "4605:  }",
          "4606:     }",
          "4607:     else",
          "4608:     {",
          "4609:  edit_submode_pre = NULL;",
          "4610:  compl_startpos.col = compl_col;",
          "4611:     }",
          "4613:     if (compl_cont_status & CONT_LOCAL)",
          "4614:  edit_submode = (char_u *)_(ctrl_x_msgs[CTRL_X_LOCAL_MSG]);",
          "4615:     else",
          "4616:  edit_submode = (char_u *)_(CTRL_X_MSG(ctrl_x_mode));",
          "4620:     ins_compl_fixRedoBufForLeader(NULL);",
          "4623:     vim_free(compl_orig_text);",
          "4624:     compl_orig_text = vim_strnsave(line + compl_col, compl_length);",
          "4625:     if (p_ic)",
          "4626:  flags |= CP_ICASE;",
          "4627:     if (compl_orig_text == NULL || ins_compl_add(compl_orig_text,",
          "4628:   -1, NULL, NULL, NULL, 0, flags, FALSE) != OK)",
          "4630:  VIM_CLEAR(compl_pattern);",
          "4631:  VIM_CLEAR(compl_orig_text);",
          "4632:  return FAIL;",
          "4638:     edit_submode_extra = (char_u *)_(\"-- Searching...\");",
          "4639:     edit_submode_highl = HLF_COUNT;",
          "4640:     showmode();",
          "4641:     edit_submode_extra = NULL;",
          "4642:     out_flush();",
          "4644:     return OK;",
          "4645: }",
          "4650:     static void",
          "4651: ins_compl_show_statusmsg(void)",
          "4652: {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4571:    && compl_length > 1",
          "4572:         ? (char_u *)_(e_hitend) : (char_u *)_(e_patnotf);",
          "4573:  edit_submode_highl = HLF_E;",
          "4584:     }",
          "4591:     if (edit_submode_extra == NULL)",
          "4592:     {",
          "4593:  if (compl_curr_match->cp_flags & CP_ORIGINAL_TEXT)",
          "",
          "[Removed Lines]",
          "4578:  if (    compl_length > 1",
          "4579:   || (compl_cont_status & CONT_ADDING)",
          "4580:   || (ctrl_x_mode != CTRL_X_NORMAL",
          "4581:       && ctrl_x_mode != CTRL_X_PATH_PATTERNS",
          "4582:       && ctrl_x_mode != CTRL_X_PATH_DEFINES))",
          "4583:      compl_cont_status &= ~CONT_N_ADDS;",
          "4586:     if (compl_curr_match->cp_flags & CP_CONT_S_IPOS)",
          "4587:  compl_cont_status |= CONT_S_IPOS;",
          "4588:     else",
          "4589:  compl_cont_status &= ~CONT_S_IPOS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4624:   if (compl_matches > 0)",
          "4625:       vim_snprintf((char *)match_ref, sizeof(match_ref),",
          "4628:   else",
          "4629:       vim_snprintf((char *)match_ref, sizeof(match_ref),",
          "4632:   edit_submode_extra = match_ref;",
          "4633:   edit_submode_highl = HLF_R;",
          "4634:   if (dollar_vcol >= 0)",
          "",
          "[Removed Lines]",
          "4626:     _(\"match %d of %d\"),",
          "4627:     compl_curr_match->cp_number, compl_matches);",
          "4630:     _(\"match %d\"),",
          "4631:     compl_curr_match->cp_number);",
          "",
          "[Added Lines]",
          "4697:        _(\"match %d of %d\"),",
          "4698:        compl_curr_match->cp_number, compl_matches);",
          "4701:        _(\"match %d\"),",
          "4702:        compl_curr_match->cp_number);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4658:   msg_clr_cmdline(); // necessary for \"noshowmode\"",
          "4659:  }",
          "4660:     }",
          "4663:     if (enable_pum && !compl_interrupted)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4732: }",
          "4739:     int",
          "4740: ins_complete(int c, int enable_pum)",
          "4741: {",
          "4742:     int  n;",
          "4743:     int  save_w_wrow;",
          "4744:     int  save_w_leftcol;",
          "4745:     int  insert_match;",
          "4747:     compl_direction = ins_compl_key2dir(c);",
          "4748:     insert_match = ins_compl_use_match(c);",
          "4750:     if (!compl_started)",
          "4751:     {",
          "4752:  if (ins_compl_start() == FAIL)",
          "4753:      return FAIL;",
          "4754:     }",
          "4755:     else if (insert_match && stop_arrow() == FAIL)",
          "4756:  return FAIL;",
          "4758:     compl_shown_match = compl_curr_match;",
          "4759:     compl_shows_dir = compl_direction;",
          "4762:     save_w_wrow = curwin->w_wrow;",
          "4763:     save_w_leftcol = curwin->w_leftcol;",
          "4764:     n = ins_compl_next(TRUE, ins_compl_key2count(c), insert_match, FALSE);",
          "4767:     ins_compl_upd_pum();",
          "4769:     if (n > 1)  // all matches have been found",
          "4770:  compl_matches = n;",
          "4771:     compl_curr_match = compl_shown_match;",
          "4772:     compl_direction = compl_shows_dir;",
          "4776:     if (got_int && !global_busy)",
          "4777:     {",
          "4778:  (void)vgetc();",
          "4779:  got_int = FALSE;",
          "4780:     }",
          "4783:     if (compl_first_match == compl_first_match->cp_next)",
          "4784:     {",
          "4789:  if (compl_length > 1",
          "4790:   || (compl_cont_status & CONT_ADDING)",
          "4791:   || (ctrl_x_mode != CTRL_X_NORMAL",
          "4792:       && ctrl_x_mode != CTRL_X_PATH_PATTERNS",
          "4793:       && ctrl_x_mode != CTRL_X_PATH_DEFINES))",
          "4794:      compl_cont_status &= ~CONT_N_ADDS;",
          "4795:     }",
          "4797:     if (compl_curr_match->cp_flags & CP_CONT_S_IPOS)",
          "4798:  compl_cont_status |= CONT_S_IPOS;",
          "4799:     else",
          "4800:  compl_cont_status &= ~CONT_S_IPOS;",
          "4802:     ins_compl_show_statusmsg();",
          "",
          "---------------"
        ],
        "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim": [
          "File: src/testdir/test_ins_complete.vim -> src/testdir/test_ins_complete.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "900:   close!",
          "901: endfunc",
          "903: func Test_issue_7021()",
          "904:   CheckMSWindows",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: \" Test for typing CTRL-R in insert completion mode to insert a register",
          "904: \" content.",
          "905: func Test_complete_reginsert()",
          "906:   new",
          "907:   call setline(1, ['a1', 'a12', 'a123', 'a1234'])",
          "909:   \" if a valid CTRL-X mode key is returned from <C-R>=, then it should be",
          "910:   \" processed. Otherwise, CTRL-X mode should be stopped and the key should be",
          "911:   \" inserted.",
          "912:   exe \"normal Goa\\<C-P>\\<C-R>=\\\"\\\\<C-P>\\\"\\<CR>\"",
          "913:   call assert_equal('a123', getline(5))",
          "914:   let @r = \"\\<C-P>\\<C-P>\"",
          "915:   exe \"normal GCa\\<C-P>\\<C-R>r\"",
          "916:   call assert_equal('a12', getline(5))",
          "917:   exe \"normal GCa\\<C-P>\\<C-R>=\\\"x\\\"\\<CR>\"",
          "918:   call assert_equal('a1234x', getline(5))",
          "919:   bw!",
          "920: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3943,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3944,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d94fbfc74a8b8073e7a256c95fa6f39fc527c726",
      "candidate_info": {
        "commit_hash": "d94fbfc74a8b8073e7a256c95fa6f39fc527c726",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/d94fbfc74a8b8073e7a256c95fa6f39fc527c726",
        "files": [
          "src/edit.c",
          "src/getchar.c",
          "src/globals.h",
          "src/insexpand.c",
          "src/proto/insexpand.pro",
          "src/search.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4001: insert complete code uses global variables\n\nProblem:    Insert complete code uses global variables.\nSolution:   Make variables local to the file and use accessor functions.\n            (Yegappan Lakshmanan, closes #9470)",
        "before_after_code_files": [
          "src/edit.c||src/edit.c",
          "src/getchar.c||src/getchar.c",
          "src/globals.h||src/globals.h",
          "src/insexpand.c||src/insexpand.c",
          "src/proto/insexpand.pro||src/proto/insexpand.pro",
          "src/search.c||src/search.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/insexpand.c||src/insexpand.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/insexpand.c||src/insexpand.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/edit.c||src/edit.c": [
          "File: src/edit.c -> src/edit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1281:      if (*curbuf->b_p_cpt == NUL",
          "1282:       && (ctrl_x_mode_normal() || ctrl_x_mode_whole_line())",
          "1284:   goto normalchar;",
          "1286: docomplete:",
          "",
          "[Removed Lines]",
          "1283:       && !(compl_cont_status & CONT_LOCAL))",
          "",
          "[Added Lines]",
          "1283:       && !compl_status_local())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1289:      disable_fold_update++;  // don't redraw folds here",
          "1290: #endif",
          "1291:      if (ins_complete(c, TRUE) == FAIL)",
          "1293: #ifdef FEAT_FOLDING",
          "1294:      disable_fold_update--;",
          "1295: #endif",
          "",
          "[Removed Lines]",
          "1292:   compl_cont_status = 0;",
          "",
          "[Added Lines]",
          "1292:   compl_status_clear();",
          "",
          "---------------"
        ],
        "src/getchar.c||src/getchar.c": [
          "File: src/getchar.c -> src/getchar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2453:      && State != ASKMORE",
          "2454:      && State != CONFIRM",
          "2455:      && !((ctrl_x_mode_not_default() && at_ctrl_x_key())",
          "2457:    && (tb_c1 == Ctrl_N || tb_c1 == Ctrl_P))))",
          "2458:     {",
          "2459: #ifdef FEAT_GUI",
          "",
          "[Removed Lines]",
          "2456:       || ((compl_cont_status & CONT_LOCAL)",
          "",
          "[Added Lines]",
          "2456:       || (compl_status_local()",
          "",
          "---------------"
        ],
        "src/globals.h||src/globals.h": [
          "File: src/globals.h -> src/globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "183: EXTERN char_u *edit_submode INIT(= NULL); // msg for CTRL-X submode",
          "184: EXTERN char_u *edit_submode_pre INIT(= NULL); // prepended to edit_submode",
          "185: EXTERN char_u *edit_submode_extra INIT(= NULL);// appended to edit_submode",
          "",
          "[Removed Lines]",
          "168: EXTERN int compl_length INIT(= 0);",
          "171: EXTERN int compl_cont_status INIT(= 0);",
          "172: # define CONT_ADDING 1 // \"normal\" or \"adding\" expansion",
          "173: # define CONT_INTRPT (2 + 4) // a ^X interrupted the current expansion",
          "175: # define CONT_N_ADDS 4 // next ^X<> will add-new or expand-current",
          "176: # define CONT_S_IPOS 8 // next ^X<> will set initial_pos?",
          "178: # define CONT_SOL 16 // pattern includes start of line, just for",
          "180: # define CONT_LOCAL 32 // for ctrl_x_mode 0, ^X^P/^X^N do a local",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: static int   ctrl_x_mode = CTRL_X_NORMAL;",
          "181: static char_u   *compl_pattern = NULL;",
          "182: static int   compl_direction = FORWARD;",
          "183: static int   compl_shows_dir = FORWARD;",
          "184: static int   compl_pending = 0;     // > 1 for postponed CTRL-N",
          "185: static pos_T   compl_startpos;",
          "186: static colnr_T   compl_col = 0;     // column where the text starts",
          "188: static char_u   *compl_orig_text = NULL;  // text as it was before",
          "",
          "[Removed Lines]",
          "180: static int   compl_matches = 0;",
          "",
          "[Added Lines]",
          "180: static int   compl_matches = 0;     // number of completion matches",
          "188: static int   compl_length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: static int   compl_cont_mode = 0;",
          "191: static expand_T   compl_xp;",
          "193: static int   compl_opt_refresh_always = FALSE;",
          "194: static int   compl_opt_suppress_empty = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: static int   compl_cont_status = 0;",
          "198: # define CONT_ADDING 1 // \"normal\" or \"adding\" expansion",
          "199: # define CONT_INTRPT (2 + 4) // a ^X interrupted the current expansion",
          "201: # define CONT_N_ADDS 4 // next ^X<> will add-new or expand-current",
          "202: # define CONT_S_IPOS 8 // next ^X<> will set initial_pos?",
          "204: # define CONT_SOL 16 // pattern includes start of line, just for",
          "206: # define CONT_LOCAL 32 // for ctrl_x_mode 0, ^X^P/^X^N do a local",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201: static void ins_compl_free(void);",
          "202: static int  ins_compl_need_restart(void);",
          "203: static void ins_compl_new_leader(void);",
          "205: static void ins_compl_restart(void);",
          "206: static void ins_compl_set_original_text(char_u *str);",
          "207: static void ins_compl_fixRedoBufForLeader(char_u *ptr_arg);",
          "",
          "[Removed Lines]",
          "204: static int  ins_compl_len(void);",
          "",
          "[Added Lines]",
          "220: static int  get_compl_len(void);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268: int ctrl_x_mode_function(void) { return ctrl_x_mode == CTRL_X_FUNCTION; }",
          "269: int ctrl_x_mode_omni(void) { return ctrl_x_mode == CTRL_X_OMNI; }",
          "270: int ctrl_x_mode_spell(void) { return ctrl_x_mode == CTRL_X_SPELL; }",
          "271: int ctrl_x_mode_line_or_eval(void) {",
          "272:        return ctrl_x_mode == CTRL_X_WHOLE_LINE || ctrl_x_mode == CTRL_X_EVAL; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: static int ctrl_x_mode_eval(void) { return ctrl_x_mode == CTRL_X_EVAL; }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291: }",
          "296:     int",
          "297: has_compl_option(int dict_opt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     int",
          "315: compl_status_adding(void)",
          "316: {",
          "317:     return compl_cont_status & CONT_ADDING;",
          "318: }",
          "324:     int",
          "325: compl_status_sol(void)",
          "326: {",
          "327:     return compl_cont_status & CONT_SOL;",
          "328: }",
          "333:     int",
          "334: compl_status_local(void)",
          "335: {",
          "336:     return compl_cont_status & CONT_LOCAL;",
          "337: }",
          "342:     void",
          "343: compl_status_clear(void)",
          "344: {",
          "345:     compl_cont_status = 0;",
          "346: }",
          "351:     static int",
          "352: compl_dir_forward(void)",
          "353: {",
          "354:     return compl_direction == FORWARD;",
          "355: }",
          "360:     static int",
          "361: compl_shows_dir_forward(void)",
          "362: {",
          "363:     return compl_shows_dir == FORWARD;",
          "364: }",
          "369:     static int",
          "370: compl_shows_dir_backward(void)",
          "371: {",
          "372:     return compl_shows_dir == BACKWARD;",
          "373: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "392: }",
          "398:     static int",
          "400: {",
          "401:     return match->cp_flags & CP_ORIGINAL_TEXT;",
          "402: }",
          "",
          "[Removed Lines]",
          "399: ins_compl_at_original_text(compl_T *match)",
          "",
          "[Added Lines]",
          "480: match_at_original_text(compl_T *match)",
          "488:     static int",
          "489: is_first_match(compl_T *match)",
          "490: {",
          "491:     return match == compl_first_match;",
          "492: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "646:  match = compl_first_match;",
          "647:  do",
          "648:  {",
          "650:       && STRNCMP(match->cp_str, str, len) == 0",
          "651:       && match->cp_str[len] == NUL)",
          "652:   return NOTDONE;",
          "653:      match = match->cp_next;",
          "655:     }",
          "",
          "[Removed Lines]",
          "649:      if (!ins_compl_at_original_text(match)",
          "654:  } while (match != NULL && match != compl_first_match);",
          "",
          "[Added Lines]",
          "739:      if (!match_at_original_text(match)",
          "744:  } while (match != NULL && !is_first_match(match));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "764:  had_match = (curwin->w_cursor.col > compl_col);",
          "765:  ins_compl_delete();",
          "767:  ins_redraw(FALSE);",
          "",
          "[Removed Lines]",
          "766:  ins_bytes(compl_leader + ins_compl_len());",
          "",
          "[Added Lines]",
          "856:  ins_bytes(compl_leader + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "812:  had_match = (curwin->w_cursor.col > compl_col);",
          "813:  ins_compl_delete();",
          "815:  ins_redraw(FALSE);",
          "",
          "[Removed Lines]",
          "814:  ins_bytes(compl_leader + ins_compl_len());",
          "",
          "[Added Lines]",
          "904:  ins_bytes(compl_leader + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "862:     match = compl_first_match;",
          "865:     {",
          "866:  match = match->cp_next;",
          "867:  ++count;",
          "",
          "[Removed Lines]",
          "864:     while (match->cp_next != NULL && match->cp_next != compl_first_match)",
          "",
          "[Added Lines]",
          "954:     while (match->cp_next != NULL && !is_first_match(match->cp_next))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "980:     i = 0;",
          "981:     do",
          "982:     {",
          "985:      break;",
          "986:  compl = compl->cp_next;",
          "989:     if (strstr((char *)p_cot, \"menuone\") != NULL)",
          "990:  return (i >= 1);",
          "",
          "[Removed Lines]",
          "983:  if (compl == NULL",
          "984:         || (!ins_compl_at_original_text(compl) && ++i == 2))",
          "987:     } while (compl != compl_first_match);",
          "",
          "[Added Lines]",
          "1073:  if (compl == NULL || (!match_at_original_text(compl) && ++i == 2))",
          "1076:     } while (!is_first_match(compl));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1078:     do",
          "1079:     {",
          "1081:   && (compl_leader == NULL",
          "1082:       || ins_compl_equal(compl, compl_leader, lead_len)))",
          "1083:      ++compl_match_arraysize;",
          "1084:  compl = compl->cp_next;",
          "1087:     if (compl_match_arraysize == 0)",
          "1088:  return -1;",
          "",
          "[Removed Lines]",
          "1080:  if (!ins_compl_at_original_text(compl)",
          "1085:     } while (compl != NULL && compl != compl_first_match);",
          "",
          "[Added Lines]",
          "1169:  if (!match_at_original_text(compl)",
          "1174:     } while (compl != NULL && !is_first_match(compl));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1097:  shown_match_ok = TRUE;",
          "1099:     i = 0;",
          "1100:     compl = compl_first_match;",
          "1101:     do",
          "1102:     {",
          "1104:   && (compl_leader == NULL",
          "1105:       || ins_compl_equal(compl, compl_leader, lead_len)))",
          "1106:  {",
          "",
          "[Removed Lines]",
          "1096:     if (ins_compl_at_original_text(compl_shown_match))",
          "1103:  if (!ins_compl_at_original_text(compl)",
          "",
          "[Added Lines]",
          "1185:     if (match_at_original_text(compl_shown_match))",
          "1192:  if (!match_at_original_text(compl)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1145:   shown_match_ok = TRUE;",
          "1147:      if (!shown_match_ok && shown_compl != NULL)",
          "",
          "[Removed Lines]",
          "1144:      if (ins_compl_at_original_text(compl))",
          "",
          "[Added Lines]",
          "1233:      if (match_at_original_text(compl))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1153:      }",
          "1154:  }",
          "1155:  compl = compl->cp_next;",
          "1158:     if (!shown_match_ok)    // no displayed match at all",
          "1159:  cur = -1;",
          "",
          "[Removed Lines]",
          "1156:     } while (compl != NULL && compl != compl_first_match);",
          "",
          "[Added Lines]",
          "1245:     } while (compl != NULL && !is_first_match(compl));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1568:  clear_tv(&match->cp_user_data);",
          "1569: #endif",
          "1570:  vim_free(match);",
          "1572:     compl_first_match = compl_curr_match = NULL;",
          "1573:     compl_shown_match = NULL;",
          "1574:     compl_old_match = NULL;",
          "1575: }",
          "1577:     void",
          "1578: ins_compl_clear(void)",
          "1579: {",
          "",
          "[Removed Lines]",
          "1571:     } while (compl_curr_match != NULL && compl_curr_match != compl_first_match);",
          "",
          "[Added Lines]",
          "1660:     } while (compl_curr_match != NULL && !is_first_match(compl_curr_match));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1647:     return compl_col;",
          "1648: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:     int",
          "1746: ins_compl_len(void)",
          "1747: {",
          "1748:     return compl_length;",
          "1749: }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1669:     if ((int)(p - line) - (int)compl_col < 0",
          "1673:      || (!can_bs(BS_START) && (int)(p - line) - (int)compl_col",
          "1674:        - compl_length < 0))",
          "1675:  return K_BS;",
          "",
          "[Removed Lines]",
          "1670:      || ((int)(p - line) - (int)compl_col == 0",
          "1671:        && ctrl_x_mode != CTRL_X_OMNI)",
          "1672:      || ctrl_x_mode == CTRL_X_EVAL",
          "",
          "[Added Lines]",
          "1771:      || ((int)(p - line) - (int)compl_col == 0 && !ctrl_x_mode_omni())",
          "1772:      || ctrl_x_mode_eval()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1704:     return compl_was_interrupted",
          "1706:         && compl_opt_refresh_always);",
          "1707: }",
          "",
          "[Removed Lines]",
          "1705:  || ((ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI)",
          "",
          "[Added Lines]",
          "1805:  || ((ctrl_x_mode_function() || ctrl_x_mode_omni())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1716: {",
          "1717:     ins_compl_del_pum();",
          "1718:     ins_compl_delete();",
          "1720:     compl_used_match = FALSE;",
          "1722:     if (compl_started)",
          "",
          "[Removed Lines]",
          "1719:     ins_bytes(compl_leader + ins_compl_len());",
          "",
          "[Added Lines]",
          "1819:     ins_bytes(compl_leader + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1761:     static int",
          "1763: {",
          "1764:     int off = (int)curwin->w_cursor.col - (int)compl_col;",
          "",
          "[Removed Lines]",
          "1762: ins_compl_len(void)",
          "",
          "[Added Lines]",
          "1862: get_compl_len(void)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1842:     {",
          "1843:  p = vim_strsave(str);",
          "1844:  if (p != NULL)",
          "",
          "[Removed Lines]",
          "1841:     if (ins_compl_at_original_text(compl_first_match)) // safety check",
          "",
          "[Added Lines]",
          "1941:     if (match_at_original_text(compl_first_match)) // safety check",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1848:  }",
          "1849:     }",
          "1850:     else if (compl_first_match->cp_prev != NULL",
          "1852:     {",
          "1853:        p = vim_strsave(str);",
          "1854:        if (p != NULL)",
          "",
          "[Removed Lines]",
          "1851:      && ins_compl_at_original_text(compl_first_match->cp_prev))",
          "",
          "[Added Lines]",
          "1951:      && match_at_original_text(compl_first_match->cp_prev))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1876:     {",
          "1880:      return;",
          "1882:  p = NULL;",
          "1883:  for (cp = compl_shown_match->cp_next; cp != NULL",
          "1885:  {",
          "1886:      if (compl_leader == NULL",
          "1887:       || ins_compl_equal(cp, compl_leader,",
          "",
          "[Removed Lines]",
          "1879:  if (!ins_compl_at_original_text(compl_shown_match))",
          "1884:   && cp != compl_first_match; cp = cp->cp_next)",
          "",
          "[Added Lines]",
          "1979:  if (!match_at_original_text(compl_shown_match))",
          "1984:   && !is_first_match(cp); cp = cp->cp_next)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2105:     {",
          "2106:  ins_compl_delete();",
          "2107:  if (compl_leader != NULL)",
          "2109:  else if (compl_first_match != NULL)",
          "2111:  retval = TRUE;",
          "2112:     }",
          "",
          "[Removed Lines]",
          "2108:      ins_bytes(compl_leader + ins_compl_len());",
          "2110:      ins_bytes(compl_orig_text + ins_compl_len());",
          "",
          "[Added Lines]",
          "2208:      ins_bytes(compl_leader + get_compl_len());",
          "2210:      ins_bytes(compl_orig_text + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2225:     }",
          "2230:     {",
          "2231:  compl_get_longest = (strstr((char *)p_cot, \"longest\") != NULL);",
          "2232:  compl_used_match = TRUE;",
          "2234:     }",
          "2239:  retval = set_ctrl_x_mode(c);",
          "2241:     {",
          "2243:  if (!vim_is_ctrl_x_key(c))",
          "2244:  {",
          "2246:   ctrl_x_mode = CTRL_X_NORMAL;",
          "2247:      else",
          "2248:   ctrl_x_mode = CTRL_X_FINISHED;",
          "",
          "[Removed Lines]",
          "2228:     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET",
          "2229:       || (ctrl_x_mode == CTRL_X_NORMAL && !compl_started))",
          "2236:     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET)",
          "2240:     else if (ctrl_x_mode != CTRL_X_NORMAL)",
          "2245:      if (ctrl_x_mode == CTRL_X_SCROLL)",
          "",
          "[Added Lines]",
          "2328:     if (ctrl_x_mode_not_defined_yet()",
          "2329:       || (ctrl_x_mode_normal() && !compl_started))",
          "2336:     if (ctrl_x_mode_not_defined_yet())",
          "2340:     else if (ctrl_x_mode_not_default())",
          "2345:      if (ctrl_x_mode_scroll())",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2259:  showmode();",
          "2261:            && c != Ctrl_R && !ins_compl_pum_key(c))",
          "2262:   || ctrl_x_mode == CTRL_X_FINISHED)",
          "2263:      retval = ins_compl_stop(c, prev_mode, retval);",
          "",
          "[Removed Lines]",
          "2260:  if ((ctrl_x_mode == CTRL_X_NORMAL && c != Ctrl_N && c != Ctrl_P",
          "",
          "[Added Lines]",
          "2360:  if ((ctrl_x_mode_normal() && c != Ctrl_N && c != Ctrl_P",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2498: get_insert_callback(int type)",
          "2499: {",
          "2500:     if (type == CTRL_X_FUNCTION)",
          "",
          "[Removed Lines]",
          "2497:     callback_T *",
          "",
          "[Added Lines]",
          "2597:     static callback_T *",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2702:     int flags = CP_ORIGINAL_TEXT;",
          "2706:  ins_compl_prep(' ');",
          "2707:     ins_compl_clear();",
          "2708:     ins_compl_free();",
          "",
          "[Removed Lines]",
          "2705:     if (ctrl_x_mode != CTRL_X_NORMAL)",
          "",
          "[Added Lines]",
          "2805:     if (ctrl_x_mode_not_default())",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2820:     static char_u *",
          "2821: ins_compl_mode(void)",
          "2822: {",
          "2825:  return (char_u *)ctrl_x_mode_names[ctrl_x_mode & ~CTRL_X_WANT_IDENT];",
          "2827:     return (char_u *)\"\";",
          "",
          "[Removed Lines]",
          "2823:     if (ctrl_x_mode == CTRL_X_NOT_DEFINED_YET || ctrl_x_mode == CTRL_X_SCROLL",
          "2824:      || compl_started)",
          "",
          "[Added Lines]",
          "2923:     if (ctrl_x_mode_not_defined_yet() || ctrl_x_mode_scroll() || compl_started)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2837:     int  number = 0;",
          "2838:     compl_T *match;",
          "2841:     {",
          "2845:  for (match = compl_curr_match->cp_prev; match != NULL",
          "2848:      if (match->cp_number != -1)",
          "2849:      {",
          "2850:   number = match->cp_number;",
          "",
          "[Removed Lines]",
          "2840:     if (compl_direction == FORWARD)",
          "2846:   && match != compl_first_match;",
          "2847:         match = match->cp_prev)",
          "",
          "[Added Lines]",
          "2939:     if (compl_dir_forward())",
          "2945:   && !is_first_match(match); match = match->cp_prev)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2866:  for (match = compl_curr_match->cp_next; match != NULL",
          "2869:      if (match->cp_number != -1)",
          "2870:      {",
          "2871:   number = match->cp_number;",
          "",
          "[Removed Lines]",
          "2867:   && match != compl_first_match;",
          "2868:         match = match->cp_next)",
          "",
          "[Added Lines]",
          "2965:   && !is_first_match(match); match = match->cp_next)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2941:      match = compl_first_match;",
          "2942:      do",
          "2943:      {",
          "2945:   {",
          "2946:       di = dict_alloc();",
          "2947:       if (di == NULL)",
          "",
          "[Removed Lines]",
          "2944:   if (!ins_compl_at_original_text(match))",
          "",
          "[Added Lines]",
          "3041:   if (!match_at_original_text(match))",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2962:   }",
          "2963:   match = match->cp_next;",
          "2964:      }",
          "2966:  }",
          "2967:     }",
          "",
          "[Removed Lines]",
          "2965:      while (match != NULL && match != compl_first_match);",
          "",
          "[Added Lines]",
          "3062:      while (match != NULL && !is_first_match(match));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3087:  st->first_match_pos = *start_match_pos;",
          "3091:  {",
          "",
          "[Removed Lines]",
          "3090:  if (ctrl_x_mode == CTRL_X_NORMAL && dec(&st->first_match_pos) < 0)",
          "",
          "[Added Lines]",
          "3187:  if (ctrl_x_mode_normal() && dec(&st->first_match_pos) < 0)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3241:     g_tag_at_cursor = TRUE;",
          "3242:     if (find_tags(compl_pattern, &num_matches, &matches,",
          "3243:   TAG_REGEXP | TAG_NAMES | TAG_NOIC | TAG_INS_COMP",
          "3245:   TAG_MANY, curbuf->b_ffname) == OK && num_matches > 0)",
          "3246:  ins_compl_add_matches(num_matches, matches, p_ic);",
          "3247:     g_tag_at_cursor = FALSE;",
          "",
          "[Removed Lines]",
          "3244:   | (ctrl_x_mode != CTRL_X_NORMAL ? TAG_VERBOSE : 0),",
          "",
          "[Added Lines]",
          "3341:   | (ctrl_x_mode_not_default() ? TAG_VERBOSE : 0),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3338:  cur_match_pos->col;",
          "3339:     if (ctrl_x_mode_line_or_eval())",
          "3340:     {",
          "3342:  {",
          "3343:      if (cur_match_pos->lnum >= ins_buf->b_ml.ml_line_count)",
          "3344:   return NULL;",
          "",
          "[Removed Lines]",
          "3341:  if (compl_cont_status & CONT_ADDING)",
          "",
          "[Added Lines]",
          "3438:  if (compl_status_adding())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3352:     {",
          "3353:  char_u *tmp_ptr = ptr;",
          "3356:  {",
          "3357:      tmp_ptr += compl_length;",
          "",
          "[Removed Lines]",
          "3355:  if (compl_cont_status & CONT_ADDING)",
          "",
          "[Added Lines]",
          "3452:  if (compl_status_adding())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3365:  tmp_ptr = find_word_end(tmp_ptr);",
          "3366:  len = (int)(tmp_ptr - ptr);",
          "3369:  {",
          "3370:      if (cur_match_pos->lnum < ins_buf->b_ml.ml_line_count)",
          "3371:      {",
          "",
          "[Removed Lines]",
          "3368:  if ((compl_cont_status & CONT_ADDING) && len == compl_length)",
          "",
          "[Added Lines]",
          "3465:  if (compl_status_adding() && len == compl_length)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3462:      found_new_match = search_for_exact_line(st->ins_buf,",
          "3463:        st->cur_match_pos, compl_direction, compl_pattern);",
          "3464:  else",
          "",
          "[Removed Lines]",
          "3460:  if (ctrl_x_mode_line_or_eval()",
          "3461:   || (compl_cont_status & CONT_SOL))",
          "",
          "[Added Lines]",
          "3557:  if (ctrl_x_mode_line_or_eval() || (compl_cont_status & CONT_SOL))",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3479:  {",
          "3480:      found_new_match = FAIL;",
          "3481:  }",
          "3483:   && (st->prev_match_pos.lnum > st->cur_match_pos->lnum",
          "3484:       || (st->prev_match_pos.lnum == st->cur_match_pos->lnum",
          "3485:    && st->prev_match_pos.col >= st->cur_match_pos->col)))",
          "",
          "[Removed Lines]",
          "3482:  else if ((compl_direction == FORWARD)",
          "",
          "[Added Lines]",
          "3578:  else if (compl_dir_forward()",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3489:      else",
          "3490:   looped_around = TRUE;",
          "3491:  }",
          "3493:   && (st->prev_match_pos.lnum < st->cur_match_pos->lnum",
          "3494:       || (st->prev_match_pos.lnum == st->cur_match_pos->lnum",
          "3495:    && st->prev_match_pos.col <= st->cur_match_pos->col)))",
          "",
          "[Removed Lines]",
          "3492:  else if ((compl_direction != FORWARD)",
          "",
          "[Added Lines]",
          "3588:  else if (!compl_dir_forward()",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3504:      break;",
          "3508:   && start_pos->lnum == st->cur_match_pos->lnum",
          "3509:   && start_pos->col  == st->cur_match_pos->col)",
          "3510:      continue;",
          "",
          "[Removed Lines]",
          "3507:  if ((compl_cont_status & CONT_ADDING) && st->ins_buf == curbuf",
          "",
          "[Added Lines]",
          "3603:  if (compl_status_adding() && st->ins_buf == curbuf",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3623:  st.ins_buf = curbuf;  // In case the buffer was wiped out.",
          "3625:     compl_old_match = compl_curr_match; // remember the last current match",
          "3627:     ? &st.last_match_pos : &st.first_match_pos;",
          "",
          "[Removed Lines]",
          "3626:     st.cur_match_pos = (compl_direction == FORWARD)",
          "",
          "[Added Lines]",
          "3722:     st.cur_match_pos = (compl_dir_forward())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3640:      && (!compl_started || st.found_all))",
          "3641:  {",
          "3642:      int status = process_next_cpt_value(&st, &type, ini);",
          "",
          "[Removed Lines]",
          "3638:  if ((ctrl_x_mode == CTRL_X_NORMAL",
          "3639:       || ctrl_x_mode_line_or_eval())",
          "",
          "[Added Lines]",
          "3734:  if ((ctrl_x_mode_normal() || ctrl_x_mode_line_or_eval())",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3663:  {",
          "3664:      if (got_int)",
          "3665:   break;",
          "",
          "[Removed Lines]",
          "3661:  if ((ctrl_x_mode != CTRL_X_NORMAL",
          "3662:       && !ctrl_x_mode_line_or_eval()) || found_new_match != FAIL)",
          "",
          "[Added Lines]",
          "3756:  if ((ctrl_x_mode_not_default() && !ctrl_x_mode_line_or_eval())",
          "3757:       || found_new_match != FAIL)",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3667:      if (type != -1)",
          "3668:   ins_compl_check_keys(0, FALSE);",
          "3671:    && !ctrl_x_mode_line_or_eval()) || compl_interrupted)",
          "3672:   break;",
          "3673:      compl_started = TRUE;",
          "",
          "[Removed Lines]",
          "3670:      if ((ctrl_x_mode != CTRL_X_NORMAL",
          "",
          "[Added Lines]",
          "3765:      if ((ctrl_x_mode_not_default()",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3683:     }",
          "3684:     compl_started = TRUE;",
          "3687:      && *st.e_cpt == NUL)  // Got to end of 'complete'",
          "3688:  found_new_match = FAIL;",
          "3690:     i = -1;  // total of matches, unknown",
          "3692:             && !ctrl_x_mode_line_or_eval()))",
          "3693:  i = ins_compl_make_cyclic();",
          "",
          "[Removed Lines]",
          "3686:     if ((ctrl_x_mode == CTRL_X_NORMAL || ctrl_x_mode_line_or_eval())",
          "3691:     if (found_new_match == FAIL || (ctrl_x_mode != CTRL_X_NORMAL",
          "",
          "[Added Lines]",
          "3781:     if ((ctrl_x_mode_normal() || ctrl_x_mode_line_or_eval())",
          "3786:     if (found_new_match == FAIL || (ctrl_x_mode_not_default()",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3701:           : compl_old_match->cp_prev;",
          "3702:  if (compl_curr_match == NULL)",
          "3703:      compl_curr_match = compl_old_match;",
          "",
          "[Removed Lines]",
          "3700:  compl_curr_match = compl_direction == FORWARD ? compl_old_match->cp_next",
          "",
          "[Added Lines]",
          "3795:  compl_curr_match = compl_dir_forward() ? compl_old_match->cp_next",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3717:     while (!ins_compl_equal(compl_shown_match,",
          "3718:   compl_leader, (int)STRLEN(compl_leader))",
          "3719:      && compl_shown_match->cp_next != NULL",
          "3721:  compl_shown_match = compl_shown_match->cp_next;",
          "3726:      && !ins_compl_equal(compl_shown_match,",
          "3727:   compl_leader, (int)STRLEN(compl_leader))",
          "3728:      && (compl_shown_match->cp_next == NULL",
          "3730:     {",
          "3731:  while (!ins_compl_equal(compl_shown_match,",
          "3732:       compl_leader, (int)STRLEN(compl_leader))",
          "3733:   && compl_shown_match->cp_prev != NULL",
          "3735:      compl_shown_match = compl_shown_match->cp_prev;",
          "3736:     }",
          "3737: }",
          "",
          "[Removed Lines]",
          "3720:      && compl_shown_match->cp_next != compl_first_match)",
          "3725:     if (compl_shows_dir == BACKWARD",
          "3729:   || compl_shown_match->cp_next == compl_first_match))",
          "3734:   && compl_shown_match->cp_prev != compl_first_match)",
          "",
          "[Added Lines]",
          "3815:      && !is_first_match(compl_shown_match->cp_next))",
          "3820:     if (compl_shows_dir_backward()",
          "3824:   || is_first_match(compl_shown_match->cp_next)))",
          "3829:   && !is_first_match(compl_shown_match->cp_prev))",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3750:     if ((int)curwin->w_cursor.col > col)",
          "3751:     {",
          "3752:  if (stop_arrow() == FAIL)",
          "",
          "[Removed Lines]",
          "3749:     col = compl_col + (compl_cont_status & CONT_ADDING ? compl_length : 0);",
          "",
          "[Added Lines]",
          "3844:     col = compl_col + (compl_status_adding() ? compl_length : 0);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3770:     void",
          "3771: ins_compl_insert(int in_compl_func)",
          "3772: {",
          "3777:     if (compl_len < (int)STRLEN(compl_shown_match->cp_str))",
          "3778:  ins_bytes(compl_shown_match->cp_str + compl_len);",
          "3780:  compl_used_match = FALSE;",
          "3781:     else",
          "3782:  compl_used_match = TRUE;",
          "",
          "[Removed Lines]",
          "3773:     int compl_len = ins_compl_len();",
          "3779:     if (ins_compl_at_original_text(compl_shown_match))",
          "",
          "[Added Lines]",
          "3868:     int compl_len = get_compl_len();",
          "3874:     if (match_at_original_text(compl_shown_match))",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3852:     while (--todo >= 0)",
          "3853:     {",
          "3855:  {",
          "3856:      compl_shown_match = compl_shown_match->cp_next;",
          "3857:      found_end = (compl_first_match != NULL",
          "3860:  }",
          "3862:   && compl_shown_match->cp_prev != NULL)",
          "3863:  {",
          "3865:      compl_shown_match = compl_shown_match->cp_prev;",
          "3867:  }",
          "3868:  else",
          "3869:  {",
          "",
          "[Removed Lines]",
          "3854:  if (compl_shows_dir == FORWARD && compl_shown_match->cp_next != NULL)",
          "3858:       && (compl_shown_match->cp_next == compl_first_match",
          "3859:    || compl_shown_match == compl_first_match));",
          "3861:  else if (compl_shows_dir == BACKWARD",
          "3864:      found_end = (compl_shown_match == compl_first_match);",
          "3866:      found_end |= (compl_shown_match == compl_first_match);",
          "",
          "[Added Lines]",
          "3949:  if (compl_shows_dir_forward() && compl_shown_match->cp_next != NULL)",
          "3953:       && (is_first_match(compl_shown_match->cp_next)",
          "3954:    || is_first_match(compl_shown_match)));",
          "3956:  else if (compl_shows_dir_backward()",
          "3959:      found_end = is_first_match(compl_shown_match);",
          "3961:      found_end |= is_first_match(compl_shown_match);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3871:      {",
          "3872:   if (advance)",
          "3873:   {",
          "3875:    compl_pending -= todo + 1;",
          "3876:       else",
          "3877:    compl_pending += todo + 1;",
          "",
          "[Removed Lines]",
          "3874:       if (compl_shows_dir == BACKWARD)",
          "",
          "[Added Lines]",
          "3969:       if (compl_shows_dir_backward())",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3882:      if (!compl_no_select && advance)",
          "3883:      {",
          "3885:       --compl_pending;",
          "3886:   else",
          "3887:       ++compl_pending;",
          "",
          "[Removed Lines]",
          "3884:   if (compl_shows_dir == BACKWARD)",
          "",
          "[Added Lines]",
          "3979:   if (compl_shows_dir_backward())",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3909:      }",
          "3910:      found_end = FALSE;",
          "3911:  }",
          "3913:   && compl_leader != NULL",
          "3914:   && !ins_compl_equal(compl_shown_match,",
          "3915:       compl_leader, (int)STRLEN(compl_leader)))",
          "",
          "[Removed Lines]",
          "3912:  if (!ins_compl_at_original_text(compl_shown_match)",
          "",
          "[Added Lines]",
          "4007:  if (!match_at_original_text(compl_shown_match)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3967:     if (compl_shown_match == NULL)",
          "3968:  return -1;",
          "3973:  ins_compl_update_shown_match();",
          "",
          "[Removed Lines]",
          "3970:     if (compl_leader != NULL",
          "3971:         && !ins_compl_at_original_text(compl_shown_match))",
          "",
          "[Added Lines]",
          "4065:     if (compl_leader != NULL && !match_at_original_text(compl_shown_match))",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3998:     if (compl_no_insert && !started)",
          "3999:     {",
          "4001:  compl_used_match = FALSE;",
          "4002:     }",
          "4003:     else if (insert_match)",
          "",
          "[Removed Lines]",
          "4000:  ins_bytes(compl_orig_text + ins_compl_len());",
          "",
          "[Added Lines]",
          "4094:  ins_bytes(compl_orig_text + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "4005:  if (!compl_get_longest || compl_used_match)",
          "4006:      ins_compl_insert(in_compl_func);",
          "4007:  else",
          "4009:     }",
          "4010:     else",
          "4011:  compl_used_match = FALSE;",
          "",
          "[Removed Lines]",
          "4008:      ins_bytes(compl_leader + ins_compl_len());",
          "",
          "[Added Lines]",
          "4102:      ins_bytes(compl_leader + get_compl_len());",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "4191:     static int",
          "4192: get_normal_compl_info(char_u *line, int startcol, colnr_T curs_col)",
          "4193: {",
          "4195:     {",
          "4197:  {",
          "4198:      while (--startcol >= 0 && vim_isIDc(line[startcol]))",
          "4199:   ;",
          "",
          "[Removed Lines]",
          "4194:     if ((compl_cont_status & CONT_SOL) || ctrl_x_mode == CTRL_X_PATH_DEFINES)",
          "4196:  if (!(compl_cont_status & CONT_ADDING))",
          "",
          "[Added Lines]",
          "4288:     if ((compl_cont_status & CONT_SOL) || ctrl_x_mode_path_defines())",
          "4290:  if (!compl_status_adding())",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "4208:  if (compl_pattern == NULL)",
          "4209:      return FAIL;",
          "4210:     }",
          "4212:     {",
          "4213:  char_u     *prefix = (char_u *)\"\\\\<\";",
          "",
          "[Removed Lines]",
          "4211:     else if (compl_cont_status & CONT_ADDING)",
          "",
          "[Added Lines]",
          "4305:     else if (compl_status_adding())",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "4391:     funcname = get_complete_funcname(ctrl_x_mode);",
          "4392:     if (*funcname == NUL)",
          "4393:     {",
          "4395:   ? \"completefunc\" : \"omnifunc\");",
          "4396:  return FAIL;",
          "4397:     }",
          "",
          "[Removed Lines]",
          "4394:  semsg(_(e_option_str_is_not_set), ctrl_x_mode == CTRL_X_FUNCTION",
          "",
          "[Added Lines]",
          "4488:  semsg(_(e_option_str_is_not_set), ctrl_x_mode_function()",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "4499:     static int",
          "4500: compl_get_info(char_u *line, int startcol, colnr_T curs_col, int *line_invalid)",
          "4501: {",
          "4503:      || (ctrl_x_mode & CTRL_X_WANT_IDENT",
          "4504:   && !thesaurus_func_complete(ctrl_x_mode)))",
          "4505:     {",
          "",
          "[Removed Lines]",
          "4502:     if (ctrl_x_mode == CTRL_X_NORMAL",
          "",
          "[Added Lines]",
          "4601:     if (ctrl_x_mode_normal()",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "4509:     {",
          "4510:  return get_wholeline_compl_info(line, curs_col);",
          "4511:     }",
          "4513:     {",
          "4514:  return get_filename_compl_info(line, startcol, curs_col);",
          "4515:     }",
          "",
          "[Removed Lines]",
          "4512:     else if (ctrl_x_mode == CTRL_X_FILES)",
          "",
          "[Added Lines]",
          "4611:     else if (ctrl_x_mode_files())",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "4517:     {",
          "4518:  return get_cmdline_compl_info(line, curs_col);",
          "4519:     }",
          "4521:      || thesaurus_func_complete(ctrl_x_mode))",
          "4522:     {",
          "4523:  if (get_userdefined_compl_info(curs_col) == FAIL)",
          "4524:      return FAIL;",
          "4526:     }",
          "4528:     {",
          "4529:  if (get_spell_compl_info(startcol, curs_col) == FAIL)",
          "4530:      return FAIL;",
          "4532:     }",
          "4533:     else",
          "4534:     {",
          "",
          "[Removed Lines]",
          "4520:     else if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI",
          "4527:     else if (ctrl_x_mode == CTRL_X_SPELL)",
          "",
          "[Added Lines]",
          "4619:     else if (ctrl_x_mode_function() || ctrl_x_mode_omni()",
          "4626:     else if (ctrl_x_mode_spell())",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "4554: {",
          "4556:     compl_cont_status &= ~CONT_INTRPT; // remove INTRPT",
          "4560:     {",
          "4561:  if (compl_startpos.lnum != curwin->w_cursor.lnum)",
          "4562:  {",
          "",
          "[Removed Lines]",
          "4557:     if (ctrl_x_mode == CTRL_X_NORMAL",
          "4558:      || ctrl_x_mode == CTRL_X_PATH_PATTERNS",
          "4559:      || ctrl_x_mode == CTRL_X_PATH_DEFINES)",
          "",
          "[Added Lines]",
          "4656:     if (ctrl_x_mode_normal() || ctrl_x_mode_path_patterns()",
          "4657:       || ctrl_x_mode_path_defines())",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "4639:     else",
          "4640:  compl_cont_status &= CONT_LOCAL;",
          "4643:     {",
          "4644:  compl_cont_mode = ctrl_x_mode;",
          "4647:      compl_cont_status = 0;",
          "4648:  compl_cont_status |= CONT_N_ADDS;",
          "",
          "[Removed Lines]",
          "4642:     if (!(compl_cont_status & CONT_ADDING)) // normal expansion",
          "4645:  if (ctrl_x_mode != CTRL_X_NORMAL)",
          "",
          "[Added Lines]",
          "4740:     if (!compl_status_adding()) // normal expansion",
          "4743:  if (ctrl_x_mode_not_default())",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "4655:     if (compl_get_info(line, startcol, curs_col, &line_invalid) == FAIL)",
          "4656:     {",
          "4660:      did_ai = save_did_ai;",
          "4661:  return FAIL;",
          "",
          "[Removed Lines]",
          "4657:  if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI",
          "4658:   || thesaurus_func_complete(ctrl_x_mode))",
          "",
          "[Added Lines]",
          "4755:  if (ctrl_x_mode_function() || ctrl_x_mode_omni()",
          "4756:     || thesaurus_func_complete(ctrl_x_mode))",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "4664:     if (line_invalid)",
          "4665:  line = ml_get(curwin->w_cursor.lnum);",
          "4668:     {",
          "4669:  edit_submode_pre = (char_u *)_(\" Adding\");",
          "4670:  if (ctrl_x_mode_line_or_eval())",
          "",
          "[Removed Lines]",
          "4667:     if (compl_cont_status & CONT_ADDING)",
          "",
          "[Added Lines]",
          "4765:     if (compl_status_adding())",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4728: ins_compl_show_statusmsg(void)",
          "4729: {",
          "4732:     {",
          "4735:     ? (char_u *)_(e_hitend)",
          "4736:     : (char_u *)_(e_pattern_not_found);",
          "4737:  edit_submode_highl = HLF_E;",
          "",
          "[Removed Lines]",
          "4731:     if (compl_first_match == compl_first_match->cp_next)",
          "4733:  edit_submode_extra = (compl_cont_status & CONT_ADDING)",
          "4734:    && compl_length > 1",
          "",
          "[Added Lines]",
          "4829:     if (is_first_match(compl_first_match->cp_next))",
          "4831:  edit_submode_extra = compl_status_adding() && compl_length > 1",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4740:     if (edit_submode_extra == NULL)",
          "4741:     {",
          "4743:  {",
          "4744:      edit_submode_extra = (char_u *)_(\"Back at original\");",
          "4745:      edit_submode_highl = HLF_W;",
          "",
          "[Removed Lines]",
          "4742:  if (ins_compl_at_original_text(compl_curr_match))",
          "",
          "[Added Lines]",
          "4839:  if (match_at_original_text(compl_curr_match))",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4858:     }",
          "4862:     {",
          "4867:  if (compl_length > 1",
          "4872:      compl_cont_status &= ~CONT_N_ADDS;",
          "4873:     }",
          "",
          "[Removed Lines]",
          "4861:     if (compl_first_match == compl_first_match->cp_next)",
          "4868:   || (compl_cont_status & CONT_ADDING)",
          "4869:   || (ctrl_x_mode != CTRL_X_NORMAL",
          "4870:       && ctrl_x_mode != CTRL_X_PATH_PATTERNS",
          "4871:       && ctrl_x_mode != CTRL_X_PATH_DEFINES))",
          "",
          "[Added Lines]",
          "4958:     if (is_first_match(compl_first_match->cp_next))",
          "4965:   || compl_status_adding()",
          "4966:   || (ctrl_x_mode_not_default()",
          "4967:       && !ctrl_x_mode_path_patterns()",
          "4968:       && !ctrl_x_mode_path_defines()))",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4929:      case '.':",
          "4930:      case '*':",
          "4931:      case '[':",
          "4934:       break;",
          "4936:      case '~':",
          "",
          "[Removed Lines]",
          "4932:   if (ctrl_x_mode == CTRL_X_DICTIONARY",
          "4933:         || ctrl_x_mode == CTRL_X_THESAURUS)",
          "",
          "[Added Lines]",
          "5029:   if (ctrl_x_mode_dictionary() || ctrl_x_mode_thesaurus())",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4938:       break;",
          "4940:      case '\\\\':",
          "4943:       break;",
          "4945:      case '^':  // currently it's not needed.",
          "",
          "[Removed Lines]",
          "4941:   if (ctrl_x_mode == CTRL_X_DICTIONARY",
          "4942:         || ctrl_x_mode == CTRL_X_THESAURUS)",
          "",
          "[Added Lines]",
          "5037:   if (ctrl_x_mode_dictionary() || ctrl_x_mode_thesaurus())",
          "",
          "---------------"
        ],
        "src/proto/insexpand.pro||src/proto/insexpand.pro": [
          "File: src/proto/insexpand.pro -> src/proto/insexpand.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: int ctrl_x_mode_line_or_eval(void);",
          "18: int ctrl_x_mode_not_default(void);",
          "19: int ctrl_x_mode_not_defined_yet(void);",
          "20: int has_compl_option(int dict_opt);",
          "21: int vim_is_ctrl_x_key(int c);",
          "22: int ins_compl_accept_char(int c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: int compl_status_adding(void);",
          "21: int compl_status_sol(void);",
          "22: int compl_status_local(void);",
          "23: void compl_status_clear(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: int ins_compl_interrupted(void);",
          "36: int ins_compl_enter_selects(void);",
          "37: colnr_T ins_compl_col(void);",
          "38: int ins_compl_bs(void);",
          "39: void ins_compl_addleader(int c);",
          "40: void ins_compl_addfrommatch(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: int ins_compl_len(void);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: void set_buflocal_ofu_callback(buf_T *buf);",
          "46: int set_thesaurusfunc_option(void);",
          "47: int set_ref_in_insexpand_funcs(int copyID);",
          "49: void f_complete(typval_T *argvars, typval_T *rettv);",
          "50: void f_complete_add(typval_T *argvars, typval_T *rettv);",
          "51: void f_complete_check(typval_T *argvars, typval_T *rettv);",
          "",
          "[Removed Lines]",
          "48: callback_T *get_insert_callback(int type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/search.c||src/search.c": [
          "File: src/search.c -> src/search.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1732:  {",
          "1733:      if ((p_ic ? MB_STRICMP(p, pat) : STRCMP(p, pat)) == 0)",
          "1734:   return OK;",
          "1735:  }",
          "1736:  else if (*p != NUL) // ignore empty lines",
          "1737:  { // expanding lines or words",
          "1740:   return OK;",
          "1741:  }",
          "1742:     }",
          "",
          "[Removed Lines]",
          "1730:  if ((compl_cont_status & CONT_ADDING)",
          "1731:         && !(compl_cont_status & CONT_SOL))",
          "1738:      if ((p_ic ? MB_STRNICMP(p, pat, compl_length)",
          "1739:        : STRNCMP(p, pat, compl_length)) == 0)",
          "",
          "[Added Lines]",
          "1730:  if (compl_status_adding() && !compl_status_sol())",
          "1737:      if ((p_ic ? MB_STRNICMP(p, pat, ins_compl_len())",
          "1738:        : STRNCMP(p, pat, ins_compl_len())) == 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3375:  return;",
          "3377:     if (type != CHECK_PATH && type != FIND_DEFINE",
          "3381:     {",
          "3382:  pat = alloc(len + 5);",
          "3383:  if (pat == NULL)",
          "",
          "[Removed Lines]",
          "3380:      && !(compl_cont_status & CONT_SOL))",
          "",
          "[Added Lines]",
          "3379:      && !compl_status_sol())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3653:      if (def_regmatch.regprog == NULL || define_matched)",
          "3654:      {",
          "3656:   {",
          "3658:       startp = skipwhite(p);",
          "",
          "[Removed Lines]",
          "3655:   if (define_matched || (compl_cont_status & CONT_SOL))",
          "",
          "[Added Lines]",
          "3654:   if (define_matched || compl_status_sol())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3725:       break;",
          "3726:   found = TRUE;",
          "3727:   aux = p = startp;",
          "3729:   {",
          "3731:       if (vim_iswordp(p))",
          "3732:    goto exit_matched;",
          "3733:       p = find_word_start(p);",
          "",
          "[Removed Lines]",
          "3728:   if (compl_cont_status & CONT_ADDING)",
          "3730:       p += compl_length;",
          "",
          "[Added Lines]",
          "3727:   if (compl_status_adding())",
          "3729:       p += ins_compl_len();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3735:   p = find_word_end(p);",
          "3736:   i = (int)(p - aux);",
          "3739:   {",
          "3741:       STRNCPY(IObuff, aux, i);",
          "",
          "[Removed Lines]",
          "3738:   if ((compl_cont_status & CONT_ADDING) && i == compl_length)",
          "",
          "[Added Lines]",
          "3737:   if (compl_status_adding() && i == ins_compl_len())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3783:       IObuff[i] = NUL;",
          "3784:       aux = IObuff;",
          "3787:    goto exit_matched;",
          "3788:   }",
          "",
          "[Removed Lines]",
          "3786:       if (i == compl_length)",
          "",
          "[Added Lines]",
          "3785:       if (i == ins_compl_len())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3917:      if (def_regmatch.regprog == NULL",
          "3918:       && action == ACTION_EXPAND",
          "3920:       && *startp != NUL",
          "3921:       && *(p = startp + mb_ptr2len(startp)) != NUL)",
          "3922:   goto search_line;",
          "",
          "[Removed Lines]",
          "3919:       && !(compl_cont_status & CONT_SOL)",
          "",
          "[Added Lines]",
          "3918:       && !compl_status_sol()",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4000,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4001,",
          "",
          "---------------"
        ]
      }
    }
  ]
}