{
  "cve_id": "CVE-2021-37662",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in `BoostedTreesCalculateBestGainsPerFeature` and similar attack can occur in `BoostedTreesCalculateBestFeatureSplitV2`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. We have patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad",
  "patch_info": {
    "commit_hash": "9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad",
    "files": [
      "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
    ],
    "message": "Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature\n\nPiperOrigin-RevId: 387165936\nChange-Id: I2f70341af96236b2776c2a592c917d549c1fc1e2",
    "before_after_code_files": [
      "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
      "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     const Tensor* node_id_range_t;",
      "53:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
      "54:     const auto node_id_range = node_id_range_t->vec<int32>();",
      "55:     const int32_t node_id_first = node_id_range(0);  // inclusive",
      "56:     const int32_t node_id_last = node_id_range(1);   // exclusive",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     OP_REQUIRES(",
      "55:         context, node_id_range_t->dims() == 1,",
      "56:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
      "57:                                 \"given node_id_range has dims of \",",
      "58:                                 node_id_range_t->dims()));",
      "59:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
      "60:                 errors::InvalidArgument(",
      "61:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
      "62:                     \"given node_id_range has shape \",",
      "63:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "570:     const Tensor* node_id_range_t;",
      "571:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
      "572:     const auto node_id_range = node_id_range_t->vec<int32>();",
      "573:     const int32_t node_id_first = node_id_range(0);  // Inclusive.",
      "574:     const int32_t node_id_last = node_id_range(1);   // Exclusive.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "583:     OP_REQUIRES(",
      "584:         context, node_id_range_t->dims() == 1,",
      "585:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
      "586:                                 \"given node_id_range has dims of \",",
      "587:                                 node_id_range_t->dims()));",
      "588:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
      "589:                 errors::InvalidArgument(",
      "590:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
      "591:                     \"given node_id_range has shape \",",
      "592:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f22acf3400b1103f416458129c771fb57e67386",
      "candidate_info": {
        "commit_hash": "2f22acf3400b1103f416458129c771fb57e67386",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2f22acf3400b1103f416458129c771fb57e67386",
        "files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ],
        "message": "Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature\n\nPiperOrigin-RevId: 387165936\nChange-Id: I2f70341af96236b2776c2a592c917d549c1fc1e2",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:                     \"given node_id_range has shape \",",
          "589:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "590:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "595:     OpInputList stats_summaries_list;",
          "",
          "[Removed Lines]",
          "591:     const int32 node_id_first = node_id_range(0);  // Inclusive.",
          "592:     const int32 node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "[Added Lines]",
          "591:     const int32_t node_id_first = node_id_range(0);  // Inclusive.",
          "592:     const int32_t node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32e03377f84e799b12feee00f059e0871e3e7e9c",
      "candidate_info": {
        "commit_hash": "32e03377f84e799b12feee00f059e0871e3e7e9c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/32e03377f84e799b12feee00f059e0871e3e7e9c",
        "files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ],
        "message": "[Cherrypick2.6] Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     const Tensor* node_id_range_t;",
          "53:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "54:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "55:     const int32 node_id_first = node_id_range(0);  // inclusive",
          "56:     const int32 node_id_last = node_id_range(1);   // exclusive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     OP_REQUIRES(",
          "55:         context, node_id_range_t->dims() == 1,",
          "56:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "57:                                 \"given node_id_range has dims of \",",
          "58:                                 node_id_range_t->dims()));",
          "59:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "60:                 errors::InvalidArgument(",
          "61:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "62:                     \"given node_id_range has shape \",",
          "63:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:     const Tensor* node_id_range_t;",
          "569:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "570:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "575:     OpInputList stats_summaries_list;",
          "",
          "[Removed Lines]",
          "571:     const int32 node_id_first = node_id_range(0);  // Inclusive.",
          "572:     const int32 node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "[Added Lines]",
          "581:     OP_REQUIRES(",
          "582:         context, node_id_range_t->dims() == 1,",
          "583:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "584:                                 \"given node_id_range has dims of \",",
          "585:                                 node_id_range_t->dims()));",
          "586:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "587:                 errors::InvalidArgument(",
          "588:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "589:                     \"given node_id_range has shape \",",
          "590:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54091b4b9661c219d9dc879d9767fc11d56c9047",
      "candidate_info": {
        "commit_hash": "54091b4b9661c219d9dc879d9767fc11d56c9047",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/54091b4b9661c219d9dc879d9767fc11d56c9047",
        "files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ],
        "message": "[Cherrypick2.5] Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     const Tensor* node_id_range_t;",
          "53:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "54:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "55:     const int32 node_id_first = node_id_range(0);  // inclusive",
          "56:     const int32 node_id_last = node_id_range(1);   // exclusive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     OP_REQUIRES(",
          "55:         context, node_id_range_t->dims() == 1,",
          "56:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "57:                                 \"given node_id_range has dims of \",",
          "58:                                 node_id_range_t->dims()));",
          "59:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "60:                 errors::InvalidArgument(",
          "61:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "62:                     \"given node_id_range has shape \",",
          "63:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:     const Tensor* node_id_range_t;",
          "569:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "570:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "575:     OpInputList stats_summaries_list;",
          "",
          "[Removed Lines]",
          "571:     const int32 node_id_first = node_id_range(0);  // Inclusive.",
          "572:     const int32 node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "[Added Lines]",
          "580:     OP_REQUIRES(",
          "581:         context, node_id_range_t->dims() == 1,",
          "582:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "583:                                 \"given node_id_range has dims of \",",
          "584:                                 node_id_range_t->dims()));",
          "585:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "586:                 errors::InvalidArgument(",
          "587:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "588:                     \"given node_id_range has shape \",",
          "589:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "591:     const int32_t node_id_first = node_id_range(0);  // Inclusive.",
          "592:     const int32_t node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7f88573532f61f8bf2a4749f2966107fe15f51c",
      "candidate_info": {
        "commit_hash": "b7f88573532f61f8bf2a4749f2966107fe15f51c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b7f88573532f61f8bf2a4749f2966107fe15f51c",
        "files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ],
        "message": "[Cherrypick2.4] Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     const Tensor* node_id_range_t;",
          "53:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "54:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "55:     const int32 node_id_first = node_id_range(0);  // inclusive",
          "56:     const int32 node_id_last = node_id_range(1);   // exclusive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     OP_REQUIRES(",
          "55:         context, node_id_range_t->dims() == 1,",
          "56:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "57:                                 \"given node_id_range has dims of \",",
          "58:                                 node_id_range_t->dims()));",
          "59:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "60:                 errors::InvalidArgument(",
          "61:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "62:                     \"given node_id_range has shape \",",
          "63:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:     const Tensor* node_id_range_t;",
          "569:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "570:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "575:     OpInputList stats_summaries_list;",
          "",
          "[Removed Lines]",
          "571:     const int32 node_id_first = node_id_range(0);  // Inclusive.",
          "572:     const int32 node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "[Added Lines]",
          "580:     OP_REQUIRES(",
          "581:         context, node_id_range_t->dims() == 1,",
          "582:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "583:                                 \"given node_id_range has dims of \",",
          "584:                                 node_id_range_t->dims()));",
          "585:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "586:                 errors::InvalidArgument(",
          "587:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "588:                     \"given node_id_range has shape \",",
          "589:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "591:     const int32_t node_id_first = node_id_range(0);  // Inclusive.",
          "592:     const int32_t node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3abfbf613ab0571657d14b704f5497429abd7cdc",
      "candidate_info": {
        "commit_hash": "3abfbf613ab0571657d14b704f5497429abd7cdc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3abfbf613ab0571657d14b704f5497429abd7cdc",
        "files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ],
        "message": "[Cherrypick2.3] Disallow empty node_id_range in tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2 and tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
        "before_after_code_files": [
          "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/boosted_trees/stats_ops.cc||tensorflow/core/kernels/boosted_trees/stats_ops.cc": [
          "File: tensorflow/core/kernels/boosted_trees/stats_ops.cc -> tensorflow/core/kernels/boosted_trees/stats_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     const Tensor* node_id_range_t;",
          "53:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "54:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "55:     const int32 node_id_first = node_id_range(0);  // inclusive",
          "56:     const int32 node_id_last = node_id_range(1);   // exclusive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     OP_REQUIRES(",
          "55:         context, node_id_range_t->dims() == 1,",
          "56:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "57:                                 \"given node_id_range has dims of \",",
          "58:                                 node_id_range_t->dims()));",
          "59:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "60:                 errors::InvalidArgument(",
          "61:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "62:                     \"given node_id_range has shape \",",
          "63:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:     const Tensor* node_id_range_t;",
          "569:     OP_REQUIRES_OK(context, context->input(\"node_id_range\", &node_id_range_t));",
          "570:     const auto node_id_range = node_id_range_t->vec<int32>();",
          "575:     OpInputList stats_summaries_list;",
          "",
          "[Removed Lines]",
          "571:     const int32 node_id_first = node_id_range(0);  // Inclusive.",
          "572:     const int32 node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "[Added Lines]",
          "580:     OP_REQUIRES(",
          "581:         context, node_id_range_t->dims() == 1,",
          "582:         errors::InvalidArgument(\"node_id_range must be a rank 1 tensor, but \"",
          "583:                                 \"given node_id_range has dims of \",",
          "584:                                 node_id_range_t->dims()));",
          "585:     OP_REQUIRES(context, node_id_range_t->dim_size(0) == 2,",
          "586:                 errors::InvalidArgument(",
          "587:                     \"node_id_range must be a rank 1 tensor with shape=[2], but \"",
          "588:                     \"given node_id_range has shape \",",
          "589:                     node_id_range_t->dim_size(0), \" on its first dim\"));",
          "591:     const int32_t node_id_first = node_id_range(0);  // Inclusive.",
          "592:     const int32_t node_id_last = node_id_range(1);   // Exclusive.",
          "",
          "---------------"
        ]
      }
    }
  ]
}