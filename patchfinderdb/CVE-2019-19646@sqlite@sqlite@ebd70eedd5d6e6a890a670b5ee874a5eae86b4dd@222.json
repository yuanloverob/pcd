{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
      "candidate_info": {
        "commit_hash": "2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c40a3eb354f2fac4b3d8f24aa6fb459eb4b2d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Disallow tables that have only virtual columns.\n\nFossilOrigin-Name: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2244:   if( p->tabFlags & TF_HasGenerated ){",
          "2246:     testcase( p->tabFlags & TF_HasVirtual );",
          "2247:     testcase( p->tabFlags & TF_HasStored );",
          "2248:     for(ii=0; ii<p->nCol; ii++){",
          "",
          "[Removed Lines]",
          "2245:     int ii;",
          "",
          "[Added Lines]",
          "2245:     int ii, nNV = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2253:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2254:                                     p->aCol[ii].pDflt, 0);",
          "2255:       }",
          "2256:     }",
          "2257:   }",
          "2258: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2256:       if( (colFlags & COLFLAG_VIRTUAL)==0 ) nNV++;",
          "2257:     }",
          "2258:     if( nNV==0 ){",
          "2259:       sqlite3ErrorMsg(pParse, \"must have at least one non-VIRTUAL column\");",
          "2260:       return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
      "candidate_info": {
        "commit_hash": "b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9fc45534dec6b6a5e8047285d8d8527ac963bdb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Early detection out-of-bounds page numbers on the direct-overflow-read optimization gives consistent error messages regardless of whether or not the optimization is enabled.\n\nFossilOrigin-Name: b517a52fa36df0a0854a75858b5e81861771d2e9032a5a0ad79aa76ae64130a2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d41ca7d6efbdac70890a8d4159488fc7f59bf78a550b00597b4df990c4fcaef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4880:           memcpy(aSave, aWrite, 4);",
          "4881:           rc = sqlite3OsRead(fd, aWrite, a+4, (i64)pBt->pageSize*(nextPage-1));",
          "4882:           nextPage = get4byte(aWrite);",
          "4883:           memcpy(aWrite, aSave, 4);",
          "4884:         }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4882:           if( rc && nextPage>pBt->nPage ) rc = SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "401593e348028071e0fd59753df046216a137ef9",
      "candidate_info": {
        "commit_hash": "401593e348028071e0fd59753df046216a137ef9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/401593e348028071e0fd59753df046216a137ef9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl"
        ],
        "message": "Add new release tests for windows to releasetest_data.tcl.\n\nFossilOrigin-Name: 1b330ec24c350c59f6d3779f6c0819fe95b89f4dfca5a1f2c22f22b5fe9cd087",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8168021f9ab5fb8b4888257963c9ec68fd1dfeedaf6bba4b8e07438001d0be0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #",
          "5: set USAGE {",
          "9: $argv0 script ?-msvc? CONFIGURATION TARGET",
          "10:     Given a configuration and make target, return a bash (or, if -msvc",
          "11:     is specified, batch) script to execute the test. The first argument",
          "12:     passed to the script must be a directory containing SQLite source code.",
          "20: }",
          "22: # Omit comments (text between # and \\n) in a long multi-line string.",
          "",
          "[Removed Lines]",
          "2: # This file contains Configuration data used by \"wapptest.tcl\" and",
          "3: # \"releasetest.tcl\".",
          "6: $argv0 configurations",
          "7:     List available configurations.",
          "14: $argv0 platforms",
          "15:     List available platforms.",
          "17: $argv0 tests ?-nodebug? PLATFORM",
          "18:     List tests in a specified platform. If the -nodebug switch is",
          "19:     specified, synthetic debug/ndebug configurations are omitted.",
          "",
          "[Added Lines]",
          "1: # 2019 August 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file implements a program that produces scripts (either shell scripts",
          "13: # or batch files) to implement a particular test that is part of the SQLite",
          "14: # release testing procedure. For example, to run veryquick.test with a",
          "15: # specified set of -D compiler switches.",
          "16: #",
          "17: # A \"configuration\" is a set of options passed to [./configure] and [make]",
          "18: # to build the SQLite library in a particular fashion. A \"platform\" is a",
          "19: # list of tests; most platforms are named after the hardware/OS platform",
          "20: # that the tests will be run on as part of the release procedure. Each",
          "21: # \"test\" is a combination of a configuration and a makefile target (e.g.",
          "22: # \"fulltest\"). The program may be invoked as follows:",
          "25: $argv0 platforms",
          "26:     List available platforms.",
          "28: $argv0 tests ?-nodebug? PLATFORM",
          "29:     List tests in a specified platform. If the -nodebug switch is",
          "30:     specified, synthetic debug/ndebug configurations are omitted. Each",
          "31:     test is a combination of a configuration and a makefile target.",
          "38: $argv0 configurations",
          "39:     List available configurations.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     --enable-json1",
          "235:   }",
          "237:   # The next group of configurations are used only by the",
          "238:   # Failure-Detection platform.  They are all the same, but we need",
          "239:   # different names for them all so that they results appear in separate",
          "240:   # subdirectories.",
          "241:   #",
          "246:   FuzzFail1 {-O0}",
          "247:   FuzzFail2 {-O0}",
          "248: }]",
          "",
          "[Removed Lines]",
          "242:   Fail0 {-O0}",
          "243:   Fail2 {-O0}",
          "244:   Fail3 {-O0}",
          "245:   Fail4 {-O0}",
          "",
          "[Added Lines]",
          "257:   \"Windows-Memdebug\" {",
          "258:     MEMDEBUG=1",
          "259:     DEBUG=3",
          "260:   }",
          "261:   \"Windows-Win32Heap\" {",
          "262:     WIN32HEAP=1",
          "263:     DEBUG=4",
          "264:   }",
          "271:   Fail0     {-O0}",
          "272:   Fail2     {-O0}",
          "273:   Fail3     {-O0}",
          "274:   Fail4     {-O0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253: array set ::Platforms [strip_comments {",
          "254:   Linux-x86_64 {",
          "256:     \"Fast-One\"                \"fuzztest test\"",
          "257:     \"Debug-One\"               \"mptest test\"",
          "258:     \"Have-Not\"                test",
          "",
          "[Removed Lines]",
          "255:     \"Check-Symbols\"           checksymbols",
          "",
          "[Added Lines]",
          "284:     \"Check-Symbols*\"          checksymbols",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:     \"Sanitize\"                {QUICKTEST_OMIT=func4.test,nan.test test}",
          "269:     \"Device-One\"              fulltest",
          "270:     \"Default\"                 \"threadtest fulltest\"",
          "272:   }",
          "273:   Linux-i686 {",
          "274:     \"Devkit\"                  test",
          "",
          "[Removed Lines]",
          "271:     \"Valgrind\"                valgrindtest",
          "",
          "[Added Lines]",
          "300:     \"Valgrind*\"               valgrindtest",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:   \"Windows NT-intel\" {",
          "292:     \"Stdcall\"                 test",
          "293:     \"Have-Not\"                test",
          "294:     \"Default\"                 \"mptest fulltestonly\"",
          "295:   }",
          "296:   \"Windows NT-amd64\" {",
          "297:     \"Stdcall\"                 test",
          "298:     \"Have-Not\"                test",
          "299:     \"Default\"                 \"mptest fulltestonly\"",
          "300:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     \"Windows-Memdebug*\"       test",
          "324:     \"Windows-Win32Heap*\"      test",
          "330:     \"Windows-Memdebug*\"       test",
          "331:     \"Windows-Win32Heap*\"      test",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:   # correctly identifies failures.",
          "305:   #",
          "306:   Failure-Detection {",
          "314:   }",
          "315: }]",
          "",
          "[Removed Lines]",
          "307:     Fail0     \"TEST_FAILURE=0 test\"",
          "308:     Sanitize  \"TEST_FAILURE=1 test\"",
          "309:     Fail2     \"TEST_FAILURE=2 valgrindtest\"",
          "310:     Fail3     \"TEST_FAILURE=3 valgrindtest\"",
          "311:     Fail4     \"TEST_FAILURE=4 test\"",
          "312:     FuzzFail1 \"TEST_FAILURE=5 test\"",
          "313:     FuzzFail2 \"TEST_FAILURE=5 valgrindtest\"",
          "",
          "[Added Lines]",
          "340:     Fail0*     \"TEST_FAILURE=0 test\"",
          "341:     Sanitize*  \"TEST_FAILURE=1 test\"",
          "342:     Fail2*     \"TEST_FAILURE=2 valgrindtest\"",
          "343:     Fail3*     \"TEST_FAILURE=3 valgrindtest\"",
          "344:     Fail4*     \"TEST_FAILURE=4 test\"",
          "345:     FuzzFail1* \"TEST_FAILURE=5 test\"",
          "346:     FuzzFail2* \"TEST_FAILURE=5 valgrindtest\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "319: #",
          "320: foreach {key value} [array get ::Platforms] {",
          "321:   foreach {v t} $value {",
          "322:     if {0==[info exists ::Configs($v)]} {",
          "323:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "324:       exit -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     if {[string range $v end end]==\"*\"} {",
          "356:       set v [string range $v 0 end-1]",
          "357:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:   set makeOpts   [list]                         ;# Extra args for [make]",
          "369:   set configOpts [list]                         ;# Extra args for [configure]",
          "372:     lappend opts -DSQLITE_OS_WIN=1",
          "373:   } else {",
          "374:     lappend opts -DSQLITE_OS_UNIX=1",
          "",
          "[Removed Lines]",
          "371:   if {$::tcl_platform(platform)==\"windows\"} {",
          "",
          "[Added Lines]",
          "407:   if {$::tcl_platform(platform)==\"windows\" || $bMsvc} {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:   # $opts, $cflags, $makeOpts and $configOpts along the way. Rules are as",
          "399:   # follows:",
          "400:   #",
          "403:   #",
          "405:   #",
          "407:   #      this command is preparing a script for MSVC - then add an",
          "408:   #      equivalent to $makeOpts or $opts.",
          "409:   #",
          "411:   #      mode and the parameter is an -O<integer> option, instead add",
          "412:   #      an OPTIMIZATIONS=<integer> switch to $makeOpts.",
          "413:   #",
          "415:   #",
          "416:   foreach param $::Configs($config) {",
          "417:     if {$bRemoveDebug} {",
          "418:       if {$param==\"-DSQLITE_DEBUG\" || $param==\"-DSQLITE_DEBUG=1\"",
          "419:        || $param==\"-DSQLITE_MEMDEBUG\" || $param==\"-DSQLITE_MEMDEBUG=1\"",
          "",
          "[Removed Lines]",
          "401:   #   1. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "402:   #      -DSQLITE_DEBUG=1, discard it.",
          "404:   #   2. If the parameter begins with \"-D\", add it to $opts.",
          "406:   #   3. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "410:   #   4. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "414:   #   5. If none of the above apply, add the parameter to $makeOpts",
          "",
          "[Added Lines]",
          "437:   #   1. If the parameter begins with a \"*\", discard it.",
          "438:   #",
          "439:   #   2. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "440:   #      -DSQLITE_DEBUG=1, discard it",
          "442:   #   3. If the parameter begins with \"-D\", add it to $opts.",
          "444:   #   4. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "448:   #   5. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "452:   #   6. If none of the above apply, add the parameter to $makeOpts",
          "455:     if {[string range $param 0 0]==\"*\"} continue",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "529:   }",
          "531:   foreach {config target} $::Platforms($p) {",
          "532:     puts \"$config \\\"$target\\\"\"",
          "543:       }",
          "544:     }",
          "545:   }",
          "",
          "[Removed Lines]",
          "533:     if {$bNodebug==0} {",
          "534:       if {$target!=\"checksymbols\" && $target!=\"valgrindtest\"",
          "535:        && $target!=\"fuzzoomtest\"",
          "536:       } {",
          "537:         set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "538:         if {$iHas>=0} {",
          "539:           puts \"$config-ndebug \\\"test\\\"\"",
          "540:         } else {",
          "541:           puts \"$config-debug \\\"test\\\"\"",
          "542:         }",
          "",
          "[Added Lines]",
          "572:     set bNosynthetic 0",
          "573:     if {[string range $config end end]==\"*\"} {",
          "574:       set bNosynthetic 1",
          "575:       set config [string range $config 0 end-1]",
          "576:     }",
          "578:     if {$bNodebug==0 && $bNosynthetic==0} {",
          "579:       set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "580:       if {$iHas>=0} {",
          "581:         puts \"$config-ndebug \\\"test\\\"\"",
          "582:       } else {",
          "583:         puts \"$config-debug \\\"test\\\"\"",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: }",
          "306: # Return the contents of the \"slave script\" - the script run by slave",
          "313: #",
          "314: proc wapptest_slave_script {} {",
          "315:   global G",
          "",
          "[Removed Lines]",
          "307: # processes to actually perform the test. It does two things:",
          "308: #",
          "309: #   1. Reads and [exec]s the contents of file wapptest_configure.sh.",
          "310: #   2. Reads and [exec]s the contents of file wapptest_make.sh.",
          "311: #",
          "312: # Step 1 is omitted if the test uses MSVC (which does not use configure).",
          "",
          "[Added Lines]",
          "307: # processes to actually perform the test. All it does is execute the",
          "308: # test script already written to disk (wapptest_cmd.sh or wapptest_cmd.bat).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
      "candidate_info": {
        "commit_hash": "2964225247f1b9418aef50a042b2997edb3b6ad6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2964225247f1b9418aef50a042b2997edb3b6ad6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Prevent the printf formatter from doing large memory allocations - larger than either the size of the static buffer for interfaces like sqlite3_snprintf(), or larger than SQLITE_LIMIT_LENGTH for interfaces that are associated with a database connection.  This helps to prevent DOS attacks on products that let hostile sources inject arbitrary SQL.  It also helps fuzzers run faster and more effectively.\n\nFossilOrigin-Name: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   return (char*)sqlite3_value_text(p->apArg[p->nUsed++]);",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: static char *printfTempBuf(sqlite3_str *pAccum, sqlite3_int64 n){",
          "168:   char *z;",
          "169:   if( n>pAccum->nAlloc && n>pAccum->mxAlloc ){",
          "170:     setStrAccumError(pAccum, SQLITE_TOOBIG);",
          "171:     return 0;",
          "172:   }",
          "173:   z = sqlite3DbMallocRaw(pAccum->db, n);",
          "174:   if( z==0 ){",
          "175:     setStrAccumError(pAccum, SQLITE_NOMEM);",
          "176:   }",
          "177:   return z;",
          "178: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:           zOut = buf;",
          "423:         }else{",
          "424:           u64 n = (u64)precision + 10 + precision/3;",
          "430:           nOut = (int)n;",
          "431:         }",
          "432:         bufpt = &zOut[nOut-1];",
          "",
          "[Removed Lines]",
          "425:           zOut = zExtra = sqlite3Malloc( n );",
          "426:           if( zOut==0 ){",
          "427:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "428:             return;",
          "429:           }",
          "",
          "[Added Lines]",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         }else{",
          "546:           e2 = exp;",
          "547:         }",
          "554:           }",
          "555:         }",
          "556:         zOut = bufpt;",
          "",
          "[Removed Lines]",
          "548:         if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){",
          "549:           bufpt = zExtra",
          "550:               = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );",
          "551:           if( bufpt==0 ){",
          "552:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "553:             return;",
          "",
          "[Added Lines]",
          "566:         {",
          "568:           szBufNeeded = MAX(e2,0)+(i64)precision+(i64)width+15;",
          "569:           if( szBufNeeded > etBUFSIZE ){",
          "570:             bufpt = zExtra = printfTempBuf(pAccum, szBufNeeded);",
          "571:             if( bufpt==0 ) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774:         needQuote = !isnull && xtype==etSQLESCAPE2;",
          "775:         n += i + 3;",
          "776:         if( n>etBUFSIZE ){",
          "782:         }else{",
          "783:           bufpt = buf;",
          "784:         }",
          "",
          "[Removed Lines]",
          "777:           bufpt = zExtra = sqlite3Malloc( n );",
          "778:           if( bufpt==0 ){",
          "779:             setStrAccumError(pAccum, SQLITE_NOMEM);",
          "780:             return;",
          "781:           }",
          "",
          "[Added Lines]",
          "795:           bufpt = zExtra = printfTempBuf(pAccum, n);",
          "796:           if( bufpt==0 ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
      "candidate_info": {
        "commit_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Remove a stray tab from the source code.\n\nFossilOrigin-Name: 0ada58e9303d53aba8bdc37abe5904aa40e91f80e247eb51cb1192387b0d661c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   assert( p->zSql!=0 );",
          "68:   sqlite3OsCurrentTimeInt64(db->pVfs, &iNow);",
          "69:   iElapse = (iNow - p->startTime)*1000000;",
          "71:   if( db->xProfile ){",
          "72:     db->xProfile(db->pProfileArg, p->zSql, iElapse);",
          "73:   }",
          "",
          "[Removed Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "[Added Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "---------------"
        ]
      }
    }
  ]
}