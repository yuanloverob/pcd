{
  "cve_id": "CVE-2013-2277",
  "cve_desc": "The ff_h264_decode_seq_parameter_set function in h264_ps.c in libavcodec in FFmpeg before 1.1.3 does not validate the relationship between luma depth and chroma depth, which allows remote attackers to cause a denial of service (out-of-bounds array access and application crash) or possibly have unspecified other impact via crafted H.264 data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a",
  "patch_info": {
    "commit_hash": "bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a",
    "files": [
      "libavcodec/h264_ps.c"
    ],
    "message": "h264: check that luma and chroma depth match\n\nFixes out of array access\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
      "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:         }",
      "381:         sps->bit_depth_luma   = get_ue_golomb(&h->gb) + 8;",
      "382:         sps->bit_depth_chroma = get_ue_golomb(&h->gb) + 8;",
      "384:             av_log(h->avctx, AV_LOG_ERROR, \"illegal bit depth value (%d, %d)\\n\",",
      "385:                    sps->bit_depth_luma, sps->bit_depth_chroma);",
      "386:             goto fail;",
      "",
      "[Removed Lines]",
      "383:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U) {",
      "",
      "[Added Lines]",
      "383:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U || sps->bit_depth_luma != sps->bit_depth_chroma) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02d1efdd5b61cefb96562ff9b94c03486a8ead15",
      "candidate_info": {
        "commit_hash": "02d1efdd5b61cefb96562ff9b94c03486a8ead15",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/02d1efdd5b61cefb96562ff9b94c03486a8ead15",
        "files": [
          "libavcodec/h264_ps.c"
        ],
        "message": "h264: check that luma and chroma depth match\n\nFixes out of array access\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a)\n\nConflicts:\n\n\tlibavcodec/h264_ps.c\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ],
          "candidate": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
          "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:         }",
          "386:         sps->bit_depth_luma   = get_ue_golomb(&s->gb) + 8;",
          "387:         sps->bit_depth_chroma = get_ue_golomb(&s->gb) + 8;",
          "389:             av_log(h->s.avctx, AV_LOG_ERROR, \"illegal bit depth value (%d, %d)\\n\",",
          "390:                    sps->bit_depth_luma, sps->bit_depth_chroma);",
          "391:             goto fail;",
          "",
          "[Removed Lines]",
          "388:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U) {",
          "",
          "[Added Lines]",
          "388:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U || sps->bit_depth_luma != sps->bit_depth_chroma) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "676df8c4c70c67f8f31a439f8ab301f7de3fe977",
      "candidate_info": {
        "commit_hash": "676df8c4c70c67f8f31a439f8ab301f7de3fe977",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/676df8c4c70c67f8f31a439f8ab301f7de3fe977",
        "files": [
          "libavcodec/h264_ps.c"
        ],
        "message": "h264: check that luma and chroma depth match\n\nFixes out of array access\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a)\n\nConflicts:\n\n\tlibavcodec/h264_ps.c",
        "before_after_code_files": [
          "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ],
          "candidate": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
          "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:         }",
          "382:         sps->bit_depth_luma   = get_ue_golomb(&s->gb) + 8;",
          "383:         sps->bit_depth_chroma = get_ue_golomb(&s->gb) + 8;",
          "385:             av_log(h->s.avctx, AV_LOG_ERROR, \"illegal bit depth value (%d, %d)\\n\",",
          "386:                    sps->bit_depth_luma, sps->bit_depth_chroma);",
          "387:             goto fail;",
          "",
          "[Removed Lines]",
          "384:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U) {",
          "",
          "[Added Lines]",
          "384:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U || sps->bit_depth_luma != sps->bit_depth_chroma) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b7f7748be447e1446f63b13da472ba7e00f329",
      "candidate_info": {
        "commit_hash": "c2b7f7748be447e1446f63b13da472ba7e00f329",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/c2b7f7748be447e1446f63b13da472ba7e00f329",
        "files": [
          "libavcodec/h264_ps.c"
        ],
        "message": "h264: check for invalid bit depth value.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ],
          "candidate": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
          "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:             sps->residual_color_transform_flag = get_bits1(&s->gb);",
          "350:         sps->bit_depth_luma   = get_ue_golomb(&s->gb) + 8;",
          "351:         sps->bit_depth_chroma = get_ue_golomb(&s->gb) + 8;",
          "352:         sps->transform_bypass = get_bits1(&s->gb);",
          "353:         decode_scaling_matrices(h, sps, NULL, 1, sps->scaling_matrix4, sps->scaling_matrix8);",
          "354:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:         if (sps->bit_depth_luma > 12U || sps->bit_depth_chroma > 12U) {",
          "353:             av_log(h->s.avctx, AV_LOG_ERROR, \"illegal bit depth value (%d, %d)\\n\",",
          "354:                    sps->bit_depth_luma, sps->bit_depth_chroma);",
          "355:             goto fail;",
          "356:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e162733dcd217baa9e478818727fdda5cca28d03",
      "candidate_info": {
        "commit_hash": "e162733dcd217baa9e478818727fdda5cca28d03",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e162733dcd217baa9e478818727fdda5cca28d03",
        "files": [
          "libavcodec/h264.c",
          "libavcodec/h264.h",
          "libavcodec/h264_ps.c"
        ],
        "message": "h264: 12 and 14 bit support\n\nThis works with I, P and B frames\nCAVLC and CABAC\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264.h||libavcodec/h264.h",
          "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ],
          "candidate": [
            "libavcodec/h264_ps.c||libavcodec/h264_ps.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static const uint8_t rem6[QP_MAX_NUM + 1] = {",
          "54:     0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2,",
          "55:     3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5,",
          "57: };",
          "59: static const uint8_t div6[QP_MAX_NUM + 1] = {",
          "60:     0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3,  3,  3,",
          "61:     3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,  6,  6,",
          "63: };",
          "65: static const enum PixelFormat hwaccel_pixfmt_list_h264_jpeg_420[] = {",
          "",
          "[Removed Lines]",
          "56:     0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3,",
          "62:     7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10,",
          "",
          "[Added Lines]",
          "56:     0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2,",
          "57:     3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5,",
          "58:     0, 1, 2, 3,",
          "64:     7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10,",
          "65:    10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13, 13, 13, 13,",
          "66:    14,14,14,14,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2485:         if (s->avctx->bits_per_raw_sample != h->sps.bit_depth_luma ||",
          "2486:             h->cur_chroma_format_idc != h->sps.chroma_format_idc) {",
          "2488:                 (h->sps.bit_depth_luma != 9 || !CHROMA422)) {",
          "2489:                 s->avctx->bits_per_raw_sample = h->sps.bit_depth_luma;",
          "2490:                 h->cur_chroma_format_idc = h->sps.chroma_format_idc;",
          "",
          "[Removed Lines]",
          "2487:             if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 10 &&",
          "",
          "[Added Lines]",
          "2491:             if (h->sps.bit_depth_luma >= 8 && h->sps.bit_depth_luma <= 14 && h->sps.bit_depth_luma != 11 && h->sps.bit_depth_luma != 13 &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2542:             else",
          "2543:                 s->avctx->pix_fmt = PIX_FMT_YUV420P10;",
          "2544:             break;",
          "2545:         case 8:",
          "2546:             if (CHROMA444) {",
          "2547:                     s->avctx->pix_fmt = s->avctx->color_range == AVCOL_RANGE_JPEG ? PIX_FMT_YUVJ444P",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2549:         case 12:",
          "2550:             if (CHROMA444) {",
          "2551:                 if (s->avctx->colorspace == AVCOL_SPC_RGB) {",
          "2552:                     s->avctx->pix_fmt = PIX_FMT_GBRP12;",
          "2553:                 } else",
          "2554:                     s->avctx->pix_fmt = PIX_FMT_YUV444P12;",
          "2555:             } else if (CHROMA422)",
          "2556:                 s->avctx->pix_fmt = PIX_FMT_YUV422P12;",
          "2557:             else",
          "2558:                 s->avctx->pix_fmt = PIX_FMT_YUV420P12;",
          "2559:             break;",
          "2560:         case 14:",
          "2561:             if (CHROMA444) {",
          "2562:                 if (s->avctx->colorspace == AVCOL_SPC_RGB) {",
          "2563:                     s->avctx->pix_fmt = PIX_FMT_GBRP14;",
          "2564:                 } else",
          "2565:                     s->avctx->pix_fmt = PIX_FMT_YUV444P14;",
          "2566:             } else if (CHROMA422)",
          "2567:                 s->avctx->pix_fmt = PIX_FMT_YUV422P14;",
          "2568:             else",
          "2569:                 s->avctx->pix_fmt = PIX_FMT_YUV420P14;",
          "2570:             break;",
          "",
          "---------------"
        ],
        "libavcodec/h264.h||libavcodec/h264.h": [
          "File: libavcodec/h264.h -> libavcodec/h264.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: #define DELAYED_PIC_REF 4",
          "110: enum {",
          "",
          "[Removed Lines]",
          "107: #define QP_MAX_NUM (51 + 4*6)           // The maximum supported qp",
          "",
          "[Added Lines]",
          "107: #define QP_MAX_NUM (51 + 6*6)           // The maximum supported qp",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "598:     int parse_last_mb;",
          "599: } H264Context;",
          "602: extern const uint16_t ff_h264_mb_sizes[4];",
          "",
          "[Removed Lines]",
          "601: extern const uint8_t ff_h264_chroma_qp[5][QP_MAX_NUM + 1]; ///< One chroma qp table for each possible bit depth (8-12).",
          "",
          "[Added Lines]",
          "601: extern const uint8_t ff_h264_chroma_qp[7][QP_MAX_NUM + 1]; ///< One chroma qp table for each possible bit depth (8-14).",
          "",
          "---------------"
        ],
        "libavcodec/h264_ps.c||libavcodec/h264_ps.c": [
          "File: libavcodec/h264_ps.c -> libavcodec/h264_ps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     QP(37,d), QP(37,d), QP(37,d), QP(38,d), QP(38,d), QP(38,d),\\",
          "71:     QP(39,d), QP(39,d), QP(39,d), QP(39,d)",
          "74:     {",
          "75:         CHROMA_QP_TABLE_END(8)",
          "76:     },",
          "",
          "[Removed Lines]",
          "73: const uint8_t ff_h264_chroma_qp[5][QP_MAX_NUM+1] = {",
          "",
          "[Added Lines]",
          "73: const uint8_t ff_h264_chroma_qp[7][QP_MAX_NUM+1] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:         18,19,20,21, 22, 23,",
          "97:         CHROMA_QP_TABLE_END(12)",
          "98:     },",
          "99: };",
          "101: static const uint8_t default_scaling4[2][16]={",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     {",
          "100:         0,  1, 2, 3,  4,  5,",
          "101:         6,  7, 8, 9, 10, 11,",
          "102:         12,13,14,15, 16, 17,",
          "103:         18,19,20,21, 22, 23,",
          "104:         24,25,26,27, 28, 29,",
          "105:         CHROMA_QP_TABLE_END(13)",
          "106:     },",
          "107:     {",
          "108:         0,  1, 2, 3,  4,  5,",
          "109:         6,  7, 8, 9, 10, 11,",
          "110:         12,13,14,15, 16, 17,",
          "111:         18,19,20,21, 22, 23,",
          "112:         24,25,26,27, 28, 29,",
          "113:         30,31,32,33, 34, 35,",
          "114:         CHROMA_QP_TABLE_END(14)",
          "115:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:         }",
          "367:         sps->bit_depth_luma   = get_ue_golomb(&s->gb) + 8;",
          "368:         sps->bit_depth_chroma = get_ue_golomb(&s->gb) + 8;",
          "370:             av_log(h->s.avctx, AV_LOG_ERROR, \"illegal bit depth value (%d, %d)\\n\",",
          "371:                    sps->bit_depth_luma, sps->bit_depth_chroma);",
          "372:             goto fail;",
          "",
          "[Removed Lines]",
          "369:         if (sps->bit_depth_luma > 12U || sps->bit_depth_chroma > 12U) {",
          "",
          "[Added Lines]",
          "386:         if (sps->bit_depth_luma > 14U || sps->bit_depth_chroma > 14U) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536:     if(pps_id >= MAX_PPS_COUNT) {",
          "537:         av_log(h->s.avctx, AV_LOG_ERROR, \"pps_id (%d) out of range\\n\", pps_id);",
          "538:         return -1;",
          "541:         return AVERROR_PATCHWELCOME;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:     } else if (h->sps.bit_depth_luma > 10) {",
          "540:         av_log(h->s.avctx, AV_LOG_ERROR, \"Unimplemented luma bit depth=%d (max=10)\\n\", h->sps.bit_depth_luma);",
          "",
          "[Added Lines]",
          "556:     } else if (h->sps.bit_depth_luma > 14) {",
          "557:         av_log(h->s.avctx, AV_LOG_ERROR, \"Invalid luma bit depth=%d\\n\", h->sps.bit_depth_luma);",
          "558:         return AVERROR_INVALIDDATA;",
          "559:     } else if (h->sps.bit_depth_luma == 11 || h->sps.bit_depth_luma == 13) {",
          "560:         av_log(h->s.avctx, AV_LOG_ERROR, \"Unimplemented luma bit depth=%d\\n\", h->sps.bit_depth_luma);",
          "",
          "---------------"
        ]
      }
    }
  ]
}