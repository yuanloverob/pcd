{
  "cve_id": "CVE-2014-3572",
  "cve_desc": "The ssl3_get_key_exchange function in s3_clnt.c in OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k allows remote SSL servers to conduct ECDHE-to-ECDH downgrade attacks and trigger a loss of forward secrecy by omitting the ServerKeyExchange message.",
  "repo": "openssl/openssl",
  "patch_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
  "patch_info": {
    "commit_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b15f8769644b00ef7283521593360b7b2135cb63",
    "files": [
      "CHANGES",
      "ssl/s3_clnt.c"
    ],
    "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1376:  int encoded_pt_len = 0;",
      "1377: #endif",
      "1381:  n=s->method->ssl_get_message(s,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1379:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1386:   &ok);",
      "1387:  if (!ok) return((int)n);",
      "1389:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
      "1390:   {",
      "1391: #ifndef OPENSSL_NO_PSK",
      "1393:      omitted if no identity hint is sent. Set",
      "1394:      session->sess_cert anyway to avoid problems",
      "1397:    {",
      "1398:    s->session->sess_cert=ssl_sess_cert_new();",
      "1399:    if (s->ctx->psk_identity_hint)",
      "",
      "[Removed Lines]",
      "1396:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
      "",
      "[Added Lines]",
      "1391:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1399:   if (alg_k & (SSL_kDHE|SSL_kECDHE))",
      "1400:    {",
      "1401:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
      "1402:    al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1403:    goto f_err;",
      "1404:    }",
      "1410:   if (alg_k & SSL_kPSK)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1439:  param_len=0;",
      "1442:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
      "1445:  al=SSL_AD_DECODE_ERROR;",
      "",
      "[Removed Lines]",
      "1441:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1443:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
      "candidate_info": {
        "commit_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "files": [
          "include/openssl/ssl.h",
          "ssl/d1_clnt.c",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem.c"
        ],
        "message": "Move PACKET creation into the state machine\n\nPreviously each message specific process function would create its own\nPACKET structure. Rather than duplicate all of this code lots of times we\nshould create it in the state machine itself.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/d1_clnt.c||ssl/d1_clnt.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem.c||ssl/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1985: # define SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC          371",
          "1986: # define SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST        385",
          "1987: # define SSL_F_DTLS_GET_REASSEMBLED_MESSAGE               370",
          "1988: # define SSL_F_READ_STATE_MACHINE                         352",
          "1989: # define SSL_F_SSL3_ACCEPT                                128",
          "1990: # define SSL_F_SSL3_ADD_CERT_TO_BUF                       296",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1988: # define SSL_F_DTLS_PROCESS_HELLO_VERIFY                  386",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300: # define SSL_R_INVALID_TICKET_KEYS_LENGTH                 325",
          "2301: # define SSL_R_INVALID_TRUST                              279",
          "2302: # define SSL_R_LENGTH_MISMATCH                            159",
          "2303: # define SSL_R_LENGTH_TOO_SHORT                           160",
          "2304: # define SSL_R_LIBRARY_BUG                                274",
          "2305: # define SSL_R_LIBRARY_HAS_NO_CIPHERS                     161",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304: # define SSL_R_LENGTH_TOO_LONG                            102",
          "",
          "---------------"
        ],
        "ssl/d1_clnt.c||ssl/d1_clnt.c": [
          "File: ssl/d1_clnt.c -> ssl/d1_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                           dtls1_get_client_method, DTLSv1_2_enc_data)",
          "160: {",
          "161:     int al;",
          "163:     unsigned int cookie_len;",
          "169:     if (cookie_len > sizeof(s->d1->cookie)) {",
          "170:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "171:         goto f_err;",
          "172:     }",
          "175:     s->d1->cookie_len = cookie_len;",
          "177:     return MSG_PROCESS_FINISHED_READING;",
          "",
          "[Removed Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, unsigned long n)",
          "162:     unsigned char *data;",
          "165:     data = (unsigned char *)s->init_msg;",
          "166:     data += 2;",
          "168:     cookie_len = *(data++);",
          "174:     memcpy(s->d1->cookie, data, cookie_len);",
          "",
          "[Added Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt)",
          "163:     PACKET cookiepkt;",
          "165:     if (!PACKET_forward(pkt, 2)",
          "166:             || !PACKET_get_length_prefixed_1(pkt, &cookiepkt)) {",
          "167:         al = SSL_AD_DECODE_ERROR;",
          "168:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "169:         goto f_err;",
          "170:     }",
          "172:     cookie_len = PACKET_remaining(&cookiepkt);",
          "175:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_TOO_LONG);",
          "179:     if (!PACKET_copy_bytes(&cookiepkt, s->d1->cookie, cookie_len)) {",
          "180:         al = SSL_AD_DECODE_ERROR;",
          "181:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "182:         goto f_err;",
          "183:     }",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: }",
          "225: #endif",
          "228: {",
          "229:     int al;",
          "236:     if (SSL_IS_DTLS(s)) {",
          "238:                     || (s->version != DTLS1_BAD_VER",
          "240:                 al = SSL_AD_ILLEGAL_PARAMETER;",
          "241:                 SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "242:                        SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "243:                 goto f_err;",
          "244:         }",
          "245:     } else {",
          "247:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "248:             SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "249:                    SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "",
          "[Removed Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n)",
          "237:         if ((s->version == DTLS1_BAD_VER && n != DTLS1_CCS_HEADER_LENGTH + 1)",
          "239:                         && n != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "246:         if (n != 0) {",
          "",
          "[Added Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, PACKET *pkt)",
          "230:     long remain;",
          "232:     remain = PACKET_remaining(pkt);",
          "239:         if ((s->version == DTLS1_BAD_VER",
          "240:                         && remain != DTLS1_CCS_HEADER_LENGTH + 1)",
          "242:                         && remain != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "249:         if (remain != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     return MSG_PROCESS_ERROR;",
          "289: }",
          "292: {",
          "293:     int al, i;",
          "297:     if (!s->s3->change_cipher_spec) {",
          "",
          "[Removed Lines]",
          "291: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n)",
          "294:     unsigned char *p;",
          "",
          "[Added Lines]",
          "294: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     }",
          "302:     s->s3->change_cipher_spec = 0;",
          "305:     i = s->s3->tmp.peer_finish_md_len;",
          "308:         al = SSL_AD_DECODE_ERROR;",
          "309:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_BAD_DIGEST_LENGTH);",
          "310:         goto f_err;",
          "311:     }",
          "314:         al = SSL_AD_DECRYPT_ERROR;",
          "315:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);",
          "316:         goto f_err;",
          "",
          "[Removed Lines]",
          "304:     p = (unsigned char *)s->init_msg;",
          "307:     if (i < 0 || (unsigned long)i != n) {",
          "313:     if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "[Added Lines]",
          "308:     if (i < 0 || (unsigned long)i != PACKET_remaining(pkt)) {",
          "314:     if (CRYPTO_memcmp(PACKET_data(pkt), s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     return 0;",
          "449: }",
          "452: {",
          "453:     STACK_OF(SSL_CIPHER) *sk;",
          "454:     const SSL_CIPHER *c;",
          "456:     size_t session_id_len;",
          "457:     unsigned char *cipherchars;",
          "458:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, unsigned long n)",
          "455:     PACKET pkt, session_id;",
          "",
          "[Added Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, PACKET *pkt)",
          "455:     PACKET session_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     SSL_COMP *comp;",
          "462: #endif",
          "470:     if (s->method->version == TLS_ANY_VERSION) {",
          "471:         unsigned int sversion;",
          "474:             al = SSL_AD_DECODE_ERROR;",
          "475:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "476:             goto f_err;",
          "",
          "[Removed Lines]",
          "464:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "465:         al = SSL_AD_INTERNAL_ERROR;",
          "466:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "467:         goto f_err;",
          "468:     }",
          "473:         if (!PACKET_get_net_2(&pkt, &sversion)) {",
          "",
          "[Added Lines]",
          "467:         if (!PACKET_get_net_2(pkt, &sversion)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:         unsigned int hversion;",
          "516:         int options;",
          "519:             al = SSL_AD_DECODE_ERROR;",
          "520:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "521:             goto f_err;",
          "",
          "[Removed Lines]",
          "518:         if (!PACKET_get_net_2(&pkt, &hversion)) {",
          "",
          "[Added Lines]",
          "512:         if (!PACKET_get_net_2(pkt, &hversion)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     } else {",
          "543:         unsigned char *vers;",
          "546:             al = SSL_AD_DECODE_ERROR;",
          "547:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "548:             goto f_err;",
          "",
          "[Removed Lines]",
          "545:         if (!PACKET_get_bytes(&pkt, &vers, 2)) {",
          "",
          "[Added Lines]",
          "539:         if (!PACKET_get_bytes(pkt, &vers, 2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:         al = SSL_AD_DECODE_ERROR;",
          "563:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "564:         goto f_err;",
          "",
          "[Removed Lines]",
          "561:     if (!PACKET_copy_bytes(&pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "[Added Lines]",
          "555:     if (!PACKET_copy_bytes(pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:     s->hit = 0;",
          "571:         al = SSL_AD_DECODE_ERROR;",
          "572:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "573:         goto f_err;",
          "",
          "[Removed Lines]",
          "570:     if (!PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "",
          "[Added Lines]",
          "564:     if (!PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "580:         goto f_err;",
          "581:     }",
          "584:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "585:         al = SSL_AD_DECODE_ERROR;",
          "586:         goto f_err;",
          "",
          "[Removed Lines]",
          "583:     if (!PACKET_get_bytes(&pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "[Added Lines]",
          "577:     if (!PACKET_get_bytes(pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "700:         goto f_err;",
          "704:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "705:         al = SSL_AD_DECODE_ERROR;",
          "706:         goto f_err;",
          "",
          "[Removed Lines]",
          "703:     if (!PACKET_get_1(&pkt, &compression)) {",
          "",
          "[Added Lines]",
          "697:     if (!PACKET_get_1(pkt, &compression)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748: #endif",
          "752:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "753:         goto err;",
          "754:     }",
          "758:         al = SSL_AD_DECODE_ERROR;",
          "759:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "",
          "[Removed Lines]",
          "751:     if (!ssl_parse_serverhello_tlsext(s, &pkt)) {",
          "756:     if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "745:     if (!ssl_parse_serverhello_tlsext(s, pkt)) {",
          "750:     if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "794:     return MSG_PROCESS_ERROR;",
          "795: }",
          "798: {",
          "799:     int al, i, ret = MSG_PROCESS_ERROR, exp_idx;",
          "800:     unsigned long cert_list_len, cert_len;",
          "",
          "[Removed Lines]",
          "797: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "791: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "802:     unsigned char *certstart, *certbytes;",
          "803:     STACK_OF(X509) *sk = NULL;",
          "804:     EVP_PKEY *pkey = NULL;",
          "813:     if ((sk = sk_X509_new_null()) == NULL) {",
          "814:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "815:         goto err;",
          "816:     }",
          "820:         al = SSL_AD_DECODE_ERROR;",
          "821:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "822:         goto f_err;",
          "823:     }",
          "827:             al = SSL_AD_DECODE_ERROR;",
          "828:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "829:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "805:     PACKET pkt;",
          "807:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "808:         al = SSL_AD_INTERNAL_ERROR;",
          "809:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "810:         goto f_err;",
          "811:     }",
          "818:     if (!PACKET_get_net_3(&pkt, &cert_list_len)",
          "819:             || PACKET_remaining(&pkt) != cert_list_len) {",
          "824:     while (PACKET_remaining(&pkt)) {",
          "825:         if (!PACKET_get_net_3(&pkt, &cert_len)",
          "826:                 || !PACKET_get_bytes(&pkt, &certbytes, cert_len)) {",
          "",
          "[Added Lines]",
          "805:     if (!PACKET_get_net_3(pkt, &cert_list_len)",
          "806:             || PACKET_remaining(pkt) != cert_list_len) {",
          "811:     while (PACKET_remaining(pkt)) {",
          "812:         if (!PACKET_get_net_3(pkt, &cert_len)",
          "813:                 || !PACKET_get_bytes(pkt, &certbytes, cert_len)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "924:     return ret;",
          "925: }",
          "928: {",
          "929: #ifndef OPENSSL_NO_RSA",
          "930:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "",
          "[Removed Lines]",
          "927: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "914: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "946:     EC_POINT *srvr_ecpoint = NULL;",
          "947:     int curve_nid = 0;",
          "948: #endif",
          "951:     EVP_MD_CTX_init(&md_ctx);",
          "953:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "962: #ifndef OPENSSL_NO_RSA",
          "963:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "949:     PACKET pkt, save_param_start, signature;",
          "955:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "956:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "957:             al = SSL_AD_INTERNAL_ERROR;",
          "958:             goto f_err;",
          "959:     }",
          "960:     save_param_start = pkt;",
          "",
          "[Added Lines]",
          "936:     PACKET save_param_start, signature;",
          "942:     save_param_start = *pkt;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "981:     if (alg_k & SSL_PSK) {",
          "982:         PACKET psk_identity_hint;",
          "984:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "985:             goto f_err;",
          "986:         }",
          "",
          "[Removed Lines]",
          "983:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity_hint)) {",
          "",
          "[Added Lines]",
          "965:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity_hint)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1011: #ifndef OPENSSL_NO_SRP",
          "1012:     if (alg_k & SSL_kSRP) {",
          "1013:         PACKET prime, generator, salt, server_pub;",
          "1018:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1019:             goto f_err;",
          "1020:         }",
          "",
          "[Removed Lines]",
          "1014:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1015:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1016:             || !PACKET_get_length_prefixed_1(&pkt, &salt)",
          "1017:             || !PACKET_get_length_prefixed_2(&pkt, &server_pub)) {",
          "",
          "[Added Lines]",
          "996:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "997:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "998:             || !PACKET_get_length_prefixed_1(pkt, &salt)",
          "999:             || !PACKET_get_length_prefixed_2(pkt, &server_pub)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1055:             goto f_err;",
          "1056:         }",
          "1060:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1061:             goto f_err;",
          "1062:         }",
          "",
          "[Removed Lines]",
          "1058:         if (!PACKET_get_length_prefixed_2(&pkt, &mod)",
          "1059:             || !PACKET_get_length_prefixed_2(&pkt, &exp)) {",
          "",
          "[Added Lines]",
          "1040:         if (!PACKET_get_length_prefixed_2(pkt, &mod)",
          "1041:             || !PACKET_get_length_prefixed_2(pkt, &exp)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1098:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1099:         PACKET prime, generator, pub_key;",
          "1104:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1105:             goto f_err;",
          "1106:         }",
          "",
          "[Removed Lines]",
          "1101:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1102:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1103:             || !PACKET_get_length_prefixed_2(&pkt, &pub_key)) {",
          "",
          "[Added Lines]",
          "1083:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1084:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1085:             || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1161:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1162:             goto f_err;",
          "1163:         }",
          "",
          "[Removed Lines]",
          "1160:         if (!PACKET_get_bytes(&pkt, &ecparams, 3)) {",
          "",
          "[Added Lines]",
          "1142:         if (!PACKET_get_bytes(pkt, &ecparams, 3)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1205:             goto err;",
          "1206:         }",
          "1209:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1210:             goto f_err;",
          "1211:         }",
          "",
          "[Removed Lines]",
          "1208:         if (!PACKET_get_length_prefixed_1(&pkt, &encoded_pt)) {",
          "",
          "[Added Lines]",
          "1190:         if (!PACKET_get_length_prefixed_1(pkt, &encoded_pt)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1255:         if (!PACKET_get_sub_packet(&save_param_start, &params,",
          "1256:                                    PACKET_remaining(&save_param_start) -",
          "1258:             al = SSL_AD_INTERNAL_ERROR;",
          "1259:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1260:             goto f_err;",
          "",
          "[Removed Lines]",
          "1257:                                    PACKET_remaining(&pkt))) {",
          "",
          "[Added Lines]",
          "1239:                                    PACKET_remaining(pkt))) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1263:         if (SSL_USE_SIGALGS(s)) {",
          "1264:             unsigned char *sigalgs;",
          "1265:             int rv;",
          "1267:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1268:                 goto f_err;",
          "1269:             }",
          "",
          "[Removed Lines]",
          "1266:             if (!PACKET_get_bytes(&pkt, &sigalgs, 2)) {",
          "",
          "[Added Lines]",
          "1248:             if (!PACKET_get_bytes(pkt, &sigalgs, 2)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1280:             md = EVP_sha1();",
          "1281:         }",
          "1285:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1286:             goto f_err;",
          "1287:         }",
          "",
          "[Removed Lines]",
          "1283:         if (!PACKET_get_length_prefixed_2(&pkt, &signature)",
          "1284:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1265:         if (!PACKET_get_length_prefixed_2(pkt, &signature)",
          "1266:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1362:             goto err;",
          "1363:         }",
          "1366:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "1367:             goto f_err;",
          "1368:         }",
          "",
          "[Removed Lines]",
          "1365:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1347:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1390:     return MSG_PROCESS_ERROR;",
          "1391: }",
          "1394: {",
          "1395:     int ret = MSG_PROCESS_ERROR;",
          "1396:     unsigned int list_len, ctype_num, i, name_len;",
          "",
          "[Removed Lines]",
          "1393: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "1375: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1398:     unsigned char *data;",
          "1399:     unsigned char *namestart, *namebytes;",
          "1400:     STACK_OF(X509_NAME) *ca_sk = NULL;",
          "1409:     if ((ca_sk = sk_X509_NAME_new(ca_dn_cmp)) == NULL) {",
          "1410:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1401:     PACKET pkt;",
          "1403:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1404:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "1405:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "1406:         goto err;",
          "1407:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1412:     }",
          "1417:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1418:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1419:         goto err;",
          "",
          "[Removed Lines]",
          "1415:     if (!PACKET_get_1(&pkt, &ctype_num)",
          "1416:             || !PACKET_get_bytes(&pkt, &data, ctype_num)) {",
          "",
          "[Added Lines]",
          "1390:     if (!PACKET_get_1(pkt, &ctype_num)",
          "1391:             || !PACKET_get_bytes(pkt, &data, ctype_num)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1435:         s->s3->tmp.ctype[i] = data[i];",
          "1437:     if (SSL_USE_SIGALGS(s)) {",
          "1440:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1441:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1442:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1438:         if (!PACKET_get_net_2(&pkt, &list_len)",
          "1439:                 || !PACKET_get_bytes(&pkt, &data, list_len)) {",
          "",
          "[Added Lines]",
          "1413:         if (!PACKET_get_net_2(pkt, &list_len)",
          "1414:                 || !PACKET_get_bytes(pkt, &data, list_len)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1462:     }",
          "1467:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1468:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1469:         goto err;",
          "1470:     }",
          "1475:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1476:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1477:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1465:     if (!PACKET_get_net_2(&pkt, &list_len)",
          "1466:             || PACKET_remaining(&pkt) != list_len) {",
          "1472:     while (PACKET_remaining(&pkt)) {",
          "1473:         if (!PACKET_get_net_2(&pkt, &name_len)",
          "1474:                 || !PACKET_get_bytes(&pkt, &namebytes, name_len)) {",
          "",
          "[Added Lines]",
          "1440:     if (!PACKET_get_net_2(pkt, &list_len)",
          "1441:             || PACKET_remaining(pkt) != list_len) {",
          "1447:     while (PACKET_remaining(pkt)) {",
          "1448:         if (!PACKET_get_net_2(pkt, &name_len)",
          "1449:                 || !PACKET_get_bytes(pkt, &namebytes, name_len)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1520:     return (X509_NAME_cmp(*a, *b));",
          "1521: }",
          "1524: {",
          "1525:     int al;",
          "1526:     unsigned int ticklen;",
          "1527:     unsigned long ticket_lifetime_hint;",
          "1539:         al = SSL_AD_DECODE_ERROR;",
          "1540:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1541:         goto f_err;",
          "",
          "[Removed Lines]",
          "1523: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, unsigned long n)",
          "1528:     PACKET pkt;",
          "1530:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1531:         al = SSL_AD_INTERNAL_ERROR;",
          "1532:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "1533:         goto f_err;",
          "1534:     }",
          "1536:     if (!PACKET_get_net_4(&pkt, &ticket_lifetime_hint)",
          "1537:             || !PACKET_get_net_2(&pkt, &ticklen)",
          "1538:             || PACKET_remaining(&pkt) != ticklen) {",
          "",
          "[Added Lines]",
          "1498: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, PACKET *pkt)",
          "1504:     if (!PACKET_get_net_4(pkt, &ticket_lifetime_hint)",
          "1505:             || !PACKET_get_net_2(pkt, &ticklen)",
          "1506:             || PACKET_remaining(pkt) != ticklen) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1584:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "1585:         goto err;",
          "1586:     }",
          "1588:         al = SSL_AD_DECODE_ERROR;",
          "1589:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1590:         goto f_err;",
          "",
          "[Removed Lines]",
          "1587:     if (!PACKET_copy_bytes(&pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "[Added Lines]",
          "1555:     if (!PACKET_copy_bytes(pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1614:     return MSG_PROCESS_ERROR;",
          "1615: }",
          "1618: {",
          "1619:     int al;",
          "1620:     unsigned long resplen;",
          "1621:     unsigned int type;",
          "1630:             || type != TLSEXT_STATUSTYPE_ocsp) {",
          "1631:         al = SSL_AD_DECODE_ERROR;",
          "1632:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_UNSUPPORTED_STATUS_TYPE);",
          "1633:         goto f_err;",
          "1634:     }",
          "1637:         al = SSL_AD_DECODE_ERROR;",
          "1638:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1639:         goto f_err;",
          "",
          "[Removed Lines]",
          "1617: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n)",
          "1622:     PACKET pkt;",
          "1624:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1625:         al = SSL_AD_INTERNAL_ERROR;",
          "1626:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_INTERNAL_ERROR);",
          "1627:         goto f_err;",
          "1628:     }",
          "1629:     if (!PACKET_get_1(&pkt, &type)",
          "1635:     if (!PACKET_get_net_3(&pkt, &resplen)",
          "1636:             || PACKET_remaining(&pkt) != resplen) {",
          "",
          "[Added Lines]",
          "1585: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt)",
          "1591:     if (!PACKET_get_1(pkt, &type)",
          "1597:     if (!PACKET_get_net_3(pkt, &resplen)",
          "1598:             || PACKET_remaining(pkt) != resplen) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1645:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "1646:         goto f_err;",
          "1647:     }",
          "1649:         al = SSL_AD_DECODE_ERROR;",
          "1650:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1651:         goto f_err;",
          "",
          "[Removed Lines]",
          "1648:     if (!PACKET_copy_bytes(&pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "[Added Lines]",
          "1610:     if (!PACKET_copy_bytes(pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1672:     return MSG_PROCESS_ERROR;",
          "1673: }",
          "1676: {",
          "1679:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1680:         SSLerr(SSL_F_TLS_PROCESS_SERVER_DONE, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1675: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n)",
          "1677:     if (n > 0) {",
          "",
          "[Added Lines]",
          "1637: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt)",
          "1639:     if (PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return 1;",
          "205: }",
          "208: {",
          "209:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "210:     unsigned int j, complen = 0;",
          "",
          "[Removed Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n)",
          "",
          "[Added Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     STACK_OF(SSL_CIPHER) *ciphers = NULL;",
          "217:     int protverr = 1;",
          "220:     int is_v2_record;",
          "228:     is_v2_record = RECORD_LAYER_is_sslv2_record(&s->rlayer);",
          "230:     PACKET_null_init(&cookie);",
          "",
          "[Removed Lines]",
          "219:     PACKET pkt, session_id, cipher_suites, compression, extensions, cookie;",
          "222:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "223:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "224:         al = SSL_AD_INTERNAL_ERROR;",
          "225:         goto f_err;",
          "226:     }",
          "",
          "[Added Lines]",
          "219:     PACKET session_id, cipher_suites, compression, extensions, cookie;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:                 || mt != SSL2_MT_CLIENT_HELLO) {",
          "",
          "[Removed Lines]",
          "250:         if (!PACKET_get_1(&pkt, &mt)",
          "",
          "[Added Lines]",
          "244:         if (!PACKET_get_1(pkt, &mt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:             goto err;",
          "259:         }",
          "263:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "264:             goto err;",
          "",
          "[Removed Lines]",
          "261:         if (!PACKET_get_net_2(&pkt, &version)) {",
          "",
          "[Added Lines]",
          "255:         if (!PACKET_get_net_2(pkt, &version)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:             al = SSL_AD_DECODE_ERROR;",
          "285:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "286:             goto f_err;",
          "",
          "[Removed Lines]",
          "283:         if(!PACKET_get_net_2(&pkt, (unsigned int *)&s->client_version)) {",
          "",
          "[Added Lines]",
          "277:         if(!PACKET_get_net_2(pkt, (unsigned int *)&s->client_version)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:         unsigned int cipher_len, session_id_len, challenge_len;",
          "366:         PACKET challenge;",
          "371:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "372:                    SSL_R_RECORD_LENGTH_MISMATCH);",
          "373:             al = SSL_AD_DECODE_ERROR;",
          "374:             goto f_err;",
          "375:         }",
          "382:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_RECORD_LENGTH_MISMATCH);",
          "383:             al = SSL_AD_DECODE_ERROR;",
          "384:             goto f_err;",
          "",
          "[Removed Lines]",
          "368:         if (!PACKET_get_net_2(&pkt, &cipher_len)",
          "369:                 || !PACKET_get_net_2(&pkt, &session_id_len)",
          "370:                 || !PACKET_get_net_2(&pkt, &challenge_len)) {",
          "377:         if (!PACKET_get_sub_packet(&pkt, &cipher_suites, cipher_len)",
          "378:             || !PACKET_get_sub_packet(&pkt, &session_id, session_id_len)",
          "379:             || !PACKET_get_sub_packet(&pkt, &challenge, challenge_len)",
          "381:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "362:         if (!PACKET_get_net_2(pkt, &cipher_len)",
          "363:                 || !PACKET_get_net_2(pkt, &session_id_len)",
          "364:                 || !PACKET_get_net_2(pkt, &challenge_len)) {",
          "371:         if (!PACKET_get_sub_packet(pkt, &cipher_suites, cipher_len)",
          "372:             || !PACKET_get_sub_packet(pkt, &session_id, session_id_len)",
          "373:             || !PACKET_get_sub_packet(pkt, &challenge, challenge_len)",
          "375:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400:         PACKET_null_init(&extensions);",
          "401:     } else {",
          "405:             al = SSL_AD_DECODE_ERROR;",
          "406:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "407:             goto f_err;",
          "408:         }",
          "410:         if (SSL_IS_DTLS(s)) {",
          "412:                 al = SSL_AD_DECODE_ERROR;",
          "413:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "414:                 goto f_err;",
          "",
          "[Removed Lines]",
          "403:         if (!PACKET_copy_bytes(&pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "404:             || !PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "411:             if (!PACKET_get_length_prefixed_1(&pkt, &cookie)) {",
          "",
          "[Added Lines]",
          "397:         if (!PACKET_copy_bytes(pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "398:             || !PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "405:             if (!PACKET_get_length_prefixed_1(pkt, &cookie)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:             }",
          "425:         }",
          "429:                 al = SSL_AD_DECODE_ERROR;",
          "430:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "431:                 goto f_err;",
          "432:         }",
          "435:     }",
          "437:     s->hit = 0;",
          "",
          "[Removed Lines]",
          "427:         if (!PACKET_get_length_prefixed_2(&pkt, &cipher_suites)",
          "428:             || !PACKET_get_length_prefixed_1(&pkt, &compression)) {",
          "434:         extensions = pkt;",
          "",
          "[Added Lines]",
          "421:         if (!PACKET_get_length_prefixed_2(pkt, &cipher_suites)",
          "422:             || !PACKET_get_length_prefixed_1(pkt, &compression)) {",
          "428:         extensions = *pkt;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1497:     return 0;",
          "1498: }",
          "1501: {",
          "1502:     int al;",
          "1503:     unsigned int i;",
          "",
          "[Removed Lines]",
          "1500: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n)",
          "",
          "[Added Lines]",
          "1494: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1516:     EC_POINT *clnt_ecpoint = NULL;",
          "1517:     BN_CTX *bn_ctx = NULL;",
          "1518: #endif",
          "1520:     unsigned char *data, *rsa_decrypt = NULL;",
          "1528:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1530: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "1519:     PACKET pkt, enc_premaster;",
          "1522:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1523:         al = SSL_AD_INTERNAL_ERROR;",
          "1524:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1525:         goto f_err;",
          "1526:     }",
          "",
          "[Added Lines]",
          "1513:     PACKET enc_premaster;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1532:     if (alg_k & SSL_PSK) {",
          "1533:         unsigned char psk[PSK_MAX_PSK_LEN];",
          "1534:         size_t psklen;",
          "1538:             al = SSL_AD_DECODE_ERROR;",
          "1539:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1540:             goto f_err;",
          "",
          "[Removed Lines]",
          "1535:  PACKET psk_identity;",
          "1537:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity)) {",
          "",
          "[Added Lines]",
          "1523:         PACKET psk_identity;",
          "1525:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1589:     }",
          "1590:     if (alg_k & SSL_kPSK) {",
          "1593:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1594:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1595:             goto f_err;",
          "",
          "[Removed Lines]",
          "1592:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1580:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1639:         if (s->version == SSL3_VERSION || s->version == DTLS1_BAD_VER) {",
          "1641:         } else {",
          "1646:                 if (s->options & SSL_OP_TLS_D5_BUG) {",
          "1647:                     enc_premaster = orig;",
          "",
          "[Removed Lines]",
          "1640:             enc_premaster = pkt;",
          "1642:             PACKET orig = pkt;",
          "1643:             if (!PACKET_get_length_prefixed_2(&pkt, &enc_premaster)",
          "1644:                 || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1628:             enc_premaster = *pkt;",
          "1630:             PACKET orig = *pkt;",
          "1631:             if (!PACKET_get_length_prefixed_2(pkt, &enc_premaster)",
          "1632:                 || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1764:     if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "1765:         int idx = -1;",
          "1766:         EVP_PKEY *skey = NULL;",
          "1768:         unsigned char shared[(OPENSSL_DH_MAX_MODULUS_BITS + 7) / 8];",
          "1771:             if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1772:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1773:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1767:         PACKET bookmark = pkt;",
          "1770:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "[Added Lines]",
          "1755:         PACKET bookmark = *pkt;",
          "1758:         if (!PACKET_get_net_2(pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1776:             }",
          "1777:             i = 0;",
          "1778:         }",
          "1780:             if (!(s->options & SSL_OP_SSLEAY_080_CLIENT_DH_BUG)) {",
          "1781:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1782:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "1783:                 goto err;",
          "1784:             } else {",
          "1787:             }",
          "1788:         }",
          "1789:         if (alg_k & SSL_kDHr)",
          "",
          "[Removed Lines]",
          "1779:         if (PACKET_remaining(&pkt) != i) {",
          "1785:                 pkt = bookmark;",
          "1786:                 i = PACKET_remaining(&pkt);",
          "",
          "[Added Lines]",
          "1767:         if (PACKET_remaining(pkt) != i) {",
          "1774:                 i = PACKET_remaining(pkt);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1808:         } else",
          "1809:             dh_srvr = s->s3->tmp.dh;",
          "1813:             EVP_PKEY *clkey = X509_get_pubkey(s->session->peer);",
          "1814:             if (clkey) {",
          "",
          "[Removed Lines]",
          "1811:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1799:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1824:             EVP_PKEY_free(clkey);",
          "1825:             pub = dh_clnt->pub_key;",
          "1826:         } else {",
          "1829:                 al = SSL_AD_INTERNAL_ERROR;",
          "1830:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1827:             if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1815:             if (!PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1906:             goto err;",
          "1907:         }",
          "1912:             if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "",
          "[Removed Lines]",
          "1909:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1897:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1950:             }",
          "1954:                 al = SSL_AD_DECODE_ERROR;",
          "1955:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1956:                        SSL_R_LENGTH_MISMATCH);",
          "1957:                 goto f_err;",
          "1958:             }",
          "1961:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "1962:                 goto err;",
          "1963:             }",
          "",
          "[Removed Lines]",
          "1953:             if (!PACKET_get_1(&pkt, &i)) {",
          "1959:             if (!PACKET_get_bytes(&pkt, &data, i)",
          "1960:                     || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1941:             if (!PACKET_get_1(pkt, &i)) {",
          "1947:             if (!PACKET_get_bytes(pkt, &data, i)",
          "1948:                     || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2003: #endif",
          "2004: #ifndef OPENSSL_NO_SRP",
          "2005:     if (alg_k & SSL_kSRP) {",
          "2008:             al = SSL_AD_DECODE_ERROR;",
          "2009:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_BAD_SRP_A_LENGTH);",
          "2010:             goto f_err;",
          "",
          "[Removed Lines]",
          "2006:         if (!PACKET_get_net_2(&pkt, &i)",
          "2007:                 || !PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1994:         if (!PACKET_get_net_2(pkt, &i)",
          "1995:                 || !PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2041:         unsigned long alg_a;",
          "2042:         int Ttag, Tclass;",
          "2043:         long Tlen;",
          "2046:         alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:         long sess_key_len;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2061:                 ERR_clear_error();",
          "2062:         }",
          "2065:             al = SSL_AD_INTERNAL_ERROR;",
          "2066:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2067:             goto f_err;",
          "2068:         }",
          "2072:             || Tclass != V_ASN1_UNIVERSAL) {",
          "2073:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2074:                    SSL_R_DECRYPTION_FAILED);",
          "",
          "[Removed Lines]",
          "2064:         if (!PACKET_get_bytes(&pkt, &data, n)) {",
          "2069:         if (ASN1_get_object",
          "2070:             ((const unsigned char **)&data, &Tlen, &Ttag, &Tclass,",
          "2071:              n) != V_ASN1_CONSTRUCTED || Ttag != V_ASN1_SEQUENCE",
          "",
          "[Added Lines]",
          "2053:         sess_key_len = PACKET_remaining(pkt);",
          "2054:         if (!PACKET_get_bytes(pkt, &data, sess_key_len)) {",
          "2059:         if (ASN1_get_object ((const unsigned char **)&data, &Tlen, &Ttag,",
          "2060:                              &Tclass, sess_key_len) != V_ASN1_CONSTRUCTED",
          "2061:             || Ttag != V_ASN1_SEQUENCE",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2239:     return WORK_FINISHED_CONTINUE;",
          "2240: }",
          "2243: {",
          "2244:     EVP_PKEY *pkey = NULL;",
          "2245:     unsigned char *sig, *data;",
          "",
          "[Removed Lines]",
          "2242: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2232: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2249:     X509 *peer;",
          "2250:     const EVP_MD *md = NULL;",
          "2251:     EVP_MD_CTX mctx;",
          "2253:     EVP_MD_CTX_init(&mctx);",
          "2255:     peer = s->session->peer;",
          "",
          "[Removed Lines]",
          "2252:     PACKET pkt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2263:         goto f_err;",
          "2264:     }",
          "2278:         len = 64;",
          "2279:     } else {",
          "2280:         if (SSL_USE_SIGALGS(s)) {",
          "2281:             int rv;",
          "2284:                 al = SSL_AD_DECODE_ERROR;",
          "2285:                 goto f_err;",
          "2286:             }",
          "",
          "[Removed Lines]",
          "2267:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2268:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2269:         al = SSL_AD_INTERNAL_ERROR;",
          "2270:         goto f_err;",
          "2271:     }",
          "2277:     if (n == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2283:             if (!PACKET_get_bytes(&pkt, &sig, 2)) {",
          "",
          "[Added Lines]",
          "2260:     if (PACKET_remaining(pkt) == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2266:             if (!PACKET_get_bytes(pkt, &sig, 2)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2296:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "2297: #endif",
          "2298:         }",
          "2300:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2301:             al = SSL_AD_DECODE_ERROR;",
          "2302:             goto f_err;",
          "2303:         }",
          "2304:     }",
          "2305:     j = EVP_PKEY_size(pkey);",
          "2307:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2308:         al = SSL_AD_DECODE_ERROR;",
          "2309:         goto f_err;",
          "2310:     }",
          "2312:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2313:         al = SSL_AD_DECODE_ERROR;",
          "2314:         goto f_err;",
          "",
          "[Removed Lines]",
          "2299:         if (!PACKET_get_net_2(&pkt, &len)) {",
          "2306:     if (((int)len > j) || ((int)PACKET_remaining(&pkt) > j) || (n <= 0)) {",
          "2311:     if (!PACKET_get_bytes(&pkt, &data, len)) {",
          "",
          "[Added Lines]",
          "2282:         if (!PACKET_get_net_2(pkt, &len)) {",
          "2289:     if (((int)len > j) || ((int)PACKET_remaining(pkt) > j)",
          "2290:             || (PACKET_remaining(pkt) == 0)) {",
          "2295:     if (!PACKET_get_bytes(pkt, &data, len)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2421:     return ret;",
          "2422: }",
          "2425: {",
          "2426:     int i, al, ret = MSG_PROCESS_ERROR;",
          "2427:     X509 *x = NULL;",
          "",
          "[Removed Lines]",
          "2424: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2408: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2429:     const unsigned char *certstart;",
          "2430:     unsigned char *certbytes;",
          "2431:     STACK_OF(X509) *sk = NULL;",
          "2440:     if ((sk = sk_X509_new_null()) == NULL) {",
          "2441:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "2442:         goto f_err;",
          "2443:     }",
          "2448:         al = SSL_AD_DECODE_ERROR;",
          "2449:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "2450:         goto f_err;",
          "",
          "[Removed Lines]",
          "2432:     PACKET pkt, spkt;",
          "2434:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2435:         al = SSL_AD_INTERNAL_ERROR;",
          "2436:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "2437:         goto f_err;",
          "2438:     }",
          "2445:     if (!PACKET_get_net_3(&pkt, &llen)",
          "2446:             || !PACKET_get_sub_packet(&pkt, &spkt, llen)",
          "2447:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "2416:     PACKET spkt;",
          "2423:     if (!PACKET_get_net_3(pkt, &llen)",
          "2424:             || !PACKET_get_sub_packet(pkt, &spkt, llen)",
          "2425:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2752: {",
          "2754:     size_t next_proto_len;",
          "",
          "[Removed Lines]",
          "2751: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n)",
          "2753:     PACKET pkt, next_proto, padding;",
          "2756:     if (n < 2) {",
          "2758:     }",
          "2760:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2761:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, ERR_R_INTERNAL_ERROR);",
          "2762:         goto err;",
          "2763:     }",
          "",
          "[Added Lines]",
          "2729: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt)",
          "2731:     PACKET next_proto, padding;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2775:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);",
          "2776:         goto err;",
          "2777:     }",
          "",
          "[Removed Lines]",
          "2772:     if (!PACKET_get_length_prefixed_1(&pkt, &next_proto)",
          "2773:         || !PACKET_get_length_prefixed_1(&pkt, &padding)",
          "2774:         || PACKET_remaining(&pkt) > 0) {",
          "",
          "[Added Lines]",
          "2741:     if (!PACKET_get_length_prefixed_1(pkt, &next_proto)",
          "2742:         || !PACKET_get_length_prefixed_1(pkt, &padding)",
          "2743:         || PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:      \"dtls_construct_hello_verify_request\"},",
          "119:     {ERR_FUNC(SSL_F_DTLS_GET_REASSEMBLED_MESSAGE),",
          "120:      \"DTLS_GET_REASSEMBLED_MESSAGE\"},",
          "121:     {ERR_FUNC(SSL_F_READ_STATE_MACHINE), \"READ_STATE_MACHINE\"},",
          "122:     {ERR_FUNC(SSL_F_SSL3_ACCEPT), \"ssl3_accept\"},",
          "123:     {ERR_FUNC(SSL_F_SSL3_ADD_CERT_TO_BUF), \"SSL3_ADD_CERT_TO_BUF\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     {ERR_FUNC(SSL_F_DTLS_PROCESS_HELLO_VERIFY), \"dtls_process_hello_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:      \"invalid ticket keys length\"},",
          "525:     {ERR_REASON(SSL_R_INVALID_TRUST), \"invalid trust\"},",
          "526:     {ERR_REASON(SSL_R_LENGTH_MISMATCH), \"length mismatch\"},",
          "527:     {ERR_REASON(SSL_R_LENGTH_TOO_SHORT), \"length too short\"},",
          "528:     {ERR_REASON(SSL_R_LIBRARY_BUG), \"library bug\"},",
          "529:     {ERR_REASON(SSL_R_LIBRARY_HAS_NO_CIPHERS), \"library has no ciphers\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     {ERR_REASON(SSL_R_LENGTH_TOO_LONG), \"length too long\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2003: __owur int tls_construct_server_certificate(SSL *s);",
          "2004: __owur int tls_construct_new_session_ticket(SSL *s);",
          "2005: __owur int tls_construct_cert_status(SSL *s);",
          "2008: __owur int ssl3_setup_key_block(SSL *s);",
          "2009: __owur int tls_construct_change_cipher_spec(SSL *s);",
          "2010: __owur int dtls_construct_change_cipher_spec(SSL *s);",
          "",
          "[Removed Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n);",
          "2007: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s,",
          "2007:                                                               PACKET *pkt);",
          "2008: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107: __owur int tls_construct_client_hello(SSL *s);",
          "2108: __owur enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s,",
          "2110: __owur enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s,",
          "2112: __owur enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s,",
          "2116: __owur int tls_construct_client_verify(SSL *s);",
          "2117: __owur enum WORK_STATE tls_prepare_client_certificate(SSL *s,",
          "2118:                                                       enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "2109:                                                         unsigned long n);",
          "2111:                                                                unsigned long n);",
          "2113:                                                               unsigned long n);",
          "2114: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2110:                                                         PACKET *pkt);",
          "2112:                                                                PACKET *pkt);",
          "2114:                                                               PACKET *pkt);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt);",
          "2116: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2121: __owur int tls_construct_client_key_exchange(SSL *s);",
          "2122: __owur int tls_client_key_exchange_post_work(SSL *s);",
          "2123: __owur enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s,",
          "2125: __owur enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s,",
          "2127: __owur int ssl3_check_cert_and_algorithm(SSL *s);",
          "2128: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2129: __owur int tls_construct_next_proto(SSL *s);",
          "2130: #  endif",
          "2136: __owur enum WORK_STATE tls_post_process_client_hello(SSL *s,",
          "2137:                                                      enum WORK_STATE wst);",
          "2138: __owur int tls_construct_server_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "2124:                                                         unsigned long n);",
          "2126:                                                               unsigned long n);",
          "2131: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s,",
          "2132:                                                          unsigned long n);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2125:                                                         PACKET *pkt);",
          "2127:                                                               PACKET *pkt);",
          "2132: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2141: __owur int tls_construct_server_key_exchange(SSL *s);",
          "2142: __owur int tls_construct_certificate_request(SSL *s);",
          "2143: __owur int tls_construct_server_done(SSL *s);",
          "2146: __owur enum WORK_STATE tls_post_process_client_key_exchange(SSL *s,",
          "2147:     enum WORK_STATE wst);",
          "2149: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2151: #  endif",
          "2153: __owur int tls1_new(SSL *s);",
          "",
          "[Removed Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n);",
          "2145: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n);",
          "2148: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s,",
          "2145:                                                               PACKET *pkt);",
          "2146: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s,",
          "2147:                                                                PACKET *pkt);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt);",
          "2152: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt);",
          "",
          "---------------"
        ],
        "ssl/statem.c||ssl/statem.c": [
          "File: ssl/statem.c -> ssl/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: static enum WORK_STATE client_post_work(SSL *s, enum WORK_STATE wst);",
          "117: static int client_construct_message(SSL *s);",
          "118: static unsigned long client_max_message_size(SSL *s);",
          "121: static enum WORK_STATE client_post_process_message(SSL *s, enum WORK_STATE wst);",
          "122: static int server_read_transition(SSL *s, int mt);",
          "123: static inline int send_server_key_exchange(SSL *s);",
          "",
          "[Removed Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s,",
          "120:                                                       unsigned long len);",
          "",
          "[Added Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: static enum WORK_STATE server_post_work(SSL *s, enum WORK_STATE wst);",
          "128: static int server_construct_message(SSL *s);",
          "129: static unsigned long server_max_message_size(SSL *s);",
          "131: static enum WORK_STATE server_post_process_message(SSL *s, enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "130: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, unsigned long len);",
          "",
          "[Added Lines]",
          "129: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:     int ret, mt;",
          "530:     unsigned long len;",
          "531:     int (*transition)(SSL *s, int mt);",
          "533:     enum WORK_STATE (*post_process_message)(SSL *s, enum WORK_STATE wst);",
          "534:     unsigned long (*max_message_size)(SSL *s);",
          "535:     void (*cb) (const SSL *ssl, int type, int val) = NULL;",
          "",
          "[Removed Lines]",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "531:     PACKET pkt;",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:             }",
          "614:             s->first_packet = 0;",
          "616:             if (ret == MSG_PROCESS_ERROR) {",
          "617:                 return SUB_STATE_ERROR;",
          "618:             }",
          "",
          "[Removed Lines]",
          "615:             ret = process_message(s, len);",
          "",
          "[Added Lines]",
          "615:             if (!PACKET_buf_init(&pkt, s->init_msg, len)) {",
          "616:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "617:                 SSLerr(SSL_F_READ_STATE_MACHINE, ERR_R_INTERNAL_ERROR);",
          "618:                 return SUB_STATE_ERROR;",
          "619:             }",
          "620:             ret = process_message(s, &pkt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1448: {",
          "1449:     STATEM *st = &s->statem;",
          "1451:     switch(st->hand_state) {",
          "1452:         case TLS_ST_CR_SRVR_HELLO:",
          "1455:         case DTLS_ST_CR_HELLO_VERIFY_REQUEST:",
          "1458:         case TLS_ST_CR_CERT:",
          "1461:         case TLS_ST_CR_CERT_STATUS:",
          "1464:         case TLS_ST_CR_KEY_EXCH:",
          "1467:         case TLS_ST_CR_CERT_REQ:",
          "1470:         case TLS_ST_CR_SRVR_DONE:",
          "1473:         case TLS_ST_CR_CHANGE:",
          "1476:         case TLS_ST_CR_SESSION_TICKET:",
          "1479:         case TLS_ST_CR_FINISHED:",
          "1482:         default:",
          "",
          "[Removed Lines]",
          "1447: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, unsigned long len)",
          "1453:             return tls_process_server_hello(s, len);",
          "1456:             return dtls_process_hello_verify(s, len);",
          "1459:             return tls_process_server_certificate(s, len);",
          "1462:             return tls_process_cert_status(s, len);",
          "1465:             return tls_process_key_exchange(s, len);",
          "1468:             return tls_process_certificate_request(s, len);",
          "1471:             return tls_process_server_done(s, len);",
          "1474:             return tls_process_change_cipher_spec(s, len);",
          "1477:             return tls_process_new_session_ticket(s, len);",
          "1480:             return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "1452: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt)",
          "1458:             return tls_process_server_hello(s, pkt);",
          "1461:             return dtls_process_hello_verify(s, pkt);",
          "1464:             return tls_process_server_certificate(s, pkt);",
          "1467:             return tls_process_cert_status(s, pkt);",
          "1470:             return tls_process_key_exchange(s, pkt);",
          "1473:             return tls_process_certificate_request(s, pkt);",
          "1476:             return tls_process_server_done(s, pkt);",
          "1479:             return tls_process_change_cipher_spec(s, pkt);",
          "1482:             return tls_process_new_session_ticket(s, pkt);",
          "1485:             return tls_process_finished(s, pkt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2166: {",
          "2167:     STATEM *st = &s->statem;",
          "2169:     switch(st->hand_state) {",
          "2170:     case TLS_ST_SR_CLNT_HELLO:",
          "2173:     case TLS_ST_SR_CERT:",
          "2176:     case TLS_ST_SR_KEY_EXCH:",
          "2179:     case TLS_ST_SR_CERT_VRFY:",
          "2182: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2183:     case TLS_ST_SR_NEXT_PROTO:",
          "2185: #endif",
          "2187:     case TLS_ST_SR_CHANGE:",
          "2190:     case TLS_ST_SR_FINISHED:",
          "2193:     default:",
          "",
          "[Removed Lines]",
          "2164: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s,",
          "2165:                                                        unsigned long len)",
          "2171:         return tls_process_client_hello(s, len);",
          "2174:         return tls_process_client_certificate(s, len);",
          "2177:         return tls_process_client_key_exchange(s, len);",
          "2180:         return tls_process_cert_verify(s, len);",
          "2184:         return tls_process_next_proto(s, len);",
          "2188:         return tls_process_change_cipher_spec(s, len);",
          "2191:         return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "2169: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s, PACKET *pkt)",
          "2175:         return tls_process_client_hello(s, pkt);",
          "2178:         return tls_process_client_certificate(s, pkt);",
          "2181:         return tls_process_client_key_exchange(s, pkt);",
          "2184:         return tls_process_cert_verify(s, pkt);",
          "2188:         return tls_process_next_proto(s, pkt);",
          "2192:         return tls_process_change_cipher_spec(s, pkt);",
          "2195:         return tls_process_finished(s, pkt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
      "candidate_info": {
        "commit_hash": "10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/10bf4fc2c3da332a54247da1f3c0dcb44944f7ff",
        "files": [
          "CHANGES",
          "apps/req.c",
          "apps/s_cb.c",
          "apps/s_server.c",
          "apps/speed.c",
          "crypto/ec/ec_pmeth.c",
          "crypto/ecdh/ecdh.h",
          "crypto/ecdh/ecdhtest.c",
          "crypto/ecdsa/ecdsa.h",
          "crypto/ecdsa/ecdsatest.c",
          "crypto/engine/eng_fat.c",
          "crypto/engine/eng_list.c",
          "crypto/engine/eng_openssl.c",
          "crypto/engine/engine.h",
          "crypto/err/err_all.c",
          "crypto/evp/c_alld.c",
          "crypto/evp/evp.h",
          "crypto/x509/x509.h",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl.h",
          "ssl/ssl_algs.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_conf.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssltest.c",
          "ssl/t1_lib.c",
          "util/mk1mf.pl"
        ],
        "message": "Merge OPENSSL_NO_EC{DH,DSA} into OPENSSL_NO_EC\n\nSuggested by John Foley <foleyj@cisco.com>.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "apps/req.c||apps/req.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_server.c||apps/s_server.c",
          "apps/speed.c||apps/speed.c",
          "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c",
          "crypto/ecdh/ecdh.h||crypto/ecdh/ecdh.h",
          "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c",
          "crypto/ecdsa/ecdsa.h||crypto/ecdsa/ecdsa.h",
          "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c",
          "crypto/engine/eng_fat.c||crypto/engine/eng_fat.c",
          "crypto/engine/eng_list.c||crypto/engine/eng_list.c",
          "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c",
          "crypto/engine/engine.h||crypto/engine/engine.h",
          "crypto/err/err_all.c||crypto/err/err_all.c",
          "crypto/evp/c_alld.c||crypto/evp/c_alld.c",
          "crypto/evp/evp.h||crypto/evp/evp.h",
          "crypto/x509/x509.h||crypto/x509/x509.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl_algs.c||ssl/ssl_algs.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_conf.c||ssl/ssl_conf.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssltest.c||ssl/ssltest.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "util/mk1mf.pl||util/mk1mf.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/req.c||apps/req.c": [
          "File: apps/req.c -> apps/req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:                    \" -newkey rsa:bits generate a new RSA key of 'bits' in size\\n\");",
          "399:         BIO_printf(bio_err,",
          "400:                    \" -newkey dsa:file generate a new DSA key, parameters taken from CA in 'file'\\n\");",
          "402:         BIO_printf(bio_err,",
          "403:                    \" -newkey ec:file generate a new EC key, parameters taken from CA in 'file'\\n\");",
          "404: #endif",
          "",
          "[Removed Lines]",
          "401: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "401: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:     case EVP_PKEY_DH:",
          "522:         BIO_printf(out, \"DH, %d bits\\n\", EVP_PKEY_bits(key));",
          "523:         break;",
          "525:     case EVP_PKEY_EC:",
          "526:         {",
          "527:             EC_KEY *ec = EVP_PKEY_get1_EC_KEY(key);",
          "",
          "[Removed Lines]",
          "524: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "524: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:                \" -dhparam arg  - DH parameter file to use, in cert file if not specified\\n\");",
          "487:     BIO_printf(bio_err,",
          "488:                \"                 or a default set of parameters is used\\n\");",
          "490:     BIO_printf(bio_err,",
          "491:                \" -named_curve arg  - Elliptic curve name to use for ephemeral ECDH keys.\\n\"",
          "492:                \"                 Use \\\"openssl ecparam -list_curves\\\" for all names\\n\"",
          "",
          "[Removed Lines]",
          "489: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "489: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545: #ifndef OPENSSL_NO_DH",
          "546:     BIO_printf(bio_err, \" -no_dhe       - Disable ephemeral DH\\n\");",
          "547: #endif",
          "549:     BIO_printf(bio_err, \" -no_ecdhe     - Disable ephemeral ECDH\\n\");",
          "550: #endif",
          "551:     BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "548: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "548: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1677:                 bio_s_out = BIO_new_fp(stdout, BIO_NOCLOSE);",
          "1678:         }",
          "1679:     }",
          "1681:     if (nocert)",
          "1682: #endif",
          "1683:     {",
          "",
          "[Removed Lines]",
          "1680: #if !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_ECDSA)",
          "",
          "[Added Lines]",
          "1680: #if !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_DSA) || !defined(OPENSSL_NO_EC)",
          "",
          "---------------"
        ],
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: # include <openssl/dsa.h>",
          "173: # include \"./testdsa.h\"",
          "174: #endif",
          "176: # include <openssl/ecdsa.h>",
          "179: # include <openssl/ecdh.h>",
          "180: #endif",
          "181: #include <openssl/modes.h>",
          "",
          "[Removed Lines]",
          "175: #ifndef OPENSSL_NO_ECDSA",
          "177: #endif",
          "178: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "175: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242: #ifndef OPENSSL_NO_DSA",
          "243: static double dsa_results[DSA_NUM][2];",
          "244: #endif",
          "246: static double ecdsa_results[EC_NUM][2];",
          "249: static double ecdh_results[EC_NUM][1];",
          "250: #endif",
          "253: static const char rnd_seed[] =",
          "254:     \"string to make the random number generator think it has entropy\";",
          "255: static int rnd_fake = 0;",
          "",
          "[Removed Lines]",
          "245: #ifndef OPENSSL_NO_ECDSA",
          "247: #endif",
          "248: #ifndef OPENSSL_NO_ECDH",
          "252: #if defined(OPENSSL_NO_DSA) && !(defined(OPENSSL_NO_ECDSA) && defined(OPENSSL_NO_ECDH))",
          "",
          "[Added Lines]",
          "243: #ifndef OPENSSL_NO_EC",
          "248: #if defined(OPENSSL_NO_DSA) && !defined(OPENSSL_NO_EC)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330: }",
          "331: #endif",
          "334: static const int KDF1_SHA1_len = 20;",
          "335: static void *KDF1_SHA1(const void *in, size_t inlen, void *out,",
          "336:                        size_t *outlen)",
          "",
          "[Removed Lines]",
          "333: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "329: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "596: #endif",
          "599:     unsigned char ecdsasig[256];",
          "600:     unsigned int ecdsasiglen;",
          "601:     EC_KEY *ecdsa[EC_NUM];",
          "602:     long ecdsa_c[EC_NUM][2];",
          "606:     EC_KEY *ecdh_a[EC_NUM], *ecdh_b[EC_NUM];",
          "607:     unsigned char secret_a[MAX_ECDH_SIZE], secret_b[MAX_ECDH_SIZE];",
          "608:     int secret_size_a, secret_size_b;",
          "609:     int ecdh_checks = 0;",
          "610:     int secret_idx = 0;",
          "611:     long ecdh_c[EC_NUM][2];",
          "612: #endif",
          "614:     int rsa_doit[RSA_NUM];",
          "615:     int dsa_doit[DSA_NUM];",
          "622:     int doit[ALGOR_NUM];",
          "623:     int pr_header = 0;",
          "624:     const EVP_CIPHER *evp_cipher = NULL;",
          "",
          "[Removed Lines]",
          "598: #ifndef OPENSSL_NO_ECDSA",
          "603: #endif",
          "605: #ifndef OPENSSL_NO_ECDH",
          "616: #ifndef OPENSSL_NO_ECDSA",
          "617:     int ecdsa_doit[EC_NUM];",
          "618: #endif",
          "619: #ifndef OPENSSL_NO_ECDH",
          "620:     int ecdh_doit[EC_NUM];",
          "621: #endif",
          "",
          "[Added Lines]",
          "594: #ifndef OPENSSL_NO_EC",
          "605:     int ecdsa_doit[EC_NUM];",
          "606:     int ecdh_doit[EC_NUM];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "639: #ifndef OPENSSL_NO_DSA",
          "640:     memset(dsa_key, 0, sizeof(dsa_key));",
          "641: #endif",
          "643:     for (i = 0; i < EC_NUM; i++)",
          "644:         ecdsa[i] = NULL;",
          "647:     for (i = 0; i < EC_NUM; i++) {",
          "648:         ecdh_a[i] = NULL;",
          "649:         ecdh_b[i] = NULL;",
          "",
          "[Removed Lines]",
          "642: #ifndef OPENSSL_NO_ECDSA",
          "645: #endif",
          "646: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "631: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:         rsa_doit[i] = 0;",
          "690:     for (i = 0; i < DSA_NUM; i++)",
          "691:         dsa_doit[i] = 0;",
          "693:     for (i = 0; i < EC_NUM; i++)",
          "694:         ecdsa_doit[i] = 0;",
          "697:     for (i = 0; i < EC_NUM; i++)",
          "698:         ecdh_doit[i] = 0;",
          "699: #endif",
          "",
          "[Removed Lines]",
          "692: #ifndef OPENSSL_NO_ECDSA",
          "695: #endif",
          "696: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "679: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "986:             dsa_doit[R_DSA_2048] = 1;",
          "987:         } else",
          "988: #endif",
          "990:         if (strcmp(*argv, \"ecdsap160\") == 0)",
          "991:             ecdsa_doit[R_EC_P160] = 2;",
          "992:         else if (strcmp(*argv, \"ecdsap192\") == 0)",
          "",
          "[Removed Lines]",
          "989: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "974: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1022:         else if (strcmp(*argv, \"ecdsa\") == 0) {",
          "1023:             for (i = 0; i < EC_NUM; i++)",
          "1024:                 ecdsa_doit[i] = 1;",
          "1029:             ecdh_doit[R_EC_P160] = 2;",
          "1030:         else if (strcmp(*argv, \"ecdhp192\") == 0)",
          "1031:             ecdh_doit[R_EC_P192] = 2;",
          "",
          "[Removed Lines]",
          "1025:         } else",
          "1026: #endif",
          "1027: #ifndef OPENSSL_NO_ECDH",
          "1028:         if (strcmp(*argv, \"ecdhp160\") == 0)",
          "",
          "[Added Lines]",
          "1010:         } else if (strcmp(*argv, \"ecdhp160\") == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1135: #ifndef OPENSSL_NO_DSA",
          "1136:             BIO_printf(bio_err, \"dsa512   dsa1024  dsa2048\\n\");",
          "1137: #endif",
          "1139:             BIO_printf(bio_err, \"ecdsap160 ecdsap192 ecdsap224 \"",
          "1140:                        \"ecdsap256 ecdsap384 ecdsap521\\n\");",
          "1141:             BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "1138: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1120: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1143:             BIO_printf(bio_err,",
          "1144:                        \"ecdsab163 ecdsab233 ecdsab283 ecdsab409 ecdsab571\\n\");",
          "1145:             BIO_printf(bio_err, \"ecdsa\\n\");",
          "1148:             BIO_printf(bio_err, \"ecdhp160  ecdhp192  ecdhp224 \"",
          "1149:                        \"ecdhp256  ecdhp384  ecdhp521\\n\");",
          "1150:             BIO_printf(bio_err,",
          "",
          "[Removed Lines]",
          "1146: #endif",
          "1147: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1234:             rsa_doit[i] = 1;",
          "1235:         for (i = 0; i < DSA_NUM; i++)",
          "1236:             dsa_doit[i] = 1;",
          "1238:         for (i = 0; i < EC_NUM; i++)",
          "1239:             ecdsa_doit[i] = 1;",
          "1242:         for (i = 0; i < EC_NUM; i++)",
          "1243:             ecdh_doit[i] = 1;",
          "1244: #endif",
          "",
          "[Removed Lines]",
          "1237: #ifndef OPENSSL_NO_ECDSA",
          "1240: #endif",
          "1241: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1217: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1428:     }",
          "1429: #  endif",
          "1432:     ecdsa_c[R_EC_P160][0] = count / 1000;",
          "1433:     ecdsa_c[R_EC_P160][1] = count / 1000 / 2;",
          "1434:     for (i = R_EC_P192; i <= R_EC_P521; i++) {",
          "",
          "[Removed Lines]",
          "1431: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1409: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1471:             }",
          "1472:         }",
          "1473:     }",
          "1477:     ecdh_c[R_EC_P160][0] = count / 1000;",
          "1478:     ecdh_c[R_EC_P160][1] = count / 1000;",
          "1479:     for (i = R_EC_P192; i <= R_EC_P521; i++) {",
          "",
          "[Removed Lines]",
          "1474: #  endif",
          "1476: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2144:         RAND_cleanup();",
          "2145: #endif",
          "2148:     if (RAND_status() != 1) {",
          "2149:         RAND_seed(rnd_seed, sizeof rnd_seed);",
          "2150:         rnd_fake = 1;",
          "",
          "[Removed Lines]",
          "2147: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2122: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2236:     }",
          "2237:     if (rnd_fake)",
          "2238:         RAND_cleanup();",
          "2242:     if (RAND_status() != 1) {",
          "2243:         RAND_seed(rnd_seed, sizeof rnd_seed);",
          "2244:         rnd_fake = 1;",
          "",
          "[Removed Lines]",
          "2239: #endif",
          "2241: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2423:                     1.0 / dsa_results[k][0], 1.0 / dsa_results[k][1]);",
          "2424:     }",
          "2425: #endif",
          "2427:     j = 1;",
          "2428:     for (k = 0; k < EC_NUM; k++) {",
          "2429:         if (!ecdsa_doit[k])",
          "",
          "[Removed Lines]",
          "2426: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2398: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2445:                     ecdsa_results[k][0], ecdsa_results[k][1],",
          "2446:                     1.0 / ecdsa_results[k][0], 1.0 / ecdsa_results[k][1]);",
          "2447:     }",
          "2451:     j = 1;",
          "2452:     for (k = 0; k < EC_NUM; k++) {",
          "2453:         if (!ecdh_doit[k])",
          "",
          "[Removed Lines]",
          "2448: #endif",
          "2450: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2488:             DSA_free(dsa_key[i]);",
          "2489: #endif",
          "2492:     for (i = 0; i < EC_NUM; i++)",
          "2493:         if (ecdsa[i] != NULL)",
          "2494:             EC_KEY_free(ecdsa[i]);",
          "2497:     for (i = 0; i < EC_NUM; i++) {",
          "2498:         if (ecdh_a[i] != NULL)",
          "2499:             EC_KEY_free(ecdh_a[i]);",
          "",
          "[Removed Lines]",
          "2491: #ifndef OPENSSL_NO_ECDSA",
          "2495: #endif",
          "2496: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2460: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2697:                     dsa_results[k][1] = d;",
          "2698:             }",
          "2699: # endif",
          "2701:             else if (!strncmp(buf, \"+F4:\", 4)) {",
          "2702:                 int k;",
          "2703:                 double d;",
          "",
          "[Removed Lines]",
          "2700: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "2667: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2720:                 else",
          "2721:                     ecdsa_results[k][1] = d;",
          "2722:             }",
          "2726:             else if (!strncmp(buf, \"+F5:\", 4)) {",
          "2727:                 int k;",
          "2728:                 double d;",
          "",
          "[Removed Lines]",
          "2723: # endif",
          "2725: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c": [
          "File: crypto/ec/ec_pmeth.c -> crypto/ec/ec_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     return ret;",
          "204: }",
          "207: static int pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key,",
          "208:                           size_t *keylen)",
          "209: {",
          "",
          "[Removed Lines]",
          "206: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "206: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         EC_GROUP_set_asn1_flag(dctx->gen_group, p1);",
          "303:         return 1;",
          "306:     case EVP_PKEY_CTRL_EC_ECDH_COFACTOR:",
          "307:         if (p1 == -2) {",
          "308:             if (dctx->cofactor_mode != -1)",
          "",
          "[Removed Lines]",
          "305: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "305: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:     0, 0,",
          "521:     0,",
          "523:     pkey_ec_kdf_derive,",
          "524: #else",
          "525:     0,",
          "526: #endif",
          "528:     pkey_ec_ctrl,",
          "529:     pkey_ec_ctrl_str",
          "530: };",
          "",
          "[Removed Lines]",
          "522: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "522: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdh/ecdh.h||crypto/ecdh/ecdh.h": [
          "File: crypto/ecdh/ecdh.h -> crypto/ecdh/ecdh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: # include <openssl/opensslconf.h>",
          "75: #  error ECDH is disabled.",
          "76: # endif",
          "",
          "[Removed Lines]",
          "74: # ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "74: # ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdh/ecdhtest.c||crypto/ecdh/ecdhtest.c": [
          "File: crypto/ecdh/ecdhtest.c -> crypto/ecdh/ecdhtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #include <openssl/sha.h>",
          "83: #include <openssl/err.h>",
          "86: int main(int argc, char *argv[])",
          "87: {",
          "88:     printf(\"No ECDH support\\n\");",
          "",
          "[Removed Lines]",
          "85: #ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "85: #ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecdsa.h||crypto/ecdsa/ecdsa.h": [
          "File: crypto/ecdsa/ecdsa.h -> crypto/ecdsa/ecdsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: # include <openssl/opensslconf.h>",
          "65: #  error ECDSA is disabled.",
          "66: # endif",
          "",
          "[Removed Lines]",
          "64: # ifdef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "64: # ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecdsatest.c||crypto/ecdsa/ecdsatest.c": [
          "File: crypto/ecdsa/ecdsatest.c -> crypto/ecdsa/ecdsatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #include <stdlib.h>",
          "74: #include <string.h>",
          "79: int main(int argc, char *argv[])",
          "80: {",
          "81:     puts(\"Elliptic curves are disabled.\");",
          "",
          "[Removed Lines]",
          "78: #ifdef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "78: #ifdef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_fat.c||crypto/engine/eng_fat.c": [
          "File: crypto/engine/eng_fat.c -> crypto/engine/eng_fat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     if ((flags & ENGINE_METHOD_DH) && !ENGINE_set_default_DH(e))",
          "80:         return 0;",
          "81: #endif",
          "83:     if ((flags & ENGINE_METHOD_ECDH) && !ENGINE_set_default_ECDH(e))",
          "84:         return 0;",
          "87:     if ((flags & ENGINE_METHOD_ECDSA) && !ENGINE_set_default_ECDSA(e))",
          "88:         return 0;",
          "89: #endif",
          "",
          "[Removed Lines]",
          "82: #ifndef OPENSSL_NO_ECDH",
          "85: #endif",
          "86: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "82: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: #ifndef OPENSSL_NO_DH",
          "160:     ENGINE_register_DH(e);",
          "161: #endif",
          "163:     ENGINE_register_ECDH(e);",
          "166:     ENGINE_register_ECDSA(e);",
          "167: #endif",
          "168:     ENGINE_register_RAND(e);",
          "",
          "[Removed Lines]",
          "162: #ifndef OPENSSL_NO_ECDH",
          "164: #endif",
          "165: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "160: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_list.c||crypto/engine/eng_list.c": [
          "File: crypto/engine/eng_list.c -> crypto/engine/eng_list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: #ifndef OPENSSL_NO_DH",
          "301:     dest->dh_meth = src->dh_meth;",
          "302: #endif",
          "304:     dest->ecdh_meth = src->ecdh_meth;",
          "307:     dest->ecdsa_meth = src->ecdsa_meth;",
          "308: #endif",
          "309:     dest->rand_meth = src->rand_meth;",
          "",
          "[Removed Lines]",
          "303: #ifndef OPENSSL_NO_ECDH",
          "305: #endif",
          "306: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "303: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c": [
          "File: crypto/engine/eng_openssl.c -> crypto/engine/eng_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: # ifndef OPENSSL_NO_DSA",
          "150:         || !ENGINE_set_DSA(e, DSA_get_default_method())",
          "151: # endif",
          "153:         || !ENGINE_set_ECDH(e, ECDH_OpenSSL())",
          "156:         || !ENGINE_set_ECDSA(e, ECDSA_OpenSSL())",
          "157: # endif",
          "158: # ifndef OPENSSL_NO_DH",
          "",
          "[Removed Lines]",
          "152: # ifndef OPENSSL_NO_ECDH",
          "154: # endif",
          "155: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "152: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/engine/engine.h||crypto/engine/engine.h": [
          "File: crypto/engine/engine.h -> crypto/engine/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #  ifndef OPENSSL_NO_DH",
          "83: #   include <openssl/dh.h>",
          "84: #  endif",
          "86: #   include <openssl/ecdh.h>",
          "89: #   include <openssl/ecdsa.h>",
          "90: #  endif",
          "91: #  include <openssl/rand.h>",
          "",
          "[Removed Lines]",
          "85: #  ifndef OPENSSL_NO_ECDH",
          "87: #  endif",
          "88: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "85: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/err/err_all.c||crypto/err/err_all.c": [
          "File: crypto/err/err_all.c -> crypto/err/err_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #ifndef OPENSSL_NO_DSA",
          "77: # include <openssl/dsa.h>",
          "78: #endif",
          "80: # include <openssl/ecdsa.h>",
          "83: # include <openssl/ecdh.h>",
          "84: #endif",
          "85: #include <openssl/evp.h>",
          "",
          "[Removed Lines]",
          "79: #ifndef OPENSSL_NO_ECDSA",
          "81: #endif",
          "82: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "79: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: # endif",
          "139: # ifndef OPENSSL_NO_EC",
          "140:     ERR_load_EC_strings();",
          "143:     ERR_load_ECDSA_strings();",
          "146:     ERR_load_ECDH_strings();",
          "147: # endif",
          "",
          "[Removed Lines]",
          "141: # endif",
          "142: # ifndef OPENSSL_NO_ECDSA",
          "144: # endif",
          "145: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/c_alld.c||crypto/evp/c_alld.c": [
          "File: crypto/evp/c_alld.c -> crypto/evp/c_alld.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     EVP_add_digest_alias(SN_dsaWithSHA1, \"DSS1\");",
          "81:     EVP_add_digest_alias(SN_dsaWithSHA1, \"dss1\");",
          "82: # endif",
          "84:     EVP_add_digest(EVP_ecdsa());",
          "85: # endif",
          "86: #if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)",
          "",
          "[Removed Lines]",
          "83: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "83: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/evp/evp.h||crypto/evp/evp.h": [
          "File: crypto/evp/evp.h -> crypto/evp/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: #   define EVP_PKEY_DSA_method     EVP_PKEY_NULL_method",
          "235: #  endif",
          "238: #   define EVP_PKEY_ECDSA_method   (evp_sign_method *)ECDSA_sign, \\",
          "239:                                 (evp_verify_method *)ECDSA_verify, \\",
          "240:                                  {EVP_PKEY_EC,0,0,0}",
          "",
          "[Removed Lines]",
          "237: #  ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "237: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "crypto/x509/x509.h||crypto/x509/x509.h": [
          "File: crypto/x509/x509.h -> crypto/x509/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: # ifndef OPENSSL_NO_EC",
          "77: #  include <openssl/ec.h>",
          "81: #  include <openssl/ecdsa.h>",
          "85: #  include <openssl/ecdh.h>",
          "86: # endif",
          "",
          "[Removed Lines]",
          "78: # endif",
          "80: # ifndef OPENSSL_NO_ECDSA",
          "82: # endif",
          "84: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1321: #ifndef OPENSSL_NO_DH",
          "1322:     DH *dh = NULL;",
          "1323: #endif",
          "1325:     EC_KEY *ecdh = NULL;",
          "1326:     BN_CTX *bn_ctx = NULL;",
          "1327:     EC_POINT *srvr_ecpoint = NULL;",
          "",
          "[Removed Lines]",
          "1324: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1324: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1385:             s->session->sess_cert->peer_dh_tmp = NULL;",
          "1386:         }",
          "1387: #endif",
          "1389:         if (s->session->sess_cert->peer_ecdh_tmp) {",
          "1390:             EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);",
          "1391:             s->session->sess_cert->peer_ecdh_tmp = NULL;",
          "",
          "[Removed Lines]",
          "1388: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1388: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724:     }",
          "1728:     else if (alg_k & SSL_kECDHE) {",
          "1729:         EC_GROUP *ngroup;",
          "1730:         const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1727: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1727: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1822:                 X509_get_pubkey(s->session->",
          "1823:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1824: # endif",
          "1826:         else if (alg_a & SSL_aECDSA)",
          "1827:             pkey =",
          "1828:                 X509_get_pubkey(s->session->",
          "",
          "[Removed Lines]",
          "1825: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "1825: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1961:     if (dh != NULL)",
          "1962:         DH_free(dh);",
          "1963: #endif",
          "1965:     BN_CTX_free(bn_ctx);",
          "1966:     EC_POINT_free(srvr_ecpoint);",
          "1967:     if (ecdh != NULL)",
          "",
          "[Removed Lines]",
          "1964: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1964: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2299: #ifndef OPENSSL_NO_KRB5",
          "2300:     KSSL_ERR kssl_err;",
          "2303:     EC_KEY *clnt_ecdh = NULL;",
          "2304:     const EC_POINT *srvr_ecpoint = NULL;",
          "2305:     EVP_PKEY *srvr_pub_pkey = NULL;",
          "",
          "[Removed Lines]",
          "2302: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2302: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2597:         }",
          "2598: #endif",
          "2601:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe)) {",
          "2602:             const EC_GROUP *srvr_group = NULL;",
          "2603:             EC_KEY *tkey;",
          "",
          "[Removed Lines]",
          "2600: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2600: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3054:         OPENSSL_free(pms);",
          "3055:         s->cert->pms = NULL;",
          "3056:     }",
          "3058:     BN_CTX_free(bn_ctx);",
          "3059:     if (encodedPoint != NULL)",
          "3060:         OPENSSL_free(encodedPoint);",
          "",
          "[Removed Lines]",
          "3057: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3057: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3156:             n = j + 2;",
          "3157:         } else",
          "3158: #endif",
          "3160:         if (pkey->type == EVP_PKEY_EC) {",
          "3161:             if (!ECDSA_sign(pkey->save_type,",
          "3162:                             &(data[MD5_DIGEST_LENGTH]),",
          "",
          "[Removed Lines]",
          "3159: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3159: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3367:     idx = sc->peer_cert_type;",
          "3369:     if (idx == SSL_PKEY_ECC) {",
          "3370:         if (ssl_check_srvr_ecc_cert_and_alg(sc->peer_pkeys[idx].x509, s) == 0) {",
          "",
          "[Removed Lines]",
          "3368: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3368: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2051:      },",
          "2052: #endif",
          "2056:     {",
          "2057:      1,",
          "",
          "[Removed Lines]",
          "2054: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2054: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2598:      256,",
          "2599:      },",
          "",
          "[Removed Lines]",
          "2601: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2601: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3138:     if (s->s3->tmp.dh != NULL)",
          "3139:         DH_free(s->s3->tmp.dh);",
          "3140: #endif",
          "3142:     if (s->s3->tmp.ecdh != NULL)",
          "3143:         EC_KEY_free(s->s3->tmp.ecdh);",
          "3144: #endif",
          "",
          "[Removed Lines]",
          "3141: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3141: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3183:         s->s3->tmp.dh = NULL;",
          "3184:     }",
          "3185: #endif",
          "3187:     if (s->s3->tmp.ecdh != NULL) {",
          "3188:         EC_KEY_free(s->s3->tmp.ecdh);",
          "3189:         s->s3->tmp.ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3186: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3186: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3357:         s->cert->dh_tmp_auto = larg;",
          "3358:         return 1;",
          "3359: #endif",
          "3361:     case SSL_CTRL_SET_TMP_ECDH:",
          "3362:         {",
          "3363:             EC_KEY *ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3360: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3360: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3558:     case SSL_CTRL_GET_SHARED_CURVE:",
          "3559:         return tls1_shared_curve(s, larg);",
          "3562:     case SSL_CTRL_SET_ECDH_AUTO:",
          "3563:         s->cert->ecdh_tmp_auto = larg;",
          "3564:         return 1;",
          "",
          "[Removed Lines]",
          "3561: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3561: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3629:             EVP_PKEY *ptmp;",
          "3630:             int rv = 0;",
          "3631:             sc = s->session->sess_cert;",
          "3633:             if (!sc->peer_rsa_tmp && !sc->peer_dh_tmp && !sc->peer_ecdh_tmp)",
          "3634:                 return 0;",
          "3635: #endif",
          "",
          "[Removed Lines]",
          "3632: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_ECDH)",
          "",
          "[Added Lines]",
          "3632: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3645:             else if (sc->peer_dh_tmp)",
          "3646:                 rv = EVP_PKEY_set1_DH(ptmp, sc->peer_dh_tmp);",
          "3647: #endif",
          "3649:             else if (sc->peer_ecdh_tmp)",
          "3650:                 rv = EVP_PKEY_set1_EC_KEY(ptmp, sc->peer_ecdh_tmp);",
          "3651: #endif",
          "",
          "[Removed Lines]",
          "3648: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3648: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3736:         }",
          "3737:         break;",
          "3738: #endif",
          "3740:     case SSL_CTRL_SET_TMP_ECDH_CB:",
          "3741:         {",
          "3742:             s->cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;",
          "",
          "[Removed Lines]",
          "3739: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3739: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3847:         ctx->cert->dh_tmp_auto = larg;",
          "3848:         return 1;",
          "3849: #endif",
          "3851:     case SSL_CTRL_SET_TMP_ECDH:",
          "3852:         {",
          "3853:             EC_KEY *ecdh = NULL;",
          "",
          "[Removed Lines]",
          "3850: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3850: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3955:         return tls1_set_curves_list(&ctx->tlsext_ellipticcurvelist,",
          "3956:                                     &ctx->tlsext_ellipticcurvelist_length,",
          "3957:                                     parg);",
          "3959:     case SSL_CTRL_SET_ECDH_AUTO:",
          "3960:         ctx->cert->ecdh_tmp_auto = larg;",
          "3961:         return 1;",
          "",
          "[Removed Lines]",
          "3958: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3958: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4059:         }",
          "4060:         break;",
          "4061: #endif",
          "4063:     case SSL_CTRL_SET_TMP_ECDH_CB:",
          "4064:         {",
          "4065:             cert->ecdh_tmp_cb = (EC_KEY *(*)(SSL *, int, int))fp;",
          "",
          "[Removed Lines]",
          "4062: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "4062: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4252: #ifndef OPENSSL_NO_TLSEXT",
          "4253: # ifndef OPENSSL_NO_EC",
          "4259:         if (alg_k & SSL_kECDHE)",
          "4260:             ok = ok && tls1_check_ec_tmp_key(s, c->id);",
          "",
          "[Removed Lines]",
          "4254: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4346:     if (!(alg_a & SSL_aDSS))",
          "4347:         p[ret++] = SSL3_CT_DSS_SIGN;",
          "4348: #endif",
          "4350:     if ((alg_k & (SSL_kECDHr | SSL_kECDHe)) && (s->version >= TLS1_VERSION)) {",
          "4351:         if (nostrict || !(alg_a & SSL_aRSA))",
          "4352:             p[ret++] = TLS_CT_RSA_FIXED_ECDH;",
          "4353:         if (nostrict || !(alg_a & SSL_aECDSA))",
          "4354:             p[ret++] = TLS_CT_ECDSA_FIXED_ECDH;",
          "4355:     }",
          "",
          "[Removed Lines]",
          "4349: #ifndef OPENSSL_NO_ECDH",
          "4356: #endif",
          "4358: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "4347: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532: #ifndef OPENSSL_NO_DH",
          "1533:     DH *dh = NULL, *dhp;",
          "1534: #endif",
          "1536:     EC_KEY *ecdh = NULL, *ecdhp;",
          "1537:     unsigned char *encodedPoint = NULL;",
          "1538:     int encodedlen = 0;",
          "",
          "[Removed Lines]",
          "1535: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1535: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1654:             r[2] = dh->pub_key;",
          "1655:         } else",
          "1656: #endif",
          "1658:         if (type & SSL_kECDHE) {",
          "1659:             const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1657: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1657: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1853:             p += nr[i];",
          "1854:         }",
          "1857:         if (type & SSL_kECDHE) {",
          "",
          "[Removed Lines]",
          "1856: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1856: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3001:         }",
          "3002:     } else",
          "3003: #endif",
          "3005:     if (pkey->type == EVP_PKEY_EC) {",
          "3006:         j = ECDSA_verify(pkey->save_type,",
          "3007:                          &(s->s3->tmp.cert_verify_md[MD5_DIGEST_LENGTH]),",
          "",
          "[Removed Lines]",
          "3004: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3004: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760:                              DH *(*dh) (SSL *ssl, int is_export,",
          "1761:                                         int keylength));",
          "1762: # endif",
          "1764: void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,",
          "1765:                                    EC_KEY *(*ecdh) (SSL *ssl, int is_export,",
          "1766:                                                     int keylength));",
          "",
          "[Removed Lines]",
          "1763: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1763: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_algs.c||ssl/ssl_algs.c": [
          "File: ssl/ssl_algs.c -> ssl/ssl_algs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     EVP_add_digest_alias(SN_dsaWithSHA1, \"DSS1\");",
          "123:     EVP_add_digest_alias(SN_dsaWithSHA1, \"dss1\");",
          "124: #endif",
          "126:     EVP_add_digest(EVP_ecdsa());",
          "127: #endif",
          "128: #ifndef OPENSSL_NO_COMP",
          "",
          "[Removed Lines]",
          "125: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "125: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     cert->pkeys[SSL_PKEY_RSA_SIGN].digest = EVP_sha1();",
          "176:     cert->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();",
          "177: #endif",
          "179:     cert->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();",
          "180: #endif",
          "181: }",
          "",
          "[Removed Lines]",
          "178: #ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "178: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     ret->dh_tmp_auto = cert->dh_tmp_auto;",
          "262: #endif",
          "265:     if (cert->ecdh_tmp) {",
          "266:         ret->ecdh_tmp = EC_KEY_dup(cert->ecdh_tmp);",
          "267:         if (ret->ecdh_tmp == NULL) {",
          "",
          "[Removed Lines]",
          "264: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "264: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "450:     if (c->dh_tmp)",
          "451:         DH_free(c->dh_tmp);",
          "452: #endif",
          "454:     if (c->ecdh_tmp)",
          "455:         EC_KEY_free(c->ecdh_tmp);",
          "456: #endif",
          "",
          "[Removed Lines]",
          "453: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "453: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "683:     if (sc->peer_dh_tmp != NULL)",
          "684:         DH_free(sc->peer_dh_tmp);",
          "685: #endif",
          "687:     if (sc->peer_ecdh_tmp != NULL)",
          "688:         EC_KEY_free(sc->peer_ecdh_tmp);",
          "689: #endif",
          "",
          "[Removed Lines]",
          "686: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "686: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: #endif",
          "757: #endif",
          "758: #ifdef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "751: #ifdef OPENSSL_NO_ECDSA",
          "753: #endif",
          "754: #ifdef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "751: #ifdef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:                    SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE);",
          "1438:         return 0;",
          "1439:     }",
          "1441:     switch (suiteb_flags) {",
          "1442:     case SSL_CERT_FLAG_SUITEB_128_LOS:",
          "1443:         if (suiteb_comb2)",
          "",
          "[Removed Lines]",
          "1440: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1437: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_conf.c||ssl/ssl_conf.c": [
          "File: ssl/ssl_conf.c -> ssl/ssl_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return rv > 0;",
          "258: }",
          "262: static int cmd_ECDHParameters(SSL_CONF_CTX *cctx, const char *value)",
          "263: {",
          "",
          "[Removed Lines]",
          "260: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "260: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     SSL_CONF_CMD_STRING(SignatureAlgorithms, \"sigalgs\"),",
          "448:     SSL_CONF_CMD_STRING(ClientSignatureAlgorithms, \"client_sigalgs\"),",
          "449:     SSL_CONF_CMD_STRING(Curves, \"curves\"),",
          "451:     SSL_CONF_CMD_STRING(ECDHParameters, \"named_curve\"),",
          "452: #endif",
          "453:     SSL_CONF_CMD_STRING(CipherString, \"cipher\"),",
          "",
          "[Removed Lines]",
          "450: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "450: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2153:     int rsa_enc_export, dh_rsa_export, dh_dsa_export;",
          "2154:     int rsa_tmp_export, dh_tmp_export, kl;",
          "2155:     unsigned long mask_k, mask_a, emask_k, emask_a;",
          "2157:     int have_ecc_cert, ecdsa_ok, ecc_pkey_size;",
          "2160:     int have_ecdh_tmp, ecdh_ok;",
          "2163:     X509 *x = NULL;",
          "2164:     EVP_PKEY *ecc_pkey = NULL;",
          "2165:     int signature_nid = 0, pk_nid = 0, md_nid = 0;",
          "",
          "[Removed Lines]",
          "2156: #ifndef OPENSSL_NO_ECDSA",
          "2158: #endif",
          "2159: #ifndef OPENSSL_NO_ECDH",
          "2161: #endif",
          "2162: #ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2156: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2185:     dh_tmp = dh_tmp_export = 0;",
          "2186: #endif",
          "2189:     have_ecdh_tmp = (c->ecdh_tmp || c->ecdh_tmp_cb || c->ecdh_tmp_auto);",
          "2190: #endif",
          "2191:     cpk = &(c->pkeys[SSL_PKEY_RSA_ENC]);",
          "",
          "[Removed Lines]",
          "2188: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2184: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2283:         x = cpk->x509;",
          "2285:         X509_check_purpose(x, -1, 0);",
          "2287:         ecdh_ok = (x->ex_flags & EXFLAG_KUSAGE) ?",
          "2288:             (x->ex_kusage & X509v3_KU_KEY_AGREEMENT) : 1;",
          "2290:         ecdsa_ok = (x->ex_flags & EXFLAG_KUSAGE) ?",
          "2291:             (x->ex_kusage & X509v3_KU_DIGITAL_SIGNATURE) : 1;",
          "2292:         if (!(cpk->valid_flags & CERT_PKEY_SIGN))",
          "",
          "[Removed Lines]",
          "2286: # ifndef OPENSSL_NO_ECDH",
          "2289: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2298:             signature_nid = OBJ_obj2nid(x->sig_alg->algorithm);",
          "2299:             OBJ_find_sigid_algs(signature_nid, &md_nid, &pk_nid);",
          "2300:         }",
          "2302:         if (ecdh_ok) {",
          "2304:             if (pk_nid == NID_rsaEncryption || pk_nid == NID_rsa) {",
          "",
          "[Removed Lines]",
          "2301: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2319:                 }",
          "2320:             }",
          "2321:         }",
          "2324:         if (ecdsa_ok) {",
          "2325:             mask_a |= SSL_aECDSA;",
          "2326:             emask_a |= SSL_aECDSA;",
          "2327:         }",
          "2329:     }",
          "2330: #endif",
          "2333:     if (have_ecdh_tmp) {",
          "2334:         mask_k |= SSL_kECDHE;",
          "2335:         emask_k |= SSL_kECDHE;",
          "",
          "[Removed Lines]",
          "2322: # endif",
          "2323: # ifndef OPENSSL_NO_ECDSA",
          "2328: # endif",
          "2332: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2322: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3267: }",
          "3268: #endif",
          "3271: void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,",
          "3272:                                    EC_KEY *(*ecdh) (SSL *ssl, int is_export,",
          "3273:                                                     int keylength))",
          "",
          "[Removed Lines]",
          "3270: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "3260: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1350: #  ifndef OPENSSL_NO_DH",
          "1351:         DH *dh;",
          "1352: #  endif",
          "1355: #  endif",
          "",
          "[Removed Lines]",
          "1353: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1353: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1662:     DH *(*dh_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "1663:     int dh_tmp_auto;",
          "1664: # endif",
          "1666:     EC_KEY *ecdh_tmp;",
          "1668:     EC_KEY *(*ecdh_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "",
          "[Removed Lines]",
          "1665: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1665: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1760: # ifndef OPENSSL_NO_DH",
          "1762: # endif",
          "1764:     EC_KEY *peer_ecdh_tmp;",
          "1765: # endif",
          "",
          "[Removed Lines]",
          "1763: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1763: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2317: int ssl3_alert_code(int code);",
          "2318: int ssl_ok(SSL *s);",
          "2321: int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s);",
          "2322: #  endif",
          "",
          "[Removed Lines]",
          "2320: #  ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "2320: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2332:                     int *curves, size_t ncurves);",
          "2333: int tls1_set_curves_list(unsigned char **pext, size_t *pextlen,",
          "2334:                          const char *str);",
          "2336: int tls1_check_ec_tmp_key(SSL *s, unsigned long id);",
          "2340: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Removed Lines]",
          "2335: #   ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssltest.c||ssl/ssltest.c": [
          "File: ssl/ssltest.c -> ssl/ssltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:             \" -dhe1024dsa   - use 1024 bit key (with 160-bit subprime) for DHE\\n\");",
          "775:     fprintf(stderr, \" -no_dhe       - disable DHE\\n\");",
          "776: #endif",
          "778:     fprintf(stderr, \" -no_ecdhe     - disable ECDHE\\n\");",
          "779: #endif",
          "780: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "777: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "777: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:             \" -time         - measure processor time used by client and server\\n\");",
          "804:     fprintf(stderr, \" -zlib         - use zlib compression\\n\");",
          "805:     fprintf(stderr, \" -rle          - use rle compression\\n\");",
          "807:     fprintf(stderr,",
          "808:             \" -named_curve arg  - Elliptic curve name to use for ephemeral ECDH keys.\\n\"",
          "809:             \"                 Use \\\"openssl ecparam -list_curves\\\" for all names\\n\"",
          "",
          "[Removed Lines]",
          "806: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "806: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "967:     char *server_key = NULL;",
          "968:     char *client_cert = TEST_CLIENT_CERT;",
          "969:     char *client_key = NULL;",
          "971:     char *named_curve = NULL;",
          "972: #endif",
          "973:     SSL_CTX *s_ctx = NULL;",
          "",
          "[Removed Lines]",
          "970: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "970: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "980:     DH *dh;",
          "981:     int dhe1024 = 0, dhe1024dsa = 0;",
          "982: #endif",
          "984:     EC_KEY *ecdh = NULL;",
          "985: #endif",
          "986: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "983: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "983: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:         else if (strcmp(*argv, \"-named_curve\") == 0) {",
          "1207:             if (--argc < 1)",
          "1208:                 goto bad;",
          "1210:             named_curve = *(++argv);",
          "1211: #else",
          "1212:             fprintf(stderr,",
          "",
          "[Removed Lines]",
          "1209: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1209: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1470:     (void)no_dhe;",
          "1471: #endif",
          "1474:     if (!no_ecdhe) {",
          "1475:         int nid;",
          "",
          "[Removed Lines]",
          "1473: #ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "1473: #ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798:     return rv;",
          "799: }",
          "803: int tls1_check_ec_tmp_key(SSL *s, unsigned long cid)",
          "804: {",
          "",
          "[Removed Lines]",
          "801: # ifndef OPENSSL_NO_ECDH",
          "",
          "[Added Lines]",
          "801: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: #  define tlsext_sigalg_dsa(md) md, TLSEXT_signature_dsa,",
          "894: # endif",
          "899: # else",
          "900: #  define tlsext_sigalg_ecdsa(md) md, TLSEXT_signature_ecdsa,",
          "901: # endif",
          "",
          "[Removed Lines]",
          "896: # ifdef OPENSSL_NO_ECDSA",
          "897: #  define tlsext_sigalg_ecdsa(md)",
          "",
          "[Added Lines]",
          "896: # ifdef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913:         tlsext_sigalg(TLSEXT_hash_sha1)",
          "914: };",
          "917: static const unsigned char suiteb_sigalgs[] = {",
          "918:     tlsext_sigalg_ecdsa(TLSEXT_hash_sha256)",
          "919:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "",
          "[Removed Lines]",
          "916: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "915: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3246:     case TLSEXT_signature_dsa:",
          "3247:         return SSL_PKEY_DSA_SIGN;",
          "3248: # endif",
          "3250:     case TLSEXT_signature_ecdsa:",
          "3251:         return SSL_PKEY_ECC;",
          "3252: # endif",
          "",
          "[Removed Lines]",
          "3249: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3248: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3326:                 have_dsa = 1;",
          "3327:             break;",
          "3328: # endif",
          "3330:         case TLSEXT_signature_ecdsa:",
          "3331:             if (!have_ecdsa && tls12_sigalg_allowed(s, op, sigalgs))",
          "3332:                 have_ecdsa = 1;",
          "",
          "[Removed Lines]",
          "3329: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3328: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3521:             c->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();",
          "3522:         }",
          "3523: # endif",
          "3525:         if (!c->pkeys[SSL_PKEY_ECC].digest)",
          "3526:             c->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();",
          "3527: # endif",
          "",
          "[Removed Lines]",
          "3524: # ifndef OPENSSL_NO_ECDSA",
          "",
          "[Added Lines]",
          "3523: # ifndef OPENSSL_NO_EC",
          "",
          "---------------"
        ],
        "util/mk1mf.pl||util/mk1mf.pl": [
          "File: util/mk1mf.pl -> util/mk1mf.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:  no-krb5     - No KRB5",
          "143:  no-srp     - No SRP",
          "144:  no-ec     - No EC",
          "147:  no-engine    - No engine",
          "148:  no-hw     - No hw",
          "149:  nasm      - Use NASM for x86 asm",
          "",
          "[Removed Lines]",
          "145:  no-ecdsa    - No ECDSA",
          "146:  no-ecdh     - No ECDH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: $cflags.=\" -DOPENSSL_NO_ERR\"  if $no_err;",
          "299: $cflags.=\" -DOPENSSL_NO_KRB5\" if $no_krb5;",
          "300: $cflags.=\" -DOPENSSL_NO_EC\"   if $no_ec;",
          "303: $cflags.=\" -DOPENSSL_NO_GOST\" if $no_gost;",
          "304: $cflags.=\" -DOPENSSL_NO_ENGINE\"   if $no_engine;",
          "305: $cflags.=\" -DOPENSSL_NO_HW\"   if $no_hw;",
          "",
          "[Removed Lines]",
          "301: $cflags.=\" -DOPENSSL_NO_ECDSA\" if $no_ecdsa;",
          "302: $cflags.=\" -DOPENSSL_NO_ECDH\" if $no_ecdh;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1427:   \"no-sock\" => \\$no_sock,",
          "1428:   \"no-krb5\" => \\$no_krb5,",
          "1429:   \"no-ec\" => \\$no_ec,",
          "1432:   \"no-gost\" => \\$no_gost,",
          "1433:   \"no-engine\" => \\$no_engine,",
          "1434:   \"no-hw\" => \\$no_hw,",
          "",
          "[Removed Lines]",
          "1430:   \"no-ecdsa\" => \\$no_ecdsa,",
          "1431:   \"no-ecdh\" => \\$no_ecdh,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7689082b7199b91aa2df5d3e481abcca480e9d7e",
      "candidate_info": {
        "commit_hash": "7689082b7199b91aa2df5d3e481abcca480e9d7e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7689082b7199b91aa2df5d3e481abcca480e9d7e",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Extended PSK client support.\n\nAdd support for RSAPSK, DHEPSK and ECDHEPSK client side.\n\nUpdate various checks to ensure certificate and server key exchange messages\nare only expected when required.\n\nUpdate message handling. PSK server key exchange parsing now expects an\nidentity hint prefix for all PSK server key exchange messages. PSK\nclient key exchange message requests PSK identity and key for all PSK\nkey exchange ciphersuites and includes identity in message.\n\nUpdate flags for RSA, DH and ECDH so they are also used in PSK.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:                 ret = ssl3_get_server_certificate(s);",
          "339:                 if (ret <= 0)",
          "340:                     goto end;",
          "",
          "[Removed Lines]",
          "334:             if (!",
          "335:                 (s->s3->tmp.",
          "336:                  new_cipher->algorithm_auth & (SSL_aNULL | SSL_aSRP))",
          "337:                     && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)) {",
          "",
          "[Added Lines]",
          "334:             if (!(s->s3->tmp.new_cipher->algorithm_auth &",
          "335:                     (SSL_aNULL | SSL_aSRP | SSL_aPSK))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1418:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1419:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1420:             goto f_err;",
          "",
          "[Removed Lines]",
          "1417:         if (alg_k & (SSL_kDHE | SSL_kECDHE)) {",
          "",
          "[Added Lines]",
          "1415:         if (alg_k & (SSL_kDHE | SSL_kECDHE | SSL_kDHEPSK | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1447:     al = SSL_AD_DECODE_ERROR;",
          "1449: #ifndef OPENSSL_NO_PSK",
          "1453:         param_len = 2;",
          "1454:         if (param_len > n) {",
          "",
          "[Removed Lines]",
          "1450:     if (alg_k & SSL_kPSK) {",
          "1451:         char tmp_id_hint[PSK_MAX_IDENTITY_LEN + 1];",
          "",
          "[Added Lines]",
          "1449:     if (alg_k & SSL_PSK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1475:         }",
          "1476:         param_len += i;",
          "1485:         OPENSSL_free(s->session->psk_identity_hint);",
          "1491:         }",
          "1493:         p += i;",
          "1494:         n -= param_len;",
          "1495:     } else",
          "1497: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "1483:         memcpy(tmp_id_hint, p, i);",
          "1484:         memset(tmp_id_hint + i, 0, PSK_MAX_IDENTITY_LEN + 1 - i);",
          "1486:         s->session->psk_identity_hint = BUF_strdup(tmp_id_hint);",
          "1487:         if (s->session->psk_identity_hint == NULL) {",
          "1488:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1489:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1490:             goto f_err;",
          "",
          "[Added Lines]",
          "1477:         if (i != 0) {",
          "1478:             s->session->psk_identity_hint = BUF_strndup((char *)p, i);",
          "1479:             if (s->session->psk_identity_hint == NULL) {",
          "1480:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1481:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1482:                 goto f_err;",
          "1483:             }",
          "1484:         } else {",
          "1485:             s->session->psk_identity_hint = NULL;",
          "1490:     }",
          "1493:     if (alg_k & (SSL_kPSK | SSL_kRSAPSK)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1661:     if (0) ;",
          "1662: #endif",
          "1663: #ifndef OPENSSL_NO_DH",
          "1665:         if ((dh = DH_new()) == NULL) {",
          "1666:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1667:             goto err;",
          "",
          "[Removed Lines]",
          "1664:     else if (alg_k & SSL_kDHE) {",
          "",
          "[Added Lines]",
          "1663:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1744: #ifndef OPENSSL_NO_EC",
          "1746:         EC_GROUP *ngroup;",
          "1747:         const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1745:     else if (alg_k & SSL_kECDHE) {",
          "",
          "[Added Lines]",
          "1744:     else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1945:             }",
          "1946:         }",
          "1947:     } else {",
          "1951:             if (ssl3_check_cert_and_algorithm(s))",
          "",
          "[Removed Lines]",
          "1949:         if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & SSL_kPSK)) {",
          "",
          "[Added Lines]",
          "1948:         if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & SSL_PSK)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2329: {",
          "2330:     unsigned char *p;",
          "2331:     int n;",
          "2332:     unsigned long alg_k;",
          "2333: #ifndef OPENSSL_NO_RSA",
          "2334:     unsigned char *q;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331: #ifndef OPENSSL_NO_PSK",
          "2332:     size_t pskhdrlen = 0;",
          "2333: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2344: #endif",
          "2345:     unsigned char *pms = NULL;",
          "2346:     size_t pmslen = 0;",
          "2348:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2349:         p = ssl_handshake_start(s);",
          "2354:         if (0) {",
          "2355:         }",
          "2356: #ifndef OPENSSL_NO_RSA",
          "2358:             RSA *rsa;",
          "2359:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2360:             pms = OPENSSL_malloc(pmslen);",
          "",
          "[Removed Lines]",
          "2351:         alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "2357:         else if (alg_k & SSL_kRSA) {",
          "",
          "[Added Lines]",
          "2349:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "2355: #ifndef OPENSSL_NO_PSK",
          "2356:         if (alg_k & SSL_PSK) {",
          "2357:             int psk_err = 1;",
          "2363:             char identity[PSK_MAX_IDENTITY_LEN + 1];",
          "2364:             size_t identitylen;",
          "2365:             unsigned char psk[PSK_MAX_PSK_LEN];",
          "2366:             size_t psklen;",
          "2368:             if (s->psk_client_callback == NULL) {",
          "2369:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2370:                        SSL_R_PSK_NO_CLIENT_CB);",
          "2371:                 goto err;",
          "2372:             }",
          "2374:             memset(identity, 0, sizeof(identity));",
          "2376:             psklen = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2377:                                             identity, sizeof(identity) - 1,",
          "2378:                                             psk, sizeof(psk));",
          "2380:             if (psklen > PSK_MAX_PSK_LEN) {",
          "2381:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2382:                        ERR_R_INTERNAL_ERROR);",
          "2383:                 goto psk_err;",
          "2384:             } else if (psklen == 0) {",
          "2385:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2386:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2387:                 goto psk_err;",
          "2388:             }",
          "2390:             OPENSSL_free(s->s3->tmp.psk);",
          "2391:             s->s3->tmp.psk = BUF_memdup(psk, psklen);",
          "2392:             OPENSSL_cleanse(psk, psklen);",
          "2394:             if (s->s3->tmp.psk == NULL)",
          "2395:                 goto memerr;",
          "2397:             s->s3->tmp.psklen = psklen;",
          "2399:             identitylen = strlen(identity);",
          "2400:             if (identitylen > PSK_MAX_IDENTITY_LEN) {",
          "2401:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2402:                        ERR_R_INTERNAL_ERROR);",
          "2403:                 goto psk_err;",
          "2404:             }",
          "2405:             OPENSSL_free(s->session->psk_identity);",
          "2406:             s->session->psk_identity = BUF_strdup(identity);",
          "2407:             if (s->session->psk_identity == NULL)",
          "2408:                 goto memerr;",
          "2410:             s2n(identitylen, p);",
          "2411:             memcpy(p, identity, identitylen);",
          "2412:             pskhdrlen = 2 + identitylen;",
          "2413:             p += identitylen;",
          "2414:             psk_err = 0;",
          "2415:  psk_err:",
          "2416:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2417:             if (psk_err != 0) {",
          "2418:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2419:                 goto err;",
          "2420:             }",
          "2421:         }",
          "2422:         if (alg_k & SSL_kPSK) {",
          "2423:             n = 0;",
          "2424:         } else",
          "2425: #endif",
          "2431:         else if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2414:         }",
          "2415: #endif",
          "2416: #ifndef OPENSSL_NO_DH",
          "2418:             DH *dh_srvr, *dh_clnt;",
          "2419:             if (s->s3->peer_dh_tmp != NULL)",
          "2420:                 dh_srvr = s->s3->peer_dh_tmp;",
          "",
          "[Removed Lines]",
          "2417:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd)) {",
          "",
          "[Added Lines]",
          "2491:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2493: #endif",
          "2495: #ifndef OPENSSL_NO_EC",
          "2497:             const EC_GROUP *srvr_group = NULL;",
          "2498:             EC_KEY *tkey;",
          "2499:             int ecdh_clnt_cert = 0;",
          "",
          "[Removed Lines]",
          "2496:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe)) {",
          "",
          "[Added Lines]",
          "2570:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2780:                 goto err;",
          "2781:             }",
          "2782:         }",
          "2859: #endif",
          "2860:         else {",
          "2861:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "",
          "[Removed Lines]",
          "2783: #endif",
          "2784: #ifndef OPENSSL_NO_PSK",
          "2785:         else if (alg_k & SSL_kPSK) {",
          "2791:             char identity[PSK_MAX_IDENTITY_LEN + 2];",
          "2792:             size_t identity_len;",
          "2793:             unsigned char *t = NULL;",
          "2794:             unsigned int psk_len = 0;",
          "2795:             int psk_err = 1;",
          "2797:             n = 0;",
          "2798:             if (s->psk_client_callback == NULL) {",
          "2799:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2800:                        SSL_R_PSK_NO_CLIENT_CB);",
          "2801:                 goto err;",
          "2802:             }",
          "2804:             memset(identity, 0, sizeof(identity));",
          "2806:             pmslen = PSK_MAX_PSK_LEN * 2 + 4;",
          "2807:             pms = OPENSSL_malloc(pmslen);",
          "2808:             if (!pms)",
          "2809:                 goto memerr;",
          "2811:             psk_len = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2812:                                              identity, sizeof(identity) - 1,",
          "2813:                                              pms, pmslen);",
          "2814:             if (psk_len > PSK_MAX_PSK_LEN) {",
          "2815:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2816:                        ERR_R_INTERNAL_ERROR);",
          "2817:                 goto psk_err;",
          "2818:             } else if (psk_len == 0) {",
          "2819:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2820:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2821:                 goto psk_err;",
          "2822:             }",
          "2824:             pmslen = 2 + psk_len + 2 + psk_len;",
          "2825:             identity[PSK_MAX_IDENTITY_LEN + 1] = '\\0';",
          "2826:             identity_len = strlen(identity);",
          "2827:             if (identity_len > PSK_MAX_IDENTITY_LEN) {",
          "2828:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2829:                        ERR_R_INTERNAL_ERROR);",
          "2830:                 goto psk_err;",
          "2831:             }",
          "2833:             t = pms;",
          "2834:             memmove(pms + psk_len + 4, pms, psk_len);",
          "2835:             s2n(psk_len, t);",
          "2836:             memset(t, 0, psk_len);",
          "2837:             t += psk_len;",
          "2838:             s2n(psk_len, t);",
          "2840:             OPENSSL_free(s->session->psk_identity);",
          "2841:             s->session->psk_identity = BUF_strdup(identity);",
          "2842:             if (s->session->psk_identity == NULL) {",
          "2843:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2844:                        ERR_R_MALLOC_FAILURE);",
          "2845:                 goto psk_err;",
          "2846:             }",
          "2848:             s2n(identity_len, p);",
          "2849:             memcpy(p, identity, identity_len);",
          "2850:             n = 2 + identity_len;",
          "2851:             psk_err = 0;",
          "2852:  psk_err:",
          "2853:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2854:             if (psk_err != 0) {",
          "2855:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2856:                 goto err;",
          "2857:             }",
          "2858:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2863:             goto err;",
          "2864:         }",
          "2866:         if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_KEY_EXCHANGE, n)) {",
          "2867:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2868:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2864: #ifndef OPENSSL_NO_PSK",
          "2865:         n += pskhdrlen;",
          "2866: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2876:     n = ssl_do_write(s);",
          "2877: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "2879:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "",
          "[Added Lines]",
          "2881:     if (alg_k & SSL_kSRP) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2900:             pms = s->s3->tmp.pms;",
          "2901:             pmslen = s->s3->tmp.pmslen;",
          "2902:         }",
          "2904:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2905:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2906:             goto err;",
          "",
          "[Removed Lines]",
          "2903:         if (pms == NULL) {",
          "",
          "[Added Lines]",
          "2905:         if (pms == NULL && !(alg_k & SSL_kPSK)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2923:     OPENSSL_free(encodedPoint);",
          "2924:     EC_KEY_free(clnt_ecdh);",
          "2925:     EVP_PKEY_free(srvr_pub_pkey);",
          "2926: #endif",
          "2927:     s->state = SSL_ST_ERR;",
          "2928:     return (-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2928: #endif",
          "2929: #ifndef OPENSSL_NO_PSK",
          "2930:     OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);",
          "2931:     s->s3->tmp.psk = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3261:     }",
          "3262: #endif",
          "3263: #ifndef OPENSSL_NO_RSA",
          "3265:         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&",
          "3266:             !has_bits(i, EVP_PK_RSA | EVP_PKT_ENC)) {",
          "3267:             SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,",
          "",
          "[Removed Lines]",
          "3264:     if (alg_k & SSL_kRSA) {",
          "",
          "[Added Lines]",
          "3270:     if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bd16463b84efb13ce5fb35add284e284b0fd819",
      "candidate_info": {
        "commit_hash": "4bd16463b84efb13ce5fb35add284e284b0fd819",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4bd16463b84efb13ce5fb35add284e284b0fd819",
        "files": [
          "ssl/packet_locl.h",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/t1_lib.c",
          "test/packettest.c"
        ],
        "message": "Remove PACKET_(get|goto)_bookmark\n\nThe bookmark API results in a lot of boilerplate error checking that can\nbe much more easily achieved with a simple struct copy. It also lays the\npath for removing the third PACKET field.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/packet_locl.h||ssl/packet_locl.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "test/packettest.c||test/packettest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/packet_locl.h||ssl/packet_locl.h": [
          "File: ssl/packet_locl.h -> ssl/packet_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     return 1;",
          "422: }",
          "",
          "[Removed Lines]",
          "425: __owur static inline int PACKET_get_bookmark(const PACKET *pkt, size_t *bm)",
          "426: {",
          "429:     return 1;",
          "430: }",
          "433: __owur static inline int PACKET_goto_bookmark(PACKET *pkt, size_t bm)",
          "434: {",
          "435:     if (bm > (size_t)(pkt->end - pkt->start))",
          "436:         return 0;",
          "438:     pkt->curr = pkt->start + bm;",
          "440:     return 1;",
          "441: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:     if (s->version >= TLS1_VERSION && s->tls_session_secret_cb &&",
          "1103:         s->session->tlsext_tick) {",
          "1104:         SSL_CIPHER *pref_cipher = NULL;",
          "1109:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "1110:             al = SSL_AD_DECODE_ERROR;",
          "1111:             goto f_err;",
          "",
          "[Removed Lines]",
          "1105:         size_t bookm;",
          "1106:         if (!PACKET_get_bookmark(&pkt, &bookm)",
          "1107:                 || !PACKET_forward(&pkt, j)",
          "1108:                 || !PACKET_get_bytes(&pkt, &cipherchars, ciphercharlen)) {",
          "",
          "[Added Lines]",
          "1105:         PACKET bookmark = pkt;",
          "1106:         if (!PACKET_forward(&pkt, j)",
          "1107:             || !PACKET_get_bytes(&pkt, &cipherchars, ciphercharlen)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1122:             al = SSL_AD_INTERNAL_ERROR;",
          "1123:             goto f_err;",
          "1124:         }",
          "1130:     }",
          "",
          "[Removed Lines]",
          "1125:         if (!PACKET_goto_bookmark(&pkt, bookm)) {",
          "1126:             SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1127:             al = SSL_AD_INTERNAL_ERROR;",
          "1128:             goto f_err;",
          "1129:         }",
          "",
          "[Added Lines]",
          "1124:         pkt = bookmark;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462:     int curve_nid = 0;",
          "1463:     unsigned int encoded_pt_len = 0;",
          "1464: #endif",
          "1466:     unsigned char *data, *param;",
          "1469:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1465:     PACKET pkt;",
          "1467:     size_t startparam, endparam;",
          "",
          "[Added Lines]",
          "1460:     PACKET pkt, save_param_start;",
          "1462:     size_t param_len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1496:         return (1);",
          "1497:     }",
          "1501:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1502:             al = SSL_AD_INTERNAL_ERROR;",
          "1503:             goto f_err;",
          "1504:     }",
          "1506: #ifndef OPENSSL_NO_RSA",
          "1507:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "1499:     if (!PACKET_buf_init(&pkt, s->init_msg, n)",
          "1500:             || !PACKET_get_bookmark(&pkt, &startparam)) {",
          "",
          "[Added Lines]",
          "1494:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1499:     save_param_start = pkt;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1894:     }",
          "1903:     if (pkey != NULL) {",
          "",
          "[Removed Lines]",
          "1897:     if (!PACKET_get_bookmark(&pkt, &endparam)) {",
          "1898:         SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1899:         goto f_err;",
          "1900:     }",
          "",
          "[Added Lines]",
          "1896:     param_len = PACKET_remaining(&save_param_start) - PACKET_remaining(&pkt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1939:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1940:             goto f_err;",
          "1941:         }",
          "1944:             al = SSL_AD_INTERNAL_ERROR;",
          "1945:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1946:             goto f_err;",
          "",
          "[Removed Lines]",
          "1942:         if (!PACKET_goto_bookmark(&pkt, startparam)",
          "1943:                 || !PACKET_get_bytes(&pkt, &param, endparam - startparam)) {",
          "",
          "[Added Lines]",
          "1938:         pkt = save_param_start;",
          "1939:         if (!PACKET_get_bytes(&pkt, &param, param_len)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1960:                                  SSL3_RANDOM_SIZE);",
          "1961:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1962:                                  SSL3_RANDOM_SIZE);",
          "1964:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "1965:                 q += size;",
          "1966:                 j += size;",
          "",
          "[Removed Lines]",
          "1963:                 EVP_DigestUpdate(&md_ctx, param, endparam - startparam);",
          "",
          "[Added Lines]",
          "1959:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1986:                              SSL3_RANDOM_SIZE);",
          "1987:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1988:                              SSL3_RANDOM_SIZE);",
          "1990:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "1992:                 al = SSL_AD_DECRYPT_ERROR;",
          "",
          "[Removed Lines]",
          "1989:             EVP_VerifyUpdate(&md_ctx, param, endparam - startparam);",
          "",
          "[Added Lines]",
          "1985:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2481:     if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "2482:         int idx = -1;",
          "2483:         EVP_PKEY *skey = NULL;",
          "2485:         unsigned char shared[(OPENSSL_DH_MAX_MODULUS_BITS + 7) / 8];",
          "2492:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "2493:             if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "2494:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "",
          "[Removed Lines]",
          "2484:         size_t bookm;",
          "2487:         if (!PACKET_get_bookmark(&pkt, &bookm)) {",
          "2488:             al = SSL_AD_INTERNAL_ERROR;",
          "2489:             SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2490:             goto f_err;",
          "2491:         }",
          "",
          "[Added Lines]",
          "2484:         PACKET bookmark = pkt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2504:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "2505:                 goto err;",
          "2506:             } else {",
          "2513:                 i = PACKET_remaining(&pkt);",
          "2514:             }",
          "2515:         }",
          "",
          "[Removed Lines]",
          "2507:                 if (!PACKET_goto_bookmark(&pkt, bookm)) {",
          "2508:                     al = SSL_AD_INTERNAL_ERROR;",
          "2509:                     SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,",
          "2510:                            ERR_R_INTERNAL_ERROR);",
          "2511:                     goto f_err;",
          "2512:                 }",
          "",
          "[Added Lines]",
          "2502:                 pkt = bookmark;",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2934:                         int len, SSL_SESSION **ret)",
          "2935: {",
          "2936:     unsigned int i;",
          "2938:     int retv = -1;",
          "",
          "[Removed Lines]",
          "2937:     size_t bookmark = 0;",
          "",
          "[Added Lines]",
          "2937:     PACKET bookmark = *pkt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2949:     if ((s->version <= SSL3_VERSION))",
          "2950:         return 0;",
          "2957:     if (SSL_IS_DTLS(s)) {",
          "2958:         if (!PACKET_get_1(pkt, &i)",
          "",
          "[Removed Lines]",
          "2952:     if (!PACKET_get_bookmark(pkt, &bookmark)) {",
          "2953:         return -1;",
          "2954:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3043:     }",
          "3044:     retv = 0;",
          "3045: end:",
          "3048:     return retv;",
          "3049: }",
          "",
          "[Removed Lines]",
          "3046:     if (!PACKET_goto_bookmark(pkt, bookmark))",
          "3047:         return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/packettest.c||test/packettest.c": [
          "File: test/packettest.c -> test/packettest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define BUF_LEN 255",
          "65: {",
          "71:         fprintf(stderr, \"test_PACKET_remaining() failed\\n\");",
          "72:         return 0;",
          "73:     }",
          "",
          "[Removed Lines]",
          "64: static int test_PACKET_remaining(PACKET *pkt)",
          "66:     if (        PACKET_remaining(pkt) != BUF_LEN",
          "67:             || !PACKET_forward(pkt, BUF_LEN - 1)",
          "68:             ||  PACKET_remaining(pkt) != 1",
          "69:             || !PACKET_forward(pkt, 1)",
          "70:             ||  PACKET_remaining(pkt) != 0) {",
          "",
          "[Added Lines]",
          "64: static int test_PACKET_remaining(unsigned char buf[BUF_LEN])",
          "66:     PACKET pkt;",
          "68:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "69:             ||  PACKET_remaining(&pkt) != BUF_LEN",
          "70:             || !PACKET_forward(&pkt, BUF_LEN - 1)",
          "71:             ||  PACKET_remaining(&pkt) != 1",
          "72:             || !PACKET_forward(&pkt, 1)",
          "73:             ||  PACKET_remaining(&pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     return 1;",
          "76: }",
          "79: {",
          "80:     unsigned int i;",
          "84:             ||  i != 0x02",
          "87:             ||  i != 0xfe",
          "89:         fprintf(stderr, \"test_PACKET_get_1() failed\\n\");",
          "90:         return 0;",
          "91:     }",
          "",
          "[Removed Lines]",
          "78: static int test_PACKET_get_1(PACKET *pkt, size_t start)",
          "82:     if (       !PACKET_goto_bookmark(pkt, start)",
          "83:             || !PACKET_get_1(pkt, &i)",
          "85:             || !PACKET_forward(pkt, BUF_LEN - 2)",
          "86:             || !PACKET_get_1(pkt, &i)",
          "88:             ||  PACKET_get_1(pkt, &i)) {",
          "",
          "[Added Lines]",
          "81: static int test_PACKET_get_1(unsigned char buf[BUF_LEN])",
          "84:     PACKET pkt;",
          "86:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "87:             || !PACKET_get_1(&pkt, &i)",
          "89:             || !PACKET_forward(&pkt, BUF_LEN - 2)",
          "90:             || !PACKET_get_1(&pkt, &i)",
          "92:             ||  PACKET_get_1(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     return 1;",
          "94: }",
          "97: {",
          "98:     unsigned long i;",
          "102:             ||  i != 0x08060402UL",
          "105:             ||  i != 0xfefcfaf8UL",
          "107:         fprintf(stderr, \"test_PACKET_get_4() failed\\n\");",
          "108:         return 0;",
          "109:     }",
          "",
          "[Removed Lines]",
          "96: static int test_PACKET_get_4(PACKET *pkt, size_t start)",
          "100:     if (       !PACKET_goto_bookmark(pkt, start)",
          "101:             || !PACKET_get_4(pkt, &i)",
          "103:             || !PACKET_forward(pkt, BUF_LEN - 8)",
          "104:             || !PACKET_get_4(pkt, &i)",
          "106:             ||  PACKET_get_4(pkt, &i)) {",
          "",
          "[Added Lines]",
          "100: static int test_PACKET_get_4(unsigned char buf[BUF_LEN])",
          "103:     PACKET pkt;",
          "105:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "106:             || !PACKET_get_4(&pkt, &i)",
          "108:             || !PACKET_forward(&pkt, BUF_LEN - 8)",
          "109:             || !PACKET_get_4(&pkt, &i)",
          "111:             ||  PACKET_get_4(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:     return 1;",
          "112: }",
          "115: {",
          "116:     unsigned int i;",
          "120:             ||  i != 0x0204",
          "123:             ||  i != 0xfcfe",
          "125:         fprintf(stderr, \"test_PACKET_get_net_2() failed\\n\");",
          "126:         return 0;",
          "127:     }",
          "",
          "[Removed Lines]",
          "114: static int test_PACKET_get_net_2(PACKET *pkt, size_t start)",
          "118:     if (       !PACKET_goto_bookmark(pkt, start)",
          "119:             || !PACKET_get_net_2(pkt, &i)",
          "121:             || !PACKET_forward(pkt, BUF_LEN - 4)",
          "122:             || !PACKET_get_net_2(pkt, &i)",
          "124:             ||  PACKET_get_net_2(pkt, &i)) {",
          "",
          "[Added Lines]",
          "119: static int test_PACKET_get_net_2(unsigned char buf[BUF_LEN])",
          "122:     PACKET pkt;",
          "124:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "125:             || !PACKET_get_net_2(&pkt, &i)",
          "127:             || !PACKET_forward(&pkt, BUF_LEN - 4)",
          "128:             || !PACKET_get_net_2(&pkt, &i)",
          "130:             ||  PACKET_get_net_2(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:     return 1;",
          "130: }",
          "133: {",
          "134:     unsigned long i;",
          "138:             ||  i != 0x020406UL",
          "141:             ||  i != 0xfafcfeUL",
          "143:         fprintf(stderr, \"test_PACKET_get_net_3() failed\\n\");",
          "144:         return 0;",
          "145:     }",
          "",
          "[Removed Lines]",
          "132: static int test_PACKET_get_net_3(PACKET *pkt, size_t start)",
          "136:     if (       !PACKET_goto_bookmark(pkt, start)",
          "137:             || !PACKET_get_net_3(pkt, &i)",
          "139:             || !PACKET_forward(pkt, BUF_LEN - 6)",
          "140:             || !PACKET_get_net_3(pkt, &i)",
          "142:             ||  PACKET_get_net_3(pkt, &i)) {",
          "",
          "[Added Lines]",
          "138: static int test_PACKET_get_net_3(unsigned char buf[BUF_LEN])",
          "141:     PACKET pkt;",
          "143:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "144:             || !PACKET_get_net_3(&pkt, &i)",
          "146:             || !PACKET_forward(&pkt, BUF_LEN - 6)",
          "147:             || !PACKET_get_net_3(&pkt, &i)",
          "149:             ||  PACKET_get_net_3(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:     return 1;",
          "148: }",
          "151: {",
          "152:     unsigned long i;",
          "156:             ||  i != 0x02040608UL",
          "159:             ||  i != 0xf8fafcfeUL",
          "161:         fprintf(stderr, \"test_PACKET_get_net_4() failed\\n\");",
          "162:         return 0;",
          "163:     }",
          "",
          "[Removed Lines]",
          "150: static int test_PACKET_get_net_4(PACKET *pkt, size_t start)",
          "154:     if (       !PACKET_goto_bookmark(pkt, start)",
          "155:             || !PACKET_get_net_4(pkt, &i)",
          "157:             || !PACKET_forward(pkt, BUF_LEN - 8)",
          "158:             || !PACKET_get_net_4(pkt, &i)",
          "160:             ||  PACKET_get_net_4(pkt, &i)) {",
          "",
          "[Added Lines]",
          "157: static int test_PACKET_get_net_4(unsigned char buf[BUF_LEN])",
          "160:     PACKET pkt;",
          "162:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "163:             || !PACKET_get_net_4(&pkt, &i)",
          "165:             || !PACKET_forward(&pkt, BUF_LEN - 8)",
          "166:             || !PACKET_get_net_4(&pkt, &i)",
          "168:             ||  PACKET_get_net_4(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "165:     return 1;",
          "166: }",
          "169: {",
          "171:     unsigned long i;",
          "175:             || !PACKET_get_net_4(&subpkt, &i)",
          "176:             ||  i != 0x02040608UL",
          "177:             ||  PACKET_remaining(&subpkt)",
          "180:             || !PACKET_get_net_4(&subpkt, &i)",
          "181:             ||  i != 0xf8fafcfeUL",
          "182:             ||  PACKET_remaining(&subpkt)",
          "184:         fprintf(stderr, \"test_PACKET_get_sub_packet() failed\\n\");",
          "185:         return 0;",
          "186:     }",
          "",
          "[Removed Lines]",
          "168: static int test_PACKET_get_sub_packet(PACKET *pkt, size_t start)",
          "170:     PACKET subpkt;",
          "173:     if (       !PACKET_goto_bookmark(pkt, start)",
          "174:             || !PACKET_get_sub_packet(pkt, &subpkt, 4)",
          "178:             || !PACKET_forward(pkt, BUF_LEN - 8)",
          "179:             || !PACKET_get_sub_packet(pkt, &subpkt, 4)",
          "183:             ||  PACKET_get_sub_packet(pkt, &subpkt, 4)) {",
          "",
          "[Added Lines]",
          "176: static int test_PACKET_get_sub_packet(unsigned char buf[BUF_LEN])",
          "178:     PACKET pkt, subpkt;",
          "181:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "182:             || !PACKET_get_sub_packet(&pkt, &subpkt, 4)",
          "186:             || !PACKET_forward(&pkt, BUF_LEN - 8)",
          "187:             || !PACKET_get_sub_packet(&pkt, &subpkt, 4)",
          "191:             ||  PACKET_get_sub_packet(&pkt, &subpkt, 4)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "188:     return 1;",
          "189: }",
          "192: {",
          "193:     unsigned char *bytes;",
          "197:             ||  bytes[0] != 2 || bytes[1] != 4",
          "198:             ||  bytes[2] != 6 || bytes[3] != 8",
          "202:             ||  bytes[0] != 0xf8 || bytes[1] != 0xfa",
          "203:             ||  bytes[2] != 0xfc || bytes[3] != 0xfe",
          "205:         fprintf(stderr, \"test_PACKET_get_bytes() failed\\n\");",
          "206:         return 0;",
          "207:     }",
          "",
          "[Removed Lines]",
          "191: static int test_PACKET_get_bytes(PACKET *pkt, size_t start)",
          "195:     if (       !PACKET_goto_bookmark(pkt, start)",
          "196:             || !PACKET_get_bytes(pkt, &bytes, 4)",
          "199:             ||  PACKET_remaining(pkt) != BUF_LEN -4",
          "200:             || !PACKET_forward(pkt, BUF_LEN - 8)",
          "201:             || !PACKET_get_bytes(pkt, &bytes, 4)",
          "204:             ||  PACKET_remaining(pkt)) {",
          "",
          "[Added Lines]",
          "199: static int test_PACKET_get_bytes(unsigned char buf[BUF_LEN])",
          "202:     PACKET pkt;",
          "204:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "205:             || !PACKET_get_bytes(&pkt, &bytes, 4)",
          "208:             ||  PACKET_remaining(&pkt) != BUF_LEN -4",
          "209:             || !PACKET_forward(&pkt, BUF_LEN - 8)",
          "210:             || !PACKET_get_bytes(&pkt, &bytes, 4)",
          "213:             ||  PACKET_remaining(&pkt)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "209:     return 1;",
          "210: }",
          "213: {",
          "214:     unsigned char bytes[4];",
          "218:             ||  bytes[0] != 2 || bytes[1] != 4",
          "219:             ||  bytes[2] != 6 || bytes[3] != 8",
          "223:             ||  bytes[0] != 0xf8 || bytes[1] != 0xfa",
          "224:             ||  bytes[2] != 0xfc || bytes[3] != 0xfe",
          "226:         fprintf(stderr, \"test_PACKET_copy_bytes() failed\\n\");",
          "227:         return 0;",
          "228:     }",
          "",
          "[Removed Lines]",
          "212: static int test_PACKET_copy_bytes(PACKET *pkt, size_t start)",
          "216:     if (       !PACKET_goto_bookmark(pkt, start)",
          "217:             || !PACKET_copy_bytes(pkt, bytes, 4)",
          "220:             ||  PACKET_remaining(pkt) != BUF_LEN - 4",
          "221:             || !PACKET_forward(pkt, BUF_LEN - 8)",
          "222:             || !PACKET_copy_bytes(pkt, bytes, 4)",
          "225:             ||  PACKET_remaining(pkt)) {",
          "",
          "[Added Lines]",
          "221: static int test_PACKET_copy_bytes(unsigned char buf[BUF_LEN])",
          "224:     PACKET pkt;",
          "226:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "227:             || !PACKET_copy_bytes(&pkt, bytes, 4)",
          "230:             ||  PACKET_remaining(&pkt) != BUF_LEN - 4",
          "231:             || !PACKET_forward(&pkt, BUF_LEN - 8)",
          "232:             || !PACKET_copy_bytes(&pkt, bytes, 4)",
          "235:             ||  PACKET_remaining(&pkt)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "230:     return 1;",
          "231: }",
          "234: {",
          "235:     unsigned char *data = NULL;",
          "236:     size_t len;",
          "239:             ||  len != BUF_LEN",
          "243:             ||  len != BUF_LEN - 10",
          "247:             ||  len != BUF_LEN - 9",
          "249:         fprintf(stderr, \"test_PACKET_memdup() failed\\n\");",
          "250:         OPENSSL_free(data);",
          "251:         return 0;",
          "",
          "[Removed Lines]",
          "233: static int test_PACKET_memdup(PACKET *pkt, size_t start)",
          "237:     if (       !PACKET_goto_bookmark(pkt, start)",
          "238:             || !PACKET_memdup(pkt, &data, &len)",
          "240:             ||  memcmp(data, PACKET_data(pkt), len)",
          "241:             || !PACKET_forward(pkt, 10)",
          "242:             || !PACKET_memdup(pkt, &data, &len)",
          "244:             ||  memcmp(data, PACKET_data(pkt), len)",
          "245:             || !PACKET_back(pkt, 1)",
          "246:             || !PACKET_memdup(pkt, &data, &len)",
          "248:                ||  memcmp(data, PACKET_data(pkt), len)) {",
          "",
          "[Added Lines]",
          "243: static int test_PACKET_memdup(unsigned char buf[BUF_LEN])",
          "247:     PACKET pkt;",
          "249:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "250:             || !PACKET_memdup(&pkt, &data, &len)",
          "252:             ||  memcmp(data, PACKET_data(&pkt), len)",
          "253:             || !PACKET_forward(&pkt, 10)",
          "254:             || !PACKET_memdup(&pkt, &data, &len)",
          "256:             ||  memcmp(data, PACKET_data(&pkt), len)",
          "257:             || !PACKET_back(&pkt, 1)",
          "258:             || !PACKET_memdup(&pkt, &data, &len)",
          "260:                ||  memcmp(data, PACKET_data(&pkt), len)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "282:     return 1;",
          "283: }",
          "286: {",
          "287:     unsigned char *byte;",
          "294:             ||  byte[0] != 4",
          "304:         fprintf(stderr, \"test_PACKET_move_funcs() failed\\n\");",
          "305:         return 0;",
          "306:     }",
          "",
          "[Removed Lines]",
          "285: static int test_PACKET_move_funcs(PACKET *pkt, size_t start)",
          "288:     size_t bm;",
          "290:     if (       !PACKET_goto_bookmark(pkt, start)",
          "291:             ||  PACKET_back(pkt, 1)",
          "292:             || !PACKET_forward(pkt, 1)",
          "293:             || !PACKET_get_bytes(pkt, &byte, 1)",
          "295:             || !PACKET_get_bookmark(pkt, &bm)",
          "296:             || !PACKET_forward(pkt, BUF_LEN - 2)",
          "297:             ||  PACKET_forward(pkt, 1)",
          "298:             || !PACKET_back(pkt, 1)",
          "299:             || !PACKET_get_bytes(pkt, &byte, 1)",
          "300:             ||  byte[0] != 0xfe",
          "301:             || !PACKET_goto_bookmark(pkt, bm)",
          "302:             || !PACKET_get_bytes(pkt, &byte, 1)",
          "303:             ||  byte[0] != 6) {",
          "",
          "[Added Lines]",
          "297: static int test_PACKET_move_funcs(unsigned char buf[BUF_LEN])",
          "300:     PACKET pkt;",
          "302:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "303:             ||  PACKET_back(&pkt, 1)",
          "304:             || !PACKET_forward(&pkt, 1)",
          "305:             || !PACKET_get_bytes(&pkt, &byte, 1)",
          "307:             || !PACKET_forward(&pkt, BUF_LEN - 2)",
          "308:             ||  PACKET_forward(&pkt, 1)",
          "309:             || !PACKET_back(&pkt, 1)",
          "310:             || !PACKET_get_bytes(&pkt, &byte, 1)",
          "311:             ||  byte[0] != 0xfe) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "416: {",
          "417:     unsigned char buf[BUF_LEN];",
          "418:     unsigned int i;",
          "422:     for (i=1; i<=BUF_LEN; i++) {",
          "423:         buf[i-1] = (i * 2) & 0xff;",
          "424:     }",
          "425:     i = 0;",
          "433:     if (       !test_PACKET_buf_init()",
          "444:             || !test_PACKET_strndup()",
          "446:             || !test_PACKET_get_length_prefixed_1()",
          "447:             || !test_PACKET_get_length_prefixed_2()",
          "448:             || !test_PACKET_get_length_prefixed_3()) {",
          "",
          "[Removed Lines]",
          "419:     size_t start = 0;",
          "420:     PACKET pkt;",
          "427:     if (       !PACKET_buf_init(&pkt, buf, BUF_LEN)",
          "428:             || !PACKET_get_bookmark(&pkt, &start)) {",
          "429:         fprintf(stderr, \"setup failed\\n\");",
          "430:         return 0;",
          "431:     }",
          "434:             || !test_PACKET_remaining(&pkt)",
          "435:             || !test_PACKET_get_1(&pkt, start)",
          "436:             || !test_PACKET_get_4(&pkt, start)",
          "437:             || !test_PACKET_get_net_2(&pkt, start)",
          "438:             || !test_PACKET_get_net_3(&pkt, start)",
          "439:             || !test_PACKET_get_net_4(&pkt, start)",
          "440:             || !test_PACKET_get_sub_packet(&pkt, start)",
          "441:             || !test_PACKET_get_bytes(&pkt, start)",
          "442:             || !test_PACKET_copy_bytes(&pkt, start)",
          "443:             || !test_PACKET_memdup(&pkt, start)",
          "445:             || !test_PACKET_move_funcs(&pkt, start)",
          "",
          "[Added Lines]",
          "434:             || !test_PACKET_remaining(buf)",
          "435:             || !test_PACKET_get_1(buf)",
          "436:             || !test_PACKET_get_4(buf)",
          "437:             || !test_PACKET_get_net_2(buf)",
          "438:             || !test_PACKET_get_net_3(buf)",
          "439:             || !test_PACKET_get_net_4(buf)",
          "440:             || !test_PACKET_get_sub_packet(buf)",
          "441:             || !test_PACKET_get_bytes(buf)",
          "442:             || !test_PACKET_copy_bytes(buf)",
          "443:             || !test_PACKET_memdup(buf)",
          "445:             || !test_PACKET_move_funcs(buf)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "329428708d6836676f6a7078aa2e2a1db9a1addb",
      "candidate_info": {
        "commit_hash": "329428708d6836676f6a7078aa2e2a1db9a1addb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/329428708d6836676f6a7078aa2e2a1db9a1addb",
        "files": [
          "include/openssl/ssl.h",
          "ssl/packet_locl.h",
          "ssl/s3_clnt.c",
          "ssl/ssl_err.c"
        ],
        "message": "PACKET: simplify ServerKeyExchange parsing\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/packet_locl.h||ssl/packet_locl.h",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_err.c||ssl/ssl_err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115: # define SSL_R_BAD_DH_PUB_KEY_VALUE                       393",
          "2116: # define SSL_R_BAD_DH_P_LENGTH                            110",
          "2117: # define SSL_R_BAD_DH_P_VALUE                             395",
          "2118: # define SSL_R_BAD_DIGEST_LENGTH                          111",
          "2119: # define SSL_R_BAD_DSA_SIGNATURE                          112",
          "2120: # define SSL_R_BAD_ECC_CERT                               304",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118: # define SSL_R_BAD_DH_VALUE                               102",
          "",
          "---------------"
        ],
        "ssl/packet_locl.h||ssl/packet_locl.h": [
          "File: ssl/packet_locl.h -> ssl/packet_locl.h"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434: #endif",
          "1435:     EVP_MD_CTX md_ctx;",
          "1436:     int al, j, verify_ret, ok;",
          "1438:     long n, alg_k, alg_a;",
          "1439:     EVP_PKEY *pkey = NULL;",
          "1440:     const EVP_MD *md = NULL;",
          "",
          "[Removed Lines]",
          "1437:     unsigned int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1449:     BN_CTX *bn_ctx = NULL;",
          "1450:     EC_POINT *srvr_ecpoint = NULL;",
          "1451:     int curve_nid = 0;",
          "1453: #endif",
          "1458:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1452:     unsigned int encoded_pt_len = 0;",
          "1454:     PACKET pkt, save_param_start;",
          "1455:     unsigned char *data, *param;",
          "1456:     size_t param_len;",
          "",
          "[Added Lines]",
          "1452:     PACKET pkt, save_param_start, signature;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512: #ifndef OPENSSL_NO_PSK",
          "1514:     if (alg_k & SSL_PSK) {",
          "1518:             goto f_err;",
          "1519:         }",
          "",
          "[Removed Lines]",
          "1516:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1517:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "[Added Lines]",
          "1511:         PACKET psk_identity_hint;",
          "1512:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity_hint)) {",
          "1513:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1528:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1529:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "1530:             goto f_err;",
          "1531:         }",
          "1554:         }",
          "1555:     }",
          "",
          "[Removed Lines]",
          "1527:         if (i > PSK_MAX_IDENTITY_LEN) {",
          "1532:         if (PACKET_remaining(&pkt) < i) {",
          "1533:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1534:                    SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);",
          "1535:             goto f_err;",
          "1536:         }",
          "1538:         OPENSSL_free(s->session->psk_identity_hint);",
          "1539:         if (i != 0) {",
          "1540:             unsigned char *hint = NULL;",
          "1542:             if (!PACKET_get_bytes(&pkt, &hint, i)) {",
          "1543:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1544:                 goto f_err;",
          "1545:             }",
          "1546:             s->session->psk_identity_hint = BUF_strndup((char *)hint, i);",
          "1547:             if (s->session->psk_identity_hint == NULL) {",
          "1548:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1549:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1550:                 goto f_err;",
          "1551:             }",
          "1552:         } else {",
          "1553:             s->session->psk_identity_hint = NULL;",
          "",
          "[Added Lines]",
          "1523:         if (PACKET_remaining(&psk_identity_hint) > PSK_MAX_IDENTITY_LEN) {",
          "1529:         if (!PACKET_strndup(&psk_identity_hint,",
          "1530:                             &s->session->psk_identity_hint)) {",
          "1531:             al = SSL_AD_INTERNAL_ERROR;",
          "1532:             goto f_err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1561: #ifndef OPENSSL_NO_SRP",
          "1562:     if (alg_k & SSL_kSRP) {",
          "1585:             goto f_err;",
          "1586:         }",
          "1619:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1620:             goto err;",
          "1621:         }",
          "",
          "[Removed Lines]",
          "1563:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1564:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1565:             goto f_err;",
          "1566:         }",
          "1568:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1569:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_N_LENGTH);",
          "1570:             goto f_err;",
          "1571:         }",
          "1573:         if ((s->srp_ctx.N = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1574:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1575:             goto err;",
          "1576:         }",
          "1578:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1579:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1580:             goto f_err;",
          "1581:         }",
          "1583:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1584:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_G_LENGTH);",
          "1588:         if ((s->srp_ctx.g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1590:             goto err;",
          "1591:         }",
          "1593:         if (!PACKET_get_1(&pkt, &i)) {",
          "1594:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1595:             goto f_err;",
          "1596:         }",
          "1598:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1599:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_S_LENGTH);",
          "1600:             goto f_err;",
          "1601:         }",
          "1603:         if ((s->srp_ctx.s = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1604:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1605:             goto err;",
          "1606:         }",
          "1608:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1609:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1610:             goto f_err;",
          "1611:         }",
          "1613:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1614:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_B_LENGTH);",
          "1615:             goto f_err;",
          "1616:         }",
          "1618:         if ((s->srp_ctx.B = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "[Added Lines]",
          "1542:         PACKET prime, generator, salt, server_pub;",
          "1543:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1544:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1545:             || !PACKET_get_length_prefixed_1(&pkt, &salt)",
          "1546:             || !PACKET_get_length_prefixed_2(&pkt, &server_pub)) {",
          "1547:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1551:         if ((s->srp_ctx.N =",
          "1552:              BN_bin2bn(PACKET_data(&prime),",
          "1553:                        PACKET_remaining(&prime), NULL)) == NULL",
          "1554:             || (s->srp_ctx.g =",
          "1555:                 BN_bin2bn(PACKET_data(&generator),",
          "1556:                           PACKET_remaining(&generator), NULL)) == NULL",
          "1557:             || (s->srp_ctx.s =",
          "1558:                 BN_bin2bn(PACKET_data(&salt),",
          "1559:                           PACKET_remaining(&salt), NULL)) == NULL",
          "1560:             || (s->srp_ctx.B =",
          "1561:                 BN_bin2bn(PACKET_data(&server_pub),",
          "1562:                           PACKET_remaining(&server_pub), NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1633: #ifndef OPENSSL_NO_RSA",
          "1634:     if (alg_k & SSL_kRSA) {",
          "1636:         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher)) {",
          "1637:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1639:             goto f_err;",
          "1640:         }",
          "1648:             goto f_err;",
          "1649:         }",
          "1658:             goto err;",
          "1659:         }",
          "1672:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1673:             goto err;",
          "1674:         }",
          "",
          "[Removed Lines]",
          "1641:         if ((rsa = RSA_new()) == NULL) {",
          "1642:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1643:             goto err;",
          "1644:         }",
          "1646:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1647:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1651:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1652:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_MODULUS_LENGTH);",
          "1653:             goto f_err;",
          "1654:         }",
          "1656:         if ((rsa->n = BN_bin2bn(data, i, rsa->n)) == NULL) {",
          "1657:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1661:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1662:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1663:             goto f_err;",
          "1664:         }",
          "1666:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1667:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_E_LENGTH);",
          "1668:             goto f_err;",
          "1669:         }",
          "1671:         if ((rsa->e = BN_bin2bn(data, i, rsa->e)) == NULL) {",
          "",
          "[Added Lines]",
          "1579:         PACKET mod, exp;",
          "1587:         if (!PACKET_get_length_prefixed_2(&pkt, &mod)",
          "1588:             || !PACKET_get_length_prefixed_2(&pkt, &exp)) {",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1593:         if ((rsa = RSA_new()) == NULL) {",
          "1594:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1598:         if ((rsa->n = BN_bin2bn(PACKET_data(&mod), PACKET_remaining(&mod),",
          "1599:                                 rsa->n)) == NULL",
          "1600:             || (rsa->e = BN_bin2bn(PACKET_data(&exp), PACKET_remaining(&exp),",
          "1601:                                    rsa->e)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1695: #endif",
          "1696: #ifndef OPENSSL_NO_DH",
          "1697:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1710:             goto f_err;",
          "1711:         }",
          "1715:             goto err;",
          "1716:         }",
          "1734:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1735:             goto err;",
          "1736:         }",
          "1760:             goto f_err;",
          "1761:         }",
          "",
          "[Removed Lines]",
          "1698:         if ((dh = DH_new()) == NULL) {",
          "1699:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1700:             goto err;",
          "1701:         }",
          "1703:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1704:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1705:             goto f_err;",
          "1706:         }",
          "1708:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1709:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_LENGTH);",
          "1713:         if ((dh->p = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1714:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1718:         if (BN_is_zero(dh->p)) {",
          "1719:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1720:             goto f_err;",
          "1721:         }",
          "1723:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1724:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1725:             goto f_err;",
          "1726:         }",
          "1728:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1729:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_LENGTH);",
          "1730:             goto f_err;",
          "1731:         }",
          "1733:         if ((dh->g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1738:         if (BN_is_zero(dh->g)) {",
          "1739:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1740:             goto f_err;",
          "1741:         }",
          "1743:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1744:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1745:             goto f_err;",
          "1746:         }",
          "1748:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1749:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_LENGTH);",
          "1750:             goto f_err;",
          "1751:         }",
          "1753:         if ((dh->pub_key = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1754:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1755:             goto err;",
          "1756:         }",
          "1758:         if (BN_is_zero(dh->pub_key)) {",
          "1759:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "",
          "[Added Lines]",
          "1628:         PACKET prime, generator, pub_key;",
          "1630:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1631:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1632:             || !PACKET_get_length_prefixed_2(&pkt, &pub_key)) {",
          "1633:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1637:         if ((dh = DH_new()) == NULL) {",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1642:         if ((dh->p = BN_bin2bn(PACKET_data(&prime),",
          "1643:                                PACKET_remaining(&prime), NULL)) == NULL",
          "1644:             || (dh->g = BN_bin2bn(PACKET_data(&generator),",
          "1645:                                   PACKET_remaining(&generator), NULL)) == NULL",
          "1646:             || (dh->pub_key =",
          "1647:                 BN_bin2bn(PACKET_data(&pub_key),",
          "1648:                           PACKET_remaining(&pub_key), NULL)) == NULL) {",
          "1653:         if (BN_is_zero(dh->p) || BN_is_zero(dh->g) || BN_is_zero(dh->pub_key)) {",
          "1654:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_VALUE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1778:     else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "1779:         EC_GROUP *ngroup;",
          "1780:         const EC_GROUP *group;",
          "1782:         if ((ecdh = EC_KEY_new()) == NULL) {",
          "1783:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1676:         PACKET encoded_pt;",
          "1677:         unsigned char *ecparams;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1798:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1799:             goto f_err;",
          "1800:         }",
          "",
          "[Removed Lines]",
          "1797:         if (!PACKET_get_bytes(&pkt, &data, 3)) {",
          "",
          "[Added Lines]",
          "1689:         if (!PACKET_get_bytes(&pkt, &ecparams, 3)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1806:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_CURVE);",
          "1807:             goto f_err;",
          "1808:         }",
          "1811:             al = SSL_AD_INTERNAL_ERROR;",
          "1812:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1813:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1805:         if (!tls1_check_curve(s, data, 3)) {",
          "1810:         if ((curve_nid = tls1_ec_curve_id2nid(*(data + 2))) == 0) {",
          "",
          "[Added Lines]",
          "1697:         if (!tls1_check_curve(s, ecparams, 3)) {",
          "1702:         if ((curve_nid = tls1_ec_curve_id2nid(*(ecparams + 2))) == 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1842:             goto err;",
          "1843:         }",
          "1847:             goto f_err;",
          "1848:         }",
          "1853:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_ECPOINT);",
          "1854:             goto f_err;",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1845:         if (!PACKET_get_1(&pkt, &encoded_pt_len)) {",
          "1846:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1850:         if (!PACKET_get_bytes(&pkt, &data, encoded_pt_len) ||",
          "1851:             (EC_POINT_oct2point(group, srvr_ecpoint,",
          "1852:                                 data, encoded_pt_len, bn_ctx) == 0)) {",
          "",
          "[Added Lines]",
          "1737:         if (!PACKET_get_length_prefixed_1(&pkt, &encoded_pt)) {",
          "1738:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1742:         if (EC_POINT_oct2point(group, srvr_ecpoint, PACKET_data(&encoded_pt),",
          "1743:                                PACKET_remaining(&encoded_pt), bn_ctx) == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1883:     }",
          "1893:     if (pkey != NULL) {",
          "1894:         if (SSL_USE_SIGALGS(s)) {",
          "1895:             int rv;",
          "1897:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1898:                 goto f_err;",
          "1899:             }",
          "1901:             if (rv == -1)",
          "1902:                 goto err;",
          "1903:             else if (rv == 0) {",
          "",
          "[Removed Lines]",
          "1890:     param_len = PACKET_remaining(&save_param_start) - PACKET_remaining(&pkt);",
          "1896:             if (!PACKET_get_bytes(&pkt, &data, 2)) {",
          "1900:             rv = tls12_check_peer_sigalg(&md, s, data, pkey);",
          "",
          "[Added Lines]",
          "1779:         PACKET params;",
          "1784:         if (!PACKET_get_sub_packet(&save_param_start, &params,",
          "1785:                                    PACKET_remaining(&save_param_start) -",
          "1786:                                    PACKET_remaining(&pkt))) {",
          "1787:             al = SSL_AD_INTERNAL_ERROR;",
          "1788:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1789:             goto f_err;",
          "1790:         }",
          "1793:             unsigned char *sigalgs;",
          "1795:             if (!PACKET_get_bytes(&pkt, &sigalgs, 2)) {",
          "1799:             rv = tls12_check_peer_sigalg(&md, s, sigalgs, pkey);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1906: #ifdef SSL_DEBUG",
          "1907:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "1908: #endif",
          "1910:             md = EVP_sha1();",
          "1914:             goto f_err;",
          "1915:         }",
          "1916:         j = EVP_PKEY_size(pkey);",
          "",
          "[Removed Lines]",
          "1909:         } else",
          "1912:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1913:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "",
          "[Added Lines]",
          "1808:         } else {",
          "1810:         }",
          "1812:         if (!PACKET_get_length_prefixed_2(&pkt, &signature)",
          "1813:             || PACKET_remaining(&pkt) != 0) {",
          "1814:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1929:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1930:             goto f_err;",
          "1931:         }",
          "1938: #ifndef OPENSSL_NO_RSA",
          "1939:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1940:             int num;",
          "",
          "[Removed Lines]",
          "1925:         if (i > (unsigned int)j",
          "1926:                 || !PACKET_get_bytes(&pkt, &data, i)",
          "1927:                 || PACKET_remaining(&pkt) != 0) {",
          "1932:         pkt = save_param_start;",
          "1933:         if (!PACKET_get_bytes(&pkt, &param, param_len)) {",
          "1934:             al = SSL_AD_INTERNAL_ERROR;",
          "1935:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1936:             goto f_err;",
          "1937:         }",
          "",
          "[Added Lines]",
          "1826:         if (PACKET_remaining(&signature) > (size_t)j) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1950:                                  SSL3_RANDOM_SIZE);",
          "1951:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1952:                                  SSL3_RANDOM_SIZE);",
          "1954:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "1955:                 q += size;",
          "1956:                 j += size;",
          "1957:             }",
          "1958:             verify_ret =",
          "1960:             if (verify_ret < 0) {",
          "1961:                 al = SSL_AD_DECRYPT_ERROR;",
          "1962:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "",
          "[Removed Lines]",
          "1953:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "1959:                 RSA_verify(NID_md5_sha1, md_buf, j, data, i, pkey->pkey.rsa);",
          "",
          "[Added Lines]",
          "1846:                 EVP_DigestUpdate(&md_ctx, PACKET_data(&params),",
          "1847:                                  PACKET_remaining(&params));",
          "1853:                 RSA_verify(NID_md5_sha1, md_buf, j, PACKET_data(&signature),",
          "1854:                            PACKET_remaining(&signature), pkey->pkey.rsa);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1976:                              SSL3_RANDOM_SIZE);",
          "1977:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1978:                              SSL3_RANDOM_SIZE);",
          "1982:                 al = SSL_AD_DECRYPT_ERROR;",
          "1983:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "1979:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "1980:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1874:             EVP_VerifyUpdate(&md_ctx, PACKET_data(&params),",
          "1875:                              PACKET_remaining(&params));",
          "1876:             if (EVP_VerifyFinal(&md_ctx, PACKET_data(&signature),",
          "1877:                                 PACKET_remaining(&signature), pkey) <= 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     {ERR_REASON(SSL_R_BAD_DH_PUB_KEY_VALUE), \"bad dh pub key value\"},",
          "352:     {ERR_REASON(SSL_R_BAD_DH_P_LENGTH), \"bad dh p length\"},",
          "353:     {ERR_REASON(SSL_R_BAD_DH_P_VALUE), \"bad dh p value\"},",
          "354:     {ERR_REASON(SSL_R_BAD_DIGEST_LENGTH), \"bad digest length\"},",
          "355:     {ERR_REASON(SSL_R_BAD_DSA_SIGNATURE), \"bad dsa signature\"},",
          "356:     {ERR_REASON(SSL_R_BAD_ECC_CERT), \"bad ecc cert\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:     {ERR_REASON(SSL_R_BAD_DH_VALUE), \"bad dh value\"},",
          "",
          "---------------"
        ]
      }
    }
  ]
}