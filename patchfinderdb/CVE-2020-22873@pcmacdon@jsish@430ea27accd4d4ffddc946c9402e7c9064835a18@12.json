{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
      "candidate_info": {
        "commit_hash": "49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/49ddaf521a95690ba7ad1c98887996e316eb25d1",
        "files": [
          "lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi",
          "lib/autoload.jsi",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "tests/interp2.jsi",
          "tests/prob/bind.js",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.13\": Add Jsi_TableObj.  Fix several crash bugs.\n\nFossilOrigin-Name: 2c4f7caa63c06173e976adb447c171c662a4b943a26cb7eb8d7b206fe9a2d6b8",
        "before_after_code_files": [
          "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tests/interp2.jsi||tests/interp2.jsi",
          "tests/prob/bind.js||tests/prob/bind.js",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> lib/Jsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:             }",
          "134:             if (!ver || ver === '') ver = 'tip';",
          "135:             if (!self.quiet && ver !== '')",
          "137:             info = dosplit(self.exec('fossil info \"' + ver + '\" ' + sfx), info);",
          "138:             info.mntTag = ver;",
          "139:             if (ver.match(/^ver-[0-9]+\\.[0-9]+$/))",
          "",
          "[Removed Lines]",
          "136:                 puts('mounting version:', ver);",
          "",
          "[Added Lines]",
          "136:                 puts('Fossil mount:', ver);",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return 'VALUES($'+name+'('+val.keys().join('),$'+name+'(')+'))';",
          "258: }",
          "309: function Jsi_TableObj(db:userobj, table:string, data:object, conf:object=void) {",
          "310:     var self = {};",
          "311:     var options = {",
          "",
          "[Removed Lines]",
          "261: function Jsi_ObjToSchema(db:userobj, table:string, data:object, conf:object=void) {",
          "262:     var self = {};",
          "263:     var options = {",
          "264:         noCreate    :false,     // Create table, if not exists.",
          "265:         objOpts     :{},        // Options for objOpts",
          "266:         verbose     :false",
          "267:     };",
          "268:     parseOpts(self, options, conf);",
          "269:     var cl = {}, cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "273:         return true;",
          "274:     }",
          "275:     for (var c=0; c<cols.length; c++)",
          "276:         cl[cols[c].name] = cols[c];",
          "277:     var oo = self.objOpts;",
          "278:     oo.getSql = true;",
          "280:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo});",
          "281:     var s = fs;",
          "282:     s = ','+s.substr( s.indexOf('(')+1);",
          "283:     s = s.substr(0, s.length-2);",
          "284:     s +=',';",
          "285:     for (var i in data) {",
          "286:         if (cl[i]) continue;",
          "287:         var rec = s.substr( s.indexOf(','+i+' '));",
          "288:         if (!rec) throw('failed to find schema: '+i);",
          "289:         rec = rec.substr(1);",
          "290:         var re = rec.indexOf(',');",
          "291:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "292:             re = rec.indexOf(',', re);",
          "293:         rec = rec.substr(0, re);",
          "294:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "295:         puts(\"RR: \",sql);",
          "296:         if (self.verbose)",
          "297:             LogInfo('SCHEMA:',sql);",
          "298:         db.eval(sql);",
          "299:         cl[i] = rec;",
          "300:     }",
          "303:     if (fs === t)",
          "304:         return true;",
          "306:     return false;",
          "307: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     }",
          "323:     var oo = self.objOpts;",
          "324:     oo.getSql = true;",
          "326:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "327:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "328:     if (fs === cs)",
          "329:         return true;",
          "334:         return true;",
          "335:     var cln = cl.length, fln=fl.length;",
          "338:         return false;",
          "339:     }",
          "347:     }",
          "357:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "359:         if (self.verbose)",
          "363:     }",
          "365:     return false;",
          "366: }",
          "369: function Jsi__Init() {",
          "",
          "[Removed Lines]",
          "330:     var f = fs.substr( fs.indexOf('(')+1, fs.length-1));",
          "331:     var c = cs.substr( cs.indexOf('(')+1, cs.length-1));",
          "332:     var fl = f.split(',[').sort(), cl = c.split(',[').sort();",
          "333:     if (fl.join(',[') == cl.join(',[')",
          "336:     if (cln >= fln) {",
          "337:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"')",
          "340:     var ci = 0, fi = 0;",
          "341:     while (cl<cln && fi<fln) {",
          "342:         if (cl[ci] === fl[fi]) {",
          "343:             ci++; fi++; continue;",
          "344:         }",
          "345:         var cn = cl[ci].substr(0, cl[ci].indexOf(']')-1),",
          "346:             fn = fl[fi].substr(0, fl[fi].indexOf(']')-1);",
          "348:     for (var i in data) {",
          "349:         if (cl[i]) continue;",
          "350:         var rec = s.substr( s.indexOf(','+i+' '));",
          "351:         if (!rec) throw('failed to find schema: '+i);",
          "352:         rec = rec.substr(1);",
          "353:         var re = rec.indexOf(',');",
          "354:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "355:             re = rec.indexOf(',', re);",
          "356:         rec = rec.substr(0, re);",
          "358:         puts(\"RR: \",sql);",
          "360:             LogInfo('SCHEMA:',sql);",
          "361:         db.eval(sql);",
          "362:         cl[i] = rec;",
          "",
          "[Added Lines]",
          "281:     var f = fs.substring( fs.indexOf('([')+2, fs.length-2);",
          "282:     var c = cs.substring( cs.indexOf('([')+2, cs.length-2);",
          "283:     var fl = f.split(', [').sort(), cl = c.split(', [').sort();",
          "284:     if (fl.join('') == cl.join(''))",
          "287:     if (cln > fln) {",
          "288:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"');",
          "291:     var fadds = cl.filter( n => !fl.includes(n) );",
          "292:     if (fadds.length) {",
          "293:         LogWarn('Can not sync, obj is missing fields in table: \"'+table+'\"\\n'+fadds.join('\\n|'));",
          "294:         return false;",
          "296:     var cadds = fl.filter( n => !cl.includes(n) );",
          "297:     for (var i in cadds) {",
          "298:         var rec = '['+cadds[i];",
          "301:             LogInfo('UPGRADE:',sql);",
          "302:         try { db.eval(sql); } catch(e) { LogError('SQL:'+e+' : '+sql); }",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Jsi_LogFile    =",
          "16: Jsi_Auto.Jsi_Opts       =",
          "17: Jsi_Auto.Jsi_SqlValues  =",
          "19: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "20: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "21: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Jsi_ObjToSchema =",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Jsi_TableObj   =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 12",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 13",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:         v = obj->arr[0];",
          "779:         memmove(obj->arr, obj->arr+1, n*sizeof(Jsi_Value*));",
          "780:         obj->arr[n] = NULL;",
          "781:         Jsi_ValueDup2(interp, ret, v);",
          "782:         Jsi_DecrRefCount(interp, v);",
          "783:         Jsi_ObjSetLength(interp, obj, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:         if (!v) return JSI_OK;",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     f->endPos = l->cur;",
          "517:     f->startPos = -1; // Have to get these from newline count.",
          "518:     if (f->retType & JSI_TT_UNDEFINED)",
          "522:     pstate->argType = 0;",
          "523:     if (localvar && args && (interp->strict)) {",
          "524:         int i, j;",
          "",
          "[Removed Lines]",
          "519:         Jsi_LogWarn(\"illegal use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "[Added Lines]",
          "519:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "527:                 if (i != j && !Jsi_Strcmp(args->args[i].name, args->args[j].name)) {",
          "528:                         if (line)",
          "529:                             interp->parseLine = line;",
          "531:                         if (line)",
          "532:                             interp->parseLine = NULL;",
          "536:                 }",
          "537:             }",
          "538:             for (j=0; j<localvar->count; j++) {",
          "539:                 if (!Jsi_Strcmp(localvar->args[j].name, args->args[i].name)) {",
          "540:                         if (line)",
          "541:                             interp->parseLine = line;",
          "543:                         if (line)",
          "544:                             interp->parseLine = NULL;",
          "548:                 }",
          "549:             }",
          "550:         }",
          "",
          "[Removed Lines]",
          "530:                         Jsi_LogWarn(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "533:                         jsi_TypeMismatch(interp);",
          "534:                         if (interp->typeCheck.error)",
          "535:                             pstate->err_count++;",
          "542:                         Jsi_LogWarn(\"function %s():  parameter name conflicts with 'var %s'\", name?name:\"\", localvar->args[j].name);",
          "545:                         jsi_TypeMismatch(interp);",
          "546:                         if (interp->typeCheck.error)",
          "547:                             pstate->err_count++;",
          "",
          "[Added Lines]",
          "529:                         Jsi_LogError(\"function %s():  duplicate parameter name '%s'\", name?name:\"\", args->args[i].name);",
          "532:                         pstate->err_count++;",
          "539:                         Jsi_LogError(\"function %s():  parameter name conflicts with local '%s'\", name?name:\"\", localvar->args[j].name);",
          "542:                         pstate->err_count++;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     JSI_OPT(STRING,Jsi_Interp, scriptFile,  .help=\"Interp init script file\"),",
          "130:     JSI_OPT(STRING,Jsi_Interp, stdinStr,    .help=\"String to use as stdin for console.input()\"),",
          "131:     JSI_OPT(STRING,Jsi_Interp, stdoutStr,   .help=\"String to collect stdout for puts()\"),",
          "133:     JSI_OPT(CUSTOM,Jsi_Interp, subOpts,     .help=\"Infrequently used sub-options\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpSubOptions),",
          "134:     JSI_OPT(BOOL,  Jsi_Interp, subthread,   .help=\"Create a threaded Interp\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "135:     JSI_OPT(CUSTOM,Jsi_Interp, traceCall,   .help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\"),",
          "",
          "[Added Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2144:     if (!isthrd) {",
          "2145:         int ostrict = sinterp->strict;",
          "2147:         sinterp->level++;",
          "2148:         if (interp->framePtr->tryDepth)",
          "2149:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2146:         sinterp->strict = 0;",
          "",
          "[Added Lines]",
          "2146:         sinterp->strict = !interp->isSafe;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "183: {",
          "184:     Jsi_FuncObj *fo = funcPtr->fobj;",
          "185:     Jsi_Value *nargs = args, *fargs = fo->bindArgs;",
          "186:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "187:     int fargc = (fargs? Jsi_ValueGetLength(interp, fargs) : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     if (!fo)",
          "186:         return Jsi_LogError(\"bind failure\"); // TODO: fix via \"call\" failure?",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:                 Jsi_DSAppend(&sStr,\")\", NULL);",
          "592:             }",
          "593:         }",
          "595:     }",
          "596:     if (!create)",
          "597:         Jsi_DSAppend(&vStr, \")\", NULL);",
          "",
          "[Removed Lines]",
          "594:         pre = \",\";",
          "",
          "[Added Lines]",
          "594:         pre = \", \";",
          "",
          "---------------"
        ],
        "tests/interp2.jsi||tests/interp2.jsi": [
          "File: tests/interp2.jsi -> tests/interp2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: ;File.write('/tmp/xx.txt','');",
          "27: ;ii.eval('var db = new Sqlite(\\'/tmp/xx.txt\\'); db.eval(\\'CREATE TABLE foo(a,b)\\');');",
          "31: File.remove('/tmp/xx.txt',true);",
          "32: delete ii;",
          "",
          "[Removed Lines]",
          "29: ;//ii.eval('var db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "[Added Lines]",
          "29: ;//ii.eval('db = new Sqlite(\\'/tmp/xx.db\\');//LOCKWRITE');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: File.remove('/tmp/xx.txt',true) ==> undefined",
          "64: File.write('/tmp/xx.txt','') ==> 0",
          "65: ii.eval('var db = new Sqlite('/tmp/xx.txt'); db.eval('CREATE TABLE foo(a,b)');') ==> undefined",
          "67: PASS!: err = Safe accces denied",
          "68: SAFE EXEC:  no exec in safe mode",
          "69: SUBINTERP:  subinterps disallowed",
          "",
          "[Removed Lines]",
          "66: ii.eval('var db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "[Added Lines]",
          "66: ii.eval('db = new Sqlite('/tmp/xx.db');//LOCKWRITE') ==>",
          "",
          "---------------"
        ],
        "tests/prob/bind.js||tests/prob/bind.js": [
          "File: tests/prob/bind.js -> tests/prob/bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function h(a) { return {a: a, th: this}; }",
          "2: var i = h.bind({str: \"foo\"}, 2);",
          "4: i.call({x: 1});",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "302b16da546cfe23faaff60ce903c455918648d6",
      "candidate_info": {
        "commit_hash": "302b16da546cfe23faaff60ce903c455918648d6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/302b16da546cfe23faaff60ce903c455918648d6",
        "files": [
          "Makefile",
          "make.conf",
          "src/jsi.h",
          "tests/freeze.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.0\": Revised build system to not require configure\n\nFossilOrigin-Name: 61320a09ce69800eba082103b7f69db537d58b6891dbe8877ca26fb77760ef0e",
        "before_after_code_files": [
          "make.conf||make.conf",
          "src/jsi.h||src/jsi.h",
          "tests/freeze.jsi||tests/freeze.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "make.conf||make.conf": [
          "File: make.conf -> make.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   1",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   2",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "tests/freeze.jsi||tests/freeze.jsi": [
          "File: tests/freeze.jsi -> tests/freeze.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x, j;",
          "2: ;x = {a:1, b:2};",
          "3: ;'\\n---- Freeze object';",
          "4: ;Object.freeze(x);",
          "6: ;'\\n---- Query freeze state';",
          "7: ;Info.obj(x);",
          "8: ;x.a = 9;",
          "9: ;++x.b;",
          "11: ;'\\n---- Bad write/read';",
          "12: ;//x.c = 8;",
          "13: ;//j= x.c;",
          "15: ;'\\n---- Disable modify';",
          "16: ;Object.freeze(x,true,false);",
          "17: ;//x.a = 10;",
          "19: ;'\\n---- Disable modify and readcheck';",
          "20: ;Object.freeze(x,true,false,false);",
          "21: ;//x.a = 11;",
          "22: ;x.e;",
          "24: ;'\\n---- Unfreeze';",
          "25: ;Object.freeze(x,false);",
          "26: ;x.f=13;",
          "30: =!EXPECTSTART!=",
          "31: x = {a:1, b:2} ==> { a:1, b:2 }",
          "32: '",
          "33: ---- Freeze object'",
          "34: Object.freeze(x) ==> undefined",
          "35: '",
          "36: ---- Query freeze state'",
          "37: Info.obj(x) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[], objType:\"object\", setters:[], spec:undefined }",
          "38: x.a = 9 ==> 9",
          "39: ++x.b ==> 3",
          "40: '",
          "41: ---- Bad write/read'",
          "42: x.c = 8 ==>",
          "43: [PASS]!: err = object freeze: attempted assign \"c\"",
          "44: j= x.c ==>",
          "45: [PASS]!: err = object freeze: read undefined \"c\"",
          "46: '",
          "47: ---- Disable modify'",
          "48: Object.freeze(x,true,false) ==> undefined",
          "49: x.a = 10 ==>",
          "50: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "51: '",
          "52: ---- Disable modify and readcheck'",
          "53: Object.freeze(x,true,false,false) ==> undefined",
          "54: x.a = 11 ==>",
          "55: [PASS]!: err = object freeze: attempted assign/modify \"a\"",
          "56: x.e ==> undefined",
          "57: '",
          "58: ---- Unfreeze'",
          "59: Object.freeze(x,false) ==> undefined",
          "60: x.f=13 ==> 13",
          "61: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
      "candidate_info": {
        "commit_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/92ed157603a00d173cdae919994a6c22853fd9ef",
        "files": [
          "lib/Websrv.jsi",
          "lib/www/js/Jsish.js",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.2\": add ip address in WS connections, Websrv -es5test\n\nFossilOrigin-Name: 903c89e828af1dd8fa4f1b858aa3fa0e8d2f6936a2f0254842782dbaf379084a",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "30:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "31:         ignoreExit  :false,     // Ignore exit request.",
          "32:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:             File.write(to, out);",
          "399:         }",
          "400:     }",
          "402:     if (self.srcFile !== '')",
          "403:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "411:         }",
          "412:     }",
          "414:     if (self.es5test)",
          "415:         return es5test();",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     return fn.substr(i+1);",
          "243: }",
          "246:     var f=document.createElement('script');",
          "247:     f.setAttribute(\"type\",\"text/javascript\");",
          "249:         f.innerHTML = fn;",
          "250:     else {",
          "251:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "245: function addScript(fn, asData) { // Add script into page.",
          "248:     if (asData)",
          "",
          "[Added Lines]",
          "245: function addScript(fn) { // Add script into page.",
          "248:     if (fn.indexOf('\\n')>=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:                         str = SigConvert(str);",
          "533:                     }",
          "536:                 },",
          "537:                 error:function(str) {",
          "",
          "[Removed Lines]",
          "534:                     addScript(str, true);",
          "",
          "[Added Lines]",
          "534:                     if (str.indexOf('\\n')>=0)",
          "535:                         addScript(str);",
          "536:                     else",
          "537:                         console.warn('no newline', str);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2521:         break;",
          "2523:     case LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION:",
          "2530:         if (cmdPtr->onFilter && !cmdPtr->deleted) {",
          "2533:             int killcon = 0, n = 0;",
          "2534:             Jsi_Obj *oarg1;",
          "2535:             Jsi_Value *vpargs, *vargs[10], *ret = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "2524:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2525:         Jsi_DSSet(&pss->url, inPtr);",
          "2526:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2527:             pss->clientName = cmdPtr->clientName;",
          "2528:             pss->clientIP = cmdPtr->clientIP;",
          "2529:         }",
          "2531:             if (!pss)",
          "2532:                 pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "",
          "[Added Lines]",
          "2525:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2526:             Jsi_DSSet(&pss->url, inPtr);",
          "2527:             if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2528:                 pss->clientName = cmdPtr->clientName;",
          "2529:                 pss->clientIP = cmdPtr->clientIP;",
          "2530:                 if (cmdPtr->debug>1)",
          "2531:                     fprintf(stderr,  \"Filter ws msg %d from %s (%s)\\n\", pss->wid,",
          "2532:                          pss->clientName, pss->clientIP);",
          "2534:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2569:         }",
          "2570:         if (!pss)",
          "2571:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2574:             Jsi_Obj *oarg1;",
          "2575:             Jsi_Value *vpargs, *vargs[10];",
          "",
          "[Removed Lines]",
          "2572:         if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "2574:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2575:             pss->clientName = cmdPtr->clientName;",
          "2576:             pss->clientIP = cmdPtr->clientIP;",
          "2577:             if (cmdPtr->debug>1)",
          "2578:                 fprintf(stderr,  \"Establish WS msg %d from %s (%s)\\n\", pss->wid,",
          "2579:                      pss->clientName, pss->clientIP);",
          "2580:         }",
          "2581:          if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
      "candidate_info": {
        "commit_hash": "a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a179e99442d3dfa23c1cde7c100f0e6019650cf6",
        "files": [
          "c-demos/Makefile",
          "c-demos/cextn/Bag.jsc",
          "c-demos/cextn/Baker.jsc",
          "c-demos/cextn/Bee.jsc",
          "c-demos/cextn/Car.jsc",
          "c-demos/cextn/Makefile",
          "c-demos/cextn/Sum.jsc",
          "c-demos/cextn/Tiny.jsc",
          "c-demos/cextn/bagtest.jsi",
          "c-demos/cextn/ext_test.jsi",
          "c-demos/cextn/logtest.jsi",
          "c-demos/cextn/new/Bee.jsi",
          "c-demos/cextn/new/Tiny.jsi",
          "c-demos/cextn/tinytest.jsi",
          "lib/Cextn.jsi",
          "lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiCmds.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.4\": rename Cdata to Cextn\n\nFossilOrigin-Name: c9c793f06b0e18ce42f93e12bb25ae5f11fbd6d044317d9aab73c7dccb0c9802",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cextn.jsi",
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cextn.jsi": [
          "File: lib/Cdata.jsi -> lib/Cextn.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: {",
          "10:     var options = {         // The C-API preprocessor for structs and enums.",
          "",
          "[Removed Lines]",
          "7: function Cdata(args:array, conf:object=void)",
          "",
          "[Added Lines]",
          "7: function Cextn(args:array, conf:object=void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "38:     };",
          "40:     self.version = self.pkg.version;",
          "41:     self.verStr = self.pkg.verStr;",
          "42:     var Ex = {asize:0, offs:1, size:2, sig:3};",
          "",
          "[Removed Lines]",
          "39:     self.pkg = require('Cdata', 0);",
          "",
          "[Added Lines]",
          "39:     self.pkg = require('Cextn', 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:     return retval;",
          "1717: }",
          "1720: if (isMain())",
          "",
          "[Removed Lines]",
          "1719: provide(Cdata, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cdata));",
          "",
          "[Added Lines]",
          "1719: provide(Cextn, \"2\", {logmask:'debug,trace'});",
          "1721:     puts(moduleRun(Cextn));",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:             return;",
          "182:         switch (cmd) {",
          "183:             case 'breakpoints':",
          "185:                 for (var i in blst.sort()) {",
          "187:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "188:                     switch (bp.type) {",
          "189:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "184:                 var blst = self.interp.eval('Debugger.info()');",
          "186:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "184:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "186:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         }",
          "250:         try {",
          "252:             puts((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "253:         } catch(e) {",
          "254:             puts(\"add failed: \"+e);",
          "",
          "[Removed Lines]",
          "251:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "251:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "259:         var bp, num, val = lst[1];",
          "260:         if (lst.length == 1) {",
          "262:             for (var i in bps) {",
          "264:             }",
          "265:             return;",
          "266:         }",
          "",
          "[Removed Lines]",
          "261:             var bps = self.interp.eval('Debugger.info()');",
          "263:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "261:             var bps = self.interp.eval('Util.dbgInfo()');",
          "263:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:             return;",
          "270:         }",
          "271:         try {",
          "273:         } catch(e) {",
          "274:             eputs(\"remove failed: \"+e);",
          "275:         }",
          "",
          "[Removed Lines]",
          "272:             self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "272:             self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:     function cmdEnable(lst:array, on:boolean) {",
          "279:         var bp, num, val = lst[1];",
          "280:         if (lst.length == 1) {",
          "282:             for (var i in bps) {",
          "284:             }",
          "285:             return;",
          "286:         }",
          "287:         if (val === undefined || (num=parseIntN(val))<=0)",
          "288:             return eputs(\"bad index: \"+val);",
          "289:         try {",
          "291:         } catch(e) {",
          "292:             eputs(\"enable failed: \"+e);",
          "293:         }",
          "",
          "[Removed Lines]",
          "281:             var bps = self.interp.eval('Debugger.info()');",
          "283:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "281:             var bps = self.interp.eval('Util.dbgInfo()');",
          "283:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "290:             self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:             return;",
          "362:         switch (cmd) {",
          "363:             case 'bp':",
          "365:                 if ((!blst) || blst.length<=0)",
          "366:                     return;",
          "367:                 for (var i in blst.sort()) {",
          "369:                     str = format(\"#%-5d: enabled=%s hits=%d, \", bp.id, bp.enabled?\"true, \":\"false,\", bp.hits);",
          "370:                     switch (bp.type) {",
          "371:                         case 'line': str += format(\"file=%s:%d\", bp.file, bp.line); break;",
          "",
          "[Removed Lines]",
          "364:                 var blst = self.interp.eval('Debugger.info()');",
          "368:                     var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "364:                 var blst = self.interp.eval('Util.dbgInfo()');",
          "368:                     var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395:     }",
          "397:     function webBPUpdate() {",
          "399:         if (blst && blst.length) {",
          "400:             for (var i in blst.sort()) {",
          "402:                 bps.push(bp);",
          "403:             }",
          "404:         }",
          "",
          "[Removed Lines]",
          "398:         var bps = [], blst = self.interp.eval('Debugger.info()');",
          "401:                 var bp = self.interp.eval('Debugger.info('+blst[i]+')');",
          "",
          "[Added Lines]",
          "398:         var bps = [], blst = self.interp.eval('Util.dbgIfo()');",
          "401:                 var bp = self.interp.eval('Util.dbgInfo('+blst[i]+')');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "442:         var done = false;",
          "443:         try {",
          "445:             wputs((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "446:             done = true;",
          "447:         } catch(e) {",
          "",
          "[Removed Lines]",
          "444:             var b = self.interp.eval('Debugger.add(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "[Added Lines]",
          "444:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:     function cmdDelete(lst:array, line:number, func:string, file:string) {",
          "458:         var bp, num, val = lst[1];",
          "459:         if (lst.length == 1) {",
          "461:             for (var i in bps) {",
          "463:             }",
          "464:         } else {",
          "465:             if (val === undefined || (num=parseIntN(val))<=0) {",
          "",
          "[Removed Lines]",
          "460:             var bps = self.interp.eval('Debugger.info()');",
          "462:                 self.interp.eval('Debugger.remove('+bps[i]+')');",
          "",
          "[Added Lines]",
          "460:             var bps = self.interp.eval('Util.dbgInfo()');",
          "462:                 self.interp.eval('Util.dbgRemove('+bps[i]+')');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:                 return;",
          "468:             }",
          "469:             try {",
          "471:             } catch(e) {",
          "472:                 eputs(\"remove failed: \"+e);",
          "473:             }",
          "",
          "[Removed Lines]",
          "470:                 self.interp.eval('Debugger.remove('+num+')');",
          "",
          "[Added Lines]",
          "470:                 self.interp.eval('Util.dbgRemove('+num+')');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "478:     function cmdEnable(lst:array, on:boolean) {",
          "479:         var bp, num, val = lst[1];",
          "480:         if (lst.length == 1) {",
          "482:             for (var i in bps) {",
          "484:             }",
          "485:         } else {",
          "486:             if (val === undefined || (num=parseIntN(val))<=0)",
          "487:                 return eputs(\"bad index: \"+val);",
          "488:             try {",
          "490:             } catch(e) {",
          "491:                 return eputs(\"enable failed: \"+e);",
          "492:             }",
          "",
          "[Removed Lines]",
          "481:             var bps = self.interp.eval('Debugger.info()');",
          "483:                 self.interp.eval('Debugger.enable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Debugger.enable('+num+','+on+')');",
          "",
          "[Added Lines]",
          "481:             var bps = self.interp.eval('Util.dbgInfo()');",
          "483:                 self.interp.eval('Util.dbgEnable('+bps[i]+','+on+')');",
          "489:                 self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "17: Jsi_Auto.Jspp       = 'source(\"'+Info.scriptDir()+'/Jspp.jsi\")';",
          "19: Jsi_Auto.Websrv     = 'source(\"'+Info.scriptDir()+'/Websrv.jsi\")';",
          "20: Jsi_Auto.Wget       = 'source(\"'+Info.scriptDir()+'/Wget.jsi\")';",
          "21: Jsi_Auto.Debug      = 'source(\"'+Info.scriptDir()+'/Debug.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Cdata      = 'source(\"'+Info.scriptDir()+'/Cdata.jsi\")';",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Cextn      = 'source(\"'+Info.scriptDir()+'/Cextn.jsi\")';",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <stdint.h>",
          "18: #include <sys/time.h>",
          "25: enum { jsi_CTYP_DYN_MEMORY=(1LL<<32), jsi_CTYP_STRUCT=(1LL<<33), jsi_CTYP_ENUM=(1LL<<34) };",
          "27: typedef struct {",
          "",
          "[Removed Lines]",
          "20: #define UdcGet(udf, _this, funcPtr) \\",
          "21:    CDataObj *udf = (typeof(udf))Jsi_UserObjGetData(interp, _this, funcPtr); \\",
          "22:     if (!udf) \\",
          "23:         return Jsi_LogError(\"CData.%s called with non-CData object\", funcPtr->cmdSpec->name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4901: };",
          "4902: #endif",
          "4914: static Jsi_CmdSpec infoCmds[] = {",
          "4915:     { \"argv0\",      InfoArgv0Cmd,       0,  0, \"\", .help=\"Return initial start script file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4916:     { \"cmds\",       InfoCmdsCmd,        0,  2, \"val:string|regexp='*', options:object=void\", .help=\"Return details or list of matching commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT, .flags=0, .info=0, .opts=InfoCmdsOptions },",
          "",
          "[Removed Lines]",
          "4904: #ifndef JSI_OMIT_DEBUG",
          "4905: static Jsi_CmdSpec debugCmds[] = {",
          "4906:     { \"add\",        DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4907:     { \"remove\",     DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4908:     { \"enable\",     DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4909:     { \"info\",       DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4910:     { NULL, 0,0,0,0,  .help=\"Debugger breakpoint management\" }",
          "4911: };",
          "4912: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4992: static Jsi_CmdSpec utilCmds[] = {",
          "4993: #ifndef JSI_OMIT_BASE64",
          "4994:     { \"argArray\",   SysArgArrayCmd,  1,  1, \"arg:any|undefined\", .help=\"Coerces non-null to an array, if necessary\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "4995:     { \"complete\",   SysCompleteCmd,  1,  1, \"val:string\",.help=\"Return true if string is complete command with balanced braces, etc\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4996:     { \"base64\",     SysBase64Cmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Base64 encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "4997:     { \"hexStr\",     SysHexStrCmd,    1,  2, \"val:string, decode:boolean=false\",.help=\"Hex encode/decode a string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4985: #ifndef JSI_OMIT_DEBUG",
          "4986:     { \"dbgAdd\",     DebugAddCmd,    1,  2, \"val:string|number, temp:boolean=false\", .help=\"Debugger add a breakpoint for line, file:line or func\", .retType=(uint)JSI_TT_NUMBER },",
          "4987:     { \"dbgRemove\",  DebugRemoveCmd, 1,  1, \"id:number\", .help=\"Debugger remove breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4988:     { \"dbgEnable\",  DebugEnableCmd, 2,  2, \"id:number, on:boolean\", .help=\"Debugger enable/disable breakpoint\", .retType=(uint)JSI_TT_VOID },",
          "4989:     { \"dbgInfo\",    DebugInfoCmd,   0,  1, \"id:number=void\", .help=\"Debugger return info about one breakpoint, or list of bp numbers\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_ARRAY },",
          "4990: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5081:     Jsi_CommandCreateSpecs(interp, \"Util\",   utilCmds,   NULL, 0);",
          "5082: #ifndef JSI_OMIT_EVENT",
          "5083:     Jsi_CommandCreateSpecs(interp, \"Event\",  eventCmds,  NULL, 0);",
          "5087: #endif",
          "5088:     return JSI_OK;",
          "5089: }",
          "",
          "[Removed Lines]",
          "5084: #endif",
          "5085: #ifndef JSI_OMIT_DEBUG",
          "5086:     Jsi_CommandCreateSpecs(interp, \"Debugger\",  debugCmds,  NULL, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:                 Jsi_Value *v __attribute__((unused));",
          "621:                 Jsi_Value *kPtr = &key; // Note: a string key so no reset needed.",
          "622:                 Jsi_ValueMakeStringKey(interp, &kPtr, argkey);",
          "625:             }",
          "626:         }",
          "627:     }",
          "",
          "[Removed Lines]",
          "623:                 v = jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "624:                 jsi_ValueDebugLabel(v, \"locals\", who->name);",
          "",
          "[Added Lines]",
          "623:                 jsi_ValueObjKeyAssign(interp, arguments, kPtr, NULL, JSI_OM_DONTENUM);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:                 rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "805:                 break;",
          "806:             case 'c':",
          "808:                 break;",
          "809:             case 'd':",
          "810:                 interp->debugOpts.isDebugger = 1;",
          "",
          "[Removed Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cdata'));\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "807:                 rc = Jsi_EvalString(interp, \"puts(moduleRun('Cextn'));\", JSI_EVAL_ISMAIN);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1010:     if (!kstr)",
          "1011:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1013:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1014:         if (v) {",
          "1015:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "1012:     if (obj && obj->setters) {",
          "",
          "[Added Lines]",
          "1012:     if (obj && obj->setters && value) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: Channel.prototype.tell = function():number {};",
          "46: Channel.prototype.truncate = function(pos:number):number {};",
          "47: Channel.prototype.write = function(data):number {};",
          "53: var Event = function(cmd,args) {};",
          "54: Event.prototype.clearInterval = function(id:number):void {};",
          "55: Event.prototype.info = function(id:number):object {};",
          "",
          "[Removed Lines]",
          "48: var Debugger = function(cmd,args) {};",
          "49: Debugger.prototype.add = function(val:string|number, temp:boolean=false):number {};",
          "50: Debugger.prototype.enable = function(id:number, on:boolean):void {};",
          "51: Debugger.prototype.info = function(id:number=void):array|object {};",
          "52: Debugger.prototype.remove = function(id:number):void {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309: Util.prototype.base64 = function(val:string, decode:boolean=false):string {};",
          "310: Util.prototype.complete = function(val:string):boolean {};",
          "311: Util.prototype.crc32 = function(val:string, crcSeed=0):number {};",
          "312: Util.prototype.decrypt = function(val:string, key:string):string {};",
          "313: Util.prototype.encrypt = function(val:string, key:string):string {};",
          "314: Util.prototype.fromCharCode = function(code:number):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: Util.prototype.dbgAdd = function(val:string|number, temp:boolean=false):number {};",
          "308: Util.prototype.dbgEnable = function(id:number, on:boolean):void {};",
          "309: Util.prototype.dbgInfo = function(id:number=void):array|object {};",
          "310: Util.prototype.dbgRemove = function(id:number):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: |write|(data):number |Write data to file.|",
          "108: ## Event",
          "",
          "[Removed Lines]",
          "92: ## Debugger",
          "96: Debugger breakpoint management.",
          "99: ### Methods",
          "100: |Method|Function Argument Types|Description|",
          "101: |---|---|---|",
          "102: |add|(val:string&#124;number, temp:boolean=false):number |Add a breakpoint for line, file:line or func.|",
          "103: |enable|(id:number, on:boolean):void |Enable/disable breakpoint.|",
          "104: |info|(id:number=void):array&#124;object |Return info about one breakpoint, or list of bp numbers.|",
          "105: |remove|(id:number):void |Remove breakpoint.|",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006: |base64|(val:string, decode:boolean=false):string |Base64 encode/decode a string.|",
          "1007: |complete|(val:string):boolean |Return true if string is complete command with balanced braces, etc.|",
          "1008: |crc32|(val:string, crcSeed=0):number |Calculate 32-bit CRC.|",
          "1009: |decrypt|(val:string, key:string):string |Decrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1010: |encrypt|(val:string, key:string):string |Encrypt data using BTEA encryption. Keys that are not 16 bytes use the MD5 hash of the key.|",
          "1011: |fromCharCode|(code:number):string |Return char with given character code.|",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993: |dbgAdd|(val:string&#124;number, temp:boolean=false):number |Debugger add a breakpoint for line, file:line or func.|",
          "994: |dbgEnable|(id:number, on:boolean):void |Debugger enable/disable breakpoint.|",
          "995: |dbgInfo|(id:number=void):array&#124;object |Debugger return info about one breakpoint, or list of bp numbers.|",
          "996: |dbgRemove|(id:number):void |Debugger remove breakpoint.|",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
      "candidate_info": {
        "commit_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiValue.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.1.5\": refactor ObjInsert\n\nFossilOrigin-Name: c9ee31ce057502975b2f91ecb267d5ad74bab4f885d773549ebc059bb8f923b7",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3795:     #endif",
          "3799:         f = func->d.obj->d.fobj->func;",
          "3801:         if (cmdSpec->name)",
          "",
          "[Removed Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons?NULL:proto), cmdSpec->name, func);",
          "",
          "[Added Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons||!proto?interp->csc:proto), cmdSpec->name, func);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:     return JSI_OK;",
          "1038: }",
          "1040: Jsi_RC jsiEvalCodeSub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "1041:      jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1042:      Jsi_Value *_this, Jsi_Value *vret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1041: static Jsi_RC jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "1042: {",
          "1043:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "1044:         return JSI_ERROR;",
          "1045:     if (value->vt == JSI_VT_OBJECT)",
          "1046:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "1048:     if (obj->arr[n])",
          "1049:     {",
          "1050:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "1051:         return JSI_OK;",
          "1052:     }",
          "1053:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "1054:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1055:     int m;",
          "1056:     Jsi_ValueCopy(interp,v, value);",
          "1057:     obj->arr[n] = v;",
          "1058:     m = Jsi_ObjGetLength(interp, obj);",
          "1059:     if ((n+1) > m)",
          "1060:        Jsi_ObjSetLength(interp, obj, n+1);",
          "1061:     return JSI_OK;",
          "1062: }",
          "1065: static Jsi_RC jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "1066: {",
          "1068:     const char *kstr = NULL;",
          "1070:     int arrayindex = -1;",
          "1071:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "1072:         arrayindex = (int)keyval->d.num;",
          "1073:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1074:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1075:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1076:         }",
          "1077:     }",
          "1078:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "1079:     if (jstr)",
          "1080:         kstr = jstr->str;",
          "1081:     else",
          "1082:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1084: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1085:     if (kstr[0] == '_' && Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1086:         Jsi_Obj *obj = target->d.obj;",
          "1087:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1089:         return JSI_OK;",
          "1090:     }",
          "1091: #endif",
          "1092:     Jsi_Value *v = Jsi_ValueDup(interp, value);",
          "1094:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1095:         Jsi_DecrRefCount(interp, v);",
          "1096:         return JSI_ERROR;",
          "1097:     }",
          "1098:     Jsi_DecrRefCount(interp, v);",
          "1099:     return JSI_OK;",
          "1100: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1227:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1228:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "1234:                     jsiClearStack(interp,3);",
          "1235:                     Jsi_ValueCopy(interp,v3, sval);",
          "",
          "[Removed Lines]",
          "1229:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1230:                             rc = JSI_ERROR;",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "",
          "[Added Lines]",
          "1292:                         if (rc == JSI_OK)",
          "1293:                             rc = jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "1294:                     } else",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1465: extern Jsi_Obj *jsi_UserObjFromName(Jsi_Interp *interp, const char *name);",
          "1467: extern Jsi_RC Zvfs_Mount( Jsi_Interp *interp, Jsi_Value *archive, Jsi_Value *mount, Jsi_Value **ret);",
          "1469: extern void jsi_ValueSubscriptLen(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret, int right_val);",
          "1470: extern Jsi_Value* jsi_ValueSubscript(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret);",
          "1472: extern void jsi_ValueObjGetKeys(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *ret, bool isof);",
          "1473: extern Jsi_Value* jsi_ObjArrayLookup(Jsi_Interp *interp, Jsi_Obj *obj, const char *key);",
          "1474: extern Jsi_Value* jsi_ProtoObjValueNew1(Jsi_Interp *interp, const char *name);",
          "",
          "[Removed Lines]",
          "1468: extern Jsi_Value* jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "1471: extern Jsi_Value* jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value *value, int flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     return JSI_OK;",
          "403: }",
          "429: int Jsi_ObjIncrRefCount(Jsi_Interp *interp, Jsi_Obj *obj) {",
          "430:     jsi_DebugObj(obj,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "431:     SIGASSERT(obj,OBJ);",
          "",
          "[Removed Lines]",
          "406: Jsi_Value *jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "407: {",
          "408:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "409:         return NULL;",
          "410:     if (value->vt == JSI_VT_OBJECT)",
          "411:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "413:     if (obj->arr[n])",
          "414:     {",
          "415:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "416:         return obj->arr[n];",
          "417:     }",
          "418:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "419:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "420:     int m;",
          "421:     Jsi_ValueCopy(interp,v, value);",
          "422:     obj->arr[n] = v;",
          "423:     m = Jsi_ObjGetLength(interp, obj);",
          "424:     if ((n+1) > m)",
          "425:        Jsi_ObjSetLength(interp, obj, n+1);",
          "426:     return v;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "544:         return Jsi_LogError(\"arg1: expected object\");",
          "545:     Jsi_Obj *obj = v->d.obj;",
          "546:     Jsi_ValueMakeObject(interp, ret, obj);",
          "547:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "548:     for (i=1; i<argc; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:     Jsi_RC rc = JSI_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "553:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "554:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "556:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "557:             if (v2 && v2->f.bits.dontenum == 0)",
          "559:         }",
          "560:         Jsi_TreeSearchDone(&search);",
          "561:     }",
          "563: }",
          "565: #if (JSI_HAS___PROTO__==1)",
          "",
          "[Removed Lines]",
          "555:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "558:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "562:     return JSI_OK;",
          "",
          "[Added Lines]",
          "556:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "559:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "563:     return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "663:             Jsi_Value *v = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "664:             if (v && v->f.bits.dontenum == 0)",
          "666:         }",
          "667:         Jsi_TreeSearchDone(&search);",
          "668:     }",
          "",
          "[Removed Lines]",
          "665:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "[Added Lines]",
          "666:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"10ffca3d3bdee8292c9eb47ab8422550\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"ddf4cf9ca32a54a3ab3b9a21ae172a78\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     const char*(*_Jsi_ObjTypeStr)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "122:     Jsi_otype(*_Jsi_ObjTypeGet)(Jsi_Obj *obj);",
          "123:     void    (*_Jsi_ObjListifyArray)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "127:     void   (*_Jsi_ObjFromDS)(Jsi_DString *dsPtr, Jsi_Obj *obj);",
          "128:     Jsi_Value*(*_Jsi_ValueNew)(Jsi_Interp *interp);",
          "129:     Jsi_Value*(*_Jsi_ValueNew1)(Jsi_Interp *interp);",
          "",
          "[Removed Lines]",
          "124:     Jsi_RC (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "[Added Lines]",
          "124:     Jsi_RC  (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC  (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC  (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:     return nret;",
          "977: }",
          "1054: static Jsi_Value *jsi_ValueLookupBase(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret)",
          "1055: {",
          "1056:     if (!target)",
          "",
          "[Removed Lines]",
          "979: Jsi_Value *jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "980: {",
          "982:     Jsi_Obj *obj = target->d.obj;",
          "983:     const char *kstr = NULL;",
          "985:     int arrayindex = -1;",
          "986:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "987:         arrayindex = (int)keyval->d.num;",
          "988:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "989:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "990:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "991:         }",
          "992:     }",
          "993:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "994:     if (jstr)",
          "995:         kstr = jstr->str;",
          "996:     else",
          "997:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "998:     if (obj && obj->setters && value) {",
          "999:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1000:         if (v) {",
          "1001:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1002:             vargs[0] = value;",
          "1003:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1004:             Jsi_IncrRefCount(interp, value);",
          "1005:             Jsi_IncrRefCount(interp, vpargs);",
          "1006:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1007:             Jsi_DecrRefCount(interp, vpargs);",
          "1008:             Jsi_DecrRefCount(interp, value);",
          "1009:             Jsi_DecrRefCount(interp, retStr);",
          "1010:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1011:                 return NULL;",
          "1012:             return keyval;// TODO, should not return this!!!",
          "1013:         }",
          "1014:     }",
          "1016:     if (obj && value && target->d.obj->freeze) {",
          "1017:         Jsi_Obj *obj = target->d.obj;",
          "1018:         Jsi_Value *v;",
          "1019:         char keyBuf[100], *keyStr = keyBuf;",
          "1020:         if (arrayindex>=0)",
          "1021:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1022:         else",
          "1023:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1024:         if (obj->freezeNoModify) {",
          "1025:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1026:             return NULL;",
          "1027:         }",
          "1028:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1029:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1030:             return NULL;",
          "1031:         }",
          "1032:     }",
          "1034: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1035:     if (Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1036:         Jsi_Obj *obj = target->d.obj;",
          "1037:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1039:         return obj->__proto__;",
          "1040:     }",
          "1041: #endif",
          "1042:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1043:     if (value)",
          "1044:         Jsi_ValueCopy(interp, v, value);",
          "1046:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1047:         Jsi_DecrRefCount(interp, v);",
          "1048:         return NULL;",
          "1049:     }",
          "1050:     Jsi_DecrRefCount(interp, v);",
          "1051:     return v;",
          "1052: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1354:     return res;",
          "1355: }",
          "1357: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1358: {",
          "1366:     target->f.flag |= flags;",
          "1370: }",
          "1372: Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int key, Jsi_Value *val, int flags)",
          "1373: {",
          "1379:     Jsi_Obj *obj = target->d.obj;",
          "1381:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "1359:     if (target == NULL)",
          "1360:         target = interp->csc;",
          "1361:     if (target->vt != JSI_VT_OBJECT) {",
          "1362:         if (interp->typeCheck.strict)",
          "1363:             Jsi_LogWarn(\"Target is not object\");",
          "1364:         return JSI_ERROR;",
          "1365:     }",
          "1367:     if (Jsi_ObjInsert(interp, target->d.obj, key, val, flags))",
          "1368:         return JSI_OK;",
          "1369:     return JSI_ERROR;",
          "1374:     if (target->vt != JSI_VT_OBJECT) {",
          "1375:         if (interp->typeCheck.strict)",
          "1376:             Jsi_LogWarn(\"Target is not object\");",
          "1377:         return JSI_ERROR;",
          "1378:     }",
          "",
          "[Added Lines]",
          "1285:     if (target->vt != JSI_VT_OBJECT)",
          "1286:         return Jsi_LogError(\"Target is not object\");",
          "1288:     return Jsi_ObjInsert(interp, target->d.obj, key, val, flags);",
          "1294:     if (target->vt != JSI_VT_OBJECT)",
          "1295:         return Jsi_LogError(\"Target is not object\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1387:     }",
          "1388:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "1389:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1392: }",
          "",
          "[Removed Lines]",
          "1390:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "1391:     return JSI_OK;",
          "",
          "[Added Lines]",
          "1307:     return Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1420: {",
          "1421:     Jsi_TreeEntry *hPtr;",
          "1422:     SIGASSERT(val, VALUE);",
          "1423:     if (val->vt == JSI_VT_OBJECT)",
          "1424:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1425:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     if (obj && obj->setters && val) {",
          "1341:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, key, 0);",
          "1342:         if (v) {",
          "1343:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1344:             vargs[0] = val;",
          "1345:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1346:             Jsi_IncrRefCount(interp, val);",
          "1347:             Jsi_IncrRefCount(interp, vpargs);",
          "1348:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1349:             Jsi_DecrRefCount(interp, vpargs);",
          "1350:             Jsi_DecrRefCount(interp, val);",
          "1351:             Jsi_DecrRefCount(interp, retStr);",
          "1352:             if (rc != JSI_OK || flags&JSI_OM_DONTENUM)",
          "1353:                 return JSI_ERROR;",
          "1354:             return JSI_OK;",
          "1355:         }",
          "1356:     }",
          "1358:     if (val && obj->freeze) {",
          "1359:         if (obj->freezeNoModify)",
          "1360:             return Jsi_LogError(\"frozen assign/modify key: %s\", key);",
          "1361:         if (!key || !(Jsi_TreeObjGetValue(obj, key, 0)))",
          "1362:             return Jsi_LogError(\"frozen assign key: %s\", key);",
          "1363:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}