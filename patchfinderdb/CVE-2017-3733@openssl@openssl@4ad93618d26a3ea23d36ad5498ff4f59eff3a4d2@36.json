{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1f723c503b371776b2ae67a8cb78c8765387174",
      "candidate_info": {
        "commit_hash": "b1f723c503b371776b2ae67a8cb78c8765387174",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1f723c503b371776b2ae67a8cb78c8765387174",
        "files": [
          "ssl/record/rec_layer_s3.c",
          "ssl/record/record.h",
          "ssl/ssl_lib.c"
        ],
        "message": "Provide a function to test whether we have unread records pending\n\nAlso updates SSL_has_pending() to use it. This actually fixes a bug in\nSSL_has_pending() which is supposed to return 1 if we have any processed\nor unprocessed data sitting in OpenSSL buffers. However it failed to return\n1 if we had processed non-application data pending.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2875)\n(cherry picked from commit b8c49611bc26c8f9a980b814496a3069cd524b79)",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ],
          "candidate": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     SSL3_RECORD_release(rl->rrec, SSL_MAX_PIPELINES);",
          "77: }",
          "79: int RECORD_LAYER_read_pending(const RECORD_LAYER *rl)",
          "80: {",
          "81:     return SSL3_BUFFER_get_left(&rl->rbuf) != 0;",
          "82: }",
          "84: int RECORD_LAYER_write_pending(const RECORD_LAYER *rl)",
          "85: {",
          "86:     return (rl->numwpipes > 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: int RECORD_LAYER_processed_read_pending(const RECORD_LAYER *rl)",
          "87: {",
          "88:     size_t curr_rec = 0, num_recs = RECORD_LAYER_get_numrpipes(rl);",
          "89:     const SSL3_RECORD *rr = rl->rrec;",
          "91:     while (curr_rec < num_recs && SSL3_RECORD_is_read(&rr[curr_rec]))",
          "92:         curr_rec++;",
          "94:     return curr_rec < num_recs;",
          "95: }",
          "",
          "---------------"
        ],
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: void RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "208: void RECORD_LAYER_release(RECORD_LAYER *rl);",
          "209: int RECORD_LAYER_read_pending(const RECORD_LAYER *rl);",
          "210: int RECORD_LAYER_write_pending(const RECORD_LAYER *rl);",
          "211: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len);",
          "212: void RECORD_LAYER_reset_read_sequence(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: int RECORD_LAYER_processed_read_pending(const RECORD_LAYER *rl);",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:         return 1;",
          "1319:     return RECORD_LAYER_read_pending(&s->rlayer);",
          "",
          "[Removed Lines]",
          "1316:     if (SSL_pending(s))",
          "",
          "[Added Lines]",
          "1316:     if (RECORD_LAYER_processed_read_pending(&s->rlayer))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
      "candidate_info": {
        "commit_hash": "9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
        "files": [
          "apps/rehash.c"
        ],
        "message": "On VMS, massage the fetch file names to remove the generation number\n\nThe generation number is ';nnn' at the end of the file name fetched\nwith readdir().  Because rehash checks for specific extensions and\ndoesn't expect an additional generation number, the easiest is to\nmassage the received file name early by simply removing the generation\nnumber.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2717)\n(cherry picked from commit 39aceac320a1561d50c7d71ac2560aec7ab8eddb)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     return *path == '/';",
          "282: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: static int massage_filename(char *name)",
          "285: {",
          "286: # ifdef __VMS",
          "287:     char *p = strchr(name, ';');",
          "288:     char *q = p;",
          "290:     if (q != NULL) {",
          "291:         for (q++; *q != '\\0'; q++) {",
          "292:             if (!isdigit(*q))",
          "293:                 return 1;",
          "294:         }",
          "295:     }",
          "298: # endif",
          "299:     return 1;",
          "300: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     }",
          "317:     while ((filename = OPENSSL_DIR_read(&d, dirname)) != NULL) {",
          "318:         if ((copy = strdup(filename)) == NULL",
          "319:                 || sk_OPENSSL_STRING_push(files, copy) == 0) {",
          "320:             BIO_puts(bio_err, \"out of memory\\n\");",
          "321:             exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:                 || !massage_filename(copy)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67114d93b47aa02192272182595c2b5d1bba8298",
      "candidate_info": {
        "commit_hash": "67114d93b47aa02192272182595c2b5d1bba8298",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/67114d93b47aa02192272182595c2b5d1bba8298",
        "files": [
          "crypto/rand/rand_lib.c"
        ],
        "message": "Make getting and setting the RAND default method thread safe\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3137)\n(cherry picked from commit 87975cfa91c3f06a52f2550ed2ef632644be6dde)",
        "before_after_code_files": [
          "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
          "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"internal/cryptlib.h\"",
          "13: #include <openssl/opensslconf.h>",
          "14: #include \"internal/rand.h\"",
          "16: #include <openssl/engine.h>",
          "18: #ifdef OPENSSL_FIPS",
          "19: # include <openssl/fips.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include \"internal/thread_once.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: #ifndef OPENSSL_NO_ENGINE",
          "25: static ENGINE *funct_ref = NULL;",
          "26: #endif",
          "27: static const RAND_METHOD *default_RAND_meth = NULL;",
          "29: int RAND_set_rand_method(const RAND_METHOD *meth)",
          "30: {",
          "31: #ifndef OPENSSL_NO_ENGINE",
          "32:     ENGINE_finish(funct_ref);",
          "33:     funct_ref = NULL;",
          "34: #endif",
          "35:     default_RAND_meth = meth;",
          "36:     return 1;",
          "37: }",
          "39: const RAND_METHOD *RAND_get_rand_method(void)",
          "40: {",
          "41:     if (!default_RAND_meth) {",
          "42: #ifndef OPENSSL_NO_ENGINE",
          "43:         ENGINE *e = ENGINE_get_default_RAND();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: static CRYPTO_RWLOCK *rand_engine_lock = NULL;",
          "29: static CRYPTO_RWLOCK *rand_meth_lock = NULL;",
          "30: static CRYPTO_ONCE rand_lock_init = CRYPTO_ONCE_STATIC_INIT;",
          "32: DEFINE_RUN_ONCE_STATIC(do_rand_lock_init)",
          "33: {",
          "34: #ifndef OPENSSL_NO_ENGINE",
          "35:     rand_engine_lock = CRYPTO_THREAD_lock_new();",
          "36: #endif",
          "37:     rand_meth_lock = CRYPTO_THREAD_lock_new();",
          "38:     return rand_engine_lock != NULL && rand_meth_lock != NULL;",
          "39: }",
          "43:     if (!RUN_ONCE(&rand_lock_init, do_rand_lock_init))",
          "44:         return 0;",
          "46:     CRYPTO_THREAD_write_lock(rand_meth_lock);",
          "52:     CRYPTO_THREAD_unlock(rand_meth_lock);",
          "58:     const RAND_METHOD *tmp_meth = NULL;",
          "60:     if (!RUN_ONCE(&rand_lock_init, do_rand_lock_init))",
          "61:         return NULL;",
          "63:     CRYPTO_THREAD_write_lock(rand_meth_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: #endif",
          "55:             default_RAND_meth = RAND_OpenSSL();",
          "56:     }",
          "58: }",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: int RAND_set_rand_engine(ENGINE *engine)",
          "62: {",
          "63:     const RAND_METHOD *tmp_meth = NULL;",
          "64:     if (engine) {",
          "65:         if (!ENGINE_init(engine))",
          "66:             return 0;",
          "",
          "[Removed Lines]",
          "57:     return default_RAND_meth;",
          "",
          "[Added Lines]",
          "80:     tmp_meth = default_RAND_meth;",
          "81:     CRYPTO_THREAD_unlock(rand_meth_lock);",
          "82:     return tmp_meth;",
          "90:     if (!RUN_ONCE(&rand_lock_init, do_rand_lock_init))",
          "91:         return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:             return 0;",
          "71:         }",
          "72:     }",
          "74:     RAND_set_rand_method(tmp_meth);",
          "75:     funct_ref = engine;",
          "76:     return 1;",
          "77: }",
          "78: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     CRYPTO_THREAD_write_lock(rand_engine_lock);",
          "106:     CRYPTO_THREAD_unlock(rand_engine_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:     if (meth && meth->cleanup)",
          "84:         meth->cleanup();",
          "85:     RAND_set_rand_method(NULL);",
          "86: }",
          "88: void RAND_seed(const void *buf, int num)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     CRYPTO_THREAD_lock_free(rand_meth_lock);",
          "118:     CRYPTO_THREAD_lock_free(rand_engine_lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00eae742694a87978e5e07593109f3cd895b4bc8",
      "candidate_info": {
        "commit_hash": "00eae742694a87978e5e07593109f3cd895b4bc8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/00eae742694a87978e5e07593109f3cd895b4bc8",
        "files": [
          "crypto/bio/b_print.c"
        ],
        "message": "bio/b_print.c: drop dependency on BN config.\n\nThis might seem controversial, but it doesn't actually affect anything.\nOr rather it doesn't make worse cases when it was problematic [with code\nadditions to 1.1.0]. One of such rare cases is 32-bit PA-RISC target\nwith *vendor* compiler.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3148)",
        "before_after_code_files": [
          "crypto/bio/b_print.c||crypto/bio/b_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bio/b_print.c||crypto/bio/b_print.c": [
          "File: crypto/bio/b_print.c -> crypto/bio/b_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <ctype.h>",
          "13: #include \"internal/numbers.h\"",
          "14: #include \"internal/cryptlib.h\"",
          "19: #include <openssl/bio.h>",
          "",
          "[Removed Lines]",
          "15: #ifndef NO_SYS_TYPES_H",
          "16: # include <sys/types.h>",
          "17: #endif",
          "21: #if defined(BN_LLONG) || defined(SIXTY_FOUR_BIT)",
          "22: # ifndef HAVE_LONG_LONG",
          "23: #  define HAVE_LONG_LONG 1",
          "24: # endif",
          "25: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: # define LDOUBLE double",
          "38: #endif",
          "50: static int fmtstr(char **, char **, size_t *, size_t *,",
          "51:                   const char *, int, int, int);",
          "52: static int fmtint(char **, char **, size_t *, size_t *,",
          "54: static int fmtfp(char **, char **, size_t *, size_t *,",
          "55:                  LDOUBLE, int, int, int, int);",
          "56: static int doapr_outch(char **, char **, size_t *, size_t *, int);",
          "",
          "[Removed Lines]",
          "40: #ifdef HAVE_LONG_LONG",
          "41: # if defined(_WIN32) && !defined(__GNUC__)",
          "42: #  define LLONG __int64",
          "43: # else",
          "44: #  define LLONG long long",
          "45: # endif",
          "46: #else",
          "47: # define LLONG long",
          "48: #endif",
          "53:                   LLONG, int, int, int, int);",
          "",
          "[Added Lines]",
          "33:                   int64_t, int, int, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:       size_t *retlen, int *truncated, const char *format, va_list args)",
          "107: {",
          "108:     char ch;",
          "110:     LDOUBLE fvalue;",
          "111:     char *strvalue;",
          "112:     int min;",
          "",
          "[Removed Lines]",
          "109:     LLONG value;",
          "",
          "[Added Lines]",
          "89:     int64_t value;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:                     value = va_arg(args, long int);",
          "232:                     break;",
          "233:                 case DP_C_LLONG:",
          "235:                     break;",
          "236:                 default:",
          "237:                     value = va_arg(args, int);",
          "",
          "[Removed Lines]",
          "234:                     value = va_arg(args, LLONG);",
          "",
          "[Added Lines]",
          "214:                     value = va_arg(args, int64_t);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:                     value = (unsigned short int)va_arg(args, unsigned int);",
          "254:                     break;",
          "255:                 case DP_C_LONG:",
          "257:                     break;",
          "258:                 case DP_C_LLONG:",
          "260:                     break;",
          "261:                 default:",
          "263:                     break;",
          "264:                 }",
          "265:                 if (!fmtint(sbuffer, buffer, &currlen, maxlen, value,",
          "",
          "[Removed Lines]",
          "256:                     value = (LLONG) va_arg(args, unsigned long int);",
          "259:                     value = va_arg(args, unsigned LLONG);",
          "262:                     value = (LLONG) va_arg(args, unsigned int);",
          "",
          "[Added Lines]",
          "236:                     value = va_arg(args, unsigned long int);",
          "239:                     value = va_arg(args, uint64_t);",
          "242:                     value = va_arg(args, unsigned int);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "331:                     num = va_arg(args, long int *);",
          "337:                 } else {",
          "338:                     int *num;",
          "339:                     num = va_arg(args, int *);",
          "",
          "[Removed Lines]",
          "334:                     LLONG *num;",
          "335:                     num = va_arg(args, LLONG *);",
          "",
          "[Added Lines]",
          "314:                     int64_t *num;",
          "315:                     num = va_arg(args, int64_t *);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "434: fmtint(char **sbuffer,",
          "435:        char **buffer,",
          "436:        size_t *currlen,",
          "438: {",
          "439:     int signvalue = 0;",
          "440:     const char *prefix = \"\";",
          "442:     char convert[DECIMAL_SIZE(value) + 3];",
          "443:     int place = 0;",
          "444:     int spadlen = 0;",
          "",
          "[Removed Lines]",
          "437:        size_t *maxlen, LLONG value, int base, int min, int max, int flags)",
          "441:     unsigned LLONG uvalue;",
          "",
          "[Added Lines]",
          "417:        size_t *maxlen, int64_t value, int base, int min, int max, int flags)",
          "421:     uint64_t uvalue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "451:     if (!(flags & DP_F_UNSIGNED)) {",
          "452:         if (value < 0) {",
          "453:             signvalue = '-';",
          "455:         } else if (flags & DP_F_PLUS)",
          "456:             signvalue = '+';",
          "457:         else if (flags & DP_F_SPACE)",
          "",
          "[Removed Lines]",
          "454:             uvalue = 0 - (unsigned LLONG)value;",
          "",
          "[Added Lines]",
          "434:             uvalue = 0 - (uint64_t)value;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8552dc80a611083754493283e72d51f3015753a",
      "candidate_info": {
        "commit_hash": "b8552dc80a611083754493283e72d51f3015753a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b8552dc80a611083754493283e72d51f3015753a",
        "files": [
          "crypto/evp/evp_enc.c"
        ],
        "message": "Remove assert from is_partially_overlapping()\n\nThis function is used to validate application supplied parameters. An\nassert should be used to check for an error that is internal to OpenSSL.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit b153f0921bea38127de0b9440b0487db3004330d)",
        "before_after_code_files": [
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     int overlapped = (len > 0) & (diff != 0) & ((diff < (PTRDIFF_T)len) |",
          "288:                                                 (diff > (0 - (PTRDIFF_T)len)));",
          "290:     return overlapped;",
          "291: }",
          "",
          "[Removed Lines]",
          "289:     assert(!overlapped);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}