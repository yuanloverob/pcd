{
  "cve_id": "CVE-2019-20479",
  "cve_desc": "A flaw was found in mod_auth_openidc before version 2.4.1. An open redirect issue exists in URLs with a slash and backslash at the beginning.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "02431c0adfa30f478cf2eb20ed6ea51fdf446be7",
  "patch_info": {
    "commit_hash": "02431c0adfa30f478cf2eb20ed6ea51fdf446be7",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/02431c0adfa30f478cf2eb20ed6ea51fdf446be7",
    "files": [
      "src/mod_auth_openidc.c"
    ],
    "message": "Merge pull request #453 from oss-aimoto/fix_openredirect_starting_slash_backslash\n\nFix open redirect starting with a slash and backslash",
    "before_after_code_files": [
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3063:                                                 url);",
      "3064:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3065:                 return FALSE;",
      "3066:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:         } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3069:                                 apr_psprintf(r->pool,",
      "3070:                                                 \"No hostname was parsed and starting with '/\\\\': %s\",",
      "3071:                                                 url);",
      "3072:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3073:                 return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d20c58597c9f7065e5362e603a5c348141c45ea",
      "candidate_info": {
        "commit_hash": "2d20c58597c9f7065e5362e603a5c348141c45ea",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/2d20c58597c9f7065e5362e603a5c348141c45ea",
        "files": [
          "src/mod_auth_openidc.c"
        ],
        "message": "Fix open redirect starting with a slash and backslash",
        "before_after_code_files": [
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OpenIDC/mod_auth_openidc/pull/453"
        ],
        "olp_code_files": {
          "patch": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3063:                                                 url);",
          "3064:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3065:                 return FALSE;",
          "3066:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3066:         } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
          "3069:                                 apr_psprintf(r->pool,",
          "3070:                                                 \"No hostname was parsed and starting with '/\\\\': %s\",",
          "3071:                                                 url);",
          "3072:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3073:                 return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ea550f34ce51d8d41ba47843739c964407fa0ad",
      "candidate_info": {
        "commit_hash": "8ea550f34ce51d8d41ba47843739c964407fa0ad",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/8ea550f34ce51d8d41ba47843739c964407fa0ad",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c"
        ],
        "message": "prevent open redirect on refresh token requests; release 2.4.3\n\nadd new OIDCRedirectURLsAllowed primitive to handle post logout and\nrefresh-return-to validation; addresses #453; closes #466\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "833: # for calculating the fingerprint of the state during authentication.",
          "834: # When not defined the default \"both\" is used.",
          "835: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
          "838: # other redirects such as the \"return_to\" value on refresh token requests, e.g.:",
          "839: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
          "840: # or:",
          "841: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
          "842: # When not defined, the default is to match the hostname in the URL redirected to against",
          "843: # the hostname in the current request.",
          "844: #OIDCRedirectURLsAllowed [<regexp>]+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.3rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273: #define OIDCOAuthAccessTokenBindingPolicy      \"OIDCOAuthAccessTokenBindingPolicy\"",
          "274: #define OIDCRefreshAccessTokenBeforeExpiry     \"OIDCRefreshAccessTokenBeforeExpiry\"",
          "275: #define OIDCStateInputHeaders                  \"OIDCStateInputHeaders\"",
          "277: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: #define OIDCRedirectURLsAllowed                \"OIDCRedirectURLsAllowed\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1126:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1127: }",
          "1129: int oidc_cfg_dir_refresh_access_token_before_expiry(request_rec *r) {",
          "1130:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1131:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130: static const char * oidc_set_redirect_urls_allowed(cmd_parms *cmd, void *m,",
          "1131:   const char *arg) {",
          "1132:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "1133:    cmd->server->module_config, &auth_openidc_module);",
          "1134:  if (cfg->redirect_urls_allowed == NULL)",
          "1135:   cfg->redirect_urls_allowed = apr_hash_make(cmd->pool);",
          "1136:  apr_hash_set(cfg->redirect_urls_allowed, arg, APR_HASH_KEY_STRING, arg);",
          "1137:  return NULL;",
          "1138: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1305:  c->state_input_headers = OIDC_DEFAULT_STATE_INPUT_HEADERS;",
          "1307:  return c;",
          "1308: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1318:  c->redirect_urls_allowed = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1775:    add->state_input_headers != OIDC_DEFAULT_STATE_INPUT_HEADERS ?",
          "1776:      add->state_input_headers : base->state_input_headers;",
          "1778:  return c;",
          "1779: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1791:  c->redirect_urls_allowed =",
          "1792:    add->redirect_urls_allowed != NULL ?",
          "1793:      add->redirect_urls_allowed : base->redirect_urls_allowed;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3163:     RSRC_CONF,",
          "3164:     \"Specify header name which is used as the input for calculating the fingerprint of the state during authentication; must be one of \\\"none\\\", \\\"user-agent\\\", \\\"x-forwarded-for\\\" or \\\"both\\\" (default).\"),",
          "3166:   { NULL }",
          "3167: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3183:   AP_INIT_ITERATE(OIDCRedirectURLsAllowed,",
          "3184:     oidc_set_redirect_urls_allowed,",
          "3185:     (void *) APR_OFFSETOF(oidc_cfg, redirect_urls_allowed),",
          "3186:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "3187:     \"Specify one or more regular expressions that define URLs allowed for post logout and other redirects.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "230: static char *oidc_get_browser_state_hash(request_rec *r, oidc_cfg *c, const char *nonce) {",
          "",
          "[Added Lines]",
          "230: static char *oidc_get_browser_state_hash(request_rec *r, oidc_cfg *c,",
          "231:   const char *nonce) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:  oidc_jose_error_t err;",
          "545:  oidc_jwk_t *jwk = NULL;",
          "546:  if (oidc_util_create_symmetric_key(r, c->provider.client_secret,",
          "549:   return FALSE;",
          "551:  oidc_jwt_t *jwt = NULL;",
          "552:  if (oidc_jwt_parse(r->pool, state, &jwt,",
          "555:   oidc_error(r,",
          "556:     \"could not parse JWT from state: invalid unsolicited response: %s\",",
          "557:     oidc_jose_e2s(r->pool, err));",
          "",
          "[Removed Lines]",
          "547:    oidc_alg2keysize(alg), OIDC_JOSE_ALG_SHA256,",
          "548:    TRUE, &jwk) == FALSE)",
          "553:    oidc_util_merge_symmetric_key(r->pool, c->private_keys, jwk),",
          "554:    &err) == FALSE) {",
          "",
          "[Added Lines]",
          "548:    oidc_alg2keysize(alg), OIDC_JOSE_ALG_SHA256, TRUE, &jwk) == FALSE)",
          "553:    oidc_util_merge_symmetric_key(r->pool, c->private_keys, jwk), &err)",
          "554:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576:  }",
          "582:   oidc_jwt_destroy(jwt);",
          "583:   return FALSE;",
          "584:  }",
          "",
          "[Removed Lines]",
          "579:  if (oidc_proto_validate_jwt(r, jwt, provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "580:    provider->idtoken_iat_slack,",
          "581:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE) {",
          "",
          "[Added Lines]",
          "579:  if (oidc_proto_validate_jwt(r, jwt,",
          "580:    provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "581:      provider->idtoken_iat_slack,",
          "582:      OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:  char *target_link_uri = NULL;",
          "604:  oidc_jose_get_string(r->pool, jwt->payload.value.json,",
          "607:  if (target_link_uri == NULL) {",
          "608:   if (c->default_sso_url == NULL) {",
          "609:    oidc_error(r,",
          "",
          "[Removed Lines]",
          "605:    OIDC_CLAIM_TARGET_LINK_URI,",
          "606:    FALSE, &target_link_uri, NULL);",
          "",
          "[Added Lines]",
          "606:    OIDC_CLAIM_TARGET_LINK_URI, FALSE, &target_link_uri, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1232:  if (oidc_proto_refresh_request(r, c, provider, refresh_token, &s_id_token,",
          "1235:   oidc_error(r, \"access_token could not be refreshed\");",
          "1236:   return FALSE;",
          "1237:  }",
          "",
          "[Removed Lines]",
          "1233:    &s_access_token, &s_token_type, &expires_in,",
          "1234:    &s_refresh_token) == FALSE) {",
          "",
          "[Added Lines]",
          "1233:    &s_access_token, &s_token_type, &expires_in, &s_refresh_token)",
          "1234:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1312:     if (oidc_proto_resolve_userinfo(r, c, provider, id_token_sub,",
          "1315:      oidc_error(r,",
          "1316:        \"resolving user info claims with the refreshed access token failed, nothing will be stored in the session\");",
          "",
          "[Removed Lines]",
          "1313:       refreshed_access_token, &result, userinfo_jwt) == FALSE) {",
          "",
          "[Added Lines]",
          "1313:       refreshed_access_token, &result, userinfo_jwt)",
          "1314:       == FALSE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485: }",
          "1487: static apr_byte_t oidc_refresh_access_token_before_expiry(request_rec *r,",
          "1490:  const char *s_access_token_expires = NULL;",
          "1491:  apr_time_t t_expires = -1;",
          "",
          "[Removed Lines]",
          "1488:   oidc_cfg *cfg, oidc_session_t *session, int ttl_minimum, int logout_on_error) {",
          "",
          "[Added Lines]",
          "1489:   oidc_cfg *cfg, oidc_session_t *session, int ttl_minimum,",
          "1490:   int logout_on_error) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1529:  if (oidc_refresh_access_token(r, cfg, session, provider,",
          "1530:    NULL) == FALSE) {",
          "1532:   if (logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH)",
          "1533:    return ERROR;",
          "1534:   else",
          "",
          "[Removed Lines]",
          "1531:   oidc_warn(r, \"access_token could not be refreshed, logout=%d\", logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH);",
          "",
          "[Added Lines]",
          "1533:   oidc_warn(r, \"access_token could not be refreshed, logout=%d\",",
          "1534:     logout_on_error & OIDC_LOGOUT_ON_ERROR_REFRESH);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2373:  char *javascript = NULL, *javascript_method = NULL;",
          "2374:  char *html_head =",
          "2375:    \"<style type=\\\"text/css\\\">body {text-align: center}</style>\";",
          "2378:   html_head = apr_psprintf(r->pool, \"%s%s\", html_head, javascript);",
          "",
          "[Removed Lines]",
          "2376:  if (oidc_post_preserve_javascript(r, NULL, &javascript,",
          "2377:    &javascript_method) == TRUE)",
          "",
          "[Added Lines]",
          "2379:  if (oidc_post_preserve_javascript(r, NULL, &javascript, &javascript_method)",
          "2380:    == TRUE)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2617:  }",
          "2622:   return oidc_util_html_send_error(r, c->error_template,",
          "2623:     \"Invalid Request\",",
          "2624:     \"\\\"target_link_uri\\\" parameter does not match configuration settings, aborting to prevent an open redirect.\",",
          "",
          "[Removed Lines]",
          "2620:  if (oidc_target_link_uri_matches_configuration(r, c,",
          "2621:    target_link_uri) == FALSE) {",
          "",
          "[Added Lines]",
          "2623:  if (oidc_target_link_uri_matches_configuration(r, c, target_link_uri)",
          "2624:    == FALSE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2673:   }",
          "2679:    return oidc_util_html_send_error(r, c->error_template,",
          "",
          "[Removed Lines]",
          "2676:   if (oidc_proto_account_based_discovery(r, c, issuer, &issuer) == FALSE) {",
          "",
          "[Added Lines]",
          "2679:   if (oidc_proto_account_based_discovery(r, c, issuer, &issuer)",
          "2680:     == FALSE) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2922:   goto out;",
          "2927:   goto out;",
          "2929:  json_t *events = json_object_get(jwt->payload.value.json,",
          "",
          "[Removed Lines]",
          "2919:  if (oidc_proto_validate_jwt(r, jwt, provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "2920:    provider->idtoken_iat_slack,",
          "2921:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE)",
          "2925:  if (oidc_proto_validate_aud_and_azp(r, cfg, provider,",
          "2926:    &jwt->payload) == FALSE)",
          "",
          "[Added Lines]",
          "2923:  if (oidc_proto_validate_jwt(r, jwt,",
          "2924:    provider->validate_issuer ? provider->issuer : NULL, FALSE, FALSE,",
          "2925:      provider->idtoken_iat_slack,",
          "2926:      OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE)",
          "2930:  if (oidc_proto_validate_aud_and_azp(r, cfg, provider, &jwt->payload)",
          "2931:    == FALSE)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3040:  return rc;",
          "3041: }",
          "3045:  apr_uri_t uri;",
          "3046:  const char *c_host = NULL;",
          "3048:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
          "3051:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3052:   return FALSE;",
          "3053:  }",
          "3069:     apr_psprintf(r->pool,",
          "",
          "[Removed Lines]",
          "3043: static apr_byte_t oidc_validate_post_logout_url(request_rec *r, const char *url,",
          "3044:   char **err_str, char **err_desc) {",
          "3055:  c_host = oidc_get_current_url_host(r);",
          "3056:  if ((uri.hostname != NULL)",
          "3057:    && ((strstr(c_host, uri.hostname) == NULL)",
          "3058:      || (strstr(uri.hostname, c_host) == NULL))) {",
          "3061:     apr_psprintf(r->pool,",
          "3062:       \"logout value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3063:       apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3064:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3065:   return FALSE;",
          "3066:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
          "",
          "[Added Lines]",
          "3048: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "3049:   const char *url, char **err_str, char **err_desc) {",
          "3052:  apr_hash_index_t *hi = NULL;",
          "3061:  if (c->redirect_urls_allowed != NULL) {",
          "3062:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
          "3063:     apr_hash_next(hi)) {",
          "3064:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
          "3065:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
          "3066:      NULL, err_str) == TRUE)",
          "3067:     break;",
          "3068:   }",
          "3069:   if (hi == NULL) {",
          "3072:      apr_psprintf(r->pool,",
          "3073:        \"value does not match the list of allowed redirect URLs: %s\",",
          "3074:        url);",
          "3075:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3076:    return FALSE;",
          "3077:   }",
          "3078:  } else if (uri.hostname != NULL) {",
          "3079:   c_host = oidc_get_current_url_host(r);",
          "3080:   if ((strstr(c_host, uri.hostname) == NULL)",
          "3081:     || (strstr(uri.hostname, c_host) == NULL)) {",
          "3084:      apr_psprintf(r->pool,",
          "3085:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
          "3086:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
          "3087:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3088:    return FALSE;",
          "3089:   }",
          "3090:  }",
          "3092:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3071:       url);",
          "3072:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3073:   return FALSE;",
          "3090:  }",
          "3093:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
          "3096:     apr_psprintf(r->pool,",
          "3098:       url);",
          "3099:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3100:   return FALSE;",
          "",
          "[Removed Lines]",
          "3074:         } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
          "3077:                                 apr_psprintf(r->pool,",
          "3078:                                                 \"No hostname was parsed and starting with '//': %s\",",
          "3079:                                                 url);",
          "3080:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3081:                 return FALSE;",
          "3082:         } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
          "3085:                                 apr_psprintf(r->pool,",
          "3086:                                                 \"No hostname was parsed and starting with '/\\\\': %s\",",
          "3087:                                                 url);",
          "3088:                 oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3089:                 return FALSE;",
          "3097:       \"logout value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "",
          "[Added Lines]",
          "3100:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
          "3103:     \"No hostname was parsed and starting with '//': %s\", url);",
          "3104:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3105:   return FALSE;",
          "3106:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
          "3109:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
          "3110:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "3111:   return FALSE;",
          "3119:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3132:  } else {",
          "3136:     &error_description) == FALSE) {",
          "3137:    return oidc_util_html_send_error(r, c->error_template, error_str,",
          "3138:      error_description,",
          "",
          "[Removed Lines]",
          "3135:   if (oidc_validate_post_logout_url(r, url, &error_str,",
          "",
          "[Added Lines]",
          "3157:   if (oidc_validate_redirect_url(r, c, url, &error_str,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3391:  char *return_to = NULL;",
          "3392:  char *r_access_token = NULL;",
          "3393:  char *error_code = NULL;",
          "3396:  oidc_util_get_request_parameter(r, OIDC_REDIRECT_URI_REQUEST_REFRESH,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3416:  char *error_str = NULL;",
          "3417:  char *error_description = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3405:   return HTTP_INTERNAL_SERVER_ERROR;",
          "3406:  }",
          "3408:  if (r_access_token == NULL) {",
          "3409:   oidc_error(r,",
          "3410:     \"refresh token request handler called with no access_token parameter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433:  if (oidc_validate_redirect_url(r, c, return_to, &error_str,",
          "3434:    &error_description) == FALSE) {",
          "3435:   oidc_error(r, \"return_to URL validation failed: %s: %s\", error_str,",
          "3436:     error_description);",
          "3437:   return HTTP_INTERNAL_SERVER_ERROR;",
          "3438:  }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3569:     oidc_provider_t *provider = NULL;",
          "3572:      return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "[Removed Lines]",
          "3570:     if (oidc_get_provider_from_session(r, c, session,",
          "3571:       &provider) == FALSE)",
          "",
          "[Added Lines]",
          "3602:     if (oidc_get_provider_from_session(r, c, session, &provider)",
          "3603:       == FALSE)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:  apr_byte_t state_input_headers;",
          "426: } oidc_cfg;",
          "428: int oidc_check_user_id(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:  apr_hash_t *redirect_urls_allowed;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2267:   goto out;",
          "2268:  }",
          "2275:  }",
          "2278:  rv = TRUE;",
          "2280: out:",
          "",
          "[Removed Lines]",
          "2270:  if (pcre_get_substring(input, subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR,",
          "2271:    &(psubStrMatchStr)) <= 0) {",
          "2273:     rc);",
          "2274:   goto out;",
          "",
          "[Added Lines]",
          "2270:  if (output) {",
          "2272:   if (pcre_get_substring(input, subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR,",
          "2273:     &(psubStrMatchStr)) <= 0) {",
          "2275:      rc);",
          "2276:    goto out;",
          "2277:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}