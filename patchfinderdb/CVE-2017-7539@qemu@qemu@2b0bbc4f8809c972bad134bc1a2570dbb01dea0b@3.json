{
  "cve_id": "CVE-2017-7539",
  "cve_desc": "An assertion-failure flaw was found in Qemu before 2.10.1, in the Network Block Device (NBD) server's initial connection negotiation, where the I/O coroutine was undefined. This could crash the qemu-nbd server if a client sent unexpected data during connection negotiation. A remote user or process could use this flaw to crash the qemu-nbd server resulting in denial of service.",
  "repo": "qemu/qemu",
  "patch_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
  "patch_info": {
    "commit_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "files": [
      "nbd/server.c"
    ],
    "message": "nbd/server: get rid of nbd_negotiate_read and friends\n\nFunctions nbd_negotiate_{read,write,drop_sync} were introduced in\n1a6245a5b, when nbd_rwv (was nbd_wr_sync) was working through\nqemu_co_sendv_recvv (the path is nbd_wr_sync -> qemu_co_{recv/send} ->\nqemu_co_send_recv -> qemu_co_sendv_recvv), which just yields, without\nsetting any handlers. But starting from ff82911cd nbd_rwv (was\nnbd_wr_syncv) works through qio_channel_yield() which sets handlers, so\nwatchers are redundant in nbd_negotiate_{read,write,drop_sync}, then,\nlet's just use nbd_{read,write,drop} functions.\n\nFunctions nbd_{read,write,drop} has errp parameter, which is unused in\nthis patch. This will be fixed later.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-4-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "nbd/server.c||nbd/server.c"
    ]
  },
  "patch_diff": {
    "nbd/server.c||nbd/server.c": [
      "File: nbd/server.c -> nbd/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105: static void nbd_client_receive_next_request(NBDClient *client);",
      "172:    Server         Client",
      "",
      "[Removed Lines]",
      "107: static gboolean nbd_negotiate_continue(QIOChannel *ioc,",
      "108:                                        GIOCondition condition,",
      "109:                                        void *opaque)",
      "110: {",
      "111:     qemu_coroutine_enter(opaque);",
      "112:     return TRUE;",
      "113: }",
      "115: static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
      "116: {",
      "117:     ssize_t ret;",
      "118:     guint watch;",
      "120:     assert(qemu_in_coroutine());",
      "122:     watch = qio_channel_add_watch(ioc,",
      "123:                                   G_IO_IN,",
      "124:                                   nbd_negotiate_continue,",
      "125:                                   qemu_coroutine_self(),",
      "126:                                   NULL);",
      "127:     ret = nbd_read(ioc, buffer, size, NULL);",
      "128:     g_source_remove(watch);",
      "129:     return ret;",
      "131: }",
      "133: static int nbd_negotiate_write(QIOChannel *ioc, const void *buffer, size_t size)",
      "134: {",
      "135:     ssize_t ret;",
      "136:     guint watch;",
      "138:     assert(qemu_in_coroutine());",
      "140:     watch = qio_channel_add_watch(ioc,",
      "141:                                   G_IO_OUT,",
      "142:                                   nbd_negotiate_continue,",
      "143:                                   qemu_coroutine_self(),",
      "144:                                   NULL);",
      "145:     ret = nbd_write(ioc, buffer, size, NULL);",
      "146:     g_source_remove(watch);",
      "147:     return ret;",
      "148: }",
      "150: static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
      "151: {",
      "152:     ssize_t ret;",
      "153:     uint8_t *buffer = g_malloc(MIN(65536, size));",
      "155:     while (size > 0) {",
      "156:         size_t count = MIN(65536, size);",
      "157:         ret = nbd_negotiate_read(ioc, buffer, count);",
      "158:         if (ret < 0) {",
      "159:             g_free(buffer);",
      "160:             return ret;",
      "161:         }",
      "163:         size -= count;",
      "164:     }",
      "166:     g_free(buffer);",
      "167:     return 0;",
      "168: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:           type, opt, len);",
      "207:     magic = cpu_to_be64(NBD_REP_MAGIC);",
      "209:         LOG(\"write failed (rep magic)\");",
      "210:         return -EINVAL;",
      "211:     }",
      "212:     opt = cpu_to_be32(opt);",
      "214:         LOG(\"write failed (rep opt)\");",
      "215:         return -EINVAL;",
      "216:     }",
      "217:     type = cpu_to_be32(type);",
      "219:         LOG(\"write failed (rep type)\");",
      "220:         return -EINVAL;",
      "221:     }",
      "222:     len = cpu_to_be32(len);",
      "224:         LOG(\"write failed (rep data length)\");",
      "225:         return -EINVAL;",
      "226:     }",
      "",
      "[Removed Lines]",
      "208:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) < 0) {",
      "213:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) < 0) {",
      "218:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) < 0) {",
      "223:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "",
      "[Added Lines]",
      "145:     if (nbd_write(ioc, &magic, sizeof(magic), NULL) < 0) {",
      "150:     if (nbd_write(ioc, &opt, sizeof(opt), NULL) < 0) {",
      "155:     if (nbd_write(ioc, &type, sizeof(type), NULL) < 0) {",
      "160:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:     if (ret < 0) {",
      "256:         goto out;",
      "257:     }",
      "259:         LOG(\"write failed (error message)\");",
      "260:         ret = -EIO;",
      "261:     } else {",
      "",
      "[Removed Lines]",
      "258:     if (nbd_negotiate_write(ioc, msg, len) < 0) {",
      "",
      "[Added Lines]",
      "195:     if (nbd_write(ioc, msg, len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "286:     }",
      "288:     len = cpu_to_be32(name_len);",
      "290:         LOG(\"write failed (name length)\");",
      "291:         return -EINVAL;",
      "292:     }",
      "294:         LOG(\"write failed (name buffer)\");",
      "295:         return -EINVAL;",
      "296:     }",
      "298:         LOG(\"write failed (description buffer)\");",
      "299:         return -EINVAL;",
      "300:     }",
      "",
      "[Removed Lines]",
      "289:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "293:     if (nbd_negotiate_write(ioc, name, name_len) < 0) {",
      "297:     if (nbd_negotiate_write(ioc, desc, desc_len) < 0) {",
      "",
      "[Added Lines]",
      "226:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "230:     if (nbd_write(ioc, name, name_len, NULL) < 0) {",
      "234:     if (nbd_write(ioc, desc, desc_len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "308:     NBDExport *exp;",
      "310:     if (length) {",
      "312:             return -EIO;",
      "313:         }",
      "314:         return nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "311:         if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "248:         if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "339:         LOG(\"Bad length received\");",
      "340:         goto fail;",
      "341:     }",
      "343:         LOG(\"read failed\");",
      "344:         goto fail;",
      "345:     }",
      "",
      "[Removed Lines]",
      "342:     if (nbd_negotiate_read(client->ioc, name, length) < 0) {",
      "",
      "[Added Lines]",
      "279:     if (nbd_read(client->ioc, name, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372:     TRACE(\"Setting up TLS\");",
      "373:     ioc = client->ioc;",
      "374:     if (length) {",
      "376:             return NULL;",
      "377:         }",
      "378:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
      "",
      "[Removed Lines]",
      "375:         if (nbd_negotiate_drop_sync(ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "312:         if (nbd_drop(ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "436:         ...           Rest of request",
      "440:         LOG(\"read failed\");",
      "441:         return -EIO;",
      "442:     }",
      "",
      "[Removed Lines]",
      "439:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) < 0) {",
      "",
      "[Added Lines]",
      "376:     if (nbd_read(client->ioc, &flags, sizeof(flags), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "462:         uint32_t clientflags, length;",
      "463:         uint64_t magic;",
      "466:             LOG(\"read failed\");",
      "467:             return -EINVAL;",
      "468:         }",
      "",
      "[Removed Lines]",
      "465:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) < 0) {",
      "",
      "[Added Lines]",
      "402:         if (nbd_read(client->ioc, &magic, sizeof(magic), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "472:             return -EINVAL;",
      "473:         }",
      "477:         {",
      "478:             LOG(\"read failed\");",
      "479:             return -EINVAL;",
      "480:         }",
      "481:         clientflags = be32_to_cpu(clientflags);",
      "484:             LOG(\"read failed\");",
      "485:             return -EINVAL;",
      "486:         }",
      "",
      "[Removed Lines]",
      "475:         if (nbd_negotiate_read(client->ioc, &clientflags,",
      "476:                                sizeof(clientflags)) < 0)",
      "483:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) < 0) {",
      "",
      "[Added Lines]",
      "412:         if (nbd_read(client->ioc, &clientflags,",
      "413:                       sizeof(clientflags), NULL) < 0)",
      "420:         if (nbd_read(client->ioc, &length, sizeof(length), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "510:                 return -EINVAL;",
      "512:             default:",
      "514:                     return -EIO;",
      "515:                 }",
      "516:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "513:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "450:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "548:                 return nbd_negotiate_handle_export_name(client, length);",
      "550:             case NBD_OPT_STARTTLS:",
      "552:                     return -EIO;",
      "553:                 }",
      "554:                 if (client->tlscreds) {",
      "",
      "[Removed Lines]",
      "551:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "488:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "567:                 }",
      "568:                 break;",
      "569:             default:",
      "571:                     return -EIO;",
      "572:                 }",
      "573:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "570:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "507:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "656:             TRACE(\"TLS cannot be enabled with oldstyle protocol\");",
      "657:             goto fail;",
      "658:         }",
      "660:             LOG(\"write failed\");",
      "661:             goto fail;",
      "662:         }",
      "663:     } else {",
      "665:             LOG(\"write failed\");",
      "666:             goto fail;",
      "667:         }",
      "",
      "[Removed Lines]",
      "659:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) < 0) {",
      "664:         if (nbd_negotiate_write(client->ioc, buf, 18) < 0) {",
      "",
      "[Added Lines]",
      "596:         if (nbd_write(client->ioc, buf, sizeof(buf), NULL) < 0) {",
      "601:         if (nbd_write(client->ioc, buf, 18, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "676:         stq_be_p(buf + 18, client->exp->size);",
      "677:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
      "678:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
      "680:             LOG(\"write failed\");",
      "681:             goto fail;",
      "682:         }",
      "",
      "[Removed Lines]",
      "679:         if (nbd_negotiate_write(client->ioc, buf + 18, len) < 0) {",
      "",
      "[Added Lines]",
      "616:         if (nbd_write(client->ioc, buf + 18, len, NULL) < 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "526e5c6559928ed98332dd27f026e8cbc95f466a",
      "candidate_info": {
        "commit_hash": "526e5c6559928ed98332dd27f026e8cbc95f466a",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/526e5c6559928ed98332dd27f026e8cbc95f466a",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd: Share common reply-sending code in server\n\nRather than open-coding NBD_REP_SERVER, reuse the code we\nalready have by adding a length parameter.  Additionally,\nthe refactoring will make adding NBD_OPT_GO in a later patch\neasier.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <1476469998-28592-7-git-send-email-eblake@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: {",
          "201:     uint64_t magic;",
          "206:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "207:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "",
          "[Removed Lines]",
          "199: static int nbd_negotiate_send_rep(QIOChannel *ioc, uint32_t type, uint32_t opt)",
          "202:     uint32_t len;",
          "204:     TRACE(\"Reply opt=%\" PRIx32 \" type=%\" PRIx32, type, opt);",
          "",
          "[Added Lines]",
          "201: static int nbd_negotiate_send_rep_len(QIOChannel *ioc, uint32_t type,",
          "202:                                       uint32_t opt, uint32_t len)",
          "206:     TRACE(\"Reply opt=%\" PRIx32 \" type=%\" PRIx32 \" len=%\" PRIu32,",
          "207:           type, opt, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         LOG(\"write failed (rep type)\");",
          "219:         return -EINVAL;",
          "220:     }",
          "222:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "223:         LOG(\"write failed (rep data length)\");",
          "224:         return -EINVAL;",
          "",
          "[Removed Lines]",
          "221:     len = cpu_to_be32(0);",
          "",
          "[Added Lines]",
          "224:     len = cpu_to_be32(len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:     return 0;",
          "227: }",
          "229: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp)",
          "230: {",
          "232:     size_t name_len, desc_len;",
          "234:     const char *name = exp->name ? exp->name : \"\";",
          "235:     const char *desc = exp->description ? exp->description : \"\";",
          "237:     TRACE(\"Advertising export name '%s' description '%s'\", name, desc);",
          "238:     name_len = strlen(name);",
          "239:     desc_len = strlen(desc);",
          "259:     }",
          "260:     len = cpu_to_be32(name_len);",
          "261:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "262:         LOG(\"write failed (name length)\");",
          "",
          "[Removed Lines]",
          "231:     uint64_t magic;",
          "233:     uint32_t opt, type, len;",
          "240:     magic = cpu_to_be64(NBD_REP_MAGIC);",
          "241:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) != sizeof(magic)) {",
          "242:         LOG(\"write failed (magic)\");",
          "243:         return -EINVAL;",
          "244:      }",
          "245:     opt = cpu_to_be32(NBD_OPT_LIST);",
          "246:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) != sizeof(opt)) {",
          "247:         LOG(\"write failed (opt)\");",
          "248:         return -EINVAL;",
          "249:     }",
          "250:     type = cpu_to_be32(NBD_REP_SERVER);",
          "251:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) != sizeof(type)) {",
          "252:         LOG(\"write failed (reply type)\");",
          "253:         return -EINVAL;",
          "254:     }",
          "255:     len = cpu_to_be32(name_len + desc_len + sizeof(len));",
          "256:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) != sizeof(len)) {",
          "257:         LOG(\"write failed (length)\");",
          "258:         return -EINVAL;",
          "",
          "[Added Lines]",
          "234: static int nbd_negotiate_send_rep(QIOChannel *ioc, uint32_t type, uint32_t opt)",
          "235: {",
          "236:     return nbd_negotiate_send_rep_len(ioc, type, opt, 0);",
          "237: }",
          "244:     uint32_t len;",
          "247:     int rc;",
          "252:     len = name_len + desc_len + sizeof(len);",
          "253:     rc = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len);",
          "254:     if (rc < 0) {",
          "255:         return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cfae925d2e31a7d7613a6fb60aa58b38ec2b61e",
      "candidate_info": {
        "commit_hash": "0cfae925d2e31a7d7613a6fb60aa58b38ec2b61e",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/0cfae925d2e31a7d7613a6fb60aa58b38ec2b61e",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: refactor negotiation functions parameters\n\nInstead of passing currently negotiating option and its length to\nmany of negotiation functions let's just store them on NBDClient\nstruct to be state-variables of negotiation phase.\n\nThis unifies semantics of negotiation functions and allows\ntracking changes of remaining option length in future patches.\n\nAsssert that optlen is back to 0 after negotiation (including\nold-style connections which don't negotiate), although we need\nmore patches before we can assert optlen is 0 between options\nduring negotiation.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20171122101958.17065-2-vsementsov@virtuozzo.com>\n[eblake: rebase, commit message tweak, assert !optlen after\nnegotiation completes]\nSigned-off-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     bool closing;",
          "104:     bool structured_reply;",
          "109: static void nbd_client_receive_next_request(NBDClient *client);",
          "",
          "[Removed Lines]",
          "105: };",
          "",
          "[Added Lines]",
          "107:     uint32_t optlen; /* remaining length of data in ioc for the option being",
          "109: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: {",
          "143:     uint64_t magic;",
          "145:     trace_nbd_negotiate_send_rep_len(opt, nbd_opt_lookup(opt),",
          "146:                                      type, nbd_rep_lookup(type), len);",
          "",
          "[Removed Lines]",
          "140: static int nbd_negotiate_send_rep_len(QIOChannel *ioc, uint32_t type,",
          "141:                                       uint32_t opt, uint32_t len, Error **errp)",
          "",
          "[Added Lines]",
          "142: static int nbd_negotiate_send_rep_len(NBDClient *client, uint32_t type,",
          "143:                                       uint32_t len, Error **errp)",
          "146:     QIOChannel *ioc = client->ioc;",
          "147:     uint32_t opt = client->opt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:                                   Error **errp)",
          "179: {",
          "181: }",
          "188: {",
          "189:     va_list va;",
          "190:     char *msg;",
          "",
          "[Removed Lines]",
          "177: static int nbd_negotiate_send_rep(QIOChannel *ioc, uint32_t type, uint32_t opt,",
          "180:     return nbd_negotiate_send_rep_len(ioc, type, opt, 0, errp);",
          "185: static int GCC_FMT_ATTR(5, 6)",
          "186: nbd_negotiate_send_rep_err(QIOChannel *ioc, uint32_t type,",
          "187:                            uint32_t opt, Error **errp, const char *fmt, ...)",
          "",
          "[Added Lines]",
          "181: static int nbd_negotiate_send_rep(NBDClient *client, uint32_t type,",
          "184:     return nbd_negotiate_send_rep_len(client, type, 0, errp);",
          "189: static int GCC_FMT_ATTR(4, 5)",
          "190: nbd_negotiate_send_rep_err(NBDClient *client, uint32_t type,",
          "191:                            Error **errp, const char *fmt, ...)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:     len = strlen(msg);",
          "198:     assert(len < 4096);",
          "199:     trace_nbd_negotiate_send_rep_err(msg);",
          "201:     if (ret < 0) {",
          "202:         goto out;",
          "203:     }",
          "205:         error_prepend(errp, \"write failed (error message): \");",
          "206:         ret = -EIO;",
          "207:     } else {",
          "",
          "[Removed Lines]",
          "200:     ret = nbd_negotiate_send_rep_len(ioc, type, opt, len, errp);",
          "204:     if (nbd_write(ioc, msg, len, errp) < 0) {",
          "",
          "[Added Lines]",
          "204:     ret = nbd_negotiate_send_rep_len(client, type, len, errp);",
          "208:     if (nbd_write(client->ioc, msg, len, errp) < 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:                                        Error **errp)",
          "220: {",
          "221:     size_t name_len, desc_len;",
          "222:     uint32_t len;",
          "223:     const char *name = exp->name ? exp->name : \"\";",
          "224:     const char *desc = exp->description ? exp->description : \"\";",
          "225:     int ret;",
          "227:     trace_nbd_negotiate_send_rep_list(name, desc);",
          "228:     name_len = strlen(name);",
          "229:     desc_len = strlen(desc);",
          "230:     len = name_len + desc_len + sizeof(len);",
          "233:     if (ret < 0) {",
          "234:         return ret;",
          "235:     }",
          "",
          "[Removed Lines]",
          "218: static int nbd_negotiate_send_rep_list(QIOChannel *ioc, NBDExport *exp,",
          "231:     ret = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len,",
          "232:                                      errp);",
          "",
          "[Added Lines]",
          "222: static int nbd_negotiate_send_rep_list(NBDClient *client, NBDExport *exp,",
          "229:     QIOChannel *ioc = client->ioc;",
          "236:     ret = nbd_negotiate_send_rep_len(client, NBD_REP_SERVER, len, errp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258: static int nbd_negotiate_handle_list(NBDClient *client, Error **errp)",
          "259: {",
          "260:     NBDExport *exp;",
          "263:     QTAILQ_FOREACH(exp, &exports, next) {",
          "265:             return -EINVAL;",
          "266:         }",
          "267:     }",
          "270: }",
          "275:                                             uint16_t myflags, bool no_zeroes,",
          "276:                                             Error **errp)",
          "277: {",
          "",
          "[Removed Lines]",
          "264:         if (nbd_negotiate_send_rep_list(client->ioc, exp, errp)) {",
          "269:     return nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, NBD_OPT_LIST, errp);",
          "274: static int nbd_negotiate_handle_export_name(NBDClient *client, uint32_t length,",
          "",
          "[Added Lines]",
          "265:     assert(client->opt == NBD_OPT_LIST);",
          "269:         if (nbd_negotiate_send_rep_list(client, exp, errp)) {",
          "274:     return nbd_negotiate_send_rep(client, NBD_REP_ACK, errp);",
          "279: static int nbd_negotiate_handle_export_name(NBDClient *client,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "288:         [10 .. 133]   reserved     (0) [unless no_zeroes]",
          "290:     trace_nbd_negotiate_handle_export_name();",
          "292:         error_setg(errp, \"Bad length received\");",
          "293:         return -EINVAL;",
          "294:     }",
          "296:         error_prepend(errp, \"read failed: \");",
          "297:         return -EINVAL;",
          "298:     }",
          "301:     trace_nbd_negotiate_handle_export_name_request(name);",
          "",
          "[Removed Lines]",
          "291:     if (length >= sizeof(name)) {",
          "295:     if (nbd_read(client->ioc, name, length, errp) < 0) {",
          "299:     name[length] = '\\0';",
          "",
          "[Added Lines]",
          "296:     if (client->optlen >= sizeof(name)) {",
          "300:     if (nbd_read(client->ioc, name, client->optlen, errp) < 0) {",
          "304:     name[client->optlen] = '\\0';",
          "305:     client->optlen = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "330:                                    uint16_t info, uint32_t length, void *buf,",
          "331:                                    Error **errp)",
          "332: {",
          "333:     int rc;",
          "335:     trace_nbd_negotiate_send_info(info, nbd_info_lookup(info), length);",
          "337:                                     sizeof(info) + length, errp);",
          "338:     if (rc < 0) {",
          "339:         return rc;",
          "",
          "[Removed Lines]",
          "329: static int nbd_negotiate_send_info(NBDClient *client, uint32_t opt,",
          "336:     rc = nbd_negotiate_send_rep_len(client->ioc, NBD_REP_INFO, opt,",
          "",
          "[Added Lines]",
          "335: static int nbd_negotiate_send_info(NBDClient *client,",
          "342:     rc = nbd_negotiate_send_rep_len(client, NBD_REP_INFO,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "360: {",
          "361:     int ret;",
          "365:         return -EIO;",
          "366:     }",
          "369:                                      \"option '%s' should have zero length\",",
          "371:     if (fatal && !ret) {",
          "372:         error_setg(errp, \"option '%s' should have zero length\",",
          "374:         return -EINVAL;",
          "375:     }",
          "376:     return ret;",
          "",
          "[Removed Lines]",
          "358: static int nbd_reject_length(NBDClient *client, uint32_t length,",
          "359:                              uint32_t option, bool fatal, Error **errp)",
          "363:     assert(length);",
          "364:     if (nbd_drop(client->ioc, length, errp) < 0) {",
          "367:     ret = nbd_negotiate_send_rep_err(client->ioc, NBD_REP_ERR_INVALID,",
          "368:                                      option, errp,",
          "370:                                      nbd_opt_lookup(option));",
          "373:                    nbd_opt_lookup(option));",
          "",
          "[Added Lines]",
          "364: static int nbd_reject_length(NBDClient *client, bool fatal, Error **errp)",
          "368:     assert(client->optlen);",
          "369:     if (nbd_drop(client->ioc, client->optlen, errp) < 0) {",
          "372:     ret = nbd_negotiate_send_rep_err(client, NBD_REP_ERR_INVALID, errp,",
          "374:                                      nbd_opt_lookup(client->opt));",
          "377:                    nbd_opt_lookup(client->opt));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "384:                                      Error **errp)",
          "385: {",
          "386:     int rc;",
          "",
          "[Removed Lines]",
          "382: static int nbd_negotiate_handle_info(NBDClient *client, uint32_t length,",
          "383:                                      uint32_t opt, uint16_t myflags,",
          "",
          "[Added Lines]",
          "386: static int nbd_negotiate_handle_info(NBDClient *client, uint16_t myflags,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "401:         2 bytes: N, number of requests (can be 0)",
          "402:         N * 2 bytes: N requests",
          "405:         msg = \"overall request too short\";",
          "406:         goto invalid;",
          "407:     }",
          "",
          "[Removed Lines]",
          "404:     if (length < sizeof(namelen) + sizeof(requests)) {",
          "",
          "[Added Lines]",
          "407:     if (client->optlen < sizeof(namelen) + sizeof(requests)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "409:         return -EIO;",
          "410:     }",
          "411:     be32_to_cpus(&namelen);",
          "414:         msg = \"name length is incorrect\";",
          "415:         goto invalid;",
          "416:     }",
          "",
          "[Removed Lines]",
          "412:     length -= sizeof(namelen);",
          "413:     if (namelen > length - sizeof(requests) || (length - namelen) % 2) {",
          "",
          "[Added Lines]",
          "415:     client->optlen -= sizeof(namelen);",
          "416:     if (namelen > client->optlen - sizeof(requests) ||",
          "417:         (client->optlen - namelen) % 2)",
          "418:     {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "422:         return -EIO;",
          "423:     }",
          "424:     name[namelen] = '\\0';",
          "426:     trace_nbd_negotiate_handle_export_name_request(name);",
          "428:     if (nbd_read(client->ioc, &requests, sizeof(requests), errp) < 0) {",
          "429:         return -EIO;",
          "430:     }",
          "431:     be16_to_cpus(&requests);",
          "433:     trace_nbd_negotiate_handle_info_requests(requests);",
          "435:         msg = \"incorrect number of  requests for overall length\";",
          "436:         goto invalid;",
          "437:     }",
          "",
          "[Removed Lines]",
          "425:     length -= namelen;",
          "432:     length -= sizeof(requests);",
          "434:     if (requests != length / sizeof(request)) {",
          "",
          "[Added Lines]",
          "430:     client->optlen -= namelen;",
          "437:     client->optlen -= sizeof(requests);",
          "439:     if (requests != client->optlen / sizeof(request)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "440:             return -EIO;",
          "441:         }",
          "442:         be16_to_cpus(&request);",
          "444:         trace_nbd_negotiate_handle_info_request(request,",
          "445:                                                 nbd_info_lookup(request));",
          "",
          "[Removed Lines]",
          "443:         length -= sizeof(request);",
          "",
          "[Added Lines]",
          "448:         client->optlen -= sizeof(request);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "455:             break;",
          "456:         }",
          "457:     }",
          "460:     exp = nbd_export_find(name);",
          "461:     if (!exp) {",
          "464:                                           name);",
          "465:     }",
          "468:     if (sendname) {",
          "470:                                      errp);",
          "471:         if (rc < 0) {",
          "472:             return rc;",
          "",
          "[Removed Lines]",
          "458:     assert(length == 0);",
          "462:         return nbd_negotiate_send_rep_err(client->ioc, NBD_REP_ERR_UNKNOWN,",
          "463:                                           opt, errp, \"export '%s' not present\",",
          "469:         rc = nbd_negotiate_send_info(client, opt, NBD_INFO_NAME, namelen, name,",
          "",
          "[Added Lines]",
          "463:     assert(client->optlen == 0);",
          "467:         return nbd_negotiate_send_rep_err(client, NBD_REP_ERR_UNKNOWN,",
          "468:                                           errp, \"export '%s' not present\",",
          "474:         rc = nbd_negotiate_send_info(client, NBD_INFO_NAME, namelen, name,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "478:     if (exp->description) {",
          "479:         size_t len = strlen(exp->description);",
          "482:                                      len, exp->description, errp);",
          "483:         if (rc < 0) {",
          "484:             return rc;",
          "",
          "[Removed Lines]",
          "481:         rc = nbd_negotiate_send_info(client, opt, NBD_INFO_DESCRIPTION,",
          "",
          "[Added Lines]",
          "486:         rc = nbd_negotiate_send_info(client, NBD_INFO_DESCRIPTION,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "496:     sizes[1] = 4096;",
          "",
          "[Removed Lines]",
          "493:     sizes[0] = (opt == NBD_OPT_INFO || blocksize) ? BDRV_SECTOR_SIZE : 1;",
          "",
          "[Added Lines]",
          "498:     sizes[0] =",
          "499:             (client->opt == NBD_OPT_INFO || blocksize) ? BDRV_SECTOR_SIZE : 1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "500:     cpu_to_be32s(&sizes[0]);",
          "501:     cpu_to_be32s(&sizes[1]);",
          "502:     cpu_to_be32s(&sizes[2]);",
          "504:                                  sizeof(sizes), sizes, errp);",
          "505:     if (rc < 0) {",
          "506:         return rc;",
          "",
          "[Removed Lines]",
          "503:     rc = nbd_negotiate_send_info(client, opt, NBD_INFO_BLOCK_SIZE,",
          "",
          "[Added Lines]",
          "509:     rc = nbd_negotiate_send_info(client, NBD_INFO_BLOCK_SIZE,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "511:                                              exp->nbdflags | myflags);",
          "512:     stq_be_p(buf, exp->size);",
          "513:     stw_be_p(buf + 8, exp->nbdflags | myflags);",
          "515:                                  sizeof(buf), buf, errp);",
          "516:     if (rc < 0) {",
          "517:         return rc;",
          "",
          "[Removed Lines]",
          "514:     rc = nbd_negotiate_send_info(client, opt, NBD_INFO_EXPORT,",
          "",
          "[Added Lines]",
          "520:     rc = nbd_negotiate_send_info(client, NBD_INFO_EXPORT,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "527:                                           errp,",
          "528:                                           \"request NBD_INFO_BLOCK_SIZE to \"",
          "529:                                           \"use this export\");",
          "530:     }",
          "534:     if (rc < 0) {",
          "535:         return rc;",
          "536:     }",
          "539:         client->exp = exp;",
          "540:         QTAILQ_INSERT_TAIL(&client->exp->clients, client, next);",
          "541:         nbd_export_get(client->exp);",
          "",
          "[Removed Lines]",
          "524:     if (opt == NBD_OPT_INFO && !blocksize) {",
          "525:         return nbd_negotiate_send_rep_err(client->ioc,",
          "526:                                           NBD_REP_ERR_BLOCK_SIZE_REQD, opt,",
          "533:     rc = nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, opt, errp);",
          "538:     if (opt == NBD_OPT_GO) {",
          "",
          "[Added Lines]",
          "530:     if (client->opt == NBD_OPT_INFO && !blocksize) {",
          "531:         return nbd_negotiate_send_rep_err(client,",
          "532:                                           NBD_REP_ERR_BLOCK_SIZE_REQD,",
          "539:     rc = nbd_negotiate_send_rep(client, NBD_REP_ACK, errp);",
          "544:     if (client->opt == NBD_OPT_GO) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "544:     return rc;",
          "546:  invalid:",
          "548:         return -EIO;",
          "549:     }",
          "551:                                       errp, \"%s\", msg);",
          "552: }",
          "",
          "[Removed Lines]",
          "547:     if (nbd_drop(client->ioc, length, errp) < 0) {",
          "550:     return nbd_negotiate_send_rep_err(client->ioc, NBD_REP_ERR_INVALID, opt,",
          "",
          "[Added Lines]",
          "553:     if (nbd_drop(client->ioc, client->optlen, errp) < 0) {",
          "556:     return nbd_negotiate_send_rep_err(client, NBD_REP_ERR_INVALID,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "561:     QIOChannelTLS *tioc;",
          "562:     struct NBDTLSHandshakeData data = { 0 };",
          "564:     trace_nbd_negotiate_handle_starttls();",
          "565:     ioc = client->ioc;",
          "569:         return NULL;",
          "570:     }",
          "",
          "[Removed Lines]",
          "567:     if (nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK,",
          "568:                                NBD_OPT_STARTTLS, errp) < 0) {",
          "",
          "[Added Lines]",
          "570:     assert(client->opt == NBD_OPT_STARTTLS);",
          "575:     if (nbd_negotiate_send_rep(client, NBD_REP_ACK, errp) < 0) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "670:             return -EINVAL;",
          "671:         }",
          "672:         option = be32_to_cpu(option);",
          "674:         if (nbd_read(client->ioc, &length, sizeof(length), errp) < 0) {",
          "675:             error_prepend(errp, \"read failed: \");",
          "676:             return -EINVAL;",
          "677:         }",
          "678:         length = be32_to_cpu(length);",
          "680:         if (length > NBD_MAX_BUFFER_SIZE) {",
          "681:             error_setg(errp, \"len (%\" PRIu32\" ) is larger than max len (%u)\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:         client->opt = option;",
          "687:         client->optlen = length;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "697:                 if (length) {",
          "702:                 }",
          "703:                 tioc = nbd_negotiate_handle_starttls(client, errp);",
          "704:                 if (!tioc) {",
          "",
          "[Removed Lines]",
          "700:                     return nbd_reject_length(client, length, option, true,",
          "701:                                              errp);",
          "",
          "[Added Lines]",
          "709:                     return nbd_reject_length(client, true, errp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "719:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "720:                     return -EIO;",
          "721:                 }",
          "725:                                                  \"Option 0x%\" PRIx32",
          "726:                                                  \"not permitted before TLS\",",
          "727:                                                  option);",
          "",
          "[Removed Lines]",
          "722:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "723:                                                  NBD_REP_ERR_TLS_REQD,",
          "724:                                                  option, errp,",
          "",
          "[Added Lines]",
          "730:                 ret = nbd_negotiate_send_rep_err(client,",
          "731:                                                  NBD_REP_ERR_TLS_REQD, errp,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "737:             switch (option) {",
          "738:             case NBD_OPT_LIST:",
          "739:                 if (length) {",
          "742:                 } else {",
          "743:                     ret = nbd_negotiate_handle_list(client, errp);",
          "744:                 }",
          "",
          "[Removed Lines]",
          "740:                     ret = nbd_reject_length(client, length, option, false,",
          "741:                                             errp);",
          "",
          "[Added Lines]",
          "747:                     ret = nbd_reject_length(client, false, errp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "752:                 return 1;",
          "754:             case NBD_OPT_EXPORT_NAME:",
          "756:                                                         myflags, no_zeroes,",
          "757:                                                         errp);",
          "759:             case NBD_OPT_INFO:",
          "760:             case NBD_OPT_GO:",
          "763:                 if (ret == 1) {",
          "764:                     assert(option == NBD_OPT_GO);",
          "765:                     return 0;",
          "",
          "[Removed Lines]",
          "751:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, option, NULL);",
          "755:                 return nbd_negotiate_handle_export_name(client, length,",
          "761:                 ret = nbd_negotiate_handle_info(client, length, option,",
          "762:                                                 myflags, errp);",
          "",
          "[Added Lines]",
          "757:                 nbd_negotiate_send_rep(client, NBD_REP_ACK, NULL);",
          "761:                 return nbd_negotiate_handle_export_name(client,",
          "767:                 ret = nbd_negotiate_handle_info(client, myflags, errp);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "769:             case NBD_OPT_STARTTLS:",
          "770:                 if (length) {",
          "773:                 } else if (client->tlscreds) {",
          "777:                                                      \"TLS already enabled\");",
          "778:                 } else {",
          "782:                                                      \"TLS not configured\");",
          "783:                 }",
          "784:                 break;",
          "786:             case NBD_OPT_STRUCTURED_REPLY:",
          "787:                 if (length) {",
          "790:                 } else if (client->structured_reply) {",
          "791:                     ret = nbd_negotiate_send_rep_err(",
          "793:                         \"structured reply already negotiated\");",
          "794:                 } else {",
          "797:                     client->structured_reply = true;",
          "798:                     myflags |= NBD_FLAG_SEND_DF;",
          "799:                 }",
          "",
          "[Removed Lines]",
          "771:                     ret = nbd_reject_length(client, length, option, false,",
          "772:                                             errp);",
          "774:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "775:                                                      NBD_REP_ERR_INVALID,",
          "776:                                                      option, errp,",
          "779:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "780:                                                      NBD_REP_ERR_POLICY,",
          "781:                                                      option, errp,",
          "788:                     ret = nbd_reject_length(client, length, option, false,",
          "789:                                             errp);",
          "792:                         client->ioc, NBD_REP_ERR_INVALID, option, errp,",
          "795:                     ret = nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK,",
          "796:                                                  option, errp);",
          "",
          "[Added Lines]",
          "776:                     ret = nbd_reject_length(client, false, errp);",
          "778:                     ret = nbd_negotiate_send_rep_err(client,",
          "779:                                                      NBD_REP_ERR_INVALID, errp,",
          "782:                     ret = nbd_negotiate_send_rep_err(client,",
          "783:                                                      NBD_REP_ERR_POLICY, errp,",
          "790:                     ret = nbd_reject_length(client, false, errp);",
          "793:                         client, NBD_REP_ERR_INVALID, errp,",
          "796:                     ret = nbd_negotiate_send_rep(client, NBD_REP_ACK, errp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "803:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "804:                     return -EIO;",
          "805:                 }",
          "809:                                                  \"Unsupported option 0x%\"",
          "810:                                                  PRIx32 \" (%s)\", option,",
          "811:                                                  nbd_opt_lookup(option));",
          "",
          "[Removed Lines]",
          "806:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "807:                                                  NBD_REP_ERR_UNSUP,",
          "808:                                                  option, errp,",
          "",
          "[Added Lines]",
          "806:                 ret = nbd_negotiate_send_rep_err(client,",
          "807:                                                  NBD_REP_ERR_UNSUP, errp,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "819:             switch (option) {",
          "820:             case NBD_OPT_EXPORT_NAME:",
          "822:                                                         myflags, no_zeroes,",
          "823:                                                         errp);",
          "",
          "[Removed Lines]",
          "821:                 return nbd_negotiate_handle_export_name(client, length,",
          "",
          "[Added Lines]",
          "820:                 return nbd_negotiate_handle_export_name(client,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "898:         }",
          "899:     }",
          "901:     trace_nbd_negotiate_success();",
          "903:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900:     assert(!client->optlen);",
          "",
          "---------------"
        ]
      }
    }
  ]
}