{
  "cve_id": "CVE-2017-12192",
  "cve_desc": "The keyctl_read_key function in security/keys/keyctl.c in the Key Management subcomponent in the Linux kernel before 4.13.5 does not properly consider that a key may be possessed but negatively instantiated, which allows local users to cause a denial of service (OOPS and system crash) via a crafted KEYCTL_READ operation.",
  "repo": "torvalds/linux",
  "patch_hash": "37863c43b2c6464f252862bf2e9768264e961678",
  "patch_info": {
    "commit_hash": "37863c43b2c6464f252862bf2e9768264e961678",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/37863c43b2c6464f252862bf2e9768264e961678",
    "files": [
      "security/keys/keyctl.c"
    ],
    "message": "KEYS: prevent KEYCTL_READ on negative key\n\nBecause keyctl_read_key() looks up the key with no permissions\nrequested, it may find a negatively instantiated key.  If the key is\nalso possessed, we went ahead and called ->read() on the key.  But the\nkey payload will actually contain the ->reject_error rather than the\nnormal payload.  Thus, the kernel oopses trying to read the\nuser_key_payload from memory address (int)-ENOKEY = 0x00000000ffffff82.\n\nFortunately the payload data is stored inline, so it shouldn't be\npossible to abuse this as an arbitrary memory read primitive...\n\nReproducer:\n    keyctl new_session\n    keyctl request2 user desc '' @s\n    keyctl read $(keyctl show | awk '/user: desc/ {print $1}')\n\nIt causes a crash like the following:\n     BUG: unable to handle kernel paging request at 00000000ffffff92\n     IP: user_read+0x33/0xa0\n     PGD 36a54067 P4D 36a54067 PUD 0\n     Oops: 0000 [#1] SMP\n     CPU: 0 PID: 211 Comm: keyctl Not tainted 4.14.0-rc1 #337\n     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-20170228_101828-anatol 04/01/2014\n     task: ffff90aa3b74c3c0 task.stack: ffff9878c0478000\n     RIP: 0010:user_read+0x33/0xa0\n     RSP: 0018:ffff9878c047bee8 EFLAGS: 00010246\n     RAX: 0000000000000001 RBX: ffff90aa3d7da340 RCX: 0000000000000017\n     RDX: 0000000000000000 RSI: 00000000ffffff82 RDI: ffff90aa3d7da340\n     RBP: ffff9878c047bf00 R08: 00000024f95da94f R09: 0000000000000000\n     R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000\n     R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n     FS:  00007f58ece69740(0000) GS:ffff90aa3e200000(0000) knlGS:0000000000000000\n     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n     CR2: 00000000ffffff92 CR3: 0000000036adc001 CR4: 00000000003606f0\n     Call Trace:\n      keyctl_read_key+0xac/0xe0\n      SyS_keyctl+0x99/0x120\n      entry_SYSCALL_64_fastpath+0x1f/0xbe\n     RIP: 0033:0x7f58ec787bb9\n     RSP: 002b:00007ffc8d401678 EFLAGS: 00000206 ORIG_RAX: 00000000000000fa\n     RAX: ffffffffffffffda RBX: 00007ffc8d402800 RCX: 00007f58ec787bb9\n     RDX: 0000000000000000 RSI: 00000000174a63ac RDI: 000000000000000b\n     RBP: 0000000000000004 R08: 00007ffc8d402809 R09: 0000000000000020\n     R10: 0000000000000000 R11: 0000000000000206 R12: 00007ffc8d402800\n     R13: 00007ffc8d4016e0 R14: 0000000000000000 R15: 0000000000000000\n     Code: e5 41 55 49 89 f5 41 54 49 89 d4 53 48 89 fb e8 a4 b4 ad ff 85 c0 74 09 80 3d b9 4c 96 00 00 74 43 48 8b b3 20 01 00 00 4d 85 ed <0f> b7 5e 10 74 29 4d 85 e4 74 24 4c 39 e3 4c 89 e2 4c 89 ef 48\n     RIP: user_read+0x33/0xa0 RSP: ffff9878c047bee8\n     CR2: 00000000ffffff92\n\nFixes: 61ea0c0ba904 (\"KEYS: Skip key state checks when checking for possession\")\nCc: <stable@vger.kernel.org>\t[v3.13+]\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nSigned-off-by: David Howells <dhowells@redhat.com>",
    "before_after_code_files": [
      "security/keys/keyctl.c||security/keys/keyctl.c"
    ]
  },
  "patch_diff": {
    "security/keys/keyctl.c||security/keys/keyctl.c": [
      "File: security/keys/keyctl.c -> security/keys/keyctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "767:  key = key_ref_to_ptr(key_ref);",
      "770:  ret = key_permission(key_ref, KEY_NEED_READ);",
      "771:  if (ret == 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769:  if (test_bit(KEY_FLAG_NEGATIVE, &key->flags)) {",
      "770:   ret = -ENOKEY;",
      "771:   goto error2;",
      "772:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f0fb83cb9201a9f272f8ac771eed6b1e5745375c",
      "candidate_info": {
        "commit_hash": "f0fb83cb9201a9f272f8ac771eed6b1e5745375c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f0fb83cb9201a9f272f8ac771eed6b1e5745375c",
        "files": [
          "fs/dlm/lowcomms.c"
        ],
        "message": "DLM: fix double list_del()\n\ndlm_lowcomms_stop() was not functioning properly. Correctly, we have to\nwait until all processing is finished with send_workqueue and\nrecv_workqueue.\nThis problem causes the following issue. Senario is\n\n1. dlm_send thread:\n    send_to_sock refers con->writequeue\n2. main thread:\n    dlm_lowcomms_stop calls list_del\n3. dlm_send thread:\n    send_to_sock calls list_del in writequeue_entry_complete\n\n[ 1925.770305] dlm: canceled swork for node 4\n[ 1925.772374] general protection fault: 0000 [#1] SMP\n[ 1925.777930] Modules linked in: ocfs2_stack_user ocfs2 ocfs2_nodemanager ocfs2_stackglue dlm fmxnet(O) fmx_api(O) fmx_cu(O) igb(O) kvm_intel kvm irqbypass autofs4\n[ 1925.794131] CPU: 3 PID: 6994 Comm: kworker/u8:0 Tainted: G           O    4.4.39 #1\n[ 1925.802684] Hardware name: TOSHIBA OX/OX, BIOS OX-P0015 12/03/2015\n[ 1925.809595] Workqueue: dlm_send process_send_sockets [dlm]\n[ 1925.815714] task: ffff8804398d3c00 ti: ffff88046910c000 task.ti: ffff88046910c000\n[ 1925.824072] RIP: 0010:[<ffffffffa04bd158>]  [<ffffffffa04bd158>] process_send_sockets+0xf8/0x280 [dlm]\n[ 1925.834480] RSP: 0018:ffff88046910fde0  EFLAGS: 00010246\n[ 1925.840411] RAX: dead000000000200 RBX: 0000000000000001 RCX: 000000000000000a\n[ 1925.848372] RDX: ffff88046bd980c0 RSI: 0000000000000000 RDI: ffff8804673c5670\n[ 1925.856341] RBP: ffff88046910fe20 R08: 00000000000000c9 R09: 0000000000000010\n[ 1925.864311] R10: ffffffff81e22fc0 R11: 0000000000000000 R12: ffff8804673c56d8\n[ 1925.872281] R13: ffff8804673c5660 R14: ffff88046bd98440 R15: 0000000000000058\n[ 1925.880251] FS:  0000000000000000(0000) GS:ffff88047fd80000(0000) knlGS:0000000000000000\n[ 1925.889280] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n[ 1925.895694] CR2: 00007fff09eadf58 CR3: 00000004690f5000 CR4: 00000000001006e0\n[ 1925.903663] Stack:\n[ 1925.905903]  ffff8804673c5630 ffff8804673c5620 ffff8804673c5670 ffff88007d219b40\n[ 1925.914181]  ffff88046f095800 0000000000000100 ffff8800717a1400 ffff8804673c56d8\n[ 1925.922459]  ffff88046910fe60 ffffffff81073db2 00ff880400000000 ffff88007d219b40\n[ 1925.930736] Call Trace:\n[ 1925.933468]  [<ffffffff81073db2>] process_one_work+0x162/0x450\n[ 1925.939983]  [<ffffffff81074459>] worker_thread+0x69/0x4a0\n[ 1925.946109]  [<ffffffff810743f0>] ? rescuer_thread+0x350/0x350\n[ 1925.952622]  [<ffffffff8107956f>] kthread+0xef/0x110\n[ 1925.958165]  [<ffffffff81079480>] ? kthread_park+0x60/0x60\n[ 1925.964283]  [<ffffffff8186ab2f>] ret_from_fork+0x3f/0x70\n[ 1925.970312]  [<ffffffff81079480>] ? kthread_park+0x60/0x60\n[ 1925.976436] Code: 01 00 00 48 8b 7d d0 e8 07 d3 3a e1 45 01 7e 18 45 29 7e 1c 75 ab 41 8b 46 24 85 c0 75 a3 49 8b 16 49 8b 46 08 31 f6 48 89 42 08 <48> 89 10 48 b8 00 01 00 00 00 00 ad de 49 8b 7e 10 49 89 06 66\n[ 1925.997791] RIP  [<ffffffffa04bd158>] process_send_sockets+0xf8/0x280 [dlm]\n[ 1926.005577]  RSP <ffff88046910fde0>\n\nSigned-off-by: Tadashi Miyauchi <miyauchi@toshiba-tops.co.jp>\nSigned-off-by: Tsutomu Owa <tsutomu.owa@toshiba.co.jp>\nSigned-off-by: David Teigland <teigland@redhat.com>",
        "before_after_code_files": [
          "fs/dlm/lowcomms.c||fs/dlm/lowcomms.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/dlm/lowcomms.c||fs/dlm/lowcomms.c": [
          "File: fs/dlm/lowcomms.c -> fs/dlm/lowcomms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:  return 0;",
          "1629: }",
          "1632: {",
          "1634:  if (con->sock && con->sock->sk)",
          "1635:   con->sock->sk->sk_user_data = NULL;",
          "1636: }",
          "1638: static void free_conn(struct connection *con)",
          "",
          "[Removed Lines]",
          "1631: static void stop_conn(struct connection *con)",
          "1633:  con->flags |= 0x0F;",
          "",
          "[Added Lines]",
          "1631: static void _stop_conn(struct connection *con, bool and_other)",
          "1633:  mutex_lock(&con->sock_mutex);",
          "1634:  set_bit(CF_READ_PENDING, &con->flags);",
          "1637:  if (con->othercon && and_other)",
          "1638:   _stop_conn(con->othercon, false);",
          "1639:  mutex_unlock(&con->sock_mutex);",
          "1640: }",
          "1642: static void stop_conn(struct connection *con)",
          "1643: {",
          "1644:  _stop_conn(con, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644:  kmem_cache_free(con_cache, con);",
          "1645: }",
          "1647: void dlm_lowcomms_stop(void)",
          "1648: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1656: static void work_flush(void)",
          "1657: {",
          "1658:  int ok;",
          "1659:  int i;",
          "1660:  struct hlist_node *n;",
          "1661:  struct connection *con;",
          "1663:  flush_workqueue(recv_workqueue);",
          "1664:  flush_workqueue(send_workqueue);",
          "1665:  do {",
          "1666:   ok = 1;",
          "1667:   foreach_conn(stop_conn);",
          "1668:   flush_workqueue(recv_workqueue);",
          "1669:   flush_workqueue(send_workqueue);",
          "1670:   for (i = 0; i < CONN_HASH_SIZE && ok; i++) {",
          "1671:    hlist_for_each_entry_safe(con, n,",
          "1672:         &connection_hash[i], list) {",
          "1673:     ok &= test_bit(CF_READ_PENDING, &con->flags);",
          "1674:     if (con->othercon)",
          "1675:      ok &= test_bit(CF_READ_PENDING,",
          "1676:              &con->othercon->flags);",
          "1677:    }",
          "1678:   }",
          "1679:  } while (!ok);",
          "1680: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1652:  mutex_lock(&connections_lock);",
          "1653:  dlm_allow_conn = 0;",
          "1655:  clean_writequeues();",
          "1656:  foreach_conn(free_conn);",
          "1659:  work_stop();",
          "1661:  kmem_cache_destroy(con_cache);",
          "",
          "[Removed Lines]",
          "1654:  foreach_conn(stop_conn);",
          "1657:  mutex_unlock(&connections_lock);",
          "",
          "[Added Lines]",
          "1689:  mutex_unlock(&connections_lock);",
          "1690:  work_flush();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c88f0e6b06f4092995688211a631bb436125d77b",
      "candidate_info": {
        "commit_hash": "c88f0e6b06f4092995688211a631bb436125d77b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c88f0e6b06f4092995688211a631bb436125d77b",
        "files": [
          "drivers/scsi/scsi_transport_iscsi.c"
        ],
        "message": "scsi: scsi_transport_iscsi: fix the issue that iscsi_if_rx doesn't parse nlmsg properly\n\nChunYu found a kernel crash by syzkaller:\n\n[  651.617875] kasan: CONFIG_KASAN_INLINE enabled\n[  651.618217] kasan: GPF could be caused by NULL-ptr deref or user memory access\n[  651.618731] general protection fault: 0000 [#1] SMP KASAN\n[  651.621543] CPU: 1 PID: 9539 Comm: scsi Not tainted 4.11.0.cov #32\n[  651.621938] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n[  651.622309] task: ffff880117780000 task.stack: ffff8800a3188000\n[  651.622762] RIP: 0010:skb_release_data+0x26c/0x590\n[...]\n[  651.627260] Call Trace:\n[  651.629156]  skb_release_all+0x4f/0x60\n[  651.629450]  consume_skb+0x1a5/0x600\n[  651.630705]  netlink_unicast+0x505/0x720\n[  651.632345]  netlink_sendmsg+0xab2/0xe70\n[  651.633704]  sock_sendmsg+0xcf/0x110\n[  651.633942]  ___sys_sendmsg+0x833/0x980\n[  651.637117]  __sys_sendmsg+0xf3/0x240\n[  651.638820]  SyS_sendmsg+0x32/0x50\n[  651.639048]  entry_SYSCALL_64_fastpath+0x1f/0xc2\n\nIt's caused by skb_shared_info at the end of sk_buff was overwritten by\nISCSI_KEVENT_IF_ERROR when parsing nlmsg info from skb in iscsi_if_rx.\n\nDuring the loop if skb->len == nlh->nlmsg_len and both are sizeof(*nlh),\nev = nlmsg_data(nlh) will acutally get skb_shinfo(SKB) instead and set a\nnew value to skb_shinfo(SKB)->nr_frags by ev->type.\n\nThis patch is to fix it by checking nlh->nlmsg_len properly there to\navoid over accessing sk_buff.\n\nReported-by: ChunYu Wang <chunwang@redhat.com>\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nAcked-by: Chris Leech <cleech@redhat.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/scsi_transport_iscsi.c||drivers/scsi/scsi_transport_iscsi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/scsi_transport_iscsi.c||drivers/scsi/scsi_transport_iscsi.c": [
          "File: drivers/scsi/scsi_transport_iscsi.c -> drivers/scsi/scsi_transport_iscsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3689:   uint32_t group;",
          "3691:   nlh = nlmsg_hdr(skb);",
          "3693:       skb->len < nlh->nlmsg_len) {",
          "3694:    break;",
          "3695:   }",
          "",
          "[Removed Lines]",
          "3692:   if (nlh->nlmsg_len < sizeof(*nlh) ||",
          "",
          "[Added Lines]",
          "3692:   if (nlh->nlmsg_len < sizeof(*nlh) + sizeof(*ev) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89fcbb564f4a64c439d597c2702f990eed49c8a1",
      "candidate_info": {
        "commit_hash": "89fcbb564f4a64c439d597c2702f990eed49c8a1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/89fcbb564f4a64c439d597c2702f990eed49c8a1",
        "files": [
          "net/netfilter/xt_socket.c"
        ],
        "message": "netfilter: xt_socket: Restore mark from full sockets only\n\nAn out of bounds error was detected on an ARM64 target with\nAndroid based kernel 4.9. This occurs while trying to\nrestore mark on a skb from an inet request socket.\n\nBUG: KASAN: slab-out-of-bounds in socket_match.isra.2+0xc8/0x1f0 net/netfilter/xt_socket.c:248\nRead of size 4 at addr ffffffc06a8d824c by task syz-fuzzer/1532\nCPU: 7 PID: 1532 Comm: syz-fuzzer Tainted: G        W  O    4.9.41+ #1\nCall trace:\n[<ffffff900808d2f8>] dump_backtrace+0x0/0x440 arch/arm64/kernel/traps.c:76\n[<ffffff900808d760>] show_stack+0x28/0x38 arch/arm64/kernel/traps.c:226\n[<ffffff90085f7dc8>] __dump_stack lib/dump_stack.c:15 [inline]\n[<ffffff90085f7dc8>] dump_stack+0xe4/0x134 lib/dump_stack.c:51\n[<ffffff900830f358>] print_address_description+0x68/0x258 mm/kasan/report.c:248\n[<ffffff900830f770>] kasan_report_error mm/kasan/report.c:347 [inline]\n[<ffffff900830f770>] kasan_report.part.2+0x228/0x2f0 mm/kasan/report.c:371\n[<ffffff900830fdec>] kasan_report+0x5c/0x70 mm/kasan/report.c:372\n[<ffffff900830de98>] check_memory_region_inline mm/kasan/kasan.c:308 [inline]\n[<ffffff900830de98>] __asan_load4+0x88/0xa0 mm/kasan/kasan.c:740\n[<ffffff90097498f8>] socket_match.isra.2+0xc8/0x1f0 net/netfilter/xt_socket.c:248\n[<ffffff9009749a5c>] socket_mt4_v1_v2_v3+0x3c/0x48 net/netfilter/xt_socket.c:272\n[<ffffff90097f7e4c>] ipt_do_table+0x54c/0xad8 net/ipv4/netfilter/ip_tables.c:311\n[<ffffff90097fcf14>] iptable_mangle_hook+0x6c/0x220 net/ipv4/netfilter/iptable_mangle.c:90\n...\nAllocated by task 1532:\n save_stack_trace_tsk+0x0/0x2a0 arch/arm64/kernel/stacktrace.c:131\n save_stack_trace+0x28/0x38 arch/arm64/kernel/stacktrace.c:215\n save_stack mm/kasan/kasan.c:495 [inline]\n set_track mm/kasan/kasan.c:507 [inline]\n kasan_kmalloc+0xd8/0x188 mm/kasan/kasan.c:599\n kasan_slab_alloc+0x14/0x20 mm/kasan/kasan.c:537\n slab_post_alloc_hook mm/slab.h:417 [inline]\n slab_alloc_node mm/slub.c:2728 [inline]\n slab_alloc mm/slub.c:2736 [inline]\n kmem_cache_alloc+0x14c/0x2e8 mm/slub.c:2741\n reqsk_alloc include/net/request_sock.h:87 [inline]\n inet_reqsk_alloc+0x4c/0x238 net/ipv4/tcp_input.c:6236\n tcp_conn_request+0x2b0/0xea8 net/ipv4/tcp_input.c:6341\n tcp_v4_conn_request+0xe0/0x100 net/ipv4/tcp_ipv4.c:1256\n tcp_rcv_state_process+0x384/0x18a8 net/ipv4/tcp_input.c:5926\n tcp_v4_do_rcv+0x2f0/0x3e0 net/ipv4/tcp_ipv4.c:1430\n tcp_v4_rcv+0x1278/0x1350 net/ipv4/tcp_ipv4.c:1709\n ip_local_deliver_finish+0x174/0x3e0 net/ipv4/ip_input.c:216\n\nv1->v2: Change socket_mt6_v1_v2_v3() as well as mentioned by Eric\nv2->v3: Put the correct fixes tag\n\nFixes: 01555e74bde5 (\"netfilter: xt_socket: add XT_SOCKET_RESTORESKMARK flag\")\nSigned-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "net/netfilter/xt_socket.c||net/netfilter/xt_socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/netfilter/xt_socket.c||net/netfilter/xt_socket.c": [
          "File: net/netfilter/xt_socket.c -> net/netfilter/xt_socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:    transparent = nf_sk_is_transparent(sk);",
          "78:   if (info->flags & XT_SOCKET_RESTORESKMARK && !wildcard &&",
          "80:    pskb->mark = sk->sk_mark;",
          "82:   if (sk != skb->sk)",
          "",
          "[Removed Lines]",
          "79:       transparent)",
          "",
          "[Added Lines]",
          "79:       transparent && sk_fullsock(sk))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:    transparent = nf_sk_is_transparent(sk);",
          "135:   if (info->flags & XT_SOCKET_RESTORESKMARK && !wildcard &&",
          "137:    pskb->mark = sk->sk_mark;",
          "139:   if (sk != skb->sk)",
          "",
          "[Removed Lines]",
          "136:       transparent)",
          "",
          "[Added Lines]",
          "136:       transparent && sk_fullsock(sk))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38683148828165ea0b66ace93a9fedc2d3281e27",
      "candidate_info": {
        "commit_hash": "38683148828165ea0b66ace93a9fedc2d3281e27",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/38683148828165ea0b66ace93a9fedc2d3281e27",
        "files": [
          "kernel/cgroup/cgroup.c"
        ],
        "message": "cgroup: statically initialize init_css_set->dfl_cgrp\n\nLike other csets, init_css_set's dfl_cgrp is initialized when the cset\ngets linked.  init_css_set gets linked in cgroup_init().  This has\nbeen fine till now but the recently added basic CPU usage accounting\nmay end up accessing dfl_cgrp of init before cgroup_init() leading to\nthe following oops.\n\n  SELinux:  Initializing.\n  BUG: unable to handle kernel NULL pointer dereference at 00000000000000b0\n  IP: account_system_index_time+0x60/0x90\n  PGD 0 P4D 0\n  Oops: 0000 [#1] SMP\n  Modules linked in:\n  CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.14.0-rc2-00003-g041cd64 #10\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n  +1.9.3-20161025_171302-gandalf 04/01/2014\n  task: ffffffff81e10480 task.stack: ffffffff81e00000\n  RIP: 0010:account_system_index_time+0x60/0x90\n  RSP: 0000:ffff880011e03cb8 EFLAGS: 00010002\n  RAX: ffffffff81ef8800 RBX: ffffffff81e10480 RCX: 0000000000000003\n  RDX: 0000000000000000 RSI: 00000000000f4240 RDI: 0000000000000000\n  RBP: ffff880011e03cc0 R08: 0000000000010000 R09: 0000000000000000\n  R10: 0000000000000020 R11: 0000003b9aca0000 R12: 000000000001c100\n  R13: 0000000000000000 R14: ffffffff81e10480 R15: ffffffff81e03cd8\n  FS:  0000000000000000(0000) GS:ffff880011e00000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00000000000000b0 CR3: 0000000001e09000 CR4: 00000000000006b0\n  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n  Call Trace:\n   <IRQ>\n   account_system_time+0x45/0x60\n   account_process_tick+0x5a/0x140\n   update_process_times+0x22/0x60\n   tick_periodic+0x2b/0x90\n   tick_handle_periodic+0x25/0x70\n   timer_interrupt+0x15/0x20\n   __handle_irq_event_percpu+0x7e/0x1b0\n   handle_irq_event_percpu+0x23/0x60\n   handle_irq_event+0x42/0x70\n   handle_level_irq+0x83/0x100\n   handle_irq+0x6f/0x110\n   do_IRQ+0x46/0xd0\n   common_interrupt+0x9d/0x9d\n\nFix it by statically initializing init_css_set.dfl_cgrp so that init's\ndefault cgroup is accessible from the get-go.\n\nFixes: 041cd640b2f3 (\"cgroup: Implement cgroup2 basic CPU usage accounting\")\nReported-by: \u201ckbuild-all@01.org\u201d <kbuild-all@01.org>\nSigned-off-by: Tejun Heo <tj@kernel.org>",
        "before_after_code_files": [
          "kernel/cgroup/cgroup.c||kernel/cgroup/cgroup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/cgroup/cgroup.c||kernel/cgroup/cgroup.c": [
          "File: kernel/cgroup/cgroup.c -> kernel/cgroup/cgroup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:  .cgrp_links  = LIST_HEAD_INIT(init_css_set.cgrp_links),",
          "650:  .mg_preload_node = LIST_HEAD_INIT(init_css_set.mg_preload_node),",
          "651:  .mg_node  = LIST_HEAD_INIT(init_css_set.mg_node),",
          "652: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:  .dfl_cgrp  = &cgrp_dfl_root.cgrp,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbd770aee018c8f46d8f43263928440d5ac04b36",
      "candidate_info": {
        "commit_hash": "bbd770aee018c8f46d8f43263928440d5ac04b36",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bbd770aee018c8f46d8f43263928440d5ac04b36",
        "files": [
          "drivers/media/platform/qcom/venus/helpers.c"
        ],
        "message": "media: venus: init registered list on streamoff\n\nAdd missing init_list_head for the registered buffer list.\nAbsence of the init could lead to a unhandled kernel paging\nrequest as below, when streamon/streamoff are called in row.\n\n[338046.571321] Unable to handle kernel paging request at virtual address fffffffffffffe00\n[338046.574849] pgd = ffff800034820000\n[338046.582381] [fffffffffffffe00] *pgd=00000000b60f5003[338046.582545]\n, *pud=00000000b1f31003\n, *pmd=0000000000000000[338046.592082]\n[338046.597754] Internal error: Oops: 96000004 [#1] PREEMPT SMP\n[338046.601671] Modules linked in: venus_enc venus_dec venus_core\nusb_f_ecm g_ether usb_f_rndis u_ether libcomposite ipt_MASQUERADE\nnf_nat_masquerade_ipv4 arc4 wcn36xx mac80211 btqcomsmd btqca iptable_nat\nnf_co]\n[338046.662408] CPU: 0 PID: 5433 Comm: irq/160-venus Tainted: G        W\n4.9.39+ #232\n[338046.668024] Hardware name: Qualcomm Technologies, Inc. APQ 8016 SBC\n(DT)\n[338046.675268] task: ffff80003541cb00 task.stack: ffff800026e20000\n[338046.682097] PC is at venus_helper_release_buf_ref+0x28/0x88\n[venus_core]\n[338046.688282] LR is at vdec_event_notify+0xe8/0x150 [venus_dec]\n[338046.695029] pc : [<ffff000000af6c48>] lr : [<ffff000000a6fc60>]\npstate: a0000145\n[338046.701256] sp : ffff800026e23bc0\n[338046.708494] x29: ffff800026e23bc0 x28: 0000000000000000\n[338046.718853] x27: ffff000000afd4f8 x26: ffff800031faa700\n[338046.729253] x25: ffff000000afd790 x24: ffff800031faa618\n[338046.739664] x23: ffff800003e18138 x22: ffff800002fc9810\n[338046.750109] x21: ffff800026e23c28 x20: 0000000000000001\n[338046.760592] x19: ffff80002a13b800 x18: 0000000000000010\n[338046.771099] x17: 0000ffffa3d01600 x16: ffff000008100428\n[338046.781654] x15: 0000000000000006 x14: ffff000089045ba7\n[338046.792250] x13: ffff000009045bb6 x12: 00000000004f37c8\n[338046.802894] x11: 0000000000267211 x10: 0000000000000000\n[338046.813574] x9 : 0000000000032000 x8 : 00000000dc400000\n[338046.824274] x7 : 0000000000000000 x6 : ffff800031faa728\n[338046.835005] x5 : ffff80002a13b850 x4 : 0000000000000000\n[338046.845793] x3 : fffffffffffffdf8 x2 : 0000000000000000\n[338046.856602] x1 : 0000000000000003 x0 : ffff80002a13b800\n\nSigned-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>\nSigned-off-by: Hans Verkuil <hansverk@cisco.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>",
        "before_after_code_files": [
          "drivers/mediplatform/qcom/venus/helpers.c||drivers/media/platform/qcom/venus/helpers.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mediplatform/qcom/venus/helpers.c||drivers/media/platform/qcom/venus/helpers.c": [
          "File: drivers/mediplatform/qcom/venus/helpers.c -> drivers/media/platform/qcom/venus/helpers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:   INIT_LIST_HEAD(&inst->registeredbufs);",
          "",
          "---------------"
        ]
      }
    }
  ]
}