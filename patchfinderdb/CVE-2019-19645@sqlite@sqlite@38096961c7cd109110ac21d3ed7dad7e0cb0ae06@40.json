{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
      "candidate_info": {
        "commit_hash": "6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e0a75a2b8867e0597377d6a11b064b5d27b3a88",
        "files": [
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a crash in the fts5vocab module caused by including a \"term < NULL\" term in a WHERE clause.\n\nFossilOrigin-Name: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
        "before_after_code_files": [
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:         if( rc==SQLITE_OK ){",
          "562:           zTerm = sqlite3Fts5IterTerm(pCsr->pIter, &nTerm);",
          "564:           if( nTerm!=pCsr->term.n",
          "565:           || (nTerm>0 && memcmp(zTerm, pCsr->term.p, nTerm))",
          "566:           ){",
          "",
          "[Removed Lines]",
          "563:           assert_nc( nTerm>0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "621:     }",
          "622:     if( pLe ){",
          "623:       const char *zCopy = (const char *)sqlite3_value_text(pLe);",
          "624:       pCsr->nLeTerm = sqlite3_value_bytes(pLe);",
          "625:       pCsr->zLeTerm = sqlite3_malloc(pCsr->nLeTerm+1);",
          "626:       if( pCsr->zLeTerm==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:       if( zCopy==0 ) zCopy = \"\";",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:   set res",
          "524: } {3 5 7}",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526: do_execsql_test 10.6.1 {",
          "527:   SELECT * FROM t2 WHERE term<NULL;",
          "528: }",
          "529: do_execsql_test 10.6.2 {",
          "530:   SELECT * FROM t2 WHERE term>NULL;",
          "531: }",
          "532: do_execsql_test 10.6.3 {",
          "533:   SELECT * FROM t2 WHERE term=NULL;",
          "534: }",
          "535: do_execsql_test 10.7.1 {",
          "536:   SELECT * FROM t2 WHERE term<?;",
          "537: }",
          "538: do_execsql_test 10.7.2 {",
          "539:   SELECT * FROM t2 WHERE term>?;",
          "540: }",
          "541: do_execsql_test 10.7.3 {",
          "542:   SELECT * FROM t2 WHERE term=?;",
          "543: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55c5d72af9510e2f27c33544d804a58d4282b0efb384ead38484129ce91b574f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
      "candidate_info": {
        "commit_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix an assert() that [28196d89] caused to fail.\n\nFossilOrigin-Name: 8fb0c6d5a38e77aa4c5f394fb8af1b0c7c6a4790e932aabc213a3078ee9acaf6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28196d894ac9fad9d8f877c7bf17ec9d299d12acdcc942f9ea0783777b14fdc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
      "candidate_info": {
        "commit_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Further simplifications to sqlite3VdbeMemSetStr().\n\nFossilOrigin-Name: 1d212957079a2caa30f3c9d80f43464781bc9634c2b5181a5814efbddae31711",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c499da8a4d0babc56883aa362ae124772fd9214a51169a88a5dee523d051658",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:     assert( enc!=0 );",
          "1046:     if( enc==SQLITE_UTF8 ){",
          "1047:       nByte = 0x7fffffff & (int)strlen(z);",
          "1049:     }else{",
          "1050:       for(nByte=0; nByte<=iLimit && (z[nByte] | z[nByte+1]); nByte+=2){}",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1048:       if( nByte>iLimit ) nByte = iLimit+1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   if( xDel==SQLITE_TRANSIENT ){",
          "1061:     if( flags&MEM_Term ){",
          "1062:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1060:     int nAlloc = nByte;",
          "",
          "[Added Lines]",
          "1059:     u32 nAlloc = nByte;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1067:     testcase( nAlloc==0 );",
          "1068:     testcase( nAlloc==31 );",
          "1069:     testcase( nAlloc==32 );",
          "1071:       return SQLITE_NOMEM_BKPT;",
          "1072:     }",
          "1073:     memcpy(pMem->z, z, nAlloc);",
          "1078:   }else{",
          "1079:     sqlite3VdbeMemRelease(pMem);",
          "1080:     pMem->z = (char *)z;",
          "1083:   }",
          "1085:   pMem->n = nByte;",
          "",
          "[Removed Lines]",
          "1070:     if( sqlite3VdbeMemClearAndResize(pMem, MAX(nAlloc,32)) ){",
          "1074:   }else if( xDel==SQLITE_DYNAMIC ){",
          "1075:     sqlite3VdbeMemRelease(pMem);",
          "1076:     pMem->zMalloc = pMem->z = (char *)z;",
          "1077:     pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1081:     pMem->xDel = xDel;",
          "1082:     flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "",
          "[Added Lines]",
          "1069:     if( sqlite3VdbeMemClearAndResize(pMem, (int)MAX(nAlloc,32)) ){",
          "1076:     if( xDel==SQLITE_DYNAMIC ){",
          "1077:       pMem->zMalloc = pMem->z;",
          "1078:       pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1079:     }else{",
          "1080:       pMem->xDel = xDel;",
          "1081:       flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "1082:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "397a78d4a1864111f488a51d296810e7ef037893",
      "candidate_info": {
        "commit_hash": "397a78d4a1864111f488a51d296810e7ef037893",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/397a78d4a1864111f488a51d296810e7ef037893",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab.test"
        ],
        "message": "In defensive mode, do not allow shadow tables to be renamed using ALTER TABLE.\n\nFossilOrigin-Name: 23e200da5cfbde0798e67cd9e016e4a1cd73b67981e1af841493fcd123d8f547",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d64f248da3ce7762fe2c17fbc83f7bea9ffca73723bb3ad0982a85320839da90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     return 1;",
          "35:   }",
          "36:   return 0;",
          "",
          "[Removed Lines]",
          "31: static int isSystemTable(Parse *pParse, const char *zName){",
          "32:   if( 0==sqlite3StrNICmp(zName, \"sqlite_\", 7) ){",
          "33:     sqlite3ErrorMsg(pParse, \"table %s may not be altered\", zName);",
          "",
          "[Added Lines]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "40:     sqlite3ErrorMsg(pParse, \"table %s may not be altered\", pTab->zName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     goto exit_rename_table;",
          "131:   }",
          "132:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){ goto",
          "",
          "[Removed Lines]",
          "129:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ){",
          "",
          "[Added Lines]",
          "136:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:     sqlite3ErrorMsg(pParse, \"Cannot add a column to a view\");",
          "425:     goto exit_begin_add_column;",
          "426:   }",
          "428:     goto exit_begin_add_column;",
          "429:   }",
          "",
          "[Removed Lines]",
          "427:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ){",
          "",
          "[Added Lines]",
          "434:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "526:   if( !pTab ) goto exit_rename_column;",
          "530:   if( SQLITE_OK!=isRealTable(pParse, pTab) ) goto exit_rename_column;",
          "",
          "[Removed Lines]",
          "529:   if( SQLITE_OK!=isSystemTable(pParse, pTab->zName) ) goto exit_rename_column;",
          "",
          "[Added Lines]",
          "536:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ) goto exit_rename_column;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "505:   SELECT sql FROM sqlite_master WHERE name = 'y';",
          "506: } {{CREATE VIEW y AS SELECT f2 AS f1 FROM x}}",
          "509: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: #-------------------------------------------------------------------------",
          "509: # Test that it is not possible to rename a shadow table in DEFENSIVE mode.",
          "510: #",
          "511: ifcapable fts3 {",
          "512:   proc vtab_command {method args} {",
          "513:     switch -- $method {",
          "514:       xConnect {",
          "515:         if {[info exists ::vtab_connect_sql]} {",
          "516:           execsql $::vtab_connect_sql",
          "517:         }",
          "518:         return \"CREATE TABLE t1(a, b, c)\"",
          "519:       }",
          "521:       xBestIndex {",
          "522:         set clist [lindex $args 0]",
          "523:         if {[llength $clist]!=1} { error \"unexpected constraint list\" }",
          "524:         catch { array unset C }",
          "525:         array set C [lindex $clist 0]",
          "526:         if {$C(usable)} {",
          "527:           return \"omit 0 cost 0 rows 1 idxnum 555 idxstr eq!\"",
          "528:         } else {",
          "529:           return \"cost 1000000 rows 0 idxnum 0 idxstr scan...\"",
          "530:         }",
          "531:       }",
          "532:     }",
          "534:     return {}",
          "535:   }",
          "537:   register_tcl_module db",
          "539:   sqlite3_db_config db DEFENSIVE 1",
          "541:   do_execsql_test 16.0 {",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "545:   do_catchsql_test 16.1 {",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.2 {",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_execsql_test 16.3 {",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "557:   do_execsql_test 16.4 {",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
      "candidate_info": {
        "commit_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a0c16f27653982880ab76714b5aaae65db43315",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/nulls1.test"
        ],
        "message": "Add tests for sort-by-index cases that use IN() and non-default NULL handling.\n\nFossilOrigin-Name: 09d660ecde723fb30f3bb3684bbb7f95825d78da6a6f33ddf57846054cd563e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9a82ee88d2d12209a674bd19167277aa91a6912e7a8bbf3714f90d559307fee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: }",
          "121: #-------------------------------------------------------------------------",
          "122: ifcapable vtab {",
          "123:   register_echo_module db",
          "124:   do_execsql_test 4.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "148: }",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #-------------------------------------------------------------------------",
          "152: #",
          "153: do_execsql_test 5.0 {",
          "154:   CREATE TABLE t4(a, b, c);",
          "155:   INSERT INTO t4 VALUES(1, 1, 11);",
          "156:   INSERT INTO t4 VALUES(1, 2, 12);",
          "157:   INSERT INTO t4 VALUES(1, NULL, 1);",
          "159:   INSERT INTO t4 VALUES(2, NULL, 1);",
          "160:   INSERT INTO t4 VALUES(2, 2, 12);",
          "161:   INSERT INTO t4 VALUES(2, 1, 11);",
          "163:   INSERT INTO t4 VALUES(3, NULL, 1);",
          "164:   INSERT INTO t4 VALUES(3, 2, 12);",
          "165:   INSERT INTO t4 VALUES(3, NULL, 3);",
          "166: }",
          "168: do_execsql_test 5.1 {",
          "169:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "170: } {",
          "171:   1 1 11   1 2 12   1 {} 1",
          "172:   2 1 11   2 2 12   2 {} 1",
          "173:   3 2 12   3 {} 1   3 {} 3",
          "174: }",
          "175: do_execsql_test 5.2 {",
          "176:   CREATE INDEX t4ab ON t4(a, b);",
          "177:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "178: } {",
          "179:   1 1 11   1 2 12   1 {} 1",
          "180:   2 1 11   2 2 12   2 {} 1",
          "181:   3 2 12   3 {} 1   3 {} 3",
          "182: }",
          "183: do_eqp_test 5.3 {",
          "184:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "185: } {",
          "186:   QUERY PLAN",
          "187:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "188: }",
          "190: do_execsql_test 5.4 {",
          "191:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "192: } {",
          "193:   3 {} 3   3 {} 1   3 2 12",
          "194:   2 {} 1   2 2 12   2 1 11",
          "195:   1 {} 1   1 2 12   1 1 11",
          "196: }",
          "197: do_eqp_test 5.5 {",
          "198:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "199: } {",
          "200:   QUERY PLAN",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}