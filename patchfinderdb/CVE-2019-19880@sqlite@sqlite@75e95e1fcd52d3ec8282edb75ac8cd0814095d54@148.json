{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b40af49d735f7ea8111bf37dab5c3f041e549290",
      "candidate_info": {
        "commit_hash": "b40af49d735f7ea8111bf37dab5c3f041e549290",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b40af49d735f7ea8111bf37dab5c3f041e549290",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/dbdata.test"
        ],
        "message": "Enhance the \".recover\" command. Fix a problem with overflow pages in dbdata.c.\n\nFossilOrigin-Name: f193ca587f9e4f925f4f2343b0b07053bd6f93dd87fc6f8f41cf4479e90cf562",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/dbdata.test||test/dbdata.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "507:             nRem -= nCopy;",
          "509:             sqlite3_free(aOvfl);",
          "510:           }",
          "511:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:             pgnoOvfl = get_uint32(aOvfl);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7461d2e120f2149315ddac2676d51d7445bcdb8e97543effd9c30603517ef9da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6073: struct RecoverTable {",
          "6079: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6078:   int iPk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6085:   if( pTab ){",
          "6086:     sqlite3_free(pTab->zName);",
          "6087:     sqlite3_free(pTab->zQuoted);",
          "6089:     if( pTab->azlCol ){",
          "6090:       int i;",
          "6091:       for(i=0; i<pTab->nCol; i++){",
          "",
          "[Removed Lines]",
          "6088:     sqlite3_free(pTab->zCreate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6097:   }",
          "6098: }",
          "6100: static RecoverTable *recoverNewTable(",
          "6101:   ShellState *pState,",
          "6102:   int *pRc,",
          "6103:   int iRoot,",
          "6104:   int nCol",
          "6105: ){",
          "6106:   RecoverTable *pRet = 0;",
          "6108:   pRet = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6110:     sqlite3_stmt *pStmt = 0;",
          "6111:     pRet->zName = shellMPrintf(pRc, \"orphan_%d_%d\", nCol, iRoot);",
          "6112:     pRet->zQuoted = shellMPrintf(pRc, \"%Q\", pRet->zName);",
          "6113:     pRet->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * nCol);",
          "",
          "[Removed Lines]",
          "6109:   if( pRet ){",
          "",
          "[Added Lines]",
          "6099: static void recoverOldTable(",
          "6101:   RecoverTable *pTab,",
          "6104:   int bIntkey,",
          "6105:   int nCol",
          "6106: ){",
          "6108:   int rc = *pRc;",
          "6110:   if( rc==SQLITE_OK ){",
          "6111:     int nSqlCol = 0;",
          "6112:     int bSqlIntkey = 0;",
          "6113:     sqlite3_stmt *pStmt = 0;",
          "6115:     rc = sqlite3_open(\"\", &dbtmp);",
          "6116:     if( rc==SQLITE_OK ){",
          "6117:       rc = sqlite3_exec(dbtmp, zSql, 0, 0, 0);",
          "6118:       if( rc==SQLITE_ERROR ){",
          "6119:         rc = SQLITE_OK;",
          "6120:         goto finished;",
          "6121:       }",
          "6122:     }",
          "6123:     shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6124:         \"SELECT count(*) FROM pragma_table_info(%Q)\", zName",
          "6125:     );",
          "6126:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6127:       nSqlCol = sqlite3_column_int(pStmt, 0);",
          "6128:     }",
          "6129:     shellFinalize(&rc, pStmt);",
          "6131:     if( rc!=SQLITE_OK || nSqlCol<nCol ){",
          "6132:       goto finished;",
          "6133:     }",
          "6135:     shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6136:       \"SELECT (\"",
          "6137:       \"  SELECT substr(data,1,1)==X'0D' FROM sqlite_dbpage WHERE pgno=rootpage\"",
          "6138:       \") FROM sqlite_master WHERE name = %Q\", zName",
          "6139:     );",
          "6140:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6141:       bSqlIntkey = sqlite3_column_int(pStmt, 0);",
          "6142:     }",
          "6143:     shellFinalize(&rc, pStmt);",
          "6145:     if( bIntkey==bSqlIntkey ){",
          "6146:       const char *zPk = \"_rowid_\";",
          "6147:       sqlite3_stmt *pPkFinder = 0;",
          "6149:       shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6150:           \"SELECT cid, name FROM pragma_table_info(%Q) \"",
          "6151:           \"  WHERE pk=1 AND type='integer' COLLATE nocase\"",
          "6152:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\",",
          "6153:           zName, zName",
          "6154:       );",
          "6155:       if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6156:         pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6157:         zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6158:       }",
          "6160:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6161:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "6162:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * nSqlCol);",
          "6163:       pTab->nCol = nSqlCol;",
          "6165:       if( nSqlCol==1 && pTab->iPk==0 ){",
          "6166:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6167:       }else{",
          "6168:         shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6169:           \"SELECT -1+row_number()          OVER (ORDER BY cid),\"",
          "6170:           \"    %Q||%Q||group_concat(name, ', ') FILTER (WHERE cid!=%d) \"",
          "6171:           \"           OVER (ORDER BY cid) \"",
          "6172:           \"FROM pragma_table_info(%Q)\",",
          "6173:           (bIntkey ? zPk : \"\"), (bIntkey ? \", \" : \"\"),",
          "6174:           pTab->iPk, zName",
          "6175:         );",
          "6176:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6177:           int idx = sqlite3_column_int(pStmt, 0);",
          "6178:           const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6179:           pTab->azlCol[idx] = shellMPrintf(&rc, \"%s\", zText);",
          "6180:         }",
          "6181:         shellFinalize(&rc, pStmt);",
          "6182:       }",
          "6183:       shellFinalize(&rc, pPkFinder);",
          "6184:     }",
          "6185:   }",
          "6187:  finished:",
          "6188:   sqlite3_close(dbtmp);",
          "6190: }",
          "6196:   int bIntkey,",
          "6199:   sqlite3_stmt *pStmt = 0;",
          "6201:   int bNoop = 0;",
          "6202:   const char *zSql = 0;",
          "6203:   const char *zName = 0;",
          "6206:   if( pRet ) pRet->iPk = -2;",
          "6209:   shellPreparePrintf(pState->db, pRc, &pStmt,",
          "6210:       \"SELECT type, name, sql FROM recovery.schema WHERE rootpage=%d\", iRoot",
          "6211:   );",
          "6212:   while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6213:     const char *zType = (const char*)sqlite3_column_text(pStmt, 0);",
          "6214:     if( bIntkey==0 && sqlite3_stricmp(zType, \"index\")==0 ){",
          "6215:       bNoop = 1;",
          "6216:       break;",
          "6217:     }",
          "6218:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6219:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6220:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6221:       recoverOldTable(pRc, pRet, zName, zSql, bIntkey, nCol);",
          "6222:       break;",
          "6223:     }",
          "6224:   }",
          "6225:   shellFinalize(pRc, pStmt);",
          "6226:   if( bNoop ){",
          "6227:     sqlite3_free(pRet);",
          "6228:     return 0;",
          "6229:   }",
          "6231:   if( pRet && pRet->zName==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6117:       \"WITH s(i) AS (\"",
          "6118:       \"  SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<%d\"",
          "6119:       \")\"",
          "6122:     );",
          "6123:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6124:       int idx = sqlite3_column_int(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6120:       \"SELECT i-1, group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6121:       nCol",
          "",
          "[Added Lines]",
          "6243:       \"SELECT i-1, %Q || group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6244:       nCol, (bIntkey ? \"id, \" : \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6127:     }",
          "6128:     shellFinalize(pRc, pStmt);",
          "6131:         pRet->zName, pRet->azlCol[nCol-1]",
          "6133:   }",
          "6135:   if( *pRc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6130:     pRet->zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (id, %s)\",",
          "6132:     );",
          "",
          "[Added Lines]",
          "6253:     if( *pRc==SQLITE_OK ){",
          "6254:       char *zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (%s)\",",
          "6256:       );",
          "6257:       if( zCreate ){",
          "6258:         raw_printf(pState->out, \"%s;\\n\", zCreate);",
          "6259:         sqlite3_free(zCreate);",
          "6260:       }",
          "6261:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6148: static int recoverDatabaseCmd(ShellState *pState){",
          "6150:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "6149:   const char *zSql;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6176:     \"CREATE TABLE recovery.map(pgno INTEGER PRIMARY KEY, maxlen INT, root INT);\"",
          "",
          "[Added Lines]",
          "6304:     \"CREATE TABLE recovery.map(\"",
          "6305:       \"pgno INTEGER PRIMARY KEY, maxlen INT, intkey, root INT\"",
          "6306:     \");\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6182:     \"  SELECT page_count, max(field+1) \"",
          "6183:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "6184:     \"    UNION ALL\"",
          "6187:     \")\"",
          "6189:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6190:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6191:     \"        UNION ALL\"",
          "",
          "[Removed Lines]",
          "6185:     \"  SELECT * FROM (SELECT i-1, max(field+1)\"",
          "6186:     \"      FROM pages, sqlite_dbdata WHERE pgno=i-1 AND i>=2)\"",
          "6188:     \"INSERT INTO recovery.map(pgno, maxlen, root) SELECT i, maxlen, (\"",
          "",
          "[Added Lines]",
          "6315:     \"  SELECT i-1, (\"",
          "6316:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "6317:     \"  ) FROM pages WHERE i>=2\"",
          "6319:     \"INSERT INTO recovery.map(pgno, maxlen, intkey, root) \"",
          "6320:     \"  SELECT i, maxlen, NULL, (\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6195:     \"    SELECT pgno FROM p WHERE (parent IS NULL OR pgno = orig)\"",
          "6196:     \") \"",
          "6197:     \"FROM pages WHERE maxlen > 0;\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6330:     \"UPDATE recovery.map AS o SET intkey = (\"",
          "6331:     \"  SELECT substr(data, 1, 1)==X'0D' FROM sqlite_dbpage WHERE pgno=o.pgno\"",
          "6332:     \");\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6221:   return rc;",
          "6222: #endif",
          "6227:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6228:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "6230:     RecoverTable *pTab;",
          "6233:     if( pTab ){",
          "6234:       sqlite3_stmt *pData = 0;",
          "6236:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6237:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "6238:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6239:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6240:         \")\"",
          "6242:       );",
          "6243:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pData) ){",
          "6244:         int iMax = sqlite3_column_int(pData, 0);",
          "6245:         const char *zVal = (const char*)sqlite3_column_text(pData, 1);",
          "6254:       }",
          "6255:       shellFinalize(&rc, pData);",
          "6256:     }",
          "",
          "[Removed Lines]",
          "6225:   zSql = \"SELECT root,max(maxlen) FROM recovery.map WHERE root>1 GROUP BY root\";",
          "6226:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6229:     int nCol = sqlite3_column_int(pLoop, 1);",
          "6232:     pTab = recoverNewTable(pState, &rc, iRoot, nCol);",
          "6235:       raw_printf(pState->out, \"%s;\\n\", pTab->zCreate);",
          "6241:         \"GROUP BY pgno, cell;\", iRoot",
          "6246:         if( iMax+1==pTab->nCol ){",
          "6247:           raw_printf(pState->out, \"INSERT INTO %s VALUES( %s );\\n\",",
          "6248:               pTab->zQuoted, zVal);",
          "6249:         }else{",
          "6250:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6251:               pTab->zQuoted, pTab->azlCol[iMax], zVal",
          "6252:           );",
          "6253:         }",
          "",
          "[Added Lines]",
          "6361:   if( rc==SQLITE_OK ){",
          "6362:     sqlite3_stmt *pStmt = 0;",
          "6363:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6364:     shellPrepare(pState->db, &rc,",
          "6365:         \"SELECT sql FROM recovery.schema \"",
          "6366:         \"WHERE type='table' \"",
          "6367:         \"  AND length(sql)>6\"",
          "6368:         \"  AND sql LIKE 'create table%'\"",
          "6369:         \"  AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'\", &pStmt",
          "6370:     );",
          "6371:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6372:       const char *zCreateTable = (const char*)sqlite3_column_text(pStmt, 0);",
          "6373:       raw_printf(pState->out, \"%s;\\n\", zCreateTable);",
          "6374:     }",
          "6375:     shellFinalize(&rc, pStmt);",
          "6376:   }",
          "6379:   shellPrepare(pState->db, &rc,",
          "6380:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "6381:       \" WHERE root>1 GROUP BY root, intkey\", &pLoop",
          "6382:   );",
          "6385:     int bIntkey = sqlite3_column_int(pLoop, 1);",
          "6386:     int nCol = sqlite3_column_int(pLoop, 2);",
          "6389:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6397:         \" AND field!=%d \"",
          "6398:         \"GROUP BY pgno, cell;\", iRoot, pTab->iPk",
          "6403:         raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6404:             pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6405:         );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6258:   }",
          "6259:   shellFinalize(&rc, pLoop);",
          "6261:   sqlite3_exec(pState->db, \"DETACH recovery\", 0, 0, 0);",
          "6262:   return rc;",
          "6263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6413:   if( rc==SQLITE_OK ){",
          "6414:     raw_printf(pState->out, \"COMMIT;\\n\");",
          "6415:   }",
          "",
          "---------------"
        ],
        "test/dbdata.test||test/dbdata.test": [
          "File: test/dbdata.test -> test/dbdata.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   SELECT value FROM sqlite_dbdata WHERE pgno=2 AND cell=2 AND field=1;",
          "68: } $big",
          "70: #-------------------------------------------------------------------------",
          "71: reset_db",
          "72: db enable_load_extension 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: do_execsql_test 1.4 {",
          "71:   DELETE FROM t1;",
          "72:   INSERT INTO t1 VALUES(NULL, randomblob(5050));",
          "73: }",
          "74: do_test 1.5 {",
          "75:   execsql {",
          "76:     SELECT quote(value) FROM sqlite_dbdata WHERE pgno=2 AND cell=0 AND field=1;",
          "77:   }",
          "78: } [db one {SELECT quote(b) FROM t1}]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
      "candidate_info": {
        "commit_hash": "d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d63b69b8a2fe0afbc62ffb850b7f17d4862244fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Ensure that an ALWAYS() in the rename logic really is always true, even for faulty inputs.\n\nFossilOrigin-Name: 54410f0e7710542d5159d0449898598d2b7f7676bfd993644ca47da1bf1fcdac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75b04a4b0d2e65bfcd02cf4e0b6d8f1954957c590814a9b8f9a9ee2adc2ec022",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "758:   Parse *pParse = pWalker->pParse;",
          "759:   int i;",
          "760:   if( ALWAYS(p->pEList) ){",
          "761:     ExprList *pList = p->pEList;",
          "762:     for(i=0; i<pList->nExpr; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:   if( pParse->nErr ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   } $res",
          "466: }",
          "469: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: # Verify that the \"if( pParse->nErr ) return WRC_Abort\" at the top of the",
          "469: # renameUnmapSelectCb() routine in alter.c (2019-12-04) is really required.",
          "470: #",
          "471: sqlite3 db :memory:",
          "472: do_catchsql_test 20.10 {",
          "473:   CREATE TABLE s(a, b, c);",
          "474:   CREATE INDEX k ON s( (WITH s AS( SELECT * ) VALUES(2) ) IN () );",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
      "candidate_info": {
        "commit_hash": "4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4509ffa3621d1e44a3d4ba5fbf90dd9a629a9053",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Always use the stdlib.h intptr_t type for pointer-integer conversions, when it is available.\n\nFossilOrigin-Name: c0d932449db3deed42a99bd948aab61e56b2d8441d7de5243688695ff04e8177",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 59c9e73f86b89ee17b0bce47bcb93f5b5ace5b7985678287195002afb9d40cd8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: # define SQLITE_INT_TO_PTR(X)  ((void*)(__PTRDIFF_TYPE__)(X))",
          "217: # define SQLITE_PTR_TO_INT(X)  ((int)(__PTRDIFF_TYPE__)(X))",
          "219: # define SQLITE_INT_TO_PTR(X)  ((void*)&((char*)0)[X])",
          "220: # define SQLITE_PTR_TO_INT(X)  ((int)(((char*)X)-(char*)0))",
          "225: # define SQLITE_INT_TO_PTR(X)  ((void*)(X))",
          "226: # define SQLITE_PTR_TO_INT(X)  ((int)(X))",
          "",
          "[Removed Lines]",
          "222: # define SQLITE_INT_TO_PTR(X)  ((void*)(intptr_t)(X))",
          "223: # define SQLITE_PTR_TO_INT(X)  ((int)(intptr_t)(X))",
          "",
          "[Added Lines]",
          "216: # define SQLITE_INT_TO_PTR(X)  ((void*)(intptr_t)(X))",
          "217: # define SQLITE_PTR_TO_INT(X)  ((int)(intptr_t)(X))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e4f6c43b88e4e41912719b1678afb0c187def23",
      "candidate_info": {
        "commit_hash": "3e4f6c43b88e4e41912719b1678afb0c187def23",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e4f6c43b88e4e41912719b1678afb0c187def23",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "A minor variation on check-in [1685610ef8e0dc] which (hopefully) makes the logic a little easier to follow.  Also disallows the use of the double-quoted string hack in the query expression used for VACUUM INTO, which is not strictly required, but moves us toward the goal of disallowing the double-quoted string hack everywhere.\n\nFossilOrigin-Name: 3e1b55f3ab85710ed81574904718205c7370b5f0b5a41029e961486d2e3f37c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "481:     ){",
          "",
          "[Removed Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "",
          "[Added Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1773:   sNC.ncFlags = type;",
          "1776:   }",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1778:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "",
          "[Removed Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "",
          "[Added Lines]",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2796: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
      "candidate_info": {
        "commit_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f95909c7648942e7157722c33b5e5f9293bf3436",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fixes for WITHOUT ROWID tables with VIRTUAL columns and an INTEGER PRIMARY KEY.\n\nFossilOrigin-Name: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     pCol->colFlags |= COLFLAG_HASTYPE;",
          "1227:   }",
          "1228:   p->nCol++;",
          "1229:   pParse->constraintName.n = 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:   p->nNVCol++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:       goto generated_error;",
          "1592:     }",
          "1593:   }",
          "1594:   pCol->colFlags |= eType;",
          "1595:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1596:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   if( eType==COLFLAG_VIRTUAL ) pTab->nNVCol--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:   assert( !db->mallocFailed );",
          "2157:   p = pParse->pNewTable;",
          "2158:   if( p==0 ) return;",
          "2161:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2162:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "2159:   p->nNVCol = p->nCol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:       return;",
          "2198:     }",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2200:   }",
          "2202: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:     convertToWithoutRowidTable(pParse, p);",
          "2203:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2219:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2220:                                     p->aCol[ii].pDflt, 0);",
          "2221:       }",
          "",
          "[Removed Lines]",
          "2215:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2216:           p->nNVCol--;",
          "2217:           assert( p->nNVCol>=0 );",
          "2218:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2223:   }",
          "2224: #endif",
          "2235:   estimateTableWidth(p);",
          "2236:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}