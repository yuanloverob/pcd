{
  "cve_id": "CVE-2020-19497",
  "cve_desc": "Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio (aka MAT File I/O Library) 1.5.17, allows attackers to cause a Denial of Service or possibly other unspecified impacts.",
  "repo": "tbeu/matio",
  "patch_hash": "5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606",
  "patch_info": {
    "commit_hash": "5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606",
    "repo": "tbeu/matio",
    "commit_url": "https://github.com/tbeu/matio/commit/5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606",
    "files": [
      "src/mat5.c"
    ],
    "message": "Fix integer addition overflow\n\nAs reported by https://github.com/tbeu/matio/issues/121",
    "before_after_code_files": [
      "src/mat5.c||src/mat5.c"
    ]
  },
  "patch_diff": {
    "src/mat5.c||src/mat5.c": [
      "File: src/mat5.c -> src/mat5.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1010:                         mat_uint32_t len = uncomp_buf[1];",
      "1015:                         nbytes -= len;",
      "1016:                         if ( NULL != cells[i]->name ) {",
      "",
      "[Removed Lines]",
      "1012:                         if ( len % 8 > 0 )",
      "1013:                             len = len+(8-(len % 8));",
      "1014:                         cells[i]->name = (char*)malloc(len+1);",
      "",
      "[Added Lines]",
      "1012:                         if ( len % 8 > 0 ) {",
      "1013:                             if ( len < UINT32_MAX - 8 + (len % 8) )",
      "1014:                               len = len + 8 - (len % 8);",
      "1015:                             else {",
      "1016:                                 Mat_VarFree(cells[i]);",
      "1017:                                 cells[i] = NULL;",
      "1018:                                 break;",
      "1019:                             }",
      "1020:                         }",
      "1021:                         cells[i]->name = (char*)malloc(len + 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1079:         mat_uint32_t array_flags;",
      "1081:         for ( i = 0; i < nelems; i++ ) {",
      "1083:             cells[i] = Mat_VarCalloc();",
      "1084:             if ( !cells[i] ) {",
      "1085:                 Mat_Critical(\"Couldn't allocate memory for cell %\" SIZE_T_FMTSTR, i);",
      "",
      "[Removed Lines]",
      "1082:             int cell_bytes_read,name_len;",
      "",
      "[Added Lines]",
      "1089:             int cell_bytes_read;",
      "1090:             mat_uint32_t name_len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1154:                     name_len = buf[1];",
      "1155:                     if ( name_len % 8 > 0 )",
      "1157:                     nBytes -= name_len;",
      "1158:                     (void)fseek((FILE*)mat->fp,name_len,SEEK_CUR);",
      "1159:                 }",
      "",
      "[Removed Lines]",
      "1156:                         name_len = name_len+(8-(name_len % 8));",
      "",
      "[Added Lines]",
      "1164:                         if ( name_len < UINT32_MAX - 8 + (name_len % 8) )",
      "1165:                             name_len = name_len + 8 - (name_len % 8);",
      "1166:                         else {",
      "1167:                             Mat_VarFree(cells[i]);",
      "1168:                             cells[i] = NULL;",
      "1169:                             break;",
      "1170:                         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4873:                     if ( len % 8 == 0 )",
      "4874:                         len_pad = len;",
      "4876:                         len_pad = len + 8 - (len % 8);",
      "4877:                     matvar->name = (char*)malloc(len_pad + 1);",
      "4878:                     if ( NULL != matvar->name ) {",
      "",
      "[Removed Lines]",
      "4875:                     else",
      "",
      "[Added Lines]",
      "4889:                     else if ( len < UINT32_MAX - 8 + (len % 8) )",
      "4891:                     else {",
      "4892:                         Mat_VarFree(matvar);",
      "4893:                         matvar = NULL;",
      "4894:                         break;",
      "4895:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4974:                     len = buf[1];",
      "4975:                 if ( len % 8 == 0 )",
      "4976:                     len_pad = len;",
      "4978:                     len_pad = len + 8 - (len % 8);",
      "4979:                 matvar->name = (char*)malloc(len_pad + 1);",
      "4980:                 if ( NULL != matvar->name ) {",
      "4981:                     readresult = fread(matvar->name, 1, len_pad, (FILE*)mat->fp);",
      "",
      "[Removed Lines]",
      "4977:                 else",
      "",
      "[Added Lines]",
      "4996:                 else if ( len < UINT32_MAX - 8 + (len % 8) )",
      "4998:                 else {",
      "4999:                     Mat_VarFree(matvar);",
      "5000:                     matvar = NULL;",
      "5001:                     (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
      "5002:                     break;",
      "5003:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f15b24532f7444dda92c3e1712fc2cfb9977fbc",
      "candidate_info": {
        "commit_hash": "8f15b24532f7444dda92c3e1712fc2cfb9977fbc",
        "repo": "tbeu/matio",
        "commit_url": "https://github.com/tbeu/matio/commit/8f15b24532f7444dda92c3e1712fc2cfb9977fbc",
        "files": [
          "src/mat.c",
          "src/mat4.c",
          "src/mat5.c",
          "src/matio_private.h"
        ],
        "message": "Safe read",
        "before_after_code_files": [
          "src/mat.c||src/mat.c",
          "src/mat4.c||src/mat4.c",
          "src/mat5.c||src/mat5.c",
          "src/matio_private.h||src/matio_private.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mat5.c||src/mat5.c"
          ],
          "candidate": [
            "src/mat5.c||src/mat5.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mat.c||src/mat.c": [
          "File: src/mat.c -> src/mat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:     return 0;",
          "304: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315: int",
          "316: SafeRead(void* buf, size_t size, size_t count, FILE* fp, size_t* read_bytes) {",
          "317:     const size_t read_result = fread(buf, size, count, fp);",
          "318:     int err = read_result != count;",
          "319:     if ( NULL != read_bytes ) {",
          "321:     }",
          "322:     if ( err && feof(fp) && 0 == read_result) {",
          "323:         err = 0;",
          "324:     }",
          "325:     if ( err ) {",
          "326:         Mat_Warning(\"Read %\" SIZE_T_FMTSTR \" bytes from file, but expected %\"",
          "327:             SIZE_T_FMTSTR \" bytes\", read_result*size, count*size);",
          "328:     }",
          "329:     return err;",
          "330: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:     }",
          "427:     mat->fp = fp;",
          "429:     if ( NULL == mat->header ) {",
          "430:         free(mat);",
          "431:         fclose(fp);",
          "",
          "[Removed Lines]",
          "428:     mat->header        = (char*)calloc(128,sizeof(char));",
          "",
          "[Added Lines]",
          "454:     mat->header = (char*)calloc(128,sizeof(char));",
          "",
          "---------------"
        ],
        "src/mat4.c||src/mat4.c": [
          "File: src/mat4.c -> src/mat4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "909:     int       M,O,data_type,class_type;",
          "910:     mat_int32_t tmp;",
          "911:     long      nBytes;",
          "913:     matvar_t *matvar = NULL;",
          "914:     union {",
          "915:         mat_uint32_t u;",
          "",
          "[Removed Lines]",
          "912:     size_t    readresult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "921:     else if ( NULL == (matvar = Mat_VarCalloc()) )",
          "922:         return NULL;",
          "926:         Mat_VarFree(matvar);",
          "927:         return NULL;",
          "928:     }",
          "",
          "[Removed Lines]",
          "924:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "925:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "923:     if ( 0 != SafeRead(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1011:         Mat_VarFree(matvar);",
          "1012:         return NULL;",
          "1013:     }",
          "1015:     if ( mat->byteswap )",
          "1016:         Mat_int32Swap(&tmp);",
          "1017:     matvar->dims[0] = tmp;",
          "1019:         Mat_VarFree(matvar);",
          "1020:         return NULL;",
          "1021:     }",
          "1023:     if ( mat->byteswap )",
          "1024:         Mat_int32Swap(&tmp);",
          "1025:     matvar->dims[1] = tmp;",
          "1033:         Mat_VarFree(matvar);",
          "1034:         return NULL;",
          "1035:     }",
          "",
          "[Removed Lines]",
          "1014:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1018:     if ( 1 != readresult ) {",
          "1022:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1026:     if ( 1 != readresult ) {",
          "1027:         Mat_VarFree(matvar);",
          "1028:         return NULL;",
          "1029:     }",
          "1031:     readresult = fread(&(matvar->isComplex),sizeof(int),1,(FILE*)mat->fp);",
          "1032:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "1012:     if ( 0 != SafeRead(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "1013:         Mat_VarFree(matvar);",
          "1014:         return NULL;",
          "1015:     }",
          "1020:     if ( 0 != SafeRead(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "1028:     if ( 0 != SafeRead(&(matvar->isComplex), sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037:         Mat_VarFree(matvar);",
          "1038:         return NULL;",
          "1039:     }",
          "1042:         Mat_VarFree(matvar);",
          "1043:         return NULL;",
          "1044:     }",
          "",
          "[Removed Lines]",
          "1040:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1041:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "1036:     if ( 0 != SafeRead(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1054:         Mat_VarFree(matvar);",
          "1055:         return NULL;",
          "1056:     }",
          "1059:         Mat_VarFree(matvar);",
          "1060:         return NULL;",
          "1061:     } else {",
          "",
          "[Removed Lines]",
          "1057:     readresult = fread(matvar->name,1,tmp,(FILE*)mat->fp);",
          "1058:     if ( tmp != readresult ) {",
          "",
          "[Added Lines]",
          "1052:     if ( 0 != SafeRead(matvar->name, sizeof(char), tmp, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------"
        ],
        "src/mat5.c||src/mat5.c": [
          "File: src/mat5.c -> src/mat5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: static size_t ReadNextCell( mat_t *mat, matvar_t *matvar );",
          "72: static size_t ReadNextStructField( mat_t *mat, matvar_t *matvar );",
          "73: static size_t ReadNextFunctionHandle(mat_t *mat, matvar_t *matvar);",
          "76: static int    WriteType(mat_t *mat,matvar_t *matvar);",
          "77: static int    WriteCellArrayField(mat_t *mat,matvar_t *matvar );",
          "78: static int    WriteStructField(mat_t *mat,matvar_t *matvar);",
          "",
          "[Removed Lines]",
          "74: static size_t ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type,",
          "75:                   mat_uint32_t nbytes);",
          "",
          "[Added Lines]",
          "74: static int    SafeReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type,",
          "75:                   mat_uint32_t nbytes, size_t *read_bytes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:         }",
          "430: #endif",
          "431:     } else {",
          "433:         if ( mat->byteswap )",
          "434:             (void)Mat_uint32Swap(tag);",
          "435:         packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "432:         bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "432:         if ( 0 != SafeRead(tag, 4, 1, (FILE*)mat->fp, &bytesread) ) {",
          "433:             return bytesread;",
          "434:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:             N = (tag[0] & 0xffff0000) >> 16;",
          "439:         } else {",
          "440:             data_in_tag = 0;",
          "442:             if ( mat->byteswap )",
          "443:                 (void)Mat_uint32Swap(&N);",
          "444:         }",
          "",
          "[Removed Lines]",
          "441:             bytesread += fread(&N,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "443:             if ( 0 != SafeRead(&N, 4, 1, (FILE*)mat->fp, &bytesread) ) {",
          "444:                 return bytesread;",
          "445:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1111:         mat_uint32_t array_flags;",
          "1113:         for ( i = 0; i < nelems; i++ ) {",
          "1115:             mat_uint32_t name_len;",
          "1116:             cells[i] = Mat_VarCalloc();",
          "1118:                 Mat_Critical(\"Couldn't allocate memory for cell %\" SIZE_T_FMTSTR, i);",
          "1119:                 continue;",
          "1120:             }",
          "1127:                 continue;",
          "1130:                 Mat_VarFree(cells[i]);",
          "1131:                 cells[i] = NULL;",
          "1132:                 break;",
          "",
          "[Removed Lines]",
          "1114:             size_t readresult;",
          "1117:             if ( !cells[i] ) {",
          "1123:             readresult = fread(buf,4,2,(FILE*)mat->fp);",
          "1126:             if ( 0 == readresult )",
          "1128:             bytesread += readresult;",
          "1129:             if ( 1 == readresult ) {",
          "",
          "[Added Lines]",
          "1118:             size_t nbytes = 0;",
          "1121:             if ( NULL == cells[i] ) {",
          "1127:             err = SafeRead(buf, 4, 2, (FILE*)mat->fp, &nbytes);",
          "1130:             if ( 0 == err && 0 == nbytes )",
          "1132:             bytesread += nbytes;",
          "1133:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:             }",
          "1156:                 Mat_VarFree(cells[i]);",
          "1157:                 cells[i] = NULL;",
          "1158:                 break;",
          "",
          "[Removed Lines]",
          "1153:             readresult = fread(buf,4,6,(FILE*)mat->fp);",
          "1154:             bytesread += readresult;",
          "1155:             if ( 6 != readresult ) {",
          "",
          "[Added Lines]",
          "1157:             err = SafeRead(buf, 4, 6, (FILE*)mat->fp, &bytesread);",
          "1158:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1180:             }",
          "1182:             {",
          "1184:                 bytesread += nbytes;",
          "1185:                 nBytes -= nbytes;",
          "1186:             }",
          "1191:                 Mat_VarFree(cells[i]);",
          "1192:                 cells[i] = NULL;",
          "1193:                 break;",
          "",
          "[Removed Lines]",
          "1183:                 size_t nbytes = ReadRankDims(mat, cells[i], (enum matio_types)buf[4], buf[5]);",
          "1188:             readresult = fread(buf,1,8,(FILE*)mat->fp);",
          "1189:             bytesread += readresult;",
          "1190:             if ( 8 != readresult ) {",
          "",
          "[Added Lines]",
          "1186:                 size_t nbytes = 0;",
          "1187:                 err = SafeReadRankDims(mat, cells[i], (enum matio_types)buf[4], buf[5], &nbytes);",
          "1190:                 if ( 0 != err ) {",
          "1191:                     Mat_VarFree(cells[i]);",
          "1192:                     cells[i] = NULL;",
          "1193:                     break;",
          "1194:                 }",
          "1197:             if ( 0 != SafeRead(buf, 1, 8, (FILE*)mat->fp, &bytesread) ) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1494:         mat_uint32_t buf[6] = {0,};",
          "1495:         mat_uint32_t array_flags, len;",
          "1498:         if ( mat->byteswap ) {",
          "1499:             (void)Mat_uint32Swap(buf);",
          "1500:             (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1497:         bytesread+=fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1504:         err = SafeRead(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1505:         if ( 0 != err ) {",
          "1506:             return bytesread;",
          "1507:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1507:         }",
          "1511:         if ( mat->byteswap )",
          "1512:             (void)Mat_uint32Swap(buf);",
          "",
          "[Removed Lines]",
          "1510:         bytesread+=fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1520:         err = SafeRead(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1521:         if ( 0 != err ) {",
          "1522:             return bytesread;",
          "1523:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1520:             if ( nfields ) {",
          "1521:                 char *ptr = (char*)malloc(nfields*fieldname_size);",
          "1522:                 if ( NULL != ptr ) {",
          "1526:                         SetFieldNames(matvar, ptr, nfields, fieldname_size);",
          "1528:                         matvar->internal->fieldnames = NULL;",
          "1529:                     free(ptr);",
          "1530:                 }",
          "1531:                 if ( (nfields*fieldname_size) % 8 ) {",
          "",
          "[Removed Lines]",
          "1523:                     size_t readresult = fread(ptr, 1, nfields*fieldname_size, (FILE*)mat->fp);",
          "1524:                     bytesread += readresult;",
          "1525:                     if ( nfields*fieldname_size == readresult )",
          "1527:                     else",
          "",
          "[Added Lines]",
          "1536:                     err = SafeRead(ptr, 1, nfields*fieldname_size, (FILE*)mat->fp, &bytesread);",
          "1537:                     if ( 0 == err ) {",
          "1539:                     } else {",
          "1541:                     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1566:         if ( !matvar->nbytes )",
          "1567:             return bytesread;",
          "1570:         if ( NULL == matvar->data )",
          "1571:             return bytesread;",
          "1573:         fields = (matvar_t**)matvar->data;",
          "1591:         for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "1592:             mat_uint32_t nBytes;",
          "1595:             if ( mat->byteswap ) {",
          "1596:                 (void)Mat_uint32Swap(buf);",
          "1597:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1569:         matvar->data = malloc(matvar->nbytes);",
          "1574:         for ( i = 0; i < nelems; i++ ) {",
          "1575:             size_t k;",
          "1576:             for ( k = 0; k < nfields; k++ ) {",
          "1577:                 fields[i*nfields+k] = Mat_VarCalloc();",
          "1578:             }",
          "1579:         }",
          "1580:         if ( NULL != matvar->internal->fieldnames ) {",
          "1581:             for ( i = 0; i < nelems; i++ ) {",
          "1582:                 size_t k;",
          "1583:                 for ( k = 0; k < nfields; k++ ) {",
          "1584:                     if ( NULL != matvar->internal->fieldnames[k] ) {",
          "1585:                         fields[i*nfields+k]->name = strdup(matvar->internal->fieldnames[k]);",
          "1586:                     }",
          "1587:                 }",
          "1588:             }",
          "1589:         }",
          "1594:             bytesread += fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1582:         matvar->data = calloc(nelems_x_nfields, matvar->data_size);",
          "1590:             fields[i] = Mat_VarCalloc();",
          "1591:             if ( NULL == fields[i] ) {",
          "1592:                 Mat_Critical(\"Couldn't allocate memory for field %\" SIZE_T_FMTSTR, i);",
          "1593:                 continue;",
          "1594:             }",
          "1597:             err = SafeRead(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1598:             if ( 0 != err ) {",
          "1599:                 Mat_VarFree(fields[i]);",
          "1600:                 fields[i] = NULL;",
          "1601:                 break;",
          "1602:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1602:                 fields[i] = NULL;",
          "1603:                 Mat_Critical(\"fields[%\" SIZE_T_FMTSTR \"] not MAT_T_MATRIX, fpos = %ld\", i,",
          "1604:                     ftell((FILE*)mat->fp));",
          "1606:             } else if ( 0 == nBytes ) {",
          "1608:                 free(fields[i]->internal);",
          "",
          "[Removed Lines]",
          "1605:                 return bytesread;",
          "",
          "[Added Lines]",
          "1613:                 break;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1611:             }",
          "1615:             if ( mat->byteswap ) {",
          "1616:                 (void)Mat_uint32Swap(buf);",
          "1617:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1614:             bytesread += fread(buf,4,6,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1622:             err = SafeRead(buf, 4, 6, (FILE*)mat->fp, &bytesread);",
          "1623:             if ( 0 != err ) {",
          "1624:                 Mat_VarFree(fields[i]);",
          "1625:                 fields[i] = NULL;",
          "1626:                 break;",
          "1627:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1635:             }",
          "1637:             {",
          "1639:                 bytesread += nbytes;",
          "1640:                 nBytes -= nbytes;",
          "1641:             }",
          "1644:             nBytes-=8;",
          "1645:             fields[i]->internal->datapos = ftell((FILE*)mat->fp);",
          "1646:             if ( fields[i]->internal->datapos != -1L ) {",
          "",
          "[Removed Lines]",
          "1638:                 size_t nbytes = ReadRankDims(mat, fields[i], (enum matio_types)buf[4], buf[5]);",
          "1643:             bytesread+=fread(buf,1,8,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1651:                 size_t nbytes = 0;",
          "1652:                 err = SafeReadRankDims(mat, fields[i], (enum matio_types)buf[4], buf[5], &nbytes);",
          "1655:                 if ( 0 != err ) {",
          "1656:                     Mat_VarFree(fields[i]);",
          "1657:                     fields[i] = NULL;",
          "1658:                     break;",
          "1659:                 }",
          "1662:             err = SafeRead(buf, 1, 8, (FILE*)mat->fp, &bytesread);",
          "1663:             if ( 0 != err ) {",
          "1664:                 Mat_VarFree(fields[i]);",
          "1665:                 fields[i] = NULL;",
          "1666:                 break;",
          "1667:             }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1653:                 Mat_Critical(\"Couldn't determine file position\");",
          "1654:             }",
          "1655:         }",
          "1656:     }",
          "1658:     return bytesread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1681:         if ( NULL != matvar->internal->fieldnames ) {",
          "1682:             for ( i = 0; i < nelems; i++ ) {",
          "1683:                 size_t k;",
          "1684:                 for ( k = 0; k < nfields; k++ ) {",
          "1685:                     if ( NULL != matvar->internal->fieldnames[k] && NULL != fields[i*nfields+k] ) {",
          "1686:                         fields[i*nfields+k]->name = strdup(matvar->internal->fieldnames[k]);",
          "1687:                     }",
          "1688:                 }",
          "1689:             }",
          "1690:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1715: {",
          "1718:     if ( data_type == MAT_T_INT32 ) {",
          "1719:         matvar->rank = nbytes / sizeof(mat_uint32_t);",
          "",
          "[Removed Lines]",
          "1713: static size_t",
          "1714: ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type, mat_uint32_t nbytes)",
          "1716:     size_t bytesread = 0;",
          "",
          "[Added Lines]",
          "1749: static int",
          "1750: SafeReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type, mat_uint32_t nbytes, size_t* read_bytes)",
          "1752:     int err = 0;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1723:             mat_uint32_t buf;",
          "1725:             for ( i = 0; i < matvar->rank; i++) {",
          "1729:                     if ( mat->byteswap ) {",
          "1730:                         matvar->dims[i] = Mat_uint32Swap(&buf);",
          "1731:                     } else {",
          "",
          "[Removed Lines]",
          "1726:                 size_t readresult = fread(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp);",
          "1727:                 if ( 1 == readresult ) {",
          "1728:                     bytesread += sizeof(mat_uint32_t);",
          "",
          "[Added Lines]",
          "1762:                 err = SafeRead(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp, read_bytes);",
          "1763:                 if ( 0 == err ) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1735:                     free(matvar->dims);",
          "1736:                     matvar->dims = NULL;",
          "1737:                     matvar->rank = 0;",
          "1739:                 }",
          "1740:             }",
          "1742:             if ( matvar->rank % 2 != 0 ) {",
          "1747:                     free(matvar->dims);",
          "1748:                     matvar->dims = NULL;",
          "1749:                     matvar->rank = 0;",
          "1751:                 }",
          "1752:             }",
          "1753:         } else {",
          "1754:             matvar->rank = 0;",
          "1755:             Mat_Critical(\"Error allocating memory for dims\");",
          "1756:         }",
          "1757:     }",
          "1759: }",
          "",
          "[Removed Lines]",
          "1738:                     return 0;",
          "1743:                 size_t readresult = fread(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp);",
          "1744:                 if ( 1 == readresult ) {",
          "1745:                     bytesread += sizeof(mat_uint32_t);",
          "1746:                 } else {",
          "1750:                     return 0;",
          "1758:     return bytesread;",
          "",
          "[Added Lines]",
          "1773:                     return err;",
          "1778:                 err = SafeRead(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp, read_bytes);",
          "1779:                 if ( 0 != err ) {",
          "1783:                     return err;",
          "1788:             err = 1;",
          "1792:     return err;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2709:         }",
          "2710: #endif",
          "2711:     } else {",
          "2713:         if ( mat->byteswap )",
          "2714:             (void)Mat_uint32Swap(tag);",
          "2715:         packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "2712:         size_t bytesread = fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "2746:         if ( 0 != SafeRead(tag, 4, 1, (FILE*)mat->fp, NULL) ) {",
          "2747:             return;",
          "2748:         }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2718:             nBytes = (tag[0] & 0xffff0000) >> 16;",
          "2719:         } else {",
          "2720:             data_in_tag = 0;",
          "2722:             if ( mat->byteswap )",
          "2723:                 (void)Mat_uint32Swap(tag+1);",
          "2724:             nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "2721:             bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "2757:             if ( 0 != SafeRead(tag+1, 4, 1, (FILE*)mat->fp, NULL) ) {",
          "2758:                 return;",
          "2759:             }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2970:                 matvar->data_size = Mat_SizeOf(matvar->data_type);",
          "2971:                 matvar->nbytes = nBytes;",
          "2972:             } else {",
          "2974:                 if ( byteswap )",
          "2975:                     (void)Mat_uint32Swap(tag);",
          "2976:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "2973:                 bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3011:                 err = SafeRead(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3012:                 if ( 0 != err ) {",
          "3013:                     break;",
          "3014:                 }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2980:                 } else {",
          "2981:                     data_in_tag = 0;",
          "2983:                     if ( byteswap )",
          "2984:                         (void)Mat_uint32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "2982:                     bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3023:                     err = SafeRead(tag+1, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3024:                     if ( 0 != err ) {",
          "3025:                         break;",
          "3026:                     }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3110:                 }",
          "3111: #endif",
          "3112:             } else {",
          "3114:                 if ( mat->byteswap )",
          "3115:                     (void)Mat_uint32Swap(tag);",
          "3116:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "3113:                 bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3157:                 err = SafeRead(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3158:                 if ( 0 != err ) {",
          "3159:                     break;",
          "3160:                 }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3119:                     N = (tag[0] & 0xffff0000) >> 16;",
          "3120:                 } else {",
          "3121:                     data_in_tag = 0;",
          "3123:                     if ( mat->byteswap )",
          "3124:                         (void)Mat_uint32Swap(&N);",
          "3125:                 }",
          "",
          "[Removed Lines]",
          "3122:                     bytesread += fread(&N,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3169:                     err = SafeRead(&N, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3170:                     if ( 0 != err ) {",
          "3171:                         break;",
          "3172:                     }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3216:                         (void)fseek((FILE*)mat->fp,8-(nBytes % 8),SEEK_CUR);",
          "3220:                     if ( byteswap )",
          "3221:                         (void)Mat_uint32Swap(tag);",
          "3222:                     packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "3219:                     bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3269:                     err = SafeRead(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3270:                     if ( 0 != err ) {",
          "3271:                         break;",
          "3272:                     }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3225:                         nBytes = (tag[0] & 0xffff0000) >> 16;",
          "3226:                     } else {",
          "3227:                         data_in_tag = 0;",
          "3229:                         if ( byteswap )",
          "3230:                             (void)Mat_uint32Swap(tag+1);",
          "3231:                         nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "3228:                         bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3281:                         err = SafeRead(tag+1, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3282:                         if ( 0 != err ) {",
          "3283:                             break;",
          "3284:                         }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4220:     (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);",
          "4221:     if ( matvar->compression == MAT_COMPRESSION_NONE ) {",
          "4223:         if ( mat->byteswap ) {",
          "4224:             (void)Mat_int32Swap(tag);",
          "4225:             (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4222:         bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4278:         err = SafeRead(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4279:         if ( 0 != err ) {",
          "4280:             return err;",
          "4281:         }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4293:                 ReadDataSlab2(mat,complex_data->Re,matvar->class_type,",
          "4294:                     matvar->data_type,matvar->dims,start,stride,edge);",
          "4295:                 (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4297:                 if ( mat->byteswap ) {",
          "4298:                     (void)Mat_int32Swap(tag);",
          "4299:                     (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4296:                 bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4355:                 err = SafeRead(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4356:                 if ( 0 != err ) {",
          "4357:                     return err;",
          "4358:                 }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4356:                     start,stride,edge);",
          "4358:                 (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4360:                 if ( mat->byteswap ) {",
          "4361:                     (void)Mat_int32Swap(tag);",
          "4362:                     (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4359:                 bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4421:                 err = SafeRead(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4422:                 if ( 0 != err ) {",
          "4423:                     return err;",
          "4424:                 }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4446:         return -1;",
          "4447:     (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);",
          "4448:     if ( matvar->compression == MAT_COMPRESSION_NONE ) {",
          "4450:         if ( mat->byteswap ) {",
          "4451:             (void)Mat_int32Swap(tag);",
          "4452:             (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4449:         bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4514:         err = SafeRead(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4515:         if ( 0 != err ) {",
          "4516:             return err;",
          "4517:         }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4521:             ReadDataSlab1(mat,complex_data->Re,matvar->class_type,",
          "4522:                           matvar->data_type,start,stride,edge);",
          "4523:             (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4525:             if ( mat->byteswap ) {",
          "4526:                 (void)Mat_int32Swap(tag);",
          "4527:                 (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4524:             bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4592:             err = SafeRead(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4593:             if ( 0 != err ) {",
          "4594:                 return err;",
          "4595:             }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4859:         Mat_Critical(\"Couldn't determine file position\");",
          "4860:         return NULL;",
          "4861:     }",
          "4867:         return NULL;",
          "4868:     if ( mat->byteswap ) {",
          "4869:         (void)Mat_int32Swap(&data_type);",
          "",
          "[Removed Lines]",
          "4862:     err = fread(&data_type,4,1,(FILE*)mat->fp);",
          "4863:     if ( err == 0 )",
          "4864:         return NULL;",
          "4865:     err = fread(&nBytes,4,1,(FILE*)mat->fp);",
          "4866:     if ( err == 0 )",
          "",
          "[Added Lines]",
          "4933:     {",
          "4934:         size_t nbytes = 0;",
          "4935:         err = SafeRead(&data_type, 4, 1, (FILE*)mat->fp, &nbytes);",
          "4936:         if ( 0 != err || 0 == nbytes)",
          "4937:             return NULL;",
          "4938:     }",
          "4939:     err = SafeRead(&nBytes, 4, 1, (FILE*)mat->fp, NULL);",
          "4940:     if ( 0 != err )",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5042:         case MAT_T_MATRIX:",
          "5043:         {",
          "5044:             mat_uint32_t buf[6];",
          "5050:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5051:                 break;",
          "5052:             }",
          "",
          "[Removed Lines]",
          "5045:             size_t readresult;",
          "5048:             readresult = fread(buf, 4, 6, (FILE*)mat->fp);",
          "5049:             if ( 6 != readresult ) {",
          "",
          "[Added Lines]",
          "5121:             err = SafeRead(buf, 4, 6, (FILE*)mat->fp, NULL);",
          "5122:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5077:                    matvar->nbytes = buf[3];",
          "5078:                }",
          "5079:             }",
          "5086:             }",
          "5090:                 Mat_VarFree(matvar);",
          "5091:                 matvar = NULL;",
          "5092:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "5080:             readresult = ReadRankDims(mat, matvar, (enum matio_types)buf[4], buf[5]);",
          "5081:             if ( 0 == readresult && 0 < matvar->rank ) {",
          "5082:                 Mat_VarFree(matvar);",
          "5083:                 matvar = NULL;",
          "5084:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5085:                 break;",
          "5088:             readresult = fread(buf, 4, 2, (FILE*)mat->fp);",
          "5089:             if ( 2 != readresult ) {",
          "",
          "[Added Lines]",
          "5154:             {",
          "5155:                 size_t nbytes = 0;",
          "5156:                 err = SafeReadRankDims(mat, matvar, (enum matio_types)buf[4], buf[5], &nbytes);",
          "5157:                 if ( 0 == nbytes && 0 < matvar->rank ) {",
          "5158:                     Mat_VarFree(matvar);",
          "5159:                     matvar = NULL;",
          "5160:                     (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5161:                     break;",
          "5162:                 }",
          "5165:             err = SafeRead(buf, 4, 2, (FILE*)mat->fp, NULL);",
          "5166:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5113:                 }",
          "5114:                 matvar->name = (char*)malloc(len_pad + 1);",
          "5115:                 if ( NULL != matvar->name ) {",
          "5118:                         matvar->name[len] = '\\0';",
          "5119:                     } else {",
          "5120:                         Mat_VarFree(matvar);",
          "",
          "[Removed Lines]",
          "5116:                     readresult = fread(matvar->name, 1, len_pad, (FILE*)mat->fp);",
          "5117:                     if ( readresult == len_pad ) {",
          "",
          "[Added Lines]",
          "5193:                     err = SafeRead(matvar->name, 1, len_pad, (FILE*)mat->fp, NULL);",
          "5194:                     if ( 0 == err ) {",
          "",
          "---------------"
        ],
        "src/matio_private.h||src/matio_private.h": [
          "File: src/matio_private.h -> src/matio_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: EXTERN int SafeMulDims(const matvar_t *matvar, size_t* nelems);",
          "231: EXTERN int SafeMul(size_t* res, size_t a, size_t b);",
          "232: EXTERN int SafeAdd(size_t* res, size_t a, size_t b);",
          "235: #if defined(_WIN32) && defined(_MSC_VER)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: EXTERN int SafeRead(void* buf, size_t size, size_t count, FILE* fp, size_t* read_bytes);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7455408ffc316929e87182334cec7f860a13d0f",
      "candidate_info": {
        "commit_hash": "d7455408ffc316929e87182334cec7f860a13d0f",
        "repo": "tbeu/matio",
        "commit_url": "https://github.com/tbeu/matio/commit/d7455408ffc316929e87182334cec7f860a13d0f",
        "files": [
          "src/mat5.c"
        ],
        "message": "Check read success",
        "before_after_code_files": [
          "src/mat5.c||src/mat5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mat5.c||src/mat5.c"
          ],
          "candidate": [
            "src/mat5.c||src/mat5.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mat5.c||src/mat5.c": [
          "File: src/mat5.c -> src/mat5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106: #endif",
          "1108:     } else {",
          "1110:         mat_uint32_t nBytes;",
          "1111:         mat_uint32_t array_flags;",
          "1113:         for ( i = 0; i < nelems; i++ ) {",
          "1115:             mat_uint32_t name_len;",
          "1116:             cells[i] = Mat_VarCalloc();",
          "1117:             if ( !cells[i] ) {",
          "",
          "[Removed Lines]",
          "1109:         mat_uint32_t buf[6];",
          "1114:             int cell_bytes_read;",
          "",
          "[Added Lines]",
          "1109:         mat_uint32_t buf[6] = {0,};",
          "1114:             size_t readresult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1120:             }",
          "1127:                 continue;",
          "1129:             if ( mat->byteswap ) {",
          "1130:                 (void)Mat_uint32Swap(buf);",
          "1131:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1123:             cell_bytes_read = fread(buf,4,2,(FILE*)mat->fp);",
          "1126:             if ( !cell_bytes_read )",
          "1128:             bytesread += cell_bytes_read;",
          "",
          "[Added Lines]",
          "1123:             readresult = fread(buf,4,2,(FILE*)mat->fp);",
          "1126:             if ( 0 == readresult )",
          "1128:             bytesread += readresult;",
          "1129:             if ( 1 == readresult ) {",
          "1130:                 Mat_VarFree(cells[i]);",
          "1131:                 cells[i] = NULL;",
          "1132:                 break;",
          "1133:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1145:             }",
          "1149:             if ( mat->byteswap ) {",
          "1150:                 (void)Mat_uint32Swap(buf);",
          "1151:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1148:             bytesread += fread(buf,4,6,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1153:             readresult = fread(buf,4,6,(FILE*)mat->fp);",
          "1154:             bytesread += readresult;",
          "1155:             if ( 6 != readresult ) {",
          "1156:                 Mat_VarFree(cells[i]);",
          "1157:                 cells[i] = NULL;",
          "1158:                 break;",
          "1159:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1174:                 nBytes -= nbytes;",
          "1175:             }",
          "1179:             if ( mat->byteswap ) {",
          "1180:                 (void)Mat_uint32Swap(buf);",
          "1181:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1177:             bytesread+=fread(buf,1,8,(FILE*)mat->fp);",
          "1178:             nBytes-=8;",
          "",
          "[Added Lines]",
          "1188:             readresult = fread(buf,1,8,(FILE*)mat->fp);",
          "1189:             bytesread += readresult;",
          "1190:             if ( 8 != readresult ) {",
          "1191:                 Mat_VarFree(cells[i]);",
          "1192:                 cells[i] = NULL;",
          "1193:                 break;",
          "1194:             }",
          "1195:             nBytes -= 8;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1831b94a73f2cd665bd48f65c8516509d0740e",
      "candidate_info": {
        "commit_hash": "7a1831b94a73f2cd665bd48f65c8516509d0740e",
        "repo": "tbeu/matio",
        "commit_url": "https://github.com/tbeu/matio/commit/7a1831b94a73f2cd665bd48f65c8516509d0740e",
        "files": [
          "src/inflate.c",
          "src/mat.c",
          "src/mat4.c",
          "src/mat5.c",
          "src/mat73.c",
          "src/matio_private.h",
          "src/matvar_cell.c",
          "src/matvar_struct.c",
          "test/test_mat.c"
        ],
        "message": "Check read success and refactor inflate.c\n\nAs reported by https://sourceforge.net/p/matio/discussion/609376/thread/75fd85fa8b/ and https://github.com/tbeu/matio/issues/120",
        "before_after_code_files": [
          "src/inflate.c||src/inflate.c",
          "src/mat.c||src/mat.c",
          "src/mat4.c||src/mat4.c",
          "src/mat5.c||src/mat5.c",
          "src/mat73.c||src/mat73.c",
          "src/matio_private.h||src/matio_private.h",
          "src/matvar_cell.c||src/matvar_cell.c",
          "src/matvar_struct.c||src/matvar_struct.c",
          "test/test_mat.c||test/test_mat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mat5.c||src/mat5.c"
          ],
          "candidate": [
            "src/mat5.c||src/mat5.c"
          ]
        }
      },
      "candidate_diff": {
        "src/inflate.c||src/inflate.c": [
          "File: src/inflate.c -> src/inflate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: {",
          "50:     mat_uint8_t comp_buf[READ_BLOCK_SIZE], uncomp_buf[READ_BLOCK_SIZE];",
          "55:         return 0;",
          "58:     if ( !z->avail_in ) {",
          "59:         z->next_in = comp_buf;",
          "62:     }",
          "63:     z->avail_out = n;",
          "64:     z->next_out  = uncomp_buf;",
          "65:     err = inflate(z,Z_FULL_FLUSH);",
          "66:     if ( err == Z_STREAM_END ) {",
          "68:     } else if ( err != Z_OK ) {",
          "69:         Mat_Critical(\"InflateSkip: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "71:     }",
          "72:     if ( !z->avail_out ) {",
          "73:         cnt += n;",
          "75:         z->avail_out = n;",
          "76:         z->next_out  = uncomp_buf;",
          "77:     }",
          "79:         if ( !z->avail_in ) {",
          "83:         }",
          "84:         err = inflate(z,Z_FULL_FLUSH);",
          "85:         if ( err == Z_STREAM_END ) {",
          "",
          "[Removed Lines]",
          "47: size_t",
          "48: InflateSkip(mat_t *mat, z_streamp z, int nbytes)",
          "51:     int    n, err, cnt = 0;",
          "52:     size_t bytesread = 0;",
          "54:     if ( nbytes < 1 )",
          "57:     n = nbytes < READ_BLOCK_SIZE ? nbytes : READ_BLOCK_SIZE;",
          "60:         z->avail_in += fread(comp_buf,1,n,(FILE*)mat->fp);",
          "61:         bytesread   += z->avail_in;",
          "67:         return bytesread;",
          "70:         return bytesread;",
          "74:         n = nbytes - cnt < READ_BLOCK_SIZE ? nbytes - cnt : READ_BLOCK_SIZE;",
          "78:     while ( cnt < nbytes ) {",
          "80:             z->next_in   = comp_buf;",
          "81:             z->avail_in += fread(comp_buf,1,n,(FILE*)mat->fp);",
          "82:             bytesread   += z->avail_in;",
          "",
          "[Added Lines]",
          "49: int",
          "50: InflateSkip(mat_t *mat, z_streamp z, int nBytes, size_t* bytesread)",
          "53:     int n, err = 0, cnt = 0;",
          "55:     if ( nBytes < 1 )",
          "58:     n = nBytes < READ_BLOCK_SIZE ? nBytes : READ_BLOCK_SIZE;",
          "60:         size_t nbytes = fread(comp_buf, 1, n, (FILE*)mat->fp);",
          "61:         if ( 0 == nbytes ) {",
          "62:             return err;",
          "63:         }",
          "64:         if ( NULL != bytesread ) {",
          "66:         }",
          "67:         z->avail_in = (uInt)nbytes;",
          "74:         return err;",
          "77:         return err;",
          "81:         n = nBytes - cnt < READ_BLOCK_SIZE ? nBytes - cnt : READ_BLOCK_SIZE;",
          "85:     while ( cnt < nBytes ) {",
          "87:             size_t nbytes = fread(comp_buf, 1, n, (FILE*)mat->fp);",
          "88:             if ( 0 == nbytes ) {",
          "89:                 break;",
          "90:             }",
          "91:             if ( NULL != bytesread ) {",
          "93:             }",
          "94:             z->avail_in = (uInt)nbytes;",
          "95:             z->next_in = comp_buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         }",
          "91:         if ( !z->avail_out ) {",
          "92:             cnt += n;",
          "94:             z->avail_out = n;",
          "95:             z->next_out  = uncomp_buf;",
          "96:         }",
          "97:     }",
          "99:     if ( z->avail_in ) {",
          "147:         }",
          "163:     }",
          "166: }",
          "",
          "[Removed Lines]",
          "93:             n = nbytes - cnt < READ_BLOCK_SIZE ? nbytes - cnt : READ_BLOCK_SIZE;",
          "100:         long offset = -(long)z->avail_in;",
          "101:         (void)fseek((FILE*)mat->fp,offset,SEEK_CUR);",
          "102:         bytesread -= z->avail_in;",
          "103:         z->avail_in = 0;",
          "104:     }",
          "106:     return bytesread;",
          "107: }",
          "118: size_t",
          "119: InflateSkip2(mat_t *mat, matvar_t *matvar, int nbytes)",
          "120: {",
          "121:     mat_uint8_t comp_buf[32],uncomp_buf[32];",
          "122:     int    err, cnt = 0;",
          "123:     size_t bytesread = 0;",
          "125:     if ( !matvar->internal->z->avail_in ) {",
          "126:         matvar->internal->z->avail_in = 1;",
          "127:         matvar->internal->z->next_in = comp_buf;",
          "128:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "129:     }",
          "130:     matvar->internal->z->avail_out = 1;",
          "131:     matvar->internal->z->next_out = uncomp_buf;",
          "132:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "133:     if ( err != Z_OK ) {",
          "134:         Mat_Critical(\"InflateSkip2: %s - inflate returned %s\",matvar->name,zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "135:         return bytesread;",
          "136:     }",
          "137:     if ( !matvar->internal->z->avail_out ) {",
          "138:         matvar->internal->z->avail_out = 1;",
          "139:         matvar->internal->z->next_out = uncomp_buf;",
          "140:     }",
          "141:     while ( cnt < nbytes ) {",
          "142:         if ( !matvar->internal->z->avail_in ) {",
          "143:             matvar->internal->z->avail_in = 1;",
          "144:             matvar->internal->z->next_in = comp_buf;",
          "145:             bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "146:             cnt++;",
          "148:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "149:         if ( err != Z_OK ) {",
          "150:             Mat_Critical(\"InflateSkip2: %s - inflate returned %s\",matvar->name,zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "151:             return bytesread;",
          "152:         }",
          "153:         if ( !matvar->internal->z->avail_out ) {",
          "154:             matvar->internal->z->avail_out = 1;",
          "155:             matvar->internal->z->next_out = uncomp_buf;",
          "156:         }",
          "157:     }",
          "159:     if ( matvar->internal->z->avail_in ) {",
          "160:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "161:         bytesread -= matvar->internal->z->avail_in;",
          "162:         matvar->internal->z->avail_in = 0;",
          "165:     return bytesread;",
          "",
          "[Added Lines]",
          "106:             n = nBytes - cnt < READ_BLOCK_SIZE ? nBytes - cnt : READ_BLOCK_SIZE;",
          "113:         const long offset = -(long)z->avail_in;",
          "114:         (void)fseek((FILE*)mat->fp, offset, SEEK_CUR);",
          "115:         if ( NULL != bytesread ) {",
          "118:         z->avail_in = 0;",
          "121:     return err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: {",
          "188:     switch ( data_type ) {",
          "223:         default:",
          "329:     }",
          "332: }",
          "",
          "[Removed Lines]",
          "178: size_t",
          "179: InflateSkipData(mat_t *mat,z_streamp z,enum matio_types data_type,int len)",
          "181:     int data_size = 0;",
          "183:     if ( (mat == NULL) || (z == NULL) )",
          "184:         return 0;",
          "185:     else if ( len < 1 )",
          "186:         return 0;",
          "189:         case MAT_T_DOUBLE:",
          "190:             data_size = sizeof(double);",
          "191:             break;",
          "192:         case MAT_T_SINGLE:",
          "193:             data_size = sizeof(float);",
          "194:             break;",
          "195: #ifdef HAVE_MAT_INT64_T",
          "196:         case MAT_T_INT64:",
          "197:             data_size = sizeof(mat_int64_t);",
          "198:             break;",
          "200: #ifdef HAVE_MAT_UINT64_T",
          "201:         case MAT_T_UINT64:",
          "202:             data_size = sizeof(mat_uint64_t);",
          "203:             break;",
          "205:         case MAT_T_INT32:",
          "206:             data_size = sizeof(mat_int32_t);",
          "207:             break;",
          "208:         case MAT_T_UINT32:",
          "209:             data_size = sizeof(mat_uint32_t);",
          "210:             break;",
          "211:         case MAT_T_INT16:",
          "212:             data_size = sizeof(mat_int16_t);",
          "213:             break;",
          "214:         case MAT_T_UINT16:",
          "215:             data_size = sizeof(mat_uint16_t);",
          "216:             break;",
          "217:         case MAT_T_UINT8:",
          "218:             data_size = sizeof(mat_uint8_t);",
          "219:             break;",
          "220:         case MAT_T_INT8:",
          "221:             data_size = sizeof(mat_int8_t);",
          "222:             break;",
          "224:             return 0;",
          "225:     }",
          "226:     InflateSkip(mat,z,len*data_size);",
          "227:     return len;",
          "228: }",
          "239: size_t",
          "240: InflateVarTag(mat_t *mat, matvar_t *matvar, void *buf)",
          "241: {",
          "242:     mat_uint8_t comp_buf[32];",
          "243:     int    err;",
          "244:     size_t bytesread = 0, readresult = 1;",
          "246:     if ( buf == NULL )",
          "247:         return 0;",
          "249:     if ( !matvar->internal->z->avail_in ) {",
          "250:         matvar->internal->z->avail_in = 1;",
          "251:         matvar->internal->z->next_in = comp_buf;",
          "252:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "253:     }",
          "254:     matvar->internal->z->avail_out = 8;",
          "255:     matvar->internal->z->next_out = ZLIB_BYTE_PTR(buf);",
          "256:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "257:     if ( err != Z_OK ) {",
          "258:         Mat_Critical(\"InflateVarTag: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "259:         return bytesread;",
          "260:     }",
          "261:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "262:         matvar->internal->z->avail_in = 1;",
          "263:         matvar->internal->z->next_in = comp_buf;",
          "264:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "265:         bytesread += readresult;",
          "266:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "267:         if ( err != Z_OK ) {",
          "268:             Mat_Critical(\"InflateVarTag: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "269:             return bytesread;",
          "270:         }",
          "271:     }",
          "273:     if ( matvar->internal->z->avail_in ) {",
          "274:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "275:         bytesread -= matvar->internal->z->avail_in;",
          "276:         matvar->internal->z->avail_in = 0;",
          "277:     }",
          "279:     return bytesread;",
          "280: }",
          "291: size_t",
          "292: InflateArrayFlags(mat_t *mat, matvar_t *matvar, void *buf)",
          "293: {",
          "294:     mat_uint8_t comp_buf[32];",
          "295:     int    err;",
          "296:     size_t bytesread = 0, readresult = 1;",
          "298:     if ( buf == NULL )",
          "299:         return 0;",
          "301:     if ( !matvar->internal->z->avail_in ) {",
          "302:         matvar->internal->z->avail_in = 1;",
          "303:         matvar->internal->z->next_in = comp_buf;",
          "304:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "305:     }",
          "306:     matvar->internal->z->avail_out = 16;",
          "307:     matvar->internal->z->next_out = ZLIB_BYTE_PTR(buf);",
          "308:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "309:     if ( err != Z_OK ) {",
          "310:         Mat_Critical(\"InflateArrayFlags: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "311:         return bytesread;",
          "312:     }",
          "313:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "314:         matvar->internal->z->avail_in = 1;",
          "315:         matvar->internal->z->next_in = comp_buf;",
          "316:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "317:         bytesread += readresult;",
          "318:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "319:         if ( err != Z_OK ) {",
          "320:             Mat_Critical(\"InflateArrayFlags: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "321:             return bytesread;",
          "322:         }",
          "323:     }",
          "325:     if ( matvar->internal->z->avail_in ) {",
          "326:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "327:         bytesread -= matvar->internal->z->avail_in;",
          "328:         matvar->internal->z->avail_in = 0;",
          "331:     return bytesread;",
          "",
          "[Added Lines]",
          "136: int",
          "137: InflateSkipData(mat_t *mat, z_streamp z, enum matio_types data_type, int len)",
          "139:     if ( mat == NULL || z == NULL || len < 1 )",
          "140:         return 1;",
          "143:         case MAT_T_UTF8:",
          "144:         case MAT_T_UTF16:",
          "145:         case MAT_T_UTF32:",
          "146:             return 1;",
          "148:             break;",
          "151:     return InflateSkip(mat, z, (unsigned int)Mat_SizeOf(data_type)*len, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349: {",
          "351:     mat_int32_t tag[2];",
          "355:     if ( buf == NULL )",
          "380:     }",
          "381:     tag[0] = *(int *)buf;",
          "382:     tag[1] = *((int *)buf+1);",
          "",
          "[Removed Lines]",
          "347: size_t",
          "348: InflateRankDims(mat_t *mat, matvar_t *matvar, void *buf, size_t nbytes, mat_uint32_t** dims)",
          "350:     mat_uint8_t comp_buf[32];",
          "352:     int    err, rank, i;",
          "353:     size_t bytesread = 0, readresult = 1;",
          "356:         return 0;",
          "358:     if ( !matvar->internal->z->avail_in ) {",
          "359:         matvar->internal->z->avail_in = 1;",
          "360:         matvar->internal->z->next_in = comp_buf;",
          "361:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "362:     }",
          "363:     matvar->internal->z->avail_out = 8;",
          "364:     matvar->internal->z->next_out = ZLIB_BYTE_PTR(buf);",
          "365:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "366:     if ( err != Z_OK ) {",
          "367:         Mat_Critical(\"InflateRankDims: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "368:         return bytesread;",
          "369:     }",
          "370:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "371:         matvar->internal->z->avail_in = 1;",
          "372:         matvar->internal->z->next_in = comp_buf;",
          "373:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "374:         bytesread += readresult;",
          "375:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "376:         if ( err != Z_OK ) {",
          "377:             Mat_Critical(\"InflateRankDims: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "378:             return bytesread;",
          "379:         }",
          "",
          "[Added Lines]",
          "169: int",
          "170: InflateRankDims(mat_t *mat, z_streamp z, void *buf, size_t nBytes, mat_uint32_t** dims, size_t* bytesread)",
          "173:     int rank, i, err;",
          "176:         return 1;",
          "178:     err = Inflate(mat, z, buf, 8, bytesread);",
          "179:     if ( 0 != err ) {",
          "180:         return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:     }",
          "387:     if ( (tag[0] & 0x0000ffff) != MAT_T_INT32 ) {",
          "388:         Mat_Critical(\"InflateRankDims: Reading dimensions expected type MAT_T_INT32\");",
          "390:     }",
          "391:     rank = tag[1];",
          "392:     if ( rank % 8 != 0 )",
          "393:         i = 8-(rank %8);",
          "394:     else",
          "395:         i = 0;",
          "407:     } else {",
          "410:         if ( NULL != *dims ) {",
          "412:         } else {",
          "414:             Mat_Critical(\"Error allocating memory for dims\");",
          "416:         }",
          "417:     }",
          "443: }",
          "508: {",
          "513:     if ( buf == NULL )",
          "516:     if ( !z->avail_in ) {",
          "518:         z->next_in = comp_buf;",
          "520:     }",
          "522:     z->next_out = ZLIB_BYTE_PTR(buf);",
          "523:     err = inflate(z,Z_NO_FLUSH);",
          "524:     if ( err != Z_OK ) {",
          "527:     }",
          "530:         z->next_in = comp_buf;",
          "533:         err = inflate(z,Z_NO_FLUSH);",
          "534:         if ( err != Z_OK ) {",
          "537:         }",
          "538:     }",
          "540:     if ( z->avail_in ) {",
          "543:         z->avail_in = 0;",
          "544:     }",
          "547: }",
          "560: InflateData(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes)",
          "561: {",
          "562:     mat_uint8_t comp_buf[READ_BLOCK_SIZE];",
          "566:     if ( buf == NULL )",
          "568:     if ( nBytes == 0 ) {",
          "570:     }",
          "572:     if ( !z->avail_in ) {",
          "577:         }",
          "579:         z->next_in = comp_buf;",
          "580:     }",
          "581:     z->avail_out = nBytes;",
          "582:     z->next_out = ZLIB_BYTE_PTR(buf);",
          "583:     err = inflate(z,Z_FULL_FLUSH);",
          "584:     if ( err == Z_STREAM_END ) {",
          "586:     } else if ( err != Z_OK ) {",
          "587:         Mat_Critical(\"InflateData: inflate returned %s\",zError( err == Z_NEED_DICT ? Z_DATA_ERROR : err ));",
          "589:     }",
          "590:     while ( z->avail_out && !z->avail_in ) {",
          "591:         if ( nBytes > READ_BLOCK_SIZE + bytesread ) {",
          "595:         } else {",
          "597:         }",
          "599:         z->next_in = comp_buf;",
          "600:         err = inflate(z,Z_FULL_FLUSH);",
          "601:         if ( err == Z_STREAM_END ) {",
          "602:             break;",
          "604:             Mat_Critical(\"InflateData: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "605:             break;",
          "606:         }",
          "607:     }",
          "609:     if ( z->avail_in ) {",
          "612:         bytesread -= z->avail_in;",
          "613:         z->avail_in = 0;",
          "614:     }",
          "617: }",
          "",
          "[Removed Lines]",
          "389:         return bytesread;",
          "396:     rank+=i;",
          "398:     if ( !matvar->internal->z->avail_in ) {",
          "399:         matvar->internal->z->avail_in = 1;",
          "400:         matvar->internal->z->next_in = comp_buf;",
          "401:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "402:     }",
          "404:     matvar->internal->z->avail_out = rank;",
          "405:     if ( sizeof(mat_uint32_t)*(rank + 2) <= nbytes ) {",
          "406:         matvar->internal->z->next_out = ZLIB_BYTE_PTR((mat_int32_t *)buf+2);",
          "411:             matvar->internal->z->next_out = ZLIB_BYTE_PTR(*dims);",
          "415:             return bytesread;",
          "418:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "419:     if ( err != Z_OK ) {",
          "420:         Mat_Critical(\"InflateRankDims: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "421:         return bytesread;",
          "422:     }",
          "423:     readresult = 1;",
          "424:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "425:         matvar->internal->z->avail_in = 1;",
          "426:         matvar->internal->z->next_in = comp_buf;",
          "427:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "428:         bytesread += readresult;",
          "429:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "430:         if ( err != Z_OK ) {",
          "431:             Mat_Critical(\"InflateRankDims: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "432:             return bytesread;",
          "433:         }",
          "434:     }",
          "436:     if ( matvar->internal->z->avail_in ) {",
          "437:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "438:         bytesread -= matvar->internal->z->avail_in;",
          "439:         matvar->internal->z->avail_in = 0;",
          "440:     }",
          "442:     return bytesread;",
          "454: size_t",
          "455: InflateVarName(mat_t *mat, matvar_t *matvar, void *buf, int N)",
          "456: {",
          "457:     mat_uint8_t comp_buf[32];",
          "458:     int    err;",
          "459:     size_t bytesread = 0, readresult = 1;",
          "461:     if ( buf == NULL )",
          "462:         return 0;",
          "464:     if ( !matvar->internal->z->avail_in ) {",
          "465:         matvar->internal->z->avail_in = 1;",
          "466:         matvar->internal->z->next_in = comp_buf;",
          "467:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "468:     }",
          "469:     matvar->internal->z->avail_out = N;",
          "470:     matvar->internal->z->next_out = ZLIB_BYTE_PTR(buf);",
          "471:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "472:     if ( err != Z_OK ) {",
          "473:         Mat_Critical(\"InflateVarName: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "474:         return bytesread;",
          "475:     }",
          "476:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "477:         matvar->internal->z->avail_in = 1;",
          "478:         matvar->internal->z->next_in = comp_buf;",
          "479:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "480:         bytesread += readresult;",
          "481:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "482:         if ( err != Z_OK ) {",
          "483:             Mat_Critical(\"InflateVarName: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "484:             return bytesread;",
          "485:         }",
          "486:     }",
          "488:     if ( matvar->internal->z->avail_in ) {",
          "489:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "490:         bytesread -= matvar->internal->z->avail_in;",
          "491:         matvar->internal->z->avail_in = 0;",
          "492:     }",
          "494:     return bytesread;",
          "495: }",
          "506: size_t",
          "507: InflateDataType(mat_t *mat, z_streamp z, void *buf)",
          "509:     mat_uint8_t comp_buf[32];",
          "510:     int    err;",
          "511:     size_t bytesread = 0, readresult = 1;",
          "514:         return 0;",
          "517:         z->avail_in = 1;",
          "519:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "521:     z->avail_out = 4;",
          "525:         Mat_Critical(\"InflateDataType: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "526:         return bytesread;",
          "528:     while ( z->avail_out && !z->avail_in && 1 == readresult ) {",
          "529:         z->avail_in = 1;",
          "531:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "532:         bytesread += readresult;",
          "535:             Mat_Critical(\"InflateDataType: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "536:             return bytesread;",
          "541:         (void)fseek((FILE*)mat->fp,-(int)z->avail_in,SEEK_CUR);",
          "542:         bytesread -= z->avail_in;",
          "546:     return bytesread;",
          "559: size_t",
          "563:     int    err;",
          "564:     unsigned int bytesread = 0;",
          "567:         return 0;",
          "569:         return bytesread;",
          "573:         if ( nBytes > READ_BLOCK_SIZE ) {",
          "574:             z->avail_in = fread(comp_buf,1,READ_BLOCK_SIZE,(FILE*)mat->fp);",
          "575:         } else {",
          "576:             z->avail_in = fread(comp_buf,1,nBytes,(FILE*)mat->fp);",
          "578:         bytesread += z->avail_in;",
          "585:         return bytesread;",
          "588:         return bytesread;",
          "592:             z->avail_in = fread(comp_buf,1,READ_BLOCK_SIZE,(FILE*)mat->fp);",
          "594:             z->avail_in = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "596:             z->avail_in = fread(comp_buf,1,nBytes-bytesread,(FILE*)mat->fp);",
          "598:         bytesread += z->avail_in;",
          "603:         } else if ( err != Z_OK && err != Z_BUF_ERROR ) {",
          "610:         long offset = -(long)z->avail_in;",
          "611:         (void)fseek((FILE*)mat->fp,offset,SEEK_CUR);",
          "616:     return bytesread;",
          "",
          "[Added Lines]",
          "190:         return 1;",
          "197:     rank += i;",
          "199:     if ( sizeof(mat_uint32_t)*(rank + 2) <= nBytes ) {",
          "200:         err = Inflate(mat, z, (mat_int32_t *)buf+2, (unsigned int)rank, bytesread);",
          "205:             err = Inflate(mat, z, *dims, (unsigned int)rank, bytesread);",
          "209:             return 1;",
          "213:     return err;",
          "228: int",
          "229: Inflate(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes, size_t* bytesread)",
          "231:     mat_uint8_t comp_buf[4];",
          "232:     int err = 0;",
          "235:         return 1;",
          "238:         size_t nbytes = fread(comp_buf, 1, 1, (FILE*)mat->fp);",
          "239:         if ( 0 == nbytes ) {",
          "240:             return err;",
          "241:         }",
          "242:         if ( NULL != bytesread ) {",
          "244:         }",
          "245:         z->avail_in = (uInt)nbytes;",
          "248:     z->avail_out = nBytes;",
          "252:         Mat_Critical(\"Inflate: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "253:         return err;",
          "255:     while ( z->avail_out && !z->avail_in ) {",
          "256:         size_t nbytes = fread(comp_buf, 1, 1, (FILE*)mat->fp);",
          "257:         if ( 0 == nbytes ) {",
          "258:             break;",
          "259:         }",
          "260:         if ( NULL != bytesread ) {",
          "262:         }",
          "263:         z->avail_in = (uInt)nbytes;",
          "267:             Mat_Critical(\"Inflate: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "268:             return err;",
          "273:         const long offset = -(long)z->avail_in;",
          "274:         (void)fseek((FILE*)mat->fp, offset, SEEK_CUR);",
          "275:         if ( NULL != bytesread ) {",
          "277:         }",
          "281:     if ( z->avail_out && feof((FILE*)mat->fp) ) {",
          "282:         Mat_DebugMessage(1, \"Inflate: Read beyond EOF error: Read %u bytes, expected %u bytes\",",
          "283:             nBytes - z->avail_out, nBytes);",
          "284:     }",
          "286:     return err;",
          "301: int",
          "305:     int err = 0;",
          "306:     unsigned int n;",
          "307:     size_t bytesread = 0;",
          "310:         return 1;",
          "312:         return 0;",
          "315:     n = nBytes < READ_BLOCK_SIZE ? nBytes : READ_BLOCK_SIZE;",
          "317:         size_t nbytes = fread(comp_buf, 1, n, (FILE*)mat->fp);",
          "318:         if ( 0 == nbytes ) {",
          "319:             return err;",
          "321:         bytesread += nbytes;",
          "322:         z->avail_in = (uInt)nbytes;",
          "329:         return err;",
          "332:         return err;",
          "335:         size_t nbytes;",
          "337:             nbytes = fread(comp_buf, 1, READ_BLOCK_SIZE, (FILE*)mat->fp);",
          "339:             nbytes = fread(comp_buf, 1, 1, (FILE*)mat->fp);",
          "341:             nbytes = fread(comp_buf, 1, nBytes - bytesread, (FILE*)mat->fp);",
          "343:         if ( 0 == nbytes ) {",
          "344:             break;",
          "345:         }",
          "346:         bytesread += nbytes;",
          "347:         z->avail_in = (uInt)nbytes;",
          "352:         } else if ( err != Z_OK ) {",
          "359:         const long offset = -(long)z->avail_in;",
          "360:         (void)fseek((FILE*)mat->fp, offset, SEEK_CUR);",
          "365:     if ( z->avail_out && feof((FILE*)mat->fp) ) {",
          "366:         Mat_DebugMessage(1, \"InflateData: Read beyond EOF error: Read %u bytes, expected %u bytes\",",
          "367:             nBytes - z->avail_out, nBytes);",
          "368:     }",
          "370:     return err;",
          "",
          "---------------"
        ],
        "src/mat.c||src/mat.c": [
          "File: src/mat.c -> src/mat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: {",
          "255:     int i;",
          "",
          "[Removed Lines]",
          "253: int SafeMulDims(const matvar_t *matvar, size_t* nelems)",
          "",
          "[Added Lines]",
          "253: int MulDims(const matvar_t *matvar, size_t* nelems)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280: {",
          "281:     if ( !psnip_safe_size_mul(res, a, b) ) {",
          "",
          "[Removed Lines]",
          "279: int SafeMul(size_t* res, size_t a, size_t b)",
          "",
          "[Added Lines]",
          "279: int Mul(size_t* res, size_t a, size_t b)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297: {",
          "298:     if ( !psnip_safe_size_add(res, a, b) ) {",
          "",
          "[Removed Lines]",
          "296: int SafeAdd(size_t* res, size_t a, size_t b)",
          "",
          "[Added Lines]",
          "296: int Add(size_t* res, size_t a, size_t b)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:     return 0;",
          "304: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315: int",
          "316: Read(void* buf, size_t size, size_t count, FILE* fp, size_t* bytesread) {",
          "317:     const size_t readcount = fread(buf, size, count, fp);",
          "318:     int err = readcount != count;",
          "319:     if ( NULL != bytesread ) {",
          "321:     }",
          "322:     if ( err && feof(fp) && 0 == readcount) {",
          "323:         err = 0;",
          "324:     }",
          "325:     if ( err ) {",
          "326:         Mat_DebugMessage(1, \"Read beyond EOF error: Read %\"",
          "327:             SIZE_T_FMTSTR \" bytes, expected %\"",
          "328:             SIZE_T_FMTSTR \" bytes\", readcount*size, count*size);",
          "329:     }",
          "330:     return err;",
          "331: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:     }",
          "427:     mat->fp = fp;",
          "429:     if ( NULL == mat->header ) {",
          "430:         free(mat);",
          "431:         fclose(fp);",
          "",
          "[Removed Lines]",
          "428:     mat->header        = (char*)calloc(128,sizeof(char));",
          "",
          "[Added Lines]",
          "455:     mat->header = (char*)calloc(128,sizeof(char));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1025:                         (char**)calloc(nfields,sizeof(*matvar->internal->fieldnames));",
          "1026:                     for ( i = 0; i < nfields; i++ )",
          "1027:                         matvar->internal->fieldnames[i] = strdup(fields[i]->name);",
          "1029:                     if ( err ) {",
          "1030:                         Mat_VarFree(matvar);",
          "1031:                         Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "1028:                     err = SafeMul(&nelems, nelems, nfields);",
          "",
          "[Added Lines]",
          "1055:                     err = Mul(&nelems, nelems, nfields);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1045:         matvar->nbytes    = matvar->data_size;",
          "1046:     } else {",
          "1047:         matvar->data_size = data_size;",
          "1049:         if ( err ) {",
          "1050:             Mat_VarFree(matvar);",
          "1051:             Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "1048:         err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "1075:         err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1555:         return;",
          "1556:     if ( NULL != matvar->dims ) {",
          "1557:         nelems = 1;",
          "1559:         free(matvar->dims);",
          "1560:     }",
          "1561:     if ( NULL != matvar->data ) {",
          "",
          "[Removed Lines]",
          "1558:         SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "1585:         MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1564:                 if ( !matvar->mem_conserve ) {",
          "1565:                     matvar_t **fields = (matvar_t**)matvar->data;",
          "1566:                     size_t nelems_x_nfields, i;",
          "1568:                     for ( i = 0; i < nelems_x_nfields; i++ )",
          "1569:                         Mat_VarFree(fields[i]);",
          "",
          "[Removed Lines]",
          "1567:                     SafeMul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "[Added Lines]",
          "1594:                     Mul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1895:         size_t field_name_length;",
          "1896:         if ( NULL != fields ) {",
          "1897:             size_t nelems_x_nfields = matvar->internal->num_fields;",
          "1900:             if ( err )",
          "1901:                 return 0;",
          "1903:             for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "1904:                 if ( NULL != fields[i] ) {",
          "1905:                     if ( MAT_C_EMPTY != fields[i]->class_type ) {",
          "1907:                         if ( err )",
          "1908:                             return 0;",
          "1909:                     } else {",
          "",
          "[Removed Lines]",
          "1898:             err = SafeMulDims(matvar, &nelems_x_nfields);",
          "1899:             err |= SafeMul(&bytes, nelems_x_nfields, overhead);",
          "1906:                         err = SafeAdd(&bytes, bytes, Mat_VarGetSize(fields[i]));",
          "",
          "[Added Lines]",
          "1925:             err = MulDims(matvar, &nelems_x_nfields);",
          "1926:             err |= Mul(&bytes, nelems_x_nfields, overhead);",
          "1933:                         err = Add(&bytes, bytes, Mat_VarGetSize(fields[i]));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1913:                 }",
          "1914:             }",
          "1915:         }",
          "1918:         if ( err )",
          "1919:             return 0;",
          "1920:     } else if ( matvar->class_type == MAT_C_CELL ) {",
          "1921:         matvar_t **cells = (matvar_t**)matvar->data;",
          "1922:         if ( NULL != cells ) {",
          "1923:             size_t nelems = matvar->nbytes / matvar->data_size;",
          "1925:             if ( err )",
          "1926:                 return 0;",
          "1928:             for ( i = 0; i < nelems; i++ ) {",
          "1929:                 if ( NULL != cells[i] ) {",
          "1930:                     if ( MAT_C_EMPTY != cells[i]->class_type ) {",
          "1932:                         if ( err )",
          "1933:                             return 0;",
          "1934:                     } else {",
          "",
          "[Removed Lines]",
          "1916:         err = SafeMul(&field_name_length, 64 /* max field name length */, matvar->internal->num_fields);",
          "1917:         err |= SafeAdd(&bytes, bytes, field_name_length);",
          "1924:             err = SafeMul(&bytes, nelems, overhead);",
          "1931:                         err = SafeAdd(&bytes, bytes, Mat_VarGetSize(cells[i]));",
          "",
          "[Added Lines]",
          "1943:         err = Mul(&field_name_length, 64 /* max field name length */, matvar->internal->num_fields);",
          "1944:         err |= Add(&bytes, bytes, field_name_length);",
          "1951:             err = Mul(&bytes, nelems, overhead);",
          "1958:                         err = Add(&bytes, bytes, Mat_VarGetSize(cells[i]));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1942:         mat_sparse_t *sparse = (mat_sparse_t*)matvar->data;",
          "1943:         if ( NULL != sparse ) {",
          "1944:             size_t sparse_size = 0;",
          "1946:             if ( err )",
          "1947:                 return 0;",
          "1949:             if ( matvar->isComplex ) {",
          "1951:                 if ( err )",
          "1952:                     return 0;",
          "1953:             }",
          "1955: #if defined(_WIN64) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 8)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 8))",
          "1958: #elif defined(_WIN32) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 4)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 4))",
          "1961: #endif",
          "1963:             if ( err )",
          "1964:                 return 0;",
          "1966:             if ( sparse->ndata == 0 || sparse->nir == 0 || sparse->njc == 0 ) {",
          "1968:                 if ( err )",
          "1969:                     return 0;",
          "1970:             }",
          "",
          "[Removed Lines]",
          "1945:             err = SafeMul(&bytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "1950:                 err = SafeMul(&bytes, bytes, 2);",
          "1957:             err = SafeMul(&sparse_size, sparse->nir + sparse->njc, 8);",
          "1960:             err = SafeMul(&sparse_size, sparse->nir + sparse->njc, 4);",
          "1962:             err |= SafeAdd(&bytes, bytes, sparse_size);",
          "1967:                 err = SafeAdd(&bytes, bytes, matvar->isLogical ? 1 : 8);",
          "",
          "[Added Lines]",
          "1972:             err = Mul(&bytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "1977:                 err = Mul(&bytes, bytes, 2);",
          "1984:             err = Mul(&sparse_size, sparse->nir + sparse->njc, 8);",
          "1987:             err = Mul(&sparse_size, sparse->nir + sparse->njc, 4);",
          "1989:             err |= Add(&bytes, bytes, sparse_size);",
          "1994:                 err = Add(&bytes, bytes, matvar->isLogical ? 1 : 8);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1972:     } else {",
          "1973:         if ( matvar->rank > 0 ) {",
          "1974:             bytes = Mat_SizeOfClass(matvar->class_type);",
          "1976:             if ( err )",
          "1977:                 return 0;",
          "1979:             if ( matvar->isComplex ) {",
          "1981:                 if (err)",
          "1982:                     return 0;",
          "1983:             }",
          "",
          "[Removed Lines]",
          "1975:             err = SafeMulDims(matvar, &bytes);",
          "1980:                 err = SafeMul(&bytes, bytes, 2);",
          "",
          "[Added Lines]",
          "2002:             err = MulDims(matvar, &bytes);",
          "2007:                 err = Mul(&bytes, bytes, 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2016:     if ( NULL != matvar->dims ) {",
          "2017:         int k;",
          "2018:         nelems = 1;",
          "2020:         printf(\"Dimensions: %\" SIZE_T_FMTSTR,matvar->dims[0]);",
          "2021:         for ( k = 1; k < matvar->rank; k++ ) {",
          "2022:             printf(\" x %\" SIZE_T_FMTSTR,matvar->dims[k]);",
          "",
          "[Removed Lines]",
          "2019:         SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "2046:         MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2047:         matvar_t **fields = (matvar_t **)matvar->data;",
          "2048:         size_t nfields = matvar->internal->num_fields;",
          "2049:         size_t nelems_x_nfields = 1;",
          "2051:         if ( nelems_x_nfields > 0 ) {",
          "2052:             printf(\"Fields[%\" SIZE_T_FMTSTR \"] {\\n\", nelems_x_nfields);",
          "2053:             for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "",
          "[Removed Lines]",
          "2050:         SafeMul(&nelems_x_nfields, nelems, nfields);",
          "",
          "[Added Lines]",
          "2077:         Mul(&nelems_x_nfields, nelems, nfields);",
          "",
          "---------------"
        ],
        "src/mat4.c||src/mat4.c": [
          "File: src/mat4.c -> src/mat4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         case MAT_C_UINT8:",
          "185:         {",
          "186:             size_t nelems = 1;",
          "188:             if ( err ) {",
          "189:                 Mat_Critical(\"Integer multiplication overflow\");",
          "190:                 return -1;",
          "",
          "[Removed Lines]",
          "187:             int err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "187:             int err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     int err;",
          "301:     size_t nelems = 1;",
          "304:     if ( err ) {",
          "305:         Mat_Critical(\"Integer multiplication overflow\");",
          "306:         return err;",
          "",
          "[Removed Lines]",
          "303:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "303:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:     switch ( matvar->class_type ) {",
          "312:         case MAT_C_DOUBLE:",
          "313:             matvar->data_size = sizeof(double);",
          "315:             if ( err ) {",
          "316:                 Mat_Critical(\"Integer multiplication overflow\");",
          "317:                 return err;",
          "",
          "[Removed Lines]",
          "314:             err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "314:             err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:                 sparse = (mat_sparse_t*)matvar->data;",
          "392:                 sparse->nir = matvar->dims[0] - 1;",
          "393:                 sparse->nzmax = sparse->nir;",
          "395:                 if ( err ) {",
          "396:                     Mat_Critical(\"Integer multiplication overflow\");",
          "397:                     return err;",
          "",
          "[Removed Lines]",
          "394:                 err = SafeMul(&readcount, sparse->nir, sizeof(mat_uint32_t));",
          "",
          "[Added Lines]",
          "394:                 err = Mul(&readcount, sparse->nir, sizeof(mat_uint32_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "461:                     return 1;",
          "462:                 }",
          "463:                 sparse->njc = (mat_uint32_t)matvar->dims[1] + 1;",
          "465:                 if ( err ) {",
          "466:                     Mat_Critical(\"Integer multiplication overflow\");",
          "467:                     return err;",
          "",
          "[Removed Lines]",
          "464:                 err = SafeMul(&readcount, sparse->njc, sizeof(mat_uint32_t));",
          "",
          "[Added Lines]",
          "464:                 err = Mul(&readcount, sparse->njc, sizeof(mat_uint32_t));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "469:                 sparse->jc = (mat_uint32_t*)malloc(readcount);",
          "470:                 if ( sparse->jc != NULL ) {",
          "471:                     mat_uint32_t *jc;",
          "473:                     if ( err ) {",
          "474:                         Mat_Critical(\"Integer multiplication overflow\");",
          "475:                         return err;",
          "",
          "[Removed Lines]",
          "472:                     err = SafeMul(&readcount, sparse->nir, sizeof(mat_uint32_t));",
          "",
          "[Added Lines]",
          "472:                     err = Mul(&readcount, sparse->nir, sizeof(mat_uint32_t));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "804:         if ( matvar->isComplex ) {",
          "805:             mat_complex_split_t *cdata = (mat_complex_split_t*)data;",
          "806:             size_t nbytes = Mat_SizeOf(matvar->data_type);",
          "808:             if ( err ) {",
          "809:                 Mat_Critical(\"Integer multiplication overflow\");",
          "810:                 return err;",
          "",
          "[Removed Lines]",
          "807:             err = SafeMulDims(matvar, &nbytes);",
          "",
          "[Added Lines]",
          "807:             err = MulDims(matvar, &nbytes);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "822:     } else if ( matvar->isComplex ) {",
          "823:         mat_complex_split_t *cdata = (mat_complex_split_t*)data;",
          "824:         size_t nbytes = Mat_SizeOf(matvar->data_type);",
          "826:         if ( err ) {",
          "827:             Mat_Critical(\"Integer multiplication overflow\");",
          "828:             return err;",
          "",
          "[Removed Lines]",
          "825:         err = SafeMulDims(matvar, &nbytes);",
          "",
          "[Added Lines]",
          "825:         err = MulDims(matvar, &nbytes);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "861:     int err;",
          "862:     size_t nelems = 1;",
          "865:     if ( err ) {",
          "866:         Mat_Critical(\"Integer multiplication overflow\");",
          "867:         return err;",
          "",
          "[Removed Lines]",
          "864:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "864:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "876:     }",
          "877:     if ( matvar->isComplex ) {",
          "878:         mat_complex_split_t *complex_data = (mat_complex_split_t*)data;",
          "880:         if ( err ) {",
          "881:             Mat_Critical(\"Integer multiplication overflow\");",
          "882:             return err;",
          "",
          "[Removed Lines]",
          "879:         err = SafeMul(&nelems, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "879:         err = Mul(&nelems, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "909:     int       M,O,data_type,class_type;",
          "910:     mat_int32_t tmp;",
          "911:     long      nBytes;",
          "913:     matvar_t *matvar = NULL;",
          "914:     union {",
          "915:         mat_uint32_t u;",
          "",
          "[Removed Lines]",
          "912:     size_t    readresult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "921:     else if ( NULL == (matvar = Mat_VarCalloc()) )",
          "922:         return NULL;",
          "926:         Mat_VarFree(matvar);",
          "927:         return NULL;",
          "928:     }",
          "",
          "[Removed Lines]",
          "924:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "925:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "923:     if ( 0 != Read(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1011:         Mat_VarFree(matvar);",
          "1012:         return NULL;",
          "1013:     }",
          "1015:     if ( mat->byteswap )",
          "1016:         Mat_int32Swap(&tmp);",
          "1017:     matvar->dims[0] = tmp;",
          "1019:         Mat_VarFree(matvar);",
          "1020:         return NULL;",
          "1021:     }",
          "1023:     if ( mat->byteswap )",
          "1024:         Mat_int32Swap(&tmp);",
          "1025:     matvar->dims[1] = tmp;",
          "1033:         Mat_VarFree(matvar);",
          "1034:         return NULL;",
          "1035:     }",
          "",
          "[Removed Lines]",
          "1014:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1018:     if ( 1 != readresult ) {",
          "1022:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1026:     if ( 1 != readresult ) {",
          "1027:         Mat_VarFree(matvar);",
          "1028:         return NULL;",
          "1029:     }",
          "1031:     readresult = fread(&(matvar->isComplex),sizeof(int),1,(FILE*)mat->fp);",
          "1032:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "1012:     if ( 0 != Read(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "1013:         Mat_VarFree(matvar);",
          "1014:         return NULL;",
          "1015:     }",
          "1020:     if ( 0 != Read(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "1028:     if ( 0 != Read(&(matvar->isComplex), sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1037:         Mat_VarFree(matvar);",
          "1038:         return NULL;",
          "1039:     }",
          "1042:         Mat_VarFree(matvar);",
          "1043:         return NULL;",
          "1044:     }",
          "",
          "[Removed Lines]",
          "1040:     readresult = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);",
          "1041:     if ( 1 != readresult ) {",
          "",
          "[Added Lines]",
          "1036:     if ( 0 != Read(&tmp, sizeof(int), 1, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1054:         Mat_VarFree(matvar);",
          "1055:         return NULL;",
          "1056:     }",
          "1059:         Mat_VarFree(matvar);",
          "1060:         return NULL;",
          "1061:     } else {",
          "",
          "[Removed Lines]",
          "1057:     readresult = fread(matvar->name,1,tmp,(FILE*)mat->fp);",
          "1058:     if ( tmp != readresult ) {",
          "",
          "[Added Lines]",
          "1052:     if ( 0 != Read(matvar->name, sizeof(char), tmp, (FILE*)mat->fp, NULL) ) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1073:         size_t tmp2 = Mat_SizeOf(matvar->data_type);",
          "1074:         if ( matvar->isComplex )",
          "1075:             tmp2 *= 2;",
          "1077:         if ( err ) {",
          "1078:             Mat_VarFree(matvar);",
          "1079:             Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "1076:         err = SafeMulDims(matvar, &tmp2);",
          "",
          "[Added Lines]",
          "1070:         err = MulDims(matvar, &tmp2);",
          "",
          "---------------"
        ],
        "src/mat5.c||src/mat5.c": [
          "File: src/mat5.c -> src/mat5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: static size_t ReadNextCell( mat_t *mat, matvar_t *matvar );",
          "72: static size_t ReadNextStructField( mat_t *mat, matvar_t *matvar );",
          "73: static size_t ReadNextFunctionHandle(mat_t *mat, matvar_t *matvar);",
          "76: static int    WriteType(mat_t *mat,matvar_t *matvar);",
          "77: static int    WriteCellArrayField(mat_t *mat,matvar_t *matvar );",
          "78: static int    WriteStructField(mat_t *mat,matvar_t *matvar);",
          "",
          "[Removed Lines]",
          "74: static size_t ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type,",
          "75:                   mat_uint32_t nbytes);",
          "",
          "[Added Lines]",
          "74: static int    ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type,",
          "75:                   mat_uint32_t nbytes, size_t *read_bytes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     if ( err )",
          "119:         return 1;",
          "123:     if ( err )",
          "124:         return 1;",
          "",
          "[Removed Lines]",
          "117:     err = SafeMulDims(matvar, &nelems);",
          "122:     err = SafeMul(&rank_size, matvar->rank, 4);",
          "",
          "[Added Lines]",
          "117:     err = MulDims(matvar, &nelems);",
          "122:     err = Mul(&rank_size, matvar->rank, 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     else",
          "129:         nBytes = tag_size;",
          "132:     if ( err )",
          "133:         return 1;",
          "",
          "[Removed Lines]",
          "131:     err = SafeAdd(&nBytes, nBytes, rank_size);",
          "",
          "[Added Lines]",
          "131:     err = Add(&nBytes, nBytes, rank_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:             while ( nfields*maxlen % 8 != 0 )",
          "149:                 maxlen++;",
          "154:             if ( err )",
          "155:                 return 1;",
          "158:             if ( NULL != fields && nfields > 0 ) {",
          "159:                 size_t nelems_x_nfields = 1;",
          "161:                 if ( err )",
          "162:                     return 1;",
          "164:                 for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "165:                     err = GetStructFieldBufSize(fields[i], &field_buf_size);",
          "168:                     if ( err )",
          "169:                         return 1;",
          "170:                 }",
          "",
          "[Removed Lines]",
          "151:             err = SafeMul(&field_buf_size, maxlen, nfields);",
          "152:             err |= SafeAdd(&nBytes, nBytes, tag_size + tag_size);",
          "153:             err |= SafeAdd(&nBytes, nBytes, field_buf_size);",
          "160:                 err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "166:                     err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "167:                     err |= SafeAdd(&nBytes, nBytes, field_buf_size);",
          "",
          "[Added Lines]",
          "151:             err = Mul(&field_buf_size, maxlen, nfields);",
          "152:             err |= Add(&nBytes, nBytes, tag_size + tag_size);",
          "153:             err |= Add(&nBytes, nBytes, field_buf_size);",
          "160:                 err = Mul(&nelems_x_nfields, nelems, nfields);",
          "166:                     err |= Add(&nBytes, nBytes, tag_size);",
          "167:                     err |= Add(&nBytes, nBytes, field_buf_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:                 size_t i, field_buf_size;",
          "184:                 for ( i = 0; i < nelems; i++ ) {",
          "185:                     err = GetCellArrayFieldBufSize(cells[i], &field_buf_size);",
          "188:                     if ( err )",
          "189:                         return 1;",
          "190:                 }",
          "",
          "[Removed Lines]",
          "186:                     err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "187:                     err |= SafeAdd(&nBytes, nBytes, field_buf_size);",
          "",
          "[Added Lines]",
          "186:                     err |= Add(&nBytes, nBytes, tag_size);",
          "187:                     err |= Add(&nBytes, nBytes, field_buf_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:         {",
          "196:             mat_sparse_t *sparse = (mat_sparse_t*)matvar->data;",
          "199:             if ( data_bytes % 8 )",
          "205:             if ( data_bytes % 8 )",
          "211:             if ( data_bytes % 8 )",
          "216:             if ( matvar->isComplex ) {",
          "219:             }",
          "221:             if ( err )",
          "",
          "[Removed Lines]",
          "198:             err = SafeMul(&data_bytes, sparse->nir, sizeof(mat_uint32_t));",
          "200:                 err |= SafeAdd(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "201:             err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "202:             err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "204:             err |= SafeMul(&data_bytes, sparse->njc, sizeof(mat_uint32_t));",
          "206:                 err |= SafeAdd(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "207:             err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "208:             err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "210:             err |= SafeMul(&data_bytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "212:                 err |= SafeAdd(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "213:             err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "214:             err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "217:                 err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "218:                 err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "",
          "[Added Lines]",
          "198:             err = Mul(&data_bytes, sparse->nir, sizeof(mat_uint32_t));",
          "200:                 err |= Add(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "201:             err |= Add(&nBytes, nBytes, tag_size);",
          "202:             err |= Add(&nBytes, nBytes, data_bytes);",
          "204:             err |= Mul(&data_bytes, sparse->njc, sizeof(mat_uint32_t));",
          "206:                 err |= Add(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "207:             err |= Add(&nBytes, nBytes, tag_size);",
          "208:             err |= Add(&nBytes, nBytes, data_bytes);",
          "210:             err |= Mul(&data_bytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "212:                 err |= Add(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "213:             err |= Add(&nBytes, nBytes, tag_size);",
          "214:             err |= Add(&nBytes, nBytes, data_bytes);",
          "217:                 err |= Add(&nBytes, nBytes, tag_size);",
          "218:                 err |= Add(&nBytes, nBytes, data_bytes);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:         case MAT_C_CHAR:",
          "227:             if ( MAT_T_UINT8 == matvar->data_type ||",
          "228:                  MAT_T_INT8 == matvar->data_type )",
          "230:             else",
          "232:             if ( data_bytes % 8 )",
          "238:             if ( matvar->isComplex ) {",
          "241:             }",
          "243:             if ( err )",
          "",
          "[Removed Lines]",
          "229:                 err = SafeMul(&data_bytes, nelems, Mat_SizeOf(MAT_T_UINT16));",
          "231:                 err = SafeMul(&data_bytes, nelems, Mat_SizeOf(matvar->data_type));",
          "233:                 err |= SafeAdd(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "235:             err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "236:             err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "239:                 err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "240:                 err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "",
          "[Added Lines]",
          "229:                 err = Mul(&data_bytes, nelems, Mat_SizeOf(MAT_T_UINT16));",
          "231:                 err = Mul(&data_bytes, nelems, Mat_SizeOf(matvar->data_type));",
          "233:                 err |= Add(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "235:             err |= Add(&nBytes, nBytes, tag_size);",
          "236:             err |= Add(&nBytes, nBytes, data_bytes);",
          "239:                 err |= Add(&nBytes, nBytes, tag_size);",
          "240:                 err |= Add(&nBytes, nBytes, data_bytes);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "246:             break;",
          "247:         default:",
          "249:             if ( data_bytes % 8 )",
          "255:             if ( matvar->isComplex ) {",
          "258:             }",
          "260:             if ( err )",
          "",
          "[Removed Lines]",
          "248:             err = SafeMul(&data_bytes, nelems, Mat_SizeOf(matvar->data_type));",
          "250:                 err |= SafeAdd(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "252:             err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "253:             err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "256:                 err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "257:                 err |= SafeAdd(&nBytes, nBytes, data_bytes);",
          "",
          "[Added Lines]",
          "248:             err = Mul(&data_bytes, nelems, Mat_SizeOf(matvar->data_type));",
          "250:                 err |= Add(&data_bytes, data_bytes, 8 - data_bytes % 8);",
          "252:             err |= Add(&nBytes, nBytes, tag_size);",
          "253:             err |= Add(&nBytes, nBytes, data_bytes);",
          "256:                 err |= Add(&nBytes, nBytes, tag_size);",
          "257:                 err |= Add(&nBytes, nBytes, data_bytes);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "291:     nBytes += tag_size;",
          "293:     err = GetTypeBufSize(matvar, &type_buf_size);",
          "295:     if ( err )",
          "296:         return 1;",
          "",
          "[Removed Lines]",
          "294:     err |= SafeAdd(&nBytes, nBytes, type_buf_size);",
          "",
          "[Added Lines]",
          "294:     err |= Add(&nBytes, nBytes, type_buf_size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "325:     nBytes += tag_size;",
          "327:     err = GetTypeBufSize(matvar, &type_buf_size);",
          "329:     if ( err )",
          "330:         return 1;",
          "",
          "[Removed Lines]",
          "328:     err |= SafeAdd(&nBytes, nBytes, type_buf_size);",
          "",
          "[Added Lines]",
          "328:     err |= Add(&nBytes, nBytes, type_buf_size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "362:     } else {",
          "363:         nBytes += tag_size;",
          "364:         if ( len % 8 )",
          "368:     }",
          "372:     if ( rank % 2 )",
          "374:     else",
          "381:     if ( err )",
          "382:         return 1;",
          "",
          "[Removed Lines]",
          "365:             err |= SafeAdd(&len, len, 8 - len % 8);",
          "367:         err |= SafeAdd(&nBytes, nBytes, len);",
          "371:     err |= SafeMul(&rank_size, rank, 4);",
          "373:         err |= SafeAdd(&nBytes, nBytes, tag_size + 4);",
          "375:         err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "377:     err |= SafeAdd(&nBytes, nBytes, rank_size);",
          "379:     err |= SafeAdd(&nBytes, nBytes, tag_size);",
          "",
          "[Added Lines]",
          "365:             err |= Add(&len, len, 8 - len % 8);",
          "367:         err |= Add(&nBytes, nBytes, len);",
          "371:     err |= Mul(&rank_size, rank, 4);",
          "373:         err |= Add(&nBytes, nBytes, tag_size + 4);",
          "375:         err |= Add(&nBytes, nBytes, tag_size);",
          "377:     err |= Add(&nBytes, nBytes, rank_size);",
          "379:     err |= Add(&nBytes, nBytes, tag_size);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "415:     if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {",
          "416: #if HAVE_ZLIB",
          "417:         matvar->internal->z->avail_in = 0;",
          "419:         if ( mat->byteswap )",
          "420:             (void)Mat_uint32Swap(tag);",
          "421:         packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "418:         InflateDataType(mat,matvar->internal->z,tag);",
          "",
          "[Added Lines]",
          "418:         if ( 0 != Inflate(mat, matvar->internal->z, tag, 4, &bytesread) ) {",
          "419:             return bytesread;",
          "420:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "429:         }",
          "430: #endif",
          "431:     } else {",
          "433:         if ( mat->byteswap )",
          "434:             (void)Mat_uint32Swap(tag);",
          "435:         packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "432:         bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "434:         if ( 0 != Read(tag, 4, 1, (FILE*)mat->fp, &bytesread) ) {",
          "435:             return bytesread;",
          "436:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "438:             N = (tag[0] & 0xffff0000) >> 16;",
          "439:         } else {",
          "440:             data_in_tag = 0;",
          "442:             if ( mat->byteswap )",
          "443:                 (void)Mat_uint32Swap(&N);",
          "444:         }",
          "",
          "[Removed Lines]",
          "441:             bytesread += fread(&N,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "445:             if ( 0 != Read(&N, 4, 1, (FILE*)mat->fp, &bytesread) ) {",
          "446:                 return bytesread;",
          "447:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "469:             if ( data_in_tag )",
          "470:                 nBytes+=4;",
          "471:             if ( (nBytes % 8) != 0 )",
          "473: #endif",
          "474:         }",
          "475:     } else {",
          "",
          "[Removed Lines]",
          "472:                 InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "",
          "[Added Lines]",
          "478:                 InflateSkip(mat, matvar->internal->z, 8-(nBytes % 8), NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "511:     } else {",
          "512:         nBytes += tag_size;",
          "513:         if ( len % 8 )",
          "517:     }",
          "519:     err |= GetTypeBufSize(matvar, &type_buf_size);",
          "522:     if ( err )",
          "523:         return 1;",
          "",
          "[Removed Lines]",
          "514:             err |= SafeAdd(&len, len, 8 - len % 8);",
          "516:         err |= SafeAdd(&nBytes, nBytes, len);",
          "520:     err |= SafeAdd(&nBytes, nBytes, type_buf_size);",
          "",
          "[Added Lines]",
          "520:             err |= Add(&len, len, 8 - len % 8);",
          "522:         err |= Add(&nBytes, nBytes, len);",
          "526:     err |= Add(&nBytes, nBytes, type_buf_size);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "895:     matvar_t **cells = NULL;",
          "896:     size_t nelems = 1;",
          "899:     if ( err ) {",
          "900:         Mat_Critical(\"Integer multiplication overflow\");",
          "901:         return bytesread;",
          "902:     }",
          "903:     matvar->data_size = sizeof(matvar_t *);",
          "905:     if ( err ) {",
          "906:         Mat_Critical(\"Integer multiplication overflow\");",
          "907:         return bytesread;",
          "",
          "[Removed Lines]",
          "898:     err = SafeMulDims(matvar, &nelems);",
          "904:     err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "904:     err = MulDims(matvar, &nelems);",
          "910:     err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "918:     if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {",
          "919: #if HAVE_ZLIB",
          "920:         mat_uint32_t uncomp_buf[16] = {0,};",
          "922:         mat_uint32_t array_flags;",
          "924:         for ( i = 0; i < nelems; i++ ) {",
          "",
          "[Removed Lines]",
          "921:         int nbytes;",
          "",
          "[Added Lines]",
          "927:         mat_uint32_t nBytes;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "932:             uncomp_buf[0] = 0;",
          "933:             uncomp_buf[1] = 0;",
          "935:             if ( mat->byteswap ) {",
          "936:                 (void)Mat_uint32Swap(uncomp_buf);",
          "937:                 (void)Mat_uint32Swap(uncomp_buf+1);",
          "938:             }",
          "942:                 free(cells[i]->internal);",
          "943:                 cells[i]->internal = NULL;",
          "",
          "[Removed Lines]",
          "934:             bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "939:             nbytes = uncomp_buf[1];",
          "940:             if ( 0 == nbytes ) {",
          "",
          "[Added Lines]",
          "940:             err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "941:             if ( 0 != err ) {",
          "942:                 Mat_VarFree(cells[i]);",
          "943:                 cells[i] = NULL;",
          "944:                 break;",
          "945:             }",
          "950:             nBytes = uncomp_buf[1];",
          "951:             if ( 0 == nBytes ) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "949:                 break;",
          "950:             }",
          "951:             cells[i]->compression = MAT_COMPRESSION_ZLIB;",
          "954:             if ( mat->byteswap ) {",
          "955:                 (void)Mat_uint32Swap(uncomp_buf);",
          "956:                 (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "952:             bytesread += InflateArrayFlags(mat,matvar,uncomp_buf);",
          "953:             nbytes -= 16;",
          "",
          "[Added Lines]",
          "963:             err = Inflate(mat, matvar->internal->z, uncomp_buf, 16, &bytesread);",
          "964:             if ( 0 != err ) {",
          "965:                 Mat_VarFree(cells[i]);",
          "966:                 cells[i] = NULL;",
          "967:                 break;",
          "968:             }",
          "969:             nBytes -= 16;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "959:             }",
          "961:             if ( uncomp_buf[0] == MAT_T_UINT32 ) {",
          "971:             } else {",
          "975:             }",
          "976:             if ( cells[i]->class_type != MAT_C_OPAQUE ) {",
          "977:                 mat_uint32_t* dims = NULL;",
          "978:                 int do_clean = 0;",
          "981:                     dims = uncomp_buf + 2;",
          "983:                     do_clean = 1;",
          "985:                 if ( mat->byteswap ) {",
          "986:                     (void)Mat_uint32Swap(uncomp_buf);",
          "987:                     (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "962:                array_flags = uncomp_buf[2];",
          "963:                cells[i]->class_type = CLASS_FROM_ARRAY_FLAGS(array_flags);",
          "964:                cells[i]->isComplex  = (array_flags & MAT_F_COMPLEX);",
          "965:                cells[i]->isGlobal   = (array_flags & MAT_F_GLOBAL);",
          "966:                cells[i]->isLogical  = (array_flags & MAT_F_LOGICAL);",
          "967:                if ( cells[i]->class_type == MAT_C_SPARSE ) {",
          "969:                    cells[i]->nbytes = uncomp_buf[3];",
          "970:                }",
          "972:                 Mat_Critical(\"Expected MAT_T_UINT32 for array tags, got %d\",",
          "973:                                uncomp_buf[0]);",
          "974:                 bytesread+=InflateSkip(mat,matvar->internal->z,nbytes);",
          "979:                 bytesread += InflateRankDims(mat,matvar,uncomp_buf,sizeof(uncomp_buf),&dims);",
          "980:                 if ( NULL == dims )",
          "982:                 else",
          "984:                 nbytes -= 8;",
          "",
          "[Added Lines]",
          "978:                 array_flags = uncomp_buf[2];",
          "979:                 cells[i]->class_type = CLASS_FROM_ARRAY_FLAGS(array_flags);",
          "980:                 cells[i]->isComplex  = (array_flags & MAT_F_COMPLEX);",
          "981:                 cells[i]->isGlobal   = (array_flags & MAT_F_GLOBAL);",
          "982:                 cells[i]->isLogical  = (array_flags & MAT_F_LOGICAL);",
          "983:                 if ( cells[i]->class_type == MAT_C_SPARSE ) {",
          "985:                     cells[i]->nbytes = uncomp_buf[3];",
          "986:                 }",
          "988:                 Mat_Critical(\"Expected MAT_T_UINT32 for array tags, got %d\", uncomp_buf[0]);",
          "989:                 InflateSkip(mat, matvar->internal->z, nBytes, &bytesread);",
          "994:                 err = InflateRankDims(mat, matvar->internal->z, uncomp_buf, sizeof(uncomp_buf), &dims, &bytesread);",
          "995:                 if ( NULL == dims ) {",
          "997:                 } else {",
          "999:                 }",
          "1000:                 if ( 0 != err ) {",
          "1001:                     if ( do_clean ) {",
          "1002:                         free(dims);",
          "1003:                     }",
          "1004:                     Mat_VarFree(cells[i]);",
          "1005:                     cells[i] = NULL;",
          "1006:                     break;",
          "1007:                 }",
          "1008:                 nBytes -= 8;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "991:                     int j;",
          "992:                     size_t size;",
          "993:                     cells[i]->rank = uncomp_buf[1];",
          "995:                     cells[i]->rank /= 4;",
          "996:                     if ( 0 == do_clean && cells[i]->rank > 13 ) {",
          "997:                         int rank = cells[i]->rank;",
          "",
          "[Removed Lines]",
          "994:                     nbytes -= cells[i]->rank;",
          "",
          "[Added Lines]",
          "1018:                     nBytes -= cells[i]->rank;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "999:                         Mat_Critical(\"%d is not a valid rank\", rank);",
          "1000:                         continue;",
          "1001:                     }",
          "1003:                     if ( err ) {",
          "1005:                             free(dims);",
          "1006:                         Mat_VarFree(cells[i]);",
          "1007:                         cells[i] = NULL;",
          "1008:                         Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "1002:                     err = SafeMul(&size, cells[i]->rank, sizeof(*cells[i]->dims));",
          "1004:                         if ( do_clean )",
          "",
          "[Added Lines]",
          "1026:                     err = Mul(&size, cells[i]->rank, sizeof(*cells[i]->dims));",
          "1028:                         if ( do_clean ) {",
          "1030:                         }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1017:                             cells[i]->dims[j] = dims[j];",
          "1018:                     }",
          "1019:                     if ( cells[i]->rank % 2 != 0 )",
          "1021:                 }",
          "1023:                     free(dims);",
          "1027:                 if ( mat->byteswap ) {",
          "1028:                     (void)Mat_uint32Swap(uncomp_buf);",
          "1029:                     (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "1020:                         nbytes -= 4;",
          "1022:                 if ( do_clean )",
          "1025:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "1026:                 nbytes -= 8;",
          "",
          "[Added Lines]",
          "1045:                         nBytes -= 4;",
          "1047:                 if ( do_clean ){",
          "1049:                 }",
          "1051:                 err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "1052:                 if ( 0 != err ) {",
          "1053:                     Mat_VarFree(cells[i]);",
          "1054:                     cells[i] = NULL;",
          "1055:                     break;",
          "1056:                 }",
          "1057:                 nBytes -= 8;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1044:                             }",
          "1045:                         }",
          "1046:                         cells[i]->name = (char*)malloc(len + 1);",
          "1048:                         if ( NULL != cells[i]->name ) {",
          "1051:                             cells[i]->name[len] = '\\0';",
          "1052:                         }",
          "1053:                     } else {",
          "",
          "[Removed Lines]",
          "1047:                         nbytes -= len;",
          "1050:                             bytesread += InflateVarName(mat,matvar,cells[i]->name,len);",
          "",
          "[Added Lines]",
          "1078:                         nBytes -= len;",
          "1081:                             err = Inflate(mat, matvar->internal->z, cells[i]->name, len, &bytesread);",
          "1082:                             if ( 0 != err ) {",
          "1083:                                 Mat_VarFree(cells[i]);",
          "1084:                                 cells[i] = NULL;",
          "1085:                                 break;",
          "1086:                             }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1070:                         if ( cells[i]->internal->datapos != -1L ) {",
          "1071:                             cells[i]->internal->datapos -= matvar->internal->z->avail_in;",
          "1072:                             if ( cells[i]->class_type == MAT_C_STRUCT )",
          "1074:                             else if ( cells[i]->class_type == MAT_C_CELL )",
          "1080:                                 cells[i]->internal->data = cells[i]->data;",
          "1081:                                 cells[i]->data = NULL;",
          "1082:                             }",
          "",
          "[Removed Lines]",
          "1073:                                 bytesread+=ReadNextStructField(mat,cells[i]);",
          "1075:                                 bytesread+=ReadNextCell(mat,cells[i]);",
          "1076:                             else if ( nbytes <= (1 << MAX_WBITS) ) {",
          "1079:                                 err = Mat_VarRead5(mat,cells[i]);",
          "",
          "[Added Lines]",
          "1109:                                 bytesread += ReadNextStructField(mat, cells[i]);",
          "1111:                                 bytesread += ReadNextCell(mat, cells[i]);",
          "1112:                             else if ( nBytes <= (1 << MAX_WBITS) ) {",
          "1115:                                 err = Mat_VarRead5(mat, cells[i]);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1099:                     Mat_Critical(\"Couldn't allocate memory\");",
          "1100:                 }",
          "1101:             }",
          "1103:         }",
          "1104: #else",
          "1105:         Mat_Critical(\"Not compiled with zlib support\");",
          "",
          "[Removed Lines]",
          "1102:             bytesread+=InflateSkip(mat,matvar->internal->z,nbytes);",
          "",
          "[Added Lines]",
          "1138:             InflateSkip(mat, matvar->internal->z, nBytes, &bytesread);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1111:         mat_uint32_t array_flags;",
          "1113:         for ( i = 0; i < nelems; i++ ) {",
          "1115:             mat_uint32_t name_len;",
          "1116:             cells[i] = Mat_VarCalloc();",
          "1118:                 Mat_Critical(\"Couldn't allocate memory for cell %\" SIZE_T_FMTSTR, i);",
          "1119:                 continue;",
          "1120:             }",
          "1127:                 continue;",
          "1130:                 Mat_VarFree(cells[i]);",
          "1131:                 cells[i] = NULL;",
          "1132:                 break;",
          "",
          "[Removed Lines]",
          "1114:             size_t readresult;",
          "1117:             if ( !cells[i] ) {",
          "1123:             readresult = fread(buf,4,2,(FILE*)mat->fp);",
          "1126:             if ( 0 == readresult )",
          "1128:             bytesread += readresult;",
          "1129:             if ( 1 == readresult ) {",
          "",
          "[Added Lines]",
          "1150:             size_t nbytes = 0;",
          "1153:             if ( NULL == cells[i] ) {",
          "1159:             err = Read(buf, 4, 2, (FILE*)mat->fp, &nbytes);",
          "1162:             if ( 0 == err && 0 == nbytes )",
          "1164:             bytesread += nbytes;",
          "1165:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1150:             }",
          "1156:                 Mat_VarFree(cells[i]);",
          "1157:                 cells[i] = NULL;",
          "1158:                 break;",
          "",
          "[Removed Lines]",
          "1153:             readresult = fread(buf,4,6,(FILE*)mat->fp);",
          "1154:             bytesread += readresult;",
          "1155:             if ( 6 != readresult ) {",
          "",
          "[Added Lines]",
          "1189:             err = Read(buf, 4, 6, (FILE*)mat->fp, &bytesread);",
          "1190:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1180:             }",
          "1182:             {",
          "1184:                 bytesread += nbytes;",
          "1185:                 nBytes -= nbytes;",
          "1186:             }",
          "1191:                 Mat_VarFree(cells[i]);",
          "1192:                 cells[i] = NULL;",
          "1193:                 break;",
          "",
          "[Removed Lines]",
          "1183:                 size_t nbytes = ReadRankDims(mat, cells[i], (enum matio_types)buf[4], buf[5]);",
          "1188:             readresult = fread(buf,1,8,(FILE*)mat->fp);",
          "1189:             bytesread += readresult;",
          "1190:             if ( 8 != readresult ) {",
          "",
          "[Added Lines]",
          "1218:                 size_t nbytes = 0;",
          "1219:                 err = ReadRankDims(mat, cells[i], (enum matio_types)buf[4], buf[5], &nbytes);",
          "1222:                 if ( 0 != err ) {",
          "1223:                     Mat_VarFree(cells[i]);",
          "1224:                     cells[i] = NULL;",
          "1225:                     break;",
          "1226:                 }",
          "1229:             if ( 0 != Read(buf, 1, 8, (FILE*)mat->fp, &bytesread) ) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1249:     matvar_t **fields = NULL;",
          "1250:     size_t nelems = 1, nelems_x_nfields;",
          "1253:     if ( err ) {",
          "1254:         Mat_Critical(\"Integer multiplication overflow\");",
          "1255:         return bytesread;",
          "",
          "[Removed Lines]",
          "1252:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "1291:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1260:         mat_uint32_t array_flags, len;",
          "1264:         if ( mat->byteswap ) {",
          "1265:             (void)Mat_uint32Swap(uncomp_buf);",
          "1266:             (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "1263:         bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1302:         err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "1303:         if ( 0 != err ) {",
          "1304:             return bytesread;",
          "1305:         }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1273:         }",
          "1277:         if ( mat->byteswap )",
          "1278:             (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "1276:         bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1318:         err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "1319:         if ( 0 != err ) {",
          "1320:             return bytesread;",
          "1321:         }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1290:             if ( nfields ) {",
          "1291:                 char *ptr = (char*)malloc(nfields*fieldname_size+i);",
          "1292:                 if ( NULL != ptr ) {",
          "1295:                     free(ptr);",
          "1296:                 }",
          "1297:             } else {",
          "",
          "[Removed Lines]",
          "1293:                     bytesread += InflateVarName(mat,matvar,ptr,nfields*fieldname_size+i);",
          "1294:                     SetFieldNames(matvar, ptr, nfields, fieldname_size);",
          "",
          "[Added Lines]",
          "1338:                     err = Inflate(mat, matvar->internal->z, ptr, (unsigned int)(nfields*fieldname_size+i), &bytesread);",
          "1339:                     if ( 0 == err ) {",
          "1340:                         SetFieldNames(matvar, ptr, nfields, fieldname_size);",
          "1341:                     } else {",
          "1342:                         matvar->internal->fieldnames = NULL;",
          "1343:                     }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1315:         }",
          "1317:         matvar->data_size = sizeof(matvar_t *);",
          "1319:         if ( err ) {",
          "1320:             Mat_Critical(\"Integer multiplication overflow\");",
          "1321:             return bytesread;",
          "1322:         }",
          "1324:         if ( err ) {",
          "1325:             Mat_Critical(\"Integer multiplication overflow\");",
          "1326:             return bytesread;",
          "",
          "[Removed Lines]",
          "1318:         err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "1323:         err = SafeMul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "[Added Lines]",
          "1367:         err = Mul(&nelems_x_nfields, nelems, nfields);",
          "1372:         err = Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1355:         for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "1356:             mat_uint32_t nBytes;",
          "1359:             if ( mat->byteswap ) {",
          "1360:                 (void)Mat_uint32Swap(uncomp_buf);",
          "1361:                 (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "1358:             bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1407:             err = Inflate(mat, matvar->internal->z,uncomp_buf, 8, &bytesread);",
          "1408:             if ( 0 != err ) {",
          "1409:                 Mat_VarFree(fields[i]);",
          "1410:                 fields[i] = NULL;",
          "1411:                 break;",
          "1412:             }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1365:                 Mat_VarFree(fields[i]);",
          "1366:                 fields[i] = NULL;",
          "1367:                 Mat_Critical(\"fields[%\" SIZE_T_FMTSTR \"], Uncompressed type not MAT_T_MATRIX\", i);",
          "1369:             } else if ( 0 == nBytes ) {",
          "1371:                 free(fields[i]->internal);",
          "",
          "[Removed Lines]",
          "1368:                 continue;",
          "",
          "[Added Lines]",
          "1422:                 break;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1373:                 continue;",
          "1374:             }",
          "1375:             fields[i]->compression = MAT_COMPRESSION_ZLIB;",
          "1378:             if ( mat->byteswap ) {",
          "1379:                 (void)Mat_uint32Swap(uncomp_buf);",
          "1380:                 (void)Mat_uint32Swap(uncomp_buf+1);",
          "1381:                 (void)Mat_uint32Swap(uncomp_buf+2);",
          "1382:                 (void)Mat_uint32Swap(uncomp_buf+3);",
          "1383:             }",
          "1385:             if ( uncomp_buf[0] == MAT_T_UINT32 ) {",
          "1386:                array_flags = uncomp_buf[2];",
          "",
          "[Removed Lines]",
          "1376:             bytesread += InflateArrayFlags(mat,matvar,uncomp_buf);",
          "1377:             nBytes -= 16;",
          "",
          "[Added Lines]",
          "1430:             err = Inflate(mat, matvar->internal->z, uncomp_buf, 16, &bytesread);",
          "1431:             if ( 0 != err ) {",
          "1432:                 Mat_VarFree(fields[i]);",
          "1433:                 fields[i] = NULL;",
          "1434:                 break;",
          "1435:             }",
          "1442:             nBytes -= 16;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1393:                    fields[i]->nbytes = uncomp_buf[3];",
          "1394:                }",
          "1395:             } else {",
          "1399:             }",
          "1400:             if ( fields[i]->class_type != MAT_C_OPAQUE ) {",
          "1401:                 mat_uint32_t* dims = NULL;",
          "1402:                 int do_clean = 0;",
          "1405:                     dims = uncomp_buf + 2;",
          "1407:                     do_clean = 1;",
          "1408:                 nBytes -= 8;",
          "1409:                 if ( mat->byteswap ) {",
          "1410:                     (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "1396:                 Mat_Critical(\"Expected MAT_T_UINT32 for array tags, got %d\",",
          "1397:                     uncomp_buf[0]);",
          "1398:                 bytesread+=InflateSkip(mat,matvar->internal->z,nBytes);",
          "1403:                 bytesread += InflateRankDims(mat,matvar,uncomp_buf,sizeof(uncomp_buf),&dims);",
          "1404:                 if ( NULL == dims )",
          "1406:                 else",
          "",
          "[Added Lines]",
          "1455:                 Mat_Critical(\"Expected MAT_T_UINT32 for array tags, got %d\", uncomp_buf[0]);",
          "1456:                 InflateSkip(mat, matvar->internal->z, nBytes, &bytesread);",
          "1461:                 err = InflateRankDims(mat, matvar->internal->z, uncomp_buf, sizeof(uncomp_buf), &dims, &bytesread);",
          "1462:                 if ( NULL == dims ) {",
          "1464:                 } else {",
          "1466:                 }",
          "1467:                 if ( 0 != err ) {",
          "1468:                     if ( do_clean ) {",
          "1469:                         free(dims);",
          "1470:                     }",
          "1471:                     Mat_VarFree(fields[i]);",
          "1472:                     fields[i] = NULL;",
          "1473:                     break;",
          "1474:                 }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1423:                         Mat_Critical(\"%d is not a valid rank\", rank);",
          "1424:                         continue;",
          "1425:                     }",
          "1427:                     if ( err ) {",
          "1429:                             free(dims);",
          "1430:                         Mat_VarFree(fields[i]);",
          "1431:                         fields[i] = NULL;",
          "1432:                         Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "1426:                     err = SafeMul(&size, fields[i]->rank, sizeof(*fields[i]->dims));",
          "1428:                         if ( do_clean )",
          "",
          "[Added Lines]",
          "1493:                     err = Mul(&size, fields[i]->rank, sizeof(*fields[i]->dims));",
          "1495:                         if ( do_clean ) {",
          "1497:                         }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1443:                     if ( fields[i]->rank % 2 != 0 )",
          "1444:                         nBytes -= 4;",
          "1445:                 }",
          "1447:                     free(dims);",
          "1450:                 nBytes -= 8;",
          "1452:                 if ( fields[i]->internal->z != NULL ) {",
          "1453:                     err = inflateCopy(fields[i]->internal->z,matvar->internal->z);",
          "1454:                     if ( err == Z_OK ) {",
          "",
          "[Removed Lines]",
          "1446:                 if ( do_clean )",
          "1449:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "1451:                 fields[i]->internal->z = (z_streamp)calloc(1,sizeof(z_stream));",
          "",
          "[Added Lines]",
          "1514:                 if ( do_clean ) {",
          "1516:                 }",
          "1518:                 err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "1519:                 if ( 0 != err ) {",
          "1520:                     Mat_VarFree(fields[i]);",
          "1521:                     fields[i] = NULL;",
          "1522:                     break;",
          "1523:                 }",
          "1525:                 fields[i]->internal->z = (z_streamp)calloc(1, sizeof(z_stream));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1456:                         if ( fields[i]->internal->datapos != -1L ) {",
          "1457:                             fields[i]->internal->datapos -= matvar->internal->z->avail_in;",
          "1458:                             if ( fields[i]->class_type == MAT_C_STRUCT )",
          "1460:                             else if ( fields[i]->class_type == MAT_C_CELL )",
          "1462:                             else if ( nBytes <= (1 << MAX_WBITS) ) {",
          "",
          "[Removed Lines]",
          "1459:                                 bytesread+=ReadNextStructField(mat,fields[i]);",
          "1461:                                 bytesread+=ReadNextCell(mat,fields[i]);",
          "",
          "[Added Lines]",
          "1533:                                 bytesread += ReadNextStructField(mat, fields[i]);",
          "1535:                                 bytesread += ReadNextCell(mat, fields[i]);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1485:                     Mat_Critical(\"Couldn't allocate memory\");",
          "1486:                 }",
          "1487:             }",
          "1489:         }",
          "1490: #else",
          "1491:         Mat_Critical(\"Not compiled with zlib support\");",
          "",
          "[Removed Lines]",
          "1488:             bytesread+=InflateSkip(mat,matvar->internal->z,nBytes);",
          "",
          "[Added Lines]",
          "1562:             InflateSkip(mat, matvar->internal->z, nBytes, &bytesread);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1494:         mat_uint32_t buf[6] = {0,};",
          "1495:         mat_uint32_t array_flags, len;",
          "1498:         if ( mat->byteswap ) {",
          "1499:             (void)Mat_uint32Swap(buf);",
          "1500:             (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1497:         bytesread+=fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1571:         err = Read(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1572:         if ( 0 != err ) {",
          "1573:             return bytesread;",
          "1574:         }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1507:         }",
          "1511:         if ( mat->byteswap )",
          "1512:             (void)Mat_uint32Swap(buf);",
          "",
          "[Removed Lines]",
          "1510:         bytesread+=fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1587:         err = Read(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1588:         if ( 0 != err ) {",
          "1589:             return bytesread;",
          "1590:         }",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1520:             if ( nfields ) {",
          "1521:                 char *ptr = (char*)malloc(nfields*fieldname_size);",
          "1522:                 if ( NULL != ptr ) {",
          "1526:                         SetFieldNames(matvar, ptr, nfields, fieldname_size);",
          "1528:                         matvar->internal->fieldnames = NULL;",
          "1529:                     free(ptr);",
          "1530:                 }",
          "1531:                 if ( (nfields*fieldname_size) % 8 ) {",
          "",
          "[Removed Lines]",
          "1523:                     size_t readresult = fread(ptr, 1, nfields*fieldname_size, (FILE*)mat->fp);",
          "1524:                     bytesread += readresult;",
          "1525:                     if ( nfields*fieldname_size == readresult )",
          "1527:                     else",
          "",
          "[Added Lines]",
          "1603:                     err = Read(ptr, 1, nfields*fieldname_size, (FILE*)mat->fp, &bytesread);",
          "1604:                     if ( 0 == err ) {",
          "1606:                     } else {",
          "1608:                     }",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1553:         }",
          "1555:         matvar->data_size = sizeof(matvar_t *);",
          "1557:         if ( err ) {",
          "1558:             Mat_Critical(\"Integer multiplication overflow\");",
          "1559:             return bytesread;",
          "1560:         }",
          "1562:         if ( err ) {",
          "1563:             Mat_Critical(\"Integer multiplication overflow\");",
          "1564:             return bytesread;",
          "",
          "[Removed Lines]",
          "1556:         err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "1561:         err = SafeMul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "[Added Lines]",
          "1636:         err = Mul(&nelems_x_nfields, nelems, nfields);",
          "1641:         err = Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1566:         if ( !matvar->nbytes )",
          "1567:             return bytesread;",
          "1570:         if ( NULL == matvar->data )",
          "1571:             return bytesread;",
          "1573:         fields = (matvar_t**)matvar->data;",
          "1591:         for ( i = 0; i < nelems_x_nfields; i++ ) {",
          "1592:             mat_uint32_t nBytes;",
          "1595:             if ( mat->byteswap ) {",
          "1596:                 (void)Mat_uint32Swap(buf);",
          "1597:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1569:         matvar->data = malloc(matvar->nbytes);",
          "1574:         for ( i = 0; i < nelems; i++ ) {",
          "1575:             size_t k;",
          "1576:             for ( k = 0; k < nfields; k++ ) {",
          "1577:                 fields[i*nfields+k] = Mat_VarCalloc();",
          "1578:             }",
          "1579:         }",
          "1580:         if ( NULL != matvar->internal->fieldnames ) {",
          "1581:             for ( i = 0; i < nelems; i++ ) {",
          "1582:                 size_t k;",
          "1583:                 for ( k = 0; k < nfields; k++ ) {",
          "1584:                     if ( NULL != matvar->internal->fieldnames[k] ) {",
          "1585:                         fields[i*nfields+k]->name = strdup(matvar->internal->fieldnames[k]);",
          "1586:                     }",
          "1587:                 }",
          "1588:             }",
          "1589:         }",
          "1594:             bytesread += fread(buf,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1649:         matvar->data = calloc(nelems_x_nfields, matvar->data_size);",
          "1657:             fields[i] = Mat_VarCalloc();",
          "1658:             if ( NULL == fields[i] ) {",
          "1659:                 Mat_Critical(\"Couldn't allocate memory for field %\" SIZE_T_FMTSTR, i);",
          "1660:                 continue;",
          "1661:             }",
          "1664:             err = Read(buf, 4, 2, (FILE*)mat->fp, &bytesread);",
          "1665:             if ( 0 != err ) {",
          "1666:                 Mat_VarFree(fields[i]);",
          "1667:                 fields[i] = NULL;",
          "1668:                 break;",
          "1669:             }",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1602:                 fields[i] = NULL;",
          "1603:                 Mat_Critical(\"fields[%\" SIZE_T_FMTSTR \"] not MAT_T_MATRIX, fpos = %ld\", i,",
          "1604:                     ftell((FILE*)mat->fp));",
          "1606:             } else if ( 0 == nBytes ) {",
          "1608:                 free(fields[i]->internal);",
          "",
          "[Removed Lines]",
          "1605:                 return bytesread;",
          "",
          "[Added Lines]",
          "1680:                 break;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1611:             }",
          "1615:             if ( mat->byteswap ) {",
          "1616:                 (void)Mat_uint32Swap(buf);",
          "1617:                 (void)Mat_uint32Swap(buf+1);",
          "",
          "[Removed Lines]",
          "1614:             bytesread += fread(buf,4,6,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1689:             err = Read(buf, 4, 6, (FILE*)mat->fp, &bytesread);",
          "1690:             if ( 0 != err ) {",
          "1691:                 Mat_VarFree(fields[i]);",
          "1692:                 fields[i] = NULL;",
          "1693:                 break;",
          "1694:             }",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1635:             }",
          "1637:             {",
          "1639:                 bytesread += nbytes;",
          "1640:                 nBytes -= nbytes;",
          "1641:             }",
          "1644:             nBytes-=8;",
          "1645:             fields[i]->internal->datapos = ftell((FILE*)mat->fp);",
          "1646:             if ( fields[i]->internal->datapos != -1L ) {",
          "",
          "[Removed Lines]",
          "1638:                 size_t nbytes = ReadRankDims(mat, fields[i], (enum matio_types)buf[4], buf[5]);",
          "1643:             bytesread+=fread(buf,1,8,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "1718:                 size_t nbytes = 0;",
          "1719:                 err = ReadRankDims(mat, fields[i], (enum matio_types)buf[4], buf[5], &nbytes);",
          "1722:                 if ( 0 != err ) {",
          "1723:                     Mat_VarFree(fields[i]);",
          "1724:                     fields[i] = NULL;",
          "1725:                     break;",
          "1726:                 }",
          "1729:             err = Read(buf, 1, 8, (FILE*)mat->fp, &bytesread);",
          "1730:             if ( 0 != err ) {",
          "1731:                 Mat_VarFree(fields[i]);",
          "1732:                 fields[i] = NULL;",
          "1733:                 break;",
          "1734:             }",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1653:                 Mat_Critical(\"Couldn't determine file position\");",
          "1654:             }",
          "1655:         }",
          "1656:     }",
          "1658:     return bytesread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:         if ( NULL != matvar->internal->fieldnames ) {",
          "1749:             for ( i = 0; i < nelems; i++ ) {",
          "1750:                 size_t k;",
          "1751:                 for ( k = 0; k < nfields; k++ ) {",
          "1752:                     if ( NULL != matvar->internal->fieldnames[k] && NULL != fields[i*nfields+k] ) {",
          "1753:                         fields[i*nfields+k]->name = strdup(matvar->internal->fieldnames[k]);",
          "1754:                     }",
          "1755:                 }",
          "1756:             }",
          "1757:         }",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1671:     int err;",
          "1672:     size_t nelems = 1;",
          "1675:     matvar->data_size = sizeof(matvar_t *);",
          "1677:     if ( err )",
          "1678:         return 0;",
          "",
          "[Removed Lines]",
          "1674:     err = SafeMulDims(matvar, &nelems);",
          "1676:     err |= SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "1776:     err = MulDims(matvar, &nelems);",
          "1778:     err |= Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1715: {",
          "1718:     if ( data_type == MAT_T_INT32 ) {",
          "1719:         matvar->rank = nbytes / sizeof(mat_uint32_t);",
          "",
          "[Removed Lines]",
          "1713: static size_t",
          "1714: ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type, mat_uint32_t nbytes)",
          "1716:     size_t bytesread = 0;",
          "",
          "[Added Lines]",
          "1816: static int",
          "1817: ReadRankDims(mat_t *mat, matvar_t *matvar, enum matio_types data_type, mat_uint32_t nbytes, size_t* read_bytes)",
          "1819:     int err = 0;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1723:             mat_uint32_t buf;",
          "1725:             for ( i = 0; i < matvar->rank; i++) {",
          "1729:                     if ( mat->byteswap ) {",
          "1730:                         matvar->dims[i] = Mat_uint32Swap(&buf);",
          "1731:                     } else {",
          "",
          "[Removed Lines]",
          "1726:                 size_t readresult = fread(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp);",
          "1727:                 if ( 1 == readresult ) {",
          "1728:                     bytesread += sizeof(mat_uint32_t);",
          "",
          "[Added Lines]",
          "1829:                 err = Read(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp, read_bytes);",
          "1830:                 if ( 0 == err ) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1735:                     free(matvar->dims);",
          "1736:                     matvar->dims = NULL;",
          "1737:                     matvar->rank = 0;",
          "1739:                 }",
          "1740:             }",
          "1742:             if ( matvar->rank % 2 != 0 ) {",
          "1747:                     free(matvar->dims);",
          "1748:                     matvar->dims = NULL;",
          "1749:                     matvar->rank = 0;",
          "1751:                 }",
          "1752:             }",
          "1753:         } else {",
          "1754:             matvar->rank = 0;",
          "1755:             Mat_Critical(\"Error allocating memory for dims\");",
          "1756:         }",
          "1757:     }",
          "1759: }",
          "",
          "[Removed Lines]",
          "1738:                     return 0;",
          "1743:                 size_t readresult = fread(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp);",
          "1744:                 if ( 1 == readresult ) {",
          "1745:                     bytesread += sizeof(mat_uint32_t);",
          "1746:                 } else {",
          "1750:                     return 0;",
          "1758:     return bytesread;",
          "",
          "[Added Lines]",
          "1840:                     return err;",
          "1845:                 err = Read(&buf, sizeof(mat_uint32_t), 1, (FILE*)mat->fp, read_bytes);",
          "1846:                 if ( 0 != err ) {",
          "1850:                     return err;",
          "1855:             err = 1;",
          "1859:     return err;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1773:     int nBytes, j;",
          "1774:     size_t nelems = 1;",
          "1777:     if ( err )",
          "1778:         return err;",
          "",
          "[Removed Lines]",
          "1776:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "1877:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1879:                 fwrite(padzero,1,fieldname_size-len,(FILE*)mat->fp);",
          "1880:             }",
          "1881:             free(padzero);",
          "1883:             if ( err )",
          "1884:                 break;",
          "1885:             for ( i = 0; i < nelems_x_nfields; i++ )",
          "",
          "[Removed Lines]",
          "1882:             err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "",
          "[Added Lines]",
          "1983:             err = Mul(&nelems_x_nfields, nelems, nfields);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2130:         return byteswritten;",
          "2131:     }",
          "2134:     if ( err ) {",
          "2135:         Mat_Critical(\"Integer multiplication overflow\");",
          "2136:         return byteswritten;",
          "",
          "[Removed Lines]",
          "2133:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "2234:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2256:                 } while ( z->avail_out == 0 );",
          "2257:             }",
          "2258:             free(padzero);",
          "2260:             if ( err ) {",
          "2261:                 Mat_Critical(\"Integer multiplication overflow\");",
          "2262:                 return byteswritten;",
          "",
          "[Removed Lines]",
          "2259:             err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "",
          "[Added Lines]",
          "2360:             err = Mul(&nelems_x_nfields, nelems, nfields);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2692:     if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {",
          "2693: #if HAVE_ZLIB",
          "2694:         matvar->internal->z->avail_in = 0;",
          "2696:         if ( mat->byteswap )",
          "2697:             (void)Mat_uint32Swap(tag);",
          "",
          "[Removed Lines]",
          "2695:         InflateDataType(mat,matvar->internal->z,tag);",
          "",
          "[Added Lines]",
          "2796:         if (0 != Inflate(mat, matvar->internal->z, tag, 4, NULL) ) {",
          "2797:             return;",
          "2798:         }",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2702:             nBytes = (tag[0] & 0xffff0000) >> 16;",
          "2703:         } else {",
          "2704:             data_in_tag = 0;",
          "2706:             if ( mat->byteswap )",
          "2707:                 (void)Mat_uint32Swap(tag+1);",
          "2708:             nBytes = tag[1];",
          "2709:         }",
          "2710: #endif",
          "2711:     } else {",
          "2713:         if ( mat->byteswap )",
          "2714:             (void)Mat_uint32Swap(tag);",
          "2715:         packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "2705:             InflateDataType(mat,matvar->internal->z,tag+1);",
          "2712:         size_t bytesread = fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "2808:             if ( 0 != Inflate(mat, matvar->internal->z, tag+1, 4, NULL) ) {",
          "2809:                 return;",
          "2810:             }",
          "2817:         if ( 0 != Read(tag, 4, 1, (FILE*)mat->fp, NULL) ) {",
          "2818:             return;",
          "2819:         }",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2718:             nBytes = (tag[0] & 0xffff0000) >> 16;",
          "2719:         } else {",
          "2720:             data_in_tag = 0;",
          "2722:             if ( mat->byteswap )",
          "2723:                 (void)Mat_uint32Swap(tag+1);",
          "2724:             nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "2721:             bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "2828:             if ( 0 != Read(tag+1, 4, 1, (FILE*)mat->fp, NULL) ) {",
          "2829:                 return;",
          "2830:             }",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2834:         if ( data_in_tag )",
          "2835:             nBytes+=4;",
          "2836:         if ( (nBytes % 8) != 0 )",
          "2838: #endif",
          "2839:     }",
          "2840: }",
          "",
          "[Removed Lines]",
          "2837:             InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "",
          "[Added Lines]",
          "2946:             InflateSkip(mat, matvar->internal->z, 8-(nBytes % 8), NULL);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2875:         Mat_Critical(\"Couldn't determine file position\");",
          "2876:         return 1;",
          "2877:     }",
          "2879:     if ( err ) {",
          "2880:         Mat_Critical(\"Integer multiplication overflow\");",
          "2881:         return err;",
          "",
          "[Removed Lines]",
          "2878:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "2987:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2951:             if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {",
          "2952: #if HAVE_ZLIB",
          "2953:                 matvar->internal->z->avail_in = 0;",
          "2955:                 if ( byteswap )",
          "2956:                     (void)Mat_uint32Swap(tag);",
          "2957:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "2954:                 InflateDataType(mat,matvar->internal->z,tag);",
          "",
          "[Added Lines]",
          "3063:                 err = Inflate(mat, matvar->internal->z, tag, 4, &bytesread);",
          "3064:                 if ( 0 != err ) {",
          "3065:                     break;",
          "3066:                 }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2960:                     nBytes = (tag[0] & 0xffff0000) >> 16;",
          "2961:                 } else {",
          "2962:                     data_in_tag = 0;",
          "2964:                     if ( byteswap )",
          "2965:                         (void)Mat_uint32Swap(tag+1);",
          "2966:                     nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "2963:                     InflateDataType(mat,matvar->internal->z,tag+1);",
          "",
          "[Added Lines]",
          "3075:                     err = Inflate(mat, matvar->internal->z, tag+1, 4, &bytesread);",
          "3076:                     if ( 0 != err ) {",
          "3077:                         break;",
          "3078:                     }",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2970:                 matvar->data_size = Mat_SizeOf(matvar->data_type);",
          "2971:                 matvar->nbytes = nBytes;",
          "2972:             } else {",
          "2974:                 if ( byteswap )",
          "2975:                     (void)Mat_uint32Swap(tag);",
          "2976:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "2973:                 bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3088:                 err = Read(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3089:                 if ( 0 != err ) {",
          "3090:                     break;",
          "3091:                 }",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2980:                 } else {",
          "2981:                     data_in_tag = 0;",
          "2983:                     if ( byteswap )",
          "2984:                         (void)Mat_uint32Swap(tag+1);",
          "2986:                 }",
          "2987:                 matvar->data_type = MAT_T_UINT8;",
          "2988:                 matvar->data_size = Mat_SizeOf(MAT_T_UINT8);",
          "2990:                 if ( err ) {",
          "2991:                     Mat_Critical(\"Integer multiplication overflow\");",
          "2992:                     break;",
          "",
          "[Removed Lines]",
          "2982:                     bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "2989:                 err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "3100:                     err = Read(tag+1, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3101:                     if ( 0 != err ) {",
          "3102:                         break;",
          "3103:                     }",
          "3110:                 err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3006:             }",
          "3007:             {",
          "3008:                 size_t nbytes;",
          "3010:                 if ( err || nbytes > matvar->nbytes ) {",
          "3011:                     break;",
          "3012:                 }",
          "",
          "[Removed Lines]",
          "3009:                 err = SafeMul(&nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "3130:                 err = Mul(&nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3032:                 if ( data_in_tag )",
          "3033:                     nBytes+=4;",
          "3034:                 if ( (nBytes % 8) != 0 )",
          "3036: #endif",
          "3037:             }",
          "3038:             break;",
          "",
          "[Removed Lines]",
          "3035:                     InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "",
          "[Added Lines]",
          "3156:                     InflateSkip(mat, matvar->internal->z, 8-(nBytes % 8), NULL);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3042:             size_t i, nelems_x_nfields;",
          "3044:             matvar->data_type = MAT_T_STRUCT;",
          "3046:             if ( err || !matvar->nbytes || !matvar->data_size || NULL == matvar->data )",
          "3047:                 break;",
          "3048:             fields = (matvar_t **)matvar->data;",
          "",
          "[Removed Lines]",
          "3045:             err = SafeMul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "[Added Lines]",
          "3166:             err = Mul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3096:             if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {",
          "3097: #if HAVE_ZLIB",
          "3098:                 matvar->internal->z->avail_in = 0;",
          "3100:                 if ( mat->byteswap )",
          "3101:                     (void)Mat_uint32Swap(tag);",
          "3102:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "3099:                 InflateDataType(mat,matvar->internal->z,tag);",
          "",
          "[Added Lines]",
          "3220:                 err = Inflate(mat, matvar->internal->z, tag, 4, &bytesread);",
          "3221:                 if ( 0 != err ) {",
          "3222:                     break;",
          "3223:                 }",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3110:                 }",
          "3111: #endif",
          "3112:             } else {",
          "3114:                 if ( mat->byteswap )",
          "3115:                     (void)Mat_uint32Swap(tag);",
          "3116:                 packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "3113:                 bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3237:                 err = Read(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3238:                 if ( 0 != err ) {",
          "3239:                     break;",
          "3240:                 }",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3119:                     N = (tag[0] & 0xffff0000) >> 16;",
          "3120:                 } else {",
          "3121:                     data_in_tag = 0;",
          "3123:                     if ( mat->byteswap )",
          "3124:                         (void)Mat_uint32Swap(&N);",
          "3125:                 }",
          "",
          "[Removed Lines]",
          "3122:                     bytesread += fread(&N,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3249:                     err = Read(&N, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3250:                     if ( 0 != err ) {",
          "3251:                         break;",
          "3252:                     }",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3144:             if ( matvar->isComplex ) {",
          "3145:                 mat_complex_split_t *complex_data;",
          "3146:                 size_t nbytes;",
          "3148:                 if ( err ) {",
          "3149:                     Mat_Critical(\"Integer multiplication overflow\");",
          "3150:                     break;",
          "",
          "[Removed Lines]",
          "3147:                 err = SafeMul(&nbytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "",
          "[Added Lines]",
          "3277:                 err = Mul(&nbytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3216:                         (void)fseek((FILE*)mat->fp,8-(nBytes % 8),SEEK_CUR);",
          "3220:                     if ( byteswap )",
          "3221:                         (void)Mat_uint32Swap(tag);",
          "3222:                     packed_type = TYPE_FROM_TAG(tag[0]);",
          "",
          "[Removed Lines]",
          "3219:                     bytesread += fread(tag,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3349:                     err = Read(tag, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3350:                     if ( 0 != err ) {",
          "3351:                         break;",
          "3352:                     }",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3225:                         nBytes = (tag[0] & 0xffff0000) >> 16;",
          "3226:                     } else {",
          "3227:                         data_in_tag = 0;",
          "3229:                         if ( byteswap )",
          "3230:                             (void)Mat_uint32Swap(tag+1);",
          "3231:                         nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "3228:                         bytesread += fread(tag+1,4,1,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "3361:                         err = Read(tag+1, 4, 1, (FILE*)mat->fp, &bytesread);",
          "3362:                         if ( 0 != err ) {",
          "3363:                             break;",
          "3364:                         }",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3348:                     if ( data_in_tag )",
          "3349:                         nBytes+=4;",
          "3350:                     if ( (nBytes % 8) != 0 )",
          "3355:                     if ( byteswap )",
          "3356:                         (void)Mat_uint32Swap(tag);",
          "",
          "[Removed Lines]",
          "3351:                         InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "3354:                     InflateDataType(mat,matvar->internal->z,tag);",
          "",
          "[Added Lines]",
          "3487:                         InflateSkip(mat,matvar->internal->z,8-(nBytes % 8), NULL);",
          "3490:                     err = Inflate(mat, matvar->internal->z, tag, 4, NULL);",
          "3491:                     if ( 0 != err ) {",
          "3492:                         break;",
          "3493:                     }",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3361:                         nBytes = (tag[0] & 0xffff0000) >> 16;",
          "3362:                     } else {",
          "3363:                         data_in_tag = 0;",
          "3365:                         if ( byteswap )",
          "3366:                             (void)Mat_uint32Swap(tag+1);",
          "3367:                         nBytes = tag[1];",
          "",
          "[Removed Lines]",
          "3364:                         InflateDataType(mat,matvar->internal->z,tag+1);",
          "",
          "[Added Lines]",
          "3503:                         err = Inflate(mat, matvar->internal->z, tag+1, 4, NULL);",
          "3504:                         if ( 0 != err ) {",
          "3505:                             break;",
          "3506:                         }",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3424:                     if ( data_in_tag )",
          "3425:                         nBytes+=4;",
          "3426:                     if ( (nBytes % 8) != 0 )",
          "3429:                 }",
          "3430:                 sparse->data = complex_data;",
          "3432:                 size_t nbytes;",
          "3434:                 if ( err ) {",
          "3435:                     Mat_Critical(\"Integer multiplication overflow\");",
          "3436:                     break;",
          "",
          "[Removed Lines]",
          "3427:                         InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "3433:                 err = SafeMul(&nbytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "",
          "[Added Lines]",
          "3569:                         InflateSkip(mat, matvar->internal->z, 8-(nBytes % 8), NULL);",
          "3575:                 err = Mul(&nbytes, sparse->ndata, Mat_SizeOf(matvar->data_type));",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3560:                     if ( data_in_tag )",
          "3561:                         nBytes+=4;",
          "3562:                     if ( (nBytes % 8) != 0 )",
          "3565:                 }",
          "3566:             }",
          "",
          "[Removed Lines]",
          "3563:                         InflateSkip(mat,matvar->internal->z,8-(nBytes % 8));",
          "",
          "[Added Lines]",
          "3705:                         InflateSkip(mat, matvar->internal->z, 8-(nBytes % 8), NULL);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3607:             if ( matvar->isComplex ) {",
          "3608:                 mat_complex_split_t *complex_data;",
          "3611:                 if ( err ) {",
          "3612:                     Mat_Critical(\"Integer multiplication overflow\");",
          "3613:                     break;",
          "",
          "[Removed Lines]",
          "3610:                 err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "3752:                 err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3624:                 Mat_VarReadNumeric5(mat,matvar,complex_data->Im,nelems);",
          "3625:                 matvar->data = complex_data;",
          "3626:             } else {",
          "3628:                 if ( err ) {",
          "3629:                     Mat_Critical(\"Integer multiplication overflow\");",
          "3630:                     break;",
          "",
          "[Removed Lines]",
          "3627:                 err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "3769:                 err = Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4220:     (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);",
          "4221:     if ( matvar->compression == MAT_COMPRESSION_NONE ) {",
          "4223:         if ( mat->byteswap ) {",
          "4224:             (void)Mat_int32Swap(tag);",
          "4225:             (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4222:         bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4364:         err = Read(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4365:         if ( 0 != err ) {",
          "4366:             return err;",
          "4367:         }",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4261:             return -1;",
          "4262:         }",
          "4263:         z.avail_in = 0;",
          "4265:         if ( mat->byteswap ) {",
          "4266:             (void)Mat_int32Swap(tag);",
          "4267:         }",
          "4268:         matvar->data_type = TYPE_FROM_TAG(tag[0]);",
          "4272:             if ( mat->byteswap ) {",
          "4273:                 (void)Mat_int32Swap(tag+1);",
          "4274:             }",
          "",
          "[Removed Lines]",
          "4264:         InflateDataType(mat,&z,tag);",
          "4271:             InflateDataType(mat,&z,tag+1);",
          "",
          "[Added Lines]",
          "4409:         err = Inflate(mat, &z, tag, 4, NULL);",
          "4410:         if ( 0 != err ) {",
          "4411:             return err;",
          "4412:         }",
          "4418:             err = Inflate(mat, &z, tag+1, 4, NULL);",
          "4419:             if ( 0 != err ) {",
          "4420:                 return err;",
          "4421:             }",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4293:                 ReadDataSlab2(mat,complex_data->Re,matvar->class_type,",
          "4294:                     matvar->data_type,matvar->dims,start,stride,edge);",
          "4295:                 (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4297:                 if ( mat->byteswap ) {",
          "4298:                     (void)Mat_int32Swap(tag);",
          "4299:                     (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4296:                 bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4446:                 err = Read(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4447:                 if ( 0 != err ) {",
          "4448:                     return err;",
          "4449:                 }",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4325:                 err = inflateCopy(&z,matvar->internal->z);",
          "4326:                 if ( err != Z_OK ) {",
          "4327:                     Mat_Critical(\"inflateCopy returned error %s\",zError(err));",
          "4328:                 }",
          "4330:                 z.avail_in = 0;",
          "4332:                 if ( mat->byteswap ) {",
          "4333:                     (void)Mat_int32Swap(tag);",
          "4334:                 }",
          "4335:                 matvar->data_type = TYPE_FROM_TAG(tag[0]);",
          "4338:                 }",
          "4339:                 ReadCompressedDataSlab2(mat,&z,complex_data->Im,",
          "4340:                     matvar->class_type,matvar->data_type,matvar->dims,",
          "",
          "[Removed Lines]",
          "4329:                 InflateSkip(mat,&z,real_bytes);",
          "4331:                 InflateDataType(mat,&z,tag);",
          "4337:                     InflateSkip(mat,&z,4);",
          "",
          "[Added Lines]",
          "4481:                     return err;",
          "4483:                 InflateSkip(mat, &z, real_bytes, NULL);",
          "4485:                 err = Inflate(mat, &z, tag, 4, NULL);",
          "4486:                 if ( 0 != err ) {",
          "4487:                     return err;",
          "4488:                 }",
          "4494:                     InflateSkip(mat, &z, 4, NULL);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4356:                     start,stride,edge);",
          "4358:                 (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4360:                 if ( mat->byteswap ) {",
          "4361:                     (void)Mat_int32Swap(tag);",
          "4362:                     (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4359:                 bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4516:                 err = Read(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4517:                 if ( 0 != err ) {",
          "4518:                     return err;",
          "4519:                 }",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4388:                 err = inflateCopy(&z,matvar->internal->z);",
          "4389:                 if ( err != Z_OK ) {",
          "4390:                     Mat_Critical(\"inflateCopy returned error %s\",zError(err));",
          "4391:                 }",
          "4393:                 z.avail_in = 0;",
          "4395:                 if ( mat->byteswap ) {",
          "4396:                     (void)Mat_int32Swap(tag);",
          "4397:                 }",
          "4398:                 matvar->data_type = TYPE_FROM_TAG(tag[0]);",
          "4401:                 }",
          "4402:                 ReadCompressedDataSlabN(mat,&z,complex_data->Im,",
          "4403:                     matvar->class_type,matvar->data_type,matvar->rank,",
          "",
          "[Removed Lines]",
          "4392:                 InflateSkip(mat,&z,real_bytes);",
          "4394:                 InflateDataType(mat,&z,tag);",
          "4400:                     InflateSkip(mat,&z,4);",
          "",
          "[Added Lines]",
          "4551:                     return err;",
          "4553:                 InflateSkip(mat, &z, real_bytes, NULL);",
          "4555:                 err = Inflate(mat, &z, tag, 4, NULL);",
          "4556:                 if ( 0 != err ) {",
          "4557:                     return err;",
          "4558:                 }",
          "4564:                     InflateSkip(mat, &z, 4, NULL);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4446:         return -1;",
          "4447:     (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);",
          "4448:     if ( matvar->compression == MAT_COMPRESSION_NONE ) {",
          "4450:         if ( mat->byteswap ) {",
          "4451:             (void)Mat_int32Swap(tag);",
          "4452:             (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4449:         bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4613:         err = Read(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4614:         if ( 0 != err ) {",
          "4615:             return err;",
          "4616:         }",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4483:         err = inflateCopy(&z,matvar->internal->z);",
          "4484:         if ( err != Z_OK ) {",
          "4485:             Mat_Critical(\"inflateCopy returned error %s\",zError(err));",
          "4487:         }",
          "4489:         if ( mat->byteswap ) {",
          "4490:             (void)Mat_int32Swap(tag);",
          "4491:             (void)Mat_int32Swap(tag+1);",
          "4492:         }",
          "4493:         matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);",
          "4497:             if ( mat->byteswap ) {",
          "4498:                 (void)Mat_int32Swap(tag+1);",
          "4499:             }",
          "",
          "[Removed Lines]",
          "4486:             return -1;",
          "4488:         InflateDataType(mat,&z,tag);",
          "4496:             InflateDataType(mat,&z,tag+1);",
          "",
          "[Added Lines]",
          "4653:             return err;",
          "4654:         }",
          "4655:         err = Inflate(mat, &z, tag, 4, NULL);",
          "4656:         if ( 0 != err ) {",
          "4657:             return err;",
          "4665:             err = Inflate(mat, &z, tag+1, 4, NULL);",
          "4666:             if ( 0 != err ) {",
          "4667:                 return err;",
          "4668:             }",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4506:     if ( real_bytes % 8 )",
          "4507:         real_bytes += (8-(real_bytes % 8));",
          "4510:     if ( err ) {",
          "4511:         Mat_Critical(\"Integer multiplication overflow\");",
          "4512:         return -1;",
          "",
          "[Removed Lines]",
          "4509:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "4681:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4521:             ReadDataSlab1(mat,complex_data->Re,matvar->class_type,",
          "4522:                           matvar->data_type,start,stride,edge);",
          "4523:             (void)fseek((FILE*)mat->fp,matvar->internal->datapos+real_bytes,SEEK_SET);",
          "4525:             if ( mat->byteswap ) {",
          "4526:                 (void)Mat_int32Swap(tag);",
          "4527:                 (void)Mat_int32Swap(tag+1);",
          "",
          "[Removed Lines]",
          "4524:             bytesread += fread(tag,4,2,(FILE*)mat->fp);",
          "",
          "[Added Lines]",
          "4696:             err = Read(tag, 4, 2, (FILE*)mat->fp, NULL);",
          "4697:             if ( 0 != err ) {",
          "4698:                 return err;",
          "4699:             }",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4550:             inflateEnd(&z);",
          "4552:             if ( err != Z_OK ) {",
          "4553:                 Mat_Critical(\"inflateCopy returned error %s\",zError(err));",
          "4554:             }",
          "4556:             z.avail_in = 0;",
          "4558:             if ( mat->byteswap ) {",
          "4559:                 (void)Mat_int32Swap(tag);",
          "4560:             }",
          "4561:             matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);",
          "4564:             }",
          "4565:             ReadCompressedDataSlab1(mat,&z,complex_data->Im,",
          "4566:                 matvar->class_type,matvar->data_type,start,stride,edge);",
          "",
          "[Removed Lines]",
          "4551:             err = inflateCopy(&z,matvar->internal->z);",
          "4555:             InflateSkip(mat,&z,real_bytes);",
          "4557:             InflateDataType(mat,&z,tag);",
          "4563:                 InflateSkip(mat,&z,4);",
          "",
          "[Added Lines]",
          "4726:             err = inflateCopy(&z, matvar->internal->z);",
          "4729:                 return err;",
          "4731:             InflateSkip(mat, &z, real_bytes, NULL);",
          "4733:             err = Inflate(mat, &z, tag, 4, NULL);",
          "4734:             if ( 0 != err ) {",
          "4735:                 return err;",
          "4736:             }",
          "4742:                 InflateSkip(mat, &z, 4, NULL);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4859:         Mat_Critical(\"Couldn't determine file position\");",
          "4860:         return NULL;",
          "4861:     }",
          "4867:         return NULL;",
          "4868:     if ( mat->byteswap ) {",
          "4869:         (void)Mat_int32Swap(&data_type);",
          "",
          "[Removed Lines]",
          "4862:     err = fread(&data_type,4,1,(FILE*)mat->fp);",
          "4863:     if ( err == 0 )",
          "4864:         return NULL;",
          "4865:     err = fread(&nBytes,4,1,(FILE*)mat->fp);",
          "4866:     if ( err == 0 )",
          "",
          "[Added Lines]",
          "5041:     {",
          "5042:         size_t nbytes = 0;",
          "5043:         err = Read(&data_type, 4, 1, (FILE*)mat->fp, &nbytes);",
          "5044:         if ( 0 != err || 0 == nbytes )",
          "5045:             return NULL;",
          "5046:     }",
          "5047:     err = Read(&nBytes, 4, 1, (FILE*)mat->fp, NULL);",
          "5048:     if ( 0 != err )",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4876:         {",
          "4877: #if HAVE_ZLIB",
          "4878:             mat_uint32_t uncomp_buf[16] = {0,};",
          "4882:             matvar = Mat_VarCalloc();",
          "4883:             if ( NULL == matvar ) {",
          "",
          "[Removed Lines]",
          "4879:             int      nbytes;",
          "4880:             long     bytesread = 0;",
          "",
          "[Added Lines]",
          "5061:             int nbytes;",
          "5062:             size_t bytesread = 0;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "4896:             }",
          "4900:             if ( mat->byteswap ) {",
          "4901:                 (void)Mat_uint32Swap(uncomp_buf);",
          "4902:                 (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "4899:             bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "5081:             err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "4910:                 break;",
          "4911:             }",
          "4914:             if ( mat->byteswap ) {",
          "4915:                 (void)Mat_uint32Swap(uncomp_buf);",
          "4916:                 (void)Mat_uint32Swap(uncomp_buf+2);",
          "",
          "[Removed Lines]",
          "4913:             bytesread += InflateArrayFlags(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "5095:             err = Inflate(mat, matvar->internal->z, uncomp_buf, 16, &bytesread);",
          "5096:             if ( 0 != err ) {",
          "5097:                 Mat_VarFree(matvar);",
          "5098:                 matvar = NULL;",
          "5099:                 break;",
          "5100:             }",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "4931:             if ( matvar->class_type != MAT_C_OPAQUE ) {",
          "4932:                 mat_uint32_t* dims = NULL;",
          "4933:                 int do_clean = 0;",
          "4936:                     dims = uncomp_buf + 2;",
          "4938:                     do_clean = 1;",
          "4939:                 if ( mat->byteswap ) {",
          "4940:                     (void)Mat_uint32Swap(uncomp_buf);",
          "4941:                     (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "4934:                 bytesread += InflateRankDims(mat,matvar,uncomp_buf,sizeof(uncomp_buf),&dims);",
          "4935:                 if ( NULL == dims )",
          "4937:                 else",
          "",
          "[Added Lines]",
          "5121:                 err = InflateRankDims(mat, matvar->internal->z, uncomp_buf, sizeof(uncomp_buf), &dims, &bytesread);",
          "5122:                 if ( NULL == dims ) {",
          "5124:                 } else {",
          "5126:                 }",
          "5127:                 if ( 0 != err ) {",
          "5128:                     if ( do_clean ) {",
          "5129:                         free(dims);",
          "5130:                     }",
          "5131:                     Mat_VarFree(matvar);",
          "5132:                     matvar = NULL;",
          "5133:                     break;",
          "5134:                 }",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "4952:                         Mat_Critical(\"%d is not a valid rank\", rank);",
          "4953:                         break;",
          "4954:                     }",
          "4956:                     if ( err ) {",
          "4958:                             free(dims);",
          "4959:                         (void)fseek((FILE*)mat->fp,nBytes-bytesread,SEEK_CUR);",
          "4960:                         Mat_VarFree(matvar);",
          "4961:                         matvar = NULL;",
          "",
          "[Removed Lines]",
          "4955:                     err = SafeMul(&size, matvar->rank, sizeof(*matvar->dims));",
          "4957:                         if ( do_clean )",
          "",
          "[Added Lines]",
          "5151:                     err = Mul(&size, matvar->rank, sizeof(*matvar->dims));",
          "5153:                         if ( do_clean ) {",
          "5155:                         }",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "4980:                             matvar->dims[j] = dims[j];",
          "4981:                     }",
          "4982:                 }",
          "4984:                     free(dims);",
          "4987:                 if ( mat->byteswap )",
          "4988:                     (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "4983:                 if ( do_clean )",
          "4986:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "5180:                 if ( do_clean ) {",
          "5182:                 }",
          "5184:                 err = Inflate(mat, matvar->internal->z, uncomp_buf, 8, &bytesread);",
          "5185:                 if ( 0 != err ) {",
          "5186:                     Mat_VarFree(matvar);",
          "5187:                     matvar = NULL;",
          "5188:                     break;",
          "5189:                 }",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "5006:                     matvar->name = (char*)malloc(len_pad + 1);",
          "5007:                     if ( NULL != matvar->name ) {",
          "5010:                         matvar->name[len] = '\\0';",
          "5011:                     }",
          "5012:                 } else {",
          "",
          "[Removed Lines]",
          "5009:                         bytesread += InflateVarName(mat,matvar,matvar->name,len_pad);",
          "",
          "[Added Lines]",
          "5212:                         err = Inflate(mat, matvar->internal->z, matvar->name, len_pad, &bytesread);",
          "5213:                         if ( 0 != err )  {",
          "5214:                             Mat_VarFree(matvar);",
          "5215:                             matvar = NULL;",
          "5216:                             break;",
          "5217:                         }",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "5042:         case MAT_T_MATRIX:",
          "5043:         {",
          "5044:             mat_uint32_t buf[6];",
          "5050:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5051:                 break;",
          "5052:             }",
          "",
          "[Removed Lines]",
          "5045:             size_t readresult;",
          "5048:             readresult = fread(buf, 4, 6, (FILE*)mat->fp);",
          "5049:             if ( 6 != readresult ) {",
          "",
          "[Added Lines]",
          "5255:             err = Read(buf, 4, 6, (FILE*)mat->fp, NULL);",
          "5256:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "5077:                    matvar->nbytes = buf[3];",
          "5078:                }",
          "5079:             }",
          "5086:             }",
          "5090:                 Mat_VarFree(matvar);",
          "5091:                 matvar = NULL;",
          "5092:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "5080:             readresult = ReadRankDims(mat, matvar, (enum matio_types)buf[4], buf[5]);",
          "5081:             if ( 0 == readresult && 0 < matvar->rank ) {",
          "5082:                 Mat_VarFree(matvar);",
          "5083:                 matvar = NULL;",
          "5084:                 (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5085:                 break;",
          "5088:             readresult = fread(buf, 4, 2, (FILE*)mat->fp);",
          "5089:             if ( 2 != readresult ) {",
          "",
          "[Added Lines]",
          "5288:             {",
          "5289:                 size_t nbytes = 0;",
          "5290:                 err = ReadRankDims(mat, matvar, (enum matio_types)buf[4], buf[5], &nbytes);",
          "5291:                 if ( 0 == nbytes && 0 < matvar->rank ) {",
          "5292:                     Mat_VarFree(matvar);",
          "5293:                     matvar = NULL;",
          "5294:                     (void)fseek((FILE*)mat->fp, fpos, SEEK_SET);",
          "5295:                     break;",
          "5296:                 }",
          "5299:             err = Read(buf, 4, 2, (FILE*)mat->fp, NULL);",
          "5300:             if ( 0 != err ) {",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "5113:                 }",
          "5114:                 matvar->name = (char*)malloc(len_pad + 1);",
          "5115:                 if ( NULL != matvar->name ) {",
          "5118:                         matvar->name[len] = '\\0';",
          "5119:                     } else {",
          "5120:                         Mat_VarFree(matvar);",
          "",
          "[Removed Lines]",
          "5116:                     readresult = fread(matvar->name, 1, len_pad, (FILE*)mat->fp);",
          "5117:                     if ( readresult == len_pad ) {",
          "",
          "[Added Lines]",
          "5327:                     err = Read(matvar->name, 1, len_pad, (FILE*)mat->fp, NULL);",
          "5328:                     if ( 0 == err ) {",
          "",
          "---------------"
        ],
        "src/mat73.c||src/mat73.c": [
          "File: src/mat73.c -> src/mat73.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:             for ( k = 0; k < *rank; k++ ) {",
          "565:                 perm_dims[k] = (size_t)dims[*rank - k - 1];",
          "567:             }",
          "568:             if ( err ) {",
          "569:                 Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "566:                 err |= SafeMul(&tmp, tmp, perm_dims[k]);",
          "",
          "[Added Lines]",
          "566:                 err |= Mul(&tmp, tmp, perm_dims[k]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583:                 for ( k = 0; k < *rank; k++ ) {",
          "584:                     perm_dims[k] = (size_t)dims[*rank - k - 1];",
          "586:                 }",
          "587:                 if ( err ) {",
          "588:                     Mat_Critical(\"Integer multiplication overflow\");",
          "",
          "[Removed Lines]",
          "585:                     err |= SafeMul(&tmp, tmp, perm_dims[k]);",
          "",
          "[Added Lines]",
          "585:                     err |= Mul(&tmp, tmp, perm_dims[k]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "673:             H5Dread(dset_id,SizeType2H5T(),H5S_ALL,H5S_ALL,H5P_DEFAULT,matvar->dims);",
          "674:             {",
          "675:                 size_t tmp = 1;",
          "677:                 nelems = (hsize_t)tmp;",
          "678:             }",
          "679:         }",
          "",
          "[Removed Lines]",
          "676:                 err = SafeMulDims(matvar, &tmp);",
          "",
          "[Added Lines]",
          "676:                 err = MulDims(matvar, &tmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "693:         hobj_ref_t *ref_ids;",
          "695:         matvar->data_size = sizeof(matvar_t**);",
          "697:         if ( err ) {",
          "698:             Mat_Critical(\"Integer multiplication overflow\");",
          "699:             return;",
          "",
          "[Removed Lines]",
          "696:         err |= SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "696:         err |= Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "896:     {",
          "897:         int err;",
          "898:         size_t nelems_x_nfields;",
          "901:         if ( err ) {",
          "902:             Mat_Critical(\"Integer multiplication overflow\");",
          "903:             matvar->nbytes = 0;",
          "",
          "[Removed Lines]",
          "899:         err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "900:         err |= SafeMul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "[Added Lines]",
          "899:         err = Mul(&nelems_x_nfields, nelems, nfields);",
          "900:         err |= Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057:     if ( MAT_C_CELL == matvar->class_type ) {",
          "1058:         size_t i;",
          "1059:         matvar_t **cells = (matvar_t**)matvar->data;",
          "1061:         for ( i = 0; i < nelems; i++ )",
          "1062:             Mat_H5ReadNextReferenceData(cells[i]->internal->id,cells[i],mat);",
          "1063:         return;",
          "",
          "[Removed Lines]",
          "1060:         SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "1060:         MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1080:                 data_type_id      = ClassType2H5T(matvar->class_type);",
          "1081:             }",
          "1085:             if ( err || matvar->nbytes < 1 ) {",
          "1086:                 H5Dclose(ref_id);",
          "1087:                 break;",
          "",
          "[Removed Lines]",
          "1083:             err = SafeMulDims(matvar, &nelems);",
          "1084:             err |= SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "1083:             err = MulDims(matvar, &nelems);",
          "1084:             err |= Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1863:     {",
          "1864:         size_t tmp = 1;",
          "1866:         nelems = (hsize_t)tmp;",
          "1867:     }",
          "",
          "[Removed Lines]",
          "1865:         err = SafeMulDims(matvar, &tmp);",
          "",
          "[Added Lines]",
          "1865:         err = MulDims(matvar, &tmp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2347:         {",
          "2348:             size_t nelems = 1;",
          "2349:             matvar->data_size = Mat_SizeOfClass(matvar->class_type);",
          "2352:             if ( err ) {",
          "2353:                 Mat_Critical(\"Integer multiplication overflow\");",
          "2354:                 return err;",
          "",
          "[Removed Lines]",
          "2350:             err = SafeMulDims(matvar, &nelems);",
          "2351:             err |= SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "2350:             err = MulDims(matvar, &nelems);",
          "2351:             err |= Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2387:         {",
          "2388:             size_t nelems = 1;",
          "2389:             matvar->data_size = Mat_SizeOf(matvar->data_type);",
          "2392:             if ( err ) {",
          "2393:                 Mat_Critical(\"Integer multiplication overflow\");",
          "2394:                 return err;",
          "",
          "[Removed Lines]",
          "2390:             err = SafeMulDims(matvar, &nelems);",
          "2391:             err |= SafeMul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "[Added Lines]",
          "2390:             err = MulDims(matvar, &nelems);",
          "2391:             err |= Mul(&matvar->nbytes, nelems, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2418:             if ( !matvar->internal->num_fields || NULL == matvar->data )",
          "2419:                 break;",
          "2423:             if ( err ) {",
          "2424:                 Mat_Critical(\"Integer multiplication overflow\");",
          "2425:                 return err;",
          "",
          "[Removed Lines]",
          "2421:             err = SafeMulDims(matvar, &nelems);",
          "2422:             err |= SafeMul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "[Added Lines]",
          "2421:             err = MulDims(matvar, &nelems);",
          "2422:             err |= Mul(&nelems_x_nfields, nelems, matvar->internal->num_fields);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2481:                     size_t nbytes;",
          "2482:                     sparse_data->nir = dims[0];",
          "2483:                     free(dims);",
          "2485:                     if ( err ) {",
          "2486:                         H5Dclose(sparse_dset_id);",
          "2487:                         H5Gclose(dset_id);",
          "",
          "[Removed Lines]",
          "2484:                     err = SafeMul(&nbytes, sparse_data->nir, sizeof(mat_uint32_t));",
          "",
          "[Added Lines]",
          "2484:                     err = Mul(&nbytes, sparse_data->nir, sizeof(mat_uint32_t));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2507:                     size_t nbytes;",
          "2508:                     sparse_data->njc = dims[0];",
          "2509:                     free(dims);",
          "2511:                     if ( err ) {",
          "2512:                         H5Dclose(sparse_dset_id);",
          "2513:                         H5Gclose(dset_id);",
          "",
          "[Removed Lines]",
          "2510:                     err = SafeMul(&nbytes, sparse_data->njc, sizeof(mat_uint32_t));",
          "",
          "[Added Lines]",
          "2510:                     err = Mul(&nbytes, sparse_data->njc, sizeof(mat_uint32_t));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2534:                     sparse_data->nzmax = dims[0];",
          "2535:                     sparse_data->ndata = dims[0];",
          "2536:                     free(dims);",
          "2538:                     if ( err ) {",
          "2539:                         H5Dclose(sparse_dset_id);",
          "2540:                         H5Gclose(dset_id);",
          "",
          "[Removed Lines]",
          "2537:                     err = SafeMul(&ndata_bytes, sparse_data->nzmax, Mat_SizeOf(matvar->data_type));",
          "",
          "[Added Lines]",
          "2537:                     err = Mul(&ndata_bytes, sparse_data->nzmax, Mat_SizeOf(matvar->data_type));",
          "",
          "---------------"
        ],
        "src/matio_private.h||src/matio_private.h": [
          "File: src/matio_private.h -> src/matio_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:                int rank,size_t *dims,int *start,int *stride,int *edge);",
          "224: #endif",
          "227: EXTERN mat_complex_split_t *ComplexMalloc(size_t nbytes);",
          "228: EXTERN void ComplexFree(mat_complex_split_t* complex_data);",
          "229: EXTERN enum matio_types ClassType2DataType(enum matio_classes class_type);",
          "235: #if defined(_WIN32) && defined(_MSC_VER)",
          "",
          "[Removed Lines]",
          "215: EXTERN size_t InflateSkip(mat_t *mat, z_streamp z, int nbytes);",
          "216: EXTERN size_t InflateSkip2(mat_t *mat, matvar_t *matvar, int nbytes);",
          "217: EXTERN size_t InflateSkipData(mat_t *mat,z_streamp z,enum matio_types data_type,int len);",
          "218: EXTERN size_t InflateVarTag(mat_t *mat, matvar_t *matvar, void *buf);",
          "219: EXTERN size_t InflateArrayFlags(mat_t *mat, matvar_t *matvar, void *buf);",
          "220: EXTERN size_t InflateRankDims(mat_t *mat, matvar_t *matvar, void *buf, size_t nbytes, mat_uint32_t** dims);",
          "221: EXTERN size_t InflateVarName(mat_t *mat,matvar_t *matvar,void *buf,int N);",
          "222: EXTERN size_t InflateDataType(mat_t *mat, z_stream *z, void *buf);",
          "223: EXTERN size_t InflateData(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes);",
          "230: EXTERN int SafeMulDims(const matvar_t *matvar, size_t* nelems);",
          "231: EXTERN int SafeMul(size_t* res, size_t a, size_t b);",
          "232: EXTERN int SafeAdd(size_t* res, size_t a, size_t b);",
          "",
          "[Added Lines]",
          "215: EXTERN int InflateSkip(mat_t *mat, z_streamp z, int nBytes, size_t* bytesread);",
          "216: EXTERN int InflateSkipData(mat_t *mat, z_streamp z, enum matio_types data_type, int len);",
          "217: EXTERN int InflateRankDims(mat_t *mat, z_streamp z, void *buf, size_t nBytes, mat_uint32_t** dims, size_t* bytesread);",
          "218: EXTERN int Inflate(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes, size_t* bytesread);",
          "219: EXTERN int InflateData(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes);",
          "226: EXTERN int Add(size_t* res, size_t a, size_t b);",
          "227: EXTERN int Mul(size_t* res, size_t a, size_t b);",
          "228: EXTERN int MulDims(const matvar_t *matvar, size_t* nelems);",
          "229: EXTERN int Read(void* buf, size_t size, size_t count, FILE* fp, size_t* bytesread);",
          "",
          "---------------"
        ],
        "src/matvar_cell.c||src/matvar_cell.c": [
          "File: src/matvar_cell.c -> src/matvar_cell.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     if ( matvar == NULL )",
          "47:         return NULL;",
          "51:     if ( 0 <= index && (size_t)index < nelems )",
          "52:         cell = *((matvar_t **)matvar->data + index);",
          "",
          "[Removed Lines]",
          "49:     SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "49:     MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     if ( matvar == NULL || matvar->rank < 1 )",
          "173:         return NULL;",
          "176:     cells = (matvar_t**)matvar->data;",
          "177:     if ( 0 <= index && (size_t)index < nelems ) {",
          "178:         old_cell = cells[index];",
          "",
          "[Removed Lines]",
          "175:     SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "175:     MulDims(matvar, &nelems);",
          "",
          "---------------"
        ],
        "src/matvar_struct.c||src/matvar_struct.c": [
          "File: src/matvar_struct.c -> src/matvar_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         }",
          "92:         if ( NULL != matvar && nelems > 0 ) {",
          "93:             size_t nelems_x_nfields;",
          "96:             if ( err ) {",
          "97:                 Mat_VarFree(matvar);",
          "98:                 return NULL;",
          "",
          "[Removed Lines]",
          "94:             int err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "95:             err |= SafeMul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "[Added Lines]",
          "94:             int err = Mul(&nelems_x_nfields, nelems, nfields);",
          "95:             err |= Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     if ( matvar == NULL || fieldname == NULL )",
          "127:         return -1;",
          "130:     if ( err )",
          "131:         return -1;",
          "",
          "[Removed Lines]",
          "129:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "129:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:     {",
          "143:         size_t nelems_x_nfields;",
          "146:         if ( err ) {",
          "147:             matvar->nbytes = 0;",
          "148:             return -1;",
          "",
          "[Removed Lines]",
          "144:         err = SafeMul(&nelems_x_nfields, nelems, nfields);",
          "145:         err |= SafeMul(&matvar->nbytes, nelems_x_nfields, sizeof(*new_data));",
          "",
          "[Added Lines]",
          "144:         err = Mul(&nelems_x_nfields, nelems, nfields);",
          "145:         err |= Mul(&matvar->nbytes, nelems_x_nfields, sizeof(*new_data));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:         matvar->data_size == 0 )",
          "228:         return NULL;",
          "231:     if ( err )",
          "232:         return NULL;",
          "",
          "[Removed Lines]",
          "230:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "230:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:         matvar->data_size == 0 )",
          "268:         return NULL;",
          "271:     if ( err )",
          "272:         return NULL;",
          "",
          "[Removed Lines]",
          "270:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "270:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:     matvar_t *field = NULL;",
          "310:     size_t nelems = 1;",
          "313:     nfields = matvar->internal->num_fields;",
          "314:     if ( index < 0 || (nelems > 0 && (size_t)index >= nelems ))",
          "315:         err = 1;",
          "",
          "[Removed Lines]",
          "312:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "312:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "513:         matvar->data == NULL )",
          "514:         return NULL;",
          "517:     if ( err )",
          "518:         return NULL;",
          "",
          "[Removed Lines]",
          "516:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "516:     err = MulDims(matvar, &nelems);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "555:          matvar->data == NULL )",
          "556:         return NULL;",
          "559:     if ( err )",
          "560:         return NULL;",
          "",
          "[Removed Lines]",
          "558:     err = SafeMulDims(matvar, &nelems);",
          "",
          "[Added Lines]",
          "558:     err = MulDims(matvar, &nelems);",
          "",
          "---------------"
        ],
        "test/test_mat.c||test/test_mat.c": [
          "File: test/test_mat.c -> test/test_mat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3775:     }",
          "3777:     Mat_LogInit(prog_name);",
          "3779:     while ( (c = getopt_long(argc,argv,optstring,options,NULL)) != EOF ) {",
          "3780:         switch ( c ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3778:     Mat_SetDebug(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d656da9c7d90e70db55e649347ec39049e6c6937",
      "candidate_info": {
        "commit_hash": "d656da9c7d90e70db55e649347ec39049e6c6937",
        "repo": "tbeu/matio",
        "commit_url": "https://github.com/tbeu/matio/commit/d656da9c7d90e70db55e649347ec39049e6c6937",
        "files": [
          "src/inflate.c",
          "src/mat5.c",
          "src/matio_private.h"
        ],
        "message": "Remove redundant Inflate... functions",
        "before_after_code_files": [
          "src/inflate.c||src/inflate.c",
          "src/mat5.c||src/mat5.c",
          "src/matio_private.h||src/matio_private.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mat5.c||src/mat5.c"
          ],
          "candidate": [
            "src/mat5.c||src/mat5.c"
          ]
        }
      },
      "candidate_diff": {
        "src/inflate.c||src/inflate.c": [
          "File: src/inflate.c -> src/inflate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:     return bytesread;",
          "443: }",
          "",
          "[Removed Lines]",
          "453: size_t",
          "454: InflateVarNameTag(mat_t *mat, matvar_t *matvar, void *buf)",
          "455: {",
          "456:     mat_uint8_t comp_buf[32];",
          "457:     int    err;",
          "458:     size_t bytesread = 0, readresult = 1;",
          "460:     if ( buf == NULL )",
          "461:         return 0;",
          "463:     if ( !matvar->internal->z->avail_in ) {",
          "464:         matvar->internal->z->avail_in = 1;",
          "465:         matvar->internal->z->next_in = comp_buf;",
          "466:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "467:     }",
          "468:     matvar->internal->z->avail_out = 8;",
          "469:     matvar->internal->z->next_out = (Bytef*)buf;",
          "470:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "471:     if ( err != Z_OK ) {",
          "472:         Mat_Critical(\"InflateVarNameTag: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "473:         return bytesread;",
          "474:     }",
          "475:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "476:         matvar->internal->z->avail_in = 1;",
          "477:         matvar->internal->z->next_in = comp_buf;",
          "478:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "479:         bytesread += readresult;",
          "480:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "481:         if ( err != Z_OK ) {",
          "482:             Mat_Critical(\"InflateVarNameTag: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "483:             return bytesread;",
          "484:         }",
          "485:     }",
          "487:     if ( matvar->internal->z->avail_in ) {",
          "488:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "489:         bytesread -= matvar->internal->z->avail_in;",
          "490:         matvar->internal->z->avail_in = 0;",
          "491:     }",
          "493:     return bytesread;",
          "494: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     return bytesread;",
          "724: }",
          "840: #endif",
          "",
          "[Removed Lines]",
          "735: size_t",
          "736: InflateFieldNameLength(mat_t *mat, matvar_t *matvar, void *buf)",
          "737: {",
          "738:     mat_uint8_t comp_buf[32];",
          "739:     int    err;",
          "740:     size_t bytesread = 0, readresult = 1;",
          "742:     if ( buf == NULL )",
          "743:         return 0;",
          "745:     if ( !matvar->internal->z->avail_in ) {",
          "746:         matvar->internal->z->avail_in = 1;",
          "747:         matvar->internal->z->next_in = comp_buf;",
          "748:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "749:     }",
          "750:     matvar->internal->z->avail_out = 8;",
          "751:     matvar->internal->z->next_out = (Bytef*)buf;",
          "752:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "753:     if ( err != Z_OK ) {",
          "754:         Mat_Critical(\"InflateFieldNameLength: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "755:         return bytesread;",
          "756:     }",
          "757:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "758:         matvar->internal->z->avail_in = 1;",
          "759:         matvar->internal->z->next_in = comp_buf;",
          "760:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "761:         bytesread += readresult;",
          "762:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "763:         if ( err != Z_OK ) {",
          "764:             Mat_Critical(\"InflateFieldNameLength: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "765:             return bytesread;",
          "766:         }",
          "767:     }",
          "769:     if ( matvar->internal->z->avail_in ) {",
          "770:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "771:         bytesread -= matvar->internal->z->avail_in;",
          "772:         matvar->internal->z->avail_in = 0;",
          "773:     }",
          "775:     return bytesread;",
          "776: }",
          "794: size_t",
          "795: InflateFieldNames(mat_t *mat,matvar_t *matvar,void *buf,int nfields,",
          "796:                   int fieldname_length,int padding)",
          "797: {",
          "798:     mat_uint8_t comp_buf[32];",
          "799:     int    err;",
          "800:     size_t bytesread = 0, readresult = 1;",
          "802:     if ( buf == NULL )",
          "803:         return 0;",
          "805:     if ( !matvar->internal->z->avail_in ) {",
          "806:         matvar->internal->z->avail_in = 1;",
          "807:         matvar->internal->z->next_in = comp_buf;",
          "808:         bytesread += fread(comp_buf,1,1,(FILE*)mat->fp);",
          "809:     }",
          "810:     matvar->internal->z->avail_out = nfields*fieldname_length+padding;",
          "811:     matvar->internal->z->next_out = (Bytef*)buf;",
          "812:     err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "813:     if ( err != Z_OK ) {",
          "814:         Mat_Critical(\"InflateFieldNames: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "815:         return bytesread;",
          "816:     }",
          "817:     while ( matvar->internal->z->avail_out && !matvar->internal->z->avail_in && 1 == readresult ) {",
          "818:         matvar->internal->z->avail_in = 1;",
          "819:         matvar->internal->z->next_in = comp_buf;",
          "820:         readresult = fread(comp_buf,1,1,(FILE*)mat->fp);",
          "821:         bytesread += readresult;",
          "822:         err = inflate(matvar->internal->z,Z_NO_FLUSH);",
          "823:         if ( err != Z_OK ) {",
          "824:             Mat_Critical(\"InflateFieldNames: inflate returned %s\",zError(err == Z_NEED_DICT ? Z_DATA_ERROR : err));",
          "825:             return bytesread;",
          "826:         }",
          "827:     }",
          "829:     if ( matvar->internal->z->avail_in ) {",
          "830:         (void)fseek((FILE*)mat->fp,-(int)matvar->internal->z->avail_in,SEEK_CUR);",
          "831:         bytesread -= matvar->internal->z->avail_in;",
          "832:         matvar->internal->z->avail_in = 0;",
          "833:     }",
          "835:     return bytesread;",
          "836: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mat5.c||src/mat5.c": [
          "File: src/mat5.c -> src/mat5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "920:                 }",
          "921:                 if ( do_clean )",
          "922:                     free(dims);",
          "924:                 nbytes -= 8;",
          "925:                 if ( mat->byteswap ) {",
          "926:                     (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "923:                 bytesread += InflateVarNameTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "924:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1127:         mat_uint32_t array_flags, len;",
          "1131:         if ( mat->byteswap ) {",
          "1132:             (void)Mat_uint32Swap(uncomp_buf);",
          "1133:             (void)Mat_uint32Swap(uncomp_buf+1);",
          "",
          "[Removed Lines]",
          "1130:         bytesread += InflateFieldNameLength(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1131:         bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1140:         }",
          "1144:         if ( mat->byteswap )",
          "1145:             (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "1143:         bytesread += InflateVarNameTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1144:         bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1157:             if ( nfields ) {",
          "1158:                 char *ptr = (char*)malloc(nfields*fieldname_size+i);",
          "1159:                 if ( NULL != ptr ) {",
          "1161:                     SetFieldNames(matvar, ptr, nfields, fieldname_size);",
          "1162:                     free(ptr);",
          "1163:                 }",
          "",
          "[Removed Lines]",
          "1160:                     bytesread += InflateFieldNames(mat,matvar,ptr,nfields,fieldname_size,i);",
          "",
          "[Added Lines]",
          "1161:                     bytesread += InflateVarName(mat,matvar,ptr,nfields*fieldname_size+i);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1296:                 }",
          "1297:                 if ( do_clean )",
          "1298:                     free(dims);",
          "1300:                 nbytes -= 8;",
          "1301:                 fields[i]->internal->z = (z_streamp)calloc(1,sizeof(z_stream));",
          "1302:                 if ( fields[i]->internal->z != NULL ) {",
          "",
          "[Removed Lines]",
          "1299:                 bytesread += InflateVarNameTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "1301:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4897:                 }",
          "4898:                 if ( do_clean )",
          "4899:                     free(dims);",
          "4902:                 if ( mat->byteswap )",
          "4903:                     (void)Mat_uint32Swap(uncomp_buf);",
          "",
          "[Removed Lines]",
          "4901:                 bytesread += InflateVarNameTag(mat,matvar,uncomp_buf);",
          "",
          "[Added Lines]",
          "4903:                 bytesread += InflateVarTag(mat,matvar,uncomp_buf);",
          "",
          "---------------"
        ],
        "src/matio_private.h||src/matio_private.h": [
          "File: src/matio_private.h -> src/matio_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: EXTERN size_t InflateVarTag(mat_t *mat, matvar_t *matvar, void *buf);",
          "212: EXTERN size_t InflateArrayFlags(mat_t *mat, matvar_t *matvar, void *buf);",
          "213: EXTERN size_t InflateRankDims(mat_t *mat, matvar_t *matvar, void *buf, size_t nbytes, mat_uint32_t** dims);",
          "215: EXTERN size_t InflateVarName(mat_t *mat,matvar_t *matvar,void *buf,int N);",
          "216: EXTERN size_t InflateDataTag(mat_t *mat, matvar_t *matvar, void *buf);",
          "217: EXTERN size_t InflateDataType(mat_t *mat, z_stream *z, void *buf);",
          "218: EXTERN size_t InflateData(mat_t *mat, z_streamp z, void *buf, unsigned int nBytes);",
          "222: #endif",
          "",
          "[Removed Lines]",
          "214: EXTERN size_t InflateVarNameTag(mat_t *mat, matvar_t *matvar, void *buf);",
          "219: EXTERN size_t InflateFieldNameLength(mat_t *mat,matvar_t *matvar,void *buf);",
          "220: EXTERN size_t InflateFieldNames(mat_t *mat,matvar_t *matvar,void *buf,int nfields,",
          "221:                int fieldname_length,int padding);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e8a24e0308bfde72b321f023d13fb91f8031971",
      "candidate_info": {
        "commit_hash": "4e8a24e0308bfde72b321f023d13fb91f8031971",
        "repo": "tbeu/matio",
        "commit_url": "https://github.com/tbeu/matio/commit/4e8a24e0308bfde72b321f023d13fb91f8031971",
        "files": [
          "src/mat5.c"
        ],
        "message": "Fix clang warning -Wdangling-else",
        "before_after_code_files": [
          "src/mat5.c||src/mat5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mat5.c||src/mat5.c"
          ],
          "candidate": [
            "src/mat5.c||src/mat5.c"
          ]
        }
      },
      "candidate_diff": {
        "src/mat5.c||src/mat5.c": [
          "File: src/mat5.c -> src/mat5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1162:                     name_len = buf[1];",
          "1165:                             name_len = name_len + 8 - (name_len % 8);",
          "1167:                             Mat_VarFree(cells[i]);",
          "1168:                             cells[i] = NULL;",
          "1169:                             break;",
          "1170:                         }",
          "1171:                     nBytes -= name_len;",
          "1172:                     (void)fseek((FILE*)mat->fp,name_len,SEEK_CUR);",
          "1173:                 }",
          "",
          "[Removed Lines]",
          "1163:                     if ( name_len % 8 > 0 )",
          "1164:                         if ( name_len < UINT32_MAX - 8 + (name_len % 8) )",
          "1166:                         else {",
          "",
          "[Added Lines]",
          "1163:                     if ( name_len % 8 > 0 ) {",
          "1164:                         if ( name_len < UINT32_MAX - 8 + (name_len % 8) ) {",
          "1166:                         } else {",
          "1171:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}