{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
      "candidate_info": {
        "commit_hash": "b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6e0286c49b13f4232f4b01a95d299a1e85931fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Add the sqlite3_drop_modules() interface.\n\nFossilOrigin-Name: e2c6fed8f84929ed51a4e876bb09c85ac4b86a2e4cf0832a7da724bb9f4df5bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cb009b0f724f72eaea90e45488122f7c2a7d0caf31a8422da4060469507e921",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     int lenOpt;",
          "9413:     char *zOpt;",
          "9415:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9420:     zOpt = azArg[1];",
          "9421:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9422:     lenOpt = (int)strlen(zOpt);",
          "9423:     if( lenOpt>=3 && strncmp(zOpt, \"-allexcept\",lenOpt)==0 ){",
          "9424:       assert( azArg[nArg]==0 );",
          "9425:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9426:     }else{",
          "9427:       for(ii=1; ii<nArg; ii++){",
          "9428:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9429:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6671: int sqlite3_drop_modules(",
          "6674: );",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_modules(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   int rc;",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "1130:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1131:        \" DB\\\"\", 0);",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1135:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules\",          (Tcl_CmdProc*)test_drop_modules     },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
      "candidate_info": {
        "commit_hash": "3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3517cc7f36ab406fbdfd0517976ae456f7905cd4",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak in the delta_parse() table-valued function of the fossildelta.c extension.\n\nFossilOrigin-Name: c86ca3f0220a5f9e7f7f1818f6e1220d851f3ebed6a5f0aae6ac38309bd2930e",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "850: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "851:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "852:   sqlite3_free(pCur);",
          "853:   return SQLITE_OK;",
          "854: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   sqlite3_free(pCur->aDelta);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 15202aee150fa8e15fb90e90e5765c5e19a1eaf4896da2996a747636b76da8e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
      "candidate_info": {
        "commit_hash": "8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e10d74b214c1ff1bb542266c256f4a9ee3e9b47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/where.c"
        ],
        "message": "Get generated columns working for WITHOUT ROWID tables.\n\nFossilOrigin-Name: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8426acb94179ff49549aced6ea3c26c49ba4761c2f414fa1772d6a031edc79d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: }",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "897: }",
          "899: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "908: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "909:   int i;",
          "",
          "[Removed Lines]",
          "886:   Table *pTab = pIdx->pTable;",
          "892: #endif",
          "893:   for(i=0; i<pIdx->nColumn; i++){",
          "894:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "895:   }",
          "896:   return -1;",
          "",
          "[Added Lines]",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "888:   return -1;",
          "889: }",
          "905: i16 sqlite3ColumnOfStorage(Table *pTab, i16 iCol){",
          "907:     int i;",
          "912:   return iCol;",
          "914: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2051:   nExtra = 0;",
          "2052:   for(i=0; i<pTab->nCol; i++){",
          "2054:   }",
          "2055:   if( resizeIndexObject(db, pPk, nPk+nExtra) ) return;",
          "2056:   for(i=0, j=nPk; i<pTab->nCol; i++){",
          "2058:       assert( j<pPk->nColumn );",
          "2059:       pPk->aiColumn[j] = i;",
          "2060:       pPk->azColl[j] = sqlite3StrBINARY;",
          "",
          "[Removed Lines]",
          "2053:     if( !hasColumn(pPk->aiColumn, nPk, i) ) nExtra++;",
          "2057:     if( !hasColumn(pPk->aiColumn, j, i) ){",
          "",
          "[Added Lines]",
          "2072:     if( !hasColumn(pPk->aiColumn, nPk, i)",
          "2073:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) nExtra++;",
          "2077:     if( !hasColumn(pPk->aiColumn, j, i)",
          "2078:      && (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0",
          "2079:     ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2062:     }",
          "2063:   }",
          "2064:   assert( pPk->nColumn==j );",
          "2066:   recomputeColumnsNotIndexed(pPk);",
          "2067: }",
          "",
          "[Removed Lines]",
          "2065:   assert( pTab->nCol<=j );",
          "",
          "[Added Lines]",
          "2087:   assert( pTab->nNVCol<=j );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2172:     }",
          "2173:     if( (p->tabFlags & TF_HasPrimaryKey)==0 ){",
          "2174:       sqlite3ErrorMsg(pParse, \"PRIMARY KEY missing on table %s\", p->zName);",
          "2178:     }",
          "2179:   }",
          "2183: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "2175:     }else{",
          "2176:       p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2177:       convertToWithoutRowidTable(pParse, p);",
          "2181:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "2197:       return;",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2204:   }",
          "2205: #endif",
          "2208:   estimateTableWidth(p);",
          "2209:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435:   for(i=0; i<nCol; i++){",
          "1436:     if( i==pTab->iPKey ){",
          "1438:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:     int iReg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1454:         || onError==OE_Ignore || onError==OE_Replace );",
          "1455:     addr1 = 0;",
          "1456:     switch( onError ){",
          "1457:       case OE_Replace: {",
          "1458:         assert( onError==OE_Replace );",
          "1459:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1461:           VdbeCoverage(v);",
          "1462:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1464:           VdbeCoverage(v);",
          "1465:         onError = OE_Abort;",
          "",
          "[Removed Lines]",
          "1460:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1463:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "",
          "[Added Lines]",
          "1457:     if( (pTab->tabFlags & TF_HasVirtual)==0 ){",
          "1458:       iReg = regNewData+1+i;",
          "1459:     }else if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1460:       iReg = ++pParse->nMem;",
          "1461:       assert( pParse->iSelfTab==0 );",
          "1462:       pParse->iSelfTab = -regNewData;",
          "1463:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iReg);",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1467:       iReg = sqlite3ColumnOfTable(pTab, i) + regNewData + 1;",
          "1468:     }",
          "1473:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1476:         sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1474:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1475:                                     pTab->aCol[i].zName);",
          "1476:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1478:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1479:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1480:         VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1477:                           regNewData+1+i);",
          "",
          "[Added Lines]",
          "1490:                           iReg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1483:       }",
          "1484:       default: {",
          "1485:         assert( onError==OE_Ignore );",
          "1487:         VdbeCoverage(v);",
          "1488:         break;",
          "1489:       }",
          "",
          "[Removed Lines]",
          "1486:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "",
          "[Added Lines]",
          "1499:         sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3954: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3955: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3956: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3958: #else",
          "3959:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3960: #endif",
          "3961: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3962: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3961:   i16 sqlite3ColumnOfStorage(Table*, i16);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5378:             Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }",
          "5382:           x = sqlite3ColumnOfIndex(pIdx, x);",
          "5383:           if( x>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5381:           }else{",
          "5382:             x = sqlite3ColumnOfStorage(pTab,x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
      "candidate_info": {
        "commit_hash": "6ece353f2d2223ec78e63ce972081a047e89a641",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ece353f2d2223ec78e63ce972081a047e89a641",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/treeview.c",
          "test/istrue.test"
        ],
        "message": "Handle expressions like \"expr IS TRUE COLLATE xyz\" in the same way as \"expr IS TRUE\". Fix for [4d01eda8115b10d1].\n\nFossilOrigin-Name: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/treeview.c||src/treeview.c",
          "test/istrue.test||test/istrue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 614ecb0af47038848e8ba2aed6b92db6f33ddc4aea6361795dbde440380f5a35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1815: int sqlite3ExprTruthValue(const Expr *pExpr){",
          "1816:   assert( pExpr->op==TK_TRUEFALSE );",
          "1817:   assert( sqlite3StrICmp(pExpr->u.zToken,\"true\")==0",
          "1818:        || sqlite3StrICmp(pExpr->u.zToken,\"false\")==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1816:   pExpr = sqlite3ExprSkipCollate((Expr*)pExpr);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:     }",
          "931:     case TK_IS:",
          "932:     case TK_ISNOT: {",
          "934:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "938:         int rc = resolveExprStep(pWalker, pRight);",
          "939:         if( rc==WRC_Abort ) return WRC_Abort;",
          "940:         if( pRight->op==TK_TRUEFALSE ){",
          "",
          "[Removed Lines]",
          "933:       Expr *pRight;",
          "937:       if( (pRight = pExpr->pRight)->op==TK_ID ){",
          "",
          "[Added Lines]",
          "933:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "937:       if( pRight->op==TK_ID ){",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:       };",
          "515:       assert( pExpr->op2==TK_IS || pExpr->op2==TK_ISNOT );",
          "516:       assert( pExpr->pRight );",
          "518:       x = (pExpr->op2==TK_ISNOT)*2 + sqlite3ExprTruthValue(pExpr->pRight);",
          "519:       zUniOp = azOp[x];",
          "520:       break;",
          "",
          "[Removed Lines]",
          "517:       assert( pExpr->pRight->op==TK_TRUEFALSE );",
          "",
          "[Added Lines]",
          "517:       assert( sqlite3ExprSkipCollate(pExpr->pRight)->op==TK_TRUEFALSE );",
          "",
          "---------------"
        ],
        "test/istrue.test||test/istrue.test": [
          "File: test/istrue.test -> test/istrue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   SELECT *,'x' FROM t7 ORDER BY a;",
          "159: } {1 0 1 0 1 x 2 1 0 0 1 x 3 1 0 0 1 x 4 0 1 1 0 x}",
          "161: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: do_execsql_test istrue-710 {",
          "162:   SELECT 0.5 IS TRUE COLLATE NOCASE;",
          "163:   SELECT 0.5 IS TRUE COLLATE RTRIM;",
          "164:   SELECT 0.5 IS TRUE COLLATE BINARY;",
          "166:   SELECT 0.5 IS TRUE;",
          "167:   SELECT 0.5 COLLATE NOCASE IS TRUE;",
          "168:   SELECT 0.0 IS FALSE;",
          "170:   SELECT 0.0 IS FALSE COLLATE NOCASE;",
          "171:   SELECT 0.0 IS FALSE COLLATE RTRIM;",
          "172:   SELECT 0.0 IS FALSE COLLATE BINARY;",
          "173: } {1 1 1   1 1 1  1 1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
      "candidate_info": {
        "commit_hash": "523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/523fb53f72ad41bddfe02f1f5d667dfdd164240f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Various fixes for the wapptest.tcl script.\n\nFossilOrigin-Name: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4af0c2fee05aaa2e95ae6a5c847ff2d363e24f325f4ffdcf51bc264b9bf5e2d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # \\",
          "3: exec wapptclsh \"$0\" ${1+\"$@\"}",
          "5: #",
          "9: # Variables set by the \"control\" form:",
          "10: #",
          "",
          "[Removed Lines]",
          "6: #",
          "7: #",
          "",
          "[Added Lines]",
          "5: # package required wapp",
          "6: source [file join [file dirname [info script]] wapp.tcl]",
          "8: # Read the data from the releasetest_data.tcl script.",
          "10: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: set G(tcl)      \"\"",
          "23: set G(jobs)     3",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "49: # directory. Return true if there are, or false otherwise.",
          "",
          "[Removed Lines]",
          "25: set G(sqlite_version) unknown",
          "27: # The root of the SQLite source tree.",
          "28: #",
          "29: set G(srcdir)   [file dirname [file dirname [info script]]]",
          "31: # Either \"config\", \"running\", \"stopped\":",
          "32: #",
          "33: set G(state) \"config\"",
          "35: # releasetest.tcl script",
          "36: #",
          "37: set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "39: set G(cnt) 0",
          "41: # package required wapp",
          "42: source [file join [file dirname [info script]] wapp.tcl]",
          "44: # Read the data from the releasetest_data.tcl script.",
          "45: #",
          "46: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "[Added Lines]",
          "28: proc wapptest_init {} {",
          "29:   global G",
          "31:   set lSave [list platform test keep msvc tcl jobs]",
          "32:   foreach k $lSave { set A($k) $G($k) }",
          "33:   array unset G",
          "34:   foreach k $lSave { set G($k) $A($k) }",
          "36:   # The root of the SQLite source tree.",
          "37:   set G(srcdir)   [file dirname [file dirname [info script]]]",
          "39:   # releasetest.tcl script",
          "40:   set G(releaseTest) [file join [file dirname [info script]] releasetest.tcl]",
          "42:   set G(sqlite_version) \"unknown\"",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:   }",
          "163: }",
          "165: proc slave_fileevent {name} {",
          "166:   global G",
          "167:   set fd $G(test.$name.channel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: proc slave_test_done {name rc} {",
          "166:   global G",
          "167:   set G(test.$name.done) [clock seconds]",
          "168:   set G(test.$name.nError) 0",
          "169:   set G(test.$name.nTest) 0",
          "170:   set G(test.$name.errmsg) \"\"",
          "171:   if {$rc} {",
          "172:     incr G(test.$name.nError)",
          "173:   }",
          "174:   if {[file exists $G(test.$name.log)]} {",
          "175:     count_tests_and_errors $name $G(test.$name.log)",
          "176:   }",
          "177: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     fconfigure $fd -blocking 1",
          "171:     set rc [catch { close $fd }]",
          "172:     unset G(test.$name.channel)",
          "183:   } else {",
          "184:     set line [gets $fd]",
          "185:     if {[string trim $line] != \"\"} { puts \"Trace   : $name - \\\"$line\\\"\" }",
          "",
          "[Removed Lines]",
          "173:     set G(test.$name.done) [clock seconds]",
          "174:     set G(test.$name.nError) 0",
          "175:     set G(test.$name.nTest) 0",
          "176:     set G(test.$name.errmsg) \"\"",
          "177:     if {$rc} {",
          "178:       incr G(test.$name.nError)",
          "179:     }",
          "180:     if {[file exists $G(test.$name.log)]} {",
          "181:       count_tests_and_errors $name $G(test.$name.log)",
          "182:     }",
          "",
          "[Added Lines]",
          "187:     slave_test_done $name $rc",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:     catch {",
          "216:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "217:     }",
          "218:   } else {",
          "219:     set nLaunch [expr $G(jobs) - $nRunning]",
          "220:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     set G(state) \"stopped\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:   }",
          "242: }",
          "244: proc generate_main_page {{extra {}}} {",
          "245:   global G",
          "246:   set_test_array",
          "248:   wapp-trim {",
          "249:     <html>",
          "250:     <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: proc generate_select_widget {label id lOpt opt} {",
          "251:   wapp-trim {",
          "252:     <label> %string($label) </label>",
          "253:     <select id=%string($id) name=%string($id)>",
          "254:   }",
          "255:   foreach o $lOpt {",
          "256:     set selected \"\"",
          "257:     if {$o==$opt} { set selected \" selected=1\" }",
          "258:     wapp-subst \"<option $selected>$o</option>\"",
          "259:   }",
          "260:   wapp-trim { </select> }",
          "261: }",
          "267:   # <meta http-equiv=\"refresh\" content=\"5; URL=/\">",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266:   wapp-trim {",
          "267:       <div class=div id=controls>",
          "271:   }",
          "276:   }",
          "277:   wapp-trim {",
          "286:   }",
          "289:         <label> Tcl: </label>",
          "290:         <input id=\"control_tcl\" name=\"control_tcl\"></input>",
          "292:         <label> Keep files: </label>",
          "293:         <input id=\"control_keep\" name=\"control_keep\" type=checkbox value=1>",
          "294:         </input>",
          "295:         <label> Use MSVC: </label>",
          "296:         <input id=\"control_msvc\" name=\"control_msvc\" type=checkbox value=1>",
          "297:         </input>",
          "313:   }",
          "314:   wapp-trim {",
          "319:      </form>",
          "323:   }",
          "324:   foreach t $G(test_array) {",
          "325:     set config [dict get $t config]",
          "326:     set target [dict get $t target]",
          "",
          "[Removed Lines]",
          "268:         <form action=\"control\" method=\"post\" name=\"control\">",
          "269:         <label> Platform: </label>",
          "270:         <select id=\"control_platform\" name=\"control_platform\">",
          "272:   foreach platform [array names ::Platforms] {",
          "273:     set selected \"\"",
          "274:     if {$platform==$G(platform)} { set selected \" selected=1\" }",
          "275:     wapp-subst \"<option $selected>$platform</option>\"",
          "278:         </select>",
          "279:         <label> Test: </label>",
          "280:         <select id=\"control_test\" name=\"control_test\">",
          "281:   }",
          "282:   foreach test [list Normal Veryquick Smoketest Build-Only] {",
          "283:     set selected \"\"",
          "284:     if {$test==$G(test)} { set selected \" selected=1\" }",
          "285:     wapp-subst \"<option $selected>$test</option>\"",
          "287:   wapp-trim [subst -nocommands {",
          "288:         </select>",
          "298:         <hr>",
          "299:         <div class=right>",
          "300:           <label> Jobs: </label>",
          "301:           <select id=\"control_jobs\" name=\"control_jobs\">",
          "302:   }]",
          "303:   for {set i 1} {$i <= 8} {incr i} {",
          "304:     if {$G(jobs)==$i} {",
          "305:       wapp-trim {",
          "306:         <option selected=1>%string($i)</option>",
          "307:       }",
          "308:     } else {",
          "309:       wapp-trim {",
          "310:         <option>%string($i)</option>",
          "311:       }",
          "312:     }",
          "315:           </select>",
          "316:           <input id=control_go name=control_go type=submit value=\"Run Tests!\">",
          "317:           </input>",
          "318:         </div>",
          "320:       </div>",
          "321:       <div class=div id=tests>",
          "322:       <table>",
          "",
          "[Added Lines]",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "291:   # Build the \"platform\" select widget.",
          "292:   set lOpt [array names ::Platforms]",
          "293:   generate_select_widget Platform control_platform $lOpt $G(platform)",
          "295:   # Build the \"test\" select widget.",
          "296:   set lOpt [list Normal Veryquick Smoketest Build-Only]",
          "297:   generate_select_widget Test control_test $lOpt $G(test)",
          "299:   # Build the \"jobs\" select widget. Options are 1 to 8.",
          "300:   generate_select_widget Jobs control_jobs {1 2 3 4 5 6 7 8} $G(jobs)",
          "302:   switch $G(state) {",
          "303:     config {",
          "304:       set txt \"Run Tests!\"",
          "305:       set id control_run",
          "306:     }",
          "307:     running {",
          "308:       set txt \"STOP Tests!\"",
          "309:       set id control_stop",
          "310:     }",
          "311:     stopped {",
          "312:       set txt \"Reset!\"",
          "313:       set id control_reset",
          "314:     }",
          "317:     <div class=right>",
          "318:     <input id=%string($id) name=%string($id) type=submit value=\"%string($txt)\">",
          "319:     </input>",
          "320:     </div>",
          "323:   wapp-trim {",
          "324:   <br><br>",
          "337:   wapp-trim {",
          "338:      </div>",
          "339:      <div class=div2 id=tests>",
          "340:   }",
          "341:   wapp-page-tests",
          "343:   set script \"script/$G(state).js\"",
          "344:   wapp-trim {",
          "345:     </div>",
          "346:       <script src=%string($script)></script>",
          "347:     </body>",
          "348:     </html>",
          "349:   }",
          "350: }",
          "352: proc wapp-default {} {",
          "353:   generate_main_page",
          "354: }",
          "356: proc wapp-page-tests {} {",
          "357:   global G",
          "358:   wapp-trim { <table> }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:     }",
          "372:   }",
          "378:   if {[info exists G(result)]} {",
          "379:     set res $G(result)",
          "380:     wapp-trim {",
          "382:     }",
          "383:   }",
          "394: }",
          "396: proc wapp-page-control {} {",
          "397:   global G",
          "399:     if {[wapp-param-exists control_$v]} {",
          "400:       set G($v) [wapp-param control_$v]",
          "403:     }",
          "404:   }",
          "409:     set_test_array",
          "410:     set ::G(state) \"running\"",
          "411:   }",
          "413:   if {$::G(state) == \"running\"} {",
          "414:     do_some_stuff",
          "415:   }",
          "417:   wapp-redirect /",
          "418: }",
          "420: proc wapp-page-style.css {} {",
          "421:   wapp-subst {",
          "422:     .div {",
          "",
          "[Removed Lines]",
          "374:   wapp-trim {",
          "375:       </table>",
          "376:       </div>",
          "377:   }",
          "381:       <div class=div id=log> %string($res) </div>",
          "384:   wapp-trim {",
          "385:     <script src=\"script.js\"></script>",
          "386:     </body>",
          "387:     </html>",
          "388:   }",
          "389:   incr G(cnt)",
          "390: }",
          "392: proc wapp-default {} {",
          "393:   generate_main_page",
          "398:   foreach v {platform test tcl jobs keep msvc} {",
          "401:     } else {",
          "402:       set G($v) 0",
          "406:   if {[wapp-param-exists control_go]} {",
          "407:     # This is an actual \"run test\" command, not just a change of",
          "408:     # configuration!",
          "",
          "[Added Lines]",
          "409:   wapp-trim { </table> }",
          "414:       <div class=border id=result> %string($res) </div>",
          "419: # URI: /control",
          "420: #",
          "421: # Whenever the form at the top of the application page is submitted, it",
          "422: # is submitted here.",
          "423: #",
          "426:   catch { puts [wapp-param control_msvc] }",
          "427:   if {$::G(state)==\"config\"} {",
          "428:     set lControls [list platform test tcl jobs keep msvc]",
          "429:     set G(msvc) 0",
          "430:     set G(keep) 0",
          "431:   } else {",
          "432:     set lControls [list jobs]",
          "433:   }",
          "434:   foreach v $lControls {",
          "440:   if {[wapp-param-exists control_run]} {",
          "441:     # This is a \"run test\" command.",
          "446:   if {[wapp-param-exists control_stop]} {",
          "447:     # A \"STOP tests\" command.",
          "448:     set G(state) \"stopped\"",
          "449:     set G(result) \"Test halted by user\"",
          "450:     foreach j $G(test_array) {",
          "451:       set name [dict get $j config]",
          "452:       if { [info exists G(test.$name.channel)] } {",
          "453:         close $G(test.$name.channel)",
          "454:         unset G(test.$name.channel)",
          "455:         slave_test_done $name 1",
          "456:       }",
          "457:     }",
          "458:   }",
          "460:   if {[wapp-param-exists control_reset]} {",
          "461:     # A \"reset app\" command.",
          "462:     set G(state) \"config\"",
          "463:     wapptest_init",
          "464:   }",
          "472: # URI: /style.css",
          "473: #",
          "474: # Return the stylesheet for the application main page.",
          "475: #",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "425:       padding: 1em;",
          "426:     }",
          "428:     .warning {",
          "429:       text-align:center;",
          "430:       color: red;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     .border {",
          "485:       border: 3px groove #444444;",
          "486:       padding: 1em;",
          "487:       margin-top: 1em;",
          "488:       margin-bottom: 1em;",
          "489:     }",
          "491:     .div2 {",
          "492:       margin: 1em;",
          "493:     }",
          "495:     table {",
          "496:       padding: 1em;",
          "497:       width:100%;",
          "498:       border: 3px groove #444444;",
          "499:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "432:       font-weight: bold;",
          "433:     }",
          "438:     .testfield {",
          "439:       padding-right: 10ex;",
          "440:     }",
          "442:     .testwait {}",
          "443:     .testrunning { color: blue }",
          "444:     .testdone { color: green }",
          "445:     .testfail { color: red }",
          "446:   }",
          "447: }",
          "451:   set tcl $::G(tcl)",
          "452:   set keep $::G(keep)",
          "453:   set msvc $::G(msvc)",
          "455:   wapp-subst {",
          "457:     lElem.forEach(function(e) {",
          "458:       var elem = document.getElementById(e);",
          "459:       elem.addEventListener(\"change\", function() { control.submit() } );",
          "",
          "[Removed Lines]",
          "435:     .right {",
          "436:     }",
          "449: proc wapp-page-script.js {} {",
          "456:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\", \"control_jobs\"\\];",
          "",
          "[Added Lines]",
          "510:       white-space: nowrap;",
          "518:     .right { float: right; }",
          "523: # URI: /script/${state}.js",
          "524: #",
          "525: # The last part of this URI is always \"config.js\", \"running.js\" or",
          "526: # \"stopped.js\", depending on the state of the application. It returns",
          "527: # the javascript part of the front-end for the requested state to the",
          "528: # browser.",
          "529: #",
          "530: proc wapp-page-script {} {",
          "531:   regexp {[^/]*$} [wapp-param REQUEST_URI] script",
          "538:     var lElem = \\[\"control_platform\", \"control_test\", \"control_msvc\",",
          "539:         \"control_jobs\"",
          "540:     \\];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "469:     elem.checked = %string($msvc);",
          "470:   }",
          "473:     wapp-subst {",
          "474:       var lElem = \\[\"control_platform\", \"control_test\",",
          "476:       \\];",
          "477:       lElem.forEach(function(e) {",
          "478:         var elem = document.getElementById(e);",
          "",
          "[Removed Lines]",
          "472:   if {$::G(state)!=\"config\"} {",
          "475:           \"control_tcl\", \"control_keep\", \"control_msvc\", \"control_go\"",
          "",
          "[Added Lines]",
          "556:   if {$script != \"config.js\"} {",
          "559:           \"control_tcl\", \"control_keep\", \"control_msvc\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "480:       })",
          "481:     }",
          "482:   }",
          "483: }",
          "485: proc wapp-page-env {} {",
          "486:   wapp-allow-xorigin-params",
          "487:   wapp-trim {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:   if {$script == \"running.js\"} {",
          "569:     wapp-subst {",
          "570:       function reload_tests() {",
          "571:         fetch('tests')",
          "572:           .then( data => data.text() )",
          "573:           .then( data => {",
          "574:             document.getElementById(\"tests\").innerHTML = data;",
          "575:           })",
          "576:           .then( data => {",
          "577:             if( document.getElementById(\"result\") ){",
          "578:               document.location = document.location;",
          "579:             } else {",
          "580:               setTimeout(reload_tests, 1000)",
          "581:             }",
          "582:           });",
          "583:       }",
          "585:       setTimeout(reload_tests, 1000)",
          "586:     }",
          "587:   }",
          "590: # URI: /env",
          "591: #",
          "592: # This is for debugging only. Serves no other purpose.",
          "593: #",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "490:   }",
          "491: }",
          "493: proc wapp-page-log {} {",
          "494:   set log [string range [wapp-param REQUEST_URI] 5 end]",
          "495:   set fd [open $log]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602: # URI: /log/dirname/test.log",
          "603: #",
          "604: # This URI reads file \"dirname/test.log\" from disk, wraps it in a <pre>",
          "605: # block, and returns it to the browser. Use for viewing log files.",
          "606: #",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "502:   }",
          "503: }",
          "505: wapp-start $argv",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: wapptest_init",
          "",
          "---------------"
        ]
      }
    }
  ]
}