{
  "cve_id": "CVE-2017-9345",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.6 and 2.0.0 to 2.0.12, the DNS dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-dns.c by trying to detect self-referencing pointers.",
  "repo": "wireshark/wireshark",
  "patch_hash": "129bdb5a164a6386c35ff387e9d8f0d3d6a12dbf",
  "patch_info": {
    "commit_hash": "129bdb5a164a6386c35ff387e9d8f0d3d6a12dbf",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/129bdb5a164a6386c35ff387e9d8f0d3d6a12dbf",
    "files": [
      "epan/dissectors/packet-dns.c"
    ],
    "message": "dns: improve loop detection in label decompression\n\nPreviously the number of allowed pointers within a message is equal to\nthe data in a tvb (16575 in one example). This is still expensive, so\nimplement an alternative detection mechanism that looks for a direct\nself-loop and limits the total pointers to about 256.\n\nBug: 13633\nChange-Id: I803873e24ab170c7ef0b881d3bdc9dfd4014de97\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1206\nReviewed-on: https://code.wireshark.org/review/21507\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
    "before_after_code_files": [
      "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
      "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1134:   int     start_offset    = offset;",
      "1135:   guchar *np;",
      "1136:   int     len             = -1;",
      "1139:   int     component_len;",
      "1140:   int     indir_offset;",
      "1141:   int     maxname;",
      "",
      "[Removed Lines]",
      "1137:   int     chars_processed = 0;",
      "1138:   int     data_size       = tvb_reported_length_remaining(tvb, dns_data_offset);",
      "",
      "[Added Lines]",
      "1137:   int     pointers_count  = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1160:     if (component_len == 0) {",
      "1161:       break;",
      "1162:     }",
      "1164:     switch (component_len & 0xc0) {",
      "1166:       case 0x00:",
      "",
      "[Removed Lines]",
      "1163:     chars_processed++;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1184:           }",
      "1185:           component_len--;",
      "1186:           offset++;",
      "1188:         }",
      "1189:         break;",
      "",
      "[Removed Lines]",
      "1187:           chars_processed++;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1265:         indir_offset = dns_data_offset +",
      "1266:           (((component_len & ~0xc0) << 8) | tvb_get_guint8(tvb, offset));",
      "1267:         offset++;",
      "1271:            not something pointed to by a pointer, and so we should set \"len\"",
      "",
      "[Removed Lines]",
      "1268:         chars_processed++;",
      "",
      "[Added Lines]",
      "1265:         pointers_count++;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1273:         if (len < 0) {",
      "1274:           len = offset - start_offset;",
      "1275:         }",
      "1282:           if (len < min_len) {",
      "",
      "[Removed Lines]",
      "1277:            will make us look at some character again, which means we're",
      "1279:         if (chars_processed >= data_size) {",
      "",
      "[Added Lines]",
      "1277:         if (indir_offset == offset + 2 || pointers_count > MAXDNAME/4) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e280c9b637327a65d132bfe72d917b87e6844eb5",
      "candidate_info": {
        "commit_hash": "e280c9b637327a65d132bfe72d917b87e6844eb5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e280c9b637327a65d132bfe72d917b87e6844eb5",
        "files": [
          "epan/dissectors/packet-dns.c"
        ],
        "message": "dns: improve loop detection in label decompression\n\nPreviously the number of allowed pointers within a message is equal to\nthe data in a tvb (16575 in one example). This is still expensive, so\nimplement an alternative detection mechanism that looks for a direct\nself-loop and limits the total pointers to about 256.\n\nBug: 13633\nChange-Id: I803873e24ab170c7ef0b881d3bdc9dfd4014de97\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1206\nReviewed-on: https://code.wireshark.org/review/21507\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 129bdb5a164a6386c35ff387e9d8f0d3d6a12dbf)\nReviewed-on: https://code.wireshark.org/review/21597",
        "before_after_code_files": [
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:   int     start_offset    = offset;",
          "1130:   guchar *np;",
          "1131:   int     len             = -1;",
          "1134:   int     component_len;",
          "1135:   int     indir_offset;",
          "1136:   int     maxname;",
          "",
          "[Removed Lines]",
          "1132:   int     chars_processed = 0;",
          "1133:   int     data_size       = tvb_reported_length_remaining(tvb, dns_data_offset);",
          "",
          "[Added Lines]",
          "1132:   int     pointers_count  = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1154:     if (component_len == 0) {",
          "1155:       break;",
          "1156:     }",
          "1158:     switch (component_len & 0xc0) {",
          "1160:       case 0x00:",
          "",
          "[Removed Lines]",
          "1157:     chars_processed++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1176:           }",
          "1177:           component_len--;",
          "1178:           offset++;",
          "1180:         }",
          "1181:         break;",
          "",
          "[Removed Lines]",
          "1179:           chars_processed++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1256:         indir_offset = dns_data_offset +",
          "1257:           (((component_len & ~0xc0) << 8) | tvb_get_guint8(tvb, offset));",
          "1258:         offset++;",
          "1262:            not something pointed to by a pointer, and so we should set \"len\"",
          "",
          "[Removed Lines]",
          "1259:         chars_processed++;",
          "",
          "[Added Lines]",
          "1256:         pointers_count++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1264:         if (len < 0) {",
          "1265:           len = offset - start_offset;",
          "1266:         }",
          "1272:           if (len < min_len) {",
          "1273:             THROW(ReportedBoundsError);",
          "",
          "[Removed Lines]",
          "1268:            will make us look at some character again, which means we're",
          "1270:         if (chars_processed >= data_size) {",
          "",
          "[Added Lines]",
          "1268:         if (indir_offset == offset + 2 || pointers_count > MAXDNAME/4) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6408d6a8e842148f677a9f9413776ebaa150bb0",
      "candidate_info": {
        "commit_hash": "f6408d6a8e842148f677a9f9413776ebaa150bb0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f6408d6a8e842148f677a9f9413776ebaa150bb0",
        "files": [
          "epan/dissectors/packet-dns.c"
        ],
        "message": "dns: improve loop detection in label decompression\n\nPreviously the number of allowed pointers within a message is equal to\nthe data in a tvb (16575 in one example). This is still expensive, so\nimplement an alternative detection mechanism that looks for a direct\nself-loop and limits the total pointers to about 256.\n\nBug: 13633\nChange-Id: I803873e24ab170c7ef0b881d3bdc9dfd4014de97\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1206\nReviewed-on: https://code.wireshark.org/review/21507\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 129bdb5a164a6386c35ff387e9d8f0d3d6a12dbf)\nReviewed-on: https://code.wireshark.org/review/21596",
        "before_after_code_files": [
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1137:   int     start_offset    = offset;",
          "1138:   guchar *np;",
          "1139:   int     len             = -1;",
          "1142:   int     component_len;",
          "1143:   int     indir_offset;",
          "1144:   int     maxname;",
          "",
          "[Removed Lines]",
          "1140:   int     chars_processed = 0;",
          "1141:   int     data_size       = tvb_reported_length_remaining(tvb, dns_data_offset);",
          "",
          "[Added Lines]",
          "1140:   int     pointers_count  = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1162:     if (component_len == 0) {",
          "1163:       break;",
          "1164:     }",
          "1166:     switch (component_len & 0xc0) {",
          "1168:       case 0x00:",
          "",
          "[Removed Lines]",
          "1165:     chars_processed++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1184:           }",
          "1185:           component_len--;",
          "1186:           offset++;",
          "1188:         }",
          "1189:         break;",
          "",
          "[Removed Lines]",
          "1187:           chars_processed++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1264:         indir_offset = dns_data_offset +",
          "1265:           (((component_len & ~0xc0) << 8) | tvb_get_guint8(tvb, offset));",
          "1266:         offset++;",
          "1270:            not something pointed to by a pointer, and so we should set \"len\"",
          "",
          "[Removed Lines]",
          "1267:         chars_processed++;",
          "",
          "[Added Lines]",
          "1264:         pointers_count++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1272:         if (len < 0) {",
          "1273:           len = offset - start_offset;",
          "1274:         }",
          "1280:           if (len < min_len) {",
          "1281:             THROW(ReportedBoundsError);",
          "",
          "[Removed Lines]",
          "1276:            will make us look at some character again, which means we're",
          "1278:         if (chars_processed >= data_size) {",
          "",
          "[Added Lines]",
          "1276:         if (indir_offset == offset + 2 || pointers_count > MAXDNAME/4) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "132cd6dbace220a62e3083e67d859a77cc832163",
      "candidate_info": {
        "commit_hash": "132cd6dbace220a62e3083e67d859a77cc832163",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/132cd6dbace220a62e3083e67d859a77cc832163",
        "files": [
          "epan/dissectors/packet-dns.c"
        ],
        "message": "DNS: update name_len variable when replacing name string\n\nBug: 13334\nChange-Id: I07248747f678d4f89bbde33280b4d596462a4429\nReviewed-on: https://code.wireshark.org/review/19688\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c"
        ]
      }
    }
  ]
}