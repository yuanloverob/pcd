{
  "cve_id": "CVE-2013-1773",
  "cve_desc": "Buffer overflow in the VFAT filesystem implementation in the Linux kernel before 3.3 allows local users to gain privileges or cause a denial of service (system crash) via a VFAT write operation on a filesystem with the utf8 mount option, which is not properly handled during UTF-8 to UTF-16 conversion.",
  "repo": "torvalds/linux",
  "patch_hash": "0720a06a7518c9d0c0125bd5d1f3b6264c55c3dd",
  "patch_info": {
    "commit_hash": "0720a06a7518c9d0c0125bd5d1f3b6264c55c3dd",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/0720a06a7518c9d0c0125bd5d1f3b6264c55c3dd",
    "files": [
      "drivers/hv/hv_kvp.c",
      "fs/fat/namei_vfat.c",
      "fs/nls/nls_base.c",
      "include/linux/nls.h"
    ],
    "message": "NLS: improve UTF8 -> UTF16 string conversion routine\n\nThe utf8s_to_utf16s conversion routine needs to be improved.  Unlike\nits utf16s_to_utf8s sibling, it doesn't accept arguments specifying\nthe maximum length of the output buffer or the endianness of its\n16-bit output.\n\nThis patch (as1501) adds the two missing arguments, and adjusts the\nonly two places in the kernel where the function is called.  A\nfollow-on patch will add a third caller that does utilize the new\ncapabilities.\n\nThe two conversion routines are still annoyingly inconsistent in the\nway they handle invalid byte combinations.  But that's a subject for a\ndifferent patch.\n\nSigned-off-by: Alan Stern <stern@rowland.harvard.edu>\nCC: Clemens Ladisch <clemens@ladisch.de>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>",
    "before_after_code_files": [
      "drivers/hv/hv_kvp.c||drivers/hv/hv_kvp.c",
      "fs/fat/namei_vfat.c||fs/fat/namei_vfat.c",
      "fs/nls/nls_base.c||fs/nls/nls_base.c",
      "include/linux/nls.h||include/linux/nls.h"
    ]
  },
  "patch_diff": {
    "drivers/hv/hv_kvp.c||drivers/hv/hv_kvp.c": [
      "File: drivers/hv/hv_kvp.c -> drivers/hv/hv_kvp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "215:  keylen = utf8s_to_utf16s(key_name, strlen(key_name),",
      "216:     (wchar_t *)kvp_data->data.key);",
      "218:  valuelen = utf8s_to_utf16s(value, strlen(value),",
      "219:     (wchar_t *)kvp_data->data.value);",
      "",
      "[Added Lines]",
      "215:  keylen = utf8s_to_utf16s(key_name, strlen(key_name), UTF16_HOST_ENDIAN,",
      "216:     (wchar_t *) kvp_data->data.key,",
      "217:     HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2);",
      "219:  valuelen = utf8s_to_utf16s(value, strlen(value), UTF16_HOST_ENDIAN,",
      "220:     (wchar_t *) kvp_data->data.value,",
      "221:     HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2);",
      "",
      "---------------"
    ],
    "fs/fat/namei_vfat.c||fs/fat/namei_vfat.c": [
      "File: fs/fat/namei_vfat.c -> fs/fat/namei_vfat.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "512:  int charlen;",
      "514:  if (utf8) {",
      "516:   if (*outlen < 0)",
      "517:    return *outlen;",
      "518:   else if (*outlen > FAT_LFN_LEN)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "516:     (wchar_t *) outname, FAT_LFN_LEN + 2);",
      "",
      "---------------"
    ],
    "fs/nls/nls_base.c||fs/nls/nls_base.c": [
      "File: fs/nls/nls_base.c -> fs/nls/nls_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "114: }",
      "115: EXPORT_SYMBOL(utf32_to_utf8);",
      "118: {",
      "119:  u16 *op;",
      "120:  int size;",
      "121:  unicode_t u;",
      "123:  op = pwcs;",
      "125:   if (*s & 0x80) {",
      "126:    size = utf8_to_utf32(s, len, &u);",
      "127:    if (size < 0)",
      "128:     return -EINVAL;",
      "130:    if (u >= PLANE_SIZE) {",
      "131:     u -= PLANE_SIZE;",
      "135:       SURROGATE_LOW |",
      "137:    } else {",
      "139:    }",
      "142:   } else {",
      "144:    len--;",
      "145:   }",
      "146:  }",
      "147:  return op - pwcs;",
      "",
      "[Removed Lines]",
      "117: int utf8s_to_utf16s(const u8 *s, int len, wchar_t *pwcs)",
      "124:  while (*s && len > 0) {",
      "133:       ((u >> 10) & SURROGATE_BITS));",
      "136:       (u & SURROGATE_BITS));",
      "140:    s += size;",
      "141:    len -= size;",
      "",
      "[Added Lines]",
      "117: static inline void put_utf16(wchar_t *s, unsigned c, enum utf16_endian endian)",
      "118: {",
      "119:  switch (endian) {",
      "120:  default:",
      "122:   break;",
      "123:  case UTF16_LITTLE_ENDIAN:",
      "125:   break;",
      "126:  case UTF16_BIG_ENDIAN:",
      "128:   break;",
      "129:  }",
      "130: }",
      "132: int utf8s_to_utf16s(const u8 *s, int len, enum utf16_endian endian,",
      "133:   wchar_t *pwcs, int maxlen)",
      "140:  while (len > 0 && maxlen > 0 && *s) {",
      "145:    s += size;",
      "146:    len -= size;",
      "149:     if (maxlen < 2)",
      "150:      break;",
      "152:     put_utf16(op++, SURROGATE_PAIR |",
      "153:       ((u >> 10) & SURROGATE_BITS),",
      "154:       endian);",
      "155:     put_utf16(op++, SURROGATE_PAIR |",
      "157:       (u & SURROGATE_BITS),",
      "158:       endian);",
      "159:     maxlen -= 2;",
      "161:     put_utf16(op++, u, endian);",
      "162:     maxlen--;",
      "165:    put_utf16(op++, *s++, endian);",
      "167:    maxlen--;",
      "",
      "---------------"
    ],
    "include/linux/nls.h||include/linux/nls.h": [
      "File: include/linux/nls.h -> include/linux/nls.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: extern int utf8_to_utf32(const u8 *s, int len, unicode_t *pu);",
      "54: extern int utf32_to_utf8(unicode_t u, u8 *s, int maxlen);",
      "56: extern int utf16s_to_utf8s(const wchar_t *pwcs, int len,",
      "57:   enum utf16_endian endian, u8 *s, int maxlen);",
      "",
      "[Removed Lines]",
      "55: extern int utf8s_to_utf16s(const u8 *s, int len, wchar_t *pwcs);",
      "",
      "[Added Lines]",
      "55: extern int utf8s_to_utf16s(const u8 *s, int len,",
      "56:   enum utf16_endian endian, wchar_t *pwcs, int maxlen);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "045ddc8991698a8e9c5668c6190faa8b5d516dc0",
      "candidate_info": {
        "commit_hash": "045ddc8991698a8e9c5668c6190faa8b5d516dc0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/045ddc8991698a8e9c5668c6190faa8b5d516dc0",
        "files": [
          "fs/nls/nls_base.c"
        ],
        "message": "NLS: raname \"maxlen\" to \"maxout\" in UTF conversion routines\n\nAs requested by NamJae Jeon, this patch (as1503) changes the name of\nthe \"maxlen\" parameters to \"maxout\" in the various UTF conversion\nroutines.  This should make the role of that parameter more clear.\n\nThe patch also renames the \"len\" parameters to \"inlen\", for the same\nreason.\n\nSigned-off-by: Alan Stern <stern@rowland.harvard.edu>\nReviewed-by: NamJae Jeon <linkinjeon@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>",
        "before_after_code_files": [
          "fs/nls/nls_base.c||fs/nls/nls_base.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nls/nls_base.c||fs/nls/nls_base.c"
          ],
          "candidate": [
            "fs/nls/nls_base.c||fs/nls/nls_base.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nls/nls_base.c||fs/nls/nls_base.c": [
          "File: fs/nls/nls_base.c -> fs/nls/nls_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #define SURROGATE_LOW 0x00000400",
          "53: #define SURROGATE_BITS 0x000003ff",
          "56: {",
          "57:  unsigned long l;",
          "58:  int c0, c, nc;",
          "",
          "[Removed Lines]",
          "55: int utf8_to_utf32(const u8 *s, int len, unicode_t *pu)",
          "",
          "[Added Lines]",
          "55: int utf8_to_utf32(const u8 *s, int inlen, unicode_t *pu)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:    return nc;",
          "73:   }",
          "75:    return -1;",
          "76:   s++;",
          "77:   c = (*s ^ 0x80) & 0xFF;",
          "",
          "[Removed Lines]",
          "74:   if (len <= nc)",
          "",
          "[Added Lines]",
          "74:   if (inlen <= nc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: }",
          "84: EXPORT_SYMBOL(utf8_to_utf32);",
          "87: {",
          "88:  unsigned long l;",
          "89:  int c, nc;",
          "",
          "[Removed Lines]",
          "86: int utf32_to_utf8(unicode_t u, u8 *s, int maxlen)",
          "",
          "[Added Lines]",
          "86: int utf32_to_utf8(unicode_t u, u8 *s, int maxout)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:   return -1;",
          "99:  nc = 0;",
          "101:   nc++;",
          "102:   if (l <= t->lmask) {",
          "103:    c = t->shift;",
          "",
          "[Removed Lines]",
          "100:  for (t = utf8_table; t->cmask && maxlen; t++, maxlen--) {",
          "",
          "[Added Lines]",
          "100:  for (t = utf8_table; t->cmask && maxout; t++, maxout--) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:  }",
          "130: }",
          "134: {",
          "135:  u16 *op;",
          "136:  int size;",
          "137:  unicode_t u;",
          "139:  op = pwcs;",
          "141:   if (*s & 0x80) {",
          "143:    if (size < 0)",
          "144:     return -EINVAL;",
          "145:    s += size;",
          "148:    if (u >= PLANE_SIZE) {",
          "150:      break;",
          "151:     u -= PLANE_SIZE;",
          "152:     put_utf16(op++, SURROGATE_PAIR |",
          "",
          "[Removed Lines]",
          "132: int utf8s_to_utf16s(const u8 *s, int len, enum utf16_endian endian,",
          "133:   wchar_t *pwcs, int maxlen)",
          "140:  while (len > 0 && maxlen > 0 && *s) {",
          "142:    size = utf8_to_utf32(s, len, &u);",
          "146:    len -= size;",
          "149:     if (maxlen < 2)",
          "",
          "[Added Lines]",
          "132: int utf8s_to_utf16s(const u8 *s, int inlen, enum utf16_endian endian,",
          "133:   wchar_t *pwcs, int maxout)",
          "140:  while (inlen > 0 && maxout > 0 && *s) {",
          "142:    size = utf8_to_utf32(s, inlen, &u);",
          "146:    inlen -= size;",
          "149:     if (maxout < 2)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:       SURROGATE_LOW |",
          "157:       (u & SURROGATE_BITS),",
          "158:       endian);",
          "160:    } else {",
          "161:     put_utf16(op++, u, endian);",
          "163:    }",
          "164:   } else {",
          "165:    put_utf16(op++, *s++, endian);",
          "168:   }",
          "169:  }",
          "170:  return op - pwcs;",
          "",
          "[Removed Lines]",
          "159:     maxlen -= 2;",
          "162:     maxlen--;",
          "166:    len--;",
          "167:    maxlen--;",
          "",
          "[Added Lines]",
          "159:     maxout -= 2;",
          "162:     maxout--;",
          "166:    inlen--;",
          "167:    maxout--;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "183:  }",
          "184: }",
          "188: {",
          "189:  u8 *op;",
          "190:  int size;",
          "191:  unsigned long u, v;",
          "193:  op = s;",
          "195:   u = get_utf16(*pwcs, endian);",
          "196:   if (!u)",
          "197:    break;",
          "198:   pwcs++;",
          "200:   if (u > 0x7f) {",
          "201:    if ((u & SURROGATE_MASK) == SURROGATE_PAIR) {",
          "202:     if (u & SURROGATE_LOW) {",
          "204:      continue;",
          "205:     }",
          "207:      break;",
          "208:     v = get_utf16(*pwcs, endian);",
          "209:     if ((v & SURROGATE_MASK) != SURROGATE_PAIR ||",
          "",
          "[Removed Lines]",
          "186: int utf16s_to_utf8s(const wchar_t *pwcs, int len, enum utf16_endian endian,",
          "187:   u8 *s, int maxlen)",
          "194:  while (len > 0 && maxlen > 0) {",
          "199:   len--;",
          "206:     if (len <= 0)",
          "",
          "[Added Lines]",
          "186: int utf16s_to_utf8s(const wchar_t *pwcs, int inlen, enum utf16_endian endian,",
          "187:   u8 *s, int maxout)",
          "194:  while (inlen > 0 && maxout > 0) {",
          "199:   inlen--;",
          "206:     if (inlen <= 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:     u = PLANE_SIZE + ((u & SURROGATE_BITS) << 10)",
          "215:       + (v & SURROGATE_BITS);",
          "216:     pwcs++;",
          "218:    }",
          "220:    if (size == -1) {",
          "222:    } else {",
          "223:     op += size;",
          "225:    }",
          "226:   } else {",
          "229:   }",
          "230:  }",
          "231:  return op - s;",
          "",
          "[Removed Lines]",
          "217:     len--;",
          "219:    size = utf32_to_utf8(u, op, maxlen);",
          "224:     maxlen -= size;",
          "228:    maxlen--;",
          "",
          "[Added Lines]",
          "217:     inlen--;",
          "219:    size = utf32_to_utf8(u, op, maxout);",
          "224:     maxout -= size;",
          "228:    maxout--;",
          "",
          "---------------"
        ]
      }
    }
  ]
}