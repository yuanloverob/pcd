{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
      "candidate_info": {
        "commit_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the \"-returntype\" option to the \"db function\" Tcl method.\n\nFossilOrigin-Name: 789a492b68c353e2b763d67d399722b7ab61bfe09b472466df2821f65cab1be9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     u8 *data;",
          "996:     const char *zType = (pVar->typePtr ? pVar->typePtr->name : \"\");",
          "997:     char c = zType[0];",
          "1018:     }",
          "1019:   }",
          "1020: }",
          "",
          "[Removed Lines]",
          "998:     if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1001:       data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1002:       sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1003:     }else if( c=='b' && strcmp(zType,\"boolean\")==0 ){",
          "1004:       Tcl_GetIntFromObj(0, pVar, &n);",
          "1005:       sqlite3_result_int(context, n);",
          "1006:     }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1007:       double r;",
          "1008:       Tcl_GetDoubleFromObj(0, pVar, &r);",
          "1009:       sqlite3_result_double(context, r);",
          "1010:     }else if( (c=='w' && strcmp(zType,\"wideInt\")==0) ||",
          "1011:           (c=='i' && strcmp(zType,\"int\")==0) ){",
          "1012:       Tcl_WideInt v;",
          "1013:       Tcl_GetWideIntFromObj(0, pVar, &v);",
          "1014:       sqlite3_result_int64(context, v);",
          "1015:     }else{",
          "1016:       data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1017:       sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "1007:     int eType = p->eType;",
          "1009:     if( eType==SQLITE_NULL ){",
          "1010:       if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1013:         eType = SQLITE_BLOB;",
          "1014:       }else if( (c=='b' && strcmp(zType,\"boolean\")==0)",
          "1015:              || (c=='w' && strcmp(zType,\"wideInt\")==0)",
          "1016:              || (c=='i' && strcmp(zType,\"int\")==0)",
          "1017:       ){",
          "1018:         eType = SQLITE_INTEGER;",
          "1019:       }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1020:         eType = SQLITE_FLOAT;",
          "1021:       }else{",
          "1022:         eType = SQLITE_TEXT;",
          "1023:       }",
          "1024:     }",
          "1026:     switch( eType ){",
          "1027:       case SQLITE_BLOB: {",
          "1028:         data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1029:         sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1030:         break;",
          "1031:       }",
          "1032:       case SQLITE_INTEGER: {",
          "1033:         Tcl_WideInt v;",
          "1034:         if( TCL_OK==Tcl_GetWideIntFromObj(0, pVar, &v) ){",
          "1035:           sqlite3_result_int64(context, v);",
          "1036:           break;",
          "1037:         }",
          "1039:       }",
          "1040:       case SQLITE_FLOAT: {",
          "1041:         double r;",
          "1042:         if( TCL_OK==Tcl_GetDoubleFromObj(0, pVar, &r) ){",
          "1043:           sqlite3_result_double(context, r);",
          "1044:           break;",
          "1045:         }",
          "1047:       }",
          "1048:       default: {",
          "1049:         data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1050:         sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "1051:         break;",
          "1052:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2646:     char *zName;",
          "2647:     int nArg = -1;",
          "2648:     int i;",
          "2649:     if( objc<4 ){",
          "2650:       Tcl_WrongNumArgs(interp, 2, objv, \"NAME ?SWITCHES? SCRIPT\");",
          "2651:       return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2685:     int eType = SQLITE_NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2653:     for(i=3; i<(objc-1); i++){",
          "2654:       const char *z = Tcl_GetString(objv[i]);",
          "2655:       int n = strlen30(z);",
          "2657:         if( i==(objc-2) ){",
          "2658:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2659:           return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "2656:       if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "[Added Lines]",
          "2693:       if( n>1 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2666:         }",
          "2667:         i++;",
          "2668:       }else",
          "2670:         flags |= SQLITE_DETERMINISTIC;",
          "2671:       }else{",
          "2672:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2674:         );",
          "2675:         return TCL_ERROR;",
          "2676:       }",
          "",
          "[Removed Lines]",
          "2669:       if( n>2 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2673:             \"\\\": must be -argcount or -deterministic\", (char*)0",
          "",
          "[Added Lines]",
          "2706:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2708:       }else",
          "2709:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2710:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2711:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "2712:         assert( SQLITE_BLOB==4 && SQLITE_NULL==5 );",
          "2713:         if( i==(objc-2) ){",
          "2714:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2715:           return TCL_ERROR;",
          "2716:         }",
          "2717:         i++;",
          "2718:         if( Tcl_GetIndexFromObj(interp, objv[i], azType, \"type\", 0, &eType) ){",
          "2719:           return TCL_ERROR;",
          "2720:         }",
          "2721:         eType++;",
          "2724:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2686:     pFunc->pScript = pScript;",
          "2687:     Tcl_IncrRefCount(pScript);",
          "2688:     pFunc->useEvalObjv = safeToUseEvalObjv(interp, pScript);",
          "2689:     rc = sqlite3_create_function(pDb->db, zName, nArg, flags,",
          "2690:         pFunc, tclSqlFunc, 0, 0);",
          "2691:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     pFunc->eType = eType;",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: set testdir [file dirname $argv0]",
          "23: source $testdir/tester.tcl",
          "25: # Check the error messages generated by tclsqlite",
          "26: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: set testprefix tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:   set res",
          "712: } {1 {a b *} 2 {a *} 3 {a b *}}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: #-------------------------------------------------------------------------",
          "716: # Test the -type option to [db function].",
          "717: #",
          "718: reset_db",
          "719: proc add {a b} { return [expr $a + $b] }",
          "720: proc ret {a} { return $a }",
          "722: db function add_i -returntype integer add",
          "723: db function add_r -ret        real    add",
          "724: db function add_t -return     text    add",
          "725: db function add_b -returntype blob    add",
          "726: db function add_a -returntype any     add",
          "728: db function ret_i -returntype int     ret",
          "729: db function ret_r -returntype real    ret",
          "730: db function ret_t -returntype text    ret",
          "731: db function ret_b -returntype blob    ret",
          "732: db function ret_a -r          any     ret",
          "734: do_execsql_test 17.0 {",
          "735:   SELECT quote( add_i(2, 3) );",
          "736:   SELECT quote( add_r(2, 3) );",
          "737:   SELECT quote( add_t(2, 3) );",
          "738:   SELECT quote( add_b(2, 3) );",
          "739:   SELECT quote( add_a(2, 3) );",
          "740: } {5 5.0 '5' X'35' 5}",
          "742: do_execsql_test 17.1 {",
          "743:   SELECT quote( add_i(2.2, 3.3) );",
          "744:   SELECT quote( add_r(2.2, 3.3) );",
          "745:   SELECT quote( add_t(2.2, 3.3) );",
          "746:   SELECT quote( add_b(2.2, 3.3) );",
          "747:   SELECT quote( add_a(2.2, 3.3) );",
          "748: } {5.5 5.5 '5.5' X'352E35' 5.5}",
          "750: do_execsql_test 17.2 {",
          "751:   SELECT quote( ret_i(2.5) );",
          "752:   SELECT quote( ret_r(2.5) );",
          "753:   SELECT quote( ret_t(2.5) );",
          "754:   SELECT quote( ret_b(2.5) );",
          "755:   SELECT quote( ret_a(2.5) );",
          "756: } {2.5 2.5 '2.5' X'322E35' 2.5}",
          "758: do_execsql_test 17.3 {",
          "759:   SELECT quote( ret_i('2.5') );",
          "760:   SELECT quote( ret_r('2.5') );",
          "761:   SELECT quote( ret_t('2.5') );",
          "762:   SELECT quote( ret_b('2.5') );",
          "763:   SELECT quote( ret_a('2.5') );",
          "764: } {2.5 2.5 '2.5' X'322E35' '2.5'}",
          "766: do_execsql_test 17.4 {",
          "767:   SELECT quote( ret_i('abc') );",
          "768:   SELECT quote( ret_r('abc') );",
          "769:   SELECT quote( ret_t('abc') );",
          "770:   SELECT quote( ret_b('abc') );",
          "771:   SELECT quote( ret_a('abc') );",
          "772: } {'abc' 'abc' 'abc' X'616263' 'abc'}",
          "774: do_execsql_test 17.5 {",
          "775:   SELECT quote( ret_i(X'616263') );",
          "776:   SELECT quote( ret_r(X'616263') );",
          "777:   SELECT quote( ret_t(X'616263') );",
          "778:   SELECT quote( ret_b(X'616263') );",
          "779:   SELECT quote( ret_a(X'616263') );",
          "780: } {'abc' 'abc' 'abc' X'616263' X'616263'}",
          "782: do_test 17.6.1 {",
          "783:   list [catch { db function xyz -return object ret } msg] $msg",
          "784: } {1 {bad type \"object\": must be integer, real, text, blob, or any}}",
          "786: do_test 17.6.2 {",
          "787:   list [catch { db function xyz -return ret } msg] $msg",
          "788: } {1 {option requires an argument: -return}}",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcee090746b0f2f87dd78f015fc548ebb08c8adf",
      "candidate_info": {
        "commit_hash": "fcee090746b0f2f87dd78f015fc548ebb08c8adf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcee090746b0f2f87dd78f015fc548ebb08c8adf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/pragma4.test"
        ],
        "message": "Improvements to two cases in pragma4.test.\n\nFossilOrigin-Name: 3c893d9bcc34c391505b08cc35808dd3abddf3c5d952798334c296547bcae6a6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4331b4990cbc1221d94fadd376dfc6efe83f67836aef00912126da4c924bf659",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   execsql { DROP TABLE t1 } db3",
          "123:   execsql { DROP TABLE t2 } db2",
          "124: } {}",
          "128: db2 close",
          "129: db3 close",
          "",
          "[Removed Lines]",
          "125: do_execsql_test 4.1.5 { PRAGMA table_info = t1 }",
          "126: do_execsql_test 4.1.6 { PRAGMA table_info = t2 }",
          "",
          "[Added Lines]",
          "125: do_execsql_test 4.1.5 { PRAGMA table_info(t1) }",
          "126: do_execsql_test 4.1.6 { PRAGMA table_info(t2) }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
      "candidate_info": {
        "commit_hash": "fbb9a5b1e377224f8f409bec03d3947188417623",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbb9a5b1e377224f8f409bec03d3947188417623",
        "files": [
          "ext/fts5/fts5_main.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: a8927d14f88c44828e794787bab080455ab62705c93f65ce7d8db83478aa5a8e",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:         pRank = apVal[i];",
          "1210:         break;",
          "1211:       case 'm': {",
          "1213:         if( zText==0 ) zText = \"\";",
          "1215:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "",
          "[Removed Lines]",
          "1212:         char *zText = sqlite3_value_text(apVal[i]);",
          "",
          "[Added Lines]",
          "1211:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1279:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1281:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1282:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1283:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1280:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1279:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d418a7a491761eeb38a70898677a493e2631e5d62e75ee88431f52d3dfd2344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
      "candidate_info": {
        "commit_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8083ef029f8a298462aa461bebc6a1c1190504f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" command of the showdb utility, try to identify orphaned pages and show when pages have been zeroed out.\n\nFossilOrigin-Name: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5df2bf62fcd4dfdaa195062dddbd5ce5420bc239b2649ac8f547e0db34e7f0bb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:   }",
          "836: }",
          "842: static void page_usage_btree(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: static int allZero(unsigned char *a, int n){",
          "842:   while( n && (a++)[0]==0 ){ n--; }",
          "843:   return n==0;",
          "844: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "855:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "856:   switch( a[hdr] ){",
          "857:     case 2:  zType = \"interior node of index\";  break;",
          "858:     case 5:  zType = \"interior node of table\";  break;",
          "859:     case 10: zType = \"leaf of index\";           break;",
          "860:     case 13: zType = \"leaf of table\";           break;",
          "861:   }",
          "863:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "864:                    zType, zName, idx, parent);",
          "866:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "867:   }",
          "868:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "869:   if( a[hdr]==2 || a[hdr]==5 ){",
          "",
          "[Removed Lines]",
          "862:   if( parent ){",
          "865:   }else{",
          "",
          "[Added Lines]",
          "868:     case 0: {",
          "869:       if( allZero(a, g.pagesize) ){",
          "870:         zType = \"zeroed page\";",
          "871:       }else if( parent<0 ){",
          "872:         return;",
          "873:       }else{",
          "874:         zType = \"corrupt node\";",
          "875:       }",
          "876:       break;",
          "877:     }",
          "882:     default: {",
          "883:       if( parent<0 ) return;",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "990:   for(i=1; i<=g.mxPage; i++){",
          "991:     printf(\"%5d: %s\\n\", i, zPageUse[i] ? zPageUse[i] : \"???\");",
          "992:     sqlite3_free(zPageUse[i]);",
          "993:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1018:     if( zPageUse[i]==0 ) page_usage_btree(i, -1, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e2d4ad30cba7d4580134f7d6822f7d7dcde5ffd",
      "candidate_info": {
        "commit_hash": "8e2d4ad30cba7d4580134f7d6822f7d7dcde5ffd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e2d4ad30cba7d4580134f7d6822f7d7dcde5ffd",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_fkey.test"
        ],
        "message": "Fix a problem in test script e_fkey.test.\n\nFossilOrigin-Name: acfd0a05a8957728c1f0eb936f4121ce26f291f20dd583bd57ce2bb271617d3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_fkey.test||test/e_fkey.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d92d25fae5d9757866a0d0b30427b50d635e9b05e12df9464f095419fd7ef3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_fkey.test||test/e_fkey.test": [
          "File: test/e_fkey.test -> test/e_fkey.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2797: do_test e_fkey-61.2.2 {",
          "2798:   execsql {",
          "2799:     PRAGMA foreign_keys = OFF;",
          "2800:     ALTER TABLE p RENAME TO parent;",
          "2801:     SELECT sql FROM sqlite_master WHERE name = 'c';",
          "2802:   }",
          "2803: } {{CREATE TABLE c(b REFERENCES p(a))}}",
          "2804: do_test e_fkey-61.2.3 {",
          "2805:   execsql { PRAGMA foreign_keys = ON }",
          "2806: } {}",
          "2808: do_test e_fkey-61.3.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2800:     PRAGMA legacy_alter_table = ON;",
          "2807:   execsql { PRAGMA legacy_alter_table = OFF }",
          "",
          "---------------"
        ]
      }
    }
  ]
}