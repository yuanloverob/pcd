{
  "cve_id": "CVE-2017-13686",
  "cve_desc": "net/ipv4/route.c in the Linux kernel 4.13-rc1 through 4.13-rc6 is too late to check for a NULL fi field when RTM_F_FIB_MATCH is set, which allows local users to cause a denial of service (NULL pointer dereference) or possibly have unspecified other impact via crafted system calls. NOTE: this does not affect any stable release.",
  "repo": "torvalds/linux",
  "patch_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
  "patch_info": {
    "commit_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "files": [
      "net/ipv4/route.c"
    ],
    "message": "net: check and errout if res->fi is NULL when RTM_F_FIB_MATCH is set\n\nSyzkaller hit 'general protection fault in fib_dump_info' bug on\ncommit 4.13-rc5..\n\nGuilty file: net/ipv4/fib_semantics.c\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 2808 Comm: syz-executor0 Not tainted 4.13.0-rc5 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\nUbuntu-1.8.2-1ubuntu1 04/01/2014\ntask: ffff880078562700 task.stack: ffff880078110000\nRIP: 0010:fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314\nRSP: 0018:ffff880078117010 EFLAGS: 00010206\nRAX: dffffc0000000000 RBX: 00000000000000fe RCX: 0000000000000002\nRDX: 0000000000000006 RSI: ffff880078117084 RDI: 0000000000000030\nRBP: ffff880078117268 R08: 000000000000000c R09: ffff8800780d80c8\nR10: 0000000058d629b4 R11: 0000000067fce681 R12: 0000000000000000\nR13: ffff8800784bd540 R14: ffff8800780d80b5 R15: ffff8800780d80a4\nFS:  00000000022fa940(0000) GS:ffff88007fc00000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004387d0 CR3: 0000000079135000 CR4: 00000000000006f0\nCall Trace:\n  inet_rtm_getroute+0xc89/0x1f50 net/ipv4/route.c:2766\n  rtnetlink_rcv_msg+0x288/0x680 net/core/rtnetlink.c:4217\n  netlink_rcv_skb+0x340/0x470 net/netlink/af_netlink.c:2397\n  rtnetlink_rcv+0x28/0x30 net/core/rtnetlink.c:4223\n  netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]\n  netlink_unicast+0x4c4/0x6e0 net/netlink/af_netlink.c:1291\n  netlink_sendmsg+0x8c4/0xca0 net/netlink/af_netlink.c:1854\n  sock_sendmsg_nosec net/socket.c:633 [inline]\n  sock_sendmsg+0xca/0x110 net/socket.c:643\n  ___sys_sendmsg+0x779/0x8d0 net/socket.c:2035\n  __sys_sendmsg+0xd1/0x170 net/socket.c:2069\n  SYSC_sendmsg net/socket.c:2080 [inline]\n  SyS_sendmsg+0x2d/0x50 net/socket.c:2076\n  entry_SYSCALL_64_fastpath+0x1a/0xa5\n  RIP: 0033:0x4512e9\n  RSP: 002b:00007ffc75584cc8 EFLAGS: 00000216 ORIG_RAX:\n  000000000000002e\n  RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00000000004512e9\n  RDX: 0000000000000000 RSI: 0000000020f2cfc8 RDI: 0000000000000003\n  RBP: 000000000000000e R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000 R11: 0000000000000216 R12: fffffffffffffffe\n  R13: 0000000000718000 R14: 0000000020c44ff0 R15: 0000000000000000\n  Code: 00 0f b6 8d ec fd ff ff 48 8b 85 f0 fd ff ff 88 48 17 48 8b 45\n  28 48 8d 78 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03\n  <0f>\n  b6 04 02 84 c0 74 08 3c 03 0f 8e cb 0c 00 00 48 8b 45 28 44\n  RIP: fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314 RSP:\n  ffff880078117010\n---[ end trace 254a7af28348f88b ]---\n\nThis patch adds a res->fi NULL check.\n\nexample run:\n$ip route get 0.0.0.0 iif virt1-0\nbroadcast 0.0.0.0 dev lo\n    cache <local,brd> iif virt1-0\n\n$ip route get 0.0.0.0 iif virt1-0 fibmatch\nRTNETLINK answers: No route to host\n\nReported-by: idaifish <idaifish@gmail.com>\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nFixes: b61798130f1b (\"net: ipv4: RTM_GETROUTE: return matched fib result when requested\")\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/route.c||net/ipv4/route.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/route.c||net/ipv4/route.c": [
      "File: net/ipv4/route.c -> net/ipv4/route.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2763:  if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)",
      "2764:   table_id = rt->rt_table_id;",
      "2767:   err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,",
      "2768:         nlh->nlmsg_seq, RTM_NEWROUTE, table_id,",
      "2769:         rt->rt_type, res.prefix, res.prefixlen,",
      "2770:         fl4.flowi4_tos, res.fi, 0);",
      "2772:   err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
      "2773:        NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
      "2774:  if (err < 0)",
      "2775:   goto errout_free;",
      "",
      "[Removed Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH)",
      "2771:  else",
      "",
      "[Added Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH) {",
      "2767:   if (!res.fi) {",
      "2768:    err = fib_props[res.type].error;",
      "2769:    if (!err)",
      "2770:     err = -EHOSTUNREACH;",
      "2771:    goto errout_free;",
      "2772:   }",
      "2777:  } else {",
      "2780:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7277cc67b3916eed47558c64f9c9c0de00a35cda",
      "candidate_info": {
        "commit_hash": "7277cc67b3916eed47558c64f9c9c0de00a35cda",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7277cc67b3916eed47558c64f9c9c0de00a35cda",
        "files": [
          "drivers/block/skd_main.c"
        ],
        "message": "skd: Avoid that module unloading triggers a use-after-free\n\nSince put_disk() triggers a disk_release() call and since that\nlast function calls blk_put_queue() if disk->queue != NULL, clear\nthe disk->queue pointer before calling put_disk(). This avoids\nthat unloading the skd kernel module triggers the following\nuse-after-free:\n\nWARNING: CPU: 8 PID: 297 at lib/refcount.c:128 refcount_sub_and_test+0x70/0x80\nrefcount_t: underflow; use-after-free.\nCPU: 8 PID: 297 Comm: kworker/8:1 Not tainted 4.11.10-300.fc26.x86_64 #1\nWorkqueue: events work_for_cpu_fn\nCall Trace:\n dump_stack+0x63/0x84\n __warn+0xcb/0xf0\n warn_slowpath_fmt+0x5a/0x80\n refcount_sub_and_test+0x70/0x80\n refcount_dec_and_test+0x11/0x20\n kobject_put+0x1f/0x50\n blk_put_queue+0x15/0x20\n disk_release+0xae/0xf0\n device_release+0x32/0x90\n kobject_release+0x67/0x170\n kobject_put+0x2b/0x50\n put_disk+0x17/0x20\n skd_destruct+0x5c/0x890 [skd]\n skd_pci_probe+0x124d/0x13a0 [skd]\n local_pci_probe+0x42/0xa0\n work_for_cpu_fn+0x14/0x20\n process_one_work+0x19e/0x470\n worker_thread+0x1dc/0x4a0\n kthread+0x125/0x140\n ret_from_fork+0x25/0x30\n\nSigned-off-by: Bart Van Assche <bart.vanassche@wdc.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: Hannes Reinecke <hare@suse.de>\nCc: Johannes Thumshirn <jthumshirn@suse.de>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "drivers/block/skd_main.c||drivers/block/skd_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/block/skd_main.c||drivers/block/skd_main.c": [
          "File: drivers/block/skd_main.c -> drivers/block/skd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4539: {",
          "4540:  struct gendisk *disk = skdev->disk;",
          "4550:  }",
          "4551:  skdev->disk = NULL;",
          "4552: }",
          "",
          "[Removed Lines]",
          "4542:  if (disk != NULL) {",
          "4543:   struct request_queue *q = disk->queue;",
          "4545:   if (disk->flags & GENHD_FL_UP)",
          "4546:    del_gendisk(disk);",
          "4547:   if (q)",
          "4548:    blk_cleanup_queue(q);",
          "4549:   put_disk(disk);",
          "",
          "[Added Lines]",
          "4542:  if (disk && (disk->flags & GENHD_FL_UP))",
          "4543:   del_gendisk(disk);",
          "4545:  if (skdev->queue) {",
          "4546:   blk_cleanup_queue(skdev->queue);",
          "4547:   skdev->queue = NULL;",
          "4548:   disk->queue = NULL;",
          "4551:  put_disk(disk);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "348a4002729ccab8b888b38cbc099efa2f2a2036",
      "candidate_info": {
        "commit_hash": "348a4002729ccab8b888b38cbc099efa2f2a2036",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/348a4002729ccab8b888b38cbc099efa2f2a2036",
        "files": [
          "net/ipv6/ip6_fib.c"
        ],
        "message": "ipv6: repair fib6 tree in failure case\n\nIn fib6_add(), it is possible that fib6_add_1() picks an intermediate\nnode and sets the node's fn->leaf to NULL in order to add this new\nroute. However, if fib6_add_rt2node() fails to add the new\nroute for some reason, fn->leaf will be left as NULL and could\npotentially cause crash when fn->leaf is accessed in fib6_locate().\nThis patch makes sure fib6_repair_tree() is called to properly repair\nfn->leaf in the above failure case.\n\nHere is the syzkaller reported general protection fault in fib6_locate:\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 40937 Comm: syz-executor3 Not tainted\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\ntask: ffff8801d7d64100 ti: ffff8801d01a0000 task.ti: ffff8801d01a0000\nRIP: 0010:[<ffffffff82a3e0e1>]  [<ffffffff82a3e0e1>] __ipv6_prefix_equal64_half include/net/ipv6.h:475 [inline]\nRIP: 0010:[<ffffffff82a3e0e1>]  [<ffffffff82a3e0e1>] ipv6_prefix_equal include/net/ipv6.h:492 [inline]\nRIP: 0010:[<ffffffff82a3e0e1>]  [<ffffffff82a3e0e1>] fib6_locate_1 net/ipv6/ip6_fib.c:1210 [inline]\nRIP: 0010:[<ffffffff82a3e0e1>]  [<ffffffff82a3e0e1>] fib6_locate+0x281/0x3c0 net/ipv6/ip6_fib.c:1233\nRSP: 0018:ffff8801d01a36a8  EFLAGS: 00010202\nRAX: 0000000000000020 RBX: ffff8801bc790e00 RCX: ffffc90002983000\nRDX: 0000000000001219 RSI: ffff8801d01a37a0 RDI: 0000000000000100\nRBP: ffff8801d01a36f0 R08: 00000000000000ff R09: 0000000000000000\nR10: 0000000000000003 R11: 0000000000000000 R12: 0000000000000001\nR13: dffffc0000000000 R14: ffff8801d01a37a0 R15: 0000000000000000\nFS:  00007f6afd68c700(0000) GS:ffff8801db400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004c6340 CR3: 00000000ba41f000 CR4: 00000000001426f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nStack:\n ffff8801d01a37a8 ffff8801d01a3780 ffffed003a0346f5 0000000c82a23ea0\n ffff8800b7bd7700 ffff8801d01a3780 ffff8800b6a1c940 ffffffff82a23ea0\n ffff8801d01a3920 ffff8801d01a3748 ffffffff82a223d6 ffff8801d7d64988\nCall Trace:\n [<ffffffff82a223d6>] ip6_route_del+0x106/0x570 net/ipv6/route.c:2109\n [<ffffffff82a23f9d>] inet6_rtm_delroute+0xfd/0x100 net/ipv6/route.c:3075\n [<ffffffff82621359>] rtnetlink_rcv_msg+0x549/0x7a0 net/core/rtnetlink.c:3450\n [<ffffffff8274c1d1>] netlink_rcv_skb+0x141/0x370 net/netlink/af_netlink.c:2281\n [<ffffffff82613ddf>] rtnetlink_rcv+0x2f/0x40 net/core/rtnetlink.c:3456\n [<ffffffff8274ad38>] netlink_unicast_kernel net/netlink/af_netlink.c:1206 [inline]\n [<ffffffff8274ad38>] netlink_unicast+0x518/0x750 net/netlink/af_netlink.c:1232\n [<ffffffff8274b83e>] netlink_sendmsg+0x8ce/0xc30 net/netlink/af_netlink.c:1778\n [<ffffffff82564aff>] sock_sendmsg_nosec net/socket.c:609 [inline]\n [<ffffffff82564aff>] sock_sendmsg+0xcf/0x110 net/socket.c:619\n [<ffffffff82564d62>] sock_write_iter+0x222/0x3a0 net/socket.c:834\n [<ffffffff8178523d>] new_sync_write+0x1dd/0x2b0 fs/read_write.c:478\n [<ffffffff817853f4>] __vfs_write+0xe4/0x110 fs/read_write.c:491\n [<ffffffff81786c38>] vfs_write+0x178/0x4b0 fs/read_write.c:538\n [<ffffffff817892a9>] SYSC_write fs/read_write.c:585 [inline]\n [<ffffffff817892a9>] SyS_write+0xd9/0x1b0 fs/read_write.c:577\n [<ffffffff82c71e32>] entry_SYSCALL_64_fastpath+0x12/0x17\n\nNote: there is no \"Fixes\" tag as this seems to be a bug introduced\nvery early.\n\nSigned-off-by: Wei Wang <weiwan@google.com>\nAcked-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/ip6_fib.c||net/ipv6/ip6_fib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv6/ip6_fib.c||net/ipv6/ip6_fib.c": [
          "File: net/ipv6/ip6_fib.c -> net/ipv6/ip6_fib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019:    sfn = node_alloc();",
          "1020:    if (!sfn)",
          "1023:    sfn->leaf = info->nl_net->ipv6.ip6_null_entry;",
          "1024:    atomic_inc(&info->nl_net->ipv6.ip6_null_entry->rt6i_ref);",
          "",
          "[Removed Lines]",
          "1021:     goto st_failure;",
          "",
          "[Added Lines]",
          "1021:     goto failure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1036:    if (IS_ERR(sn)) {",
          "1039:        in main tree.",
          "1041:     node_free(sfn);",
          "1042:     err = PTR_ERR(sn);",
          "1044:    }",
          "",
          "[Removed Lines]",
          "1038:        root, and then (in st_failure) stale node",
          "1043:     goto st_failure;",
          "",
          "[Added Lines]",
          "1038:        root, and then (in failure) stale node",
          "1043:     goto failure;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1056:    if (IS_ERR(sn)) {",
          "1057:     err = PTR_ERR(sn);",
          "1059:    }",
          "1060:   }",
          "",
          "[Removed Lines]",
          "1058:     goto st_failure;",
          "",
          "[Added Lines]",
          "1058:     goto failure;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1096:    atomic_inc(&pn->leaf->rt6i_ref);",
          "1097:   }",
          "1098: #endif",
          "1103:  }",
          "1104:  return err;",
          "1111:  if (fn && !(fn->fn_flags & (RTN_RTINFO|RTN_ROOT)))",
          "1112:   fib6_repair_tree(info->nl_net, fn);",
          "",
          "[Removed Lines]",
          "1102:   dst_release_immediate(&rt->dst);",
          "1106: #ifdef CONFIG_IPV6_SUBTREES",
          "1108:     is orphan. If it is, shoot it.",
          "1110: st_failure:",
          "",
          "[Added Lines]",
          "1099:   goto failure;",
          "1103: failure:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1116:  dst_release_immediate(&rt->dst);",
          "1117:  return err;",
          "1119: }",
          "",
          "[Removed Lines]",
          "1118: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c8d803f397a65adfffd3aa01f52555389f33239",
      "candidate_info": {
        "commit_hash": "0c8d803f397a65adfffd3aa01f52555389f33239",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0c8d803f397a65adfffd3aa01f52555389f33239",
        "files": [
          "net/ipv4/route.c"
        ],
        "message": "net: ipv4: Simplify rt_fill_info\n\nrt_fill_info has only 1 caller and both of the last 2 args -- nowait\nand flags -- are hardcoded to 0. Given that remove them as input arguments\nand simplify rt_fill_info accordingly.\n\nSigned-off-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/route.c||net/ipv4/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ],
          "candidate": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2455: static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,",
          "2456:    struct flowi4 *fl4, struct sk_buff *skb, u32 portid,",
          "2458: {",
          "2459:  struct rtable *rt = skb_rtable(skb);",
          "2460:  struct rtmsg *r;",
          "",
          "[Removed Lines]",
          "2457:    u32 seq, int event, int nowait, unsigned int flags)",
          "",
          "[Added Lines]",
          "2457:    u32 seq, int event)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2463:  u32 error;",
          "2464:  u32 metrics[RTAX_MAX];",
          "2467:  if (!nlh)",
          "2468:   return -EMSGSIZE;",
          "",
          "[Removed Lines]",
          "2466:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(*r), flags);",
          "",
          "[Added Lines]",
          "2466:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(*r), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2541:       IPV4_DEVCONF_ALL(net, MC_FORWARDING)) {",
          "2542:    int err = ipmr_get_route(net, skb,",
          "2543:        fl4->saddr, fl4->daddr,",
          "2546:    if (err <= 0) {",
          "2556:    }",
          "2557:   } else",
          "2558: #endif",
          "",
          "[Removed Lines]",
          "2544:        r, nowait, portid);",
          "2547:     if (!nowait) {",
          "2548:      if (err == 0)",
          "2549:       return 0;",
          "2550:      goto nla_put_failure;",
          "2551:     } else {",
          "2552:      if (err == -EMSGSIZE)",
          "2553:       goto nla_put_failure;",
          "2554:      error = err;",
          "2555:     }",
          "",
          "[Added Lines]",
          "2544:        r, 0, portid);",
          "2547:     if (err == 0)",
          "2548:      return 0;",
          "2549:     goto nla_put_failure;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2666:  err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2667:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq,",
          "2669:  if (err < 0)",
          "2670:   goto errout_free;",
          "",
          "[Removed Lines]",
          "2668:       RTM_NEWROUTE, 0, 0);",
          "",
          "[Added Lines]",
          "2662:       RTM_NEWROUTE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3166e0c959311881eaf7ed2e5130822d4337905",
      "candidate_info": {
        "commit_hash": "d3166e0c959311881eaf7ed2e5130822d4337905",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d3166e0c959311881eaf7ed2e5130822d4337905",
        "files": [
          "net/ipv4/route.c"
        ],
        "message": "net: ipv4: Remove event arg to rt_fill_info\n\nrt_fill_info has 1 caller with the event set to RTM_NEWROUTE. Given that\nremove the arg and use RTM_NEWROUTE directly in rt_fill_info.\n\nSigned-off-by: David Ahern <dsahern@gmail.com>\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/route.c||net/ipv4/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ],
          "candidate": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2537: static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,",
          "2538:    struct flowi4 *fl4, struct sk_buff *skb, u32 portid,",
          "2540: {",
          "2541:  struct rtable *rt = skb_rtable(skb);",
          "2542:  struct rtmsg *r;",
          "",
          "[Removed Lines]",
          "2539:    u32 seq, int event)",
          "",
          "[Added Lines]",
          "2539:    u32 seq)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2545:  u32 error;",
          "2546:  u32 metrics[RTAX_MAX];",
          "2549:  if (!nlh)",
          "2550:   return -EMSGSIZE;",
          "",
          "[Removed Lines]",
          "2548:  nlh = nlmsg_put(skb, portid, seq, event, sizeof(*r), 0);",
          "",
          "[Added Lines]",
          "2548:  nlh = nlmsg_put(skb, portid, seq, RTM_NEWROUTE, sizeof(*r), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2745:   table_id = rt->rt_table_id;",
          "2747:  err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2750:  if (err < 0)",
          "2751:   goto errout_free;",
          "",
          "[Removed Lines]",
          "2748:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq,",
          "2749:       RTM_NEWROUTE);",
          "",
          "[Added Lines]",
          "2748:       NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "404eb77ea766260c45cb05c4a8043b13bd7142d5",
      "candidate_info": {
        "commit_hash": "404eb77ea766260c45cb05c4a8043b13bd7142d5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/404eb77ea766260c45cb05c4a8043b13bd7142d5",
        "files": [
          "include/net/ip.h",
          "include/uapi/linux/rtnetlink.h",
          "net/ipv4/Makefile",
          "net/ipv4/fib_frontend.c",
          "net/ipv4/netlink.c",
          "net/ipv4/route.c"
        ],
        "message": "ipv4: support sport, dport and ip_proto in RTM_GETROUTE\n\nThis is a followup to fib rules sport, dport and ipproto\nmatch support. Only supports tcp, udp and icmp for ipproto.\nUsed by fib rule self tests.\n\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/ip.h||include/net/ip.h",
          "include/uapi/linux/rtnetlink.h||include/uapi/linux/rtnetlink.h",
          "net/ipv4/fib_frontend.c||net/ipv4/fib_frontend.c",
          "net/ipv4/netlink.c||net/ipv4/netlink.c",
          "net/ipv4/route.c||net/ipv4/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ],
          "candidate": [
            "net/ipv4/route.c||net/ipv4/route.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/ip.h||include/net/ip.h": [
          "File: include/net/ip.h -> include/net/ip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: int ip_misc_proc_init(void);",
          "665: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667: int rtm_getroute_parse_ip_proto(struct nlattr *attr, u8 *ip_proto,",
          "668:     struct netlink_ext_ack *extack);",
          "",
          "---------------"
        ],
        "include/uapi/linux/rtnetlink.h||include/uapi/linux/rtnetlink.h": [
          "File: include/uapi/linux/rtnetlink.h -> include/uapi/linux/rtnetlink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:  RTA_PAD,",
          "328:  RTA_UID,",
          "329:  RTA_TTL_PROPAGATE,",
          "330:  __RTA_MAX",
          "331: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:  RTA_IP_PROTO,",
          "331:  RTA_SPORT,",
          "332:  RTA_DPORT,",
          "",
          "---------------"
        ],
        "net/ipv4/fib_frontend.c||net/ipv4/fib_frontend.c": [
          "File: net/ipv4/fib_frontend.c -> net/ipv4/fib_frontend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:  [RTA_ENCAP]  = { .type = NLA_NESTED },",
          "650:  [RTA_UID]  = { .type = NLA_U32 },",
          "651:  [RTA_MARK]  = { .type = NLA_U32 },",
          "652: };",
          "654: static int rtm_to_fib_config(struct net *net, struct sk_buff *skb,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "652:  [RTA_IP_PROTO]  = { .type = NLA_U8 },",
          "653:  [RTA_SPORT]  = { .type = NLA_U16 },",
          "654:  [RTA_DPORT]  = { .type = NLA_U16 },",
          "",
          "---------------"
        ],
        "net/ipv4/netlink.c||net/ipv4/netlink.c": [
          "File: net/ipv4/netlink.c -> net/ipv4/netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <linux/netlink.h>",
          "2: #include <linux/rtnetlink.h>",
          "3: #include <linux/types.h>",
          "4: #include <net/net_namespace.h>",
          "5: #include <net/netlink.h>",
          "6: #include <net/ip.h>",
          "8: int rtm_getroute_parse_ip_proto(struct nlattr *attr, u8 *ip_proto,",
          "9:     struct netlink_ext_ack *extack)",
          "10: {",
          "13:  switch (*ip_proto) {",
          "14:  case IPPROTO_TCP:",
          "15:  case IPPROTO_UDP:",
          "16:  case IPPROTO_ICMP:",
          "17:   return 0;",
          "18:  default:",
          "19:   NL_SET_ERR_MSG(extack, \"Unsupported ip proto\");",
          "20:   return -EOPNOTSUPP;",
          "21:  }",
          "22: }",
          "23: EXPORT_SYMBOL_GPL(rtm_getroute_parse_ip_proto);",
          "",
          "---------------"
        ],
        "net/ipv4/route.c||net/ipv4/route.c": [
          "File: net/ipv4/route.c -> net/ipv4/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2574: EXPORT_SYMBOL_GPL(ip_route_output_flow);",
          "2580: {",
          "2582:  struct rtmsg *r;",
          "2583:  struct nlmsghdr *nlh;",
          "2584:  unsigned long expires = 0;",
          "",
          "[Removed Lines]",
          "2577: static int rt_fill_info(struct net *net,  __be32 dst, __be32 src, u32 table_id,",
          "2578:    struct flowi4 *fl4, struct sk_buff *skb, u32 portid,",
          "2579:    u32 seq)",
          "2581:  struct rtable *rt = skb_rtable(skb);",
          "",
          "[Added Lines]",
          "2577: static int rt_fill_info(struct net *net, __be32 dst, __be32 src,",
          "2578:    struct rtable *rt, u32 table_id, struct flowi4 *fl4,",
          "2579:    struct sk_buff *skb, u32 portid, u32 seq)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2674:    }",
          "2675:   } else",
          "2676: #endif",
          "2678:     goto nla_put_failure;",
          "2679:  }",
          "",
          "[Removed Lines]",
          "2677:    if (nla_put_u32(skb, RTA_IIF, skb->dev->ifindex))",
          "",
          "[Added Lines]",
          "2676:    if (nla_put_u32(skb, RTA_IIF, fl4->flowi4_iif))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2689:  return -EMSGSIZE;",
          "2690: }",
          "2692: static int inet_rtm_getroute(struct sk_buff *in_skb, struct nlmsghdr *nlh,",
          "2693:         struct netlink_ext_ack *extack)",
          "2694: {",
          "2695:  struct net *net = sock_net(in_skb->sk);",
          "2697:  struct nlattr *tb[RTA_MAX+1];",
          "2698:  struct fib_result res = {};",
          "2699:  struct rtable *rt = NULL;",
          "2700:  struct flowi4 fl4;",
          "2701:  __be32 dst = 0;",
          "2702:  __be32 src = 0;",
          "2703:  u32 iif;",
          "2704:  int err;",
          "2705:  int mark;",
          "2710:  err = nlmsg_parse(nlh, sizeof(*rtm), tb, RTA_MAX, rtm_ipv4_policy,",
          "2711:      extack);",
          "2712:  if (err < 0)",
          "2715:  rtm = nlmsg_data(nlh);",
          "2729:  src = tb[RTA_SRC] ? nla_get_in_addr(tb[RTA_SRC]) : 0;",
          "2730:  dst = tb[RTA_DST] ? nla_get_in_addr(tb[RTA_DST]) : 0;",
          "2731:  iif = tb[RTA_IIF] ? nla_get_u32(tb[RTA_IIF]) : 0;",
          "",
          "[Removed Lines]",
          "2696:  struct rtmsg *rtm;",
          "2706:  struct sk_buff *skb;",
          "2707:  u32 table_id = RT_TABLE_MAIN;",
          "2708:  kuid_t uid;",
          "2713:   goto errout;",
          "2717:  skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);",
          "2718:  if (!skb) {",
          "2719:   err = -ENOBUFS;",
          "2720:   goto errout;",
          "2721:  }",
          "2724:     through good chunk of routing engine.",
          "2726:  skb_reset_mac_header(skb);",
          "2727:  skb_reset_network_header(skb);",
          "",
          "[Added Lines]",
          "2691: static struct sk_buff *inet_rtm_getroute_build_skb(__be32 src, __be32 dst,",
          "2692:          u8 ip_proto, __be16 sport,",
          "2693:          __be16 dport)",
          "2694: {",
          "2695:  struct sk_buff *skb;",
          "2696:  struct iphdr *iph;",
          "2698:  skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);",
          "2699:  if (!skb)",
          "2700:   return NULL;",
          "2705:  skb_reset_mac_header(skb);",
          "2706:  skb_reset_network_header(skb);",
          "2707:  skb->protocol = htons(ETH_P_IP);",
          "2708:  iph = skb_put(skb, sizeof(struct iphdr));",
          "2709:  iph->protocol = ip_proto;",
          "2710:  iph->saddr = src;",
          "2711:  iph->daddr = dst;",
          "2712:  iph->version = 0x4;",
          "2713:  iph->frag_off = 0;",
          "2714:  iph->ihl = 0x5;",
          "2715:  skb_set_transport_header(skb, skb->len);",
          "2717:  switch (iph->protocol) {",
          "2718:  case IPPROTO_UDP: {",
          "2719:   struct udphdr *udph;",
          "2721:   udph = skb_put_zero(skb, sizeof(struct udphdr));",
          "2722:   udph->source = sport;",
          "2723:   udph->dest = dport;",
          "2724:   udph->len = sizeof(struct udphdr);",
          "2725:   udph->check = 0;",
          "2726:   break;",
          "2727:  }",
          "2728:  case IPPROTO_TCP: {",
          "2729:   struct tcphdr *tcph;",
          "2731:   tcph = skb_put_zero(skb, sizeof(struct tcphdr));",
          "2732:   tcph->source = sport;",
          "2733:   tcph->dest = dport;",
          "2734:   tcph->doff = sizeof(struct tcphdr) / 4;",
          "2735:   tcph->rst = 1;",
          "2736:   tcph->check = ~tcp_v4_check(sizeof(struct tcphdr),",
          "2737:          src, dst, 0);",
          "2738:   break;",
          "2739:  }",
          "2740:  case IPPROTO_ICMP: {",
          "2741:   struct icmphdr *icmph;",
          "2743:   icmph = skb_put_zero(skb, sizeof(struct icmphdr));",
          "2744:   icmph->type = ICMP_ECHO;",
          "2745:   icmph->code = 0;",
          "2746:  }",
          "2747:  }",
          "2749:  return skb;",
          "2750: }",
          "2757:  u32 table_id = RT_TABLE_MAIN;",
          "2758:  __be16 sport = 0, dport = 0;",
          "2760:  u8 ip_proto = IPPROTO_UDP;",
          "2762:  struct sk_buff *skb;",
          "2763:  struct rtmsg *rtm;",
          "2767:  kuid_t uid;",
          "2775:   return err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2735:  else",
          "2736:   uid = (iif ? INVALID_UID : current_uid());",
          "2747:  memset(&fl4, 0, sizeof(fl4));",
          "2748:  fl4.daddr = dst;",
          "",
          "[Removed Lines]",
          "2741:  ip_hdr(skb)->protocol = IPPROTO_UDP;",
          "2742:  ip_hdr(skb)->saddr = src;",
          "2743:  ip_hdr(skb)->daddr = dst;",
          "2745:  skb_reserve(skb, MAX_HEADER + sizeof(struct iphdr));",
          "",
          "[Added Lines]",
          "2787:  if (tb[RTA_IP_PROTO]) {",
          "2788:   err = rtm_getroute_parse_ip_proto(tb[RTA_IP_PROTO],",
          "2789:         &ip_proto, extack);",
          "2790:   if (err)",
          "2791:    return err;",
          "2792:  }",
          "2794:  if (tb[RTA_SPORT])",
          "2795:   sport = nla_get_be16(tb[RTA_SPORT]);",
          "2797:  if (tb[RTA_DPORT])",
          "2798:   dport = nla_get_be16(tb[RTA_DPORT]);",
          "2800:  skb = inet_rtm_getroute_build_skb(src, dst, ip_proto, sport, dport);",
          "2801:  if (!skb)",
          "2802:   return -ENOBUFS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2751:  fl4.flowi4_oif = tb[RTA_OIF] ? nla_get_u32(tb[RTA_OIF]) : 0;",
          "2752:  fl4.flowi4_mark = mark;",
          "2753:  fl4.flowi4_uid = uid;",
          "2755:  rcu_read_lock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2811:  if (sport)",
          "2812:   fl4.fl4_sport = sport;",
          "2813:  if (dport)",
          "2814:   fl4.fl4_dport = dport;",
          "2815:  fl4.flowi4_proto = ip_proto;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2760:   dev = dev_get_by_index_rcu(net, iif);",
          "2761:   if (!dev) {",
          "2762:    err = -ENODEV;",
          "2764:   }",
          "2767:   skb->dev = dev;",
          "2768:   skb->mark = mark;",
          "2769:   err = ip_route_input_rcu(skb, dst, src, rtm->rtm_tos,",
          "",
          "[Removed Lines]",
          "2763:    goto errout_free;",
          "2766:   skb->protocol = htons(ETH_P_IP);",
          "",
          "[Added Lines]",
          "2825:    goto errout_rcu;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2783:  }",
          "2785:  if (err)",
          "2788:  if (rtm->rtm_flags & RTM_F_NOTIFY)",
          "2789:   rt->rt_flags |= RTCF_NOTIFY;",
          "",
          "[Removed Lines]",
          "2786:   goto errout_free;",
          "",
          "[Added Lines]",
          "2848:   goto errout_rcu;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2791:  if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)",
          "2792:   table_id = res.table ? res.table->tb_id : 0;",
          "2794:  if (rtm->rtm_flags & RTM_F_FIB_MATCH) {",
          "2795:   if (!res.fi) {",
          "2796:    err = fib_props[res.type].error;",
          "2797:    if (!err)",
          "2798:     err = -EHOSTUNREACH;",
          "2800:   }",
          "2801:   err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,",
          "2802:         nlh->nlmsg_seq, RTM_NEWROUTE, table_id,",
          "2803:         rt->rt_type, res.prefix, res.prefixlen,",
          "2804:         fl4.flowi4_tos, res.fi, 0);",
          "2805:  } else {",
          "2807:        NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
          "2808:  }",
          "2809:  if (err < 0)",
          "2812:  rcu_read_unlock();",
          "2814:  err = rtnl_unicast(skb, net, NETLINK_CB(in_skb).portid);",
          "2818: errout_free:",
          "2819:  rcu_read_unlock();",
          "2820:  kfree_skb(skb);",
          "2822: }",
          "2824: void ip_rt_multicast_event(struct in_device *in_dev)",
          "",
          "[Removed Lines]",
          "2799:    goto errout_free;",
          "2806:   err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
          "2810:   goto errout_free;",
          "2815: errout:",
          "2816:  return err;",
          "2821:  goto errout;",
          "",
          "[Added Lines]",
          "2857:  skb_trim(skb, 0);",
          "2858:  skb_reset_network_header(skb);",
          "2859:  skb_reset_transport_header(skb);",
          "2860:  skb_reset_mac_header(skb);",
          "2867:    goto errout_rcu;",
          "2874:   err = rt_fill_info(net, dst, src, rt, table_id, &fl4, skb,",
          "2878:   goto errout_rcu;",
          "2885:  return err;",
          "2886: errout_rcu:",
          "2889:  goto errout_free;",
          "",
          "---------------"
        ]
      }
    }
  ]
}