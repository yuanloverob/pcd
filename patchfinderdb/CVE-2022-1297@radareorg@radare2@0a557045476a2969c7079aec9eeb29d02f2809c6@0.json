{
  "cve_id": "CVE-2022-1297",
  "cve_desc": "Out-of-bounds Read in r_bin_ne_get_entrypoints function in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability may allow attackers to read sensitive information or cause a crash.",
  "repo": "radareorg/radare2",
  "patch_hash": "0a557045476a2969c7079aec9eeb29d02f2809c6",
  "patch_info": {
    "commit_hash": "0a557045476a2969c7079aec9eeb29d02f2809c6",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/0a557045476a2969c7079aec9eeb29d02f2809c6",
    "files": [
      "libr/bin/format/ne/ne.c"
    ],
    "message": "Fix oobread and unaligned casts in the NE entrypoint logic ##crash\n\n* Reported by @hmsec via huntr.dev\n* Reproducer: nepocaligns\n* BountyID: ec538fa4-06c6-4050-a141-f60153ddeaac",
    "before_after_code_files": [
      "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c": [
      "File: libr/bin/format/ne/ne.c -> libr/bin/format/ne/ne.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:     off += 2;",
      "409:     ut8 segnum = *(bin->entry_table + off);",
      "410:     off++;",
      "413:      entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;",
      "414:     }",
      "415:    } else { // Fixed",
      "416:     if (bundle_type < bin->ne_header->SegCount) {",
      "417:      entry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset",
      "419:     }",
      "420:    }",
      "421:    off += 2;",
      "",
      "[Removed Lines]",
      "411:     ut16 segoff = *(ut16 *)(bin->entry_table + off);",
      "412:     if (segnum > 0) {",
      "",
      "[Added Lines]",
      "411:     if (off > bin->ne_header->EntryTableLength) {",
      "412:      break;",
      "413:     }",
      "414:     ut16 segoff = r_read_le16 (bin->entry_table + off);",
      "415:     if (segnum > 0 && segnum < bin->ne_header->SegCount) {",
      "419:     if (off + 2 >= bin->ne_header->EntryTableLength) {",
      "420:      break;",
      "421:     }",
      "422:     ut16 delta = r_read_le16 (bin->entry_table + off);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c40a4f9862104ede15d0ba05ccbf805923070778",
      "candidate_info": {
        "commit_hash": "c40a4f9862104ede15d0ba05ccbf805923070778",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/c40a4f9862104ede15d0ba05ccbf805923070778",
        "files": [
          "libr/bin/format/ne/ne.c"
        ],
        "message": "Fix another oobread segfault in the NE bin parser ##crash\n\n* Reported by @han0nly via huntr.dev\n* Reproducers: sample1 sample2 sample3\n* BountyID: 47422cdf-aad2-4405-a6a1-6f63a3a93200",
        "before_after_code_files": [
          "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c"
          ],
          "candidate": [
            "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/ne/ne.c||libr/bin/format/ne/ne.c": [
          "File: libr/bin/format/ne/ne.c -> libr/bin/format/ne/ne.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:  }",
          "375:  int off = 0;",
          "376:  while (off < bin->ne_header->EntryTableLength) {",
          "377:   ut8 bundle_length = *(ut8 *)(bin->entry_table + off);",
          "378:   if (!bundle_length) {",
          "379:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   if (bin->entry_table + off + 32 >= r_buf_size (bin->buf)) {",
          "378:    break;",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     ut8 segnum = *(bin->entry_table + off);",
          "399:     off++;",
          "400:     ut16 segoff = *(ut16 *)(bin->entry_table + off);",
          "402:    } else { // Fixed",
          "403:     entry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset * bin->alignment + *(ut16 *)(bin->entry_table + off);",
          "404:    }",
          "",
          "[Removed Lines]",
          "401:     entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;",
          "",
          "[Added Lines]",
          "404:     if (segnum > 0) {",
          "405:      entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;",
          "406:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}