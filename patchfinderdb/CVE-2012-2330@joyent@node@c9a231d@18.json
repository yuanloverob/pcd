{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29463cb60c2079a046f9c255fb0eccecea2674fc",
      "candidate_info": {
        "commit_hash": "29463cb60c2079a046f9c255fb0eccecea2674fc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/29463cb60c2079a046f9c255fb0eccecea2674fc",
        "files": [
          "test/simple/test-process-argv-0.js"
        ],
        "message": "Update argv0 test to verify correct behavior",
        "before_after_code_files": [
          "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-process-argv-0.js||test/simple/test-process-argv-0.js": [
          "File: test/simple/test-process-argv-0.js -> test/simple/test-process-argv-0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var spawn = require('child_process').spawn;",
          "25: var common = require('../common');",
          "27: if (process.argv[2] !== \"child\") {",
          "31:   });",
          "33:   var childArgv0 = '';",
          "35:     childArgv0 += chunk;",
          "36:   });",
          "37:   child.on('exit', function () {",
          "38:     assert.equal(childArgv0, process.execPath);",
          "39:   });",
          "40: }",
          "",
          "[Removed Lines]",
          "28:   var child = spawn('node', [__filename, \"child\"], {",
          "29:     cwd: common.tmpDir,",
          "30:     env: util._extend({ PATH: path.dirname(process.execPath) }, process.env)",
          "34:   child.stdout.on('data', function (chunk) {",
          "",
          "[Added Lines]",
          "27: console.error('argv=%j', process.argv);",
          "28: console.error('exec=%j', process.execPath);",
          "31:   var child = spawn('./node', [__filename, \"child\"], {",
          "32:     cwd: path.dirname(process.execPath)",
          "36:   var childErr = '';",
          "37:   child.stdout.on('data', function(chunk) {",
          "40:   child.stderr.on('data', function(chunk) {",
          "41:     childErr += chunk;",
          "42:   });",
          "44:     console.error('CHILD: %s', childErr.trim().split('\\n').join('\\nCHILD: '));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b43c63c88ae191ca3a4b1b3d1a57222593c7f9c",
      "candidate_info": {
        "commit_hash": "5b43c63c88ae191ca3a4b1b3d1a57222593c7f9c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5b43c63c88ae191ca3a4b1b3d1a57222593c7f9c",
        "files": [
          "lib/child_process.js",
          "test/simple/test-child-process-kill-throw.js"
        ],
        "message": "child_process: emit error when .kill fails",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/simple/test-child-process-kill-throw.js||test/simple/test-child-process-kill-throw.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:   if (this._internal) {",
          "527:     this.killed = true;",
          "528:     var r = this._internal.kill(signal);",
          "530:   }",
          "531: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-kill-throw.js||test/simple/test-child-process-kill-throw.js": [
          "File: test/simple/test-child-process-kill-throw.js -> test/simple/test-child-process-kill-throw.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: if (process.argv[2] === 'child') {",
          "26:   process.exit(0);",
          "27: } else {",
          "28:   var spawn = require('child_process').spawn;",
          "29:   var child = spawn(process.execPath, [process.argv[1], 'child']);",
          "31:   var error = {};",
          "32:   child.on('exit', function() {",
          "33:     child._internal = {",
          "34:       kill: function() { return -1; }",
          "35:     };",
          "36:     child.once('error', function(err) {",
          "37:       error = err;",
          "38:     });",
          "39:     child.kill();",
          "40:   });",
          "42:   process.on('exit', function() {",
          "45:     assert.equal(error.syscall, 'kill');",
          "46:   });",
          "47: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34c750d7a96ad29c023d117f55239b94e90d23d5",
      "candidate_info": {
        "commit_hash": "34c750d7a96ad29c023d117f55239b94e90d23d5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/34c750d7a96ad29c023d117f55239b94e90d23d5",
        "files": [
          "lib/net.js",
          "test/simple/test-net-listen-fd0.js"
        ],
        "message": "net: fix .listen({fd:0})",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-listen-fd0.js||test/simple/test-net-listen-fd0.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "980:     if (h instanceof TCP) {",
          "981:       self._handle = h;",
          "982:       listen(self, null, -1, -1, backlog);",
          "984:       listen(self, null, null, null, backlog, h.fd);",
          "985:     } else {",
          "986:       throw new Error('Invalid listen argument: ' + h);",
          "",
          "[Removed Lines]",
          "983:     } else if (h.fd && typeof h.fd === 'number' && h.fd >= 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-listen-fd0.js||test/simple/test-net-listen-fd0.js": [
          "File: test/simple/test-net-listen-fd0.js -> test/simple/test-net-listen-fd0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var gotError = false;",
          "28: process.on('exit', function() {",
          "29:   assert.equal(gotError, true);",
          "30: });",
          "33: net.createServer(assert.fail).listen({fd:0}).on('error', function(e) {",
          "34:   assert.equal(e.code, 'EINVAL');",
          "35:   gotError = true;",
          "36: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59ecf2ccf743489a2885cf824460070e6fc12d6a",
      "candidate_info": {
        "commit_hash": "59ecf2ccf743489a2885cf824460070e6fc12d6a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/59ecf2ccf743489a2885cf824460070e6fc12d6a",
        "files": [
          "configure",
          "node.gyp"
        ],
        "message": "Revert \"Revert \"build: support shared V8 properly\"\"\n\nThis reverts commit a9130222bd36ac2c5dd7ae560f02bb99569749a7.",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:       'dependencies': [",
          "56:         'deps/http_parser/http_parser.gyp:http_parser',",
          "58:         'deps/uv/uv.gyp:uv',",
          "59:         'deps/zlib/zlib.gyp:zlib',",
          "60:         'node_js2c#host',",
          "",
          "[Removed Lines]",
          "57:         'deps/v8/tools/gyp/v8.gyp:v8',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:         'src/stream_wrap.h',",
          "111:         'src/v8_typed_array.h',",
          "112:         'deps/http_parser/http_parser.h',",
          "115:         '<(SHARED_INTERMEDIATE_DIR)/node_natives.h',",
          "116:         # javascript files to make for an even more pleasant IDE experience",
          "117:         '<@(library_files)',",
          "",
          "[Removed Lines]",
          "113:         'deps/v8/include/v8.h',",
          "114:         'deps/v8/include/v8-debug.h',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:           ],",
          "148:         }],",
          "150:         [ 'OS==\"win\"', {",
          "151:           'sources': [",
          "152:             'tools/msvs/res/node.rc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:         [ 'node_shared_v8==\"true\"', {",
          "148:           'sources': [",
          "149:             '<(node_shared_v8_includes)/v8.h',",
          "150:             '<(node_shared_v8_includes)/v8-debug.h',",
          "151:           ],",
          "152:         }],",
          "154:         [ 'node_shared_v8==\"false\"', {",
          "155:           'sources': [",
          "156:             'deps/v8/include/v8.h',",
          "157:             'deps/v8/include/v8-debug.h',",
          "158:           ],",
          "159:           'dependencies': [ 'deps/v8/tools/gyp/v8.gyp:v8' ],",
          "160:         }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e10ed097cb3b506009ab28af4dec93402aa48693",
      "candidate_info": {
        "commit_hash": "e10ed097cb3b506009ab28af4dec93402aa48693",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e10ed097cb3b506009ab28af4dec93402aa48693",
        "files": [
          "doc/api/fs.markdown",
          "doc/api/path.markdown",
          "lib/fs.js",
          "lib/path.js",
          "test/simple/test-fs-exists.js",
          "test/simple/test-fs-mkdir.js",
          "test/simple/test-path.js"
        ],
        "message": "path fs: move `path.exists*` to `fs.exists*`\n\n`path.exists*` functions show a deprecation warning and call functions\nfrom `fs`. They should be removed later.\n\ntest: fix references to `path.exists*` in tests\n\ntest fs: add test for `fs.exists` and `fs.existsSync`\n\ndoc: reflect moving `path.exists*` to `fs`",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "lib/path.js||lipath.js",
          "test/simple/test-fs-exists.js||test/simple/test-fs-exists.js",
          "test/simple/test-fs-mkdir.js||test/simple/test-fs-mkdir.js",
          "test/simple/test-path.js||test/simple/test-path.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   return this._checkModeProperty(constants.S_IFSOCK);",
          "72: };",
          "74: fs.readFile = function(path, encoding_) {",
          "75:   var encoding = typeof(encoding_) === 'string' ? encoding_ : null;",
          "76:   var callback = arguments[arguments.length - 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: var isWindows = process.platform === 'win32';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: exports.exists = function(path, callback) {",
          "408: };",
          "411: exports.existsSync = function(path) {",
          "418: };",
          "",
          "[Removed Lines]",
          "405:   process.binding('fs').stat(path, function(err, stats) {",
          "406:     if (callback) callback(err ? false : true);",
          "407:   });",
          "412:   try {",
          "413:     process.binding('fs').stat(path);",
          "414:     return true;",
          "415:   } catch (e) {",
          "416:     return false;",
          "417:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-exists.js||test/simple/test-fs-exists.js": [
          "File: test/simple/test-fs-exists.js -> test/simple/test-fs-exists.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert');",
          "23: var fs = require('fs');",
          "24: var f = __filename;",
          "25: var exists;",
          "26: var doesNotExist;",
          "28: fs.exists(f, function(y) {",
          "29:   exists = y;",
          "30: });",
          "32: fs.exists(f + '-NO', function (y) {",
          "33:   doesNotExist = y;",
          "34: });",
          "36: assert(fs.existsSync(f));",
          "37: assert(!fs.existsSync(f + '-NO'));",
          "39: process.on('exit', function () {",
          "40:   assert.strictEqual(exists, true);",
          "41:   assert.strictEqual(doesNotExist, false);",
          "42: });",
          "",
          "---------------"
        ],
        "test/simple/test-fs-mkdir.js||test/simple/test-fs-mkdir.js": [
          "File: test/simple/test-fs-mkdir.js -> test/simple/test-fs-mkdir.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var fs = require('fs');",
          "27: function unlink(pathname) {",
          "",
          "[Removed Lines]",
          "24: var path = require('path');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   fs.mkdir(pathname, function(err) {",
          "41:     assert.equal(err, null);",
          "43:     ncalls++;",
          "44:   });",
          "",
          "[Removed Lines]",
          "42:     assert.equal(path.existsSync(pathname), true);",
          "",
          "[Added Lines]",
          "41:     assert.equal(fs.existsSync(pathname), true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   fs.mkdir(pathname, 511 /*=0777*/, function(err) {",
          "59:     assert.equal(err, null);",
          "61:     ncalls++;",
          "62:   });",
          "",
          "[Removed Lines]",
          "60:     assert.equal(path.existsSync(pathname), true);",
          "",
          "[Added Lines]",
          "59:     assert.equal(fs.existsSync(pathname), true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:   unlink(pathname);",
          "74:   fs.mkdirSync(pathname);",
          "77:   unlink(pathname);",
          "79:   assert.equal(exists, true);",
          "",
          "[Removed Lines]",
          "76:   var exists = path.existsSync(pathname);",
          "",
          "[Added Lines]",
          "75:   var exists = fs.existsSync(pathname);",
          "",
          "---------------"
        ],
        "test/simple/test-path.js||test/simple/test-path.js": [
          "File: test/simple/test-path.js -> test/simple/test-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:                '\\\\\\\\unc\\\\share\\\\foo\\\\bar');",
          "77: }",
          "83: assert.equal(path.extname(''), '');",
          "84: assert.equal(path.extname('/path/to/file'), '');",
          "",
          "[Removed Lines]",
          "79: path.exists(f, function(y) { assert.equal(y, true) });",
          "81: assert.equal(path.existsSync(f), true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}