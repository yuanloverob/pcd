{
  "cve_id": "CVE-2016-8650",
  "cve_desc": "The mpi_powm function in lib/mpi/mpi-pow.c in the Linux kernel through 4.8.11 does not ensure that memory is allocated for limb data, which allows local users to cause a denial of service (stack memory corruption and panic) via an add_key system call for an RSA key with a zero exponent.",
  "repo": "torvalds/linux",
  "patch_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
  "patch_info": {
    "commit_hash": "f5527fffff3f002b0a6b376163613b82f69de073",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f5527fffff3f002b0a6b376163613b82f69de073",
    "files": [
      "lib/mpi/mpi-pow.c"
    ],
    "message": "mpi: Fix NULL ptr dereference in mpi_powm() [ver #3]\n\nThis fixes CVE-2016-8650.\n\nIf mpi_powm() is given a zero exponent, it wants to immediately return\neither 1 or 0, depending on the modulus.  However, if the result was\ninitalised with zero limb space, no limbs space is allocated and a\nNULL-pointer exception ensues.\n\nFix this by allocating a minimal amount of limb space for the result when\nthe 0-exponent case when the result is 1 and not touching the limb space\nwhen the result is 0.\n\nThis affects the use of RSA keys and X.509 certificates that carry them.\n\nBUG: unable to handle kernel NULL pointer dereference at           (null)\nIP: [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nPGD 0\nOops: 0002 [#1] SMP\nModules linked in:\nCPU: 3 PID: 3014 Comm: keyctl Not tainted 4.9.0-rc6-fscache+ #278\nHardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014\ntask: ffff8804011944c0 task.stack: ffff880401294000\nRIP: 0010:[<ffffffff8138ce5d>]  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\nRSP: 0018:ffff880401297ad8  EFLAGS: 00010212\nRAX: 0000000000000000 RBX: ffff88040868bec0 RCX: ffff88040868bba0\nRDX: ffff88040868b260 RSI: ffff88040868bec0 RDI: ffff88040868bee0\nRBP: ffff880401297ba8 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000047 R11: ffffffff8183b210 R12: 0000000000000000\nR13: ffff8804087c7600 R14: 000000000000001f R15: ffff880401297c50\nFS:  00007f7a7918c700(0000) GS:ffff88041fb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000000 CR3: 0000000401250000 CR4: 00000000001406e0\nStack:\n ffff88040868bec0 0000000000000020 ffff880401297b00 ffffffff81376cd4\n 0000000000000100 ffff880401297b10 ffffffff81376d12 ffff880401297b30\n ffffffff81376f37 0000000000000100 0000000000000000 ffff880401297ba8\nCall Trace:\n [<ffffffff81376cd4>] ? __sg_page_iter_next+0x43/0x66\n [<ffffffff81376d12>] ? sg_miter_get_next_page+0x1b/0x5d\n [<ffffffff81376f37>] ? sg_miter_next+0x17/0xbd\n [<ffffffff8138ba3a>] ? mpi_read_raw_from_sgl+0xf2/0x146\n [<ffffffff8132a95c>] rsa_verify+0x9d/0xee\n [<ffffffff8132acca>] ? pkcs1pad_sg_set_buf+0x2e/0xbb\n [<ffffffff8132af40>] pkcs1pad_verify+0xc0/0xe1\n [<ffffffff8133cb5e>] public_key_verify_signature+0x1b0/0x228\n [<ffffffff8133d974>] x509_check_for_self_signed+0xa1/0xc4\n [<ffffffff8133cdde>] x509_cert_parse+0x167/0x1a1\n [<ffffffff8133d609>] x509_key_preparse+0x21/0x1a1\n [<ffffffff8133c3d7>] asymmetric_key_preparse+0x34/0x61\n [<ffffffff812fc9f3>] key_create_or_update+0x145/0x399\n [<ffffffff812fe227>] SyS_add_key+0x154/0x19e\n [<ffffffff81001c2b>] do_syscall_64+0x80/0x191\n [<ffffffff816825e4>] entry_SYSCALL64_slow_path+0x25/0x25\nCode: 56 41 55 41 54 53 48 81 ec a8 00 00 00 44 8b 71 04 8b 42 04 4c 8b 67 18 45 85 f6 89 45 80 0f 84 b4 06 00 00 85 c0 75 2f 41 ff ce <49> c7 04 24 01 00 00 00 b0 01 75 0b 48 8b 41 18 48 83 38 01 0f\nRIP  [<ffffffff8138ce5d>] mpi_powm+0x32/0x7e6\n RSP <ffff880401297ad8>\nCR2: 0000000000000000\n---[ end trace d82015255d4a5d8d ]---\n\nBasically, this is a backport of a libgcrypt patch:\n\n\thttp://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=patch;h=6e1adb05d290aeeb1c230c763970695f4a538526\n\nFixes: cdec9cb5167a (\"crypto: GnuPG based MPI lib - source files (part 1)\")\nSigned-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>\ncc: linux-ima-devel@lists.sourceforge.net\ncc: stable@vger.kernel.org\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
    "before_after_code_files": [
      "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c"
    ]
  },
  "patch_diff": {
    "lib/mpi/mpi-pow.c||lib/mpi/mpi-pow.c": [
      "File: lib/mpi/mpi-pow.c -> lib/mpi/mpi-pow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:  if (!esize) {",
      "68:   res->nlimbs = (msize == 1 && mod->d[0] == 1) ? 0 : 1;",
      "69:   res->sign = 0;",
      "70:   goto leave;",
      "71:  }",
      "",
      "[Removed Lines]",
      "67:   rp[0] = 1;",
      "",
      "[Added Lines]",
      "68:   if (res->nlimbs) {",
      "69:    if (mpi_resize(res, 1) < 0)",
      "70:     goto enomem;",
      "71:    rp = res->d;",
      "72:    rp[0] = 1;",
      "73:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "40a50f8b307de8d08f3fa37c312fc16a7dd233e5",
      "candidate_info": {
        "commit_hash": "40a50f8b307de8d08f3fa37c312fc16a7dd233e5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/40a50f8b307de8d08f3fa37c312fc16a7dd233e5",
        "files": [
          "drivers/mfd/tps65217.c"
        ],
        "message": "mfd: tps65217: Fix page fault on unloading modules\n\nTPS65217 IRQ domain should be removed and initialised as NULL when the\nmodule is unloaded for the next use. When tps65217.ko is loaded again,\nit causes the page fault. This patch fixes the error below.\n\nroot@arm:~# lsmod | grep \"tps\"\ntps65217_charger        3538  0\ntps65218_pwrbutton      2974  0\ntps65217                6710  1 tps65217_charger\n\nroot@arm:~# modprobe -r tps65217_charger\n\nroot@arm:~# modprobe tps65217.ko\n[   71.990277] Unable to handle kernel paging request at virtual address bf055944\n[   71.998063] pgd = dd3a4000\n[   72.000904] [bf055944] *pgd=9e6f7811, *pte=00000000, *ppte=00000000\n[   72.007567] Internal error: Oops: 7 [#1] SMP ARM\n[   72.012404] Modules linked in: tps65217(+) evdev musb_dsps musb_hdrc udc_core tps65218_pwrbutton usbcore phy_am335]\n[   72.055700] CPU: 0 PID: 243 Comm: modprobe Not tainted 4.9.0-rc5-next-20161114 #3\n[   72.063531] Hardware name: Generic AM33XX (Flattened Device Tree)\n[   72.069899] task: de714380 task.stack: de7e6000\n[   72.074655] PC is at irq_find_matching_fwspec+0x88/0x100\n[   72.080211] LR is at 0xde7e79d8\n[   72.083496] pc : [<c01a5d88>]    lr : [<de7e79d8>]    psr: 200e0013\n[   72.083496] sp : de7e7a78  ip : 00000000  fp : dd138a68\n[   72.095506] r10: c0ca04f8  r9 : 00000018  r8 : de7e7ab8\n[   72.100973] r7 : 00000001  r6 : c0c4517c  r5 : df963f68  r4 : de321980\n[   72.107797] r3 : bf055940  r2 : de714380  r1 : 00000000  r0 : 00000000\n[   72.114633] Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none\n[   72.122084] Control: 10c5387d  Table: 9d3a4019  DAC: 00000051\n[   72.128097] Process modprobe (pid: 243, stack limit = 0xde7e6218)\n[   72.134489] Stack: (0xde7e7a78 to 0xde7e8000)\n[   72.139060] 7a60:                                                       df963f68 de7e7ab8\n[   72.147643] 7a80: 00000000 dd0e1000 dd491e20 c01a6ea0 600e0013 c01a5dc0 dd138a68 c0c45138\n[   72.156216] 7aa0: df963f68 00000000 df963f68 dd0e1010 00000000 c01a71a4 df963f68 00000001\n[   72.164800] 7ac0: 00000002 de7e7ac0 c80048b8 dd0adf00 df963f68 c0c4517c 00000000 de7e7b50\n[   72.173369] 7ae0: 00000018 c0ca04f8 dd138a68 c01a5dc0 df963f68 dd0e1010 00000000 dd0e1000\n[   72.181942] 7b00: dd491e20 c0653a70 df963f58 00000001 00000002 00000000 00000000 00000000\n[   72.190522] 7b20: 600e0093 c0cbf8f0 c0c0512c c0193674 00000001 00000080 00000000 c0554984\n[   72.199096] 7b40: 00000000 00000000 800e0013 c0553858 df963f68 00000000 00000000 00000000\n[   72.207674] 7b60: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n[   72.216239] 7b80: 00000000 00000000 00000000 00000000 00000000 00000000 dd0e1000 c0544d24\n[   72.224816] 7ba0: dd491e10 dd0e1010 dd16e800 bf1d517c bf1d5620 dd0e1010 c1497ed4 bf1d5620\n[   72.233398] 7bc0: dd0e1010 fffffdfb bf1d5620 bf1d5620 00000000 c054537c c0545330 dd0e1010\n[   72.241967] 7be0: c1497ed4 00000000 bf1d5620 c05433ac 00000000 00000000 de7e7c28 c0543570\n[   72.250537] 7c00: 00000001 c1497e90 00000000 c0541884 de080cd4 dd44b7d4 dd0e1010 dd0e1010\n[   72.259109] 7c20: dd0e1044 c05430c8 dd0e1010 00000001 dd0e1010 dd0e1018 dd0e1010 c0c9e328\n[   72.267676] 7c40: de5d4020 c0542760 dd0e1018 dd0e1010 00000000 c0540ba8 dd138a40 c048dec4\n[   72.276253] 7c60: 00000000 dd0e1000 00000001 dd0e1000 dd0e1010 dd0e1000 bf233de0 dd138a40\n[   72.284829] 7c80: dd0e1010 c05450a0 000000bf 00000000 dd138a60 00000001 dd0e1000 c0571240\n[   72.293398] 7ca0: 00000000 dd1ce9c0 00000040 dd1ce9cc bf233de0 00000003 de5d4020 ffffffff\n[   72.301969] 7cc0: 00000004 dd0adf00 00000000 c0571408 00000000 00000000 dd0adf00 de5d4020\n[   72.310543] 7ce0: c057146c dd1ce9c0 bf233d14 de5d4020 de7fb3d0 00000004 bf233d14 ffffffff\n[   72.319120] 7d00: 00000018 dd49bf30 c01cedc0 c05714d0 00000000 00000000 dd0adf00 de322810\n[   72.327692] 7d20: de322810 00000000 dd033000 000000f0 00000001 bf2333fc 00000000 00000000\n[   72.336269] 7d40: dd0adf00 de5d4020 000000b6 bf233e40 de5d4020 bf233968 de5d4004 de5d4000\n[   72.344848] 7d60: bf233314 c06148ac de5d4020 c1497ed4 00000000 bf233e40 00000000 c05433ac\n[   72.353422] 7d80: 00000000 de5d4020 bf233e40 de5d4054 00000000 bf236000 00000000 c0543538\n[   72.362002] 7da0: 00000000 bf233e40 c0543484 c05417e4 de1442a4 de5d04d0 bf233e40 de321300\n[   72.370582] 7dc0: c0caa5a4 c05429fc bf233be0 bf233e40 c0cbfa44 bf233e40 c0cbfa44 dd2f7740\n[   72.379148] 7de0: bf233f00 c05442f0 bf233e8c bf233e24 c0cbfa44 c0615ae0 00000000 bf233f00\n[   72.387718] 7e00: c0cbfa44 c010186c 200f0013 c0191650 de714380 00000000 600f0013 00000040\n[   72.396286] 7e20: dd2f7740 c018f1ac 00000001 c0c8356c 024000c0 c01a8854 c0c56e0e c028225c\n[   72.404863] 7e40: dd2f7740 c0191984 de714380 dd2f7740 00000001 bf233f00 bf233f00 c0cbfa44\n[   72.413440] 7e60: dd2f7740 bf233f00 00000001 dd49bf08 dd49bf30 c0230998 00000001 c0c8356c\n[   72.421997] 7e80: c0c4c536 c0cbfa44 c0c0512c c01d2070 bf233f0c 00007fff bf233f00 c01cf5b8\n[   72.430570] 7ea0: 00000000 c1475134 c01cee34 bf23411c bf233f48 bf234054 bf234150 00000000\n[   72.439144] 7ec0: 024002c2 de7fbf40 0009bc20 c02776ac ff800000 00000000 00000000 bf233670\n[   72.447723] 7ee0: 00000004 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n[   72.456298] 7f00: 00000000 00000000 00000000 00000000 c01d2590 0000aa41 00000000 00000000\n[   72.464862] 7f20: 000b2549 e12c3a41 00000051 de7e6000 0009bc20 c01d2630 00000530 e12b9000\n[   72.473438] 7f40: 0000aa41 e12c1434 e12c1211 e12c336c 00001150 00001620 00000000 00000000\n[   72.482003] 7f60: 00000000 000010fc 00000035 00000036 0000001d 0000001a 00000017 00000000\n[   72.490564] 7f80: de7e6000 3ba39a00 0009b008 0009b718 00000080 c0107704 de7e6000 00000000\n[   72.499141] 7fa0: 0009f609 c0107560 3ba39a00 0009b008 000a7b08 0000aa41 0009bc20 0000aa41\n[   72.507717] 7fc0: 3ba39a00 0009b008 0009b718 00000080 00000001 00000008 0009ab14 0009f609\n[   72.516290] 7fe0: bea31ab8 bea31aa8 0001e5eb b6e83b42 800f0030 000a7b08 0000ffff 0840ffff\n[   72.524883] [<c01a5d88>] (irq_find_matching_fwspec) from [<c01a6ea0>] (irq_create_fwspec_mapping+0x28/0x2e0)\n[   72.535174] [<c01a6ea0>] (irq_create_fwspec_mapping) from [<c01a71a4>] (irq_create_of_mapping+0x4c/0x54)\n[   72.545115] [<c01a71a4>] (irq_create_of_mapping) from [<c0653a70>] (of_irq_get+0x58/0x68)\n[   72.553699] [<c0653a70>] (of_irq_get) from [<c0544d24>] (platform_get_irq+0x1c/0xec)\n[   72.561828] [<c0544d24>] (platform_get_irq) from [<bf1d517c>] (tps6521x_pb_probe+0xd0/0x1a8 [tps65218_pwrbutton])\n[   72.572581] [<bf1d517c>] (tps6521x_pb_probe [tps65218_pwrbutton]) from [<c054537c>] (platform_drv_probe+0x4c/0xac)\n[   72.583426] [<c054537c>] (platform_drv_probe) from [<c05433ac>] (driver_probe_device+0x204/0x2dc)\n[   72.592729] [<c05433ac>] (driver_probe_device) from [<c0541884>] (bus_for_each_drv+0x58/0x8c)\n[   72.601657] [<c0541884>] (bus_for_each_drv) from [<c05430c8>] (__device_attach+0xb0/0x114)\n[   72.610324] [<c05430c8>] (__device_attach) from [<c0542760>] (bus_probe_device+0x88/0x90)\n[   72.618898] [<c0542760>] (bus_probe_device) from [<c0540ba8>] (device_add+0x3b8/0x560)\n[   72.627203] [<c0540ba8>] (device_add) from [<c05450a0>] (platform_device_add+0xa8/0x208)\n[   72.635693] [<c05450a0>] (platform_device_add) from [<c0571240>] (mfd_add_device+0x240/0x338)\n[   72.644634] [<c0571240>] (mfd_add_device) from [<c0571408>] (mfd_add_devices+0xa0/0x104)\n[   72.653120] [<c0571408>] (mfd_add_devices) from [<c05714d0>] (devm_mfd_add_devices+0x60/0xa8)\n[   72.662077] [<c05714d0>] (devm_mfd_add_devices) from [<bf2333fc>] (tps65217_probe+0xe8/0x2ec [tps65217])\n[   72.672026] [<bf2333fc>] (tps65217_probe [tps65217]) from [<c06148ac>] (i2c_device_probe+0x168/0x1f4)\n[   72.681695] [<c06148ac>] (i2c_device_probe) from [<c05433ac>] (driver_probe_device+0x204/0x2dc)\n[   72.690816] [<c05433ac>] (driver_probe_device) from [<c0543538>] (__driver_attach+0xb4/0xb8)\n[   72.699657] [<c0543538>] (__driver_attach) from [<c05417e4>] (bus_for_each_dev+0x60/0x94)\n[   72.708224] [<c05417e4>] (bus_for_each_dev) from [<c05429fc>] (bus_add_driver+0x18c/0x214)\n[   72.716892] [<c05429fc>] (bus_add_driver) from [<c05442f0>] (driver_register+0x78/0xf8)\n[   72.725280] [<c05442f0>] (driver_register) from [<c0615ae0>] (i2c_register_driver+0x38/0x80)\n[   72.734120] [<c0615ae0>] (i2c_register_driver) from [<c010186c>] (do_one_initcall+0x3c/0x178)\n[   72.743055] [<c010186c>] (do_one_initcall) from [<c0230998>] (do_init_module+0x5c/0x1d0)\n[   72.751537] [<c0230998>] (do_init_module) from [<c01d2070>] (load_module+0x1d10/0x21c0)\n[   72.759933] [<c01d2070>] (load_module) from [<c01d2630>] (SyS_init_module+0x110/0x154)\n[   72.768242] [<c01d2630>] (SyS_init_module) from [<c0107560>] (ret_fast_syscall+0x0/0x1c)\n[   72.776725] Code: e5944000 e1540006 0a00001b e594300c (e593c004)\n[   72.783181] ---[ end trace 0278ec325f4689b8 ]---\n\nFixes: 6556bdacf646 (\"mfd: tps65217: Add support for IRQs\")\nSigned-off-by: Milo Kim <woogyom.kim@gmail.com>\nSigned-off-by: Lee Jones <lee.jones@linaro.org>",
        "before_after_code_files": [
          "drivers/mfd/tps65217.c||drivers/mfd/tps65217.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mfd/tps65217.c||drivers/mfd/tps65217.c": [
          "File: drivers/mfd/tps65217.c -> drivers/mfd/tps65217.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:  return 0;",
          "425: }",
          "427: static const struct i2c_device_id tps65217_id_table[] = {",
          "428:  {\"tps65217\", TPS65217},",
          "429:  { /* sentinel */ }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: static int tps65217_remove(struct i2c_client *client)",
          "428: {",
          "429:  struct tps65217 *tps = i2c_get_clientdata(client);",
          "430:  unsigned int virq;",
          "431:  int i;",
          "433:  for (i = 0; i < ARRAY_SIZE(tps65217_irqs); i++) {",
          "434:   virq = irq_find_mapping(tps->irq_domain, i);",
          "435:   if (virq)",
          "436:    irq_dispose_mapping(virq);",
          "437:  }",
          "439:  irq_domain_remove(tps->irq_domain);",
          "440:  tps->irq_domain = NULL;",
          "442:  return 0;",
          "443: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:  },",
          "438:  .id_table = tps65217_id_table,",
          "439:  .probe  = tps65217_probe,",
          "440: };",
          "442: static int __init tps65217_init(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:  .remove  = tps65217_remove,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df492896e6dfb44fd1154f5402428d8e52705081",
      "candidate_info": {
        "commit_hash": "df492896e6dfb44fd1154f5402428d8e52705081",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/df492896e6dfb44fd1154f5402428d8e52705081",
        "files": [
          "arch/x86/kvm/irq_comm.c"
        ],
        "message": "KVM: x86: check for pic and ioapic presence before use\n\nSplit irqchip allows pic and ioapic routes to be used without them being\ncreated, which results in NULL access.  Check for NULL and avoid it.\n(The setup is too racy for a nicer solutions.)\n\nFound by syzkaller:\n\n  general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN\n  Dumping ftrace buffer:\n     (ftrace buffer empty)\n  Modules linked in:\n  CPU: 3 PID: 11923 Comm: kworker/3:2 Not tainted 4.9.0-rc5+ #27\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\n  Workqueue: events irqfd_inject\n  task: ffff88006a06c7c0 task.stack: ffff880068638000\n  RIP: 0010:[...]  [...] __lock_acquire+0xb35/0x3380 kernel/locking/lockdep.c:3221\n  RSP: 0000:ffff88006863ea20  EFLAGS: 00010006\n  RAX: dffffc0000000000 RBX: dffffc0000000000 RCX: 0000000000000000\n  RDX: 0000000000000039 RSI: 0000000000000000 RDI: 1ffff1000d0c7d9e\n  RBP: ffff88006863ef58 R08: 0000000000000001 R09: 0000000000000000\n  R10: 00000000000001c8 R11: 0000000000000000 R12: ffff88006a06c7c0\n  R13: 0000000000000001 R14: ffffffff8baab1a0 R15: 0000000000000001\n  FS:  0000000000000000(0000) GS:ffff88006d100000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00000000004abdd0 CR3: 000000003e2f2000 CR4: 00000000000026e0\n  Stack:\n   ffffffff894d0098 1ffff1000d0c7d56 ffff88006863ecd0 dffffc0000000000\n   ffff88006a06c7c0 0000000000000000 ffff88006863ecf8 0000000000000082\n   0000000000000000 ffffffff815dd7c1 ffffffff00000000 ffffffff00000000\n  Call Trace:\n   [...] lock_acquire+0x2a2/0x790 kernel/locking/lockdep.c:3746\n   [...] __raw_spin_lock include/linux/spinlock_api_smp.h:144\n   [...] _raw_spin_lock+0x38/0x50 kernel/locking/spinlock.c:151\n   [...] spin_lock include/linux/spinlock.h:302\n   [...] kvm_ioapic_set_irq+0x4c/0x100 arch/x86/kvm/ioapic.c:379\n   [...] kvm_set_ioapic_irq+0x8f/0xc0 arch/x86/kvm/irq_comm.c:52\n   [...] kvm_set_irq+0x239/0x640 arch/x86/kvm/../../../virt/kvm/irqchip.c:101\n   [...] irqfd_inject+0xb4/0x150 arch/x86/kvm/../../../virt/kvm/eventfd.c:60\n   [...] process_one_work+0xb40/0x1ba0 kernel/workqueue.c:2096\n   [...] worker_thread+0x214/0x18a0 kernel/workqueue.c:2230\n   [...] kthread+0x328/0x3e0 kernel/kthread.c:209\n   [...] ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:433\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nCc: stable@vger.kernel.org\nFixes: 49df6397edfc (\"KVM: x86: Split the APIC from the rest of IRQCHIP.\")\nSigned-off-by: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kvm/irq_comm.c||arch/x86/kvm/irq_comm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/irq_comm.c||arch/x86/kvm/irq_comm.c": [
          "File: arch/x86/kvm/irq_comm.c -> arch/x86/kvm/irq_comm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:       bool line_status)",
          "42: {",
          "43:  struct kvm_pic *pic = pic_irqchip(kvm);",
          "44:  return kvm_pic_set_irq(pic, e->irqchip.pin, irq_source_id, level);",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  if (!pic)",
          "51:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:          bool line_status)",
          "50: {",
          "51:  struct kvm_ioapic *ioapic = kvm->arch.vioapic;",
          "52:  return kvm_ioapic_set_irq(ioapic, e->irqchip.pin, irq_source_id, level,",
          "53:     line_status);",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  if (!ioapic)",
          "63:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae31fe51a3cceaa0cabdb3058f69669ecb47f12e",
      "candidate_info": {
        "commit_hash": "ae31fe51a3cceaa0cabdb3058f69669ecb47f12e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ae31fe51a3cceaa0cabdb3058f69669ecb47f12e",
        "files": [
          "arch/x86/events/core.c"
        ],
        "message": "perf/x86: Restore TASK_SIZE check on frame pointer\n\nThe following commit:\n\n  75925e1ad7f5 (\"perf/x86: Optimize stack walk user accesses\")\n\n... switched from copy_from_user_nmi() to __copy_from_user_nmi() with a manual\naccess_ok() check.\n\nUnfortunately, copy_from_user_nmi() does an explicit check against TASK_SIZE,\nwhereas the access_ok() uses whatever the current address limit of the task is.\n\nWe are getting NMIs when __probe_kernel_read() has switched to KERNEL_DS, and\nthen see vmalloc faults when we access what looks like pointers into vmalloc\nspace:\n\n  [] WARNING: CPU: 3 PID: 3685731 at arch/x86/mm/fault.c:435 vmalloc_fault+0x289/0x290\n  [] CPU: 3 PID: 3685731 Comm: sh Tainted: G        W       4.6.0-5_fbk1_223_gdbf0f40 #1\n  [] Call Trace:\n  []  <NMI>  [<ffffffff814717d1>] dump_stack+0x4d/0x6c\n  []  [<ffffffff81076e43>] __warn+0xd3/0xf0\n  []  [<ffffffff81076f2d>] warn_slowpath_null+0x1d/0x20\n  []  [<ffffffff8104a899>] vmalloc_fault+0x289/0x290\n  []  [<ffffffff8104b5a0>] __do_page_fault+0x330/0x490\n  []  [<ffffffff8104b70c>] do_page_fault+0xc/0x10\n  []  [<ffffffff81794e82>] page_fault+0x22/0x30\n  []  [<ffffffff81006280>] ? perf_callchain_user+0x100/0x2a0\n  []  [<ffffffff8115124f>] get_perf_callchain+0x17f/0x190\n  []  [<ffffffff811512c7>] perf_callchain+0x67/0x80\n  []  [<ffffffff8114e750>] perf_prepare_sample+0x2a0/0x370\n  []  [<ffffffff8114e840>] perf_event_output+0x20/0x60\n  []  [<ffffffff8114aee7>] ? perf_event_update_userpage+0xc7/0x130\n  []  [<ffffffff8114ea01>] __perf_event_overflow+0x181/0x1d0\n  []  [<ffffffff8114f484>] perf_event_overflow+0x14/0x20\n  []  [<ffffffff8100a6e3>] intel_pmu_handle_irq+0x1d3/0x490\n  []  [<ffffffff8147daf7>] ? copy_user_enhanced_fast_string+0x7/0x10\n  []  [<ffffffff81197191>] ? vunmap_page_range+0x1a1/0x2f0\n  []  [<ffffffff811972f1>] ? unmap_kernel_range_noflush+0x11/0x20\n  []  [<ffffffff814f2056>] ? ghes_copy_tofrom_phys+0x116/0x1f0\n  []  [<ffffffff81040d1d>] ? x2apic_send_IPI_self+0x1d/0x20\n  []  [<ffffffff8100411d>] perf_event_nmi_handler+0x2d/0x50\n  []  [<ffffffff8101ea31>] nmi_handle+0x61/0x110\n  []  [<ffffffff8101ef94>] default_do_nmi+0x44/0x110\n  []  [<ffffffff8101f13b>] do_nmi+0xdb/0x150\n  []  [<ffffffff81795187>] end_repeat_nmi+0x1a/0x1e\n  []  [<ffffffff8147daf7>] ? copy_user_enhanced_fast_string+0x7/0x10\n  []  [<ffffffff8147daf7>] ? copy_user_enhanced_fast_string+0x7/0x10\n  []  [<ffffffff8147daf7>] ? copy_user_enhanced_fast_string+0x7/0x10\n  []  <<EOE>>  <IRQ>  [<ffffffff8115d05e>] ? __probe_kernel_read+0x3e/0xa0\n\nFix this by moving the valid_user_frame() check to before the uaccess\nthat loads the return address and the pointer to the next frame.\n\nSigned-off-by: Johannes Weiner <hannes@cmpxchg.org>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Alexander Shishkin <alexander.shishkin@linux.intel.com>\nCc: Arnaldo Carvalho de Melo <acme@redhat.com>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Stephane Eranian <eranian@google.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vince Weaver <vincent.weaver@maine.edu>\nCc: linux-kernel@vger.kernel.org\nFixes: 75925e1ad7f5 (\"perf/x86: Optimize stack walk user accesses\")\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/events/core.c||arch/x86/events/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/events/core.c||arch/x86/events/core.c": [
          "File: arch/x86/events/core.c -> arch/x86/events/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:   frame.next_frame     = 0;",
          "2353:   frame.return_address = 0;",
          "2356:    break;",
          "2358:   bytes = __copy_from_user_nmi(&frame.next_frame, fp, 4);",
          "",
          "[Removed Lines]",
          "2355:   if (!access_ok(VERIFY_READ, fp, 8))",
          "",
          "[Added Lines]",
          "2355:   if (!valid_user_frame(fp, sizeof(frame)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2362:   if (bytes != 0)",
          "2363:    break;",
          "2368:   perf_callchain_store(entry, cs_base + frame.return_address);",
          "2369:   fp = compat_ptr(ss_base + frame.next_frame);",
          "2370:  }",
          "",
          "[Removed Lines]",
          "2365:   if (!valid_user_frame(fp, sizeof(frame)))",
          "2366:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2413:   frame.next_frame      = NULL;",
          "2414:   frame.return_address = 0;",
          "2417:    break;",
          "2419:   bytes = __copy_from_user_nmi(&frame.next_frame, fp, sizeof(*fp));",
          "",
          "[Removed Lines]",
          "2416:   if (!access_ok(VERIFY_READ, fp, sizeof(*fp) * 2))",
          "",
          "[Added Lines]",
          "2413:   if (!valid_user_frame(fp, sizeof(frame)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2423:   if (bytes != 0)",
          "2424:    break;",
          "2429:   perf_callchain_store(entry, frame.return_address);",
          "2430:   fp = (void __user *)frame.next_frame;",
          "2431:  }",
          "",
          "[Removed Lines]",
          "2426:   if (!valid_user_frame(fp, sizeof(frame)))",
          "2427:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
      "candidate_info": {
        "commit_hash": "1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
        "files": [
          "drivers/mfd/wm8994-core.c"
        ],
        "message": "mfd: wm8994-core: Don't use managed regulator bulk get API\n\nThe kernel WARNs and then crashes today if wm8994_device_init() fails\nafter calling devm_regulator_bulk_get().\n\nThat happens because there are multiple devices involved here and the\norder in which managed resources are freed isn't correct.\n\nThe regulators are added as children of wm8994->dev.  Whereas,\ndevm_regulator_bulk_get() receives wm8994->dev as the device, though it\ngets the same regulators which were added as children of wm8994->dev\nearlier.\n\nDuring failures, the children are removed first and the core eventually\ncalls regulator_unregister() for them. As regulator_put() was never done\nfor them (opposite of devm_regulator_bulk_get()), the kernel WARNs at\n\n\tWARN_ON(rdev->open_count);\n\nAnd eventually it crashes from debugfs_remove_recursive().\n\n--------x------------------x----------------\n\n wm8994 3-001a: Device is not a WM8994, ID is 0\n ------------[ cut here ]------------\n WARNING: CPU: 0 PID: 1 at /mnt/ssd/all/work/repos/devel/linux/drivers/regulator/core.c:4072 regulator_unregister+0xc8/0xd0\n Modules linked in:\n CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.8.0-rc6-00154-g54fe84cbd50b #41\n Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)\n [<c010e24c>] (unwind_backtrace) from [<c010af38>] (show_stack+0x10/0x14)\n [<c010af38>] (show_stack) from [<c032a1c4>] (dump_stack+0x88/0x9c)\n [<c032a1c4>] (dump_stack) from [<c011a98c>] (__warn+0xe8/0x100)\n [<c011a98c>] (__warn) from [<c011aa54>] (warn_slowpath_null+0x20/0x28)\n [<c011aa54>] (warn_slowpath_null) from [<c0384a0c>] (regulator_unregister+0xc8/0xd0)\n [<c0384a0c>] (regulator_unregister) from [<c0406434>] (release_nodes+0x16c/0x1dc)\n [<c0406434>] (release_nodes) from [<c04039c4>] (__device_release_driver+0x8c/0x110)\n [<c04039c4>] (__device_release_driver) from [<c0403a64>] (device_release_driver+0x1c/0x28)\n [<c0403a64>] (device_release_driver) from [<c0402b24>] (bus_remove_device+0xd8/0x104)\n [<c0402b24>] (bus_remove_device) from [<c03ffcd8>] (device_del+0x10c/0x218)\n [<c03ffcd8>] (device_del) from [<c0404e4c>] (platform_device_del+0x1c/0x88)\n [<c0404e4c>] (platform_device_del) from [<c0404ec4>] (platform_device_unregister+0xc/0x20)\n [<c0404ec4>] (platform_device_unregister) from [<c0428bc0>] (mfd_remove_devices_fn+0x5c/0x64)\n [<c0428bc0>] (mfd_remove_devices_fn) from [<c03ff9d8>] (device_for_each_child_reverse+0x4c/0x78)\n [<c03ff9d8>] (device_for_each_child_reverse) from [<c04288c4>] (mfd_remove_devices+0x20/0x30)\n [<c04288c4>] (mfd_remove_devices) from [<c042758c>] (wm8994_device_init+0x2ac/0x7f0)\n [<c042758c>] (wm8994_device_init) from [<c04f14a8>] (i2c_device_probe+0x178/0x1fc)\n [<c04f14a8>] (i2c_device_probe) from [<c04036fc>] (driver_probe_device+0x214/0x2c0)\n [<c04036fc>] (driver_probe_device) from [<c0403854>] (__driver_attach+0xac/0xb0)\n [<c0403854>] (__driver_attach) from [<c0401a74>] (bus_for_each_dev+0x68/0x9c)\n [<c0401a74>] (bus_for_each_dev) from [<c0402cf0>] (bus_add_driver+0x1a0/0x218)\n [<c0402cf0>] (bus_add_driver) from [<c040406c>] (driver_register+0x78/0xf8)\n [<c040406c>] (driver_register) from [<c04f20a0>] (i2c_register_driver+0x34/0x84)\n [<c04f20a0>] (i2c_register_driver) from [<c01017d0>] (do_one_initcall+0x40/0x170)\n [<c01017d0>] (do_one_initcall) from [<c0a00dbc>] (kernel_init_freeable+0x15c/0x1fc)\n [<c0a00dbc>] (kernel_init_freeable) from [<c06e07b0>] (kernel_init+0x8/0x114)\n [<c06e07b0>] (kernel_init) from [<c0107978>] (ret_from_fork+0x14/0x3c)\n ---[ end trace 0919d3d0bc998260 ]---\n\n [snip..]\n\n Unable to handle kernel NULL pointer dereference at virtual address 00000078\n pgd = c0004000\n [00000078] *pgd=00000000\n Internal error: Oops: 5 [#1] PREEMPT SMP ARM\n Modules linked in:\n CPU: 0 PID: 1 Comm: swapper/0 Tainted: G        W       4.8.0-rc6-00154-g54fe84cbd50b #41\n Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)\n task: ee874000 task.stack: ee878000\n PC is at down_write+0x14/0x54\n LR is at debugfs_remove_recursive+0x30/0x150\n\n [snip..]\n\n [<c06e489c>] (down_write) from [<c02e9954>] (debugfs_remove_recursive+0x30/0x150)\n [<c02e9954>] (debugfs_remove_recursive) from [<c0382b78>] (_regulator_put+0x24/0xac)\n [<c0382b78>] (_regulator_put) from [<c0382c1c>] (regulator_put+0x1c/0x2c)\n [<c0382c1c>] (regulator_put) from [<c0406434>] (release_nodes+0x16c/0x1dc)\n [<c0406434>] (release_nodes) from [<c04035d4>] (driver_probe_device+0xec/0x2c0)\n [<c04035d4>] (driver_probe_device) from [<c0403854>] (__driver_attach+0xac/0xb0)\n [<c0403854>] (__driver_attach) from [<c0401a74>] (bus_for_each_dev+0x68/0x9c)\n [<c0401a74>] (bus_for_each_dev) from [<c0402cf0>] (bus_add_driver+0x1a0/0x218)\n [<c0402cf0>] (bus_add_driver) from [<c040406c>] (driver_register+0x78/0xf8)\n [<c040406c>] (driver_register) from [<c04f20a0>] (i2c_register_driver+0x34/0x84)\n [<c04f20a0>] (i2c_register_driver) from [<c01017d0>] (do_one_initcall+0x40/0x170)\n [<c01017d0>] (do_one_initcall) from [<c0a00dbc>] (kernel_init_freeable+0x15c/0x1fc)\n [<c0a00dbc>] (kernel_init_freeable) from [<c06e07b0>] (kernel_init+0x8/0x114)\n [<c06e07b0>] (kernel_init) from [<c0107978>] (ret_from_fork+0x14/0x3c)\n Code: e1a04000 f590f000 e3a03001 e34f3fff (e1902f9f)\n ---[ end trace 0919d3d0bc998262 ]---\n\n--------x------------------x----------------\n\nFix the kernel warnings and crashes by using regulator_bulk_get()\ninstead of devm_regulator_bulk_get() and explicitly freeing the supplies\nin exit paths.\n\nTested on Exynos 5250, dual core ARM A15 machine.\n\nSigned-off-by: Viresh Kumar <viresh.kumar@linaro.org>\nAcked-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>\nSigned-off-by: Lee Jones <lee.jones@linaro.org>",
        "before_after_code_files": [
          "drivers/mfd/wm8994-core.c||drivers/mfd/wm8994-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mfd/wm8994-core.c||drivers/mfd/wm8994-core.c": [
          "File: drivers/mfd/wm8994-core.c -> drivers/mfd/wm8994-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:   BUG();",
          "394:   goto err;",
          "395:  }",
          "398:      wm8994->supplies);",
          "399:  if (ret != 0) {",
          "400:   dev_err(wm8994->dev, \"Failed to get supplies: %d\\n\", ret);",
          "",
          "[Removed Lines]",
          "397:  ret = devm_regulator_bulk_get(wm8994->dev, wm8994->num_supplies,",
          "",
          "[Added Lines]",
          "402:  ret = regulator_bulk_get(wm8994->dev, wm8994->num_supplies,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:         wm8994->supplies);",
          "406:  if (ret != 0) {",
          "407:   dev_err(wm8994->dev, \"Failed to enable supplies: %d\\n\", ret);",
          "409:  }",
          "411:  ret = wm8994_reg_read(wm8994, WM8994_SOFTWARE_RESET);",
          "",
          "[Removed Lines]",
          "408:   goto err;",
          "",
          "[Added Lines]",
          "413:   goto err_regulator_free;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596: err_enable:",
          "597:  regulator_bulk_disable(wm8994->num_supplies,",
          "598:           wm8994->supplies);",
          "599: err:",
          "600:  mfd_remove_devices(wm8994->dev);",
          "601:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: err_regulator_free:",
          "605:  regulator_bulk_free(wm8994->num_supplies, wm8994->supplies);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607:  wm8994_irq_exit(wm8994);",
          "608:  regulator_bulk_disable(wm8994->num_supplies,",
          "609:           wm8994->supplies);",
          "610:  mfd_remove_devices(wm8994->dev);",
          "611: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617:  regulator_bulk_free(wm8994->num_supplies, wm8994->supplies);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40bea976c72b9ee60f8d097852deb53ccbeaffbe",
      "candidate_info": {
        "commit_hash": "40bea976c72b9ee60f8d097852deb53ccbeaffbe",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/40bea976c72b9ee60f8d097852deb53ccbeaffbe",
        "files": [
          "drivers/net/wireless/ath/ath9k/common-spectral.c"
        ],
        "message": "ath9k: fix NULL pointer dereference\n\nrelay_open() may return NULL, check the return value to avoid the crash.\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000040\nIP: [<ffffffffa01a95c5>] ath_cmn_process_fft+0xd5/0x700 [ath9k_common]\nPGD 41cf28067 PUD 41be92067 PMD 0\nOops: 0000 [#1] SMP\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.8.6+ #35\nHardware name: Hewlett-Packard h8-1080t/2A86, BIOS 6.15    07/04/2011\ntask: ffffffff81e0c4c0 task.stack: ffffffff81e00000\nRIP: 0010:[<ffffffffa01a95c5>] [<ffffffffa01a95c5>] ath_cmn_process_fft+0xd5/0x700 [ath9k_common]\nRSP: 0018:ffff88041f203ca0 EFLAGS: 00010293\nRAX: 0000000000000000 RBX: 000000000000059f RCX: 0000000000000000\nRDX: 0000000000000000 RSI: 0000000000000040 RDI: ffffffff81f0ca98\nRBP: ffff88041f203dc8 R08: ffffffffffffffff R09: 00000000000000ff\nR10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\nR13: ffffffff81f0ca98 R14: 0000000000000000 R15: 0000000000000000\nFS:  0000000000000000(0000) GS:ffff88041f200000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000040 CR3: 000000041b6ec000 CR4: 00000000000006f0\nStack:\n0000000000000363 00000000000003f3 00000000000003f3 00000000000001f9\n000000000000049a 0000000001252c04 ffff88041f203e44 ffff880417b4bfd0\n0000000000000008 ffff88041785b9c0 0000000000000002 ffff88041613dc60\n\nCall Trace:\n<IRQ>\n[<ffffffffa01b6441>] ath9k_tasklet+0x1b1/0x220 [ath9k]\n[<ffffffff8105d8dd>] tasklet_action+0x4d/0xf0\n[<ffffffff8105dde2>] __do_softirq+0x92/0x2a0\n\nReported-by: Devin Tuchsen <devin.tuchsen@gmail.com>\nTested-by: Devin Tuchsen <devin.tuchsen@gmail.com>\nSigned-off-by: Miaoqing Pan <miaoqing@codeaurora.org>\nSigned-off-by: Kalle Valo <kvalo@qca.qualcomm.com>",
        "before_after_code_files": [
          "drivers/net/wireless/ath/ath9k/common-spectral.c||drivers/net/wireless/ath/ath9k/common-spectral.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/ath/ath9k/common-spectral.c||drivers/net/wireless/ath/ath9k/common-spectral.c": [
          "File: drivers/net/wireless/ath/ath9k/common-spectral.c -> drivers/net/wireless/ath/ath9k/common-spectral.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:  if (!(radar_info->pulse_bw_info & SPECTRAL_SCAN_BITMASK))",
          "529:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:  if (!spec_priv->rfs_chan_spec_scan)",
          "532:   return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1073: void ath9k_cmn_spectral_deinit_debug(struct ath_spec_scan_priv *spec_priv)",
          "1074: {",
          "1076:   relay_close(spec_priv->rfs_chan_spec_scan);",
          "1077:   spec_priv->rfs_chan_spec_scan = NULL;",
          "1078:  }",
          "",
          "[Removed Lines]",
          "1075:  if (IS_ENABLED(CONFIG_ATH9K_DEBUGFS)) {",
          "",
          "[Added Lines]",
          "1078:  if (IS_ENABLED(CONFIG_ATH9K_DEBUGFS) && spec_priv->rfs_chan_spec_scan) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:          debugfs_phy,",
          "1087:          1024, 256, &rfs_spec_scan_cb,",
          "1088:          NULL);",
          "1089:  debugfs_create_file(\"spectral_scan_ctl\",",
          "1090:        S_IRUSR | S_IWUSR,",
          "1091:        debugfs_phy, spec_priv,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:  if (!spec_priv->rfs_chan_spec_scan)",
          "1093:   return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}