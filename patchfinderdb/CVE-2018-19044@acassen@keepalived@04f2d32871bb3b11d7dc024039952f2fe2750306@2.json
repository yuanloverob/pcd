{
  "cve_id": "CVE-2018-19044",
  "cve_desc": "keepalived 2.0.8 didn't check for pathnames with symlinks when writing data to a temporary file upon a call to PrintData or PrintStats. This allowed local users to overwrite arbitrary files if fs.protected_symlinks is set to 0, as demonstrated by a symlink from /tmp/keepalived.data or /tmp/keepalived.stats to /etc/passwd.",
  "repo": "acassen/keepalived",
  "patch_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
  "patch_info": {
    "commit_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
    "repo": "acassen/keepalived",
    "commit_url": "https://github.com/acassen/keepalived/commit/04f2d32871bb3b11d7dc024039952f2fe2750306",
    "files": [
      "keepalived/core/main.c",
      "keepalived/core/pidfile.c",
      "keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c",
      "lib/memory.c",
      "lib/notify.c",
      "lib/parser.c",
      "lib/utils.c",
      "lib/utils.h"
    ],
    "message": "When opening files for write, ensure they aren't symbolic links\n\nIssue #1048 identified that if, for example, a non privileged user\ncreated a symbolic link from /etc/keepalvied.data to /etc/passwd,\nwriting to /etc/keepalived.data (which could be invoked via DBus)\nwould cause /etc/passwd to be overwritten.\n\nThis commit stops keepalived writing to pathnames where the ultimate\ncomponent is a symbolic link, by setting O_NOFOLLOW whenever opening\na file for writing.\n\nThis might break some setups, where, for example, /etc/keepalived.data\nwas a symbolic link to /home/fred/keepalived.data. If this was the case,\ninstead create a symbolic link from /home/fred/keepalived.data to\n/tmp/keepalived.data, so that the file is still accessible via\n/home/fred/keepalived.data.\n\nThere doesn't appear to be a way around this backward incompatibility,\nsince even checking if the pathname is a symbolic link prior to opening\nfor writing would create a race condition.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
    "before_after_code_files": [
      "keepalived/core/main.c||keepalived/core/main.c",
      "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
      "keepalived/core/smtp.c||keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c||lib/logger.c",
      "lib/memory.c||lib/memory.c",
      "lib/notify.c||lib/notify.c",
      "lib/parser.c||lib/parser.c",
      "lib/utils.c||lib/utils.c",
      "lib/utils.h||lib/utils.h"
    ]
  },
  "patch_diff": {
    "keepalived/core/main.c||keepalived/core/main.c": [
      "File: keepalived/core/main.c -> keepalived/core/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:    __set_bit(DONT_FORK_BIT, &debug);",
      "1400:    __set_bit(NO_SYSLOG_BIT, &debug);",
      "1401:    if (optarg && optarg[0]) {",
      "1403:     if (fd == -1) {",
      "1404:      fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);",
      "1405:      exit(EXIT_FAILURE);",
      "",
      "[Removed Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
      "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: pidfile_write(const char *pid_file, int pid)",
      "61: {",
      "62:  FILE *pidfile = NULL;",
      "65:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
      "",
      "[Removed Lines]",
      "63:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "63:  int pidfd = open(pid_file, O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/smtp.c||keepalived/core/smtp.c": [
      "File: keepalived/core/smtp.c -> keepalived/core/smtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "570: static void",
      "571: smtp_log_to_file(smtp_t *smtp)",
      "572: {",
      "574:  time_t now;",
      "575:  struct tm tm;",
      "576:  char time_buf[25];",
      "",
      "[Removed Lines]",
      "573:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "[Added Lines]",
      "573:  FILE *fp = fopen_safe(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c": [
      "File: keepalived/vrrp/vrrp_dbus.c -> keepalived/vrrp/vrrp_dbus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "594:  size_t length;",
      "595:  gchar *ret = NULL;",
      "598:  if (f) {",
      "599:   fseek(f, 0, SEEK_END);",
      "600:   length = (size_t)ftell(f);",
      "",
      "[Removed Lines]",
      "597:  f = fopen(filepath, \"rb\");",
      "",
      "[Added Lines]",
      "597:  f = fopen(filepath, \"r\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c": [
      "File: keepalived/vrrp/vrrp_json.c -> keepalived/vrrp/vrrp_json.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include \"vrrp_iprule.h\"",
      "38: #include \"logger.h\"",
      "39: #include \"timer.h\"",
      "41: static inline double",
      "42: timeval_to_double(const timeval_t *t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
      "56:   return;",
      "59:  if (!file) {",
      "60:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",",
      "61:    errno, strerror(errno));",
      "",
      "[Removed Lines]",
      "58:  file = fopen (\"/tmp/keepalived.json\",\"w\");",
      "",
      "[Added Lines]",
      "59:  file = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
      "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1206:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
      "1209:    fprintf(tf, \"%d\\n\", track_file_init_value);",
      "1210:    fclose(tf);",
      "1211:   }",
      "",
      "[Removed Lines]",
      "1208:   if ((tf = fopen(tfile->file_path, \"w\"))) {",
      "",
      "[Added Lines]",
      "1208:   if ((tf = fopen_safe(tfile->file_path, \"w\"))) {",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
      "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"vrrp.h\"",
      "33: #include \"vrrp_data.h\"",
      "34: #include \"vrrp_print.h\"",
      "36: static const char *dump_file = \"/tmp/keepalived.data\";",
      "37: static const char *stats_file = \"/tmp/keepalived.stats\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: void",
      "40: vrrp_print_data(void)",
      "41: {",
      "44:  if (!file) {",
      "45:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "42:  FILE *file = fopen (dump_file, \"w\");",
      "",
      "[Added Lines]",
      "43:  FILE *file = fopen_safe(dump_file, \"w\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55: void",
      "56: vrrp_print_stats(void)",
      "57: {",
      "61:  if (!file) {",
      "62:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "58:  FILE *file;",
      "59:  file = fopen (stats_file, \"w\");",
      "",
      "[Added Lines]",
      "59:  FILE *file = fopen_safe(stats_file, \"w\");",
      "60:  element e;",
      "61:  vrrp_t *vrrp;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:   return;",
      "65:  }",
      "73:   fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);",
      "74:   fprintf(file, \"  Advertisements:\\n\");",
      "75:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);",
      "76:   fprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);",
      "77:   fprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);",
      "80:   fprintf(file, \"  Packet Errors:\\n\");",
      "81:   fprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);",
      "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);",
      "",
      "[Removed Lines]",
      "67:  list l = vrrp_data->vrrp;",
      "68:  element e;",
      "69:  vrrp_t *vrrp;",
      "71:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
      "72:   vrrp = ELEMENT_DATA(e);",
      "78:   fprintf(file, \"  Released master: %d\\n\",",
      "79:    vrrp->stats->release_master);",
      "",
      "[Added Lines]",
      "70:  LIST_FOREACH(vrrp_data->vrrp, vrrp, e) {",
      "76:   fprintf(file, \"  Released master: %d\\n\", vrrp->stats->release_master);",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
      "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1134:      NULL,",
      "1135: #endif",
      "1136:      global_data->instance_name);",
      "1138:  FREE(file_name);",
      "1140:  set_time_now();",
      "",
      "[Removed Lines]",
      "1137:  fp = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "1137:  fp = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/logger.c||lib/logger.c": [
      "File: lib/logger.c -> lib/logger.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:  file_name = make_file_name(name, prog, namespace, instance);",
      "82:  if (log_file) {",
      "83:   int n = fileno(log_file);",
      "84:   fcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));",
      "",
      "[Removed Lines]",
      "81:  log_file = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "81:  log_file = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/memory.c||lib/memory.c": [
      "File: lib/memory.c -> lib/memory.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "621:  }",
      "623:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
      "625:  if (log_op == NULL) {",
      "626:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
      "627:   log_op = stderr;",
      "",
      "[Removed Lines]",
      "624:  log_op = fopen(log_name, \"a\");",
      "",
      "[Added Lines]",
      "624:  log_op = fopen_safe(log_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/notify.c||lib/notify.c": [
      "File: lib/notify.c -> lib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:     notify_fifo_exec(master, script_exit, fifo, fifo->script);",
      "240:     log_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);",
      "241:     if (fifo->created_fifo) {",
      "242:      unlink(fifo->name);",
      "",
      "[Removed Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {",
      "",
      "[Added Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW)) == -1) {",
      "",
      "---------------"
    ],
    "lib/parser.c||lib/parser.c": [
      "File: lib/parser.c -> lib/parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "455: {",
      "456:  unsigned int i;",
      "457:  keyword_t *keyword_vec;",
      "460:  if (!level) {",
      "461:   snprintf(file_name, sizeof(file_name), \"/tmp/keywords.%d\", getpid());",
      "463:   if (!fp)",
      "464:    return;",
      "465:  }",
      "",
      "[Removed Lines]",
      "458:  char file_name[21];",
      "462:   fp = fopen(file_name, \"w\");",
      "",
      "[Added Lines]",
      "458:  char file_name[22];",
      "462:   fp = fopen_safe(file_name, \"w\");",
      "",
      "---------------"
    ],
    "lib/utils.c||lib/utils.c": [
      "File: lib/utils.c -> lib/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  nptrs = backtrace(buffer, 100);",
      "125:  if (file_name) {",
      "127:   if (str)",
      "128:    dprintf(fd, \"%s\\n\", str);",
      "129:   backtrace_symbols_fd(buffer, nptrs, fd);",
      "",
      "[Removed Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
      "",
      "[Added Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "788:  return !strcmp(str1, str2);",
      "789: }",
      "791: void",
      "792: set_std_fd(bool force)",
      "793: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "793: FILE *fopen_safe(const char *path, const char *mode)",
      "794: {",
      "795:  int fd;",
      "796:  FILE *file;",
      "797:  int flags = O_NOFOLLOW | O_CREAT;",
      "799:  if (mode[0] == 'r')",
      "800:   return fopen(path, mode);",
      "802:  if (mode[0] != 'a' && mode[0] != 'w')",
      "803:   return NULL;",
      "805:  if (mode[1] &&",
      "806:      (mode[1] != '+' || mode[2]))",
      "807:   return NULL;",
      "809:  if (mode[0] == 'w')",
      "810:   flags |= O_TRUNC;",
      "811:  else",
      "812:   flags |= O_APPEND;",
      "814:  if (mode[1])",
      "815:   flags |= O_RDWR;",
      "816:  else",
      "817:   flags |= O_WRONLY;",
      "819:  fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "820:  if (fd == -1)",
      "821:   return NULL;",
      "823:  file = fdopen (fd, \"w\");",
      "824:  if (!file) {",
      "825:   close(fd);",
      "826:   return NULL;",
      "827:  }",
      "829:  return file;",
      "830: }",
      "",
      "---------------"
    ],
    "lib/utils.h||lib/utils.h": [
      "File: lib/utils.h -> lib/utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: extern int inet_sockaddrcmp(const struct sockaddr_storage *, const struct sockaddr_storage *);",
      "183: extern char *get_local_name(void);",
      "184: extern bool string_equal(const char *, const char *);",
      "185: extern void set_std_fd(bool);",
      "186: extern void close_std_fd(void);",
      "187: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "185: extern FILE *fopen_safe(const char *, const char *);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7f440efe8fa33a05ed1b01ed6c745e54a6c8add",
      "candidate_info": {
        "commit_hash": "e7f440efe8fa33a05ed1b01ed6c745e54a6c8add",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/e7f440efe8fa33a05ed1b01ed6c745e54a6c8add",
        "files": [
          "keepalived/bfd/bfd_daemon.c",
          "keepalived/check/check_daemon.c",
          "keepalived/core/main.c",
          "keepalived/core/pidfile.c",
          "keepalived/vrrp/vrrp_daemon.c",
          "lib/scheduler.c"
        ],
        "message": "Revert parts of commits 97aec76 and 96be593\n\nCommits 96be5938 - \"Add -t config-test option\" and 97aec76c -\n\"Update config-test option so keepalived exits with status 1 on failure\"\nare no longer needed with the new way config-test is handled.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c",
          "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
          "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c",
          "lib/scheduler.c||lischeduler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/pidfile.c||keepalived/core/pidfile.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/pidfile.c||keepalived/core/pidfile.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c": [
          "File: keepalived/bfd/bfd_daemon.c -> keepalived/bfd/bfd_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  }",
          "265:   log_message(LOG_ALERT, \"BFD child process(%d) died: Respawning\",",
          "266:        pid);",
          "267:   start_bfd_child();",
          "",
          "[Removed Lines]",
          "262:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "263:   raise(SIGTERM);",
          "264:  else if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "[Added Lines]",
          "262:  if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "---------------"
        ],
        "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c": [
          "File: keepalived/check/check_daemon.c -> keepalived/check/check_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   script_killall(master, SIGTERM, true);",
          "158:   clear_services();",
          "160:  if (schedule_next_thread) {",
          "",
          "[Removed Lines]",
          "156:  if (!__test_bit(DONT_RELEASE_IPVS_BIT, &debug) &&",
          "157:      !__test_bit(CONFIG_TEST_BIT, &debug))",
          "",
          "[Added Lines]",
          "156:  if (!__test_bit(DONT_RELEASE_IPVS_BIT, &debug))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:  }",
          "408:   log_message(LOG_ALERT, \"Healthcheck child process(%d) died: Respawning\", pid);",
          "409:   start_check_child();",
          "410:  } else {",
          "",
          "[Removed Lines]",
          "405:  if (!__test_bit(CONFIG_TEST_BIT, &debug))",
          "406:   raise(SIGTERM);",
          "407:  else if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "[Added Lines]",
          "404:  if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: static void",
          "312: parent_child_remover(thread_t *thread)",
          "313: {",
          "323:         if (prog_type == PROG_TYPE_PARENT) {",
          "324: #ifdef _WITH_VRRP_",
          "325:                 if (thread->u.c.pid == vrrp_child)",
          "",
          "[Removed Lines]",
          "314:  int exit_status;",
          "316:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "317:   exit_status = WIFEXITED(thread->u.c.status) ? WEXITSTATUS(thread->u.c.status) : 0;",
          "319:   if (exit_status && exit_status != KEEPALIVED_EXIT_OK)",
          "320:          test_exit_status = EXIT_FAILURE;",
          "321:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:                 if (thread->u.c.pid == bfd_child)",
          "334:                         bfd_child = 0;",
          "335: #endif",
          "349:  }",
          "350: }",
          "351: #endif",
          "",
          "[Removed Lines]",
          "337:   if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "338: #ifdef _WITH_VRRP_",
          "339:    if (vrrp_child == 0)",
          "340: #endif",
          "341: #ifdef _WITH_LVS_",
          "342:    if (checkers_child == 0)",
          "343: #endif",
          "344: #ifdef _WITH_BFD_",
          "345:    if (bfd_child == 0)",
          "346: #endif",
          "347:     raise(SIGTERM);",
          "348:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "655: #ifdef _WITH_VRRP_",
          "656:  if (vrrp_child > 0) {",
          "659:    if (errno == ESRCH)",
          "660:     vrrp_child = 0;",
          "",
          "[Removed Lines]",
          "657:   if (!__test_bit(CONFIG_TEST_BIT, &debug) && kill(vrrp_child, SIGTERM)) {",
          "",
          "[Added Lines]",
          "633:   if (kill(vrrp_child, SIGTERM)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "665: #endif",
          "666: #ifdef _WITH_LVS_",
          "667:  if (checkers_child > 0) {",
          "669:    if (errno == ESRCH)",
          "670:     checkers_child = 0;",
          "671:   }",
          "",
          "[Removed Lines]",
          "668:   if (!__test_bit(CONFIG_TEST_BIT, &debug) && kill(checkers_child, SIGTERM)) {",
          "",
          "[Added Lines]",
          "644:   if (kill(checkers_child, SIGTERM)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "675: #endif",
          "676: #ifdef _WITH_BFD_",
          "677:  if (bfd_child > 0) {",
          "679:    if (errno == ESRCH)",
          "680:     bfd_child = 0;",
          "681:   }",
          "",
          "[Removed Lines]",
          "678:   if (!__test_bit(CONFIG_TEST_BIT, &debug) && kill(bfd_child, SIGTERM)) {",
          "",
          "[Added Lines]",
          "654:   if (kill(bfd_child, SIGTERM)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1619: #endif",
          "1620:  close_std_fd();",
          "1623: }",
          "",
          "[Removed Lines]",
          "1622:  exit(test_exit_status);",
          "",
          "[Added Lines]",
          "1598:  exit(KEEPALIVED_EXIT_OK);",
          "",
          "---------------"
        ],
        "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
          "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: pidfile_write(const char *pid_file, int pid)",
          "61: {",
          "62:  FILE *pidfile = NULL;",
          "69:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
          "71:  if (!pidfile) {",
          "",
          "[Removed Lines]",
          "63:  int pidfd;",
          "65:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "66:   return 1;",
          "68:  pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "[Added Lines]",
          "63:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: void",
          "83: pidfile_rm(const char *pid_file)",
          "84: {",
          "88:  unlink(pid_file);",
          "89: }",
          "",
          "[Removed Lines]",
          "85:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "86:   return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126: bool",
          "127: keepalived_running(unsigned long mode)",
          "128: {",
          "132:  if (process_running(main_pidfile))",
          "133:   return true;",
          "134: #ifdef _WITH_VRRP_",
          "",
          "[Removed Lines]",
          "129:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "130:   return false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c": [
          "File: keepalived/vrrp/vrrp_daemon.c -> keepalived/vrrp/vrrp_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "693:  }",
          "699:   log_message(LOG_ALERT, \"VRRP child process(%d) died: Respawning\", pid);",
          "700:   start_vrrp_child();",
          "701:  } else {",
          "",
          "[Removed Lines]",
          "696:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "697:   raise(SIGTERM);",
          "698:  else if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "[Added Lines]",
          "696:  if (!__test_bit(DONT_RESPAWN_BIT, &debug)) {",
          "",
          "---------------"
        ],
        "lib/scheduler.c||lischeduler.c": [
          "File: lib/scheduler.c -> lischeduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1209:  if (child_remover)",
          "1210:   child_remover(thread);",
          "1213:  {",
          "1216:   thread->type = THREAD_UNUSED;",
          "1217:   thread_list_add(&m->unuse, thread);",
          "1221:  }",
          "1222:  else",
          "1223:   thread_list_add(&m->ready, thread);",
          "",
          "[Removed Lines]",
          "1212:  if (permanent_vrrp_checker_error || __test_bit(CONFIG_TEST_BIT, &debug))",
          "1219:   if (!__test_bit(CONFIG_TEST_BIT, &debug))",
          "1220:    raise(SIGTERM);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2108757ee976cb145209478715acb5e3395109a7",
      "candidate_info": {
        "commit_hash": "2108757ee976cb145209478715acb5e3395109a7",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/2108757ee976cb145209478715acb5e3395109a7",
        "files": [
          "keepalived/include/vrrp.h",
          "keepalived/vrrp/vrrp_parser.c"
        ],
        "message": "Use read_int_strvec() instead of strtol() in vrrp_parser.c\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/include/vrrp.h||keepalived/include/vrrp.h",
          "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
          ],
          "candidate": [
            "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/include/vrrp.h||keepalived/include/vrrp.h": [
          "File: keepalived/include/vrrp.h -> keepalived/include/vrrp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: #define VRRP_VIP_TYPE  (1 << 0)",
          "331: #define VRRP_EVIP_TYPE  (1 << 1)",
          "339: #define VRRP_TIMER_SKEW(svr) ((svr)->version == VRRP_VERSION_3 ? (((256U-(svr)->effective_priority) * ((svr)->master_adver_int / TIMER_CENTI_HZ) * 625U) / 16U) : ((256U-(svr)->effective_priority) * TIMER_HZ/256U))",
          "340: #define VRRP_TIMER_SKEW_MIN(svr) ((svr)->version == VRRP_VERSION_3 ? ((((svr)->master_adver_int / TIMER_CENTI_HZ) * 625U) / 16U) : (TIMER_HZ/256U))",
          "",
          "[Removed Lines]",
          "334: #define VRRP_IS_BAD_VERSION(id)  ((id) < 2 || (id) > 3)",
          "336: #define VRRP_IS_BAD_DEBUG_INT(d) ((d) < 0 || (d) > 4)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
          "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  TRACK_FILE_CREATE,",
          "69:  TRACK_FILE_INIT,",
          "70: } track_file_init;",
          "73: static bool script_user_set;",
          "74: static bool remove_script;",
          "",
          "[Removed Lines]",
          "71: static long track_file_init_weight;",
          "",
          "[Added Lines]",
          "71: static int track_file_init_value;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554: vrrp_prio_handler(vector_t *strvec)",
          "555: {",
          "556:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "564:   vrrp->base_priority = VRRP_PRIO_DFL;",
          "565:  }",
          "566:  else",
          "",
          "[Removed Lines]",
          "557:  char *endptr;",
          "558:  unsigned long base_priority = strtoul(strvec_slot(strvec, 1), &endptr, 10);",
          "560:  if (*endptr || VRRP_IS_BAD_PRIORITY(base_priority)) {",
          "561:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Priority not valid! must be between 1 & 255. Reconfigure !\", vrrp->iname);",
          "562:   report_config_error(CONFIG_GENERAL_ERROR, \"%*sUsing default value : %d\", (int)strlen(vrrp->iname) + 4, \"\", VRRP_PRIO_DFL);",
          "",
          "[Added Lines]",
          "557:  unsigned base_priority;",
          "559:  if (!read_unsigned_strvec(strvec, 1, &base_priority, 1, VRRP_PRIO_OWNER, false)) {",
          "560:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Priority not valid! must be between 1 & %d. Using default %d\", vrrp->iname, VRRP_PRIO_OWNER, VRRP_PRIO_DFL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "754: vrrp_garp_delay_handler(vector_t *strvec)",
          "755: {",
          "756:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "760: }",
          "761: static void",
          "762: vrrp_garp_refresh_handler(vector_t *strvec)",
          "",
          "[Removed Lines]",
          "757:  vrrp->garp_delay = (unsigned)strtoul(strvec_slot(strvec, 1), NULL, 10) * TIMER_HZ;",
          "758:  if (vrrp->garp_delay < TIMER_HZ)",
          "759:   vrrp->garp_delay = TIMER_HZ;",
          "",
          "[Added Lines]",
          "754:  unsigned delay;",
          "758:  if (!read_unsigned_strvec(strvec, 1, &delay, 0, UINT_MAX / TIMER_HZ, true)) {",
          "759:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_delay '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "760:   return;",
          "761:  }",
          "763:  if (delay == 0) {",
          "764:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_delay must be greater than 0, setting to 1\", vrrp->iname);",
          "765:   delay = 1;",
          "766:  }",
          "767:  vrrp->garp_delay = delay * TIMER_HZ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "776: vrrp_garp_rep_handler(vector_t *strvec)",
          "777: {",
          "778:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "782: }",
          "783: static void",
          "784: vrrp_garp_refresh_rep_handler(vector_t *strvec)",
          "785: {",
          "786:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "790: }",
          "792: static void",
          "793: vrrp_garp_lower_prio_delay_handler(vector_t *strvec)",
          "794: {",
          "795:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "797: }",
          "798: static void",
          "799: vrrp_garp_lower_prio_rep_handler(vector_t *strvec)",
          "",
          "[Removed Lines]",
          "779:  vrrp->garp_rep = (unsigned)strtoul(strvec_slot(strvec, 1), NULL, 10);",
          "780:  if (vrrp->garp_rep < 1)",
          "781:   vrrp->garp_rep = 1;",
          "787:  vrrp->garp_refresh_rep = (unsigned)strtoul(strvec_slot(strvec, 1), NULL, 10);",
          "788:  if (vrrp->garp_refresh_rep < 1)",
          "789:   vrrp->garp_refresh_rep = 1;",
          "796:  vrrp->garp_lower_prio_delay = (unsigned)strtoul(strvec_slot(strvec, 1), NULL, 10) * TIMER_HZ;",
          "",
          "[Added Lines]",
          "787:  unsigned repeats;",
          "791:  if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "792:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_repeat '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "793:   return;",
          "794:  }",
          "796:  if (repeats == 0) {",
          "797:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_repeat must be greater than 0, setting to 1\", vrrp->iname);",
          "798:   repeats = 1;",
          "799:  }",
          "801:  vrrp->garp_rep = repeats;",
          "807:  unsigned repeats;",
          "811:  if (!read_unsigned_strvec(strvec, 1, &repeats, 0, UINT_MAX, true)) {",
          "812:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_refresh_repeat '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "813:   return;",
          "814:  }",
          "816:  if (repeats == 0) {",
          "817:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_master_refresh_repeat must be greater than 0, setting to 1\", vrrp->iname);",
          "818:   repeats = 1;",
          "819:  }",
          "821:  vrrp->garp_refresh_rep = repeats;",
          "828:  unsigned delay;",
          "830:  if (!read_unsigned_strvec(strvec, 1, &delay, 0, UINT_MAX / TIMER_HZ, true)) {",
          "831:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): garp_lower_prio_delay '%s' invalid - ignoring\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "832:   return;",
          "833:  }",
          "835:  vrrp->garp_lower_prio_delay = delay * TIMER_HZ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "804:  if (!read_unsigned_strvec(strvec, 1, &garp_lower_prio_rep, 0, INT_MAX, true)) {",
          "805:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Invalid garp_lower_prio_repeat '%s'\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));",
          "807:  }",
          "810: }",
          "811: static void",
          "812: vrrp_lower_prio_no_advert_handler(vector_t *strvec)",
          "813: {",
          "814:  int res;",
          "817:  if (vector_size(strvec) >= 2) {",
          "818:   res = check_true_false(strvec_slot(strvec, 1));",
          "819:   if (res >= 0)",
          "",
          "[Removed Lines]",
          "806:   vrrp->garp_lower_prio_rep = 0;",
          "808:  else",
          "809:   vrrp->garp_lower_prio_rep = garp_lower_prio_rep;",
          "816:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "",
          "[Added Lines]",
          "845:   return;",
          "848:  vrrp->garp_lower_prio_rep = garp_lower_prio_rep;",
          "853:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "849: kernel_rx_buf_size_handler(vector_t *strvec)",
          "850: {",
          "851:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "861:  }",
          "863:  report_config_error(CONFIG_GENERAL_ERROR, \"(%s) invalid kernel_rx_buf_size specified\", vrrp->iname);",
          "",
          "[Removed Lines]",
          "852:  unsigned long rx_buf_size;",
          "853:  char *endptr;",
          "855:  if (vector_size(strvec) == 2) {",
          "856:   rx_buf_size = strtoul(strvec_slot(strvec, 1), &endptr, 0);",
          "857:   if (!*endptr) {",
          "858:    vrrp->kernel_rx_buf_size = rx_buf_size;",
          "859:    return;",
          "860:   }",
          "",
          "[Added Lines]",
          "891:  unsigned rx_buf_size;",
          "893:  if (vector_size(strvec) == 2 &&",
          "894:      read_unsigned_strvec(strvec, 1, &rx_buf_size, 0, UINT_MAX, false)) {",
          "895:   vrrp->kernel_rx_buf_size = rx_buf_size;",
          "896:   return;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950: vrrp_vscript_interval_handler(vector_t *strvec)",
          "951: {",
          "952:  vrrp_script_t *vscript = LIST_TAIL_DATA(vrrp_data->vrrp_script);",
          "956: }",
          "957: static void",
          "958: vrrp_vscript_timeout_handler(vector_t *strvec)",
          "959: {",
          "960:  vrrp_script_t *vscript = LIST_TAIL_DATA(vrrp_data->vrrp_script);",
          "964: }",
          "965: static void",
          "966: vrrp_vscript_weight_handler(vector_t *strvec)",
          "967: {",
          "968:  int weight;",
          "971:  if (!read_int_strvec(strvec, 1, &weight, -253, 253, true))",
          "972:   report_config_error(CONFIG_GENERAL_ERROR, \"vrrp_script %s weight %s must be in [-253, 253]\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "973:  vscript->weight = weight;",
          "",
          "[Removed Lines]",
          "953:  vscript->interval = (unsigned)(strtoul(strvec_slot(strvec, 1), NULL, 10) * TIMER_HZ);",
          "954:  if (vscript->interval < TIMER_HZ)",
          "955:   vscript->interval = TIMER_HZ;",
          "961:  vscript->timeout = strtoul(strvec_slot(strvec, 1), NULL, 10) * TIMER_HZ;",
          "962:  if (vscript->timeout < TIMER_HZ)",
          "963:   vscript->timeout = TIMER_HZ;",
          "970:  vrrp_script_t *vscript = LIST_TAIL_DATA(vrrp_data->vrrp_script);",
          "",
          "[Added Lines]",
          "989:  unsigned interval;",
          "993:  if (!read_unsigned_strvec(strvec, 1, &interval, 0, UINT_MAX / TIMER_HZ, true)) {",
          "994:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script interval '%s' must be between 1 and %u - ignoring\", vscript->sname, FMT_STR_VSLOT(strvec, 1), UINT_MAX / TIMER_HZ);",
          "995:   return;",
          "996:  }",
          "998:  if (interval == 0) {",
          "999:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script interval must be greater than 0, setting to 1\", vscript->sname);",
          "1000:   interval = 1;",
          "1001:  }",
          "1003:  vscript->interval = interval * TIMER_HZ;",
          "1009:  unsigned timeout;",
          "1013:  if (!read_unsigned_strvec(strvec, 1, &timeout, 0, UINT_MAX / TIMER_HZ, true)) {",
          "1014:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script timeout '%s' invalid - ignoring\", vscript->sname, FMT_STR_VSLOT(strvec, 1));",
          "1015:   return;",
          "1016:  }",
          "1018:  if (timeout == 0) {",
          "1019:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): vrrp script timeout must be greater than 0, setting to 1\", vscript->sname);",
          "1020:   timeout = 1;",
          "1021:  }",
          "1023:  vscript->timeout = timeout * TIMER_HZ;",
          "1028:  vrrp_script_t *vscript = LIST_TAIL_DATA(vrrp_data->vrrp_script);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1075:  }",
          "1077:  if (!read_int_strvec(strvec, 1, &weight, -254, 254, true)) {",
          "1080:   weight = 1;",
          "1081:  }",
          "",
          "[Removed Lines]",
          "1078:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight (%d) %s for %s must be between \"",
          "1079:      \"[-254..254] inclusive. Ignoring...\", weight, FMT_STR_VSLOT(strvec, 1), tfile->fname);",
          "",
          "[Added Lines]",
          "1138:   report_config_error(CONFIG_GENERAL_ERROR, \"Weight (%s) for vrrp_track_file %s must be between \"",
          "1139:      \"[-254..254] inclusive. Ignoring...\", FMT_STR_VSLOT(strvec, 1), tfile->fname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1087: {",
          "1088:  unsigned i;",
          "1089:  char *word;",
          "1091:  vrrp_tracked_file_t *tfile = LIST_TAIL_DATA(vrrp_data->vrrp_track_files);",
          "1093:  track_file_init = TRACK_FILE_CREATE;",
          "1096:  for (i = 1; i < vector_size(strvec); i++) {",
          "1097:   word = strvec_slot(strvec, i);",
          "1104:    }",
          "1105:   }",
          "1106:   else if (!strcmp(word, \"overwrite\"))",
          "1107:    track_file_init = TRACK_FILE_INIT;",
          "",
          "[Removed Lines]",
          "1090:  char *endptr;",
          "1094:  track_file_init_weight = 0;",
          "1098:   if (isdigit(word[0])) {",
          "1099:    track_file_init_weight = strtol(word, &endptr, 0);",
          "1100:    if (*endptr) {",
          "1102:     report_config_error(CONFIG_GENERAL_ERROR, \"Track file %s init weight %s is invalid\", tfile->fname, word);",
          "1103:     track_file_init_weight = 0;",
          "",
          "[Added Lines]",
          "1151:  int value;",
          "1154:  track_file_init_value = 0;",
          "1158:   word += strspn(word, WHITE_SPACE);",
          "1159:   if (isdigit(word[0]) || word[0] == '-') {",
          "1160:    if (!read_int_strvec(strvec, i, &value, INT_MIN, INT_MAX, false)) {",
          "1162:     report_config_error(CONFIG_GENERAL_ERROR, \"Track file %s init value %s is invalid\", tfile->fname, word);",
          "1163:     value = 0;",
          "1165:    else if (value < -254 || value > 254)",
          "1166:     report_config_error(CONFIG_GENERAL_ERROR, \"Track file %s init value %d is outside sensible range [%d, %d]\", tfile->fname, value, -254, 254);",
          "1167:    track_file_init_value = value;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1138:   }",
          "1139:  }",
          "1145:  }",
          "1148: }",
          "1149: static void",
          "1150: vrrp_vscript_init_fail_handler(__attribute__((unused)) vector_t *strvec)",
          "",
          "[Removed Lines]",
          "1142:  if ((tf = fopen(tfile->file_path, \"w\"))) {",
          "1143:   fprintf(tf, \"%ld\\n\", track_file_init_weight);",
          "1144:   fclose(tf);",
          "1146:  else",
          "1147:   report_config_error(CONFIG_GENERAL_ERROR, \"Unable to initialise track file %s\", tfile->fname);",
          "",
          "[Added Lines]",
          "1204:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "1206:   if ((tf = fopen(tfile->file_path, \"w\"))) {",
          "1207:    fprintf(tf, \"%d\\n\", track_file_init_value);",
          "1208:    fclose(tf);",
          "1209:   }",
          "1210:   else",
          "1211:    report_config_error(CONFIG_GENERAL_ERROR, \"Unable to initialise track file %s\", tfile->fname);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1156: vrrp_version_handler(vector_t *strvec)",
          "1157: {",
          "1158:  vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);",
          "1163:   return;",
          "1164:  }",
          "1166:  if ((vrrp->version && vrrp->version != version) ||",
          "1167:      (version == VRRP_VERSION_2 && vrrp->family == AF_INET6)) {",
          "1169:   return;",
          "1170:  }",
          "",
          "[Removed Lines]",
          "1159:  uint8_t version = (uint8_t)strtoul(strvec_slot(strvec, 1), NULL, 10);",
          "1161:  if (VRRP_IS_BAD_VERSION(version)) {",
          "1162:   report_config_error(CONFIG_GENERAL_ERROR, \"VRRP Error : Version must be between either 2 or 3. reconfigure !\");",
          "1168:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) vrrp_version conflicts with configured or deduced version; ignoring.\", vrrp->iname);",
          "",
          "[Added Lines]",
          "1224:  int version;",
          "1226:  if (!read_int_strvec(strvec, 1, &version, 2, 3, true)) {",
          "1227:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s): Version must be either 2 or 3\", vrrp->iname);",
          "1233:   report_config_error(CONFIG_GENERAL_ERROR, \"(%s) vrrp_version %d conflicts with configured or deduced version %d; ignoring.\", vrrp->iname, version, vrrp->version);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
      "candidate_info": {
        "commit_hash": "ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/ac8e2ef053de273ce7a0cf0cb611e599dca4b298",
        "files": [
          "lib/memory.c",
          "lib/utils.c"
        ],
        "message": "When opening files for write, ensure files can only be read by root\n\nIssue #1048 referred to CVE-2018-19046 regarding files used for\ndebugging purposes could potentially be read by non root users.\n\nThis commit ensures that such log files cannot be opened by non root\nusers.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "lib/memory.c||lib/memory.c",
          "lib/utils.c||lib/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/memory.c||lib/memory.c",
            "lib/utils.c||lib/utils.c"
          ],
          "candidate": [
            "lib/memory.c||lib/memory.c",
            "lib/utils.c||lib/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/memory.c||lib/memory.c": [
          "File: lib/memory.c -> lib/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:  }",
          "624:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
          "626:  if (log_op == NULL) {",
          "627:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
          "628:   log_op = stderr;",
          "",
          "[Removed Lines]",
          "625:  log_op = fopen_safe(log_name, \"a\");",
          "",
          "[Added Lines]",
          "625:  log_op = fopen_safe(log_name, \"w\");",
          "",
          "---------------"
        ],
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <netdb.h>",
          "31: #include <arpa/inet.h>",
          "32: #include <sys/utsname.h>",
          "33: #include <stdint.h>",
          "34: #include <errno.h>",
          "35: #ifdef _WITH_PERF_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: #include \"signals.h\"",
          "59: #include \"bitops.h\"",
          "60: #include \"parser.h\"",
          "62: #include \"logger.h\"",
          "64: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
          "65: #include \"process.h\"",
          "66: #endif",
          "",
          "[Removed Lines]",
          "61: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_ || defined _WITH_STACKTRACE_ || defined _WITH_PERF_",
          "63: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:  int fd;",
          "796:  FILE *file;",
          "797:  int flags = O_NOFOLLOW | O_CREAT;",
          "799:  if (mode[0] == 'r')",
          "800:   return fopen(path, mode);",
          "807:   return NULL;",
          "809:  if (mode[0] == 'w')",
          "810:   flags |= O_TRUNC;",
          "",
          "[Removed Lines]",
          "802:  if (mode[0] != 'a' && mode[0] != 'w')",
          "803:   return NULL;",
          "805:  if (mode[1] &&",
          "806:      (mode[1] != '+' || mode[2]))",
          "",
          "[Added Lines]",
          "797:  int sav_errno;",
          "802:  if ((mode[0] != 'a' && mode[0] != 'w') ||",
          "803:      (mode[1] &&",
          "804:       (mode[1] != '+' || mode[2]))) {",
          "805:   errno = EINVAL;",
          "807:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "820:  if (fd == -1)",
          "821:   return NULL;",
          "823:  file = fdopen (fd, \"w\");",
          "824:  if (!file) {",
          "825:   close(fd);",
          "826:   return NULL;",
          "827:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824:  if (fchown(fd, 0, 0)) {",
          "825:   sav_errno = errno;",
          "826:   log_message(LOG_INFO, \"Unable to change file ownership of %s- errno %d (%m)\", path, errno);",
          "827:   close(fd);",
          "828:   errno = sav_errno;",
          "829:   return NULL;",
          "830:  }",
          "833:  if (fchmod(fd, S_IRUSR | S_IWUSR)) {",
          "834:   sav_errno = errno;",
          "835:   log_message(LOG_INFO, \"Unable to change file permission of %s - errno %d (%m)\", path, errno);",
          "836:   close(fd);",
          "837:   errno = sav_errno;",
          "838:   return NULL;",
          "839:  }",
          "843:   sav_errno = errno;",
          "844:   log_message(LOG_INFO, \"fdopen(\\\"%s\\\") failed - errno %d (%m)\", path, errno);",
          "846:   errno = sav_errno;",
          "",
          "---------------"
        ]
      }
    }
  ]
}