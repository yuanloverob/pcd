{
  "cve_id": "CVE-2021-29463",
  "cve_desc": "Exiv2 is a command-line utility and C++ library for reading, writing, deleting, and modifying the metadata of image files. An out-of-bounds read was found in Exiv2 versions v0.27.3 and earlier. The out-of-bounds read is triggered when Exiv2 is used to write metadata into a crafted image file. An attacker could potentially exploit the vulnerability to cause a denial of service by crashing Exiv2, if they can trick the victim into running Exiv2 on a crafted image file. Note that this bug is only triggered when writing the metadata, which is a less frequently used Exiv2 operation than reading the metadata. For example, to trigger the bug in the Exiv2 command-line application, you need to add an extra command-line argument such as `insert`. The bug is fixed in version v0.27.4.",
  "repo": "Exiv2/exiv2",
  "patch_hash": "783b3a6ff15ed6f82a8f8e6c8a6f3b84a9b04d4b",
  "patch_info": {
    "commit_hash": "783b3a6ff15ed6f82a8f8e6c8a6f3b84a9b04d4b",
    "repo": "Exiv2/exiv2",
    "commit_url": "https://github.com/Exiv2/exiv2/commit/783b3a6ff15ed6f82a8f8e6c8a6f3b84a9b04d4b",
    "files": [
      "src/webpimage.cpp"
    ],
    "message": "Improve bound checking in WebPImage::doWriteMetadata()",
    "before_after_code_files": [
      "src/webpimage.cpp||src/webpimage.cpp"
    ]
  },
  "patch_diff": {
    "src/webpimage.cpp||src/webpimage.cpp": [
      "File: src/webpimage.cpp -> src/webpimage.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:         DataBuf chunkId(WEBP_TAG_SIZE+1);",
      "146:         chunkId.pData_ [WEBP_TAG_SIZE] = '\\0';",
      "149:         uint64_t filesize = Exiv2::getULong(data + WEBP_TAG_SIZE, littleEndian);",
      "",
      "[Removed Lines]",
      "148:         io_->read(data, WEBP_TAG_SIZE * 3);",
      "",
      "[Added Lines]",
      "148:         readOrThrow(*io_, data, WEBP_TAG_SIZE * 3, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:          case we have any exif or xmp data, also check",
      "187:         while ( !io_->eof() && (uint64_t) io_->tell() < filesize) {",
      "191:             DataBuf payload(size);",
      "",
      "[Removed Lines]",
      "188:             io_->read(chunkId.pData_, WEBP_TAG_SIZE);",
      "189:             io_->read(size_buff, WEBP_TAG_SIZE);",
      "190:             long size = Exiv2::getULong(size_buff, littleEndian);",
      "192:             io_->read(payload.pData_, payload.size_);",
      "193:             byte c;",
      "194:             if ( payload.size_ % 2 ) io_->read(&c,1);",
      "",
      "[Added Lines]",
      "188:             readOrThrow(*io_, chunkId.pData_, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
      "189:             readOrThrow(*io_, size_buff, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
      "190:             const uint32_t size_u32 = Exiv2::getULong(size_buff, littleEndian);",
      "193:             enforce(size_u32 <= static_cast<size_t>(std::numeric_limits<unsigned int>::max()),",
      "194:                     Exiv2::kerCorruptedMetadata);",
      "195:             const long size = static_cast<long>(size_u32);",
      "197:             readOrThrow(*io_, payload.pData_, payload.size_, Exiv2::kerCorruptedMetadata);",
      "198:             if ( payload.size_ % 2 ) {",
      "199:               byte c;",
      "200:               readOrThrow(*io_, &c, 1, Exiv2::kerCorruptedMetadata);",
      "201:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "199:                 has_vp8x = true;",
      "200:             }",
      "201:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8X) && !has_size) {",
      "202:                 has_size = true;",
      "203:                 byte size_buf[WEBP_TAG_SIZE];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:                 enforce(size >= 10, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "227:             }",
      "228: #endif",
      "229:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8) && !has_size) {",
      "230:                 has_size = true;",
      "231:                 byte size_buf[2];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:                 enforce(size >= 10, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "246:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8L) && !has_alpha) {",
      "247:                 if ((payload.pData_[4] & WEBP_VP8X_ALPHA_BIT) == WEBP_VP8X_ALPHA_BIT) {",
      "248:                     has_alpha = true;",
      "249:                 }",
      "250:             }",
      "251:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8L) && !has_size) {",
      "252:                 has_size = true;",
      "253:                 byte size_buf_w[2];",
      "254:                 byte size_buf_h[3];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:                 enforce(size >= 5, Exiv2::kerCorruptedMetadata);",
      "262:                 enforce(size >= 5, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "278:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_ANMF) && !has_alpha) {",
      "279:                 if ((payload.pData_[5] & 0x2) == 0x2) {",
      "280:                     has_alpha = true;",
      "281:                 }",
      "282:             }",
      "283:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_ANMF) && !has_size) {",
      "284:                 has_size = true;",
      "285:                 byte size_buf[WEBP_TAG_SIZE];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "290:                 enforce(size >= 6, Exiv2::kerCorruptedMetadata);",
      "296:                 enforce(size >= 12, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "310:         io_->seek(12, BasicIo::beg);",
      "311:         while ( !io_->eof() && (uint64_t) io_->tell() < filesize) {",
      "317:             DataBuf payload(size);",
      "319:             if ( io_->tell() % 2 ) io_->seek(+1,BasicIo::cur); // skip pad",
      "321:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8X)) {",
      "322:                 if (has_icc){",
      "323:                     payload.pData_[0] |= WEBP_VP8X_ICC_BIT;",
      "324:                 } else {",
      "",
      "[Removed Lines]",
      "312:             io_->read(chunkId.pData_, 4);",
      "313:             io_->read(size_buff, 4);",
      "315:             long size = Exiv2::getULong(size_buff, littleEndian);",
      "318:             io_->read(payload.pData_, size);",
      "",
      "[Added Lines]",
      "325:             readOrThrow(*io_, chunkId.pData_, 4, Exiv2::kerCorruptedMetadata);",
      "326:             readOrThrow(*io_, size_buff, 4, Exiv2::kerCorruptedMetadata);",
      "328:             const uint32_t size_u32 = Exiv2::getULong(size_buff, littleEndian);",
      "331:             enforce(size_u32 <= static_cast<size_t>(std::numeric_limits<unsigned int>::max()),",
      "332:                     Exiv2::kerCorruptedMetadata);",
      "333:             const long size = static_cast<long>(size_u32);",
      "336:             readOrThrow(*io_, payload.pData_, size, Exiv2::kerCorruptedMetadata);",
      "340:                 enforce(size >= 1, Exiv2::kerCorruptedMetadata);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbde0bc5367e2ad29909ed84170e3fe4c28c9dea",
      "candidate_info": {
        "commit_hash": "dbde0bc5367e2ad29909ed84170e3fe4c28c9dea",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/dbde0bc5367e2ad29909ed84170e3fe4c28c9dea",
        "files": [
          "test/data/issue_ghsa_5p8g_9xf3_gfrr_poc.exv",
          "test/data/issue_ghsa_5p8g_9xf3_gfrr_poc.webp",
          "tests/bugfixes/github/test_issue_ghsa_5p8g_9xf3_gfrr.py"
        ],
        "message": "Regression test for https://github.com/Exiv2/exiv2/security/advisories/GHSA-5p8g-9xf3-gfrr",
        "before_after_code_files": [
          "tests/bugfixes/github/test_issue_ghsa_5p8g_9xf3_gfrr.py||tests/bugfixes/githutest_issue_ghsa_5p8g_9xf3_gfrr.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Exiv2/exiv2/pull/1579"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/bugfixes/github/test_issue_ghsa_5p8g_9xf3_gfrr.py||tests/bugfixes/githutest_issue_ghsa_5p8g_9xf3_gfrr.py": [
          "File: tests/bugfixes/github/test_issue_ghsa_5p8g_9xf3_gfrr.py -> tests/bugfixes/githutest_issue_ghsa_5p8g_9xf3_gfrr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8337462032c87d0aacc0e4172bf1f8516934584c",
      "candidate_info": {
        "commit_hash": "8337462032c87d0aacc0e4172bf1f8516934584c",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/8337462032c87d0aacc0e4172bf1f8516934584c",
        "files": [
          "samples/tiff-test.cpp",
          "src/actions.cpp",
          "src/basicio.cpp",
          "src/crwimage.cpp",
          "src/datasets.cpp",
          "src/epsimage.cpp",
          "src/exiv2.cpp",
          "src/ini.cpp",
          "src/jp2image.cpp",
          "src/jpgimage.cpp",
          "src/makernote_int.cpp",
          "src/olympusmn_int.cpp",
          "src/pngchunk_int.cpp",
          "src/pngimage.cpp",
          "src/preview.cpp",
          "src/properties.cpp",
          "src/psdimage.cpp",
          "src/tags_int.cpp",
          "src/utils.cpp",
          "src/value.cpp",
          "src/version.cpp",
          "src/webpimage.cpp",
          "src/xmp.cpp",
          "src/xmpsidecar.cpp"
        ],
        "message": "clang-tidy: use empty() instead of comparing size\n\nFound with readability-container-size-empty\n\nSigned-off-by: Rosen Penev <rosenp@gmail.com>",
        "before_after_code_files": [
          "samples/tiff-test.cpp||samples/tiff-test.cpp",
          "src/actions.cpp||src/actions.cpp",
          "src/basicio.cpp||src/basicio.cpp",
          "src/crwimage.cpp||src/crwimage.cpp",
          "src/datasets.cpp||src/datasets.cpp",
          "src/epsimage.cpp||src/epsimage.cpp",
          "src/exiv2.cpp||src/exiv2.cpp",
          "src/ini.cpp||src/ini.cpp",
          "src/jp2image.cpp||src/jp2image.cpp",
          "src/jpgimage.cpp||src/jpgimage.cpp",
          "src/makernote_int.cpp||src/makernote_int.cpp",
          "src/olympusmn_int.cpp||src/olympusmn_int.cpp",
          "src/pngchunk_int.cpp||src/pngchunk_int.cpp",
          "src/pngimage.cpp||src/pngimage.cpp",
          "src/preview.cpp||src/preview.cpp",
          "src/properties.cpp||src/properties.cpp",
          "src/psdimage.cpp||src/psdimage.cpp",
          "src/tags_int.cpp||src/tags_int.cpp",
          "src/utils.cpp||src/utils.cpp",
          "src/value.cpp||src/value.cpp",
          "src/version.cpp||src/version.cpp",
          "src/webpimage.cpp||src/webpimage.cpp",
          "src/xmp.cpp||src/xmp.cpp",
          "src/xmpsidecar.cpp||src/xmpsidecar.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "samples/tiff-test.cpp||samples/tiff-test.cpp": [
          "File: samples/tiff-test.cpp -> samples/tiff-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     wm = ExifParser::encode(blob, 0, 0, bigEndian, exifData);",
          "70:     enforce(wm == wmIntrusive, Exiv2::kerErrorMessage, \"encode returned an unexpected value\");",
          "72:     std::cout << \"Test 1: Writing empty Exif data without original binary data: ok.\\n\";",
          "75:     DataBuf buf = readFile(path);",
          "76:     wm = ExifParser::encode(blob, buf.pData_, buf.size_, bigEndian, exifData);",
          "77:     enforce(wm == wmIntrusive, Exiv2::kerErrorMessage, \"encode returned an unexpected value\");",
          "79:     std::cout << \"Test 2: Writing empty Exif data with original binary data: ok.\\n\";",
          "",
          "[Removed Lines]",
          "71:     assert(blob.size() == 0);",
          "78:     assert(blob.size() == 0);",
          "",
          "[Added Lines]",
          "71:     assert(blob.empty());",
          "78:     assert(blob.empty());",
          "",
          "---------------"
        ],
        "src/actions.cpp||src/actions.cpp": [
          "File: src/actions.cpp -> src/actions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:     int Erase::eraseComment(Exiv2::Image* image) const",
          "876:     {",
          "878:             std::cout << _(\"Erasing JPEG comment from the file\") << std::endl;",
          "879:         }",
          "880:         image->clearComment();",
          "",
          "[Removed Lines]",
          "877:         if (Params::instance().verbose_ && image->comment().size() > 0) {",
          "",
          "[Added Lines]",
          "877:         if (Params::instance().verbose_ && !image->comment().empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1575:             return 0;",
          "1576:         }",
          "1577:         std::string timeStr = md->toString();",
          "1579:             std::cerr << path << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"",
          "1580:                       << ek << \"' \" << _(\"not set\\n\");",
          "1581:             return 1;",
          "",
          "[Removed Lines]",
          "1578:         if (timeStr == \"\" || timeStr[0] == ' ') {",
          "",
          "[Added Lines]",
          "1578:         if (timeStr.empty() || timeStr[0] == ' ') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2015:             int tRawSidecar = Params::ctXmpSidecar | Params::ctXmpRaw; // option -eXX",
          "2022:                 std::ofstream os;",
          "",
          "[Removed Lines]",
          "2017:             if( Params::instance().modifyCmds_.size() == 0",
          "2018:             && (Params::instance().target_ & tRawSidecar) == tRawSidecar",
          "2019:             ){",
          "",
          "[Added Lines]",
          "2017:             if (Params::instance().modifyCmds_.empty() && (Params::instance().target_ & tRawSidecar) == tRawSidecar) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2024:                 sourceImage->printStructure(os,Exiv2::kpsXMP);",
          "2025:                 os.close();",
          "2026:                 rc = 0;",
          "2028:                 Exiv2::XmpData::const_iterator end = sourceImage->xmpData().end();",
          "2029:                 for (Exiv2::XmpData::const_iterator i = sourceImage->xmpData().begin(); i != end; ++i) {",
          "2030:                     targetImage->xmpData()[i->key()] = i->value();",
          "",
          "[Removed Lines]",
          "2027:             } else if ( preserve ) {",
          "",
          "[Added Lines]",
          "2025:             } else if (preserve) {",
          "",
          "---------------"
        ],
        "src/basicio.cpp||src/basicio.cpp": [
          "File: src/basicio.cpp -> src/basicio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         std::string errors;",
          "2069:         request[\"server\"] = hostInfo_.Host;",
          "2070:         request[\"page\"  ] = hostInfo_.Path;",
          "2072:         request[\"verb\"]   = \"HEAD\";",
          "2073:         int serverCode = http(request, response, errors);",
          "2074:         if (serverCode < 0 || serverCode >= 400 || errors.compare(\"\") != 0) {",
          "",
          "[Removed Lines]",
          "2071:         if (hostInfo_.Port != \"\") request[\"port\"] = hostInfo_.Port;",
          "",
          "[Added Lines]",
          "2071:         if (!hostInfo_.Port.empty())",
          "2072:             request[\"port\"] = hostInfo_.Port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:         Exiv2::Dictionary request;",
          "2086:         request[\"server\"] = hostInfo_.Host;",
          "2087:         request[\"page\"  ] = hostInfo_.Path;",
          "2089:         request[\"verb\"]   = \"GET\";",
          "2090:         std::string errors;",
          "2091:         if (lowBlock > -1 && highBlock > -1) {",
          "",
          "[Removed Lines]",
          "2088:         if (hostInfo_.Port != \"\") request[\"port\"] = hostInfo_.Port;",
          "",
          "[Added Lines]",
          "2089:         if (!hostInfo_.Port.empty())",
          "2090:             request[\"port\"] = hostInfo_.Port;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2104:     void HttpIo::HttpImpl::writeRemote(const byte* data, size_t size, long from, long to)",
          "2105:     {",
          "2106:         std::string scriptPath(getEnv(envHTTPPOST));",
          "2108:             throw Error(kerErrorMessage, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");",
          "2109:         }",
          "",
          "[Removed Lines]",
          "2107:         if (scriptPath == \"\") {",
          "",
          "[Added Lines]",
          "2109:         if (scriptPath.empty()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2119:         std::string errors;",
          "2121:         Uri scriptUri = Exiv2::Uri::Parse(scriptPath);",
          "2124:         request[\"page\"] = scriptUri.Path;",
          "2125:         request[\"verb\"] = \"POST\";",
          "",
          "[Removed Lines]",
          "2122:         request[\"server\"] = scriptUri.Host == \"\" ? hostInfo_.Host : scriptUri.Host;",
          "2123:         if (scriptUri.Port != \"\") request[\"port\"] = scriptUri.Port;",
          "",
          "[Added Lines]",
          "2124:         request[\"server\"] = scriptUri.Host.empty() ? hostInfo_.Host : scriptUri.Host;",
          "2125:         if (!scriptUri.Port.empty())",
          "2126:             request[\"port\"] = scriptUri.Port;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2326:     void CurlIo::CurlImpl::writeRemote(const byte* data, size_t size, long from, long to)",
          "2327:     {",
          "2328:         std::string scriptPath(getEnv(envHTTPPOST));",
          "2330:             throw Error(kerErrorMessage, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");",
          "2331:         }",
          "",
          "[Removed Lines]",
          "2329:         if (scriptPath == \"\") {",
          "",
          "[Added Lines]",
          "2332:         if (scriptPath.empty()) {",
          "",
          "---------------"
        ],
        "src/crwimage.cpp||src/crwimage.cpp": [
          "File: src/crwimage.cpp -> src/crwimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         MemIo::UniquePtr tempIo(new MemIo);",
          "136:         assert(tempIo.get() != 0);",
          "138:         io_->close();",
          "139:         io_->transfer(*tempIo); // may throw",
          "",
          "[Removed Lines]",
          "137:         tempIo->write((blob.size() > 0 ? &blob[0] : 0), static_cast<long>(blob.size()));",
          "",
          "[Added Lines]",
          "137:         tempIo->write((!blob.empty() ? &blob[0] : 0), static_cast<long>(blob.size()));",
          "",
          "---------------"
        ],
        "src/datasets.cpp||src/datasets.cpp": [
          "File: src/datasets.cpp -> src/datasets.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:         pos1 = key_.find('.', pos0);",
          "678:         if (pos1 == std::string::npos) throw Error(kerInvalidKey, key_);",
          "679:         std::string recordName = key_.substr(pos0, pos1 - pos0);",
          "681:         std::string dataSetName = key_.substr(pos1 + 1);",
          "685:         uint16_t recId = IptcDataSets::recordId(recordName);",
          "",
          "[Removed Lines]",
          "680:         if (recordName == \"\") throw Error(kerInvalidKey, key_);",
          "682:         if (dataSetName == \"\") throw Error(kerInvalidKey, key_);",
          "",
          "[Added Lines]",
          "680:         if (recordName.empty())",
          "681:             throw Error(kerInvalidKey, key_);",
          "683:         if (dataSetName.empty())",
          "684:             throw Error(kerInvalidKey, key_);",
          "",
          "---------------"
        ],
        "src/epsimage.cpp||src/epsimage.cpp": [
          "File: src/epsimage.cpp -> src/epsimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:                 EXV_DEBUG << \"readWriteEpsMetadata: Found implicit Page at position: \" << startPos << \"\\n\";",
          "502:                 #endif",
          "503:             }",
          "505:                 posBeginPageSetup = startPos;",
          "506:                 implicitPageSetup = true;",
          "507:                 #ifdef DEBUG",
          "508:                 EXV_DEBUG << \"readWriteEpsMetadata: Found implicit BeginPageSetup at position: \" << startPos << \"\\n\";",
          "509:                 #endif",
          "510:             }",
          "512:                 posEndPageSetup = startPos;",
          "513:                 #ifdef DEBUG",
          "514:                 EXV_DEBUG << \"readWriteEpsMetadata: Found implicit EndPageSetup at position: \" << startPos << \"\\n\";",
          "515:                 #endif",
          "516:             }",
          "518:             if (line == \"%%EOF\" || line == \"%%Trailer\" || line == \"%%PageTrailer\") {",
          "519:                 if (posBeginPageSetup == posEndEps) {",
          "520:                     posBeginPageSetup = startPos;",
          "",
          "[Removed Lines]",
          "504:             if (posBeginPageSetup == posEndEps && (implicitPage || (posPage != posEndEps && !inRemovableEmbedding && line.size() >= 1 && line[0] != '%'))) {",
          "511:             if (posEndPageSetup == posEndEps && implicitPageSetup && !inRemovableEmbedding && line.size() >= 1 && line[0] != '%') {",
          "517:             if (line.size() >= 1 && line[0] != '%') continue; // performance optimization",
          "",
          "[Added Lines]",
          "504:             if (posBeginPageSetup == posEndEps &&",
          "505:                 (implicitPage || (posPage != posEndEps && !inRemovableEmbedding && !line.empty() && line[0] != '%'))) {",
          "512:             if (posEndPageSetup == posEndEps && implicitPageSetup && !inRemovableEmbedding && !line.empty() &&",
          "513:                 line[0] != '%') {",
          "519:             if (!line.empty() && line[0] != '%')",
          "520:                 continue;  // performance optimization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "637:         bool containsXmp;",
          "638:         if (line == \"%ADO_ContainsXMP: MainFirst\" || line == \"%ADO_ContainsXMP:MainFirst\") {",
          "639:             containsXmp = true;",
          "641:             containsXmp = false;",
          "642:         } else {",
          "644:             EXV_WARNING << \"Invalid line \\\"\" << line << \"\\\" at position: \" << posContainsXmp << \"\\n\";",
          "645:             #endif",
          "646:             throw Error(write ? kerImageWriteFailed : kerFailedToReadImageData);",
          "647:         }",
          "650:         bool fixBeginXmlPacket = false;",
          "651:         bool useFlexibleEmbedding = false;",
          "652:         size_t xmpPos = posEndEps;",
          "",
          "[Removed Lines]",
          "640:         } else if (line == \"\" || line == \"%ADO_ContainsXMP: NoMain\" || line == \"%ADO_ContainsXMP:NoMain\") {",
          "643:             #ifndef SUPPRESS_WARNINGS",
          "649:         const bool deleteXmp = (write && xmpPacket.size() == 0);",
          "",
          "[Added Lines]",
          "643:         } else if (line.empty() || line == \"%ADO_ContainsXMP: NoMain\" || line == \"%ADO_ContainsXMP:NoMain\") {",
          "646: #ifndef SUPPRESS_WARNINGS",
          "652:         const bool deleteXmp = (write && xmpPacket.empty());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:             }",
          "663:             const size_t posLineAfterXmp = readLine(line, data, xmpPos + xmpSize, posEndEps);",
          "666:                 EXV_WARNING << \"Unexpected \" << line.size() << \" bytes of data after XMP at position: \" << (xmpPos + xmpSize) << \"\\n\";",
          "667:                 #endif",
          "668:             } else if (!deleteXmp) {",
          "",
          "[Removed Lines]",
          "664:             if (line != \"\") {",
          "665:                 #ifndef SUPPRESS_WARNINGS",
          "",
          "[Added Lines]",
          "667:             if (!line.empty()) {",
          "668: #ifndef SUPPRESS_WARNINGS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1111:         readWriteEpsMetadata(*io_, xmpPacket_, nativePreviews_, /* write = */ false);",
          "1116:             EXV_WARNING << \"Failed to decode XMP metadata.\\n\";",
          "1117:             #endif",
          "1118:             throw Error(kerFailedToReadImageData);",
          "1119:         }",
          "1122:         EXV_DEBUG << \"Exiv2::EpsImage::readMetadata: Finished reading EPS file \" << io_->path() << \"\\n\";",
          "1123:         #endif",
          "1124:     }",
          "",
          "[Removed Lines]",
          "1114:         if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_) > 1) {",
          "1115:             #ifndef SUPPRESS_WARNINGS",
          "1121:         #ifdef DEBUG",
          "",
          "[Added Lines]",
          "1117:         if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_) > 1) {",
          "1118: #ifndef SUPPRESS_WARNINGS",
          "1124: #ifdef DEBUG",
          "",
          "---------------"
        ],
        "src/exiv2.cpp||src/exiv2.cpp": [
          "File: src/exiv2.cpp -> src/exiv2.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1108:                   << _(\"Modify action requires at least one -c, -m or -M option\\n\");",
          "1109:         rc = 1;",
          "1110:     }",
          "1112:         std::cerr << progname() << \": \" << _(\"At least one file is required\\n\");",
          "1113:         rc = 1;",
          "1114:     }",
          "",
          "[Removed Lines]",
          "1111:     if (0 == files_.size()) {",
          "",
          "[Added Lines]",
          "1111:     if (files_.empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1189:         if (hh == 0 && hstr.find('-') != std::string::npos) sign = -1;",
          "1192:             if (!Util::strtol(mstr.c_str(), mm)) return false;",
          "1193:             if (mm > 59) return false;",
          "1194:             if (mm < 0) return false;",
          "1195:         }",
          "1198:             if (!Util::strtol(sstr.c_str(), ss)) return false;",
          "1199:             if (ss > 59) return false;",
          "1200:             if (ss < 0) return false;",
          "",
          "[Removed Lines]",
          "1191:         if (mstr != \"\") {",
          "1197:         if (sstr != \"\") {",
          "",
          "[Added Lines]",
          "1191:         if (!mstr.empty()) {",
          "1197:         if (!sstr.empty()) {",
          "",
          "---------------"
        ],
        "src/ini.cpp||src/ini.cpp": [
          "File: src/ini.cpp -> src/ini.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: {",
          "290:     INIReader* reader = (INIReader*)user;",
          "291:     string key = MakeKey(section, name);",
          "293:         reader->_values[key] += \"\\n\";",
          "294:     reader->_values[key] += value;",
          "295:     return 1;",
          "",
          "[Removed Lines]",
          "292:     if (reader->_values[key].size() > 0)",
          "",
          "[Added Lines]",
          "292:     if (!reader->_values[key].empty())",
          "",
          "---------------"
        ],
        "src/jp2image.cpp||src/jp2image.cpp": [
          "File: src/jp2image.cpp -> src/jp2image.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:                                 xmpPacket_ = xmpPacket_.substr(idx);",
          "439:                             }",
          "443: #ifndef SUPPRESS_WARNINGS",
          "444:                                 EXV_WARNING << \"Failed to decode XMP metadata.\" << std::endl;",
          "445: #endif",
          "",
          "[Removed Lines]",
          "441:                             if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_))",
          "442:                             {",
          "",
          "[Added Lines]",
          "441:                             if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834:                         Blob blob;",
          "835:                         ExifParser::encode(blob, littleEndian, exifData_);",
          "838:                             DataBuf rawExif(static_cast<long>(blob.size()));",
          "839:                             memcpy(rawExif.pData_, &blob[0], blob.size());",
          "",
          "[Removed Lines]",
          "836:                         if (blob.size())",
          "837:                         {",
          "",
          "[Added Lines]",
          "835:                         if (!blob.empty()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885: #endif",
          "886:                         }",
          "887:                     }",
          "892:                         DataBuf xmp(reinterpret_cast<const byte*>(xmpPacket_.data()), static_cast<long>(xmpPacket_.size()));",
          "",
          "[Removed Lines]",
          "888:                     if (xmpPacket_.size() > 0)",
          "889:                     {",
          "",
          "[Added Lines]",
          "886:                     if (!xmpPacket_.empty()) {",
          "",
          "---------------"
        ],
        "src/jpgimage.cpp||src/jpgimage.cpp": [
          "File: src/jpgimage.cpp -> src/jpgimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:             append(psBlob, pPsData + pos, sizePsData - pos);",
          "291:         }",
          "294: #ifdef EXIV2_DEBUG_MESSAGES",
          "295:         std::cerr << \"IRB block at the end of Photoshop::setIptcIrb\\n\";",
          "296:         if (rc.size_ == 0) std::cerr << \"  None.\\n\";",
          "",
          "[Removed Lines]",
          "293:         if (psBlob.size() > 0) rc = DataBuf(&psBlob[0], static_cast<long>(psBlob.size()));",
          "",
          "[Added Lines]",
          "293:         if (!psBlob.empty())",
          "294:             rc = DataBuf(&psBlob[0], static_cast<long>(psBlob.size()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:                 io_->read(xmpPacket.pData_, xmpPacket.size_);",
          "407:                 if (io_->error() || io_->eof()) throw Error(kerFailedToReadImageData);",
          "408:                 xmpPacket_.assign(reinterpret_cast<char*>(xmpPacket.pData_), xmpPacket.size_);",
          "410: #ifndef SUPPRESS_WARNINGS",
          "411:                     EXV_WARNING << \"Failed to decode XMP metadata.\\n\";",
          "412: #endif",
          "",
          "[Removed Lines]",
          "409:                 if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "[Added Lines]",
          "410:                 if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:                 append(psBlob, psData.pData_, psData.size_);",
          "436:                     --search;",
          "437:                     foundCompletePsData = true;",
          "438:                 }",
          "",
          "[Removed Lines]",
          "435:                 if (psBlob.size() > 0 && Photoshop::valid(&psBlob[0], (long) psBlob.size())) {",
          "",
          "[Added Lines]",
          "436:                 if (!psBlob.empty() && Photoshop::valid(&psBlob[0], (long)psBlob.size())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:             }",
          "532:         } // while there are segments to process",
          "536:             Blob iptcBlob;",
          "537:             const byte *record = 0;",
          "",
          "[Removed Lines]",
          "534:         if (psBlob.size() > 0) {",
          "",
          "[Added Lines]",
          "535:         if (!psBlob.empty()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "550:                 }",
          "551:                 pCur = record + sizeHdr + sizeIptc + (sizeIptc & 1);",
          "552:             }",
          "557: #ifndef SUPPRESS_WARNINGS",
          "558:                 EXV_WARNING << \"Failed to decode IPTC metadata.\\n\";",
          "559: #endif",
          "560:                 iptcData_.clear();",
          "561:             }",
          "564:         if (rc != 0) {",
          "565: #ifndef SUPPRESS_WARNINGS",
          "",
          "[Removed Lines]",
          "553:             if (   iptcBlob.size() > 0",
          "554:                 && IptcParser::decode(iptcData_,",
          "555:                                       &iptcBlob[0],",
          "556:                                       static_cast<uint32_t>(iptcBlob.size()))) {",
          "562:         } // psBlob.size() > 0",
          "",
          "[Added Lines]",
          "554:             if (!iptcBlob.empty() &&",
          "555:                 IptcParser::decode(iptcData_, &iptcBlob[0], static_cast<uint32_t>(iptcBlob.size()))) {",
          "561:         }  // psBlob.size() > 0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "833:                     out << std::endl;",
          "834:             }",
          "835:         }",
          "837: #ifdef EXIV2_DEBUG_MESSAGES",
          "838:             std::cout << \"iptc data blocks: \" << iptcDataSegs.size() << std::endl;",
          "839:             uint32_t toggle = 0;",
          "",
          "[Removed Lines]",
          "836:         if (option == kpsIptcErase && iptcDataSegs.size()) {",
          "",
          "[Added Lines]",
          "835:         if (option == kpsIptcErase && !iptcDataSegs.empty()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1014:                 append(psBlob, psData.pData_, psData.size_);",
          "1017:                     foundCompletePsData = true;",
          "1018:                 }",
          "1019:             } else if (marker == com_ && skipCom == -1) {",
          "",
          "[Removed Lines]",
          "1016:                 if (psBlob.size() > 0 && Photoshop::valid(&psBlob[0], (long)psBlob.size())) {",
          "",
          "[Added Lines]",
          "1015:                 if (!psBlob.empty() && Photoshop::valid(&psBlob[0], (long)psBlob.size())) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1046:             ++count;",
          "1047:         }",
          "1050:             throw Error(kerNoImageInInputData);",
          "1051:         search += (int)skipApp13Ps3.size() + (int)skipApp2Icc.size();",
          "",
          "[Removed Lines]",
          "1049:         if (!foundCompletePsData && psBlob.size() > 0)",
          "",
          "[Added Lines]",
          "1048:         if (!foundCompletePsData && !psBlob.empty())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1061:             ++search;",
          "1062:         if (!writeXmpFromPacket() && xmpData_.count() > 0)",
          "1063:             ++search;",
          "1065:             ++search;",
          "1066:         if (foundCompletePsData || iptcData_.count() > 0)",
          "1067:             ++search;",
          "",
          "[Removed Lines]",
          "1064:         if (writeXmpFromPacket() && xmpPacket_.size() > 0)",
          "",
          "[Added Lines]",
          "1063:         if (writeXmpFromPacket() && !xmpPacket_.empty())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1102:                     const byte* pExifData = rawExif.pData_;",
          "1103:                     uint32_t exifSize = rawExif.size_;",
          "1104:                     if (wm == wmIntrusive) {",
          "1106:                         exifSize = static_cast<uint32_t>(blob.size());",
          "1107:                     }",
          "1108:                     if (exifSize > 0) {",
          "",
          "[Removed Lines]",
          "1105:                         pExifData = blob.size() > 0 ? &blob[0] : 0;",
          "",
          "[Added Lines]",
          "1104:                         pExifData = !blob.empty() ? &blob[0] : 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1133: #endif",
          "1134:                     }",
          "1135:                 }",
          "1138:                     tmpBuf[0] = 0xff;",
          "1139:                     tmpBuf[1] = app1_;",
          "",
          "[Removed Lines]",
          "1136:                 if (xmpPacket_.size() > 0) {",
          "",
          "[Added Lines]",
          "1135:                 if (!xmpPacket_.empty()) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1197:                     DataBuf newPsData =",
          "1199:                     const long maxChunkSize = 0xffff - 16;",
          "1200:                     const byte* chunkStart = newPsData.pData_;",
          "1201:                     const byte* chunkEnd = chunkStart + newPsData.size_;",
          "",
          "[Removed Lines]",
          "1198:                         Photoshop::setIptcIrb(psBlob.size() > 0 ? &psBlob[0] : 0, (long)psBlob.size(), iptcData_);",
          "",
          "[Added Lines]",
          "1197:                         Photoshop::setIptcIrb(!psBlob.empty() ? &psBlob[0] : 0, (long)psBlob.size(), iptcData_);",
          "",
          "---------------"
        ],
        "src/makernote_int.cpp||src/makernote_int.cpp": [
          "File: src/makernote_int.cpp -> src/makernote_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     bool TiffMnRegistry::operator==(const std::string& key) const",
          "155:     {",
          "156:         std::string make(make_);",
          "158:         return make == key.substr(0, make.length());",
          "159:     }",
          "",
          "[Removed Lines]",
          "157:         if (key.size() > 0 && key[0] == '-') return false;",
          "",
          "[Added Lines]",
          "157:         if (!key.empty() && key[0] == '-')",
          "158:             return false;",
          "",
          "---------------"
        ],
        "src/olympusmn_int.cpp||src/olympusmn_int.cpp": [
          "File: src/olympusmn_int.cpp -> src/olympusmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:                 v = (uint16_t)value.toLong(1);",
          "1487:                 for (int i = 0; focusModes1[i].val != 0; i++) {",
          "1488:                     if ((v & focusModes1[i].val) != 0) {",
          "1490:                             os << \", \";",
          "1491:                         }",
          "1492:                         p = focusModes1[i].label;",
          "",
          "[Removed Lines]",
          "1489:                         if (p.size() > 0) {",
          "",
          "[Added Lines]",
          "1489:                         if (!p.empty()) {",
          "",
          "---------------"
        ],
        "src/pngchunk_int.cpp||src/pngchunk_int.cpp": [
          "File: src/pngchunk_int.cpp -> src/pngchunk_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:                     pCur = record + sizeHdr + sizeIptc;",
          "326:                     pCur += (sizeIptc & 1);",
          "327:                 }",
          "332: #ifndef SUPPRESS_WARNINGS",
          "333:                     EXV_WARNING << \"Failed to decode IPTC metadata.\\n\";",
          "334: #endif",
          "",
          "[Removed Lines]",
          "328:                 if (   iptcBlob.size() > 0",
          "329:                     && IptcParser::decode(pImage->iptcData(),",
          "330:                                           &iptcBlob[0],",
          "331:                                           static_cast<uint32_t>(iptcBlob.size()))) {",
          "",
          "[Added Lines]",
          "328:                 if (!iptcBlob.empty() &&",
          "329:                     IptcParser::decode(pImage->iptcData(), &iptcBlob[0], static_cast<uint32_t>(iptcBlob.size()))) {",
          "",
          "---------------"
        ],
        "src/pngimage.cpp||src/pngimage.cpp": [
          "File: src/pngimage.cpp -> src/pngimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:                     Blob blob;",
          "616:                     ExifParser::encode(blob, littleEndian, exifData_);",
          "619:                         static const char exifHeader[] = { 0x45, 0x78, 0x69, 0x66, 0x00, 0x00 };",
          "620:                         std::string rawExif =   std::string(exifHeader, 6)",
          "621:                                               + std::string((const char*)&blob[0], blob.size());",
          "",
          "[Removed Lines]",
          "617:                     if (blob.size() > 0)",
          "618:                     {",
          "",
          "[Added Lines]",
          "617:                     if (!blob.empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685: #endif",
          "686:                     }",
          "687:                 }",
          "690:                     std::string chunk = PngChunk::makeMetadataChunk(xmpPacket_, mdXmp);",
          "691:                     if (outIo.write((const byte*)chunk.data(), static_cast<long>(chunk.size())) != (long)chunk.size()) {",
          "",
          "[Removed Lines]",
          "688:                 if (xmpPacket_.size() > 0) {",
          "",
          "[Added Lines]",
          "687:                 if (!xmpPacket_.empty()) {",
          "",
          "---------------"
        ],
        "src/preview.cpp||src/preview.cpp": [
          "File: src/preview.cpp -> src/preview.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:         width_ = nativePreview_.width_;",
          "420:         height_ = nativePreview_.height_;",
          "421:         valid_ = true;",
          "423:             size_ = nativePreview_.size_;",
          "424:         } else {",
          "425:             size_ = getData().size_;",
          "",
          "[Removed Lines]",
          "422:         if (nativePreview_.filter_ == \"\") {",
          "",
          "[Added Lines]",
          "422:         if (nativePreview_.filter_.empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471: #endif",
          "472:             return DataBuf();",
          "473:         }",
          "475:             return DataBuf(data + nativePreview_.position_, static_cast<long>(nativePreview_.size_));",
          "476:         } else if (nativePreview_.filter_ == \"hex-ai7thumbnail-pnm\") {",
          "477:             const DataBuf ai7thumbnail = decodeHex(data + nativePreview_.position_, static_cast<long>(nativePreview_.size_));",
          "",
          "[Removed Lines]",
          "474:         if (nativePreview_.filter_ == \"\") {",
          "",
          "[Added Lines]",
          "474:         if (nativePreview_.filter_.empty()) {",
          "",
          "---------------"
        ],
        "src/properties.cpp||src/properties.cpp": [
          "File: src/properties.cpp -> src/properties.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:             throw Error(kerInvalidKey, key);",
          "2810:         }",
          "2811:         std::string prefix = key.substr(pos0, pos1 - pos0);",
          "2813:             throw Error(kerInvalidKey, key);",
          "2814:         }",
          "2815:         std::string property = key.substr(pos1 + 1);",
          "2817:             throw Error(kerInvalidKey, key);",
          "2818:         }",
          "",
          "[Removed Lines]",
          "2812:         if (prefix == \"\") {",
          "2816:         if (property == \"\") {",
          "",
          "[Added Lines]",
          "2812:         if (prefix.empty()) {",
          "2816:         if (property.empty()) {",
          "",
          "---------------"
        ],
        "src/psdimage.cpp||src/psdimage.cpp": [
          "File: src/psdimage.cpp -> src/psdimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:                 io_->read(xmpPacket.pData_, xmpPacket.size_);",
          "281:                 if (io_->error() || io_->eof()) throw Error(kerFailedToReadImageData);",
          "282:                 xmpPacket_.assign(reinterpret_cast<char *>(xmpPacket.pData_), xmpPacket.size_);",
          "284: #ifndef SUPPRESS_WARNINGS",
          "285:                     EXV_WARNING << \"Failed to decode XMP metadata.\\n\";",
          "286: #endif",
          "",
          "[Removed Lines]",
          "283:                 if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "[Added Lines]",
          "283:                 if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "610:             }",
          "611:             ExifParser::encode(blob, bo, exifData);",
          "614: #ifdef EXIV2_DEBUG_MESSAGES",
          "615:                 std::cerr << std::hex << \"write: resourceId: \" << kPhotoshopResourceID_ExifInfo << \"\\n\";",
          "616:                 std::cerr << std::dec << \"Writing ExifInfo: size: \" << blob.size() << \"\\n\";",
          "",
          "[Removed Lines]",
          "613:             if (blob.size() > 0) {",
          "",
          "[Added Lines]",
          "613:             if (!blob.empty()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "654:             }",
          "655:         }",
          "658: #ifdef EXIV2_DEBUG_MESSAGES",
          "659:             std::cerr << std::hex << \"write: resourceId: \" << kPhotoshopResourceID_XMPPacket << \"\\n\";",
          "660:             std::cerr << std::dec << \"Writing XMPPacket: size: \" << xmpPacket.size() << \"\\n\";",
          "",
          "[Removed Lines]",
          "657:         if (xmpPacket.size() > 0) {",
          "",
          "[Added Lines]",
          "657:         if (!xmpPacket.empty()) {",
          "",
          "---------------"
        ],
        "src/tags_int.cpp||src/tags_int.cpp": [
          "File: src/tags_int.cpp -> src/tags_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2808:             std::string photographer(val, 0, pos);",
          "2809:             if (photographer != \" \") os << photographer;",
          "2810:             std::string editor(val, pos + 1);",
          "2812:                 if (photographer != \" \") os << \", \";",
          "2813:                 os << editor;",
          "2814:             }",
          "",
          "[Removed Lines]",
          "2811:             if (editor != \"\") {",
          "",
          "[Added Lines]",
          "2811:             if (!editor.empty()) {",
          "",
          "---------------"
        ],
        "src/utils.cpp||src/utils.cpp": [
          "File: src/utils.cpp -> src/utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     std::string dirname(const std::string& path)",
          "51:     {",
          "54:         std::string p = path;",
          "55:         while (   p.length() > 1",
          "",
          "[Removed Lines]",
          "52:         if (path == \"\") return \".\";",
          "",
          "[Added Lines]",
          "52:         if (path.empty())",
          "53:             return \".\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     std::string basename(const std::string& path, bool delsuffix)",
          "73:     {",
          "76:         std::string p = path;",
          "77:         while (   p.length() > 1",
          "",
          "[Removed Lines]",
          "74:         if (path == \"\") return \".\";",
          "",
          "[Added Lines]",
          "75:         if (path.empty())",
          "76:             return \".\";",
          "",
          "---------------"
        ],
        "src/value.cpp||src/value.cpp": [
          "File: src/value.cpp -> src/value.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:     long StringValueBase::copy(byte* buf, ByteOrder /*byteOrder*/) const",
          "310:     {",
          "313:         assert(buf != 0);",
          "314:         return static_cast<long>(",
          "",
          "[Removed Lines]",
          "311:         if (value_.size() == 0) return 0;",
          "",
          "[Added Lines]",
          "311:         if (value_.empty())",
          "312:             return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:     {",
          "383:         value_ = buf;",
          "386:         return 0;",
          "387:     }",
          "",
          "[Removed Lines]",
          "385:         if (value_.size() == 0 || value_[value_.size()-1] != '\\0') value_ += '\\0';",
          "",
          "[Added Lines]",
          "386:         if (value_.empty() || value_[value_.size() - 1] != '\\0')",
          "387:             value_ += '\\0';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:             }",
          "511:             c = value_.substr(0, 8) + c;",
          "512:         }",
          "514:             return 0;",
          "515:         assert(buf != 0);",
          "516:         return static_cast<long>(c.copy(reinterpret_cast<char*>(buf), c.size()));",
          "",
          "[Removed Lines]",
          "513:         if (c.size() == 0)",
          "",
          "[Added Lines]",
          "515:         if (c.empty())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "625:         std::ostringstream os;",
          "626:         write(os);",
          "627:         std::string s = os.str();",
          "629:         return static_cast<long>(s.size());",
          "630:     }",
          "",
          "[Removed Lines]",
          "628:         if (s.size() > 0) std::memcpy(buf, &s[0], s.size());",
          "",
          "[Added Lines]",
          "630:         if (!s.empty())",
          "631:             std::memcpy(buf, &s[0], s.size());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "831:             if (lang[0] == '\"') {",
          "832:                 lang = lang.substr(1);",
          "835:                     throw Error(kerInvalidLangAltValue, buf);",
          "837:                 lang = lang.substr(0, lang.length()-1);",
          "838:             }",
          "843:             std::string::size_type charPos = lang.find_first_not_of(ALPHA);",
          "",
          "[Removed Lines]",
          "834:                 if (lang == \"\" || lang.find('\"') != lang.length()-1)",
          "840:             if (lang == \"\") throw Error(kerInvalidLangAltValue, buf);",
          "",
          "[Added Lines]",
          "837:                 if (lang.empty() || lang.find('\"') != lang.length() - 1)",
          "843:             if (lang.empty())",
          "844:                 throw Error(kerInvalidLangAltValue, buf);",
          "",
          "---------------"
        ],
        "src/version.cpp||src/version.cpp": [
          "File: src/version.cpp -> src/version.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         }",
          "229:     }",
          "230: #endif",
          "233:     return libs;",
          "234: }",
          "",
          "[Removed Lines]",
          "231:     if ( !libs.size() ) libs.push_back(\"unknown\");",
          "",
          "[Added Lines]",
          "231:     if (libs.empty())",
          "232:         libs.push_back(\"unknown\");",
          "",
          "---------------"
        ],
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         if (exifData_.count() > 0) {",
          "170:             ExifParser::encode(blob, littleEndian, exifData_);",
          "172:                 has_exif = true;",
          "173:             }",
          "174:         }",
          "",
          "[Removed Lines]",
          "171:             if (blob.size() > 0) {",
          "",
          "[Added Lines]",
          "171:             if (!blob.empty()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:                               XmpParser::useCompactFormat |",
          "179:                               XmpParser::omitAllFormatting);",
          "180:         }",
          "182:         std::string xmp(xmpPacket_);",
          "",
          "[Removed Lines]",
          "181:         has_xmp = xmpPacket_.size() > 0;",
          "",
          "[Added Lines]",
          "181:         has_xmp = !xmpPacket_.empty();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:             } else if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_XMP)) {",
          "715:                 readOrThrow(*io_, payload.pData_, payload.size_, Exiv2::kerCorruptedMetadata);",
          "716:                 xmpPacket_.assign(reinterpret_cast<char*>(payload.pData_), payload.size_);",
          "718: #ifndef SUPPRESS_WARNINGS",
          "719:                     EXV_WARNING << \"Failed to decode XMP metadata.\" << std::endl;",
          "720: #endif",
          "",
          "[Removed Lines]",
          "717:                 if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "[Added Lines]",
          "717:                 if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "---------------"
        ],
        "src/xmp.cpp||src/xmp.cpp": [
          "File: src/xmp.cpp -> src/xmp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:                 int idx = 1;",
          "765:                 for (auto&& k : la->value_) {",
          "767:                         printNode(ns, i.tagName(), k.second, 0);",
          "768:                         meta.AppendArrayItem(ns.c_str(), i.tagName().c_str(), kXMP_PropArrayIsAlternate,",
          "769:                                              k.second.c_str());",
          "",
          "[Removed Lines]",
          "766:                     if (k.second.size()) {  // remove lang specs with no value",
          "",
          "[Added Lines]",
          "766:                     if (!k.second.empty()) {  // remove lang specs with no value",
          "",
          "---------------"
        ],
        "src/xmpsidecar.cpp||src/xmpsidecar.cpp": [
          "File: src/xmpsidecar.cpp -> src/xmpsidecar.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         if (io_->error()) throw Error(kerFailedToReadImageData);",
          "93:         clearMetadata();",
          "94:         xmpPacket_ = xmpPacket;",
          "96: #ifndef SUPPRESS_WARNINGS",
          "97:             EXV_WARNING << \"Failed to decode XMP metadata.\\n\";",
          "98: #endif",
          "",
          "[Removed Lines]",
          "95:         if (xmpPacket_.size() > 0 && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "[Added Lines]",
          "95:         if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: #endif",
          "171:             }",
          "172:         }",
          "174:             if (xmpPacket_.substr(0, 5)  != \"<?xml\") {",
          "175:                 xmpPacket_ = xmlHeader + xmpPacket_ + xmlFooter;",
          "176:             }",
          "",
          "[Removed Lines]",
          "173:         if (xmpPacket_.size() > 0) {",
          "",
          "[Added Lines]",
          "173:         if (!xmpPacket_.empty()) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68473d9d10a433e0a5cb6bc88e780df2fbd9390e",
      "candidate_info": {
        "commit_hash": "68473d9d10a433e0a5cb6bc88e780df2fbd9390e",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/68473d9d10a433e0a5cb6bc88e780df2fbd9390e",
        "files": [
          "src/image.cpp",
          "src/jpgimage.cpp",
          "src/webpimage.cpp"
        ],
        "message": "Remove static functions readOrThrow and seekOrThrow.",
        "before_after_code_files": [
          "src/image.cpp||src/image.cpp",
          "src/jpgimage.cpp||src/jpgimage.cpp",
          "src/webpimage.cpp||src/webpimage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/image.cpp||src/image.cpp": [
          "File: src/image.cpp -> src/image.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: namespace Exiv2 {",
          "151:     Image::Image(int imageType, uint16_t supportedMetadata, BasicIo::UniquePtr io)",
          "152:         : io_(std::move(io)),",
          "153:           pixelWidth_(0),",
          "",
          "[Removed Lines]",
          "142:     static void readOrThrow(BasicIo& iIo, byte* buf, long rcount, ErrorCode err) {",
          "143:         iIo.readOrThrow(buf, rcount, err);",
          "144:     }",
          "147:     static void seekOrThrow(BasicIo& iIo, long offset, BasicIo::Position pos, ErrorCode err) {",
          "148:         iIo.seekOrThrow(offset, pos, err);",
          "149:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:         do {",
          "344:             uint16_t   dirLength = byteSwap2(dir,0,bSwap);",
          "346:             enforce(dirLength > 0, kerCorruptedMetadata);",
          "",
          "[Removed Lines]",
          "342:             seekOrThrow(io, start, BasicIo::beg, kerCorruptedMetadata);",
          "343:             readOrThrow(io, dir.data(), 2, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "332:             io.seekOrThrow(start, BasicIo::beg, kerCorruptedMetadata);",
          "333:             io.readOrThrow(dir.data(), 2, kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:                 }",
          "367:                 bFirst = false;",
          "370:                 uint16_t tag    = byteSwap2(dir,0,bSwap);",
          "371:                 uint16_t type   = byteSwap2(dir,2,bSwap);",
          "372:                 uint32_t count  = byteSwap4(dir,4,bSwap);",
          "",
          "[Removed Lines]",
          "369:                 readOrThrow(io, dir.data(), 12, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "359:                 io.readOrThrow(dir.data(), 12, kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "418:                 if ( bOffsetIsPointer ) {         // read into buffer",
          "419:                     const long restore = io.tell(); // save",
          "423:                 }",
          "425:                 if ( bPrint ) {",
          "",
          "[Removed Lines]",
          "420:                     seekOrThrow(io, offset, BasicIo::beg, kerCorruptedMetadata); // position",
          "421:                     readOrThrow(io, buf.data(), static_cast<long>(count_x_size), kerCorruptedMetadata); // read",
          "422:                     seekOrThrow(io, restore, BasicIo::beg, kerCorruptedMetadata); // restore",
          "",
          "[Added Lines]",
          "410:                     io.seekOrThrow(offset, BasicIo::beg, kerCorruptedMetadata); // position",
          "411:                     io.readOrThrow(buf.data(), static_cast<long>(count_x_size), kerCorruptedMetadata); // read",
          "412:                     io.seekOrThrow(restore, BasicIo::beg, kerCorruptedMetadata); // restore",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "461:                             const long restore = io.tell();",
          "462:                             offset = byteSwap4(buf,k*size,bSwap);",
          "463:                             printIFDStructure(io,out,option,offset,bSwap,c,depth);",
          "465:                         }",
          "466:                     } else if ( option == kpsRecursive && tag == 0x83bb /* IPTCNAA */ ) {",
          "467:                         if (count > 0) {",
          "",
          "[Removed Lines]",
          "464:                             seekOrThrow(io, restore, BasicIo::beg, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "454:                             io.seekOrThrow(restore, BasicIo::beg, kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:                             }",
          "472:                             const long restore = io.tell();",
          "474:                             std::vector<byte> bytes(count) ;  // allocate memory",
          "479:                             IptcData::printStructure(out, makeSliceUntil(&bytes[0], count), depth);",
          "480:                         }",
          "",
          "[Removed Lines]",
          "473:                             seekOrThrow(io, offset, BasicIo::beg, kerCorruptedMetadata);  // position",
          "476:                             readOrThrow(io, &bytes[0], count, kerCorruptedMetadata);",
          "477:                             seekOrThrow(io, restore, BasicIo::beg, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "463:                             io.seekOrThrow(offset, BasicIo::beg, kerCorruptedMetadata);  // position",
          "466:                             io.readOrThrow(&bytes[0], count, kerCorruptedMetadata);",
          "467:                             io.seekOrThrow(restore, BasicIo::beg, kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "484:                         uint32_t jump= 10           ;",
          "485:                         byte     bytes[20]          ;",
          "486:                         const auto chars = reinterpret_cast<const char*>(&bytes[0]);",
          "489:                         bytes[jump]=0               ;",
          "490:                         if ( ::strcmp(\"Nikon\",chars) == 0 ) {",
          "492:                             const long byteslen = count-jump;",
          "493:                             DataBuf bytes(byteslen);  // allocate a buffer",
          "495:                             MemIo memIo(bytes.c_data(), byteslen)    ;  // create a file",
          "496:                             printTiffStructure(memIo,out,option,depth);",
          "497:                         } else {",
          "500:                             printIFDStructure(io,out,option,offset,bSwap,c,depth);",
          "501:                         }",
          "504:                     }",
          "505:                 }",
          "",
          "[Removed Lines]",
          "487:                         seekOrThrow(io, offset, BasicIo::beg, kerCorruptedMetadata);  // position",
          "488:                         readOrThrow(io, bytes, jump, kerCorruptedMetadata)     ;  // read",
          "494:                             readOrThrow(io, bytes.data(), byteslen, kerCorruptedMetadata);  // read",
          "499:                             seekOrThrow(io, 0, BasicIo::beg, kerCorruptedMetadata);  // position",
          "503:                         seekOrThrow(io, restore, BasicIo::beg, kerCorruptedMetadata); // restore",
          "",
          "[Added Lines]",
          "477:                         io.seekOrThrow(offset, BasicIo::beg, kerCorruptedMetadata);  // position",
          "478:                         io.readOrThrow(bytes, jump, kerCorruptedMetadata)     ;  // read",
          "484:                             io.readOrThrow(bytes.data(), byteslen, kerCorruptedMetadata);  // read",
          "489:                             io.seekOrThrow(0, BasicIo::beg, kerCorruptedMetadata);  // position",
          "493:                         io.seekOrThrow(restore, BasicIo::beg, kerCorruptedMetadata); // restore",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "513:                 }",
          "514:             }",
          "515:             if ( start ) {",
          "517:                 start = byteSwap4(dir,0,bSwap);",
          "518:             }",
          "519:         } while (start) ;",
          "",
          "[Removed Lines]",
          "516:                 readOrThrow(io, dir.data(), 4, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "506:                 io.readOrThrow(dir.data(), 4, kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "533:             DataBuf  dir(dirSize);",
          "537:             char c = static_cast<char>(dir.read_uint8(0));",
          "538:             bool bSwap   = ( c == 'M' && isLittleEndianPlatform() )",
          "539:                         || ( c == 'I' && isBigEndianPlatform()    )",
          "",
          "[Removed Lines]",
          "536:             readOrThrow(io, dir.data(),  8, kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "526:             io.readOrThrow(dir.data(),  8, kerCorruptedMetadata);",
          "",
          "---------------"
        ],
        "src/jpgimage.cpp||src/jpgimage.cpp": [
          "File: src/jpgimage.cpp -> src/jpgimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     constexpr uint16_t Photoshop::iptc_ = 0x0404;",
          "95:     constexpr uint16_t Photoshop::preview_ = 0x040c;",
          "107:     static inline bool inRange(int lo,int value, int hi)",
          "108:     {",
          "109:         return lo<=value && value <= hi;",
          "",
          "[Removed Lines]",
          "98:     static void readOrThrow(BasicIo& iIo, byte* buf, long rcount, ErrorCode err) {",
          "99:         iIo.readOrThrow(buf, rcount, err);",
          "100:     }",
          "103:     static void seekOrThrow(BasicIo& iIo, long offset, BasicIo::Position pos, ErrorCode err) {",
          "104:         iIo.seekOrThrow(offset, pos, err);",
          "105:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:             byte sizebuf[2];",
          "387:             uint16_t size = 0;",
          "388:             if (markerHasLength(marker)) {",
          "390:                 size = getUShort(sizebuf, bigEndian);",
          "",
          "[Removed Lines]",
          "389:                 readOrThrow(*io_, sizebuf, 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "379:                 io_->readOrThrow(sizebuf, 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:             DataBuf buf(size);",
          "398:             if (size > 0) {",
          "400:                 buf.copyBytes(0, sizebuf, 2);",
          "401:             }",
          "",
          "[Removed Lines]",
          "399:                 readOrThrow(*io_, buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "389:                 io_->readOrThrow(buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "613:                 byte sizebuf[2];",
          "614:                 uint16_t size = 0;",
          "615:                 if (markerHasLength(marker)) {",
          "617:                     size = getUShort(sizebuf, bigEndian);",
          "",
          "[Removed Lines]",
          "616:                     readOrThrow(*io_, sizebuf, 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "606:                     io_->readOrThrow(sizebuf, 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "624:                 DataBuf buf(size);",
          "625:                 if (size > 0) {",
          "626:                     assert(size >= 2); // enforced above",
          "628:                     buf.copyBytes(0, sizebuf, 2);",
          "629:                 }",
          "",
          "[Removed Lines]",
          "627:                     readOrThrow(*io_, buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "617:                     io_->readOrThrow(buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "844: #ifdef EXIV2_DEBUG_MESSAGES",
          "845:                     std::cout << start << \":\" << length << std::endl;",
          "846: #endif",
          "848:                     DataBuf buf(length);",
          "850:                     tempIo->write(buf.c_data(), buf.size());",
          "851:                 }",
          "852:             }",
          "855:             io_->transfer(*tempIo);  // may throw",
          "857:             readMetadata();",
          "858:         }",
          "859:     }  // JpegBase::printStructure",
          "",
          "[Removed Lines]",
          "847:                     seekOrThrow(*io_, start, BasicIo::beg, kerFailedToReadImageData);",
          "849:                     readOrThrow(*io_, buf.data(), buf.size(), kerFailedToReadImageData);",
          "854:             seekOrThrow(*io_, 0, BasicIo::beg, kerFailedToReadImageData);",
          "856:             seekOrThrow(*io_, 0, BasicIo::beg, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "837:                     io_->seekOrThrow(start, BasicIo::beg, kerFailedToReadImageData);",
          "839:                     io_->readOrThrow(buf.data(), buf.size(), kerFailedToReadImageData);",
          "844:             io_->seekOrThrow(0, BasicIo::beg, kerFailedToReadImageData);",
          "846:             io_->seekOrThrow(0, BasicIo::beg, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "920:             byte sizebuf[2];",
          "921:             uint16_t size = 0;",
          "922:             if (markerHasLength(marker)) {",
          "924:                 size = getUShort(sizebuf, bigEndian);",
          "",
          "[Removed Lines]",
          "923:                 readOrThrow(*io_, sizebuf, 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "913:                 io_->readOrThrow(sizebuf, 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "931:             DataBuf buf(size);",
          "932:             if (size > 0) {",
          "933:                 assert(size >= 2); // enforced above",
          "935:                 buf.copyBytes(0, sizebuf, 2);",
          "936:             }",
          "",
          "[Removed Lines]",
          "934:                 readOrThrow(*io_, buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "924:                 io_->readOrThrow(buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1021:         if (!comment_.empty())",
          "1022:             ++search;",
          "1025:         count = 0;",
          "1026:         marker = advanceToMarker(kerNoImageInInputData);",
          "",
          "[Removed Lines]",
          "1024:         seekOrThrow(*io_, seek, BasicIo::beg, kerNoImageInInputData);",
          "",
          "[Added Lines]",
          "1014:         io_->seekOrThrow(seek, BasicIo::beg, kerNoImageInInputData);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1034:             byte sizebuf[2];",
          "1035:             uint16_t size = 0;",
          "1036:             if (markerHasLength(marker)) {",
          "1038:                 size = getUShort(sizebuf, bigEndian);",
          "",
          "[Removed Lines]",
          "1037:                 readOrThrow(*io_, sizebuf, 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "1027:                 io_->readOrThrow(sizebuf, 2, kerFailedToReadImageData);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1045:             DataBuf buf(size);",
          "1046:             if (size > 0) {",
          "1047:                 assert(size >= 2); // enforced above",
          "1049:                 buf.copyBytes(0, sizebuf, 2);",
          "1050:             }",
          "",
          "[Removed Lines]",
          "1048:                 readOrThrow(*io_, buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "[Added Lines]",
          "1038:                 io_->readOrThrow(buf.data(2), size - 2, kerFailedToReadImageData);",
          "",
          "---------------"
        ],
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: namespace Exiv2 {",
          "56:     using namespace Exiv2::Internal;",
          "64:     WebPImage::WebPImage(BasicIo::UniquePtr io)",
          "65:     : Image(ImageType::webp, mdNone, std::move(io))",
          "66:     {",
          "",
          "[Removed Lines]",
          "60:     static void readOrThrow(BasicIo& iIo, byte* buf, long rcount, ErrorCode err) {",
          "61:         iIo.readOrThrow(buf, rcount, err);",
          "62:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         DataBuf chunkId(WEBP_TAG_SIZE+1);",
          "139:         chunkId.write_uint8(WEBP_TAG_SIZE, '\\0');",
          "142:         uint64_t filesize = Exiv2::getULong(data + WEBP_TAG_SIZE, littleEndian);",
          "",
          "[Removed Lines]",
          "141:         readOrThrow(*io_, data, WEBP_TAG_SIZE * 3, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "135:         io_->readOrThrow(data, WEBP_TAG_SIZE * 3, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:          case we have any exif or xmp data, also check",
          "180:         while (!io_->eof() && static_cast<uint64_t>(io_->tell()) < filesize) {",
          "183:             const uint32_t size_u32 = Exiv2::getULong(size_buff, littleEndian);",
          "",
          "[Removed Lines]",
          "181:             readOrThrow(*io_, chunkId.data(), WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "182:             readOrThrow(*io_, size_buff, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "175:             io_->readOrThrow(chunkId.data(), WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "176:             io_->readOrThrow(size_buff, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:                     Exiv2::kerCorruptedMetadata);",
          "188:             const long size = static_cast<long>(size_u32);",
          "189:             DataBuf payload(size);",
          "191:             if ( payload.size() % 2 ) {",
          "192:               byte c = 0;",
          "194:             }",
          "",
          "[Removed Lines]",
          "190:             readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "193:               readOrThrow(*io_, &c, 1, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "184:             io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "187:               io_->readOrThrow(&c, 1, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:         io_->seek(12, BasicIo::beg);",
          "317:         while (!io_->eof() && static_cast<uint64_t>(io_->tell()) < filesize) {",
          "321:             const uint32_t size_u32 = Exiv2::getULong(size_buff, littleEndian);",
          "",
          "[Removed Lines]",
          "318:             readOrThrow(*io_, chunkId.data(), 4, Exiv2::kerCorruptedMetadata);",
          "319:             readOrThrow(*io_, size_buff, 4, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "312:             io_->readOrThrow(chunkId.data(), 4, Exiv2::kerCorruptedMetadata);",
          "313:             io_->readOrThrow(size_buff, 4, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "326:             const long size = static_cast<long>(size_u32);",
          "328:             DataBuf payload(size);",
          "330:             if ( io_->tell() % 2 ) io_->seek(+1,BasicIo::cur); // skip pad",
          "332:             if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_VP8X)) {",
          "",
          "[Removed Lines]",
          "329:             readOrThrow(*io_, payload.data(), size, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "323:             io_->readOrThrow(payload.data(), size, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "518:         DataBuf chunkId(5);",
          "519:         chunkId.write_uint8(4, '\\0');",
          "523:         const uint32_t filesize_u32 =",
          "524:             Safe::add(Exiv2::getULong(data + WEBP_TAG_SIZE, littleEndian), 8U);",
          "",
          "[Removed Lines]",
          "521:         readOrThrow(*io_, data, WEBP_TAG_SIZE * 3, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "515:         io_->readOrThrow(data, WEBP_TAG_SIZE * 3, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "545:         chunkId.write_uint8(4, '\\0');",
          "546:         while (!io_->eof() && io_->tell() < filesize) {",
          "550:             const uint32_t size_u32 = Exiv2::getULong(size_buff, littleEndian);",
          "",
          "[Removed Lines]",
          "547:             readOrThrow(*io_, chunkId.data(), WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "548:             readOrThrow(*io_, size_buff, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "541:             io_->readOrThrow(chunkId.data(), WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "542:             io_->readOrThrow(size_buff, WEBP_TAG_SIZE, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "566:                 has_canvas_data = true;",
          "567:                 byte size_buf[WEBP_TAG_SIZE];",
          "572:                 memcpy(&size_buf, payload.c_data(4), 3);",
          "",
          "[Removed Lines]",
          "569:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "563:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "581:                 enforce(size >= 10, Exiv2::kerCorruptedMetadata);",
          "583:                 has_canvas_data = true;",
          "585:                 byte size_buf[WEBP_TAG_SIZE];",
          "",
          "[Removed Lines]",
          "584:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "578:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "602:                 byte size_buf_w[2];",
          "603:                 byte size_buf_h[3];",
          "608:                 memcpy(&size_buf_w, payload.c_data(1), 2);",
          "",
          "[Removed Lines]",
          "605:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "599:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "620:                 has_canvas_data = true;",
          "621:                 byte size_buf[WEBP_TAG_SIZE];",
          "626:                 memcpy(&size_buf, payload.c_data(6), 3);",
          "",
          "[Removed Lines]",
          "623:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "617:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "632:                 size_buf[3] = 0;",
          "633:                 pixelHeight_ = Exiv2::getULong(size_buf, littleEndian) + 1;",
          "634:             } else if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_ICCP)) {",
          "636:                 this->setIccProfile(std::move(payload));",
          "637:             } else if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_EXIF)) {",
          "640:                 byte  size_buff2[2];",
          "",
          "[Removed Lines]",
          "635:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "638:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "629:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "632:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "713:                     exifData_.clear();",
          "714:                 }",
          "715:             } else if (equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_XMP)) {",
          "717:                 xmpPacket_.assign(payload.c_str(), payload.size());",
          "718:                 if (!xmpPacket_.empty() && XmpParser::decode(xmpData_, xmpPacket_)) {",
          "719: #ifndef SUPPRESS_WARNINGS",
          "",
          "[Removed Lines]",
          "716:                 readOrThrow(*io_, payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "710:                 io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "756:         byte webp[len];",
          "757:         byte data[len];",
          "758:         byte riff[len];",
          "762:         bool matched_riff = (memcmp(riff, RiffImageId, len) == 0);",
          "763:         bool matched_webp = (memcmp(webp, WebPImageId, len) == 0);",
          "764:         iIo.seek(-12, BasicIo::cur);",
          "",
          "[Removed Lines]",
          "759:         readOrThrow(iIo, riff, len, Exiv2::kerCorruptedMetadata);",
          "760:         readOrThrow(iIo, data, len, Exiv2::kerCorruptedMetadata);",
          "761:         readOrThrow(iIo, webp, len, Exiv2::kerCorruptedMetadata);",
          "",
          "[Added Lines]",
          "753:         iIo.readOrThrow(riff, len, Exiv2::kerCorruptedMetadata);",
          "754:         iIo.readOrThrow(data, len, Exiv2::kerCorruptedMetadata);",
          "755:         iIo.readOrThrow(webp, len, Exiv2::kerCorruptedMetadata);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b84f4bd64a685a7e5a475fa65feb9ab2339b3b7",
      "candidate_info": {
        "commit_hash": "2b84f4bd64a685a7e5a475fa65feb9ab2339b3b7",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/2b84f4bd64a685a7e5a475fa65feb9ab2339b3b7",
        "files": [
          "include/exiv2/types.hpp",
          "include/exiv2/value.hpp",
          "samples/Jzon.cpp",
          "samples/geotag.cpp",
          "samples/largeiptc-test.cpp",
          "samples/stringto-test.cpp",
          "samples/write-test.cpp",
          "src/actions.cpp",
          "src/bmffimage.cpp",
          "src/canonmn_int.cpp",
          "src/convert.cpp",
          "src/datasets.cpp",
          "src/http.cpp",
          "src/image.cpp",
          "src/pgfimage.cpp",
          "src/preview.cpp",
          "src/tags_int.cpp",
          "src/types.cpp",
          "src/value.cpp",
          "src/webpimage.cpp",
          "src/xmp.cpp"
        ],
        "message": "fix: zero initialize local variables. (#1743)\n\n* Zero initialize local variables.\n\n* Initialize xmpID_",
        "before_after_code_files": [
          "include/exiv2/types.hpp||include/exiv2/types.hpp",
          "include/exiv2/value.hpp||include/exiv2/value.hpp",
          "samples/Jzon.cpp||samples/Jzon.cpp",
          "samples/geotag.cpp||samples/geotag.cpp",
          "samples/largeiptc-test.cpp||samples/largeiptc-test.cpp",
          "samples/stringto-test.cpp||samples/stringto-test.cpp",
          "samples/write-test.cpp||samples/write-test.cpp",
          "src/actions.cpp||src/actions.cpp",
          "src/bmffimage.cpp||src/bmffimage.cpp",
          "src/canonmn_int.cpp||src/canonmn_int.cpp",
          "src/convert.cpp||src/convert.cpp",
          "src/datasets.cpp||src/datasets.cpp",
          "src/http.cpp||src/http.cpp",
          "src/image.cpp||src/image.cpp",
          "src/pgfimage.cpp||src/pgfimage.cpp",
          "src/preview.cpp||src/preview.cpp",
          "src/tags_int.cpp||src/tags_int.cpp",
          "src/types.cpp||src/types.cpp",
          "src/value.cpp||src/value.cpp",
          "src/webpimage.cpp||src/webpimage.cpp",
          "src/xmp.cpp||src/xmp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/exiv2/types.hpp||include/exiv2/types.hpp": [
          "File: include/exiv2/types.hpp -> include/exiv2/types.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:     T stringTo(const std::string& s, bool& ok)",
          "504:     {",
          "505:         std::istringstream is(s);",
          "507:         ok = bool(is >> tmp);",
          "508:         std::string rest;",
          "509:         is >> std::skipws >> rest;",
          "",
          "[Removed Lines]",
          "506:         T tmp;",
          "",
          "[Added Lines]",
          "506:         T tmp = T();",
          "",
          "---------------"
        ],
        "include/exiv2/value.hpp||include/exiv2/value.hpp": [
          "File: include/exiv2/value.hpp -> include/exiv2/value.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1560:     int ValueType<T>::read(const std::string& buf)",
          "1561:     {",
          "1562:         std::istringstream is(buf);",
          "1564:         ValueList val;",
          "1565:         while (!(is.eof())) {",
          "1566:             is >> tmp;",
          "",
          "[Removed Lines]",
          "1563:         T tmp;",
          "",
          "[Added Lines]",
          "1563:         T tmp = T();",
          "",
          "---------------"
        ],
        "samples/Jzon.cpp||samples/Jzon.cpp": [
          "File: samples/Jzon.cpp -> samples/Jzon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   if (IsNumber())",
          "204:   {",
          "205:    std::stringstream sstr(valueStr);",
          "207:    sstr >> val;",
          "208:    return val;",
          "209:   }",
          "",
          "[Removed Lines]",
          "206:    int val;",
          "",
          "[Added Lines]",
          "206:    int val = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:   if (IsNumber())",
          "215:   {",
          "216:    std::stringstream sstr(valueStr);",
          "218:    sstr >> val;",
          "219:    return val;",
          "220:   }",
          "",
          "[Removed Lines]",
          "217:    float val;",
          "",
          "[Added Lines]",
          "217:    float val = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:   if (IsNumber())",
          "226:   {",
          "227:    std::stringstream sstr(valueStr);",
          "229:    sstr >> val;",
          "230:    return val;",
          "231:   }",
          "",
          "[Removed Lines]",
          "228:    double val;",
          "",
          "[Added Lines]",
          "228:    double val = 0;",
          "",
          "---------------"
        ],
        "samples/geotag.cpp||samples/geotag.cpp": [
          "File: samples/geotag.cpp -> samples/geotag.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     int mm = 0 ;",
          "236:     int SS1 = 0 ;",
          "237:     if ( strstr(arg,\":\") || strstr(arg,\"-\") ) {",
          "240:         sscanf(arg,\"%d%c%d%c%d%c%d%c%d%c%d\",&YY,&a,&MM,&b,&DD,&c,&HH,&d,&mm,&e,&SS1);",
          "241:     }",
          "242:     sprintf(result,\"%d/1 %d/1 %d/1\",HH,mm,SS1);",
          "",
          "[Removed Lines]",
          "238:         int  YY,MM,DD    ;",
          "239:         char a,b,c,d,e   ;",
          "",
          "[Added Lines]",
          "238:         int YY=0,MM=0,DD=0;",
          "239:         char a=0,b=0,c=0,d=0,e=0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:         if ( strstr(arg,\":\") || strstr(arg,\"-\") ) {",
          "411:             sscanf(arg,\"%d%c%d%c%d%c%d%c%d%c%d\",&YY,&a,&MM,&b,&DD,&c,&HH,&d,&mm,&e,&SS1);",
          "413:             struct tm T;",
          "",
          "[Removed Lines]",
          "409:             int  YY,MM,DD,HH,mm,SS1 ;",
          "410:             char a,b,c,d,e   ;",
          "",
          "[Added Lines]",
          "409:             int  YY=0,MM=0,DD=0,HH=0,mm=0,SS1=0;",
          "410:             char a=0,b=0,c=0,d=0,e=0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741: {",
          "742:     int   h=0;",
          "743:     int   m=0;",
          "745:     try {",
          "746:         sscanf(adjust,\"%d%c%d\",&h,&c,&m);",
          "747:     } catch ( ... ) {} ;",
          "",
          "[Removed Lines]",
          "744:     char  c  ;",
          "",
          "[Added Lines]",
          "744:     char  c=0;",
          "",
          "---------------"
        ],
        "samples/largeiptc-test.cpp||samples/largeiptc-test.cpp": [
          "File: samples/largeiptc-test.cpp -> samples/largeiptc-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         Exiv2::DataBuf irb = Exiv2::Photoshop::setIptcIrb(nullptr, 0, iptcData);",
          "70:         std::cout << \"IRB buffer : \" << irb.size_ << \"\\n\";",
          "71:         const Exiv2::byte* record;",
          "74:         Exiv2::Photoshop::locateIptcIrb(irb.pData_, irb.size_, &record, &sizeHdr, &sizeData);",
          "75:         Exiv2::DataBuf rawIptc = Exiv2::IptcParser::encode(iptcData);",
          "76:         std::cout << \"Comparing IPTC and IRB size... \";",
          "",
          "[Removed Lines]",
          "72:         uint32_t sizeHdr;",
          "73:         uint32_t sizeData;",
          "",
          "[Added Lines]",
          "72:         uint32_t sizeHdr = 0;",
          "73:         uint32_t sizeData = 0;",
          "",
          "---------------"
        ],
        "samples/stringto-test.cpp||samples/stringto-test.cpp": [
          "File: samples/stringto-test.cpp -> samples/stringto-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         try {",
          "77:             std::string s(testcase);",
          "78:             std::cout << std::setw(12) << std::left << s;",
          "81:             long l = Exiv2::parseLong(s, ok);",
          "82:             std::cout << std::setw(12) << std::left;",
          "",
          "[Removed Lines]",
          "79:             bool ok;",
          "",
          "[Added Lines]",
          "79:             bool ok = false;",
          "",
          "---------------"
        ],
        "samples/write-test.cpp||samples/write-test.cpp": [
          "File: samples/write-test.cpp -> samples/write-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     std::string testFile = argv[1];",
          "60:     std::istringstream iss(argv[2]);",
          "62:     iss >> testNo;",
          "64:     int rc = 0;",
          "",
          "[Removed Lines]",
          "61:     int testNo;",
          "",
          "[Added Lines]",
          "61:     int testNo = 0;",
          "",
          "---------------"
        ],
        "src/actions.cpp||src/actions.cpp": [
          "File: src/actions.cpp -> src/actions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:         std::memset(tm, 0x0, sizeof(struct tm));",
          "1806:         tm->tm_isdst = -1;",
          "1809:         if (!Util::strtol(timeStr.substr(0,4).c_str(), tmp)) return 5;",
          "1810:         tm->tm_year = tmp - 1900;",
          "1811:         if (!Util::strtol(timeStr.substr(5,2).c_str(), tmp)) return 6;",
          "",
          "[Removed Lines]",
          "1808:         long tmp;",
          "",
          "[Added Lines]",
          "1808:         long tmp = 0;",
          "",
          "---------------"
        ],
        "src/bmffimage.cpp||src/bmffimage.cpp": [
          "File: src/bmffimage.cpp -> src/bmffimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:         visits_max_ = io_->size() / 16;",
          "565:         unknownID_ = 0xffff;",
          "566:         exifID_    = unknownID_;",
          "568:         long address = 0;",
          "569:         while (address < static_cast<long>(io_->size())) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:         xmpID_     = unknownID_;",
          "",
          "---------------"
        ],
        "src/canonmn_int.cpp||src/canonmn_int.cpp": [
          "File: src/canonmn_int.cpp -> src/canonmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2686:                                               const ExifData*)",
          "2687:     {",
          "2688:         std::istringstream is(value.toString());",
          "2690:         is >> l;",
          "2691:         return os << std::setw(4) << std::setfill('0') << std::hex",
          "2692:                   << ((l & 0xffff0000) >> 16)",
          "",
          "[Removed Lines]",
          "2689:         uint32_t l;",
          "",
          "[Added Lines]",
          "2689:         uint32_t l = 0;",
          "",
          "---------------"
        ],
        "src/convert.cpp||src/convert.cpp": [
          "File: src/convert.cpp -> src/convert.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:         auto pos = exifData_->findKey(ExifKey(from));",
          "568:         if (pos == exifData_->end()) return;",
          "569:         if (!prepareXmpTarget(to)) return;",
          "571:         std::string subsec;",
          "572:         char buf[30];",
          "",
          "[Removed Lines]",
          "570:         int year, month, day, hour, min, sec;",
          "",
          "[Added Lines]",
          "570:         int year=0, month=0, day=0, hour=0, min=0, sec=0;",
          "",
          "---------------"
        ],
        "src/datasets.cpp||src/datasets.cpp": [
          "File: src/datasets.cpp -> src/datasets.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:     uint16_t IptcDataSets::dataSet(const std::string& dataSetName,",
          "498:                                    uint16_t recordId)",
          "499:     {",
          "501:         int idx = dataSetIdx(dataSetName, recordId);",
          "502:         if (idx != -1) {",
          "",
          "[Removed Lines]",
          "500:         uint16_t dataSet;",
          "",
          "[Added Lines]",
          "500:         uint16_t dataSet = 0;",
          "",
          "---------------"
        ],
        "src/http.cpp||src/http.cpp": [
          "File: src/http.cpp -> src/http.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     n = forgive(recv(sockfd, buffer, static_cast<int>(buff_l), 0), err);",
          "313:     while ( n >= 0 && OK(status) ) {",
          "314:         if ( n ) {",
          "",
          "[Removed Lines]",
          "311:     int err ;",
          "",
          "[Added Lines]",
          "311:     int err = 0;",
          "",
          "---------------"
        ],
        "src/image.cpp||src/image.cpp": [
          "File: src/image.cpp -> src/image.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     uint16_t Image::byteSwap2(const DataBuf& buf,size_t offset,bool bSwap)",
          "259:     {",
          "261:         auto p = reinterpret_cast<char*>(&v);",
          "262:         p[0] = buf.pData_[offset];",
          "263:         p[1] = buf.pData_[offset+1];",
          "",
          "[Removed Lines]",
          "260:         uint16_t v;",
          "",
          "[Added Lines]",
          "260:         uint16_t v = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     uint32_t Image::byteSwap4(const DataBuf& buf,size_t offset,bool bSwap)",
          "268:     {",
          "270:         auto p = reinterpret_cast<char*>(&v);",
          "271:         p[0] = buf.pData_[offset];",
          "272:         p[1] = buf.pData_[offset+1];",
          "",
          "[Removed Lines]",
          "269:         uint32_t v;",
          "",
          "[Added Lines]",
          "269:         uint32_t v = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     uint64_t Image::byteSwap8(const DataBuf& buf,size_t offset,bool bSwap)",
          "279:     {",
          "281:         auto p = reinterpret_cast<byte*>(&v);",
          "283:         for(int i = 0; i < 8; i++)",
          "",
          "[Removed Lines]",
          "280:         uint64_t v;",
          "",
          "[Added Lines]",
          "280:         uint64_t v = 0;",
          "",
          "---------------"
        ],
        "src/pgfimage.cpp||src/pgfimage.cpp": [
          "File: src/pgfimage.cpp -> src/pgfimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     static uint32_t byteSwap_(Exiv2::DataBuf& buf,size_t offset,bool bSwap)",
          "68:     {",
          "70:         auto p = reinterpret_cast<char*>(&v);",
          "71:         int      i;",
          "72:         for ( i = 0 ; i < 4 ; i++ ) p[i] = buf.pData_[offset+i];",
          "",
          "[Removed Lines]",
          "69:         uint32_t v;",
          "",
          "[Added Lines]",
          "69:         uint32_t v = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         readPgfHeaderSize(*io_);",
          "193:         DataBuf header      = readPgfHeaderStructure(*io_, w, h);",
          "195:         Image::UniquePtr img  = ImageFactory::create(ImageType::png);",
          "",
          "[Removed Lines]",
          "192:         int w, h;",
          "",
          "[Added Lines]",
          "192:         int w = 0, h = 0;",
          "",
          "---------------"
        ],
        "src/preview.cpp||src/preview.cpp": [
          "File: src/preview.cpp -> src/preview.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:         if (nativePreview_.filter_ == \"hex-irb\") {",
          "483:             const DataBuf psData = decodeHex(data + nativePreview_.position_, static_cast<long>(nativePreview_.size_));",
          "484:             const byte *record;",
          "487:             if (Photoshop::locatePreviewIrb(psData.pData_, psData.size_, &record, &sizeHdr, &sizeData) != 0) {",
          "488: #ifndef SUPPRESS_WARNINGS",
          "489:                 EXV_WARNING << \"Missing preview IRB in Photoshop EPS preview.\\n\";",
          "",
          "[Removed Lines]",
          "485:             uint32_t sizeHdr;",
          "486:             uint32_t sizeData;",
          "",
          "[Added Lines]",
          "485:             uint32_t sizeHdr = 0;",
          "486:             uint32_t sizeData = 0;",
          "",
          "---------------"
        ],
        "src/tags_int.cpp||src/tags_int.cpp": [
          "File: src/tags_int.cpp -> src/tags_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2603:         if (ti != nullptr && ti->tag_ != 0xffff) return ti->tag_;",
          "2604:         if (!isHex(tagName, 4, \"0x\")) throw Error(kerInvalidTag, tagName, ifdId);",
          "2605:         std::istringstream is(tagName);",
          "2607:         is >> std::hex >> tag;",
          "2608:         return tag;",
          "2609:     } // tagNumber",
          "",
          "[Removed Lines]",
          "2606:         uint16_t tag;",
          "",
          "[Added Lines]",
          "2606:         uint16_t tag = 0;",
          "",
          "---------------"
        ],
        "src/types.cpp||src/types.cpp": [
          "File: src/types.cpp -> src/types.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:         assert(buf != 0);",
          "533:         assert(tm != 0);",
          "534:         int rc = 1;",
          "536:         int scanned = std::sscanf(buf, \"%4d:%2d:%2d %2d:%2d:%2d\",",
          "537:                                   &year, &mon, &mday, &hour, &min, &sec);",
          "538:         if (scanned == 6) {",
          "",
          "[Removed Lines]",
          "535:         int year, mon, mday, hour, min, sec;",
          "",
          "[Added Lines]",
          "535:         int year = 0, mon = 0, mday = 0, hour = 0, min = 0, sec = 0;",
          "",
          "---------------"
        ],
        "src/value.cpp||src/value.cpp": [
          "File: src/value.cpp -> src/value.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     int DataValue::read(const std::string& buf)",
          "173:     {",
          "174:         std::istringstream is(buf);",
          "176:         ValueType val;",
          "177:         while (!(is.eof())) {",
          "178:             is >> tmp;",
          "",
          "[Removed Lines]",
          "175:         int tmp;",
          "",
          "[Added Lines]",
          "175:         int tmp = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1092:     {",
          "1093:         int rc = 1;",
          "1094:         Time t;",
          "1096:         int scanned = sscanf(buf, format, &t.hour, &t.minute, &t.second,",
          "1097:                              &plusMinus, &t.tzHour, &t.tzMinute);",
          "1098:         if (   scanned    == 6",
          "",
          "[Removed Lines]",
          "1095:         char plusMinus;",
          "",
          "[Added Lines]",
          "1095:         char plusMinus = 0;",
          "",
          "---------------"
        ],
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             DataBuf payload(size);",
          "192:             readOrThrow(*io_, payload.pData_, payload.size_, Exiv2::kerCorruptedMetadata);",
          "193:             if ( payload.size_ % 2 ) {",
          "195:               readOrThrow(*io_, &c, 1, Exiv2::kerCorruptedMetadata);",
          "196:             }",
          "",
          "[Removed Lines]",
          "194:               byte c;",
          "",
          "[Added Lines]",
          "194:               byte c = 0;",
          "",
          "---------------"
        ],
        "src/xmp.cpp||src/xmp.cpp": [
          "File: src/xmp.cpp -> src/xmp.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:         SXMPMeta meta(xmpPacket.data(), static_cast<XMP_StringLen>(xmpPacket.size()));",
          "605:         SXMPIterator iter(meta);",
          "606:         std::string schemaNs, propPath, propValue;",
          "608:         while (iter.Next(&schemaNs, &propPath, &propValue, &opt)) {",
          "609:             printNode(schemaNs, propPath, propValue, opt);",
          "610:             if (XMP_PropIsAlias(opt)) {",
          "",
          "[Removed Lines]",
          "607:         XMP_OptionBits opt;",
          "",
          "[Added Lines]",
          "607:         XMP_OptionBits opt = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:                 bool simpleArray = true;",
          "660:                 SXMPIterator aIter(meta, schemaNs.c_str(), propPath.c_str());",
          "661:                 std::string aSchemaNs, aPropPath, aPropValue;",
          "663:                 while (aIter.Next(&aSchemaNs, &aPropPath, &aPropValue, &aOpt)) {",
          "664:                     if (propPath == aPropPath) continue;",
          "665:                     if (   !XMP_PropIsSimple(aOpt)",
          "",
          "[Removed Lines]",
          "662:                 XMP_OptionBits aOpt;",
          "",
          "[Added Lines]",
          "662:                 XMP_OptionBits aOpt = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04bacdedd6a29e82b2bb877409ec5b1c074d8fbd",
      "candidate_info": {
        "commit_hash": "04bacdedd6a29e82b2bb877409ec5b1c074d8fbd",
        "repo": "Exiv2/exiv2",
        "commit_url": "https://github.com/Exiv2/exiv2/commit/04bacdedd6a29e82b2bb877409ec5b1c074d8fbd",
        "files": [
          "app/actions.cpp",
          "app/exiv2.cpp",
          "samples/exiv2json.cpp",
          "samples/geotag.cpp",
          "samples/getopt-test.cpp",
          "samples/iotest.cpp",
          "samples/mmap-test.cpp",
          "src/basicio.cpp",
          "src/bmffimage.cpp",
          "src/canonmn_int.cpp",
          "src/casiomn_int.cpp",
          "src/convert.cpp",
          "src/crwimage_int.cpp",
          "src/http.cpp",
          "src/image.cpp",
          "src/jpgimage.cpp",
          "src/nikonmn_int.cpp",
          "src/olympusmn_int.cpp",
          "src/panasonicmn_int.cpp",
          "src/pgfimage.cpp",
          "src/pngchunk_int.cpp",
          "src/pngimage.cpp",
          "src/rafimage.cpp",
          "src/tags_int.cpp",
          "src/tiffcomposite_int.cpp",
          "src/tiffvisitor_int.cpp",
          "src/types.cpp",
          "src/value.cpp",
          "src/webpimage.cpp"
        ],
        "message": "clang-tidy: use auto\n\nSigned-off-by: Rosen Penev <rosenp@gmail.com>",
        "before_after_code_files": [
          "app/actions.cpp||app/actions.cpp",
          "app/exiv2.cpp||app/exiv2.cpp",
          "samples/exiv2json.cpp||samples/exiv2json.cpp",
          "samples/geotag.cpp||samples/geotag.cpp",
          "samples/getopt-test.cpp||samples/getopt-test.cpp",
          "samples/iotest.cpp||samples/iotest.cpp",
          "samples/mmap-test.cpp||samples/mmap-test.cpp",
          "src/basicio.cpp||src/basicio.cpp",
          "src/bmffimage.cpp||src/bmffimage.cpp",
          "src/canonmn_int.cpp||src/canonmn_int.cpp",
          "src/casiomn_int.cpp||src/casiomn_int.cpp",
          "src/convert.cpp||src/convert.cpp",
          "src/crwimage_int.cpp||src/crwimage_int.cpp",
          "src/http.cpp||src/http.cpp",
          "src/image.cpp||src/image.cpp",
          "src/jpgimage.cpp||src/jpgimage.cpp",
          "src/nikonmn_int.cpp||src/nikonmn_int.cpp",
          "src/olympusmn_int.cpp||src/olympusmn_int.cpp",
          "src/panasonicmn_int.cpp||src/panasonicmn_int.cpp",
          "src/pgfimage.cpp||src/pgfimage.cpp",
          "src/pngchunk_int.cpp||src/pngchunk_int.cpp",
          "src/pngimage.cpp||src/pngimage.cpp",
          "src/rafimage.cpp||src/rafimage.cpp",
          "src/tags_int.cpp||src/tags_int.cpp",
          "src/tiffcomposite_int.cpp||src/tiffcomposite_int.cpp",
          "src/tiffvisitor_int.cpp||src/tiffvisitor_int.cpp",
          "src/types.cpp||src/types.cpp",
          "src/value.cpp||src/value.cpp",
          "src/webpimage.cpp||src/webpimage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ],
          "candidate": [
            "src/webpimage.cpp||src/webpimage.cpp"
          ]
        }
      },
      "candidate_diff": {
        "app/actions.cpp||app/actions.cpp": [
          "File: app/actions.cpp -> app/actions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "933:         const Params::PreviewNumbers& numbers = Params::instance().previewNumbers_;",
          "934:         for (auto number : numbers) {",
          "936:             if (num == 0) {",
          "938:                 for (num = 0; num < pvList.size(); ++num) {",
          "",
          "[Removed Lines]",
          "935:             size_t num = static_cast<size_t>(number);",
          "",
          "[Added Lines]",
          "935:             auto num = static_cast<size_t>(number);",
          "",
          "---------------"
        ],
        "app/exiv2.cpp||app/exiv2.cpp": [
          "File: app/exiv2.cpp -> app/exiv2.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         assert(task);",
          "154:         if (params.action_ & Action::extract && params.target_ & Params::ctStdInOut && s > 1) {",
          "155:             std::cerr << params.progname() << \": \" << _(\"Only one file is allowed when extracting to stdout\") << std::endl;",
          "156:             rc = 1;",
          "",
          "[Removed Lines]",
          "153:         int s = static_cast<int>(params.files_.size());",
          "",
          "[Added Lines]",
          "153:         auto s = static_cast<int>(params.files_.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "949:     bool more {true};",
          "950:     while   ( more ) {",
          "951:         char buff[buff_size];",
          "953:         more       = n > 0 ;",
          "954:         if ( more ) {",
          "955:             bytes.resize(nBytes+n);",
          "",
          "[Removed Lines]",
          "952:         int n = static_cast<int>(fread(buff, 1, buff_size, f));",
          "",
          "[Added Lines]",
          "952:         auto n = static_cast<int>(fread(buff, 1, buff_size, f));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1270:             }",
          "1271:             if (k > i) {",
          "1272:                 bool ok = false;",
          "1274:                 if (ok && num >= 0) {",
          "1275:                     previewNumbers.insert(num);",
          "1276:                 }",
          "",
          "[Removed Lines]",
          "1273:                 int num = Exiv2::stringTo<int>(os.str(), ok);",
          "",
          "[Added Lines]",
          "1273:                 auto num = Exiv2::stringTo<int>(os.str(), ok);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1282:             }",
          "1283:             if (!(k < optArg.size() && optArg[i] == ',')) break;",
          "1284:         }",
          "1286:         if (ret == 0) {",
          "1287:             previewNumbers.insert(0);",
          "1288:         }",
          "",
          "[Removed Lines]",
          "1285:         int ret = static_cast<int>(k - j);",
          "",
          "[Added Lines]",
          "1285:         auto ret = static_cast<int>(k - j);",
          "",
          "---------------"
        ],
        "samples/exiv2json.cpp||samples/exiv2json.cpp": [
          "File: samples/exiv2json.cpp -> samples/exiv2json.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:         if ( option == 'a' || option == 'i' ) {",
          "310:             Exiv2::IptcData &iptcData = image->iptcData();",
          "312:                 std::string name   ;",
          "313:                 Jzon::Node& object = objectForKey(i->key(),root,name);",
          "314:                 push(object,name,i);",
          "",
          "[Removed Lines]",
          "311:             for (Exiv2::IptcData::const_iterator i = iptcData.begin(); i != iptcData.end(); ++i) {",
          "",
          "[Added Lines]",
          "311:             for (auto i = iptcData.begin(); i != iptcData.end(); ++i) {",
          "",
          "---------------"
        ],
        "samples/geotag.cpp||samples/geotag.cpp": [
          "File: samples/geotag.cpp -> samples/geotag.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     const char* EW   = d>=0.0?\"E\":\"W\";",
          "248:     const char* NSEW = bLat  ? NS: EW;",
          "249:     if ( d < 0 ) d = -d;",
          "251:     d -= deg;",
          "252:     d *= 60;",
          "254:     d -= min;",
          "255:     d *= 60;",
          "257:     char result[200];",
          "258:     if ( bRational )",
          "259:         snprintf(result,sizeof(result),\"%d/1 %d/1 %d/1\" ,deg,min,sec);",
          "",
          "[Removed Lines]",
          "250:     int deg = static_cast<int>(d);",
          "253:     int min = static_cast<int>(d);",
          "256:     int sec = static_cast<int>(d);",
          "",
          "[Added Lines]",
          "250:     auto deg = static_cast<int>(d);",
          "253:     auto min = static_cast<int>(d);",
          "256:     auto sec = static_cast<int>(d);",
          "",
          "---------------"
        ],
        "samples/getopt-test.cpp||samples/getopt-test.cpp": [
          "File: samples/getopt-test.cpp -> samples/getopt-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  do {",
          "115:      n = ::getopt(argc,argv,::optstring);",
          "116:      if ( n >= 0 ) {",
          "118:             std::cout << n << \" = \" << N;",
          "119:         } else {",
          "120:             std::cout << n ;",
          "",
          "[Removed Lines]",
          "117:             char N = static_cast<char>(n);",
          "",
          "[Added Lines]",
          "117:             auto N = static_cast<char>(n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  do {",
          "133:      n = Util::getopt(argc,argv,::optstring);",
          "134:      if ( n >= 0 ) {",
          "136:             std::cout << n << \" = \" << N;",
          "137:         } else {",
          "138:             std::cout << n ;",
          "",
          "[Removed Lines]",
          "135:             char N = static_cast<char>(n);",
          "",
          "[Added Lines]",
          "135:             auto N = static_cast<char>(n);",
          "",
          "---------------"
        ],
        "samples/iotest.cpp||samples/iotest.cpp": [
          "File: samples/iotest.cpp -> samples/iotest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         std::cerr << \": WRS size is not \" << size1 << \"\\n\";",
          "190:         return 2;",
          "191:     }",
          "193:     io.seek(-backup, BasicIo::cur);",
          "195:     int c = EOF;",
          "",
          "[Removed Lines]",
          "192:     long backup = static_cast<long>(size1);",
          "",
          "[Added Lines]",
          "192:     auto backup = static_cast<long>(size1);",
          "",
          "---------------"
        ],
        "samples/mmap-test.cpp||samples/mmap-test.cpp": [
          "File: samples/mmap-test.cpp -> samples/mmap-test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     }",
          "49:     const Exiv2::byte* pData = file.mmap();",
          "51:     DataBuf buf(size);",
          "53:     buf.copyBytes(0, pData, buf.size());",
          "",
          "[Removed Lines]",
          "50:     long size = static_cast<long>(file.size());",
          "",
          "[Added Lines]",
          "50:     auto size = static_cast<long>(file.size());",
          "",
          "---------------"
        ],
        "src/basicio.cpp||src/basicio.cpp": [
          "File: src/basicio.cpp -> src/basicio.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1263:         }",
          "1267:         if (dataSize > 0) {",
          "1268:             auto data = static_cast<byte*>(std::malloc(dataSize));",
          "1269:             src.seek(left, BasicIo::beg);",
          "",
          "[Removed Lines]",
          "1266:         long dataSize = static_cast<long>(src.size() - left - right);",
          "",
          "[Added Lines]",
          "1266:         auto dataSize = static_cast<long>(src.size() - left - right);",
          "",
          "---------------"
        ],
        "src/bmffimage.cpp||src/bmffimage.cpp": [
          "File: src/bmffimage.cpp -> src/bmffimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:         enforce(box_length >= hdrsize, Exiv2::kerCorruptedMetadata);",
          "218:         enforce(box_length - hdrsize <= static_cast<uint64_t>(pbox_end - restore), Exiv2::kerCorruptedMetadata);",
          "221:         if (skipBox(box_type)) {",
          "222:             if (bTrace) {",
          "223:                 out << std::endl;",
          "",
          "[Removed Lines]",
          "220:         const size_t buffer_size = static_cast<size_t>(box_length - hdrsize);",
          "",
          "[Added Lines]",
          "220:         const auto buffer_size = static_cast<size_t>(box_length - hdrsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "637:         xmpID_     = unknownID_;",
          "639:         long address = 0;",
          "641:         while (address < file_end) {",
          "642:             io_->seek(address, BasicIo::beg);",
          "643:             address = boxHandler(std::cout,kpsNone,file_end,0);",
          "",
          "[Removed Lines]",
          "640:         const long file_end = static_cast<long>(io_->size());",
          "",
          "[Added Lines]",
          "640:         const auto file_end = static_cast<long>(io_->size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "671:                 IoCloser closer(*io_);",
          "673:                 long   address = 0;",
          "675:                 while (address < file_end) {",
          "676:                     io_->seek(address, BasicIo::beg);",
          "677:                     address = boxHandler(out,option,file_end,depth);",
          "",
          "[Removed Lines]",
          "674:                 const long file_end = static_cast<long>(io_->size());",
          "",
          "[Added Lines]",
          "674:                 const auto file_end = static_cast<long>(io_->size());",
          "",
          "---------------"
        ],
        "src/canonmn_int.cpp||src/canonmn_int.cpp": [
          "File: src/canonmn_int.cpp -> src/canonmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2730:             return os;",
          "2731:         }",
          "2736:         ExifKey aperKey(\"Exif.CanonCs.MaxAperture\");",
          "2737:         pos = metadata->findKey(aperKey);",
          "",
          "[Removed Lines]",
          "2733:         int const exifFlMin = static_cast<int>(static_cast<float>(pos->value().toInt64(1)) / pos->value().toFloat(2));",
          "2734:         int const exifFlMax = static_cast<int>(static_cast<float>(pos->value().toInt64(0)) / pos->value().toFloat(2));",
          "",
          "[Added Lines]",
          "2733:         auto const exifFlMin = static_cast<int>(static_cast<float>(pos->value().toInt64(1)) / pos->value().toFloat(2));",
          "2734:         auto const exifFlMax = static_cast<int>(static_cast<float>(pos->value().toInt64(0)) / pos->value().toFloat(2));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2895:             std::ostringstream oss;",
          "2896:             oss.copyfmt(os);",
          "2898:             os << std::fixed << std::setprecision(2) << res / 100.0;",
          "2899:             os.copyfmt(oss);",
          "2900:         }",
          "",
          "[Removed Lines]",
          "2897:             int res = static_cast<int>(100.0 * (static_cast<short>(value.toInt64()) / 32.0 + 5.0) + 0.5);",
          "",
          "[Added Lines]",
          "2897:             auto res = static_cast<int>(100.0 * (static_cast<short>(value.toInt64()) / 32.0 + 5.0) + 0.5);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3068:         const auto remainder = val & 0x1f;",
          "3069:         val -= remainder;",
          "3072:         if (frac == 0x0c) {",
          "3073:             frac = 32.0F / 3;",
          "",
          "[Removed Lines]",
          "3070:         float frac = static_cast<float>(remainder);",
          "",
          "[Added Lines]",
          "3070:         auto frac = static_cast<float>(remainder);",
          "",
          "---------------"
        ],
        "src/casiomn_int.cpp||src/casiomn_int.cpp": [
          "File: src/casiomn_int.cpp -> src/casiomn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         std::vector<char> numbers;",
          "528:         for(size_t i=0; i<value.size(); i++)",
          "529:         {",
          "531:             if(l!=0)",
          "532:             {",
          "533:                 numbers.push_back(l);",
          "",
          "[Removed Lines]",
          "530:             const char l = static_cast<char>(value.toInt64(i));",
          "",
          "[Added Lines]",
          "530:             const auto l = static_cast<char>(value.toInt64(i));",
          "",
          "---------------"
        ],
        "src/convert.cpp||src/convert.cpp": [
          "File: src/convert.cpp -> src/convert.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:             deg[i] = static_cast<double>(z)/d;",
          "775:         }",
          "776:         double min = deg[0] * 60.0 + deg[1] + deg[2] / 60.0;",
          "778:         min -= ideg * 60;",
          "779:         std::ostringstream oss;",
          "780:         oss << ideg << \",\"",
          "",
          "[Removed Lines]",
          "777:         int ideg = static_cast<int>(min / 60.0);",
          "",
          "[Added Lines]",
          "777:         auto ideg = static_cast<int>(min / 60.0);",
          "",
          "---------------"
        ],
        "src/crwimage_int.cpp||src/crwimage_int.cpp": [
          "File: src/crwimage_int.cpp -> src/crwimage_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:         const uint32_t component_size = ciffComponent.size();",
          "817:         enforce(component_size % 2 == 0, kerCorruptedMetadata);",
          "818:         enforce(component_size/2 <= static_cast<uint32_t>(std::numeric_limits<uint16_t>::max()), kerCorruptedMetadata);",
          "820:         uint16_t c = 1;",
          "821:         while (c < num_components) {",
          "822:             uint16_t n = 1;",
          "",
          "[Removed Lines]",
          "819:         const uint16_t num_components = static_cast<uint16_t>(component_size/2);",
          "",
          "[Added Lines]",
          "819:         const auto num_components = static_cast<uint16_t>(component_size / 2);",
          "",
          "---------------"
        ],
        "src/http.cpp||src/http.cpp": [
          "File: src/http.cpp -> src/http.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     if (sockfd < 0)",
          "232:         return error(errors, \"unable to create socket\\n\", nullptr, nullptr, 0);",
          "",
          "[Removed Lines]",
          "230:     int sockfd = static_cast<int>(socket(AF_INET , SOCK_STREAM,IPPROTO_TCP));",
          "",
          "[Added Lines]",
          "230:     auto sockfd = static_cast<int>(socket(AF_INET, SOCK_STREAM, IPPROTO_TCP));",
          "",
          "---------------"
        ],
        "src/image.cpp||src/image.cpp": [
          "File: src/image.cpp -> src/image.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:                 enforce(allocate64 <= static_cast<uint64_t>(std::numeric_limits<uint32_t>::max()), kerCorruptedMetadata);",
          "388:                 enforce(allocate64 <= static_cast<uint64_t>(std::numeric_limits<long>::max()), kerCorruptedMetadata);",
          "390:                 DataBuf  buf(allocate);  // allocate a buffer",
          "391:                 buf.copyBytes(0, dir.c_data(8), 4);  // copy dir[8:11] into buffer (short strings)",
          "",
          "[Removed Lines]",
          "389:                 const long allocate = static_cast<long>(allocate64);",
          "",
          "[Added Lines]",
          "389:                 const auto allocate = static_cast<long>(allocate64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:             io.readOrThrow(dir.data(),  8, kerCorruptedMetadata);",
          "521:             bool bSwap   = ( c == 'M' && isLittleEndianPlatform() )",
          "522:                         || ( c == 'I' && isBigEndianPlatform()    )",
          "523:                         ;",
          "",
          "[Removed Lines]",
          "520:             char c = static_cast<char>(dir.read_uint8(0));",
          "",
          "[Added Lines]",
          "520:             auto c = static_cast<char>(dir.read_uint8(0));",
          "",
          "---------------"
        ],
        "src/jpgimage.cpp||src/jpgimage.cpp": [
          "File: src/jpgimage.cpp -> src/jpgimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:                     foundIccData = true ;",
          "399:                     --search ;",
          "400:                 }",
          "",
          "[Removed Lines]",
          "401:                 int chunk = static_cast<int>(buf.read_uint8(2 + 12));",
          "402:                 int chunks = static_cast<int>(buf.read_uint8(2 + 13));",
          "",
          "[Added Lines]",
          "401:                 auto chunk = static_cast<int>(buf.read_uint8(2 + 12));",
          "402:                 auto chunks = static_cast<int>(buf.read_uint8(2 + 13));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:                         if (chunkSize > maxChunkSize) {",
          "1083:                             chunkSize = maxChunkSize;",
          "1086:                             if (Photoshop::valid(newPsData.c_data(), writtenSize + chunkSize)) {",
          "",
          "[Removed Lines]",
          "1085:                             const long writtenSize = static_cast<long>(chunkStart - newPsData.c_data());",
          "",
          "[Added Lines]",
          "1085:                             const auto writtenSize = static_cast<long>(chunkStart - newPsData.c_data());",
          "",
          "---------------"
        ],
        "src/nikonmn_int.cpp||src/nikonmn_int.cpp": [
          "File: src/nikonmn_int.cpp -> src/nikonmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2624:         if (metadata == nullptr)",
          "2625:         {",
          "",
          "[Removed Lines]",
          "2626:             const unsigned char vid = static_cast<unsigned char>(value.toInt64(0));",
          "",
          "[Added Lines]",
          "2626:             const auto vid = static_cast<unsigned char>(value.toInt64(0));",
          "",
          "---------------"
        ],
        "src/olympusmn_int.cpp||src/olympusmn_int.cpp": [
          "File: src/olympusmn_int.cpp -> src/olympusmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1361:             return os << value;",
          "1362:         }",
          "1368:         for (auto&& type : lensTypes) {",
          "1369:             if (type.val[0] == v0 && type.val[1] == v2 && type.val[2] == v3) {",
          "",
          "[Removed Lines]",
          "1364:         byte v0 = static_cast<byte>(value.toInt64(0));",
          "1365:         byte v2 = static_cast<byte>(value.toInt64(2));",
          "1366:         byte v3 = static_cast<byte>(value.toInt64(3));",
          "",
          "[Added Lines]",
          "1364:         auto v0 = static_cast<byte>(value.toInt64(0));",
          "1365:         auto v2 = static_cast<byte>(value.toInt64(2));",
          "1366:         auto v3 = static_cast<byte>(value.toInt64(3));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1407:             return os << value;",
          "1408:         }",
          "1413:         for (auto&& model : extenderModels) {",
          "1414:             if (model.val[0] == v0 && model.val[1] == v2) {",
          "",
          "[Removed Lines]",
          "1410:         byte v0 = static_cast<byte>(value.toInt64(0));",
          "1411:         byte v2 = static_cast<byte>(value.toInt64(2));",
          "",
          "[Added Lines]",
          "1410:         auto v0 = static_cast<byte>(value.toInt64(0));",
          "1411:         auto v2 = static_cast<byte>(value.toInt64(2));",
          "",
          "---------------"
        ],
        "src/panasonicmn_int.cpp||src/panasonicmn_int.cpp": [
          "File: src/panasonicmn_int.cpp -> src/panasonicmn_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     std::ostream& PanasonicMakerNote::printAccelerometer(std::ostream& os, const Value& value, const ExifData*)",
          "673:     {",
          "676:         return os << i;",
          "677:     }  // PanasonicMakerNote::printAccelerometer",
          "679:     std::ostream& PanasonicMakerNote::printRollAngle(std::ostream& os, const Value& value, const ExifData*)",
          "680:     {",
          "683:         std::ostringstream oss;",
          "684:         oss.copyfmt(os);",
          "685:         os << std::fixed << std::setprecision(1) << i / 10.0;",
          "",
          "[Removed Lines]",
          "675:         const int16_t i = static_cast<int16_t>(value.toInt64());",
          "682:         const int16_t i = static_cast<int16_t>(value.toInt64());",
          "",
          "[Added Lines]",
          "675:         const auto i = static_cast<int16_t>(value.toInt64());",
          "682:         const auto i = static_cast<int16_t>(value.toInt64());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:     std::ostream& PanasonicMakerNote::printPitchAngle(std::ostream& os, const Value& value, const ExifData*)",
          "692:     {",
          "695:         std::ostringstream oss;",
          "696:         oss.copyfmt(os);",
          "697:         os << std::fixed << std::setprecision(1) << -i / 10.0;",
          "",
          "[Removed Lines]",
          "694:         const int16_t i = static_cast<int16_t>(value.toInt64());",
          "",
          "[Added Lines]",
          "694:         const auto i = static_cast<int16_t>(value.toInt64());",
          "",
          "---------------"
        ],
        "src/pgfimage.cpp||src/pgfimage.cpp": [
          "File: src/pgfimage.cpp -> src/pgfimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:         img->setIptcData(iptcData_);",
          "182:         img->setXmpData(xmpData_);",
          "183:         img->writeMetadata();",
          "185:         DataBuf imgBuf   = img->io().read(imgSize);",
          "187: #ifdef EXIV2_DEBUG_MESSAGES",
          "",
          "[Removed Lines]",
          "184:         long imgSize = static_cast<long>(img->io().size());",
          "",
          "[Added Lines]",
          "184:         auto imgSize = static_cast<long>(img->io().size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:         if (bufRead != buffer.size())",
          "258:             throw Error(kerInputDataReadFailed);",
          "261:         if (headerSize <= 0 ) throw Error(kerNoImageInInputData);",
          "263: #ifdef EXIV2_DEBUG_MESSAGES",
          "",
          "[Removed Lines]",
          "260:         int headerSize = static_cast<int>(byteSwap_(buffer, 0, bSwap_));",
          "",
          "[Added Lines]",
          "260:         auto headerSize = static_cast<int>(byteSwap_(buffer, 0, bSwap_));",
          "",
          "---------------"
        ],
        "src/pngchunk_int.cpp||src/pngchunk_int.cpp": [
          "File: src/pngchunk_int.cpp -> src/pngchunk_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:                             Exiv2::kerCorruptedMetadata);",
          "160:                     const byte* text = data.c_data(keysize + 3 + languageTextSize + 1 + translatedKeyTextSize + 1);",
          "162:                         data.size() - (keysize + 3 + languageTextSize + 1 + translatedKeyTextSize + 1));",
          "164:                     if (compressionFlag == 0x00) {",
          "",
          "[Removed Lines]",
          "161:                     const long textsize = static_cast<long>(",
          "",
          "[Added Lines]",
          "161:                     const auto textsize = static_cast<long>(",
          "",
          "---------------"
        ],
        "src/pngimage.cpp||src/pngimage.cpp": [
          "File: src/pngimage.cpp -> src/pngimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:                                     1; // leading string length",
          "314:                     enforce(name_l < dataOffset, kerCorruptedMetadata);",
          "317:                     bool      bLF    = false;",
          "",
          "[Removed Lines]",
          "316:                     uint32_t  start  = static_cast<uint32_t>(name_l);",
          "",
          "[Added Lines]",
          "316:                     auto start = static_cast<uint32_t>(name_l);",
          "",
          "---------------"
        ],
        "src/rafimage.cpp||src/rafimage.cpp": [
          "File: src/rafimage.cpp -> src/rafimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:                 kerCorruptedMetadata);",
          "302: #endif",
          "307:         enforce(jpg_img_len >= 12, kerCorruptedMetadata);",
          "",
          "[Removed Lines]",
          "304:         long jpg_img_off = static_cast<long>(jpg_img_off_u32);",
          "305:         long jpg_img_len = static_cast<long>(jpg_img_len_u32);",
          "",
          "[Added Lines]",
          "304:         auto jpg_img_off = static_cast<long>(jpg_img_off_u32);",
          "305:         auto jpg_img_len = static_cast<long>(jpg_img_len_u32);",
          "",
          "---------------"
        ],
        "src/tags_int.cpp||src/tags_int.cpp": [
          "File: src/tags_int.cpp -> src/tags_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2784:             if (fraction != 0) p = 1;",
          "2785:             const double ss = std::fmod(t, 60);",
          "2786:             const double minutes = (t - ss)/60;",
          "2788:             const double hours = (minutes - mm)/60;",
          "2791:             os << std::setw(2) << std::setfill('0') << std::right << hh << \":\"",
          "2792:                << std::setw(2) << std::setfill('0') << std::right << mm << \":\"",
          "",
          "[Removed Lines]",
          "2787:             const int mm = static_cast<int>(std::fmod(minutes, 60));",
          "2789:             const int hh = static_cast<int>(std::fmod(hours, 24));",
          "",
          "[Added Lines]",
          "2787:             const auto mm = static_cast<int>(std::fmod(minutes, 60));",
          "2789:             const auto hh = static_cast<int>(std::fmod(hours, 24));",
          "",
          "---------------"
        ],
        "src/tiffcomposite_int.cpp||src/tiffcomposite_int.cpp": [
          "File: src/tiffcomposite_int.cpp -> src/tiffcomposite_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1077:             }",
          "1079:             if (isRootDir) {",
          "1081:                 sd += sd & 1;               // Align data to word boundary",
          "1082:                 sizeData += sd;",
          "1083:             }",
          "",
          "[Removed Lines]",
          "1080:                 uint32_t sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "[Added Lines]",
          "1080:                 auto sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1104:                 sv += sv & 1;               // Align value to word boundary",
          "1105:                 valueIdx += sv;",
          "1106:             }",
          "1108:             sd += sd & 1;                   // Align data to word boundary",
          "1109:             dataIdx += sd;",
          "1110:         }",
          "",
          "[Removed Lines]",
          "1107:             uint32_t sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "[Added Lines]",
          "1107:             auto sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1134:                 idx += sv;",
          "1135:                 valueIdx += sv;",
          "1136:             }",
          "1138:             sd += sd & 1;                   // Align data to word boundary",
          "1139:             dataIdx += sd;",
          "1140:         }",
          "",
          "[Removed Lines]",
          "1137:             uint32_t sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "[Added Lines]",
          "1137:             auto sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1626:                 sv += sv & 1;               // Align value to word boundary",
          "1627:                 len += sv;",
          "1628:             }",
          "1630:             sd += sd & 1;                   // Align data to word boundary",
          "1631:             len += sd;",
          "1632:         }",
          "",
          "[Removed Lines]",
          "1629:             uint32_t sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "[Added Lines]",
          "1629:             auto sd = static_cast<uint32_t>(component->sizeData());",
          "",
          "---------------"
        ],
        "src/tiffvisitor_int.cpp||src/tiffvisitor_int.cpp": [
          "File: src/tiffvisitor_int.cpp -> src/tiffvisitor_int.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1521:         if (count > std::numeric_limits<uint32_t>::max() / typeSize) {",
          "1522:             throw Error(kerArithmeticOverflow);",
          "1523:         }",
          "1525:         uint32_t offset = getLong(p, byteOrder());",
          "1526:         byte* pData = p;",
          "1527:         if (   size > 4",
          "",
          "[Removed Lines]",
          "1524:         uint32_t size = static_cast<uint32_t>(typeSize * count);",
          "",
          "[Added Lines]",
          "1524:         auto size = static_cast<uint32_t>(typeSize * count);",
          "",
          "---------------"
        ],
        "src/types.cpp||src/types.cpp": [
          "File: src/types.cpp -> src/types.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:     int64_t parseInt64(const std::string& s, bool& ok)",
          "630:     {",
          "632:         if (ok) return ret;",
          "634:         auto f = stringTo<float>(s, ok);",
          "635:         if (ok) return static_cast<int64_t>(f);",
          "638:         if (ok) {",
          "639:             if (r.second <= 0) {",
          "640:                 ok = false;",
          "",
          "[Removed Lines]",
          "631:         int64_t ret = stringTo<int64_t>(s, ok);",
          "637:         Rational r = stringTo<Rational>(s, ok);",
          "",
          "[Added Lines]",
          "631:         auto ret = stringTo<int64_t>(s, ok);",
          "637:         auto r = stringTo<Rational>(s, ok);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "664:         auto ret = stringTo<float>(s, ok);",
          "665:         if (ok) return ret;",
          "668:         if (ok) {",
          "669:             if (r.second == 0) {",
          "670:                 ok = false;",
          "",
          "[Removed Lines]",
          "667:         Rational r = stringTo<Rational>(s, ok);",
          "",
          "[Added Lines]",
          "667:         auto r = stringTo<Rational>(s, ok);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:     Rational parseRational(const std::string& s, bool& ok)",
          "685:     {",
          "687:         if (ok) return ret;",
          "690:         if (ok)",
          "691:             return {l, 1};",
          "",
          "[Removed Lines]",
          "686:         Rational ret = stringTo<Rational>(s, ok);",
          "689:         long l = stringTo<long>(s, ok);",
          "",
          "[Added Lines]",
          "686:         auto ret = stringTo<Rational>(s, ok);",
          "689:         auto l = stringTo<long>(s, ok);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "714:         }",
          "716:         int32_t den = 1000000;",
          "718:         if (Safe::abs(d_as_long) > 2147) {",
          "719:             den = 10000;",
          "720:         }",
          "",
          "[Removed Lines]",
          "717:         const long d_as_long = static_cast<long>(d);",
          "",
          "[Added Lines]",
          "717:         const auto d_as_long = static_cast<long>(d);",
          "",
          "---------------"
        ],
        "src/value.cpp||src/value.cpp": [
          "File: src/value.cpp -> src/value.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:         tms.tm_mday = date_.day;",
          "1002:         tms.tm_mon = date_.month - 1;",
          "1003:         tms.tm_year = date_.year - 1900;",
          "1005:         ok_ = (l != -1);",
          "1006:         return l;",
          "1007:     }",
          "",
          "[Removed Lines]",
          "1004:         int64_t l = static_cast<int64_t>(std::mktime(&tms));",
          "",
          "[Added Lines]",
          "1004:         auto l = static_cast<int64_t>(std::mktime(&tms));",
          "",
          "---------------"
        ],
        "src/webpimage.cpp||src/webpimage.cpp": [
          "File: src/webpimage.cpp -> src/webpimage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:             enforce(size_u32 <= static_cast<size_t>(std::numeric_limits<unsigned int>::max()),",
          "210:                     Exiv2::kerCorruptedMetadata);",
          "212:             DataBuf payload(size);",
          "213:             io_->readOrThrow(payload.data(), payload.size(), Exiv2::kerCorruptedMetadata);",
          "214:             if ( payload.size() % 2 ) {",
          "",
          "[Removed Lines]",
          "211:             const long size = static_cast<long>(size_u32);",
          "",
          "[Added Lines]",
          "211:             const auto size = static_cast<long>(size_u32);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:             enforce(size_u32 <= static_cast<size_t>(std::numeric_limits<unsigned int>::max()),",
          "348:                     Exiv2::kerCorruptedMetadata);",
          "351:             DataBuf payload(size);",
          "352:             io_->readOrThrow(payload.data(), size, Exiv2::kerCorruptedMetadata);",
          "",
          "[Removed Lines]",
          "349:             const long size = static_cast<long>(size_u32);",
          "",
          "[Added Lines]",
          "349:             const auto size = static_cast<long>(size_u32);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "574:             enforce(size_u32 <= static_cast<uint32_t>(std::numeric_limits<long>::max()), Exiv2::kerCorruptedMetadata);",
          "578:             enforce(io_->tell() <= filesize, Exiv2::kerCorruptedMetadata);",
          "",
          "[Removed Lines]",
          "575:             const long size = static_cast<long>(size_u32);",
          "",
          "[Added Lines]",
          "575:             const auto size = static_cast<long>(size_u32);",
          "",
          "---------------"
        ]
      }
    }
  ]
}