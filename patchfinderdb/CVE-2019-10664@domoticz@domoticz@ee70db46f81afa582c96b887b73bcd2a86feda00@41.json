{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "62315630ad39616845886627cf18fd604367c212",
      "candidate_info": {
        "commit_hash": "62315630ad39616845886627cf18fd604367c212",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/62315630ad39616845886627cf18fd604367c212",
        "files": [
          "hardware/YouLess.cpp"
        ],
        "message": "Simplified S0 code, added S0 support (not verified!)",
        "before_after_code_files": [
          "hardware/YouLess.cpp||hardware/YouLess.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/YouLess.cpp||hardware/YouLess.cpp": [
          "File: hardware/YouLess.cpp -> hardware/YouLess.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  if (root.size() < 1)",
          "136:   return false;",
          "137:  root = root[0];",
          "154:  {",
          "162:  }",
          "172:  {",
          "176:  }",
          "184:  return true;",
          "185: }",
          "",
          "[Removed Lines]",
          "138:  if (root[\"p1\"].empty() == true)",
          "139:   return false;",
          "141:  int Pwr = root[\"pwr\"].asInt();",
          "143:  unsigned long temp_usage;",
          "144:  temp_usage= (unsigned long)(root[\"p1\"].asDouble() * 1000);",
          "145:  m_p1power.powerusage1 = temp_usage;",
          "146:  temp_usage = (unsigned long)(root[\"p2\"].asDouble() * 1000);",
          "147:  m_p1power.powerusage2 = temp_usage;",
          "148:  temp_usage = (unsigned long)(root[\"n1\"].asDouble() * 1000);",
          "149:  m_p1power.powerdeliv1 = temp_usage;",
          "150:  temp_usage = (unsigned long)(root[\"n2\"].asDouble() * 1000);",
          "151:  m_p1power.powerdeliv2 = temp_usage;",
          "153:  if (Pwr >= 0)",
          "155:   m_p1power.usagecurrent = Pwr;",
          "156:   m_p1power.delivcurrent = 0;",
          "157:  }",
          "158:  else",
          "159:  {",
          "160:   m_p1power.delivcurrent = -Pwr;",
          "161:   m_p1power.usagecurrent = 0;",
          "163:  sDecodeRXMessage(this, (const unsigned char *)&m_p1power, \"Power\", 255);",
          "165:  temp_usage = (unsigned long)(root[\"gas\"].asDouble() * 1000);",
          "166:  m_p1gas.gasusage = temp_usage;",
          "167:  time_t atime = mytime(NULL);",
          "168:  if (",
          "169:   (m_p1gas.gasusage != m_lastgasusage) ||",
          "170:   (difftime(atime, m_lastSharedSendGas) >= 300)",
          "171:   )",
          "173:   m_lastgasusage = temp_usage;",
          "174:   m_lastSharedSendGas = atime;",
          "175:   sDecodeRXMessage(this, (const unsigned char *)&m_p1gas, \"Gas\", 255);",
          "177:  m_bHaveP1 = true;",
          "180:  m_meter.powerusage = (unsigned long)(root[\"net\"].asDouble()*1000);",
          "181:  m_meter.usagecurrent = Pwr;",
          "182:  sDecodeRXMessage(this, (const unsigned char *)&m_meter, NULL, 255);",
          "",
          "[Added Lines]",
          "140:  if (!root[\"p1\"].empty())",
          "142:   int Pwr = root[\"pwr\"].asInt();",
          "144:   m_p1power.powerusage1 = (unsigned long)(root[\"p1\"].asDouble() * 1000);",
          "145:   m_p1power.powerusage2 = (unsigned long)(root[\"p2\"].asDouble() * 1000);",
          "146:   m_p1power.powerdeliv1 = (unsigned long)(root[\"n1\"].asDouble() * 1000);",
          "147:   m_p1power.powerdeliv2 = (unsigned long)(root[\"n2\"].asDouble() * 1000);",
          "149:   if (Pwr >= 0)",
          "150:   {",
          "151:    m_p1power.usagecurrent = Pwr;",
          "152:    m_p1power.delivcurrent = 0;",
          "153:   }",
          "154:   else",
          "155:   {",
          "156:    m_p1power.delivcurrent = -Pwr;",
          "157:    m_p1power.usagecurrent = 0;",
          "158:   }",
          "159:   sDecodeRXMessage(this, (const unsigned char *)&m_p1power, \"Power\", 255);",
          "161:   m_p1gas.gasusage = (unsigned long)(root[\"gas\"].asDouble() * 1000);",
          "162:   time_t atime = mytime(NULL);",
          "163:   if (",
          "164:    (m_p1gas.gasusage != m_lastgasusage) ||",
          "165:    (difftime(atime, m_lastSharedSendGas) >= 300)",
          "166:    )",
          "167:   {",
          "168:    m_lastgasusage = m_p1gas.gasusage;",
          "169:    m_lastSharedSendGas = atime;",
          "170:    sDecodeRXMessage(this, (const unsigned char *)&m_p1gas, \"Gas\", 255);",
          "171:   }",
          "172:   m_bHaveP1 = true;",
          "175:  if (!root[\"cs0\"].empty())",
          "178:   double musage = root[\"ps0\"].asDouble();",
          "179:   SendKwhMeter(m_HwdID, 1, 255, musage, root[\"cs0\"].asDouble(), \"S0\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31aa4ca3537a48fdec0c3b8e9b9d7e9d1fe60cbc",
      "candidate_info": {
        "commit_hash": "31aa4ca3537a48fdec0c3b8e9b9d7e9d1fe60cbc",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/31aa4ca3537a48fdec0c3b8e9b9d7e9d1fe60cbc",
        "files": [
          "hardware/ASyncSerial.cpp"
        ],
        "message": "Removing SetThreadName in ASyncSerial to see if this solved issue #2620",
        "before_after_code_files": [
          "hardware/ASyncSerial.cpp||hardware/ASyncSerial.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ASyncSerial.cpp||hardware/ASyncSerial.cpp": [
          "File: hardware/ASyncSerial.cpp -> hardware/ASyncSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: {",
          "53: public:",
          "54:     AsyncSerialImpl(): io(), port(io), backgroundThread(), open(false),",
          "57:     boost::asio::io_service io; ///< Io service object",
          "58:     boost::asio::serial_port port; ///< Serial port object",
          "",
          "[Removed Lines]",
          "55:   error(false), writeBufferSize(0) {SetThreadName(backgroundThread.native_handle(), \"AsyncSer_Background\");}",
          "",
          "[Added Lines]",
          "55:   error(false), writeBufferSize(0) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:     pimpl->io.post(boost::bind(&AsyncSerial::doRead, this));",
          "124:     boost::thread t(boost::bind(&boost::asio::io_service::run, &pimpl->io));",
          "126:     pimpl->backgroundThread.swap(t);",
          "127:     setErrorStatus(false);//If we get here, no error",
          "128:     pimpl->open=true; //Port is now open",
          "",
          "[Removed Lines]",
          "125:  SetThreadName(t.native_handle(), \"AsyncSer_Background\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:  pimpl->io.post(boost::bind(&AsyncSerial::doRead, this));",
          "157:  boost::thread t(boost::bind(&boost::asio::io_service::run, &pimpl->io));",
          "159:  pimpl->backgroundThread.swap(t);",
          "160:  setErrorStatus(false);//If we get here, no error",
          "161:  pimpl->open=true; //Port is now open",
          "",
          "[Removed Lines]",
          "158:  SetThreadName(t.native_handle(), \"AsyncSer_Background\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3c17f6ad6c02e9673ed81005af2faca4c94e5a",
      "candidate_info": {
        "commit_hash": "2c3c17f6ad6c02e9673ed81005af2faca4c94e5a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2c3c17f6ad6c02e9673ed81005af2faca4c94e5a",
        "files": [
          "hardware/TE923.cpp"
        ],
        "message": "Corrected TE923 hardware class compile error caused by previous PR",
        "before_after_code_files": [
          "hardware/TE923.cpp||hardware/TE923.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/TE923.cpp||hardware/TE923.cpp": [
          "File: hardware/TE923.cpp -> hardware/TE923.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: void CTE923::Do_Work()",
          "62: {",
          "63:  int sec_counter=TE923_POLL_INTERVAL-4;",
          "65:  {",
          "66:   sec_counter++;",
          "",
          "[Removed Lines]",
          "64:  while (!IsStop|Requested(1000))",
          "",
          "[Added Lines]",
          "64:  while (!IsStopRequested(1000))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bdf2cf29cd5358fb089cae16f152f32b3981c4e",
      "candidate_info": {
        "commit_hash": "0bdf2cf29cd5358fb089cae16f152f32b3981c4e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0bdf2cf29cd5358fb089cae16f152f32b3981c4e",
        "files": [
          "www/css/style.css"
        ],
        "message": "Fixing highcharts dropdown menu",
        "before_after_code_files": [
          "www/css/style.css||www/css/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/css/style.css||www/css/style.css": [
          "File: www/css/style.css -> www/css/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:  display: block;",
          "1921:  height: 300px;",
          "1922:  margin-bottom: 24px;",
          "",
          "[Removed Lines]",
          "1923: }",
          "",
          "[Added Lines]",
          "1925: #container-speed > .highcharts-container {",
          "1926:     overflow: visible !important;",
          "1927: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47bd3b177a50936867c21ae402cba628d8a6e363",
      "candidate_info": {
        "commit_hash": "47bd3b177a50936867c21ae402cba628d8a6e363",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/47bd3b177a50936867c21ae402cba628d8a6e363",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "Dropped unused EventActions table",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define __STDC_FORMAT_MACROS",
          "35: #include <inttypes.h>",
          "39: extern http::server::CWebServerHelper m_webservers;",
          "40: extern std::string szWWWFolder;",
          "",
          "[Removed Lines]",
          "37: #define DB_VERSION 130",
          "",
          "[Added Lines]",
          "37: #define DB_VERSION 131",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: \" UPDATE DeviceStatus SET [Order] = (SELECT MAX([Order]) FROM DeviceStatus)+1 WHERE DeviceStatus.ID = NEW.ID;\\n\"",
          "77: \"END;\\n\";",
          "98: const char *sqlCreateLightingLog =",
          "99: \"CREATE TABLE IF NOT EXISTS [LightingLog] (\"",
          "100: \"[DeviceRowID] BIGINT(10) NOT NULL, \"",
          "",
          "[Removed Lines]",
          "79: const char *sqlCreateEventActions =",
          "80: \"CREATE TABLE IF NOT EXISTS [EventActions] (\"",
          "81: \"[ID] INTEGER PRIMARY KEY, \"",
          "82: \"[ConditionID] INTEGER NOT NULL, \"",
          "83: \"[ActionType] INTEGER NOT NULL, \"",
          "84: \"[DeviceRowID] INTEGER DEFAULT 0, \"",
          "85: \"[Param1] VARCHAR(120), \"",
          "86: \"[Param2] VARCHAR(120), \"",
          "87: \"[Param3] VARCHAR(120), \"",
          "88: \"[Param4] VARCHAR(120), \"",
          "89: \"[Param5] VARCHAR(120), \"",
          "90: \"[Order] INTEGER BIGINT(10) default 0);\";",
          "92: const char *sqlCreateEventActionsTrigger =",
          "93: \"CREATE TRIGGER IF NOT EXISTS eventactionsstatusupdate AFTER INSERT ON EventActions\\n\"",
          "94: \"BEGIN\\n\"",
          "95: \"  UPDATE EventActions SET [Order] = (SELECT MAX([Order]) FROM EventActions)+1 WHERE EventActions.ID = NEW.ID;\\n\"",
          "96: \"END;\\n\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "713:  query(sqlCreateDeviceStatus);",
          "714:  query(sqlCreateDeviceStatusTrigger);",
          "717:  query(sqlCreateLightingLog);",
          "718:  query(sqlCreateSceneLog);",
          "719:  query(sqlCreatePreferences);",
          "",
          "[Removed Lines]",
          "715:  query(sqlCreateEventActions);",
          "716:  query(sqlCreateEventActionsTrigger);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2586:     }",
          "2587:    }",
          "2588:   }",
          "2589:  }",
          "2590:  else if (bNewInstall)",
          "2591:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2568:   if (dbversion < 131)",
          "2569:   {",
          "2570:    query(\"DROP TABLE IF EXISTS [EventActions]\");",
          "2571:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}