{
  "cve_id": "CVE-2022-1289",
  "cve_desc": "A denial of service vulnerability was found in tildearrow Furnace. It has been classified as problematic. This is due to an incomplete fix of CVE-2022-1211. It is possible to initiate the attack remotely but it requires user interaction. The issue got fixed with the patch 0eb02422d5161767e9983bdaa5c429762d3477ce.",
  "repo": "tildearrow/furnace",
  "patch_hash": "0eb02422d5161767e9983bdaa5c429762d3477ce",
  "patch_info": {
    "commit_hash": "0eb02422d5161767e9983bdaa5c429762d3477ce",
    "repo": "tildearrow/furnace",
    "commit_url": "https://github.com/tildearrow/furnace/commit/0eb02422d5161767e9983bdaa5c429762d3477ce",
    "files": [
      "src/gui/pattern.cpp"
    ],
    "message": "fix possible pattern crash\n\nissue #325",
    "before_after_code_files": [
      "src/gui/pattern.cpp||src/gui/pattern.cpp"
    ]
  },
  "patch_diff": {
    "src/gui/pattern.cpp||src/gui/pattern.cpp": [
      "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "282:           sprintf(id,\"..##PE%d_%d_%d\",k,i,j);",
      "283:           ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
      "284:         } else {",
      "303:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "304:           } else {",
      "306:           }",
      "307:         }",
      "308:         ImGui::SameLine(0.0f,0.0f);",
      "",
      "[Removed Lines]",
      "285:           sprintf(id,\"%.2X##PE%d_%d_%d\",pat->data[i][index],k,i,j);",
      "286:           if (pat->data[i][index]<0x10) {",
      "287:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[pat->data[i][index]]]);",
      "288:           } else if (pat->data[i][index]<0x20) {",
      "289:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "290:           } else if (pat->data[i][index]<0x30) {",
      "291:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
      "292:           } else if (pat->data[i][index]<0x48) {",
      "293:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "294:           } else if (pat->data[i][index]<0x90) {",
      "295:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "296:           } else if (pat->data[i][index]<0xa0) {",
      "297:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
      "298:           } else if (pat->data[i][index]<0xc0) {",
      "299:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "300:           } else if (pat->data[i][index]<0xd0) {",
      "301:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
      "302:           } else if (pat->data[i][index]<0xe0) {",
      "305:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
      "",
      "[Added Lines]",
      "285:           if (pat->data[i][index]>0xff) {",
      "286:             sprintf(id,\"??##PE%d_%d_%d\",k,i,j);",
      "289:             const unsigned char data=pat->data[i][index];",
      "290:             sprintf(id,\"%.2X##PE%d_%d_%d\",data,k,i,j);",
      "291:             if (data<0x10) {",
      "292:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
      "293:             } else if (data<0x20) {",
      "294:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "295:             } else if (data<0x30) {",
      "296:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
      "297:             } else if (data<0x48) {",
      "298:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "299:             } else if (data<0x90) {",
      "300:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "301:             } else if (data<0xa0) {",
      "302:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
      "303:             } else if (data<0xc0) {",
      "304:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "305:             } else if (data<0xd0) {",
      "306:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
      "307:             } else if (data<0xe0) {",
      "308:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "309:             } else {",
      "310:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[data-0xe0]]);",
      "311:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a7a132f0210c047de1825b33d68e3542145b0a1",
      "candidate_info": {
        "commit_hash": "3a7a132f0210c047de1825b33d68e3542145b0a1",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/3a7a132f0210c047de1825b33d68e3542145b0a1",
        "files": [
          "src/engine/fileOps.cpp"
        ],
        "message": "harden Furnace file loader\n\nissue #325",
        "before_after_code_files": [
          "src/engine/fileOps.cpp||src/engine/fileOps.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/engine/fileOps.cpp||src/engine/fileOps.cpp": [
          "File: src/engine/fileOps.cpp -> src/engine/fileOps.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "777: }",
          "779: bool DivEngine::loadFur(unsigned char* file, size_t len) {",
          "783:   std::vector<int> patPtr;",
          "784:   char magic[5];",
          "785:   memset(magic,0,5);",
          "",
          "[Removed Lines]",
          "780:   int insPtr[256];",
          "781:   int wavePtr[256];",
          "782:   int samplePtr[256];",
          "",
          "[Added Lines]",
          "780:   unsigned int insPtr[256];",
          "781:   unsigned int wavePtr[256];",
          "782:   unsigned int samplePtr[256];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:     reader.readS(); // reserved",
          "861:     int infoSeek=reader.readI();",
          "866:     reader.read(magic,4);",
          "",
          "[Removed Lines]",
          "863:     reader.seek(infoSeek,SEEK_SET);",
          "",
          "[Added Lines]",
          "863:     if (!reader.seek(infoSeek,SEEK_SET)) {",
          "864:       logE(\"couldn't seek to info header at %d!\\n\",infoSeek);",
          "865:       lastError=\"couldn't seek to info header!\";",
          "866:       delete[] file;",
          "867:       return false;",
          "868:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "891:     ds.sampleLen=reader.readS();",
          "892:     int numberOfPats=reader.readI();",
          "894:     for (int i=0; i<32; i++) {",
          "896:       if (ds.system[i]!=DIV_SYSTEM_NULL) ds.systemLen=i+1;",
          "897:     }",
          "898:     int tchans=0;",
          "899:     for (int i=0; i<ds.systemLen; i++) {",
          "900:       tchans+=getChannelCount(ds.system[i]);",
          "901:     }",
          "905:     for (int i=0; i<32; i++) {",
          "",
          "[Removed Lines]",
          "895:       ds.system[i]=systemFromFileFur(reader.readC());",
          "902:     if (tchans>DIV_MAX_CHANS) tchans=DIV_MAX_CHANS;",
          "",
          "[Added Lines]",
          "899:     if (ds.patLen<0) {",
          "900:       logE(\"pattern length is negative!\\n\");",
          "901:       lastError=\"pattern lengrh is negative!\";",
          "902:       delete[] file;",
          "903:       return false;",
          "904:     }",
          "905:     if (ds.patLen>256) {",
          "906:       logE(\"pattern length is too large!\\n\");",
          "907:       lastError=\"pattern length is too large!\";",
          "908:       delete[] file;",
          "909:       return false;",
          "910:     }",
          "911:     if (ds.ordersLen<0) {",
          "912:       logE(\"song length is negative!\\n\");",
          "913:       lastError=\"song length is negative!\";",
          "914:       delete[] file;",
          "915:       return false;",
          "916:     }",
          "917:     if (ds.ordersLen>127) {",
          "918:       logE(\"song is too long!\\n\");",
          "919:       lastError=\"song is too long!\";",
          "920:       delete[] file;",
          "921:       return false;",
          "922:     }",
          "923:     if (ds.insLen<0 || ds.insLen>256) {",
          "924:       logE(\"invalid instrument count!\\n\");",
          "925:       lastError=\"invalid instrument count!\";",
          "926:       delete[] file;",
          "927:       return false;",
          "928:     }",
          "929:     if (ds.waveLen<0 || ds.waveLen>256) {",
          "930:       logE(\"invalid wavetable count!\\n\");",
          "931:       lastError=\"invalid wavetable count!\";",
          "932:       delete[] file;",
          "933:       return false;",
          "934:     }",
          "935:     if (ds.sampleLen<0 || ds.sampleLen>256) {",
          "936:       logE(\"invalid sample count!\\n\");",
          "937:       lastError=\"invalid sample count!\";",
          "938:       delete[] file;",
          "939:       return false;",
          "940:     }",
          "941:     if (numberOfPats<0) {",
          "942:       logE(\"invalid pattern count!\\n\");",
          "943:       lastError=\"invalid pattern count!\";",
          "944:       delete[] file;",
          "945:       return false;",
          "946:     }",
          "949:       unsigned char sysID=reader.readC();",
          "950:       ds.system[i]=systemFromFileFur(sysID);",
          "951:       if (sysID!=0 && systemToFileFur(ds.system[i])==0) {",
          "952:         logE(\"unrecognized system ID %.2x\\n\",ds.system[i]);",
          "953:         lastError=fmt::sprintf(\"unrecognized system ID %.2x!\",ds.system[i]);",
          "954:         delete[] file;",
          "955:         return false;",
          "956:       }",
          "963:     if (tchans>DIV_MAX_CHANS) {",
          "964:       tchans=DIV_MAX_CHANS;",
          "965:       logW(\"too many channels!\\n\");",
          "966:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1071:     for (int i=0; i<tchans; i++) {",
          "1072:       ds.pat[i].effectRows=reader.readC();",
          "1073:     }",
          "1075:     if (ds.version>=39) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1137:       if (ds.pat[i].effectRows>8) {",
          "1138:         logE(\"channel %d has too many effect columns! (%d)\\n\",i,ds.pat[i].effectRows);",
          "1139:         lastError=fmt::sprintf(\"channel %d has too many effect columns! (%d)\",i,ds.pat[i].effectRows);",
          "1140:         delete[] file;",
          "1141:         return false;",
          "1142:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1126:     for (int i=0; i<ds.insLen; i++) {",
          "1127:       DivInstrument* ins=new DivInstrument;",
          "1128:       logD(\"reading instrument %d at %x...\\n\",i,insPtr[i]);",
          "1131:       if (ins->readInsData(reader,ds.version)!=DIV_DATA_SUCCESS) {",
          "1132:         lastError=\"invalid instrument header/data!\";",
          "1133:         delete ins;",
          "1134:         delete[] file;",
          "1135:         return false;",
          "",
          "[Removed Lines]",
          "1129:       reader.seek(insPtr[i],SEEK_SET);",
          "",
          "[Added Lines]",
          "1199:       if (!reader.seek(insPtr[i],SEEK_SET)) {",
          "1200:         logE(\"couldn't seek to instrument %d!\\n\",i);",
          "1201:         lastError=fmt::sprintf(\"couldn't seek to instrument %d!\",i);",
          "1202:         ds.unload();",
          "1203:         delete ins;",
          "1204:         delete[] file;",
          "1205:         return false;",
          "1206:       }",
          "1210:         ds.unload();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1142:     for (int i=0; i<ds.waveLen; i++) {",
          "1143:       DivWavetable* wave=new DivWavetable;",
          "1144:       logD(\"reading wavetable %d at %x...\\n\",i,wavePtr[i]);",
          "1147:       if (wave->readWaveData(reader,ds.version)!=DIV_DATA_SUCCESS) {",
          "1148:         lastError=\"invalid wavetable header/data!\";",
          "1149:         delete wave;",
          "1150:         delete[] file;",
          "1151:         return false;",
          "",
          "[Removed Lines]",
          "1145:       reader.seek(wavePtr[i],SEEK_SET);",
          "",
          "[Added Lines]",
          "1223:       if (!reader.seek(wavePtr[i],SEEK_SET)) {",
          "1224:         logE(\"couldn't seek to wavetable %d!\\n\",i);",
          "1225:         lastError=fmt::sprintf(\"couldn't seek to wavetable %d!\",i);",
          "1226:         ds.unload();",
          "1227:         delete wave;",
          "1228:         delete[] file;",
          "1229:         return false;",
          "1230:       }",
          "1234:         ds.unload();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1159:       int vol=0;",
          "1160:       int pitch=0;",
          "1163:       reader.read(magic,4);",
          "1164:       if (strcmp(magic,\"SMPL\")!=0) {",
          "1165:         logE(\"%d: invalid sample header!\\n\",i);",
          "1166:         lastError=\"invalid sample header!\";",
          "1167:         delete[] file;",
          "1168:         return false;",
          "1169:       }",
          "",
          "[Removed Lines]",
          "1162:       reader.seek(samplePtr[i],SEEK_SET);",
          "",
          "[Added Lines]",
          "1248:       if (!reader.seek(samplePtr[i],SEEK_SET)) {",
          "1249:         logE(\"couldn't seek to sample %d!\\n\",i);",
          "1250:         lastError=fmt::sprintf(\"couldn't seek to sample %d!\",i);",
          "1251:         ds.unload();",
          "1252:         delete[] file;",
          "1253:         return false;",
          "1254:       }",
          "1260:         ds.unload();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1243:     for (int i: patPtr) {",
          "1245:       reader.read(magic,4);",
          "1246:       logD(\"reading pattern in %x...\\n\",i);",
          "1247:       if (strcmp(magic,\"PATR\")!=0) {",
          "1248:         logE(\"%x: invalid pattern header!\\n\",i);",
          "1249:         lastError=\"invalid pattern header!\";",
          "1250:         delete[] file;",
          "1251:         return false;",
          "1252:       }",
          "",
          "[Removed Lines]",
          "1244:       reader.seek(i,SEEK_SET);",
          "",
          "[Added Lines]",
          "1338:       if (!reader.seek(i,SEEK_SET)) {",
          "1339:         logE(\"couldn't seek to pattern in %x!\\n\",i);",
          "1340:         lastError=fmt::sprintf(\"couldn't seek to pattern in %x!\",i);",
          "1341:         ds.unload();",
          "1342:         delete[] file;",
          "1343:         return false;",
          "1344:       }",
          "1350:         ds.unload();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1256:       int index=reader.readS();",
          "1257:       reader.readI();",
          "1259:       logD(\"- %d, %d\\n\",chan,index);",
          "1261:       DivPattern* pat=ds.pat[chan].getPattern(index,true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1360:       if (chan<0 || chan>=tchans) {",
          "1361:         logE(\"pattern channel out of range!\\n\",i);",
          "1362:         lastError=\"pattern channel out of range!\";",
          "1363:         ds.unload();",
          "1364:         delete[] file;",
          "1365:         return false;",
          "1366:       }",
          "1367:       if (index<0 || index>127) {",
          "1368:         logE(\"pattern index out of range!\\n\",i);",
          "1369:         lastError=\"pattern index out of range!\";",
          "1370:         ds.unload();",
          "1371:         delete[] file;",
          "1372:         return false;",
          "1373:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "258a905aaa6fd652bf351f30446a135fc4f1e164",
      "candidate_info": {
        "commit_hash": "258a905aaa6fd652bf351f30446a135fc4f1e164",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/258a905aaa6fd652bf351f30446a135fc4f1e164",
        "files": [
          "src/engine/fileOps.cpp"
        ],
        "message": "harden .dmf loader\n\nissue #325",
        "before_after_code_files": [
          "src/engine/fileOps.cpp||src/engine/fileOps.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/engine/fileOps.cpp||src/engine/fileOps.cpp": [
          "File: src/engine/fileOps.cpp -> src/engine/fileOps.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     }",
          "199:     ds.ordersLen=(unsigned char)reader.readC();",
          "201:     if (ds.version<20 && ds.version>3) {",
          "202:       ds.arpLen=reader.readC();",
          "203:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     if (ds.patLen<0) {",
          "202:       logE(\"pattern length is negative!\\n\");",
          "203:       lastError=\"pattern lengrh is negative!\";",
          "204:       delete[] file;",
          "205:       return false;",
          "206:     }",
          "207:     if (ds.patLen>256) {",
          "208:       logE(\"pattern length is too large!\\n\");",
          "209:       lastError=\"pattern length is too large!\";",
          "210:       delete[] file;",
          "211:       return false;",
          "212:     }",
          "213:     if (ds.ordersLen<0) {",
          "214:       logE(\"song length is negative!\\n\");",
          "215:       lastError=\"song length is negative!\";",
          "216:       delete[] file;",
          "217:       return false;",
          "218:     }",
          "219:     if (ds.ordersLen>127) {",
          "220:       logE(\"song is too long!\\n\");",
          "221:       lastError=\"song is too long!\";",
          "222:       delete[] file;",
          "223:       return false;",
          "224:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     for (int i=0; i<getChannelCount(ds.system[0]); i++) {",
          "238:       for (int j=0; j<ds.ordersLen; j++) {",
          "239:         ds.orders.ord[i][j]=reader.readC();",
          "240:         if (ds.version>0x18) { // 1.1 pattern names",
          "241:           ds.pat[i].getPattern(j,true)->name=reader.readString((unsigned char)reader.readC());",
          "242:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         if (ds.orders.ord[i][j]>0x7f) {",
          "266:           logE(\"order at %d, %d out of range! (%d)\\n\",i,j,ds.orders.ord[i][j]);",
          "267:           lastError=fmt::sprintf(\"order at %d, %d out of range! (%d)\",i,j,ds.orders.ord[i][j]);",
          "268:           delete[] file;",
          "269:           return false;",
          "270:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1135:     for (int i=0; i<tchans; i++) {",
          "1136:       ds.pat[i].effectRows=reader.readC();",
          "1139:         lastError=fmt::sprintf(\"channel %d has too many effect columns! (%d)\",i,ds.pat[i].effectRows);",
          "1140:         delete[] file;",
          "1141:         return false;",
          "",
          "[Removed Lines]",
          "1137:       if (ds.pat[i].effectRows>8) {",
          "1138:         logE(\"channel %d has too many effect columns! (%d)\\n\",i,ds.pat[i].effectRows);",
          "",
          "[Added Lines]",
          "1169:       if (ds.pat[i].effectRows<1 || ds.pat[i].effectRows>8) {",
          "1170:         logE(\"channel %d has zero or too many effect columns! (%d)\\n\",i,ds.pat[i].effectRows);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb5cee4a662c3cd54fa4b3e4739cd55cc0186ab0",
      "candidate_info": {
        "commit_hash": "bb5cee4a662c3cd54fa4b3e4739cd55cc0186ab0",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/bb5cee4a662c3cd54fa4b3e4739cd55cc0186ab0",
        "files": [
          "src/gui/editing.cpp",
          "src/gui/findReplace.cpp",
          "src/gui/gui.cpp",
          "src/gui/gui.h",
          "src/gui/pattern.cpp",
          "src/gui/settings.cpp",
          "src/utfutils.cpp",
          "src/utfutils.h"
        ],
        "message": "GUI: add pattern label customization settings",
        "before_after_code_files": [
          "src/gui/editing.cpp||src/gui/editing.cpp",
          "src/gui/findReplace.cpp||src/gui/findReplace.cpp",
          "src/gui/gui.cpp||src/gui/gui.cpp",
          "src/gui/gui.h||src/gui/gui.h",
          "src/gui/pattern.cpp||src/gui/pattern.cpp",
          "src/gui/settings.cpp||src/gui/settings.cpp",
          "src/utfutils.cpp||src/utfutils.cpp",
          "src/utfutils.h||src/utfutils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ],
          "candidate": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/gui/editing.cpp||src/gui/editing.cpp": [
          "File: src/gui/editing.cpp -> src/gui/editing.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"actionUtil.h\"",
          "28:   if (note==100) { // note cut",
          "29:     return \"OFF\";",
          "30:   } else if (note==101) { // note off and envelope release",
          "",
          "[Removed Lines]",
          "27: const char* noteNameNormal(short note, short octave) {",
          "",
          "[Added Lines]",
          "27: const char* FurnaceGUI::noteNameNormal(short note, short octave) {",
          "",
          "---------------"
        ],
        "src/gui/findReplace.cpp||src/gui/findReplace.cpp": [
          "File: src/gui/findReplace.cpp -> src/gui/findReplace.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:                   i.note=0;",
          "594:                 }",
          "595:                 if (i.note==130) {",
          "597:                 } else if (i.note==129) {",
          "599:                 } else if (i.note==128) {",
          "601:                 } else if (i.note>=-60 && i.note<120) {",
          "602:                   snprintf(tempID,1024,\"%s\",noteNames[i.note+60]);",
          "603:                 } else {",
          "",
          "[Removed Lines]",
          "596:                   snprintf(tempID,1024,\"REL\");",
          "598:                   snprintf(tempID,1024,\"===\");",
          "600:                   snprintf(tempID,1024,\"OFF\");",
          "",
          "[Added Lines]",
          "596:                   snprintf(tempID,1024,\"%s##MREL\",macroRelLabel);",
          "598:                   snprintf(tempID,1024,\"%s##NREL\",noteRelLabel);",
          "600:                   snprintf(tempID,1024,\"%s##NOFF\",noteOffLabel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:                     }",
          "614:                   }",
          "615:                   if (i.noteMode!=GUI_QUERY_RANGE && i.noteMode!=GUI_QUERY_RANGE_NOT) {",
          "617:                       i.note=128;",
          "618:                     }",
          "620:                       i.note=129;",
          "621:                     }",
          "623:                       i.note=130;",
          "624:                     }",
          "625:                   }",
          "",
          "[Removed Lines]",
          "616:                     if (ImGui::Selectable(\"OFF\",i.note==128)) {",
          "619:                     if (ImGui::Selectable(\"===\",i.note==129)) {",
          "622:                     if (ImGui::Selectable(\"REL\",i.note==130)) {",
          "",
          "[Added Lines]",
          "616:                     if (ImGui::Selectable(noteOffLabel,i.note==128)) {",
          "619:                     if (ImGui::Selectable(noteRelLabel,i.note==129)) {",
          "622:                     if (ImGui::Selectable(macroRelLabel,i.note==130)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "916:           ImGui::SetNextItemWidth(ImGui::GetContentRegionAvail().x);",
          "917:           if (queryReplaceNoteMode==GUI_QUERY_REPLACE_SET) {",
          "918:             if (queryReplaceNote==130) {",
          "920:             } else if (queryReplaceNote==129) {",
          "922:             } else if (queryReplaceNote==128) {",
          "924:             } else if (queryReplaceNote>=-60 && queryReplaceNote<120) {",
          "925:               snprintf(tempID,1024,\"%s\",noteNames[queryReplaceNote+60]);",
          "926:             } else {",
          "",
          "[Removed Lines]",
          "919:               snprintf(tempID,1024,\"REL\");",
          "921:               snprintf(tempID,1024,\"===\");",
          "923:               snprintf(tempID,1024,\"OFF\");",
          "",
          "[Added Lines]",
          "919:               snprintf(tempID,1024,\"%s##MREL\",macroRelLabel);",
          "921:               snprintf(tempID,1024,\"%s##NREL\",noteRelLabel);",
          "923:               snprintf(tempID,1024,\"%s##NOFF\",noteOffLabel);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "934:                   queryReplaceNote=j-60;",
          "935:                 }",
          "936:               }",
          "938:                 queryReplaceNote=128;",
          "939:               }",
          "941:                 queryReplaceNote=129;",
          "942:               }",
          "944:                 queryReplaceNote=130;",
          "945:               }",
          "946:               ImGui::EndCombo();",
          "",
          "[Removed Lines]",
          "937:               if (ImGui::Selectable(\"OFF\",queryReplaceNote==128)) {",
          "940:               if (ImGui::Selectable(\"===\",queryReplaceNote==129)) {",
          "943:               if (ImGui::Selectable(\"REL\",queryReplaceNote==130)) {",
          "",
          "[Added Lines]",
          "937:               if (ImGui::Selectable(noteOffLabel,queryReplaceNote==128)) {",
          "940:               if (ImGui::Selectable(noteRelLabel,queryReplaceNote==129)) {",
          "943:               if (ImGui::Selectable(macroRelLabel,queryReplaceNote==130)) {",
          "",
          "---------------"
        ],
        "src/gui/gui.cpp||src/gui/gui.cpp": [
          "File: src/gui/gui.cpp -> src/gui/gui.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: const char* FurnaceGUI::noteName(short note, short octave) {",
          "86:   if (note==100) {",
          "88:   } else if (note==101) { // note off and envelope release",
          "90:   } else if (note==102) { // envelope release only",
          "92:   } else if (octave==0 && note==0) {",
          "94:   } else if (note==0 && octave!=0) {",
          "95:     return \"BUG\";",
          "96:   }",
          "",
          "[Removed Lines]",
          "87:     return \"OFF\";",
          "89:     return \"===\";",
          "91:     return \"REL\";",
          "93:     return \"...\";",
          "",
          "[Added Lines]",
          "87:     return noteOffLabel;",
          "89:     return noteRelLabel;",
          "91:     return macroRelLabel;",
          "93:     return emptyLabel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5067:   memset(queryReplaceEffectValDo,0,sizeof(bool)*8);",
          "5069:   chanOscGrad.bgColor=ImVec4(0.0f,0.0f,0.0f,1.0f);",
          "5070: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5071:   memset(noteOffLabel,0,32);",
          "5072:   memset(noteRelLabel,0,32);",
          "5073:   memset(macroRelLabel,0,32);",
          "5074:   memset(emptyLabel,0,32);",
          "5075:   memset(emptyLabel2,0,32);",
          "5077:   strncat(noteOffLabel,\"OFF\",32);",
          "5078:   strncat(noteRelLabel,\"===\",32);",
          "5079:   strncat(macroRelLabel,\"REL\",32);",
          "5080:   strncat(emptyLabel,\"...\",32);",
          "5081:   strncat(emptyLabel2,\"..\",32);",
          "",
          "---------------"
        ],
        "src/gui/gui.h||src/gui/gui.h": [
          "File: src/gui/gui.h -> src/gui/gui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:   ImU32 sysCmd1Grad[256];",
          "1018:   ImU32 sysCmd2Grad[256];",
          "1020:   struct Settings {",
          "1021:     int mainFontSize, patFontSize, iconSize;",
          "1022:     int audioEngine;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020:   char noteOffLabel[32];",
          "1021:   char noteRelLabel[32];",
          "1022:   char macroRelLabel[32];",
          "1023:   char emptyLabel[32];",
          "1024:   char emptyLabel2[32];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119:     String midiOutDevice;",
          "1120:     String c163Name;",
          "1121:     String initialSysName;",
          "1122:     std::vector<int> initialSys;",
          "1124:     Settings():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1128:     String noteOffLabel;",
          "1129:     String noteRelLabel;",
          "1130:     String macroRelLabel;",
          "1131:     String emptyLabel;",
          "1132:     String emptyLabel2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1224:       midiInDevice(\"\"),",
          "1225:       midiOutDevice(\"\"),",
          "1226:       c163Name(\"\"),",
          "1228:   } settings;",
          "1230:   char finalLayoutPath[4096];",
          "",
          "[Removed Lines]",
          "1227:       initialSysName(\"Sega Genesis/Mega Drive\") {}",
          "",
          "[Added Lines]",
          "1238:       initialSysName(\"Sega Genesis/Mega Drive\"),",
          "1239:       noteOffLabel(\"OFF\"),",
          "1240:       noteRelLabel(\"===\"),",
          "1241:       macroRelLabel(\"REL\"),",
          "1242:       emptyLabel(\"...\"),",
          "1243:       emptyLabel2(\"..\") {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1657:   public:",
          "1658:     void showWarning(String what, FurnaceGUIWarnings type);",
          "1659:     void showError(String what);",
          "1660:     const char* noteName(short note, short octave);",
          "1661:     bool decodeNote(const char* what, short& note, short& octave);",
          "1662:     void bindEngine(DivEngine* eng);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1676:     const char* noteNameNormal(short note, short octave);",
          "",
          "---------------"
        ],
        "src/gui/pattern.cpp||src/gui/pattern.cpp": [
          "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: inline void FurnaceGUI::patternRow(int i, bool isPlaying, float lineHeight, int chans, int ord, const DivPattern** patCache, bool inhibitSel) {",
          "60:   bool selectedRow=(i>=sel1.y && i<=sel2.y && !inhibitSel);",
          "61:   ImGui::TableNextRow(0,lineHeight);",
          "62:   ImGui::TableNextColumn();",
          "",
          "[Removed Lines]",
          "59:   static char id[32];",
          "",
          "[Added Lines]",
          "59:   static char id[64];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   ImGui::PushStyleColor(ImGuiCol_Text,rowIndexColor);",
          "116:   if (settings.patRowsBase==1) {",
          "118:   } else {",
          "120:   }",
          "121:   ImGui::Selectable(id,false,ImGuiSelectableFlags_NoPadWithHalfSpacing,fourChars);",
          "122:   if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "",
          "[Removed Lines]",
          "117:     snprintf(id,31,\" %.2X ##PR_%d\",i,i);",
          "119:     snprintf(id,31,\"%3d ##PR_%d\",i,i);",
          "",
          "[Added Lines]",
          "117:     snprintf(id,63,\" %.2X ##PR_%d\",i,i);",
          "119:     snprintf(id,63,\"%3d ##PR_%d\",i,i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:     bool cursorVol=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==2 && curWindowLast==GUI_WINDOW_PATTERN);",
          "155:     if (pat->data[i][0]==0 && pat->data[i][1]==0) {",
          "156:       ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
          "157:     } else {",
          "",
          "[Removed Lines]",
          "154:     sprintf(id,\"%s##PN_%d_%d\",noteName(pat->data[i][0],pat->data[i][1]),i,j);",
          "",
          "[Added Lines]",
          "154:     snprintf(id,63,\"%.31s##PN_%d_%d\",noteName(pat->data[i][0],pat->data[i][1]),i,j);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:       if (pat->data[i][2]==-1) {",
          "184:         ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
          "186:       } else {",
          "187:         if (pat->data[i][2]<0 || pat->data[i][2]>=e->song.insLen) {",
          "188:           ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INS_ERROR]);",
          "",
          "[Removed Lines]",
          "185:         sprintf(id,\"..##PI_%d_%d\",i,j);",
          "",
          "[Added Lines]",
          "185:         snprintf(id,63,\"%.31s##PI_%d_%d\",emptyLabel2,i,j);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "194:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INS]);",
          "195:           }",
          "196:         }",
          "198:       }",
          "199:       ImGui::SameLine(0.0f,0.0f);",
          "200:       if (cursorIns) {",
          "",
          "[Removed Lines]",
          "197:         sprintf(id,\"%.2X##PI_%d_%d\",pat->data[i][2],i,j);",
          "",
          "[Added Lines]",
          "197:         snprintf(id,63,\"%.2X##PI_%d_%d\",pat->data[i][2],i,j);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:     if (e->curSubSong->chanCollapse[j]<2) {",
          "223:       if (pat->data[i][3]==-1) {",
          "225:         ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
          "226:       } else {",
          "227:         int volColor=(pat->data[i][3]*127)/chanVolMax;",
          "228:         if (volColor>127) volColor=127;",
          "229:         if (volColor<0) volColor=0;",
          "231:         ImGui::PushStyleColor(ImGuiCol_Text,volColors[volColor]);",
          "232:       }",
          "233:       ImGui::SameLine(0.0f,0.0f);",
          "",
          "[Removed Lines]",
          "224:         sprintf(id,\"..##PV_%d_%d\",i,j);",
          "230:         sprintf(id,\"%.2X##PV_%d_%d\",pat->data[i][3],i,j);",
          "",
          "[Added Lines]",
          "224:         snprintf(id,63,\"%.31s##PV_%d_%d\",emptyLabel2,i,j);",
          "230:         snprintf(id,63,\"%.2X##PV_%d_%d\",pat->data[i][3],i,j);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265:         if (pat->data[i][index]==-1) {",
          "267:           ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
          "268:         } else {",
          "269:           if (pat->data[i][index]>0xff) {",
          "271:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "272:           } else {",
          "273:             const unsigned char data=pat->data[i][index];",
          "275:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
          "276:           }",
          "277:         }",
          "",
          "[Removed Lines]",
          "266:           sprintf(id,\"..##PE%d_%d_%d\",k,i,j);",
          "270:             sprintf(id,\"??##PE%d_%d_%d\",k,i,j);",
          "274:             sprintf(id,\"%.2X##PE%d_%d_%d\",data,k,i,j);",
          "",
          "[Added Lines]",
          "266:           snprintf(id,63,\"%.31s##PE%d_%d_%d\",emptyLabel2,k,i,j);",
          "270:             snprintf(id,63,\"??##PE%d_%d_%d\",k,i,j);",
          "274:             snprintf(id,63,\"%.2X##PE%d_%d_%d\",data,k,i,j);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "299:         if (pat->data[i][index+1]==-1) {",
          "301:         } else {",
          "303:         }",
          "304:         ImGui::SameLine(0.0f,0.0f);",
          "305:         if (cursorEffectVal) {",
          "",
          "[Removed Lines]",
          "300:           sprintf(id,\"..##PF%d_%d_%d\",k,i,j);",
          "302:           sprintf(id,\"%.2X##PF%d_%d_%d\",pat->data[i][index+1],k,i,j);",
          "",
          "[Added Lines]",
          "300:           snprintf(id,63,\"%.31s##PF%d_%d_%d\",emptyLabel2,k,i,j);",
          "302:           snprintf(id,63,\"%.2X##PF%d_%d_%d\",pat->data[i][index+1],k,i,j);",
          "",
          "---------------"
        ],
        "src/gui/settings.cpp||src/gui/settings.cpp": [
          "File: src/gui/settings.cpp -> src/gui/settings.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"fonts.h\"",
          "22: #include \"../ta-log.h\"",
          "23: #include \"../fileutils.h\"",
          "24: #include \"util.h\"",
          "25: #include \"guiConst.h\"",
          "26: #include \"intConst.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"../utfutils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:           ImGui::Separator();",
          "1084:           ImGui::Text(\"Orders row number format:\");",
          "1085:           if (ImGui::RadioButton(\"Decimal##orbD\",settings.orderRowsBase==0)) {",
          "1086:             settings.orderRowsBase=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:           ImGui::Text(\"Pattern view labels:\");",
          "1086:           ImGui::InputTextWithHint(\"Note off (3-char)\",\"OFF\",&settings.noteOffLabel);",
          "1087:           ImGui::InputTextWithHint(\"Note release (3-char)\",\"===\",&settings.noteRelLabel);",
          "1088:           ImGui::InputTextWithHint(\"Macro release (3-char)\",\"REL\",&settings.macroRelLabel);",
          "1089:           ImGui::InputTextWithHint(\"Empty field (3-char)\",\"...\",&settings.emptyLabel);",
          "1090:           ImGui::InputTextWithHint(\"Empty field (2-char)\",\"..\",&settings.emptyLabel2);",
          "1092:           ImGui::Separator();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2118:   settings.noThreadedInput=e->getConfInt(\"noThreadedInput\",0);",
          "2119:   settings.initialSysName=e->getConfString(\"initialSysName\",\"\");",
          "2120:   settings.clampSamples=e->getConfInt(\"clampSamples\",0);",
          "2122:   clampSetting(settings.mainFontSize,2,96);",
          "2123:   clampSetting(settings.patFontSize,2,96);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2131:   settings.noteOffLabel=e->getConfString(\"noteOffLabel\",\"OFF\");",
          "2132:   settings.noteRelLabel=e->getConfString(\"noteRelLabel\",\"===\");",
          "2133:   settings.macroRelLabel=e->getConfString(\"macroRelLabel\",\"REL\");",
          "2134:   settings.emptyLabel=e->getConfString(\"emptyLabel\",\"...\");",
          "2135:   settings.emptyLabel2=e->getConfString(\"emptyLabel2\",\"..\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:   e->setConf(\"unsignedDetune\",settings.unsignedDetune);",
          "2346:   e->setConf(\"noThreadedInput\",settings.noThreadedInput);",
          "2347:   e->setConf(\"clampSamples\",settings.clampSamples);",
          "2350:   for (int i=0; i<GUI_COLOR_MAX; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2363:   e->setConf(\"noteOffLabel\",settings.noteOffLabel);",
          "2364:   e->setConf(\"noteRelLabel\",settings.noteRelLabel);",
          "2365:   e->setConf(\"macroRelLabel\",settings.macroRelLabel);",
          "2366:   e->setConf(\"emptyLabel\",settings.emptyLabel);",
          "2367:   e->setConf(\"emptyLabel2\",settings.emptyLabel2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2757: #define SYSTEM_PAT_FONT_PATH_3 \"/usr/share/fonts/ubuntu/UbuntuMono-R.ttf\"",
          "2758: #endif",
          "2760: void FurnaceGUI::applyUISettings(bool updateFonts) {",
          "2761:   ImGuiStyle sty;",
          "2762:   if (settings.guiColorsBase) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2780: void setupLabel(const char* lStr, char* label, int len) {",
          "2781:   memset(label,0,32);",
          "2782:   for (int i=0, p=0; i<len; i++) {",
          "2783:     signed char cl;",
          "2784:     if (lStr[p]!=0) {",
          "2785:       strncat(label,\" \",32);",
          "2786:     } else {",
          "2787:       decodeUTF8((const unsigned char*)&lStr[p],cl);",
          "2788:       memcpy(label+p,lStr+p,cl);",
          "2789:       p+=cl;",
          "2790:     }",
          "2791:   }",
          "2792: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2765:     ImGui::StyleColorsDark(&sty);",
          "2766:   }",
          "2768:   if (settings.dpiScale>=0.5f) dpiScale=settings.dpiScale;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2802:   setupLabel(settings.noteOffLabel.c_str(),noteOffLabel,3);",
          "2803:   setupLabel(settings.noteRelLabel.c_str(),noteRelLabel,3);",
          "2804:   setupLabel(settings.macroRelLabel.c_str(),macroRelLabel,3);",
          "2805:   setupLabel(settings.emptyLabel.c_str(),emptyLabel,3);",
          "2806:   setupLabel(settings.emptyLabel2.c_str(),emptyLabel2,2);",
          "",
          "---------------"
        ],
        "src/utfutils.cpp||src/utfutils.cpp": [
          "File: src/utfutils.cpp -> src/utfutils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"utfutils.h\"",
          "23:   int ret=0xfffd;",
          "24:   if (data[0]<0x80) {",
          "25:     ret=data[0];",
          "",
          "[Removed Lines]",
          "22: int decodeUTF8(const unsigned char* data, char& len) {",
          "",
          "[Added Lines]",
          "22: int decodeUTF8(const unsigned char* data, signed char& len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: size_t utf8len(const char* s) {",
          "67:   size_t p=0;",
          "68:   size_t r=0;",
          "70:   while (s[p]!=0) {",
          "71:     r++;",
          "72:     decodeUTF8((const unsigned char*)&s[p],cl);",
          "",
          "[Removed Lines]",
          "69:   char cl;",
          "",
          "[Added Lines]",
          "69:   signed char cl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: }",
          "78: char utf8csize(const unsigned char* c) {",
          "80:   decodeUTF8(c,ret);",
          "81:   return ret;",
          "82: }",
          "",
          "[Removed Lines]",
          "79:   char ret;",
          "",
          "[Added Lines]",
          "79:   signed char ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: WString utf8To16(const char* s) {",
          "85:   WString ret;",
          "86:   int ch, p;",
          "88:   p=0;",
          "89:   while (s[p]!=0) {",
          "90:     ch=decodeUTF8((const unsigned char*)&s[p],chs);",
          "",
          "[Removed Lines]",
          "87:   char chs;",
          "",
          "[Added Lines]",
          "87:   signed char chs;",
          "",
          "---------------"
        ],
        "src/utfutils.h||src/utfutils.h": [
          "File: src/utfutils.h -> src/utfutils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define _UTFUTILS_H",
          "22: #include \"ta-utils.h\"",
          "24: size_t utf8len(const char* s);",
          "25: size_t utf8clen(const char* s);",
          "26: size_t utf8pos(const char* s, size_t inpos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: int decodeUTF8(const unsigned char* data, signed char& len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3d26d33094df3ec16651998c83632f36b15d700",
      "candidate_info": {
        "commit_hash": "b3d26d33094df3ec16651998c83632f36b15d700",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/b3d26d33094df3ec16651998c83632f36b15d700",
        "files": [
          "CMakeLists.txt",
          "src/gui/gui.cpp",
          "src/gui/pattern.cpp"
        ],
        "message": "GUI: code split, part 2",
        "before_after_code_files": [
          "src/gui/gui.cpp||src/gui/gui.cpp",
          "src/gui/pattern.cpp||src/gui/pattern.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ],
          "candidate": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/gui/gui.cpp||src/gui/gui.cpp": [
          "File: src/gui/gui.cpp -> src/gui/gui.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #endif",
          "73: #endif",
          "113: String getHomeDir();",
          "119: bool Particle::update() {",
          "120:   pos.x+=speed.x;",
          "121:   pos.y+=speed.y;",
          "",
          "[Removed Lines]",
          "75: const FurnaceGUIColors fxColors[16]={",
          "76:   GUI_COLOR_PATTERN_EFFECT_MISC, // 00",
          "77:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 01",
          "78:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 02",
          "79:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 03",
          "80:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 04",
          "81:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 05",
          "82:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 06",
          "83:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 07",
          "84:   GUI_COLOR_PATTERN_EFFECT_PANNING, // 08",
          "85:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 09",
          "86:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 0A",
          "87:   GUI_COLOR_PATTERN_EFFECT_SONG, // 0B",
          "88:   GUI_COLOR_PATTERN_EFFECT_TIME, // 0C",
          "89:   GUI_COLOR_PATTERN_EFFECT_SONG, // 0D",
          "90:   GUI_COLOR_PATTERN_EFFECT_INVALID, // 0E",
          "91:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 0F",
          "92: };",
          "94: const FurnaceGUIColors extFxColors[16]={",
          "95:   GUI_COLOR_PATTERN_EFFECT_MISC, // E0",
          "96:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E1",
          "97:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E2",
          "98:   GUI_COLOR_PATTERN_EFFECT_MISC, // E3",
          "99:   GUI_COLOR_PATTERN_EFFECT_MISC, // E4",
          "100:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E5",
          "101:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E6",
          "102:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E7",
          "103:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E8",
          "104:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E9",
          "105:   GUI_COLOR_PATTERN_EFFECT_MISC, // EA",
          "106:   GUI_COLOR_PATTERN_EFFECT_MISC, // EB",
          "107:   GUI_COLOR_PATTERN_EFFECT_TIME, // EC",
          "108:   GUI_COLOR_PATTERN_EFFECT_TIME, // ED",
          "109:   GUI_COLOR_PATTERN_EFFECT_SONG, // EE",
          "110:   GUI_COLOR_PATTERN_EFFECT_SONG, // EF",
          "111: };",
          "115: inline float randRange(float min, float max) {",
          "116:   return min+((float)rand()/(float)RAND_MAX)*(max-min);",
          "117: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1679:   ImGui::End();",
          "1680: }",
          "2347: const char* aboutLine[57]={",
          "2348:   \"tildearrow\",",
          "2349:   \"is proud to present\",",
          "",
          "[Removed Lines]",
          "1683: inline void FurnaceGUI::patternRow(int i, bool isPlaying, float lineHeight, int chans, int ord) {",
          "1684:   static char id[32];",
          "1685:   bool selectedRow=(i>=sel1.y && i<=sel2.y);",
          "1686:   ImGui::TableNextRow(0,lineHeight);",
          "1687:   ImGui::TableNextColumn();",
          "1688:   float cursorPosY=ImGui::GetCursorPos().y-ImGui::GetScrollY();",
          "1690:   if (cursorPosY<-lineHeight || cursorPosY>ImGui::GetWindowSize().y) {",
          "1691:     return;",
          "1692:   }",
          "1694:   if (ord<0 || ord>=e->song.ordersLen) {",
          "1695:     return;",
          "1696:   }",
          "1697:   if (i<0 || i>=e->song.patLen) {",
          "1698:     return;",
          "1699:   }",
          "1701:   if (settings.overflowHighlight) {",
          "1702:     if (edit && cursor.y==i) {",
          "1703:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));",
          "1704:     } else if (isPlaying && oldRow==i) {",
          "1705:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,0x40ffffff);",
          "1706:     } else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {",
          "1707:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));",
          "1708:     } else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {",
          "1709:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));",
          "1710:     }",
          "1711:   }",
          "1713:   if (settings.patRowsBase==1) {",
          "1714:     ImGui::TextColored(uiColors[GUI_COLOR_PATTERN_ROW_INDEX],\" %.2X \",i);",
          "1715:   } else {",
          "1716:     ImGui::TextColored(uiColors[GUI_COLOR_PATTERN_ROW_INDEX],\"%3d \",i);",
          "1717:   }",
          "1719:   for (int j=0; j<chans; j++) {",
          "1721:     if (!e->song.chanShow[j]) {",
          "1722:       patChanX[j]=ImGui::GetCursorPosX();",
          "1723:       continue;",
          "1724:     }",
          "1725:     int chanVolMax=e->getMaxVolumeChan(j);",
          "1726:     if (chanVolMax<1) chanVolMax=1;",
          "1727:     DivPattern* pat=e->song.pat[j].getPattern(e->song.orders.ord[j][ord],true);",
          "1728:     ImGui::TableNextColumn();",
          "1729:     patChanX[j]=ImGui::GetCursorPosX();",
          "1732:     if (!settings.overflowHighlight) {",
          "1733:       if (edit && cursor.y==i) {",
          "1734:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));",
          "1735:       } else if (isPlaying && oldRow==i) {",
          "1736:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,0x40ffffff);",
          "1737:       } else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {",
          "1738:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));",
          "1739:       } else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {",
          "1740:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));",
          "1741:       }",
          "1742:     }",
          "1745:     int sel1XSum=sel1.xCoarse*32+sel1.xFine;",
          "1746:     int sel2XSum=sel2.xCoarse*32+sel2.xFine;",
          "1747:     int j32=j*32;",
          "1748:     bool selectedNote=selectedRow && (j32>=sel1XSum && j32<=sel2XSum);",
          "1749:     bool selectedIns=selectedRow && (j32+1>=sel1XSum && j32+1<=sel2XSum);",
          "1750:     bool selectedVol=selectedRow && (j32+2>=sel1XSum && j32+2<=sel2XSum);",
          "1751:     bool cursorNote=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==0);",
          "1752:     bool cursorIns=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==1);",
          "1753:     bool cursorVol=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==2);",
          "1756:     sprintf(id,\"%s##PN_%d_%d\",noteName(pat->data[i][0],pat->data[i][1]),i,j);",
          "1757:     if (pat->data[i][0]==0 && pat->data[i][1]==0) {",
          "1758:       ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "1759:     } else {",
          "1760:       ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_ACTIVE]);",
          "1761:     }",
          "1762:     if (cursorNote) {",
          "1763:       ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "1764:       ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "1765:       ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "1766:       ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);",
          "1767:       demandX=ImGui::GetCursorPosX();",
          "1768:       ImGui::PopStyleColor(3);",
          "1769:     } else {",
          "1770:       ImGui::Selectable(id,selectedNote,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);",
          "1771:     }",
          "1772:     if (ImGui::IsItemClicked()) {",
          "1773:       startSelection(j,0,i);",
          "1774:     }",
          "1775:     if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "1776:       updateSelection(j,0,i);",
          "1777:     }",
          "1778:     ImGui::PopStyleColor();",
          "1781:     if (!e->song.chanCollapse[j]) {",
          "1783:       if (pat->data[i][2]==-1) {",
          "1784:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "1785:         sprintf(id,\"..##PI_%d_%d\",i,j);",
          "1786:       } else {",
          "1787:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INS]);",
          "1788:         sprintf(id,\"%.2X##PI_%d_%d\",pat->data[i][2],i,j);",
          "1789:       }",
          "1790:       ImGui::SameLine(0.0f,0.0f);",
          "1791:       if (cursorIns) {",
          "1792:         ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "1793:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "1794:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "1795:         ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1796:         demandX=ImGui::GetCursorPosX();",
          "1797:         ImGui::PopStyleColor(3);",
          "1798:       } else {",
          "1799:         ImGui::Selectable(id,selectedIns,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1800:       }",
          "1801:       if (ImGui::IsItemClicked()) {",
          "1802:         startSelection(j,1,i);",
          "1803:       }",
          "1804:       if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "1805:         updateSelection(j,1,i);",
          "1806:       }",
          "1807:       ImGui::PopStyleColor();",
          "1810:       if (pat->data[i][3]==-1) {",
          "1811:         sprintf(id,\"..##PV_%d_%d\",i,j);",
          "1812:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "1813:       } else {",
          "1814:         int volColor=(pat->data[i][3]*127)/chanVolMax;",
          "1815:         if (volColor>127) volColor=127;",
          "1816:         if (volColor<0) volColor=0;",
          "1817:         sprintf(id,\"%.2X##PV_%d_%d\",pat->data[i][3],i,j);",
          "1818:         ImGui::PushStyleColor(ImGuiCol_Text,volColors[volColor]);",
          "1819:       }",
          "1820:       ImGui::SameLine(0.0f,0.0f);",
          "1821:       if (cursorVol) {",
          "1822:         ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "1823:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "1824:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "1825:         ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1826:         demandX=ImGui::GetCursorPosX();",
          "1827:         ImGui::PopStyleColor(3);",
          "1828:       } else {",
          "1829:         ImGui::Selectable(id,selectedVol,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1830:       }",
          "1831:       if (ImGui::IsItemClicked()) {",
          "1832:         startSelection(j,2,i);",
          "1833:       }",
          "1834:       if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "1835:         updateSelection(j,2,i);",
          "1836:       }",
          "1837:       ImGui::PopStyleColor();",
          "1840:       for (int k=0; k<e->song.pat[j].effectRows; k++) {",
          "1841:         int index=4+(k<<1);",
          "1842:         bool selectedEffect=selectedRow && (j32+index-1>=sel1XSum && j32+index-1<=sel2XSum);",
          "1843:         bool selectedEffectVal=selectedRow && (j32+index>=sel1XSum && j32+index<=sel2XSum);",
          "1844:         bool cursorEffect=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==index-1);",
          "1845:         bool cursorEffectVal=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==index);",
          "1848:         if (pat->data[i][index]==-1) {",
          "1849:           sprintf(id,\"..##PE%d_%d_%d\",k,i,j);",
          "1850:           ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "1851:         } else {",
          "1852:           sprintf(id,\"%.2X##PE%d_%d_%d\",pat->data[i][index],k,i,j);",
          "1853:           if (pat->data[i][index]<0x10) {",
          "1854:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[pat->data[i][index]]]);",
          "1855:           } else if (pat->data[i][index]<0x20) {",
          "1856:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "1857:           } else if (pat->data[i][index]<0x30) {",
          "1858:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "1859:           } else if (pat->data[i][index]<0x48) {",
          "1860:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "1861:           } else if (pat->data[i][index]<0xc0) {",
          "1862:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "1863:           } else if (pat->data[i][index]<0xd0) {",
          "1864:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "1865:           } else if (pat->data[i][index]<0xe0) {",
          "1866:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "1867:           } else if (pat->data[i][index]<0xf0) {",
          "1868:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
          "1869:           } else {",
          "1870:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "1871:           }",
          "1872:         }",
          "1873:         ImGui::SameLine(0.0f,0.0f);",
          "1874:         if (cursorEffect) {",
          "1875:           ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "1876:           ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "1877:           ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "1878:           ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1879:           demandX=ImGui::GetCursorPosX();",
          "1880:           ImGui::PopStyleColor(3);",
          "1881:         } else {",
          "1882:           ImGui::Selectable(id,selectedEffect,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1883:         }",
          "1884:         if (ImGui::IsItemClicked()) {",
          "1885:           startSelection(j,index-1,i);",
          "1886:         }",
          "1887:         if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "1888:           updateSelection(j,index-1,i);",
          "1889:         }",
          "1892:         if (pat->data[i][index+1]==-1) {",
          "1893:           sprintf(id,\"..##PF%d_%d_%d\",k,i,j);",
          "1894:         } else {",
          "1895:           sprintf(id,\"%.2X##PF%d_%d_%d\",pat->data[i][index+1],k,i,j);",
          "1896:         }",
          "1897:         ImGui::SameLine(0.0f,0.0f);",
          "1898:         if (cursorEffectVal) {",
          "1899:           ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "1900:           ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "1901:           ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "1902:           ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1903:           demandX=ImGui::GetCursorPosX();",
          "1904:           ImGui::PopStyleColor(3);",
          "1905:         } else {",
          "1906:           ImGui::Selectable(id,selectedEffectVal,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "1907:         }",
          "1908:         if (ImGui::IsItemClicked()) {",
          "1909:           startSelection(j,index,i);",
          "1910:         }",
          "1911:         if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "1912:           updateSelection(j,index,i);",
          "1913:         }",
          "1914:         ImGui::PopStyleColor();",
          "1915:       }",
          "1916:     }",
          "1917:   }",
          "1918:   ImGui::TableNextColumn();",
          "1919:   patChanX[chans]=ImGui::GetCursorPosX();",
          "1920: }",
          "1922: void FurnaceGUI::drawPattern() {",
          "1923:   if (nextWindow==GUI_WINDOW_PATTERN) {",
          "1924:     patternOpen=true;",
          "1925:     ImGui::SetNextWindowFocus();",
          "1926:     nextWindow=GUI_WINDOW_NOTHING;",
          "1927:   }",
          "1928:   if (!patternOpen) return;",
          "1929:   if (e->isPlaying() && followPattern) cursor.y=oldRow;",
          "1930:   demandX=0;",
          "1931:   sel1=selStart;",
          "1932:   sel2=selEnd;",
          "1933:   if (sel2.y<sel1.y) {",
          "1934:     sel2.y^=sel1.y;",
          "1935:     sel1.y^=sel2.y;",
          "1936:     sel2.y^=sel1.y;",
          "1937:   }",
          "1938:   if (sel2.xCoarse<sel1.xCoarse) {",
          "1939:     sel2.xCoarse^=sel1.xCoarse;",
          "1940:     sel1.xCoarse^=sel2.xCoarse;",
          "1941:     sel2.xCoarse^=sel1.xCoarse;",
          "1943:     sel2.xFine^=sel1.xFine;",
          "1944:     sel1.xFine^=sel2.xFine;",
          "1945:     sel2.xFine^=sel1.xFine;",
          "1946:   } else if (sel2.xCoarse==sel1.xCoarse && sel2.xFine<sel1.xFine) {",
          "1947:     sel2.xFine^=sel1.xFine;",
          "1948:     sel1.xFine^=sel2.xFine;",
          "1949:     sel2.xFine^=sel1.xFine;",
          "1950:   }",
          "1951:   ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding,ImVec2(0.0f,0.0f));",
          "1952:   if (ImGui::Begin(\"Pattern\",&patternOpen)) {",
          "1954:     patWindowPos=ImGui::GetWindowPos();",
          "1955:     patWindowSize=ImGui::GetWindowSize();",
          "1957:     ImGui::PushFont(patFont);",
          "1958:     int ord=e->isPlaying()?oldOrder:e->getOrder();",
          "1959:     oldOrder=e->getOrder();",
          "1960:     int chans=e->getTotalChannelCount();",
          "1961:     int displayChans=0;",
          "1962:     for (int i=0; i<chans; i++) {",
          "1963:       if (e->song.chanShow[i]) displayChans++;",
          "1964:     }",
          "1965:     ImGui::PushStyleVar(ImGuiStyleVar_CellPadding,ImVec2(0.0f,0.0f));",
          "1966:     ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_SELECTION]);",
          "1967:     ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_SELECTION_HOVER]);",
          "1968:     ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_SELECTION_ACTIVE]);",
          "1969:     if (ImGui::BeginTable(\"PatternView\",displayChans+2,ImGuiTableFlags_BordersInnerV|ImGuiTableFlags_ScrollX|ImGuiTableFlags_ScrollY|ImGuiTableFlags_NoPadInnerX)) {",
          "1970:       ImGui::TableSetupColumn(\"pos\",ImGuiTableColumnFlags_WidthFixed);",
          "1971:       char chanID[2048];",
          "1972:       float lineHeight=(ImGui::GetTextLineHeight()+2*dpiScale);",
          "1973:       int curRow=e->getRow();",
          "1974:       if (e->isPlaying() && followPattern) updateScroll(curRow);",
          "1975:       if (nextScroll>-0.5f) {",
          "1976:         ImGui::SetScrollY(nextScroll);",
          "1977:         nextScroll=-1.0f;",
          "1978:         nextAddScroll=0.0f;",
          "1979:       }",
          "1980:       if (nextAddScroll!=0.0f) {",
          "1981:         ImGui::SetScrollY(ImGui::GetScrollY()+nextAddScroll);",
          "1982:         nextScroll=-1.0f;",
          "1983:         nextAddScroll=0.0f;",
          "1984:       }",
          "1985:       ImGui::TableSetupScrollFreeze(1,1);",
          "1986:       for (int i=0; i<chans; i++) {",
          "1987:         if (!e->song.chanShow[i]) continue;",
          "1988:         ImGui::TableSetupColumn(fmt::sprintf(\"c%d\",i).c_str(),ImGuiTableColumnFlags_WidthFixed);",
          "1989:       }",
          "1990:       ImGui::TableNextRow();",
          "1991:       ImGui::TableNextColumn();",
          "1992:       if (ImGui::Selectable(extraChannelButtons?\" --##ExtraChannelButtons\":\" ++##ExtraChannelButtons\",false,ImGuiSelectableFlags_NoPadWithHalfSpacing,ImVec2(0.0f,lineHeight+1.0f*dpiScale))) {",
          "1993:         extraChannelButtons=!extraChannelButtons;",
          "1994:       }",
          "1995:       if (ImGui::IsItemClicked(ImGuiMouseButton_Right)) {",
          "1996:         fancyPattern=!fancyPattern;",
          "1997:         e->enableCommandStream(fancyPattern);",
          "1998:         e->getCommandStream(cmdStream);",
          "1999:         cmdStream.clear();",
          "2000:       }",
          "2001:       for (int i=0; i<chans; i++) {",
          "2002:         if (!e->song.chanShow[i]) continue;",
          "2003:         ImGui::TableNextColumn();",
          "2004:         bool displayTooltip=false;",
          "2005:         if (e->song.chanCollapse[i]) {",
          "2006:           const char* chName=e->getChannelShortName(i);",
          "2007:           if (strlen(chName)>3) {",
          "2008:             snprintf(chanID,2048,\"...##_CH%d\",i);",
          "2009:           } else {",
          "2010:             snprintf(chanID,2048,\"%s##_CH%d\",chName,i);",
          "2011:           }",
          "2012:           displayTooltip=true;",
          "2013:         } else {",
          "2014:           const char* chName=e->getChannelName(i);",
          "2015:           size_t chNameLimit=6+4*e->song.pat[i].effectRows;",
          "2016:           if (strlen(chName)>chNameLimit) {",
          "2017:             String shortChName=chName;",
          "2018:             shortChName.resize(chNameLimit-3);",
          "2019:             shortChName+=\"...\";",
          "2020:             snprintf(chanID,2048,\" %s##_CH%d\",shortChName.c_str(),i);",
          "2021:             displayTooltip=true;",
          "2022:           } else {",
          "2023:             snprintf(chanID,2048,\" %s##_CH%d\",chName,i);",
          "2024:           }",
          "2025:         }",
          "2026:         bool muted=e->isChannelMuted(i);",
          "2027:         ImVec4 chanHead=muted?uiColors[GUI_COLOR_CHANNEL_MUTED]:uiColors[GUI_COLOR_CHANNEL_FM+e->getChannelType(i)];",
          "2028:         ImVec4 chanHeadActive=chanHead;",
          "2029:         ImVec4 chanHeadHover=chanHead;",
          "2030:         if (e->keyHit[i]) {",
          "2031:           keyHit[i]=0.2;",
          "2032:           e->keyHit[i]=false;",
          "2033:         }",
          "2034:         chanHead.x*=0.25+keyHit[i]; chanHead.y*=0.25+keyHit[i]; chanHead.z*=0.25+keyHit[i];",
          "2035:         chanHeadActive.x*=0.8; chanHeadActive.y*=0.8; chanHeadActive.z*=0.8;",
          "2036:         chanHeadHover.x*=0.4+keyHit[i]; chanHeadHover.y*=0.4+keyHit[i]; chanHeadHover.z*=0.4+keyHit[i];",
          "2037:         keyHit[i]-=0.02;",
          "2038:         if (keyHit[i]<0) keyHit[i]=0;",
          "2039:         ImGui::PushStyleColor(ImGuiCol_Header,chanHead);",
          "2040:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,chanHeadActive);",
          "2041:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,chanHeadHover);",
          "2043:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(chanHead));",
          "2044:         if (muted) ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_CHANNEL_MUTED]);",
          "2045:         ImGui::Selectable(chanID,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,ImVec2(0.0f,lineHeight+1.0f*dpiScale));",
          "2046:         if (displayTooltip && ImGui::IsItemHovered()) {",
          "2047:           ImGui::SetTooltip(\"%s\",e->getChannelName(i));",
          "2048:         }",
          "2049:         if (ImGui::IsItemClicked(ImGuiMouseButton_Left)) {",
          "2050:           if (settings.soloAction!=1 && soloTimeout>0 && soloChan==i) {",
          "2051:             e->toggleSolo(i);",
          "2052:             soloTimeout=0;",
          "2053:           } else {",
          "2054:             e->toggleMute(i);",
          "2055:             soloTimeout=20;",
          "2056:             soloChan=i;",
          "2057:           }",
          "2058:         }",
          "2059:         if (muted) ImGui::PopStyleColor();",
          "2060:         ImGui::PopStyleColor(3);",
          "2061:         if (settings.soloAction!=2) if (ImGui::IsItemClicked(ImGuiMouseButton_Right)) {",
          "2062:           e->toggleSolo(i);",
          "2063:         }",
          "2064:         if (extraChannelButtons) {",
          "2065:           snprintf(chanID,2048,\"%c##_HCH%d\",e->song.chanCollapse[i]?'+':'-',i);",
          "2066:           ImGui::SetCursorPosX(ImGui::GetCursorPosX()+4.0f*dpiScale);",
          "2067:           if (ImGui::SmallButton(chanID)) {",
          "2068:             e->song.chanCollapse[i]=!e->song.chanCollapse[i];",
          "2069:           }",
          "2070:           if (!e->song.chanCollapse[i]) {",
          "2071:             ImGui::SameLine();",
          "2072:             snprintf(chanID,2048,\"<##_LCH%d\",i);",
          "2073:             ImGui::BeginDisabled(e->song.pat[i].effectRows<=1);",
          "2074:             if (ImGui::SmallButton(chanID)) {",
          "2075:               e->song.pat[i].effectRows--;",
          "2076:               if (e->song.pat[i].effectRows<1) e->song.pat[i].effectRows=1;",
          "2077:             }",
          "2078:             ImGui::EndDisabled();",
          "2079:             ImGui::SameLine();",
          "2080:             ImGui::BeginDisabled(e->song.pat[i].effectRows>=8);",
          "2081:             snprintf(chanID,2048,\">##_RCH%d\",i);",
          "2082:             if (ImGui::SmallButton(chanID)) {",
          "2083:               e->song.pat[i].effectRows++;",
          "2084:               if (e->song.pat[i].effectRows>8) e->song.pat[i].effectRows=8;",
          "2085:             }",
          "2086:             ImGui::EndDisabled();",
          "2087:           }",
          "2088:           ImGui::Spacing();",
          "2089:         }",
          "2090:       }",
          "2091:       ImGui::TableNextColumn();",
          "2092:       if (e->hasExtValue()) {",
          "2093:         ImGui::TextColored(uiColors[GUI_COLOR_EE_VALUE],\" %.2X\",e->getExtValue());",
          "2094:       }",
          "2095:       float oneCharSize=ImGui::CalcTextSize(\"A\").x;",
          "2096:       threeChars=ImVec2(oneCharSize*3.0f,lineHeight);",
          "2097:       twoChars=ImVec2(oneCharSize*2.0f,lineHeight);",
          "2099:       dummyRows=(ImGui::GetWindowSize().y/lineHeight)/2;",
          "2102:       ImGui::BeginDisabled();",
          "2103:       if (settings.viewPrevPattern) {",
          "2104:         for (int i=0; i<dummyRows-1; i++) {",
          "2105:           patternRow(e->song.patLen+i-dummyRows+1,e->isPlaying(),lineHeight,chans,ord-1);",
          "2106:         }",
          "2107:       } else {",
          "2108:         for (int i=0; i<dummyRows-1; i++) {",
          "2109:           ImGui::TableNextRow(0,lineHeight);",
          "2110:           ImGui::TableNextColumn();",
          "2111:         }",
          "2112:       }",
          "2113:       ImGui::EndDisabled();",
          "2115:       for (int i=0; i<e->song.patLen; i++) {",
          "2116:         patternRow(i,e->isPlaying(),lineHeight,chans,ord);",
          "2117:       }",
          "2119:       ImGui::BeginDisabled();",
          "2120:       if (settings.viewPrevPattern) {",
          "2121:         for (int i=0; i<=dummyRows; i++) {",
          "2122:           patternRow(i,e->isPlaying(),lineHeight,chans,ord+1);",
          "2123:         }",
          "2124:       } else {",
          "2125:         for (int i=0; i<=dummyRows; i++) {",
          "2126:           ImGui::TableNextRow(0,lineHeight);",
          "2127:           ImGui::TableNextColumn();",
          "2128:         }",
          "2129:       }",
          "2130:       ImGui::EndDisabled();",
          "2131:       oldRow=curRow;",
          "2132:       if (demandScrollX) {",
          "2133:         int totalDemand=demandX-ImGui::GetScrollX();",
          "2134:         if (totalDemand<80) {",
          "2135:           ImGui::SetScrollX(demandX-200*dpiScale);",
          "2136:         } else if (totalDemand>(ImGui::GetWindowWidth()-200*dpiScale)) {",
          "2137:           ImGui::SetScrollX(demandX+200*dpiScale);",
          "2138:         }",
          "2139:         demandScrollX=false;",
          "2140:       }",
          "2141:       ImGui::EndTable();",
          "2142:     }",
          "2144:     if (fancyPattern) { // visualizer",
          "2145:       e->getCommandStream(cmdStream);",
          "2146:       ImDrawList* dl=ImGui::GetWindowDrawList();",
          "2147:       ImVec2 off=ImGui::GetWindowPos();",
          "2150:       for (DivCommand& i: cmdStream) {",
          "2151:         if (i.cmd==DIV_CMD_PITCH) continue;",
          "2152:         if (i.cmd==DIV_CMD_NOTE_PORTA) continue;",
          "2154:         if (i.cmd==DIV_CMD_PRE_PORTA) continue;",
          "2155:         if (i.cmd==DIV_CMD_PRE_NOTE) continue;",
          "2156:         if (i.cmd==DIV_CMD_INSTRUMENT) continue;",
          "2157:         if (i.cmd==DIV_CMD_SAMPLE_BANK) continue;",
          "2158:         if (i.cmd==DIV_CMD_GET_VOLUME) continue;",
          "2159:         if (i.cmd==DIV_ALWAYS_SET_VOLUME) continue;",
          "2161:         float width=patChanX[i.chan+1]-patChanX[i.chan];",
          "2162:         float speedX=0.0f;",
          "2163:         float speedY=-18.0f;",
          "2164:         float grav=0.6f;",
          "2165:         float frict=1.0f;",
          "2166:         float life=255.0f;",
          "2167:         float lifeSpeed=8.0f;",
          "2168:         float spread=5.0f;",
          "2169:         int num=3;",
          "2170:         const char* partIcon=ICON_FA_MICROCHIP;",
          "2171:         ImU32* color=noteGrad;",
          "2173:         switch (i.cmd) {",
          "2174:           case DIV_CMD_NOTE_ON:",
          "2175:             partIcon=ICON_FA_ASTERISK;",
          "2176:             life=64.0f;",
          "2177:             lifeSpeed=2.0f;",
          "2178:             break;",
          "2179:           case DIV_CMD_LEGATO:",
          "2180:             partIcon=ICON_FA_COG;",
          "2181:             color=insGrad;",
          "2182:             life=64.0f;",
          "2183:             lifeSpeed=2.0f;",
          "2184:             break;",
          "2185:           case DIV_CMD_NOTE_OFF:",
          "2186:           case DIV_CMD_NOTE_OFF_ENV:",
          "2187:           case DIV_CMD_ENV_RELEASE:",
          "2188:             partIcon=ICON_FA_ASTERISK;",
          "2189:             speedX=0.0f;",
          "2190:             speedY=0.0f;",
          "2191:             grav=0.0f;",
          "2192:             life=24.0f;",
          "2193:             lifeSpeed=4.0f;",
          "2194:             break;",
          "2195:           case DIV_CMD_VOLUME: {",
          "2196:             float scaledVol=(float)i.value/(float)e->getMaxVolumeChan(i.chan);",
          "2197:             if (scaledVol>1.0f) scaledVol=1.0f;",
          "2198:             speedY=-18.0f-(10.0f*scaledVol);",
          "2199:             life=128+scaledVol*127;",
          "2200:             partIcon=ICON_FA_VOLUME_UP;",
          "2201:             num=12.0f*pow(scaledVol,2.0);",
          "2202:             color=volGrad;",
          "2203:             break;",
          "2204:           }",
          "2205:           case DIV_CMD_PANNING: {",
          "2206:             if (i.value==0) {",
          "2207:               num=0;",
          "2208:               break;",
          "2209:             }",
          "2210:             float ratio=float(((i.value>>4)&15)-(i.value&15))/MAX(((i.value>>4)&15),(i.value&15));",
          "2211:             speedX=-22.0f*sin(ratio*M_PI*0.5);",
          "2212:             speedY=-22.0f*cos(ratio*M_PI*0.5);",
          "2213:             spread=5.0f+fabs(sin(ratio*M_PI*0.5))*7.0f;",
          "2214:             grav=0.0f;",
          "2215:             frict=0.96f;",
          "2216:             if (((i.value>>4)&15)==(i.value&15)) {",
          "2217:               partIcon=ICON_FA_ARROWS_H;",
          "2218:             } else if (ratio>0) {",
          "2219:               partIcon=ICON_FA_ARROW_LEFT;",
          "2220:             } else {",
          "2221:               partIcon=ICON_FA_ARROW_RIGHT;",
          "2222:             }",
          "2223:             num=9;",
          "2224:             color=panGrad;",
          "2225:             break;",
          "2226:           }",
          "2227:           case DIV_CMD_SAMPLE_FREQ:",
          "2228:             speedX=0.0f;",
          "2229:             speedY=0.0f;",
          "2230:             grav=0.0f;",
          "2231:             frict=0.98;",
          "2232:             spread=19.0f;",
          "2233:             life=128.0f;",
          "2234:             lifeSpeed=3.0f;",
          "2235:             color=sysCmd2Grad;",
          "2236:             num=10+pow(i.value,0.6);",
          "2237:             break;",
          "2238:           default:",
          "2240:             color=sysCmd1Grad;",
          "2241:             break;",
          "2242:         }",
          "2244:         for (int j=0; j<num; j++) {",
          "2245:           particles.push_back(Particle(",
          "2246:             color,",
          "2247:             partIcon,",
          "2248:             off.x+patChanX[i.chan]+fmod(rand(),width),",
          "2249:             off.y+(ImGui::GetWindowHeight()*0.5f)+randRange(0,patFont->FontSize),",
          "2250:             (speedX+randRange(-spread,spread))*0.5*dpiScale,",
          "2251:             (speedY+randRange(-spread,spread))*0.5*dpiScale,",
          "2252:             grav,",
          "2253:             frict,",
          "2254:             life-randRange(0,8),",
          "2255:             lifeSpeed",
          "2256:           ));",
          "2257:         }",
          "2258:       }",
          "2261:       ImVec2 arrowPoints[7];",
          "2262:       for (int i=0; i<chans; i++) {",
          "2263:         DivChannelState* ch=e->getChanState(i);",
          "2264:         if (ch->portaSpeed>0) {",
          "2265:           ImVec4 col=uiColors[GUI_COLOR_PATTERN_EFFECT_PITCH];",
          "2266:           col.w*=0.2;",
          "2267:           float width=patChanX[i+1]-patChanX[i];",
          "2269:           if (e->isPlaying()) {",
          "2270:             particles.push_back(Particle(",
          "2271:               pitchGrad,",
          "2272:               (ch->portaNote<=ch->note)?ICON_FA_CHEVRON_DOWN:ICON_FA_CHEVRON_UP,",
          "2273:               off.x+patChanX[i]+fmod(rand(),width),",
          "2274:               off.y+fmod(rand(),MAX(1,ImGui::GetWindowHeight())),",
          "2275:               0.0f,",
          "2276:               (7.0f+(rand()%5)+pow(ch->portaSpeed,0.7f))*((ch->portaNote<=ch->note)?1:-1),",
          "2277:               0.0f,",
          "2278:               1.0f,",
          "2279:               255.0f,",
          "2280:               15.0f",
          "2281:             ));",
          "2282:           }",
          "2284:           for (float j=-patChanSlideY[i]; j<ImGui::GetWindowHeight(); j+=width*0.7) {",
          "2285:             ImVec2 tMin=ImVec2(off.x+patChanX[i],off.y+j);",
          "2286:             ImVec2 tMax=ImVec2(off.x+patChanX[i+1],off.y+j+width*0.6);",
          "2287:             if (ch->portaNote<=ch->note) {",
          "2288:               arrowPoints[0]=ImLerp(tMin,tMax,ImVec2(0.1,1.0-0.8));",
          "2289:               arrowPoints[1]=ImLerp(tMin,tMax,ImVec2(0.5,1.0-0.0));",
          "2290:               arrowPoints[2]=ImLerp(tMin,tMax,ImVec2(0.9,1.0-0.8));",
          "2291:               arrowPoints[3]=ImLerp(tMin,tMax,ImVec2(0.8,1.0-1.0));",
          "2292:               arrowPoints[4]=ImLerp(tMin,tMax,ImVec2(0.5,1.0-0.37));",
          "2293:               arrowPoints[5]=ImLerp(tMin,tMax,ImVec2(0.2,1.0-1.0));",
          "2294:               arrowPoints[6]=arrowPoints[0];",
          "2295:               dl->AddPolyline(arrowPoints,7,ImGui::GetColorU32(col),ImDrawFlags_None,5.0f*dpiScale);",
          "2296:             } else {",
          "2297:               arrowPoints[0]=ImLerp(tMin,tMax,ImVec2(0.1,0.8));",
          "2298:               arrowPoints[1]=ImLerp(tMin,tMax,ImVec2(0.5,0.0));",
          "2299:               arrowPoints[2]=ImLerp(tMin,tMax,ImVec2(0.9,0.8));",
          "2300:               arrowPoints[3]=ImLerp(tMin,tMax,ImVec2(0.8,1.0));",
          "2301:               arrowPoints[4]=ImLerp(tMin,tMax,ImVec2(0.5,0.37));",
          "2302:               arrowPoints[5]=ImLerp(tMin,tMax,ImVec2(0.2,1.0));",
          "2303:               arrowPoints[6]=arrowPoints[0];",
          "2304:               dl->AddPolyline(arrowPoints,7,ImGui::GetColorU32(col),ImDrawFlags_None,5.0f*dpiScale);",
          "2305:             }",
          "2306:           }",
          "2307:           patChanSlideY[i]+=((ch->portaNote<=ch->note)?-8:8)*dpiScale;",
          "2308:           if (width>0) {",
          "2309:             if (patChanSlideY[i]<0) {",
          "2310:               patChanSlideY[i]=-fmod(-patChanSlideY[i],width*0.7);",
          "2311:             } else {",
          "2312:               patChanSlideY[i]=fmod(patChanSlideY[i],width*0.7);",
          "2313:             }",
          "2314:           }",
          "2315:         }",
          "2316:       }",
          "2319:       ImDrawList* fdl=ImGui::GetForegroundDrawList();",
          "2320:       for (size_t i=0; i<particles.size(); i++) {",
          "2321:         Particle& part=particles[i];",
          "2322:         if (part.update()) {",
          "2323:           if (part.life>255) part.life=255;",
          "2324:           fdl->AddText(",
          "2325:             iconFont,",
          "2326:             iconFont->FontSize,",
          "2327:             ImVec2(part.pos.x-iconFont->FontSize*0.5,part.pos.y-iconFont->FontSize*0.5),",
          "2328:             part.colors[(int)part.life],",
          "2329:             part.type",
          "2330:           );",
          "2331:         } else {",
          "2332:           particles.erase(particles.begin()+i);",
          "2333:           i--;",
          "2334:         }",
          "2335:       }",
          "2336:     }",
          "2338:     ImGui::PopStyleColor(3);",
          "2339:     ImGui::PopStyleVar();",
          "2340:     ImGui::PopFont();",
          "2341:   }",
          "2342:   ImGui::PopStyleVar();",
          "2343:   if (ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows)) curWindow=GUI_WINDOW_PATTERN;",
          "2344:   ImGui::End();",
          "2345: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/gui/pattern.cpp||src/gui/pattern.cpp": [
          "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #define _USE_MATH_DEFINES",
          "21: #include \"gui.h\"",
          "22: #include \"imgui_internal.h\"",
          "23: #include \"IconsFontAwesome4.h\"",
          "24: #include \"guiConst.h\"",
          "25: #include <fmt/printf.h>",
          "27: const FurnaceGUIColors fxColors[16]={",
          "28:   GUI_COLOR_PATTERN_EFFECT_MISC, // 00",
          "29:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 01",
          "30:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 02",
          "31:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 03",
          "32:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 04",
          "33:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 05",
          "34:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 06",
          "35:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 07",
          "36:   GUI_COLOR_PATTERN_EFFECT_PANNING, // 08",
          "37:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 09",
          "38:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // 0A",
          "39:   GUI_COLOR_PATTERN_EFFECT_SONG, // 0B",
          "40:   GUI_COLOR_PATTERN_EFFECT_TIME, // 0C",
          "41:   GUI_COLOR_PATTERN_EFFECT_SONG, // 0D",
          "42:   GUI_COLOR_PATTERN_EFFECT_INVALID, // 0E",
          "43:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 0F",
          "44: };",
          "46: const FurnaceGUIColors extFxColors[16]={",
          "47:   GUI_COLOR_PATTERN_EFFECT_MISC, // E0",
          "48:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E1",
          "49:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E2",
          "50:   GUI_COLOR_PATTERN_EFFECT_MISC, // E3",
          "51:   GUI_COLOR_PATTERN_EFFECT_MISC, // E4",
          "52:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E5",
          "53:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E6",
          "54:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E7",
          "55:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E8",
          "56:   GUI_COLOR_PATTERN_EFFECT_INVALID, // E9",
          "57:   GUI_COLOR_PATTERN_EFFECT_MISC, // EA",
          "58:   GUI_COLOR_PATTERN_EFFECT_MISC, // EB",
          "59:   GUI_COLOR_PATTERN_EFFECT_TIME, // EC",
          "60:   GUI_COLOR_PATTERN_EFFECT_TIME, // ED",
          "61:   GUI_COLOR_PATTERN_EFFECT_SONG, // EE",
          "62:   GUI_COLOR_PATTERN_EFFECT_SONG, // EF",
          "63: };",
          "65: inline float randRange(float min, float max) {",
          "66:   return min+((float)rand()/(float)RAND_MAX)*(max-min);",
          "67: }",
          "70: inline void FurnaceGUI::patternRow(int i, bool isPlaying, float lineHeight, int chans, int ord) {",
          "71:   static char id[32];",
          "72:   bool selectedRow=(i>=sel1.y && i<=sel2.y);",
          "73:   ImGui::TableNextRow(0,lineHeight);",
          "74:   ImGui::TableNextColumn();",
          "75:   float cursorPosY=ImGui::GetCursorPos().y-ImGui::GetScrollY();",
          "77:   if (cursorPosY<-lineHeight || cursorPosY>ImGui::GetWindowSize().y) {",
          "78:     return;",
          "79:   }",
          "81:   if (ord<0 || ord>=e->song.ordersLen) {",
          "82:     return;",
          "83:   }",
          "84:   if (i<0 || i>=e->song.patLen) {",
          "85:     return;",
          "86:   }",
          "88:   if (settings.overflowHighlight) {",
          "89:     if (edit && cursor.y==i) {",
          "90:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));",
          "91:     } else if (isPlaying && oldRow==i) {",
          "92:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,0x40ffffff);",
          "93:     } else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {",
          "94:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));",
          "95:     } else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {",
          "96:       ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));",
          "97:     }",
          "98:   }",
          "100:   if (settings.patRowsBase==1) {",
          "101:     ImGui::TextColored(uiColors[GUI_COLOR_PATTERN_ROW_INDEX],\" %.2X \",i);",
          "102:   } else {",
          "103:     ImGui::TextColored(uiColors[GUI_COLOR_PATTERN_ROW_INDEX],\"%3d \",i);",
          "104:   }",
          "106:   for (int j=0; j<chans; j++) {",
          "108:     if (!e->song.chanShow[j]) {",
          "109:       patChanX[j]=ImGui::GetCursorPosX();",
          "110:       continue;",
          "111:     }",
          "112:     int chanVolMax=e->getMaxVolumeChan(j);",
          "113:     if (chanVolMax<1) chanVolMax=1;",
          "114:     DivPattern* pat=e->song.pat[j].getPattern(e->song.orders.ord[j][ord],true);",
          "115:     ImGui::TableNextColumn();",
          "116:     patChanX[j]=ImGui::GetCursorPosX();",
          "119:     if (!settings.overflowHighlight) {",
          "120:       if (edit && cursor.y==i) {",
          "121:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));",
          "122:       } else if (isPlaying && oldRow==i) {",
          "123:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,0x40ffffff);",
          "124:       } else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {",
          "125:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));",
          "126:       } else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {",
          "127:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));",
          "128:       }",
          "129:     }",
          "132:     int sel1XSum=sel1.xCoarse*32+sel1.xFine;",
          "133:     int sel2XSum=sel2.xCoarse*32+sel2.xFine;",
          "134:     int j32=j*32;",
          "135:     bool selectedNote=selectedRow && (j32>=sel1XSum && j32<=sel2XSum);",
          "136:     bool selectedIns=selectedRow && (j32+1>=sel1XSum && j32+1<=sel2XSum);",
          "137:     bool selectedVol=selectedRow && (j32+2>=sel1XSum && j32+2<=sel2XSum);",
          "138:     bool cursorNote=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==0);",
          "139:     bool cursorIns=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==1);",
          "140:     bool cursorVol=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==2);",
          "143:     sprintf(id,\"%s##PN_%d_%d\",noteName(pat->data[i][0],pat->data[i][1]),i,j);",
          "144:     if (pat->data[i][0]==0 && pat->data[i][1]==0) {",
          "145:       ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "146:     } else {",
          "147:       ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_ACTIVE]);",
          "148:     }",
          "149:     if (cursorNote) {",
          "150:       ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "151:       ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "152:       ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "153:       ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);",
          "154:       demandX=ImGui::GetCursorPosX();",
          "155:       ImGui::PopStyleColor(3);",
          "156:     } else {",
          "157:       ImGui::Selectable(id,selectedNote,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);",
          "158:     }",
          "159:     if (ImGui::IsItemClicked()) {",
          "160:       startSelection(j,0,i);",
          "161:     }",
          "162:     if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "163:       updateSelection(j,0,i);",
          "164:     }",
          "165:     ImGui::PopStyleColor();",
          "168:     if (!e->song.chanCollapse[j]) {",
          "170:       if (pat->data[i][2]==-1) {",
          "171:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "172:         sprintf(id,\"..##PI_%d_%d\",i,j);",
          "173:       } else {",
          "174:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INS]);",
          "175:         sprintf(id,\"%.2X##PI_%d_%d\",pat->data[i][2],i,j);",
          "176:       }",
          "177:       ImGui::SameLine(0.0f,0.0f);",
          "178:       if (cursorIns) {",
          "179:         ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "180:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "181:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "182:         ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "183:         demandX=ImGui::GetCursorPosX();",
          "184:         ImGui::PopStyleColor(3);",
          "185:       } else {",
          "186:         ImGui::Selectable(id,selectedIns,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "187:       }",
          "188:       if (ImGui::IsItemClicked()) {",
          "189:         startSelection(j,1,i);",
          "190:       }",
          "191:       if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "192:         updateSelection(j,1,i);",
          "193:       }",
          "194:       ImGui::PopStyleColor();",
          "197:       if (pat->data[i][3]==-1) {",
          "198:         sprintf(id,\"..##PV_%d_%d\",i,j);",
          "199:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "200:       } else {",
          "201:         int volColor=(pat->data[i][3]*127)/chanVolMax;",
          "202:         if (volColor>127) volColor=127;",
          "203:         if (volColor<0) volColor=0;",
          "204:         sprintf(id,\"%.2X##PV_%d_%d\",pat->data[i][3],i,j);",
          "205:         ImGui::PushStyleColor(ImGuiCol_Text,volColors[volColor]);",
          "206:       }",
          "207:       ImGui::SameLine(0.0f,0.0f);",
          "208:       if (cursorVol) {",
          "209:         ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "210:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "211:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "212:         ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "213:         demandX=ImGui::GetCursorPosX();",
          "214:         ImGui::PopStyleColor(3);",
          "215:       } else {",
          "216:         ImGui::Selectable(id,selectedVol,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "217:       }",
          "218:       if (ImGui::IsItemClicked()) {",
          "219:         startSelection(j,2,i);",
          "220:       }",
          "221:       if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "222:         updateSelection(j,2,i);",
          "223:       }",
          "224:       ImGui::PopStyleColor();",
          "227:       for (int k=0; k<e->song.pat[j].effectRows; k++) {",
          "228:         int index=4+(k<<1);",
          "229:         bool selectedEffect=selectedRow && (j32+index-1>=sel1XSum && j32+index-1<=sel2XSum);",
          "230:         bool selectedEffectVal=selectedRow && (j32+index>=sel1XSum && j32+index<=sel2XSum);",
          "231:         bool cursorEffect=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==index-1);",
          "232:         bool cursorEffectVal=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==index);",
          "235:         if (pat->data[i][index]==-1) {",
          "236:           sprintf(id,\"..##PE%d_%d_%d\",k,i,j);",
          "237:           ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_INACTIVE]);",
          "238:         } else {",
          "239:           sprintf(id,\"%.2X##PE%d_%d_%d\",pat->data[i][index],k,i,j);",
          "240:           if (pat->data[i][index]<0x10) {",
          "241:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[pat->data[i][index]]]);",
          "242:           } else if (pat->data[i][index]<0x20) {",
          "243:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "244:           } else if (pat->data[i][index]<0x30) {",
          "245:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "246:           } else if (pat->data[i][index]<0x48) {",
          "247:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "248:           } else if (pat->data[i][index]<0xc0) {",
          "249:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "250:           } else if (pat->data[i][index]<0xd0) {",
          "251:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "252:           } else if (pat->data[i][index]<0xe0) {",
          "253:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "254:           } else if (pat->data[i][index]<0xf0) {",
          "255:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
          "256:           } else {",
          "257:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "258:           }",
          "259:         }",
          "260:         ImGui::SameLine(0.0f,0.0f);",
          "261:         if (cursorEffect) {",
          "262:           ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "263:           ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "264:           ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "265:           ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "266:           demandX=ImGui::GetCursorPosX();",
          "267:           ImGui::PopStyleColor(3);",
          "268:         } else {",
          "269:           ImGui::Selectable(id,selectedEffect,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "270:         }",
          "271:         if (ImGui::IsItemClicked()) {",
          "272:           startSelection(j,index-1,i);",
          "273:         }",
          "274:         if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "275:           updateSelection(j,index-1,i);",
          "276:         }",
          "279:         if (pat->data[i][index+1]==-1) {",
          "280:           sprintf(id,\"..##PF%d_%d_%d\",k,i,j);",
          "281:         } else {",
          "282:           sprintf(id,\"%.2X##PF%d_%d_%d\",pat->data[i][index+1],k,i,j);",
          "283:         }",
          "284:         ImGui::SameLine(0.0f,0.0f);",
          "285:         if (cursorEffectVal) {",
          "286:           ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);",
          "287:           ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);",
          "288:           ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);",
          "289:           ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "290:           demandX=ImGui::GetCursorPosX();",
          "291:           ImGui::PopStyleColor(3);",
          "292:         } else {",
          "293:           ImGui::Selectable(id,selectedEffectVal,ImGuiSelectableFlags_NoPadWithHalfSpacing,twoChars);",
          "294:         }",
          "295:         if (ImGui::IsItemClicked()) {",
          "296:           startSelection(j,index,i);",
          "297:         }",
          "298:         if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem)) {",
          "299:           updateSelection(j,index,i);",
          "300:         }",
          "301:         ImGui::PopStyleColor();",
          "302:       }",
          "303:     }",
          "304:   }",
          "305:   ImGui::TableNextColumn();",
          "306:   patChanX[chans]=ImGui::GetCursorPosX();",
          "307: }",
          "309: void FurnaceGUI::drawPattern() {",
          "310:   if (nextWindow==GUI_WINDOW_PATTERN) {",
          "311:     patternOpen=true;",
          "312:     ImGui::SetNextWindowFocus();",
          "313:     nextWindow=GUI_WINDOW_NOTHING;",
          "314:   }",
          "315:   if (!patternOpen) return;",
          "316:   if (e->isPlaying() && followPattern) cursor.y=oldRow;",
          "317:   demandX=0;",
          "318:   sel1=selStart;",
          "319:   sel2=selEnd;",
          "320:   if (sel2.y<sel1.y) {",
          "321:     sel2.y^=sel1.y;",
          "322:     sel1.y^=sel2.y;",
          "323:     sel2.y^=sel1.y;",
          "324:   }",
          "325:   if (sel2.xCoarse<sel1.xCoarse) {",
          "326:     sel2.xCoarse^=sel1.xCoarse;",
          "327:     sel1.xCoarse^=sel2.xCoarse;",
          "328:     sel2.xCoarse^=sel1.xCoarse;",
          "330:     sel2.xFine^=sel1.xFine;",
          "331:     sel1.xFine^=sel2.xFine;",
          "332:     sel2.xFine^=sel1.xFine;",
          "333:   } else if (sel2.xCoarse==sel1.xCoarse && sel2.xFine<sel1.xFine) {",
          "334:     sel2.xFine^=sel1.xFine;",
          "335:     sel1.xFine^=sel2.xFine;",
          "336:     sel2.xFine^=sel1.xFine;",
          "337:   }",
          "338:   ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding,ImVec2(0.0f,0.0f));",
          "339:   if (ImGui::Begin(\"Pattern\",&patternOpen)) {",
          "341:     patWindowPos=ImGui::GetWindowPos();",
          "342:     patWindowSize=ImGui::GetWindowSize();",
          "344:     ImGui::PushFont(patFont);",
          "345:     int ord=e->isPlaying()?oldOrder:e->getOrder();",
          "346:     oldOrder=e->getOrder();",
          "347:     int chans=e->getTotalChannelCount();",
          "348:     int displayChans=0;",
          "349:     for (int i=0; i<chans; i++) {",
          "350:       if (e->song.chanShow[i]) displayChans++;",
          "351:     }",
          "352:     ImGui::PushStyleVar(ImGuiStyleVar_CellPadding,ImVec2(0.0f,0.0f));",
          "353:     ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_SELECTION]);",
          "354:     ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_SELECTION_HOVER]);",
          "355:     ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_SELECTION_ACTIVE]);",
          "356:     if (ImGui::BeginTable(\"PatternView\",displayChans+2,ImGuiTableFlags_BordersInnerV|ImGuiTableFlags_ScrollX|ImGuiTableFlags_ScrollY|ImGuiTableFlags_NoPadInnerX)) {",
          "357:       ImGui::TableSetupColumn(\"pos\",ImGuiTableColumnFlags_WidthFixed);",
          "358:       char chanID[2048];",
          "359:       float lineHeight=(ImGui::GetTextLineHeight()+2*dpiScale);",
          "360:       int curRow=e->getRow();",
          "361:       if (e->isPlaying() && followPattern) updateScroll(curRow);",
          "362:       if (nextScroll>-0.5f) {",
          "363:         ImGui::SetScrollY(nextScroll);",
          "364:         nextScroll=-1.0f;",
          "365:         nextAddScroll=0.0f;",
          "366:       }",
          "367:       if (nextAddScroll!=0.0f) {",
          "368:         ImGui::SetScrollY(ImGui::GetScrollY()+nextAddScroll);",
          "369:         nextScroll=-1.0f;",
          "370:         nextAddScroll=0.0f;",
          "371:       }",
          "372:       ImGui::TableSetupScrollFreeze(1,1);",
          "373:       for (int i=0; i<chans; i++) {",
          "374:         if (!e->song.chanShow[i]) continue;",
          "375:         ImGui::TableSetupColumn(fmt::sprintf(\"c%d\",i).c_str(),ImGuiTableColumnFlags_WidthFixed);",
          "376:       }",
          "377:       ImGui::TableNextRow();",
          "378:       ImGui::TableNextColumn();",
          "379:       if (ImGui::Selectable(extraChannelButtons?\" --##ExtraChannelButtons\":\" ++##ExtraChannelButtons\",false,ImGuiSelectableFlags_NoPadWithHalfSpacing,ImVec2(0.0f,lineHeight+1.0f*dpiScale))) {",
          "380:         extraChannelButtons=!extraChannelButtons;",
          "381:       }",
          "382:       if (ImGui::IsItemClicked(ImGuiMouseButton_Right)) {",
          "383:         fancyPattern=!fancyPattern;",
          "384:         e->enableCommandStream(fancyPattern);",
          "385:         e->getCommandStream(cmdStream);",
          "386:         cmdStream.clear();",
          "387:       }",
          "388:       for (int i=0; i<chans; i++) {",
          "389:         if (!e->song.chanShow[i]) continue;",
          "390:         ImGui::TableNextColumn();",
          "391:         bool displayTooltip=false;",
          "392:         if (e->song.chanCollapse[i]) {",
          "393:           const char* chName=e->getChannelShortName(i);",
          "394:           if (strlen(chName)>3) {",
          "395:             snprintf(chanID,2048,\"...##_CH%d\",i);",
          "396:           } else {",
          "397:             snprintf(chanID,2048,\"%s##_CH%d\",chName,i);",
          "398:           }",
          "399:           displayTooltip=true;",
          "400:         } else {",
          "401:           const char* chName=e->getChannelName(i);",
          "402:           size_t chNameLimit=6+4*e->song.pat[i].effectRows;",
          "403:           if (strlen(chName)>chNameLimit) {",
          "404:             String shortChName=chName;",
          "405:             shortChName.resize(chNameLimit-3);",
          "406:             shortChName+=\"...\";",
          "407:             snprintf(chanID,2048,\" %s##_CH%d\",shortChName.c_str(),i);",
          "408:             displayTooltip=true;",
          "409:           } else {",
          "410:             snprintf(chanID,2048,\" %s##_CH%d\",chName,i);",
          "411:           }",
          "412:         }",
          "413:         bool muted=e->isChannelMuted(i);",
          "414:         ImVec4 chanHead=muted?uiColors[GUI_COLOR_CHANNEL_MUTED]:uiColors[GUI_COLOR_CHANNEL_FM+e->getChannelType(i)];",
          "415:         ImVec4 chanHeadActive=chanHead;",
          "416:         ImVec4 chanHeadHover=chanHead;",
          "417:         if (e->keyHit[i]) {",
          "418:           keyHit[i]=0.2;",
          "419:           e->keyHit[i]=false;",
          "420:         }",
          "421:         chanHead.x*=0.25+keyHit[i]; chanHead.y*=0.25+keyHit[i]; chanHead.z*=0.25+keyHit[i];",
          "422:         chanHeadActive.x*=0.8; chanHeadActive.y*=0.8; chanHeadActive.z*=0.8;",
          "423:         chanHeadHover.x*=0.4+keyHit[i]; chanHeadHover.y*=0.4+keyHit[i]; chanHeadHover.z*=0.4+keyHit[i];",
          "424:         keyHit[i]-=0.02;",
          "425:         if (keyHit[i]<0) keyHit[i]=0;",
          "426:         ImGui::PushStyleColor(ImGuiCol_Header,chanHead);",
          "427:         ImGui::PushStyleColor(ImGuiCol_HeaderActive,chanHeadActive);",
          "428:         ImGui::PushStyleColor(ImGuiCol_HeaderHovered,chanHeadHover);",
          "430:         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg,ImGui::GetColorU32(chanHead));",
          "431:         if (muted) ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_CHANNEL_MUTED]);",
          "432:         ImGui::Selectable(chanID,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,ImVec2(0.0f,lineHeight+1.0f*dpiScale));",
          "433:         if (displayTooltip && ImGui::IsItemHovered()) {",
          "434:           ImGui::SetTooltip(\"%s\",e->getChannelName(i));",
          "435:         }",
          "436:         if (ImGui::IsItemClicked(ImGuiMouseButton_Left)) {",
          "437:           if (settings.soloAction!=1 && soloTimeout>0 && soloChan==i) {",
          "438:             e->toggleSolo(i);",
          "439:             soloTimeout=0;",
          "440:           } else {",
          "441:             e->toggleMute(i);",
          "442:             soloTimeout=20;",
          "443:             soloChan=i;",
          "444:           }",
          "445:         }",
          "446:         if (muted) ImGui::PopStyleColor();",
          "447:         ImGui::PopStyleColor(3);",
          "448:         if (settings.soloAction!=2) if (ImGui::IsItemClicked(ImGuiMouseButton_Right)) {",
          "449:           e->toggleSolo(i);",
          "450:         }",
          "451:         if (extraChannelButtons) {",
          "452:           snprintf(chanID,2048,\"%c##_HCH%d\",e->song.chanCollapse[i]?'+':'-',i);",
          "453:           ImGui::SetCursorPosX(ImGui::GetCursorPosX()+4.0f*dpiScale);",
          "454:           if (ImGui::SmallButton(chanID)) {",
          "455:             e->song.chanCollapse[i]=!e->song.chanCollapse[i];",
          "456:           }",
          "457:           if (!e->song.chanCollapse[i]) {",
          "458:             ImGui::SameLine();",
          "459:             snprintf(chanID,2048,\"<##_LCH%d\",i);",
          "460:             ImGui::BeginDisabled(e->song.pat[i].effectRows<=1);",
          "461:             if (ImGui::SmallButton(chanID)) {",
          "462:               e->song.pat[i].effectRows--;",
          "463:               if (e->song.pat[i].effectRows<1) e->song.pat[i].effectRows=1;",
          "464:             }",
          "465:             ImGui::EndDisabled();",
          "466:             ImGui::SameLine();",
          "467:             ImGui::BeginDisabled(e->song.pat[i].effectRows>=8);",
          "468:             snprintf(chanID,2048,\">##_RCH%d\",i);",
          "469:             if (ImGui::SmallButton(chanID)) {",
          "470:               e->song.pat[i].effectRows++;",
          "471:               if (e->song.pat[i].effectRows>8) e->song.pat[i].effectRows=8;",
          "472:             }",
          "473:             ImGui::EndDisabled();",
          "474:           }",
          "475:           ImGui::Spacing();",
          "476:         }",
          "477:       }",
          "478:       ImGui::TableNextColumn();",
          "479:       if (e->hasExtValue()) {",
          "480:         ImGui::TextColored(uiColors[GUI_COLOR_EE_VALUE],\" %.2X\",e->getExtValue());",
          "481:       }",
          "482:       float oneCharSize=ImGui::CalcTextSize(\"A\").x;",
          "483:       threeChars=ImVec2(oneCharSize*3.0f,lineHeight);",
          "484:       twoChars=ImVec2(oneCharSize*2.0f,lineHeight);",
          "486:       dummyRows=(ImGui::GetWindowSize().y/lineHeight)/2;",
          "489:       ImGui::BeginDisabled();",
          "490:       if (settings.viewPrevPattern) {",
          "491:         for (int i=0; i<dummyRows-1; i++) {",
          "492:           patternRow(e->song.patLen+i-dummyRows+1,e->isPlaying(),lineHeight,chans,ord-1);",
          "493:         }",
          "494:       } else {",
          "495:         for (int i=0; i<dummyRows-1; i++) {",
          "496:           ImGui::TableNextRow(0,lineHeight);",
          "497:           ImGui::TableNextColumn();",
          "498:         }",
          "499:       }",
          "500:       ImGui::EndDisabled();",
          "502:       for (int i=0; i<e->song.patLen; i++) {",
          "503:         patternRow(i,e->isPlaying(),lineHeight,chans,ord);",
          "504:       }",
          "506:       ImGui::BeginDisabled();",
          "507:       if (settings.viewPrevPattern) {",
          "508:         for (int i=0; i<=dummyRows; i++) {",
          "509:           patternRow(i,e->isPlaying(),lineHeight,chans,ord+1);",
          "510:         }",
          "511:       } else {",
          "512:         for (int i=0; i<=dummyRows; i++) {",
          "513:           ImGui::TableNextRow(0,lineHeight);",
          "514:           ImGui::TableNextColumn();",
          "515:         }",
          "516:       }",
          "517:       ImGui::EndDisabled();",
          "518:       oldRow=curRow;",
          "519:       if (demandScrollX) {",
          "520:         int totalDemand=demandX-ImGui::GetScrollX();",
          "521:         if (totalDemand<80) {",
          "522:           ImGui::SetScrollX(demandX-200*dpiScale);",
          "523:         } else if (totalDemand>(ImGui::GetWindowWidth()-200*dpiScale)) {",
          "524:           ImGui::SetScrollX(demandX+200*dpiScale);",
          "525:         }",
          "526:         demandScrollX=false;",
          "527:       }",
          "528:       ImGui::EndTable();",
          "529:     }",
          "531:     if (fancyPattern) { // visualizer",
          "532:       e->getCommandStream(cmdStream);",
          "533:       ImDrawList* dl=ImGui::GetWindowDrawList();",
          "534:       ImVec2 off=ImGui::GetWindowPos();",
          "537:       for (DivCommand& i: cmdStream) {",
          "538:         if (i.cmd==DIV_CMD_PITCH) continue;",
          "539:         if (i.cmd==DIV_CMD_NOTE_PORTA) continue;",
          "541:         if (i.cmd==DIV_CMD_PRE_PORTA) continue;",
          "542:         if (i.cmd==DIV_CMD_PRE_NOTE) continue;",
          "543:         if (i.cmd==DIV_CMD_INSTRUMENT) continue;",
          "544:         if (i.cmd==DIV_CMD_SAMPLE_BANK) continue;",
          "545:         if (i.cmd==DIV_CMD_GET_VOLUME) continue;",
          "546:         if (i.cmd==DIV_ALWAYS_SET_VOLUME) continue;",
          "548:         float width=patChanX[i.chan+1]-patChanX[i.chan];",
          "549:         float speedX=0.0f;",
          "550:         float speedY=-18.0f;",
          "551:         float grav=0.6f;",
          "552:         float frict=1.0f;",
          "553:         float life=255.0f;",
          "554:         float lifeSpeed=8.0f;",
          "555:         float spread=5.0f;",
          "556:         int num=3;",
          "557:         const char* partIcon=ICON_FA_MICROCHIP;",
          "558:         ImU32* color=noteGrad;",
          "560:         switch (i.cmd) {",
          "561:           case DIV_CMD_NOTE_ON:",
          "562:             partIcon=ICON_FA_ASTERISK;",
          "563:             life=64.0f;",
          "564:             lifeSpeed=2.0f;",
          "565:             break;",
          "566:           case DIV_CMD_LEGATO:",
          "567:             partIcon=ICON_FA_COG;",
          "568:             color=insGrad;",
          "569:             life=64.0f;",
          "570:             lifeSpeed=2.0f;",
          "571:             break;",
          "572:           case DIV_CMD_NOTE_OFF:",
          "573:           case DIV_CMD_NOTE_OFF_ENV:",
          "574:           case DIV_CMD_ENV_RELEASE:",
          "575:             partIcon=ICON_FA_ASTERISK;",
          "576:             speedX=0.0f;",
          "577:             speedY=0.0f;",
          "578:             grav=0.0f;",
          "579:             life=24.0f;",
          "580:             lifeSpeed=4.0f;",
          "581:             break;",
          "582:           case DIV_CMD_VOLUME: {",
          "583:             float scaledVol=(float)i.value/(float)e->getMaxVolumeChan(i.chan);",
          "584:             if (scaledVol>1.0f) scaledVol=1.0f;",
          "585:             speedY=-18.0f-(10.0f*scaledVol);",
          "586:             life=128+scaledVol*127;",
          "587:             partIcon=ICON_FA_VOLUME_UP;",
          "588:             num=12.0f*pow(scaledVol,2.0);",
          "589:             color=volGrad;",
          "590:             break;",
          "591:           }",
          "592:           case DIV_CMD_PANNING: {",
          "593:             if (i.value==0) {",
          "594:               num=0;",
          "595:               break;",
          "596:             }",
          "597:             float ratio=float(((i.value>>4)&15)-(i.value&15))/MAX(((i.value>>4)&15),(i.value&15));",
          "598:             speedX=-22.0f*sin(ratio*M_PI*0.5);",
          "599:             speedY=-22.0f*cos(ratio*M_PI*0.5);",
          "600:             spread=5.0f+fabs(sin(ratio*M_PI*0.5))*7.0f;",
          "601:             grav=0.0f;",
          "602:             frict=0.96f;",
          "603:             if (((i.value>>4)&15)==(i.value&15)) {",
          "604:               partIcon=ICON_FA_ARROWS_H;",
          "605:             } else if (ratio>0) {",
          "606:               partIcon=ICON_FA_ARROW_LEFT;",
          "607:             } else {",
          "608:               partIcon=ICON_FA_ARROW_RIGHT;",
          "609:             }",
          "610:             num=9;",
          "611:             color=panGrad;",
          "612:             break;",
          "613:           }",
          "614:           case DIV_CMD_SAMPLE_FREQ:",
          "615:             speedX=0.0f;",
          "616:             speedY=0.0f;",
          "617:             grav=0.0f;",
          "618:             frict=0.98;",
          "619:             spread=19.0f;",
          "620:             life=128.0f;",
          "621:             lifeSpeed=3.0f;",
          "622:             color=sysCmd2Grad;",
          "623:             num=10+pow(i.value,0.6);",
          "624:             break;",
          "625:           default:",
          "627:             color=sysCmd1Grad;",
          "628:             break;",
          "629:         }",
          "631:         for (int j=0; j<num; j++) {",
          "632:           particles.push_back(Particle(",
          "633:             color,",
          "634:             partIcon,",
          "635:             off.x+patChanX[i.chan]+fmod(rand(),width),",
          "636:             off.y+(ImGui::GetWindowHeight()*0.5f)+randRange(0,patFont->FontSize),",
          "637:             (speedX+randRange(-spread,spread))*0.5*dpiScale,",
          "638:             (speedY+randRange(-spread,spread))*0.5*dpiScale,",
          "639:             grav,",
          "640:             frict,",
          "641:             life-randRange(0,8),",
          "642:             lifeSpeed",
          "643:           ));",
          "644:         }",
          "645:       }",
          "648:       ImVec2 arrowPoints[7];",
          "649:       for (int i=0; i<chans; i++) {",
          "650:         DivChannelState* ch=e->getChanState(i);",
          "651:         if (ch->portaSpeed>0) {",
          "652:           ImVec4 col=uiColors[GUI_COLOR_PATTERN_EFFECT_PITCH];",
          "653:           col.w*=0.2;",
          "654:           float width=patChanX[i+1]-patChanX[i];",
          "656:           if (e->isPlaying()) {",
          "657:             particles.push_back(Particle(",
          "658:               pitchGrad,",
          "659:               (ch->portaNote<=ch->note)?ICON_FA_CHEVRON_DOWN:ICON_FA_CHEVRON_UP,",
          "660:               off.x+patChanX[i]+fmod(rand(),width),",
          "661:               off.y+fmod(rand(),MAX(1,ImGui::GetWindowHeight())),",
          "662:               0.0f,",
          "663:               (7.0f+(rand()%5)+pow(ch->portaSpeed,0.7f))*((ch->portaNote<=ch->note)?1:-1),",
          "664:               0.0f,",
          "665:               1.0f,",
          "666:               255.0f,",
          "667:               15.0f",
          "668:             ));",
          "669:           }",
          "671:           for (float j=-patChanSlideY[i]; j<ImGui::GetWindowHeight(); j+=width*0.7) {",
          "672:             ImVec2 tMin=ImVec2(off.x+patChanX[i],off.y+j);",
          "673:             ImVec2 tMax=ImVec2(off.x+patChanX[i+1],off.y+j+width*0.6);",
          "674:             if (ch->portaNote<=ch->note) {",
          "675:               arrowPoints[0]=ImLerp(tMin,tMax,ImVec2(0.1,1.0-0.8));",
          "676:               arrowPoints[1]=ImLerp(tMin,tMax,ImVec2(0.5,1.0-0.0));",
          "677:               arrowPoints[2]=ImLerp(tMin,tMax,ImVec2(0.9,1.0-0.8));",
          "678:               arrowPoints[3]=ImLerp(tMin,tMax,ImVec2(0.8,1.0-1.0));",
          "679:               arrowPoints[4]=ImLerp(tMin,tMax,ImVec2(0.5,1.0-0.37));",
          "680:               arrowPoints[5]=ImLerp(tMin,tMax,ImVec2(0.2,1.0-1.0));",
          "681:               arrowPoints[6]=arrowPoints[0];",
          "682:               dl->AddPolyline(arrowPoints,7,ImGui::GetColorU32(col),ImDrawFlags_None,5.0f*dpiScale);",
          "683:             } else {",
          "684:               arrowPoints[0]=ImLerp(tMin,tMax,ImVec2(0.1,0.8));",
          "685:               arrowPoints[1]=ImLerp(tMin,tMax,ImVec2(0.5,0.0));",
          "686:               arrowPoints[2]=ImLerp(tMin,tMax,ImVec2(0.9,0.8));",
          "687:               arrowPoints[3]=ImLerp(tMin,tMax,ImVec2(0.8,1.0));",
          "688:               arrowPoints[4]=ImLerp(tMin,tMax,ImVec2(0.5,0.37));",
          "689:               arrowPoints[5]=ImLerp(tMin,tMax,ImVec2(0.2,1.0));",
          "690:               arrowPoints[6]=arrowPoints[0];",
          "691:               dl->AddPolyline(arrowPoints,7,ImGui::GetColorU32(col),ImDrawFlags_None,5.0f*dpiScale);",
          "692:             }",
          "693:           }",
          "694:           patChanSlideY[i]+=((ch->portaNote<=ch->note)?-8:8)*dpiScale;",
          "695:           if (width>0) {",
          "696:             if (patChanSlideY[i]<0) {",
          "697:               patChanSlideY[i]=-fmod(-patChanSlideY[i],width*0.7);",
          "698:             } else {",
          "699:               patChanSlideY[i]=fmod(patChanSlideY[i],width*0.7);",
          "700:             }",
          "701:           }",
          "702:         }",
          "703:       }",
          "706:       ImDrawList* fdl=ImGui::GetForegroundDrawList();",
          "707:       for (size_t i=0; i<particles.size(); i++) {",
          "708:         Particle& part=particles[i];",
          "709:         if (part.update()) {",
          "710:           if (part.life>255) part.life=255;",
          "711:           fdl->AddText(",
          "712:             iconFont,",
          "713:             iconFont->FontSize,",
          "714:             ImVec2(part.pos.x-iconFont->FontSize*0.5,part.pos.y-iconFont->FontSize*0.5),",
          "715:             part.colors[(int)part.life],",
          "716:             part.type",
          "717:           );",
          "718:         } else {",
          "719:           particles.erase(particles.begin()+i);",
          "720:           i--;",
          "721:         }",
          "722:       }",
          "723:     }",
          "725:     ImGui::PopStyleColor(3);",
          "726:     ImGui::PopStyleVar();",
          "727:     ImGui::PopFont();",
          "728:   }",
          "729:   ImGui::PopStyleVar();",
          "730:   if (ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows)) curWindow=GUI_WINDOW_PATTERN;",
          "731:   ImGui::End();",
          "732: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e8634626d17b7e1f3854a14693d777918bfbc5f",
      "candidate_info": {
        "commit_hash": "2e8634626d17b7e1f3854a14693d777918bfbc5f",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/2e8634626d17b7e1f3854a14693d777918bfbc5f",
        "files": [
          "papers/doc/3-pattern/effects.md",
          "src/engine/dispatch.h",
          "src/engine/engine.cpp",
          "src/engine/engine.h",
          "src/engine/platform/arcade.cpp",
          "src/engine/platform/gb.cpp",
          "src/engine/platform/genesis.cpp",
          "src/engine/platform/genesisext.cpp",
          "src/engine/platform/lynx.cpp",
          "src/engine/platform/opl.cpp",
          "src/engine/platform/pce.cpp",
          "src/engine/platform/qsound.cpp",
          "src/engine/platform/saa.cpp",
          "src/engine/platform/segapcm.cpp",
          "src/engine/platform/su.cpp",
          "src/engine/platform/swan.cpp",
          "src/engine/platform/tx81z.cpp",
          "src/engine/platform/vera.cpp",
          "src/engine/platform/x1_010.cpp",
          "src/engine/platform/ym2610.cpp",
          "src/engine/platform/ym2610b.cpp",
          "src/engine/platform/ym2610bext.cpp",
          "src/engine/platform/ym2610ext.cpp",
          "src/engine/playback.cpp",
          "src/gui/effectList.cpp",
          "src/gui/gui.cpp",
          "src/gui/guiConst.cpp",
          "src/gui/guiConst.h",
          "src/gui/pattern.cpp"
        ],
        "message": "new panning effects (80/81/82)",
        "before_after_code_files": [
          "src/engine/dispatch.h||src/engine/dispatch.h",
          "src/engine/engine.cpp||src/engine/engine.cpp",
          "src/engine/engine.h||src/engine/engine.h",
          "src/engine/platform/arcade.cpp||src/engine/platform/arcade.cpp",
          "src/engine/platform/gb.cpp||src/engine/platform/gb.cpp",
          "src/engine/platform/genesis.cpp||src/engine/platform/genesis.cpp",
          "src/engine/platform/genesisext.cpp||src/engine/platform/genesisext.cpp",
          "src/engine/platform/lynx.cpp||src/engine/platform/lynx.cpp",
          "src/engine/platform/opl.cpp||src/engine/platform/opl.cpp",
          "src/engine/platform/pce.cpp||src/engine/platform/pce.cpp",
          "src/engine/platform/qsound.cpp||src/engine/platform/qsound.cpp",
          "src/engine/platform/saa.cpp||src/engine/platform/saa.cpp",
          "src/engine/platform/segapcm.cpp||src/engine/platform/segapcm.cpp",
          "src/engine/platform/su.cpp||src/engine/platform/su.cpp",
          "src/engine/platform/swan.cpp||src/engine/platform/swan.cpp",
          "src/engine/platform/tx81z.cpp||src/engine/platform/tx81z.cpp",
          "src/engine/platform/vera.cpp||src/engine/platform/vera.cpp",
          "src/engine/platform/x1_010.cpp||src/engine/platform/x1_010.cpp",
          "src/engine/platform/ym2610.cpp||src/engine/platform/ym2610.cpp",
          "src/engine/platform/ym2610b.cpp||src/engine/platform/ym2610b.cpp",
          "src/engine/platform/ym2610bext.cpp||src/engine/platform/ym2610bext.cpp",
          "src/engine/platform/ym2610ext.cpp||src/engine/platform/ym2610ext.cpp",
          "src/engine/playback.cpp||src/engine/playback.cpp",
          "src/gui/effectList.cpp||src/gui/effectList.cpp",
          "src/gui/gui.cpp||src/gui/gui.cpp",
          "src/gui/guiConst.cpp||src/gui/guiConst.cpp",
          "src/gui/guiConst.h||src/gui/guiConst.h",
          "src/gui/pattern.cpp||src/gui/pattern.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ],
          "candidate": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/engine/dispatch.h||src/engine/dispatch.h": [
          "File: src/engine/dispatch.h -> src/engine/dispatch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   DIV_CMD_GET_VOLMAX, // () -> volMax",
          "50:   DIV_CMD_NOTE_PORTA, // (target, speed) -> 2 if target reached",
          "51:   DIV_CMD_PITCH, // (pitch)",
          "53:   DIV_CMD_LEGATO, // (note)",
          "54:   DIV_CMD_PRE_PORTA, // (inPorta, isPortaOrSlide)",
          "55:   DIV_CMD_PRE_NOTE, // used in C64 (note)",
          "",
          "[Removed Lines]",
          "52:   DIV_CMD_PANNING, // (pan)",
          "",
          "[Added Lines]",
          "52:   DIV_CMD_PANNING, // (left, right)",
          "",
          "---------------"
        ],
        "src/engine/engine.cpp||src/engine/engine.cpp": [
          "File: src/engine/engine.cpp -> src/engine/engine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:       return \"0Dxx: Jump to next pattern\";",
          "70:     case 0x0f:",
          "71:       return \"0Fxx: Set speed 2\";",
          "72:     case 0xc0: case 0xc1: case 0xc2: case 0xc3:",
          "73:       return \"Cxxx: Set tick rate (hz)\";",
          "74:     case 0xe0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     case 0x80:",
          "73:       return \"80xx: Set panning (00: left; 80: center; FF: right)\";",
          "74:     case 0x81:",
          "75:       return \"81xx: Set panning (left channel)\";",
          "76:     case 0x82:",
          "77:       return \"82xx: Set panning (right channel)\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1052:   return pan*range;",
          "1053: }",
          "1055: unsigned int DivEngine::convertPanLinearToSplit(int val, unsigned char bits, int range) {",
          "1056:   if (val<0) val=0;",
          "1057:   if (val>range) val=range;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1061: int DivEngine::convertPanSplitToLinearLR(unsigned char left, unsigned char right, int range) {",
          "1062:   return convertPanSplitToLinear((left<<8)|right,8,range);",
          "1063: }",
          "",
          "---------------"
        ],
        "src/engine/engine.h||src/engine/engine.h": [
          "File: src/engine/engine.h -> src/engine/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   int delayOrder, delayRow, retrigSpeed, retrigTick;",
          "85:   int vibratoDepth, vibratoRate, vibratoPos, vibratoDir, vibratoFine;",
          "86:   int tremoloDepth, tremoloRate, tremoloPos;",
          "88:   bool doNote, legato, portaStop, keyOn, keyOff, nowYouCanStop, stopOnOff;",
          "89:   bool arpYield, delayLocked, inPorta, scheduledSlideReset, shorthandPorta, noteOnInhibit, resetArp;",
          "",
          "[Removed Lines]",
          "87:   unsigned char arp, arpStage, arpTicks;",
          "",
          "[Added Lines]",
          "87:   unsigned char arp, arpStage, arpTicks, panL, panR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     arp(0),",
          "120:     arpStage(-1),",
          "121:     arpTicks(1),",
          "122:     doNote(false),",
          "123:     legato(false),",
          "124:     portaStop(false),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     panL(255),",
          "123:     panR(255),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:     int convertPanSplitToLinear(unsigned int val, unsigned char bits, int range);",
          "480:     unsigned int convertPanLinearToSplit(int val, unsigned char bits, int range);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     int convertPanSplitToLinearLR(unsigned char left, unsigned char right, int range);",
          "",
          "---------------"
        ],
        "src/engine/platform/arcade.cpp||src/engine/platform/arcade.cpp": [
          "File: src/engine/platform/arcade.cpp -> src/engine/platform/arcade.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:       chan[c.chan].ins=c.value;",
          "544:       break;",
          "545:     case DIV_CMD_PANNING: {",
          "548:       if (isMuted[c.chan]) {",
          "549:         rWrite(chanOffs[c.chan]+ADDR_LR_FB_ALG,(chan[c.chan].state.alg&7)|(chan[c.chan].state.fb<<3));",
          "550:       } else {",
          "",
          "[Removed Lines]",
          "546:       chan[c.chan].chVolL=((c.value>>4)>0);",
          "547:       chan[c.chan].chVolR=((c.value&15)>0);",
          "",
          "[Added Lines]",
          "546:       chan[c.chan].chVolL=(c.value>0);",
          "547:       chan[c.chan].chVolR=(c.value2>0);",
          "",
          "---------------"
        ],
        "src/engine/platform/gb.cpp||src/engine/platform/gb.cpp": [
          "File: src/engine/platform/gb.cpp -> src/engine/platform/gb.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:       break;",
          "372:     case DIV_CMD_PANNING: {",
          "373:       lastPan&=~(0x11<<c.chan);",
          "377:       rWrite(0x25,procMute());",
          "378:       break;",
          "379:     }",
          "",
          "[Removed Lines]",
          "374:       if (c.value==0) c.value=0x11;",
          "375:       c.value=((c.value&15)>0)|(((c.value>>4)>0)<<4);",
          "376:       lastPan|=c.value<<c.chan;",
          "",
          "[Added Lines]",
          "374:       int pan=0;",
          "375:       if (c.value>0) pan|=0x10;",
          "376:       if (c.value2>0) pan|=0x01;",
          "377:       if (pan==0) pan=0x11;",
          "378:       lastPan|=pan<<c.chan;",
          "",
          "---------------"
        ],
        "src/engine/platform/genesis.cpp||src/engine/platform/genesis.cpp": [
          "File: src/engine/platform/genesis.cpp -> src/engine/platform/genesis.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:       chan[c.chan].ins=c.value;",
          "634:       break;",
          "635:     case DIV_CMD_PANNING: {",
          "637:         chan[c.chan].pan=3;",
          "638:       } else {",
          "640:       }",
          "641:       rWrite(chanOffs[c.chan]+ADDR_LRAF,(isMuted[c.chan]?0:(chan[c.chan].pan<<6))|(chan[c.chan].state.fms&7)|((chan[c.chan].state.ams&3)<<4));",
          "642:       break;",
          "",
          "[Removed Lines]",
          "636:       if (c.value==0) {",
          "639:         chan[c.chan].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "636:       if (c.value==0 && c.value2==0) {",
          "639:         chan[c.chan].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/genesisext.cpp||src/engine/platform/genesisext.cpp": [
          "File: src/engine/platform/genesisext.cpp -> src/engine/platform/genesisext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:       opChan[ch].ins=c.value;",
          "108:       break;",
          "109:     case DIV_CMD_PANNING: {",
          "111:         opChan[ch].pan=3;",
          "112:       } else {",
          "114:       }",
          "115:       if (parent->song.sharedExtStat) {",
          "116:         for (int i=0; i<4; i++) {",
          "",
          "[Removed Lines]",
          "110:       if (c.value==0) {",
          "113:         opChan[ch].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "110:       if (c.value==0 && c.value2==0) {",
          "113:         opChan[ch].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/lynx.cpp||src/engine/platform/lynx.cpp": [
          "File: src/engine/platform/lynx.cpp -> src/engine/platform/lynx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:       }",
          "260:       break;",
          "261:     case DIV_CMD_PANNING:",
          "263:       WRITE_ATTEN(c.chan,chan[c.chan].pan);",
          "264:       break;",
          "265:     case DIV_CMD_GET_VOLUME:",
          "",
          "[Removed Lines]",
          "262:       chan[c.chan].pan=c.value;",
          "",
          "[Added Lines]",
          "262:       chan[c.chan].pan=(c.value&0xf0)|(c.value2>>4);",
          "",
          "---------------"
        ],
        "src/engine/platform/opl.cpp||src/engine/platform/opl.cpp": [
          "File: src/engine/platform/opl.cpp -> src/engine/platform/opl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:       break;",
          "681:     case DIV_CMD_PANNING: {",
          "682:       if (oplType!=3) break;",
          "684:         chan[c.chan].pan=3;",
          "685:       } else {",
          "687:       }",
          "688:       int ops=(slots[3][c.chan]!=255 && chan[c.chan].state.ops==4 && oplType==3)?4:2;",
          "689:       if (isMuted[c.chan]) {",
          "",
          "[Removed Lines]",
          "683:       if (c.value==0) {",
          "686:         chan[c.chan].pan=(((c.value&15)>0)<<1)|((c.value>>4)>0);",
          "",
          "[Added Lines]",
          "683:       if (c.value==0 && c.value2==0) {",
          "686:         chan[c.chan].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/pce.cpp||src/engine/platform/pce.cpp": [
          "File: src/engine/platform/pce.cpp -> src/engine/platform/pce.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:       }",
          "425:       break;",
          "426:     case DIV_CMD_PANNING: {",
          "428:       chWrite(c.chan,0x05,isMuted[c.chan]?0:chan[c.chan].pan);",
          "429:       break;",
          "430:     }",
          "",
          "[Removed Lines]",
          "427:       chan[c.chan].pan=c.value;",
          "",
          "[Added Lines]",
          "427:       chan[c.chan].pan=(c.value&0xf0)|(c.value2>>4);",
          "",
          "---------------"
        ],
        "src/engine/platform/qsound.cpp||src/engine/platform/qsound.cpp": [
          "File: src/engine/platform/qsound.cpp -> src/engine/platform/qsound.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:       return chan[c.chan].outVol;",
          "442:       break;",
          "443:     case DIV_CMD_PANNING:",
          "445:       immWrite(Q1_PAN+c.chan,chan[c.chan].panning+0x110+(chan[c.chan].surround?0:0x30));",
          "446:       break;",
          "447:     case DIV_CMD_QSOUND_ECHO_LEVEL:",
          "",
          "[Removed Lines]",
          "444:       chan[c.chan].panning=parent->convertPanSplitToLinear(c.value,4,32);",
          "",
          "[Added Lines]",
          "444:       chan[c.chan].panning=parent->convertPanSplitToLinearLR(c.value,c.value2,32);",
          "",
          "---------------"
        ],
        "src/engine/platform/saa.cpp||src/engine/platform/saa.cpp": [
          "File: src/engine/platform/saa.cpp -> src/engine/platform/saa.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:       break;",
          "332:     }",
          "333:     case DIV_CMD_PANNING:",
          "335:       if (isMuted[c.chan]) {",
          "336:         rWrite(c.chan,0);",
          "337:       } else {",
          "",
          "[Removed Lines]",
          "334:       chan[c.chan].pan=c.value;",
          "",
          "[Added Lines]",
          "334:       chan[c.chan].pan=(c.value&0xf0)|(c.value2>>4);",
          "",
          "---------------"
        ],
        "src/engine/platform/segapcm.cpp||src/engine/platform/segapcm.cpp": [
          "File: src/engine/platform/segapcm.cpp -> src/engine/platform/segapcm.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:       chan[c.chan].ins=c.value;",
          "269:       break;",
          "270:     case DIV_CMD_PANNING: {",
          "273:       if (dumpWrites) {",
          "274:         addWrite(0x10002+(c.chan<<3),chan[c.chan].chVolL);",
          "275:         addWrite(0x10003+(c.chan<<3),chan[c.chan].chVolR);",
          "",
          "[Removed Lines]",
          "271:       chan[c.chan].chVolL=(c.value>>4)|(((c.value>>4)>>1)<<4);",
          "272:       chan[c.chan].chVolR=(c.value&15)|(((c.value&15)>>1)<<4);",
          "",
          "[Added Lines]",
          "271:       chan[c.chan].chVolL=c.value>>1;",
          "272:       chan[c.chan].chVolR=c.value2>>1;",
          "",
          "---------------"
        ],
        "src/engine/platform/su.cpp||src/engine/platform/su.cpp": [
          "File: src/engine/platform/su.cpp -> src/engine/platform/su.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:       break;",
          "271:     }",
          "272:     case DIV_CMD_PANNING: {",
          "274:       chWrite(c.chan,0x03,chan[c.chan].pan);",
          "275:       break;",
          "276:     }",
          "",
          "[Removed Lines]",
          "273:       chan[c.chan].pan=parent->convertPanSplitToLinear(c.value,4,254)-127;",
          "",
          "[Added Lines]",
          "273:       chan[c.chan].pan=parent->convertPanSplitToLinearLR(c.value,c.value2,254)-127;",
          "",
          "---------------"
        ],
        "src/engine/platform/swan.cpp||src/engine/platform/swan.cpp": [
          "File: src/engine/platform/swan.cpp -> src/engine/platform/swan.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:       }",
          "413:       break;",
          "414:     case DIV_CMD_PANNING: {",
          "416:       calcAndWriteOutVol(c.chan,chan[c.chan].std.vol.will?chan[c.chan].std.vol.val:15);",
          "417:       break;",
          "418:     }",
          "",
          "[Removed Lines]",
          "415:       chan[c.chan].pan=c.value;",
          "",
          "[Added Lines]",
          "415:       chan[c.chan].pan=(c.value&0xf0)|(c.value2>>4);",
          "",
          "---------------"
        ],
        "src/engine/platform/tx81z.cpp||src/engine/platform/tx81z.cpp": [
          "File: src/engine/platform/tx81z.cpp -> src/engine/platform/tx81z.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "525:       chan[c.chan].ins=c.value;",
          "526:       break;",
          "527:     case DIV_CMD_PANNING: {",
          "530:       chan[c.chan].freqChanged=true;",
          "532:       if (isMuted[c.chan]) {",
          "",
          "[Removed Lines]",
          "528:       chan[c.chan].chVolL=((c.value>>4)>0);",
          "529:       chan[c.chan].chVolR=((c.value&15)>0);",
          "",
          "[Added Lines]",
          "528:       chan[c.chan].chVolL=(c.value>0);",
          "529:       chan[c.chan].chVolR=(c.value2>0);",
          "",
          "---------------"
        ],
        "src/engine/platform/vera.cpp||src/engine/platform/vera.cpp": [
          "File: src/engine/platform/vera.cpp -> src/engine/platform/vera.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:       break;",
          "346:     case DIV_CMD_PANNING: {",
          "347:       tmp=0;",
          "350:       chan[c.chan].pan=tmp&3;",
          "351:       if (c.chan<16) {",
          "352:         rWriteHi(c.chan,2,isMuted[c.chan]?0:chan[c.chan].pan);",
          "",
          "[Removed Lines]",
          "348:       tmp|=(c.value&0x10)?1:0;",
          "349:       tmp|=(c.value&0x01)?2:0;",
          "",
          "[Added Lines]",
          "348:       tmp|=(c.value>0)?1:0;",
          "349:       tmp|=(c.value2>0)?2:0;",
          "",
          "---------------"
        ],
        "src/engine/platform/x1_010.cpp||src/engine/platform/x1_010.cpp": [
          "File: src/engine/platform/x1_010.cpp -> src/engine/platform/x1_010.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:       break;",
          "695:     case DIV_CMD_PANNING: {",
          "696:       if (!stereo) break;",
          "699:         if (!isMuted[c.chan]) {",
          "700:           chan[c.chan].envChanged=true;",
          "701:         }",
          "",
          "[Removed Lines]",
          "697:       if (chan[c.chan].pan!=c.value) {",
          "698:         chan[c.chan].pan=c.value;",
          "",
          "[Added Lines]",
          "697:       unsigned char newPan=(c.value&0xf0)|(c.value2>>4);",
          "698:       if (chan[c.chan].pan!=newPan) {",
          "699:         chan[c.chan].pan=newPan;",
          "",
          "---------------"
        ],
        "src/engine/platform/ym2610.cpp||src/engine/platform/ym2610.cpp": [
          "File: src/engine/platform/ym2610.cpp -> src/engine/platform/ym2610.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:       chan[c.chan].ins=c.value;",
          "840:       break;",
          "841:     case DIV_CMD_PANNING: {",
          "843:         chan[c.chan].pan=3;",
          "844:       } else {",
          "846:       }",
          "847:       if (c.chan>12) {",
          "848:         immWrite(0x11,isMuted[c.chan]?0:(chan[c.chan].pan<<6));",
          "",
          "[Removed Lines]",
          "842:       if (c.value==0) {",
          "845:         chan[c.chan].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "842:       if (c.value==0 && c.value2==0) {",
          "845:         chan[c.chan].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/ym2610b.cpp||src/engine/platform/ym2610b.cpp": [
          "File: src/engine/platform/ym2610b.cpp -> src/engine/platform/ym2610b.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:       chan[c.chan].ins=c.value;",
          "903:       break;",
          "904:     case DIV_CMD_PANNING: {",
          "906:         chan[c.chan].pan=3;",
          "907:       } else {",
          "909:       }",
          "910:       if (c.chan>14) {",
          "911:         immWrite(0x11,isMuted[c.chan]?0:(chan[c.chan].pan<<6));",
          "",
          "[Removed Lines]",
          "905:       if (c.value==0) {",
          "908:         chan[c.chan].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "905:       if (c.value==0 && c.value2==0) {",
          "908:         chan[c.chan].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/ym2610bext.cpp||src/engine/platform/ym2610bext.cpp": [
          "File: src/engine/platform/ym2610bext.cpp -> src/engine/platform/ym2610bext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       opChan[ch].ins=c.value;",
          "100:       break;",
          "101:     case DIV_CMD_PANNING: {",
          "103:         opChan[ch].pan=3;",
          "104:       } else {",
          "106:       }",
          "107:       DivInstrument* ins=parent->getIns(opChan[ch].ins,DIV_INS_FM);",
          "108:       if (parent->song.sharedExtStat) {",
          "",
          "[Removed Lines]",
          "102:       if (c.value==0) {",
          "105:         opChan[ch].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "102:       if (c.value==0 && c.value2==0) {",
          "105:         opChan[ch].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/platform/ym2610ext.cpp||src/engine/platform/ym2610ext.cpp": [
          "File: src/engine/platform/ym2610ext.cpp -> src/engine/platform/ym2610ext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       opChan[ch].ins=c.value;",
          "100:       break;",
          "101:     case DIV_CMD_PANNING: {",
          "103:         opChan[ch].pan=3;",
          "104:       } else {",
          "106:       }",
          "107:       DivInstrument* ins=parent->getIns(opChan[ch].ins,DIV_INS_FM);",
          "108:       if (parent->song.sharedExtStat) {",
          "",
          "[Removed Lines]",
          "102:       if (c.value==0) {",
          "105:         opChan[ch].pan=((c.value&15)>0)|(((c.value>>4)>0)<<1);",
          "",
          "[Added Lines]",
          "102:       if (c.value==0 && c.value2==0) {",
          "105:         opChan[ch].pan=(c.value2>0)|((c.value>0)<<1);",
          "",
          "---------------"
        ],
        "src/engine/playback.cpp||src/engine/playback.cpp": [
          "File: src/engine/playback.cpp -> src/engine/playback.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1026:   short lastSlide=-1;",
          "1027:   bool calledPorta=false;",
          "1030:   for (int j=0; j<song.pat[i].effectCols; j++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1028:   bool panChanged=false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1053:           changePos=effectVal;",
          "1054:         }",
          "1055:         break;",
          "1058:         break;",
          "1059:       case 0x01: // ramp up",
          "1060:         if (song.ignoreDuplicateSlides && (lastSlide==0x01 || lastSlide==0x1337)) break;",
          "",
          "[Removed Lines]",
          "1056:       case 0x08: // panning",
          "1057:         dispatchCmd(DivCommand(DIV_CMD_PANNING,i,effectVal));",
          "",
          "[Added Lines]",
          "1057:       case 0x08: // panning (split 4-bit)",
          "1058:         chan[i].panL=(effectVal>>4)|(effectVal&0xf0);",
          "1059:         chan[i].panR=(effectVal&15)|((effectVal&15)<<4);",
          "1060:         panChanged=true;",
          "1061:         break;",
          "1062:       case 0x80: { // panning (linear)",
          "1063:         unsigned short pan=convertPanLinearToSplit(effectVal,8,255);",
          "1064:         chan[i].panL=pan>>8;",
          "1065:         chan[i].panR=pan&0xff;",
          "1066:         panChanged=true;",
          "1067:         break;",
          "1068:       }",
          "1069:       case 0x81: // panning left (split 8-bit)",
          "1070:         chan[i].panL=effectVal;",
          "1071:         panChanged=true;",
          "1072:         break;",
          "1073:       case 0x82: // panning right (split 8-bit)",
          "1074:         chan[i].panR=effectVal;",
          "1075:         panChanged=true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1308:     }",
          "1309:   }",
          "1311:   if (insChanged && (chan[i].inPorta || calledPorta) && song.newInsTriggersInPorta) {",
          "1312:     dispatchCmd(DivCommand(DIV_CMD_NOTE_ON,i,DIV_NOTE_NULL));",
          "1313:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1329:   if (panChanged) {",
          "1330:     dispatchCmd(DivCommand(DIV_CMD_PANNING,i,chan[i].panL,chan[i].panR));",
          "1331:   }",
          "",
          "---------------"
        ],
        "src/gui/effectList.cpp||src/gui/effectList.cpp": [
          "File: src/gui/effectList.cpp -> src/gui/effectList.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:           ImGui::TableNextRow();",
          "33:           ImGui::TableNextColumn();",
          "34:           ImGui::PushFont(patFont);",
          "56:           ImGui::Text(\"%c%c%c%c\",name[0],name[1],name[2],name[3]);",
          "57:           ImGui::PopStyleColor();",
          "58:           ImGui::PopFont();",
          "",
          "[Removed Lines]",
          "35:           if (i<0x10) {",
          "36:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[i]]);",
          "37:             } else if (i<0x20) {",
          "38:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "39:             } else if (i<0x30) {",
          "40:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "41:             } else if (i<0x48) {",
          "42:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "43:             } else if (i<0x90) {",
          "44:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "45:             } else if (i<0xa0) {",
          "46:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
          "47:             } else if (i<0xc0) {",
          "48:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "49:             } else if (i<0xd0) {",
          "50:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "51:             } else if (i<0xe0) {",
          "52:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "53:             } else {",
          "54:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[i-0xe0]]);",
          "55:             }",
          "",
          "[Added Lines]",
          "35:           ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[i]]);",
          "",
          "---------------"
        ],
        "src/gui/gui.cpp||src/gui/gui.cpp": [
          "File: src/gui/gui.cpp -> src/gui/gui.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2000:     } else {",
          "2001:       const unsigned char data=latchEffect;",
          "2002:       snprintf(id,63,\"%.2x##LatchFX\",data);",
          "2024:     }",
          "2026:     if (ImGui::Selectable(id,latchTarget==3,ImGuiSelectableFlags_DontClosePopups)) {",
          "",
          "[Removed Lines]",
          "2003:       if (data<0x10) {",
          "2004:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
          "2005:       } else if (data<0x20) {",
          "2006:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "2007:       } else if (data<0x30) {",
          "2008:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "2009:       } else if (data<0x48) {",
          "2010:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "2011:       } else if (data<0x90) {",
          "2012:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "2013:       } else if (data<0xa0) {",
          "2014:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
          "2015:       } else if (data<0xc0) {",
          "2016:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "2017:       } else if (data<0xd0) {",
          "2018:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "2019:       } else if (data<0xe0) {",
          "2020:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "2021:       } else {",
          "2022:         ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[data-0xe0]]);",
          "2023:       }",
          "",
          "[Added Lines]",
          "2003:       ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
          "",
          "---------------"
        ],
        "src/gui/guiConst.cpp||src/gui/guiConst.cpp": [
          "File: src/gui/guiConst.cpp -> src/gui/guiConst.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   \"best possible\"",
          "143: };",
          "146:   GUI_COLOR_PATTERN_EFFECT_MISC, // 00",
          "147:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 01",
          "148:   GUI_COLOR_PATTERN_EFFECT_PITCH, // 02",
          "",
          "[Removed Lines]",
          "145: const FurnaceGUIColors fxColors[16]={",
          "",
          "[Added Lines]",
          "145: const FurnaceGUIColors fxColors[256]={",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   GUI_COLOR_PATTERN_EFFECT_SONG, // 0D",
          "160:   GUI_COLOR_PATTERN_EFFECT_INVALID, // 0E",
          "161:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 0F",
          "165:   GUI_COLOR_PATTERN_EFFECT_MISC, // E0",
          "166:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E1",
          "167:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E2",
          "",
          "[Removed Lines]",
          "162: };",
          "164: const FurnaceGUIColors extFxColors[32]={",
          "",
          "[Added Lines]",
          "164:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "165:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "166:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "167:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "168:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "169:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "170:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "171:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "172:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "173:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "174:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "175:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "176:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "177:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "178:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "179:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "182:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "183:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "184:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "185:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "186:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "187:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "188:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "189:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "190:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "191:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "192:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "193:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "194:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "195:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "196:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "197:   GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY,",
          "200:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "201:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "202:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "203:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "204:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "205:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "206:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "207:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "208:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "209:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "210:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "211:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "212:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "213:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "214:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "215:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "218:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "219:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "220:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "221:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "222:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "223:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "224:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "225:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "226:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "227:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "228:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "229:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "230:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "231:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "232:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "233:   GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY,",
          "236:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "237:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "238:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "239:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "240:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "241:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "242:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "243:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "244:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "245:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "246:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "247:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "248:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "249:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "250:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "251:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "254:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "255:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "256:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "257:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "258:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "259:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "260:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "261:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "262:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "263:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "264:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "265:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "266:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "267:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "268:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "269:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "272:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "273:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "274:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "275:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "276:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "277:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "278:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "279:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "280:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "281:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "282:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "283:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "284:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "285:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "286:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "287:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "290:   GUI_COLOR_PATTERN_EFFECT_PANNING,",
          "291:   GUI_COLOR_PATTERN_EFFECT_PANNING,",
          "292:   GUI_COLOR_PATTERN_EFFECT_PANNING,",
          "293:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "294:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "295:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "296:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "297:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "298:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "299:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "300:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "301:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "302:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "303:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "304:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "305:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "308:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "309:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "310:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "311:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "312:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "313:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "314:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "315:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "316:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "317:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "318:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "319:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "320:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "321:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "322:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "323:   GUI_COLOR_PATTERN_EFFECT_MISC,",
          "326:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "327:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "328:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "329:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "330:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "331:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "332:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "333:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "334:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "335:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "336:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "337:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "338:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "339:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "340:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "341:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "344:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "345:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "346:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "347:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "348:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "349:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "350:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "351:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "352:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "353:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "354:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "355:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "356:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "357:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "358:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "359:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "362:   GUI_COLOR_PATTERN_EFFECT_SPEED,",
          "363:   GUI_COLOR_PATTERN_EFFECT_SPEED,",
          "364:   GUI_COLOR_PATTERN_EFFECT_SPEED,",
          "365:   GUI_COLOR_PATTERN_EFFECT_SPEED,",
          "366:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "367:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "368:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "369:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "370:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "371:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "372:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "373:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "374:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "375:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "376:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "377:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "380:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "381:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "382:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "383:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "384:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "385:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "386:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "387:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "388:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "389:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "390:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "391:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "392:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "393:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "394:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "395:   GUI_COLOR_PATTERN_EFFECT_INVALID,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FC",
          "194:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FD",
          "195:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FE",
          "197: };",
          "199: #define D FurnaceGUIActionDef",
          "",
          "[Removed Lines]",
          "196:   GUI_COLOR_PATTERN_EFFECT_SONG, // FF",
          "",
          "[Added Lines]",
          "429:   GUI_COLOR_PATTERN_EFFECT_SONG // FF",
          "",
          "---------------"
        ],
        "src/gui/guiConst.h||src/gui/guiConst.h": [
          "File: src/gui/guiConst.h -> src/gui/guiConst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: extern const FurnaceGUIColorDef guiColors[];",
          "48: extern const int altValues[24];",
          "49: extern const int vgmVersions[6];",
          "",
          "[Removed Lines]",
          "50: extern const FurnaceGUIColors fxColors[16];",
          "51: extern const FurnaceGUIColors extFxColors[32];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/gui/pattern.cpp||src/gui/pattern.cpp": [
          "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:           } else {",
          "236:             const unsigned char data=pat->data[i][index];",
          "237:             sprintf(id,\"%.2X##PE%d_%d_%d\",data,k,i,j);",
          "259:           }",
          "260:         }",
          "261:         ImGui::SameLine(0.0f,0.0f);",
          "",
          "[Removed Lines]",
          "238:             if (data<0x10) {",
          "239:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
          "240:             } else if (data<0x20) {",
          "241:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "242:             } else if (data<0x30) {",
          "243:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "244:             } else if (data<0x48) {",
          "245:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "246:             } else if (data<0x90) {",
          "247:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "248:             } else if (data<0xa0) {",
          "249:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
          "250:             } else if (data<0xc0) {",
          "251:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "252:             } else if (data<0xd0) {",
          "253:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "254:             } else if (data<0xe0) {",
          "255:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "256:             } else {",
          "257:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[data-0xe0]]);",
          "258:             }",
          "",
          "[Added Lines]",
          "238:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:             break;",
          "722:           }",
          "723:           case DIV_CMD_PANNING: {",
          "729:             speedX=-22.0f*sin(ratio*M_PI*0.5);",
          "730:             speedY=-22.0f*cos(ratio*M_PI*0.5);",
          "731:             spread=5.0f+fabs(sin(ratio*M_PI*0.5))*7.0f;",
          "732:             grav=0.0f;",
          "733:             frict=0.96f;",
          "735:               partIcon=ICON_FA_ARROWS_H;",
          "736:             } else if (ratio>0) {",
          "737:               partIcon=ICON_FA_ARROW_LEFT;",
          "",
          "[Removed Lines]",
          "724:             if (i.value==0) {",
          "725:               num=0;",
          "726:               break;",
          "727:             }",
          "728:             float ratio=float(((i.value>>4)&15)-(i.value&15))/MAX(((i.value>>4)&15),(i.value&15));",
          "734:             if (((i.value>>4)&15)==(i.value&15)) {",
          "",
          "[Added Lines]",
          "704:             float ratio=(float)(128-e->convertPanSplitToLinearLR(i.value,i.value2,256))/128.0f;",
          "705:             logV(\"ratio %f\",ratio);",
          "711:             if (i.value==i.value2) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}