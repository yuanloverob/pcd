{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2b8271fd923cd1dd0496159cfc51f388690682d",
      "candidate_info": {
        "commit_hash": "f2b8271fd923cd1dd0496159cfc51f388690682d",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f2b8271fd923cd1dd0496159cfc51f388690682d",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "SGXWalletServer.cpp",
          "testw.cpp"
        ],
        "message": "SKALE-2167 Memory warnings",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   }",
          "315: }",
          "325:     unsigned int encryptedLen = 0;",
          "330:     if (DEBUG_PRINT) {",
          "331:       spdlog::info(\"errStatus is {}\",*errStatus);",
          "333:     }",
          "335:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "317: char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "318:     char *keyArray = (char *) calloc(BUF_LEN, 1);",
          "319:     uint8_t *encryptedKey = (uint8_t *) calloc(BUF_LEN, 1);",
          "320:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "321:     strncpy((char *) keyArray, (char *) _key, BUF_LEN);",
          "328:     status = encrypt_key_aes(eid, errStatus, errMsg, keyArray, encryptedKey, &encryptedLen);",
          "332:       spdlog::info(\" errMsg is \", errMsg );",
          "",
          "[Added Lines]",
          "317: char* encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "318:     auto keyArray = make_shared<vector<char>>(BUF_LEN, 0);",
          "319:     auto encryptedKey = make_shared<vector<uint8_t>>(BUF_LEN, 0);",
          "320:     auto errMsg = make_shared<vector<char>>(BUF_LEN, 0);",
          "321:     strncpy(keyArray->data(), _key, BUF_LEN);",
          "327:     status = encrypt_key_aes(eid, errStatus, errMsg->data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
          "331:       spdlog::info(\" errMsg is \", errMsg->data() );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:     }",
          "341:     if (*errStatus != 0) {",
          "343:     }",
          "346:     char *result = (char *) calloc(2 * BUF_LEN, 1);",
          "350:     return result;",
          "351: }",
          "",
          "[Removed Lines]",
          "342:         throw RPCException(-666, errMsg);",
          "348:     carray2Hex(encryptedKey, encryptedLen, result);",
          "",
          "[Added Lines]",
          "341:         throw RPCException(-666, errMsg->data());",
          "347:     carray2Hex(encryptedKey->data(), encryptedLen, result);",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #endif //SGXWALLET_BLSCRYPTO_H",
          "",
          "[Removed Lines]",
          "52: EXTERNC  char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key);",
          "54: EXTERNC char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey);",
          "",
          "[Added Lines]",
          "52: char * encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key);",
          "54: char *decryptBLSKeyShareFromHex(int *errStatus, char *errMsg, const char *_encryptedKey);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     result[\"errorMessage\"] = \"\";",
          "153:     result[\"encryptedKeyShare\"] = \"\";",
          "155:     try {",
          "161:         if (encryptedKeyShareHex == nullptr) {",
          "162:             throw RPCException(UNKNOWN_ERROR, \"\");",
          "",
          "[Removed Lines]",
          "159:         char *encryptedKeyShareHex = encryptBLSKeyShare2Hex(&errStatus, errMsg, _keyShare.c_str());",
          "",
          "[Added Lines]",
          "155:     char *encryptedKeyShareHex = nullptr;",
          "161:         encryptedKeyShareHex = encryptBLSKeyShare2Hex(&errStatus, errMsg, _keyShare.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:             throw RPCException(errStatus, errMsg);",
          "167:         }",
          "171:         writeKeyShare(_keyShareName, encryptedKeyShareHex, index, n , t);",
          "",
          "[Removed Lines]",
          "169:         result[\"encryptedKeyShare\"] = encryptedKeyShareHex;",
          "",
          "[Added Lines]",
          "171:         result[\"encryptedKeyShare\"] = string(encryptedKeyShareHex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:         result[\"errorMessage\"] = _e.errString;",
          "176:     }",
          "178:     return result;",
          "179: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:     if (encryptedKeyShareHex != nullptr) {",
          "181:         free(encryptedKeyShareHex);",
          "182:     }",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include <gmp.h>",
          "55: #include <sgx_urts.h>",
          "56: #include <stdio.h>",
          "58: #include \"BLSCrypto.h\"",
          "59: #include \"ServerInit.h\"",
          "61: #include \"DKGCrypto.h\"",
          "63: #include \"RPCException.h\"",
          "64: #include \"LevelDB.h\"",
          "66: #include \"SGXWalletServer.hpp\"",
          "68: #include <sgx_tcrypto.h>",
          "70: #define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file",
          "72: #include \"catch.hpp\"",
          "74: #include \"stubclient.h\"",
          "76: #include \"BLSSigShare.h\"",
          "77: #include \"BLSSigShareSet.h\"",
          "78: #include \"BLSPublicKeyShare.h\"",
          "79: #include \"BLSPublicKey.h\"",
          "81: #include \"SEKManager.h\"",
          "83: #include <thread>",
          "84: #include \"common.h\"",
          "86: default_random_engine rand_gen((unsigned int) time(0));",
          "90:     mpz_t t;",
          "91:     mpz_init(t);",
          "93:     el.as_bigint().to_mpz(t);",
          "95:     char arr[mpz_sizeinbase(t, 10) + 2];",
          "97:     char *tmp = mpz_get_str(arr, 10, t);",
          "98:     mpz_clear(t);",
          "",
          "[Removed Lines]",
          "88: string stringFromFr(libff::alt_bn128_Fr& el) {",
          "",
          "[Added Lines]",
          "68: #include \"stubclient.h\"",
          "69: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "73: string stringFromFr(libff::alt_bn128_Fr &el) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: #define TEST_BLS_KEY_NAME \"SCHAIN:17:INDEX:5:KEY:1\"",
          "117: void reset_db() {",
          "120: }",
          "124:     const char *key = TEST_BLS_KEY_SHARE;",
          "127:     int errStatus = -1;",
          "133:     REQUIRE(encryptedKeyHex != nullptr);",
          "134:     REQUIRE(errStatus == 0);",
          "137:     printf(\"Encrypted key len %d\\n\", (int) strlen(encryptedKeyHex));",
          "138:     printf(\"Encrypted key %s \\n\", encryptedKeyHex);",
          "",
          "[Removed Lines]",
          "119:     REQUIRE(system(\"rm -rf \" WALLETDB_NAME) == 0);",
          "122: char* encryptTestKey() {",
          "129:     char *errMsg = (char *) calloc(BUF_LEN, 1);",
          "131:     char *encryptedKeyHex = encryptBLSKeyShare2Hex(&errStatus, errMsg, key);",
          "136:     printf(\"Encrypt key completed with status: %d %s \\n\", errStatus, errMsg);",
          "",
          "[Added Lines]",
          "101:     REQUIRE(system(\"rm -rf \"",
          "102:                     WALLETDB_NAME) == 0);",
          "105: char *encryptTestKey() {",
          "109:     vector<char> errMsg(BUF_LEN, 0);;",
          "110:     char *encryptedKeyHex = encryptBLSKeyShare2Hex(&errStatus, errMsg.data(), key);",
          "115:     printf(\"Encrypt key completed with status: %d %s \\n\", errStatus, errMsg.data());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: TEST_CASE(\"BLS key encrypt\", \"[bls-key-encrypt]\") {",
          "148:     init_all(false, false, init_SEK);",
          "150:     REQUIRE(key != nullptr);",
          "152: }",
          "155: TEST_CASE(\"BLS key encrypt/decrypt\", \"[bls-key-encrypt-decrypt]\") {",
          "156:     {",
          "170:         REQUIRE(encryptedKey != nullptr);",
          "174:         REQUIRE(errStatus == 0);",
          "176:         REQUIRE(strcmp(plaintextKey, TEST_BLS_KEY_SHARE) == 0);",
          "178:         printf(\"Decrypt key completed with status: %d %s \\n\", errStatus, errMsg);",
          "179:         printf(\"Decrypted key len %d\\n\", (int) strlen(plaintextKey));",
          "180:         printf(\"Decrypted key: %s\\n\", plaintextKey);",
          "185:     }",
          "186: }",
          "316: }",
          "355:     }",
          "446: }",
          "486: }",
          "528: }",
          "531: TEST_CASE(\"ECDSA keygen and signature test\", \"[ecdsa_test]\") {",
          "572: }",
          "574: TEST_CASE(\"Test test\", \"[test_test]\") {",
          "604: }",
          "606: TEST_CASE(\"get public ECDSA key\", \"[get_pub_ecdsa_key_test]\") {",
          "643: }",
          "",
          "[Removed Lines]",
          "146:    DEBUG_PRINT = 1;",
          "147:    is_sgx_https = 0;",
          "149:     char* key = encryptTestKey();",
          "158:       DEBUG_PRINT = 1;",
          "159:       is_sgx_https = 0;",
          "161:       init_all(false, false, init_SEK);",
          "164:         int errStatus =  -1;",
          "165:         char* errMsg = (char*) calloc(BUF_LEN, 1);",
          "169:         char* encryptedKey = encryptTestKey();",
          "172:         char* plaintextKey = decryptBLSKeyShareFromHex(&errStatus, errMsg, encryptedKey);",
          "182:       sgx_destroy_enclave(eid);",
          "282: TEST_CASE( \"DKG gen test\", \"[dkg-gen]\" ) {",
          "285:   init_enclave();",
          "286:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "288:   char* errMsg = (char*) calloc(1024,1);",
          "289:   int err_status = 0;",
          "290:   uint32_t enc_len = 0;",
          "292:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 32);",
          "293:   REQUIRE(status == SGX_SUCCESS);",
          "294:   printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg);",
          "295:   printf(\"\\n Length: %d \\n\", enc_len);",
          "297:   char* secret = (char*)calloc(DKG_BUFER_LENGTH, sizeof(char));",
          "299:   char* errMsg1 = (char*) calloc(1024,1);",
          "301:   uint32_t dec_len;",
          "302:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &dec_len);",
          "303:   REQUIRE(status == SGX_SUCCESS);",
          "305:   printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1);",
          "306:   printf(\"decrypted secret %s \\n\\n\", secret);",
          "307:   printf (\"secret length %d \\n\", strlen(secret));",
          "308:   printf (\"decr length %d \\n\", dec_len);",
          "310:   free(errMsg);",
          "311:   free(errMsg1);",
          "312:   free(encrypted_dkg_secret);",
          "313:   free(secret);",
          "315:   sgx_destroy_enclave(eid);",
          "318: vector<libff::alt_bn128_Fr> SplitStringToFr(const char* koefs, const char symbol){",
          "319:   string str(koefs);",
          "320:   string delim;",
          "321:   delim.push_back(symbol);",
          "322:   vector<libff::alt_bn128_Fr> tokens;",
          "323:   size_t prev = 0, pos = 0;",
          "324:   do",
          "325:   {",
          "326:     pos = str.find(delim, prev);",
          "327:     if (pos == string::npos) pos = str.length();",
          "328:     string token = str.substr(prev, pos-prev);",
          "329:     if (!token.empty()) {",
          "330:       libff::alt_bn128_Fr koef(token.c_str());",
          "331:       tokens.push_back(koef);",
          "332:     }",
          "333:     prev = pos + delim.length();",
          "334:   }",
          "335:   while (pos < str.length() && prev < str.length());",
          "337:   return tokens;",
          "338: }",
          "340: vector<string> SplitStringTest(const char* koefs, const char symbol){",
          "341:   libff::init_alt_bn128_params();",
          "342:   string str(koefs);",
          "343:   string delim;",
          "344:   delim.push_back(symbol);",
          "345:   vector<string> G2_strings;",
          "346:   size_t prev = 0, pos = 0;",
          "347:   do",
          "348:   {",
          "349:     pos = str.find(delim, prev);",
          "350:     if (pos == string::npos) pos = str.length();",
          "351:     string token = str.substr(prev, pos-prev);",
          "352:     if (!token.empty()) {",
          "353:       string koef(token.c_str());",
          "354:       G2_strings.push_back(koef);",
          "356:     prev = pos + delim.length();",
          "357:   }",
          "358:   while (pos < str.length() && prev < str.length());",
          "360:   return G2_strings;",
          "361: }",
          "363: libff::alt_bn128_G2 VectStringToG2(const vector<string>& G2_str_vect){",
          "364:   libff::init_alt_bn128_params();",
          "365:   libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "366:   koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "367:   koef.X.c1 = libff::alt_bn128_Fq(G2_str_vect.at(1).c_str());",
          "368:   koef.Y.c0 = libff::alt_bn128_Fq(G2_str_vect.at(2).c_str());",
          "369:   koef.Y.c1 = libff::alt_bn128_Fq(G2_str_vect.at(3).c_str());",
          "370:   koef.Z.c0 = libff::alt_bn128_Fq::one();",
          "371:   koef.Z.c1 = libff::alt_bn128_Fq::zero();",
          "373:   return koef;",
          "374: }",
          "376: TEST_CASE( \"DKG public shares test\", \"[dkg-pub_shares]\" ) {",
          "379:   libff::init_alt_bn128_params();",
          "380:   init_enclave();",
          "381:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "383:   char* errMsg = (char*) calloc(1024,1);",
          "384:   int err_status = 0;",
          "385:   uint32_t enc_len = 0;",
          "387:   unsigned t = 32, n = 32;",
          "389:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, n);",
          "390:   REQUIRE(status == SGX_SUCCESS);",
          "394:   char* errMsg1 = (char*) calloc(1024,1);",
          "396:   char colon = ':';",
          "397:   char* public_shares = (char*)calloc(10000, 1);",
          "398:   status = get_public_shares(eid, &err_status, errMsg1, encrypted_dkg_secret, enc_len, public_shares, t, n);",
          "399:   REQUIRE(status == SGX_SUCCESS);",
          "400:   printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1);",
          "401:   printf(\" LEN: %d \\n\", strlen(public_shares));",
          "402:   printf(\" result: %s \\n\", public_shares);",
          "404:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "405:   vector <libff::alt_bn128_G2> pub_shares_G2;",
          "406:   for ( int i = 0; i < G2_strings.size(); i++){",
          "407:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "408:     libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "411:     pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "412:   }",
          "414:   char* secret = (char*)calloc(DKG_MAX_SEALED_LEN, sizeof(char));",
          "415:   status = decrypt_dkg_secret(eid, &err_status, errMsg1, encrypted_dkg_secret, (uint8_t*)secret, &enc_len);",
          "416:   REQUIRE(status == SGX_SUCCESS);",
          "417:   printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1);",
          "419:   signatures::Dkg dkg_obj(t,n);",
          "421:   vector < libff::alt_bn128_Fr> poly = SplitStringToFr((char*)secret, colon);",
          "422:   vector < libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "423:   printf(\"calculated public shares (X.c0): \\n\");",
          "424:   for ( int  i = 0; i < pub_shares_dkg.size(); i++){",
          "425:     libff::alt_bn128_G2 el = pub_shares_dkg.at(i);",
          "426:     el.to_affine_coordinates();",
          "427:     libff::alt_bn128_Fq x_c0_el = el.X.c0;",
          "428:     mpz_t x_c0;",
          "429:     mpz_init(x_c0);",
          "430:     x_c0_el.as_bigint().to_mpz(x_c0);",
          "431:     char arr[mpz_sizeinbase (x_c0, 10) + 2];",
          "432:     char* share_str = mpz_get_str(arr, 10, x_c0);",
          "433:     printf(\" %s \\n\", share_str);",
          "434:     mpz_clear(x_c0);",
          "435:   }",
          "437:   bool res = (pub_shares_G2 == pub_shares_dkg);",
          "438:   REQUIRE( res == true);",
          "440:   free(errMsg);",
          "441:   free(errMsg1);",
          "442:   free(encrypted_dkg_secret);",
          "443:   free(public_shares);",
          "445:   sgx_destroy_enclave(eid);",
          "448: TEST_CASE( \"DKG encrypted secret shares test\", \"[dkg-encr_sshares]\" ) {",
          "451:   init_enclave();",
          "452:   uint8_t *encrypted_key = (uint8_t *) calloc(BUF_LEN, 1);",
          "454:   char *errMsg = (char *)calloc(1024, 1);",
          "455:   char *result = (char *)calloc(130, 1);",
          "457:   int err_status = 0;",
          "458:   uint32_t enc_len = 0;",
          "461:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "464:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "465:   REQUIRE(status == SGX_SUCCESS);",
          "466:   cerr << \" poly generated\" << endl;",
          "468:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "469:   REQUIRE(status == SGX_SUCCESS);",
          "470:   cerr << \" poly set\" << endl;",
          "472:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "473:   char *pub_key_x = (char *)calloc(1024, 1);",
          "474:   char *pub_key_y = (char *)calloc(1024, 1);",
          "476:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "477:   char s_shareG2[320];",
          "478:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result, s_shareG2,",
          "479:                      pub_keyB, 2, 2, 1);",
          "480:   REQUIRE(status == SGX_SUCCESS);",
          "481:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "483:   cerr << \"secret share is \" << result << endl;",
          "485:   sgx_destroy_enclave(eid);",
          "488: TEST_CASE( \"DKG verification test\", \"[dkg-verify]\" ) {",
          "491:   init_enclave();",
          "492:   uint8_t *encrypted_key = (uint8_t *) calloc(BUF_LEN, 1);",
          "494:   char *errMsg = (char *)calloc(1024, 1);",
          "495:   char *result = (char *)calloc(130, 1);",
          "497:   int err_status = 0;",
          "498:   uint32_t enc_len = 0;",
          "501:   uint8_t* encrypted_dkg_secret = (uint8_t*) calloc(DKG_MAX_SEALED_LEN, 1);",
          "504:   status = gen_dkg_secret (eid, &err_status, errMsg, encrypted_dkg_secret, &enc_len, 2);",
          "505:   REQUIRE(status == SGX_SUCCESS);",
          "506:   cerr << \" poly generated\" << endl;",
          "508:   status = set_encrypted_dkg_poly(eid, &err_status, errMsg, encrypted_dkg_secret);",
          "509:   REQUIRE(status == SGX_SUCCESS);",
          "510:   cerr << \" poly set\" << endl;",
          "512:   uint8_t *encr_pr_DHkey = (uint8_t *)calloc(1024, 1);",
          "513:   char *pub_key_x = (char *)calloc(1024, 1);",
          "514:   char *pub_key_y = (char *)calloc(1024, 1);",
          "516:   char *pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "518:   char s_shareG2[320];",
          "519:   status = get_encr_sshare(eid, &err_status, errMsg, encr_pr_DHkey, &enc_len, result, s_shareG2,",
          "520:                            pub_keyB, 2, 2, 1);",
          "521:   REQUIRE(status == SGX_SUCCESS);",
          "522:   printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg);",
          "524:   cerr << \"secret share is \" << result << endl;",
          "526:   sgx_destroy_enclave(eid);",
          "533:   init_enclave();",
          "535:   char *errMsg = (char *)calloc(1024, 1);",
          "536:   int err_status = 0;",
          "537:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "539:   char *pub_key_x = (char *)calloc(1024, 1);",
          "540:   char *pub_key_y = (char *)calloc(1024, 1);",
          "541:   uint32_t enc_len = 0;",
          "545:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "546:   printf(\"\\nerrMsg %s\\n\", errMsg );",
          "547:   REQUIRE(status == SGX_SUCCESS);",
          "549:   printf(\"\\nwas pub_key_x %s: \\n\", pub_key_x);",
          "550:   printf(\"\\nwas pub_key_y %s: \\n\", pub_key_y);",
          "552:   for ( int i = 0; i < 1024 ; i++)",
          "555:   char* hex = \"3F891FDA3704F0368DAB65FA81EBE616F4AA2A0854995DA4DC0B59D2CADBD64F\";",
          "557:   printf(\"hash length %d \", strlen(hex));",
          "558:   char* signature_r = (char *)calloc(1024, 1);",
          "559:   char* signature_s = (char *)calloc(1024, 1);",
          "560:   uint8_t signature_v = 0;",
          "562:   status = ecdsa_sign1(eid, &err_status, errMsg, encr_pr_key, enc_len, (unsigned char*)hex, signature_r, signature_s, &signature_v, 16);",
          "563:   REQUIRE(status == SGX_SUCCESS);",
          "564:   printf(\"\\nsignature r : %s  \", signature_r);",
          "565:   printf(\"\\nsignature s: %s  \", signature_s);",
          "566:   printf(\"\\nsignature v: %u  \", signature_v);",
          "567:   printf(\"\\n %s  \\n\", errMsg);",
          "569:   free(errMsg);",
          "570:   sgx_destroy_enclave(eid);",
          "571:   printf(\"the end of ecdsa test\\n\");",
          "576:   init_enclave();",
          "578:   char *errMsg = (char *)calloc(1024, 1);",
          "579:   int err_status = 0;",
          "580:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "582:   char *pub_key_x = (char *)calloc(1024, 1);",
          "583:   char *pub_key_y = (char *)calloc(1024, 1);",
          "584:   uint32_t enc_len = 0;",
          "586:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "588:   REQUIRE(status == SGX_SUCCESS);",
          "601:   sgx_destroy_enclave(eid);",
          "609:   init_enclave();",
          "611:   char *errMsg = (char *)calloc(1024, 1);",
          "612:   int err_status = 0;",
          "613:   uint8_t *encr_pr_key = (uint8_t *)calloc(1024, 1);",
          "615:   char *pub_key_x = (char *)calloc(1024, 1);",
          "616:   char *pub_key_y = (char *)calloc(1024, 1);",
          "617:   uint32_t enc_len = 0;",
          "621:   status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y );",
          "622:   printf(\"\\nerrMsg %s\\n\", errMsg );",
          "623:   REQUIRE(status == SGX_SUCCESS);",
          "625:   printf(\"\\nwas pub_key_x %s length %d: \\n\", pub_key_x, strlen(pub_key_x));",
          "626:   printf(\"\\nwas pub_key_y %s length %d: \\n\", pub_key_y, strlen(pub_key_y));",
          "629:   for ( int i = 0; i < 1024 ; i++)",
          "632:   char *got_pub_key_x = (char *)calloc(1024, 1);",
          "633:   char *got_pub_key_y = (char *)calloc(1024, 1);",
          "635:   status = get_public_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, enc_len, got_pub_key_x,  got_pub_key_y);",
          "636:   REQUIRE(status == SGX_SUCCESS);",
          "637:   printf(\"\\nnow pub_key_x %s: \\n\", got_pub_key_x);",
          "638:   printf(\"\\nnow pub_key_y %s: \\n\", got_pub_key_y);",
          "639:   printf(\"\\n pr key  %s  \\n\", errMsg);",
          "641:   free(errMsg);",
          "642:   sgx_destroy_enclave(eid);",
          "",
          "[Added Lines]",
          "124:     DEBUG_PRINT = 1;",
          "125:     is_sgx_https = 0;",
          "127:     char *key = encryptTestKey();",
          "136:         DEBUG_PRINT = 1;",
          "137:         is_sgx_https = 0;",
          "139:         init_all(false, false, init_SEK);",
          "142:         int errStatus = -1;",
          "144:         vector<char> errMsg(BUF_LEN, 0);",
          "146:         char *encryptedKey = encryptTestKey();",
          "148:         char *plaintextKey = decryptBLSKeyShareFromHex(&errStatus, errMsg.data(), encryptedKey);",
          "150:         free(encryptedKey);",
          "159:         sgx_destroy_enclave(eid);",
          "165: TEST_CASE(\"DKG gen test\", \"[dkg-gen]\") {",
          "168:     init_enclave();",
          "169:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "170:     vector<char> errMsg(1024, 0);",
          "172:     int err_status = 0;",
          "173:     uint32_t enc_len = 0;",
          "175:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 32);",
          "176:     REQUIRE(status == SGX_SUCCESS);",
          "177:     printf(\"gen_dkg_secret completed with status: %d %s \\n\", err_status, errMsg.data());",
          "178:     printf(\"\\n Length: %d \\n\", enc_len);",
          "180:     vector<char> secret(DKG_BUFER_LENGTH, 0);",
          "182:     vector<char> errMsg1(1024, 0);",
          "184:     uint32_t dec_len;",
          "185:     status = decrypt_dkg_secret(eid, &err_status, errMsg1.data(), encrypted_dkg_secret.data(),",
          "186:                                 (uint8_t *) secret.data(), &dec_len);",
          "188:     REQUIRE(status == SGX_SUCCESS);",
          "190:     printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1.data());",
          "191:     printf(\"decrypted secret %s \\n\\n\", secret.data());",
          "192:     printf(\"secret length %d \\n\", strlen(secret.data()));",
          "193:     printf(\"decr length %d \\n\", dec_len);",
          "195:     sgx_destroy_enclave(eid);",
          "196: }",
          "198: vector<libff::alt_bn128_Fr> SplitStringToFr(const char *koefs, const char symbol) {",
          "199:     string str(koefs);",
          "200:     string delim;",
          "201:     delim.push_back(symbol);",
          "202:     vector<libff::alt_bn128_Fr> tokens;",
          "203:     size_t prev = 0, pos = 0;",
          "204:     do {",
          "205:         pos = str.find(delim, prev);",
          "206:         if (pos == string::npos) pos = str.length();",
          "207:         string token = str.substr(prev, pos - prev);",
          "208:         if (!token.empty()) {",
          "209:             libff::alt_bn128_Fr koef(token.c_str());",
          "210:             tokens.push_back(koef);",
          "211:         }",
          "212:         prev = pos + delim.length();",
          "213:     } while (pos < str.length() && prev < str.length());",
          "215:     return tokens;",
          "216: }",
          "218: vector<string> SplitStringTest(const char *koefs, const char symbol) {",
          "219:     libff::init_alt_bn128_params();",
          "220:     string str(koefs);",
          "221:     string delim;",
          "222:     delim.push_back(symbol);",
          "223:     vector<string> G2_strings;",
          "224:     size_t prev = 0, pos = 0;",
          "225:     do {",
          "226:         pos = str.find(delim, prev);",
          "227:         if (pos == string::npos) pos = str.length();",
          "228:         string token = str.substr(prev, pos - prev);",
          "229:         if (!token.empty()) {",
          "230:             string koef(token.c_str());",
          "231:             G2_strings.push_back(koef);",
          "232:         }",
          "233:         prev = pos + delim.length();",
          "234:     } while (pos < str.length() && prev < str.length());",
          "236:     return G2_strings;",
          "237: }",
          "239: libff::alt_bn128_G2 VectStringToG2(const vector<string> &G2_str_vect) {",
          "240:     libff::init_alt_bn128_params();",
          "241:     libff::alt_bn128_G2 koef = libff::alt_bn128_G2::zero();",
          "242:     koef.X.c0 = libff::alt_bn128_Fq(G2_str_vect.at(0).c_str());",
          "243:     koef.X.c1 = libff::alt_bn128_Fq(G2_str_vect.at(1).c_str());",
          "244:     koef.Y.c0 = libff::alt_bn128_Fq(G2_str_vect.at(2).c_str());",
          "245:     koef.Y.c1 = libff::alt_bn128_Fq(G2_str_vect.at(3).c_str());",
          "246:     koef.Z.c0 = libff::alt_bn128_Fq::one();",
          "247:     koef.Z.c1 = libff::alt_bn128_Fq::zero();",
          "249:     return koef;",
          "252: TEST_CASE(\"DKG public shares test\", \"[dkg-pub_shares]\") {",
          "255:     libff::init_alt_bn128_params();",
          "256:     init_enclave();",
          "257:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "258:     vector<char> errMsg(1024, 0);",
          "260:     int err_status = 0;",
          "261:     uint32_t enc_len = 0;",
          "263:     unsigned t = 32, n = 32;",
          "265:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, n);",
          "266:     REQUIRE(status == SGX_SUCCESS);",
          "270:     vector<char> errMsg1(1024, 0);",
          "272:     char colon = ':';",
          "273:     vector<char> public_shares(10000, 0);",
          "275:     status = get_public_shares(eid, &err_status, errMsg1.data(),",
          "276:                                encrypted_dkg_secret.data(), enc_len, public_shares.data(), t, n);",
          "277:     REQUIRE(status == SGX_SUCCESS);",
          "278:     printf(\"\\nget_public_shares status: %d error %s \\n\\n\", err_status, errMsg1.data());",
          "279:     printf(\" LEN: %d \\n\", strlen(public_shares.data()));",
          "280:     printf(\" result: %s \\n\", public_shares.data());",
          "282:     vector<string> G2_strings = SplitString(public_shares.data(), ',');",
          "283:     vector<libff::alt_bn128_G2> pub_shares_G2;",
          "284:     for (int i = 0; i < G2_strings.size(); i++) {",
          "285:         vector<string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "286:         libff::alt_bn128_G2 el = VectStringToG2(koef_str);",
          "289:         pub_shares_G2.push_back(VectStringToG2(koef_str));",
          "292:     vector<char> secret(DKG_MAX_SEALED_LEN, 0);",
          "294:     status = decrypt_dkg_secret(eid, &err_status, errMsg1.data(), encrypted_dkg_secret.data(),",
          "295:                                 (uint8_t *) secret.data(), &enc_len);",
          "296:     REQUIRE(status == SGX_SUCCESS);",
          "297:     printf(\"\\ndecrypt_dkg_secret completed with status: %d %s \\n\", err_status, errMsg1.data());",
          "299:     signatures::Dkg dkg_obj(t, n);",
          "301:     vector<libff::alt_bn128_Fr> poly = SplitStringToFr(secret.data(), colon);",
          "302:     vector<libff::alt_bn128_G2> pub_shares_dkg = dkg_obj.VerificationVector(poly);",
          "303:     printf(\"calculated public shares (X.c0): \\n\");",
          "304:     for (uint32_t i = 0; i < pub_shares_dkg.size(); i++) {",
          "305:         libff::alt_bn128_G2 el = pub_shares_dkg.at(i);",
          "306:         el.to_affine_coordinates();",
          "307:         libff::alt_bn128_Fq x_c0_el = el.X.c0;",
          "308:         mpz_t x_c0;",
          "309:         mpz_init(x_c0);",
          "310:         x_c0_el.as_bigint().to_mpz(x_c0);",
          "311:         char arr[mpz_sizeinbase(x_c0, 10) + 2];",
          "312:         char *share_str = mpz_get_str(arr, 10, x_c0);",
          "313:         printf(\" %s \\n\", share_str);",
          "314:         mpz_clear(x_c0);",
          "315:     }",
          "317:     bool res = (pub_shares_G2 == pub_shares_dkg);",
          "318:     REQUIRE(res == true);",
          "320:     sgx_destroy_enclave(eid);",
          "323: TEST_CASE(\"DKG encrypted secret shares test\", \"[dkg-encr_sshares]\") {",
          "326:     init_enclave();",
          "328:     vector<char> errMsg(1024, 1);",
          "329:     vector<char> result(130, 1);",
          "331:     int err_status = 0;",
          "332:     uint32_t enc_len = 0;",
          "334:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 0);",
          "335:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "336:     REQUIRE(status == SGX_SUCCESS);",
          "337:     cerr << \" poly generated\" << endl;",
          "339:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "340:     REQUIRE(status == SGX_SUCCESS);",
          "341:     cerr << \" poly set\" << endl;",
          "343:     vector<uint8_t> encrPRDHKey(1024, 0);",
          "345:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "347:     vector<char> s_shareG2(320,0);",
          "348:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPRDHKey.data(), &enc_len, result.data(), s_shareG2.data(),",
          "349:                              (char*) pub_keyB.data(), 2, 2, 1);",
          "351:     REQUIRE(status == SGX_SUCCESS);",
          "352:     printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg.data());",
          "354:     cerr << \"secret share is \" << result.data() << endl;",
          "356:     sgx_destroy_enclave(eid);",
          "359: TEST_CASE(\"DKG verification test\", \"[dkg-verify]\") {",
          "362:     init_enclave();",
          "364:     vector<char> errMsg(1024, 0);",
          "365:     vector<char> result(130, 0);",
          "367:     int err_status = 0;",
          "368:     uint32_t enc_len = 0;",
          "370:     vector<uint8_t> encrypted_dkg_secret(DKG_MAX_SEALED_LEN, 1);",
          "372:     status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, 2);",
          "373:     REQUIRE(status == SGX_SUCCESS);",
          "374:     cerr << \" poly generated\" << endl;",
          "376:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data());",
          "377:     REQUIRE(status == SGX_SUCCESS);",
          "378:     cerr << \" poly set\" << endl;",
          "380:     vector<uint8_t> encrPrDHKey(1024, 0);",
          "382:     string pub_keyB = \"c0152c48bf640449236036075d65898fded1e242c00acb45519ad5f788ea7cbf9a5df1559e7fc87932eee5478b1b9023de19df654395574a690843988c3ff475\";",
          "384:     vector<char> s_shareG2(320,0);",
          "386:     status = get_encr_sshare(eid, &err_status, errMsg.data(), encrPrDHKey.data(), &enc_len, result.data(), s_shareG2.data(),",
          "387:                              (char*) pub_keyB.data(), 2, 2, 1);",
          "388:     REQUIRE(status == SGX_SUCCESS);",
          "389:     printf(\" get_encr_sshare completed with status: %d %s \\n\", err_status, errMsg.data());",
          "391:     cerr << \"secret share is \" << result.data() << endl;",
          "393:     sgx_destroy_enclave(eid);",
          "400:     init_enclave();",
          "402:     vector<char> errMsg(1024, 0);",
          "403:     int err_status = 0;",
          "404:     vector<uint8_t> encr_pr_key(1024, 0);",
          "405:     vector<char> pub_key_x(1024, 0);",
          "406:     vector<char> pub_key_y(1024, 0);",
          "408:     uint32_t enc_len = 0;",
          "412:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "413:                                 pub_key_y.data());",
          "414:     printf(\"\\nerrMsg %s\\n\", errMsg.data());",
          "415:     REQUIRE(status == SGX_SUCCESS);",
          "417:     printf(\"\\nwas pub_key_x %s: \\n\", pub_key_x.data());",
          "418:     printf(\"\\nwas pub_key_y %s: \\n\", pub_key_y.data());",
          "420:     for ( int i = 0; i < 1024 ; i++)",
          "423:     string hex = \"3F891FDA3704F0368DAB65FA81EBE616F4AA2A0854995DA4DC0B59D2CADBD64F\";",
          "425:     printf(\"hash length %d \", hex.size());",
          "426:     vector<char> signature_r(1024, 0);",
          "427:     vector<char> signature_s(1024, 0);",
          "428:     uint8_t signature_v = 0;",
          "430:     status = ecdsa_sign1(eid, &err_status, errMsg.data(), encr_pr_key.data(), enc_len, (unsigned char *) hex.data(),",
          "431:                          signature_r.data(),",
          "432:                          signature_s.data(), &signature_v, 16);",
          "433:     REQUIRE(status == SGX_SUCCESS);",
          "434:     printf(\"\\nsignature r : %s  \", signature_r.data());",
          "435:     printf(\"\\nsignature s: %s  \", signature_s.data());",
          "436:     printf(\"\\nsignature v: %u  \", signature_v);",
          "437:     printf(\"\\n %s  \\n\", errMsg.data());",
          "439:     sgx_destroy_enclave(eid);",
          "440:     printf(\"the end of ecdsa test\\n\");",
          "445:     init_enclave();",
          "447:     vector<char> errMsg(1024, 0);",
          "448:     int err_status = 0;",
          "449:     vector<uint8_t> encr_pr_key(1024, 0);",
          "450:     vector<char> pub_key_x(1024, 0);",
          "451:     vector<char> pub_key_y(1024, 0);",
          "452:     uint32_t enc_len = 0;",
          "454:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "455:                                 pub_key_y.data());",
          "457:     REQUIRE(status == SGX_SUCCESS);",
          "467:     sgx_destroy_enclave(eid);",
          "475:     init_enclave();",
          "477:     int err_status = 0;",
          "478:     vector<char> errMsg(1024, 0);",
          "479:     vector<uint8_t> encr_pr_key(1024, 0);",
          "480:     vector<char> pub_key_x(1024, 0);",
          "481:     vector<char> pub_key_y(1024, 0);",
          "482:     uint32_t enc_len = 0;",
          "486:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "487:                                 pub_key_y.data());",
          "488:     printf(\"\\nerrMsg %s\\n\", errMsg.data());",
          "489:     REQUIRE(status == SGX_SUCCESS);",
          "491:     printf(\"\\nwas pub_key_x %s length %d: \\n\", pub_key_x.data(), strlen(pub_key_x.data()));",
          "492:     printf(\"\\nwas pub_key_y %s length %d: \\n\", pub_key_y.data(), strlen(pub_key_y.data()));",
          "495:     for ( int i = 0; i < 1024 ; i++)",
          "498:     vector<char> got_pub_key_x(1024, 0);",
          "499:     vector<char> got_pub_key_y(1024, 0);",
          "501:     status = get_public_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), enc_len, got_pub_key_x.data(),",
          "502:                                   got_pub_key_y.data());",
          "503:     REQUIRE(status == SGX_SUCCESS);",
          "504:     printf(\"\\nnow pub_key_x %s: \\n\", got_pub_key_x.data());",
          "505:     printf(\"\\nnow pub_key_y %s: \\n\", got_pub_key_y.data());",
          "506:     printf(\"\\n pr key  %s  \\n\", errMsg.data());",
          "509:     sgx_destroy_enclave(eid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "662: using namespace jsonrpc;",
          "663: using namespace std;",
          "678: }",
          "681: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "729:     }",
          "771:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "795:     }",
          "808: }",
          "810: TEST_CASE(\"API test\", \"[api_test]\") {",
          "812:     is_sgx_https = 0;",
          "814:     cerr << \"API test started\" << endl;",
          "815:     init_all(false, false, init_SEK);",
          "820:     cerr << \"Server inited\" << endl;",
          "821:     HttpClient client(\"http://localhost:1029\");",
          "822:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "659: #include \"stubclient.h\"",
          "660: #include <jsonrpccpp/client/connectors/httpclient.h>",
          "665: string ConvertDecToHex(string dec, int numBytes = 32){",
          "666:   mpz_t num;",
          "667:   mpz_init(num);",
          "668:   mpz_set_str(num, dec.c_str(), 10);",
          "670:   char tmp[mpz_sizeinbase (num, 16) + 2];",
          "671:   char * hex = mpz_get_str(tmp, 16, num);",
          "673:   string result = hex;",
          "674:   int n_zeroes = numBytes * 2 - result.length();",
          "675:   result.insert(0, n_zeroes, '0');",
          "677:   return result;",
          "682:   is_sgx_https = 0;",
          "683:   DEBUG_PRINT = 1;",
          "684:   cerr<< \"test started\" << endl;",
          "685:   init_all(false, false, init_SEK);",
          "686:   cerr << \"Server inited\" << endl;",
          "687:   HttpClient client(\"http://localhost:1029\");",
          "688:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "689:   cerr << \"Client inited\" << endl;",
          "691:   reset_db();",
          "694:   int n = 16, t = 16;",
          "695:   Json::Value EthKeys[n];",
          "696:   Json::Value VerifVects[n];",
          "697:   Json::Value pubEthKeys;",
          "698:   Json::Value secretShares[n];",
          "699:   Json::Value pubBLSKeys[n];",
          "700:   Json::Value BLSSigShares[n];",
          "701:   vector<string> pubShares(n);",
          "702:   vector<string> poly_names(n);",
          "704:   int schain_id = rand_gen();",
          "705:   int dkg_id = rand_gen();",
          "706:   for ( uint8_t i = 0; i < n; i++){",
          "707:     EthKeys[i] = c.generateECDSAKey();",
          "708:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "710:     c.generateDKGPoly(polyName, t);",
          "711:     poly_names[i] = polyName;",
          "712:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "713:     REQUIRE(VerifVects[i][\"status\"] == 0);",
          "714:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "715:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "716:   }",
          "719:   for ( uint8_t i = 0; i < n; i++){",
          "720:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "721:     cout << secretShares[i] << std::endl;",
          "722:     REQUIRE(secretShares[i][\"status\"] == 0);",
          "723:     for ( uint8_t k = 0; k < t; k++ ) {",
          "724:       for (uint8_t j = 0; j < 4; j++) {",
          "725:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "726:         REQUIRE(pubShare.length() > 60 );",
          "727:         pubShares[i] += ConvertDecToHex(pubShare);",
          "728:       }",
          "732:   }",
          "738:   int k = 0;",
          "740:   vector < string> secShares_vect(n);",
          "742:   vector <string> pSharesBad(pubShares);",
          "744:   for ( int i = 0; i < n; i++)",
          "745:     for ( int j = 0; j < n; j++){",
          "747:        cerr << \"secretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "748:        string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192);",
          "749:        secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192);",
          "750:        cerr << \"pubShare is \" << pubShares[i] << std::endl;",
          "751:        bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j)[\"result\"].asBool();",
          "752:        k++;",
          "753:        cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "754:        REQUIRE(res);",
          "756:        pSharesBad[i][0] = 'q';",
          "757:        Json::Value wrongVerif = c.dkgVerification(pSharesBad[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "758:        res = wrongVerif[\"result\"].asBool();",
          "759:        REQUIRE(!res);",
          "760:        cerr << \"wrong verification \" << wrongVerif << endl;",
          "762:     }",
          "764:   BLSSigShareSet sigShareSet(t, n);",
          "766:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "768:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "769:   uint64_t binLen;",
          "770:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "772:   }",
          "775:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "777:   for ( int i = 0; i < t; i++){",
          "778:     string endName = poly_names[i].substr(4);",
          "779:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "780:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "782:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "783:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "784:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "786:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "787:     cerr << i << \" sig share is created \" << endl;",
          "788:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "789:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "790:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "792:     vector<string> pubKey_vect;",
          "793:     for ( uint8_t j = 0; j < 4; j++){",
          "794:         pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "796:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "797:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "799:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "801:   }",
          "803:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "804:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "805:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "",
          "[Added Lines]",
          "531: string ConvertDecToHex(string dec, int numBytes = 32) {",
          "532:     mpz_t num;",
          "533:     mpz_init(num);",
          "534:     mpz_set_str(num, dec.c_str(), 10);",
          "536:     vector<char> tmp(mpz_sizeinbase(num, 16) + 2, 0);",
          "537:     char *hex = mpz_get_str(tmp.data(), 16, num);",
          "539:     string result = hex;",
          "540:     int n_zeroes = numBytes * 2 - result.length();",
          "541:     result.insert(0, n_zeroes, '0');",
          "543:     return result;",
          "548:     is_sgx_https = 0;",
          "549:     DEBUG_PRINT = 1;",
          "550:     cerr << \"test started\" << endl;",
          "551:     init_all(false, false, init_SEK);",
          "552:     cerr << \"Server inited\" << endl;",
          "553:     HttpClient client(\"http://localhost:1029\");",
          "554:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "555:     cerr << \"Client inited\" << endl;",
          "557:     reset_db();",
          "560:     int n = 16, t = 16;",
          "561:     Json::Value EthKeys[n];",
          "562:     Json::Value VerifVects[n];",
          "563:     Json::Value pubEthKeys;",
          "564:     Json::Value secretShares[n];",
          "565:     Json::Value pubBLSKeys[n];",
          "566:     Json::Value BLSSigShares[n];",
          "567:     vector<string> pubShares(n);",
          "568:     vector<string> poly_names(n);",
          "570:     int schain_id = rand_gen();",
          "571:     int dkg_id = rand_gen();",
          "572:     for (uint8_t i = 0; i < n; i++) {",
          "573:         EthKeys[i] = c.generateECDSAKey();",
          "574:         string polyName =",
          "575:                 \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "577:         c.generateDKGPoly(polyName, t);",
          "578:         poly_names[i] = polyName;",
          "579:         VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "580:         REQUIRE(VerifVects[i][\"status\"] == 0);",
          "581:         cout << \"VV \" << i << \" \" << VerifVects[i] << endl;",
          "582:         pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "586:     for (uint8_t i = 0; i < n; i++) {",
          "587:         secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "588:         cout << secretShares[i] << endl;",
          "589:         REQUIRE(secretShares[i][\"status\"] == 0);",
          "590:         for (uint8_t k = 0; k < t; k++) {",
          "591:             for (uint8_t j = 0; j < 4; j++) {",
          "592:                 string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "593:                 REQUIRE(pubShare.length() > 60);",
          "594:                 pubShares[i] += ConvertDecToHex(pubShare);",
          "595:             }",
          "596:         }",
          "599:     }",
          "605:     int k = 0;",
          "607:     vector<string> secShares_vect(n);",
          "609:     vector<string> pSharesBad(pubShares);",
          "611:     for (int i = 0; i < n; i++)",
          "612:         for (int j = 0; j < n; j++) {",
          "614:             cerr << \"secretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "615:             string secretShare = secretShares[i][\"secretShare\"].asString().substr(192 * j, 192);",
          "616:             secShares_vect[i] += secretShares[j][\"secretShare\"].asString().substr(192 * i, 192);",
          "617:             cerr << \"pubShare is \" << pubShares[i] << endl;",
          "618:             bool res = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n,",
          "619:                                          j)[\"result\"].asBool();",
          "620:             k++;",
          "621:             cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "622:             REQUIRE(res);",
          "624:             pSharesBad[i][0] = 'q';",
          "625:             Json::Value wrongVerif = c.dkgVerification(pSharesBad[i], EthKeys[j][\"keyName\"].asString(), secretShare, t,",
          "626:                                                        n, j);",
          "627:             res = wrongVerif[\"result\"].asBool();",
          "628:             REQUIRE(!res);",
          "629:             cerr << \"wrong verification \" << wrongVerif << endl;",
          "631:         }",
          "633:     BLSSigShareSet sigShareSet(t, n);",
          "635:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "637:     auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "638:     uint64_t binLen;",
          "639:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "644:     map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "646:     for (int i = 0; i < t; i++) {",
          "647:         string endName = poly_names[i].substr(4);",
          "648:         string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "649:         string secretShare = secretShares[i][\"secretShare\"].asString();",
          "651:         cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t,",
          "652:                                       n);",
          "653:         pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "654:         cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "656:         BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "657:         cerr << i << \" sig share is created \" << endl;",
          "658:         shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "659:         BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "660:         sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "662:         vector<string> pubKey_vect;",
          "663:         for (uint8_t j = 0; j < 4; j++) {",
          "664:             pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "665:         }",
          "666:         BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "667:         REQUIRE(pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig), t, n));",
          "669:         koefs_pkeys_map[i + 1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "671:     }",
          "673:     shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "674:     BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "675:     REQUIRE(common_public.VerifySigWithHelper(hash_arr, commonSig, t, n));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "837:         Json::Value genKey = c.generateECDSAKey();",
          "838:         cout << genKey << endl;",
          "840:         Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "841:         cout << getPubKey << endl;",
          "",
          "[Removed Lines]",
          "839:         cout << c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(),\"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\" );",
          "",
          "[Added Lines]",
          "708:         cout << c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(),",
          "709:                                        \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "907:     } catch (JsonRpcException &e) {",
          "908:         cerr << e.what() << endl;",
          "909:     }",
          "911: }",
          "913: TEST_CASE(\"getServerStatus test\", \"[getServerStatus_test]\") {",
          "920: }",
          "925:     cout << \"Hello from thread \" << this_thread::get_id() << endl;",
          "926:     HttpClient client(\"http://localhost:1029\");",
          "927:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "928:     reset_db();",
          "961:     }",
          "984:     }",
          "1009:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "",
          "[Removed Lines]",
          "862:       Json::Value publicKeys;",
          "863:       publicKeys.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "864:       publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "873:       string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "874:       string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "875:       string share = share_big.substr(0, 192);",
          "877:       string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "882:       Json::Value SecretShare;",
          "883:       SecretShare.append(share_big0);",
          "884:       SecretShare.append(share_big);",
          "889:      string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "894:       string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "895:       string ethKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "910:   sgx_destroy_enclave(eid);",
          "914:   is_sgx_https = 0;",
          "915:   init_all( false, false, init_SEK );",
          "916:   HttpClient client(\"http://localhost:1029\");",
          "917:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "918:   REQUIRE(c.getServerStatus()[\"status\"] == 0);",
          "919:   sgx_destroy_enclave(eid);",
          "924: void SendRPCRequest(){",
          "931:   int n = 16, t = 16;",
          "932:   Json::Value EthKeys[n];",
          "933:   Json::Value VerifVects[n];",
          "934:   Json::Value pubEthKeys;",
          "935:   Json::Value secretShares[n];",
          "936:   Json::Value pubBLSKeys[n];",
          "937:   Json::Value BLSSigShares[n];",
          "938:   vector<string> pubShares(n);",
          "939:   vector<string> poly_names(n);",
          "941:   int schain_id = rand_gen();",
          "942:   int dkg_id = rand_gen();",
          "943:   for ( uint8_t i = 0; i < n; i++){",
          "944:     EthKeys[i] = c.generateECDSAKey();",
          "945:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "946:     c.generateDKGPoly(polyName, t);",
          "947:     poly_names[i] = polyName;",
          "948:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "949:     REQUIRE( VerifVects[i][\"status\"] == 0);",
          "950:     cout << \"VV \" << i <<  \" \" << VerifVects[i] << endl;",
          "951:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "952:   }",
          "954:   for ( uint8_t i = 0; i < n; i++){",
          "955:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "956:     for ( uint8_t k = 0; k < t; k++ ) {",
          "957:       for (uint8_t j = 0; j < 4; j++) {",
          "958:         string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "959:         pubShares[i] += ConvertDecToHex(pubShare);",
          "960:       }",
          "964:   }",
          "967:   int k = 0;",
          "969:   vector <string> secShares_vect(n);",
          "971:   for ( int i = 0; i < n; i++)",
          "972:     for ( int j = 0; j < n; j++){",
          "974:         cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "975:         string secretShare = secretShares[i][\"secretShare\"].asString().substr(192*j, 192 );",
          "976:         secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192*i, 192 );",
          "977:         Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "978:         cout << verif;",
          "979:         bool res = verif[\"result\"].asBool();",
          "980:         k++;",
          "981:         cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "988:   BLSSigShareSet sigShareSet(t, n);",
          "990:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "992:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "993:   uint64_t binLen;",
          "994:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "995:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "996:   }",
          "998:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "1001:   for ( int i = 0; i < t ; i++){",
          "1002:     string endName = poly_names[i].substr(4);",
          "1003:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "1004:     string secretShare = secretShares[i][\"secretShare\"].asString();",
          "1006:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "1007:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "1008:     cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "1010:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1011:     REQUIRE(BLSSigShares[i][\"status\"] == 0);",
          "1012:     cerr << i << \" sig share is created \" << endl;",
          "1013:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1014:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1015:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "",
          "[Added Lines]",
          "732:         Json::Value publicKeys;",
          "733:         publicKeys.append(",
          "734:                 \"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "735:         publicKeys.append(",
          "736:                 \"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "745:         string share_big0 = \"501e364a6ea516f4812b013bcc150cbb435a2c465c9fd525951264969d8441a986798fd3317c1c3e60f868bb26c4cff837d9185f4be6015d8326437cb5b69480495859cd5a385430ece51252acdc234d8dbde75708b600ac50b2974e813ee26bd87140d88647fcc44df7262bbba24328e8ce622cd627a15b508ffa0db9ae81e0e110fab42cfe40da66b524218ca3c8e5aa3363fbcadef748dc3523a7ffb95b8f5d8141a5163db9f69d1ab223494ed71487c9bb032a74c08a222d897a5e49a617\";",
          "746:         string share_big = \"03f749e2fcc28021895d757ec16d1636784446f5effcd3096b045136d8ab02657b32adc577f421330b81f5b7063df3b08a0621a897df2584b9046ca416e50ecc27e8c3277e981f7e650f8640289be128eecf0105f89a20e5ffb164744c45cf191d627ce9ab6c44e2ef96f230f2a4de742ea43b6f74b56849138026610b2d965605ececba527048a0f29f46334b1cec1d23df036248b24eccca99057d24764acee66c1a3f2f44771d0d237bf9d18c4177277e3ce3dc4e83686a2647fce1565ee0\";",
          "747:         string share = share_big.substr(0, 192);",
          "749:         string publicShares = \"1fc8154abcbf0c2ebf559571d7b57a8995c0e293a73d4676a8f76051a0d0ace30e00a87c9f087254c9c860c3215c4f11e8f85a3e8fae19358f06a0cbddf3df1924b1347b9b58f5bcb20958a19bdbdd832181cfa9f9e9fd698f6a485051cb47b829d10f75b6e227a7d7366dd02825b5718072cd42c39f0352071808622b7db6421b1069f519527e49052a8da6e3720cbda9212fc656eef945f5e56a4159c3b9622d883400460a9eff07fe1873f9b1ec50f6cf70098b9da0b90625b176f12329fa2ecc65082c626dc702d9cfb23a06770d4a2c7867e269efe84e3709b11001fb380a32d609855d1d46bc60f21140c636618b8ff55ed06d7788b6f81b498f96d3f9\";",
          "754:         Json::Value SecretShare;",
          "755:         SecretShare.append(share_big0);",
          "756:         SecretShare.append(share_big);",
          "761:         string shares = \"252122c309ed1f32faa897ede140c5b9c1bc07d5d9c94b7a22d4eeb13da7b7142aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b7637092c06c423b627c38ff86d1e66608bdc1496ef855b86e9f773441ac0b285d92aa466376a6008de4aab9858aa34848775282c4c3b56370bf25827321619c6e47701c8a32e3f4bb28f5a3b12a09800f318c550cedff6150e9a673ea56ece8b76\";",
          "766:         string s_share = \"13b871ad5025fed10a41388265b19886e78f449f758fe8642ade51440fcf850bb2083f87227d8fb53fdfb2854e2d0abec4f47e2197b821b564413af96124cd84a8700f8eb9ed03161888c9ef58d6e5896403de3608e634e23e92fba041aa283484427d0e6de20922216c65865cfe26edd2cf9cbfc3116d007710e8d82feafd9135c497bef0c800ca310ba6044763572681510dad5e043ebd87ffaa1a4cd45a899222207f3d05dec8110d132ad34c62d6a3b40bf8e9f40f875125c3035062d2ca\";",
          "767:         string ethKeyName = \"tmp_NEK:8abc8e8280fb060988b65da4b8cb00779a1e816ec42f8a40ae2daa520e484a01\";",
          "782:     sgx_destroy_enclave(eid);",
          "786:     is_sgx_https = 0;",
          "787:     init_all(false, false, init_SEK);",
          "788:     HttpClient client(\"http://localhost:1029\");",
          "789:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "790:     REQUIRE(c.getServerStatus()[\"status\"] == 0);",
          "791:     sgx_destroy_enclave(eid);",
          "795: void SendRPCRequest() {",
          "802:     int n = 16, t = 16;",
          "803:     Json::Value EthKeys[n];",
          "804:     Json::Value VerifVects[n];",
          "805:     Json::Value pubEthKeys;",
          "806:     Json::Value secretShares[n];",
          "807:     Json::Value pubBLSKeys[n];",
          "808:     Json::Value BLSSigShares[n];",
          "809:     vector<string> pubShares(n);",
          "810:     vector<string> poly_names(n);",
          "812:     int schain_id = rand_gen();",
          "813:     int dkg_id = rand_gen();",
          "814:     for (uint8_t i = 0; i < n; i++) {",
          "815:         EthKeys[i] = c.generateECDSAKey();",
          "816:         string polyName =",
          "817:                 \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "818:         c.generateDKGPoly(polyName, t);",
          "819:         poly_names[i] = polyName;",
          "820:         VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "821:         REQUIRE(VerifVects[i][\"status\"] == 0);",
          "822:         cout << \"VV \" << i << \" \" << VerifVects[i] << endl;",
          "823:         pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "826:     for (uint8_t i = 0; i < n; i++) {",
          "827:         secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "828:         for (uint8_t k = 0; k < t; k++) {",
          "829:             for (uint8_t j = 0; j < 4; j++) {",
          "830:                 string pubShare = VerifVects[i][\"Verification Vector\"][k][j].asString();",
          "831:                 pubShares[i] += ConvertDecToHex(pubShare);",
          "832:             }",
          "833:         }",
          "839:     int k = 0;",
          "841:     vector<string> secShares_vect(n);",
          "843:     for (int i = 0; i < n; i++)",
          "844:         for (int j = 0; j < n; j++) {",
          "846:             cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "847:             string secretShare = secretShares[i][\"secretShare\"].asString().substr(192 * j, 192);",
          "848:             secShares_vect[i] += secretShares[j][\"secretShare\"].asString().substr(192 * i, 192);",
          "849:             Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "850:             cout << verif;",
          "851:             k++;",
          "852:             cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "855:         }",
          "858:     BLSSigShareSet sigShareSet(t, n);",
          "862:     auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "863:     uint64_t binLen;",
          "864:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "865:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "866:     }",
          "868:     map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "871:     for (int i = 0; i < t; i++) {",
          "872:         string endName = poly_names[i].substr(4);",
          "873:         string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "874:         string secretShare = secretShares[i][\"secretShare\"].asString();",
          "876:         cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t,",
          "877:                                       n);",
          "878:         pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "879:         cerr << \"BLS KEY SHARE NAME IS \" << blsName << endl;",
          "880:         string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "881:         BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "882:         REQUIRE(BLSSigShares[i][\"status\"] == 0);",
          "883:         cerr << i << \" sig share is created \" << endl;",
          "884:         shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "885:         BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "886:         sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1028:     shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1035: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1053: }",
          "1055: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "",
          "[Removed Lines]",
          "1026:   }",
          "1033:  }",
          "1036:   is_sgx_https = 0;",
          "1037:   DEBUG_PRINT = 1;",
          "1038:   is_aes = 1;",
          "1040:   init_all( false, false, init_SEK );",
          "1042:   vector<thread> threads;",
          "1043:   int num_threads = 4;",
          "1044:   for (int i = 0; i < num_threads; i++){",
          "1045:     threads.push_back(thread(SendRPCRequest));",
          "1046:   }",
          "1048:   for(auto& thread : threads){",
          "1049:     thread.join();",
          "1050:   }",
          "1052:   sgx_destroy_enclave(eid);",
          "1056:   DEBUG_PRINT = 1;",
          "1057:   is_sgx_https = 0;",
          "1058:   is_aes = 1;",
          "1060:   cerr << \"ecdsa_api_test started\" << endl;",
          "1061:   init_all(false, false, init_SEK);",
          "1063:   cerr << \"Server inited\" << endl;",
          "1064:   HttpClient client(\"http://localhost:1029\");",
          "1065:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1067:   cerr << \"Client inited\" << endl;",
          "1069:   Json::Value genKey = c.generateECDSAKey();",
          "1070:   cout << genKey << endl;",
          "1071:   REQUIRE(genKey[\"status\"].asInt() == 0);",
          "1073:   Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "1074:   cout << getPubKey << endl;",
          "1075:   REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "1076:   REQUIRE(getPubKey[\"publicKey\"].asString() == genKey[\"publicKey\"].asString());",
          "1078:   Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(), \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "1079:   cout << ecdsaSign << endl;",
          "1080:   REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "",
          "[Added Lines]",
          "897:     }",
          "904: }",
          "907:     is_sgx_https = 0;",
          "908:     DEBUG_PRINT = 1;",
          "909:     is_aes = 1;",
          "911:     init_all(false, false, init_SEK);",
          "913:     vector<thread> threads;",
          "914:     int num_threads = 4;",
          "915:     for (int i = 0; i < num_threads; i++) {",
          "916:         threads.push_back(thread(SendRPCRequest));",
          "917:     }",
          "919:     for (auto &thread : threads) {",
          "920:         thread.join();",
          "921:     }",
          "923:     sgx_destroy_enclave(eid);",
          "927:     DEBUG_PRINT = 1;",
          "928:     is_sgx_https = 0;",
          "929:     is_aes = 1;",
          "931:     cerr << \"ecdsa_api_test started\" << endl;",
          "932:     init_all(false, false, init_SEK);",
          "934:     cerr << \"Server inited\" << endl;",
          "935:     HttpClient client(\"http://localhost:1029\");",
          "936:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "938:     cerr << \"Client inited\" << endl;",
          "940:     Json::Value genKey = c.generateECDSAKey();",
          "941:     cout << genKey << endl;",
          "942:     REQUIRE(genKey[\"status\"].asInt() == 0);",
          "944:     Json::Value getPubKey = c.getPublicECDSAKey(genKey[\"keyName\"].asString());",
          "945:     cout << getPubKey << endl;",
          "946:     REQUIRE(getPubKey[\"status\"].asInt() == 0);",
          "947:     REQUIRE(getPubKey[\"publicKey\"].asString() == genKey[\"publicKey\"].asString());",
          "949:     Json::Value ecdsaSign = c.ecdsaSignMessageHash(16, genKey[\"keyName\"].asString(),",
          "950:                                                    \"0x09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\");",
          "951:     cout << ecdsaSign << endl;",
          "952:     REQUIRE(ecdsaSign[\"status\"].asInt() == 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1103: }",
          "1105: TEST_CASE(\"dkg API test\", \"[dkg_api_test]\") {",
          "1177: }",
          "1280:     }",
          "1322:     }",
          "1335: }",
          "1337: TEST_CASE(\"bls_sign_api test\", \"[bls_sign]\") {",
          "",
          "[Removed Lines]",
          "1102:   sgx_destroy_enclave(eid);",
          "1106:   DEBUG_PRINT = 1;",
          "1107:   is_sgx_https = 0;",
          "1109:   cerr << \"dkg_api_test started\" << endl;",
          "1110:   init_all(false, false, init_SEK);",
          "1112:   cerr << \"Server inited\" << endl;",
          "1113:   HttpClient client(\"http://localhost:1029\");",
          "1114:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1116:   cerr << \"Client inited\" << endl;",
          "1118:   reset_db();",
          "1120:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1121:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1123:   Json::Value publicKeys;",
          "1124:   publicKeys.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "1125:   publicKeys.append(\"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "1128:   Json::Value genPolyWrongName = c.generateDKGPoly(\"poly\", 2);",
          "1129:   REQUIRE(genPolyWrongName[\"status\"].asInt() != 0);",
          "1130:   cout << genPolyWrongName << endl;",
          "1131:   Json::Value verifVectWrongName = c.getVerificationVector(\"poly\", 2, 2);",
          "1132:   REQUIRE(verifVectWrongName[\"status\"].asInt() != 0);",
          "1133:   cout << verifVectWrongName << endl;",
          "1135:   Json::Value secretSharesWrongName = c.getSecretShare(\"poly\", publicKeys, 2, 2);",
          "1136:   REQUIRE(secretSharesWrongName[\"status\"].asInt() != 0);",
          "1137:   cout << secretSharesWrongName << endl;",
          "1140:   Json::Value genPolyWrong_t = c.generateDKGPoly(polyName, 33);",
          "1141:   REQUIRE(genPolyWrong_t[\"status\"].asInt() != 0);",
          "1142:   cout << genPolyWrong_t << endl;",
          "1145:   Json::Value verifVectWrong_t = c.getVerificationVector(polyName, 1, 2);",
          "1146:   REQUIRE(verifVectWrong_t[\"status\"].asInt() != 0);",
          "1147:   cout << verifVectWrong_t << endl;",
          "1149:   Json::Value secretSharesWrong_t = c.getSecretShare(polyName, publicKeys, 3, 3);",
          "1150:   REQUIRE(secretSharesWrong_t[\"status\"].asInt() != 0);",
          "1151:   cout << secretSharesWrong_t << endl;",
          "1154:   Json::Value verifVectWrong_n = c.getVerificationVector(polyName, 2, 1);",
          "1155:   REQUIRE(verifVectWrong_n[\"status\"].asInt() != 0);",
          "1156:   cout << verifVectWrong_n << endl;",
          "1158:   Json::Value publicKeys1;",
          "1159:   publicKeys1.append(\"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "1160:   Json::Value secretSharesWrong_n = c.getSecretShare(polyName, publicKeys1, 2, 1);",
          "1161:   REQUIRE(secretSharesWrong_n[\"status\"].asInt() != 0);",
          "1162:   cout << secretSharesWrong_n << endl;",
          "1165:   Json::Value secretSharesWrongPkeys = c.getSecretShare(polyName, publicKeys, 2, 3);",
          "1166:   REQUIRE(secretSharesWrongPkeys[\"status\"].asInt() != 0);",
          "1167:   cout << secretSharesWrongPkeys << endl;",
          "1170:   Json::Value Skeys = c.getSecretShare(polyName, publicKeys, 2, 2);",
          "1171:   Json::Value verifVect = c.getVerificationVector(polyName, 2, 2);",
          "1172:   Json::Value verificationWrongSkeys = c.dkgVerification(\"\",\"\",\"\",2, 2, 1);",
          "1173:   REQUIRE(verificationWrongSkeys[\"status\"].asInt() != 0);",
          "1174:   cout << verificationWrongSkeys << endl;",
          "1176:   sgx_destroy_enclave(eid);",
          "1179: TEST_CASE(\"isPolyExists test\", \"[is_poly_test]\") {",
          "1180:   DEBUG_PRINT = 1;",
          "1181:   is_sgx_https = 0;",
          "1183:   cerr << \"is_poly_test started\" << endl;",
          "1184:   init_all(false, false, init_SEK);",
          "1186:   cerr << \"Server inited\" << endl;",
          "1187:   HttpClient client(\"http://localhost:1029\");",
          "1188:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1190:   cerr << \"Client inited\" << endl;",
          "1192:   reset_db();",
          "1194:   string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1195:   Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1196:   cout << genPoly << endl;",
          "1197:   Json::Value polyExists = c.isPolyExists(polyName);",
          "1198:   cout << polyExists << endl;",
          "1199:   REQUIRE(polyExists[\"IsExist\"].asBool());",
          "1201:   Json::Value polyDoesNotExist = c.isPolyExists(\"Vasya\");",
          "1202:   cout << polyDoesNotExist << endl;",
          "1203:   REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "1205: }",
          "1207: TEST_CASE(\"AES_DKG test\", \"[aes_dkg]\") {",
          "1209:   is_sgx_https = 0;",
          "1210:   DEBUG_PRINT = 1;",
          "1211:   is_aes = 1;",
          "1213:   reset_db();",
          "1215:   std::cerr << \"test started\" << std::endl;",
          "1216:   init_all(false, false, init_SEK);",
          "1217:   cerr << \"Server inited\" << endl;",
          "1218:   HttpClient client(\"http://localhost:1029\");",
          "1219:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1220:   cerr << \"Client inited\" << endl;",
          "1222:   int n = 2, t = 2;",
          "1223:   Json::Value EthKeys[n];",
          "1224:   Json::Value VerifVects[n];",
          "1225:   Json::Value pubEthKeys;",
          "1226:   Json::Value secretShares[n];",
          "1227:   Json::Value pubBLSKeys[n];",
          "1228:   Json::Value BLSSigShares[n];",
          "1229:   vector<string> pubShares(n);",
          "1230:   vector<string> poly_names(n);",
          "1232:   int schain_id = rand_gen();",
          "1233:   int dkg_id = rand_gen();",
          "1234:   for ( uint8_t i = 0; i < n; i++){",
          "1235:     EthKeys[i] = c.generateECDSAKey();",
          "1236:     std::cerr << \"after gen key\" << std::endl;",
          "1237:     string polyName = \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1238:     REQUIRE(EthKeys[i][\"status\"] == 0);",
          "1239:     cout << c.generateDKGPoly(polyName, t);",
          "1240:     poly_names[i] = polyName;",
          "1241:     VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1242:     cout << \"VV \" << i << \" \" << VerifVects[i] << std::endl;",
          "1243:     pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1244:   }",
          "1246:   for ( uint8_t i = 0; i < n; i++){",
          "1247:     secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1248:     cout << secretShares[i] << std::endl;",
          "1249:     REQUIRE(secretShares[i][\"status\"] == 0);",
          "1250:     for ( uint8_t k = 0; k < t; k++ )",
          "1251:       for (uint8_t j = 0; j < 4; j++){",
          "1252:         string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "1253:         pubShares[i] += ConvertDecToHex(pubShare);",
          "1254:       }",
          "1262:     }",
          "1264:   int k = 0;",
          "1265:   vector <string> secShares_vect(n);",
          "1267:   for ( int i = 0; i < n; i++)",
          "1268:     for ( int j = 0; j < n; j++){",
          "1270:       cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1271:       string secretShare = secretShares[i][\"secretShare\"].asString().substr(192 * j, 192 );",
          "1272:       secShares_vect[i] +=  secretShares[j][\"secretShare\"].asString().substr(192 * i, 192 );",
          "1273:       Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "1274:       cout << verif;",
          "1275:       bool res = verif[\"result\"].asBool();",
          "1276:       k++;",
          "1277:       cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1278:       REQUIRE( res );",
          "1283:   Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "1284:   cout << complaintResponse << endl;",
          "1285:   REQUIRE(complaintResponse[\"status\"] == 0);",
          "1286:   cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "1287:   cerr << \"DHKey is \" << complaintResponse[\"dhKey\"].asString();",
          "1289:   BLSSigShareSet sigShareSet(t, n);",
          "1291:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1293:   auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "1294:   uint64_t binLen;",
          "1295:   if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())){",
          "1296:     throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "1297:   }",
          "1300:   map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "1302:   for ( int i = 0; i < t; i++){",
          "1303:     string endName = poly_names[i].substr(4);",
          "1304:     string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "1305:     cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t, n);",
          "1306:     pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "1307:     cout << pubBLSKeys[i] << endl;",
          "1308:     REQUIRE(pubBLSKeys[i][\"status\"] == 0);",
          "1309:     cerr << \"BLS KEY SHARE NAME IS\" << blsName << endl;",
          "1310:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1311:     BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1312:     cout << BLSSigShares[i] << std::endl;",
          "1313:     REQUIRE( BLSSigShares[i][\"status\"] == 0);",
          "1314:     cerr << i << \" sig share is created \" << endl;",
          "1315:     shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1316:     BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1317:     sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "1319:     vector<string> pubKey_vect;",
          "1320:     for ( uint8_t j = 0; j < 4; j++){",
          "1321:       pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "1323:     BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "1324:     REQUIRE( pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig) , t, n));",
          "1326:     koefs_pkeys_map[i+1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1328:   }",
          "1330:   shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1331:   BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "1332:   REQUIRE( common_public.VerifySigWithHelper(hash_arr, commonSig, t, n) );",
          "1334:   sgx_destroy_enclave(eid);",
          "1339:   is_sgx_https = 0;",
          "1340:   DEBUG_PRINT = 1;",
          "1341:   is_aes = 1;",
          "1343:   std::cerr << \"test started\" << std::endl;",
          "1344:   init_all(false, false, init_SEK);",
          "1345:   cerr << \"Server inited\" << endl;",
          "1346:   HttpClient client(\"http://localhost:1029\");",
          "1347:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "1348:   cerr << \"Client inited\" << endl;",
          "1349:   string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1350:   string blsName = \"BLS_KEY:SCHAIN_ID:323669558:NODE_ID:1:DKG_ID:338183455\";",
          "1351:   int n = 4, t = 4;",
          "1353:   Json::Value pubBLSKey = c.getBLSPublicKeyShare(blsName);",
          "1354:   REQUIRE(pubBLSKey[\"status\"] == 0);",
          "1355:   cout << pubBLSKey << endl;",
          "1359:   Json::Value sign = c.blsSignMessageHash(blsName, hash, t, n, 1);",
          "1360:   cout << sign << endl;",
          "1361:   REQUIRE(sign[\"status\"] == 0);",
          "",
          "[Added Lines]",
          "974:     sgx_destroy_enclave(eid);",
          "978:     DEBUG_PRINT = 1;",
          "979:     is_sgx_https = 0;",
          "981:     cerr << \"dkg_api_test started\" << endl;",
          "982:     init_all(false, false, init_SEK);",
          "984:     cerr << \"Server inited\" << endl;",
          "985:     HttpClient client(\"http://localhost:1029\");",
          "986:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "988:     cerr << \"Client inited\" << endl;",
          "990:     reset_db();",
          "992:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "993:     Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "995:     Json::Value publicKeys;",
          "996:     publicKeys.append(",
          "997:             \"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "998:     publicKeys.append(",
          "999:             \"378b3e6fdfe2633256ae1662fcd23466d02ead907b5d4366136341cea5e46f5a7bb67d897d6e35f619810238aa143c416f61c640ed214eb9c67a34c4a31b7d25\");",
          "1002:     Json::Value genPolyWrongName = c.generateDKGPoly(\"poly\", 2);",
          "1003:     REQUIRE(genPolyWrongName[\"status\"].asInt() != 0);",
          "1004:     cout << genPolyWrongName << endl;",
          "1005:     Json::Value verifVectWrongName = c.getVerificationVector(\"poly\", 2, 2);",
          "1006:     REQUIRE(verifVectWrongName[\"status\"].asInt() != 0);",
          "1007:     cout << verifVectWrongName << endl;",
          "1009:     Json::Value secretSharesWrongName = c.getSecretShare(\"poly\", publicKeys, 2, 2);",
          "1010:     REQUIRE(secretSharesWrongName[\"status\"].asInt() != 0);",
          "1011:     cout << secretSharesWrongName << endl;",
          "1014:     Json::Value genPolyWrong_t = c.generateDKGPoly(polyName, 33);",
          "1015:     REQUIRE(genPolyWrong_t[\"status\"].asInt() != 0);",
          "1016:     cout << genPolyWrong_t << endl;",
          "1019:     Json::Value verifVectWrong_t = c.getVerificationVector(polyName, 1, 2);",
          "1020:     REQUIRE(verifVectWrong_t[\"status\"].asInt() != 0);",
          "1021:     cout << verifVectWrong_t << endl;",
          "1023:     Json::Value secretSharesWrong_t = c.getSecretShare(polyName, publicKeys, 3, 3);",
          "1024:     REQUIRE(secretSharesWrong_t[\"status\"].asInt() != 0);",
          "1025:     cout << secretSharesWrong_t << endl;",
          "1028:     Json::Value verifVectWrong_n = c.getVerificationVector(polyName, 2, 1);",
          "1029:     REQUIRE(verifVectWrong_n[\"status\"].asInt() != 0);",
          "1030:     cout << verifVectWrong_n << endl;",
          "1032:     Json::Value publicKeys1;",
          "1033:     publicKeys1.append(",
          "1034:             \"505f55a38f9c064da744f217d1cb993a17705e9839801958cda7c884e08ab4dad7fd8d22953d3ac7f0913de24fd67d7ed36741141b8a3da152d7ba954b0f14e2\");",
          "1035:     Json::Value secretSharesWrong_n = c.getSecretShare(polyName, publicKeys1, 2, 1);",
          "1036:     REQUIRE(secretSharesWrong_n[\"status\"].asInt() != 0);",
          "1037:     cout << secretSharesWrong_n << endl;",
          "1040:     Json::Value secretSharesWrongPkeys = c.getSecretShare(polyName, publicKeys, 2, 3);",
          "1041:     REQUIRE(secretSharesWrongPkeys[\"status\"].asInt() != 0);",
          "1042:     cout << secretSharesWrongPkeys << endl;",
          "1045:     Json::Value Skeys = c.getSecretShare(polyName, publicKeys, 2, 2);",
          "1046:     Json::Value verifVect = c.getVerificationVector(polyName, 2, 2);",
          "1047:     Json::Value verificationWrongSkeys = c.dkgVerification(\"\", \"\", \"\", 2, 2, 1);",
          "1048:     REQUIRE(verificationWrongSkeys[\"status\"].asInt() != 0);",
          "1049:     cout << verificationWrongSkeys << endl;",
          "1051:     sgx_destroy_enclave(eid);",
          "1052: }",
          "1054: TEST_CASE(\"isPolyExists test\", \"[is_poly_test]\") {",
          "1055:     DEBUG_PRINT = 1;",
          "1056:     is_sgx_https = 0;",
          "1058:     cerr << \"is_poly_test started\" << endl;",
          "1059:     init_all(false, false, init_SEK);",
          "1061:     cerr << \"Server inited\" << endl;",
          "1062:     HttpClient client(\"http://localhost:1029\");",
          "1063:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1065:     cerr << \"Client inited\" << endl;",
          "1067:     reset_db();",
          "1069:     string polyName = \"POLY:SCHAIN_ID:1:NODE_ID:1:DKG_ID:1\";",
          "1070:     Json::Value genPoly = c.generateDKGPoly(polyName, 2);",
          "1071:     cout << genPoly << endl;",
          "1072:     Json::Value polyExists = c.isPolyExists(polyName);",
          "1073:     cout << polyExists << endl;",
          "1074:     REQUIRE(polyExists[\"IsExist\"].asBool());",
          "1076:     Json::Value polyDoesNotExist = c.isPolyExists(\"Vasya\");",
          "1077:     cout << polyDoesNotExist << endl;",
          "1078:     REQUIRE(!polyDoesNotExist[\"IsExist\"].asBool());",
          "1082: TEST_CASE(\"AES_DKG test\", \"[aes_dkg]\") {",
          "1084:     is_sgx_https = 0;",
          "1085:     DEBUG_PRINT = 1;",
          "1086:     is_aes = 1;",
          "1088:     reset_db();",
          "1090:     cerr << \"test started\" << endl;",
          "1091:     init_all(false, false, init_SEK);",
          "1092:     cerr << \"Server inited\" << endl;",
          "1093:     HttpClient client(\"http://localhost:1029\");",
          "1094:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1095:     cerr << \"Client inited\" << endl;",
          "1097:     int n = 2, t = 2;",
          "1098:     Json::Value EthKeys[n];",
          "1099:     Json::Value VerifVects[n];",
          "1100:     Json::Value pubEthKeys;",
          "1101:     Json::Value secretShares[n];",
          "1102:     Json::Value pubBLSKeys[n];",
          "1103:     Json::Value BLSSigShares[n];",
          "1104:     vector<string> pubShares(n);",
          "1105:     vector<string> poly_names(n);",
          "1107:     int schain_id = rand_gen();",
          "1108:     int dkg_id = rand_gen();",
          "1109:     for (uint8_t i = 0; i < n; i++) {",
          "1110:         EthKeys[i] = c.generateECDSAKey();",
          "1111:         cerr << \"after gen key\" << endl;",
          "1112:         string polyName =",
          "1113:                 \"POLY:SCHAIN_ID:\" + to_string(schain_id) + \":NODE_ID:\" + to_string(i) + \":DKG_ID:\" + to_string(dkg_id);",
          "1114:         REQUIRE(EthKeys[i][\"status\"] == 0);",
          "1115:         cout << c.generateDKGPoly(polyName, t);",
          "1116:         poly_names[i] = polyName;",
          "1117:         VerifVects[i] = c.getVerificationVector(polyName, t, n);",
          "1118:         cout << \"VV \" << i << \" \" << VerifVects[i] << endl;",
          "1119:         pubEthKeys.append(EthKeys[i][\"publicKey\"]);",
          "1120:     }",
          "1122:     for (uint8_t i = 0; i < n; i++) {",
          "1123:         secretShares[i] = c.getSecretShare(poly_names[i], pubEthKeys, t, n);",
          "1124:         cout << secretShares[i] << endl;",
          "1125:         REQUIRE(secretShares[i][\"status\"] == 0);",
          "1126:         for (uint8_t k = 0; k < t; k++)",
          "1127:             for (uint8_t j = 0; j < 4; j++) {",
          "1128:                 string pubShare = VerifVects[i][\"verificationVector\"][k][j].asString();",
          "1129:                 pubShares[i] += ConvertDecToHex(pubShare);",
          "1130:             }",
          "1140:     int k = 0;",
          "1141:     vector<string> secShares_vect(n);",
          "1143:     for (int i = 0; i < n; i++)",
          "1144:         for (int j = 0; j < n; j++) {",
          "1146:             cerr << \"SecretShare length is \" << secretShares[i][\"secretShare\"].asString().length() << endl;",
          "1147:             string secretShare = secretShares[i][\"secretShare\"].asString().substr(192 * j, 192);",
          "1148:             secShares_vect[i] += secretShares[j][\"secretShare\"].asString().substr(192 * i, 192);",
          "1149:             Json::Value verif = c.dkgVerification(pubShares[i], EthKeys[j][\"keyName\"].asString(), secretShare, t, n, j);",
          "1150:             cout << verif;",
          "1151:             bool res = verif[\"result\"].asBool();",
          "1152:             k++;",
          "1153:             cerr << \"NOW K IS \" << k << \" i is \" << i << \" j is \" << j << endl;",
          "1154:             REQUIRE(res);",
          "1156:         }",
          "1159:     Json::Value complaintResponse = c.complaintResponse(poly_names[1], 0);",
          "1160:     cout << complaintResponse << endl;",
          "1161:     REQUIRE(complaintResponse[\"status\"] == 0);",
          "1162:     cerr << \"share * G2 is \" << complaintResponse[\"share*G2\"].asString();",
          "1163:     cerr << \"DHKey is \" << complaintResponse[\"dhKey\"].asString();",
          "1165:     BLSSigShareSet sigShareSet(t, n);",
          "1167:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1169:     auto hash_arr = make_shared<array<uint8_t, 32>>();",
          "1170:     uint64_t binLen;",
          "1171:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "1172:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "1173:     }",
          "1176:     map<size_t, shared_ptr<BLSPublicKeyShare>> koefs_pkeys_map;",
          "1178:     for (int i = 0; i < t; i++) {",
          "1179:         string endName = poly_names[i].substr(4);",
          "1180:         string blsName = \"BLS_KEY\" + poly_names[i].substr(4);",
          "1181:         cout << c.createBLSPrivateKey(blsName, EthKeys[i][\"keyName\"].asString(), poly_names[i], secShares_vect[i], t,",
          "1182:                                       n);",
          "1183:         pubBLSKeys[i] = c.getBLSPublicKeyShare(blsName);",
          "1184:         cout << pubBLSKeys[i] << endl;",
          "1185:         REQUIRE(pubBLSKeys[i][\"status\"] == 0);",
          "1186:         cerr << \"BLS KEY SHARE NAME IS\" << blsName << endl;",
          "1187:         string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1188:         BLSSigShares[i] = c.blsSignMessageHash(blsName, hash, t, n, i + 1);",
          "1189:         cout << BLSSigShares[i] << endl;",
          "1190:         REQUIRE(BLSSigShares[i][\"status\"] == 0);",
          "1191:         cerr << i << \" sig share is created \" << endl;",
          "1192:         shared_ptr<string> sig_share_ptr = make_shared<string>(BLSSigShares[i][\"signatureShare\"].asString());",
          "1193:         BLSSigShare sig(sig_share_ptr, i + 1, t, n);",
          "1194:         sigShareSet.addSigShare(make_shared<BLSSigShare>(sig));",
          "1196:         vector<string> pubKey_vect;",
          "1197:         for (uint8_t j = 0; j < 4; j++) {",
          "1198:             pubKey_vect.push_back(pubBLSKeys[i][\"blsPublicKeyShare\"][j].asString());",
          "1199:         }",
          "1200:         BLSPublicKeyShare pubKey(make_shared<vector<string>>(pubKey_vect), t, n);",
          "1201:         REQUIRE(pubKey.VerifySigWithHelper(hash_arr, make_shared<BLSSigShare>(sig), t, n));",
          "1203:         koefs_pkeys_map[i + 1] = make_shared<BLSPublicKeyShare>(pubKey);",
          "1207:     shared_ptr<BLSSignature> commonSig = sigShareSet.merge();",
          "1208:     BLSPublicKey common_public(make_shared<map<size_t, shared_ptr<BLSPublicKeyShare>>>(koefs_pkeys_map), t, n);",
          "1209:     REQUIRE(common_public.VerifySigWithHelper(hash_arr, commonSig, t, n));",
          "1211:     sgx_destroy_enclave(eid);",
          "1216:     is_sgx_https = 0;",
          "1217:     DEBUG_PRINT = 1;",
          "1218:     is_aes = 1;",
          "1220:     cerr << \"test started\" << endl;",
          "1221:     init_all(false, false, init_SEK);",
          "1222:     cerr << \"Server inited\" << endl;",
          "1223:     HttpClient client(\"http://localhost:1029\");",
          "1224:     StubClient c(client, JSONRPC_CLIENT_V2);",
          "1225:     cerr << \"Client inited\" << endl;",
          "1226:     string hash = \"09c6137b97cdf159b9950f1492ee059d1e2b10eaf7d51f3a97d61f2eee2e81db\";",
          "1227:     string blsName = \"BLS_KEY:SCHAIN_ID:323669558:NODE_ID:1:DKG_ID:338183455\";",
          "1228:     int n = 4, t = 4;",
          "1230:     Json::Value pubBLSKey = c.getBLSPublicKeyShare(blsName);",
          "1231:     REQUIRE(pubBLSKey[\"status\"] == 0);",
          "1232:     cout << pubBLSKey << endl;",
          "1235:     Json::Value sign = c.blsSignMessageHash(blsName, hash, t, n, 1);",
          "1236:     cout << sign << endl;",
          "1237:     REQUIRE(sign[\"status\"] == 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1378:         init_all(false, false, init_SEK);",
          "1383:         uint32_t enc_len;",
          "1391:         REQUIRE(status == 0);",
          "1398:         REQUIRE(status == 0);",
          "1404:         sgx_destroy_enclave(eid);",
          "",
          "[Removed Lines]",
          "1381:         int errStatus =  -1;",
          "1382:         char* errMsg = (char*) calloc(BUF_LEN, 1);",
          "1385:         std::string key = \"123456789\";",
          "1386:         uint8_t encrypted_key[BUF_LEN];",
          "1387:         memset(encrypted_key, 0, BUF_LEN);",
          "1389:         status = encrypt_key_aes(eid, &errStatus, errMsg, key.c_str(), encrypted_key, &enc_len);",
          "1392:         std::cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg << std::endl;",
          "1394:         char decr_key[BUF_LEN];",
          "1395:         memset(decr_key, 0, BUF_LEN);",
          "1396:         status = decrypt_key_aes(eid, &errStatus, errMsg, encrypted_key, enc_len, decr_key);",
          "1399:         std::cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg << std::endl;",
          "1400:         std::cerr << \"decrypted key is \" << decr_key << std::endl;",
          "1402:         REQUIRE( key.compare(decr_key) == 0);",
          "1407:     }",
          "1408: }",
          "",
          "[Added Lines]",
          "1257:         int errStatus = -1;",
          "1258:         vector<char> errMsg(BUF_LEN, 0);;",
          "1260:         string key = \"123456789\";",
          "1261:         vector<uint8_t> encrypted_key(BUF_LEN,0);",
          "1263:         status = encrypt_key_aes(eid, &errStatus, errMsg.data(), key.c_str(), encrypted_key.data(), &enc_len);",
          "1266:         cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1268:         vector<char> decr_key(BUF_LEN, 0);",
          "1269:         status = decrypt_key_aes(eid, &errStatus, errMsg.data(), encrypted_key.data(), enc_len, decr_key.data());",
          "1272:         cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg.data() << endl;",
          "1273:         cerr << \"decrypted key is \" << decr_key.data() << endl;",
          "1275:         REQUIRE(key.compare(decr_key.data()) == 0);",
          "1277:     }",
          "1278: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "178b5ed573525afc99ca84757f16a6976e644963",
      "candidate_info": {
        "commit_hash": "178b5ed573525afc99ca84757f16a6976e644963",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/178b5ed573525afc99ca84757f16a6976e644963",
        "files": [
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp"
        ],
        "message": "SKALE-3205",
        "before_after_code_files": [
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"BLSutils.h\"",
          "28: #include \"third_party/spdlog/spdlog.h\"",
          "30: #include \"secure_enclave_u.h\"",
          "31: #include \"sgxwallet_common.h\"",
          "32: #include \"sgxwallet.h\"",
          "34: #include \"BLSCrypto.h\"",
          "35: #include \"ServerInit.h\"",
          "38: #include \"BLSPrivateKeyShareSGX.h\"",
          "40: string *stringFromFq(libff::alt_bn128_Fq *_fq) {",
          "",
          "[Removed Lines]",
          "36: #include \"common.h\"",
          "",
          "[Added Lines]",
          "29: #include \"common.h\"",
          "36: #include \"SEKManager.h\"",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"third_party/spdlog/spdlog.h\"",
          "30: #include \"sgxwallet.h\"",
          "31: #include \"SGXException.h\"",
          "37: #include \"BLSCrypto.h\"",
          "40: vector <string> splitString(const char *coeffs, const char symbol) {",
          "41:     CHECK_STATE(coeffs);",
          "",
          "[Removed Lines]",
          "32: #include \"common.h\"",
          "33: #include \"SGXWalletServer.hpp\"",
          "36: #include \"DKGCrypto.h\"",
          "",
          "[Added Lines]",
          "30: #include \"common.h\"",
          "34: #include \"SGXWalletServer.hpp\"",
          "36: #include \"SEKManager.h\"",
          "37: #include \"DKGCrypto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
          "136:     sgx_status_t status = SGX_SUCCESS;",
          "139:         status = trustedGenDkgSecretAES(",
          "140:                 eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "143:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "137:     {",
          "138:         READ_LOCK(initMutex);",
          "141:     }",
          "",
          "[Added Lines]",
          "138:     RESTART_BEGIN",
          "141:     RESTART_END",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     sgx_status_t status = SGX_SUCCESS;",
          "178:         status = trustedGetPublicSharesAES(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "179:                                            pubShares.data(), t, n);",
          "181:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "183:     vector <string> g2Strings = splitString(pubShares.data(), ',');",
          "",
          "[Removed Lines]",
          "176:     {",
          "177:         READ_LOCK(initMutex);",
          "180:     }",
          "",
          "[Added Lines]",
          "177:     RESTART_BEGIN",
          "180:     RESTART_END",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:     strncpy(pshares, publicShares, strlen(publicShares));",
          "286:     sgx_status_t status = SGX_SUCCESS;",
          "289:         status = trustedDkgVerifyAES(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "290:                                      ind, &result);",
          "292:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "294:     if (result == 2) {",
          "",
          "[Removed Lines]",
          "287:     {",
          "288:         READ_LOCK(initMutex);",
          "291:     }",
          "",
          "[Added Lines]",
          "289:     RESTART_BEGIN",
          "292:     RESTART_END",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:     sgx_status_t status = SGX_SUCCESS;",
          "320:         status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "321:                                         &enc_bls_len);",
          "324:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "318:     {",
          "319:         READ_LOCK(initMutex);",
          "322:     }",
          "",
          "[Added Lines]",
          "320:     RESTART_BEGIN",
          "323:     RESTART_END",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "353:     sgx_status_t status = SGX_SUCCESS;",
          "356:         status = trustedGetBlsPubKeyAES(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "358:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "360:     vector <string> pubKeyVect = splitString(pubKey, ':');",
          "",
          "[Removed Lines]",
          "354:     {",
          "355:         READ_LOCK(initMutex);",
          "357:     }",
          "",
          "[Added Lines]",
          "356:     RESTART_BEGIN",
          "358:     RESTART_END",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "436:     SAFE_CHAR_BUF(DHKey, ECDSA_SKEY_LEN);",
          "438:     sgx_status_t status = SGX_SUCCESS;",
          "441:         status = trustedDecryptKeyAES(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "443:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "445:     return DHKey;",
          "",
          "[Removed Lines]",
          "439:     {",
          "440:         READ_LOCK(initMutex);",
          "442:     }",
          "",
          "[Added Lines]",
          "442:     RESTART_BEGIN",
          "444:     RESTART_END",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "133c1e80e6c39e62f7bbfe18e5ff894c1c49a502",
      "candidate_info": {
        "commit_hash": "133c1e80e6c39e62f7bbfe18e5ff894c1c49a502",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/133c1e80e6c39e62f7bbfe18e5ff894c1c49a502",
        "files": [
          "BLSCrypto.cpp",
          "BLSCrypto.h",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "SEKManager.cpp",
          "TestUtils.cpp",
          "common.h",
          "testw.cpp"
        ],
        "message": "SKALE-3222-clean-memory-sanitizer-warnings",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSCrypto.h||BLSCrypto.h",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "TestUtils.cpp||TestUtils.cpp",
          "common.h||common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: string *FqToString(libff::alt_bn128_Fq *_fq) {",
          "52:     mpz_t t;",
          "53:     mpz_init(t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     CHECK_STATE(_fq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     return -1;",
          "73: }",
          "76:     char hexval[16] = {'0', '1', '2', '3', '4', '5', '6', '7',",
          "77:                        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
          "79:     for (int j = 0; j < _len; j++) {",
          "80:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
          "81:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
          "",
          "[Removed Lines]",
          "75: void carray2Hex(const unsigned char *d, int _len, char *_hexArray) {",
          "",
          "[Added Lines]",
          "78: void carray2Hex(const unsigned char *d, uint64_t _len, char *_hexArray,",
          "79:                 uint64_t _hexArrayLen) {",
          "81:     CHECK_STATE(d);",
          "82:     CHECK_STATE(_hexArray);",
          "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     _hexArray[_len * 2] = 0;",
          "85: }",
          "113:     if (len == 0 && len % 2 == 1)",
          "114:         return false;",
          "",
          "[Removed Lines]",
          "87: bool hex2carray(const char *_hex, uint64_t *_bin_len, uint8_t *_bin) {",
          "88:     int len = strnlen(_hex, 2 * BUF_LEN);",
          "90:     if (len == 0 && len % 2 == 1)",
          "91:         return false;",
          "95:     for (int i = 0; i < len / 2; i++) {",
          "96:         int high = char2int((char) _hex[i * 2]);",
          "97:         int low = char2int((char) _hex[i * 2 + 1]);",
          "99:         if (high < 0 || low < 0) {",
          "100:             return false;",
          "101:         }",
          "103:         _bin[i] = (unsigned char) (high * 16 + low);",
          "104:     }",
          "106:     return true;",
          "107: }",
          "109: bool hex2carray2(const char *_hex, uint64_t *_bin_len,",
          "110:                  uint8_t *_bin, const int _max_length) {",
          "111:     int len = strnlen(_hex, _max_length);",
          "",
          "[Added Lines]",
          "99: bool hex2carray(const char *_hex, uint64_t *_bin_len,",
          "100:                  uint8_t *_bin, uint64_t _max_length) {",
          "103:     CHECK_STATE(_hex);",
          "104:     CHECK_STATE(_bin);",
          "105:     CHECK_STATE(_bin_len)",
          "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
          "110:     CHECK_STATE(len != 2 * _max_length + 1);",
          "112:     CHECK_STATE(len <= 2 * _max_length );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132: bool sign(const char *_encryptedKeyHex, const char *_hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "133:           char *_sig) {",
          "134:     auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "136:     auto hash = make_shared<array<uint8_t, 32>>();",
          "138:     uint64_t binLen;",
          "141:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "142:     }",
          "",
          "[Removed Lines]",
          "140:     if (!hex2carray(_hashHex, &binLen, hash->data())) {",
          "",
          "[Added Lines]",
          "138:     CHECK_STATE(_encryptedKeyHex);",
          "139:     CHECK_STATE(_hashHex);",
          "140:     CHECK_STATE(_sig);",
          "148:     if (!hex2carray(_hashHex, &binLen, hash->data(), hash->size())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153: }",
          "155: bool sign_aes(const char *_encryptedKeyHex, const char *_hashHex, size_t _t, size_t _n, char *_sig) {",
          "156:     auto hash = make_shared<array<uint8_t, 32>>();",
          "158:     uint64_t binLen;",
          "161:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "162:     }",
          "",
          "[Removed Lines]",
          "160:     if (!hex2carray(_hashHex, &binLen, hash->data())) {",
          "",
          "[Added Lines]",
          "165:     CHECK_STATE(_encryptedKeyHex);",
          "166:     CHECK_STATE(_hashHex);",
          "167:     CHECK_STATE(_sig);",
          "173:     if (!hex2carray(_hashHex, &binLen, hash->data(), hash->size())) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:     SAFE_UINT8_BUF(encryptedKey,BUF_LEN);",
          "198:     if (!result) {",
          "199:         BOOST_THROW_EXCEPTION(invalid_argument(\"Invalid hex encrypted key\"));",
          "",
          "[Removed Lines]",
          "196:     bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey);",
          "",
          "[Added Lines]",
          "209:     bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "241:     HANDLE_TRUSTED_FUNCTION_ERROR(status, *errStatus, errMsg.data());",
          "248: }",
          "",
          "[Removed Lines]",
          "243:     string result(2 * BUF_LEN, '\\0');",
          "245:     carray2Hex(encryptedKey->data(), encryptedLen, &result.front());",
          "247:     return result;",
          "",
          "[Added Lines]",
          "256:     SAFE_CHAR_BUF(resultBuf, 2 * BUF_LEN + 1);",
          "258:     carray2Hex(encryptedKey->data(), encryptedLen, resultBuf, 2 * BUF_LEN + 1);",
          "260:     return string(resultBuf);",
          "",
          "---------------"
        ],
        "BLSCrypto.h||BLSCrypto.h": [
          "File: BLSCrypto.h -> BLSCrypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: EXTERNC int char2int(char _input);",
          "42: EXTERNC bool hex2carray(const char * _hex, uint64_t  *_bin_len,",
          "49: std::string encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key);",
          "",
          "[Removed Lines]",
          "41: EXTERNC void  carray2Hex(const unsigned char *d, int _len, char* _hexArray);",
          "43:                         uint8_t* _bin );",
          "44: EXTERNC bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "45:                  uint8_t* _bin, const int _max_length );",
          "",
          "[Added Lines]",
          "41: EXTERNC void  carray2Hex(const unsigned char *d, uint64_t , char* _hexArray,",
          "42:                          uint64_t _hexArrayLen);",
          "44:                  uint8_t* _bin, uint64_t _max_length );",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     SAFE_UINT8_BUF(encryptedKey, BUF_LEN);",
          "145:     if (!result) {",
          "146:         spdlog::error(\"Invalid hex encrypted key\");",
          "",
          "[Removed Lines]",
          "143:     bool result = hex2carray(encryptedKeyHex->c_str(), &sz, encryptedKey);",
          "",
          "[Added Lines]",
          "143:     bool result = hex2carray(encryptedKeyHex->c_str(), &sz, encryptedKey,",
          "144:                              BUF_LEN);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     uint64_t length = enc_len;;",
          "150:     CHECK_STATE(encrypted_dkg_secret.size() >= length);",
          "152:     string result(hexEncrPoly.data());",
          "154:     return result;",
          "",
          "[Removed Lines]",
          "149:     vector<char> hexEncrPoly(2 * length + 1, 0);",
          "151:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data());",
          "",
          "[Added Lines]",
          "149:     vector<char> hexEncrPoly(BUF_LEN, 0);",
          "151:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data(), BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     vector <uint8_t> encrDKGPoly(2 * BUF_LEN, 0);",
          "172:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "173:     }",
          "",
          "[Removed Lines]",
          "171:     if (!hex2carray2(encryptedPolyHex, &encLen, encrDKGPoly.data(), 6100)) {",
          "",
          "[Added Lines]",
          "171:     if (!hex2carray(encryptedPolyHex, &encLen, encrDKGPoly.data(), 6100)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:     vector<char> hexEncrKey(BUF_LEN, 0);",
          "199:     vector<char> errMsg1(BUF_LEN, 0);",
          "200:     int errStatus = 0;",
          "201:     uint64_t encLen = 0;",
          "206:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "207:     }",
          "",
          "[Removed Lines]",
          "203:     vector <uint8_t> encrDKGPoly(BUF_LEN, 0);",
          "205:     if (!hex2carray2(_encryptedPolyHex, &encLen, encrDKGPoly.data(), 6100)) {",
          "",
          "[Added Lines]",
          "200:     vector <uint8_t> encrDKGPoly(BUF_LEN, 0);",
          "206:     if (!hex2carray(_encryptedPolyHex, &encLen, encrDKGPoly.data(), BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:         result += string(currentShare.data());",
          "236:         spdlog::debug(\"dec len is {}\", decLen);",
          "238:         string dhKeyName = \"DKG_DH_KEY_\" + _polyName + \"_\" + to_string(i) + \":\";",
          "240:         spdlog::debug(\"hexEncr DH Key: { }\", hexEncrKey.data());",
          "",
          "[Removed Lines]",
          "237:         carray2Hex(encryptedSkey.data(), decLen, hexEncrKey.data());",
          "",
          "[Added Lines]",
          "238:         carray2Hex(encryptedSkey.data(), decLen, hexEncrKey.data(), BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:     int result = 0;",
          "268:     SAFE_UINT8_BUF(encr_key, BUF_LEN);",
          "270:         throw SGXException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "271:     }",
          "",
          "[Removed Lines]",
          "269:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key)) {",
          "",
          "[Added Lines]",
          "270:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key, BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:     uint64_t decKeyLen;",
          "296:     SAFE_UINT8_BUF(encr_bls_key,BUF_LEN);",
          "297:     SAFE_UINT8_BUF(encr_key,BUF_LEN);",
          "299:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "300:     }",
          "",
          "[Removed Lines]",
          "298:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key)) {",
          "",
          "[Added Lines]",
          "299:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key, BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:     SAFE_CHAR_BUF(hexBLSKey,2 * BUF_LEN)",
          "313:     SGXWalletServer::writeDataToDB(blsKeyName, hexBLSKey);",
          "",
          "[Removed Lines]",
          "311:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "",
          "[Added Lines]",
          "312:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey, 2 * BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "321:     CHECK_STATE(encryptedKeyHex);",
          "323:     vector<char> errMsg1(BUF_LEN, 0);",
          "328:     SAFE_UINT8_BUF(encrKey, BUF_LEN);",
          "330:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "331:     }",
          "",
          "[Removed Lines]",
          "324:     int errStatus = 0;",
          "326:     uint64_t decKeyLen;",
          "329:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encrKey)) {",
          "",
          "[Added Lines]",
          "326:     int errStatus = 0;",
          "327:     uint64_t decKeyLen = 0;",
          "330:     if (!hex2carray(encryptedKeyHex, &decKeyLen, encrKey, BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "407:     uint64_t dhEncLen = 0;",
          "408:     SAFE_UINT8_BUF(encryptedDHKey, BUF_LEN);",
          "410:         throw SGXException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "411:     }",
          "412:     spdlog::debug(\"encr DH key length is {}\", dhEncLen);",
          "",
          "[Removed Lines]",
          "409:     if (!hex2carray(hexEncrKeyPtr->c_str(), &dhEncLen, encryptedDHKey)) {",
          "",
          "[Added Lines]",
          "410:     if (!hex2carray(hexEncrKeyPtr->c_str(), &dhEncLen, encryptedDHKey, BUF_LEN)) {",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     vector<char> hexEncrKey(BUF_LEN * 2, 0);",
          "70:     keys.at(0) = hexEncrKey.data();",
          "71:     keys.at(1) = string(pub_key_x.data()) + string(pub_key_y.data());",
          "73:     vector<unsigned char> randBuffer(32, 0);",
          "74:     fillRandomBuffer(randBuffer);",
          "80:     keys.at(2) = rand_str.data();",
          "",
          "[Removed Lines]",
          "69:     carray2Hex(encr_pr_key.data(), enc_len, hexEncrKey.data());",
          "76:     vector<char> rand_str(64, 0);",
          "78:     carray2Hex(randBuffer.data(), 32, rand_str.data());",
          "",
          "[Added Lines]",
          "69:     carray2Hex(encr_pr_key.data(), enc_len, hexEncrKey.data(),",
          "70:                BUF_LEN * 2);",
          "77:     vector<char> rand_str(BUF_LEN, 0);",
          "79:     carray2Hex(randBuffer.data(), 32, rand_str.data(), BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     int errStatus = 0;",
          "94:     uint64_t enc_len = 0;",
          "97:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "98:     }",
          "",
          "[Removed Lines]",
          "96:     if (!hex2carray(_encryptedKeyHex.c_str(), &enc_len, encrPrKey.data())) {",
          "",
          "[Added Lines]",
          "97:     if (!hex2carray(_encryptedKeyHex.c_str(), &enc_len, encrPrKey.data(),",
          "98:                     BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:     string pubKeyStr = \"\";",
          "181:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "182:     }",
          "",
          "[Removed Lines]",
          "180:     if (!hex2carray(encryptedKeyHex.c_str(), &decLen, encryptedKey.data())) {",
          "",
          "[Added Lines]",
          "182:     if (!hex2carray(encryptedKeyHex.c_str(), &decLen, encryptedKey.data(),",
          "183:                     BUF_LEN)) {",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "69:     LevelDB::getLevelDb()->writeDataUnique(\"TEST_KEY\", hexEncrKey.data());",
          "70: }",
          "",
          "[Removed Lines]",
          "67:     carray2Hex(encrypted_key, enc_len, hexEncrKey.data());",
          "",
          "[Added Lines]",
          "67:     carray2Hex(encrypted_key, enc_len, hexEncrKey.data(), 2 * enc_len + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     vector <uint8_t> encr_test_key(BUF_LEN, 0);",
          "76:     uint64_t len;",
          "79:         spdlog::error(\"Corrupt test key is LevelDB\");",
          "80:         exit(-1);",
          "81:     }",
          "",
          "[Removed Lines]",
          "78:     if (!hex2carray(test_key_ptr->c_str(), &len, encr_test_key.data())) {",
          "",
          "[Added Lines]",
          "78:     if (!hex2carray(test_key_ptr->c_str(), &len, encr_test_key.data(),",
          "79:                     BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "136:     ofstream sek_file(BACKUP_PATH);",
          "137:     sek_file.clear();",
          "",
          "[Removed Lines]",
          "134:     carray2Hex(encrypted_SEK.data(), enc_len, hexEncrKey.data());",
          "",
          "[Added Lines]",
          "135:     carray2Hex(encrypted_SEK.data(), enc_len, hexEncrKey.data(), 2 * enc_len + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:     uint64_t len = 0;",
          "175:         throw SGXException(INVALID_HEX, \"Invalid encrypted SEK Hex\");",
          "176:     }",
          "",
          "[Removed Lines]",
          "174:     if (!hex2carray(hex_encrypted_SEK->c_str(), &len, encrypted_SEK)) {",
          "",
          "[Added Lines]",
          "175:     if (!hex2carray(hex_encrypted_SEK->c_str(), &len, encrypted_SEK,",
          "176:                     BUF_LEN)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "220:     vector<char> hexEncrKey(BUF_LEN, 0);",
          "224:     spdlog::info(\"Got sealed storage encryption key.\");",
          "",
          "[Removed Lines]",
          "222:     carray2Hex(encrypted_SEK->data(), encrypted_SEK->size(), hexEncrKey.data());",
          "",
          "[Added Lines]",
          "224:     carray2Hex(encrypted_SEK->data(), encrypted_SEK->size(), hexEncrKey.data(),",
          "225:                BUF_LEN);",
          "",
          "---------------"
        ],
        "TestUtils.cpp||TestUtils.cpp": [
          "File: TestUtils.cpp -> TestUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"third_party/intel/create_enclave.h\"",
          "33: #include \"secure_enclave_u.h\"",
          "34: #include \"third_party/intel/sgx_detect.h\"",
          "35: #include <gmp.h>",
          "36: #include <sgx_urts.h>",
          "37: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"third_party/spdlog/spdlog.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     auto hash_arr = make_shared < array < uint8_t, 32 >> ();",
          "220:     uint64_t binLen;",
          "222:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "223:     }",
          "",
          "[Removed Lines]",
          "221:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "",
          "[Added Lines]",
          "222:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data(), 32)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:     auto hash_arr = make_shared<array<uint8_t, 32 >>();",
          "353:     uint64_t binLen;",
          "355:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "356:     }",
          "",
          "[Removed Lines]",
          "354:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "",
          "[Added Lines]",
          "355:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data(), 32)) {",
          "",
          "---------------"
        ],
        "common.h||common.h": [
          "File: common.h -> common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #define __CLASS_NAME__ className( __PRETTY_FUNCTION__ )",
          "55: #define CHECK_STATE(_EXPRESSION_) \\",
          "56:     if (!(_EXPRESSION_)) { \\",
          "57:         auto __msg__ = std::string(\"State check failed::\") + #_EXPRESSION_ +  \" \" + std::string(__FILE__) + \":\" + std::to_string(__LINE__); \\",
          "58:         throw InvalidStateException(__msg__, __CLASS_NAME__);}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #include <execinfo.h>",
          "57: inline void print_stack() {",
          "58:     void *array[10];",
          "59:     size_t size;",
          "62:     size = backtrace(array, 10);",
          "65:     fprintf(stderr, \"Error: signal \\n\");",
          "66:     backtrace_symbols_fd(array, size, STDERR_FILENO);",
          "67:     exit(1);",
          "68: }",
          "74:         print_stack();                                \\",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:     uint64_t binLen;",
          "653:         throw SGXException(INVALID_HEX, \"Invalid hash\");",
          "654:     }",
          "",
          "[Removed Lines]",
          "652:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data())) {",
          "",
          "[Added Lines]",
          "652:     if (!hex2carray(hash.c_str(), &binLen, hash_arr->data(), 32)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c69b319c949f151b32b8589eb8ce4058a7be2da",
      "candidate_info": {
        "commit_hash": "7c69b319c949f151b32b8589eb8ce4058a7be2da",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/7c69b319c949f151b32b8589eb8ce4058a7be2da",
        "files": [
          "DKGCrypto.cpp",
          "secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp",
          "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp"
        ],
        "secure_enclave/EnclaveCommon.cpp||secure_enclave/EnclaveCommon.cpp": [
          "File: secure_enclave/EnclaveCommon.cpp -> secure_enclave/EnclaveCommon.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: using namespace std;",
          "39: string *stringFromKey(libff::alt_bn128_Fr *_key) {",
          "40:     mpz_t t;",
          "41:     mpz_init(t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: thread_local  uint8_t* decryptedDkgPoly1 = nullptr;",
          "41: uint8_t* getThreadLocalDecryptedDkgPoly() {",
          "42:     if (decryptedDkgPoly1 == nullptr) {",
          "43:         decryptedDkgPoly1 = (uint8_t*) calloc(DKG_BUFER_LENGTH, 1);",
          "44:     }",
          "45:     return decryptedDkgPoly1;",
          "46: }",
          "",
          "---------------"
        ],
        "secure_enclave/EnclaveCommon.h||secure_enclave/EnclaveCommon.h": [
          "File: secure_enclave/EnclaveCommon.h -> secure_enclave/EnclaveCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: void get_global_random(unsigned char* _randBuff, uint64_t size);",
          "50: EXTERNC void LOG_INFO(const char* msg);",
          "51: EXTERNC void LOG_WARN(const char* _msg);",
          "52: EXTERNC void LOG_ERROR(const char* _msg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: EXTERNC uint8_t* getThreadLocalDecryptedDkgPoly();",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include \"EnclaveConstants.h\"",
          "57: #include \"EnclaveCommon.h\"",
          "61: void *(*gmp_realloc_func)(void *, size_t, size_t);",
          "",
          "[Removed Lines]",
          "59: uint8_t decryptedDkgPoly[DKG_BUFER_LENGTH];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:         LOG_ERROR(\"State check failed::\");LOG_ERROR(#_EXPRESSION_); \\",
          "143:         LOG_ERROR(__FILE__); LOG_ERROR(__LINE__);                   \\",
          "144:         snprintf(errString, BUF_LEN, \"State check failed. Check log.\"); \\",
          "145:         goto clean;}",
          "147: void get_global_random(unsigned char *_randBuff, uint64_t _size) {",
          "149:     char errString[BUF_LEN];",
          "150:     CHECK_STATE(_size <= 32)",
          "151:     CHECK_STATE(_randBuff);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     int *errStatus;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486: void trustedDecryptKey(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "487:                        uint32_t enc_len, char *key) {",
          "488:     LOG_DEBUG(__FUNCTION__);",
          "490:     uint32_t decLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     CHECK_STATE(key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523:                            char *_hashY, char *signature) {",
          "524:     LOG_DEBUG(__FUNCTION__);",
          "526:     char key[BUF_LEN];",
          "527:     char *sig = (char *) calloc(BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:     CHECK_STATE(encryptedPrivateKey);",
          "532:     CHECK_STATE(_hashX);",
          "533:     CHECK_STATE(_hashY);",
          "534:     CHECK_STATE(signature);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "550: void trustedGenDkgSecret(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "551:     LOG_DEBUG(__FUNCTION__);",
          "553:     char dkg_secret[DKG_BUFER_LENGTH];",
          "555:     if (gen_dkg_poly(dkg_secret, _t) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "576:                         uint32_t *dec_len) {",
          "577:     LOG_DEBUG(__FUNCTION__);",
          "579:     uint32_t decr_len;",
          "580:     sgx_status_t status = sgx_unseal_data(",
          "581:             (const sgx_sealed_data_t *) encrypted_dkg_secret, NULL, 0, decrypted_dkg_secret, &decr_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "592: void trustedGetSecretShares(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *dec_len,",
          "593:                             char *secret_shares,",
          "594:                             unsigned _t, unsigned _n) {",
          "595:     LOG_DEBUG(__FUNCTION__);",
          "597:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:     CHECK_STATE(encrypted_dkg_secret);",
          "611:     CHECK_STATE(secret_shares);",
          "612:     CHECK_STATE(_t <= _n);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "614:                             unsigned _t, unsigned _n) {",
          "615:     LOG_DEBUG(__FUNCTION__);",
          "617:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "618:     uint32_t decr_len;",
          "619:     trustedDecryptDkgSecret(errStatus, errString, (uint8_t *) encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:     CHECK_STATE(encrypted_dkg_secret);",
          "637:     CHECK_STATE(public_shares);",
          "638:     CHECK_STATE(_t <= _n);",
          "639:     CHECK_STATE(_n > 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "636: void trustedSetEncryptedDkgPoly(int *errStatus, char *errString, uint8_t *encrypted_poly) {",
          "637:     LOG_DEBUG(__FUNCTION__);",
          "640:     uint32_t decr_len;",
          "641:     sgx_status_t status = sgx_unseal_data(",
          "644:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "639:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "642:             (const sgx_sealed_data_t *) encrypted_poly, NULL, 0, decryptedDkgPoly, &decr_len);",
          "",
          "[Added Lines]",
          "663:     CHECK_STATE(encrypted_poly);",
          "665:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "668:             (const sgx_sealed_data_t *) encrypted_poly, NULL, 0,",
          "669:             getThreadLocalDecryptedDkgPoly(), &decr_len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "651: void trustedGetEncryptedSecretShare(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "652:                                     char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "653:                                     uint8_t ind) {",
          "654:     LOG_DEBUG(__FUNCTION__);",
          "656:     char skey[ECDSA_SKEY_LEN];",
          "657:     char pub_key_x[BUF_LEN];",
          "658:     memset(pub_key_x, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684:     CHECK_STATE(encrypted_skey)",
          "685:     CHECK_STATE(result_str);",
          "686:     CHECK_STATE(s_shareG2);",
          "687:     CHECK_STATE(pub_keyB);",
          "688:     CHECK_STATE(_t <= _n);",
          "689:     CHECK_STATE(_n > 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "681:     gen_session_key(skey, pub_keyB, common_key);",
          "682:     char *s_share[ECDSA_SKEY_LEN];;",
          "686:         snprintf(errString, BUF_LEN, \"\\nt does not match poly degree\\n\");",
          "687:         return;",
          "",
          "[Removed Lines]",
          "684:     if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {",
          "",
          "[Added Lines]",
          "720:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "710:                               uint32_t *dec_len, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "711:     LOG_DEBUG(__FUNCTION__);",
          "714:     char decrypted_dkg_secret[DKG_BUFER_LENGTH];",
          "715:     trustedDecryptDkgSecret(errStatus, errString, encrypted_dkg_secret, (uint8_t *) decrypted_dkg_secret, dec_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:     CHECK_STATE(encrypted_dkg_secret);",
          "750:     CHECK_STATE(s_shareG2);",
          "751:     CHECK_STATE(_t <= _n);",
          "752:     CHECK_STATE(_n > 0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "725:                       uint8_t *encryptedPrivateKey, uint64_t key_len, unsigned _t, int _ind, int *result) {",
          "726:     LOG_DEBUG(__FUNCTION__);",
          "728:     char skey[ECDSA_SKEY_LEN];",
          "729:     sgx_status_t status = sgx_unseal_data(",
          "730:             (const sgx_sealed_data_t *) encryptedPrivateKey, NULL, 0, (uint8_t *) skey, &key_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:     CHECK_STATE(public_shares);",
          "769:     CHECK_STATE(s_share);",
          "770:     CHECK_STATE(encryptedPrivateKey);",
          "771:     CHECK_STATE(_t);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "775:                          uint32_t *enc_bls_key_len) {",
          "776:     LOG_DEBUG(__FUNCTION__);",
          "778:     char skey[ECDSA_SKEY_LEN];",
          "779:     sgx_status_t status = sgx_unseal_data(",
          "780:             (const sgx_sealed_data_t *) encryptedPrivateKey, NULL, 0, (uint8_t *) skey, &key_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "823:     CHECK_STATE(encryptedPrivateKey);",
          "824:     CHECK_STATE(s_shares);",
          "825:     CHECK_STATE(encr_bls_key);",
          "827:     CHECK_STATE(s_shares);",
          "828:     CHECK_STATE(encryptedPrivateKey);",
          "829:     CHECK_STATE(encr_bls_key);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "867:                          char *bls_pub_key) {",
          "868:     LOG_DEBUG(__FUNCTION__);",
          "870:     char skey_hex[ECDSA_SKEY_LEN];",
          "872:     uint32_t len = key_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:     CHECK_STATE(encryptedPrivateKey);",
          "925:     CHECK_STATE(bls_pub_key);",
          "927:     CHECK_STATE(encryptedPrivateKey);",
          "928:     CHECK_STATE(bls_pub_key);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "890:                         uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "891:     LOG_DEBUG(__FUNCTION__);",
          "893:     uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "894:     sgx_read_rand(SEK_raw, SGX_AESGCM_KEY_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:     CHECK_STATE(encrypted_SEK);",
          "955:     CHECK_STATE(SEK_hex);",
          "957:     CHECK_STATE(encrypted_SEK);",
          "958:     CHECK_STATE(SEK_hex);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "916: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "917:     LOG_DEBUG(__FUNCTION__);",
          "919:     uint8_t aes_key_hex[SGX_AESGCM_KEY_SIZE * 2];",
          "920:     memset(aes_key_hex, 0, SGX_AESGCM_KEY_SIZE * 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986:     CHECK_STATE(encrypted_SEK);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "935:                           uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "936:     LOG_DEBUG(__FUNCTION__);",
          "938:     uint64_t len;",
          "939:     hex2carray(SEK_hex, &len, (uint8_t *) AES_key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:     CHECK_STATE(encrypted_SEK);",
          "1009:     CHECK_STATE(SEK_hex);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "954: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "955:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "956:     LOG_DEBUG(__FUNCTION__);",
          "958:     domain_parameters curve = domain_parameters_init();",
          "959:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030:     CHECK_STATE(encryptedPrivateKey);",
          "1031:     CHECK_STATE(pub_key_x); CHECK_STATE(pub_key_y);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1043:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1044:     LOG_DEBUG(__FUNCTION__);",
          "1046:     domain_parameters curve = domain_parameters_init();",
          "1047:     domain_parameters_load_curve(curve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:     CHECK_STATE(encryptedPrivateKey);",
          "1122:     CHECK_STATE(pub_key_x); CHECK_STATE(pub_key_y);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1128:                          unsigned char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
          "1129:     LOG_DEBUG(__FUNCTION__);",
          "1131:     if (!ecdsaCurve) {",
          "1132:         ecdsaCurve = domain_parameters_init();",
          "1133:         domain_parameters_load_curve(ecdsaCurve, secp256k1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1209:     CHECK_STATE(encryptedPrivateKey);",
          "1210:     CHECK_STATE(hash);",
          "1211:     CHECK_STATE(sigR);",
          "1212:     CHECK_STATE(sigS);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1220:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "1221:     LOG_DEBUG(__FUNCTION__);",
          "1225:     memset(errString, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306:     CHECK_STATE(key);",
          "1307:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1267:                           uint32_t enc_len, char *key) {",
          "1268:     LOG_DEBUG(__FUNCTION__);",
          "1272:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1356:     CHECK_STATE(encryptedPrivateKey);",
          "1357:     CHECK_STATE(key);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1295:                               char *_hashY, char *signature) {",
          "1296:     LOG_DEBUG(__FUNCTION__);",
          "1298:     char key[BUF_LEN];",
          "1299:     memset(key, 0, BUF_LEN);",
          "1300:     char sig[BUF_LEN];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1388:     CHECK_STATE(encryptedPrivateKey);",
          "1389:     CHECK_STATE(_hashX);",
          "1390:     CHECK_STATE(_hashY);",
          "1391:     CHECK_STATE(signature);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1322: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
          "1323:     LOG_DEBUG(__FUNCTION__);",
          "1325:     char dkg_secret[DKG_BUFER_LENGTH];",
          "1326:     memset(dkg_secret, 0, DKG_BUFER_LENGTH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:     CHECK_STATE(encrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1364:                            uint32_t *dec_len) {",
          "1365:     LOG_DEBUG(__FUNCTION__);",
          "1367:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret,",
          "1368:                              3072);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1465:     CHECK_STATE(encrypted_dkg_secret);",
          "1466:     CHECK_STATE(decrypted_dkg_secret);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1374:     }",
          "1375: }",
          "1377: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t *enc_len) {",
          "1378:     LOG_DEBUG(__FUNCTION__);",
          "1382:                              DKG_BUFER_LENGTH);",
          "1384:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "1380:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "1381:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) decryptedDkgPoly,",
          "",
          "[Added Lines]",
          "1482:     CHECK_STATE(encrypted_poly);",
          "1484:     memset(getThreadLocalDecryptedDkgPoly(), 0, DKG_BUFER_LENGTH);",
          "1485:     int status = AES_decrypt(encrypted_poly, *enc_len, (char *) getThreadLocalDecryptedDkgPoly(),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1391: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "1392:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "1393:                                        uint8_t ind) {",
          "1394:     LOG_DEBUG(__FUNCTION__);",
          "1396:     char skey[ECDSA_SKEY_LEN];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1499:     CHECK_STATE(encrypted_skey);",
          "1500:     CHECK_STATE(result_str);",
          "1501:     CHECK_STATE(s_shareG2);",
          "1502:     CHECK_STATE(pub_keyB);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1425:     char *s_share[ECDSA_SKEY_LEN];",
          "1430:         snprintf(errString, BUF_LEN, \"calc secret share failed\");",
          "",
          "[Removed Lines]",
          "1427:     if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {",
          "",
          "[Added Lines]",
          "1537:     if (calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind) != 0) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1455:                                unsigned _t, unsigned _n) {",
          "1456:     LOG_DEBUG(__FUNCTION__);",
          "1458:     char *decrypted_dkg_secret = (char *) calloc(DKG_MAX_SEALED_LEN, 1);",
          "1459:     memset(decrypted_dkg_secret, 0, DKG_MAX_SEALED_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1568:     CHECK_STATE(encrypted_dkg_secret);",
          "1569:     CHECK_STATE(public_shares);",
          "1570:     CHECK_STATE(_t <= _n && _n > 0)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1482:                          uint8_t *encryptedPrivateKey, uint64_t enc_len, unsigned _t, int _ind, int *result) {",
          "1483:     LOG_DEBUG(__FUNCTION__);",
          "1485:     char skey[ECDSA_SKEY_LEN];",
          "1486:     memset(skey, 0, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1599:     CHECK_STATE(public_shares);",
          "1600:     CHECK_STATE(s_share);",
          "1601:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1537:                             uint32_t *enc_bls_key_len) {",
          "1538:     LOG_DEBUG(__FUNCTION__);",
          "1540:     char skey[ECDSA_SKEY_LEN];",
          "1541:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
          "1542:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1658:     CHECK_STATE(s_shares);",
          "1659:     CHECK_STATE(encryptedPrivateKey);",
          "1660:     CHECK_STATE(encr_bls_key);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1649:                        char *bls_pub_key) {",
          "1650:     LOG_DEBUG(__FUNCTION__);",
          "1652:     char skey_hex[ECDSA_SKEY_LEN];",
          "1654:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:     CHECK_STATE(bls_pub_key);",
          "1776:     CHECK_STATE(encryptedPrivateKey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0381f2a6cb2162f0afdcbba718843981617a915",
      "candidate_info": {
        "commit_hash": "f0381f2a6cb2162f0afdcbba718843981617a915",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/f0381f2a6cb2162f0afdcbba718843981617a915",
        "files": [
          "SEKManager.cpp",
          "SGXRegistrationServer.cpp",
          "scripts/docker_test.py",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-2003 Add -y flag",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "scripts/docker_test.py||scripts/docker_test.py",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   return s1.compare(s2);",
          "44: }",
          "46: void gen_SEK(){",
          "48:   vector<char> errMsg(1024,0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: void create_test_key(){",
          "47:   int errStatus =  0;",
          "48:   vector<char> errMsg(1024,0);",
          "49:   uint32_t enc_len;",
          "51:   uint8_t encrypted_key[BUF_LEN];",
          "52:   memset(encrypted_key, 0, BUF_LEN);",
          "54:   std::string key = TEST_VALUE;",
          "56:   status = encrypt_key_aes(eid, &errStatus, errMsg.data(),key.c_str(), encrypted_key, &enc_len);",
          "57:   if ( status != 0){",
          "58:     throw RPCException(status, errMsg.data()) ;",
          "59:   }",
          "61:   vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "63:   carray2Hex(encrypted_key, enc_len, hexEncrKey.data());",
          "65:   LevelDB::getLevelDb() -> writeDataUnique(\"TEST_KEY\", hexEncrKey.data());",
          "66: }",
          "68: bool check_SEK(std::string SEK){",
          "69:    std::shared_ptr <std::string> test_key_ptr = LevelDB::getLevelDb() -> readString(\"TEST_KEY\");",
          "75:     vector<uint8_t> encr_test_key(BUF_LEN, 0);",
          "76:     uint64_t len;",
          "77:     if ( !hex2carray(test_key_ptr->c_str(), &len, encr_test_key.data())){",
          "78:       spdlog::error(\"wrong test key\" );",
          "79:       exit(-1);",
          "80:     }",
          "86:     vector<char> decr_key(1024,0);",
          "87:     vector<char> errMsg(1024,0);",
          "88:     int err_status = 0;",
          "90:     vector<uint8_t> encr_SEK(1024,0);",
          "92:     uint32_t l = len;",
          "93:     std::cerr << \" l is \" << l << std::endl;",
          "95:     status = set_SEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), (uint32_t*)&len, SEK.c_str() );",
          "96:     if (status != SGX_SUCCESS){",
          "97:       cerr << \"RPCException thrown with status \" << status << endl;",
          "98:       throw RPCException(status, errMsg.data());",
          "99:     }",
          "106:     status = decrypt_key_aes(eid, &err_status, errMsg.data(), encr_test_key.data(), len, decr_key.data());",
          "107:     if (status != 0){",
          "108:       spdlog::error(\"failed to decrypt test key\" );",
          "109:       exit(-1);",
          "110:     }",
          "112:     std::cerr << \"decr test key is \" << std::endl;",
          "113:     for ( int i = 0; i < BUF_LEN; i++ ){",
          "114:       std::cerr << (int)decr_key[i] << \" \";",
          "115:     }",
          "117:     std::string test_key = TEST_VALUE;",
          "118:     std::cerr << \"test key is \" << test_key << std::endl;",
          "119:     if (test_key.compare(decr_key.data())!= 0){",
          "120:       std::cerr << \"decrypted key is \" << decr_key.data() << std::endl;",
          "121:       spdlog::error(\"Invalid SEK\" );",
          "122:       return false;",
          "123:     }",
          "124:     return true;",
          "126: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   cout << \"ATTENTION! THIS IS YOUR KEY FOR BACK UP. PLEASE COPY IT TO THE SAFE PLACE\" << endl;",
          "67:   cout << \"key is \" << SEK << endl;",
          "76:   system(\"reset\");",
          "77:   LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey.data());",
          "79: }",
          "81: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "",
          "[Removed Lines]",
          "69:   std::string confirm_str = \"I confirm\";",
          "70:   std::string buffer;",
          "71:   do{",
          "72:     std::cout << \" DO YOU CONFIRM THAT YOU COPIED THE KEY? (if you confirm type - I confirm)\" << std::endl;",
          "73:     std::getline(std::cin, buffer);",
          "74:   } while (case_insensitive_match(confirm_str, buffer)); //(strcmp(confirm_str.c_str(), buffer.c_str()) != 0);",
          "",
          "[Added Lines]",
          "151:   if (!autoconfirm) {",
          "152:     std::string confirm_str = \"I confirm\";",
          "153:     std::string buffer;",
          "154:     do {",
          "155:       std::cout << \" DO YOU CONFIRM THAT YOU COPIED THE KEY? (if you confirm type - I confirm)\"",
          "156:                 << std::endl;",
          "157:       std::getline(std::cin, buffer);",
          "158:     } while (case_insensitive_match(confirm_str, buffer)); //(strcmp(confirm_str.c_str(), buffer.c_str()) != 0);",
          "159:   }",
          "163:   create_test_key();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   }",
          "104:   std::cerr << \"status is \" << status << std::endl;",
          "108: }",
          "",
          "[Removed Lines]",
          "105:   std::cerr << \" aes key is \" << errMsg.data() << std::endl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:   vector<uint8_t> encr_SEK(BUF_LEN, 0);",
          "114:   uint32_t enc_len;",
          "116:   std::string SEK;",
          "117:   std::cout << \"ENTER BACKUP KEY\" << std::endl;",
          "118:   std::cin >> SEK;",
          "120:     std::cout << \"KEY IS INVALID.TRY ONCE MORE\" << std::endl;",
          "121:     SEK = \"\";",
          "122:     std::cin >> SEK;",
          "123:   }",
          "124:   if (DEBUG_PRINT)",
          "127:   status = set_SEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK.c_str() );",
          "128:   if (status != SGX_SUCCESS){",
          "129:     cerr << \"RPCException thrown with status \" << status << endl;",
          "131:   }",
          "133:   vector<char> hexEncrKey(2 * enc_len + 1, 0);",
          "",
          "[Removed Lines]",
          "119:   while (!checkHex(SEK, 16)){",
          "125:     std::cerr << \"your key is \" << SEK << std::endl;",
          "130:     throw RPCException(status, errMsg.data()) ;",
          "",
          "[Added Lines]",
          "201:   std::shared_ptr <std::string> test_key_ptr = LevelDB::getLevelDb() -> readString(\"TEST_KEY\");",
          "202:   if (test_key_ptr == nullptr){",
          "203:     spdlog::error(\"empty db\" );",
          "204:     exit(-1);",
          "205:   }",
          "210:   while (!checkHex(SEK, 16) /*|| !check_SEK(SEK)*/){",
          "216:    std::cerr << \"your key is \" << SEK << std::endl;",
          "222:     throw RPCException(status, errMsg.data());",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: int DEBUG_PRINT = 0;",
          "50: int is_sgx_https = 1;",
          "51: int is_aes = 0;",
          "53: SGXRegistrationServer *regs = nullptr;",
          "54: HttpServer *hs2 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: bool autoconfirm = false;",
          "",
          "---------------"
        ],
        "scripts/docker_test.py||scripts/docker_test.py": [
          "File: scripts/docker_test.py -> scripts/docker_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: obj.communicate(input=b\"i confirm\", timeout=5)",
          "38: obj.terminate()",
          "39: obj.wait()",
          "",
          "[Removed Lines]",
          "36: obj = subprocess.Popen([\"docker\", \"run\", \"-v\", topDir + \"/sgx_data:/usr/src/sdk/sgx_data\",\"-d\", \"--network=host\", \"skalenetwork/\" + IMAGE_NAME +\":\" + TAG_POSTFIX], stdin=subprocess.PIPE)",
          "",
          "[Added Lines]",
          "36: obj = subprocess.Popen([\"docker\", \"run\", \"-v\", topDir + \"/sgx_data:/usr/src/sdk/sgx_data\",\"-d\", \"--network=host\", \"skalenetwork/\" + IMAGE_NAME +\":\" + TAG_POSTFIX], stdin=subprocess.PIPE, stdout=subprocess.PIPE)",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197: }",
          "1200:                  uint8_t *encrypted_key, uint32_t *enc_len) {",
          "",
          "[Removed Lines]",
          "1199: void encrypt_key_aes(int *err_status, char *err_string, char *key,",
          "",
          "[Added Lines]",
          "1199: void encrypt_key_aes(int *err_status, char *err_string, const char *key,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1206:   memset(err_string, 0, BUF_LEN);",
          "1215:   memset(encrypted_key, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "1208:   checkKey(err_status, err_string, key);",
          "1210:   if (*err_status != 0) {",
          "1211:     snprintf(err_string + strlen(err_string), BUF_LEN, \"check_key failed\");",
          "1212:     return;",
          "1213:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:                 public void encrypt_key_aes (",
          "216:                                 [user_check] int *err_status,",
          "217:                                 [out, count = 1024] char* err_string,",
          "219:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "220:                                 [user_check] uint32_t *enc_len);",
          "",
          "[Removed Lines]",
          "218:                                 [in, count = 1024] char* key,",
          "",
          "[Added Lines]",
          "218:                                 [in, count = 1024] const char* key,",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     exit(1);",
          "68:   }",
          "71:     switch (opt) {",
          "72:     case 'h':",
          "73:       if (strlen(argv[1]) == 2 ) {",
          "",
          "[Removed Lines]",
          "70:   while ((opt = getopt(argc, argv, \"cshd0ab\")) != -1) {",
          "",
          "[Added Lines]",
          "72:   while ((opt = getopt(argc, argv, \"cshd0aby\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     case 'b':",
          "100:       SEK_initializer = enter_SEK;",
          "101:       break;",
          "102:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "103:       exit(1);",
          "104:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     case 'y':",
          "105:        autoconfirm = true;",
          "106:        break;",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: extern int DEBUG_PRINT;",
          "39: extern int is_sgx_https;",
          "40: extern int is_aes;",
          "42: #define BUF_LEN 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: extern bool autoconfirm;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: #define ENCLAVE_NAME \"secure_enclave.signed.so\"",
          "98: #define SGXDATA_FOLDER \"sgx_data/\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #define TEST_VALUE \"1234567890\"",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1370: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1373:     {",
          "1375:         DEBUG_PRINT = 1;",
          "1376:         is_sgx_https = 0;",
          "1378:         init_all(false, false, init_SEK);",
          "1381:         int errStatus =  -1;",
          "1382:         char* errMsg = (char*) calloc(BUF_LEN, 1);",
          "1383:         uint32_t enc_len;",
          "1385:         std::string key = \"123456789\";",
          "1386:         uint8_t encrypted_key[BUF_LEN];",
          "1387:         memset(encrypted_key, 0, BUF_LEN);",
          "1389:         status = encrypt_key_aes(eid, &errStatus, errMsg, key.c_str(), encrypted_key, &enc_len);",
          "1391:         REQUIRE(status == 0);",
          "1392:         std::cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg << std::endl;",
          "1394:         char decr_key[BUF_LEN];",
          "1395:         memset(decr_key, 0, BUF_LEN);",
          "1396:         status = decrypt_key_aes(eid, &errStatus, errMsg, encrypted_key, enc_len, decr_key);",
          "1398:         REQUIRE(status == 0);",
          "1399:         std::cerr << \"key encrypted with status \" << status << \" err msg \" << errMsg << std::endl;",
          "1400:         std::cerr << \"decrypted key is \" << decr_key << std::endl;",
          "1402:         REQUIRE( key.compare(decr_key) == 0);",
          "1404:         sgx_destroy_enclave(eid);",
          "1407:     }",
          "1408: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}