{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f0406534ca4a465d11892a747a38c0e5c884cf2",
      "candidate_info": {
        "commit_hash": "5f0406534ca4a465d11892a747a38c0e5c884cf2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5f0406534ca4a465d11892a747a38c0e5c884cf2",
        "files": [
          "LICENSE",
          "node.gyp",
          "src/handle_wrap.cc",
          "src/handle_wrap.h",
          "src/ngx-queue.h",
          "src/node.cc",
          "src/req_wrap.h",
          "test/simple/test-process-active-wraps.js"
        ],
        "message": "process: add _getActiveHandles(), _getActiveRequests()\n\n* process._getActiveHandles() returns a list containing all active handles\n  (timers, sockets, etc.) that have not been unref'd.\n\n* process._getActiveRequests() returns a list of active requests (in-flight\n  actions like connecting to a remote host, writing data to a socket, etc.).",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/handle_wrap.h||src/handle_wrap.h",
          "src/ngx-queue.h||src/ngx-queue.h",
          "src/node.cc||src/node.cc",
          "src/req_wrap.h||src/req_wrap.h",
          "test/simple/test-process-active-wraps.js||test/simple/test-process-active-wraps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         'src/node_script.h',",
          "108:         'src/node_string.h',",
          "109:         'src/node_version.h',",
          "110:         'src/pipe_wrap.h',",
          "111:         'src/req_wrap.h',",
          "112:         'src/slab_allocator.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:         'src/ngx-queue.h',",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "23: #include \"handle_wrap.h\"",
          "25: namespace node {",
          "27: using v8::Object;",
          "28: using v8::Handle;",
          "29: using v8::Local;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"ngx-queue.h\"",
          "28: using v8::Array;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   }",
          "55: void HandleWrap::Initialize(Handle<Object> target) {",
          "57: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: extern ngx_queue_t handle_wrap_queue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:   assert(object->InternalFieldCount() > 0);",
          "126:   object_ = v8::Persistent<v8::Object>::New(object);",
          "127:   object_->SetPointerInInternalField(0, this);",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   ngx_queue_insert_tail(&handle_wrap_queue, &handle_wrap_queue_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137: HandleWrap::~HandleWrap() {",
          "138:   assert(object_.IsEmpty());",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   ngx_queue_remove(&handle_wrap_queue_);",
          "",
          "---------------"
        ],
        "src/handle_wrap.h||src/handle_wrap.h": [
          "File: src/handle_wrap.h -> src/handle_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef HANDLE_WRAP_H_",
          "23: #define HANDLE_WRAP_H_",
          "25: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"ngx-queue.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     v8::Persistent<v8::Object> object_;",
          "63:   private:",
          "64:     static void OnClose(uv_handle_t* handle);",
          "67:     uv_handle_t* handle__;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     friend v8::Handle<v8::Value> GetActiveHandles(const v8::Arguments&);",
          "68:     ngx_queue_t handle_wrap_queue_;",
          "",
          "---------------"
        ],
        "src/ngx-queue.h||src/ngx-queue.h": [
          "File: src/ngx-queue.h -> src/ngx-queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #ifndef NGX_QUEUE_H_INCLUDED_",
          "8: #define NGX_QUEUE_H_INCLUDED_",
          "11: typedef struct ngx_queue_s  ngx_queue_t;",
          "13: struct ngx_queue_s {",
          "14:     ngx_queue_t  *prev;",
          "15:     ngx_queue_t  *next;",
          "16: };",
          "19: #define ngx_queue_init(q)                                                     \\",
          "20:     (q)->prev = q;                                                            \\",
          "21:     (q)->next = q",
          "24: #define ngx_queue_empty(h)                                                    \\",
          "25:     (h == (h)->prev)",
          "28: #define ngx_queue_insert_head(h, x)                                           \\",
          "29:     (x)->next = (h)->next;                                                    \\",
          "30:     (x)->next->prev = x;                                                      \\",
          "31:     (x)->prev = h;                                                            \\",
          "32:     (h)->next = x",
          "35: #define ngx_queue_insert_after   ngx_queue_insert_head",
          "38: #define ngx_queue_insert_tail(h, x)                                           \\",
          "39:     (x)->prev = (h)->prev;                                                    \\",
          "40:     (x)->prev->next = x;                                                      \\",
          "41:     (x)->next = h;                                                            \\",
          "42:     (h)->prev = x",
          "45: #define ngx_queue_head(h)                                                     \\",
          "46:     (h)->next",
          "49: #define ngx_queue_last(h)                                                     \\",
          "50:     (h)->prev",
          "53: #define ngx_queue_sentinel(h)                                                 \\",
          "54:     (h)",
          "57: #define ngx_queue_next(q)                                                     \\",
          "58:     (q)->next",
          "61: #define ngx_queue_prev(q)                                                     \\",
          "62:     (q)->prev",
          "65: #if (NGX_DEBUG)",
          "67: #define ngx_queue_remove(x)                                                   \\",
          "68:     (x)->next->prev = (x)->prev;                                              \\",
          "69:     (x)->prev->next = (x)->next;                                              \\",
          "70:     (x)->prev = NULL;                                                         \\",
          "71:     (x)->next = NULL",
          "73: #else",
          "75: #define ngx_queue_remove(x)                                                   \\",
          "76:     (x)->next->prev = (x)->prev;                                              \\",
          "77:     (x)->prev->next = (x)->next",
          "79: #endif",
          "82: #define ngx_queue_split(h, q, n)                                              \\",
          "83:     (n)->prev = (h)->prev;                                                    \\",
          "84:     (n)->prev->next = n;                                                      \\",
          "85:     (n)->next = q;                                                            \\",
          "86:     (h)->prev = (q)->prev;                                                    \\",
          "87:     (h)->prev->next = h;                                                      \\",
          "88:     (q)->prev = n;",
          "91: #define ngx_queue_add(h, n)                                                   \\",
          "92:     (h)->prev->next = (n)->next;                                              \\",
          "93:     (n)->next->prev = (h)->prev;                                              \\",
          "94:     (h)->prev = (n)->prev;                                                    \\",
          "95:     (h)->prev->next = h;",
          "98: #define ngx_queue_data(q, type, link)                                         \\",
          "99:     (type *) ((unsigned char *) q - offsetof(type, link))",
          "102: #define ngx_queue_foreach(q, h)                                               \\",
          "103:     for ((q) = ngx_queue_head(h); (q) != (h); (q) = ngx_queue_next(q))",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"node.h\"",
          "25: #include \"uv.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"handle_wrap.h\" // HandleWrap::GetActiveHandles()",
          "",
          "[Added Lines]",
          "23: #include \"req_wrap.h\"",
          "24: #include \"handle_wrap.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: namespace node {",
          "95: Persistent<String> process_symbol;",
          "96: Persistent<String> domain_symbol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: ngx_queue_t handle_wrap_queue = { &handle_wrap_queue, &handle_wrap_queue };",
          "96: ngx_queue_t req_wrap_queue = { &req_wrap_queue, &req_wrap_queue };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1332: }",
          "1335: static Handle<Value> Abort(const Arguments& args) {",
          "1336:   abort();",
          "1337:   return Undefined();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1339: static Handle<Value> GetActiveRequests(const Arguments& args) {",
          "1340:   HandleScope scope;",
          "1342:   Local<Array> ary = Array::New();",
          "1343:   ngx_queue_t* q = NULL;",
          "1344:   int i = 0;",
          "1346:   ngx_queue_foreach(q, &req_wrap_queue) {",
          "1347:     ReqWrap<uv_req_t>* w = container_of(q, ReqWrap<uv_req_t>, req_wrap_queue_);",
          "1348:     if (w->object_.IsEmpty()) continue;",
          "1349:     ary->Set(i++, w->object_);",
          "1350:   }",
          "1352:   return scope.Close(ary);",
          "1353: }",
          "1358: Handle<Value> GetActiveHandles(const Arguments& args) {",
          "1359:   HandleScope scope;",
          "1361:   Local<Array> ary = Array::New();",
          "1362:   ngx_queue_t* q = NULL;",
          "1363:   int i = 0;",
          "1365:   ngx_queue_foreach(q, &handle_wrap_queue) {",
          "1366:     HandleWrap* w = container_of(q, HandleWrap, handle_wrap_queue_);",
          "1367:     if (w->object_.IsEmpty() || w->unref) continue;",
          "1368:     ary->Set(i++, w->object_);",
          "1369:   }",
          "1371:   return scope.Close(ary);",
          "1372: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2240:   NODE_SET_METHOD(process, \"_needTickCallback\", NeedTickCallback);",
          "2241:   NODE_SET_METHOD(process, \"reallyExit\", Exit);",
          "2242:   NODE_SET_METHOD(process, \"abort\", Abort);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2280:   NODE_SET_METHOD(process, \"_getActiveRequests\", GetActiveRequests);",
          "2281:   NODE_SET_METHOD(process, \"_getActiveHandles\", GetActiveHandles);",
          "",
          "---------------"
        ],
        "src/req_wrap.h||src/req_wrap.h": [
          "File: src/req_wrap.h -> src/req_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef REQ_WRAP_H_",
          "23: #define REQ_WRAP_H_",
          "25: namespace node {",
          "28: extern v8::Persistent<v8::String> process_symbol;",
          "29: extern v8::Persistent<v8::String> domain_symbol;",
          "31: template <typename T>",
          "32: class ReqWrap {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"ngx-queue.h\"",
          "32: extern ngx_queue_t req_wrap_queue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:       object_->Set(domain_symbol, domain);",
          "47:     }",
          "48:   }",
          "51:   ~ReqWrap() {",
          "53:     assert(req_.data == this);",
          "54:     assert(!object_.IsEmpty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     ngx_queue_insert_tail(&req_wrap_queue, &req_wrap_queue_);",
          "57:     ngx_queue_remove(&req_wrap_queue_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:   }",
          "64:   v8::Persistent<v8::Object> object_;",
          "66:   void* data_;",
          "67: };",
          "",
          "[Removed Lines]",
          "65:   T req_;",
          "",
          "[Added Lines]",
          "71:   ngx_queue_t req_wrap_queue_;",
          "73:   T req_; // *must* be last, GetActiveRequests() in node.cc depends on it",
          "",
          "---------------"
        ],
        "test/simple/test-process-active-wraps.js||test/simple/test-process-active-wraps.js": [
          "File: test/simple/test-process-active-wraps.js -> test/simple/test-process-active-wraps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var spawn = require('child_process').spawn;",
          "25: var net = require('net');",
          "27: function expect(activeHandles, activeRequests) {",
          "28:   assert.equal(process._getActiveHandles().length, activeHandles);",
          "29:   assert.equal(process._getActiveRequests().length, activeRequests);",
          "30: }",
          "32: (function() {",
          "33:   expect(0, 0);",
          "34:   var server = net.createServer().listen(common.PORT);",
          "35:   expect(1, 0);",
          "36:   server.close();",
          "37:   expect(1, 0); // server handle doesn't shut down until next tick",
          "38: })();",
          "40: (function() {",
          "41:   expect(1, 0);",
          "42:   var conn = net.createConnection(common.PORT);",
          "43:   conn.on('error', function() { /* ignore */ });",
          "44:   expect(2, 1);",
          "45:   conn.destroy();",
          "46:   expect(2, 1); // client handle doesn't shut down until next tick",
          "47: })();",
          "49: process.nextTick(function() {",
          "50:   process.nextTick(function() {",
          "52:     assert.equal(process._getActiveHandles().length, 0);",
          "53:   });",
          "54: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14b20ffc3006eaebb08840601a1330e5204c290c",
      "candidate_info": {
        "commit_hash": "14b20ffc3006eaebb08840601a1330e5204c290c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/14b20ffc3006eaebb08840601a1330e5204c290c",
        "files": [
          "test/simple/test-tls-over-http-tunnel.js"
        ],
        "message": "add tls-over-http-tunnel test",
        "before_after_code_files": [
          "test/simple/test-tls-over-http-tunnel.js||test/simple/test-tls-over-http-tunnel.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-over-http-tunnel.js||test/simple/test-tls-over-http-tunnel.js": [
          "File: test/simple/test-tls-over-http-tunnel.js -> test/simple/test-tls-over-http-tunnel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: if (!process.versions.openssl) {",
          "26:   console.error('Skipping because node compiled without OpenSSL.');",
          "27:   process.exit(0);",
          "28: }",
          "30: var common = require('../common');",
          "31: var assert = require('assert');",
          "33: var fs = require('fs');",
          "34: var net = require('net');",
          "35: var http = require('http');",
          "36: var https = require('https');",
          "38: var proxyPort = common.PORT + 1;",
          "39: var gotRequest = false;",
          "41: var key = fs.readFileSync(common.fixturesDir + '/keys/agent1-key.pem');",
          "42: var cert = fs.readFileSync(common.fixturesDir + '/keys/agent1-cert.pem');",
          "44: var options = {",
          "45:   key: key,",
          "46:   cert: cert",
          "47: };",
          "49: var server = https.createServer(options, function(req, res) {",
          "50:   console.log('SERVER: got request');",
          "51:   res.writeHead(200, {",
          "52:     'content-type': 'text/plain',",
          "53:    });",
          "54:   console.log('SERVER: sending response');",
          "55:   res.end('hello world\\n');",
          "56: });",
          "58: var proxy = net.createServer(function(clientSocket) {",
          "59:   console.log('PROXY: got a client connection');",
          "61:   var serverSocket = null;",
          "63:   clientSocket.on('data', function(chunk) {",
          "64:     if (!serverSocket) {",
          "66:       assert.equal('CONNECT localhost:' + common.PORT + ' HTTP/1.1\\r\\n' +",
          "67:                    'Proxy-Connections: keep-alive\\r\\nContent-Length:'   +",
          "68:                    ' 0\\r\\nHost: localhost:' + proxyPort + '\\r\\n\\r\\n',",
          "69:                    chunk);",
          "71:       console.log('PROXY: got CONNECT request');",
          "72:       console.log('PROXY: creating a tunnel');",
          "75:       serverSocket = net.connect(common.PORT, function() {",
          "76:         console.log('PROXY: replying to client CONNECT request');",
          "79:         clientSocket.write('HTTP/1.1 200 OK\\r\\nProxy-Connections: keep' +",
          "80:                            '-alive\\r\\nConnections: keep-alive\\r\\nVia: ' +",
          "81:                            'localhost:' + proxyPort + '\\r\\n\\r\\n');",
          "82:       });",
          "84:       serverSocket.on('data', function(chunk) {",
          "85:         clientSocket.write(chunk);",
          "86:       });",
          "88:       serverSocket.on('end', function() {",
          "89:         clientSocket.destroy();",
          "90:       });",
          "91:     } else {",
          "92:       serverSocket.write(chunk);",
          "93:     }",
          "94:   });",
          "96:   clientSocket.on('end', function() {",
          "97:     serverSocket.destroy();",
          "98:   });",
          "99: });",
          "101: server.listen(common.PORT);",
          "103: proxy.listen(proxyPort, function() {",
          "104:   console.log('CLIENT: Making CONNECT request');",
          "106:   http.request({",
          "107:     port: proxyPort,",
          "108:     method: 'CONNECT',",
          "109:     path: 'localhost:' + common.PORT,",
          "110:     headers: {",
          "111:       'Proxy-Connections': 'keep-alive',",
          "112:       'Content-Length': 0",
          "113:     }",
          "114:   }, function(res) {",
          "115:     assert.equal(200, res.statusCode);",
          "116:     console.log('CLIENT: got CONNECT response');",
          "119:     res.socket.emit('agentRemove');",
          "120:     res.socket.removeAllListeners('data');",
          "121:     res.socket.removeAllListeners('close');",
          "122:     res.socket.removeAllListeners('error');",
          "123:     res.socket.removeAllListeners('drain');",
          "124:     res.socket.removeAllListeners('end');",
          "125:     res.socket.ondata = null;",
          "126:     res.socket.onend = null;",
          "127:     res.socket.ondrain = null;",
          "129:     console.log('CLIENT: Making HTTPS request');",
          "131:     https.get({",
          "132:       path: '/foo',",
          "133:       key: key,",
          "134:       cert: cert,",
          "135:       socket: res.socket,  // reuse the socket",
          "136:       agent: false,",
          "137:     }, function(res) {",
          "138:       assert.equal(200, res.statusCode);",
          "140:       res.on('data', function(chunk) {",
          "141:         assert.equal('hello world\\n', chunk);",
          "142:         console.log('CLIENT: got HTTPS response');",
          "143:         gotRequest = true;",
          "144:       });",
          "146:       res.on('end', function() {",
          "147:         proxy.close();",
          "148:         server.close();",
          "149:       });",
          "150:     }).end();",
          "151:   }).end();",
          "152: });",
          "154: process.on('exit', function() {",
          "155:   assert.ok(gotRequest);",
          "156: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "432a2e4d397908965cfbdc44eb8a10c7fb840701",
      "candidate_info": {
        "commit_hash": "432a2e4d397908965cfbdc44eb8a10c7fb840701",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/432a2e4d397908965cfbdc44eb8a10c7fb840701",
        "files": [
          "test/simple/test-http-parser-bad-ref.js"
        ],
        "message": "Add test for #2438\n\nUnfortunately valgrind must be used to see the bad read. It would be nice if\nwe could improve this test to cause a segfault.",
        "before_after_code_files": [
          "test/simple/test-http-parser-bad-ref.js||test/simple/test-http-parser-bad-ref.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-http-parser-bad-ref.js||test/simple/test-http-parser-bad-ref.js": [
          "File: test/simple/test-http-parser-bad-ref.js -> test/simple/test-http-parser-bad-ref.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var assert = require('assert');",
          "7: var HTTPParser = process.binding('http_parser').HTTPParser;",
          "9: var headersComplete = 0;",
          "10: var messagesComplete = 0;",
          "12: function flushPool() {",
          "13:   new Buffer(Buffer.poolSize - 1);",
          "14:   gc();",
          "15: }",
          "17: function demoBug(part1, part2) {",
          "18:   var parser = new HTTPParser('REQUEST');",
          "20:   parser.headers = [];",
          "21:   parser.url = '';",
          "23:   parser.onHeaders = function(headers, url) {",
          "24:     parser.headers = parser.headers.concat(headers);",
          "25:     parser.url += url;",
          "26:   };",
          "28:   parser.onHeadersComplete = function(info) {",
          "29:     headersComplete++;",
          "30:     console.log(\"url\", info.url);",
          "31:   };",
          "33:   parser.onBody = function(b, start, len) { };",
          "35:   parser.onMessageComplete = function() {",
          "36:     messagesComplete++;",
          "37:   };",
          "42:   (function() {",
          "43:     var b = Buffer(part1);",
          "44:     flushPool();",
          "46:     console.log(\"parse the first part of the message\");",
          "47:     parser.execute(b, 0, b.length);",
          "48:   })();",
          "50:   flushPool();",
          "52:   (function() {",
          "53:     var b = Buffer(part2);",
          "55:     console.log(\"parse the second part of the message\");",
          "56:     parser.execute(b, 0, b.length);",
          "57:     parser.finish();",
          "58:   })();",
          "59: }",
          "62: demoBug('POST /1', '/22 HTTP/1.1\\r\\n' +",
          "63:         'Content-Type: text/plain\\r\\n' +",
          "64:         'Content-Length: 4\\r\\n\\r\\n' +",
          "65:         'pong');",
          "68: process.on('exit', function() {",
          "69:   assert.equal(1, headersComplete);",
          "70:   assert.equal(1, messagesComplete);",
          "71:   console.log(\"done!\");",
          "72: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e40c7ddc93f9260a3f4b1683ff6f86aff91e761",
      "candidate_info": {
        "commit_hash": "7e40c7ddc93f9260a3f4b1683ff6f86aff91e761",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7e40c7ddc93f9260a3f4b1683ff6f86aff91e761",
        "files": [
          "src/node_buffer.cc",
          "test/simple/test-buffer-regress-GH-2659.js"
        ],
        "message": "buffers: fix intermittent out of bounds error\n\nThe base64 decoder would intermittently throw an out-of-bounds exception when\nthe buffer in `buf.write('', 'base64')` was a zero-sized buffer located at the\nend of the slab.\n\nFixes #2657.",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "test/simple/test-buffer-regress-GH-2659.js||test/simple/test-buffer-regress-GH-2659.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:                                              : args[2]->Uint32Value();",
          "598:   max_length = MIN(s.length(), MIN(buffer->length_ - offset, max_length));",
          "601:     return ThrowException(Exception::TypeError(String::New(",
          "602:             \"Offset is out of bounds\")));",
          "603:   }",
          "",
          "[Removed Lines]",
          "600:   if (offset >= buffer->length_) {",
          "",
          "[Added Lines]",
          "600:   if (max_length && offset >= buffer->length_) {",
          "",
          "---------------"
        ],
        "test/simple/test-buffer-regress-GH-2659.js||test/simple/test-buffer-regress-GH-2659.js": [
          "File: test/simple/test-buffer-regress-GH-2659.js -> test/simple/test-buffer-regress-GH-2659.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "27: for (var n = 1; n <= 8192; ++n) {",
          "28:   Buffer(n);",
          "29:   Buffer(0).write('', 'base64');",
          "30: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50c7d80fb0c5c8c13ce8755e1be54c1fd5543748",
      "candidate_info": {
        "commit_hash": "50c7d80fb0c5c8c13ce8755e1be54c1fd5543748",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/50c7d80fb0c5c8c13ce8755e1be54c1fd5543748",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-listeners-side-effects.js"
        ],
        "message": "events: emitter.listeners() should not have side effects\n\nFixes #3803",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-listeners-side-effects.js||test/simple/test-event-emitter-listeners-side-effects.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: };",
          "239: EventEmitter.prototype.listeners = function(type) {",
          "242:   if (!isArray(this._events[type])) {",
          "244:   }",
          "245:   return this._events[type].slice(0);",
          "246: };",
          "",
          "[Removed Lines]",
          "240:   if (!this._events) this._events = {};",
          "241:   if (!this._events[type]) this._events[type] = [];",
          "243:     this._events[type] = [this._events[type]];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-listeners-side-effects.js||test/simple/test-event-emitter-listeners-side-effects.js": [
          "File: test/simple/test-event-emitter-listeners-side-effects.js -> test/simple/test-event-emitter-listeners-side-effects.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var events = require('events');",
          "27: var EventEmitter = require('events').EventEmitter;",
          "28: var assert = require('assert');",
          "30: var e = new EventEmitter;",
          "31: var fl;  // foo listeners",
          "33: fl = e.listeners('foo');",
          "34: assert(Array.isArray(fl));",
          "35: assert(fl.length === 0);",
          "36: assert(typeof e._events == 'undefined');",
          "38: e.on('foo', assert.fail);",
          "39: fl = e.listeners('foo');",
          "40: assert(e._events.foo === assert.fail);",
          "41: assert(Array.isArray(fl));",
          "42: assert(fl.length === 1);",
          "43: assert(fl[0] === assert.fail);",
          "45: e.listeners('bar');",
          "46: assert(!e._events.hasOwnProperty('bar'));",
          "48: e.on('foo', assert.ok);",
          "49: fl = e.listeners('foo');",
          "51: assert(Array.isArray(e._events.foo));",
          "52: assert(e._events.foo.length === 2);",
          "53: assert(e._events.foo[0] === assert.fail);",
          "54: assert(e._events.foo[1] === assert.ok);",
          "56: assert(Array.isArray(fl));",
          "57: assert(fl.length === 2);",
          "58: assert(fl[0] === assert.fail);",
          "59: assert(fl[1] === assert.ok);",
          "61: console.log('ok');",
          "",
          "---------------"
        ]
      }
    }
  ]
}