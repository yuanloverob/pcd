{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed968fa4cb464906e5b0f5148f1f21038a311728",
      "candidate_info": {
        "commit_hash": "ed968fa4cb464906e5b0f5148f1f21038a311728",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed968fa4cb464906e5b0f5148f1f21038a311728",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid integer overflow when computing the array of a bounding box with the rtree_i32 virtual table.\n\nFossilOrigin-Name: b352f1590d20a574b0681e011ececcf4f41fa5b157503d330e03939404aca0e9",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1999: #endif",
          "2000:   {",
          "2001:     switch( pRtree->nDim ){",
          "2007:     }",
          "2008:   }",
          "2009:   return area;",
          "",
          "[Removed Lines]",
          "2002:       case 5:  area  = p->aCoord[9].i - p->aCoord[8].i;",
          "2003:       case 4:  area *= p->aCoord[7].i - p->aCoord[6].i;",
          "2004:       case 3:  area *= p->aCoord[5].i - p->aCoord[4].i;",
          "2005:       case 2:  area *= p->aCoord[3].i - p->aCoord[2].i;",
          "2006:       default: area *= p->aCoord[1].i - p->aCoord[0].i;",
          "",
          "[Added Lines]",
          "2002:       case 5:  area  = (i64)p->aCoord[9].i - (i64)p->aCoord[8].i;",
          "2003:       case 4:  area *= (i64)p->aCoord[7].i - (i64)p->aCoord[6].i;",
          "2004:       case 3:  area *= (i64)p->aCoord[5].i - (i64)p->aCoord[4].i;",
          "2005:       case 2:  area *= (i64)p->aCoord[3].i - (i64)p->aCoord[2].i;",
          "2006:       default: area *= (i64)p->aCoord[1].i - (i64)p->aCoord[0].i;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 048add13fc10e69ae504a49c4663612381d928b2cf1f9cdab4ff34bd40f601a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
      "candidate_info": {
        "commit_hash": "8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with fix [b4b57413].\n\nFossilOrigin-Name: ca7b7aaed010ec67bec5355a9ac1d7f229d6d5f2ba2d796b76f5e908b1267688",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 24ed5fb6aea30b098d2faf3cf9d638933e518657217e903239ffaa1e25d34f66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1163:           if( IN_RENAME_OBJECT ){",
          "1164:             if( iCol>0 ){",
          "1165:               pItem->done = 1;",
          "1167:             }",
          "1168:           }else{",
          "1169:             sqlite3ExprDelete(db, pDup);",
          "",
          "[Removed Lines]",
          "1166:               break;",
          "",
          "[Added Lines]",
          "1166:               continue;",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   END}",
          "264: }",
          "266: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: #-------------------------------------------------------------------------",
          "267: reset_db",
          "269: do_execsql_test 7.0 {",
          "270:   CREATE TABLE t1(a,b,c,d,e,f);",
          "271:   INSERT INTO t1 VALUES(1,2,3,4,5,6);",
          "272:   CREATE TABLE t2(x,y,z);",
          "273: }",
          "275: do_execsql_test 7.1 {",
          "276:   SELECT a,b,c FROM t1 UNION SELECT d,e,f FROM t1 ORDER BY b,c;",
          "277: } {1 2 3 4 5 6}",
          "279: do_execsql_test 7.2 {",
          "280:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "281:     INSERT INTO t2",
          "282:     SELECT a,b,c FROM t1 UNION SELECT d,e,f FROM t1 ORDER BY b,c;",
          "283:   END;",
          "284:   INSERT INTO t1 VALUES(2,3,4,5,6,7);",
          "285:   SELECT * FROM t2;",
          "286: } {1 2 3  2 3 4  4 5 6  5 6 7}",
          "288: do_execsql_test 7.3 {",
          "289:   ALTER TABLE t1 RENAME TO xyzzy;",
          "290:   SELECT sql FROM sqlite_master WHERE name='r1'",
          "291: } {",
          "292:   {CREATE TRIGGER r1 AFTER INSERT ON \"xyzzy\" BEGIN",
          "293:     INSERT INTO t2",
          "294:     SELECT a,b,c FROM \"xyzzy\" UNION SELECT d,e,f FROM \"xyzzy\" ORDER BY b,c;",
          "295:   END}",
          "296: }",
          "298: do_execsql_test 7.3 {",
          "299:   ALTER TABLE xyzzy RENAME c TO ccc;",
          "300:   SELECT sql FROM sqlite_master WHERE name='r1'",
          "301: } {",
          "302:   {CREATE TRIGGER r1 AFTER INSERT ON \"xyzzy\" BEGIN",
          "303:     INSERT INTO t2",
          "304:     SELECT a,b,ccc FROM \"xyzzy\" UNION SELECT d,e,f FROM \"xyzzy\" ORDER BY b,ccc;",
          "305:   END}",
          "306: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
      "candidate_info": {
        "commit_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted.\n\nFossilOrigin-Name: d23f33168222dfa40a67dc7de58057418151989e81429e4af47617e86db04667",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1301: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1302:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1309:     }",
          "1310:   }",
          "1311:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1303:     Window **pp;",
          "1304:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1305:       if( *pp==pExpr->y.pWin ){",
          "1307:         break;",
          "1308:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "",
          "[Removed Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1326: }",
          "",
          "[Removed Lines]",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "[Added Lines]",
          "1330: #else",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1416:         pItem->u.x.iOrderByCol = j+1;",
          "1417:       }",
          "1418:     }",
          "",
          "[Removed Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5665:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5666:     p->pOrderBy = 0;",
          "5667:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3632: #else",
          "3633: # define sqlite3WindowDelete(a,b)",
          "3634: # define sqlite3WindowFunctions()",
          "3635: # define sqlite3WindowAttach(a,b,c)",
          "3638: #endif",
          "",
          "[Removed Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3c468b758175adb95d0f20862047acdd7c2ab57",
      "candidate_info": {
        "commit_hash": "d3c468b758175adb95d0f20862047acdd7c2ab57",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d3c468b758175adb95d0f20862047acdd7c2ab57",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Clarify some comments and add assert() and testcase() macros to the replace-trigger recheck logic for ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 070b49825c5f87cce15be4b758f0dfdd65226ec379465ca527a18706a1f3b8f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1882:         assert( onError==OE_Replace );",
          "1883:         nConflictCk = sqlite3VdbeCurrentAddr(v) - addrConflictCk;",
          "1884:         if( regTrigCnt ){",
          "1885:           sqlite3MultiWrite(pParse);",
          "1886:           nReplaceTrig++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1884:         assert( nConflictCk>0 );",
          "1885:         testcase( nConflictCk>1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1912:           while( nConflictCk>0 && !db->mallocFailed ){",
          "",
          "[Added Lines]",
          "1914:           while( nConflictCk>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1958:   testcase( regTrigCnt!=0 && nReplaceTrig==0 );",
          "1959:   if( nReplaceTrig ){",
          "1960:     sqlite3VdbeAddOp2(v, OP_IfNot, regTrigCnt, lblRecheckOk);VdbeCoverage(v);",
          "1961:     if( !pPk ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1961:   assert( regTrigCnt!=0 || nReplaceTrig==0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e47d5ca73798e364c09a83abed038ecfbe28e96c",
      "candidate_info": {
        "commit_hash": "e47d5ca73798e364c09a83abed038ecfbe28e96c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e47d5ca73798e364c09a83abed038ecfbe28e96c",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/speed-check.sh"
        ],
        "message": "Add --multithread, --serialized, and --singlethread options to the speed-check.sh test script.\n\nFossilOrigin-Name: c17078af6046ba3cb0d7819c915a800c851d7368e13d149140db2a124df32bab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/speed-check.sh||tool/speed-check.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ef64b0f55d952c7b0016055eaf6bbc1b5b7afc09a62ee8e5e694ffa9863ac7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/speed-check.sh||tool/speed-check.sh": [
          "File: tool/speed-check.sh -> tool/speed-check.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     --nomemstat)",
          "66:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "67:         ;;",
          "68:     --temp)",
          "69:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS --temp 6\"",
          "70:         ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     --multithread)",
          "69:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "70:         ;;",
          "71:     --singlethread)",
          "72:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "73:         ;;",
          "74:     --serialized)",
          "75:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS $1\"",
          "76:         ;;",
          "",
          "---------------"
        ]
      }
    }
  ]
}