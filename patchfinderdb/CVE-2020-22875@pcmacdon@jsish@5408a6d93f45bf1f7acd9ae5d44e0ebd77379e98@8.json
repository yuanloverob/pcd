{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e70088ae62acf033bcb169e19c778dd1fce66c08",
      "candidate_info": {
        "commit_hash": "e70088ae62acf033bcb169e19c778dd1fce66c08",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/e70088ae62acf033bcb169e19c778dd1fce66c08",
        "files": [
          "lib/Debug.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.37\": debugger adds line-editing\n\nFossilOrigin-Name: 6d649cfc1fb0cd6ef578301475203b5512fe021185efd1a69ae70651c8fef253",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:         var done = false;",
          "399:         while (!done) {",
          "402:             update(); // Handle signals.",
          "403:             if (self.stopSig) {",
          "404:                 self.stopSig = false;",
          "",
          "[Removed Lines]",
          "400:             printf(\"#%d==> \", self.curlev?self.curlev:level);",
          "401:             var inp = console.input();",
          "",
          "[Added Lines]",
          "400:             var prompt = format(\"#%d==> \", self.curlev?self.curlev:level);",
          "401:             var inp = console.input(prompt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:                 case 'locals':  cmdEval('eval Info.level(0).locals', false); break;",
          "437:                 case 'next':    done=true; self.interp.conf({debugOpts:{minLevel:level}}); self.minLevel = level; break;",
          "438:                 case 'print':   cmdPrint(inlst); break;",
          "440:                 case 'step':    done=true; break;",
          "441:                 case 'tbreak':  cmdBreak(inlst,line,func,file,true); break;",
          "442:                 case 'up':      cmdLevel(inlst, true); break;",
          "",
          "[Removed Lines]",
          "439:                 case 'quit':    exit(0); break;",
          "",
          "[Added Lines]",
          "439:                 case 'quit':    console.input(null); exit(0); break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:             } catch(e) {}",
          "473:         }",
          "476:         var dopts = {",
          "477:             debugOpts:{debugCallback:'callback'},",
          "478:             args:self.args,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:         Interp.conf({historyFile:'~/.jsish_debug'});",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 36",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 37",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     char buf[1024];",
          "20:     char *cp, *p = buf;",
          "21:     buf[0] = 0;",
          "22:     if (!interp->stdinStr)",
          "23:         p=fgets(buf, sizeof(buf), stdin);",
          "24:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);",
          "23:     if (v) {",
          "24:         if (interp->isSafe)",
          "25:             return Jsi_LogError(\"line edit not available in safe mode\");",
          "26:         if (Jsi_ValueIsNull(interp, v)) {",
          "27:             jsi_RlGetLine(interp, NULL);",
          "28:             return JSI_OK;",
          "29:         }",
          "30:         cp = Jsi_ValueString(interp, v, NULL);",
          "31:         if (cp) {",
          "32:             p  = jsi_RlGetLine(interp, cp);",
          "33:             if (p)",
          "34:                 Jsi_ValueMakeString(interp, ret, p);",
          "35:             return JSI_OK;",
          "36:         }",
          "37:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4844: static Jsi_CmdSpec consoleCmds[] = {",
          "4845:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "4846:     { \"error\",  consoleErrorCmd,    1, -1, \"val, ...\", .help=\"Same as log but adding prefix ERROR:\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4848:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Like System.puts, but goes to stderr and includes file:line.\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4849:     { \"logp\",   consoleLogPCmd,     1, -1, \"val, ...\", .help=\"Same as console.log, but first arg is string prefix and if second is a boolean it controls output\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4850:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Removed Lines]",
          "4847:     { \"input\",  consoleInputCmd,    0,  0, \"\", .help=\"Read input from the console\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "4863:     { \"input\",  consoleInputCmd,    0,  1, \"prompt:null|string=''\", .help=\"Read input from the console: if prompt uses linenoise line editing\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1490: extern void jsi_FuncFree(Jsi_Interp *interp, Jsi_Func *func);",
          "1491: extern void jsi_ToHexStr(const uchar *indata, int dlen, char *out);",
          "1492: extern bool jsi_StrIsBalanced(char *str);",
          "1494: #ifndef _JSI_MEMCLEAR",
          "1495: #ifndef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1493: extern char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "93:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"WebSocket compiled with SSL is available\", jsi_IIOF),",
          "96:     JSI_OPT(BOOL,  Jsi_Interp, isSafe,      .help=\"Is this a safe interp (ie. with limited or no file access)\", jsi_IIOF),",
          "97:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "98:     JSI_OPT(FUNC,  Jsi_Interp, jsppCallback,.help=\"Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number)\"),",
          "",
          "[Removed Lines]",
          "95:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"In interactive mode, file to use for history (~/.jsish_history)\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "95:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"For readline, file to use for history (~/.jsish_history)\", JSI_OPT_LOCKSAFE),",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:     }",
          "891:     res = Jsi_Strdup(Jsi_DSValue(&dStr));",
          "892:     Jsi_DSFree(&dStr);",
          "893:     return res;",
          "894: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:     printf(\"READ: %s\\n\", res);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1224:     return rc;",
          "1225: }",
          "1227: Jsi_RC Jsi_ThisDataSet(Jsi_Interp *interp, Jsi_Value *_this, void *value)",
          "1228: {",
          "1229:     bool isNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228: char* jsi_RlGetLine(Jsi_Interp* interp, const char *prompt)",
          "1229: {",
          "1230:     int istty;",
          "1231:     static int init = 0;",
          "1232:     if (interp->isSafe)",
          "1233:         return NULL;",
          "1234: #ifndef __WIN32",
          "1235:     istty = isatty(fileno(stdin));",
          "1236: #else",
          "1237:     istty = _isatty(_fileno(stdin));",
          "1238: #endif",
          "1239:     if(!prompt || (!init && interp->subOpts.noReadline == 0 && !interp->parent))",
          "1240:     {",
          "1241:         init = 1;",
          "1242:         Jsi_DString dStr = {};",
          "1243:         const char *hfile = (interp->historyFile ? interp->historyFile : \"~/.jsish_history\");",
          "1244:         const char *hist = Jsi_NormalPath(interp, hfile, &dStr);",
          "1246:         if (!prompt) {",
          "1247:             jsi_sh_stifle_history(100);",
          "1248:             jsi_sh_write_history(hist);",
          "1249:             return NULL;",
          "1250:         } else if (hist)",
          "1251:             jsi_sh_read_history(hist);",
          "1252:         Jsi_DSFree(&dStr);",
          "1253:     }",
          "1254:     return get_inputline(interp, istty, (prompt?prompt:\"$ \"));",
          "1255: }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: var console = function(cmd,args) {};",
          "373: console.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "374: console.prototype.error = function(val, ...):void {};",
          "376: console.prototype.log = function(val, ...):void {};",
          "377: console.prototype.logp = function(val, ...):void {};",
          "378: console.prototype.printf = function(format:string, ...):void {};",
          "",
          "[Removed Lines]",
          "375: console.prototype.input = function():string|void {};",
          "",
          "[Added Lines]",
          "375: console.prototype.input = function(prompt:null|string=''):string|void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "627: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "628: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>WebSocket compiled with SSL is available.</td><td><i>initOnly</i></td></tr>",
          "630: <tr><td>isSafe</td><td><i>BOOL</i></td><td>Is this a safe interp (ie. with limited or no file access).</td><td><i>initOnly</i></td></tr>",
          "631: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "632: <tr><td>jsppCallback</td><td><i>FUNC</i></td><td>Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "629: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>In interactive mode, file to use for history (~/.jsish_history).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "629: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>For readline, file to use for history (~/.jsish_history).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1834: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "1835: <tr><td>assert</td><td>assert(expr:boolean|number|function, msg:string=void, <a href='#console.assertOptions'>options</a>:object=void):void </td><td>Same as System.assert().</td></tr>",
          "1836: <tr><td>error</td><td>error(val, ...):void </td><td>Same as log but adding prefix ERROR:.</td></tr>",
          "1838: <tr><td>log</td><td>log(val, ...):void </td><td>Like System.puts, but goes to stderr and includes file:line..</td></tr>",
          "1839: <tr><td>logp</td><td>logp(val, ...):void </td><td>Same as console.log, but first arg is string prefix and if second is a boolean it controls output.</td></tr>",
          "1840: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Same as System.printf but goes to stderr.</td></tr>",
          "",
          "[Removed Lines]",
          "1837: <tr><td>input</td><td>input():string|void </td><td>Read input from the console.</td></tr>",
          "",
          "[Added Lines]",
          "1837: <tr><td>input</td><td>input(prompt:null|string=''):string|void </td><td>Read input from the console: if prompt uses linenoise line editing.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
      "candidate_info": {
        "commit_hash": "f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f7cf5c807ddc0e7db1542ca9eea95ad60c4ed1c4",
        "files": [
          "Makefile",
          "jsiconfig.h",
          "src/jsi.h",
          "src/parser.h"
        ],
        "message": "Fix build.\n\nFossilOrigin-Name: 52166f80d322021729e28fd899f229f28435d41522291a173c0520436c259008",
        "before_after_code_files": [
          "jsiconfig.h||jsiconfig.h",
          "src/jsi.h||src/jsi.h",
          "src/parser.h||src/parser.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "jsiconfig.h||jsiconfig.h": [
          "File: jsiconfig.h -> jsiconfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI__BASE64=1",
          "2: #define JSI__CDATA=1",
          "3: #define JSI__DEBUG=1",
          "4: #define JSI__ENCRYPT=1",
          "5: #define JSI__EVENT=1",
          "6: #define JSI__FILESYS=1",
          "7: #define JSI__INFO=1",
          "8: #define JSI__LOAD=1",
          "9: #define JSI__MARKDOWN=1",
          "10: #define JSI__MATH=1",
          "11: #define JSI__MD5=1",
          "12: #define JSI__READLINE=1",
          "13: #define JSI__SHA1=1",
          "14: #define JSI__SHA256=1",
          "15: #define JSI__SIGNAL=1",
          "16: #define JSI__STUBS=1",
          "17: #define JSI__THREADS=1",
          "18: #define JSI__ZVFS=1",
          "19: #define JSI__MEMDEBUG=0",
          "20: #define JSI__MINIZ=0",
          "21: #define JSI__REGEX=0",
          "22: #define JSI__SANITIZE=0",
          "23: #define JSI__SOCKET=1",
          "24: #define JSI__SQLITE=1",
          "25: #define JSI__WEBSOCKET=1",
          "26: #define JSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #ifndef __JSI_H__",
          "3: #define __JSI_H__",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "5: #define JSI_VERSION_MAJOR   2",
          "6: #define JSI_VERSION_MINOR   8",
          "7: #define JSI_VERSION_RELEASE 55",
          "",
          "[Added Lines]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------"
        ],
        "src/parser.h||src/parser.h": [
          "File: src/parser.h -> src/parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "12:    This program is distributed in the hope that it will be useful,",
          "13:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "15:    GNU General Public License for more details.",
          "17:    You should have received a copy of the GNU General Public License",
          "21:    part or all of the Bison parser skeleton and distribute that work",
          "22:    under terms of your choice, so long as that work isn't itself a",
          "23:    parser generator using the skeleton or a modified version thereof",
          "24:    as a parser skeleton.  Alternatively, if you modify or redistribute",
          "25:    the parser skeleton itself, you may (at your option) remove this",
          "26:    special exception, which will cause the skeleton and the resulting",
          "27:    Bison output files to be licensed under the GNU General Public",
          "28:    License without this special exception.",
          "30:    This special exception was added by the Free Software Foundation in",
          "33: #ifndef YY_YY_SRC_PARSER_H_INCLUDED",
          "34: # define YY_YY_SRC_PARSER_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yydebug;",
          "41: #endif",
          "44: #ifndef YYTOKENTYPE",
          "45: # define YYTOKENTYPE",
          "46:   enum yytokentype",
          "47:   {",
          "48:     IDENTIFIER = 258,",
          "49:     STRING = 259,",
          "50:     IF = 260,",
          "51:     ELSE = 261,",
          "52:     FOR = 262,",
          "53:     IN = 263,",
          "54:     WHILE = 264,",
          "55:     DO = 265,",
          "56:     CONTINUE = 266,",
          "57:     SWITCH = 267,",
          "58:     CASE = 268,",
          "59:     DEFAULT = 269,",
          "60:     BREAK = 270,",
          "61:     FUNC = 271,",
          "62:     RETURN = 272,",
          "63:     LOCAL = 273,",
          "64:     OF = 274,",
          "65:     NEW = 275,",
          "66:     DELETE = 276,",
          "67:     TRY = 277,",
          "68:     CATCH = 278,",
          "69:     FINALLY = 279,",
          "70:     THROW = 280,",
          "71:     WITH = 281,",
          "72:     UNDEF = 282,",
          "73:     _TRUE = 283,",
          "74:     _FALSE = 284,",
          "75:     _THIS = 285,",
          "76:     ARGUMENTS = 286,",
          "77:     FNUMBER = 287,",
          "78:     REGEXP = 288,",
          "79:     TYPESTRING = 289,",
          "80:     TYPENUMBER = 290,",
          "81:     TYPENULL = 291,",
          "82:     TYPEOBJECT = 292,",
          "83:     TYPEBOOLEAN = 293,",
          "84:     TYPEUSEROBJ = 294,",
          "85:     TYPEITEROBJ = 295,",
          "86:     TYPEREGEXP = 296,",
          "87:     TYPEANY = 297,",
          "88:     TYPEARRAY = 298,",
          "89:     ELLIPSIS = 299,",
          "90:     ARROW = 300,",
          "91:     __DEBUG = 301,",
          "92:     MIN_PRI = 302,",
          "93:     ARGCOMMA = 303,",
          "94:     ADDAS = 304,",
          "95:     MNSAS = 305,",
          "96:     MULAS = 306,",
          "97:     MODAS = 307,",
          "98:     LSHFAS = 308,",
          "99:     RSHFAS = 309,",
          "100:     URSHFAS = 310,",
          "101:     BANDAS = 311,",
          "102:     BORAS = 312,",
          "103:     BXORAS = 313,",
          "104:     DIVAS = 314,",
          "105:     OR = 315,",
          "106:     AND = 316,",
          "107:     EQU = 317,",
          "108:     NEQ = 318,",
          "109:     EEQU = 319,",
          "110:     NNEQ = 320,",
          "111:     LEQ = 321,",
          "112:     GEQ = 322,",
          "113:     INSTANCEOF = 323,",
          "114:     LSHF = 324,",
          "115:     RSHF = 325,",
          "116:     URSHF = 326,",
          "117:     NEG = 327,",
          "118:     INC = 328,",
          "119:     DEC = 329,",
          "120:     TYPEOF = 330,",
          "121:     VOID = 331,",
          "122:     MAX_PRI = 332",
          "123:   };",
          "124: #endif",
          "127: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "129: union YYSTYPE",
          "130: {",
          "133:     Jsi_OpCodes *opcodes;",
          "134:     Jsi_Value *value;",
          "135:     const char *sstr;",
          "136:     Jsi_String *vstr;",
          "137:     Jsi_Regex* regex;",
          "138:     Jsi_Number *num;",
          "139:     Jsi_ScopeStrs *scopes;",
          "140:     int inum;",
          "141:     struct jsi_CaseExprStat* caseitem;",
          "142:     struct jsi_CaseList* caselist;",
          "145: };",
          "147: typedef union YYSTYPE YYSTYPE;",
          "148: # define YYSTYPE_IS_TRIVIAL 1",
          "149: # define YYSTYPE_IS_DECLARED 1",
          "150: #endif",
          "153: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED",
          "154: typedef struct YYLTYPE YYLTYPE;",
          "155: struct YYLTYPE",
          "156: {",
          "157:   int first_line;",
          "158:   int first_column;",
          "159:   int last_line;",
          "160:   int last_column;",
          "161: };",
          "162: # define YYLTYPE_IS_DECLARED 1",
          "163: # define YYLTYPE_IS_TRIVIAL 1",
          "164: #endif",
          "168: int yyparse (struct jsi_Pstate *pstate);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5b0f9f36e277d6e2f41c4f43db27d5f134092da",
      "candidate_info": {
        "commit_hash": "a5b0f9f36e277d6e2f41c4f43db27d5f134092da",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a5b0f9f36e277d6e2f41c4f43db27d5f134092da",
        "files": [
          "lib/Archive.jsi",
          "lib/Jsish.jsi",
          "lib/Module.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/docs/index.html",
          "lib/www/index.htm",
          "lib/www/index.html",
          "lib/www/js/Jsish.js",
          "lib/www/md/Building.md",
          "lib/www/md/Misc.md",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tests/freeze.jsi",
          "tests/obj2.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.8\": Fixes for websocket, add -M for sclone\n\nFossilOrigin-Name: 48507bc0c52ac8acb5d19e68555e4c35af93400f4e5a4d5fe900f5fa59ce7d9c",
        "before_after_code_files": [
          "lib/Archive.jsi||lib/Archive.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Module.jsi||lib/Module.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/www/index.htm||lib/www/index.htm",
          "lib/www/index.html||lib/www/index.html",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/freeze.jsi||tests/freeze.jsi",
          "tests/obj2.jsi||tests/obj2.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Archive.jsi||lib/Archive.jsi": [
          "File: lib/Archive.jsi -> lib/Archive.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         rootdir     :null,      // Base directory.",
          "20:         update      :false,     // Do a pull update if a .fossil.",
          "21:         updateAll   :false,     // For all .fossil files in given directory do a pull update and exit.",
          "23:     };",
          "25:     moduleOpts(options, self);",
          "",
          "[Removed Lines]",
          "22:         version     :''         // Version or commit",
          "",
          "[Added Lines]",
          "22:         version     :''         // Version or commit: use 'tip' for latest.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         }",
          "91:         if (self.noRun)",
          "92:             return mnt;",
          "93:         for (var cmnt of dlst) {",
          "95:             if (File.exists(msrc)) break;",
          "96:         }",
          "98:             throw 'no '+self.mainFile+' found in . or lib/ within archive';",
          "100:         console.args.shift(); // = console.args.slice(1);",
          "",
          "[Removed Lines]",
          "94:             var msrc = cmnt+'/'+self.mainFile;",
          "97:         if (!File.exists(msrc))",
          "",
          "[Added Lines]",
          "93:         var msrc;",
          "95:             msrc = cmnt+'/'+self.mainFile;",
          "98:         if (!msrc || !File.exists(msrc))",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:     }",
          "323: }",
          "325: if (Info.isMain()) {",
          "327:     var self = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325: function Jsi_CmdTable(args:array, cmdList:array) {",
          "326:     if (typeof(cmdList[0]) != 'array' || cmdList[0].length != 3)",
          "327:         throw 'expected list of [string, func, string]';",
          "328:     var emsg = '';",
          "329:     if (args.length > 0) {",
          "330:         var sub, a0 = args[0], alen = a0.length;",
          "331:         if (!alen) throw 'null length';",
          "332:         for (var i of cmdList) {",
          "333:             var sn = i[0];",
          "334:             if (sn == a0)",
          "335:                 return i[1].apply(null, args.slice(1));",
          "336:             if (sn.substr(0,alen) == a0) {",
          "337:                 if (sub) { emsg = 'Error: prefix not unique\\n'; sub=null; break; }",
          "338:                 sub = i;",
          "339:             }",
          "340:         }",
          "341:         if (sub)",
          "342:             return sub[1].apply(null, args.slice(1));",
          "343:     }",
          "344:     emsg += 'Arg 1 must be unique prefix of:\\n';",
          "345:     var len = 0;",
          "346:     for (i of cmdList)",
          "347:         if (i[0].length>len)",
          "348:             len = i[0].length;",
          "349:     for (i of cmdList)",
          "350:         emsg += format(\"  %-*s - %s\\n\", len, i[0], i[2]);",
          "352:     throw emsg;",
          "353: }",
          "",
          "---------------"
        ],
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: function Module(args:array, conf:object=void) {",
          "7:     const options = { // Run or create a Jsi module.",
          "12:         output  :'',        // Override the output filename default of create + .jsi.",
          "13:         quiet   :false,     // No messages.",
          "16:     };",
          "17:     var self = {",
          "18:         rootdir      :'',   // Root directory.",
          "",
          "[Removed Lines]",
          "8:         create  :'',        // Create a Jsi module template with this name.",
          "9:         es5lint :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "10:         force   :false,     // Remove output if exists.",
          "11:         json    :'',        // Json file to normalize",
          "14:         setup   :'',        // Download and setup fossil repos from jsish.org.",
          "15:         web     :false      // Use websock server template.",
          "",
          "[Added Lines]",
          "10:         repo    :'https://jsish.org/afossil',        // Repo source for parent of subproject",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     moduleOpts(options, self);",
          "30:     }",
          "32:     function jsonify(name) {",
          "33:         var d = File.read(name);",
          "34:         d = JSON.parse(d, false);",
          "",
          "[Removed Lines]",
          "24:     function setupApp(app) {",
          "25:         if (app !== 'pdq') LogWarn('app is not pdq');",
          "28:         exec('fossil clone http://jsish.org/fossil/'+app+' '+app+'.fossil');",
          "29:         File.write('run_'+app+'.sh', \"#!\\njsish -a -update true \"+app+'.fossil $*\\n');",
          "",
          "[Added Lines]",
          "19:     function getfossil(out='') {",
          "20:         if (!out)",
          "21:             out = 'fossil';",
          "22:         else if (File.isdir(out))",
          "23:             out += '/fossil';",
          "25:         Wget('http://jsish.org/download/fossil', {O:out});",
          "26:         File.chmod(out, 0755);",
          "30:     function sclone(app:string='pdq', name:string='') {",
          "31:         var ver;",
          "32:         if (Info.platform().platform == 'unix')",
          "33:             ver = exec('which fossil');",
          "34:         else",
          "35:             ver = exec('fossil version', {noError:true});",
          "36:         if (!ver)",
          "37:             throw 'install fossil first, eg. use \"sudo apt install fossil\" or \"sudo jsish -M getfossil\"';",
          "38:         var cnt = File.glob('*', {retCount:true});",
          "39:         if (cnt)",
          "40:             throw 'setup must be used in an empty directory';",
          "42:         if (File.exists('.fslckout')) {",
          "43:             ver = exec('fossil info', {noError:true});",
          "44:             throw 'sorry: already in open fossil: '+ver.split('\\n')[0];",
          "45:         }",
          "46:         var dname = File.tail(File.pwd());",
          "48:         if (!name)",
          "49:             name = dname;",
          "51:         var proj = name.toUpperCase();",
          "52:         if (app.toLowerCase() == proj)",
          "53:             throw 'can not use name same as app: '+name;",
          "54:         var pfn = name+'.fossil';",
          "55:         var url = self.repo+'/'+app;",
          "56:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "57:             url += '.fossil';",
          "58:         var ccmd = 'fossil clone '+url+' '+pfn;",
          "59:         if (!self.quiet)",
          "60:             puts(ccmd);",
          "61:         var cval = exec(ccmd);",
          "62:         if (!self.quiet)",
          "63:             puts(cval);",
          "64:         var db = new Sqlite(pfn);",
          "65:         var now = parseInt(strptime()/1000);",
          "66:         db.eval(\"UPDATE config SET name='parent-project-code' WHERE name='project-code';\"+",
          "67:             \"UPDATE config SET name='parent-project-name' WHERE name='project-name';\");",
          "68:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('project-code',@now, lower(hex(randomblob(20))));\");",
          "69:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('parent-project-url', @now,(SELECT value FROM config WHERE name == 'last-sync-url'));\");",
          "70:         db.query(\"INSERT INTO config(name,mtime,value)  VALUES('project-name', @now, @proj);\");",
          "71:         if (self.quiet)",
          "72:             return;",
          "73:         exec('fossil open '+pfn);",
          "74:         exec('fossil remote-url off');",
          "75:         Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "76:         var dfn = 'html/index.html';",
          "77:         if (!File.exists('index.html') && File.exists(dfn)) {",
          "78:             var idat = File.read(dfn);",
          "79:             idat = idat.map(['\"../', '\"']);",
          "80:             File.write('index.html', idat);",
          "81:         }",
          "82:         exec('fossil add jsi');",
          "83:         exec('fossil commit -m Subclone --no-warnings');",
          "84:         puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "85:         if (File.exists('main.jsi'))",
          "86:             puts('To finish setup run: \"jsish .\"');",
          "87:     }",
          "89:     function supdate() {",
          "90:         var url = exec(`fossil sql \"SELECT value FROM config WHERE name = 'parent-project-url'\"`);",
          "91:         if (!url)",
          "92:             throw 'not a subproject';",
          "93:         if (url[0] == \"'\" && url.length>3)",
          "94:             url = url.substr(1,url.length-3);",
          "95:         var dif = exec('fossil diff');",
          "96:         if (dif)",
          "97:             throw 'sorry: run \"fossil commit\" first';",
          "98:         return exec('fossil pull --from-parent-project '+url);",
          "99:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:             delete int;",
          "55:         }",
          "56:     }",
          "70:         if (fn === '') {",
          "71:             var lst = File.glob('/zvfs/lib/*'), rc = [];",
          "72:             for (var i of lst) {",
          "73:                 var ft = File.tail(i), fr = File.rootname(ft);",
          "75:                 if (File.isdir(i) && File.exists(i+'/'+fr+'.jsi'))",
          "76:                     rc.push(fr);",
          "77:                 else if (ext === '.jsi' && ft !== 'Jsish.jsi' && ft !=='autoload.jsi')",
          "",
          "[Removed Lines]",
          "58:     function main() {",
          "59:         LogTrace('Starting');",
          "60:         if (self.json)",
          "61:             return jsonify(self.json);",
          "62:         if (self.es5lint)",
          "63:             return es5lint(self.es5lint);",
          "64:         if (self.rootdir === '')",
          "65:             self.rootdir=Info.scriptDir();",
          "66:         debugger;",
          "67:         var ext, fn = self.create;",
          "68:         if (self.setup !== '')",
          "69:             return setupApp(self.setup);",
          "74:                 ext = File.extension(ft);",
          "",
          "[Added Lines]",
          "127:     function run(fn:string='', ...) {",
          "132:                 var ext = File.extension(ft);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:             }",
          "80:             throw 'missing required module name or builtin:\\n    '+rc.sort().join(', ')+'\\n';",
          "81:         }",
          "82:         ext = File.extension(fn);",
          "83:         if (ext !== '.jsi')",
          "84:             fn += '.jsi';",
          "85:         if (self.output !== '')",
          "86:             fn = self.output;",
          "92:         var pat = File.rootname(File.tail(fn));",
          "94:         var tmpl = File.read('/zvfs/lib/templates/'+pref+'.jsi');",
          "95:         var re = new RegExp(pref,'g');",
          "96:         tmpl = tmpl.replace(re, pat);",
          "",
          "[Removed Lines]",
          "87:         if (File.exists(fn)) {",
          "88:             if (!self.force)",
          "89:                 throw 'file exists: '+fn;",
          "90:             File.remove(fn);",
          "91:         }",
          "93:         var pref = (self.web?'WebApp':'Module');",
          "",
          "[Added Lines]",
          "140:         require(fn);",
          "141:         return moduleRun(fn);",
          "142:     }",
          "144:     function createmod(fn:string, tmpname='Module') {",
          "145:         if (self.rootdir === '')",
          "146:             self.rootdir=Info.scriptDir();",
          "147:         var ext;",
          "153:         if (File.exists(fn))",
          "154:             throw 'file exists: '+fn;",
          "156:         var pref = tmpname;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:             console.printf(\"Created module '%s' in %s\\n\", pat, fn);",
          "102:     }",
          "105: }",
          "107: module(Module);",
          "",
          "[Removed Lines]",
          "104:     return main();",
          "",
          "[Added Lines]",
          "167:     var cmdList = [",
          "168:         [\"createmod\",   createmod,     \"Create a .jsi module from template\" ],",
          "169:         [\"es5lint\",     es5lint,    \"Perform lint check with ES6 features disabled\"],",
          "170:         [\"getfossil\",   getfossil,  \"Download fossil executable\"],",
          "171:         [\"jsonify\",     jsonify,    \"Normalize a json file\"],",
          "172:         [\"run\",         run,        \"Run a module\" ],",
          "173:         [\"sclone\",      sclone,     \"Clone a sub-project from fossil parent (pdq)\"],",
          "174:         [\"supdate\",     supdate,    \"Update a sub-project created with sclone: pulls changes\"]",
          "175:     ];",
          "177:     return Jsi_CmdTable(args, cmdList);",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:     function cleanup() {",
          "561:         LogDebug(\"Done!\");",
          "565:         if (!self.wsObj)",
          "567:     }",
          "569:     function main() {",
          "",
          "[Removed Lines]",
          "563:             delete self.optdb;",
          "564:         delete self.db;",
          "",
          "[Added Lines]",
          "562:         if (self.optdbfile)",
          "563:             self.optdb = null;",
          "564:         self.db = null;",
          "566:             self.ws = null;",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:     }",
          "622:     if (self.noWait) {",
          "624:         return self;",
          "625:     }",
          "627:     if (self.timeout)",
          "628:         setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);",
          "629:     while (!self.done && Event.update(100) ) ;",
          "631: }",
          "633: module(Websrv, '1.2.3', {nofreeze:false, logmask:'debug,trace'});",
          "",
          "[Removed Lines]",
          "623:         self.openWebsock = OpenWebsock;",
          "",
          "[Added Lines]",
          "629:     self.ws = null;",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:             self.onDone(id, self, isError);",
          "64:     }",
          "100:             self.ssl = true;",
          "101:         }",
          "145:     }",
          "148: }",
          "150: module(Wget, \"1.2\", {logmask:'trace'});",
          "",
          "[Removed Lines]",
          "66:     function main() {",
          "67:         if (typeof(fileargs) === 'string')",
          "68:             fileargs = [fileargs];",
          "69:         if (!fileargs || fileargs.length !== 1)",
          "70:             throw \"expected a url arg\";",
          "71:         self.url = fileargs[0];",
          "72:         var m = self.url.match(/^([a-zA-Z]+):\\/\\/([^\\/]*+)(.*)$/);",
          "73:         if (!m)",
          "74:             throw 'invalid url: '+self.url;",
          "75:         self.scheme = m[1];",
          "76:         self.address = m[2];",
          "77:         self.path = m[3];",
          "78:         var as = self.address.split(':');",
          "79:         if (as.length==2) {",
          "80:             self.port = parseInt(as[1]);",
          "81:             self.address = as[0];",
          "82:         } else  if (as.length != 1)",
          "83:             throw 'bad port in address: '+self.address;",
          "85:         if (self.O == '')",
          "86:             self.O = File.tail(self.path);",
          "87:         if (self.O == '')",
          "88:             self.O = '.';",
          "89:         if (self.O !== '-' && self.O !== '.' && File.exists(self.O)) {",
          "90:             if (!self.force)",
          "91:                 throw 'output file already exists: '+self.O;",
          "92:             File.remove(self.O);",
          "93:         }",
          "94:         if (self.post.length)",
          "95:             self.protocol = 'post';",
          "97:         if (self.sslDir) {",
          "98:             if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "99:             if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "103:         var wsopts = {",
          "104:             client:true,",
          "105:             onRecv:WsRecv,",
          "106:             onClose:WsClose,",
          "107:             debug:self.wsdebug,",
          "108:             rootdir:self.path,",
          "109:             port:self.port,",
          "110:             address:self.address,",
          "111:             protocol:self.protocol,",
          "112:             clientHost:self.address,",
          "113:             sslCert:self.sslcert,",
          "114:             sslKey:self.sslkey,",
          "115:             ssl:self.ssl,",
          "116:         };",
          "117:         for (var i in self.wsOpts)",
          "118:             wsopts[i] = self.wsOpts[i];",
          "119:         if (self.post.length)",
          "120:             wsopts.post = self.post;",
          "121:         if (self.headers.length)",
          "122:             wsopts.headers = self.headers;",
          "123:         if (self.scheme === 'https') {",
          "124:             if (!Interp.conf('hasOpenSSL'))",
          "125:                 puts('SSL is not compiled in: falling back to http:');",
          "126:             else {",
          "127:                 if (self.port === 80)",
          "128:                     wsopts.port = 443;",
          "129:                 self.ssl = true;",
          "130:             }",
          "131:         }",
          "132:         LogTrace(\"Starting:\", conf, wsopts);",
          "133:         self.ws = new WebSocket( wsopts );",
          "134:         if (self.nowait)",
          "135:             return self;",
          "136:         while (!self.done) {",
          "137:             update(200);",
          "138:             LogTrace(\"UPDATE\");",
          "139:         }",
          "140:         if (self.unzip)",
          "141:             Zip(['unzip', self.O]);",
          "143:         if (self.response !== '')",
          "144:             return self.response;",
          "147:     return main();",
          "",
          "[Added Lines]",
          "66:     if (typeof(fileargs) === 'string')",
          "67:         fileargs = [fileargs];",
          "68:     if (!fileargs || fileargs.length !== 1)",
          "69:         throw \"expected a url arg\";",
          "70:     self.url = fileargs[0];",
          "71:     var m = self.url.match(/^([a-zA-Z]+):\\/\\/([^\\/]*+)(.*)$/);",
          "72:     if (!m)",
          "73:         throw 'invalid url: '+self.url;",
          "74:     self.scheme = m[1];",
          "75:     self.address = m[2];",
          "76:     self.path = m[3];",
          "77:     var as = self.address.split(':');",
          "78:     if (as.length==2) {",
          "79:         self.port = parseInt(as[1]);",
          "80:         self.address = as[0];",
          "81:     } else  if (as.length != 1)",
          "82:         throw 'bad port in address: '+self.address;",
          "84:     if (self.O == '')",
          "85:         self.O = File.tail(self.path);",
          "86:     if (self.O == '')",
          "87:         self.O = '.';",
          "88:     if (self.O !== '-' && self.O !== '.' && File.exists(self.O)) {",
          "89:         if (!self.force)",
          "90:             throw 'output file already exists: '+self.O;",
          "91:         File.remove(self.O);",
          "92:     }",
          "93:     if (self.post.length)",
          "94:         self.protocol = 'post';",
          "96:     if (self.sslDir) {",
          "97:         if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "98:         if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "99:         self.ssl = true;",
          "100:     }",
          "102:     var wsopts = {",
          "103:         client:true,",
          "104:         onRecv:WsRecv,",
          "105:         onClose:WsClose,",
          "106:         debug:self.wsdebug,",
          "107:         rootdir:self.path,",
          "108:         port:self.port,",
          "109:         address:self.address,",
          "110:         protocol:self.protocol,",
          "111:         clientHost:self.address,",
          "112:         sslCert:self.sslcert,",
          "113:         sslKey:self.sslkey,",
          "114:         ssl:self.ssl,",
          "115:     };",
          "116:     for (var i in self.wsOpts)",
          "117:         wsopts[i] = self.wsOpts[i];",
          "118:     if (self.post.length)",
          "119:         wsopts.post = self.post;",
          "120:     if (self.headers.length)",
          "121:         wsopts.headers = self.headers;",
          "122:     if (self.scheme === 'https') {",
          "123:         if (!Interp.conf('hasOpenSSL'))",
          "124:             puts('SSL is not compiled in: falling back to http:');",
          "125:         else {",
          "126:             if (self.port === 80)",
          "127:                 wsopts.port = 443;",
          "131:     LogTrace(\"Starting:\", conf, wsopts);",
          "132:     self.ws = new WebSocket( wsopts );",
          "133:     if (self.nowait)",
          "134:         return self;",
          "135:     while (!self.done) {",
          "136:         update(200);",
          "137:         LogTrace(\"UPDATE\");",
          "138:     }",
          "139:     if (self.unzip)",
          "140:         Zip(['unzip', self.O]);",
          "142:     self.ws = null; // Need cleanup because local functions prevent context deletion.",
          "143:     if (self.response)",
          "144:         return self.response;",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 File.mkdir(fdir, true);",
          "95:             File.write(destDir+fn, File.read(zdir+'/'+fn));",
          "96:         }",
          "97:         return 0;",
          "98:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:         if (zdir != '/zvfs')",
          "98:             Zvfs.unmount(zdir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:         usage('');",
          "140:         throw 'first arg must be a cmd';",
          "141:     }",
          "143:     var fname = args[1];",
          "144:     if (args[0] !== 'zip' && fname && !File.exists(fname))",
          "145:         throw 'file does not exist: ' + fname;",
          "159: }",
          "161: module(Zip, 1, {exit:true});",
          "",
          "[Removed Lines]",
          "147:     if (args.length > 0) {",
          "148:         for (var i of cmdList) {",
          "149:             if (i[0] == args[0]) {",
          "150:                 return i[1].apply(null, args.slice(1));",
          "151:             }",
          "152:         }",
          "153:     }",
          "154:     var emsg = 'Arg 1 must be one of:\\n';",
          "155:     for (i of cmdList) {",
          "156:         emsg += '  ' + i[0] + '      \\t: ' + i[2] + '\\n';",
          "157:     }",
          "158:     throw emsg;",
          "",
          "[Added Lines]",
          "149:     return Jsi_CmdTable(args, cmdList);",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: Jsi_Auto.Jsi_SqlValues  =",
          "13: Jsi_Auto.Jsi_TableObj   =",
          "14: Jsi_Auto.Jsi_CopyDir    =",
          "15: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "16: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "17: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: Jsi_Auto.Jsi_CmdTable   =",
          "",
          "---------------"
        ],
        "lib/www/index.htm||lib/www/index.htm": [
          "File: lib/www/index.htm -> lib/www/index.htm",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     <meta charset=\"utf-8\">",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">",
          "6:     <meta name=\"application-name\" content=\"jsi index.htm\">",
          "7:     <link rel=\"stylesheet\" href=\"./css/bootstrap.css\">",
          "8:     <link rel=\"stylesheet\" href=\"./css/bootstrap-vue.css\">",
          "9:     <link rel=\"stylesheet\" href=\"./css/animate.css\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:     <link rel='shortcut icon' href='favicon.ico' type='image/x-icon' />",
          "",
          "---------------"
        ],
        "lib/www/index.html||lib/www/index.html": [
          "File: lib/www/index.html -> lib/www/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     <meta charset=\"utf-8\">",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">",
          "6:     <meta name=\"application-name\" content=\"jsi index.html\">",
          "7:     <link rel=\"stylesheet\" href=\"./css/bootstrap.css\">",
          "8:     <link rel=\"stylesheet\" href=\"./css/bootstrap-vue.css\">",
          "9:     <link rel=\"stylesheet\" href=\"./css/animate.css\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:     <link rel='shortcut icon' href='favicon.ico' type='image/x-icon' />",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     subopts:{},",
          "42:     approot:'./',",
          "43:     jsiroot:'./',",
          "44:     websock:true,",
          "45: };",
          "46: var self = { // Internal self information.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     baseroot:'',",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "889:     JSI_OPT_END(Jsi_ModuleConf, .help=\"Options for require command\")",
          "890: };",
          "893:     jsi_PkgInfo *ptr;",
          "894:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "895:     if (hPtr && ((ptr = (jsi_PkgInfo*)Jsi_HashValueGet(hPtr)))) {",
          "896:         Jsi_Obj *nobj = Jsi_ObjNew(interp);",
          "897:         Jsi_ValueMakeObject(interp, ret, nobj);",
          "898:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
          "899:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
          "900:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
          "",
          "[Removed Lines]",
          "892: Jsi_RC jsi_PkgDumpInfo(Jsi_Interp *interp, const char *name, Jsi_Value **ret) {",
          "",
          "[Added Lines]",
          "892: Jsi_RC jsi_PkgDumpInfo(Jsi_Interp *interp, const char *name, Jsi_Value **ret, Jsi_Number lastReq) {",
          "898:         if (lastReq)",
          "899:             ptr->lastReq = lastReq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "931: {",
          "932:     const char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "934:         Jsi_ValueMakeNull(interp, ret);",
          "935:     return JSI_OK;",
          "936: }",
          "",
          "[Removed Lines]",
          "933:     if (!name || jsi_PkgDumpInfo(interp, name, ret) != JSI_OK)",
          "",
          "[Added Lines]",
          "935:     if (!name || jsi_PkgDumpInfo(interp, name, ret, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "976:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "977:         if (rc != JSI_OK)",
          "978:             return rc;",
          "980:     }",
          "981:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 2);",
          "",
          "[Removed Lines]",
          "979:         return jsi_PkgDumpInfo(interp, name, ret);",
          "",
          "[Added Lines]",
          "981:         return jsi_PkgDumpInfo(interp, name, ret, n);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3551:         fval = Jsi_ValueNewArray(interp, NULL, 0);",
          "3552:         jsi_DumpOptionSpecs(interp, fval->d.obj, obj->accessorSpec->spec);",
          "3553:     } else",
          "3555:     Jsi_ObjInsert(interp, nobj, \"spec\", fval, 0);",
          "3556:     return JSI_OK;",
          "3557: }",
          "",
          "[Removed Lines]",
          "3554:         fval = Jsi_ValueNew(interp);",
          "",
          "[Added Lines]",
          "3556:         fval = Jsi_ValueNewNull(interp);",
          "3558:     Jsi_ObjInsert(interp, nobj, \"refcnt\", Jsi_ValueNewNumber(interp, (Jsi_Number)obj->refcnt), 0);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "787:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "788:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "789:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "791:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "792:           \"  -t\\t\\tTesting of scripts or directories of scripts with .js/.jsi extension.\\n\"",
          "793:           \"  -w\\t\\tWget: web client to download file from url.\\n\"",
          "",
          "[Removed Lines]",
          "790:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "",
          "[Added Lines]",
          "790:           \"  -m\\t\\tInvoke named Module.\\n\"",
          "791:           \"  -M\\t\\tModule utilities\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:                 break;",
          "822:             case 'e':",
          "823:                 if (argc < 3)",
          "825:                 else {",
          "826:                     Jsi_ShiftArgs(interp, NULL);",
          "827:                     rc = Jsi_EvalString(interp, argv[2], JSI_EVAL_ISMAIN|JSI_EVAL_NOSKIPBANG);",
          "",
          "[Removed Lines]",
          "824:                     rc = Jsi_LogError(\"missing argument\");",
          "",
          "[Added Lines]",
          "825:                     rc = Jsi_LogError(\"expected eval-expression argument\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:             case 'J':",
          "833:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "834:                 break;",
          "835:             case 'm':",
          "838:                 else {",
          "839:                     Jsi_DString dStr = {}, eStr = {};",
          "840:                     const char *cps, *cpe;",
          "",
          "[Removed Lines]",
          "836:                 if (argc <= 2 || argv[2][0] == '-')",
          "837:                     rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "836:             case 'M':",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "838:                 break;",
          "840:                 if (argc <= 2)",
          "841:                     rc = Jsi_LogError(\"expected a module-name: see available with 'jsish -M run'\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "888:                 break;",
          "889:             default:",
          "890:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL | --T ] \\n\\t\"",
          "892:                 return jsi_DoExit(interp, 1);",
          "893:         }",
          "894:     } else {",
          "",
          "[Removed Lines]",
          "891:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "[Added Lines]",
          "895:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m  | -M | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "915:         } else {",
          "916:             if (argc>1) {",
          "918:                 Jsi_IncrRefCount(interp, jsi_vf);",
          "919:             }",
          "920:             rc = Jsi_EvalFile(interp, jsi_vf, JSI_EVAL_ARGV0|JSI_EVAL_AUTOINDEX|JSI_EVAL_ISMAIN);",
          "",
          "[Removed Lines]",
          "917:                 jsi_vf = Jsi_ValueNewStringKey(interp, argv[first]);",
          "",
          "[Added Lines]",
          "921:                 const char *avf = argv[first];",
          "922:                 int avlen = Jsi_Strlen(avf), isdot=!Jsi_Strcmp(avf,\".\");",
          "923:                 if (avlen && (isdot || avf[avlen-1]=='/')) {",
          "924:                     char avfp[PATH_MAX];",
          "925:                     snprintf(avfp, sizeof(avfp), \"%smain.jsi\", (isdot?\"./\":avf));",
          "926:                     jsi_vf = Jsi_ValueNewStringDup(interp, avfp);",
          "927:                 } else",
          "928:                     jsi_vf = Jsi_ValueNewStringKey(interp, avf);",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     if (logHook)",
          "280:         (*logHook)(buf, va);",
          "282:         vsnprintf(interp->errMsgBuf, sizeof(interp->errMsgBuf), buf, va);",
          "283:     else if (interp->subOpts.logAllowDups)",
          "284:         vfprintf(stderr, buf, va);",
          "",
          "[Removed Lines]",
          "281:     else if (code == JSI_LOG_ERROR && interp->logOpts.capture && !interp->errMsgBuf[0])",
          "",
          "[Added Lines]",
          "281:     else if ((code == JSI_LOG_ERROR || code == JSI_LOG_PARSE) && interp->logOpts.capture && !interp->errMsgBuf[0])",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "135:     Jsi_Value* version;",
          "136:     int idx;",
          "137:     ws_IndexTypeE dirIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     int pollms;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:     JSI_OPT(REGEXP, jsi_wsCmdObj, getRegexp,  .help=\"Call onGet() only if Url matches pattern\"),",
          "334:     JSI_OPT(ARRAY,  jsi_wsCmdObj, headers,    .help=\"Headers to send to browser: name/value pairs\", jsi_IIOF),",
          "336:     JSI_OPT(STRING, jsi_wsCmdObj, interface,  .help=\"Interface for server to listen on, eg. 'eth0' or 'lo'\", jsi_IIOF),",
          "337:     JSI_OPT(BOOL,   jsi_wsCmdObj, local,      .help=\"Limit connections to localhost addresses on the 127 network\"),",
          "338:     JSI_OPT(STRKEY, jsi_wsCmdObj, localhostName,.help=\"Client name used by localhost connections ('localhost')\"),",
          "",
          "[Removed Lines]",
          "335:     JSI_OPT(STRKEY, jsi_wsCmdObj, jsiFnPattern,.help=\"A glob-match pattern for files to which is appended 'window.jsiWebSocket=true;' (jsig*.js)\", jsi_IIRO),",
          "",
          "[Added Lines]",
          "336:     JSI_OPT(STRKEY, jsi_wsCmdObj, jsiFnPattern,.help=\"A glob-match pattern for files to which is appended 'window.jsiWebSocket=true;' (jsi_config*.js)\", jsi_IIRO),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "359:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "360:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Alias document root  ({jsi:'/zvfs/lib/www'}) \", jsi_IIOF),",
          "361:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "362:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "363:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:     JSI_OPT(INT,    jsi_wsCmdObj, pollms,     .help=\"Poll wait time in ms (0)\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1976:         func = ((pss && pss->onRecv)?pss->onRecv:cmdPtr->onRecv);",
          "1977:     if (!func)",
          "1978:         return JSI_OK;",
          "1980:     vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss?pss->wid:0));",
          "1981:     if (isClose)",
          "1982:         vargs[n++] = Jsi_ValueNewBoolean(interp, isError);",
          "",
          "[Removed Lines]",
          "1979:     vargs[n++] = (cmdPtr->deleted?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "",
          "[Added Lines]",
          "1981:     vargs[n++] = (cmdPtr->deleted || !cmdPtr->fobj?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2619:             Jsi_Value *vpargs, *vargs[10];",
          "2620:             int n = 0;",
          "2622:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, n, 0));",
          "2623:             Jsi_IncrRefCount(interp, vpargs);",
          "2624:             jrc = Jsi_FunctionInvoke(interp, cmdPtr->onCloseLast, vpargs, &retStr, NULL);",
          "",
          "[Removed Lines]",
          "2621:             vargs[n++] = (cmdPtr->deleted?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "",
          "[Added Lines]",
          "2623:             vargs[n++] = (cmdPtr->deleted || !cmdPtr->fobj?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3116:     if (n < 0) {",
          "3117:         n = 0;",
          "3118:         goto done;",
          "",
          "[Removed Lines]",
          "3115:     n = poll(jsi_wspollfds, jsi_wsnum_pollfds, 50);",
          "",
          "[Added Lines]",
          "3117:     n = poll(jsi_wspollfds, jsi_wsnum_pollfds, cmdPtr->pollms);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3132:                 }",
          "3133: done:",
          "3134: #else",
          "3136: #endif",
          "3137:     if (cmdPtr->onModify) {",
          "3138:         jsi_wsOnModify(cmdPtr);",
          "",
          "[Removed Lines]",
          "3135:     n = lws_service(cmdPtr->context, 50);",
          "",
          "[Added Lines]",
          "3137:     n = lws_service(cmdPtr->context, cmdPtr->pollms);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3358:     cmdPtr->startTime = time(NULL);",
          "3359:     cmdPtr->hasOpts = 1;",
          "3360:     cmdPtr->includeFile = \"include.shtml\";",
          "3362:     if ((arg != NULL && !Jsi_ValueIsNull(interp,arg))",
          "3363:         && Jsi_OptionsProcess(interp, WSOptions, cmdPtr, arg, 0) < 0) {",
          "3364: bail:",
          "",
          "[Removed Lines]",
          "3361:     cmdPtr->jsiFnPattern = \"jsig*.js\";",
          "",
          "[Added Lines]",
          "3363:     cmdPtr->jsiFnPattern = \"jsi_config*.js\";",
          "",
          "---------------"
        ],
        "tests/freeze.jsi||tests/freeze.jsi": [
          "File: tests/freeze.jsi -> tests/freeze.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: Object.freeze(x) ==> undefined",
          "35: '",
          "36: ---- Query freeze state'",
          "38: x.a = 9 ==> 9",
          "39: ++x.b ==> 3",
          "40: '",
          "",
          "[Removed Lines]",
          "37: Info.obj(x) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[], objType:\"object\", setters:[], spec:undefined }",
          "",
          "[Added Lines]",
          "37: Info.obj(x) ==> { freeze:true, freezeModify:true, freezeReadCheck:true, getters:[], objType:\"object\", refcnt:3, setters:[], spec:null }",
          "",
          "---------------"
        ],
        "tests/obj2.jsi||tests/obj2.jsi": [
          "File: tests/obj2.jsi -> tests/obj2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: x.export ==> 100",
          "43: x.foo++ ==> 9",
          "44: Info.vars(x) ==> [ \"_bar\", \"_foo\", \"export\" ]",
          "46: keys ==> [ \"bar\", \"foo\" ]",
          "47: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "45: i=Info.obj(x) ==> { freeze:false, freezeModify:true, freezeReadCheck:false, getters:[ \"foo\", \"bar\" ], objType:\"object\", setters:[ \"foo\", \"bar\" ], spec:undefined }",
          "",
          "[Added Lines]",
          "45: i=Info.obj(x) ==> { freeze:false, freezeModify:true, freezeReadCheck:false, getters:[ \"foo\", \"bar\" ], objType:\"object\", refcnt:3, setters:[ \"foo\", \"bar\" ], spec:null }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "61adbeff58471ccfb200d7c3d912a1c29649b234",
      "candidate_info": {
        "commit_hash": "61adbeff58471ccfb200d7c3d912a1c29649b234",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/61adbeff58471ccfb200d7c3d912a1c29649b234",
        "files": [
          "lib/Jsish.jsi",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiMySql.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tests/arrow.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.12\": Fix arrow functions used as function arguments.\n\nFossilOrigin-Name: 8705476ca450a3929a5b9a8caf83d34695a527ddb33ba0ce3d6c7c5deff2244b",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tests/arrow.jsi||tests/arrow.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return false;",
          "307: }",
          "309: function Jsi__Init() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: function Jsi_TableObj(db:userobj, table:string, data:object, conf:object=void) {",
          "310:     var self = {};",
          "311:     var options = {",
          "312:         noCreate    :false,     // Create table, if not exists.",
          "313:         objOpts     :{},        // Options for objOpts",
          "314:         verbose     :false",
          "315:     };",
          "316:     parseOpts(self, options, conf);",
          "317:     var cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "318:     if (!cols.length) {",
          "319:         if (!self.noCreate)",
          "320:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "321:         return true;",
          "322:     }",
          "323:     var oo = self.objOpts;",
          "324:     oo.getSql = true;",
          "326:     var cs = db.onecolumn(\"SELECT sql from sqlite_master where type='table' and name=@table\").trim();",
          "327:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo}).trim();",
          "328:     if (fs === cs)",
          "329:         return true;",
          "330:     var f = fs.substr( fs.indexOf('(')+1, fs.length-1));",
          "331:     var c = cs.substr( cs.indexOf('(')+1, cs.length-1));",
          "332:     var fl = f.split(',[').sort(), cl = c.split(',[').sort();",
          "333:     if (fl.join(',[') == cl.join(',[')",
          "334:         return true;",
          "335:     var cln = cl.length, fln=fl.length;",
          "336:     if (cln >= fln) {",
          "337:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"')",
          "338:         return false;",
          "339:     }",
          "340:     var ci = 0, fi = 0;",
          "341:     while (cl<cln && fi<fln) {",
          "342:         if (cl[ci] === fl[fi]) {",
          "343:             ci++; fi++; continue;",
          "344:         }",
          "345:         var cn = cl[ci].substr(0, cl[ci].indexOf(']')-1),",
          "346:             fn = fl[fi].substr(0, fl[fi].indexOf(']')-1);",
          "347:     }",
          "348:     for (var i in data) {",
          "349:         if (cl[i]) continue;",
          "350:         var rec = s.substr( s.indexOf(','+i+' '));",
          "351:         if (!rec) throw('failed to find schema: '+i);",
          "352:         rec = rec.substr(1);",
          "353:         var re = rec.indexOf(',');",
          "354:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "355:             re = rec.indexOf(',', re);",
          "356:         rec = rec.substr(0, re);",
          "357:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "358:         puts(\"RR: \",sql);",
          "359:         if (self.verbose)",
          "360:             LogInfo('SCHEMA:',sql);",
          "361:         db.eval(sql);",
          "362:         cl[i] = rec;",
          "363:     }",
          "365:     return false;",
          "366: }",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 11",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 12",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:     if (!Jsi_ValueIsFunction(interp, func))",
          "374:         return Jsi_LogError(\"expected function\");",
          "375:     sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "378:     obj = _this->d.obj;",
          "379:     curlen = jsi_SizeOfArray(interp, obj);",
          "380:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "376:     if (!sthis)",
          "377:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "376:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "377:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "378:         Jsi_IncrRefCount(interp, sthis);",
          "379:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:     if (!Jsi_ValueIsFunction(interp, func))",
          "433:         return Jsi_LogError(\"expected function\");",
          "434:     sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "437:     obj = _this->d.obj;",
          "438:     curlen = jsi_SizeOfArray(interp, obj);",
          "439:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "435:     if (!sthis)",
          "436:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "437:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "438:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "439:         Jsi_IncrRefCount(interp, sthis);",
          "440:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:     Jsi_Obj *obj;",
          "495:     Jsi_Value *tval, *nthis = NULL, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "499:     obj = _this->d.obj;",
          "500:     Jsi_ObjListifyArray(interp, obj);",
          "501:     m = obj->arrCnt/2;",
          "",
          "[Removed Lines]",
          "497:     if (!sthis)",
          "498:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "501:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "502:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "503:         Jsi_IncrRefCount(interp, sthis);",
          "504:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523:         return Jsi_LogError(\"expected function\");",
          "524:     Jsi_Value *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "525:     Jsi_Value *nthis = NULL;",
          "529:     obj = _this->d.obj;",
          "530:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "526:     if (!sthis)",
          "527:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "532:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "533:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "534:         Jsi_IncrRefCount(interp, sthis);",
          "535:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:     if (!Jsi_ValueIsFunction(interp, func))",
          "563:         return Jsi_LogError(\"expected function\");",
          "564:     Jsi_Value *nthis = NULL;",
          "568:     obj = _this->d.obj;",
          "569:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "565:     if (!sthis)",
          "566:         sthis = nthis = Jsi_ValueNew1(interp);",
          "",
          "[Added Lines]",
          "573:     if (!sthis || !Jsi_ValueIsObjType(interp, sthis, JSI_OT_OBJECT)) {",
          "574:         sthis = nthis = Jsi_ValueNewObj(interp, NULL);",
          "575:         Jsi_IncrRefCount(interp, sthis);",
          "576:     }",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:             goto bail;",
          "1629:         zSql = Jsi_DSValue(&eStr);",
          "1630:     }",
          "1631:     if (!opts.separator) {",
          "1632:         switch (opts.mode) {",
          "1633:             case _mdb_EF_LIST: opts.separator = \"|\"; break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1631:     if ((opts.objOpts&OBJMODE_SQLONLY)) {",
          "1632:         if (opts.objName)",
          "1633:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "1634:         else",
          "1635:             rc = Jsi_LogError(\"'objOpts.sqlOnly' can only be used with 'objName'\");",
          "1636:         goto bail;",
          "1637:     }",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     switch(v->vt) {",
          "703:         case JSI_VT_UNDEF:",
          "704:         case JSI_VT_NULL:",
          "709:             o->d.num = 0;",
          "710:             o->ot = JSI_OT_NUMBER;",
          "711:             o->__proto__ = interp->Number_prototype;",
          "",
          "[Removed Lines]",
          "705:             if (interp->strict) {",
          "706:                 Jsi_LogError(\"converting a undefined/null value to object\");",
          "707:                 rc = JSI_ERROR;",
          "708:             }",
          "",
          "[Added Lines]",
          "705:             if (interp->strict)",
          "706:                 rc = Jsi_LogError(\"converting a undefined/null value to object\");",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:     }",
          "606:     | '(' expr ')'          { $$ = $2; }",
          "607:     | arrowargs ARROW expr %prec MIN_PRI {",
          "608:         $$ = code_push_func(pstate,  &@1, jsi_FuncMake(pstate, $1, codes_join($3, code_ret(pstate, &@3, 1)), &@1, NULL, 1));",
          "609:     }",
          "610:     | arrowargs ARROW func_statement_block {",
          "611:         $$ = code_push_func(pstate,  &@1, jsi_FuncMake(pstate, $1, $3, &@1, NULL, 1));",
          "612:     }",
          "613:     | expr AND expr         {",
          "614:         Jsi_OpCodes *expr2 = codes_join(code_pop(1), $3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:         jsi_PstatePush(pstate);",
          "610:         jsi_PstatePop(pstate);",
          "613:         jsi_PstatePush(pstate);",
          "615:         jsi_PstatePop(pstate);",
          "",
          "---------------"
        ],
        "tests/arrow.jsi||tests/arrow.jsi": [
          "File: tests/arrow.jsi -> tests/arrow.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var array1, n = 0;;",
          "2: array1 = [1, 4, 9, 16];",
          "4: ;array1.map(function(x) { return x * 2; });",
          "6: ;array1.map(x => { return x * 2; });",
          "7: ;array1.map(x => x * 2);",
          "8: ;array1.map((x,y) => { return x * 2; });",
          "9: ;array1.map((x,y,z) => { return x * 2; });",
          "10: ;array1.map((x,y) => x * 2);",
          "11: ;array1.map((x,y,z) => x * 2);",
          "12: ;array1.map(() => n++ * 2);",
          "13: ;array1.map(() => { return n++ * 2; });",
          "15: var x = [1,2,3];",
          "16: var y = [1,2,3,4];",
          "17: ;y.filter( (n,m,x) => x.includes(n) );",
          "18: ;y.filter( n => x.includes(n) );",
          "19: ;y.filter( n => { return x.includes(n); } );",
          "20: ;y.filter( function(n) { return x.includes(n); } );",
          "24: =!EXPECTSTART!=",
          "25: array1.map(function(x) { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "26: array1.map(x => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "27: array1.map(x => x * 2) ==> [ 2, 8, 18, 32 ]",
          "28: array1.map((x,y) => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "29: array1.map((x,y,z) => { return x * 2; }) ==> [ 2, 8, 18, 32 ]",
          "30: array1.map((x,y) => x * 2) ==> [ 2, 8, 18, 32 ]",
          "31: array1.map((x,y,z) => x * 2) ==> [ 2, 8, 18, 32 ]",
          "32: array1.map(() => n++ * 2) ==> [ 0, 2, 4, 6 ]",
          "33: array1.map(() => { return n++ * 2; }) ==> [ 8, 10, 12, 14 ]",
          "34: y.filter( (n,m,x) => x.includes(n) ) ==> [ 1, 2, 3, 4 ]",
          "35: y.filter( n => x.includes(n) ) ==> [ 1, 2, 3 ]",
          "36: y.filter( n => { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "37: y.filter( function(n) { return x.includes(n); } ) ==> [ 1, 2, 3 ]",
          "38: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
      "candidate_info": {
        "commit_hash": "fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/fa0ff924859c1df28e77268f359b1c2fa34e6edd",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/web/docs/app.css",
          "lib/web/docs/app.js",
          "lib/web/md/Builds.md",
          "lib/web/md/Index.md",
          "lib/web/md/Misc.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.3\": Fix crash from issue #18\n\nFossilOrigin-Name: 930e210f5d990ed4953cf49cb9d7528247c0d55d19b9158d60cec49f46649986",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "23:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "24:         docs        :'',        // Display markdown docs from this directory.",
          "25:         ignoreExit  :false,     // Ignore exit request.",
          "26:         initArg     :[],        // List of app modules to run.",
          "27:         isFile      :false,     // Url is a file, so throw if not exists.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         onRecv      :null,      // Callback command to handle websocket msgs.",
          "35:         pageStr     :'',        // String to serve out as url.",
          "36:         port        :0,         // Start search for port.",
          "38:         query       :'',        // Query to append to url.",
          "39:         rootdir     :null,      // Base directory.",
          "40:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "",
          "[Removed Lines]",
          "37:         portMax     :1000,      // Max times to increment-retry port if busy.",
          "",
          "[Added Lines]",
          "38:         portMax     :999,       // Max times to increment-retry port if busy.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         sslFnCert   :'cert.pem',// File name in sslDir of cert.",
          "43:         sslFnKey    :'privkey.pem',// File name in sslDir of key.",
          "44:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "47:         trace       :false,     // Tracing output.",
          "48:         udata       :{},        // Shortcut add of udata to wsOpts.",
          "49:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "50:         urlPrefix   :'',        // Prefix for urls",
          "51:         urlUnknown  :'',        // Url to redirect 404 to.",
          "52:         useridPass  :'',        // USER:PASS for web GUI.",
          "53:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "54:         wsdebug     :0,         // Debug option for websockets.",
          "",
          "[Removed Lines]",
          "45:         uploadDir   :'/tmp',    // Upload files go here",
          "46:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Added Lines]",
          "46:         timeout     :59999,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "49:         uploadDir   :'/tmp',    // Upload files go here",
          "53:         urlFallback :'',        // File-url to serve out if page not found.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:             if (!File.exists(self.wsinc))",
          "431:                 self.wsinc = '';",
          "432:         }",
          "434:             self.timeout = 0;",
          "435:     } if (self.docs) {",
          "436:         if (self.rootdir || self.zip)",
          "",
          "[Removed Lines]",
          "433:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "435:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "441:         else if (File.isdir(sd) && File.exists(sd+'/'+surl))",
          "442:             self.rootdir = self.docs;",
          "443:         else",
          "445:         if (!self.wsinc) {",
          "446:             self.wsinc = self.rootdir+'/docs/wsinc.jsi';",
          "447:             if (!File.exists(self.wsinc))",
          "448:                 self.wsinc = '';",
          "449:         }",
          "451:             self.timeout = 0;",
          "",
          "[Removed Lines]",
          "444:             throw('-docs must be a docs dir or \"/\"'+self.docs);",
          "450:         if (self.timeout != options.timeout)",
          "",
          "[Added Lines]",
          "446:             throw('expected docs dir or \"/\" in -docs '+self.docs);",
          "452:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "476:     }",
          "477:     if (!self.rootdir)",
          "478:         self.rootdir = '.';",
          "481:     var wopts = self.wsopts = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     if (self.hist && !self.urlFallback)",
          "482:         self.urlFallback = self.url;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:         onFilter:WsFilter,",
          "492:         port:self.port,",
          "493:         rootdir:self.rootdir,",
          "496:         sslCert:self.sslcert,",
          "497:         sslKey:self.sslkey,",
          "498:         ssl:self.ssl,",
          "",
          "[Removed Lines]",
          "494:         urlPrefix:self.urlPrefix,",
          "495:         urlUnknown:self.urlUnknown,",
          "",
          "[Added Lines]",
          "498:         urlPrefix:(self.urlPrefix?self.urlPrefix:null),",
          "499:         urlUnknown:(self.urlUnknown?self.urlUnknown:null),",
          "500:         urlFallback:(self.urlFallback?self.urlFallback:null),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "512:             if (!self.app && !self.docs)",
          "513:                 throw('mod \"'+self.mod+'\" not one of: admin, menu');",
          "514:     }",
          "516:         self.timeout = 0;",
          "517:     if (!self.app && !self.docs && !self.server && !self.pageStr && self.mod === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "518:         throw(\"url file empty or not found: \"+self.url);",
          "",
          "[Removed Lines]",
          "515:     if (urlOrig!=='' && self.timeout === 60000)",
          "",
          "[Added Lines]",
          "520:     if (urlOrig!=='' && self.timeout === options.timeout)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "523:         wopts.noCompress = true;",
          "524:     if (self.server) {",
          "525:         self.noGui = true;",
          "527:             self.timeout = 0;",
          "528:     } else if (!self.noReload)",
          "529:         wopts.onModify = onModify;",
          "",
          "[Removed Lines]",
          "526:         if (self.timeout !== options.timeout)",
          "",
          "[Added Lines]",
          "531:         if (self.timeout == options.timeout)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "551:     OpenWebsock();",
          "556:     if (!self.noGui && self.url && self.url.length) {",
          "557:         OpenBrowser(self.url, self.anchor, self.query);",
          "",
          "[Removed Lines]",
          "554:     LogTrace(\"Listening on port:\",self.port);",
          "",
          "[Added Lines]",
          "559:     LogTrace(\"Listening on port:\",wsopts.port);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:     if (bsc == 0 && interp->lastSubscriptFail && interp->lastSubscriptFail->vt != JSI_VT_UNDEF)",
          "973:         Jsi_ValueReset(interp, &interp->lastSubscriptFail);",
          "975:     Jsi_Value res = VALINIT,",
          "",
          "[Removed Lines]",
          "974:         Jsi_ValueToObject(interp, src);",
          "",
          "[Added Lines]",
          "974:     rc = Jsi_ValueToObject(interp, src);",
          "975:     if (rc != JSI_OK)",
          "976:         return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1265:             }",
          "1266:             case OP_ASSIGN: {",
          "1267:                 Jsi_Value *sval = _jsi_TOP, *dval = _jsi_TOQ;",
          "1269:                 if ((uintptr_t)ip->data & 1) {",
          "1270:                     jsiVarDeref(interp,1);",
          "1271:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "",
          "[Removed Lines]",
          "1268:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1285:                     jsiClearStack(interp,3);",
          "1286:                     Jsi_ValueCopy(interp,v3, sval);",
          "1287:                     dval = v3;",
          "1294:                 }",
          "1295:                 break;",
          "1296:             }",
          "1297:             case OP_PUSHREG: {",
          "",
          "[Removed Lines]",
          "1288:                     jsiPop(interp, 2);",
          "1289:                 }",
          "1290:                 if (fp->level<=1 && globThis && rc == JSI_OK && dval && dval->vt == JSI_VT_VARIABLE) {",
          "1291:                     dval = dval->d.lval;",
          "1293:                     Jsi_HashSet(interp->genValueTbl, dval, dval);",
          "",
          "[Added Lines]",
          "1289:                     jsiPop(interp, 2);\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1352:                     if (v->vt == JSI_VT_VARIABLE) {",
          "1353:                         Jsi_ValueCopy(interp, v, v->d.lval);",
          "1354:                     }",
          "1356:                 }",
          "1357:                 break;",
          "1358:             }",
          "",
          "[Removed Lines]",
          "1355:                     Jsi_ValueToObject(interp, v);",
          "",
          "[Added Lines]",
          "1352:                     rc = Jsi_ValueToObject(interp, v);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1587:                     break;",
          "1588:                 }",
          "1589:                 if (_jsi_TOP->vt != JSI_VT_UNDEF && _jsi_TOP->vt != JSI_VT_NULL)",
          "1591:                 Jsi_Value *spret = Jsi_ValueNew1(interp);",
          "1592:                 jsi_ValueObjGetKeys(interp, _jsi_TOP, spret, ip->isof);",
          "1593:                 Jsi_ValueReplace(interp, _jsi_STACK+fp->Sp, spret);",
          "",
          "[Removed Lines]",
          "1590:                     Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1587:                     rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2024:                     break;",
          "2025:                 }",
          "2026:                 jsiVarDeref(interp,1);",
          "2029:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_WITH, scope, currentScope);",
          "",
          "[Removed Lines]",
          "2027:                 Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "[Added Lines]",
          "2024:                 rc = Jsi_ValueToObject(interp, _jsi_TOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     int flags;",
          "143:     jsi_wsStatData stats;",
          "144:     char *iface;",
          "146:     const char *localhostName;",
          "147:     const char *clientName;",
          "148:     const char *clientIP;",
          "",
          "[Removed Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown;",
          "",
          "[Added Lines]",
          "145:     const char* urlPrefix, *urlRedirect, *urlUnknown, *urlFallback;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     int recvBufMax;",
          "165:     int recvBufCnt;",
          "166:     int recvBufTimeout;",
          "167:     int lastRevCnt; // For update",
          "168:     time_t createLast;",
          "169:     time_t startTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     int sessFlag;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:     JSI_OPT(BOOL,   jsi_wsCmdObj, redirMax,   .help=\"Temporarily disable redirects when see more than this in 10 minutes\"),",
          "366:     JSI_OPT(STRING, jsi_wsCmdObj, rootdir,    .help=\"Directory to serve html from (\\\".\\\")\"),",
          "367:     JSI_OPT(STRKEY, jsi_wsCmdObj, server,     .help=\"String to send out int the header SERVER (jsiWebSocket)\"),",
          "368:     JSI_OPT(OBJ,    jsi_wsCmdObj, ssiExts,    .help=\"Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} \", jsi_IIOF),",
          "369:     JSI_OPT(BOOL,   jsi_wsCmdObj, ssl,        .help=\"Use https\", jsi_IIOF),",
          "370:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslCert,    .help=\"SSL certificate file\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     JSI_OPT(INT,    jsi_wsCmdObj, sessFlag,   .help=\"Flag to send in sessionJsi cookie\", jsi_IIOF),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "373:     JSI_OPT(TIME_T, jsi_wsCmdObj, startTime,  .help=\"Time of websocket start\", jsi_IIRO),",
          "374:     JSI_OPT(STRKEY, jsi_wsCmdObj, includeFile,.help=\"Default file when no extension given (include.shtml)\"),",
          "375:     JSI_OPT(OBJ,    jsi_wsCmdObj, udata,      .help=\"User data\"),",
          "376:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlPrefix,  .help=\"Prefix in url to strip from path; for reverse proxy.\"),",
          "377:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlRedirect,.help=\"Redirect when no url or /, and adds cookie sessionJsi.\"),",
          "379:     JSI_OPT(STRKEY, jsi_wsCmdObj, useridPass, .help=\"The USERID:PASSWORD to use for basic authentication\"),",
          "380:     JSI_OPT(OBJ,    jsi_wsCmdObj, version,    .help=\"WebSocket version info\", jsi_IIRO),",
          "381:     JSI_OPT_END(jsi_wsCmdObj, .help=\"Websocket options\")",
          "",
          "[Removed Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for unknown page or 404.\"),",
          "",
          "[Added Lines]",
          "378:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlFallback,.help=\"Fallback to serve when file not found.\"),",
          "381:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlUnknown, .help=\"Redirect for 404 unknown page.\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "402:     Jsi_DString *hStr);",
          "404: static void wss_MakeSessionKey( jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss) {",
          "406: }",
          "",
          "[Removed Lines]",
          "405:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "",
          "[Added Lines]",
          "408:     int flag = (cmdPtr->urlFallback && cmdPtr->urlFallback[0]);",
          "409:     snprintf(pss->key, sizeof(pss->key), \"sessionJsi=%d%p%d.%d.%d\",",
          "410:         pss->wid, pss, (int)cmdPtr->startTime, flag, cmdPtr->sessFlag);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1463:     uchar *p = buffer, *end = &buffer[sizeof(buffer)-1];",
          "1464:     int n;",
          "1465:     Jsi_Value* fname = NULL;",
          "1467:     cmdPtr->stats.httpLast = now;",
          "1469:     if (inPtr[0] != '~')",
          "1470:         inPtr = Jsi_NormalPath(interp, inPtr, iStr);",
          "",
          "[Removed Lines]",
          "1466:     bool isJsiWeb = 0, isSSI = 0;",
          "",
          "[Added Lines]",
          "1471:     bool isJsiWeb = 0, isSSI = 0, fallbackTry = 0;",
          "1474: falltry:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485:         else",
          "1486:             cmdPtr->redirDisable--;",
          "1487:     }",
          "1491:     {",
          "1492:         cmdPtr->stats.redirCnt++;",
          "1494:         if (cmdPtr->redirMax>0 && !cmdPtr->redirDisable && cmdPtr->redirMax>0 && cmdPtr->stats.redirLast",
          "1495:             && difftime(now, cmdPtr->stats.redirLast)<600 && ++cmdPtr->redirAllCnt>cmdPtr->redirMax)",
          "1496:             cmdPtr->redirDisable = 100;",
          "1497:         cmdPtr->stats.redirLast = now;",
          "1499:         return (rc == 100 ? 0 : 1);",
          "1500:     }",
          "",
          "[Removed Lines]",
          "1489:     if ((cmdPtr->urlRedirect && (inPtr == 0 || *inPtr == 0 || !Jsi_Strcmp(inPtr, \"/\")) && !cmdPtr->redirDisable)",
          "1490:         && (inPtr = (char*)cmdPtr->urlRedirect) && inPtr[0])",
          "1498:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "[Added Lines]",
          "1494:     int redirCode = 301;",
          "1496:     bool doRedir = (inPtr == 0 || *inPtr == 0 || (inPtr[0] =='/' && !inPtr[1]));",
          "1497:     if (doRedir && !cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0])",
          "1499:         inPtr = (char*)cmdPtr->urlRedirect;",
          "1500: doredir:",
          "1507:         rc = lws_http_redirect(wsi, redirCode, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1791:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1792:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "1793: nofile:",
          "1797:         }",
          "1798:         if (cmdPtr->onUnknown || pss->onUnknown) {",
          "1799:             Jsi_Value *uk = (pss->onUnknown?pss->onUnknown:cmdPtr->onUnknown);",
          "",
          "[Removed Lines]",
          "1794:         if (cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1795:             rc = lws_http_redirect(wsi, 301, (uchar*)cmdPtr->urlUnknown, Jsi_Strlen(cmdPtr->urlUnknown), &p, end);",
          "1796:             goto done;",
          "",
          "[Added Lines]",
          "1803:         if (cmdPtr->urlFallback && cmdPtr->urlFallback[0] && !fallbackTry) {",
          "1804:             inPtr = (char*)cmdPtr->urlFallback;",
          "1805:             fallbackTry=1;",
          "1806:             goto falltry;",
          "1807:         }",
          "1808:         if (!cmdPtr->redirDisable && cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1809:             redirCode = 404;",
          "1810:             inPtr = (char*)cmdPtr->urlUnknown;",
          "1811:             goto doredir;",
          "1812:         }",
          "1813:         if (!cmdPtr->redirDisable && cmdPtr->urlRedirect && cmdPtr->urlRedirect[0]) {",
          "1814:             inPtr = (char*)cmdPtr->urlRedirect;",
          "1815:             goto doredir;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}