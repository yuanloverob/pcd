{
  "cve_id": "CVE-2022-36752",
  "cve_desc": "png2webp v1.0.4 was discovered to contain an out-of-bounds write via the function w2p. This vulnerability is exploitable via a crafted png file.",
  "repo": "landfillbaby/png2webp",
  "patch_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
  "patch_info": {
    "commit_hash": "8f21ad79b0cd98fc22d5b49734543101946abbff",
    "repo": "landfillbaby/png2webp",
    "commit_url": "https://github.com/landfillbaby/png2webp/commit/8f21ad79b0cd98fc22d5b49734543101946abbff",
    "files": [
      "png2webp.c"
    ],
    "message": "v1.0.5: fix buffer overrun when reading bad WebPs",
    "before_after_code_files": [
      "png2webp.c||png2webp.c"
    ]
  },
  "patch_diff": {
    "png2webp.c||png2webp.c": [
      "File: png2webp.c -> png2webp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include <errno.h>",
      "5: #include <inttypes.h>",
      "6: #include <limits.h>",
      "",
      "[Removed Lines]",
      "3: #define VERSION \"v1.0.4\"",
      "",
      "[Added Lines]",
      "3: #define VERSION \"v1.0.5\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320:   size_t l = ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;",
      "322:   x = malloc(l);",
      "323:   if(!x) {",
      "324:     PF(\"ERROR reading %s: %s\", IP, *k);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "322:   if(l <= 12",
      "323: #ifdef SSIZE_MAX",
      "324:     || l - 12 > SSIZE_MAX",
      "325: #endif",
      "326:   ) {",
      "327:     PF(\"ERROR reading %s: %s\", IP, k[2]);",
      "328:     goto w2p_close;",
      "329:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96a45edb2da3d5b83f21471657323beef35cd5e6",
      "candidate_info": {
        "commit_hash": "96a45edb2da3d5b83f21471657323beef35cd5e6",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/96a45edb2da3d5b83f21471657323beef35cd5e6",
        "files": [
          "Makefile",
          "README.md",
          "TODO.txt",
          "exestamp.c",
          "petimestamp.c",
          "png2webp.c"
        ],
        "message": "v1.0.2: c99 compatible again, rely less on libpng\n\nimprove and rename Windows timestamper\nminor tweaks to code, verbose/error output",
        "before_after_code_files": [
          "exestamp.c||exestamp.c",
          "petimestamp.c||petimestamp.c",
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "exestamp.c||exestamp.c": [
          "File: exestamp.c -> exestamp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <errno.h>",
          "4: #include <inttypes.h>",
          "5: #include <limits.h>",
          "6: #include <stdio.h>",
          "7: #include <stdlib.h>",
          "8: #include <string.h>",
          "9: #if CHAR_BIT != 8",
          "10: #error \"char isn't 8-bit\"",
          "11: #endif",
          "12: int main(int argc, char **argv) {",
          "13:   if(argc != 3 || *argv[2] < '0' || *argv[2] > '9') {",
          "14:   h:",
          "15:     fputs(\"Usage: exestamp EXE STAMP\\nEXE: Windows PE32(+) file\\nSTAMP: \\",
          "16: Decimal, octal (leading 0), or hexadecimal (leading 0x) Unix timestamp\\n\",",
          "17:       stderr);",
          "18:     return -1;",
          "19:   }",
          "20:   char *n;",
          "21:   uint32_t t = (uint32_t)strtoll(argv[2], &n, 0);",
          "22:   if(*n || errno) goto h;",
          "23:   FILE *f = fopen(argv[1], \"rb+\");",
          "24:   if(!f) {",
          "25:     fputs(\"Couldn't open file\\n\", stderr);",
          "26:     return 1;",
          "27:   }",
          "28:   uint8_t b[4];",
          "29:   if(!fread(b, 2, 1, f)) {",
          "30:   e:",
          "31:     fputs(\"Invalid Windows PE32(+) file\\n\", stderr);",
          "32:     fclose(f);",
          "33:     return 1;",
          "34:   }",
          "35: #define B (uint32_t)((b[3] << 24) | (b[2] << 16) | (b[1] << 8) | *b)",
          "36:   if(memcmp(b, (char[2]){\"MZ\"}, 2) || fseek(f, 60, SEEK_SET) ||",
          "37:     !fread(b, 4, 1, f) || fseek(f, B, SEEK_SET) || !fread(b, 4, 1, f) ||",
          "38:     memcmp(b, \"PE\\0\", 4) || fseek(f, 4, SEEK_CUR))",
          "39:     goto e;",
          "40: #ifndef NO_PRINT_ORIG",
          "41:   if(!fread(b, 4, 1, f)) goto e;",
          "42:   fprintf(stderr, \"Original timestamp: %\" PRIu32 \"\\n\", B);",
          "43:   if(fseek(f, -4, SEEK_CUR)) goto e;",
          "44: #endif",
          "45:   if(!fwrite(",
          "46:        (char[]){(char)t, (char)(t >> 8), (char)(t >> 16), (char)(t >> 24)}, 4,",
          "47:        1, f)) {",
          "48:     fputs(\"Couldn't write new timestamp\\n\", stderr);",
          "49:     fclose(f);",
          "50:     return 1;",
          "51:   }",
          "52:   if(fclose(f)) {",
          "53:     fputs(\"Error while closing file\\n\", stderr);",
          "54:     return 1;",
          "55:   }",
          "56: }",
          "",
          "---------------"
        ],
        "petimestamp.c||petimestamp.c": [
          "File: petimestamp.c -> petimestamp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <errno.h>",
          "6: #include <limits.h>",
          "7: #include <setjmp.h>",
          "8: #include <stdbool.h>",
          "10: #include <stdio.h>",
          "11: #include <stdlib.h>",
          "12: #include <string.h>",
          "13: #if __STDC_VERSION__ < 201112L && !defined NOFOPENX",
          "14: #define NOFOPENX",
          "15: #endif",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.0.1\"",
          "4: #include <assert.h>",
          "9: #include <stdint.h>",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.0.2\"",
          "5: #include <inttypes.h>",
          "12: #if CHAR_BIT != 8",
          "13: #error \"char isn't 8-bit\"",
          "14: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: #define OP (op ? op : \"<stdout>\")",
          "66: static FILE *openr(char *ip) {",
          "67:   PFV(\"Decoding %s ...\", IP);",
          "69:   FILE *fp;",
          "70: #ifdef NOFOPENX",
          "71:   int fd = open(ip, O_RDONLY | O_BINARY);",
          "",
          "[Removed Lines]",
          "68:   if(!ip) return stdin; // TODO: char **ip; *ip = \"<stdin>\" ?",
          "",
          "[Added Lines]",
          "70:   if(!ip) return stdin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88: }",
          "89: static FILE *openw(char *op) {",
          "90:   PFV(\"Encoding %s ...\", OP);",
          "92:   FILE *fp;",
          "93: #define EO(x) \\",
          "94:   if(!(x)) { \\",
          "",
          "[Removed Lines]",
          "91:   if(!op) return stdout; // TODO: char **op; *op = \"<stdout>\" ?",
          "",
          "[Added Lines]",
          "93:   if(!op) return stdout;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:     S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH",
          "105: #endif",
          "106:   );",
          "108:   if(!(fp = fdopen(fd, WB))) {",
          "109:     PF(\"ERROR opening %s for %s: %s\", op, force ? \"writing\" : \"creation\",",
          "110:       strerror(errno));",
          "",
          "[Removed Lines]",
          "107:   EO(fd != -1) // TODO: gotos?",
          "",
          "[Added Lines]",
          "109:   EO(fd != -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:   if(!fwrite(d, s, 1, png_get_io_ptr(p))) png_error(p, \"I/O error\");",
          "127:   pnglen += s;",
          "128: }",
          "134: static int webpwrite(const uint8_t *d, size_t s, const WebPPicture *p) {",
          "135:   return (int)fwrite(d, s, 1, p->custom_ptr);",
          "136: }",
          "",
          "[Removed Lines]",
          "130: static void pngflush(png_struct *p) { (void)p; }",
          "131: equivalent to the default but may generate smaller static code:",
          "132: static void pngflush(png_struct *p) { fflush(png_get_io_ptr(p)); }",
          "",
          "[Added Lines]",
          "131: static void pngflush(png_struct *p) {",
          "132: #ifdef DOFLUSH",
          "133:   fflush(png_get_io_ptr(p));",
          "134: #else",
          "135:   (void)p;",
          "136: #endif",
          "137: }",
          "138: static void pngrerr(png_struct *p, const char *s) {",
          "139:   PF(\"ERROR reading %s: %s\", (char *)png_get_error_ptr(p), s);",
          "140:   png_longjmp(p, 1);",
          "141: }",
          "142: static void pngwerr(png_struct *p, const char *s) {",
          "143:   PF(\"ERROR writing %s: %s\", (char *)png_get_error_ptr(p), s);",
          "144:   png_longjmp(p, 1);",
          "145: }",
          "146: static void pngwarn(png_struct *p, const char *s) {",
          "147:   PF(\"Warning: %s: %s\", (char *)png_get_error_ptr(p), s);",
          "148: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:   if(!fp) return 1;",
          "145:   uint32_t *b = 0;",
          "146:   png_info *n = 0;",
          "148:     \"???\", // oom flushing bitstream, unused in libwebp",
          "149:     \"???\", // null param",
          "150:     \"Broken config, file a bug report\",",
          "",
          "[Removed Lines]",
          "147:   char *k[VP8_ENC_ERROR_LAST - 1 /* 3 */] = {\"Out of memory\",",
          "",
          "[Added Lines]",
          "162:   char *k[] = {\"Out of memory\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153:     \"I/O error\",",
          "154:     \"???\", // lossy",
          "155:     \"???\"}; // cancelled",
          "158:   if(!p) {",
          "159:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "160:     goto p2w_close;",
          "",
          "[Removed Lines]",
          "156:   png_struct *p = png_create_read_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);",
          "",
          "[Added Lines]",
          "171:   png_struct *p =",
          "172:     png_create_read_struct(PNG_LIBPNG_VER_STRING, ip, pngrerr, pngwarn);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "179:   int bitdepth, colortype;",
          "180:   png_get_IHDR(p, n, &width, &height, &bitdepth, &colortype, 0, 0, 0);",
          "181:   if(width > 16383 || height > 16383) {",
          "184:     goto p2w_close;",
          "185:   }",
          "187:     PF(\"Warning: %s is 16-bit, will be downsampled to 8-bit\", IP);",
          "188:   bool trns = png_get_valid(p, n, PNG_INFO_tRNS);",
          "189: #ifdef FIXEDGAMMA",
          "",
          "[Removed Lines]",
          "182:     PF(\"ERROR reading %s: Image too big (%u x %u, max. 16383 x 16383 px)\", IP,",
          "183:       width, height);",
          "186:   if(bitdepth > 8)",
          "",
          "[Added Lines]",
          "197:     PF(\"ERROR reading %s: Image too big (%\" PRIu32 \" x %\" PRIu32",
          "198:        \", max. 16383 x 16383 px)\",",
          "199:       IP, width, height);",
          "202:   if((unsigned)bitdepth > 8)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:     PF(\"ERROR reading %s: %s\", IP, *k);",
          "226:     goto p2w_close;",
          "227:   }",
          "229:     uint8_t *w = (uint8_t *)b;",
          "230:     for(unsigned y = height; y; y--) {",
          "231:       png_read_row(p, w, 0);",
          "",
          "[Removed Lines]",
          "228:   for(int x = passes; x; x--) {",
          "",
          "[Added Lines]",
          "244:   for(unsigned x = (unsigned)passes; x; x--) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "235:   png_read_end(p, 0);",
          "236:   png_destroy_read_struct(&p, &n, 0);",
          "237:   fclose(fp);",
          "239:     \"greyscale\", \"???\", \"RGB\", \"paletted\", \"greyscale + alpha\", \"???\", \"RGBA\"};",
          "242:     IP, width, height, pnglen, (double)pnglen * 8 / (width * height), bitdepth,",
          "245:   trns = trns || (colortype & PNG_COLOR_MASK_ALPHA);",
          "246:   if(!(fp = openw(op))) goto p2w_free;",
          "247:   WebPAuxStats s;",
          "248:   WebPPicture o = {1, .width = (int)width, (int)height, .argb = b,",
          "249:     .argb_stride = (int)width, .writer = webpwrite, .custom_ptr = fp,",
          "252:   if(!WebPEncode(",
          "253:        &(WebPConfig){",
          "255:   1, 100, 6, // lossless, max",
          "256:   WEBP_HINT_GRAPH, // 16-bit is only for alpha on lossy",
          "257: #ifndef NOTHREADS",
          "",
          "[Removed Lines]",
          "238:   char *colors[7] = {",
          "240:   PFV(\"Info: %s:\\nDimensions: %u x %u\\nSize: %zu bytes (%.15g bpp)\\n\"",
          "241:       \"Format: %u-bit %s (%u)%s%s\\nGamma: %.5g\",",
          "243:     (unsigned)colortype < 7 ? colors[colortype] : \"???\", colortype,",
          "244:     trns ? \", with transparency\" : \"\", passes > 1 ? \", interlaced\" : \"\", GAMMA);",
          "250:     .stats = verbose ? &s : 0}; // TODO: memset? WebPPictureInit?",
          "",
          "[Added Lines]",
          "254:   char *c[] = {",
          "256:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "257:       \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "259:     c[(unsigned)colortype], trns ? \", with transparency\" : \"\",",
          "260:     (unsigned)passes > 1 ? \", interlaced\" : \"\", GAMMA);",
          "266:     .stats = verbose ? &s : 0}; // TODO: WebPPictureInit?",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "276:   free(b);",
          "277: #define F s.lossless_features",
          "278: #define C s.palette_size",
          "283:     OP, o.width, o.height, s.lossless_size,",
          "284:     (unsigned)s.lossless_size * 8. / (unsigned)(o.width * o.height),",
          "285:     s.lossless_hdr_size, s.lossless_data_size, trns ? \"yes\" : \"no\",",
          "",
          "[Removed Lines]",
          "279:   PFV(\"Info: %s:\\nDimensions: %u x %u\\nSize: %u bytes (%.15g bpp)\\n\"",
          "280:       \"Header size: %u, image data size: %u\\nUses alpha: %s\\n\"",
          "281:       \"Precision bits: histogram=%u transform=%u cache=%u\\n\"",
          "282:       \"Lossless features:%s%s%s%s\\nColors: %s%u\",",
          "",
          "[Added Lines]",
          "295:   PFV(\"Info: %s:\\nDimensions: %u x %u\\nSize: %u bytes (%.15g bpp)\\n\\",
          "296: Header size: %u, image data size: %u\\nUses alpha: %s\\n\\",
          "297: Precision bits: histogram=%u transform=%u cache=%u\\n\\",
          "298: Lossless features:%s%s%s%s\\nColors: %s%u\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "289:     C ? \"\" : \">\", C ? C : 256);",
          "290:   return 0;",
          "291: }",
          "300: static bool w2p(char *ip, char *op) {",
          "301:   FILE *fp = openr(ip);",
          "302:   if(!fp) return 1;",
          "",
          "[Removed Lines]",
          "293: Ideally should palette if <=256 colors (in order of appearance),",
          "294: or at least try to palette when input WebP was,",
          "295: but that's not part of either libpng encoding or libwebp decoding.",
          "296: Maybe do this:",
          "297: WEBP_EXTERN int WebPGetColorPalette( // declared in libwebp utils/utils.h",
          "298: const struct WebPPicture *const, uint32_t *const);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "304:   uint8_t *x = 0, *b = 0;",
          "305:   png_struct *p = 0;",
          "306:   png_info *n = 0;",
          "308:   char *k[] = {\"Out of memory\", \"Broken config, file a bug report\",",
          "309:     \"Invalid WebP\", \"???\", \"???\", \"???\", \"I/O error\"};",
          "312:   if(!fread(i, 12, 1, fp)) {",
          "313:     PF(\"ERROR reading %s: %s\", IP, k[6]);",
          "314:     goto w2p_close;",
          "",
          "[Removed Lines]",
          "307:   uint8_t i[12]; // TODO: 16 when LOSSYISERROR and check for VP8[LX]?",
          "",
          "[Added Lines]",
          "315:   uint8_t i[12];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "343:     goto w2p_free;",
          "344:   }",
          "345: #define V I.format",
          "348: #define A I.has_alpha",
          "349: #ifdef LOSSYISERROR",
          "350: #define FMTSTR",
          "",
          "[Removed Lines]",
          "346: #define W ((unsigned)I.width)",
          "347: #define H ((unsigned)I.height)",
          "",
          "[Added Lines]",
          "353: #define W ((uint32_t)I.width)",
          "354: #define H ((uint32_t)I.height)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "352: #define ANMSTR \"%s\"",
          "353: #define ANMARG , \"animat\"",
          "354: #else",
          "358: #define ANMSTR \"animat\"",
          "359: #define ANMARG",
          "360: #endif",
          "363:     IP, W, H, l, (double)l * 8 / (W * H), A ? \"yes\" : \"no\" FMTARG);",
          "364:   if(I.has_animation) {",
          "365:     PF(\"ERROR reading %s: Unsupported feature: \" ANMSTR \"ion\", IP ANMARG);",
          "",
          "[Removed Lines]",
          "355:   char *formats[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};",
          "356: #define FMTSTR \"\\nFormat: %s (%d)\"",
          "357: #define FMTARG , (unsigned)V < 3 ? formats[V] : \"???\", V",
          "361:   PFV(\"Info: %s:\\nDimensions: %u x %u\\nSize: %zu bytes (%.15g bpp)\\n\"",
          "362:       \"Uses alpha: %s\" FMTSTR,",
          "",
          "[Added Lines]",
          "362:   char *f[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};",
          "363: #define FMTSTR \"\\nFormat: %s\"",
          "364: #define FMTARG , f[V]",
          "368:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "369:       \"\\nSize: %zu bytes (%.15g bpp)\\nUses alpha: %s\" FMTSTR,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "400:   x = 0;",
          "401:   if(!(fp = openw(op))) goto w2p_free;",
          "402:   openwdone = !!op;",
          "404:   if(!p) {",
          "405:     PF(\"ERROR writing %s: %s\", OP, *k);",
          "406:     goto w2p_close;",
          "",
          "[Removed Lines]",
          "403:   p = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);",
          "",
          "[Added Lines]",
          "410:   p = png_create_write_struct(PNG_LIBPNG_VER_STRING, op, pngwerr, pngwarn);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "421:     return 1;",
          "422:   }",
          "423:   pnglen = 0;",
          "425:   png_set_filter(p, 0, PNG_ALL_FILTERS);",
          "426:   png_set_compression_level(p, 9);",
          "",
          "[Removed Lines]",
          "424:   png_set_write_fn(p, fp, pngwrite, 0); // TODO: pngflush?",
          "",
          "[Added Lines]",
          "431:   png_set_write_fn(p, fp, pngwrite, pngflush);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "442:     PF(\"ERROR closing %s: %s\", OP, strerror(errno));",
          "443:     goto w2p_free;",
          "444:   }",
          "449:   return 0;",
          "450: }",
          "451: int main(int argc, char **argv) {",
          "453:   { // should be optimized out",
          "454:     uint32_t endian;",
          "455:     memcpy(&endian, (char[4]){\"\\xAA\\xBB\\xCC\\xDD\"}, 4);",
          "",
          "[Removed Lines]",
          "445:   PFV(\"Info: %s:\\nDimensions: %u x %u\\nSize: %zu bytes (%.15g bpp)\\n\"",
          "446:       \"Format: %u-bit %s (%u)%s%s\\nGamma: %.5g\",",
          "447:     OP, W, H, pnglen, (double)pnglen * 8 / (uint32_t)(W * H), 8,",
          "448:     A ? \"RGBA\" : \"RGB\", A ? 6 : 2, \"\", \"\", 1 / 2.2);",
          "452:   static_assert(CHAR_BIT == 8, \"char isn't 8-bit\");",
          "",
          "[Added Lines]",
          "452:   PFV(\"Info: %s:\\nDimensions: %\" PRIu32 \" x %\" PRIu32",
          "453:       \"\\nSize: %zu bytes (%.15g bpp)\\nFormat: %u-bit %s%s%s\\nGamma: %.5g\",",
          "454:     OP, W, H, pnglen, (double)pnglen * 8 / (W * H), 8, A ? \"RGBA\" : \"RGB\", \"\",",
          "455:     \"\", 1 / 2.2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "248ce524b6a94afe41e4300e8f0db493fc7017c6",
      "candidate_info": {
        "commit_hash": "248ce524b6a94afe41e4300e8f0db493fc7017c6",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/248ce524b6a94afe41e4300e8f0db493fc7017c6",
        "files": [
          "png2webp.c",
          "png2webp.h",
          "webp2png.c"
        ],
        "message": "memcpy instead of unions for type punning",
        "before_after_code_files": [
          "png2webp.c||png2webp.c",
          "png2webp.h||png2webp.h",
          "webp2png.c||webp2png.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <pam.h>",
          "6: #define INEXT \"pam\"",
          "7: #define X(x) ((argv[0][len - 2] | 32) == x)",
          "10: #else",
          "11: #include <png.h>",
          "12: #define INEXT \"png\"",
          "14: #endif",
          "15: #define OUTEXT \"webp\"",
          "17: #define EXTRALETTERS \"e\"",
          "18: #define EXTRAHELP \"-e: Keep RGB data on pixels where alpha is 0.\\n\"",
          "19: #define EXTRAFLAGS case 'e': exact = 1; break;",
          "",
          "[Removed Lines]",
          "8: #define ISINEXT (len > 3 && EXTMASK(0, \"\\0 \\xff \", \".p\\xffm\") && \\",
          "9:  (X('b') || X('g') || X('p') || X('n') || X('a')))",
          "13: #define ISINEXT ISPNG(0)",
          "16: #define ISOUTEXT ISWEBP(1)",
          "",
          "[Added Lines]",
          "8: #define ISINEXT \\",
          "9:  if(len > 3) { \\",
          "10:   uint32_t ext, extmask, extmatch; \\",
          "11:   memcpy(&ext, *argv + len - 4, 4); \\",
          "12:   memcpy(&extmask, (char[4]){\"\\0 \\xff \"}, 4); \\",
          "13:   memcpy(&extmatch, (char[4]){\".p\\xffm\"}, 4); \\",
          "14:   if((ext | extmask) == extmatch && (X('b') || X('g') || \\",
          "15:    X('p') || X('n') || X('a'))) len -= 4; \\",
          "16:  }",
          "22: #define OUTEXTCHK OUTEXT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: }",
          "26: int main(int argc, char** argv) {",
          "27: #if !defined(PAM) && !defined(USEADVANCEDPNG)",
          "31: #endif",
          "32: #ifdef PAM",
          "33:   pm_init(\"ERROR\", 0); // TODO: maybe *argv or (INEXT \"2\" OUTEXT) ?",
          "",
          "[Removed Lines]",
          "28: #define X U(\"\\xAA\\xBB\\xCC\\xDD\")",
          "29:   E(X == 0xAABBCCDD || X == 0xDDCCBBAA,",
          "30:  \"32-bit mixed-endianness (%X) not supported\", X);",
          "",
          "[Added Lines]",
          "34:   uint32_t endian;",
          "35:   memcpy(&endian, (char[4]){\"\\xAA\\xBB\\xCC\\xDD\"}, 4);",
          "36:   E(endian == 0xAABBCCDD || endian == 0xDDCCBBAA,",
          "37:  \"32-bit mixed-endianness (%X) not supported\", endian);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84: #define D (i.depth > 2)",
          "85:  for(unsigned x = 0; x < W; x++)",
          "86:   o.argb[y * W + x] = ((A ? r[x][i.opacity_plane] : 255) << 24) |",
          "89:     }",
          "90:     pnm_freepamrow(r);",
          "",
          "[Removed Lines]",
          "87:    (r[x][0] << 16) | (r[x][D] << 8) | r[x][D * 2];",
          "",
          "[Added Lines]",
          "94:    (*r[x] << 16) | (r[x][D] << 8) | r[x][D * 2];",
          "",
          "---------------"
        ],
        "png2webp.h||png2webp.h": [
          "File: png2webp.h -> png2webp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define O(x) x",
          "19: #define M 0666",
          "20: #endif",
          "31: #define P(x) fputs(x \"\\n\", stderr)",
          "32: #define PF(x, ...) fprintf(stderr, x \"\\n\", __VA_ARGS__)",
          "33: #define PV(x) if(verbose) P(x);",
          "",
          "[Removed Lines]",
          "21: typedef union {",
          "22:  uint8_t x[4];",
          "23:  uint32_t y;",
          "24: } c32;",
          "25: #define U(...) ((c32){{__VA_ARGS__}}.y)",
          "26: #define EXTMASK(x, y, z) ((U(argv[x][len - 4], argv[x][len - 3], \\",
          "27:  argv[x][len - 2], argv[x][len - 1]) | U(y)) == U(z))",
          "28: #define ISPNG(x) (len > 3 && EXTMASK(x, \"\\0   \", \".png\"))",
          "29: #define ISWEBP(x) \\",
          "30:  (len > 4 && argv[x][len - 5] == '.' && EXTMASK(x, \"    \", \"webp\"))",
          "",
          "[Added Lines]",
          "21: #ifndef ISINEXT",
          "22: #ifndef INEXTCHK",
          "23: #define INEXTCHK \".\" INEXT",
          "24: #endif",
          "25: #define ISINEXT \\",
          "26:  if(len >= sizeof INEXT) { \\",
          "27:   uint32_t ext, extmask, extmatch; \\",
          "28:   memcpy(&ext, *argv + len - 4, 4); \\",
          "29:   memcpy(&extmask, (char[4]){(sizeof INEXT > 4) * 32, 32, 32, \\",
          "30:    32}, 4); \\",
          "31:   memcpy(&extmatch, (char[4]){INEXTCHK}, 4); \\",
          "32:   if((sizeof INEXT < 5 || argv[0][len - 5] == '.') && \\",
          "33:    (ext | extmask) == extmatch) len -= sizeof INEXT; \\",
          "34:  }",
          "35: #endif",
          "36: #ifndef OUTEXTCHK",
          "37: #define OUTEXTCHK \".\" OUTEXT",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:     usestdout = URGC < 2 || PIPEARG(1); \\",
          "130:   } else if(!chosen && URGC < 3) { \\",
          "131:     usestdin = !argc || PIPEARG(0); \\",
          "133:     if(!(usepipe = usestdin || usestdout)) { \\",
          "134:  PF(\"Warning: %d file%s given and neither -b or -p specified.\", argc, \\",
          "135:   argc == 1 ? \"\" : \"s\"); \\",
          "",
          "[Removed Lines]",
          "132:     usestdout = (argc == 2 ? PIPEARG(1) : usestdin); \\",
          "",
          "[Added Lines]",
          "140:     usestdout = argc == 2 ? PIPEARG(1) : usestdin; \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   if(!O(isatty)(1)) usepipe = usestdout = skipstdoutchk = 1; \\",
          "138:  } else { \\",
          "139:   size_t len = strlen(argv[1]); \\",
          "142:  PF(\"Guessed -%c.\", usepipe ? 'p' : 'b'); \\",
          "143:   } } \\",
          "144:   PIPECHK(0, stdin); \\",
          "",
          "[Removed Lines]",
          "140:   usepipe = ISOUTEXT; \\",
          "141:  } \\",
          "",
          "[Added Lines]",
          "148:   if(len >= sizeof OUTEXT) { \\",
          "149:    uint32_t ext, extmask, extmatch; \\",
          "150:    memcpy(&ext, argv[1] + len - 4, 4); \\",
          "151:    memcpy(&extmask, (char[4]){(sizeof OUTEXT > 4) * 32, \\",
          "152:     32, 32, 32}, 4); \\",
          "153:    memcpy(&extmatch, (char[4]){OUTEXTCHK}, 4); \\",
          "154:    usepipe = (sizeof OUTEXT < 5 || \\",
          "155:      argv[1][len - 5] == '.') && \\",
          "156:     (ext | extmask) == extmatch; \\",
          "157:  } } \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:     if(usepipe) outname = argv[1]; \\",
          "155:     else { \\",
          "156:  size_t len = strlen(*argv); \\",
          "159:  E(outname, \"adding .\" OUTEXT \" extension to %s: out of RAM\", *argv); \\",
          "160:  outnamealloced = 1; \\",
          "161:  memcpy(outname, *argv, len); \\",
          "163:     } \\",
          "164:     PFV(\"%scoding %s ...\", \"En\", outname); \\",
          "165:     OPENW \\",
          "",
          "[Removed Lines]",
          "157:  if(ISINEXT) len -= sizeof(INEXT); \\",
          "158:  outname = malloc(len + sizeof(\".\" OUTEXT)); \\",
          "162:  memcpy(outname + len, \".\" OUTEXT, sizeof(\".\" OUTEXT)); \\",
          "",
          "[Added Lines]",
          "173:  ISINEXT; \\",
          "174:  outname = malloc(len + sizeof \".\" OUTEXT); \\",
          "178:  memcpy(outname + len, \".\" OUTEXT, sizeof \".\" OUTEXT); \\",
          "",
          "---------------"
        ],
        "webp2png.c||webp2png.c": [
          "File: webp2png.c -> webp2png.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <webp/decode.h>",
          "12: #define INEXT \"webp\"",
          "14: #ifdef PAM",
          "15: #define OUTEXT \"pam\"",
          "17: #else",
          "18: #include <png.h>",
          "19: #define OUTEXT \"png\"",
          "21: #endif",
          "22: #include \"webp2png.h\"",
          "23: int main(int argc, char** argv) {",
          "",
          "[Removed Lines]",
          "13: #define ISINEXT ISWEBP(0)",
          "16: #define ISOUTEXT (len > 3 && EXTMASK(1, \"\\0   \", \".pam\"))",
          "20: #define ISOUTEXT ISPNG(1)",
          "",
          "[Added Lines]",
          "13: #define INEXTCHK INEXT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: #endif",
          "64:     if(A) c.output.colorspace = MODE_RGBA;",
          "65:     WebPIDecoder* d = WebPIDecode(i, l, &c);",
          "67:     for(size_t x = l; (r = WebPIAppend(d, i, x)); l += x) {",
          "68:  E(r == 5 && !feof(fp), \"reading WebP data: %d (%s)\", r == 5 ? 7 : r,",
          "70:  x = fread(i, 1, IDEC_BUFSIZE, fp);",
          "71:     }",
          "72:     WebPIDelete(d);",
          "",
          "[Removed Lines]",
          "66:     E(d, \"initializing WebP decoder: 1 (%s)\", k[0]);",
          "69:   r == 5 ? k[6] : (r < 8 ? k[r - 1] : \"???\"));",
          "",
          "[Added Lines]",
          "64:     E(d, \"initializing WebP decoder: 1 (%s)\", *k);",
          "67:   r == 5 ? k[6] : r < 8 ? k[r - 1] : \"???\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     png_structp png_ptr =",
          "83:  png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);",
          "85:     png_infop info_ptr = png_create_info_struct(png_ptr);",
          "87: #ifdef PNG_SETJMP_SUPPORTED",
          "89:     if(setjmp(png_jmpbuf(png_ptr))) return 1;",
          "",
          "[Removed Lines]",
          "84:     E(png_ptr, \"writing PNG: %s\", k[0]);",
          "86:     E(info_ptr, \"writing PNG: %s\", k[0]);",
          "",
          "[Added Lines]",
          "82:     E(png_ptr, \"writing PNG: %s\", *k);",
          "84:     E(info_ptr, \"writing PNG: %s\", *k);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a896d5a261cdb26741e93e56d6b627b01313b570",
      "candidate_info": {
        "commit_hash": "a896d5a261cdb26741e93e56d6b627b01313b570",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/a896d5a261cdb26741e93e56d6b627b01313b570",
        "files": [
          "compile_msvc.bat",
          "png2webp.c"
        ],
        "message": "v0.9: final version supporting netpbm",
        "before_after_code_files": [
          "compile_msvc.bat||compile_msvc.bat",
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "compile_msvc.bat||compile_msvc.bat": [
          "File: compile_msvc.bat -> compile_msvc.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     libwebp\\src\\enc\\*.c libwebp\\src\\utils\\*.c libwebp\\src\\dsp\\*.c",
          "9: cl.exe /nologo /std:c11 /W2 /Brepro /O2 /Ob3 /GL /Gw /Qpar /DNDEBUG ^",
          "10:     /Ilibpng /Izlib /Ilibwebp /Ilibwebp\\src /DWEBP_USE_THREAD ^",
          "12:     libwebp\\src\\dec\\*.c libwebp\\src\\utils\\*.c libwebp\\src\\dsp\\*.c",
          "13: del *.obj",
          "14: popd",
          "",
          "[Removed Lines]",
          "11:     /DFROMWEBP %* png2webp.c libpng\\png*.c zlib\\*.c ^",
          "",
          "[Added Lines]",
          "11:     /DFROMWEBP /Fewebp2png %* png2webp.c libpng\\png*.c zlib\\*.c ^",
          "",
          "---------------"
        ],
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #ifdef FROMWEBP",
          "7: Ideally should palette if <=256 colors (in order of appearance),",
          "",
          "[Removed Lines]",
          "4: #define VERSION \"v0.8\"",
          "",
          "[Added Lines]",
          "4: #define VERSION \"v0.9\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ef452272a442d8f8e895074d042d11c7f56cc72",
      "candidate_info": {
        "commit_hash": "7ef452272a442d8f8e895074d042d11c7f56cc72",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/7ef452272a442d8f8e895074d042d11c7f56cc72",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.0.7",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <errno.h>",
          "5: #include <inttypes.h>",
          "6: #include <limits.h>",
          "",
          "[Removed Lines]",
          "3: #define VERSION \"v1.0.6\"",
          "",
          "[Added Lines]",
          "3: #define VERSION \"v1.0.7\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55c4b6cc04219f2633fbff0bada8a52c84b1e8a7",
      "candidate_info": {
        "commit_hash": "55c4b6cc04219f2633fbff0bada8a52c84b1e8a7",
        "repo": "landfillbaby/png2webp",
        "commit_url": "https://github.com/landfillbaby/png2webp/commit/55c4b6cc04219f2633fbff0bada8a52c84b1e8a7",
        "files": [
          "png2webp.c"
        ],
        "message": "v1.1.8",
        "before_after_code_files": [
          "png2webp.c||png2webp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "png2webp.c||png2webp.c"
          ],
          "candidate": [
            "png2webp.c||png2webp.c"
          ]
        }
      },
      "candidate_diff": {
        "png2webp.c||png2webp.c": [
          "File: png2webp.c -> png2webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"p2wconf.h\"",
          "5: #endif",
          "6: #ifndef VERSION",
          "8: #endif",
          "9: #define _FILE_OFFSET_BITS 64",
          "10: #include <inttypes.h>",
          "",
          "[Removed Lines]",
          "7: #define VERSION \"v1.1.7\"",
          "",
          "[Added Lines]",
          "7: #define VERSION \"v1.1.8\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}