{
  "cve_id": "CVE-2020-4033",
  "cve_desc": "In FreeRDP before version 2.1.2, there is an out of bounds read in RLEDECOMPRESS. All FreeRDP based clients with sessions with color depth < 32 are affected. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
  "patch_info": {
    "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
    "files": [
      "libfreerdp/codec/include/bitmap.c"
    ],
    "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
      "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
      "203:     {",
      "204:      SRCREADPIXEL(fgPel, pbSrc);",
      "205:      SRCNEXTPIXEL(pbSrc);",
      "206:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204:      if (pbSrc >= pbEnd)",
      "205:       return FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:    case MEGA_MEGA_DITHERED_RUN:",
      "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "233:     pbSrc = pbSrc + advance;",
      "234:     SRCREADPIXEL(pixelA, pbSrc);",
      "235:     SRCNEXTPIXEL(pbSrc);",
      "236:     SRCREADPIXEL(pixelB, pbSrc);",
      "237:     SRCNEXTPIXEL(pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     if (pbSrc >= pbEnd)",
      "237:      return FALSE;",
      "240:     if (pbSrc >= pbEnd)",
      "241:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "252:    case MEGA_MEGA_COLOR_RUN:",
      "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "254:     pbSrc = pbSrc + advance;",
      "255:     SRCREADPIXEL(pixelA, pbSrc);",
      "256:     SRCNEXTPIXEL(pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "261:     if (pbSrc >= pbEnd)",
      "262:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
      "273:     pbSrc = pbSrc + advance;",
      "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
      "276:     {",
      "277:      SRCREADPIXEL(fgPel, pbSrc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "283:     if (pbSrc >= pbEnd)",
      "284:      return FALSE;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "338:      return FALSE;",
      "340:     UNROLL(runLength, {",
      "341:      SRCREADPIXEL(temp, pbSrc);",
      "342:      SRCNEXTPIXEL(pbSrc);",
      "343:      DESTWRITEPIXEL(pbDest, temp);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "351:      if (pbSrc >= pbEnd)",
      "352:       return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
      "candidate_info": {
        "commit_hash": "057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/057b6df4aebbe8e739139087dfaab15104ca5ba7",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed memory leaks in ntlm",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:  if (!sspi_SecBufferAlloc(&context->AuthenticateTargetInfo, size))",
          "577:  AuthenticateTargetInfo = (NTLM_AV_PAIR*)context->AuthenticateTargetInfo.pvBuffer;",
          "578:  cbAuthenticateTargetInfo = context->AuthenticateTargetInfo.cbBuffer;",
          "580:  if (!ntlm_av_pair_list_init(AuthenticateTargetInfo, cbAuthenticateTargetInfo))",
          "583:  if (AvNbDomainName)",
          "584:  {",
          "585:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvNbDomainName,",
          "586:                              cbAvNbDomainName))",
          "588:  }",
          "590:  if (AvNbComputerName)",
          "591:  {",
          "592:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "593:                              AvNbComputerName, cbAvNbComputerName))",
          "595:  }",
          "597:  if (AvDnsDomainName)",
          "598:  {",
          "599:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "600:                              AvDnsDomainName, cbAvDnsDomainName))",
          "602:  }",
          "604:  if (AvDnsComputerName)",
          "605:  {",
          "606:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo,",
          "607:                              AvDnsComputerName, cbAvDnsComputerName))",
          "609:  }",
          "611:  if (AvDnsTreeName)",
          "612:  {",
          "613:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvDnsTreeName,",
          "614:                              cbAvDnsTreeName))",
          "616:  }",
          "618:  if (AvTimestamp)",
          "619:  {",
          "620:   if (!ntlm_av_pair_add_copy(AuthenticateTargetInfo, cbAuthenticateTargetInfo, AvTimestamp,",
          "621:                              cbAvTimestamp))",
          "623:  }",
          "625:  if (context->UseMIC)",
          "",
          "[Removed Lines]",
          "575:   return -1;",
          "581:   return -1;",
          "587:    return -1;",
          "594:    return -1;",
          "601:    return -1;",
          "608:    return -1;",
          "615:    return -1;",
          "622:    return -1;",
          "",
          "[Added Lines]",
          "575:   goto fail;",
          "581:   goto fail;",
          "587:    goto fail;",
          "594:    goto fail;",
          "601:    goto fail;",
          "608:    goto fail;",
          "615:    goto fail;",
          "622:    goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvFlags,",
          "631:                         (PBYTE)&flags, 4))",
          "633:  }",
          "635:  if (context->SendSingleHostData)",
          "636:  {",
          "637:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvSingleHost,",
          "638:                         (PBYTE)&context->SingleHostData, context->SingleHostData.Size))",
          "640:  }",
          "642:  if (!context->SuppressExtendedProtection)",
          "643:  {",
          "644:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvChannelBindings,",
          "645:                         context->ChannelBindingsHash, 16))",
          "648:   if (context->ServicePrincipalName.Length > 0)",
          "649:   {",
          "650:    if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvTargetName,",
          "651:                          (PBYTE)context->ServicePrincipalName.Buffer,",
          "652:                          context->ServicePrincipalName.Length))",
          "654:   }",
          "655:  }",
          "",
          "[Removed Lines]",
          "632:    return -1;",
          "639:    return -1;",
          "646:    return -1;",
          "653:     return -1;",
          "",
          "[Added Lines]",
          "632:    goto fail;",
          "639:    goto fail;",
          "646:    goto fail;",
          "653:     goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:   AvEOL = ntlm_av_pair_get(ChallengeTargetInfo, cbChallengeTargetInfo, MsvAvEOL, NULL);",
          "662:   if (!AvEOL)",
          "665:   ZeroMemory(AvEOL, sizeof(NTLM_AV_PAIR));",
          "666:  }",
          "668:  return 1;",
          "669: }",
          "",
          "[Removed Lines]",
          "663:    return -1;",
          "",
          "[Added Lines]",
          "663:    goto fail;",
          "669: fail:",
          "670:  sspi_SecBufferFree(&context->AuthenticateTargetInfo);",
          "671:  return -1;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:  winpr_HexDump(TAG, WLOG_DEBUG, context->Timestamp, 8);",
          "545: #endif",
          "546:  context->state = NTLM_STATE_AUTHENTICATE;",
          "548:  status = SEC_I_CONTINUE_NEEDED;",
          "549: fail:",
          "550:  Stream_Free(s, FALSE);",
          "551:  return status;",
          "552: }",
          "",
          "[Removed Lines]",
          "547:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "[Added Lines]",
          "549:  ntlm_free_message_fields_buffer(&(message->TargetName));",
          "",
          "---------------"
        ]
      }
    }
  ]
}