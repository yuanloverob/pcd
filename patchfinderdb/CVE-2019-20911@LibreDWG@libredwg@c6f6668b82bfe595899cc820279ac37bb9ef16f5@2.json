{
  "cve_id": "CVE-2019-20911",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to denial of service in bit_calc_CRC in bits.c, related to a for loop.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
  "patch_info": {
    "commit_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "files": [
      "include/dwg.h",
      "src/decode.c",
      "src/encode.c",
      "src/free.c"
    ],
    "message": "cleanup tio.unknown\n\nnot needed anymore, we only have UNKNOWN_OBJ or UNKNOWN_ENT with full common\nentity_data.\nFixes GH #178 heap_overflow2",
    "before_after_code_files": [
      "include/dwg.h||include/dwg.h",
      "src/decode.c||src/decode.c",
      "src/encode.c||src/encode.c",
      "src/free.c||src/free.c"
    ]
  },
  "patch_diff": {
    "include/dwg.h||include/dwg.h": [
      "File: include/dwg.h -> include/dwg.h"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5013:           bit_set_position (dat, restartpos);",
      "5019:           if (i >= 0 && i < (int)dwg->num_classes)",
      "5020:             {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5014:           obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5032:                   LOG_ERROR (\"Invalid class index %d >%d\", i,",
      "5033:                              (int)dwg->num_classes);",
      "5034:                 }",
      "5036:               obj->type = 0;",
      "5038:               return error | DWG_ERR_VALUEOUTOFBOUNDS;",
      "5039:             }",
      "5096:         }",
      "5097:     }",
      "",
      "[Removed Lines]",
      "5035:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5041:           if (klass && !is_entity)",
      "5042:             {",
      "5043:               int err = dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5044:               error |= err;",
      "5045:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5046:               if (!dat)",
      "5047:                 return error;",
      "5048:               if (err >= DWG_ERR_CRITICAL)",
      "5050:             }",
      "5051:           else if (klass) // is_entity",
      "5052:             {",
      "5053:               int err;",
      "5054: #if 0 && !defined(IS_RELEASE)",
      "5055:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
      "5056:                 char *mleader = bit_read_TF(dat, obj->size);",
      "5057:                 LOG_INSANE_TF(mleader, (int)obj->size)",
      "5058:                 bit_set_position(dat, restartpos);",
      "5059:                 free (mleader);",
      "5060:               }",
      "5061: #endif",
      "5062:               err = dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5063:               error |= err;",
      "5064:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5065:               if (!dat)",
      "5066:                 return error;",
      "5067:               if (err >= DWG_ERR_CRITICAL)",
      "5069:             }",
      "5070:           else // not a class",
      "5071:             {",
      "5072:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "5073:               SINCE (R_2000)",
      "5074:               {",
      "5075:                 obj->bitsize = bit_read_RL (dat);",
      "5076:                 LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",",
      "5077:                            obj->bitsize, dat->byte-2, dat->bit);",
      "5078:                 if (obj->bitsize > obj->size * 8)",
      "5079:                   {",
      "5080:                     LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,",
      "5081:                                obj->bitsize, obj->size * 8);",
      "5082:                     obj->bitsize = obj->size * 8;",
      "5083:                     error |= DWG_ERR_VALUEOUTOFBOUNDS;",
      "5084:                   }",
      "5085:               }",
      "5086:               if (!bit_read_H (dat, &obj->handle))",
      "5087:                 {",
      "5088:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
      "5089:                              ARGS_H (obj->handle));",
      "5090:                 }",
      "5091:               restartpos = dat->byte;",
      "5092:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5093:               obj->tio.unknown = bit_read_TF (dat, obj->size);",
      "5094:               dat->byte = restartpos;",
      "5095:             }",
      "",
      "[Added Lines]",
      "5037:           if (is_entity)",
      "5038:               error |= dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5039:           else",
      "5040:               error |= dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5042:           if (!dat)",
      "5043:             return error;",
      "5044:           if (error >= DWG_ERR_CRITICAL)",
      "",
      "---------------"
    ],
    "src/encode.c||src/encode.c": [
      "File: src/encode.c -> src/encode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1970:           else",
      "1971:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
      "1976:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
      "1993:         }",
      "1994:     }",
      "",
      "[Removed Lines]",
      "1973:           if (klass && !is_entity)",
      "1974:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "1975:           else if (klass)",
      "1977:           else // not a class",
      "1978:             {",
      "1979:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "1980:               error = DWG_ERR_UNHANDLEDCLASS;",
      "1981:               SINCE (R_2000)",
      "1982:               {",
      "1983:                 bit_write_RL (dat, obj->bitsize);",
      "1984:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
      "1985:                           dat->byte - 4, dat->bit);",
      "1986:               }",
      "1987:               bit_write_H (dat, &obj->handle);",
      "1988:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));",
      "1991:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
      "1992:             }",
      "",
      "[Added Lines]",
      "1973:           if (is_entity)",
      "1975:           else",
      "1976:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "",
      "---------------"
    ],
    "src/free.c||src/free.c": [
      "File: src/free.c -> src/free.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "731:       else if ((error = dwg_free_variable_type (obj->parent, obj))",
      "732:                & DWG_ERR_UNHANDLEDCLASS)",
      "733:         {",
      "738:         unhandled:",
      "753:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "761:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "771:         }",
      "772:     }",
      "",
      "[Removed Lines]",
      "734:           int is_entity;",
      "735:           int i;",
      "736:           Dwg_Class *klass;",
      "739:           is_entity = 0;",
      "740:           i = obj->type - 500;",
      "741:           klass = NULL;",
      "743:           dwg = obj->parent;",
      "744:           if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)",
      "745:             {",
      "746:               klass = &dwg->dwg_class[i];",
      "747:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
      "748:             }",
      "750:           if (obj->fixedtype == DWG_TYPE_TABLE)",
      "751:             {",
      "754:             }",
      "755:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
      "756:             {",
      "757:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "758:             }",
      "759:           else if (klass && !is_entity)",
      "760:             {",
      "762:             }",
      "763:           else if (klass && is_entity)",
      "764:             {",
      "765:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "766:             }",
      "767:           else // not a class",
      "768:             {",
      "769:               FREE_IF (obj->tio.unknown);",
      "770:             }",
      "",
      "[Added Lines]",
      "735:           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
      "737:           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd6be5a29c6e841ce59fe6ad5a27b3244c2d1245",
      "candidate_info": {
        "commit_hash": "bd6be5a29c6e841ce59fe6ad5a27b3244c2d1245",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/bd6be5a29c6e841ce59fe6ad5a27b3244c2d1245",
        "files": [
          "src/free.c",
          "src/in_dxf.c",
          "src/in_dxf.h"
        ],
        "message": "free: fix the dxf pair leaks\n\nbefore each new_object.\nThe INDXF obj->dxfname is heap allocated, the obj->name const.\n\nBiggest part of #151\nNow leftovers are mostly some dynamic dynapi strings and SPLINE callocs.",
        "before_after_code_files": [
          "src/free.c||src/free.c",
          "src/in_dxf.c||src/in_dxf.c",
          "src/in_dxf.h||src/in_dxf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/free.c||src/free.c"
          ],
          "candidate": [
            "src/free.c||src/free.c"
          ]
        }
      },
      "candidate_diff": {
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:             }",
          "744:         }",
          "745:     }",
          "746:   obj->type = DWG_TYPE_FREED;",
          "747: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:   if (dwg->opts & DWG_OPTS_INDXF)",
          "750:     FREE_IF (obj->dxfname);",
          "",
          "---------------"
        ],
        "src/in_dxf.c||src/in_dxf.c": [
          "File: src/in_dxf.c -> src/in_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3432:   int is_utf = dwg->header.version >= R_2007 ? 1 : 0;",
          "3433:   char *fieldname;",
          "3434:   char ctrlname[80];",
          "3436:   BITCODE_B xrefref;",
          "3438:   NEW_OBJECT (dwg, obj);",
          "",
          "[Removed Lines]",
          "3435:   char dxfname[80];",
          "",
          "[Added Lines]",
          "3435:   char *dxfname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3446:       strcat (ctrlname, \"_CONTROL\");",
          "3447:     }",
          "3448:   LOG_TRACE (\"add %s\\n\", ctrlname);",
          "3452:   ADD_TABLE_IF (LTYPE, LTYPE_CONTROL)",
          "",
          "[Removed Lines]",
          "3449:   strcpy (dxfname, ctrlname);",
          "",
          "[Added Lines]",
          "3449:   dxfname = strdup (ctrlname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4840:                   if (strEQc (subclass, \"AcDbRotatedDimension\"))",
          "4841:                     {",
          "4842:                       obj->type = obj->fixedtype = DWG_TYPE_DIMENSION_LINEAR;",
          "4844:                       strcpy (name, obj->name);",
          "4845:                       LOG_TRACE (\"change type to %s\\n\", name);",
          "4846:                     }",
          "4847:                   else if (strEQc (subclass, \"AcDbAlignedDimension\"))",
          "4848:                     {",
          "4849:                       obj->type = obj->fixedtype = DWG_TYPE_DIMENSION_ALIGNED;",
          "4851:                       strcpy (name, obj->name);",
          "4852:                       LOG_TRACE (\"change type to %s\\n\", name);",
          "4853:                     }",
          "4854:                   else if (strEQc (subclass, \"AcDbOrdinateDimension\"))",
          "4855:                     {",
          "4856:                       obj->type = obj->fixedtype = DWG_TYPE_DIMENSION_ORDINATE;",
          "4858:                       strcpy (name, obj->name);",
          "4859:                       LOG_TRACE (\"change type to %s\\n\", name);",
          "4860:                     }",
          "4861:                   else if (strEQc (subclass, \"AcDbDiametricDimension\"))",
          "4862:                     {",
          "4863:                       obj->type = obj->fixedtype = DWG_TYPE_DIMENSION_DIAMETER;",
          "4865:                       strcpy (name, obj->name);",
          "4866:                       LOG_TRACE (\"change type to %s\\n\", name);",
          "4867:                     }",
          "",
          "[Removed Lines]",
          "4843:                       obj->name = obj->dxfname = (char *)\"DIMENSION_LINEAR\";",
          "4850:                       obj->name = obj->dxfname = (char *)\"DIMENSION_ALIGNED\";",
          "4857:                       obj->name = obj->dxfname = (char *)\"DIMENSION_ORDINATE\";",
          "4864:                       obj->name = obj->dxfname = (char *)\"DIMENSION_DIAMETER\";",
          "",
          "[Added Lines]",
          "4843:                       obj->name = (char *)\"DIMENSION_LINEAR\";",
          "4844:                       obj->dxfname = strdup (obj->name);",
          "4851:                       obj->name = (char *)\"DIMENSION_ALIGNED\";",
          "4852:                       obj->dxfname = strdup (obj->name);",
          "4859:                       obj->name = (char *)\"DIMENSION_ORDINATE\";",
          "4860:                       obj->dxfname = strdup (obj->name);",
          "4867:                       obj->name = (char *)\"DIMENSION_DIAMETER\";",
          "4868:                       obj->dxfname = strdup (obj->name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6332:           ctrl_id = dwg->num_objects - 1;             // dwg->object might move",
          "6333:           while (pair && pair->code == 0 && strEQ (pair->value.s, table))",
          "6334:             {",
          "6338:               if (strEQc (table, \"BLOCK_RECORD\"))",
          "6339:                 {",
          "",
          "[Removed Lines]",
          "6336:               pair = new_object (table, pair->value.s, dat, dwg, ctrl_id, i++);",
          "",
          "[Added Lines]",
          "6339:               char *dxfname = strdup (pair->value.s);",
          "6340:               dxf_free_pair (pair);",
          "6342:               pair = new_object (table, dxfname, dat, dwg, ctrl_id, i++);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6438:             {",
          "6439:               Dwg_Object *obj, *blkhdr = NULL;",
          "6440:               BITCODE_BL idx = dwg->num_objects;",
          "6443:               entity_alias (name);",
          "6445:               obj = &dwg->object[idx];",
          "6446:               if (obj->type == DWG_TYPE_BLOCK)",
          "6447:                 {",
          "",
          "[Removed Lines]",
          "6441:               strncpy (name, pair->value.s, 79);",
          "6442:               name[79] = '\\0';",
          "6444:               pair = new_object (name, pair->value.s, dat, dwg, 0, i++);",
          "",
          "[Added Lines]",
          "6447:               char *dxfname = strdup (pair->value.s);",
          "6448:               strncpy (name, dxfname, 79);",
          "6450:               dxf_free_pair (pair);",
          "6451:               pair = new_object (name, dxfname, dat, dwg, 0, i++);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6612:       while (pair->code == 0",
          "6613:              && (is_dwg_entity (name) || strEQc (name, \"DIMENSION\")))",
          "6614:         {",
          "6616:           if (pair->code == 0)",
          "6617:             {",
          "6618:               Dwg_Object *obj = &dwg->object[dwg->num_objects - 1];",
          "",
          "[Removed Lines]",
          "6615:           pair = new_object (name, pair->value.s, dat, dwg, 0, 0);",
          "",
          "[Added Lines]",
          "6622:           char *dxfname = strdup (pair->value.s);",
          "6623:           dxf_free_pair (pair);",
          "6624:           pair = new_object (name, dxfname, dat, dwg, 0, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6689:     {",
          "6690:       while (pair->code == 0)",
          "6691:         {",
          "6693:           name[79] = '\\0';",
          "6694:           object_alias (name);",
          "6695:           if (is_dwg_object (name))",
          "6697:           else",
          "6698:             DXF_RETURN_ENDSEC (0)",
          "6699:           else",
          "",
          "[Removed Lines]",
          "6692:           strncpy (name, pair->value.s, 79);",
          "6696:             pair = new_object (name, pair->value.s, dat, dwg, 0, 0);",
          "",
          "[Added Lines]",
          "6701:           char *dxfname = strdup (pair->value.s);",
          "6702:           strncpy (name, dxfname, 79);",
          "6706:             {",
          "6707:               dxf_free_pair (pair);",
          "6708:               pair = new_object (name, dxfname, dat, dwg, 0, 0);",
          "6709:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6721:     {",
          "6722:       while (pair->code == 0)",
          "6723:         {",
          "6725:           name[79] = '\\0';",
          "6726:           object_alias (name);",
          "6727:           if (is_dwg_object (name))",
          "6729:           else",
          "6730:             DXF_RETURN_ENDSEC (0)",
          "6731:           else",
          "",
          "[Removed Lines]",
          "6724:           strncpy (name, pair->value.s, 79);",
          "6728:             pair = new_object (name, pair->value.s, dat, dwg, 0, 0);",
          "",
          "[Added Lines]",
          "6737:           char *dxfname = strdup (pair->value.s);",
          "6738:           strncpy (name, dxfname, 79);",
          "6742:             {",
          "6743:               dxf_free_pair (pair);",
          "6744:               pair = new_object (name, dxfname, dat, dwg, 0, 0);",
          "6745:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7037:     {",
          "7038:       Dwg_Object *obj;",
          "7039:       Dwg_Object_BLOCK_HEADER *_obj;",
          "7041:       NEW_OBJECT (dwg, obj);",
          "7042:       ADD_OBJECT (BLOCK_HEADER);",
          "",
          "[Removed Lines]",
          "7040:       char *dxfname = (char *)\"BLOCK_HEADER\";",
          "",
          "[Added Lines]",
          "7057:       char *dxfname = strdup ((char*)\"BLOCK_HEADER\");",
          "",
          "---------------"
        ],
        "src/in_dxf.h||src/in_dxf.h": [
          "File: src/in_dxf.h -> src/in_dxf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: #define UPGRADE_ENTITY(FROM, TO)                                              \\",
          "170:   obj->type = obj->fixedtype = DWG_TYPE_##TO;                                 \\",
          "172:   strcpy (name, obj->name);                                                   \\",
          "173:   LOG_TRACE (\"change type to %s\\n\", name);                                    \\",
          "174:   if (sizeof (Dwg_Entity_##TO) > sizeof (Dwg_Entity_##FROM))                  \\",
          "",
          "[Removed Lines]",
          "171:   obj->name = obj->dxfname = (char *)#TO;                                     \\",
          "",
          "[Added Lines]",
          "171:   obj->name = (char *)#TO;                                                    \\",
          "172:   obj->dxfname = strdup (obj->name);                                          \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4cb07ba4b71849a24090df49df4c4ad09df5827",
      "candidate_info": {
        "commit_hash": "b4cb07ba4b71849a24090df49df4c4ad09df5827",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/b4cb07ba4b71849a24090df49df4c4ad09df5827",
        "files": [
          "src/common.c",
          "src/decode.c",
          "src/decode_r2007.c",
          "src/dwg.c",
          "src/dwg_api.c",
          "src/in_dxfb.c",
          "src/out_dxf.c",
          "src/out_dxfb.c",
          "src/out_geojson.c",
          "src/out_json.c"
        ],
        "message": "use strEQ helper macros",
        "before_after_code_files": [
          "src/common.c||src/common.c",
          "src/decode.c||src/decode.c",
          "src/decode_r2007.c||src/decode_r2007.c",
          "src/dwg.c||src/dwg.c",
          "src/dwg_api.c||src/dwg_api.c",
          "src/in_dxfb.c||src/in_dxfb.c",
          "src/out_dxf.c||src/out_dxf.c",
          "src/out_dxfb.c||src/out_dxfb.c",
          "src/out_geojson.c||src/out_geojson.c",
          "src/out_json.c||src/out_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/common.c||src/common.c": [
          "File: src/common.c -> src/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: EXPORT Dwg_Version_Type",
          "143: dwg_version_as (const char *version)",
          "144: {",
          "146:     return R_2000;",
          "148:     return R_2004;",
          "150:     return R_2007;",
          "152:     return R_2010;",
          "154:     return R_2013;",
          "156:     return R_2018;",
          "158:     return R_14;",
          "160:     return R_13;",
          "162:     return R_11;",
          "164:     return R_10;",
          "166:     return R_9;",
          "168:     return R_2_6;",
          "170:     return R_2_5;",
          "172:     return R_2_1;",
          "174:     return R_2_0;",
          "176:     return R_1_4;",
          "178:     return R_1_2;",
          "180:     return R_1_1;",
          "181:   else",
          "182:     return R_INVALID;",
          "",
          "[Removed Lines]",
          "145:   if (!strcmp (version, \"r2000\"))",
          "147:   else if (!strcmp (version, \"r2004\"))",
          "149:   else if (!strcmp (version, \"r2007\"))",
          "151:   else if (!strcmp (version, \"r2010\"))",
          "153:   else if (!strcmp (version, \"r2013\"))",
          "155:   else if (!strcmp (version, \"r2018\"))",
          "157:   else if (!strcmp (version, \"r14\"))",
          "159:   else if (!strcmp (version, \"r13\"))",
          "161:   else if (!strcmp (version, \"r11\") || !strcmp (version, \"r12\"))",
          "163:   else if (!strcmp (version, \"r10\"))",
          "165:   else if (!strcmp (version, \"r9\"))",
          "167:   else if (!strcmp (version, \"r2.6\"))",
          "169:   else if (!strcmp (version, \"r2.5\"))",
          "171:   else if (!strcmp (version, \"r2.1\"))",
          "173:   else if (!strcmp (version, \"r2.0\"))",
          "175:   else if (!strcmp (version, \"r1.4\"))",
          "177:   else if (!strcmp (version, \"r1.2\"))",
          "179:   else if (!strcmp (version, \"r1.1\"))",
          "",
          "[Added Lines]",
          "145:   if (strEQc (version, \"r2000\"))",
          "147:   else if (strEQc (version, \"r2004\"))",
          "149:   else if (strEQc (version, \"r2007\"))",
          "151:   else if (strEQc (version, \"r2010\"))",
          "153:   else if (strEQc (version, \"r2013\"))",
          "155:   else if (strEQc (version, \"r2018\"))",
          "157:   else if (strEQc (version, \"r14\"))",
          "159:   else if (strEQc (version, \"r13\"))",
          "161:   else if (strEQc (version, \"r11\") || strEQc (version, \"r12\"))",
          "163:   else if (strEQc (version, \"r10\"))",
          "165:   else if (strEQc (version, \"r9\"))",
          "167:   else if (strEQc (version, \"r2.6\"))",
          "169:   else if (strEQc (version, \"r2.5\"))",
          "171:   else if (strEQc (version, \"r2.1\"))",
          "173:   else if (strEQc (version, \"r2.0\"))",
          "175:   else if (strEQc (version, \"r1.4\"))",
          "177:   else if (strEQc (version, \"r1.2\"))",
          "179:   else if (strEQc (version, \"r1.1\"))",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:   dwg->header.version = 0;",
          "183:   for (i = 0; i < R_AFTER; i++)",
          "184:     {",
          "186:         {",
          "187:           dwg->header.version = (Dwg_Version_Type)i;",
          "188:           break;",
          "",
          "[Removed Lines]",
          "185:       if (!strcmp (version, version_codes[(Dwg_Version_Type)i]))",
          "",
          "[Added Lines]",
          "185:       if (strEQ (version, version_codes[(Dwg_Version_Type)i]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "996:             klass->unknown_1, klass->unknown_2);",
          "997:       }",
          "1000:         dwg->layout_number = klass->number;",
          "1002:       dwg->num_classes++;",
          "",
          "[Removed Lines]",
          "999:       if (strcmp ((const char *)klass->dxfname, \"LAYOUT\") == 0)",
          "",
          "[Added Lines]",
          "999:       if (strEQc ((const char *)klass->dxfname, \"LAYOUT\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2099:           LOG_HANDLE (\"unknown:          %u %u\\n\", dwg->dwg_class[i].unknown_1,",
          "2100:                       dwg->dwg_class[i].unknown_2)",
          "2103:             dwg->layout_number = dwg->dwg_class[i].number;",
          "2104:         }",
          "2105:     }",
          "",
          "[Removed Lines]",
          "2102:           if (strcmp (dwg->dwg_class[i].dxfname, \"LAYOUT\") == 0)",
          "",
          "[Added Lines]",
          "2102:           if (strEQ (dwg->dwg_class[i].dxfname, \"LAYOUT\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2695:                      obj->eed[idx].handle.code, obj->eed[idx].handle.size,",
          "2696:                      obj->eed[idx].handle.value);",
          "2697:           if (_obj->supertype == DWG_SUPERTYPE_OBJECT && _obj->dxfname",
          "2699:             { // check for is_new_format: has extended data for APPID",
          "2701:               Dwg_Object_Ref ref;",
          "",
          "[Removed Lines]",
          "2698:               && !strcmp (_obj->dxfname, \"MLEADERSTYLE\"))",
          "",
          "[Added Lines]",
          "2698:               && strEQc (_obj->dxfname, \"MLEADERSTYLE\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4360:             {",
          "4361:               int err;",
          "4362: #if 0 && !defined(IS_RELEASE)",
          "4364:                 char *mleader = bit_read_TF(dat, obj->size);",
          "4365:                 LOG_INSANE_TF(mleader, (int)obj->size)",
          "4366:                 bit_set_position(dat, restartpos);",
          "",
          "[Removed Lines]",
          "4363:               if (!strcmp(klass->dxfname, \"MULTILEADER\")) { //debug CED",
          "",
          "[Added Lines]",
          "4363:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
          "",
          "---------------"
        ],
        "src/decode_r2007.c||src/decode_r2007.c": [
          "File: src/decode_r2007.c -> src/decode_r2007.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1421:           dwg->dwg_class[i].dxfname",
          "1422:               = bit_convert_TU (dwg->dwg_class[i].dxfname_u);",
          "1424:             dwg->layout_number = dwg->dwg_class[i].number;",
          "1425:         }",
          "1426:     }",
          "",
          "[Removed Lines]",
          "1423:           if (strcmp (dwg->dwg_class[i].dxfname, \"LAYOUT\") == 0)",
          "",
          "[Added Lines]",
          "1423:           if (strEQc (dwg->dwg_class[i].dxfname, \"LAYOUT\"))",
          "",
          "---------------"
        ],
        "src/dwg.c||src/dwg.c": [
          "File: src/dwg.c -> src/dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   memset (dwg, 0, sizeof (Dwg_Data));",
          "144:   dwg->opts = loglevel;",
          "147:     {",
          "148:       fp = stdin;",
          "149:     }",
          "",
          "[Removed Lines]",
          "146:   if (!strcmp (filename, \"-\"))",
          "",
          "[Added Lines]",
          "146:   if (strEQc (filename, \"-\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1176:     }",
          "1177:   name[i] = '\\0';",
          "1180:     {",
          "1181:       return SECTION_HEADER;",
          "1182:     }",
          "1184:     {",
          "1185:       return SECTION_CLASSES;",
          "1186:     }",
          "1188:     {",
          "1189:       return SECTION_SUMMARYINFO;",
          "1190:     }",
          "1192:     {",
          "1193:       return SECTION_PREVIEW;",
          "1194:     }",
          "1196:     {",
          "1197:       return SECTION_VBAPROJECT;",
          "1198:     }",
          "1200:     {",
          "1201:       return SECTION_APPINFO;",
          "1202:     }",
          "1204:     {",
          "1205:       return SECTION_FILEDEPLIST;",
          "1206:     }",
          "1208:     {",
          "1209:       return SECTION_REVHISTORY;",
          "1210:     }",
          "1212:     {",
          "1213:       return SECTION_SECURITY;",
          "1214:     }",
          "1216:     {",
          "1217:       return SECTION_OBJECTS;",
          "1218:     }",
          "1220:     {",
          "1221:       return SECTION_OBJFREESPACE;",
          "1222:     }",
          "1224:     {",
          "1225:       return SECTION_TEMPLATE;",
          "1226:     }",
          "1228:     {",
          "1229:       return SECTION_HANDLES;",
          "1230:     }",
          "1232:     {",
          "1233:       return SECTION_PROTOTYPE;",
          "1234:     }",
          "1236:     {",
          "1237:       return SECTION_AUXHEADER;",
          "1238:     }",
          "1240:     {",
          "1241:       return SECTION_SIGNATURE;",
          "1242:     }",
          "1244:     { // AC1021",
          "1245:       return SECTION_APPINFOHISTORY;",
          "1246:     }",
          "",
          "[Removed Lines]",
          "1179:   if (!strcmp (name, \"AcDb:Header\"))",
          "1183:   else if (!strcmp (name, \"AcDb:Classes\"))",
          "1187:   else if (!strcmp (name, \"AcDb:SummaryInfo\"))",
          "1191:   else if (!strcmp (name, \"AcDb:Preview\"))",
          "1195:   else if (!strcmp (name, \"AcDb:VBAProject\"))",
          "1199:   else if (!strcmp (name, \"AcDb:AppInfo\"))",
          "1203:   else if (!strcmp (name, \"AcDb:FileDepList\"))",
          "1207:   else if (!strcmp (name, \"AcDb:RevHistory\"))",
          "1211:   else if (!strcmp (name, \"AcDb:Security\"))",
          "1215:   else if (!strcmp (name, \"AcDb:AcDbObjects\"))",
          "1219:   else if (!strcmp (name, \"AcDb:ObjFreeSpace\"))",
          "1223:   else if (!strcmp (name, \"AcDb:Template\"))",
          "1227:   else if (!strcmp (name, \"AcDb:Handles\"))",
          "1231:   else if (!strcmp (name, \"AcDb:AcDsPrototype_1b\"))",
          "1235:   else if (!strcmp (name, \"AcDb:AuxHeader\"))",
          "1239:   else if (!strcmp (name, \"AcDb:Signature\"))",
          "1243:   else if (!strcmp (name, \"AcDb:AppInfoHistory\"))",
          "",
          "[Added Lines]",
          "1179:   if (strEQc (name, \"AcDb:Header\"))",
          "1183:   else if (strEQc (name, \"AcDb:Classes\"))",
          "1187:   else if (strEQc (name, \"AcDb:SummaryInfo\"))",
          "1191:   else if (strEQc (name, \"AcDb:Preview\"))",
          "1195:   else if (strEQc (name, \"AcDb:VBAProject\"))",
          "1199:   else if (strEQc (name, \"AcDb:AppInfo\"))",
          "1203:   else if (strEQc (name, \"AcDb:FileDepList\"))",
          "1207:   else if (strEQc (name, \"AcDb:RevHistory\"))",
          "1211:   else if (strEQc (name, \"AcDb:Security\"))",
          "1215:   else if (strEQc (name, \"AcDb:AcDbObjects\"))",
          "1219:   else if (strEQc (name, \"AcDb:ObjFreeSpace\"))",
          "1223:   else if (strEQc (name, \"AcDb:Template\"))",
          "1227:   else if (strEQc (name, \"AcDb:Handles\"))",
          "1231:   else if (strEQc (name, \"AcDb:AcDsPrototype_1b\"))",
          "1235:   else if (strEQc (name, \"AcDb:AuxHeader\"))",
          "1239:   else if (strEQc (name, \"AcDb:Signature\"))",
          "1243:   else if (strEQc (name, \"AcDb:AppInfoHistory\"))",
          "",
          "---------------"
        ],
        "src/dwg_api.c||src/dwg_api.c": [
          "File: src/dwg_api.c -> src/dwg_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &point,",
          "850:                                   &field))",
          "851:       return NULL;",
          "854:       {",
          "855:         return point;",
          "856:       }",
          "",
          "[Removed Lines]",
          "852:     if (!strcmp (field.type, \"2RD\") || !strcmp (field.type, \"2BD\")",
          "853:         || !strcmp (field.type, \"2DPOINT\"))",
          "",
          "[Added Lines]",
          "852:     if (strEQc (field.type, \"2RD\") || strEQc (field.type, \"2BD\")",
          "853:         || strEQc (field.type, \"2DPOINT\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "884:                                   &field))",
          "885:       return false;",
          "888:       {",
          "889:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "890:                                             point, 0);",
          "",
          "[Removed Lines]",
          "886:     if (!strcmp (field.type, \"2RD\") || !strcmp (field.type, \"2BD\")",
          "887:         || !strcmp (field.type, \"2DPOINT\"))",
          "",
          "[Added Lines]",
          "886:     if (strEQc (field.type, \"2RD\") || strEQc (field.type, \"2BD\")",
          "887:         || strEQc (field.type, \"2DPOINT\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "917:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &point,",
          "918:                                   &field))",
          "919:       return NULL;",
          "922:       {",
          "923:         return point;",
          "924:       }",
          "",
          "[Removed Lines]",
          "920:     if (!strcmp (field.type, \"3RD\") || !strcmp (field.type, \"3BD\")",
          "921:         || !strcmp (field.type, \"BE\") || !strcmp (field.type, \"3DPOINT\"))",
          "",
          "[Added Lines]",
          "920:     if (strEQc (field.type, \"3RD\") || strEQc (field.type, \"3BD\")",
          "921:         || strEQc (field.type, \"BE\") || strEQc (field.type, \"3DPOINT\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "952:                                   &field))",
          "953:       return false;",
          "956:       {",
          "957:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "958:                                             point, 0);",
          "",
          "[Removed Lines]",
          "954:     if (!strcmp (field.type, \"3RD\") || !strcmp (field.type, \"3BD\")",
          "955:         || !strcmp (field.type, \"BE\") || !strcmp (field.type, \"3DPOINT\"))",
          "",
          "[Added Lines]",
          "954:     if (strEQc (field.type, \"3RD\") || strEQc (field.type, \"3BD\")",
          "955:         || strEQc (field.type, \"BE\") || strEQc (field.type, \"3DPOINT\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "985:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &str,",
          "986:                                   &field))",
          "987:       return NULL;",
          "989:       {",
          "990:         return str;",
          "991:       }",
          "",
          "[Removed Lines]",
          "988:     if (field.is_string || !strcmp (field.type, \"TF\"))",
          "",
          "[Added Lines]",
          "988:     if (field.is_string || strEQc (field.type, \"TF\"))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1017:     if (!dwg_dynapi_entity_utf8text ((void *)_obj, obj->name, fieldname, &str,",
          "1018:                                   &field))",
          "1019:       return NULL;",
          "1021:       {",
          "1022:         return str;",
          "1023:       }",
          "",
          "[Removed Lines]",
          "1020:     if (field.is_string || !strcmp (field.type, \"TF\"))",
          "",
          "[Added Lines]",
          "1020:     if (field.is_string || strEQc (field.type, \"TF\"))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1049:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1050:                                   &field))",
          "1051:       return false;",
          "1053:       {",
          "1054:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "1055:                                             str, 0);",
          "",
          "[Removed Lines]",
          "1052:     if (field.is_string || !strcmp (field.type, \"TF\"))",
          "",
          "[Added Lines]",
          "1052:     if (field.is_string || strEQc (field.type, \"TF\"))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1082:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1083:                                   &field))",
          "1084:       return false;",
          "1086:       {",
          "1087:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "1088:                                             utf8text, 1);",
          "",
          "[Removed Lines]",
          "1085:     if (field.is_string || !strcmp (field.type, \"TF\"))",
          "",
          "[Added Lines]",
          "1085:     if (field.is_string || strEQc (field.type, \"TF\"))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1114:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &num,",
          "1115:                                   &field))",
          "1116:       return 0.0;",
          "1118:       {",
          "1119:         return num;",
          "1120:       }",
          "",
          "[Removed Lines]",
          "1117:     if (!strcmp (field.type, \"RD\") || !strcmp (field.type, \"BD\"))",
          "",
          "[Added Lines]",
          "1117:     if (strEQc (field.type, \"RD\") || strEQc (field.type, \"BD\"))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1145:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1146:                                   &field))",
          "1147:       return false;",
          "1149:       {",
          "1150:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "1151:                                             &num, 0);",
          "",
          "[Removed Lines]",
          "1148:     if (!strcmp (field.type, \"RD\") || !strcmp (field.type, \"BD\"))",
          "",
          "[Added Lines]",
          "1148:     if (strEQc (field.type, \"RD\") || strEQc (field.type, \"BD\"))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1177:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &num,",
          "1178:                                   &field))",
          "1179:       return 0;",
          "1181:       {",
          "1182:         return num;",
          "1183:       }",
          "",
          "[Removed Lines]",
          "1180:     if (!strcmp (field.type, \"RS\") || !strcmp (field.type, \"BS\"))",
          "",
          "[Added Lines]",
          "1180:     if (strEQc (field.type, \"RS\") || strEQc (field.type, \"BS\"))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1209:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1210:                                   &field))",
          "1211:       return false;",
          "1213:       {",
          "1214:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "1215:                                             &num, 0);",
          "",
          "[Removed Lines]",
          "1212:     if (!strcmp (field.type, \"RS\") || !strcmp (field.type, \"BS\"))",
          "",
          "[Added Lines]",
          "1212:     if (strEQc (field.type, \"RS\") || strEQc (field.type, \"BS\"))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1241:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &num,",
          "1242:                                   &field))",
          "1243:       return 0;",
          "1246:       {",
          "1247:         return num;",
          "1248:       }",
          "",
          "[Removed Lines]",
          "1244:     if (!strcmp (field.type, \"RL\") || !strcmp (field.type, \"BL\")",
          "1245:         || !strcmp (field.type, \"MS\"))",
          "",
          "[Added Lines]",
          "1244:     if (strEQc (field.type, \"RL\") || strEQc (field.type, \"BL\")",
          "1245:         || strEQc (field.type, \"MS\"))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1274:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1275:                                   &field))",
          "1276:       return false;",
          "1279:       {",
          "1280:         return dwg_dynapi_entity_set_value ((void *)_obj, obj->name, fieldname,",
          "1281:                                             &num, 0);",
          "",
          "[Removed Lines]",
          "1277:     if (!strcmp (field.type, \"RL\") || !strcmp (field.type, \"BL\")",
          "1278:         || !strcmp (field.type, \"MS\"))",
          "",
          "[Added Lines]",
          "1277:     if (strEQc (field.type, \"RL\") || strEQc (field.type, \"BL\")",
          "1278:         || strEQc (field.type, \"MS\"))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "20080:           return NULL;",
          "20081:         }",
          "20082:       blk = obj->tio.object->tio.BLOCK_HEADER;",
          "20084:         dwg->pspace_block = obj;",
          "20086:         dwg->mspace_block = obj;",
          "20087:       return blk;",
          "20088:     }",
          "",
          "[Removed Lines]",
          "20083:       if (!strcmp (blk->name, \"*Paper_Space\"))",
          "20085:       else if (!strcmp (blk->name, \"*Model_Space\"))",
          "",
          "[Added Lines]",
          "20083:       if (strEQc (blk->name, \"*Paper_Space\"))",
          "20085:       else if (strEQc (blk->name, \"*Model_Space\"))",
          "",
          "---------------"
        ],
        "src/in_dxfb.c||src/in_dxfb.c": [
          "File: src/in_dxfb.c -> src/in_dxfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: #define DXF_CHECK_EOF                                                         \\",
          "177:   if (dat->byte >= dat->size                                                  \\",
          "179:   return 1",
          "181: static int",
          "",
          "[Removed Lines]",
          "178:       || (pair->code == 0 && !strcmp (pair->value.s, \"EOF\")))                 \\",
          "",
          "[Added Lines]",
          "178:       || (pair->code == 0 && strEQc (pair->value.s, \"EOF\")))                 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:   return 0",
          "952: #define DXF_BREAK_ENDSEC                                                      \\",
          "953:   if (dat->byte >= dat->size                                                  \\",
          "955:   break",
          "956: #define DXF_RETURN_ENDSEC(what)                                               \\",
          "957:   if (dat->byte >= dat->size                                                  \\",
          "959:     {                                                                         \\",
          "960:       dxf_free_pair (pair);                                                   \\",
          "961:       return what;                                                            \\",
          "",
          "[Removed Lines]",
          "954:       || (pair->code == 0 && !strcmp (pair->value.s, \"ENDSEC\")))              \\",
          "958:       || (pair->code == 0 && !strcmp (pair->value.s, \"ENDSEC\")))              \\",
          "",
          "[Added Lines]",
          "954:       || (pair->code == 0 && strEQc (pair->value.s, \"ENDSEC\")))              \\",
          "958:       || (pair->code == 0 && strEQc (pair->value.s, \"ENDSEC\")))              \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1006:   dxf_free_pair (pair);",
          "1010:     dwg->header.codepage = 30;",
          "1012:   return 0;",
          "",
          "[Removed Lines]",
          "1009:   if (!strcmp (_obj->DWGCODEPAGE, \"ANSI_1252\"))",
          "",
          "[Added Lines]",
          "1009:   if (strEQc (_obj->DWGCODEPAGE, \"ANSI_1252\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1171:       pair = dxf_read_pair (dat);",
          "1172:       dxf_expect_code (dat, pair, 0);",
          "1173:       DXF_CHECK_EOF;",
          "1175:         {",
          "1176:           dxf_free_pair (pair);",
          "1177:           pair = dxf_read_pair (dat);",
          "1178:           dxf_expect_code (dat, pair, 2);",
          "1179:           DXF_CHECK_EOF;",
          "1181:             {",
          "1182:               dxf_free_pair (pair);",
          "1183:               dxfb_header_read (dat, dwg);",
          "1184:             }",
          "1186:             {",
          "1187:               dxf_free_pair (pair);",
          "1188:               dxfb_classes_read (dat, dwg);",
          "1189:             }",
          "1191:             {",
          "1192:               dxf_free_pair (pair);",
          "1193:               dxfb_tables_read (dat, dwg);",
          "1194:             }",
          "1196:             {",
          "1197:               dxf_free_pair (pair);",
          "1198:               dxfb_blocks_read (dat, dwg);",
          "1199:             }",
          "1201:             {",
          "1202:               dxf_free_pair (pair);",
          "1203:               dxfb_entities_read (dat, dwg);",
          "1204:             }",
          "1206:             {",
          "1207:               dxf_free_pair (pair);",
          "1208:               dxfb_objects_read (dat, dwg);",
          "1209:             }",
          "1211:             {",
          "1212:               dxf_free_pair (pair);",
          "1213:               dxfb_preview_read (dat, dwg);",
          "",
          "[Removed Lines]",
          "1174:       if (!strcmp (pair->value.s, \"SECTION\"))",
          "1180:           if (!strcmp (pair->value.s, \"HEADER\"))",
          "1185:           else if (!strcmp (pair->value.s, \"CLASSES\"))",
          "1190:           else if (!strcmp (pair->value.s, \"TABLES\"))",
          "1195:           else if (!strcmp (pair->value.s, \"BLOCKS\"))",
          "1200:           else if (!strcmp (pair->value.s, \"ENTITIES\"))",
          "1205:           else if (!strcmp (pair->value.s, \"OBJECTS\"))",
          "1210:           if (!strcmp (pair->value.s, \"THUMBNAIL\"))",
          "",
          "[Added Lines]",
          "1174:       if (strEQc (pair->value.s, \"SECTION\"))",
          "1180:           if (strEQc (pair->value.s, \"HEADER\"))",
          "1185:           else if (strEQc (pair->value.s, \"CLASSES\"))",
          "1190:           else if (strEQc (pair->value.s, \"TABLES\"))",
          "1195:           else if (strEQc (pair->value.s, \"BLOCKS\"))",
          "1200:           else if (strEQc (pair->value.s, \"ENTITIES\"))",
          "1205:           else if (strEQc (pair->value.s, \"OBJECTS\"))",
          "1210:           if (strEQc (pair->value.s, \"THUMBNAIL\"))",
          "",
          "---------------"
        ],
        "src/out_dxf.c||src/out_dxf.c": [
          "File: src/out_dxf.c -> src/out_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:       GROUP (dxf);                                                            \\",
          "217:       GCC46_DIAG_IGNORE (-Wformat-nonliteral)                                 \\",
          "218:       snprintf (buf, 255, _fmt, value);                                       \\",
          "222:         strcpy (buf, \"0\");                                                    \\",
          "223:       else if (90 <= dxf && dxf < 100)                                        \\",
          "224:         {                                                                     \\",
          "",
          "[Removed Lines]",
          "219:       GCC46_DIAG_RESTORE                                                        \\",
          "221:       if (strcmp (_fmt, \"%s\") && !*buf)                                       \\",
          "",
          "[Added Lines]",
          "219:       GCC46_DIAG_RESTORE                                                      \\",
          "221:       if (strEQc (_fmt, \"%s\") && !*buf)                                       \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:           const int32_t _si = (int32_t) (intptr_t) (value);                   \\",
          "227:           snprintf (buf, 255, \"%6i\", _si);                                    \\",
          "228:         }                                                                     \\",
          "230:         {                                                                     \\",
          "232:             strcpy (buf, \"0.0\");                                              \\",
          "233:           else if ((_s = strstr (buf, \".00000000000000\")))                    \\",
          "234:             strcpy (_s, \".0\");                                                \\",
          "",
          "[Removed Lines]",
          "229:       else if (!strcmp (_fmt, \"%-16.14f\"))                                    \\",
          "231:           if (!strcmp (buf, \"0.00000000000000\"))                              \\",
          "",
          "[Added Lines]",
          "229:       else if (strEQc (_fmt, \"%-16.14f\"))                                     \\",
          "231:           if (strEQc (buf, \"0.00000000000000\"))                               \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   {                                                                           \\",
          "273:     Dwg_Object_Ref *ref = _obj->nam;                                          \\",
          "274:     Dwg_Object *o = ref ? ref->obj : NULL;                                    \\",
          "276:       dxf_cvt_tablerecord (                                                   \\",
          "277:           dat, o, o ? o->tio.object->tio.table->name : (char *)\"0\", dxf);     \\",
          "278:     else                                                                      \\",
          "",
          "[Removed Lines]",
          "275:     if (o && !strcmp (o->dxfname, #table))                                    \\",
          "",
          "[Added Lines]",
          "275:     if (o && strEQc (o->dxfname, #table))                                    \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:   {                                                                           \\",
          "285:     Dwg_Object_Ref *ref = _obj->ob.nam;                                       \\",
          "286:     Dwg_Object *o = ref ? ref->obj : NULL;                                    \\",
          "288:       dxf_cvt_tablerecord (                                                   \\",
          "289:           dat, o, o ? o->tio.object->tio.table->name : (char *)\"0\", dxf);     \\",
          "290:     else                                                                      \\",
          "",
          "[Removed Lines]",
          "287:     if (o && !strcmp (o->dxfname, #table))                                    \\",
          "",
          "[Added Lines]",
          "287:     if (o && strEQc (o->dxfname, #table))                                    \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "682:                    DWG_TYPE_##token, #token);                                 \\",
          "683:         return DWG_ERR_INVALIDTYPE;                                           \\",
          "684:       }                                                                       \\",
          "686:       RECORD (POSITIONMARKER);                                                \\",
          "687:     else if (dat->version < R_13 && strlen (#token) == 10                     \\",
          "689:       RECORD (POLYLINE);                                                      \\",
          "690:     else if (strlen (#token) > 10 && !memcmp (#token, \"DIMENSION_\", 10))      \\",
          "691:       RECORD (DIMENSION);                                                     \\",
          "",
          "[Removed Lines]",
          "685:     if (!strcmp (#token, \"GEOPOSITIONMARKER\"))                                \\",
          "688:              && !strcmp (#token, \"LWPOLYLINE\"))                               \\",
          "",
          "[Added Lines]",
          "685:     if (strEQc (#token, \"GEOPOSITIONMARKER\"))                                 \\",
          "688:              && strEQc (#token, \"LWPOLYLINE\"))                                \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "693:       RECORD (POLYLINE);                                                      \\",
          "694:     else if (strlen (#token) > 7 && !memcmp (#token, \"VERTEX_\", 7))           \\",
          "695:       RECORD (VERTEX);                                                        \\",
          "697:       {                                                                       \\",
          "698:         RECORD (ACAD_TABLE);                                                  \\",
          "699:         return dwg_dxf_TABLECONTENT (dat, obj);                               \\",
          "",
          "[Removed Lines]",
          "696:     else if (dat->version >= R_2010 && !strcmp (#token, \"TABLE\"))             \\",
          "",
          "[Added Lines]",
          "696:     else if (dat->version >= R_2010 && strEQc (#token, \"TABLE\"))             \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "792:           type = VT_INVALID;",
          "793:         }",
          "796:         {",
          "797:           if (type == VT_INVALID)",
          "798:             {",
          "",
          "[Removed Lines]",
          "795:       if (!strcmp (fmt, \"(unknown code)\"))",
          "",
          "[Added Lines]",
          "795:       if (strEQc (fmt, \"(unknown code)\"))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "909:         }",
          "910:       if (dat->from_version >= R_13 && dat->version < R_13)",
          "911:         { // convert the other way round, from newer to older",
          "913:             fprintf (dat->fh, \"%3i\\r\\nSTANDARD\\r\\n\", dxf);",
          "915:             fprintf (dat->fh, \"%3i\\r\\nBYLAYER\\r\\n\", dxf);",
          "917:             fprintf (dat->fh, \"%3i\\r\\nBYBLOCK\\r\\n\", dxf);",
          "919:             fprintf (dat->fh, \"%3i\\r\\n*ACTIVE\\r\\n\", dxf);",
          "920:           else",
          "921:             fprintf (dat->fh, \"%3i\\r\\n%s\\r\\n\", dxf, name);",
          "922:         }",
          "923:       else",
          "924:         { // convert some standard names",
          "926:             fprintf (dat->fh, \"%3i\\r\\nStandard\\r\\n\", dxf);",
          "928:             fprintf (dat->fh, \"%3i\\r\\nByLayer\\r\\n\", dxf);",
          "930:             fprintf (dat->fh, \"%3i\\r\\nByBlock\\r\\n\", dxf);",
          "932:             fprintf (dat->fh, \"%3i\\r\\n*Active\\r\\n\", dxf);",
          "933:           else",
          "934:             fprintf (dat->fh, \"%3i\\r\\n%s\\r\\n\", dxf, name);",
          "",
          "[Removed Lines]",
          "912:           if (!strcmp (name, \"Standard\"))",
          "914:           else if (!strcmp (name, \"ByLayer\"))",
          "916:           else if (!strcmp (name, \"ByBlock\"))",
          "918:           else if (!strcmp (name, \"*Active\"))",
          "925:           if (dat->version >= R_13 && !strcmp (name, \"STANDARD\"))",
          "927:           else if (dat->version >= R_13 && !strcmp (name, \"BYLAYER\"))",
          "929:           else if (dat->version >= R_13 && !strcmp (name, \"BYBLOCK\"))",
          "931:           else if (dat->version >= R_13 && !strcmp (name, \"*ACTIVE\"))",
          "",
          "[Added Lines]",
          "912:           if (strEQc (name, \"Standard\"))",
          "914:           else if (strEQc (name, \"ByLayer\"))",
          "916:           else if (strEQc (name, \"ByBlock\"))",
          "918:           else if (strEQc (name, \"*Active\"))",
          "925:           if (dat->version >= R_13 && strEQc (name, \"STANDARD\"))",
          "927:           else if (dat->version >= R_13 && strEQc (name, \"BYLAYER\"))",
          "929:           else if (dat->version >= R_13 && strEQc (name, \"BYBLOCK\"))",
          "931:           else if (dat->version >= R_13 && strEQc (name, \"*ACTIVE\"))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "966:     {",
          "967:       if (strlen (name) < 10)",
          "968:         fprintf (dat->fh, \"%3i\\r\\n%s\\r\\n\", dxf, name);",
          "970:         fprintf (dat->fh, \"%3i\\r\\n$MODEL_SPACE\\r\\n\", dxf);",
          "972:         fprintf (dat->fh, \"%3i\\r\\n$PAPER_SPACE\\r\\n\", dxf);",
          "973:       else if (!memcmp (name, \"*Paper_Space\", sizeof (\"*Paper_Space\") - 1))",
          "974:         fprintf (dat->fh, \"%3i\\r\\n$PAPER_SPACE%s\\r\\n\", dxf, &name[12]);",
          "",
          "[Removed Lines]",
          "969:       else if (!strcmp (name, \"*Model_Space\"))",
          "971:       else if (!strcmp (name, \"*Paper_Space\"))",
          "",
          "[Added Lines]",
          "969:       else if (strEQc (name, \"*Model_Space\"))",
          "971:       else if (strEQc (name, \"*Paper_Space\"))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "979:     {",
          "980:       if (strlen (name) < 10)",
          "981:         fprintf (dat->fh, \"%3i\\r\\n%s\\r\\n\", dxf, name);",
          "983:         fprintf (dat->fh, \"%3i\\r\\n*Model_Space\\r\\n\", dxf);",
          "985:         fprintf (dat->fh, \"%3i\\r\\n*Paper_Space\\r\\n\", dxf);",
          "986:       else if (!memcmp (name, \"$PAPER_SPACE\", sizeof (\"$PAPER_SPACE\") - 1))",
          "987:         fprintf (dat->fh, \"%3i\\r\\n*Paper_Space%s\\r\\n\", dxf, &name[12]);",
          "",
          "[Removed Lines]",
          "982:       else if (!strcmp (name, \"$MODEL_SPACE\"))",
          "984:       else if (!strcmp (name, \"$PAPER_SPACE\"))",
          "",
          "[Added Lines]",
          "982:       else if (strEQc (name, \"$MODEL_SPACE\"))",
          "984:       else if (strEQc (name, \"$PAPER_SPACE\"))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1021:     VALUE_TV (\"AcDbSymbolTableRecord\", 100);                                  \\",
          "1022:     VALUE_TV (\"AcDb\" #acdbname \"TableRecord\", 100);                           \\",
          "1023:   }                                                                           \\",
          "1025:     {                                                                         \\",
          "1026:       Dwg_Object *blk = dwg_ref_object (                                      \\",
          "1027:           dwg, ((Dwg_Object_BLOCK_HEADER *)_obj)->block_entity);              \\",
          "",
          "[Removed Lines]",
          "1024:   if (!strcmp (#acdbname, \"Block\") && dat->version >= R_13)                   \\",
          "",
          "[Added Lines]",
          "1024:   if (strEQc (#acdbname, \"Block\") && dat->version >= R_13)                    \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1236:           o = dwg_next_object (o);                                            \\",
          "1237:           if (!o)                                                             \\",
          "1238:             return DWG_ERR_INVALIDHANDLE;                                     \\",
          "1240:               && o->fixedtype == DWG_TYPE_VERTEX_PFACE_FACE)                  \\",
          "1241:             {                                                                 \\",
          "1242:               error |= dwg_dxf_VERTEX_PFACE_FACE (dat, o);                    \\",
          "",
          "[Removed Lines]",
          "1239:           if (!strcmp (#token, \"PFACE\")                                       \\",
          "",
          "[Added Lines]",
          "1239:           if (strEQc (#token, \"PFACE\")                                       \\",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1259:       for (BITCODE_BL j = 0; j < _obj->num_owned; j++)                        \\",
          "1260:         {                                                                     \\",
          "1261:           o = _obj->vertex[j] ? _obj->vertex[j]->obj : NULL;                  \\",
          "1263:               && o->fixedtype == DWG_TYPE_VERTEX_PFACE_FACE)                  \\",
          "1264:             {                                                                 \\",
          "1265:               error |= dwg_dxf_VERTEX_PFACE_FACE (dat, o);                    \\",
          "",
          "[Removed Lines]",
          "1262:           if (!strcmp (#token, \"PFACE\") && o                                  \\",
          "",
          "[Added Lines]",
          "1262:           if (strEQc (#token, \"PFACE\") && o                                   \\",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1296:       Dwg_Object *last_attrib = _obj->last_attrib                             \\",
          "1297:        ? _obj->last_attrib->obj : NULL;                                       \\",
          "1298:       Dwg_Object *o = _obj->first_attrib ? _obj->first_attrib->obj : NULL;    \\",
          "1300:         return DWG_ERR_INVALIDHANDLE;                                         \\",
          "1301:       if (o->fixedtype == DWG_TYPE_ATTRIB)                                    \\",
          "1302:         error |= dwg_dxf_ATTRIB (dat, o);                                     \\",
          "",
          "[Removed Lines]",
          "1299:       if (!o || !last_attrib)                                                                 \\",
          "",
          "[Added Lines]",
          "1299:       if (!o || !last_attrib)                                                 \\",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1774:       const char *dxfname = dwg->dwg_class[j].dxfname;",
          "1776:       if (dat->version >= R_2004",
          "1779:         continue;",
          "1780:       RECORD (CLASS);",
          "1781:       VALUE_TV (dxfname, 1);",
          "",
          "[Removed Lines]",
          "1777:           && (!strcmp (dxfname, \"ACDBPLACEHOLDER\")",
          "1778:               || !strcmp (dxfname, \"LAYOUT\")))",
          "",
          "[Added Lines]",
          "1777:           && (strEQc (dxfname, \"ACDBPLACEHOLDER\")",
          "1778:               || strEQc (dxfname, \"LAYOUT\")))",
          "",
          "---------------"
        ],
        "src/out_dxfb.c||src/out_dxfb.c": [
          "File: src/out_dxfb.c -> src/out_dxfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:                    DWG_TYPE_##token, #token);                                 \\",
          "583:         return DWG_ERR_INVALIDTYPE;                                           \\",
          "584:       }                                                                       \\",
          "586:       RECORD (POSITIONMARKER)                                                 \\",
          "587:     else if (dat->version < R_13 && strlen (#token) == 10                     \\",
          "589:       RECORD (POLYLINE)                                                       \\",
          "590:     else if (strlen (#token) > 11 && !memcmp (#token, \"DIMENSION_\", 11))      \\",
          "591:       RECORD (DIMENSION)                                                      \\",
          "",
          "[Removed Lines]",
          "585:     if (!strcmp (#token, \"GEOPOSITIONMARKER\"))                                \\",
          "588:              && !strcmp (#token, \"LWPOLYLINE\"))                               \\",
          "",
          "[Added Lines]",
          "585:     if (strEQc (#token, \"GEOPOSITIONMARKER\"))                                \\",
          "588:              && strEQc (#token, \"LWPOLYLINE\"))                               \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:       RECORD (POLYLINE)                                                       \\",
          "594:     else if (strlen (#token) > 7 && !memcmp (#token, \"VERTEX_\", 7))           \\",
          "595:       RECORD (VERTEX)                                                         \\",
          "597:       {                                                                       \\",
          "598:         RECORD (ACAD_TABLE);                                                  \\",
          "599:         return dwg_dxfb_TABLECONTENT (dat, obj);                              \\",
          "",
          "[Removed Lines]",
          "596:     else if (dat->version >= R_2010 && !strcmp (#token, \"TABLE\"))             \\",
          "",
          "[Added Lines]",
          "596:     else if (dat->version >= R_2010 && strEQc (#token, \"TABLE\"))              \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "746:         }",
          "747:       if (dat->from_version >= R_2000 && dat->version < R_2000)",
          "748:         { // convert the other way round, from newer to older",
          "750:             VALUE_TV (\"STANDARD\", dxf)",
          "752:             VALUE_TV (\"BYLAYER\", dxf)",
          "754:             VALUE_TV (\"BYBLOCK\", dxf)",
          "756:             VALUE_TV (\"*ACTIVE\", dxf)",
          "757:           else",
          "758:             VALUE_TV (name, dxf)",
          "759:         }",
          "760:       else",
          "761:         { // convert some standard names",
          "763:             VALUE_TV (\"Standard\", dxf)",
          "765:             VALUE_TV (\"ByLayer\", dxf)",
          "767:             VALUE_TV (\"ByBlock\", dxf)",
          "769:             VALUE_TV (\"*Active\", dxf)",
          "770:           else",
          "771:             VALUE_TV (name, dxf)",
          "",
          "[Removed Lines]",
          "749:           if (!strcmp (name, \"Standard\"))",
          "751:           else if (!strcmp (name, \"ByLayer\"))",
          "753:           else if (!strcmp (name, \"ByBlock\"))",
          "755:           else if (!strcmp (name, \"*Active\"))",
          "762:           if (dat->version >= R_2000 && !strcmp (name, \"STANDARD\"))",
          "764:           else if (dat->version >= R_2000 && !strcmp (name, \"BYLAYER\"))",
          "766:           else if (dat->version >= R_2000 && !strcmp (name, \"BYBLOCK\"))",
          "768:           else if (dat->version >= R_2000 && !strcmp (name, \"*ACTIVE\"))",
          "",
          "[Added Lines]",
          "749:           if (strEQc (name, \"Standard\"))",
          "751:           else if (strEQc (name, \"ByLayer\"))",
          "753:           else if (strEQc (name, \"ByBlock\"))",
          "755:           else if (strEQc (name, \"*Active\"))",
          "762:           if (dat->version >= R_2000 && strEQc (name, \"STANDARD\"))",
          "764:           else if (dat->version >= R_2000 && strEQc (name, \"BYLAYER\"))",
          "766:           else if (dat->version >= R_2000 && strEQc (name, \"BYBLOCK\"))",
          "768:           else if (dat->version >= R_2000 && strEQc (name, \"*ACTIVE\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "804:     {",
          "805:       if (strlen (name) < 10)",
          "806:         VALUE_TV (name, dxf)",
          "808:         VALUE_TV (\"$MODEL_SPACE\", dxf)",
          "810:         VALUE_TV (\"$PAPER_SPACE\", dxf)",
          "811:       else if (!memcmp (name, \"*Paper_Space\", sizeof (\"*Paper_Space\") - 1))",
          "812:         {",
          "",
          "[Removed Lines]",
          "807:       else if (!strcmp (name, \"*Model_Space\"))",
          "809:       else if (!strcmp (name, \"*Paper_Space\"))",
          "",
          "[Added Lines]",
          "807:       else if (strEQc (name, \"*Model_Space\"))",
          "809:       else if (strEQc (name, \"*Paper_Space\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:     {",
          "821:       if (strlen (name) < 10)",
          "822:         VALUE_TV (name, dxf)",
          "824:         VALUE_TV (\"*Model_Space\", dxf)",
          "826:         VALUE_TV (\"*Paper_Space\", dxf)",
          "827:       else if (!memcmp (name, \"$PAPER_SPACE\", sizeof (\"$PAPER_SPACE\") - 1))",
          "828:         {",
          "",
          "[Removed Lines]",
          "823:       else if (!strcmp (name, \"$MODEL_SPACE\"))",
          "825:       else if (!strcmp (name, \"$PAPER_SPACE\"))",
          "",
          "[Added Lines]",
          "823:       else if (strEQc (name, \"$MODEL_SPACE\"))",
          "825:       else if (strEQc (name, \"$PAPER_SPACE\"))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "863:     VALUE_TV (\"AcDbSymbolTableRecord\", 100)                                   \\",
          "864:     VALUE_TV (\"AcDb\" #acdbname \"TableRecord\", 100)                            \\",
          "865:   }                                                                           \\",
          "867:     {                                                                         \\",
          "868:       Dwg_Object *blk = dwg_ref_object (                                      \\",
          "869:           dwg, ((Dwg_Object_BLOCK_HEADER *)_obj)->block_entity);              \\",
          "",
          "[Removed Lines]",
          "866:   if (!strcmp (#acdbname, \"Block\") && dat->version >= R_13)                   \\",
          "",
          "[Added Lines]",
          "866:   if (strEQc (#acdbname, \"Block\") && dat->version >= R_13)                    \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1076:           o = dwg_next_object (o);                                            \\",
          "1077:           if (!o)                                                             \\",
          "1078:             return DWG_ERR_INVALIDHANDLE;                                     \\",
          "1080:               && o->fixedtype == DWG_TYPE_VERTEX_PFACE_FACE)                  \\",
          "1081:             {                                                                 \\",
          "1082:               error |= dwg_dxfb_VERTEX_PFACE_FACE (dat, o);                   \\",
          "",
          "[Removed Lines]",
          "1079:           if (!strcmp (#token, \"PFACE\")                                       \\",
          "",
          "[Added Lines]",
          "1079:           if (strEQc (#token, \"PFACE\")                                        \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1099:       for (BITCODE_BL j = 0; j < _obj->num_owned; j++)                        \\",
          "1100:         {                                                                     \\",
          "1101:           o = _obj->vertex[j] ? _obj->vertex[j]->obj : NULL;                  \\",
          "1103:               && o->fixedtype == DWG_TYPE_VERTEX_PFACE_FACE)                  \\",
          "1104:             {                                                                 \\",
          "1105:               error |= dwg_dxfb_VERTEX_PFACE_FACE (dat, o);                   \\",
          "",
          "[Removed Lines]",
          "1102:           if (!strcmp (#token, \"PFACE\") && o                                  \\",
          "",
          "[Added Lines]",
          "1102:           if (strEQc (#token, \"PFACE\") && o                                   \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1449:       const char *dxfname = dwg->dwg_class[j].dxfname;",
          "1451:       if (dat->version >= R_2004",
          "1454:         continue;",
          "1455:       RECORD (CLASS);",
          "1456:       VALUE_TV (dxfname, 1);",
          "",
          "[Removed Lines]",
          "1452:           && (!strcmp (dxfname, \"ACDBPLACEHOLDER\")",
          "1453:               || !strcmp (dxfname, \"LAYOUT\")))",
          "",
          "[Added Lines]",
          "1452:           && (strEQc (dxfname, \"ACDBPLACEHOLDER\")",
          "1453:               || strEQc (dxfname, \"LAYOUT\")))",
          "",
          "---------------"
        ],
        "src/out_geojson.c||src/out_geojson.c": [
          "File: src/out_geojson.c -> src/out_geojson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:         }",
          "368:       name = dwg_ent_get_ltype_name (obj->tio.entity, &error);",
          "370:         {",
          "371:           PAIR_S (Linetype, name);",
          "372:           if (dat->version >= R_2007)",
          "",
          "[Removed Lines]",
          "369:       if (!error && strcmp (name, \"ByLayer\")) // skip the default",
          "",
          "[Added Lines]",
          "369:       if (!error && strNE (name, \"ByLayer\")) // skip the default",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:   is_entity = dwg_class_is_entity (klass);",
          "490:     {",
          "491:       return dwg_geojson_LWPOLYLINE (dat, obj);",
          "492:     }",
          "494:     {",
          "495:       Dwg_Object_GEODATA *_obj = obj->tio.object->tio.GEODATA;",
          "496:       WARN_UNSTABLE_CLASS;",
          "",
          "[Removed Lines]",
          "489:   if (!strcmp (dxfname, \"LWPOLYLINE\"))",
          "493:   if (!strcmp (dxfname, \"GEODATA\"))",
          "",
          "[Added Lines]",
          "489:   if (strEQc (dxfname, \"LWPOLYLINE\"))",
          "493:   if (strEQc (dxfname, \"GEODATA\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:       ENDFEATURE;",
          "500:       return 0;",
          "501:     }",
          "503:     {",
          "504:       Dwg_Entity_GEOPOSITIONMARKER *_obj",
          "505:           = obj->tio.entity->tio.GEOPOSITIONMARKER;",
          "",
          "[Removed Lines]",
          "502:   if (!strcmp (dxfname, \"GEOPOSITIONMARKER\"))",
          "",
          "[Added Lines]",
          "502:   if (strEQc (dxfname, \"GEOPOSITIONMARKER\"))",
          "",
          "---------------"
        ],
        "src/out_json.c||src/out_json.c": [
          "File: src/out_json.c -> src/out_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:     _ent = obj->tio.entity;                                                   \\",
          "608:     _obj = ent = _ent->tio.token;                                             \\",
          "609:     FIELD_TEXT (entity, #token);                                              \\",
          "611:       FIELD_TEXT (dxfname, obj->dxfname);                                     \\",
          "612:     _FIELD (type, RL, 0);                                                     \\",
          "613:     KEY (handle);                                                             \\",
          "",
          "[Removed Lines]",
          "610:     if (strcmp (obj->dxfname, #token))                                        \\",
          "",
          "[Added Lines]",
          "610:     if (strNE (obj->dxfname, #token))                                         \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:     LOG_INFO (\"Object \" #token \":\\n\")                                         \\",
          "643:     _obj = obj->tio.object->tio.token;                                        \\",
          "644:     FIELD_TEXT (object, #token);                                              \\",
          "646:       FIELD_TEXT (dxfname, obj->dxfname);                                     \\",
          "647:     _FIELD (type, RL, 0);                                                     \\",
          "648:     KEY (handle);                                                             \\",
          "",
          "[Removed Lines]",
          "645:     if (strcmp (obj->dxfname, #token))                                        \\",
          "",
          "[Added Lines]",
          "645:     if (strNE (obj->dxfname, #token))                                         \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c16e503bfce2eb2cfc7869b0e49b6a5e1360136c",
      "candidate_info": {
        "commit_hash": "c16e503bfce2eb2cfc7869b0e49b6a5e1360136c",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/c16e503bfce2eb2cfc7869b0e49b6a5e1360136c",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: fixup padded obj->size\n\nFixes off-by-one Wrong object size warnings",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:     {",
          "1727:       BITCODE_BL pos = bit_position (dat);",
          "1728:       obj->size = dat->byte - previous_address;",
          "1729:       obj->bitsize = pos - (previous_address * 8);",
          "1731:       bit_set_position (dat, previous_address * 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:       if (dat->bit)",
          "1730:         obj->size++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1767:   bit_write_CRC (dat, address, 0xC0C1);",
          "1769:   {",
          "1771:     if (next_addr != dat->byte)",
          "1772:       {",
          "1773:         if (obj->size)",
          "1775:                     obj->size, dat->byte, (long)(next_addr - dat->byte));",
          "1776:         dat->byte = next_addr;",
          "1777:       }",
          "",
          "[Removed Lines]",
          "1770:     unsigned long next_addr = address + obj->size + 4;",
          "1774:           LOG_WARN (\"Wrong object size: %lu + %u + 4 != %lu: %ld off\", address,",
          "",
          "[Added Lines]",
          "1772:     unsigned long next_addr = address + obj->size + 2;",
          "1776:           LOG_WARN (\"Wrong object size: %lu + %u + 2 != %lu: %ld off\", address,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bbab9f17f3c4d01cb98441f95422db66dead9fa",
      "candidate_info": {
        "commit_hash": "2bbab9f17f3c4d01cb98441f95422db66dead9fa",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/2bbab9f17f3c4d01cb98441f95422db66dead9fa",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: fix bitsize calculation",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:   }",
          "494: #define START_HANDLE_STREAM                                                   \\",
          "497:     bit_set_position (hdl_dat, obj->hdlpos);                                  \\",
          "498:   RESET_VER",
          "500: #if 0",
          "",
          "[Removed Lines]",
          "496:   if (dat->version >= R_2007)                                                 \\",
          "",
          "[Added Lines]",
          "496:   if (dat->version >= R_2007 && obj->bitsize)                                 \\",
          "498:   if (!obj->bitsize)                                                          \\",
          "499:     obj->bitsize =  bit_position (dat) - (obj->address * 8);                  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1935:       obj->size = dat->byte - address - 2; // excludes the CRC",
          "1936:       if (dat->bit)",
          "1937:         obj->size++;",
          "1940:       bit_set_position (dat, address * 8);",
          "1941:       if (obj->size > 0x7fff)",
          "",
          "[Removed Lines]",
          "1938:       obj->bitsize = pos - (address * 8);",
          "",
          "[Added Lines]",
          "1940:       if (!obj->bitsize)",
          "1941:         obj->bitsize = pos - (address * 8); // minus hdlpos",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2165:     error |= obj_string_stream (dat, obj, str_dat);",
          "2166:   }",
          "2169:   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle))",
          "2170:   PRE (R_13) { return DWG_ERR_NOTYETSUPPORTED; }",
          "",
          "[Removed Lines]",
          "2168:   bit_write_H (dat, &(obj->handle));",
          "",
          "[Added Lines]",
          "2171:   bit_write_H (dat, &obj->handle);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2282:   VERSIONS (R_2000, R_2007)",
          "2283:   {",
          "2284:     obj->bitsize_pos = bit_position (dat);",
          "2287:     bit_write_RL (dat, obj->bitsize);",
          "2288:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "2289:               dat->byte - 4, dat->bit);",
          "2290:   }",
          "2291:   SINCE (R_2010)",
          "2292:   {",
          "2296:   }",
          "",
          "[Removed Lines]",
          "2285:     if (!obj->bitsize)",
          "2286:       obj->bitsize = obj->size * 8;",
          "2293:     obj->bitsize = dat->size - 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2304:   VERSIONS (R_13, R_14)",
          "2305:   {",
          "2306:     obj->bitsize_pos = bit_position (dat);",
          "2309:     bit_write_RL (dat, obj->bitsize);",
          "2310:     LOG_INFO (\"bitsize: \" FORMAT_RL \" (@%lu.%u)\\n\", obj->bitsize,",
          "2311:               dat->byte - 4, dat->bit);",
          "",
          "[Removed Lines]",
          "2307:     if (!obj->bitsize)",
          "2308:       obj->bitsize = obj->size * 8;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e80e43e0f6dd138c88e8912068ffe88381b3f7e3",
      "candidate_info": {
        "commit_hash": "e80e43e0f6dd138c88e8912068ffe88381b3f7e3",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/e80e43e0f6dd138c88e8912068ffe88381b3f7e3",
        "files": [
          "src/dwg.spec",
          "src/encode.c"
        ],
        "message": "encode: fix UNKNOWN_OBJ hdlpos\n\ncertain versions (json 2000, dwg 2000) do write the UNKNOWN_OBJ\nasis. ensure that we don't write the comon handles twice.\nSee DWG_OBJECT_END\n\nAlso ensure that UNKNOWN_ENT doesn't overwrite a good bitsize.",
        "before_after_code_files": [
          "src/dwg.spec||src/dwg.spec",
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "6071: DWG_ENTITY (UNKNOWN_ENT)",
          "6072:   DECODE_UNKNOWN_BITS",
          "6074: DWG_ENTITY_END",
          "",
          "[Removed Lines]",
          "6073:   COMMON_ENTITY_HANDLE_DATA; // including this",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2675:           if (is_entity)",
          "2677:           else",
          "2680:           if (dwg->header.version == dwg->header.from_version",
          "2681:               && obj->unknown_bits && obj->num_unknown_bits) // cannot calculate",
          "",
          "[Removed Lines]",
          "2676:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "2678:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "",
          "[Added Lines]",
          "2676:             {",
          "2677:               if (obj->bitsize && dwg->header.version == dwg->header.from_version)",
          "2678:                 obj->was_bitsize_set = 1;",
          "2679:               error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "2680:             }",
          "2682:             {",
          "2685:               if (!obj->hdlpos)",
          "2686:                 {",
          "2687:                   if (obj->bitsize)",
          "2688:                     {",
          "2689:                       obj->hdlpos = (obj->address * 8) + obj->bitsize;",
          "2690:                       if (dwg->header.version == dwg->header.from_version)",
          "2691:                         obj->was_bitsize_set = 1;",
          "2692:                     }",
          "2693:                   else",
          "2694:                     obj->hdlpos = (obj->address * 8) + obj->num_unknown_bits;",
          "2695:                 }",
          "2696:               error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "2697:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}