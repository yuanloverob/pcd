{
  "cve_id": "CVE-2020-14402",
  "cve_desc": "An issue was discovered in LibVNCServer before 0.9.13. libvncserver/corre.c allows out-of-bounds access via encodings.",
  "repo": "LibVNC/libvncserver",
  "patch_hash": "74e8a70f2c9a5248d6718ce443e07c7ed314dfff",
  "patch_info": {
    "commit_hash": "74e8a70f2c9a5248d6718ce443e07c7ed314dfff",
    "repo": "LibVNC/libvncserver",
    "commit_url": "https://github.com/LibVNC/libvncserver/commit/74e8a70f2c9a5248d6718ce443e07c7ed314dfff",
    "files": [
      "libvncserver/corre.c",
      "libvncserver/hextile.c",
      "libvncserver/rre.c"
    ],
    "message": "libvncserver: encodings: prevent OOB accesses",
    "before_after_code_files": [
      "libvncserver/corre.c||libvncserver/corre.c",
      "libvncserver/hextile.c||libvncserver/hextile.c",
      "libvncserver/rre.c||libvncserver/rre.c"
    ]
  },
  "patch_diff": {
    "libvncserver/corre.c||libvncserver/corre.c": [
      "File: libvncserver/corre.c -> libvncserver/corre.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "233:             seg = data+(j*w);                                                 \\",
      "234:             if (seg[x] != cl) {break;}                                        \\",
      "235:             i = x;                                                            \\",
      "237:             i -= 1;                                                           \\",
      "238:             if (j == y) vx = hx = i;                                          \\",
      "239:             if (i < vx) vx = i;                                               \\",
      "",
      "[Removed Lines]",
      "236:             while ((seg[i] == cl) && (i < w)) i += 1;                         \\",
      "",
      "[Added Lines]",
      "236:             while ((i < w) && (seg[i] == cl)) i += 1;                         \\",
      "",
      "---------------"
    ],
    "libvncserver/hextile.c||libvncserver/hextile.c": [
      "File: libvncserver/hextile.c -> libvncserver/hextile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:                     seg = data+(j*w);                                           \\",
      "225:                     if (seg[x] != cl2) {break;}                                 \\",
      "226:                     i = x;                                                      \\",
      "228:                     i -= 1;                                                     \\",
      "229:                     if (j == y) vx = hx = i;                                    \\",
      "230:                     if (i < vx) vx = i;                                         \\",
      "",
      "[Removed Lines]",
      "227:                     while ((seg[i] == cl2) && (i < w)) i += 1;                  \\",
      "",
      "[Added Lines]",
      "227:                     while ((i < w) && (seg[i] == cl2)) i += 1;                  \\",
      "",
      "---------------"
    ],
    "libvncserver/rre.c||libvncserver/rre.c": [
      "File: libvncserver/rre.c -> libvncserver/rre.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "200:             seg = data+(j*w);                                                 \\",
      "201:             if (seg[x] != cl) {break;}                                        \\",
      "202:             i = x;                                                            \\",
      "204:             i -= 1;                                                           \\",
      "205:             if (j == y) vx = hx = i;                                          \\",
      "206:             if (i < vx) vx = i;                                               \\",
      "",
      "[Removed Lines]",
      "203:             while ((seg[i] == cl) && (i < w)) i += 1;                         \\",
      "",
      "[Added Lines]",
      "203:             while ((i < w) && (seg[i] == cl)) i += 1;                         \\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d0368f31b2161aab9aa28f3acfcf781f51f6b5d",
      "candidate_info": {
        "commit_hash": "3d0368f31b2161aab9aa28f3acfcf781f51f6b5d",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/3d0368f31b2161aab9aa28f3acfcf781f51f6b5d",
        "files": [
          "libvncclient/rfbproto.c",
          "libvncclient/sasl.c",
          "libvncclient/vncviewer.c"
        ],
        "message": "libvncclient: handle memory allocation failures",
        "before_after_code_files": [
          "libvncclient/rfbproto.c||libvncclient/rfbproto.c",
          "libvncclient/sasl.c||libvncclient/sasl.c",
          "libvncclient/vncviewer.c||libvncclient/vncviewer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/416"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncclient/rfbproto.c||libvncclient/rfbproto.c": [
          "File: libvncclient/rfbproto.c -> libvncclient/rfbproto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   clientData = clientData->next;",
          "119:  if(clientData == NULL) {",
          "120:   clientData = calloc(sizeof(rfbClientData), 1);",
          "121:   clientData->next = client->clientData;",
          "122:   client->clientData = clientData;",
          "123:   clientData->tag = tag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   if(clientData == NULL) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:     const char* magic=\"vncLog0.0\";",
          "298:     char buffer[10];",
          "299:     rfbVNCRec* rec = (rfbVNCRec*)malloc(sizeof(rfbVNCRec));",
          "300:     client->vncRec = rec;",
          "302:     rec->file = fopen(client->serverHost,\"rb\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:     if(!rec) {",
          "302:         rfbClientLog(\"Could not allocate rfbVNCRec memory\\n\");",
          "303:         return FALSE;",
          "304:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:       return;",
          "416:     }",
          "417:     reason = malloc(reasonLen+1);",
          "419:     reason[reasonLen]=0;",
          "420:     rfbClientLog(\"VNC connection failed: %s\\n\",reason);",
          "421:     free(reason);",
          "",
          "[Removed Lines]",
          "418:     if (!ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
          "",
          "[Added Lines]",
          "423:     if (!reason || !ReadFromRFBServer(client, reason, reasonLen)) { free(reason); return; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "877:       for (size=0;authSchemes[size];size++) ;",
          "878:     }",
          "879:     client->clientAuthSchemes = (uint32_t*)malloc(sizeof(uint32_t)*(size+1));",
          "883:   }",
          "884: }",
          "",
          "[Removed Lines]",
          "880:     for (i=0;i<size;i++)",
          "881:       client->clientAuthSchemes[i] = authSchemes[i];",
          "882:     client->clientAuthSchemes[size] = 0;",
          "",
          "[Added Lines]",
          "885:     if (client->clientAuthSchemes) {",
          "886:       for (i=0;i<size;i++)",
          "887:         client->clientAuthSchemes[i] = authSchemes[i];",
          "888:       client->clientAuthSchemes[size] = 0;",
          "889:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1757:       if (rect.encoding == rfbEncodingServerIdentity) {",
          "1758:           char *buffer;",
          "1759:           buffer = malloc(rect.r.w+1);",
          "1761:           {",
          "1762:               free(buffer);",
          "1763:               return FALSE;",
          "",
          "[Removed Lines]",
          "1760:           if (!ReadFromRFBServer(client, buffer, rect.r.w))",
          "",
          "[Added Lines]",
          "1767:           if (!buffer || !ReadFromRFBServer(client, buffer, rect.r.w))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2121:     buffer = malloc(msg.sct.length+1);",
          "2124:       free(buffer);",
          "2125:       return FALSE;",
          "2126:     }",
          "",
          "[Removed Lines]",
          "2123:     if (!ReadFromRFBServer(client, buffer, msg.sct.length)) {",
          "",
          "[Added Lines]",
          "2130:     if (!buffer || !ReadFromRFBServer(client, buffer, msg.sct.length)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2162:    if(msg.tc.length > MAX_TEXTCHAT_SIZE)",
          "2163:        return FALSE;",
          "2164:           buffer=malloc(msg.tc.length+1);",
          "2166:           {",
          "2167:               free(buffer);",
          "2168:               return FALSE;",
          "",
          "[Removed Lines]",
          "2165:           if (!ReadFromRFBServer(client, buffer, msg.tc.length))",
          "",
          "[Added Lines]",
          "2172:           if (!buffer || !ReadFromRFBServer(client, buffer, msg.tc.length))",
          "",
          "---------------"
        ],
        "libvncclient/sasl.c||libvncclient/sasl.c": [
          "File: libvncclient/sasl.c -> libvncclient/sasl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: static char *vnc_connection_addr_to_string(char *host, int port)",
          "55: {",
          "56:     char * buf = (char *)malloc(strlen(host) + 7);",
          "58:     return buf;",
          "59: }",
          "",
          "[Removed Lines]",
          "57:     sprintf(buf, \"%s;%hu\", host, port);",
          "",
          "[Added Lines]",
          "57:     if (buf) {",
          "58:         sprintf(buf, \"%s;%hu\", host, port);",
          "59:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:     }",
          "275:     mechlist = malloc(mechlistlen+1);",
          "277:         free(mechlist);",
          "278:         goto error;",
          "279:     }",
          "",
          "[Removed Lines]",
          "276:     if (!ReadFromRFBServer(client, mechlist, mechlistlen)) {",
          "",
          "[Added Lines]",
          "278:     if (!mechlist || !ReadFromRFBServer(client, mechlist, mechlistlen)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:     if (serverinlen) {",
          "361:         serverin = malloc(serverinlen);",
          "363:         serverin[serverinlen-1] = '\\0';",
          "364:         serverinlen--;",
          "365:     } else {",
          "",
          "[Removed Lines]",
          "362:         if (!ReadFromRFBServer(client, serverin, serverinlen)) goto error;",
          "",
          "[Added Lines]",
          "364:         if (!serverin || !ReadFromRFBServer(client, serverin, serverinlen)) goto error;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431:         if (serverinlen) {",
          "432:             serverin = malloc(serverinlen);",
          "434:             serverin[serverinlen-1] = '\\0';",
          "435:             serverinlen--;",
          "436:         } else {",
          "",
          "[Removed Lines]",
          "433:             if (!ReadFromRFBServer(client, serverin, serverinlen)) goto error;",
          "",
          "[Added Lines]",
          "435:             if (!serverin || !ReadFromRFBServer(client, serverin, serverinlen)) goto error;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521:         encodedLen = 8192;",
          "522:         encoded = (char *)malloc(encodedLen);",
          "524:         ret = read(client->sock, encoded, encodedLen);",
          "525:         if (ret < 0) {",
          "526:             free(encoded);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:         if (!encoded) {",
          "526:             errno = EIO;",
          "527:             return -EIO;",
          "528:         }",
          "",
          "---------------"
        ],
        "libvncclient/vncviewer.c||libvncclient/vncviewer.c": [
          "File: libvncclient/vncviewer.c -> libvncclient/vncviewer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: static char* ReadPassword(rfbClient* client) {",
          "61:  int i;",
          "62:  char* p=calloc(1,9);",
          "63: #ifndef WIN32",
          "64:  struct termios save,noecho;",
          "65:  if(tcgetattr(fileno(stdin),&save)!=0) return p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  if (!p) return p;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:         client->destPort = 5900;",
          "469:  client->destHost = strdup(argv[i+1]);",
          "471:    client->destHost[(int)(colon-argv[i+1])] = '\\0';",
          "472:    client->destPort = atoi(colon+1);",
          "473:  }",
          "",
          "[Removed Lines]",
          "470:  if(colon) {",
          "",
          "[Added Lines]",
          "471:  if(client->destHost && colon) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:  if(colon) {",
          "482:    client->serverHost = strdup(argv[i]);",
          "485:  } else {",
          "486:    client->serverHost = strdup(argv[i]);",
          "487:  }",
          "",
          "[Removed Lines]",
          "483:    client->serverHost[(int)(colon-argv[i])] = '\\0';",
          "484:    client->serverPort = atoi(colon+1);",
          "",
          "[Added Lines]",
          "484:    if(client->serverHost) {",
          "485:      client->serverHost[(int)(colon-argv[i])] = '\\0';",
          "486:      client->serverPort = atoi(colon+1);",
          "487:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}