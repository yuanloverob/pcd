{
  "cve_id": "CVE-2022-21737",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `*Bincount` operations allows malicious users to cause denial of service by passing in arguments which would trigger a `CHECK`-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in `CHECK` failures later when the output tensors get allocated. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "7019ce4f68925fd01cdafde26f8d8c938f47e6f9",
  "patch_info": {
    "commit_hash": "7019ce4f68925fd01cdafde26f8d8c938f47e6f9",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/7019ce4f68925fd01cdafde26f8d8c938f47e6f9",
    "files": [
      "tensorflow/core/kernels/bincount_op.cc",
      "tensorflow/core/ops/math_ops.cc",
      "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
    ],
    "message": "Fix check-fail when bincount ops are passed invalid values.\n\nPiperOrigin-RevId: 415063028\nChange-Id: I20f8dc09933ddca1111c4efbf9a3a1e863215d02",
    "before_after_code_files": [
      "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
      "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
      "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
      "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "276:     const Tensor& size_t = ctx->input(1);",
      "277:     const Tensor& weights = ctx->input(2);",
      "279:     Tidx size = size_t.scalar<Tidx>()();",
      "280:     OP_REQUIRES(",
      "281:         ctx, size >= 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "279:     OP_REQUIRES(ctx, size_t.dims() == 0,",
      "280:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "281:                                         size_t.dims()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "372:     const auto weights = ctx->input(4).flat<T>();",
      "373:     const int64_t weights_size = weights.size();",
      "375:     Tidx size = size_t.scalar<Tidx>()();",
      "376:     OP_REQUIRES(",
      "377:         ctx, size >= 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "378:     OP_REQUIRES(ctx, size_t.dims() == 0,",
      "379:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "380:                                         size_t.dims()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:     const auto weights = ctx->input(3).flat<T>();",
      "463:     const int64_t weights_size = weights.size();",
      "465:     Tidx size = size_t.scalar<Tidx>()();",
      "466:     OP_REQUIRES(",
      "467:         ctx, size >= 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "471:     OP_REQUIRES(ctx, size_t.dims() == 0,",
      "472:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "473:                                         size_t.dims()));",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
      "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1699:         return Status::OK();",
      "1700:       }",
      "1703:       int32_t size_val = size_tensor->scalar<int32>()();",
      "1704:       if (size_val < 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1702:       if (size_tensor->dims() != 0) {",
      "1703:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "1704:                                        size_tensor->dims());",
      "1705:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1730:         c->set_output(0, c->UnknownShape());",
      "1731:         return Status::OK();",
      "1732:       }",
      "1734:       int64_t size_val;",
      "1735:       DataType dtype;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1738:       if (size_tensor->dims() != 0) {",
      "1739:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "1740:                                        size_tensor->dims());",
      "1741:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1771:         c->set_output(0, c->UnknownShape());",
      "1772:         return Status::OK();",
      "1773:       }",
      "1775:       int64_t size_val;",
      "1776:       DataType dtype;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1783:       if (size_tensor->dims() != 0) {",
      "1784:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
      "1785:                                        size_tensor->dims());",
      "1786:       }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py||tensorflow/python/kernel_tests/math_ops/bincount_op_test.py": [
      "File: tensorflow/python/kernel_tests/math_ops/bincount_op_test.py -> tensorflow/python/kernel_tests/math_ops/bincount_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "344:             gen_math_ops.dense_bincount(",
      "345:                 input=[[[1, 2, 3], [0, 3, 2]]], weights=[], size=10))",
      "348: class SparseBincountOpTest(test_util.TensorFlowTestCase,",
      "349:                            parameterized.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "347:   @test_util.run_in_graph_and_eager_modes",
      "348:   def test_size_is_not_scalar(self):  # b/206619828",
      "349:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "350:                                 \"Shape must be rank 0 but is rank 1\"):",
      "351:       self.evaluate(",
      "352:           gen_math_ops.dense_bincount(",
      "353:               input=[0], size=[1, 1], weights=[3], binary_output=False))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "511:                 weights=[],",
      "512:                 binary_output=True)))",
      "515: class RaggedBincountOpTest(test_util.TensorFlowTestCase,",
      "516:                            parameterized.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "522:   @test_util.run_in_graph_and_eager_modes",
      "523:   def test_size_is_not_scalar(self):  # b/206619828",
      "524:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "525:                                 \"Shape must be rank 0 but is rank 1\"):",
      "526:       self.evaluate(",
      "527:           gen_math_ops.sparse_bincount(",
      "528:               indices=[[0], [1]],",
      "529:               values=[0, 0],",
      "530:               dense_shape=[1, 1],",
      "531:               size=[1, 1],",
      "532:               weights=[0, 0],",
      "533:               binary_output=False))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:                 size=size,",
      "651:                 binary_output=True)))",
      "654: if __name__ == \"__main__\":",
      "655:   googletest.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "674:   @test_util.run_in_graph_and_eager_modes",
      "675:   def test_size_is_not_scalar(self):  # b/206619828",
      "676:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "677:                                 \"Shape must be rank 0 but is rank 1\"):",
      "678:       self.evaluate(",
      "679:           gen_math_ops.ragged_bincount(",
      "680:               splits=[0, 0, 1],",
      "681:               values=[1],",
      "682:               size=[1, 1],",
      "683:               weights=[0, 0, 0],",
      "684:               binary_output=False,",
      "685:               name=None))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aaf8596d002da2baf9053be94c0225ec36a70bea",
      "candidate_info": {
        "commit_hash": "aaf8596d002da2baf9053be94c0225ec36a70bea",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/aaf8596d002da2baf9053be94c0225ec36a70bea",
        "files": [
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py"
        ],
        "message": "Fix check-fail when bincount ops are passed invalid values.\n\nPiperOrigin-RevId: 415063028\nChange-Id: I20f8dc09933ddca1111c4efbf9a3a1e863215d02",
        "before_after_code_files": [
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     const Tensor& size_t = ctx->input(1);",
          "269:     const Tensor& weights = ctx->input(2);",
          "271:     Tidx size = size_t.scalar<Tidx>()();",
          "272:     OP_REQUIRES(",
          "273:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "272:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "273:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:     const auto weights = ctx->input(4).flat<T>();",
          "365:     const int64_t weights_size = weights.size();",
          "367:     Tidx size = size_t.scalar<Tidx>()();",
          "368:     OP_REQUIRES(",
          "369:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "371:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "372:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "454:     const auto weights = ctx->input(3).flat<T>();",
          "455:     const int64_t weights_size = weights.size();",
          "457:     Tidx size = size_t.scalar<Tidx>()();",
          "458:     OP_REQUIRES(",
          "459:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "464:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "465:                                         size_t.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:         return Status::OK();",
          "1692:       }",
          "1695:       int32 size_val = size_tensor->scalar<int32>()();",
          "1696:       if (size_val < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:       if (size_tensor->dims() != 0) {",
          "1695:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1696:                                        size_tensor->dims());",
          "1697:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1722:         c->set_output(0, c->UnknownShape());",
          "1723:         return Status::OK();",
          "1724:       }",
          "1726:       int64 size_val;",
          "1727:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1730:       if (size_tensor->dims() != 0) {",
          "1731:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1732:                                        size_tensor->dims());",
          "1733:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1763:         c->set_output(0, c->UnknownShape());",
          "1764:         return Status::OK();",
          "1765:       }",
          "1767:       int64 size_val;",
          "1768:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:       if (size_tensor->dims() != 0) {",
          "1776:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1777:                                        size_tensor->dims());",
          "1778:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/bincount_op_test.py -> tensorflow/python/kernel_tests/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:             gen_math_ops.dense_bincount(",
          "333:                 input=[[[1, 2, 3], [0, 3, 2]]], weights=[], size=10))",
          "336: class SparseBincountOpTest(test_util.TensorFlowTestCase,",
          "337:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:   @test_util.run_in_graph_and_eager_modes",
          "336:   def test_size_is_not_scalar(self):  # b/206619828",
          "337:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "338:                                 \"Shape must be rank 0 but is rank 1\"):",
          "339:       self.evaluate(",
          "340:           gen_math_ops.dense_bincount(",
          "341:               input=[0], size=[1, 1], weights=[3], binary_output=False))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:                 weights=[],",
          "500:                 binary_output=True)))",
          "503: class RaggedBincountOpTest(test_util.TensorFlowTestCase,",
          "504:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   @test_util.run_in_graph_and_eager_modes",
          "511:   def test_size_is_not_scalar(self):  # b/206619828",
          "512:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "513:                                 \"Shape must be rank 0 but is rank 1\"):",
          "514:       self.evaluate(",
          "515:           gen_math_ops.sparse_bincount(",
          "516:               indices=[[0], [1]],",
          "517:               values=[0, 0],",
          "518:               dense_shape=[1, 1],",
          "519:               size=[1, 1],",
          "520:               weights=[0, 0],",
          "521:               binary_output=False))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "638:                 size=size,",
          "639:                 binary_output=True)))",
          "642: if __name__ == \"__main__\":",
          "643:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:   @test_util.run_in_graph_and_eager_modes",
          "663:   def test_size_is_not_scalar(self):  # b/206619828",
          "664:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "665:                                 \"Shape must be rank 0 but is rank 1\"):",
          "666:       self.evaluate(",
          "667:           gen_math_ops.ragged_bincount(",
          "668:               splits=[0, 0, 1],",
          "669:               values=[1],",
          "670:               size=[1, 1],",
          "671:               weights=[0, 0, 0],",
          "672:               binary_output=False,",
          "673:               name=None))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c11b9fbd9f475aece85dd8506ef81dfe2f2e712",
      "candidate_info": {
        "commit_hash": "7c11b9fbd9f475aece85dd8506ef81dfe2f2e712",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7c11b9fbd9f475aece85dd8506ef81dfe2f2e712",
        "files": [
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py"
        ],
        "message": "Fix check-fail when bincount ops are passed invalid values.\n\nPiperOrigin-RevId: 415063028\nChange-Id: I20f8dc09933ddca1111c4efbf9a3a1e863215d02",
        "before_after_code_files": [
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     const Tensor& size_t = ctx->input(1);",
          "236:     const Tensor& weights = ctx->input(2);",
          "238:     Tidx size = size_t.scalar<Tidx>()();",
          "239:     OP_REQUIRES(",
          "240:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "239:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "240:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     const auto weights = ctx->input(4).flat<T>();",
          "332:     const int64 weights_size = weights.size();",
          "334:     Tidx size = size_t.scalar<Tidx>()();",
          "335:     OP_REQUIRES(",
          "336:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "338:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "339:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:     const auto weights = ctx->input(3).flat<T>();",
          "422:     const int64 weights_size = weights.size();",
          "424:     Tidx size = size_t.scalar<Tidx>()();",
          "425:     OP_REQUIRES(",
          "426:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "431:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "432:                                         size_t.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1656:         return Status::OK();",
          "1657:       }",
          "1660:       int32 size_val = size_tensor->scalar<int32>()();",
          "1661:       if (size_val < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1659:       if (size_tensor->dims() != 0) {",
          "1660:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1661:                                        size_tensor->dims());",
          "1662:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1687:         c->set_output(0, c->UnknownShape());",
          "1688:         return Status::OK();",
          "1689:       }",
          "1691:       int64 size_val;",
          "1692:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1695:       if (size_tensor->dims() != 0) {",
          "1696:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1697:                                        size_tensor->dims());",
          "1698:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1728:         c->set_output(0, c->UnknownShape());",
          "1729:         return Status::OK();",
          "1730:       }",
          "1732:       int64 size_val;",
          "1733:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1740:       if (size_tensor->dims() != 0) {",
          "1741:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1742:                                        size_tensor->dims());",
          "1743:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/bincount_op_test.py -> tensorflow/python/kernel_tests/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:             gen_math_ops.dense_bincount(",
          "333:                 input=[[[1, 2, 3], [0, 3, 2]]], weights=[], size=10))",
          "336: class SparseBincountOpTest(test_util.TensorFlowTestCase,",
          "337:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:   @test_util.run_in_graph_and_eager_modes",
          "336:   def test_size_is_not_scalar(self):  # b/206619828",
          "337:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "338:                                 \"Shape must be rank 0 but is rank 1\"):",
          "339:       self.evaluate(",
          "340:           gen_math_ops.dense_bincount(",
          "341:               input=[0], size=[1, 1], weights=[3], binary_output=False))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:                 weights=[],",
          "500:                 binary_output=True)))",
          "503: class RaggedBincountOpTest(test_util.TensorFlowTestCase,",
          "504:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   @test_util.run_in_graph_and_eager_modes",
          "511:   def test_size_is_not_scalar(self):  # b/206619828",
          "512:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "513:                                 \"Shape must be rank 0 but is rank 1\"):",
          "514:       self.evaluate(",
          "515:           gen_math_ops.sparse_bincount(",
          "516:               indices=[[0], [1]],",
          "517:               values=[0, 0],",
          "518:               dense_shape=[1, 1],",
          "519:               size=[1, 1],",
          "520:               weights=[0, 0],",
          "521:               binary_output=False))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "638:                 size=size,",
          "639:                 binary_output=True)))",
          "642: if __name__ == \"__main__\":",
          "643:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:   @test_util.run_in_graph_and_eager_modes",
          "663:   def test_size_is_not_scalar(self):  # b/206619828",
          "664:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "665:                                 \"Shape must be rank 0 but is rank 1\"):",
          "666:       self.evaluate(",
          "667:           gen_math_ops.ragged_bincount(",
          "668:               splits=[0, 0, 1],",
          "669:               values=[1],",
          "670:               size=[1, 1],",
          "671:               weights=[0, 0, 0],",
          "672:               binary_output=False,",
          "673:               name=None))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7b7cedab633582427da9cb42f3d27825f119977",
      "candidate_info": {
        "commit_hash": "c7b7cedab633582427da9cb42f3d27825f119977",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c7b7cedab633582427da9cb42f3d27825f119977",
        "files": [
          "tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py"
        ],
        "message": "Fix check-fail when bincount ops are passed invalid values.\n\nPiperOrigin-RevId: 415063028\nChange-Id: I20f8dc09933ddca1111c4efbf9a3a1e863215d02",
        "before_after_code_files": [
          "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
          "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc",
          "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc",
            "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/bincount_op.cc||tensorflow/core/kernels/bincount_op.cc": [
          "File: tensorflow/core/kernels/bincount_op.cc -> tensorflow/core/kernels/bincount_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     const Tensor& size_t = ctx->input(1);",
          "277:     const Tensor& weights = ctx->input(2);",
          "279:     Tidx size = size_t.scalar<Tidx>()();",
          "280:     OP_REQUIRES(",
          "281:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "280:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "281:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:     const auto weights = ctx->input(4).flat<T>();",
          "373:     const int64_t weights_size = weights.size();",
          "375:     Tidx size = size_t.scalar<Tidx>()();",
          "376:     OP_REQUIRES(",
          "377:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "379:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "380:                                         size_t.dims()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:     const auto weights = ctx->input(3).flat<T>();",
          "463:     const int64_t weights_size = weights.size();",
          "465:     Tidx size = size_t.scalar<Tidx>()();",
          "466:     OP_REQUIRES(",
          "467:         ctx, size >= 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     OP_REQUIRES(ctx, size_t.dims() == 0,",
          "472:                 errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "473:                                         size_t.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/math_ops.cc||tensorflow/core/ops/math_ops.cc": [
          "File: tensorflow/core/ops/math_ops.cc -> tensorflow/core/ops/math_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:         return Status::OK();",
          "1692:       }",
          "1695:       int32_t size_val = size_tensor->scalar<int32>()();",
          "1696:       if (size_val < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:       if (size_tensor->dims() != 0) {",
          "1695:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1696:                                        size_tensor->dims());",
          "1697:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1722:         c->set_output(0, c->UnknownShape());",
          "1723:         return Status::OK();",
          "1724:       }",
          "1726:       int64_t size_val;",
          "1727:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1730:       if (size_tensor->dims() != 0) {",
          "1731:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1732:                                        size_tensor->dims());",
          "1733:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1763:         c->set_output(0, c->UnknownShape());",
          "1764:         return Status::OK();",
          "1765:       }",
          "1767:       int64_t size_val;",
          "1768:       DataType dtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1775:       if (size_tensor->dims() != 0) {",
          "1776:         return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",",
          "1777:                                        size_tensor->dims());",
          "1778:       }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/bincount_op_test.py||tensorflow/python/kernel_tests/bincount_op_test.py": [
          "File: tensorflow/python/kernel_tests/bincount_op_test.py -> tensorflow/python/kernel_tests/bincount_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:             gen_math_ops.dense_bincount(",
          "349:                 input=[[[1, 2, 3], [0, 3, 2]]], weights=[], size=10))",
          "352: class SparseBincountOpTest(test_util.TensorFlowTestCase,",
          "353:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   @test_util.run_in_graph_and_eager_modes",
          "352:   def test_size_is_not_scalar(self):  # b/206619828",
          "353:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "354:                                 \"Shape must be rank 0 but is rank 1\"):",
          "355:       self.evaluate(",
          "356:           gen_math_ops.dense_bincount(",
          "357:               input=[0], size=[1, 1], weights=[3], binary_output=False))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:                 weights=[],",
          "516:                 binary_output=True)))",
          "519: class RaggedBincountOpTest(test_util.TensorFlowTestCase,",
          "520:                            parameterized.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:   @test_util.run_in_graph_and_eager_modes",
          "527:   def test_size_is_not_scalar(self):  # b/206619828",
          "528:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "529:                                 \"Shape must be rank 0 but is rank 1\"):",
          "530:       self.evaluate(",
          "531:           gen_math_ops.sparse_bincount(",
          "532:               indices=[[0], [1]],",
          "533:               values=[0, 0],",
          "534:               dense_shape=[1, 1],",
          "535:               size=[1, 1],",
          "536:               weights=[0, 0],",
          "537:               binary_output=False))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "654:                 size=size,",
          "655:                 binary_output=True)))",
          "658: if __name__ == \"__main__\":",
          "659:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678:   @test_util.run_in_graph_and_eager_modes",
          "679:   def test_size_is_not_scalar(self):  # b/206619828",
          "680:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "681:                                 \"Shape must be rank 0 but is rank 1\"):",
          "682:       self.evaluate(",
          "683:           gen_math_ops.ragged_bincount(",
          "684:               splits=[0, 0, 1],",
          "685:               values=[1],",
          "686:               size=[1, 1],",
          "687:               weights=[0, 0, 0],",
          "688:               binary_output=False,",
          "689:               name=None))",
          "",
          "---------------"
        ]
      }
    }
  ]
}