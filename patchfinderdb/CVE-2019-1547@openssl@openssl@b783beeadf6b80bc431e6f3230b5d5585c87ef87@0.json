{
  "cve_id": "CVE-2019-1547",
  "cve_desc": "Normally in OpenSSL EC groups always have a co-factor present and this is used in side channel resistant code paths. However, in some cases, it is possible to construct a group using explicit parameters (instead of using a named curve). In those cases it is possible that such a group does not have the cofactor present. This can occur even where all the parameters match a known named curve. If such a curve is used then OpenSSL falls back to non-side channel resistant code paths which may result in full key recovery during an ECDSA signature operation. In order to be vulnerable an attacker would have to have the ability to time the creation of a large number of signatures where explicit parameters with no co-factor present are in use by an application using libcrypto. For the avoidance of doubt libssl is not vulnerable because explicit parameters are never used. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
  "repo": "openssl/openssl",
  "patch_hash": "b783beeadf6b80bc431e6f3230b5d5585c87ef87",
  "patch_info": {
    "commit_hash": "b783beeadf6b80bc431e6f3230b5d5585c87ef87",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b783beeadf6b80bc431e6f3230b5d5585c87ef87",
    "files": [
      "crypto/ec/ec_lib.c"
    ],
    "message": "[crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n\nThe cofactor argument to EC_GROUP_set_generator is optional, and SCA mitigations for ECC currently use it. So the library currently falls back to very old SCA-vulnerable code if the cofactor is not present.\n\nThis PR allows EC_GROUP_set_generator to compute the cofactor for all curves of cryptographic interest. Steering scalar multiplication to more SCA-robust code.\n\nThis issue affects persisted private keys in explicit parameter form, where the (optional) cofactor field is zero or absent.\n\nIt also affects curves not built-in to the library, but constructed programatically with explicit parameters, then calling EC_GROUP_set_generator with a nonsensical value (NULL, zero).\n\nThe very old scalar multiplication code is known to be vulnerable to local uarch attacks, outside of the OpenSSL threat model. New results suggest the code path is also vulnerable to traditional wall clock timing attacks.\n\nCVE-2019-1547\n\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9827)",
    "before_after_code_files": [
      "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
    ]
  },
  "patch_diff": {
    "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
      "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275: static int ec_precompute_mont_data(EC_GROUP *);",
      "277: int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,",
      "278:                            const BIGNUM *order, const BIGNUM *cofactor)",
      "279: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "290: static int ec_guess_cofactor(EC_GROUP *group) {",
      "291:     int ret = 0;",
      "292:     BN_CTX *ctx = NULL;",
      "293:     BIGNUM *q = NULL;",
      "299:     if (BN_num_bits(group->order) <= (BN_num_bits(group->field) + 1) / 2 + 3) {",
      "301:         BN_zero(group->cofactor);",
      "303:         return 1;",
      "304:     }",
      "306:     if ((ctx = BN_CTX_new_ex(group->libctx)) == NULL)",
      "307:         return 0;",
      "309:     BN_CTX_start(ctx);",
      "310:     if ((q = BN_CTX_get(ctx)) == NULL)",
      "311:         goto err;",
      "314:     if (group->meth->field_type == NID_X9_62_characteristic_two_field) {",
      "315:         BN_zero(q);",
      "316:         if (!BN_set_bit(q, BN_num_bits(group->field) - 1))",
      "317:             goto err;",
      "318:     } else {",
      "319:         if (!BN_copy(q, group->field))",
      "320:             goto err;",
      "321:     }",
      "327:         || !BN_add(group->cofactor, group->cofactor, BN_value_one())",
      "329:         || !BN_div(group->cofactor, NULL, group->cofactor, group->order, ctx))",
      "330:         goto err;",
      "331:     ret = 1;",
      "332:  err:",
      "333:     BN_CTX_end(ctx);",
      "334:     BN_CTX_free(ctx);",
      "335:     return ret;",
      "336: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "282:         return 0;",
      "283:     }",
      "285:     if (group->generator == NULL) {",
      "286:         group->generator = EC_POINT_new(group);",
      "287:         if (group->generator == NULL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "347:     if (group->field == NULL || BN_is_zero(group->field)",
      "348:         || BN_is_negative(group->field)) {",
      "349:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_FIELD);",
      "350:         return 0;",
      "351:     }",
      "358:     if (order == NULL || BN_is_zero(order) || BN_is_negative(order)",
      "359:         || BN_num_bits(order) > BN_num_bits(group->field) + 1) {",
      "360:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_GROUP_ORDER);",
      "361:         return 0;",
      "362:     }",
      "369:     if (cofactor != NULL && BN_is_negative(cofactor)) {",
      "370:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_UNKNOWN_COFACTOR);",
      "371:         return 0;",
      "372:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "290:     if (!EC_POINT_copy(group->generator, generator))",
      "291:         return 0;",
      "302:         if (!BN_copy(group->cofactor, cofactor))",
      "303:             return 0;",
      "305:         BN_zero(group->cofactor);",
      "306:     }",
      "",
      "[Removed Lines]",
      "293:     if (order != NULL) {",
      "294:         if (!BN_copy(group->order, order))",
      "295:             return 0;",
      "296:     } else {",
      "297:         BN_zero(group->order);",
      "298:     }",
      "301:     if (cofactor != NULL) {",
      "304:     } else {",
      "",
      "[Added Lines]",
      "382:     if (!BN_copy(group->order, order))",
      "383:         return 0;",
      "386:     if (cofactor != NULL && !BN_is_zero(cofactor)) {",
      "389:     } else if (!ec_guess_cofactor(group)) {",
      "391:         return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21c856b75d81eff61aa63b4f036bb64a85bf6d46",
      "candidate_info": {
        "commit_hash": "21c856b75d81eff61aa63b4f036bb64a85bf6d46",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/21c856b75d81eff61aa63b4f036bb64a85bf6d46",
        "files": [
          "CHANGES",
          "crypto/ec/ec.h",
          "crypto/ec/ec_err.c",
          "crypto/ec/ec_lib.c"
        ],
        "message": "[crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n\nThe cofactor argument to EC_GROUP_set_generator is optional, and SCA\nmitigations for ECC currently use it. So the library currently falls\nback to very old SCA-vulnerable code if the cofactor is not present.\n\nThis PR allows EC_GROUP_set_generator to compute the cofactor for all\ncurves of cryptographic interest. Steering scalar multiplication to more\nSCA-robust code.\n\nThis issue affects persisted private keys in explicit parameter form,\nwhere the (optional) cofactor field is zero or absent.\n\nIt also affects curves not built-in to the library, but constructed\nprogramatically with explicit parameters, then calling\nEC_GROUP_set_generator with a nonsensical value (NULL, zero).\n\nThe very old scalar multiplication code is known to be vulnerable to\nlocal uarch attacks, outside of the OpenSSL threat model. New results\nsuggest the code path is also vulnerable to traditional wall clock\ntiming attacks.\n\nCVE-2019-1547\n\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9799)",
        "before_after_code_files": [
          "crypto/ec/ec.h||crypto/ec/ec.h",
          "crypto/ec/ec_err.c||crypto/ec/ec_err.c",
          "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ],
          "candidate": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec.h||crypto/ec/ec.h": [
          "File: crypto/ec/ec.h -> crypto/ec/ec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270: # define EC_R_SLOT_FULL                                   108",
          "1271: # define EC_R_UNDEFINED_GENERATOR                         113",
          "1272: # define EC_R_UNDEFINED_ORDER                             128",
          "1273: # define EC_R_UNKNOWN_GROUP                               129",
          "1274: # define EC_R_UNKNOWN_ORDER                               114",
          "1275: # define EC_R_UNSUPPORTED_FIELD                           131",
          "1276: # define EC_R_WRONG_CURVE_PARAMETERS                      145",
          "1277: # define EC_R_WRONG_ORDER                                 130",
          "1280: }",
          "1282: #endif",
          "",
          "[Removed Lines]",
          "1279: #ifdef  __cplusplus",
          "1281: #endif",
          "",
          "[Added Lines]",
          "1274: # define EC_R_UNKNOWN_COFACTOR                            152",
          "1281: # ifdef  __cplusplus",
          "1283: # endif",
          "",
          "---------------"
        ],
        "crypto/ec/ec_err.c||crypto/ec/ec_err.c": [
          "File: crypto/ec/ec_err.c -> crypto/ec/ec_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:     {ERR_REASON(EC_R_SLOT_FULL), \"slot full\"},",
          "311:     {ERR_REASON(EC_R_UNDEFINED_GENERATOR), \"undefined generator\"},",
          "312:     {ERR_REASON(EC_R_UNDEFINED_ORDER), \"undefined order\"},",
          "313:     {ERR_REASON(EC_R_UNKNOWN_GROUP), \"unknown group\"},",
          "314:     {ERR_REASON(EC_R_UNKNOWN_ORDER), \"unknown order\"},",
          "315:     {ERR_REASON(EC_R_UNSUPPORTED_FIELD), \"unsupported field\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:     {ERR_REASON(EC_R_UNKNOWN_COFACTOR), \"unknown cofactor\"},",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
          "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:     return meth->field_type;",
          "295: }",
          "297: int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,",
          "298:                            const BIGNUM *order, const BIGNUM *cofactor)",
          "299: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: static int ec_guess_cofactor(EC_GROUP *group) {",
          "311:     int ret = 0;",
          "312:     BN_CTX *ctx = NULL;",
          "313:     BIGNUM *q = NULL;",
          "319:     if (BN_num_bits(&group->order) <= (BN_num_bits(&group->field) + 1) / 2 + 3) {",
          "321:         BN_zero(&group->cofactor);",
          "323:         return 1;",
          "324:     }",
          "326:     if ((ctx = BN_CTX_new()) == NULL)",
          "327:         return 0;",
          "329:     BN_CTX_start(ctx);",
          "330:     if ((q = BN_CTX_get(ctx)) == NULL)",
          "331:         goto err;",
          "334:     if (group->meth->field_type == NID_X9_62_characteristic_two_field) {",
          "335:         BN_zero(q);",
          "336:         if (!BN_set_bit(q, BN_num_bits(&group->field) - 1))",
          "337:             goto err;",
          "338:     } else {",
          "339:         if (!BN_copy(q, &group->field))",
          "340:             goto err;",
          "341:     }",
          "347:         || !BN_add(&group->cofactor, &group->cofactor, BN_value_one())",
          "349:         || !BN_div(&group->cofactor, NULL, &group->cofactor, &group->order, ctx))",
          "350:         goto err;",
          "351:     ret = 1;",
          "352:  err:",
          "353:     BN_CTX_end(ctx);",
          "354:     BN_CTX_free(ctx);",
          "355:     return ret;",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         return 0;",
          "303:     }",
          "305:     if (group->generator == NULL) {",
          "306:         group->generator = EC_POINT_new(group);",
          "307:         if (group->generator == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     if (BN_is_zero(&group->field) || BN_is_negative(&group->field)) {",
          "368:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_FIELD);",
          "369:         return 0;",
          "370:     }",
          "377:     if (order == NULL || BN_is_zero(order) || BN_is_negative(order)",
          "378:         || BN_num_bits(order) > BN_num_bits(&group->field) + 1) {",
          "379:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_GROUP_ORDER);",
          "380:         return 0;",
          "381:     }",
          "388:     if (cofactor != NULL && BN_is_negative(cofactor)) {",
          "389:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_UNKNOWN_COFACTOR);",
          "390:         return 0;",
          "391:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:     if (!EC_POINT_copy(group->generator, generator))",
          "311:         return 0;",
          "320:         if (!BN_copy(&group->cofactor, cofactor))",
          "321:             return 0;",
          "323:         BN_zero(&group->cofactor);",
          "",
          "[Removed Lines]",
          "313:     if (order != NULL) {",
          "314:         if (!BN_copy(&group->order, order))",
          "315:             return 0;",
          "316:     } else",
          "317:         BN_zero(&group->order);",
          "319:     if (cofactor != NULL) {",
          "322:     } else",
          "",
          "[Added Lines]",
          "401:     if (!BN_copy(&group->order, order))",
          "402:         return 0;",
          "405:     if (cofactor != NULL && !BN_is_zero(cofactor)) {",
          "408:     } else if (!ec_guess_cofactor(group)) {",
          "410:         return 0;",
          "411:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30c22fa8b1d840036b8e203585738df62a03cec8",
      "candidate_info": {
        "commit_hash": "30c22fa8b1d840036b8e203585738df62a03cec8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/30c22fa8b1d840036b8e203585738df62a03cec8",
        "files": [
          "crypto/ec/ec_lib.c"
        ],
        "message": "[crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n\nThe cofactor argument to EC_GROUP_set_generator is optional, and SCA\nmitigations for ECC currently use it. So the library currently falls\nback to very old SCA-vulnerable code if the cofactor is not present.\n\nThis PR allows EC_GROUP_set_generator to compute the cofactor for all\ncurves of cryptographic interest. Steering scalar multiplication to more\nSCA-robust code.\n\nThis issue affects persisted private keys in explicit parameter form,\nwhere the (optional) cofactor field is zero or absent.\n\nIt also affects curves not built-in to the library, but constructed\nprogramatically with explicit parameters, then calling\nEC_GROUP_set_generator with a nonsensical value (NULL, zero).\n\nThe very old scalar multiplication code is known to be vulnerable to\nlocal uarch attacks, outside of the OpenSSL threat model. New results\nsuggest the code path is also vulnerable to traditional wall clock\ntiming attacks.\n\nCVE-2019-1547\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Tomas Mraz <tmraz@fedoraproject.org>\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\n(Merged from https://github.com/openssl/openssl/pull/9781)",
        "before_after_code_files": [
          "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ],
          "candidate": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
          "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: static int ec_precompute_mont_data(EC_GROUP *);",
          "268: int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,",
          "269:                            const BIGNUM *order, const BIGNUM *cofactor)",
          "270: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: static int ec_guess_cofactor(EC_GROUP *group) {",
          "282:     int ret = 0;",
          "283:     BN_CTX *ctx = NULL;",
          "284:     BIGNUM *q = NULL;",
          "290:     if (BN_num_bits(group->order) <= (BN_num_bits(group->field) + 1) / 2 + 3) {",
          "292:         BN_zero(group->cofactor);",
          "294:         return 1;",
          "295:     }",
          "297:     if ((ctx = BN_CTX_new()) == NULL)",
          "298:         return 0;",
          "300:     BN_CTX_start(ctx);",
          "301:     if ((q = BN_CTX_get(ctx)) == NULL)",
          "302:         goto err;",
          "305:     if (group->meth->field_type == NID_X9_62_characteristic_two_field) {",
          "306:         BN_zero(q);",
          "307:         if (!BN_set_bit(q, BN_num_bits(group->field) - 1))",
          "308:             goto err;",
          "309:     } else {",
          "310:         if (!BN_copy(q, group->field))",
          "311:             goto err;",
          "312:     }",
          "318:         || !BN_add(group->cofactor, group->cofactor, BN_value_one())",
          "320:         || !BN_div(group->cofactor, NULL, group->cofactor, group->order, ctx))",
          "321:         goto err;",
          "322:     ret = 1;",
          "323:  err:",
          "324:     BN_CTX_end(ctx);",
          "325:     BN_CTX_free(ctx);",
          "326:     return ret;",
          "327: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         return 0;",
          "274:     }",
          "276:     if (group->generator == NULL) {",
          "277:         group->generator = EC_POINT_new(group);",
          "278:         if (group->generator == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     if (group->field == NULL || BN_is_zero(group->field)",
          "339:         || BN_is_negative(group->field)) {",
          "340:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_FIELD);",
          "341:         return 0;",
          "342:     }",
          "349:     if (order == NULL || BN_is_zero(order) || BN_is_negative(order)",
          "350:         || BN_num_bits(order) > BN_num_bits(group->field) + 1) {",
          "351:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_GROUP_ORDER);",
          "352:         return 0;",
          "353:     }",
          "360:     if (cofactor != NULL && BN_is_negative(cofactor)) {",
          "361:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_UNKNOWN_COFACTOR);",
          "362:         return 0;",
          "363:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:     if (!EC_POINT_copy(group->generator, generator))",
          "282:         return 0;",
          "291:         if (!BN_copy(group->cofactor, cofactor))",
          "292:             return 0;",
          "294:         BN_zero(group->cofactor);",
          "",
          "[Removed Lines]",
          "284:     if (order != NULL) {",
          "285:         if (!BN_copy(group->order, order))",
          "286:             return 0;",
          "287:     } else",
          "288:         BN_zero(group->order);",
          "290:     if (cofactor != NULL) {",
          "293:     } else",
          "",
          "[Added Lines]",
          "373:     if (!BN_copy(group->order, order))",
          "374:         return 0;",
          "377:     if (cofactor != NULL && !BN_is_zero(cofactor)) {",
          "380:     } else if (!ec_guess_cofactor(group)) {",
          "382:         return 0;",
          "383:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c1709c2da5414f5b6133d00a03fc8c5bf996c7a",
      "candidate_info": {
        "commit_hash": "7c1709c2da5414f5b6133d00a03fc8c5bf996c7a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7c1709c2da5414f5b6133d00a03fc8c5bf996c7a",
        "files": [
          "CHANGES",
          "crypto/ec/ec_err.c",
          "crypto/ec/ec_lib.c",
          "include/openssl/ec.h"
        ],
        "message": "[crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n\nThe cofactor argument to EC_GROUP_set_generator is optional, and SCA\nmitigations for ECC currently use it. So the library currently falls\nback to very old SCA-vulnerable code if the cofactor is not present.\n\nThis PR allows EC_GROUP_set_generator to compute the cofactor for all\ncurves of cryptographic interest. Steering scalar multiplication to more\nSCA-robust code.\n\nThis issue affects persisted private keys in explicit parameter form,\nwhere the (optional) cofactor field is zero or absent.\n\nIt also affects curves not built-in to the library, but constructed\nprogramatically with explicit parameters, then calling\nEC_GROUP_set_generator with a nonsensical value (NULL, zero).\n\nThe very old scalar multiplication code is known to be vulnerable to\nlocal uarch attacks, outside of the OpenSSL threat model. New results\nsuggest the code path is also vulnerable to traditional wall clock\ntiming attacks.\n\nCVE-2019-1547\n\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9795)",
        "before_after_code_files": [
          "crypto/ec/ec_err.c||crypto/ec/ec_err.c",
          "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c",
          "include/openssl/ec.h||include/openssl/ec.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ],
          "candidate": [
            "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec_err.c||crypto/ec/ec_err.c": [
          "File: crypto/ec/ec_err.c -> crypto/ec/ec_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     {ERR_REASON(EC_R_SLOT_FULL), \"slot full\"},",
          "274:     {ERR_REASON(EC_R_UNDEFINED_GENERATOR), \"undefined generator\"},",
          "275:     {ERR_REASON(EC_R_UNDEFINED_ORDER), \"undefined order\"},",
          "276:     {ERR_REASON(EC_R_UNKNOWN_GROUP), \"unknown group\"},",
          "277:     {ERR_REASON(EC_R_UNKNOWN_ORDER), \"unknown order\"},",
          "278:     {ERR_REASON(EC_R_UNSUPPORTED_FIELD), \"unsupported field\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:     {ERR_REASON(EC_R_UNKNOWN_COFACTOR), \"unknown cofactor\"},",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
          "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return meth->field_type;",
          "258: }",
          "260: int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,",
          "261:                            const BIGNUM *order, const BIGNUM *cofactor)",
          "262: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: static int ec_guess_cofactor(EC_GROUP *group) {",
          "274:     int ret = 0;",
          "275:     BN_CTX *ctx = NULL;",
          "276:     BIGNUM *q = NULL;",
          "282:     if (BN_num_bits(group->order) <= (BN_num_bits(group->field) + 1) / 2 + 3) {",
          "284:         BN_zero(group->cofactor);",
          "286:         return 1;",
          "287:     }",
          "289:     if ((ctx = BN_CTX_new()) == NULL)",
          "290:         return 0;",
          "292:     BN_CTX_start(ctx);",
          "293:     if ((q = BN_CTX_get(ctx)) == NULL)",
          "294:         goto err;",
          "297:     if (group->meth->field_type == NID_X9_62_characteristic_two_field) {",
          "298:         BN_zero(q);",
          "299:         if (!BN_set_bit(q, BN_num_bits(group->field) - 1))",
          "300:             goto err;",
          "301:     } else {",
          "302:         if (!BN_copy(q, group->field))",
          "303:             goto err;",
          "304:     }",
          "310:         || !BN_add(group->cofactor, group->cofactor, BN_value_one())",
          "312:         || !BN_div(group->cofactor, NULL, group->cofactor, group->order, ctx))",
          "313:         goto err;",
          "314:     ret = 1;",
          "315:  err:",
          "316:     BN_CTX_end(ctx);",
          "317:     BN_CTX_free(ctx);",
          "318:     return ret;",
          "319: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:         return 0;",
          "266:     }",
          "268:     if (group->generator == NULL) {",
          "269:         group->generator = EC_POINT_new(group);",
          "270:         if (group->generator == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:     if (group->field == NULL || BN_is_zero(group->field)",
          "331:         || BN_is_negative(group->field)) {",
          "332:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_FIELD);",
          "333:         return 0;",
          "334:     }",
          "341:     if (order == NULL || BN_is_zero(order) || BN_is_negative(order)",
          "342:         || BN_num_bits(order) > BN_num_bits(group->field) + 1) {",
          "343:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_INVALID_GROUP_ORDER);",
          "344:         return 0;",
          "345:     }",
          "352:     if (cofactor != NULL && BN_is_negative(cofactor)) {",
          "353:         ECerr(EC_F_EC_GROUP_SET_GENERATOR, EC_R_UNKNOWN_COFACTOR);",
          "354:         return 0;",
          "355:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:     if (!EC_POINT_copy(group->generator, generator))",
          "274:         return 0;",
          "283:         if (!BN_copy(group->cofactor, cofactor))",
          "284:             return 0;",
          "286:         BN_zero(group->cofactor);",
          "",
          "[Removed Lines]",
          "276:     if (order != NULL) {",
          "277:         if (!BN_copy(group->order, order))",
          "278:             return 0;",
          "279:     } else",
          "280:         BN_zero(group->order);",
          "282:     if (cofactor != NULL) {",
          "285:     } else",
          "",
          "[Added Lines]",
          "365:     if (!BN_copy(group->order, order))",
          "366:         return 0;",
          "369:     if (cofactor != NULL && !BN_is_zero(cofactor)) {",
          "372:     } else if (!ec_guess_cofactor(group)) {",
          "374:         return 0;",
          "375:     }",
          "",
          "---------------"
        ],
        "include/openssl/ec.h||include/openssl/ec.h": [
          "File: include/openssl/ec.h -> include/openssl/ec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1568: # define EC_R_SLOT_FULL                                   108",
          "1569: # define EC_R_UNDEFINED_GENERATOR                         113",
          "1570: # define EC_R_UNDEFINED_ORDER                             128",
          "1571: # define EC_R_UNKNOWN_GROUP                               129",
          "1572: # define EC_R_UNKNOWN_ORDER                               114",
          "1573: # define EC_R_UNSUPPORTED_FIELD                           131",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1571: # define EC_R_UNKNOWN_COFACTOR                            164",
          "",
          "---------------"
        ]
      }
    }
  ]
}