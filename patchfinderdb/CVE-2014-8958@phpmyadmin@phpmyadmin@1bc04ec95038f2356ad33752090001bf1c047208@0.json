{
  "cve_id": "CVE-2014-8958",
  "cve_desc": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.6, 4.1.x before 4.1.14.7, and 4.2.x before 4.2.12 allow remote authenticated users to inject arbitrary web script or HTML via a crafted (1) database, (2) table, or (3) column name that is improperly handled during rendering of the table browse page; a crafted ENUM value that is improperly handled during rendering of the (4) table print view or (5) zoom search page; or (6) a crafted pma_fontsize cookie that is improperly handled during rendering of the home page.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "1bc04ec95038f2356ad33752090001bf1c047208",
  "patch_info": {
    "commit_hash": "1bc04ec95038f2356ad33752090001bf1c047208",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/1bc04ec95038f2356ad33752090001bf1c047208",
    "files": [
      "ChangeLog",
      "tbl_zoom_select.php"
    ],
    "message": "bug #4579 [security] XSS vulnerability in zoom search page\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
    "before_after_code_files": [
      "tbl_zoom_select.php||tbl_zoom_select.php"
    ]
  },
  "patch_diff": {
    "tbl_zoom_select.php||tbl_zoom_select.php": [
      "File: tbl_zoom_select.php -> tbl_zoom_select.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:     }",
      "82:     $key = array_search($field, $table_search->getColumnNames());",
      "83:     $properties = $table_search->getColumnProperties($_REQUEST['it'], $key);",
      "85:     $response->addJSON('field_collation', $properties['collation']);",
      "86:     $response->addJSON('field_operators', $properties['func']);",
      "87:     $response->addJSON('field_value', $properties['value']);",
      "",
      "[Removed Lines]",
      "84:     $response->addJSON('field_type', $properties['type']);",
      "",
      "[Added Lines]",
      "84:     $response->addJSON('field_type', htmlspecialchars($properties['type']));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66361530713fcf99b9e090b82ccd016dc3c287b2",
      "candidate_info": {
        "commit_hash": "66361530713fcf99b9e090b82ccd016dc3c287b2",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/66361530713fcf99b9e090b82ccd016dc3c287b2",
        "files": [
          "db_structure.php",
          "libraries/DBQbe.class.php",
          "libraries/DatabaseInterface.class.php",
          "libraries/DisplayResults.class.php",
          "libraries/Menu.class.php",
          "libraries/Table.class.php",
          "libraries/TableSearch.class.php",
          "libraries/Util.class.php",
          "libraries/controllers/TableRelationController.class.php",
          "libraries/controllers/TableSearchController.class.php",
          "libraries/db_table_exists.lib.php",
          "libraries/display_export.lib.php",
          "libraries/export.lib.php",
          "libraries/import.lib.php",
          "libraries/operations.lib.php",
          "libraries/plugins/export/ExportSql.class.php",
          "libraries/plugins/export/ExportXml.class.php",
          "libraries/relation.lib.php",
          "libraries/sql.lib.php",
          "libraries/structure.lib.php",
          "libraries/tbl_info.inc.php",
          "libraries/tracking.lib.php",
          "tbl_find_replace.php",
          "tbl_operations.php",
          "tbl_replace.php",
          "tbl_select.php",
          "tbl_tracking.php",
          "tbl_zoom_select.php",
          "test/classes/PMA_Table_test.php",
          "test/classes/plugin/export/PMA_ExportSql_test.php",
          "test/libraries/PMA_display_export_test.php"
        ],
        "message": "Resolve conflicts from upstream\n\nSigned-off-by: Jason <jason.daurus@gmail.com>",
        "before_after_code_files": [
          "db_structure.php||db_structure.php",
          "libraries/DBQbe.class.php||libraries/DBQbe.class.php",
          "libraries/DatabaseInterface.class.php||libraries/DatabaseInterface.class.php",
          "libraries/DisplayResults.class.php||libraries/DisplayResults.class.php",
          "libraries/Menu.class.php||libraries/Menu.class.php",
          "libraries/Table.class.php||libraries/Table.class.php",
          "libraries/Util.class.php||libraries/Util.class.php",
          "libraries/controllers/TableRelationController.class.php||libraries/controllers/TableRelationController.class.php",
          "libraries/TableSearch.class.php||libraries/controllers/TableSearchController.class.php",
          "libraries/db_table_exists.lib.php||libraries/db_table_exists.lib.php",
          "libraries/display_export.lib.php||libraries/display_export.lib.php",
          "libraries/export.lib.php||libraries/export.lib.php",
          "libraries/import.lib.php||libraries/import.lib.php",
          "libraries/operations.lib.php||libraries/operations.lib.php",
          "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php",
          "libraries/plugins/export/ExportXml.class.php||libraries/plugins/export/ExportXml.class.php",
          "libraries/relation.lib.php||libraries/relation.lib.php",
          "libraries/sql.lib.php||libraries/sql.lib.php",
          "libraries/structure.lib.php||libraries/structure.lib.php",
          "libraries/tbl_info.inc.php||libraries/tbl_info.inc.php",
          "libraries/tracking.lib.php||libraries/tracking.lib.php",
          "tbl_find_replace.php||tbl_find_replace.php",
          "tbl_operations.php||tbl_operations.php",
          "tbl_replace.php||tbl_replace.php",
          "tbl_select.php||tbl_select.php",
          "tbl_tracking.php||tbl_tracking.php",
          "tbl_zoom_select.php||tbl_zoom_select.php",
          "test/classes/PMA_Table_test.php||test/classes/PMA_Table_test.php",
          "test/classes/plugin/export/PMA_ExportSql_test.php||test/classes/plugin/export/PMA_ExportSql_test.php",
          "test/libraries/PMA_display_export_test.php||test/libraries/PMA_display_export_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "db_structure.php||db_structure.php": [
          "File: db_structure.php -> db_structure.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:                 $is_show_stats, $table_is_view, $sum_size, $overhead_size",
          "171:             );",
          "174:         $sum_entries += $current_table['TABLE_ROWS'];",
          "175:     }",
          "",
          "[Removed Lines]",
          "173:     if (! PMA_Table::isMerge($db, $current_table['TABLE_NAME'])) {",
          "",
          "[Added Lines]",
          "173:     $_table = new PMA_Table($current_table['TABLE_NAME'], $db);",
          "174:     if (! $_table->isMerge()) {",
          "",
          "---------------"
        ],
        "libraries/DBQbe.class.php||libraries/DBQbe.class.php": [
          "File: libraries/DBQbe.class.php -> libraries/DBQbe.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1471:         $csize = array();",
          "1472:         foreach ($candidate_columns as $table) {",
          "1473:             if ($checked_tables[$table] != 1) {",
          "1479:                 $checked_tables[$table] = 1;",
          "1480:             }",
          "1481:             $csize[$table] = $tsize[$table];",
          "",
          "[Removed Lines]",
          "1474:                 $tsize[$table] = PMA_Table::countRecords(",
          "1475:                     $this->_db,",
          "1476:                     $table,",
          "1477:                     false",
          "1478:                 );",
          "",
          "[Added Lines]",
          "1474:                 $_table = new PMA_Table($table, $this->_db);",
          "1475:                 $tsize[$table] = $_table->countRecords();",
          "",
          "---------------"
        ],
        "libraries/DatabaseInterface.class.php||libraries/DatabaseInterface.class.php": [
          "File: libraries/DatabaseInterface.class.php -> libraries/DatabaseInterface.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: require_once './libraries/logging.lib.php';",
          "13: require_once './libraries/Index.class.php';",
          "14: require_once './libraries/SystemDatabase.class.php';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: require_once './libraries/util.lib.php';",
          "17: use PMA\\Util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     private $_extension;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     private $_table_cache;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     function __construct($ext)",
          "51:     {",
          "52:         $this->_extension = $ext;",
          "53:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         $this->_table_cache = array();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:         return $res;",
          "88:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     public function getCachedTableContent($contentPath, $default = null) {",
          "107:         return Util\\get($this->_table_cache, $contentPath, $default);",
          "108:     }",
          "116:     public function cacheTableContent($contentPath, $value) {",
          "117:         $loc = &$this->_table_cache;",
          "119:         if (!isset($contentPath)) {",
          "120:             $loc = $value;",
          "121:             return;",
          "122:         }",
          "124:         $keys = explode('.', $contentPath);",
          "126:         while (count($keys) > 1) {",
          "127:             $key = array_shift($keys);",
          "132:             if (!isset($loc[$key]) || !is_array($loc[$key])) {",
          "133:                 $loc[$key] = array();",
          "134:             }",
          "135:             $loc = &$loc[$key];",
          "136:         }",
          "138:         $loc[array_shift($keys)] = $value;",
          "139:     }",
          "144:     public function clearTableCache() {",
          "145:         $this->_table_cache = array();",
          "146:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:         foreach ($tables as $one_database => $its_tables) {",
          "113:                 if ($table",
          "115:                 ) {",
          "117:                 }",
          "120:             } else {",
          "122:             }",
          "123:         }",
          "124:     }",
          "",
          "[Removed Lines]",
          "110:             if (isset(PMA_Table::$cache[$one_database])) {",
          "114:                     && isset(PMA_Table::$cache[$one_database][$table])",
          "116:                     unset(PMA_Table::$cache[$one_database][$table]);",
          "118:                 PMA_Table::$cache[$one_database]",
          "119:                     = PMA_Table::$cache[$one_database] + $tables[$one_database];",
          "121:                 PMA_Table::$cache[$one_database] = $tables[$one_database];",
          "",
          "[Added Lines]",
          "167:             if (isset($this->_table_cache[$one_database])) {",
          "171:                     && isset($this->_table_cache[$one_database][$table])",
          "173:                     unset($this->_table_cache[$one_database][$table]);",
          "175:                 $this->_table_cache[$one_database]",
          "176:                     = $this->_table_cache[$one_database] + $tables[$one_database];",
          "178:                 $this->_table_cache[$one_database] = $tables[$one_database];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "874:         foreach ($tables_full as $table=>$tmp) {",
          "877:                 $views[] = $table;",
          "878:             }",
          "",
          "[Removed Lines]",
          "876:             if (PMA_Table::isView($db, $table)) {",
          "",
          "[Added Lines]",
          "933:             $_table = $this->getTable($db, $table);",
          "934:             if ($_table->isView($db, $table)) {",
          "",
          "---------------"
        ],
        "libraries/DisplayResults.class.php||libraries/DisplayResults.class.php": [
          "File: libraries/DisplayResults.class.php -> libraries/DisplayResults.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:             || ($displayParts['sort_lnk'] == '1'))",
          "626:             && (/*overload*/mb_strlen($db) && !empty($table))",
          "627:         ) {",
          "629:         }",
          "",
          "[Removed Lines]",
          "628:             $the_total   = PMA_Table::countRecords($db, $table);",
          "",
          "[Added Lines]",
          "628:             $the_total = $GLOBALS['dbi']->getTable($db, $table)->countRecords();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:             if (isset($unlim_num_rows)",
          "647:                 && ($unlim_num_rows < 2)",
          "649:             ) {",
          "650:                 $displayParts['sort_lnk'] = (string) '0';",
          "651:             }",
          "",
          "[Removed Lines]",
          "648:                 && ! PMA_Table::isView($db, $table)",
          "",
          "[Added Lines]",
          "646:             $_table = new PMA_Table($table, $db);",
          "649:                 && ! $_table->isView()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1671:         }",
          "1675:             $data_html .= '<input class=\"table_create_time\" type=\"hidden\" value=\"'",
          "1676:                 . PMA_Table::sGetStatusInfo(",
          "1677:                     $this->__get('db'), $this->__get('table'), 'Create_time'",
          "",
          "[Removed Lines]",
          "1674:         if (! PMA_Table::isView($this->__get('db'), $this->__get('table'))) {",
          "",
          "[Added Lines]",
          "1675:         $table = new PMA_Table($this->__get('table'), $this->__get('db'));",
          "1676:         if (! $table->isView()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4650:         }",
          "4653:             && ($total == $GLOBALS['cfg']['MaxExactCountViews'])",
          "4654:         ) {",
          "",
          "[Removed Lines]",
          "4652:         if (PMA_Table::isView($this->__get('db'), $this->__get('table'))",
          "",
          "[Added Lines]",
          "4654:         $table = new PMA_Table($this->__get('table'), $this->__get('db'));",
          "4655:         if ($table->isView()",
          "",
          "---------------"
        ],
        "libraries/Menu.class.php||libraries/Menu.class.php": [
          "File: libraries/Menu.class.php -> libraries/Menu.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     private function _getBreadcrumbs()",
          "166:     {",
          "167:         $retval = '';",
          "169:         $server_info = ! empty($GLOBALS['cfg']['Server']['verbose'])",
          "170:             ? $GLOBALS['cfg']['Server']['verbose']",
          "171:             : $GLOBALS['cfg']['Server']['host'];",
          "",
          "[Removed Lines]",
          "168:         $tbl_is_view = PMA_Table::isView($this->_db, $this->_table);",
          "",
          "[Added Lines]",
          "168:         $table = new PMA_Table($this->_table, $this->_db);",
          "169:         $tbl_is_view = $table->isView();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:     private function _getTableTabs()",
          "299:     {",
          "300:         $db_is_system_schema = $GLOBALS['dbi']->isSystemSchema($this->_db);",
          "302:         $is_superuser = $GLOBALS['dbi']->isSuperuser();",
          "303:         $isCreateOrGrantUser = $GLOBALS['dbi']->isUserType('grant')",
          "304:             || $GLOBALS['dbi']->isUserType('create');",
          "",
          "[Removed Lines]",
          "301:         $tbl_is_view = PMA_Table::isView($this->_db, $this->_table);",
          "",
          "[Added Lines]",
          "302:         $table = new PMA_Table($this->_table, $this->_db);",
          "303:         $tbl_is_view = $table->isView();",
          "",
          "---------------"
        ],
        "libraries/Table.class.php||libraries/Table.class.php": [
          "File: libraries/Table.class.php -> libraries/Table.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     const PROP_COLUMN_ORDER = 'col_order';",
          "25:     const PROP_COLUMN_VISIB = 'col_visib';",
          "",
          "[Removed Lines]",
          "27:     static public $cache = array();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     var $type = '';",
          "",
          "[Removed Lines]",
          "42:     var $settings = array();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         if (empty($dbi)) {",
          "84:             $dbi = $GLOBALS['dbi'];",
          "85:         }",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:         $this->dbi = $dbi;",
          "87:         $this->setName($table_name);",
          "88:         $this->setDbName($db_name);",
          "",
          "[Added Lines]",
          "79:         $this->_dbi = $dbi;",
          "80:         $this->_name = $table_name;",
          "81:         $this->_db_name = $db_name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:         return end($this->messages);",
          "120:     }",
          "",
          "[Removed Lines]",
          "129:     function setName($table_name)",
          "130:     {",
          "131:         $this->name = $table_name;",
          "132:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:         return $this->name;",
          "147:     }",
          "",
          "[Removed Lines]",
          "156:     function setDbName($db_name)",
          "157:     {",
          "158:         $this->db_name = $db_name;",
          "159:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:     {",
          "199:         if (empty($db) || empty($table)) {",
          "200:             return false;",
          "201:         }",
          "205:             || $GLOBALS['cfg']['Server']['DisableIS']",
          "206:         ) {",
          "207:             $type = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_TYPE');",
          "",
          "[Removed Lines]",
          "197:     static public function isView($db = null, $table = null)",
          "204:         if (isset(PMA_Table::$cache[$db][$table])",
          "",
          "[Added Lines]",
          "163:     public function isView()",
          "165:         $db = $this->_db_name;",
          "166:         $table = $this->_name;",
          "172:         if ($GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\") != null",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235:     {",
          "237:             return false;",
          "238:         }",
          "241:             \"SELECT TABLE_NAME",
          "242:             FROM information_schema.VIEWS",
          "245:                 AND IS_UPDATABLE = 'YES'\"",
          "246:         );",
          "247:         return $result ? true : false;",
          "248:     }",
          "271:     {",
          "274:         }",
          "277:     }",
          "",
          "[Removed Lines]",
          "234:     static public function isUpdatableView($db = null, $table = null)",
          "236:         if (empty($db) || empty($table)) {",
          "240:         $result = $GLOBALS['dbi']->fetchResult(",
          "243:             WHERE TABLE_SCHEMA = '\" . PMA_Util::sqlAddSlashes($db) . \"'",
          "244:                 AND TABLE_NAME = '\" . PMA_Util::sqlAddSlashes($table) . \"'",
          "258:     function set($param, $value)",
          "259:     {",
          "260:         $this->settings[$param] = $value;",
          "261:     }",
          "270:     function get($param)",
          "272:         if (isset($this->settings[$param])) {",
          "273:             return $this->settings[$param];",
          "276:         return null;",
          "",
          "[Added Lines]",
          "199:     public function isUpdatableView()",
          "201:         if (empty($this->_db_name) || empty($this->_name)) {",
          "205:         $result = $this->_dbi->fetchResult(",
          "208:             WHERE TABLE_SCHEMA = '\" . PMA_Util::sqlAddSlashes($this->_db_name) . \"'",
          "209:                 AND TABLE_NAME = '\" . PMA_Util::sqlAddSlashes($this->_name) . \"'",
          "221:     public function analyzeStructure()",
          "223:         if (empty($this->_db_name) || empty($this->_name)) {",
          "224:             return false;",
          "227:         $analyzed_sql = array();",
          "228:         if ($this->isView()) {",
          "232:             $analyzed_sql[0] = array();",
          "233:             $analyzed_sql[0]['create_table_fields'] = array();",
          "235:             $results = $this->_dbi->fetchResult(",
          "236:                 \"SELECT COLUMN_NAME, DATA_TYPE",
          "237:                 FROM information_schema.COLUMNS",
          "238:                 WHERE TABLE_SCHEMA = '\" . PMA_Util::sqlAddSlashes($this->_db_name) . \"'",
          "239:                 AND TABLE_NAME = '\" . PMA_Util::sqlAddSlashes($this->_name) . \"'\"",
          "240:             );",
          "242:             foreach ($results as $result) {",
          "243:                 $analyzed_sql[0]['create_table_fields'][$result['COLUMN_NAME']]",
          "244:                     = array(",
          "245:                         'type' => /*overload*/mb_strtoupper($result['DATA_TYPE'])",
          "246:                     );",
          "247:             }",
          "248:         } else {",
          "249:             $show_create_table = $this->_dbi->fetchValue(",
          "250:                 'SHOW CREATE TABLE '",
          "251:                 . PMA_Util::backquote($this->_db_name)",
          "252:                 . '.' . PMA_Util::backquote($this->_name),",
          "253:                 0,",
          "254:                 1",
          "255:             );",
          "256:             $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));",
          "257:         }",
          "258:         return $analyzed_sql;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "291:     {",
          "292:         $engine = null;",
          "295:             $engine = PMA_Table::sGetStatusInfo(",
          "297:             );",
          "298:         }",
          "",
          "[Removed Lines]",
          "290:     static public function isMerge($db = null, $table = null)",
          "294:         if (! empty($db) && ! empty($table)) {",
          "296:                 $db, $table, 'ENGINE', null, true",
          "",
          "[Added Lines]",
          "270:     public function isMerge()",
          "274:         if (! empty($this->_db_name) && ! empty($this->_name)) {",
          "276:                 $this->_db_name, $this->_name, 'ENGINE', null, true",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337:             || $force_read",
          "339:         ) {",
          "340:             $GLOBALS['dbi']->getTablesFull($db, $table);",
          "341:         }",
          "",
          "[Removed Lines]",
          "336:         if (! isset(PMA_Table::$cache[$db][$table])",
          "338:             || count(PMA_Table::$cache[$db][$table]) == 1",
          "343:         if (! isset(PMA_Table::$cache[$db][$table])) {",
          "",
          "[Added Lines]",
          "316:         if ($GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\") == null",
          "318:             || count($GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\")) == 1",
          "323:         if ($GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\") == null) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "348:         }",
          "350:         if (null === $info) {",
          "352:         }",
          "356:             if (! $disable_error) {",
          "357:                 trigger_error(",
          "358:                     __('Unknown table status:') . ' ' . $info,",
          "",
          "[Removed Lines]",
          "351:             return PMA_Table::$cache[$db][$table];",
          "355:         if (!array_key_exists($info, PMA_Table::$cache[$db][$table])) {",
          "",
          "[Added Lines]",
          "331:             return $GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\");",
          "335:         if (!array_key_exists($info, $GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\"))) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "362:             return false;",
          "363:         }",
          "366:     }",
          "",
          "[Removed Lines]",
          "365:         return PMA_Table::$cache[$db][$table][$info];",
          "",
          "[Added Lines]",
          "345:         return $GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}.${info}\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "515:             return $row_count;",
          "516:         }",
          "518:         $row_count = false;",
          "524:         if (! $force_exact) {",
          "527:                 if (isset($tmp_tables[$table])) {",
          "529:                 }",
          "530:             }",
          "533:             } else {",
          "534:                 $row_count = false;",
          "535:             }",
          "536:         }",
          "539:         if (false !== $row_count",
          "540:             && $row_count >= $GLOBALS['cfg']['MaxExactCount']",
          "",
          "[Removed Lines]",
          "510:     static public function countRecords($db, $table, $force_exact = false,",
          "511:         $is_view = null",
          "512:     ) {",
          "513:         if (isset(PMA_Table::$cache[$db][$table]['ExactRows'])) {",
          "514:             $row_count = PMA_Table::$cache[$db][$table]['ExactRows'];",
          "520:         if (null === $is_view) {",
          "521:             $is_view = PMA_Table::isView($db, $table);",
          "522:         }",
          "525:             if (! isset(PMA_Table::$cache[$db][$table]['Rows']) && ! $is_view) {",
          "526:                 $tmp_tables = $GLOBALS['dbi']->getTablesFull($db, $table);",
          "528:                     PMA_Table::$cache[$db][$table] = $tmp_tables[$table];",
          "531:             if (isset(PMA_Table::$cache[$db][$table]['Rows'])) {",
          "532:                 $row_count = PMA_Table::$cache[$db][$table]['Rows'];",
          "",
          "[Added Lines]",
          "487:     public function countRecords($force_exact = false) {",
          "488:         $is_view = $this->isView();",
          "489:         $db = $this->_db_name;",
          "490:         $table = $this->_name;",
          "492:         if ($this->_dbi->getCachedTableContent(\"${db}.${table}.ExactRows\") != null) {",
          "493:             $row_count = $this->_dbi->getCachedTableContent(\"${db}.${table}.ExactRows\");",
          "499:             if (($this->_dbi->getCachedTableContent(\"${db}.${table}.Rows\") == null)",
          "500:                 && !$is_view",
          "501:             ) {",
          "502:                 $tmp_tables = $this->_dbi->getTablesFull($db, $table);",
          "504:                     $this->_dbi->cacheTableContent(\"${db}.${table}\", $tmp_tables[$table]);",
          "507:             if ($this->_dbi->getCachedTableContent(\"${db}.${table}.Rows\") != null) {",
          "508:                 $row_count = $this->_dbi->getCachedTableContent(\"${db}.${table}.Rows\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "548:         if (! $is_view",
          "550:         ) {",
          "552:                 'SELECT COUNT(*) FROM ' . PMA_Util::backquote($db) . '.'",
          "553:                 . PMA_Util::backquote($table)",
          "554:             );",
          "",
          "[Removed Lines]",
          "549:             || (PMA_DRIZZLE && $GLOBALS['dbi']->isSystemSchema($db))",
          "551:             $row_count = $GLOBALS['dbi']->fetchValue(",
          "",
          "[Added Lines]",
          "524:             || (PMA_DRIZZLE && $this->_dbi->isSystemSchema($db))",
          "526:             $row_count = $this->_dbi->fetchValue(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "569:                     'SELECT 1 FROM ' . PMA_Util::backquote($db) . '.'",
          "570:                     . PMA_Util::backquote($table) . ' LIMIT '",
          "571:                     . $GLOBALS['cfg']['MaxExactCountViews'],",
          "572:                     null,",
          "573:                     PMA_DatabaseInterface::QUERY_STORE",
          "574:                 );",
          "578:                 }",
          "579:             }",
          "580:         }",
          "581:         if ($row_count) {",
          "583:         }",
          "585:         return $row_count;",
          "",
          "[Removed Lines]",
          "568:                 $result = $GLOBALS['dbi']->tryQuery(",
          "575:                 if (!$GLOBALS['dbi']->getError()) {",
          "576:                     $row_count = $GLOBALS['dbi']->numRows($result);",
          "577:                     $GLOBALS['dbi']->freeResult($result);",
          "582:             PMA_Table::$cache[$db][$table]['ExactRows'] = $row_count;",
          "",
          "[Added Lines]",
          "543:                 $result = $this->_dbi->tryQuery(",
          "550:                 if (!$this->_dbi->getError()) {",
          "551:                     $row_count = $this->_dbi->numRows($result);",
          "552:                     $this->_dbi->freeResult($result);",
          "557:             $this->_dbi->cacheTableContent(\"${db}.${table}.ExactRows\", $row_count);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1017:             $GLOBALS['sql_query'] = '';",
          "1018:         }",
          "1021:         if (($what == 'data' || $what == 'dataonly')",
          "1023:         ) {",
          "1024:             if (! PMA_DRIZZLE) {",
          "1025:                 $sql_set_mode = \"SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'\";",
          "",
          "[Removed Lines]",
          "1022:             && ! PMA_Table::isView($target_db, $target_table)",
          "",
          "[Added Lines]",
          "995:         $_table = new PMA_Table($target_table, $target_db);",
          "998:             && ! $_table->isView()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1043:             $GLOBALS['dbi']->selectDb($source_db);",
          "1046:                 $sql_drop_query = 'DROP VIEW';",
          "1047:             } else {",
          "1048:                 $sql_drop_query = 'DROP TABLE';",
          "",
          "[Removed Lines]",
          "1045:             if (PMA_Table::isView($source_db, $source_table)) {",
          "",
          "[Added Lines]",
          "1021:             $_source_table = new PMA_Table($source_table, $source_db);",
          "1022:             if ($_source_table->isView()) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1336:         $old_name = $this->getName();",
          "1337:         $old_db = $this->getDbName();",
          "1342:         PMA_REL_renameTable(",
          "",
          "[Removed Lines]",
          "1338:         $this->setName($new_name);",
          "1339:         $this->setDbName($new_db);",
          "",
          "[Added Lines]",
          "1315:         $this->_name = $new_name;",
          "1316:         $this->_db_name = $new_db;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1650:         } elseif ($property == self::PROP_COLUMN_ORDER",
          "1651:             || $property == self::PROP_COLUMN_VISIB",
          "1652:         ) {",
          "1654:                 && isset($this->uiprefs[$property])",
          "1655:             ) {",
          "",
          "[Removed Lines]",
          "1653:             if (! PMA_Table::isView($this->db_name, $this->name)",
          "",
          "[Added Lines]",
          "1630:             if (! $this->isView()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1694:             $this->loadUiPrefs();",
          "1695:         }",
          "1698:             && ($property == self::PROP_COLUMN_ORDER",
          "1699:             || $property == self::PROP_COLUMN_VISIB)",
          "1700:         ) {",
          "",
          "[Removed Lines]",
          "1697:         if (! PMA_Table::isView($this->db_name, $this->name)",
          "",
          "[Added Lines]",
          "1674:         if (! $this->isView()",
          "",
          "---------------"
        ],
        "libraries/Util.class.php||libraries/Util.class.php": [
          "File: libraries/Util.class.php -> libraries/Util.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:             $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';",
          "808:             if ($tbl_is_view || $GLOBALS['dbi']->isSystemSchema($db)) {",
          "815:             }",
          "816:         }",
          "817:         return $rowCount;",
          "",
          "[Removed Lines]",
          "809:                 $rowCount = PMA_Table::countRecords(",
          "810:                     $db,",
          "811:                     $table['Name'],",
          "812:                     false,",
          "813:                     $tbl_is_view",
          "814:                 );",
          "",
          "[Added Lines]",
          "809:                 $rowCount = $GLOBALS['dbi']",
          "810:                     ->getTable($db, $table['Name'])",
          "811:                     ->countRecords();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2192:             if (isset($meta->orgtable)",
          "2193:                 && ($meta->table != $meta->orgtable)",
          "2195:             ) {",
          "2196:                 $meta->table = $meta->orgtable;",
          "2197:             }",
          "",
          "[Removed Lines]",
          "2194:                 && ! PMA_Table::isView($GLOBALS['db'], $meta->table)",
          "",
          "[Added Lines]",
          "2191:                 && ! $GLOBALS['dbi']->getTable($GLOBALS['db'], $meta->table)->isView()",
          "",
          "---------------"
        ],
        "libraries/controllers/TableRelationController.class.php||libraries/controllers/TableRelationController.class.php": [
          "File: libraries/controllers/TableRelationController.class.php -> libraries/controllers/TableRelationController.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:         $foreignTable = $_REQUEST['foreignTable'];",
          "299:         $table_obj = new PMA_Table($foreignTable, $_REQUEST['foreignDb']);",
          "302:             $columnList = $table_obj->getColumns(false, false);",
          "303:         } else {",
          "304:             $columnList = $table_obj->getIndexedColumns(false, false);",
          "",
          "[Removed Lines]",
          "301:         if (PMA_Table::isView($_REQUEST['foreignDb'], $foreignTable)) {",
          "",
          "[Added Lines]",
          "301:         if ($GLOBALS['dbi']->getTable($_REQUEST['foreignDb'], $foreignTable)->isView()) {",
          "",
          "---------------"
        ],
        "libraries/TableSearch.class.php||libraries/controllers/TableSearchController.class.php": [
          "File: libraries/TableSearch.class.php -> libraries/controllers/TableSearchController.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "12: require_once 'libraries/Template.class.php';",
          "",
          "[Removed Lines]",
          "8: if (! defined('PHPMYADMIN')) {",
          "9:     exit;",
          "10: }",
          "20: class PMA_TableSearch",
          "21: {",
          "",
          "[Added Lines]",
          "3: namespace PMA\\Controllers\\Table;",
          "5: use PMA\\Template;",
          "6: use PMA\\Controllers\\TableController;",
          "7: use PMA_DatabaseInterface;",
          "8: use PMA_Util;",
          "10: require_once 'libraries/common.inc.php';",
          "11: include_once 'libraries/tbl_info.inc.php';",
          "13: require_once 'libraries/mysql_charsets.inc.php';",
          "14: require_once 'libraries/sql.lib.php';",
          "15: require_once 'libraries/bookmark.lib.php';",
          "16: require_once 'libraries/controllers/TableController.class.php';",
          "20: class TableSearchController extends TableController {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     private $_foreigners;",
          "95:     {",
          "96:         $this->_db = $db;",
          "97:         $this->_table = $table;",
          "98:         $this->_searchType = $searchType;",
          "99:         $this->_columnNames = array();",
          "100:         $this->_columnNullFlags = array();",
          "",
          "[Removed Lines]",
          "94:     public function __construct($db, $table, $searchType)",
          "",
          "[Added Lines]",
          "91:     private $_connectionCharSet;",
          "93:     protected $url_query;",
          "95:     public function __construct($db, $table, $searchType, $url_query)",
          "97:         parent::__construct();",
          "101:         $this->url_query = $url_query;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:         $this->_foreigners = array();",
          "106:         $this->_loadTableInfo();",
          "117:     }",
          "",
          "[Removed Lines]",
          "107:     }",
          "114:     public function getColumnNames()",
          "115:     {",
          "116:         return $this->_columnNames;",
          "",
          "[Added Lines]",
          "111:         $this->_connectionCharSet = $this->dbi->fetchValue(",
          "112:             \"SHOW VARIABLES LIKE 'character_set_connection'\", 0, 1",
          "113:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     private function _loadTableInfo()",
          "126:     {",
          "129:             $this->_db, $this->_table, null, true",
          "130:         );",
          "",
          "[Removed Lines]",
          "128:         $columns = $GLOBALS['dbi']->getColumns(",
          "",
          "[Added Lines]",
          "125:         $columns = $this->dbi->getColumns(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:         $this->_foreigners = PMA_getForeigners($this->_db, $this->_table);",
          "171:     }",
          "181:     {",
          "200:     }",
          "225:             array(",
          "230:                 '_foreigners' => $this->_foreigners,",
          "238:                 'titles' => $titles,",
          "240:             )",
          "242:     }",
          "253:     {",
          "256:         }",
          "277:         }",
          "281:     }",
          "302:         );",
          "320:         }",
          "336:     }",
          "352:     ) {",
          "357:             );",
          "425:             }",
          "446:                 }",
          "447:             }",
          "451:     }",
          "",
          "[Removed Lines]",
          "180:     private function _getSubTabs()",
          "182:         $subtabs = array();",
          "183:         $subtabs['search']['icon'] = 'b_search.png';",
          "184:         $subtabs['search']['text'] = __('Table search');",
          "185:         $subtabs['search']['link'] = 'tbl_select.php';",
          "186:         $subtabs['search']['id'] = 'tbl_search_id';",
          "187:         $subtabs['search']['args']['pos'] = 0;",
          "189:         $subtabs['zoom']['icon'] = 'b_select.png';",
          "190:         $subtabs['zoom']['link'] = 'tbl_zoom_select.php';",
          "191:         $subtabs['zoom']['text'] = __('Zoom search');",
          "192:         $subtabs['zoom']['id'] = 'zoom_search_id';",
          "194:         $subtabs['replace']['icon'] = 'b_find_replace.png';",
          "195:         $subtabs['replace']['link'] = 'tbl_find_replace.php';",
          "196:         $subtabs['replace']['text'] = __('Find and replace');",
          "197:         $subtabs['replace']['id'] = 'find_replace_id';",
          "199:         return $subtabs;",
          "220:     private function _getInputbox($foreignData, $column_name, $column_type,",
          "221:         $column_index, $titles, $foreignMaxLimit, $criteriaValues, $in_fbs = false,",
          "222:         $in_zoom_search_edit = false",
          "223:     ) {",
          "224:         return PMA\\Template::get('table/input_box')->render(",
          "226:                 'str' => '',",
          "227:                 'column_type' => (string) $column_type,",
          "228:                 'column_id' => ($in_zoom_search_edit) ? 'edit_fieldID_' : 'fieldID_',",
          "229:                 'in_zoom_search_edit' => $in_zoom_search_edit,",
          "231:                 'column_name' => $column_name,",
          "232:                 'foreignData' => $foreignData,",
          "233:                 'table' => $this->_table,",
          "234:                 'column_index' => $column_index,",
          "235:                 'foreignMaxLimit' => $foreignMaxLimit,",
          "236:                 'criteriaValues' => $criteriaValues,",
          "237:                 'db' => $this->_db,",
          "239:                 'in_fbs' => $in_fbs",
          "241:         );",
          "252:     private function _getEnumWhereClause($criteriaValues, $func_type)",
          "254:         if (! is_array($criteriaValues)) {",
          "255:             $criteriaValues = explode(',', $criteriaValues);",
          "257:         $enum_selected_count = count($criteriaValues);",
          "258:         if ($func_type == '=' && $enum_selected_count > 1) {",
          "259:             $func_type    = 'IN';",
          "260:             $parens_open  = '(';",
          "261:             $parens_close = ')';",
          "263:         } elseif ($func_type == '!=' && $enum_selected_count > 1) {",
          "264:             $func_type    = 'NOT IN';",
          "265:             $parens_open  = '(';",
          "266:             $parens_close = ')';",
          "268:         } else {",
          "269:             $parens_open  = '';",
          "270:             $parens_close = '';",
          "271:         }",
          "272:         $enum_where = '\\''",
          "273:             . PMA_Util::sqlAddSlashes($criteriaValues[0]) . '\\'';",
          "274:         for ($e = 1; $e < $enum_selected_count; $e++) {",
          "275:             $enum_where .= ', \\''",
          "276:                 . PMA_Util::sqlAddSlashes($criteriaValues[$e]) . '\\'';",
          "279:         return ' ' . $func_type . ' ' . $parens_open",
          "280:             . $enum_where . $parens_close;",
          "294:     private function _getGeomWhereClause($criteriaValues, $names,",
          "295:         $func_type, $types, $geom_func = null",
          "296:     ) {",
          "297:         $geom_unary_functions = array(",
          "298:             'IsEmpty' => 1,",
          "299:             'IsSimple' => 1,",
          "300:             'IsRing' => 1,",
          "301:             'IsClosed' => 1,",
          "303:         $where = '';",
          "306:         $geom_funcs = PMA_Util::getGISFunctions($types, true, false);",
          "308:         $types = $geom_funcs[$geom_func]['type'];",
          "311:         if ($geom_funcs[$geom_func]['params'] == 1) {",
          "312:             $backquoted_name = $geom_func . '(' . PMA_Util::backquote($names) . ')';",
          "313:         } else {",
          "316:             $gis_data = PMA_Util::createGISData($criteriaValues);",
          "317:             $where = $geom_func . '(' . PMA_Util::backquote($names)",
          "318:                 . ',' . $gis_data . ')';",
          "319:             return $where;",
          "323:         if (isset($geom_unary_functions[$geom_func])",
          "324:             && trim($criteriaValues) == ''",
          "325:         ) {",
          "326:             $where = $backquoted_name;",
          "328:         } elseif (in_array($types, PMA_Util::getGISDatatypes())",
          "329:             && ! empty($criteriaValues)",
          "330:         ) {",
          "332:             $gis_data = PMA_Util::createGISData($criteriaValues);",
          "333:             $where = $backquoted_name . ' ' . $func_type . ' ' . $gis_data;",
          "334:         }",
          "335:         return $where;",
          "350:     private function _getWhereClause($criteriaValues, $names, $types,",
          "351:         $func_type, $unaryFlag, $geom_func = null",
          "354:         if ($geom_func != null && trim($geom_func) != '') {",
          "355:             return $this->_getGeomWhereClause(",
          "356:                 $criteriaValues, $names, $func_type, $types, $geom_func",
          "358:         }",
          "360:         $backquoted_name = PMA_Util::backquote($names);",
          "361:         $where = '';",
          "362:         if ($unaryFlag) {",
          "363:             $where = $backquoted_name . ' ' . $func_type;",
          "365:         } elseif (strncasecmp($types, 'enum', 4) == 0 && ! empty($criteriaValues)) {",
          "366:             $where = $backquoted_name;",
          "367:             $where .= $this->_getEnumWhereClause($criteriaValues, $func_type);",
          "369:         } elseif ($criteriaValues != '') {",
          "374:             if (preg_match('@char|binary|blob|text|set|date|time|year@i', $types)",
          "375:                 || /*overload*/mb_strpos(' ' . $func_type, 'LIKE')",
          "376:             ) {",
          "377:                 $quot = '\\'';",
          "378:             } else {",
          "379:                 $quot = '';",
          "380:             }",
          "383:             if ($func_type == 'LIKE %...%') {",
          "384:                 $func_type = 'LIKE';",
          "385:                 $criteriaValues = '%' . $criteriaValues . '%';",
          "386:             }",
          "387:             if ($func_type == 'REGEXP ^...$') {",
          "388:                 $func_type = 'REGEXP';",
          "389:                 $criteriaValues = '^' . $criteriaValues . '$';",
          "390:             }",
          "392:             if ('IN (...)' != $func_type",
          "393:                 && 'NOT IN (...)' != $func_type",
          "394:                 && 'BETWEEN' != $func_type",
          "395:                 && 'NOT BETWEEN' != $func_type",
          "396:             ) {",
          "397:                 if ($func_type == 'LIKE %...%' || $func_type == 'LIKE') {",
          "398:                     $where = $backquoted_name . ' ' . $func_type . ' ' . $quot",
          "399:                         . PMA_Util::sqlAddSlashes($criteriaValues, true) . $quot;",
          "400:                 } else {",
          "401:                     $where = $backquoted_name . ' ' . $func_type . ' ' . $quot",
          "402:                         . PMA_Util::sqlAddSlashes($criteriaValues) . $quot;",
          "403:                 }",
          "404:                 return $where;",
          "405:             }",
          "406:             $func_type = str_replace(' (...)', '', $func_type);",
          "410:             if (is_array($criteriaValues)) {",
          "411:                 $values = $criteriaValues;",
          "412:             } else {",
          "413:                 $values = explode(',', $criteriaValues);",
          "414:             }",
          "416:             $emptyKey = false;",
          "417:             foreach ($values as $key => &$value) {",
          "418:                 if ('' === $value) {",
          "419:                     $emptyKey = $key;",
          "420:                     $value = 'NULL';",
          "421:                     continue;",
          "422:                 }",
          "423:                 $value = $quot . PMA_Util::sqlAddSlashes(trim($value))",
          "424:                     . $quot;",
          "427:             if ('BETWEEN' == $func_type || 'NOT BETWEEN' == $func_type) {",
          "428:                 $where = $backquoted_name . ' ' . $func_type . ' '",
          "429:                     . (isset($values[0]) ? $values[0] : '')",
          "430:                     . ' AND ' . (isset($values[1]) ? $values[1] : '');",
          "431:             } else { //[NOT] IN",
          "432:                 if (false !== $emptyKey) {",
          "433:                     unset($values[$emptyKey]);",
          "434:                 }",
          "435:                 $wheres = array();",
          "436:                 if (!empty($values)) {",
          "437:                     $wheres[] = $backquoted_name . ' ' . $func_type",
          "438:                         . ' (' . implode(',', $values) . ')';",
          "439:                 }",
          "440:                 if (false !== $emptyKey) {",
          "441:                     $wheres[] = $backquoted_name . ' IS NULL';",
          "442:                 }",
          "443:                 $where = implode(' OR ', $wheres);",
          "444:                 if (1 < count($wheres)) {",
          "445:                     $where = '(' . $where . ')';",
          "448:         } // end if",
          "450:         return $where;",
          "",
          "[Added Lines]",
          "170:     public function indexAction()",
          "172:         switch ($this->_searchType) {",
          "173:             case 'replace':",
          "174:                 if (isset($_POST['find'])) {",
          "175:                     $this->findAction();",
          "176:                     return;",
          "177:                 }",
          "178:                 $this->response",
          "179:                     ->getHeader()",
          "180:                     ->getScripts()",
          "181:                     ->addFile('tbl_find_replace.js');",
          "184:                 $this->response->addHTML(",
          "185:                     Template::get('table/secondary_tabs')->render(",
          "186:                         array(",
          "187:                             'url_params' => array(",
          "188:                                 'db' => $this->_db,",
          "189:                                 'table' => $this->_table",
          "190:                             ),",
          "191:                             'sub_tabs' => $this->_getSubTabs()",
          "192:                         )",
          "193:                     )",
          "194:                 );",
          "196:                 if (isset($_POST['replace'])) {",
          "197:                     $this->replaceAction();",
          "198:                 }",
          "200:                 if (! isset($goto)) {",
          "201:                     $goto = PMA_Util::getScriptNameForOption(",
          "202:                         $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "203:                     );",
          "204:                 }",
          "206:                 $params = array('db' => $this->_db, 'table' => $this->_table);",
          "207:                 $err_url = $goto . '?' . PMA_URL_getCommon($params);",
          "209:                 $this->response->addHTML(Template::get('table/selection_form')->render(",
          "210:                         array(",
          "211:                             'searchType' => $this->_searchType,",
          "212:                             'db' => $this->_db,",
          "213:                             'table' => $this->_table,",
          "214:                             'goto' => $goto,",
          "215:                             'self' => $this,",
          "216:                             'geomColumnFlag' => $this->_geomColumnFlag,",
          "217:                             'columnNames' => $this->_columnNames,",
          "218:                             'columnTypes' => $this->_columnTypes,",
          "219:                             'columnCollations' => $this->_columnCollations,",
          "220:                             'dataLabel' => null",
          "221:                         )",
          "222:                     )",
          "223:                 );",
          "224:                 break;",
          "226:             case 'normal':",
          "227:                 $this->response->getHeader()->getScripts()->addFiles(array(",
          "228:                     'makegrid.js',",
          "229:                     'sql.js',",
          "230:                     'tbl_select.js',",
          "231:                     'tbl_change.js',",
          "232:                     'jquery/jquery-ui-timepicker-addon.js',",
          "233:                     'jquery/jquery.uitablefilter.js',",
          "234:                     'gis_data_editor.js'",
          "235:                 ));",
          "237:                 if (isset($_REQUEST['range_search'])) {",
          "238:                     $this->rangeSearchAction();",
          "239:                     return;",
          "240:                 }",
          "245:                 if (! isset($_POST['columnsToDisplay']) && ! isset($_POST['displayAllColumns'])) {",
          "246:                     $this->displaySelectionFormAction();",
          "247:                 } else {",
          "248:                     $this->doSelectionAction();",
          "249:                 }",
          "250:                 break;",
          "252:             case 'zoom':",
          "253:                 $this->response->getHeader()->getScripts()->addFiles(array(",
          "254:                     'makegrid.js',",
          "255:                     'sql.js',",
          "256:                     'jqplot/jquery.jqplot.js',",
          "257:                     'jqplot/plugins/jqplot.canvasTextRenderer.js',",
          "258:                     'jqplot/plugins/jqplot.canvasAxisLabelRenderer.js',",
          "259:                     'jqplot/plugins/jqplot.dateAxisRenderer.js',",
          "260:                     'jqplot/plugins/jqplot.highlighter.js',",
          "261:                     'jqplot/plugins/jqplot.cursor.js',",
          "262:                     'canvg/canvg.js',",
          "263:                     'jquery/jquery-ui-timepicker-addon.js',",
          "264:                     'tbl_zoom_plot_jqplot.js',",
          "265:                     'tbl_change.js'",
          "266:                 ));",
          "272:                 if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {",
          "273:                     $this->getDataRowAction();",
          "274:                     return;",
          "275:                 }",
          "281:                 if (isset($_REQUEST['change_tbl_info']) && $_REQUEST['change_tbl_info'] == true) {",
          "282:                     $this->changeTableInfoAction();",
          "283:                     return;",
          "284:                 }",
          "286:                 $this->url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';",
          "289:                 require_once './libraries/tbl_info.inc.php';",
          "291:                 if (! isset($goto)) {",
          "292:                     $goto = PMA_Util::getScriptNameForOption(",
          "293:                         $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "294:                     );",
          "295:                 }",
          "297:                 $err_url   = $goto . PMA_URL_getCommon(array('db' => $this->_db, 'table' => $this->_table));",
          "300:                 if (!isset($_POST['zoom_submit']) || $_POST['dataLabel'] == '') {",
          "301:                     $dataLabel = PMA_getDisplayField($this->_db, $this->_table);",
          "302:                 } else {",
          "303:                     $dataLabel = $_POST['dataLabel'];",
          "304:                 }",
          "307:                 $this->response->addHTML(",
          "308:                     Template::get('table/secondary_tabs')->render(",
          "309:                         array(",
          "310:                             'url_params' => array(",
          "311:                                 'db' => $this->_db,",
          "312:                                 'table' => $this->_table",
          "313:                             ),",
          "314:                             'sub_tabs' => $this->_getSubTabs()",
          "315:                         )",
          "316:                     )",
          "317:                 );",
          "318:                 $this->response->addHTML(",
          "319:                     Template::get('table/selection_form')->render(",
          "320:                         array(",
          "321:                             'searchType' => $this->_searchType,",
          "322:                             'db' => $this->_db,",
          "323:                             'table' => $this->_table,",
          "324:                             'goto' => $goto,",
          "325:                             'self' => $this,",
          "326:                             'geomColumnFlag' => $this->_geomColumnFlag,",
          "327:                             'columnNames' => $this->_columnNames,",
          "328:                             'columnTypes' => $this->_columnTypes,",
          "329:                             'columnCollations' => $this->_columnCollations,",
          "330:                             'dataLabel' => $dataLabel",
          "331:                         )",
          "332:                     )",
          "333:                 );",
          "339:                 if (isset($_POST['zoom_submit'])",
          "340:                     && $_POST['criteriaColumnNames'][0] != 'pma_null'",
          "341:                     && $_POST['criteriaColumnNames'][1] != 'pma_null'",
          "342:                     && $_POST['criteriaColumnNames'][0] != $_POST['criteriaColumnNames'][1]",
          "343:                 ) {",
          "344:                     $this->zoomSubmitAction($dataLabel, $goto);",
          "345:                 }",
          "346:                 break;",
          "347:         }",
          "350:     public function zoomSubmitAction($dataLabel, $goto)",
          "351:     {",
          "353:         $sql_query = $this->buildSqlQuery();",
          "354:         $sql_query .= ' LIMIT ' . $_POST['maxPlotLimit'];",
          "357:         $result = $this->dbi->query(",
          "358:             $sql_query . \";\", null, PMA_DatabaseInterface::QUERY_STORE",
          "359:         );",
          "360:         $fields_meta = $this->dbi->getFieldsMeta($result);",
          "361:         $data = array();",
          "362:         while ($row = $this->dbi->fetchAssoc($result)) {",
          "365:             $tmpRow = array();",
          "366:             foreach ($row as $val) {",
          "367:                 $tmpRow[] = $val;",
          "368:             }",
          "370:             $uniqueCondition = PMA_Util::getUniqueCondition(",
          "371:                 $result, // handle",
          "372:                 count($this->_columnNames), // fields_cnt",
          "373:                 $fields_meta, // fields_meta",
          "374:                 $tmpRow, // row",
          "375:                 true, // force_unique",
          "376:                 false, // restrict_to_table",
          "377:                 null // analyzed_sql_results",
          "378:             );",
          "380:             $row['where_clause'] = $uniqueCondition[0];",
          "382:             $tmpData = array(",
          "383:                 $_POST['criteriaColumnNames'][0] =>",
          "384:                     $row[$_POST['criteriaColumnNames'][0]],",
          "385:                 $_POST['criteriaColumnNames'][1] =>",
          "386:                     $row[$_POST['criteriaColumnNames'][1]],",
          "387:                 'where_clause' => $uniqueCondition[0]",
          "388:             );",
          "389:             $tmpData[$dataLabel] = ($dataLabel) ? $row[$dataLabel] : '';",
          "390:             $data[] = $tmpData;",
          "391:         }",
          "392:         unset($tmpData);",
          "395:         $titles = array(",
          "396:             'Browse' => PMA_Util::getIcon(",
          "397:                 'b_browse.png',",
          "398:                 __('Browse foreign values')",
          "399:             )",
          "400:         );",
          "401:         $this->response->addHTML(Template::get('table/zoom_result_form')->render(",
          "403:                 '_db' => $this->_db,",
          "404:                 '_table' => $this->_table,",
          "405:                 '_columnNames' => $this->_columnNames,",
          "407:                 '_columnNullFlags' => $this->_columnNullFlags,",
          "408:                 '_columnTypes' => $this->_columnTypes,",
          "410:                 'goto' => $goto,",
          "411:                 'data' => $data",
          "413:         ));",
          "416:     public function changeTableInfoAction()",
          "418:         $field = $_REQUEST['field'];",
          "419:         if ($field == 'pma_null') {",
          "420:             $this->response->addJSON('field_type', '');",
          "421:             $this->response->addJSON('field_collation', '');",
          "422:             $this->response->addJSON('field_operators', '');",
          "423:             $this->response->addJSON('field_value', '');",
          "424:             return;",
          "426:         $key = array_search($field, $this->_columnNames);",
          "427:         $properties = $this->getColumnProperties($_REQUEST['it'], $key);",
          "428:         $this->response->addJSON('field_type', htmlspecialchars($properties['type']));",
          "429:         $this->response->addJSON('field_collation', $properties['collation']);",
          "430:         $this->response->addJSON('field_operators', $properties['func']);",
          "431:         $this->response->addJSON('field_value', $properties['value']);",
          "432:     }",
          "434:     public function getDataRowAction()",
          "435:     {",
          "436:         $extra_data = array();",
          "437:         $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'",
          "438:             . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];",
          "439:         $result = $this->dbi->query(",
          "440:             $row_info_query . \";\", null, PMA_DatabaseInterface::QUERY_STORE",
          "441:         );",
          "442:         $fields_meta = $this->dbi->getFieldsMeta($result);",
          "443:         while ($row = $this->dbi->fetchAssoc($result)) {",
          "445:             $i = 0;",
          "446:             foreach ($row as $col => $val) {",
          "447:                 if ($fields_meta[$i]->type == 'bit') {",
          "448:                     $row[$col] = PMA_Util::printableBitValue(",
          "449:                         $val, $fields_meta[$i]->length",
          "450:                     );",
          "451:                 }",
          "452:                 $i++;",
          "453:             }",
          "454:             $extra_data['row_info'] = $row;",
          "456:         $this->response->addJSON($extra_data);",
          "459:     public function doSelectionAction()",
          "460:     {",
          "464:         $sql_query = $this->buildSqlQuery();",
          "469:         $db = $this->_db;",
          "470:         $table = $this->_table;",
          "474:         include_once 'libraries/parse_analyze.inc.php';",
          "476:         PMA_executeQueryAndSendQueryResponse(",
          "477:             $analyzed_sql_results, // analyzed_sql_results",
          "478:             false, // is_gotofile",
          "479:             $this->_db, // db",
          "480:             $this->_table, // table",
          "481:             null, // find_real_end",
          "482:             null, // sql_query_for_bookmark",
          "483:             null, // extra_data",
          "484:             null, // message_to_show",
          "485:             null, // message",
          "486:             null, // sql_data",
          "487:             $GLOBALS['goto'], // goto",
          "488:             $GLOBALS['pmaThemeImage'], // pmaThemeImage",
          "489:             null, // disp_query",
          "490:             null, // disp_message",
          "491:             null, // query_type",
          "492:             $sql_query, // sql_query",
          "493:             null, // selectedTables",
          "494:             null // complete_query",
          "496:     }",
          "498:     public function displaySelectionFormAction()",
          "499:     {",
          "501:         $this->url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';",
          "503:         include_once 'libraries/tbl_info.inc.php';",
          "504:         if (! isset($goto)) {",
          "505:             $goto = PMA_Util::getScriptNameForOption(",
          "506:                 $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "507:             );",
          "510:         $err_url = $goto . PMA_URL_getCommon(array('db' => $this->_db, 'table' => $this->_table));",
          "512:         $this->response->addHTML(Template::get('table/secondary_tabs')->render(",
          "513:             array(",
          "514:                 'url_params' => array(",
          "515:                     'db' => $this->_db,",
          "516:                     'table' => $this->_table",
          "517:                 ),",
          "518:                 'sub_tabs' => $this->_getSubTabs()",
          "519:             )",
          "520:         ));",
          "521:         $this->response->addHTML(Template::get('table/selection_form')->render(",
          "522:             array(",
          "523:                 'searchType' => $this->_searchType,",
          "524:                 'db' => $this->_db,",
          "525:                 'table' => $this->_table,",
          "526:                 'goto' => $goto,",
          "527:                 'self' => $this,",
          "528:                 'geomColumnFlag' => $this->_geomColumnFlag,",
          "529:                 'columnNames' => $this->_columnNames,",
          "530:                 'columnTypes' => $this->_columnTypes,",
          "531:                 'columnCollations' => $this->_columnCollations,",
          "532:                 'dataLabel' => null",
          "533:             )",
          "534:         ));",
          "535:     }",
          "537:     public function rangeSearchAction()",
          "538:     {",
          "539:         $min_max = $this->getColumnMinMax($_REQUEST['column']);",
          "540:         $this->response->addJSON('column_data', $min_max);",
          "541:     }",
          "543:     public function findAction()",
          "544:     {",
          "545:         $preview = $this->getReplacePreview(",
          "546:             $_POST['columnIndex'],",
          "547:             $_POST['find'],",
          "548:             $_POST['replaceWith'],",
          "549:             $_POST['useRegex'],",
          "550:             $this->_connectionCharSet",
          "551:         );",
          "552:         $this->response->addJSON('preview', $preview);",
          "553:     }",
          "555:     public function replaceAction()",
          "556:     {",
          "557:         $this->replace(",
          "558:             $_POST['columnIndex'],",
          "559:             $_POST['findString'],",
          "560:             $_POST['replaceWith'],",
          "561:             $_POST['useRegex'],",
          "562:             $this->_connectionCharSet);",
          "563:         $this->response->addHTML(PMA_Util::getMessage(",
          "564:             __('Your SQL query has been executed successfully.'),",
          "565:             null, 'success'",
          "566:         ));",
          "580:     function getReplacePreview($columnIndex, $find, $replaceWith, $useRegex,",
          "581:                                $charSet",
          "583:         $column = $this->_columnNames[$columnIndex];",
          "584:         if ($useRegex) {",
          "585:             $result = $this->_getRegexReplaceRows(",
          "586:                 $columnIndex, $find, $replaceWith, $charSet",
          "588:         } else {",
          "589:             $sql_query = \"SELECT \"",
          "590:                 . PMA_Util::backquote($column) . \",\"",
          "591:                 . \" REPLACE(\"",
          "592:                 . PMA_Util::backquote($column) . \", '\" . $find . \"', '\"",
          "593:                 . $replaceWith",
          "594:                 . \"'),\"",
          "595:                 . \" COUNT(*)\"",
          "596:                 . \" FROM \" . PMA_Util::backquote($this->_db)",
          "597:                 . \".\" . PMA_Util::backquote($this->_table)",
          "598:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "599:                 . \" LIKE '%\" . $find . \"%' COLLATE \" . $charSet . \"_bin\"; // here we",
          "603:             $sql_query .= \" GROUP BY \" . PMA_Util::backquote($column)",
          "604:                 . \" ORDER BY \" . PMA_Util::backquote($column) . \" ASC\";",
          "606:             $result = $this->dbi->fetchResult($sql_query, 0);",
          "607:         }",
          "609:         return Template::get('table/replace_preview')->render(",
          "610:             array(",
          "611:                 'db' => $this->_db,",
          "612:                 'table' => $this->_table,",
          "613:                 'columnIndex' => $columnIndex,",
          "614:                 'find' => $find,",
          "615:                 'replaceWith' => $replaceWith,",
          "616:                 'useRegex' => $useRegex,",
          "617:                 'result' => $result",
          "618:             )",
          "619:         );",
          "620:     }",
          "632:     private function _getRegexReplaceRows($columnIndex, $find, $replaceWith, $charSet)",
          "633:     {",
          "634:         $column = $this->_columnNames[$columnIndex];",
          "635:         $sql_query = \"SELECT \"",
          "636:             . PMA_Util::backquote($column) . \",\"",
          "637:             . \" 1,\" // to add an extra column that will have replaced value",
          "638:             . \" COUNT(*)\"",
          "639:             . \" FROM \" . PMA_Util::backquote($this->_db)",
          "640:             . \".\" . PMA_Util::backquote($this->_table)",
          "641:             . \" WHERE \" . PMA_Util::backquote($column)",
          "642:             . \" RLIKE '\" . PMA_Util::sqlAddSlashes($find) . \"' COLLATE \"",
          "643:             . $charSet . \"_bin\"; // here we",
          "646:         $sql_query .= \" GROUP BY \" . PMA_Util::backquote($column)",
          "647:             . \" ORDER BY \" . PMA_Util::backquote($column) . \" ASC\";",
          "649:         $result = $this->dbi->fetchResult($sql_query, 0);",
          "651:         if (is_array($result)) {",
          "652:             foreach ($result as $index=>$row) {",
          "653:                 $result[$index][1] = preg_replace(",
          "654:                     \"/\" . $find . \"/\",",
          "655:                     $replaceWith,",
          "656:                     $row[0]",
          "657:                 );",
          "659:         }",
          "660:         return $result;",
          "661:     }",
          "674:     function replace($columnIndex, $find, $replaceWith, $useRegex, $charSet)",
          "675:     {",
          "676:         $column = $this->_columnNames[$columnIndex];",
          "677:         if ($useRegex) {",
          "678:             $toReplace = $this->_getRegexReplaceRows(",
          "679:                 $columnIndex, $find, $replaceWith, $charSet",
          "680:             );",
          "681:             $sql_query = \"UPDATE \" . PMA_Util::backquote($this->_db)",
          "682:                 . \".\" . PMA_Util::backquote($this->_table)",
          "683:                 . \" SET \" . PMA_Util::backquote($column) . \" = CASE\";",
          "684:             if (is_array($toReplace)) {",
          "685:                 foreach ($toReplace as $row) {",
          "686:                     $sql_query .= \"\\n WHEN \" . PMA_Util::backquote($column)",
          "687:                         . \" = '\" . PMA_Util::sqlAddSlashes($row[0])",
          "688:                         . \"' THEN '\" . PMA_Util::sqlAddSlashes($row[1]) . \"'\";",
          "691:             $sql_query .= \" END\"",
          "692:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "693:                 . \" RLIKE '\" . PMA_Util::sqlAddSlashes($find) . \"' COLLATE \"",
          "694:                 . $charSet . \"_bin\"; // here we",
          "698:         } else {",
          "699:             $sql_query = \"UPDATE \" . PMA_Util::backquote($this->_db)",
          "700:                 . \".\" . PMA_Util::backquote($this->_table)",
          "701:                 . \" SET \" . PMA_Util::backquote($column) . \" =\"",
          "702:                 . \" REPLACE(\"",
          "703:                 . PMA_Util::backquote($column) . \", '\" . $find . \"', '\"",
          "704:                 . $replaceWith",
          "705:                 . \"')\"",
          "706:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "707:                 . \" LIKE '%\" . $find . \"%' COLLATE \" . $charSet . \"_bin\"; // here we",
          "711:         }",
          "712:         $this->dbi->query(",
          "713:             $sql_query, null, PMA_DatabaseInterface::QUERY_STORE",
          "714:         );",
          "715:         $GLOBALS['sql_query'] = $sql_query;",
          "716:     }",
          "725:     public function getColumnMinMax($column)",
          "726:     {",
          "727:         $sql_query = 'SELECT MIN(' . PMA_Util::backquote($column) . ') AS `min`, '",
          "728:             . 'MAX(' . PMA_Util::backquote($column) . ') AS `max` '",
          "729:             . 'FROM ' . PMA_Util::backquote($this->_db) . '.'",
          "730:             . PMA_Util::backquote($this->_table);",
          "732:         $result = $this->dbi->fetchSingleRow($sql_query);",
          "734:         return $result;",
          "735:     }",
          "744:     private function _getSubTabs()",
          "745:     {",
          "746:         $subtabs = array();",
          "747:         $subtabs['search']['icon'] = 'b_search.png';",
          "748:         $subtabs['search']['text'] = __('Table search');",
          "749:         $subtabs['search']['link'] = 'tbl_select.php';",
          "750:         $subtabs['search']['id'] = 'tbl_search_id';",
          "751:         $subtabs['search']['args']['pos'] = 0;",
          "753:         $subtabs['zoom']['icon'] = 'b_select.png';",
          "754:         $subtabs['zoom']['link'] = 'tbl_zoom_select.php';",
          "755:         $subtabs['zoom']['text'] = __('Zoom search');",
          "756:         $subtabs['zoom']['id'] = 'zoom_search_id';",
          "758:         $subtabs['replace']['icon'] = 'b_find_replace.png';",
          "759:         $subtabs['replace']['link'] = 'tbl_find_replace.php';",
          "760:         $subtabs['replace']['text'] = __('Find and replace');",
          "761:         $subtabs['replace']['id'] = 'find_replace_id';",
          "763:         return $subtabs;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "459:     {",
          "460:         $sql_query = 'SELECT ';",
          "",
          "[Removed Lines]",
          "458:     public function buildSqlQuery()",
          "",
          "[Added Lines]",
          "771:     private function buildSqlQuery()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "492:     }",
          "556:     {",
          "557:         $selected_operator = (isset($_POST['criteriaColumnOperators'])",
          "558:             ? $_POST['criteriaColumnOperators'][$search_index] : '');",
          "",
          "[Removed Lines]",
          "499:     private function _generateWhereClause()",
          "500:     {",
          "501:         if (isset($_POST['customWhereClause'])",
          "502:             && trim($_POST['customWhereClause']) != ''",
          "503:         ) {",
          "504:             return ' WHERE ' . $_POST['customWhereClause'];",
          "505:         }",
          "509:         if (! isset($_POST['criteriaValues'])",
          "510:             && ! isset($_POST['criteriaColumnOperators'])",
          "511:         ) {",
          "512:             return '';",
          "513:         }",
          "516:         $fullWhereClause = array();",
          "517:         reset($_POST['criteriaColumnOperators']);",
          "518:         while (list($column_index, $operator) = each(",
          "519:             $_POST['criteriaColumnOperators']",
          "520:         )) {",
          "522:             $unaryFlag =  $GLOBALS['PMA_Types']->isUnaryOperator($operator);",
          "523:             $tmp_geom_func = isset($geom_func[$column_index])",
          "524:                 ? $geom_func[$column_index] : null;",
          "526:             $whereClause = $this->_getWhereClause(",
          "527:                 $_POST['criteriaValues'][$column_index],",
          "528:                 $_POST['criteriaColumnNames'][$column_index],",
          "529:                 $_POST['criteriaColumnTypes'][$column_index],",
          "530:                 $operator,",
          "531:                 $unaryFlag,",
          "532:                 $tmp_geom_func",
          "533:             );",
          "535:             if ($whereClause) {",
          "536:                 $fullWhereClause[] = $whereClause;",
          "537:             }",
          "538:         } // end while",
          "540:         if ($fullWhereClause) {",
          "541:             return ' WHERE ' . implode(' AND ', $fullWhereClause);",
          "542:         }",
          "543:         return '';",
          "544:     }",
          "555:     public function getColumnProperties($search_index, $column_index)",
          "",
          "[Added Lines]",
          "816:     public function getColumnProperties($search_index, $column_index)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "567:         $type = $this->_columnTypes[$column_index];",
          "568:         $collation = $this->_columnCollations[$column_index];",
          "571:             array(",
          "572:                 'search_index' => $search_index,",
          "573:                 'columnTypes' => $this->_columnTypes,",
          "",
          "[Removed Lines]",
          "570:         $func = PMA\\Template::get('table/column_comparison_operators')->render(",
          "",
          "[Added Lines]",
          "831:         $func = Template::get('table/column_comparison_operators')->render(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "580:         $foreignData = PMA_getForeignData(",
          "581:             $this->_foreigners, $this->_columnNames[$column_index], false, '', ''",
          "582:         );",
          "586:         );",
          "587:         return array(",
          "588:             'type' => $type,",
          "",
          "[Removed Lines]",
          "583:         $value =  $this->_getInputbox(",
          "584:             $foreignData, $this->_columnNames[$column_index], $type, $search_index,",
          "585:             $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $entered_value",
          "",
          "[Added Lines]",
          "844:         $value = Template::get('table/input_box')->render(",
          "845:             array(",
          "846:                 'str' => '',",
          "847:                 'column_type' => (string) $type,",
          "848:                 'column_id' => 'fieldID_',",
          "849:                 'in_zoom_search_edit' => false,",
          "850:                 '_foreigners' => $this->_foreigners,",
          "851:                 'column_name' => $this->_columnNames[$column_index],",
          "852:                 'foreignData' => $foreignData,",
          "853:                 'table' => $this->_table,",
          "854:                 'column_index' => $search_index,",
          "855:                 'foreignMaxLimit' => $GLOBALS['cfg']['ForeignKeyMaxLimit'],",
          "856:                 'criteriaValues' => $entered_value,",
          "857:                 'db' => $this->_db,",
          "858:                 'titles' => $titles,",
          "859:                 'in_fbs' => false",
          "860:             )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "593:     }",
          "601:     {",
          "685:     }",
          "698:     {",
          "724:         }",
          "726:     }",
          "741:     ) {",
          "766:         }",
          "779:     }",
          "798:             );",
          "807:                 }",
          "808:             }",
          "853:     }",
          "",
          "[Removed Lines]",
          "600:     public function getSecondaryTabs()",
          "602:         return PMA\\Template::get('table/secondary_tabs')->render(",
          "603:             array(",
          "604:                 'url_params' => array(",
          "605:                     'db' => $this->_db,",
          "606:                     'table' => $this->_table",
          "607:                 ),",
          "608:                 'sub_tabs' => $this->_getSubTabs()",
          "609:             )",
          "610:         );",
          "611:     }",
          "621:     public function getSelectionForm($goto, $dataLabel = null)",
          "622:     {",
          "623:         return PMA\\Template::get('table/selection_form')->render(",
          "624:             array(",
          "625:                 'searchType' => $this->_searchType,",
          "626:                 'db' => $this->_db,",
          "627:                 'table' => $this->_table,",
          "628:                 'goto' => $goto,",
          "629:                 'self' => $this,",
          "630:                 'geomColumnFlag' => $this->_geomColumnFlag,",
          "631:                 'columnNames' => $this->_columnNames,",
          "632:                 'columnTypes' => $this->_columnTypes,",
          "633:                 'columnCollations' => $this->_columnCollations,",
          "634:                 'dataLabel' => $dataLabel",
          "635:             )",
          "636:         );",
          "637:     }",
          "648:     public function getZoomResultsForm($goto, $data)",
          "649:     {",
          "650:         $titles = array(",
          "651:             'Browse' => PMA_Util::getIcon(",
          "652:                 'b_browse.png',",
          "653:                 __('Browse foreign values')",
          "654:             )",
          "655:         );",
          "657:         return PMA\\Template::get('table/zoom_result_form')->render(",
          "658:             array(",
          "659:                 '_db' => $this->_db,",
          "660:                 '_table' => $this->_table,",
          "661:                 '_columnNames' => $this->_columnNames,",
          "662:                 '_foreigners' => $this->_foreigners,",
          "663:                 '_columnNullFlags' => $this->_columnNullFlags,",
          "664:                 '_columnTypes' => $this->_columnTypes,",
          "665:                 'titles' => $titles,",
          "666:                 'goto' => $goto,",
          "667:                 'data' => $data",
          "668:             )",
          "669:         );",
          "670:     }",
          "677:     function _getSearchAndReplaceHTML()",
          "678:     {",
          "679:         return PMA\\Template::get('table/search_and_replace')->render(",
          "680:             array(",
          "681:                 'columnNames' => $this->_columnNames,",
          "682:                 'columnTypes' => $this->_columnTypes",
          "683:             )",
          "684:         );",
          "697:     function _getRegexReplaceRows($columnIndex, $find, $replaceWith, $charSet)",
          "699:         $column = $this->_columnNames[$columnIndex];",
          "700:         $sql_query = \"SELECT \"",
          "701:             . PMA_Util::backquote($column) . \",\"",
          "702:             . \" 1,\" // to add an extra column that will have replaced value",
          "703:             . \" COUNT(*)\"",
          "704:             . \" FROM \" . PMA_Util::backquote($this->_db)",
          "705:             . \".\" . PMA_Util::backquote($this->_table)",
          "706:             . \" WHERE \" . PMA_Util::backquote($column)",
          "707:             . \" RLIKE '\" . PMA_Util::sqlAddSlashes($find) . \"' COLLATE \"",
          "708:             . $charSet . \"_bin\"; // here we",
          "711:         $sql_query .= \" GROUP BY \" . PMA_Util::backquote($column)",
          "712:             . \" ORDER BY \" . PMA_Util::backquote($column) . \" ASC\";",
          "714:         $result = $GLOBALS['dbi']->fetchResult($sql_query, 0);",
          "716:         if (is_array($result)) {",
          "717:             foreach ($result as $index=>$row) {",
          "718:                 $result[$index][1] = preg_replace(",
          "719:                     \"/\" . $find . \"/\",",
          "720:                     $replaceWith,",
          "721:                     $row[0]",
          "722:                 );",
          "723:             }",
          "725:         return $result;",
          "739:     function getReplacePreview($columnIndex, $find, $replaceWith, $useRegex,",
          "740:         $charSet",
          "742:         $column = $this->_columnNames[$columnIndex];",
          "743:         if ($useRegex) {",
          "744:             $result = $this->_getRegexReplaceRows(",
          "745:                 $columnIndex, $find, $replaceWith, $charSet",
          "746:             );",
          "747:         } else {",
          "748:             $sql_query = \"SELECT \"",
          "749:                 . PMA_Util::backquote($column) . \",\"",
          "750:                 . \" REPLACE(\"",
          "751:                 . PMA_Util::backquote($column) . \", '\" . $find . \"', '\"",
          "752:                 . $replaceWith",
          "753:                 . \"'),\"",
          "754:                 . \" COUNT(*)\"",
          "755:                 . \" FROM \" . PMA_Util::backquote($this->_db)",
          "756:                 . \".\" . PMA_Util::backquote($this->_table)",
          "757:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "758:                 . \" LIKE '%\" . $find . \"%' COLLATE \" . $charSet . \"_bin\"; // here we",
          "762:             $sql_query .= \" GROUP BY \" . PMA_Util::backquote($column)",
          "763:                 . \" ORDER BY \" . PMA_Util::backquote($column) . \" ASC\";",
          "765:             $result = $GLOBALS['dbi']->fetchResult($sql_query, 0);",
          "768:         return PMA\\Template::get('table/replace_preview')->render(",
          "769:             array(",
          "770:                 'db' => $this->_db,",
          "771:                 'table' => $this->_table,",
          "772:                 'columnIndex' => $columnIndex,",
          "773:                 'find' => $find,",
          "774:                 'replaceWith' => $replaceWith,",
          "775:                 'useRegex' => $useRegex,",
          "776:                 'result' => $result",
          "777:             )",
          "778:         );",
          "792:     function replace($columnIndex, $find, $replaceWith, $useRegex, $charSet)",
          "793:     {",
          "794:         $column = $this->_columnNames[$columnIndex];",
          "795:         if ($useRegex) {",
          "796:             $toReplace = $this->_getRegexReplaceRows(",
          "797:                 $columnIndex, $find, $replaceWith, $charSet",
          "799:             $sql_query = \"UPDATE \" . PMA_Util::backquote($this->_db)",
          "800:                 . \".\" . PMA_Util::backquote($this->_table)",
          "801:                 . \" SET \" . PMA_Util::backquote($column) . \" = CASE\";",
          "802:             if (is_array($toReplace)) {",
          "803:                 foreach ($toReplace as $row) {",
          "804:                     $sql_query .= \"\\n WHEN \" . PMA_Util::backquote($column)",
          "805:                         . \" = '\" . PMA_Util::sqlAddSlashes($row[0])",
          "806:                         . \"' THEN '\" . PMA_Util::sqlAddSlashes($row[1]) . \"'\";",
          "809:             $sql_query .= \" END\"",
          "810:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "811:                 . \" RLIKE '\" . PMA_Util::sqlAddSlashes($find) . \"' COLLATE \"",
          "812:                 . $charSet . \"_bin\"; // here we",
          "816:         } else {",
          "817:             $sql_query = \"UPDATE \" . PMA_Util::backquote($this->_db)",
          "818:                 . \".\" . PMA_Util::backquote($this->_table)",
          "819:                 . \" SET \" . PMA_Util::backquote($column) . \" =\"",
          "820:                 . \" REPLACE(\"",
          "821:                 . PMA_Util::backquote($column) . \", '\" . $find . \"', '\"",
          "822:                 . $replaceWith",
          "823:                 . \"')\"",
          "824:                 . \" WHERE \" . PMA_Util::backquote($column)",
          "825:                 . \" LIKE '%\" . $find . \"%' COLLATE \" . $charSet . \"_bin\"; // here we",
          "829:         }",
          "830:         $GLOBALS['dbi']->query(",
          "831:             $sql_query, null, PMA_DatabaseInterface::QUERY_STORE",
          "832:         );",
          "833:         $GLOBALS['sql_query'] = $sql_query;",
          "834:     }",
          "843:     public function getColumnMinMax($column)",
          "844:     {",
          "845:         $sql_query = 'SELECT MIN(' . PMA_Util::backquote($column) . ') AS `min`, '",
          "846:             . 'MAX(' . PMA_Util::backquote($column) . ') AS `max` '",
          "847:             . 'FROM ' . PMA_Util::backquote($this->_db) . '.'",
          "848:             . PMA_Util::backquote($this->_table);",
          "850:         $result = $GLOBALS['dbi']->fetchSingleRow($sql_query);",
          "852:         return $result;",
          "854: }",
          "",
          "[Added Lines]",
          "875:     private function _generateWhereClause()",
          "877:         if (isset($_POST['customWhereClause'])",
          "878:             && trim($_POST['customWhereClause']) != ''",
          "879:         ) {",
          "880:             return ' WHERE ' . $_POST['customWhereClause'];",
          "881:         }",
          "885:         if (! isset($_POST['criteriaValues'])",
          "886:             && ! isset($_POST['criteriaColumnOperators'])",
          "887:         ) {",
          "888:             return '';",
          "889:         }",
          "892:         $fullWhereClause = array();",
          "893:         reset($_POST['criteriaColumnOperators']);",
          "894:         while (list($column_index, $operator) = each(",
          "895:             $_POST['criteriaColumnOperators']",
          "896:         )) {",
          "898:             $unaryFlag =  $GLOBALS['PMA_Types']->isUnaryOperator($operator);",
          "899:             $tmp_geom_func = isset($geom_func[$column_index])",
          "900:                 ? $geom_func[$column_index] : null;",
          "902:             $whereClause = $this->_getWhereClause(",
          "903:                 $_POST['criteriaValues'][$column_index],",
          "904:                 $_POST['criteriaColumnNames'][$column_index],",
          "905:                 $_POST['criteriaColumnTypes'][$column_index],",
          "906:                 $operator,",
          "907:                 $unaryFlag,",
          "908:                 $tmp_geom_func",
          "909:             );",
          "911:             if ($whereClause) {",
          "912:                 $fullWhereClause[] = $whereClause;",
          "913:             }",
          "914:         } // end while",
          "916:         if ($fullWhereClause) {",
          "917:             return ' WHERE ' . implode(' AND ', $fullWhereClause);",
          "918:         }",
          "919:         return '';",
          "930:     private function _getEnumWhereClause($criteriaValues, $func_type)",
          "932:         if (! is_array($criteriaValues)) {",
          "933:             $criteriaValues = explode(',', $criteriaValues);",
          "934:         }",
          "935:         $enum_selected_count = count($criteriaValues);",
          "936:         if ($func_type == '=' && $enum_selected_count > 1) {",
          "937:             $func_type    = 'IN';",
          "938:             $parens_open  = '(';",
          "939:             $parens_close = ')';",
          "941:         } elseif ($func_type == '!=' && $enum_selected_count > 1) {",
          "942:             $func_type    = 'NOT IN';",
          "943:             $parens_open  = '(';",
          "944:             $parens_close = ')';",
          "946:         } else {",
          "947:             $parens_open  = '';",
          "948:             $parens_close = '';",
          "950:         $enum_where = '\\''",
          "951:             . PMA_Util::sqlAddSlashes($criteriaValues[0]) . '\\'';",
          "952:         for ($e = 1; $e < $enum_selected_count; $e++) {",
          "953:             $enum_where .= ', \\''",
          "954:                 . PMA_Util::sqlAddSlashes($criteriaValues[$e]) . '\\'';",
          "955:         }",
          "957:         return ' ' . $func_type . ' ' . $parens_open",
          "958:         . $enum_where . $parens_close;",
          "972:     private function _getGeomWhereClause($criteriaValues, $names,",
          "973:                                          $func_type, $types, $geom_func = null",
          "975:         $geom_unary_functions = array(",
          "976:             'IsEmpty' => 1,",
          "977:             'IsSimple' => 1,",
          "978:             'IsRing' => 1,",
          "979:             'IsClosed' => 1,",
          "980:         );",
          "981:         $where = '';",
          "984:         $geom_funcs = PMA_Util::getGISFunctions($types, true, false);",
          "986:         $types = $geom_funcs[$geom_func]['type'];",
          "989:         if ($geom_funcs[$geom_func]['params'] == 1) {",
          "990:             $backquoted_name = $geom_func . '(' . PMA_Util::backquote($names) . ')';",
          "991:         } else {",
          "994:             $gis_data = PMA_Util::createGISData($criteriaValues);",
          "995:             $where = $geom_func . '(' . PMA_Util::backquote($names)",
          "996:                 . ',' . $gis_data . ')';",
          "997:             return $where;",
          "1001:         if (isset($geom_unary_functions[$geom_func])",
          "1002:             && trim($criteriaValues) == ''",
          "1003:         ) {",
          "1004:             $where = $backquoted_name;",
          "1006:         } elseif (in_array($types, PMA_Util::getGISDatatypes())",
          "1007:             && ! empty($criteriaValues)",
          "1008:         ) {",
          "1010:             $gis_data = PMA_Util::createGISData($criteriaValues);",
          "1011:             $where = $backquoted_name . ' ' . $func_type . ' ' . $gis_data;",
          "1012:         }",
          "1013:         return $where;",
          "1028:     private function _getWhereClause($criteriaValues, $names, $types,",
          "1029:                                      $func_type, $unaryFlag, $geom_func = null",
          "1030:     ) {",
          "1032:         if ($geom_func != null && trim($geom_func) != '') {",
          "1033:             return $this->_getGeomWhereClause(",
          "1034:                 $criteriaValues, $names, $func_type, $types, $geom_func",
          "1036:         }",
          "1038:         $backquoted_name = PMA_Util::backquote($names);",
          "1039:         $where = '';",
          "1040:         if ($unaryFlag) {",
          "1041:             $where = $backquoted_name . ' ' . $func_type;",
          "1043:         } elseif (strncasecmp($types, 'enum', 4) == 0 && ! empty($criteriaValues)) {",
          "1044:             $where = $backquoted_name;",
          "1045:             $where .= $this->_getEnumWhereClause($criteriaValues, $func_type);",
          "1047:         } elseif ($criteriaValues != '') {",
          "1052:             if (preg_match('@char|binary|blob|text|set|date|time|year@i', $types)",
          "1053:                 || /*overload*/mb_strpos(' ' . $func_type, 'LIKE')",
          "1054:             ) {",
          "1055:                 $quot = '\\'';",
          "1056:             } else {",
          "1057:                 $quot = '';",
          "1058:             }",
          "1061:             if ($func_type == 'LIKE %...%') {",
          "1062:                 $func_type = 'LIKE';",
          "1063:                 $criteriaValues = '%' . $criteriaValues . '%';",
          "1064:             }",
          "1065:             if ($func_type == 'REGEXP ^...$') {",
          "1066:                 $func_type = 'REGEXP';",
          "1067:                 $criteriaValues = '^' . $criteriaValues . '$';",
          "1068:             }",
          "1070:             if ('IN (...)' != $func_type",
          "1071:                 && 'NOT IN (...)' != $func_type",
          "1072:                 && 'BETWEEN' != $func_type",
          "1073:                 && 'NOT BETWEEN' != $func_type",
          "1074:             ) {",
          "1075:                 if ($func_type == 'LIKE %...%' || $func_type == 'LIKE') {",
          "1076:                     $where = $backquoted_name . ' ' . $func_type . ' ' . $quot",
          "1077:                         . PMA_Util::sqlAddSlashes($criteriaValues, true) . $quot;",
          "1078:                 } else {",
          "1079:                     $where = $backquoted_name . ' ' . $func_type . ' ' . $quot",
          "1080:                         . PMA_Util::sqlAddSlashes($criteriaValues) . $quot;",
          "1082:                 return $where;",
          "1084:             $func_type = str_replace(' (...)', '', $func_type);",
          "1088:             if (is_array($criteriaValues)) {",
          "1089:                 $values = $criteriaValues;",
          "1090:             } else {",
          "1091:                 $values = explode(',', $criteriaValues);",
          "1092:             }",
          "1094:             $emptyKey = false;",
          "1095:             foreach ($values as $key => &$value) {",
          "1096:                 if ('' === $value) {",
          "1097:                     $emptyKey = $key;",
          "1098:                     $value = 'NULL';",
          "1099:                     continue;",
          "1100:                 }",
          "1101:                 $value = $quot . PMA_Util::sqlAddSlashes(trim($value))",
          "1102:                     . $quot;",
          "1103:             }",
          "1105:             if ('BETWEEN' == $func_type || 'NOT BETWEEN' == $func_type) {",
          "1106:                 $where = $backquoted_name . ' ' . $func_type . ' '",
          "1107:                     . (isset($values[0]) ? $values[0] : '')",
          "1108:                     . ' AND ' . (isset($values[1]) ? $values[1] : '');",
          "1109:             } else { //[NOT] IN",
          "1110:                 if (false !== $emptyKey) {",
          "1111:                     unset($values[$emptyKey]);",
          "1112:                 }",
          "1113:                 $wheres = array();",
          "1114:                 if (!empty($values)) {",
          "1115:                     $wheres[] = $backquoted_name . ' ' . $func_type",
          "1116:                         . ' (' . implode(',', $values) . ')';",
          "1117:                 }",
          "1118:                 if (false !== $emptyKey) {",
          "1119:                     $wheres[] = $backquoted_name . ' IS NULL';",
          "1120:                 }",
          "1121:                 $where = implode(' OR ', $wheres);",
          "1122:                 if (1 < count($wheres)) {",
          "1123:                     $where = '(' . $where . ')';",
          "1124:                 }",
          "1125:             }",
          "1126:         } // end if",
          "1128:         return $where;",
          "1130: }",
          "",
          "---------------"
        ],
        "libraries/db_table_exists.lib.php||libraries/db_table_exists.lib.php": [
          "File: libraries/db_table_exists.lib.php -> libraries/db_table_exists.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     if (/*overload*/mb_strlen($table)) {",
          "62:         if (! $is_table) {",
          "63:             $_result = $GLOBALS['dbi']->tryQuery(",
          "",
          "[Removed Lines]",
          "60:         $is_table = isset(PMA_Table::$cache[$db][$table]);",
          "",
          "[Added Lines]",
          "60:         $is_table = $GLOBALS['dbi']->getCachedTableContent(\"${db}.${table}\", false);",
          "",
          "---------------"
        ],
        "libraries/display_export.lib.php||libraries/display_export.lib.php": [
          "File: libraries/display_export.lib.php -> libraries/display_export.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     } elseif (!empty($unlim_num_rows)) {",
          "442:         $html .= $unlim_num_rows;",
          "443:     } else {",
          "445:     }",
          "446:     $html .= '\" onfocus=\"this.select()\" />';",
          "447:     $html .= '</li>';",
          "",
          "[Removed Lines]",
          "444:         $html .= PMA_Table::countRecords($db, $table);",
          "",
          "[Added Lines]",
          "444:         $_table = new PMA_Table($table, $db);",
          "445:         $html .= $_table->countRecords();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "871:     $html .= PMA_getHtmlForExportOptionsSelection($export_type, $multi_values);",
          "873:     $tableLength = /*overload*/mb_strlen($table);",
          "875:         $html .= PMA_getHtmlForExportOptionsRows($db, $table, $unlim_num_rows);",
          "876:     }",
          "",
          "[Removed Lines]",
          "874:     if ($tableLength && empty($num_tables) && ! PMA_Table::isMerge($db, $table)) {",
          "",
          "[Added Lines]",
          "875:     $_table = new PMA_Table($table, $db);",
          "876:     if ($tableLength && empty($num_tables) && ! $_table->isMerge()) {",
          "",
          "---------------"
        ],
        "libraries/export.lib.php||libraries/export.lib.php": [
          "File: libraries/export.lib.php -> libraries/export.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     $views = array();",
          "639:     foreach ($tables as $table) {",
          "643:         if ($is_view) {",
          "644:             $views[] = $table;",
          "645:         }",
          "",
          "[Removed Lines]",
          "642:         $is_view = PMA_Table::isView($db, $table);",
          "",
          "[Added Lines]",
          "640:         $_table = new PMA_Table($table, $db);",
          "643:         $is_view = $_table->isView();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:         if (($whatStrucOrData == 'data'",
          "697:             || $whatStrucOrData == 'structure_and_data')",
          "698:             && in_array($table, $table_data)",
          "700:         ) {",
          "701:             $local_query  = 'SELECT * FROM ' . PMA_Util::backquote($db)",
          "702:                 . '.' . PMA_Util::backquote($table);",
          "",
          "[Removed Lines]",
          "699:             && ! ($is_view || PMA_Table::isMerge($db, $table))",
          "",
          "[Added Lines]",
          "700:             && ! ($is_view || $_table->isMerge())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:         $add_query  = '';",
          "822:     }",
          "825:     if ($whatStrucOrData == 'structure'",
          "826:         || $whatStrucOrData == 'structure_and_data'",
          "827:     ) {",
          "",
          "[Removed Lines]",
          "824:     $is_view = PMA_Table::isView($db, $table);",
          "",
          "[Added Lines]",
          "825:     $_table = new PMA_Table($table, $db);",
          "826:     $is_view = $_table->isView();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "857:     if (($whatStrucOrData == 'data'",
          "858:         || $whatStrucOrData == 'structure_and_data')",
          "860:     ) {",
          "861:         if (! empty($sql_query)) {",
          "",
          "[Removed Lines]",
          "859:         && ! PMA_Table::isMerge($db, $table)",
          "",
          "[Added Lines]",
          "859:     $table = new PMA_Table($table, $db);",
          "862:         && ! $table->isMerge()",
          "",
          "---------------"
        ],
        "libraries/import.lib.php||libraries/import.lib.php": [
          "File: libraries/import.lib.php -> libraries/import.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:         unset($params);",
          "1292:             $message .= sprintf(",
          "1293:                 '<li><a href=\"%s\" title=\"%s\">%s</a> (<a href=\"%s\" title=\"%s\">' . __('Structure') . '</a>) (<a href=\"%s\" title=\"%s\">' . __('Options') . '</a>)</li>',",
          "1294:                 $tbl_url,",
          "",
          "[Removed Lines]",
          "1291:         if (! PMA_Table::isView($db_name, $tables[$i][TBL_NAME])) {",
          "",
          "[Added Lines]",
          "1291:         $_table = new PMA_Table($tables[$i][TBL_NAME], $db_name);",
          "1292:         if (! $_table->isView()) {",
          "",
          "---------------"
        ],
        "libraries/operations.lib.php||libraries/operations.lib.php": [
          "File: libraries/operations.lib.php -> libraries/operations.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:             if ($_REQUEST['what'] != 'nocopy'",
          "",
          "[Removed Lines]",
          "418:         if (PMA_Table::isView($db, $each_table)) {",
          "",
          "[Added Lines]",
          "418:         if ($GLOBALS['dbi']->getTable($db, $each_table)->isView()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:     $sqlContraints = array();",
          "458:     foreach ($tables_full as $each_table => $tmp) {",
          "461:             continue;",
          "462:         }",
          "",
          "[Removed Lines]",
          "460:         if (PMA_Table::isView($db, $each_table)) {",
          "",
          "[Added Lines]",
          "460:         if ($GLOBALS['dbi']->getTable($db, $each_table)->isView()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470:             if ($this_what == 'data') {",
          "471:                 $this_what = 'structure';",
          "472:             }",
          "",
          "[Removed Lines]",
          "469:         if (PMA_Table::isMerge($db, $each_table)) {",
          "",
          "[Added Lines]",
          "469:         $table = new PMA_Table($each_table, $db);",
          "470:         if ($table->isMerge()) {",
          "",
          "---------------"
        ],
        "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php": [
          "File: libraries/plugins/export/ExportSql.class.php -> libraries/plugins/export/ExportSql.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:                 }",
          "243:                 if ($plugin_param['export_type'] == 'table') {",
          "245:                         $drop_clause = '<code>DROP VIEW</code>';",
          "246:                     } else {",
          "247:                         $drop_clause = '<code>DROP TABLE</code>';",
          "",
          "[Removed Lines]",
          "244:                     if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {",
          "",
          "[Added Lines]",
          "244:                     if ($GLOBALS['dbi']->getTable($GLOBALS['db'], $GLOBALS['table'])->isView()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1355:         $schema_create .= $new_crlf;",
          "1359:             $schema_create .= 'DROP TABLE IF EXISTS '",
          "1360:                 . PMA_Util::backquote($table_alias, $sql_backquotes) . ';'",
          "1361:                 . $crlf;",
          "",
          "[Removed Lines]",
          "1358:         if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {",
          "",
          "[Added Lines]",
          "1358:         if (! empty($sql_drop_table) && ! $GLOBALS['dbi']->getTable($db, $table)->isView()) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1991:             && empty($GLOBALS['sql_views_as_tables'])",
          "1992:         ) {",
          "1993:             $head = $this->_possibleCRLF()",
          "",
          "[Removed Lines]",
          "1990:         if (PMA_Table::isView($db, $table)",
          "",
          "[Added Lines]",
          "1990:         $_table = new PMA_Table($table, $db);",
          "1991:         if ($_table->isView()",
          "",
          "---------------"
        ],
        "libraries/plugins/export/ExportXml.class.php||libraries/plugins/export/ExportXml.class.php": [
          "File: libraries/plugins/export/ExportXml.class.php -> libraries/plugins/export/ExportXml.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:                 );",
          "238:                 $tbl =  $result[$table][1];",
          "242:                 if ($is_view) {",
          "243:                     $type = 'view';",
          "",
          "[Removed Lines]",
          "240:                 $is_view = PMA_Table::isView($db, $table);",
          "",
          "[Added Lines]",
          "240:                 $_table = new PMA_Table($table, $db);",
          "241:                 $is_view = $_table->isView();",
          "",
          "---------------"
        ],
        "libraries/relation.lib.php||libraries/relation.lib.php": [
          "File: libraries/relation.lib.php -> libraries/relation.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334:         if ($override_total == true",
          "1335:             || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']",
          "",
          "[Removed Lines]",
          "1332:         $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table, true);",
          "",
          "[Added Lines]",
          "1332:         $the_total   = $GLOBALS['dbi']->getTable($foreign_db, $foreign_table)->countRecords(true);",
          "",
          "---------------"
        ],
        "libraries/sql.lib.php||libraries/sql.lib.php": [
          "File: libraries/sql.lib.php -> libraries/sql.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "831: function PMA_findRealEndOfRows($db, $table)",
          "832: {",
          "834:     $_SESSION['tmpval']['pos'] = PMA_getStartPosToDisplayRow($unlim_num_rows);",
          "836:     return $unlim_num_rows;",
          "",
          "[Removed Lines]",
          "833:     $unlim_num_rows = PMA_Table::countRecords($db, $table, true);",
          "",
          "[Added Lines]",
          "833:     $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1154:         if ($justBrowsing) {",
          "",
          "[Removed Lines]",
          "1156:             $unlim_num_rows = PMA_Table::countRecords(",
          "1157:                 $db,",
          "1158:                 $table,",
          "1159:                 false",
          "1160:             );",
          "",
          "[Added Lines]",
          "1156:             $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1178:             }",
          "1180:         } else {",
          "",
          "[Removed Lines]",
          "1173:                 $unlim_num_rows = PMA_Table::countRecords(",
          "1174:                     $db,",
          "1175:                     $table,",
          "1176:                     true",
          "1177:                 );",
          "",
          "[Added Lines]",
          "1169:                 $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1834:     if ($statement instanceof SqlParser\\Statements\\SelectStatement) {",
          "1835:         if (!empty($statement->expr)) {",
          "1836:             if ($statement->expr[0]->expr === '*') {",
          "1838:             }",
          "1839:         }",
          "1840:     }",
          "",
          "[Removed Lines]",
          "1837:                 $updatableView = PMA_Table::isUpdatableView($db, $table);",
          "",
          "[Added Lines]",
          "1829:                 $_table = new PMA_Table($table, $db);",
          "1830:                 $updatableView = $_table->isUpdatableView();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2181:         $pos = $_SESSION['tmpval']['pos'];",
          "2182:     }",
          "2186:     if ($unlim_num_rows <= $pos && 0 != $pos) {",
          "2187:         $pos = PMA_getStartPosToDisplayRow($unlim_num_rows);",
          "",
          "[Removed Lines]",
          "2184:     $unlim_num_rows = PMA_Table::countRecords($db, $table, true);",
          "",
          "[Added Lines]",
          "2177:     $_table = new PMA_Table($table, $db);",
          "2178:     $unlim_num_rows = $_table->countRecords(true);",
          "",
          "---------------"
        ],
        "libraries/structure.lib.php||libraries/structure.lib.php": [
          "File: libraries/structure.lib.php -> libraries/structure.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1214:         || $current_table['TABLE_TYPE'] == 'SYSTEM VIEW'",
          "1215:     ) {",
          "1221:         $table_is_view = true;",
          "1222:     }",
          "",
          "[Removed Lines]",
          "1217:         $current_table['TABLE_ROWS'] = PMA_Table::countRecords(",
          "1218:             $GLOBALS['db'], $current_table['TABLE_NAME'],",
          "1219:             true, true",
          "1220:         );",
          "",
          "[Added Lines]",
          "1217:         $current_table['TABLE_ROWS'] = $GLOBALS['dbi']",
          "1218:             ->getTable($GLOBALS['db'], $current_table['TABLE_NAME'])",
          "1219:             ->countRecords(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:     $formatted_overhead, $overhead_unit",
          "1249: ) {",
          "1250:     if ($db_is_system_schema) {",
          "1254:     }",
          "1256:     if ($is_show_stats) {",
          "",
          "[Removed Lines]",
          "1251:         $current_table['Rows'] = PMA_Table::countRecords(",
          "1252:             $GLOBALS['db'], $current_table['Name']",
          "1253:         );",
          "",
          "[Added Lines]",
          "1250:         $current_table['Rows'] = $GLOBALS['dbi']",
          "1251:             ->getTable($GLOBALS['db'], $current_table['Name'])",
          "1252:             ->countRecords();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1295:         || !isset($current_table['TABLE_ROWS'])",
          "1296:     ) {",
          "1297:         $current_table['COUNTED'] = true;",
          "1302:     } else {",
          "1303:         $current_table['COUNTED'] = false;",
          "1304:     }",
          "",
          "[Removed Lines]",
          "1298:         $current_table['TABLE_ROWS'] = PMA_Table::countRecords(",
          "1299:             $GLOBALS['db'], $current_table['TABLE_NAME'],",
          "1300:             true, false",
          "1301:         );",
          "",
          "[Added Lines]",
          "1297:         $current_table['TABLE_ROWS'] = $GLOBALS['dbi']",
          "1298:             ->getTable($GLOBALS['db'], $current_table['TABLE_NAME'])",
          "1299:             ->countRecords(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2341:     $max_digits = 3;",
          "",
          "[Removed Lines]",
          "2338:     $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);",
          "",
          "[Added Lines]",
          "2336:     $table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);",
          "2337:     $mergetable = $table->isMerge();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3248:     foreach ($db_objects as $object) {",
          "3249:         $tableObj = new PMA_Table($object, $db);",
          "3252:         if ($isView) {",
          "3253:             $row_class = ($odd1) ? 'odd' : 'even';",
          "3254:             $views .= '<tr class=\"' . $row_class . '\">'",
          "",
          "[Removed Lines]",
          "3251:         $isView = PMA_Table::isView($db, $object);",
          "",
          "[Added Lines]",
          "3250:         $_table = new PMA_Table($object, $db);",
          "3251:         $isView = $_table->isView();",
          "",
          "---------------"
        ],
        "libraries/tbl_info.inc.php||libraries/tbl_info.inc.php": [
          "File: libraries/tbl_info.inc.php -> libraries/tbl_info.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     $pmaString = $GLOBALS['PMA_String'];",
          "61:         $tbl_is_view     = true;",
          "62:         $tbl_storage_engine = __('View');",
          "63:         $show_comment    = null;",
          "",
          "[Removed Lines]",
          "60:     if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {",
          "",
          "[Added Lines]",
          "60:     if ($GLOBALS['dbi']->getTable($GLOBALS['db'], $GLOBALS['table'])->isView()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         : $showtable['Collation'];",
          "78:     if (null === $showtable['Rows']) {",
          "82:     }",
          "83:     $table_info_num_rows = isset($showtable['Rows']) ? $showtable['Rows'] : 0;",
          "84:     $row_format = isset($showtable['Row_format']) ? $showtable['Row_format'] : '';",
          "",
          "[Removed Lines]",
          "79:         $showtable['Rows']   = PMA_Table::countRecords(",
          "80:             $GLOBALS['db'], $showtable['Name'], true",
          "81:         );",
          "",
          "[Added Lines]",
          "79:         $showtable['Rows']   = $GLOBALS['dbi']",
          "80:             ->getTable($GLOBALS['db'], $showtable['Name'])",
          "81:             ->countRecords(true);",
          "",
          "---------------"
        ],
        "libraries/tracking.lib.php||libraries/tracking.lib.php": [
          "File: libraries/tracking.lib.php -> libraries/tracking.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1337:         $GLOBALS['table'],",
          "1338:         $_REQUEST['version'],",
          "1339:         $tracking_set,",
          "1341:     );",
          "1342:     if ($versionCreated) {",
          "1343:         $msg = PMA_Message::success(",
          "",
          "[Removed Lines]",
          "1340:         PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])",
          "",
          "[Added Lines]",
          "1340:         $GLOBALS['dbi']->getTable($GLOBALS['db'], $GLOBALS['table'])->isView()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1370:             $selected_table,",
          "1371:             $_REQUEST['version'],",
          "1372:             $tracking_set,",
          "1374:         );",
          "1375:     }",
          "1376: }",
          "",
          "[Removed Lines]",
          "1373:             PMA_Table::isView($GLOBALS['db'], $selected_table)",
          "",
          "[Added Lines]",
          "1373:             $GLOBALS['dbi']->getTable($GLOBALS['db'], $selected_table)->isView()",
          "",
          "---------------"
        ],
        "tbl_find_replace.php||tbl_find_replace.php": [
          "File: tbl_find_replace.php -> tbl_find_replace.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: require_once 'libraries/common.inc.php';",
          "",
          "[Removed Lines]",
          "15: require_once 'libraries/TableSearch.class.php';",
          "17: $response = PMA_Response::getInstance();",
          "18: $table_search = new PMA_TableSearch($db, $table, \"replace\");",
          "20: $connectionCharSet = $GLOBALS['dbi']->fetchValue(",
          "21:     \"SHOW VARIABLES LIKE 'character_set_connection'\", 0, 1",
          "22: );",
          "23: if (isset($_POST['find'])) {",
          "24:     $preview = $table_search->getReplacePreview(",
          "25:         $_POST['columnIndex'],",
          "26:         $_POST['find'],",
          "27:         $_POST['replaceWith'],",
          "28:         $_POST['useRegex'],",
          "29:         $connectionCharSet",
          "30:     );",
          "31:     $response->addJSON('preview', $preview);",
          "32:     exit;",
          "33: }",
          "35: $header  = $response->getHeader();",
          "36: $scripts = $header->getScripts();",
          "37: $scripts->addFile('tbl_find_replace.js');",
          "40: $htmlOutput  = $table_search->getSecondaryTabs();",
          "42: if (isset($_POST['replace'])) {",
          "43:     $htmlOutput .= $table_search->replace(",
          "44:         $_POST['columnIndex'],",
          "45:         $_POST['findString'],",
          "46:         $_POST['replaceWith'],",
          "47:         $_POST['useRegex'],",
          "48:         $connectionCharSet",
          "49:     );",
          "50:     $htmlOutput .= PMA_Util::getMessage(",
          "51:         __('Your SQL query has been executed successfully.'),",
          "52:         null, 'success'",
          "53:     );",
          "54: }",
          "56: if (! isset($goto)) {",
          "57:     $goto = PMA_Util::getScriptNameForOption(",
          "58:         $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "59:     );",
          "60: }",
          "62: $params = array('db' => $db, 'table' => $table);",
          "63: $err_url = $goto . '?' . PMA_URL_getCommon($params);",
          "65: $htmlOutput .= $table_search->getSelectionForm($goto);",
          "66: $response->addHTML($htmlOutput);",
          "",
          "[Added Lines]",
          "15: include_once 'libraries/tbl_common.inc.php';",
          "16: require_once 'libraries/di/Container.class.php';",
          "17: require_once 'libraries/controllers/TableSearchController.class.php';",
          "19: use PMA\\DI;",
          "21: $container = DI\\Container::getDefaultContainer();",
          "22: $container->factory('PMA\\Controllers\\Table\\TableSearchController');",
          "23: $container->alias('TableSearchController', 'PMA\\Controllers\\Table\\TableSearchController');",
          "25: $dependency_definitions = array(",
          "26:     'searchType' => 'replace',",
          "27:     'url_query' => &$url_query",
          "28: );",
          "31: $controller = $container->get('TableSearchController', $dependency_definitions);",
          "32: $controller->indexAction();",
          "",
          "---------------"
        ],
        "tbl_operations.php||tbl_operations.php": [
          "File: tbl_operations.php -> tbl_operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: if ($reread_info) {",
          "215:     $page_checksum = $checksum = $delay_key_write = 0;",
          "216:     include 'libraries/tbl_info.inc.php';",
          "217: }",
          "",
          "[Removed Lines]",
          "214:     PMA_Table::$cache = array();",
          "",
          "[Added Lines]",
          "214:     $GLOBALS['dbi']->clearTableCache();",
          "",
          "---------------"
        ],
        "tbl_replace.php||tbl_replace.php": [
          "File: tbl_replace.php -> tbl_replace.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:     );",
          "431:     $extra_data['sql_query']",
          "432:         = PMA_Util::getMessage($message, $GLOBALS['display_query']);",
          "",
          "[Removed Lines]",
          "427:     $extra_data['row_count'] = PMA_Table::countRecords(",
          "428:         $_REQUEST['db'], $_REQUEST['table']",
          "429:     );",
          "",
          "[Added Lines]",
          "427:     $_table = new PMA_Table($_REQUEST['table'], $_REQUEST['db']);",
          "428:     $extra_data['row_count'] =",
          "429:     $extra_data['row_count'] = $_table->countRecords();",
          "",
          "---------------"
        ],
        "tbl_select.php||tbl_select.php": [
          "File: tbl_select.php -> tbl_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: require_once 'libraries/common.inc.php';",
          "",
          "[Removed Lines]",
          "16: require_once 'libraries/mysql_charsets.inc.php';",
          "17: require_once 'libraries/TableSearch.class.php';",
          "18: require_once 'libraries/sql.lib.php';",
          "19: require_once 'libraries/bookmark.lib.php';",
          "21: $response = PMA_Response::getInstance();",
          "22: $header   = $response->getHeader();",
          "23: $scripts  = $header->getScripts();",
          "24: $scripts->addFile('makegrid.js');",
          "25: $scripts->addFile('sql.js');",
          "26: $scripts->addFile('tbl_select.js');",
          "27: $scripts->addFile('tbl_change.js');",
          "28: $scripts->addFile('jquery/jquery-ui-timepicker-addon.js');",
          "29: $scripts->addFile('jquery/jquery.uitablefilter.js');",
          "30: $scripts->addFile('gis_data_editor.js');",
          "32: $table_search = new PMA_TableSearch($db, $table, \"normal\");",
          "35: if (isset($_REQUEST['range_search'])) {",
          "36:     $response = PMA_Response::getInstance();",
          "37:     $min_max = $table_search->getColumnMinMax($_REQUEST['column']);",
          "38:     $response->addJSON('column_data', $min_max);",
          "39:     exit;",
          "40: }",
          "45: if (! isset($_POST['columnsToDisplay']) && ! isset($_POST['displayAllColumns'])) {",
          "47:     include_once 'libraries/tbl_common.inc.php';",
          "49:     $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';",
          "53:     include_once 'libraries/tbl_info.inc.php';",
          "55:     if (! isset($goto)) {",
          "56:         $goto = PMA_Util::getScriptNameForOption(",
          "57:             $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "58:         );",
          "59:     }",
          "61:     $err_url   = $goto . PMA_URL_getCommon(array('db' => $db, 'table' => $table));",
          "63:     $response->addHTML($table_search->getSecondaryTabs());",
          "64:     $response->addHTML($table_search->getSelectionForm($goto));",
          "66: } else {",
          "71:     $sql_query = $table_search->buildSqlQuery();",
          "76:     include_once 'libraries/parse_analyze.inc.php';",
          "78:     PMA_executeQueryAndSendQueryResponse(",
          "79:         $analyzed_sql_results, // analyzed_sql_results",
          "80:         false, // is_gotofile",
          "81:         $db, // db",
          "82:         $table, // table",
          "83:         null, // find_real_end",
          "84:         null, // sql_query_for_bookmark",
          "85:         null, // extra_data",
          "86:         null, // message_to_show",
          "87:         null, // message",
          "88:         null, // sql_data",
          "89:         $GLOBALS['goto'], // goto",
          "90:         $pmaThemeImage, // pmaThemeImage",
          "91:         null, // disp_query",
          "92:         null, // disp_message",
          "93:         null, // query_type",
          "94:         $sql_query, // sql_query",
          "95:         null, // selectedTables",
          "96:         null // complete_query",
          "97:     );",
          "98: }",
          "",
          "[Added Lines]",
          "16: include_once 'libraries/tbl_common.inc.php';",
          "17: require_once 'libraries/di/Container.class.php';",
          "18: require_once 'libraries/controllers/TableSearchController.class.php';",
          "20: use PMA\\DI;",
          "22: $container = DI\\Container::getDefaultContainer();",
          "23: $container->factory('PMA\\Controllers\\Table\\TableSearchController');",
          "24: $container->alias('TableSearchController', 'PMA\\Controllers\\Table\\TableSearchController');",
          "27: $dependency_definitions = array(",
          "28:     'searchType' => 'normal',",
          "29:     'url_query' => &$url_query",
          "30: );",
          "33: $controller = $container->get('TableSearchController', $dependency_definitions);",
          "34: $controller->indexAction();",
          "",
          "---------------"
        ],
        "tbl_tracking.php||tbl_tracking.php": [
          "File: tbl_tracking.php -> tbl_tracking.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     );",
          "193: }",
          "196: $html .= PMA_getHtmlForDataDefinitionAndManipulationStatements(",
          "197:     'tbl_tracking.php' . $url_query,",
          "198:     $last_version,",
          "",
          "[Removed Lines]",
          "195: $type = PMA_Table::isView($GLOBALS['db'], $GLOBALS['table']) ? 'view' : 'table';",
          "",
          "[Added Lines]",
          "195: $table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);",
          "196: $type = $table->isView() ? 'view' : 'table';",
          "",
          "---------------"
        ],
        "tbl_zoom_select.php||tbl_zoom_select.php": [
          "File: tbl_zoom_select.php -> tbl_zoom_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: require_once './libraries/common.inc.php';",
          "",
          "[Removed Lines]",
          "15: require_once './libraries/mysql_charsets.inc.php';",
          "16: require_once './libraries/TableSearch.class.php';",
          "17: require_once './libraries/tbl_info.inc.php';",
          "19: $response = PMA_Response::getInstance();",
          "20: $header   = $response->getHeader();",
          "21: $scripts  = $header->getScripts();",
          "22: $scripts->addFile('makegrid.js');",
          "23: $scripts->addFile('sql.js');",
          "24: $scripts->addFile('jqplot/jquery.jqplot.js');",
          "25: $scripts->addFile('jqplot/plugins/jqplot.canvasTextRenderer.js');",
          "26: $scripts->addFile('jqplot/plugins/jqplot.canvasAxisLabelRenderer.js');",
          "27: $scripts->addFile('jqplot/plugins/jqplot.dateAxisRenderer.js');",
          "28: $scripts->addFile('jqplot/plugins/jqplot.highlighter.js');",
          "29: $scripts->addFile('jqplot/plugins/jqplot.cursor.js');",
          "30: $scripts->addFile('canvg/canvg.js');",
          "31: $scripts->addFile('jquery/jquery-ui-timepicker-addon.js');",
          "32: $scripts->addFile('tbl_zoom_plot_jqplot.js');",
          "33: $scripts->addFile('tbl_change.js');",
          "35: $table_search = new PMA_TableSearch($db, $table, \"zoom\");",
          "42: if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {",
          "43:     $extra_data = array();",
          "44:     $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'",
          "45:         . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];",
          "46:     $result = $GLOBALS['dbi']->query(",
          "47:         $row_info_query . \";\", null, PMA_DatabaseInterface::QUERY_STORE",
          "48:     );",
          "49:     $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);",
          "50:     while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {",
          "52:         $i = 0;",
          "53:         foreach ($row as $col => $val) {",
          "54:             if ($fields_meta[$i]->type == 'bit') {",
          "55:                 $row[$col] = PMA_Util::printableBitValue(",
          "56:                     $val, $fields_meta[$i]->length",
          "57:                 );",
          "58:             }",
          "59:             $i++;",
          "60:         }",
          "61:         $extra_data['row_info'] = $row;",
          "62:     }",
          "63:     PMA_Response::getInstance()->addJSON($extra_data);",
          "64:     exit;",
          "65: }",
          "73: if (isset($_REQUEST['change_tbl_info']) && $_REQUEST['change_tbl_info'] == true) {",
          "74:     $response = PMA_Response::getInstance();",
          "75:     $field = $_REQUEST['field'];",
          "76:     if ($field == 'pma_null') {",
          "77:         $response->addJSON('field_type', '');",
          "78:         $response->addJSON('field_collation', '');",
          "79:         $response->addJSON('field_operators', '');",
          "80:         $response->addJSON('field_value', '');",
          "81:         exit;",
          "82:     }",
          "83:     $key = array_search($field, $table_search->getColumnNames());",
          "84:     $properties = $table_search->getColumnProperties($_REQUEST['it'], $key);",
          "85:     $response->addJSON('field_type', htmlspecialchars($properties['type']));",
          "86:     $response->addJSON('field_collation', $properties['collation']);",
          "87:     $response->addJSON('field_operators', $properties['func']);",
          "88:     $response->addJSON('field_value', $properties['value']);",
          "89:     exit;",
          "90: }",
          "93: require_once './libraries/tbl_common.inc.php';",
          "94: $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';",
          "97: require_once './libraries/tbl_info.inc.php';",
          "99: if (! isset($goto)) {",
          "100:     $goto = PMA_Util::getScriptNameForOption(",
          "101:         $GLOBALS['cfg']['DefaultTabTable'], 'table'",
          "102:     );",
          "103: }",
          "105: $err_url   = $goto . PMA_URL_getCommon(array('db' => $db, 'table' => $table));",
          "108: if (!isset($_POST['zoom_submit']) || $_POST['dataLabel'] == '') {",
          "109:     $dataLabel = PMA_getDisplayField($db, $table);",
          "110: } else {",
          "111:     $dataLabel = $_POST['dataLabel'];",
          "112: }",
          "115: $response->addHTML($table_search->getSecondaryTabs());",
          "116: $response->addHTML($table_search->getSelectionForm($goto, $dataLabel));",
          "122: if (isset($_POST['zoom_submit'])",
          "123:     && $_POST['criteriaColumnNames'][0] != 'pma_null'",
          "124:     && $_POST['criteriaColumnNames'][1] != 'pma_null'",
          "125:     && $_POST['criteriaColumnNames'][0] != $_POST['criteriaColumnNames'][1]",
          "126: ) {",
          "128:     $sql_query = $table_search->buildSqlQuery();",
          "129:     $sql_query .= ' LIMIT ' . $_POST['maxPlotLimit'];",
          "132:     $result = $GLOBALS['dbi']->query(",
          "133:         $sql_query . \";\", null, PMA_DatabaseInterface::QUERY_STORE",
          "134:     );",
          "135:     $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);",
          "136:     $data = array();",
          "137:     while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {",
          "140:         $tmpRow = array();",
          "141:         foreach ($row as $val) {",
          "142:             $tmpRow[] = $val;",
          "143:         }",
          "145:         $uniqueCondition = PMA_Util::getUniqueCondition(",
          "146:             $result, // handle",
          "147:             count($table_search->getColumnNames()), // fields_cnt",
          "148:             $fields_meta, // fields_meta",
          "149:             $tmpRow, // row",
          "150:             true, // force_unique",
          "151:             false, // restrict_to_table",
          "152:             null // analyzed_sql_results",
          "153:         );",
          "155:         $row['where_clause'] = $uniqueCondition[0];",
          "157:         $tmpData = array(",
          "158:             $_POST['criteriaColumnNames'][0] =>",
          "159:                 $row[$_POST['criteriaColumnNames'][0]],",
          "160:             $_POST['criteriaColumnNames'][1] =>",
          "161:                 $row[$_POST['criteriaColumnNames'][1]],",
          "162:             'where_clause' => $uniqueCondition[0]",
          "163:         );",
          "164:         $tmpData[$dataLabel] = ($dataLabel) ? $row[$dataLabel] : '';",
          "165:         $data[] = $tmpData;",
          "166:     }",
          "167:     unset($tmpData);",
          "170:     $response->addHTML($table_search->getZoomResultsForm($goto, $data));",
          "171: }",
          "",
          "[Added Lines]",
          "15: include_once 'libraries/tbl_common.inc.php';",
          "16: require_once './libraries/di/Container.class.php';",
          "17: require_once './libraries/controllers/TableSearchController.class.php';",
          "19: use PMA\\DI;",
          "21: $container = DI\\Container::getDefaultContainer();",
          "22: $container->factory('PMA\\Controllers\\Table\\TableSearchController');",
          "23: $container->alias('TableSearchController', 'PMA\\Controllers\\Table\\TableSearchController');",
          "26: $dependency_definitions = array(",
          "27:     'searchType' => 'zoom',",
          "28:     'url_query' => &$url_query",
          "29: );",
          "32: $controller = $container->get('TableSearchController', $dependency_definitions);",
          "33: $controller->indexAction();",
          "",
          "---------------"
        ],
        "test/classes/PMA_Table_test.php||test/classes/PMA_Table_test.php": [
          "File: test/classes/PMA_Table_test.php -> test/classes/PMA_Table_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         $GLOBALS['pma'] = new DataBasePMAMock();",
          "56:         $GLOBALS['pma']->databases = new DataBaseMock();",
          "65:         $sql_isView_true =  \"SELECT TABLE_NAME",
          "66:             FROM information_schema.VIEWS",
          "67:             WHERE TABLE_SCHEMA = 'PMA'",
          "",
          "[Removed Lines]",
          "58:         PMA_Table::$cache[\"PMA\"][\"PMA_BookMark\"] = array(",
          "59:             'ENGINE' => true,",
          "60:             'Create_time' => true,",
          "61:             'TABLE_TYPE' => true,",
          "62:             'Comment' => true,",
          "63:         );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:                 )",
          "209:             );",
          "211:         $databases = array();",
          "212:         $database_name = 'PMA';",
          "213:         $databases[$database_name]['SCHEMA_TABLES'] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:         $dbi->_table_cache[\"PMA\"][\"PMA_BookMark\"] = array(",
          "205:             'ENGINE' => true,",
          "206:             'Create_time' => true,",
          "207:             'TABLE_TYPE' => true,",
          "208:             'Comment' => true,",
          "209:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         );",
          "353:     }",
          "",
          "[Removed Lines]",
          "360:     public function testSetAndGet()",
          "361:     {",
          "362:         $table = new PMA_Table('table1', 'pma_test');",
          "363:         $table->set('production', 'Phpmyadmin');",
          "364:         $table->set('db', 'mysql');",
          "365:         $this->assertEquals(",
          "366:             \"Phpmyadmin\",",
          "367:             $table->get(\"production\")",
          "368:         );",
          "369:         $this->assertEquals(",
          "370:             \"mysql\",",
          "371:             $table->get(\"db\")",
          "372:         );",
          "373:         $this->assertEquals(",
          "374:             null,",
          "375:             $table->get(\"key_not_existed\")",
          "376:         );",
          "377:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "443:     public function testIsView()",
          "444:     {",
          "445:         $this->assertEquals(",
          "446:             false,",
          "448:         );",
          "451:         $this->assertEquals(",
          "452:             true,",
          "454:         );",
          "455:         $this->assertEquals(",
          "456:             false,",
          "458:         );",
          "459:     }",
          "",
          "[Removed Lines]",
          "447:             PMA_Table::isView()",
          "453:             PMA_Table::isView('PMA', 'PMA_BookMark')",
          "457:             PMA_Table::isView('PMA', 'PMA_BookMark_2')",
          "",
          "[Added Lines]",
          "421:         $table = new PMA_Table(null, null);",
          "424:             $table->isView()",
          "428:         $table = new PMA_Table('PMA_BookMark', 'PMA');",
          "431:             $table->isView()",
          "434:         $table = new PMA_Table('PMA_BookMark_2', 'PMA');",
          "437:             $table->isView()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "592:     public function testIsUpdatableView()",
          "593:     {",
          "594:         $this->assertEquals(",
          "595:             false,",
          "597:         );",
          "600:         $this->assertEquals(",
          "601:             true,",
          "603:         );",
          "604:         $this->assertEquals(",
          "605:             false,",
          "607:         );",
          "608:     }",
          "",
          "[Removed Lines]",
          "596:             PMA_Table::isUpdatableView()",
          "602:             PMA_Table::isUpdatableView('PMA', 'PMA_BookMark')",
          "606:             PMA_Table::isUpdatableView('PMA', 'PMA_BookMark_2')",
          "",
          "[Added Lines]",
          "574:         $table = new PMA_Table(null, null);",
          "577:             $table->isUpdatableView()",
          "581:         $table = new PMA_Table('PMA_BookMark', 'PMA');",
          "584:             $table->isUpdatableView()",
          "587:         $table = new PMA_Table('PMA_BookMark_2', 'PMA');",
          "590:             $table->isUpdatableView()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "615:     public function testIsMerge()",
          "616:     {",
          "661:     }",
          "",
          "[Removed Lines]",
          "617:         $this->assertEquals(",
          "618:             false,",
          "619:             PMA_Table::isMerge()",
          "620:         );",
          "623:         $result = PMA_Table::isMerge('PMA', 'PMA_BookMark');",
          "624:         $this->assertEquals(",
          "625:             '',",
          "626:             $result",
          "627:         );",
          "629:         $table = 'PMA_BookMark';",
          "630:         $db = 'PMA';",
          "631:         PMA_Table::$cache[$db][$table] = array('table_name' => \"PMA_BookMark\");",
          "632:         $result = PMA_Table::isMerge($db, $table);",
          "633:         $this->assertEquals(",
          "634:             false,",
          "635:             $result",
          "636:         );",
          "638:         PMA_Table::$cache[$db][$table] = array('ENGINE' => \"MERGE\");",
          "639:         $result = PMA_Table::isMerge($db, $table);",
          "640:         $this->assertEquals(",
          "641:             true,",
          "642:             $result",
          "643:         );",
          "645:         unset(PMA_Table::$cache[$db][$table]);",
          "646:         PMA_Table::$cache[$db][$table] = array('ENGINE' => \"MRG_MYISAM\");",
          "647:         $result = PMA_Table::isMerge($db, $table);",
          "648:         $this->assertEquals(",
          "649:             true,",
          "650:             $result",
          "651:         );",
          "653:         unset(PMA_Table::$cache[$db][$table]);",
          "655:         PMA_Table::$cache[$db][$table] = array('ENGINE' => \"ISDB\");",
          "656:         $result = PMA_Table::isMerge($db, $table);",
          "657:         $this->assertEquals(",
          "658:             false,",
          "659:             $result",
          "660:         );",
          "",
          "[Added Lines]",
          "601:         $this->markTestIncomplete('Not yet implemented!');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "859:     public function testCountRecords()",
          "860:     {",
          "871:     }",
          "",
          "[Removed Lines]",
          "861:         $table = 'PMA_BookMark';",
          "862:         $db = 'PMA';",
          "863:         PMA_Table::$cache[$db][$table] = array('Comment' => \"Comment222\");",
          "865:         $return = PMA_Table::countRecords($db, $table, false, true);",
          "866:         $expect = 20;",
          "867:         $this->assertEquals(",
          "868:             $expect,",
          "869:             $return",
          "870:         );",
          "",
          "[Added Lines]",
          "802:         $this->markTestIncomplete('Not yet implemented!');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "924:         $move = true;",
          "925:         $mode = \"one_table\";",
          "927:         $_REQUEST['drop_if_exists'] = true;",
          "929:         $return = PMA_Table::moveCopy(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:         $GLOBALS['dbi']->expects($this->any())->method('getTable')",
          "860:             ->will($this->returnValue(new PMA_Table($target_table, $target_db)));",
          "",
          "---------------"
        ],
        "test/classes/plugin/export/PMA_ExportSql_test.php||test/classes/plugin/export/PMA_ExportSql_test.php": [
          "File: test/classes/plugin/export/PMA_ExportSql_test.php -> test/classes/plugin/export/PMA_ExportSql_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1244:             ->with('res')",
          "1245:             ->will($this->returnValue($row));",
          "1247:         $GLOBALS['dbi'] = $dbi;",
          "1248:         $GLOBALS['cfg']['Server']['DisableIS'] = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1247:         $dbi->expects($this->any())",
          "1248:             ->method('getTable')",
          "1249:             ->will($this->returnValue(new PMA_Table('table', 'db')));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:             ->with('res')",
          "1417:             ->will($this->returnValue($row));",
          "1419:         $GLOBALS['dbi'] = $dbi;",
          "1420:         $GLOBALS['cfg']['Server']['DisableIS'] = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1423:         $dbi->expects($this->any())",
          "1424:             ->method('getTable')",
          "1425:             ->will($this->returnValue(new PMA_Table('table', 'db')));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1529:             ->method('getError')",
          "1530:             ->will($this->returnValue('error occurred'));",
          "1532:         $GLOBALS['dbi'] = $dbi;",
          "1533:         $GLOBALS['cfg']['Server']['DisableIS'] = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1540:         $dbi->expects($this->any())",
          "1541:             ->method('getTable')",
          "1542:             ->will($this->returnValue(new PMA_Table('table', 'db')));",
          "",
          "---------------"
        ],
        "test/libraries/PMA_display_export_test.php||test/libraries/PMA_display_export_test.php": [
          "File: test/libraries/PMA_display_export_test.php -> test/libraries/PMA_display_export_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:         $num_tables_str = \"10\";",
          "140:         $unlim_num_rows_str = \"unlim_num_rows_str\";",
          "141:         $single_table = \"single_table\";",
          "144:         $columns_info = array(",
          "145:             'test_column1' => array(",
          "",
          "[Removed Lines]",
          "142:         PMA_Table::$cache[$db][$table]['ENGINE'] = \"MERGE\";",
          "",
          "[Added Lines]",
          "142:         $GLOBALS['dbi']->cacheTableContent(\"${db}.${table}.ENGINE\", 'MERGE');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01740a54f7d30a129d291728d3b2c248eb83eaa5",
      "candidate_info": {
        "commit_hash": "01740a54f7d30a129d291728d3b2c248eb83eaa5",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/01740a54f7d30a129d291728d3b2c248eb83eaa5",
        "files": [
          "tbl_zoom_select.php"
        ],
        "message": "Fix typo\n\nSigned-off-by: Marc Delisle <marc@infomarc.info>",
        "before_after_code_files": [
          "tbl_zoom_select.php||tbl_zoom_select.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ],
          "candidate": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ]
        }
      },
      "candidate_diff": {
        "tbl_zoom_select.php||tbl_zoom_select.php": [
          "File: tbl_zoom_select.php -> tbl_zoom_select.php"
        ]
      }
    },
    {
      "candidate_hash": "c34cf9ff29e47618fc788d1fce8087375744705a",
      "candidate_info": {
        "commit_hash": "c34cf9ff29e47618fc788d1fce8087375744705a",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/c34cf9ff29e47618fc788d1fce8087375744705a",
        "files": [
          "libraries/DisplayResults.class.php",
          "libraries/Util.class.php",
          "libraries/central_columns.lib.php",
          "libraries/insert_edit.lib.php",
          "libraries/normalization.lib.php",
          "libraries/plugins/export/ExportSql.class.php",
          "libraries/sql-parser/src/Builder.php",
          "libraries/sql-parser/src/Fragments/FieldFragment.php",
          "libraries/sql-parser/src/Parser.php",
          "libraries/sql-parser/src/Statement.php",
          "libraries/sql-parser/src/Statements/CreateStatement.php",
          "libraries/sql-parser/src/TokensList.php",
          "libraries/sql.lib.php",
          "tbl_zoom_select.php"
        ],
        "message": "More refactoring. Updated sql-parser library.\n\nSigned-off-by: Dan Ungureanu <udan1107@gmail.com>",
        "before_after_code_files": [
          "libraries/DisplayResults.class.php||libraries/DisplayResults.class.php",
          "libraries/Util.class.php||libraries/Util.class.php",
          "libraries/central_columns.lib.php||libraries/central_columns.lib.php",
          "libraries/insert_edit.lib.php||libraries/insert_edit.lib.php",
          "libraries/normalization.lib.php||libraries/normalization.lib.php",
          "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php",
          "libraries/sql-parser/src/Builder.php||libraries/sql-parser/src/Builder.php",
          "libraries/sql-parser/src/Fragments/FieldFragment.php||libraries/sql-parser/src/Fragments/FieldFragment.php",
          "libraries/sql-parser/src/Parser.php||libraries/sql-parser/src/Parser.php",
          "libraries/sql-parser/src/Statement.php||libraries/sql-parser/src/Statement.php",
          "libraries/sql-parser/src/Statements/CreateStatement.php||libraries/sql-parser/src/Statements/CreateStatement.php",
          "libraries/sql-parser/src/TokensList.php||libraries/sql-parser/src/TokensList.php",
          "libraries/sql.lib.php||libraries/sql.lib.php",
          "tbl_zoom_select.php||tbl_zoom_select.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ],
          "candidate": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/DisplayResults.class.php||libraries/DisplayResults.class.php": [
          "File: libraries/DisplayResults.class.php -> libraries/DisplayResults.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2779:                 list($where_clause, $clause_is_unique, $condition_array)",
          "2780:                     = PMA_Util::getUniqueCondition(",
          "2787:                     );",
          "2788:                 $whereClauseMap[$row_no][$this->__get('table')] = $where_clause;",
          "2789:                 $this->__set('whereClauseMap', $whereClauseMap);",
          "",
          "[Removed Lines]",
          "2781:                         $dt_result,",
          "2782:                         $this->__get('fields_cnt'),",
          "2783:                         $this->__get('fields_meta'),",
          "2784:                         $row,",
          "2785:                         false,",
          "2786:                         $this->__get('table')",
          "",
          "[Added Lines]",
          "2781:                         $dt_result, // handle",
          "2782:                         $this->__get('fields_cnt'), // fields_cnt",
          "2783:                         $this->__get('fields_meta'), // fields_meta",
          "2784:                         $row, // row",
          "2785:                         false, // force_unique",
          "2786:                         $this->__get('table'), // restrict_to_table",
          "2787:                         $analyzed_sql_results // analyzed_sql_results",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3134:             if (! isset($whereClauseMap[$row_no][$meta->orgtable])) {",
          "3135:                 $unique_conditions = PMA_Util::getUniqueCondition(",
          "3142:                 );",
          "3143:                 $whereClauseMap[$row_no][$meta->orgtable] = $unique_conditions[0];",
          "3144:             }",
          "",
          "[Removed Lines]",
          "3136:                     $dt_result,",
          "3137:                     $this->__get('fields_cnt'),",
          "3138:                     $this->__get('fields_meta'),",
          "3139:                     $row,",
          "3140:                     false,",
          "3141:                     $meta->orgtable",
          "",
          "[Added Lines]",
          "3137:                     $dt_result, // handle",
          "3138:                     $this->__get('fields_cnt'), // fields_cnt",
          "3139:                     $this->__get('fields_meta'), // fields_meta",
          "3140:                     $row, // row",
          "3141:                     false, // force_unique",
          "3142:                     $meta->orgtable, // restrict_to_table",
          "3143:                     $analyzed_sql_results // analyzed_sql_results",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4849:         list($where_clause, $clause_is_unique, $condition_array)",
          "4850:             = PMA_Util::getUniqueCondition(",
          "4855:             );",
          "4856:         unset($where_clause, $condition_array);",
          "",
          "[Removed Lines]",
          "4851:                 $dt_result,",
          "4852:                 $this->__get('fields_cnt'),",
          "4853:                 $this->__get('fields_meta'),",
          "4854:                 $row",
          "",
          "[Added Lines]",
          "4853:                 $dt_result, // handle",
          "4854:                 $this->__get('fields_cnt'), // fields_cnt",
          "4855:                 $this->__get('fields_meta'), // fields_meta",
          "4856:                 $row, // row",
          "4857:                 false, // force_unique",
          "4858:                 false, // restrict_to_table",
          "4859:                 $analyzed_sql_results // analyzed_sql_results",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5357:             )",
          "5358:             . '\">';",
          "5370:                 }",
          "5371:             }",
          "5372:         }",
          "",
          "[Removed Lines]",
          "5360:         if (!empty($analyzed_sql_results['statement'])) {",
          "5361:             $statement = $analyzed_sql_results['statement'];",
          "5362:             if (!empty($statement->expr)) {",
          "5363:                 foreach ($statement->expr as $expr) {",
          "5364:                     if ((empty($expr->alias)) || (empty($expr->column))) {",
          "5365:                         continue;",
          "5366:                     }",
          "5367:                     if (strcasecmp($meta->name, $expr->alias) == 0) {",
          "5368:                         $meta->name = $expr->column;",
          "5369:                     }",
          "",
          "[Added Lines]",
          "5365:         if (!empty($analyzed_sql_results['statement']->expr)) {",
          "5366:             foreach ($analyzed_sql_results['statement']->expr as $expr) {",
          "5367:                 if ((empty($expr->alias)) || (empty($expr->column))) {",
          "5368:                     continue;",
          "5369:                 }",
          "5370:                 if (strcasecmp($meta->name, $expr->alias) == 0) {",
          "5371:                     $meta->name = $expr->column;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5415:                     'table' => $map[$meta->name][0],",
          "5416:                     'pos'   => '0',",
          "5417:                     'sql_query' => 'SELECT * FROM '",
          "5424:                         . ' WHERE '",
          "5428:                         . $where_comparison,",
          "5429:                 );",
          "",
          "[Removed Lines]",
          "5418:                         . PMA_Util::backquote(",
          "5419:                             $map[$meta->name][3]",
          "5420:                         ) . '.'",
          "5421:                         . PMA_Util::backquote(",
          "5422:                             $map[$meta->name][0]",
          "5423:                         )",
          "5425:                         . PMA_Util::backquote(",
          "5426:                             $map[$meta->name][1]",
          "5427:                         )",
          "",
          "[Added Lines]",
          "5420:                         . PMA_Util::backquote($map[$meta->name][3]) . '.'",
          "5421:                         . PMA_Util::backquote($map[$meta->name][0])",
          "5423:                         . PMA_Util::backquote($map[$meta->name][1])",
          "",
          "---------------"
        ],
        "libraries/Util.class.php||libraries/Util.class.php": [
          "File: libraries/Util.class.php -> libraries/Util.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2155:     public static function getUniqueCondition(",
          "2156:         $handle, $fields_cnt, $fields_meta, $row, $force_unique = false,",
          "2158:     ) {",
          "2159:         $primary_key          = '';",
          "2160:         $unique_key           = '';",
          "",
          "[Removed Lines]",
          "2157:         $restrict_to_table = false",
          "",
          "[Added Lines]",
          "2159:         $restrict_to_table = false, $analyzed_sql_results = null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2175:             if (! isset($meta->orgname) || ! /*overload*/mb_strlen($meta->orgname)) {",
          "2176:                 $meta->orgname = $meta->name;",
          "2188:                             break;",
          "2191:                 }",
          "2192:             }",
          "",
          "[Removed Lines]",
          "2178:                 if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2179:                     && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])",
          "2180:                 ) {",
          "2181:                     foreach (",
          "2182:                         $GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr",
          "2183:                     ) {",
          "2186:                         if ((string)$select_expr['alias'] === (string)$meta->name) {",
          "2187:                             $meta->orgname = $select_expr['column'];",
          "2189:                         } // end if",
          "2190:                     } // end foreach",
          "",
          "[Added Lines]",
          "2180:                 if (!empty($analyzed_sql_results['statement']->expr)) {",
          "2181:                     foreach ($analyzed_sql_results['statement']->expr as $expr) {",
          "2182:                         if ((empty($expr->alias)) || (empty($expr->column))) {",
          "2183:                             continue;",
          "2184:                         }",
          "2185:                         if (strcasecmp($meta->name, $expr->alias) == 0) {",
          "2186:                             $meta->orgname = $expr->column;",
          "2188:                         }",
          "2189:                     }",
          "",
          "---------------"
        ],
        "libraries/central_columns.lib.php||libraries/central_columns.lib.php": [
          "File: libraries/central_columns.lib.php -> libraries/central_columns.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:                 'extracted_columnspec' => array(),",
          "954:                 'columnMeta' => $row['col_attribute'],",
          "955:                 'submit_attribute' => false,",
          "957:             ))",
          "958:         . '</td>';",
          "959:     $tableHtml .=",
          "",
          "[Removed Lines]",
          "956:                 'analyzed_sql' => null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1084:                 ),",
          "1085:                 'columnMeta' => array(),",
          "1086:                 'submit_attribute' => false,",
          "1088:             ))",
          "1089:         . '</td>';",
          "1090:     $tableHtml .=",
          "",
          "[Removed Lines]",
          "1087:                 'analyzed_sql' => null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1311:                 'extracted_columnspec' => array(),",
          "1312:                 'columnMeta' => array(),",
          "1313:                 'submit_attribute' => false,",
          "1315:             ))",
          "1316:         . '</td>'",
          "1317:         . '<td class=\"nowrap\" name=\"col_isNull\">'",
          "",
          "[Removed Lines]",
          "1314:                 'analyzed_sql' => null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraries/insert_edit.lib.php||libraries/insert_edit.lib.php": [
          "File: libraries/insert_edit.lib.php -> libraries/insert_edit.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         list($unique_condition, $tmp_clause_is_unique)",
          "136:             = PMA_Util::getUniqueCondition(",
          "138:             );",
          "140:         if (! empty($unique_condition)) {",
          "",
          "[Removed Lines]",
          "137:                 $result[$key_id], count($meta), $meta, $rows[$key_id], true",
          "",
          "[Added Lines]",
          "137:                 $result[$key_id], // handle",
          "138:                 count($meta), // fields_cnt",
          "139:                 $meta, // fields_meta",
          "140:                 $rows[$key_id], // row",
          "141:                 true, // force_unique",
          "142:                 false, // restrict_to_table",
          "143:                 null // analyzed_sql_results",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1804:     list($unique_condition, $clause_is_unique)",
          "1805:         = PMA_Util::getUniqueCondition(",
          "1807:         );",
          "1808:     if (! empty($unique_condition)) {",
          "1809:         $_SESSION['edit_next'] = $unique_condition;",
          "",
          "[Removed Lines]",
          "1806:             $res, count($meta), $meta, $row, true",
          "",
          "[Added Lines]",
          "1812:             $res, // handle",
          "1813:             count($meta), // fields_cnt",
          "1814:             $meta, // fields_meta",
          "1815:             $row, // row",
          "1816:             true, // force_unique",
          "1817:             false, // restrict_to_table",
          "1818:             null // analyzed_sql_results",
          "",
          "---------------"
        ],
        "libraries/normalization.lib.php||libraries/normalization.lib.php": [
          "File: libraries/normalization.lib.php -> libraries/normalization.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:             'length' => '',",
          "96:             'extracted_columnspec' => array(),",
          "97:             'submit_attribute' => null,",
          "99:             'comments_map' => $comments_map,",
          "100:             'fields_meta' => null,",
          "101:             'is_backup' => true,",
          "",
          "[Removed Lines]",
          "98:             'analyzed_sql' => null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libraries/plugins/export/ExportSql.class.php||libraries/plugins/export/ExportSql.class.php": [
          "File: libraries/plugins/export/ExportSql.class.php -> libraries/plugins/export/ExportSql.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2340:                 list($tmp_unique_condition, $tmp_clause_is_unique)",
          "2341:                     = PMA_Util::getUniqueCondition(",
          "2346:                     );",
          "2347:                 $insert_line .= ' WHERE ' . $tmp_unique_condition;",
          "2348:                 unset($tmp_unique_condition, $tmp_clause_is_unique);",
          "",
          "[Removed Lines]",
          "2342:                         $result,",
          "2343:                         $fields_cnt,",
          "2344:                         $fields_meta,",
          "2345:                         $row",
          "",
          "[Added Lines]",
          "2342:                         $result, // handle",
          "2343:                         $fields_cnt, // fields_cnt",
          "2344:                         $fields_meta, // fields_meta",
          "2345:                         $row, // row",
          "2346:                         false, // force_unique",
          "2347:                         false, // restrict_to_table",
          "2348:                         null // analyzed_sql_results",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Builder.php||libraries/sql-parser/src/Builder.php": [
          "File: libraries/sql-parser/src/Builder.php -> libraries/sql-parser/src/Builder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:                 $this->query .= $class::build($statement->$field) . ' ';",
          "81:             }",
          "82:         }",
          "83:     }",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:         return $this->qeury;",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Fragments/FieldFragment.php||libraries/sql-parser/src/Fragments/FieldFragment.php": [
          "File: libraries/sql-parser/src/Fragments/FieldFragment.php -> libraries/sql-parser/src/Fragments/FieldFragment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:             if (($token->type === Token::TYPE_KEYWORD) && ($token->flags & Token::FLAG_KEYWORD_RESERVED)) {",
          "179:                 if ($brackets === 0) {",
          "181:                         $alias = 2;",
          "182:                         continue;",
          "183:                     }",
          "",
          "[Removed Lines]",
          "180:                     if ($token->value === 'AS') {",
          "",
          "[Added Lines]",
          "180:                     if ((empty($options['noAlias'])) && ($token->value === 'AS')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:             }",
          "196:             if ($token->type === Token::TYPE_OPERATOR) {",
          "197:                 if ($token->value === '(') {",
          "198:                     ++$brackets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:                 if ((!empty($options['noBrackets'])) &&",
          "198:                     (($token->value === '(') || ($token->value === ')'))",
          "199:                 ) {",
          "200:                     break;",
          "201:                 }",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Parser.php||libraries/sql-parser/src/Parser.php": [
          "File: libraries/sql-parser/src/Parser.php -> libraries/sql-parser/src/Parser.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:             $stmt = new $class();",
          "346:             $stmt->first = $prevLastIdx + 1;",
          "353:             $stmt->last = $list->idx;",
          "",
          "[Removed Lines]",
          "349:             $stmt->parse($this, $this->list);",
          "",
          "[Added Lines]",
          "343:             $stmt->parse($this, $this->list);",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Statement.php||libraries/sql-parser/src/Statement.php": [
          "File: libraries/sql-parser/src/Statement.php -> libraries/sql-parser/src/Statement.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     public $last;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     public function __construct(Parser $parser = null, TokensList $list = null)",
          "73:     {",
          "74:         if (($parser !== null) && ($list !== null)) {",
          "75:             $this->parse($parser, $list);",
          "76:         }",
          "77:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     public function parse(Parser $parser, TokensList $list)",
          "75:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         $this->first = $list->idx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:             $this->after($parser, $list, $token);",
          "163:         }",
          "166:     }",
          "",
          "[Removed Lines]",
          "165:         --$list->idx; // Go back to last used token.",
          "",
          "[Added Lines]",
          "182:         $this->last = --$list->idx; // Go back to last used token.",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Statements/CreateStatement.php||libraries/sql-parser/src/Statements/CreateStatement.php": [
          "File: libraries/sql-parser/src/Statements/CreateStatement.php -> libraries/sql-parser/src/Statements/CreateStatement.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use SqlParser\\Statement;",
          "13: use SqlParser\\Token;",
          "14: use SqlParser\\TokensList;",
          "16: use SqlParser\\Fragments\\DataTypeFragment;",
          "17: use SqlParser\\Fragments\\FieldDefFragment;",
          "18: use SqlParser\\Fragments\\OptionsFragment;",
          "19: use SqlParser\\Fragments\\ParamDefFragment;",
          "",
          "[Removed Lines]",
          "15: use SqlParser\\Fragments\\CreateDefFragment;",
          "",
          "[Added Lines]",
          "15: use SqlParser\\Fragments\\ArrayFragment;",
          "18: use SqlParser\\Fragments\\FieldFragment;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         'USER'                          => 1,",
          "50:         'VIEW'                          => 1,",
          "52:         'TEMPORARY'                     => 2,",
          "53:         'IF NOT EXISTS'                 => 3,",
          "55:     );",
          "62:     public $name;",
          "72:     public $entityOptions;",
          "79:     public $fields;",
          "86:     public $return;",
          "",
          "[Removed Lines]",
          "54:         'DEFINER'                       => array(4, 'var'),",
          "",
          "[Added Lines]",
          "58:         'DEFINER'                       => array(2, 'var'),",
          "61:         'OR REPLACE'                    => array(3, 'var'),",
          "62:         'ALGORITHM'                     => array(4, 'var'),",
          "63:         'DEFINER'                       => array(5, 'var'),",
          "64:         'SQL SECURITY'                  => array(6, 'var'),",
          "65:     );",
          "72:     public static $TABLE_OPTIONS = array(",
          "73:         'ENGINE'                        => array(1, 'var'),",
          "74:         'AUTO_INCREMENT'                => array(2, 'var'),",
          "75:         'AVG_ROW_LENGTH'                => array(3, 'var'),",
          "76:         'DEFAULT CHARACTER SET'         => array(4, 'var'),",
          "77:         'CHARACTER SET'                 => array(4, 'var'),",
          "78:         'CHECKSUM'                      => array(5, 'var'),",
          "79:         'DEFAULT COLLATE'               => array(5, 'var'),",
          "80:         'COLLATE'                       => array(6, 'var'),",
          "81:         'COMMENT'                       => array(7, 'var'),",
          "82:         'CONNECTION'                    => array(8, 'var'),",
          "83:         'DATA DIRECTORY'                => array(9, 'var'),",
          "84:         'DELAY_KEY_WRITE'               => array(10, 'var'),",
          "85:         'INDEX DIRECTORY'               => array(11, 'var'),",
          "86:         'INSERT_METHOD'                 => array(12, 'var'),",
          "87:         'KEY_BLOCK_SIZE'                => array(13, 'var'),",
          "88:         'MAX_ROWS'                      => array(14, 'var'),",
          "89:         'MIN_ROWS'                      => array(15, 'var'),",
          "90:         'PACK_KEYS'                     => array(16, 'var'),",
          "91:         'PASSWORD'                      => array(17, 'var'),",
          "92:         'ROW_FORMAT'                    => array(18, 'var'),",
          "93:         'TABLESPACE'                    => array(19, 'var'),",
          "94:         'STORAGE'                       => array(20, 'var'),",
          "95:         'UNION'                         => array(21, 'var'),",
          "96:     );",
          "103:     public static $FUNC_OPTIONS = array(",
          "104:         'COMMENT'                      => array(1, 'var'),",
          "105:         'LANGUAGE SQL'                 => 2,",
          "106:         'DETERMINISTIC'                => 3,",
          "107:         'NOT DETERMINISTIC'            => 3,",
          "108:         'CONSTAINS SQL'                => 4,",
          "109:         'NO SQL'                       => 4,",
          "110:         'READS SQL DATA'               => 4,",
          "111:         'MODIFIES SQL DATA'            => 4,",
          "112:         'SQL SEQURITY DEFINER'         => array(5, 'var'),",
          "153:     public $select;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:     public $parameters;",
          "100:     public $body;",
          "114:     {",
          "117:         if ($this->options->has('TABLE')) {",
          "119:             $this->fields = FieldDefFragment::parse($parser, $list);",
          "120:             ++$list->idx;",
          "121:             $this->entityOptions = OptionsFragment::parse(",
          "122:                 $parser,",
          "123:                 $list,",
          "125:             );",
          "126:         } elseif (($this->options->has('PROCEDURE'))",
          "127:             || ($this->options->has('FUNCTION'))",
          "128:         ) {",
          "130:             $this->parameters = ParamDefFragment::parse($parser, $list);",
          "131:             if ($this->options->has('FUNCTION')) {",
          "132:                 $token = $list->getNextOfType(Token::TYPE_KEYWORD);",
          "",
          "[Removed Lines]",
          "113:     public function before(Parser $parser, TokensList $list, Token $token)",
          "115:         ++$list->idx;",
          "116:         $this->name = CreateDefFragment::parse($parser, $list);",
          "118:             ++$list->idx;",
          "124:                 CreateDefFragment::$TABLE_OPTIONS",
          "129:             ++$list->idx;",
          "",
          "[Added Lines]",
          "189:     public function parse(Parser $parser, TokensList $list)",
          "191:         ++$list->idx; // Skipping `CREATE`.",
          "194:         $this->options = OptionsFragment::parse($parser, $list, static::$OPTIONS);",
          "195:         ++$list->idx; // Skipping last option.",
          "198:         $this->name = FieldFragment::parse(",
          "199:             $parser,",
          "200:             $list,",
          "201:             array(",
          "202:                 'skipColumn' => true,",
          "203:                 'noBrackets' => true,",
          "204:                 'noAlias' => true,",
          "205:             )",
          "206:         );",
          "207:         ++$list->idx; // Skipping field.",
          "215:                 static::$TABLE_OPTIONS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:             $this->entityOptions = OptionsFragment::parse(",
          "148:                 $parser,",
          "149:                 $list,",
          "151:             );",
          "152:             ++$list->idx;",
          "153:             $this->body = array();",
          "",
          "[Removed Lines]",
          "150:                 CreateDefFragment::$FUNC_OPTIONS",
          "",
          "[Added Lines]",
          "240:                 static::$FUNC_OPTIONS",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:                     break;",
          "161:                 }",
          "162:             }",
          "163:         }",
          "164:     }",
          "165: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:         } else if ($this->options->has('VIEW')) {",
          "254:             $token = $list->getNext();",
          "257:             if (($token->type === Token::TYPE_OPERATOR) && ($token->value === '(')) {",
          "258:                 --$list->idx; // getNext() also goes forward one field.",
          "259:                 $this->fields = ArrayFragment::parse($parser, $list);",
          "260:                 ++$list->idx; // Skipping last token from the array.",
          "261:                 $token = $list->getNext();",
          "262:             }",
          "265:             $this->select = new SelectStatement($parser, $list);",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/TokensList.php||libraries/sql-parser/src/TokensList.php": [
          "File: libraries/sql-parser/src/TokensList.php -> libraries/sql-parser/src/TokensList.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     }",
          "59:     public function getNext()",
          "60:     {",
          "63:         }",
          "64:         return null;",
          "65:     }",
          "",
          "[Removed Lines]",
          "61:         if ($this->idx < $this->count) {",
          "62:             return $this->tokens[$this->idx++];",
          "",
          "[Added Lines]",
          "62:         for (; $this->idx < $this->count; ++$this->idx) {",
          "63:             if (($this->tokens[$this->idx]->type !== Token::TYPE_WHITESPACE)",
          "64:                 && ($this->tokens[$this->idx]->type !== Token::TYPE_COMMENT)) {",
          "65:                 return $this->tokens[$this->idx++];",
          "66:             }",
          "",
          "---------------"
        ],
        "libraries/sql.lib.php||libraries/sql.lib.php": [
          "File: libraries/sql.lib.php -> libraries/sql.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:         && count($analyzed_sql_results['select_tables'] <= 1)",
          "668:         && (empty($analyzed_sql_results['statement']->where)",
          "669:             || (count($analyzed_sql_results['statement']->where) == 1",
          "671:         && empty($analyzed_sql_results['group'])",
          "672:         && ! isset($find_real_end)",
          "673:         && ! $analyzed_sql_results['is_subquery']",
          "",
          "[Removed Lines]",
          "670:                 && $analyzed_sql_results['statement']->where[0]->condition ==='1'))",
          "",
          "[Added Lines]",
          "670:                 && $analyzed_sql_results['statement']->where[0]->expr ==='1'))",
          "",
          "---------------"
        ],
        "tbl_zoom_select.php||tbl_zoom_select.php": [
          "File: tbl_zoom_select.php -> tbl_zoom_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         }",
          "145:         $uniqueCondition = PMA_Util::getUniqueCondition(",
          "148:         );",
          "150:         $row['where_clause'] = $uniqueCondition[0];",
          "",
          "[Removed Lines]",
          "146:             $result, count($table_search->getColumnNames()), $fields_meta, $tmpRow,",
          "147:             true",
          "",
          "[Added Lines]",
          "146:             $result, // handle",
          "147:             count($table_search->getColumnNames()), // fields_cnt",
          "148:             $fields_meta, // fields_meta",
          "149:             $tmpRow, // row",
          "150:             true, // force_unique",
          "151:             false, // restrict_to_table",
          "152:             null // analyzed_sql_results",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d978643fc28bd036c3fe672efb017803a7ce5dc7",
      "candidate_info": {
        "commit_hash": "d978643fc28bd036c3fe672efb017803a7ce5dc7",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/d978643fc28bd036c3fe672efb017803a7ce5dc7",
        "files": [
          "tbl_zoom_select.php"
        ],
        "message": "Fix code execution path warning\n\nSigned-off-by: Marc Delisle <marc@infomarc.info>",
        "before_after_code_files": [
          "tbl_zoom_select.php||tbl_zoom_select.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ],
          "candidate": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ]
        }
      },
      "candidate_diff": {
        "tbl_zoom_select.php||tbl_zoom_select.php": [
          "File: tbl_zoom_select.php -> tbl_zoom_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:         $sql_query . \";\", null, PMA_DatabaseInterface::QUERY_STORE",
          "131:     );",
          "132:     $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);",
          "133:     while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     $data = array();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93366c8c2403a1dc07d9b198a423d250ffb7ecd2",
      "candidate_info": {
        "commit_hash": "93366c8c2403a1dc07d9b198a423d250ffb7ecd2",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/93366c8c2403a1dc07d9b198a423d250ffb7ecd2",
        "files": [
          "ChangeLog",
          "libraries/Config.class.php",
          "libraries/Theme.class.php",
          "libraries/error_report.lib.php",
          "libraries/gis/GIS_Factory.class.php",
          "libraries/mult_submits.lib.php",
          "libraries/tbl_printview.lib.php",
          "tbl_zoom_select.php"
        ],
        "message": "Merge branch 'QA_4_2' into QA_4_3\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
        "before_after_code_files": [
          "libraries/Config.class.php||libraries/Config.class.php",
          "libraries/Theme.class.php||libraries/Theme.class.php",
          "libraries/error_report.lib.php||libraries/error_report.lib.php",
          "libraries/gis/GIS_Factory.class.php||libraries/gis/GIS_Factory.class.php",
          "libraries/mult_submits.lib.php||libraries/mult_submits.lib.php",
          "libraries/tbl_printview.lib.php||libraries/tbl_printview.lib.php",
          "tbl_zoom_select.php||tbl_zoom_select.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ],
          "candidate": [
            "tbl_zoom_select.php||tbl_zoom_select.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Config.class.php||libraries/Config.class.php": [
          "File: libraries/Config.class.php -> libraries/Config.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:         if (empty($current_size)) {",
          "1772:             if (isset($_COOKIE['pma_fontsize'])) {",
          "1774:             } else {",
          "1775:                 $current_size = '82%';",
          "1776:             }",
          "",
          "[Removed Lines]",
          "1773:                 $current_size = $_COOKIE['pma_fontsize'];",
          "",
          "[Added Lines]",
          "1773:                 $current_size = htmlspecialchars($_COOKIE['pma_fontsize']);",
          "",
          "---------------"
        ],
        "libraries/Theme.class.php||libraries/Theme.class.php": [
          "File: libraries/Theme.class.php -> libraries/Theme.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:             return $fs;",
          "435:         }",
          "436:         if (isset($_COOKIE['pma_fontsize'])) {",
          "438:         }",
          "439:         return '82%';",
          "440:     }",
          "",
          "[Removed Lines]",
          "437:             return $_COOKIE['pma_fontsize'];",
          "",
          "[Added Lines]",
          "437:             return htmlspecialchars($_COOKIE['pma_fontsize']);",
          "",
          "---------------"
        ],
        "libraries/error_report.lib.php||libraries/error_report.lib.php": [
          "File: libraries/error_report.lib.php -> libraries/error_report.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         return $LINE_COUNT[$filename];",
          "238:     }",
          "240:     $linecount = 0;",
          "241:     $handle = fopen('./js/' . $filename, 'r');",
          "242:     while (!feof($handle)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     $depath = 1;",
          "242:     foreach (explode('/', $filename) as $part) {",
          "243:         if ($part == '..') {",
          "244:             $depath--;",
          "245:         } elseif ($part != '.') {",
          "246:             $depath++;",
          "247:         }",
          "248:         if ($depath < 0) {",
          "249:             return 0;",
          "250:         }",
          "251:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:             . __('You may examine the data in the error report:')",
          "343:             . '</p></label></div>'",
          "344:             . '<pre class=\"report-data\">'",
          "346:             . '</pre>';",
          "348:     $html .= '<div class=\"label\"><label><p>'",
          "",
          "[Removed Lines]",
          "345:             . PMA_getPrettyReportData()",
          "",
          "[Added Lines]",
          "358:             . htmlspecialchars(PMA_getPrettyReportData())",
          "",
          "---------------"
        ],
        "libraries/gis/GIS_Factory.class.php||libraries/gis/GIS_Factory.class.php": [
          "File: libraries/gis/GIS_Factory.class.php -> libraries/gis/GIS_Factory.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     {",
          "33:         include_once './libraries/gis/GIS_Geometry.class.php';",
          "38:             return false;",
          "39:         }",
          "40:         if (include_once $file) {",
          "",
          "[Removed Lines]",
          "35:         $file = './libraries/gis/GIS_'",
          "36:             . ucfirst(/*overload*/mb_strtolower($type)) . '.class.php';",
          "37:         if (! file_exists($file)) {",
          "",
          "[Added Lines]",
          "35:         $type_lower = strtolower($type);",
          "36:         if (! PMA_isValid($type_lower, PMA_Util::getGISDatatypes())",
          "37:             || ! file_exists('./libraries/gis/GIS_' . ucfirst($type_lower) . '.class.php')",
          "38:         ) {",
          "",
          "---------------"
        ],
        "libraries/mult_submits.lib.php||libraries/mult_submits.lib.php": [
          "File: libraries/mult_submits.lib.php -> libraries/mult_submits.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:     foreach ($selected as $sval) {",
          "572:         switch ($what) {",
          "573:         case 'row_delete':",
          "581:                 . ';<br />';",
          "582:             break;",
          "583:         case 'drop_db':",
          "",
          "[Removed Lines]",
          "574:             $full_query .= 'DELETE FROM ' . PMA_Util::backquote($db)",
          "575:                 . '.' . PMA_Util::backquote($table)",
          "580:                 . ' WHERE ' . urldecode($sval)",
          "",
          "[Added Lines]",
          "574:             $full_query .= 'DELETE FROM '",
          "575:                 . PMA_Util::backquote(htmlspecialchars($db))",
          "576:                 . '.' . PMA_Util::backquote(htmlspecialchars($table))",
          "581:                 . ' WHERE ' . urldecode(htmlspecialchars($sval))",
          "",
          "---------------"
        ],
        "libraries/tbl_printview.lib.php||libraries/tbl_printview.lib.php": [
          "File: libraries/tbl_printview.lib.php -> libraries/tbl_printview.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         }",
          "108:         $html .= \"\\n\";",
          "109:         $html .= '</td>';",
          "111:         $html .= '<td>';",
          "112:         $html .= (($row['Null'] == '' || $row['Null'] == 'NO')",
          "113:             ? __('No')",
          "",
          "[Removed Lines]",
          "110:         $html .= '<td>' . $type . '<bdo dir=\"ltr\"></bdo></td>';",
          "",
          "[Added Lines]",
          "110:         $html .= '<td>' . htmlspecialchars($type) . '<bdo dir=\"ltr\"></bdo></td>';",
          "",
          "---------------"
        ],
        "tbl_zoom_select.php||tbl_zoom_select.php": [
          "File: tbl_zoom_select.php -> tbl_zoom_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     }",
          "82:     $key = array_search($field, $table_search->getColumnNames());",
          "83:     $properties = $table_search->getColumnProperties($_REQUEST['it'], $key);",
          "85:     $response->addJSON('field_collation', $properties['collation']);",
          "86:     $response->addJSON('field_operators', $properties['func']);",
          "87:     $response->addJSON('field_value', $properties['value']);",
          "",
          "[Removed Lines]",
          "84:     $response->addJSON('field_type', $properties['type']);",
          "",
          "[Added Lines]",
          "84:     $response->addJSON('field_type', htmlspecialchars($properties['type']));",
          "",
          "---------------"
        ]
      }
    }
  ]
}