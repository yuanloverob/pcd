{
  "cve_id": "CVE-2012-0037",
  "cve_desc": "Redland Raptor (aka libraptor) before 2.0.7, as used by OpenOffice 3.3 and 3.4 Beta, LibreOffice before 3.4.6 and 3.5.x before 3.5.1, and other products, allows user-assisted remote attackers to read arbitrary files via a crafted XML external entity (XXE) declaration and reference in an RDF document.",
  "repo": "dajobe/raptor",
  "patch_hash": "a676f235309a59d4aa78eeffd2574ae5d341fcb0",
  "patch_info": {
    "commit_hash": "a676f235309a59d4aa78eeffd2574ae5d341fcb0",
    "repo": "dajobe/raptor",
    "commit_url": "https://github.com/dajobe/raptor/commit/a676f235309a59d4aa78eeffd2574ae5d341fcb0",
    "files": [
      "ChangeLog",
      "NEWS.html",
      "RELEASE.html",
      "docs/raptor-1-to-2-map.tsv",
      "librdfa/rdfa.c",
      "src/raptor2.h.in",
      "src/raptor_libxml.c",
      "src/raptor_option.c",
      "src/raptor_rdfxml.c",
      "src/raptor_rss.c",
      "src/raptor_turtle_writer.c"
    ],
    "message": "CVE-2012-0037\n\nEnforce entity loading policy in raptor_libxml_resolveEntity\nand raptor_libxml_getEntity by checking for file URIs and network URIs.\n\nAdd RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES / loadExternalEntities for\nturning on loading of XML external entity loading, disabled by default.\n\nThis affects all the parsers that use SAX2: rdfxml, rss-tag-soup (and\naliases) and rdfa.",
    "before_after_code_files": [
      "NEWS.html||NEWS.html",
      "RELEASE.html||RELEASE.html",
      "librdfa/rdfa.c||librdfa/rdfa.c",
      "src/raptor2.h.in||src/raptor2.h.in",
      "src/raptor_libxml.c||src/raptor_libxml.c",
      "src/raptor_option.c||src/raptor_option.c",
      "src/raptor_rdfxml.c||src/raptor_rdfxml.c",
      "src/raptor_rss.c||src/raptor_rss.c",
      "src/raptor_turtle_writer.c||src/raptor_turtle_writer.c"
    ]
  },
  "patch_diff": {
    "NEWS.html||NEWS.html": [
      "File: NEWS.html -> NEWS.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: <h1 style=\"text-align:center\">Raptor RDF Syntax Library - News</h1>",
      "17: Removed Expat support<br />",
      "18: Removed internal Unicode NFC code for better and optional <a href=\"http://www.icu-project.org/\">ICU</a><br />",
      "20: Fixed reported <a href=\"http://bugs.librdf.org/\">issues</a>:",
      "21: <a href=\"http://bugs.librdf.org/mantis/view.php?id=448\">0000448</a> and",
      "22: <a href=\"http://bugs.librdf.org/mantis/view.php?id=469\">0000469</a>",
      "23: </p>",
      "26: <h2 id=\"D2011-11-27-V2.0.6\">2011-11-27 Raptor2 Version 2.0.6 Released</h2>",
      "",
      "[Removed Lines]",
      "11: <h2 id=\"D2012-XX-XX-V2.0.7\">2012-XX-XX Raptor2 Version 2.0.7 Released</h2>",
      "13: <p>Not yet released.",
      "14: </p>",
      "16: <p>",
      "19: Added new options for denying file requests and SSL certificate verifying<br />",
      "",
      "[Added Lines]",
      "11: <h2 id=\"D2012-03-22-V2.0.7\">2012-03-22 Raptor2 Version 2.0.7 Released</h2>",
      "13: <p>CVE-2012-0037 fixed<br />",
      "16: Added options for denying file requests and XML entity loading<br />",
      "17: Added options for SSL certificate verifying<br />",
      "23: <p>See the <a href=\"RELEASE.html#rel2_0_7\">Raptor2 2.0.7 Release Notes</a>",
      "24: for the full details of the changes.</p>",
      "",
      "---------------"
    ],
    "RELEASE.html||RELEASE.html": [
      "File: RELEASE.html -> RELEASE.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: <h2 id=\"rel2_0_7\"><a name=\"rel2_0_7\">Raptor2 2.0.7 changes</a></h2>",
      "17: <p>Issues Fixed:</p>",
      "18: <ul>",
      "",
      "[Removed Lines]",
      "14: <p>Not yet released.",
      "15: </p>",
      "",
      "[Added Lines]",
      "14: <p>CVE-2012-0037 fixed</p>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:   <dt><code>RAPTOR_OPTION_NO_FILE</code><br/></dt>",
      "40:   <dd>Deny file requests during parsing.</dd>",
      "42:   <dt><code>RAPTOR_OPTION_WWW_SSL_VERIFY_PEER</code><br/></dt>",
      "43:   <dd>Controls verifying an SSL peer during parsing / WWW.  Takes an",
      "44:   integer value: non-0 to verify peer SSL certificate (default",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41:   <dt><code>RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES</code><br/></dt>",
      "42:   <dd>Deny loading of XML external entity loading. Disabled by",
      "43:   default.</dd>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: <h3>Parser class changes</h3>",
      "56: <p>RDF/JSON parser handles an API change between YAJL V1 and V2.",
      "57: </p>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: <p>The RDF/XML, RSS Tag Soup and RDFa parsers now pass on network,",
      "60: file and entity loading parser options to the internal SAX2 to enable",
      "61: enforcing of network, file and entity loading policy.</p>",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "65: <h3>SAX2 class changes</h3>",
      "70: </p>",
      "73: <h3>URI class changes</h3>",
      "",
      "[Removed Lines]",
      "67: <p>",
      "68: Added <code>raptor_sax2_set_uri_filter()</code> to set a URI filter",
      "69: for any SAX2 calls that do internal lookups of URIs.",
      "",
      "[Added Lines]",
      "74: <p>Added <code>raptor_sax2_set_uri_filter()</code> to set a URI",
      "75: filter for any SAX2 calls that do internal lookups of URIs.",
      "78: <p>Control file and network loading inside SAX2.  Option",
      "79: <code>RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES</code> now enforces",
      "80: loading external XML entities and is by default enabled.  If enabled,",
      "81: <code>RAPTOR_OPTION_NO_FILE</code> and",
      "82: <code>RAPTOR_OPTION_NO_NET</code> are also checked.  All URIs loaded",
      "83: are also passed through any URI filter, if set by",
      "84: <code>raptor_sax2_set_uri_filter()</code>.",
      "85: </p>",
      "",
      "---------------"
    ],
    "librdfa/rdfa.c||librdfa/rdfa.c": [
      "File: librdfa/rdfa.c -> librdfa/rdfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1230:      raptor_sax2_set_option(context->sax2,",
      "1231:                             RAPTOR_OPTION_NO_FILE, NULL,",
      "1232:                             RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_NO_FILE));",
      "1233:      if(rdf_parser->uri_filter)",
      "1234:        raptor_sax2_set_uri_filter(context->sax2, rdf_parser->uri_filter,",
      "1235:                                   rdf_parser->uri_filter_user_data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1233:      raptor_sax2_set_option(context->sax2,",
      "1234:                             RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL,",
      "1235:                             RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES));",
      "",
      "---------------"
    ],
    "src/raptor2.h.in||src/raptor2.h.in": [
      "File: src/raptor2.h.in -> src/raptor2.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "574:   RAPTOR_OPTION_NO_FILE,",
      "575:   RAPTOR_OPTION_WWW_SSL_VERIFY_PEER,",
      "576:   RAPTOR_OPTION_WWW_SSL_VERIFY_HOST,",
      "578: } raptor_option;",
      "",
      "[Removed Lines]",
      "577:   RAPTOR_OPTION_LAST = RAPTOR_OPTION_WWW_SSL_VERIFY_HOST",
      "",
      "[Added Lines]",
      "578:   RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES,",
      "579:   RAPTOR_OPTION_LAST = RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES",
      "",
      "---------------"
    ],
    "src/raptor_libxml.c||src/raptor_libxml.c": [
      "File: src/raptor_libxml.c -> src/raptor_libxml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "146: static xmlParserInputPtr",
      "147: raptor_libxml_resolveEntity(void* user_data,",
      "149:   raptor_sax2* sax2 = (raptor_sax2*)user_data;",
      "151: }",
      "154: static xmlEntityPtr",
      "156:   raptor_sax2* sax2 = (raptor_sax2*)user_data;",
      "158: }",
      "",
      "[Removed Lines]",
      "148:                             const xmlChar *publicId, const xmlChar *systemId) {",
      "150:   return libxml2_resolveEntity(sax2->xc, publicId, systemId);",
      "155: raptor_libxml_getEntity(void* user_data, const xmlChar *name) {",
      "157:   return libxml2_getEntity(sax2->xc, name);",
      "",
      "[Added Lines]",
      "148:                             const xmlChar *publicId, const xmlChar *systemId)",
      "149: {",
      "151:   xmlParserCtxtPtr ctxt = sax2->xc;",
      "152:   const unsigned char *uri_string = NULL;",
      "153:   xmlParserInputPtr entity_input;",
      "154:   int load_entity = 0;",
      "156:   if(ctxt->input)",
      "157:     uri_string = RAPTOR_GOOD_CAST(const unsigned char *, ctxt->input->filename);",
      "159:   if(!uri_string)",
      "160:     uri_string = RAPTOR_GOOD_CAST(const unsigned char *, ctxt->directory);",
      "162:   load_entity = RAPTOR_OPTIONS_GET_NUMERIC(sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES);",
      "163:   if(load_entity)",
      "164:     load_entity = raptor_sax2_check_load_uri_string(sax2, uri_string);",
      "166:   if(load_entity) {",
      "167:     entity_input = xmlLoadExternalEntity(RAPTOR_GOOD_CAST(const char*, uri_string),",
      "168:                                          RAPTOR_GOOD_CAST(const char*, publicId),",
      "169:                                          ctxt);",
      "170:   } else {",
      "171:     RAPTOR_DEBUG4(\"Not loading entity URI %s by policy for publicId '%s' systemId '%s'\\n\", uri_string, publicId, systemId);",
      "172:   }",
      "174:   return entity_input;",
      "179: raptor_libxml_getEntity(void* user_data, const xmlChar *name)",
      "180: {",
      "182:   xmlParserCtxtPtr xc = sax2->xc;",
      "183:   xmlEntityPtr ret = NULL;",
      "185:   if(!xc)",
      "186:     return NULL;",
      "188:   if(!xc->inSubset) {",
      "190:     ret = xmlGetPredefinedEntity(name);",
      "191:     if(ret) {",
      "192:       RAPTOR_DEBUG2(\"Entity '%s' found in predefined set\\n\", name);",
      "193:       return ret;",
      "194:     }",
      "195:   }",
      "200:   if(xc->myDoc && (xc->myDoc->standalone == 1)) {",
      "201:     RAPTOR_DEBUG2(\"Entity '%s' document is standalone\\n\", name);",
      "203:     if(xc->inSubset == 2) {",
      "204:       xc->myDoc->standalone = 0;",
      "205:       ret = xmlGetDocEntity(xc->myDoc, name);",
      "206:       xc->myDoc->standalone = 1;",
      "207:     } else {",
      "208:       ret = xmlGetDocEntity(xc->myDoc, name);",
      "209:       if(!ret) {",
      "210:         xc->myDoc->standalone = 0;",
      "211:         ret = xmlGetDocEntity(xc->myDoc, name);",
      "212:         xc->myDoc->standalone = 1;",
      "213:       }",
      "214:     }",
      "215:   } else {",
      "216:     ret = xmlGetDocEntity(xc->myDoc, name);",
      "217:   }",
      "219:   if(ret && !ret->children &&",
      "220:     (ret->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)) {",
      "224:     int val = 0;",
      "225:     xmlNodePtr children;",
      "226:     int load_entity = 0;",
      "228:     load_entity = RAPTOR_OPTIONS_GET_NUMERIC(sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES);",
      "229:     if(load_entity)",
      "230:       load_entity = raptor_sax2_check_load_uri_string(sax2, ret->URI);",
      "232:     if(!load_entity) {",
      "233:       RAPTOR_DEBUG2(\"Not getting entity URI %s by policy\\n\", ret->URI);",
      "234:       children = xmlNewText((const xmlChar*)\"\");",
      "235:     } else {",
      "239:       sax2->enabled = 0;",
      "240:       val = xmlParseCtxtExternalEntity(xc, ret->URI, ret->ExternalID, &children);",
      "241:       sax2->enabled = 1;",
      "242:     }",
      "244:     if(!val) {",
      "245:       xmlAddChildList((xmlNodePtr)ret, children);",
      "246:     } else {",
      "247:       xc->validate = 0;",
      "248:       return NULL;",
      "249:     }",
      "251:     ret->owner = 1;",
      "254:     if(!ret->checked)",
      "255:       ret->checked = 1;",
      "256:   }",
      "258:   return ret;",
      "",
      "---------------"
    ],
    "src/raptor_option.c||src/raptor_option.c": [
      "File: src/raptor_option.c -> src/raptor_option.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:     RAPTOR_OPTION_VALUE_TYPE_INT,",
      "296:     \"wwwSslVerifyHost\",",
      "297:     \"SSL verify host matching\"",
      "298:   }",
      "299: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "298:   },",
      "299:   { RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES,",
      "300:     (raptor_option_area)(RAPTOR_OPTION_AREA_PARSER | RAPTOR_OPTION_AREA_SAX2),",
      "301:     RAPTOR_OPTION_VALUE_TYPE_BOOL,",
      "302:     \"loadExternalEntities\",",
      "303:     \"Parsers and SAX2 should load external entities.\"",
      "",
      "---------------"
    ],
    "src/raptor_rdfxml.c||src/raptor_rdfxml.c": [
      "File: src/raptor_rdfxml.c -> src/raptor_rdfxml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1004:   raptor_sax2_set_option(rdf_xml_parser->sax2,",
      "1005:                          RAPTOR_OPTION_NO_FILE, NULL,",
      "1006:                          RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_NO_FILE));",
      "1007:   if(rdf_parser->uri_filter)",
      "1008:     raptor_sax2_set_uri_filter(rdf_xml_parser->sax2, rdf_parser->uri_filter,",
      "1009:                                rdf_parser->uri_filter_user_data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1007:   raptor_sax2_set_option(rdf_xml_parser->sax2,",
      "1008:                          RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL,",
      "1009:                          RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES));",
      "",
      "---------------"
    ],
    "src/raptor_rss.c||src/raptor_rss.c": [
      "File: src/raptor_rss.c -> src/raptor_rss.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "252:   raptor_sax2_set_option(rss_parser->sax2,",
      "253:                          RAPTOR_OPTION_NO_FILE, NULL,",
      "254:                          RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_NO_FILE));",
      "255:   if(rdf_parser->uri_filter)",
      "256:     raptor_sax2_set_uri_filter(rss_parser->sax2, rdf_parser->uri_filter,",
      "257:                                rdf_parser->uri_filter_user_data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "255:   raptor_sax2_set_option(rss_parser->sax2,",
      "256:                          RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL,",
      "257:                          RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES));",
      "",
      "---------------"
    ],
    "src/raptor_turtle_writer.c||src/raptor_turtle_writer.c": [
      "File: src/raptor_turtle_writer.c -> src/raptor_turtle_writer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "706:     case RAPTOR_OPTION_NO_NET:",
      "707:     case RAPTOR_OPTION_NO_FILE:",
      "710:     case RAPTOR_OPTION_RELATIVE_URIS:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     case RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "830:     case RAPTOR_OPTION_NO_NET:",
      "831:     case RAPTOR_OPTION_NO_FILE:",
      "834:     case RAPTOR_OPTION_RELATIVE_URIS:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "833:     case RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e4c9fe7cc62b0d5e349e5a6341d3f8e670341609",
      "candidate_info": {
        "commit_hash": "e4c9fe7cc62b0d5e349e5a6341d3f8e670341609",
        "repo": "dajobe/raptor",
        "commit_url": "https://github.com/dajobe/raptor/commit/e4c9fe7cc62b0d5e349e5a6341d3f8e670341609",
        "files": [
          "librdfa/config.h",
          "librdfa/context.c",
          "librdfa/curie.c",
          "librdfa/iri.c",
          "librdfa/language.c",
          "librdfa/lists.c",
          "librdfa/rdfa.c",
          "librdfa/rdfa.h",
          "librdfa/rdfa_utils.c",
          "librdfa/rdfa_utils.h",
          "librdfa/strtok_r.c",
          "librdfa/strtok_r.h",
          "librdfa/subject.c",
          "librdfa/triple.c",
          "src/Makefile.am",
          "src/raptor_internal.h",
          "src/raptor_librdfa.c",
          "tests/rdfa/Makefile.am"
        ],
        "message": "Update librdfa in raptor to latest GIT and make it work for RDFa 1.0\n\nAdd RDFa parser version aliases rdfa10, rdfa11 and default to 1.1\n\nExisting RDFa 1.0 tests pass ONLY IF RDFa 1.0 is forced with -i rdfa10",
        "before_after_code_files": [
          "librdfa/context.c||librdfa/context.c",
          "librdfa/curie.c||librdfa/curie.c",
          "librdfa/iri.c||librdfa/iri.c",
          "librdfa/language.c||librdfa/language.c",
          "librdfa/lists.c||librdfa/lists.c",
          "librdfa/rdfa.c||librdfa/rdfa.c",
          "librdfa/rdfa.h||librdfa/rdfa.h",
          "librdfa/rdfa_utils.c||librdfa/rdfa_utils.c",
          "librdfa/rdfa_utils.h||librdfa/rdfa_utils.h",
          "librdfa/strtok_r.c||librdfa/strtok_r.c",
          "librdfa/strtok_r.h||librdfa/strtok_r.h",
          "librdfa/subject.c||librdfa/subject.c",
          "librdfa/triple.c||librdfa/triple.c",
          "src/Makefile.am||src/Makefile.am",
          "src/raptor_internal.h||src/raptor_internal.h",
          "src/raptor_librdfa.c||src/raptor_librdfa.c",
          "tests/rdfa/Makefile.am||tests/rdfa/Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librdfa/rdfa.c||librdfa/rdfa.c"
          ],
          "candidate": [
            "librdfa/rdfa.c||librdfa/rdfa.c"
          ]
        }
      },
      "candidate_diff": {
        "librdfa/context.c||librdfa/context.c": [
          "File: librdfa/context.c -> librdfa/context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <string.h>",
          "28: #include \"rdfa_utils.h\"",
          "29: #include \"rdfa.h\"",
          "31: rdfacontext* rdfa_create_context(const char* base)",
          "32: {",
          "33:    rdfacontext* rval = NULL;",
          "34:    size_t base_length = strlen(base);",
          "37:    if(base_length > 0)",
          "38:    {",
          "39:       char* cleaned_base;",
          "42:       rval = (rdfacontext*)malloc(sizeof(rdfacontext));",
          "43:       memset(rval, 0, sizeof(rdfacontext));",
          "46:       cleaned_base = rdfa_iri_get_base(base);",
          "47:       rval->base = rdfa_replace_string(rval->base, cleaned_base);",
          "48:       free(cleaned_base);",
          "49:    }",
          "50:    else",
          "51:    {",
          "52:       printf(\"librdfa error: Failed to create a parsing context, \"",
          "53:          \"base IRI was not specified!\\n\");",
          "54:    }",
          "56:    return rval;",
          "57: }",
          "59: void rdfa_init_context(rdfacontext* context)",
          "60: {",
          "62:    context->rdfa_version = RDFA_VERSION_1_1;",
          "65:    context->host_language = HOST_LANGUAGE_XML1;",
          "68:    context->parent_subject = NULL;",
          "69:    if(context->base != NULL)",
          "70:    {",
          "71:       char* cleaned_base = rdfa_iri_get_base(context->base);",
          "72:       context->parent_subject =",
          "73:          rdfa_replace_string(context->parent_subject, cleaned_base);",
          "74:       free(cleaned_base);",
          "75:    }",
          "78:    context->parent_object = NULL;",
          "80: #ifdef LIBRDFA_IN_RAPTOR",
          "81: #else",
          "83:    context->uri_mappings = rdfa_create_mapping(MAX_URI_MAPPINGS);",
          "84: #endif",
          "87:    context->incomplete_triples = rdfa_create_list(3);",
          "90:    context->language = NULL;",
          "93:    context->current_object_resource = NULL;",
          "97:    context->term_mappings = rdfa_create_mapping(MAX_TERM_MAPPINGS);",
          "100:    context->list_mappings = rdfa_create_mapping(MAX_LIST_MAPPINGS);",
          "103:    context->local_list_mappings =",
          "104:       rdfa_create_mapping(MAX_LOCAL_LIST_MAPPINGS);",
          "108:    context->default_vocabulary = NULL;",
          "111:    context->inlist_present = 0;",
          "114:    context->rel_present = 0;",
          "117:    context->rev_present = 0;",
          "122:    context->recurse = 1;",
          "125:    context->skip_element = 0;",
          "128:    context->new_subject = NULL;",
          "131:    context->current_object_resource = NULL;",
          "140:    context->local_incomplete_triples = rdfa_create_list(3);",
          "145: }",
          "147: #ifdef LIBRDFA_IN_RAPTOR",
          "148: #define DECLARE_URI_MAPPING(context, prefix, value)                     \\",
          "149: do {                                                                    \\",
          "150:     raptor_namespace_stack* nstack = &context->sax2->namespaces;        \\",
          "151:     raptor_namespace* ns = raptor_new_namespace(nstack,                 \\",
          "152:       (const unsigned char *)prefix, (const unsigned char*)value, 0);   \\",
          "153:     raptor_namespace_stack_start_namespace(nstack, ns, 0);              \\",
          "154:     } while(0)",
          "155: #else",
          "156: #define DECLARE_URI_MAPPING(context, prefix, value)                     \\",
          "157:   rdfa_update_mapping(context->uri_mappings, prefix, value,             \\",
          "158:                       (update_mapping_value_fp)rdfa_replace_string)",
          "159: #endif",
          "161: void rdfa_setup_initial_context(rdfacontext* context)",
          "162: {",
          "163: #ifdef LIBRDFA_IN_RAPTOR",
          "164: #else",
          "165:    char* key = NULL;",
          "166:    void* value = NULL;",
          "167:    void** mptr = context->uri_mappings;",
          "168: #endif",
          "171:    if(context->rdfa_version == RDFA_VERSION_1_1)",
          "172:    {",
          "174:       DECLARE_URI_MAPPING(context,",
          "175:          \"grddl\", \"http://www.w3.org/2003/g/data-view#\");",
          "176:       DECLARE_URI_MAPPING(context,",
          "177:          \"ma\", \"http://www.w3.org/ns/ma-ont#\");",
          "178:       DECLARE_URI_MAPPING(context,",
          "179:          \"owl\", \"http://www.w3.org/2002/07/owl#\");",
          "180:       DECLARE_URI_MAPPING(context,",
          "181:          \"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");",
          "182:       DECLARE_URI_MAPPING(context,",
          "183:          \"rdfa\", \"http://www.w3.org/ns/rdfa#\");",
          "184:       DECLARE_URI_MAPPING(context,",
          "185:          \"rdfs\", \"http://www.w3.org/2000/01/rdf-schema#\");",
          "186:       DECLARE_URI_MAPPING(context,",
          "187:          \"rif\", \"http://www.w3.org/2007/rif#\");",
          "188:       DECLARE_URI_MAPPING(context,",
          "189:          \"skos\", \"http://www.w3.org/2004/02/skos/core#\");",
          "190:       DECLARE_URI_MAPPING(context,",
          "191:          \"skosxl\", \"http://www.w3.org/2008/05/skos-xl#\");",
          "192:       DECLARE_URI_MAPPING(context,",
          "193:          \"wdr\", \"http://www.w3.org/2007/05/powder#\");",
          "194:       DECLARE_URI_MAPPING(context,",
          "195:          \"void\", \"http://rdfs.org/ns/void#\");",
          "196:       DECLARE_URI_MAPPING(context,",
          "197:          \"wdrs\", \"http://www.w3.org/2007/05/powder-s#\");",
          "198:       DECLARE_URI_MAPPING(context,",
          "199:          \"xhv\", \"http://www.w3.org/1999/xhtml/vocab#\");",
          "200:       DECLARE_URI_MAPPING(context,",
          "201:          \"xml\", \"http://www.w3.org/XML/1998/namespace\");",
          "202:       DECLARE_URI_MAPPING(context,",
          "203:          \"xsd\", \"http://www.w3.org/2001/XMLSchema#\");",
          "204:       DECLARE_URI_MAPPING(context,",
          "205:          \"cc\", \"http://creativecommons.org/ns#\");",
          "206:       DECLARE_URI_MAPPING(context,",
          "207:          \"ctag\", \"http://commontag.org/ns#\");",
          "208:       DECLARE_URI_MAPPING(context,",
          "209:          \"dc\", \"http://purl.org/dc/terms/\");",
          "210:       DECLARE_URI_MAPPING(context,",
          "211:          \"dcterms\", \"http://purl.org/dc/terms/\");",
          "212:       DECLARE_URI_MAPPING(context,",
          "213:          \"foaf\", \"http://xmlns.com/foaf/0.1/\");",
          "214:       DECLARE_URI_MAPPING(context,",
          "215:          \"gr\", \"http://purl.org/goodrelations/v1#\");",
          "216:       DECLARE_URI_MAPPING(context,",
          "217:          \"ical\", \"http://www.w3.org/2002/12/cal/icaltzd#\");",
          "218:       DECLARE_URI_MAPPING(context,",
          "219:          \"og\", \"http://ogp.me/ns#\");",
          "220:       DECLARE_URI_MAPPING(context,",
          "221:          \"rev\", \"http://purl.org/stuff/rev#\");",
          "222:       DECLARE_URI_MAPPING(context,",
          "223:          \"sioc\", \"http://rdfs.org/sioc/ns#\");",
          "224:       DECLARE_URI_MAPPING(context,",
          "225:          \"v\", \"http://rdf.data-vocabulary.org/#\");",
          "226:       DECLARE_URI_MAPPING(context,",
          "227:          \"vcard\", \"http://www.w3.org/2006/vcard/ns#\");",
          "228:       DECLARE_URI_MAPPING(context,",
          "229:          \"schema\", \"http://schema.org/\");",
          "232:       rdfa_update_mapping(context->term_mappings,",
          "233:          \"describedby\", \"http://www.w3.org/2007/05/powder-s#describedby\",",
          "234:          (update_mapping_value_fp)rdfa_replace_string);",
          "235:       rdfa_update_mapping(context->term_mappings,",
          "236:          \"license\", \"http://www.w3.org/1999/xhtml/vocab#license\",",
          "237:          (update_mapping_value_fp)rdfa_replace_string);",
          "238:       rdfa_update_mapping(context->term_mappings,",
          "239:          \"role\", \"http://www.w3.org/1999/xhtml/vocab#role\",",
          "240:          (update_mapping_value_fp)rdfa_replace_string);",
          "241:    }",
          "244:    if(context->host_language == HOST_LANGUAGE_XHTML1)",
          "245:    {",
          "246:       rdfa_update_mapping(context->term_mappings,",
          "247:          \"alternate\", \"http://www.w3.org/1999/xhtml/vocab#alternate\",",
          "248:          (update_mapping_value_fp)rdfa_replace_string);",
          "249:       rdfa_update_mapping(context->term_mappings,",
          "250:          \"appendix\", \"http://www.w3.org/1999/xhtml/vocab#appendix\",",
          "251:          (update_mapping_value_fp)rdfa_replace_string);",
          "252:       rdfa_update_mapping(context->term_mappings,",
          "253:          \"cite\", \"http://www.w3.org/1999/xhtml/vocab#cite\",",
          "254:          (update_mapping_value_fp)rdfa_replace_string);",
          "255:       rdfa_update_mapping(context->term_mappings,",
          "256:          \"bookmark\", \"http://www.w3.org/1999/xhtml/vocab#bookmark\",",
          "257:          (update_mapping_value_fp)rdfa_replace_string);",
          "258:       rdfa_update_mapping(context->term_mappings,",
          "259:          \"contents\", \"http://www.w3.org/1999/xhtml/vocab#contents\",",
          "260:          (update_mapping_value_fp)rdfa_replace_string);",
          "261:       rdfa_update_mapping(context->term_mappings,",
          "262:          \"chapter\", \"http://www.w3.org/1999/xhtml/vocab#chapter\",",
          "263:          (update_mapping_value_fp)rdfa_replace_string);",
          "264:       rdfa_update_mapping(context->term_mappings,",
          "265:          \"copyright\", \"http://www.w3.org/1999/xhtml/vocab#copyright\",",
          "266:          (update_mapping_value_fp)rdfa_replace_string);",
          "267:       rdfa_update_mapping(context->term_mappings,",
          "268:          \"first\", \"http://www.w3.org/1999/xhtml/vocab#first\",",
          "269:          (update_mapping_value_fp)rdfa_replace_string);",
          "270:       rdfa_update_mapping(context->term_mappings,",
          "271:          \"glossary\", \"http://www.w3.org/1999/xhtml/vocab#glossary\",",
          "272:          (update_mapping_value_fp)rdfa_replace_string);",
          "273:       rdfa_update_mapping(context->term_mappings,",
          "274:          \"help\", \"http://www.w3.org/1999/xhtml/vocab#help\",",
          "275:          (update_mapping_value_fp)rdfa_replace_string);",
          "276:       rdfa_update_mapping(context->term_mappings,",
          "277:          \"icon\", \"http://www.w3.org/1999/xhtml/vocab#icon\",",
          "278:          (update_mapping_value_fp)rdfa_replace_string);",
          "279:       rdfa_update_mapping(context->term_mappings,",
          "280:          \"index\", \"http://www.w3.org/1999/xhtml/vocab#index\",",
          "281:          (update_mapping_value_fp)rdfa_replace_string);",
          "282:       rdfa_update_mapping(context->term_mappings,",
          "283:          \"last\", \"http://www.w3.org/1999/xhtml/vocab#last\",",
          "284:          (update_mapping_value_fp)rdfa_replace_string);",
          "285:       rdfa_update_mapping(context->term_mappings,",
          "286:          \"license\", \"http://www.w3.org/1999/xhtml/vocab#license\",",
          "287:          (update_mapping_value_fp)rdfa_replace_string);",
          "288:       rdfa_update_mapping(context->term_mappings,",
          "289:          \"meta\", \"http://www.w3.org/1999/xhtml/vocab#meta\",",
          "290:          (update_mapping_value_fp)rdfa_replace_string);",
          "291:       rdfa_update_mapping(context->term_mappings,",
          "292:          \"next\", \"http://www.w3.org/1999/xhtml/vocab#next\",",
          "293:          (update_mapping_value_fp)rdfa_replace_string);",
          "294:       rdfa_update_mapping(context->term_mappings,",
          "295:          \"prev\", \"http://www.w3.org/1999/xhtml/vocab#prev\",",
          "296:          (update_mapping_value_fp)rdfa_replace_string);",
          "297:       rdfa_update_mapping(context->term_mappings,",
          "298:          \"previous\", \"http://www.w3.org/1999/xhtml/vocab#previous\",",
          "299:          (update_mapping_value_fp)rdfa_replace_string);",
          "300:       rdfa_update_mapping(context->term_mappings,",
          "301:          \"section\", \"http://www.w3.org/1999/xhtml/vocab#section\",",
          "302:          (update_mapping_value_fp)rdfa_replace_string);",
          "303:       rdfa_update_mapping(context->term_mappings,",
          "304:          \"start\", \"http://www.w3.org/1999/xhtml/vocab#start\",",
          "305:          (update_mapping_value_fp)rdfa_replace_string);",
          "306:       rdfa_update_mapping(context->term_mappings,",
          "307:          \"stylesheet\", \"http://www.w3.org/1999/xhtml/vocab#stylesheet\",",
          "308:          (update_mapping_value_fp)rdfa_replace_string);",
          "309:       rdfa_update_mapping(context->term_mappings,",
          "310:          \"subsection\", \"http://www.w3.org/1999/xhtml/vocab#subsection\",",
          "311:          (update_mapping_value_fp)rdfa_replace_string);",
          "312:       rdfa_update_mapping(context->term_mappings,",
          "313:          \"top\", \"http://www.w3.org/1999/xhtml/vocab#top\",",
          "314:          (update_mapping_value_fp)rdfa_replace_string);",
          "315:       rdfa_update_mapping(context->term_mappings,",
          "316:          \"up\", \"http://www.w3.org/1999/xhtml/vocab#up\",",
          "317:          (update_mapping_value_fp)rdfa_replace_string);",
          "318:       rdfa_update_mapping(context->term_mappings,",
          "319:          \"p3pv1\", \"http://www.w3.org/1999/xhtml/vocab#p3pv1\",",
          "320:          (update_mapping_value_fp)rdfa_replace_string);",
          "323:       rdfa_update_mapping(context->term_mappings,",
          "324:          \"role\", \"http://www.w3.org/1999/xhtml/vocab#role\",",
          "325:          (update_mapping_value_fp)rdfa_replace_string);",
          "326:    }",
          "329:    if(context->host_language == HOST_LANGUAGE_HTML)",
          "330:    {",
          "332:    }",
          "334: #ifdef LIBRDFA_IN_RAPTOR",
          "336: #else",
          "338:    while(*mptr != NULL)",
          "339:    {",
          "340:       rdfa_next_mapping(mptr++, &key, &value);",
          "341:       mptr++;",
          "342:       rdfa_generate_namespace_triple(context, key, value);",
          "343:    }",
          "344: #endif",
          "345: }",
          "354: rdfacontext* rdfa_create_new_element_context(rdfalist* context_stack)",
          "355: {",
          "356:    rdfacontext* parent_context = (rdfacontext*)",
          "357:       context_stack->items[context_stack->num_items - 1]->data;",
          "358:    rdfacontext* rval = rdfa_create_context(parent_context->base);",
          "364:    rval->base = rdfa_replace_string(rval->base, parent_context->base);",
          "365:    rdfa_init_context(rval);",
          "368:    rval->depth = parent_context->depth + 1;",
          "371: #ifdef LIBRDFA_IN_RAPTOR",
          "373: #else",
          "374:    rdfa_free_mapping(rval->uri_mappings, (free_mapping_value_fp)free);",
          "375: #endif",
          "376:    rdfa_free_mapping(rval->term_mappings, (free_mapping_value_fp)free);",
          "377:    rdfa_free_mapping(rval->list_mappings, (free_mapping_value_fp)rdfa_free_list);",
          "378:    rdfa_free_mapping(rval->local_list_mappings, (free_mapping_value_fp)rdfa_free_list);",
          "379: #ifdef LIBRDFA_IN_RAPTOR",
          "381: #else",
          "382:    rval->uri_mappings =",
          "383:       rdfa_copy_mapping((void**)parent_context->uri_mappings,",
          "384:          (copy_mapping_value_fp)rdfa_replace_string);",
          "385: #endif",
          "386:    rval->term_mappings =",
          "387:       rdfa_copy_mapping((void**)parent_context->term_mappings,",
          "388:          (copy_mapping_value_fp)rdfa_replace_string);",
          "389:    rval->list_mappings =",
          "390:       rdfa_copy_mapping((void**)parent_context->local_list_mappings,",
          "391:          (copy_mapping_value_fp)rdfa_replace_list);",
          "392:    rval->local_list_mappings =",
          "393:       rdfa_copy_mapping((void**)parent_context->local_list_mappings,",
          "394:          (copy_mapping_value_fp)rdfa_replace_list);",
          "397:    rval->host_language = parent_context->host_language;",
          "398:    rval->rdfa_version = parent_context->rdfa_version;",
          "401:    if(parent_context->language != NULL)",
          "402:    {",
          "403:       rval->language =",
          "404:          rdfa_replace_string(rval->language, parent_context->language);",
          "405:    }",
          "408:    if(parent_context->default_vocabulary != NULL)",
          "409:    {",
          "410:       rval->default_vocabulary = rdfa_replace_string(",
          "411:          rval->default_vocabulary, parent_context->default_vocabulary);",
          "412:    }",
          "415:    rval->default_graph_triple_callback =",
          "416:       parent_context->default_graph_triple_callback;",
          "417:    rval->processor_graph_triple_callback =",
          "418:       parent_context->processor_graph_triple_callback;",
          "419:    rval->buffer_filler_callback = parent_context->buffer_filler_callback;",
          "423:    rval->bnode_count = parent_context->bnode_count;",
          "424:    rval->underscore_colon_bnode_name =",
          "425:       rdfa_replace_string(rval->underscore_colon_bnode_name,",
          "426:                           parent_context->underscore_colon_bnode_name);",
          "427:    rval->recurse = parent_context->recurse;",
          "428:    rval->skip_element = 0;",
          "429:    rval->callback_data = parent_context->callback_data;",
          "430:    rval->xml_literal_namespaces_defined =",
          "431:       parent_context->xml_literal_namespaces_defined;",
          "432:    rval->xml_literal_xml_lang_defined =",
          "433:       parent_context->xml_literal_xml_lang_defined;",
          "435: #if 0",
          "438:    if(parent_context->new_subject != NULL)",
          "439:    {",
          "440:       rval->new_subject = rdfa_replace_string(",
          "441:          rval->new_subject, parent_context->new_subject);",
          "442:    }",
          "443: #endif",
          "445:    if(parent_context->skip_element == 0)",
          "446:    {",
          "450:       if(parent_context->new_subject != NULL)",
          "451:       {",
          "452:          rval->parent_subject = rdfa_replace_string(",
          "453:             rval->parent_subject, parent_context->new_subject);",
          "454:       }",
          "455:       else",
          "456:       {",
          "457:          rval->parent_subject = rdfa_replace_string(",
          "458:             rval->parent_subject, parent_context->parent_subject);",
          "459:       }",
          "465:       if(parent_context->current_object_resource != NULL)",
          "466:       {",
          "467:          rval->parent_object =",
          "468:             rdfa_replace_string(",
          "469:                rval->parent_object, parent_context->current_object_resource);",
          "470:       }",
          "471:       else if(parent_context->new_subject != NULL)",
          "472:       {",
          "473:          rval->parent_object =",
          "474:             rdfa_replace_string(",
          "475:                rval->parent_object, parent_context->new_subject);",
          "476:       }",
          "477:       else",
          "478:       {",
          "479:          rval->parent_object =",
          "480:             rdfa_replace_string(",
          "481:                rval->parent_object, parent_context->parent_subject);",
          "482:       }",
          "486:       rval->incomplete_triples = rdfa_replace_list(",
          "487:          rval->incomplete_triples, parent_context->local_incomplete_triples);",
          "488:    }",
          "489:    else",
          "490:    {",
          "491:       rval->parent_subject = rdfa_replace_string(",
          "492:          rval->parent_subject, parent_context->parent_subject);",
          "493:       rval->parent_object = rdfa_replace_string(",
          "494:          rval->parent_object, parent_context->parent_object);",
          "497:       rval->incomplete_triples = rdfa_replace_list(",
          "498:          rval->incomplete_triples, parent_context->incomplete_triples);",
          "501:       rval->local_incomplete_triples = rdfa_replace_list(",
          "502:          rval->local_incomplete_triples,",
          "503:          parent_context->local_incomplete_triples);",
          "504:    }",
          "506: #ifdef LIBRDFA_IN_RAPTOR",
          "507:    rval->base_uri = parent_context->base_uri;",
          "508:    rval->sax2     = parent_context->sax2;",
          "509:    rval->namespace_handler = parent_context->namespace_handler;",
          "510:    rval->namespace_handler_user_data = parent_context->namespace_handler_user_data;",
          "511: #endif",
          "513:    return rval;",
          "514: }",
          "516: void rdfa_free_context_stack(rdfacontext* context)",
          "517: {",
          "519:    if(context->context_stack != NULL)",
          "520:    {",
          "521:       void* rval;",
          "524:       do",
          "525:       {",
          "526:          rval = rdfa_pop_item(context->context_stack);",
          "527:          if(rval && rval != context)",
          "528:          {",
          "529:             rdfa_free_context((rdfacontext*)rval);",
          "530:          }",
          "531:       }",
          "532:       while(rval);",
          "533:       free(context->context_stack->items);",
          "534:       free(context->context_stack);",
          "535:       context->context_stack = NULL;",
          "536:    }",
          "537: }",
          "539: void rdfa_free_context(rdfacontext* context)",
          "540: {",
          "541:    free(context->base);",
          "542:    free(context->default_vocabulary);",
          "543:    free(context->parent_subject);",
          "544:    free(context->parent_object);",
          "546: #ifdef LIBRDFA_IN_RAPTOR",
          "547: #else",
          "548:    rdfa_free_mapping(context->uri_mappings, (free_mapping_value_fp)free);",
          "549: #endif",
          "551:    rdfa_free_mapping(context->term_mappings, (free_mapping_value_fp)free);",
          "552:    rdfa_free_list(context->incomplete_triples);",
          "553:    rdfa_free_mapping(context->list_mappings,",
          "554:       (free_mapping_value_fp)rdfa_free_list);",
          "555:    rdfa_free_mapping(context->local_list_mappings,",
          "556:       (free_mapping_value_fp)rdfa_free_list);",
          "557:    free(context->language);",
          "558:    free(context->underscore_colon_bnode_name);",
          "559:    free(context->new_subject);",
          "560:    free(context->current_object_resource);",
          "561:    free(context->about);",
          "562:    free(context->typed_resource);",
          "563:    free(context->resource);",
          "564:    free(context->href);",
          "565:    free(context->src);",
          "566:    free(context->content);",
          "567:    free(context->datatype);",
          "568:    rdfa_free_list(context->property);",
          "569:    free(context->plain_literal);",
          "570:    free(context->xml_literal);",
          "573:    rdfa_free_list(context->local_incomplete_triples);",
          "575:    rdfa_free_context_stack(context);",
          "576:    free(context->working_buffer);",
          "577:    free(context);",
          "578: }",
          "",
          "---------------"
        ],
        "librdfa/curie.c||librdfa/curie.c": [
          "File: librdfa/curie.c -> librdfa/curie.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"rdfa_utils.h\"",
          "29: #include \"rdfa.h\"",
          "45: #define XHTML_VOCAB_URI \"http://www.w3.org/1999/xhtml/vocab#\"",
          "46: #define XHTML_VOCAB_URI_SIZE 35",
          "",
          "[Removed Lines]",
          "25: #include \"stdlib.h\"",
          "26: #include \"string.h\"",
          "27: #include \"stdio.h\"",
          "33: #define XHTML_RELREV_RESERVED_WORDS_SIZE 24",
          "34: static const char* const g_relrev_reserved_words[XHTML_RELREV_RESERVED_WORDS_SIZE] =",
          "35: {",
          "36:    \"alternate\", \"appendix\", \"bookmark\", \"chapter\", \"cite\", \"contents\",",
          "37:    \"copyright\", \"first\", \"glossary\", \"help\", \"icon\", \"index\",",
          "38:    \"meta\", \"next\", \"p3pv1\", \"prev\", \"role\",  \"section\",  \"stylesheet\",",
          "39:    \"subsection\",  \"start\", \"license\", \"up\", \"last\"",
          "40: };",
          "",
          "[Added Lines]",
          "25: #ifdef HAVE_CONFIG_H",
          "26: #  include <config.h>",
          "27: #endif",
          "29: #include <stdlib.h>",
          "30: #include <string.h>",
          "31: #include <strings.h>",
          "32: #include <stdio.h>",
          "33: #include <ctype.h>",
          "36: #include \"strtok_r.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:    }",
          "353:    else if((ctype == CURIE_TYPE_IRI_OR_UNSAFE) &&",
          "354:            ((mode == CURIE_PARSE_HREF_SRC) ||",
          "356:    {",
          "360:       rval = rdfa_resolve_uri(context, uri);",
          "361:    }",
          "368:          ((ctype == CURIE_TYPE_IRI_OR_UNSAFE) &&",
          "369:           ((mode == CURIE_PARSE_INSTANCEOF_DATATYPE) ||",
          "370:            (mode == CURIE_PARSE_PROPERTY) ||",
          "372:    {",
          "373:       char* working_copy = NULL;",
          "374:       char* wcptr = NULL;",
          "",
          "[Removed Lines]",
          "355:             (mode == CURIE_PARSE_ABOUT_RESOURCE)))",
          "367:    if((ctype == CURIE_TYPE_SAFE) ||",
          "371:            (mode == CURIE_PARSE_RELREV))))",
          "",
          "[Added Lines]",
          "351:             (context->rdfa_version == RDFA_VERSION_1_0 &&",
          "352:                mode == CURIE_PARSE_ABOUT_RESOURCE)))",
          "363:    if(ctype == CURIE_TYPE_IRI_OR_UNSAFE && mode == CURIE_PARSE_PROPERTY)",
          "364:    {",
          "365:       const char* term_iri;",
          "366:       term_iri = (const char*)rdfa_get_mapping(context->term_mappings, uri);",
          "367:       if(term_iri != NULL)",
          "368:       {",
          "369:          rval = strdup(term_iri);",
          "370:       }",
          "371:       else if(context->default_vocabulary == NULL && strstr(uri, \":\") == NULL)",
          "372:       {",
          "374: #define FORMAT_1 \"The use of the '%s' term was unrecognized by the RDFa processor because it is not a valid term for the current Host Language.\"",
          "376: #ifdef LIBRDFA_IN_RAPTOR",
          "377:          raptor_parser_warning((raptor_parser*)context->callback_data,",
          "378:                                FORMAT_1, uri);",
          "379: #else",
          "380:          char msg[1024];",
          "381:          snprintf(msg, 1024, FORMAT_1, uri);",
          "383:          rdfa_processor_triples(context, RDFA_PROCESSOR_WARNING, msg);",
          "384: #endif",
          "385:       }",
          "386:    }",
          "392:    if(rval == NULL && ((ctype == CURIE_TYPE_SAFE) ||",
          "396:            (mode == CURIE_PARSE_RELREV) ||",
          "397:            (context->rdfa_version == RDFA_VERSION_1_1 &&",
          "398:               mode == CURIE_PARSE_ABOUT_RESOURCE)))))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:       const char* expanded_prefix = NULL;",
          "379:       working_copy = (char*)malloc(strlen(uri) + 1);",
          "383:       if(ctype == CURIE_TYPE_SAFE)",
          "384:       {",
          "385:          prefix = strtok_r(working_copy, \"[:]\", &wcptr);",
          "386:          if(wcptr)",
          "388:       }",
          "389:       else if(ctype == CURIE_TYPE_IRI_OR_UNSAFE)",
          "390:       {",
          "391:          prefix = strtok_r(working_copy, \":\", &wcptr);",
          "392:          if(wcptr)",
          "394:       }",
          "400:       if((uri[0] == ':') || (strcmp(uri, \"[:]\") == 0))",
          "401:       {",
          "402:          expanded_prefix = XHTML_VOCAB_URI;",
          "",
          "[Removed Lines]",
          "380:       strcpy(working_copy, uri);//rdfa_replace_string(working_copy, uri);",
          "387:             curie_reference = strtok_r(NULL, \"[:]\", &wcptr);",
          "393:             curie_reference = strtok_r(NULL, \":\", &wcptr);",
          "",
          "[Added Lines]",
          "414:             curie_reference = strtok_r(NULL, \"[]\", &wcptr);",
          "420:             curie_reference = strtok_r(NULL, \"\", &wcptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:       }",
          "406:       else if(uri[0] == ':')",
          "407:       {",
          "411:          expanded_prefix = context->base;",
          "412:          curie_reference = prefix;",
          "413:          prefix = NULL;",
          "414:       }",
          "415:       else if(prefix != NULL)",
          "416:       {",
          "418:          {",
          "421:             expanded_prefix = \"_\";",
          "422:          }",
          "427:          else",
          "428:          {",
          "430: #ifdef LIBRDFA_IN_RAPTOR",
          "431:             if(strcmp(prefix, \"xml\"))",
          "432:             {",
          "",
          "[Removed Lines]",
          "417:          if(strcmp(prefix, \"_\") == 0)",
          "",
          "[Added Lines]",
          "444:          if((mode != CURIE_PARSE_PROPERTY) &&",
          "445:             (mode != CURIE_PARSE_RELREV) &&",
          "446:             strcmp(prefix, \"_\") == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444: #else",
          "445:             expanded_prefix =",
          "446:                rdfa_get_mapping(context->uri_mappings, prefix);",
          "447: #endif",
          "448:          }",
          "449:       }",
          "451:       if((expanded_prefix != NULL) && (curie_reference != NULL))",
          "452:       {",
          "455:          if(strcmp(expanded_prefix, \"_\") == 0)",
          "456:          {",
          "457:             rval = rdfa_join_string(\"_:\", curie_reference);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:             if(expanded_prefix == NULL && strstr(uri, \":\") != NULL &&",
          "475:                strstr(uri, \"://\") == NULL)",
          "476:             {",
          "477: #define FORMAT_2 \"The '%s' prefix was not found. You may want to check that it is declared before it is used, or that it is a valid prefix string.\"",
          "478: #ifdef LIBRDFA_IN_RAPTOR",
          "479:               raptor_parser_warning((raptor_parser*)context->callback_data,",
          "480:                                     FORMAT_2, prefix);",
          "481: #else",
          "482:               char msg[1024];",
          "483:               snprintf(msg, 1024, FORMAT_2, prefix);",
          "485:                rdfa_processor_triples(context, RDFA_PROCESSOR_WARNING, msg);",
          "486: #endif",
          "487:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "464:       else if((expanded_prefix != NULL) && (expanded_prefix[0] != '_') &&",
          "465:          (curie_reference == NULL))",
          "466:       {",
          "470:    rval = rdfa_join_string(expanded_prefix, \"\");",
          "471:       }",
          "473:       free(working_copy);",
          "474:    }",
          "481:    {",
          "483:       {",
          "485:       }",
          "487:    }",
          "493:    return rval;",
          "494: }",
          "",
          "[Removed Lines]",
          "478:    if((rval == NULL) &&",
          "479:       ((strcmp(uri, \"[_:]\") == 0) ||",
          "480:        (strcmp(uri, \"_:\") == 0)))",
          "482:       if(context->underscore_colon_bnode_name == NULL)",
          "484:          context->underscore_colon_bnode_name = rdfa_create_bnode(context);",
          "486:       rval = rdfa_replace_string(rval, context->underscore_colon_bnode_name);",
          "",
          "[Added Lines]",
          "517:    if(rval == NULL)",
          "521:       if((strcmp(uri, \"[_:]\") == 0) || (strcmp(uri, \"_:\") == 0))",
          "523:          if(context->underscore_colon_bnode_name == NULL)",
          "524:          {",
          "525:             context->underscore_colon_bnode_name = rdfa_create_bnode(context);",
          "526:          }",
          "527:          rval = rdfa_replace_string(rval, context->underscore_colon_bnode_name);",
          "528:       }",
          "531:       else if(context->rdfa_version == RDFA_VERSION_1_1 &&",
          "532:          (strcmp(uri, \"[]\") != 0))",
          "533:       {",
          "534:          if((context->default_vocabulary != NULL) &&",
          "535:             ((mode == CURIE_PARSE_PROPERTY) || (mode == CURIE_PARSE_RELREV) ||",
          "536:                (mode == CURIE_PARSE_INSTANCEOF_DATATYPE)) &&",
          "537:             (strstr(uri, \":\") == NULL))",
          "538:          {",
          "539:             rval = rdfa_join_string(context->default_vocabulary, uri);",
          "540:          }",
          "541:          else if(((mode == CURIE_PARSE_PROPERTY) ||",
          "542:             (mode == CURIE_PARSE_ABOUT_RESOURCE)) &&",
          "543:             (strstr(uri, \"_:\") == NULL) && (strstr(uri, \"[_:\") == NULL))",
          "544:          {",
          "545:             rval = rdfa_resolve_uri(context, uri);",
          "546:          }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "508: char* rdfa_resolve_relrev_curie(rdfacontext* context, const char* uri)",
          "509: {",
          "510:    char* rval = NULL;",
          "512:    const char* resource = uri;",
          "515:    if(uri[0] == ':')",
          "516:    {",
          "517:       resource++;",
          "518:    }",
          "523:    {",
          "525:       {",
          "530:       }",
          "531:    }",
          "535:    if(rval == NULL)",
          "536:    {",
          "537:       rval = rdfa_resolve_curie(context, uri, CURIE_PARSE_RELREV);",
          "538:    }",
          "540:    return rval;",
          "541: }",
          "",
          "[Removed Lines]",
          "511:    int i = 0;",
          "522:    for(i = 0; i < XHTML_RELREV_RESERVED_WORDS_SIZE; i++)",
          "524:       if(strcasecmp(g_relrev_reserved_words[i], resource) == 0)",
          "528:          rval = rdfa_join_string(XHTML_VOCAB_URI, g_relrev_reserved_words[i]);",
          "529:          i = XHTML_RELREV_RESERVED_WORDS_SIZE;",
          "",
          "[Added Lines]",
          "583:    if(context->default_vocabulary != NULL)",
          "584:    {",
          "585:       rval = rdfa_resolve_curie(context, uri, CURIE_PARSE_RELREV);",
          "586:    }",
          "587:    else if(context->host_language == HOST_LANGUAGE_XHTML1)",
          "591:       char* term = strdup(resource);",
          "592:       char* ptr = NULL;",
          "594:       for(ptr = term; *ptr; ptr++)",
          "597:       }",
          "599:       rval = (char*)rdfa_get_mapping(context->term_mappings, term);",
          "600:       if(rval != NULL)",
          "601:       {",
          "602:          rval = strdup(rval);",
          "603:       }",
          "604:       free(term);",
          "605:    }",
          "606:    else",
          "607:    {",
          "609:       rval = (char*)rdfa_get_mapping(context->term_mappings, resource);",
          "610:       if(rval != NULL)",
          "611:       {",
          "612:          rval = strdup(rval);",
          "624:    if(rval == NULL && (context->rdfa_version == RDFA_VERSION_1_1))",
          "625:    {",
          "626:       rval = rdfa_resolve_uri(context, uri);",
          "627:    }",
          "",
          "---------------"
        ],
        "librdfa/iri.c||librdfa/iri.c": [
          "File: librdfa/iri.c -> librdfa/iri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stdlib.h>",
          "23: #include <stdio.h>",
          "24: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef HAVE_CONFIG_H",
          "23: #  include <config.h>",
          "24: #endif",
          "",
          "---------------"
        ],
        "librdfa/language.c||librdfa/language.c": [
          "File: librdfa/language.c -> librdfa/language.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stdlib.h>",
          "23: #include <stdio.h>",
          "24: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef HAVE_CONFIG_H",
          "23: #  include <config.h>",
          "24: #endif",
          "",
          "---------------"
        ],
        "librdfa/lists.c||librdfa/lists.c": [
          "File: librdfa/lists.c -> librdfa/lists.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdlib.h>",
          "26: #include <string.h>",
          "27: #include <stdio.h>",
          "28: #include \"rdfa_utils.h\"",
          "29: #include \"rdfa.h\"",
          "31: void rdfa_establish_new_inlist_triples(rdfacontext* context,",
          "32:    rdfalist* predicates, const char* object, rdfresource_t object_type)",
          "33: {",
          "34:    int i = 0;",
          "35:    for(i = 0; i < (int)predicates->num_items; i++)",
          "36:    {",
          "37:       const char* predicate = (const char*)predicates->items[i]->data;",
          "38:       char* resolved_predicate = rdfa_resolve_relrev_curie(context, predicate);",
          "39:       rdftriple* triple;",
          "41:       rdfa_create_list_mapping(",
          "42:          context, context->local_list_mappings,",
          "43:          context->new_subject, resolved_predicate);",
          "46:       triple = rdfa_create_triple(context->new_subject, resolved_predicate,",
          "47:          object, object_type, context->datatype, context->language);",
          "48:       rdfa_append_to_list_mapping(context->local_list_mappings,",
          "49:          context->new_subject, resolved_predicate, triple);",
          "51:       free(resolved_predicate);",
          "52:    }",
          "54:    if(DEBUG)",
          "55:    {",
          "56:       printf(\"LOCAL LIST MAPPINGS: \");",
          "57:       rdfa_print_mapping(context->local_list_mappings,",
          "58:          (print_mapping_value_fp)rdfa_print_triple_list);",
          "59:    }",
          "60: }",
          "62: void rdfa_save_incomplete_list_triples(",
          "63:    rdfacontext* context, const rdfalist* rel)",
          "64: {",
          "65:    unsigned int i;",
          "66:    for(i = 0; i < rel->num_items; i++)",
          "67:    {",
          "68:       const char* curie = (const char*)rel->items[i]->data;",
          "69:       char* resolved_curie = rdfa_resolve_relrev_curie(context, curie);",
          "72:       rdfa_create_list_mapping(",
          "73:          context, context->local_list_mappings,",
          "74:          context->new_subject, resolved_curie);",
          "77:       rdfa_add_item(",
          "78:          context->local_incomplete_triples, resolved_curie,",
          "79:          (liflag_t)(RDFALIST_FLAG_DIR_NONE | RDFALIST_FLAG_TEXT));",
          "81:       free(resolved_curie);",
          "82:    }",
          "84:    if(DEBUG)",
          "85:    {",
          "86:       printf(\"LOCAL INCOMPLETE TRIPLES: \");",
          "87:       rdfa_print_list(context->local_incomplete_triples);",
          "88:    }",
          "89: }",
          "91: void rdfa_complete_list_triples(rdfacontext* context)",
          "92: {",
          "96:    int i;",
          "97:    rdfalist* list;",
          "98:    rdftriple* triple;",
          "99:    void** mptr = context->local_list_mappings;",
          "100:    char* key = NULL;",
          "101:    void** kptr = NULL;",
          "102:    void* value = NULL;",
          "103:    unsigned int list_depth = 0;",
          "105:    if(DEBUG)",
          "106:    {",
          "107:       printf(\"local_list_mappings: \");",
          "108:       rdfa_print_mapping(context->local_list_mappings,",
          "109:          (print_mapping_value_fp)rdfa_print_triple_list);",
          "110:    }",
          "112:    while(*mptr != NULL)",
          "113:    {",
          "114:       kptr = mptr;",
          "115:       rdfa_next_mapping(mptr++, &key, &value);",
          "116:       list = (rdfalist*)value;",
          "117:       list_depth = list->user_data;",
          "118:       mptr++;",
          "119:       if(DEBUG)",
          "120:       {",
          "121:          printf(\"LIST TRIPLES for key (%u/%u): KEY(%s)\\n\",",
          "122:             context->depth, list_depth, key);",
          "123:       }",
          "125:       if((context->depth < (int)list_depth) &&",
          "126:          (rdfa_get_list_mapping(",
          "127:             context->list_mappings, context->new_subject, key) == NULL) &&",
          "128:          (strcmp(key, RDFA_MAPPING_DELETED_KEY) != 0))",
          "129:       {",
          "130:          char* predicate = strstr(key, \" \") + 1;",
          "131:          triple = (rdftriple*)list->items[0]->data;",
          "132:          if(list->num_items == 1)",
          "133:          {",
          "135:             rdfa_free_triple(triple);",
          "138:             triple = rdfa_create_triple(context->new_subject, predicate,",
          "139:                \"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil\",",
          "140:                RDF_TYPE_IRI, NULL, NULL);",
          "141:             context->default_graph_triple_callback(",
          "142:                triple, context->callback_data);",
          "143:          }",
          "144:          else",
          "145:          {",
          "146:             char* bnode = NULL;",
          "147:             char* subject;",
          "148:             char* tmp;",
          "149:             bnode = rdfa_replace_string(bnode, triple->subject);",
          "150:             for(i = 1; i < (int)list->num_items; i++)",
          "151:             {",
          "152:                char* next = NULL;",
          "153:                triple = (rdftriple*)list->items[i]->data;",
          "165:                triple->subject =",
          "166:                   rdfa_replace_string(triple->subject, bnode);",
          "167:                triple->predicate =",
          "168:                   rdfa_replace_string(triple->predicate,",
          "169:                      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\");",
          "170:                context->default_graph_triple_callback(",
          "171:                   triple, context->callback_data);",
          "174:                free(list->items[i]);",
          "175:                list->items[i] = NULL;",
          "187:                if(i < (int)list->num_items - 1)",
          "188:                {",
          "189:                   next = rdfa_create_bnode(context);",
          "190:                }",
          "191:                else",
          "192:                {",
          "193:                   next = (char*)\"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil\";",
          "194:                }",
          "196:                triple = rdfa_create_triple(bnode,",
          "197:                   \"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\",",
          "198:                   next, RDF_TYPE_IRI, NULL, NULL);",
          "199:                context->default_graph_triple_callback(",
          "200:                   triple, context->callback_data);",
          "203:                free(bnode);",
          "204:                bnode = next;",
          "205:             }",
          "214:             subject = strdup(key);",
          "215:             tmp = strstr(subject, \" \");",
          "216:             tmp[0] = '\\0';",
          "217:             triple = (rdftriple*)list->items[0]->data;",
          "218:             triple->subject =",
          "219:                rdfa_replace_string(triple->subject, subject);",
          "220:             triple->predicate =",
          "221:                rdfa_replace_string(triple->predicate, predicate);",
          "222:             context->default_graph_triple_callback(",
          "223:                triple, context->callback_data);",
          "224:             free(subject);",
          "225:          }",
          "228:          triple = (rdftriple*)list->items[0]->data;",
          "229:          free(list->items[0]);",
          "230:          list->items[0] = NULL;",
          "231:          list->num_items = 0;",
          "235:       }",
          "236:    }",
          "237: }",
          "",
          "---------------"
        ],
        "librdfa/rdfa.c||librdfa/rdfa.c": [
          "File: librdfa/rdfa.c -> librdfa/rdfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <stdlib.h>",
          "40: #include <stdio.h>",
          "41: #include <string.h>",
          "42: #include \"rdfa_utils.h\"",
          "43: #include \"rdfa.h\"",
          "45: #define READ_BUFFER_SIZE 4096",
          "46: #define RDFA_DOCTYPE_STRING_LENGTH 103",
          "",
          "[Removed Lines]",
          "48: void rdfa_init_context(rdfacontext* context)",
          "49: {",
          "51:    context->parent_subject = NULL;",
          "52:    if(context->base != NULL)",
          "53:    {",
          "54:       char* cleaned_base = rdfa_iri_get_base(context->base);",
          "55:       context->parent_subject =",
          "56:          rdfa_replace_string(context->parent_subject, cleaned_base);",
          "57:       free(cleaned_base);",
          "58:    }",
          "61:    context->parent_object = NULL;",
          "63: #ifndef LIBRDFA_IN_RAPTOR",
          "65:    context->uri_mappings = (char**)rdfa_create_mapping(MAX_URI_MAPPINGS);",
          "66: #endif",
          "69:    context->incomplete_triples = rdfa_create_list(3);",
          "72:    context->language = NULL;",
          "75:    context->current_object_resource = NULL;",
          "80:    context->recurse = 1;",
          "83:    context->skip_element = 0;",
          "86:    context->new_subject = NULL;",
          "89:    context->current_object_resource = NULL;",
          "96:    context->local_incomplete_triples = rdfa_create_list(3);",
          "104:    context->bnode_count = 0;",
          "105:    context->underscore_colon_bnode_name = NULL;",
          "106:    context->xml_literal_namespaces_defined = 0;",
          "107:    context->xml_literal_xml_lang_defined = 0;",
          "108:    context->content = NULL;",
          "109:    context->datatype = NULL;",
          "110:    context->property = NULL;",
          "111:    context->plain_literal = NULL;",
          "112:    context->plain_literal_size = 0;",
          "113:    context->xml_literal = NULL;",
          "114:    context->xml_literal_size = 0;",
          "118: }",
          "",
          "[Added Lines]",
          "39: #ifdef HAVE_CONFIG_H",
          "40: #  include <config.h>",
          "41: #endif",
          "46: #include <strings.h>",
          "47: #include <ctype.h>",
          "48: #include <libxml/SAX2.h>",
          "51: #include \"strtok_r.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:          temp_buffer_size += needed_size;",
          "156:    }",
          "159:    memmove(*working_buffer + offset, temp_buffer, bytes_read);",
          "164:    head_end = strstr(*working_buffer, \"</head>\");",
          "165:    if(head_end == NULL)",
          "166:       head_end = strstr(*working_buffer, \"</HEAD>\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:    if(strstr(*working_buffer, \"-//W3C//DTD XHTML+RDFa 1.0//EN\") != NULL)",
          "101:    {",
          "102:       context->host_language = HOST_LANGUAGE_XHTML1;",
          "103:       context->rdfa_version = RDFA_VERSION_1_0;",
          "104:    }",
          "105:    else if(strstr(*working_buffer, \"-//W3C//DTD XHTML+RDFa 1.1//EN\") != NULL)",
          "106:    {",
          "107:       context->host_language = HOST_LANGUAGE_XHTML1;",
          "108:       context->rdfa_version = RDFA_VERSION_1_1;",
          "109:    }",
          "110:    else if(strstr(*working_buffer, \"<html\") != NULL)",
          "111:    {",
          "112:       context->host_language = HOST_LANGUAGE_HTML;",
          "113:       context->rdfa_version = RDFA_VERSION_1_1;",
          "114:    }",
          "115:    else",
          "116:    {",
          "117:       context->host_language = HOST_LANGUAGE_XML1;",
          "118:       context->rdfa_version = RDFA_VERSION_1_1;",
          "119:    }",
          "121: #ifdef LIBRDFA_IN_RAPTOR",
          "122:    if(context->raptor_rdfa_version == 10) {",
          "123:       context->host_language = HOST_LANGUAGE_XHTML1;",
          "124:       context->rdfa_version = RDFA_VERSION_1_0;",
          "125:    } else if(context->raptor_rdfa_version == 11)",
          "126:      context->rdfa_version = RDFA_VERSION_1_1;",
          "127: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:    return bytes_read;",
          "217: }",
          "360: #ifdef LIBRDFA_IN_RAPTOR",
          "361: static int",
          "362: raptor_nspace_compare(const void *a, const void *b)",
          "",
          "[Removed Lines]",
          "226: static rdfacontext* rdfa_create_new_element_context(rdfalist* context_stack)",
          "227: {",
          "228:    rdfacontext* parent_context = (rdfacontext*)",
          "229:       context_stack->items[context_stack->num_items - 1]->data;",
          "230:    rdfacontext* rval = rdfa_create_context(parent_context->base);",
          "236:    rval->base = rdfa_replace_string(rval->base, parent_context->base);",
          "237:    rdfa_init_context(rval);",
          "240: #ifndef LIBRDFA_IN_RAPTOR",
          "241:    rdfa_free_mapping(rval->uri_mappings);",
          "242:    rval->uri_mappings = rdfa_copy_mapping(parent_context->uri_mappings);",
          "243: #endif",
          "246:    if(parent_context->language != NULL)",
          "247:    {",
          "248:       rval->language =",
          "249:          rdfa_replace_string(rval->language, parent_context->language);",
          "250:    }",
          "253:    rval->default_graph_triple_callback =",
          "254:       parent_context->default_graph_triple_callback;",
          "255:    rval->processor_graph_triple_callback =",
          "256:       parent_context->processor_graph_triple_callback;",
          "257:    rval->buffer_filler_callback = parent_context->buffer_filler_callback;",
          "261:    rval->bnode_count = parent_context->bnode_count;",
          "262:    rval->underscore_colon_bnode_name =",
          "263:       rdfa_replace_string(rval->underscore_colon_bnode_name,",
          "264:                           parent_context->underscore_colon_bnode_name);",
          "265:    rval->recurse = parent_context->recurse;",
          "266:    rval->skip_element = 0;",
          "267:    rval->callback_data = parent_context->callback_data;",
          "268:    rval->xml_literal_namespaces_defined =",
          "269:       parent_context->xml_literal_namespaces_defined;",
          "270:    rval->xml_literal_xml_lang_defined =",
          "271:       parent_context->xml_literal_xml_lang_defined;",
          "281:    if(parent_context->skip_element == 0)",
          "282:    {",
          "286:       if(parent_context->new_subject != NULL)",
          "287:       {",
          "288:          rval->parent_subject = rdfa_replace_string(",
          "289:             rval->parent_subject, parent_context->new_subject);",
          "290:       }",
          "291:       else",
          "292:       {",
          "293:          rval->parent_subject = rdfa_replace_string(",
          "294:             rval->parent_subject, parent_context->parent_subject);",
          "295:       }",
          "301:       if(parent_context->current_object_resource != NULL)",
          "302:       {",
          "303:          rval->parent_object =",
          "304:             rdfa_replace_string(",
          "305:                rval->parent_object, parent_context->current_object_resource);",
          "306:       }",
          "307:       else if(parent_context->new_subject != NULL)",
          "308:       {",
          "309:          rval->parent_object =",
          "310:             rdfa_replace_string(",
          "311:                rval->parent_object, parent_context->new_subject);",
          "312:       }",
          "313:       else",
          "314:       {",
          "315:          rval->parent_object =",
          "316:             rdfa_replace_string(",
          "317:                rval->parent_object, parent_context->parent_subject);",
          "318:       }",
          "321:       if(rval->incomplete_triples != NULL)",
          "322:       {",
          "323:          rdfa_free_list(rval->incomplete_triples);",
          "324:       }",
          "328:       rval->incomplete_triples =",
          "329:          rdfa_copy_list(parent_context->local_incomplete_triples);",
          "330:    }",
          "331:    else",
          "332:    {",
          "333:       rval->parent_subject = rdfa_replace_string(",
          "334:          rval->parent_subject, parent_context->parent_subject);",
          "335:       rval->parent_object = rdfa_replace_string(",
          "336:          rval->parent_object, parent_context->parent_object);",
          "339:       rdfa_free_list(rval->incomplete_triples);",
          "340:       rval->incomplete_triples =",
          "341:          rdfa_copy_list(parent_context->incomplete_triples);",
          "344:       rdfa_free_list(rval->local_incomplete_triples);",
          "345:       rval->local_incomplete_triples =",
          "346:          rdfa_copy_list(parent_context->local_incomplete_triples);",
          "347:    }",
          "349: #ifdef LIBRDFA_IN_RAPTOR",
          "350:    rval->base_uri = parent_context->base_uri;",
          "351:    rval->sax2     = parent_context->sax2;",
          "352:    rval->namespace_handler = parent_context->namespace_handler;",
          "353:    rval->namespace_handler_user_data = parent_context->namespace_handler_user_data;",
          "354: #endif",
          "356:    return rval;",
          "357: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380: {",
          "382:    rdfacontext* context = rdfa_create_new_element_context(context_stack);",
          "385:    const char* about_curie = NULL;",
          "386:    char* about = NULL;",
          "387:    const char* src_curie = NULL;",
          "",
          "[Removed Lines]",
          "378: static void XMLCALL",
          "379:    start_element(void* user_data, const char* name, const char** attributes)",
          "381:    rdfalist* context_stack = (rdfalist*) user_data;",
          "383:    const char** aptr = attributes;",
          "384:    const char* xml_lang = NULL;",
          "",
          "[Added Lines]",
          "203: static void start_element(void *parser_context, const char* name,",
          "204:    const char* prefix, const char* URI, int nb_namespaces,",
          "205:    const char** namespaces, int nb_attributes, int nb_defaulted,",
          "206:    const char** attributes)",
          "208:    rdfacontext* root_context = (rdfacontext*)parser_context;",
          "209:    rdfalist* context_stack = (rdfalist*)root_context->context_stack;",
          "211:    char* xml_lang = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:    char* resource = NULL;",
          "399:    const char* href_curie = NULL;",
          "400:    char* href = NULL;",
          "402:    const char* datatype_curie = NULL;",
          "403:    char* datatype = NULL;",
          "",
          "[Removed Lines]",
          "401:    const char* content = NULL;",
          "",
          "[Added Lines]",
          "228:    char* content = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "407:    if(DEBUG)",
          "408:    {",
          "410:    }",
          "413:    if(context->xml_literal == NULL)",
          "414:    {",
          "415:       context->xml_literal = rdfa_replace_string(context->xml_literal, \"<\");",
          "",
          "[Removed Lines]",
          "409:       printf(\"DEBUG: ------- START - %s -------\\n\", name);",
          "",
          "[Added Lines]",
          "236:       int i;",
          "239:       fprintf(stdout, \"DEBUG: SAX.startElementNs(%s\", (char *) name);",
          "240:       if (prefix == NULL)",
          "241:           fprintf(stdout, \", NULL\");",
          "242:       else",
          "243:           fprintf(stdout, \", %s\", (char *) prefix);",
          "244:       if (URI == NULL)",
          "245:           fprintf(stdout, \", NULL\");",
          "246:       else",
          "247:           fprintf(stdout, \", '%s'\", (char *) URI);",
          "248:       fprintf(stdout, \", %d\", nb_namespaces);",
          "251:       if (namespaces != NULL) {",
          "252:           for (i = 0;i < nb_namespaces * 2;i++) {",
          "253:               fprintf(stdout, \", xmlns\");",
          "254:               if (namespaces[i] != NULL)",
          "255:                   fprintf(stdout, \":%s\", namespaces[i]);",
          "256:               i++;",
          "257:               fprintf(stdout, \"='%s'\", namespaces[i]);",
          "258:           }",
          "259:       }",
          "262:       fprintf(stdout, \", %d, %d\", nb_attributes, nb_defaulted);",
          "263:       if (attributes != NULL) {",
          "264:           for (i = 0;i < nb_attributes * 5;i += 5) {",
          "265:               if (attributes[i + 1] != NULL)",
          "266:                   fprintf(",
          "267:                      stdout, \", %s:%s='\", attributes[i + 1], attributes[i]);",
          "268:               else",
          "269:                   fprintf(stdout, \", %s='\", attributes[i]);",
          "270:               fprintf(stdout, \"%.4s...', %d\", attributes[i + 3],",
          "271:                       (int)(attributes[i + 4] - attributes[i + 3]));",
          "272:           }",
          "273:       }",
          "274:       fprintf(stdout, \")\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "427:    if(!context->xml_literal_namespaces_defined)",
          "428:    {",
          "430: #ifdef LIBRDFA_IN_RAPTOR",
          "431:       raptor_namespace_stack* nstack = &context->sax2->namespaces;",
          "432:       raptor_namespace* ns;",
          "433:       raptor_namespace** ns_list = NULL;",
          "434:       size_t ns_size;",
          "435: #else",
          "437: #endif",
          "438:       char* umap_key = NULL;",
          "442:       context->xml_literal_xml_lang_defined = 0;",
          "444: #ifdef LIBRDFA_IN_RAPTOR",
          "",
          "[Removed Lines]",
          "436:       char** umap = context->uri_mappings;",
          "439:       char* umap_value = NULL;",
          "",
          "[Added Lines]",
          "301:       void** umap = context->uri_mappings;",
          "304:       void* umap_value = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "477:             {",
          "478:                attr = *attrs++;",
          "484:                {",
          "485:                   insert_xmlns_definition = 0;",
          "486:                }",
          "487:             }",
          "488:          }",
          "492:          if(insert_xmlns_definition)",
          "493:          {",
          "495:             context->xml_literal = rdfa_n_append_string(",
          "496:                context->xml_literal, &context->xml_literal_size,",
          "497:                \" xmlns\", strlen(\" xmlns\"));",
          "501:             if(strcmp(umap_key, XMLNS_DEFAULT_MAPPING) != 0)",
          "502:             {",
          "503:                context->xml_literal = rdfa_n_append_string(",
          "",
          "[Removed Lines]",
          "482:                if((strcmp(attr, umap_key) == 0) ||",
          "483:                   (strcmp(umap_key, XMLNS_DEFAULT_MAPPING) == 0))",
          "",
          "[Added Lines]",
          "347:                if(strcmp(attr, umap_key) == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "507:                   umap_key, strlen(umap_key));",
          "508:             }",
          "511:             context->xml_literal = rdfa_n_append_string(",
          "512:                context->xml_literal, &context->xml_literal_size, \"=\\\"\", 2);",
          "513:             context->xml_literal = rdfa_n_append_string(",
          "514:                context->xml_literal, &context->xml_literal_size,",
          "516:             context->xml_literal = rdfa_n_append_string(",
          "517:                context->xml_literal, &context->xml_literal_size, \"\\\"\", 1);",
          "518:          }",
          "",
          "[Removed Lines]",
          "515:                umap_value, strlen(umap_value));",
          "",
          "[Added Lines]",
          "379:                (const char*)umap_value, strlen((char*)umap_value));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "526: #endif",
          "533:    {",
          "535:       {",
          "536:          const char* attr;",
          "538:          char* literal_text;",
          "545:          sprintf(literal_text, \" %s=\\\"%s\\\"\", attr, value);",
          "546:          context->xml_literal = rdfa_n_append_string(",
          "547:             context->xml_literal, &context->xml_literal_size,",
          "548:             literal_text, strlen(literal_text));",
          "549:          free(literal_text);",
          "553:          {",
          "554:             context->xml_literal_xml_lang_defined = 1;",
          "555:          }",
          "558:          if(strcmp(attr, \"about\") == 0)",
          "559:          {",
          "560:             about_curie = value;",
          "",
          "[Removed Lines]",
          "532:    if(aptr != NULL)",
          "534:       while(*aptr != NULL)",
          "537:          const char* value;",
          "540:          attr = *aptr++;",
          "541:          value = *aptr++;",
          "544:          literal_text = (char*)malloc(strlen(attr) + strlen(value) + 5);",
          "552:          if(strcmp(attr, \"xml:lang\") == 0)",
          "",
          "[Added Lines]",
          "393: #ifdef LIBRDFA_IN_RAPTOR",
          "395: #else",
          "403:    if(namespaces != NULL)",
          "404:    {",
          "405:       int ni;",
          "407:       for(ni = 0; ni < nb_namespaces * 2; ni += 2)",
          "408:       {",
          "409:          const char* ns = namespaces[ni];",
          "410:          const char* value = namespaces[ni + 1];",
          "415:          char* lcns = NULL;",
          "416:          if(ns != NULL)",
          "417:          {",
          "419:             unsigned int i;",
          "420:             size_t ns_length = strlen(ns);",
          "421:             lcns = (char*)malloc(ns_length + 1);",
          "422:             for(i = 0; i <= ns_length; i++)",
          "423:             {",
          "424:                lcns[i] = tolower(ns[i]);",
          "425:             }",
          "426:          }",
          "429:          rdfa_update_uri_mappings(context, lcns, value);",
          "431:          if(lcns != NULL)",
          "432:          {",
          "433:             free(lcns);",
          "434:          }",
          "435:       }",
          "436:    }",
          "437: #endif",
          "440:    if(attributes != NULL)",
          "441:    {",
          "442:       int ci;",
          "445:       for(ci = 0; ci < nb_attributes * 5; ci += 5)",
          "446:       {",
          "447:          const char* attr;",
          "448:          char* value;",
          "449:          size_t value_length = 0;",
          "451:          attr = attributes[ci];",
          "452:          value_length = attributes[ci + 4] - attributes[ci + 3] + 1;",
          "454:          if(strcmp(attr, \"version\") == 0)",
          "455:          {",
          "457:             value = (char*)malloc(value_length + 1);",
          "458:             snprintf(value, value_length, \"%s\", attributes[ci + 3]);",
          "459:             if(strstr(value, \"RDFa 1.0\") != NULL)",
          "460:             {",
          "461:                context->rdfa_version = RDFA_VERSION_1_0;",
          "462:             }",
          "463:             else if(strstr(value, \"RDFa 1.1\") != NULL)",
          "464:             {",
          "465:                context->rdfa_version = RDFA_VERSION_1_1;",
          "466:             }",
          "468:             free(value);",
          "469:          }",
          "470:       }",
          "471:    }",
          "475:    if(attributes != NULL)",
          "477:       int ci;",
          "479:       if(context->rdfa_version == RDFA_VERSION_1_1)",
          "480:       {",
          "482:          for(ci = 0; ci < nb_attributes * 5; ci += 5)",
          "483:          {",
          "484:             const char* attr;",
          "485:             char* value;",
          "486:             size_t value_length = 0;",
          "488:             attr = attributes[ci];",
          "489:             value_length = attributes[ci + 4] - attributes[ci + 3] + 1;",
          "492:             value = (char*)malloc(value_length + 1);",
          "493:             snprintf(value, value_length, \"%s\", attributes[ci + 3]);",
          "497:             if(strcmp(attr, \"vocab\") == 0)",
          "498:             {",
          "499:                if(strlen(value) < 1)",
          "500:                {",
          "504:                   free(context->default_vocabulary);",
          "505:                   context->default_vocabulary = NULL;",
          "506:                }",
          "507:                else",
          "508:                {",
          "509:                   char* resolved_uri;",
          "510:                   rdftriple* triple;",
          "515:                   resolved_uri = rdfa_resolve_uri(context, value);",
          "516:                   context->default_vocabulary = rdfa_replace_string(",
          "517:                      context->default_vocabulary, resolved_uri);",
          "520:                   triple = rdfa_create_triple(",
          "521:                      context->base, \"http://www.w3.org/ns/rdfa#usesVocabulary\",",
          "522:                      resolved_uri, RDF_TYPE_IRI, NULL, NULL);",
          "523:                   context->default_graph_triple_callback(",
          "524:                      triple, context->callback_data);",
          "526:                   free(resolved_uri);",
          "527:                }",
          "528:             }",
          "529:             else if(strcmp(attr, \"prefix\") == 0)",
          "530:             {",
          "532:                char* working_string = NULL;",
          "533:                char* atprefix = NULL;",
          "534:                char* iri = NULL;",
          "535:                char* saveptr = NULL;",
          "537:                working_string = rdfa_replace_string(working_string, value);",
          "541:                atprefix = strtok_r(working_string, \":\", &saveptr);",
          "542:                while(atprefix != NULL)",
          "543:                {",
          "545:                   while((*saveptr == ' ' || *saveptr == '\\n' ||",
          "548:                   {",
          "549:                      saveptr++;",
          "550:                   }",
          "551:                   iri = strtok_r(NULL, RDFA_WHITESPACE, &saveptr);",
          "552:                   while((*saveptr == ' ' || *saveptr == '\\n' ||",
          "555:                   {",
          "556:                      saveptr++;",
          "557:                   }",
          "560:                   rdfa_update_uri_mappings(context, atprefix, iri);",
          "563:                   atprefix = strtok_r(NULL, \":\", &saveptr);",
          "564:                }",
          "566:                free(working_string);",
          "567:             }",
          "568:             else if(strcmp(attr, \"inlist\") == 0)",
          "569:             {",
          "570:                context->inlist_present = 1;",
          "571:             }",
          "572:             free(value);",
          "573:          }",
          "574:       }",
          "577:       for(ci = 0; ci < nb_attributes * 5; ci += 5)",
          "580:          char* value;",
          "581:          char* attrns;",
          "583:          size_t value_length = 0;",
          "585:          attr = attributes[ci];",
          "586:          attrns = (char*)attributes[ci + 1];",
          "587:          value_length = attributes[ci + 4] - attributes[ci + 3] + 1;",
          "590:          value = (char*)malloc(value_length + 1);",
          "591:          literal_text = (char*)malloc(strlen(attr) + value_length + 5);",
          "592:          snprintf(value, value_length, \"%s\", attributes[ci + 3]);",
          "601:          if(attrns != NULL && strcmp(attrns, \"xml\") == 0 &&",
          "602:             strcmp(attr, \"lang\") == 0)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "575:          }",
          "576:          else if(strcmp(attr, \"rel\") == 0)",
          "577:          {",
          "578:             rel_curie = value;",
          "579:             rel = rdfa_resolve_curie_list(",
          "580:                context, rel_curie, CURIE_PARSE_RELREV);",
          "581:          }",
          "582:          else if(strcmp(attr, \"rev\") == 0)",
          "583:          {",
          "584:             rev_curie = value;",
          "585:             rev = rdfa_resolve_curie_list(",
          "586:                context, rev_curie, CURIE_PARSE_RELREV);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:             context->rel_present = 1;",
          "635:             context->rev_present = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "606:          }",
          "607:          else if(strcmp(attr, \"content\") == 0)",
          "608:          {",
          "610:          }",
          "611:          else if(strcmp(attr, \"datatype\") == 0)",
          "612:          {",
          "",
          "[Removed Lines]",
          "609:             content = value;",
          "",
          "[Added Lines]",
          "661:             content = rdfa_replace_string(content, value);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "622:                   CURIE_PARSE_INSTANCEOF_DATATYPE);",
          "623:             }",
          "624:          }",
          "631:          {",
          "638:          }",
          "639: #endif",
          "640:       }",
          "641:    }",
          "643: #ifdef LIBRDFA_IN_RAPTOR",
          "644:    if(context->sax2) {",
          "646:       if(!xml_lang)",
          "648:    }",
          "649: #endif",
          "653:    if((xml_lang == NULL) && (context->language != NULL) &&",
          "654:       !context->xml_literal_xml_lang_defined)",
          "655:    {",
          "",
          "[Removed Lines]",
          "625: #ifndef LIBRDFA_IN_RAPTOR",
          "626:          else if(strcmp(attr, \"xml:lang\") == 0)",
          "627:          {",
          "628:             xml_lang = value;",
          "629:          }",
          "630:          else if(strstr(attr, \"xmlns\") != NULL)",
          "637:             rdfa_update_uri_mappings(context, attr, value);",
          "645:       xml_lang = (const char*)raptor_sax2_inscope_xml_language(context->sax2);",
          "647:         xml_lang = \"\";",
          "",
          "[Added Lines]",
          "677: #ifdef LIBRDFA_IN_RAPTOR",
          "679: #else",
          "680:          else if((attrns == NULL && strcmp(attr, \"lang\") == 0) ||",
          "681:             (attrns != NULL && strcmp(attrns, \"xml\") == 0 &&",
          "682:                strcmp(attr, \"lang\") == 0))",
          "684:             xml_lang = rdfa_replace_string(xml_lang, value);",
          "688:          free(value);",
          "694:       xml_lang = (char*)raptor_sax2_inscope_xml_language(context->sax2);",
          "696:         xml_lang = (char*)\"\";",
          "701:    if(context->depth == 1 && about == NULL && resource == NULL &&",
          "702:       href == NULL && src == NULL)",
          "703:    {",
          "704:       about_curie = \"\";",
          "705:       about = rdfa_resolve_curie(",
          "706:          context, about_curie, CURIE_PARSE_ABOUT_RESOURCE);",
          "707:    }",
          "712:    if(about == NULL && resource == NULL && href == NULL && src == NULL &&",
          "713:       (context->parent_subject == NULL || type_of != NULL) &&",
          "714:       ((context->host_language == HOST_LANGUAGE_XHTML1 ||",
          "715:       context->host_language == HOST_LANGUAGE_HTML) &&",
          "716:       (strcasecmp(name, \"head\") == 0 || strcasecmp(name, \"body\") == 0)))",
          "717:    {",
          "718:       about_curie = \"\";",
          "719:       about = rdfa_resolve_curie(",
          "720:          context, about_curie, CURIE_PARSE_ABOUT_RESOURCE);",
          "721:    }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "662:       context->xml_literal = rdfa_n_append_string(",
          "663:          context->xml_literal, &context->xml_literal_size, \"\\\"\", 1);",
          "666:       context->xml_literal_xml_lang_defined = 1;",
          "667:    }",
          "670:    context->xml_literal = rdfa_n_append_string(",
          "671:       context->xml_literal, &context->xml_literal_size, \">\", 1);",
          "676:    rdfa_update_language(context, xml_lang);",
          "679:    if(DEBUG)",
          "680:    {",
          "681:       if(about != NULL)",
          "682:       {",
          "683:          printf(\"DEBUG: @about = %s\\n\", about);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:       printf(\"DEBUG: depth = %u\\n\", context->depth);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "691:          printf(\"DEBUG: @type_of = \");",
          "692:          rdfa_print_list(type_of);",
          "693:       }",
          "694:       if(rel != NULL)",
          "695:       {",
          "696:          printf(\"DEBUG: @rel = \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:       if(context->inlist_present)",
          "769:       {",
          "770:          printf(\"DEBUG: @inlist = true\\n\");",
          "771:       }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "722:       {",
          "723:          printf(\"DEBUG: @datatype = %s\\n\", datatype);",
          "724:       }",
          "725:    }",
          "729:    if((about == NULL) && (src == NULL) && (type_of == NULL) &&",
          "730:       (rel == NULL) && (rev == NULL) && (property == NULL) &&",
          "732:    {",
          "733:       context->skip_element = 1;",
          "734:    }",
          "736:    if((rel == NULL) && (rev == NULL))",
          "737:    {",
          "745:    }",
          "746:    else",
          "747:    {",
          "754:    }",
          "756:    if(context->new_subject != NULL)",
          "",
          "[Removed Lines]",
          "731:       (resource == NULL) && (href == NULL))",
          "743:       rdfa_establish_new_subject(",
          "744:          context, name, about, src, resource, href, type_of);",
          "752:       rdfa_establish_new_subject_with_relrev(",
          "753:          context, name, about, src, resource, href, type_of);",
          "",
          "[Added Lines]",
          "803:       if(xml_lang != NULL)",
          "804:       {",
          "805:          printf(\"DEBUG: @xml:lang = %s\\n\", xml_lang);",
          "806:       }",
          "813:       (resource == NULL) && (href == NULL) &&",
          "814:       (context->default_vocabulary == NULL) && (prefix == NULL))",
          "821:       if(context->rdfa_version == RDFA_VERSION_1_0)",
          "822:       {",
          "828:          rdfa_establish_new_1_0_subject(",
          "829:             context, name, about, src, resource, href, type_of);",
          "830:       }",
          "831:       else",
          "832:       {",
          "833:          rdfa_establish_new_1_1_subject(",
          "834:             context, name, about, src, resource, href, type_of, property,",
          "835:             content, datatype);",
          "836:       }",
          "840:       if(context->rdfa_version == RDFA_VERSION_1_0)",
          "841:       {",
          "846:          rdfa_establish_new_1_0_subject_with_relrev(",
          "847:             context, name, about, src, resource, href, type_of);",
          "848:       }",
          "849:       else",
          "850:       {",
          "851:          rdfa_establish_new_1_1_subject_with_relrev(",
          "852:             context, name, about, src, resource, href, type_of);",
          "853:       }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "760:          printf(\"DEBUG: new_subject = %s\\n\", context->new_subject);",
          "761:       }",
          "767:       if(type_of != NULL)",
          "768:       {",
          "769:          rdfa_complete_type_triples(context, type_of);",
          "770:       }",
          "774:    }",
          "776:    if(context->current_object_resource != NULL)",
          "777:    {",
          "780:       rdfa_complete_relrev_triples(context, rel, rev);",
          "781:    }",
          "783:    {",
          "789:       rdfa_save_incomplete_triples(context, rel, rev);",
          "790:    }",
          "794:    if(property != NULL)",
          "795:    {",
          "796:       context->xml_literal_namespaces_defined = 0;",
          "797:    }",
          "802:    context->datatype = rdfa_replace_string(context->datatype, datatype);",
          "805:    free(about);",
          "806:    free(src);",
          "807:    rdfa_free_list(type_of);",
          "808:    rdfa_free_list(rel);",
          "809:    rdfa_free_list(rev);",
          "810:    free(resource);",
          "811:    free(href);",
          "812:    free(datatype);",
          "813: }",
          "816: {",
          "818:    rdfacontext* context = (rdfacontext*)",
          "819:       context_stack->items[context_stack->num_items - 1]->data;",
          "",
          "[Removed Lines]",
          "782:    else if((rel != NULL) || (rev != NULL))",
          "800:    context->property = property;",
          "801:    context->content = rdfa_replace_string(context->datatype, content);",
          "815: static void XMLCALL character_data(void *user_data, const char *s, int len)",
          "817:    rdfalist* context_stack = (rdfalist*)user_data;",
          "",
          "[Added Lines]",
          "889:       if(context->rdfa_version == RDFA_VERSION_1_1 && (rel != NULL) &&",
          "890:          context->inlist_present)",
          "891:       {",
          "892:          rdfresource_t object_type = RDF_TYPE_IRI;",
          "893:          if((property != NULL) || (content != NULL))",
          "894:          {",
          "895:             object_type = RDF_TYPE_PLAIN_LITERAL;",
          "896:             if(datatype != NULL)",
          "897:             {",
          "898:                object_type = RDF_TYPE_TYPED_LITERAL;",
          "899:             }",
          "900:          }",
          "901:          rdfa_establish_new_inlist_triples(",
          "902:             context, rel, context->current_object_resource, object_type);",
          "903:       }",
          "910:    if((context->current_object_resource == NULL) &&",
          "911:       context->rdfa_version == RDFA_VERSION_1_1  && (rel != NULL) &&",
          "912:       context->inlist_present)",
          "914:       rdfa_save_incomplete_list_triples(context, rel);",
          "915:    }",
          "916:    else if((context->current_object_resource == NULL) &&",
          "917:       ((rel != NULL) || (rev != NULL)))",
          "918:    {",
          "935:    context->about = rdfa_replace_string(context->about, about);",
          "936:    context->resource = rdfa_replace_string(context->resource, resource);",
          "937:    context->href = rdfa_replace_string(context->href, href);",
          "938:    context->src = rdfa_replace_string(context->src, src);",
          "939:    context->content = rdfa_replace_string(context->content, content);",
          "941:    context->property = property;",
          "949: #ifdef LIBRDFA_IN_RAPTOR",
          "951: #else",
          "952:    free(xml_lang);",
          "953: #endif",
          "954:    free(content);",
          "960: static void character_data(",
          "961:       void *parser_context, const xmlChar *s, int len)",
          "964:    rdfalist* context_stack =",
          "965:       (rdfalist*)((rdfacontext*)parser_context)->context_stack;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "832:    else",
          "833:    {",
          "834:       context->plain_literal = rdfa_n_append_string(",
          "836:    }",
          "839:    if(context->xml_literal == NULL)",
          "840:    {",
          "841:       context->xml_literal =",
          "",
          "[Removed Lines]",
          "835:          context->plain_literal, &context->plain_literal_size, buffer, len);",
          "",
          "[Added Lines]",
          "983:          context->plain_literal,",
          "984:          &context->plain_literal_size, buffer, len);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "848:          context->xml_literal, &context->xml_literal_size, buffer, len);",
          "849:   }",
          "854:    free(buffer);",
          "855: }",
          "859: {",
          "861:    rdfacontext* context = (rdfacontext*)rdfa_pop_item(context_stack);",
          "862:    rdfacontext* parent_context = (rdfacontext*)",
          "863:       context_stack->items[context_stack->num_items - 1]->data;",
          "866:    char* buffer = (char*)malloc(strlen(name) + 4);",
          "868:    if(DEBUG)",
          "869:    {",
          "870:       printf(\"DEBUG: </%s>\\n\", name);",
          "871:    }",
          "873:    sprintf(buffer, \"</%s>\", name);",
          "",
          "[Removed Lines]",
          "857: static void XMLCALL",
          "858:    end_element(void *user_data, const char *name)",
          "860:    rdfalist* context_stack = (rdfalist*)user_data;",
          "",
          "[Added Lines]",
          "1006: static void end_element(void* parser_context, const char* name,",
          "1007:    const char* prefix,const xmlChar* URI)",
          "1010:    rdfalist* context_stack =",
          "1011:       (rdfalist*)((rdfacontext*)parser_context)->context_stack;",
          "1022:       printf(\"context->local_list_mappings (start of end_element): \");",
          "1023:       rdfa_print_mapping(context->local_list_mappings,",
          "1024:          (print_mapping_value_fp)rdfa_print_triple_list);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "885:    }",
          "886:    free(buffer);",
          "892:    if(context->property != NULL)",
          "893:    {",
          "895:       char* saved_xml_literal = context->xml_literal;",
          "896:       char* content_start = NULL;",
          "897:       char* content_end = NULL;",
          "901:       buffer = NULL;",
          "903:       if(context->xml_literal != NULL)",
          "904:       {",
          "906:          content_start = strchr(context->xml_literal, '>');",
          "907:          content_end = strrchr(context->xml_literal, '<');",
          "909:          if((content_start != NULL) && (content_end != NULL))",
          "910:          {",
          "912:             context->xml_literal = ++content_start;",
          "914:          }",
          "915:       }",
          "918:       if(strlen(context->xml_literal) == 0)",
          "919:       {",
          "920:          context->plain_literal =",
          "921:             rdfa_replace_string(context->plain_literal, \"\");",
          "922:       }",
          "928:       if(content_end != NULL)",
          "929:       {",
          "932:       }",
          "934:       if(saved_xml_literal != NULL)",
          "935:       {",
          "937:          context->xml_literal = saved_xml_literal;",
          "938:       }",
          "939:    }",
          "945:    if(context->xml_literal != NULL)",
          "946:    {",
          "947:       if(parent_context->xml_literal == NULL)",
          "",
          "[Removed Lines]",
          "926:       rdfa_complete_object_literal_triples(context);",
          "",
          "[Added Lines]",
          "1080:       if(context->rdfa_version == RDFA_VERSION_1_0)",
          "1081:       {",
          "1082:          rdfa_complete_object_literal_triples(context);",
          "1083:       }",
          "1084:       else",
          "1085:       {",
          "1086:          rdfa_complete_current_property_value_triples(context);",
          "1087:       }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "955:       {",
          "956:          parent_context->xml_literal =",
          "957:             rdfa_n_append_string(",
          "959:                context->xml_literal, context->xml_literal_size);",
          "960:       }",
          "963:       if(context->plain_literal != NULL)",
          "964:       {",
          "965:          if(parent_context->plain_literal == NULL)",
          "",
          "[Removed Lines]",
          "958:                parent_context->xml_literal, &parent_context->xml_literal_size,",
          "",
          "[Added Lines]",
          "1119:                parent_context->xml_literal,",
          "1120:                &parent_context->xml_literal_size,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "967:             parent_context->plain_literal =",
          "968:                rdfa_replace_string(",
          "969:                   parent_context->plain_literal, context->plain_literal);",
          "971:          }",
          "972:          else",
          "973:          {",
          "",
          "[Removed Lines]",
          "970:             parent_context->plain_literal_size = context->plain_literal_size;",
          "",
          "[Added Lines]",
          "1132:             parent_context->plain_literal_size =",
          "1133:                context->plain_literal_size;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "981:       }",
          "982:    }",
          "985:    parent_context->bnode_count = context->bnode_count;",
          "986:    parent_context->underscore_colon_bnode_name = \\",
          "987:       rdfa_replace_string(parent_context->underscore_colon_bnode_name,",
          "988:                           context->underscore_colon_bnode_name);",
          "993:    if((context->skip_element == 0) && (context->new_subject != NULL))",
          "994:    {",
          "995:       rdfa_complete_incomplete_triples(context);",
          "996:    }",
          "1029: }",
          "1033: {",
          "1039: }",
          "1044: {",
          "1046: }",
          "1050: {",
          "1058: }",
          "1089: #ifdef LIBRDFA_IN_RAPTOR",
          "1094: #else",
          "1113: {",
          "1116:    {",
          "1121:       {",
          "1127:       }",
          "1132:    }",
          "1143: #endif",
          "1162: }",
          "1166: {",
          "1168: }",
          "1172: {",
          "1174: }",
          "1177: {",
          "1179: }",
          "1181: int rdfa_parse_start(rdfacontext* context)",
          "1182: {",
          "1184:    int rval = RDFA_PARSE_SUCCESS;",
          "1186:    context->wb_allocated = sizeof(char) * READ_BUFFER_SIZE;",
          "1189:    context->working_buffer = (char*)malloc(context->wb_allocated + 1);",
          "1195:    context->done = 0;",
          "1196:    context->context_stack = rdfa_create_list(32);",
          "1199:    rdfa_push_item(context->context_stack, context, RDFALIST_FLAG_CONTEXT);",
          "1201: #ifdef LIBRDFA_IN_RAPTOR",
          "1202:    context->sax2 = raptor_new_sax2(context->world, context->locator,",
          "1204: #else",
          "1205: #endif",
          "1208: #ifdef LIBRDFA_IN_RAPTOR",
          "1209:    raptor_sax2_set_start_element_handler(context->sax2,",
          "1210:                                          raptor_rdfa_start_element);",
          "",
          "[Removed Lines]",
          "999:    rdfa_free_context(context);",
          "1000: }",
          "1003: #ifdef LIBRDFA_IN_RAPTOR",
          "1004: static void raptor_rdfa_start_element(void *user_data,",
          "1005:                                       raptor_xml_element *xml_element)",
          "1006: {",
          "1007:   raptor_qname* qname=raptor_xml_element_get_name(xml_element);",
          "1008:   int attr_count=raptor_xml_element_get_attributes_count(xml_element);",
          "1009:   raptor_qname** attrs=raptor_xml_element_get_attributes(xml_element);",
          "1010:   unsigned char* qname_string=raptor_qname_to_counted_name(qname, NULL);",
          "1011:   char** attr=NULL;",
          "1012:   int i;",
          "1014:   if(attr_count > 0) {",
          "1015:     attr=(char**)malloc(sizeof(char*) * (1+(attr_count*2)));",
          "1016:     for(i=0; i<attr_count; i++) {",
          "1017:       attr[2*i]=(char*)raptor_qname_to_counted_name(attrs[i], NULL);",
          "1018:       attr[1+(2*i)]=(char*)raptor_qname_get_value(attrs[i]);",
          "1019:     }",
          "1020:     attr[2*i]=NULL;",
          "1021:   }",
          "1022:   start_element(user_data, (char*)qname_string, (const char**)attr);",
          "1023:   raptor_free_memory(qname_string);",
          "1024:   if(attr) {",
          "1025:     for(i=0; i<attr_count; i++)",
          "1026:       raptor_free_memory(attr[2*i]);",
          "1027:     free(attr);",
          "1028:   }",
          "1031: static void raptor_rdfa_end_element(void *user_data,",
          "1032:                                     raptor_xml_element* xml_element)",
          "1034:   raptor_qname* qname=raptor_xml_element_get_name(xml_element);",
          "1035:   unsigned char* qname_string=raptor_qname_to_counted_name(qname, NULL);",
          "1037:   end_element(user_data, (const char*)qname_string);",
          "1038:   raptor_free_memory(qname_string);",
          "1041: static void raptor_rdfa_character_data(void *user_data,",
          "1042:                                        raptor_xml_element* xml_element,",
          "1043:                                        const unsigned char *s, int len)",
          "1045:   character_data(user_data, (const char *)s, len);",
          "1048: static void raptor_rdfa_namespace_handler(void *user_data,",
          "1049:                                           raptor_namespace* nspace)",
          "1051:   rdfalist* context_stack = (rdfalist*)user_data;",
          "1052:   rdfacontext* context = (rdfacontext*)",
          "1053:     context_stack->items[context_stack->num_items - 1]->data;",
          "1055:   if(context->namespace_handler)",
          "1056:     (*context->namespace_handler)(context->namespace_handler_user_data,",
          "1057:                                   nspace);",
          "1062: #endif",
          "1064: rdfacontext* rdfa_create_context(const char* base)",
          "1065: {",
          "1066:    rdfacontext* rval = NULL;",
          "1067:    size_t base_length = strlen(base);",
          "1070:    if(base_length > 0)",
          "1071:    {",
          "1072:       char* cleaned_base;",
          "1073:       rval = (rdfacontext*)malloc(sizeof(rdfacontext));",
          "1074:       rval->base = NULL;",
          "1075:       cleaned_base = rdfa_iri_get_base(base);",
          "1076:       rval->base = rdfa_replace_string(rval->base, cleaned_base);",
          "1077:       free(cleaned_base);",
          "1080:       rval->default_graph_triple_callback = NULL;",
          "1081:       rval->buffer_filler_callback = NULL;",
          "1082:       rval->processor_graph_triple_callback = NULL;",
          "1083:       rval->callback_data = NULL;",
          "1086:       rval->wb_allocated = 0;",
          "1087:       rval->working_buffer = NULL;",
          "1088:       rval->wb_position = 0;",
          "1090:       rval->base_uri = NULL;",
          "1091:       rval->sax2 = NULL;",
          "1092:       rval->namespace_handler = NULL;",
          "1093:       rval->namespace_handler_user_data = NULL;",
          "1095:       rval->uri_mappings = NULL;",
          "1096:       rval->parser = NULL;",
          "1097: #endif",
          "1098:       rval->done = 0;",
          "1099:       rval->context_stack = NULL;",
          "1100:       rval->wb_preread = 0;",
          "1101:       rval->preread = 0;",
          "1102:    }",
          "1103:    else",
          "1104:    {",
          "1105:       printf(\"librdfa error: Failed to create a parsing context, \"",
          "1106:          \"base IRI was not specified!\\n\");",
          "1107:    }",
          "1109:    return rval;",
          "1110: }",
          "1112: static void rdfa_free_context_stack(rdfacontext* context)",
          "1115:    if(context->context_stack != NULL)",
          "1117:       void* rval;",
          "1120:       do",
          "1122:          rval = rdfa_pop_item(context->context_stack);",
          "1123:          if(rval && rval != context)",
          "1124:          {",
          "1125:             rdfa_free_context((rdfacontext*)rval);",
          "1126:          }",
          "1128:       while(rval);",
          "1129:       free(context->context_stack->items);",
          "1130:       free(context->context_stack);",
          "1131:       context->context_stack = NULL;",
          "1133: }",
          "1135: void rdfa_free_context(rdfacontext* context)",
          "1136: {",
          "1137:    free(context->base);",
          "1138:    free(context->parent_subject);",
          "1139:    free(context->parent_object);",
          "1141: #ifndef LIBRDFA_IN_RAPTOR",
          "1142:    rdfa_free_mapping(context->uri_mappings);",
          "1145:    rdfa_free_list(context->incomplete_triples);",
          "1146:    free(context->language);",
          "1147:    free(context->underscore_colon_bnode_name);",
          "1148:    free(context->new_subject);",
          "1149:    free(context->current_object_resource);",
          "1150:    free(context->content);",
          "1151:    free(context->datatype);",
          "1152:    rdfa_free_list(context->property);",
          "1153:    free(context->plain_literal);",
          "1154:    free(context->xml_literal);",
          "1157:    rdfa_free_list(context->local_incomplete_triples);",
          "1159:    rdfa_free_context_stack(context);",
          "1160:    free(context->working_buffer);",
          "1161:    free(context);",
          "1164: void rdfa_set_default_graph_triple_handler(",
          "1165:    rdfacontext* context, triple_handler_fp th)",
          "1167:    context->default_graph_triple_callback = th;",
          "1170: void rdfa_set_processor_graph_triple_handler(",
          "1171:    rdfacontext* context, triple_handler_fp th)",
          "1173:    context->processor_graph_triple_callback = th;",
          "1176: void rdfa_set_buffer_filler(rdfacontext* context, buffer_filler_fp bf)",
          "1178:    context->buffer_filler_callback = bf;",
          "1192: #ifndef LIBRDFA_IN_RAPTOR",
          "1193:    context->parser = XML_ParserCreate(NULL);",
          "1194: #endif",
          "1203:                                    context->context_stack);",
          "",
          "[Added Lines]",
          "1163:    if(context->rdfa_version == RDFA_VERSION_1_1)",
          "1164:    {",
          "1165:       rdfa_complete_list_triples(context);",
          "1167:       if(parent_context != NULL)",
          "1168:       {",
          "1170:          rdfa_free_mapping(parent_context->local_list_mappings,",
          "1171:             (free_mapping_value_fp)rdfa_free_list);",
          "1172:          parent_context->local_list_mappings = rdfa_copy_mapping(",
          "1173:             (void**)context->local_list_mappings,",
          "1174:             (copy_mapping_value_fp)rdfa_replace_list);",
          "1176:          if(DEBUG)",
          "1177:          {",
          "1178:             printf(\"parent_context->local_list_mappings (after copy): \");",
          "1179:             rdfa_print_mapping(context->local_list_mappings,",
          "1180:                (print_mapping_value_fp)rdfa_print_triple_list);",
          "1181:          }",
          "1182:          rdfa_free_mapping(context->local_list_mappings,",
          "1183:             (free_mapping_value_fp)rdfa_free_list);",
          "1184:          context->local_list_mappings = NULL;",
          "1185:       }",
          "1186:    }",
          "1189:    rdfa_free_context(context);",
          "1191:    if(DEBUG)",
          "1192:    {",
          "1193:       printf(\"-------------------------------------------------------------\\n\");",
          "1194:    }",
          "1197: void rdfa_set_default_graph_triple_handler(",
          "1198:    rdfacontext* context, triple_handler_fp th)",
          "1200:    context->default_graph_triple_callback = th;",
          "1203: void rdfa_set_processor_graph_triple_handler(",
          "1204:    rdfacontext* context, triple_handler_fp th)",
          "1206:    context->processor_graph_triple_callback = th;",
          "1209: void rdfa_set_buffer_filler(rdfacontext* context, buffer_filler_fp bf)",
          "1211:    context->buffer_filler_callback = bf;",
          "1217: static void rdfa_report_error(void* parser_context, char* msg, ...)",
          "1219:    char error[1024];",
          "1220:    char* eptr;",
          "1221:    va_list args;",
          "1222:    rdfacontext* context = (rdfacontext*)parser_context;",
          "1225:    va_start(args, msg);",
          "1226:    vsprintf(error, msg, args);",
          "1227:    va_end(args);",
          "1230:    eptr = error;",
          "1231:    while(*eptr != '\\0')",
          "1233:       if(*eptr == '\\n')",
          "1237:       eptr++;",
          "1241:    rdfa_processor_triples(context, RDFA_PROCESSOR_ERROR, error);",
          "1242: }",
          "1245: #ifdef LIBRDFA_IN_RAPTOR",
          "1247: static void raptor_rdfa_start_element(void *user_data,",
          "1248:                                       raptor_xml_element *xml_element)",
          "1249: {",
          "1250:   raptor_qname* qname = raptor_xml_element_get_name(xml_element);",
          "1251:   int nb_attributes = raptor_xml_element_get_attributes_count(xml_element);",
          "1252:   raptor_qname** attrs = raptor_xml_element_get_attributes(xml_element);",
          "1253:   unsigned char* localname = raptor_qname_to_counted_name(qname, NULL);",
          "1254:   const raptor_namespace* qname_ns = raptor_qname_get_namespace(qname);",
          "1255:   int nb_namespaces = 0;",
          "1256:   const char** namespaces = NULL;",
          "1257:   int nb_defaulted = 0;",
          "1258:   char** attr = NULL;",
          "1259:   int i;",
          "1261:   if(nb_attributes > 0) {",
          "1266:     attr = (char**)malloc(sizeof(char*) * (1 + (nb_attributes * 5)));",
          "1267:     for(i = 0; i < nb_attributes; i++) {",
          "1268:       const raptor_namespace* attr_ns = attrs[i]->nspace;",
          "1269:       char** attri = &attr[5 * i];",
          "1271:       attri[0] = (char*)attrs[i]->local_name;",
          "1272:       attri[1] = attr_ns ? (char*)attr_ns->prefix : NULL;",
          "1273:       attri[2] = attr_ns ? (char*)raptor_uri_as_string(attr_ns->uri) : NULL;",
          "1274:       attri[3] = (char*)attrs[i]->value;",
          "1275:       attri[4] = attri[3] + attrs[i]->value_length;",
          "1276:     }",
          "1277:     attr[5 * i] = NULL;",
          "1278:   }",
          "1293:   start_element(user_data, (const char*)localname,",
          "1294:                 (const char*)raptor_namespace_get_prefix(qname_ns),",
          "1295:                 (const char*)raptor_uri_as_string(qname_ns->uri),",
          "1296:                 nb_namespaces,",
          "1297:                 (const char**)namespaces,",
          "1298:                 nb_attributes,",
          "1299:                 nb_defaulted,",
          "1300:                 (const char**)attr);",
          "1301:   raptor_free_memory(localname);",
          "1304: static void raptor_rdfa_end_element(void *user_data,",
          "1305:                                     raptor_xml_element* xml_element)",
          "1307:   raptor_qname* qname = raptor_xml_element_get_name(xml_element);",
          "1308:   unsigned char* localname = raptor_qname_to_counted_name(qname, NULL);",
          "1309:   const raptor_namespace* qname_ns = raptor_qname_get_namespace(qname);",
          "1311:   if(qname_ns)",
          "1312:     end_element(user_data, (const char*)localname,",
          "1313:                 (const char*)qname_ns->prefix,",
          "1314:                 (const xmlChar*)raptor_uri_as_string(qname_ns->uri));",
          "1315:   else",
          "1316:     end_element(user_data, (const char*)localname, NULL, NULL);",
          "1318:   raptor_free_memory(localname);",
          "1321: static void raptor_rdfa_character_data(void *user_data,",
          "1322:                                        raptor_xml_element* xml_element,",
          "1323:                                        const unsigned char *s, int len)",
          "1325:   character_data(user_data, (const xmlChar *)s, len);",
          "1328: static void raptor_rdfa_namespace_handler(void *user_data,",
          "1329:                                           raptor_namespace* nspace)",
          "1331:   rdfacontext* context = (rdfacontext*)user_data;",
          "1333:   if(context->namespace_handler)",
          "1334:     (*context->namespace_handler)(context->namespace_handler_user_data,",
          "1335:                                   nspace);",
          "1338: #endif",
          "1358:                                    context);",
          "1361:    xmlInitParser();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1214:                                       raptor_rdfa_character_data);",
          "1215:    raptor_sax2_set_namespace_handler(context->sax2,",
          "1216:                                      raptor_rdfa_namespace_handler);",
          "1221: #endif",
          "1223:    rdfa_init_context(context);",
          "1225: #ifdef LIBRDFA_IN_RAPTOR",
          "1247:    raptor_sax2_parse_start(context->sax2, context->base_uri);",
          "1248: #endif",
          "1250:    return rval;",
          "1251: }",
          "1363: {",
          "1429: #endif",
          "1434:    if(context->done)",
          "1435:    {",
          "1436:       return RDFA_PARSE_FAILED;",
          "",
          "[Removed Lines]",
          "1217: #else",
          "1218:    XML_SetUserData(context->parser, context->context_stack);",
          "1219:    XML_SetElementHandler(context->parser, start_element, end_element);",
          "1220:    XML_SetCharacterDataHandler(context->parser, character_data);",
          "1226:    if(1) {",
          "1227:      raptor_parser* rdf_parser = (raptor_parser*)context->callback_data;",
          "1232:      raptor_sax2_set_option(context->sax2,",
          "1233:                             RAPTOR_OPTION_NO_NET, NULL,",
          "1234:                             RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_NO_NET));",
          "1235:      raptor_sax2_set_option(context->sax2,",
          "1236:                             RAPTOR_OPTION_NO_FILE, NULL,",
          "1237:                             RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_NO_FILE));",
          "1238:      raptor_sax2_set_option(context->sax2,",
          "1239:                             RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL,",
          "1240:                             RAPTOR_OPTIONS_GET_NUMERIC(rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES));",
          "1241:      if(rdf_parser->uri_filter)",
          "1242:        raptor_sax2_set_uri_filter(context->sax2, rdf_parser->uri_filter,",
          "1243:                                   rdf_parser->uri_filter_user_data);",
          "1244:    }",
          "1246:    context->base_uri=raptor_new_uri(context->sax2->world, (const unsigned char*)context->base);",
          "1253: static int rdfa_process_doctype(rdfacontext* context, size_t* bytes)",
          "1254: {",
          "1255:    int rval = 0;",
          "1256:    char* doctype_position = 0;",
          "1257:    char* doctype_buffer;",
          "1258:    const char* new_doctype =",
          "1259:       \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML+RDFa 1.0//EN\\\" \"",
          "1260:       \"\\\"http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd\\\">\";",
          "1263:    doctype_buffer = (char*)malloc(*bytes + 2);",
          "1264:    memcpy(doctype_buffer, context->working_buffer, *bytes);",
          "1265:    doctype_buffer[*bytes + 1] = '\\0';",
          "1266:    doctype_position = strstr(doctype_buffer, \"<!DOCTYPE\");",
          "1269:    if(doctype_position != NULL)",
          "1270:    {",
          "1271:       char* new_doctype_buffer = NULL;",
          "1272:       size_t new_doctype_buffer_length = 0;",
          "1273:       char* doctype_end = strchr(doctype_position, '>');",
          "1276:       if(doctype_end != NULL)",
          "1277:       {",
          "1278:          size_t bytes_to_copy = 0;",
          "1279:          size_t total_bytes = 0;",
          "1282:          bytes_to_copy = doctype_position - doctype_buffer;",
          "1283:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1284:             &new_doctype_buffer_length, doctype_buffer, bytes_to_copy);",
          "1285:          total_bytes += bytes_to_copy;",
          "1287:          bytes_to_copy = RDFA_DOCTYPE_STRING_LENGTH;",
          "1288:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1289:             &new_doctype_buffer_length, new_doctype, bytes_to_copy);",
          "1290:          total_bytes += bytes_to_copy;",
          "1292:          bytes_to_copy = *bytes - ((doctype_end + 1) - doctype_buffer);",
          "1293:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1294:             &new_doctype_buffer_length, doctype_end + 1, bytes_to_copy);",
          "1295:          total_bytes += bytes_to_copy;",
          "1298:          free(context->working_buffer);",
          "1299:          context->working_buffer = new_doctype_buffer;",
          "1300:          context->wb_position = total_bytes;",
          "1301:          context->wb_allocated = total_bytes;",
          "1304:          rval = 1;",
          "1305:       }",
          "1306:    }",
          "1307:    else",
          "1308:    {",
          "1309:       char* new_doctype_buffer = NULL;",
          "1310:       size_t new_doctype_buffer_length = 0;",
          "1313:       char* html_position = strstr(doctype_buffer, \"<html\");",
          "1314:       if(html_position == NULL)",
          "1315:       {",
          "1316:          html_position = strstr(doctype_buffer, \"<HTML\");",
          "1317:       }",
          "1319:       if(html_position != NULL)",
          "1320:       {",
          "1321:          size_t bytes_to_copy = 0;",
          "1322:          size_t total_bytes = 0;",
          "1325:          bytes_to_copy = html_position - doctype_buffer;",
          "1326:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1327:             &new_doctype_buffer_length, doctype_buffer, bytes_to_copy);",
          "1328:          total_bytes += bytes_to_copy;",
          "1330:          bytes_to_copy = RDFA_DOCTYPE_STRING_LENGTH;",
          "1331:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1332:             &new_doctype_buffer_length, new_doctype, bytes_to_copy);",
          "1333:          total_bytes += bytes_to_copy;",
          "1335:          bytes_to_copy = 1;",
          "1336:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1337:             &new_doctype_buffer_length, \"\\n\", bytes_to_copy);",
          "1338:          total_bytes += bytes_to_copy;",
          "1340:          bytes_to_copy = *bytes - (html_position - doctype_buffer);",
          "1341:          new_doctype_buffer = rdfa_n_append_string(new_doctype_buffer,",
          "1342:             &new_doctype_buffer_length, html_position, bytes_to_copy);",
          "1343:          total_bytes += bytes_to_copy;",
          "1346:          free(context->working_buffer);",
          "1347:          context->working_buffer = new_doctype_buffer;",
          "1348:          context->wb_position = total_bytes;",
          "1349:          context->wb_allocated = total_bytes;",
          "1352:          rval = 1;",
          "1353:       }",
          "1354:    }",
          "1356:    free(doctype_buffer);",
          "1358:    return rval;",
          "1359: }",
          "1361: #ifndef LIBRDFA_IN_RAPTOR",
          "1362: static void rdfa_report_error(rdfacontext* context, char* data, size_t length)",
          "1364:    char* buffer = malloc(2<<12);",
          "1365:    snprintf(buffer, 2<<12, \"XML parsing error: %s at line %d, column %d.\",",
          "1366:       XML_ErrorString(XML_GetErrorCode(context->parser)),",
          "1367:       (int)XML_GetCurrentLineNumber(context->parser),",
          "1368:       (int)XML_GetCurrentColumnNumber(context->parser));",
          "1370:    if(context->processor_graph_triple_callback != NULL)",
          "1371:    {",
          "1372:       char* error_subject = rdfa_create_bnode(context);",
          "1373:       char* pointer_subject = rdfa_create_bnode(context);",
          "1376:       rdftriple* triple = rdfa_create_triple(",
          "1377:          error_subject, \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",",
          "1378:          \"http://www.w3.org/ns/rdfa_processing_graph#Error\",",
          "1379:          RDF_TYPE_IRI, NULL, NULL);",
          "1380:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1383:       triple = rdfa_create_triple(",
          "1384:          error_subject, \"http://purl.org/dc/terms/description\", buffer,",
          "1385:          RDF_TYPE_PLAIN_LITERAL, NULL, \"en\");",
          "1386:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1389:       triple = rdfa_create_triple(",
          "1390:          error_subject, \"http://www.w3.org/ns/rdfa_processing_graph#context\",",
          "1391:          pointer_subject, RDF_TYPE_IRI, NULL, NULL);",
          "1392:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1395:       triple = rdfa_create_triple(",
          "1396:          pointer_subject, \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",",
          "1397:          \"http://www.w3.org/2009/pointers#LineCharPointer\",",
          "1398:          RDF_TYPE_IRI, NULL, NULL);",
          "1399:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1402:       snprintf(buffer, 2<<12, \"%d\",",
          "1403:          (int)XML_GetCurrentLineNumber(context->parser));",
          "1404:       triple = rdfa_create_triple(",
          "1405:          pointer_subject, \"http://www.w3.org/2009/pointers#lineNumber\",",
          "1406:          buffer, RDF_TYPE_TYPED_LITERAL,",
          "1407:          \"http://www.w3.org/2001/XMLSchema#positiveInteger\", NULL);",
          "1408:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1411:       snprintf(buffer, 2<<12, \"%d\",",
          "1412:          (int)XML_GetCurrentColumnNumber(context->parser));",
          "1413:       triple = rdfa_create_triple(",
          "1414:          pointer_subject, \"http://www.w3.org/2009/pointers#charNumber\",",
          "1415:          buffer, RDF_TYPE_TYPED_LITERAL,",
          "1416:          \"http://www.w3.org/2001/XMLSchema#positiveInteger\", NULL);",
          "1417:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "1419:       free(error_subject);",
          "1420:       free(pointer_subject);",
          "1421:    }",
          "1422:    else",
          "1423:    {",
          "1424:       printf(\"librdfa processor error: %s\\n\", buffer);",
          "1425:    }",
          "1427:    free(buffer);",
          "1428: }",
          "1431: int rdfa_parse_chunk(rdfacontext* context, char* data, size_t wblen, int done)",
          "1432: {",
          "",
          "[Added Lines]",
          "1379:    context->base_uri = raptor_new_uri(context->sax2->world,",
          "1380:                                       (const unsigned char*)context->base);",
          "1387: int rdfa_parse_chunk(rdfacontext* context, char* data, size_t wblen, int done)",
          "1389: #ifdef LIBRDFA_IN_RAPTOR",
          "1390: #else",
          "1391:    xmlSAXHandler handler;",
          "1392:    xmlParserCtxtPtr parser;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1439:    if(!context->preread)",
          "1440:    {",
          "1443:       context->wb_preread = rdfa_init_base(context,",
          "1444:          &context->working_buffer, &context->wb_allocated, data, wblen);",
          "1447:       if(!context->base && context->wb_preread < (1<<17))",
          "1448:          return RDFA_PARSE_SUCCESS;",
          "1453: #ifdef LIBRDFA_IN_RAPTOR",
          "1455:       if(raptor_sax2_parse_chunk(context->sax2,",
          "1456:                                  (const unsigned char*)context->working_buffer,",
          "",
          "[Removed Lines]",
          "1451:      rdfa_process_doctype(context, &wblen);",
          "",
          "[Added Lines]",
          "1414:       rdfa_setup_initial_context(context);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1459:          return RDFA_PARSE_FAILED;",
          "1460:       }",
          "1461: #else",
          "1468: #endif",
          "1470:       context->preread = 1;",
          "",
          "[Removed Lines]",
          "1462:       if(XML_Parse(context->parser, context->working_buffer,",
          "1463:          context->wb_position, 0) == XML_STATUS_ERROR)",
          "1464:       {",
          "1465:          rdfa_report_error(context, data, wblen);",
          "1466:          return RDFA_PARSE_FAILED;",
          "1467:       }",
          "",
          "[Added Lines]",
          "1424:       memset(&handler, 0, sizeof(xmlSAXHandler));",
          "1425:       handler.initialized = XML_SAX2_MAGIC;",
          "1426:       handler.startElementNs = (startElementNsSAX2Func)start_element;",
          "1427:       handler.endElementNs = (endElementNsSAX2Func)end_element;",
          "1428:       handler.characters = (charactersSAXFunc)character_data;",
          "1429:       handler.error = (errorSAXFunc)rdfa_report_error;",
          "1432:       parser = xmlCreatePushParserCtxt(",
          "1433:          &handler, context, (const char*)context->working_buffer,",
          "1434:          context->wb_position, NULL);",
          "1437:       xmlSubstituteEntitiesDefault(1);",
          "1439:       context->parser = parser;",
          "1441:       rdfa_setup_initial_context(context);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1472:       return RDFA_PARSE_SUCCESS;",
          "1473:    }",
          "1476: #ifdef LIBRDFA_IN_RAPTOR",
          "1478:    {",
          "1479:       return RDFA_PARSE_FAILED;",
          "1480:    }",
          "1481: #else",
          "1483:    {",
          "1485:       return RDFA_PARSE_FAILED;",
          "1486:    }",
          "1487: #endif",
          "",
          "[Removed Lines]",
          "1477:    if(raptor_sax2_parse_chunk(context->sax2, (const unsigned char*)data, wblen, done))",
          "1482:    if(XML_Parse(context->parser, data, wblen, done) == XML_STATUS_ERROR)",
          "1484:       rdfa_report_error(context, data, wblen);",
          "",
          "[Added Lines]",
          "1451:    if(raptor_sax2_parse_chunk(context->sax2,",
          "1452:                               (const unsigned char*)data, wblen, done))",
          "1457:    if(xmlParseChunk(context->parser, data, wblen, done))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1492: void rdfa_parse_end(rdfacontext* context)",
          "1493: {",
          "1495:    rdfa_free_context_stack(context);",
          "1498: #ifdef LIBRDFA_IN_RAPTOR",
          "1499:    if(context->base_uri)",
          "1500:       raptor_free_uri(context->base_uri);",
          "1501:    raptor_free_sax2(context->sax2);",
          "1502:    context->sax2=NULL;",
          "1503: #else",
          "1506: #endif",
          "1507: }",
          "",
          "[Removed Lines]",
          "1505:    XML_ParserFree(context->parser);",
          "",
          "[Added Lines]",
          "1479:    xmlFreeParserCtxt(context->parser);",
          "1480:    xmlCleanupParser();",
          "",
          "---------------"
        ],
        "librdfa/rdfa.h||librdfa/rdfa.h": [
          "File: librdfa/rdfa.h -> librdfa/rdfa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #ifndef _LIBRDFA_RDFA_H_",
          "75: #define _LIBRDFA_RDFA_H_",
          "76: #include <stdlib.h>",
          "79: #ifdef WIN32",
          "80: #define DLLEXPORT __declspec(dllexport)",
          "81: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #include <libxml/SAX2.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: #endif",
          "93: #include \"raptor2.h\"",
          "94: #include \"raptor_internal.h\"",
          "99: #ifdef __cplusplus",
          "100: extern \"C\"",
          "",
          "[Removed Lines]",
          "95: #else",
          "96: #include <expat.h>",
          "97: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: #define DEBUG 0",
          "106: #define RDFA_PARSE_WARNING -2",
          "107: #define RDFA_PARSE_FAILED -1",
          "108: #define RDFA_PARSE_UNKNOWN 0",
          "109: #define RDFA_PARSE_SUCCESS 1",
          "114: #define XMLNS_DEFAULT_MAPPING \"XMLNS_DEFAULT\"",
          "116: #define RDFA_WHITESPACE \" \\t\\n\\v\\f\\r\"",
          "",
          "[Removed Lines]",
          "111: #define MAX_URI_MAPPINGS 512",
          "112: #define MAX_INCOMPLETE_TRIPLES 1024",
          "",
          "[Added Lines]",
          "106: #define RDFA_VERSION_1_0 1",
          "107: #define RDFA_VERSION_1_1 2",
          "116: #define MAX_LOCAL_LIST_MAPPINGS 32",
          "117: #define MAX_LIST_MAPPINGS 48",
          "118: #define MAX_LIST_ITEMS 16",
          "119: #define MAX_TERM_MAPPINGS 64",
          "120: #define MAX_URI_MAPPINGS 128",
          "121: #define MAX_INCOMPLETE_TRIPLES 128",
          "124: #define HOST_LANGUAGE_NONE 0",
          "125: #define HOST_LANGUAGE_XML1 1",
          "126: #define HOST_LANGUAGE_XHTML1 2",
          "127: #define HOST_LANGUAGE_HTML 3",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:    rdfalistitem** items;",
          "179:    size_t num_items;",
          "180:    size_t max_items;",
          "181: } rdfalist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:    unsigned int user_data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188: typedef struct rdfacontext",
          "189: {",
          "190:    char* base;",
          "191:    char* parent_subject;",
          "192:    char* parent_object;",
          "193: #ifndef LIBRDFA_IN_RAPTOR",
          "195: #endif",
          "196:    rdfalist* incomplete_triples;",
          "197:    rdfalist* local_incomplete_triples;",
          "198:    char* language;",
          "200:    triple_handler_fp default_graph_triple_callback;",
          "201:    buffer_filler_fp buffer_filler_callback;",
          "",
          "[Removed Lines]",
          "194:    char** uri_mappings;",
          "",
          "[Added Lines]",
          "208:    unsigned char rdfa_version;",
          "212:    char* default_vocabulary;",
          "214:    void** uri_mappings;",
          "216:    void** term_mappings;",
          "217:    void** list_mappings;",
          "218:    void** local_list_mappings;",
          "222:    unsigned char host_language;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "206:    char* new_subject;",
          "207:    char* current_object_resource;",
          "209:    char* content;",
          "210:    char* datatype;",
          "211:    rdfalist* property;",
          "212:    char* plain_literal;",
          "213:    size_t plain_literal_size;",
          "214:    char* xml_literal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:    char* about;",
          "234:    char* typed_resource;",
          "235:    char* resource;",
          "236:    char* href;",
          "237:    char* src;",
          "241:    unsigned char inlist_present;",
          "242:    unsigned char rel_present;",
          "243:    unsigned char rev_present;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "233:    raptor_sax2* sax2;",
          "234:    raptor_namespace_handler namespace_handler;",
          "235:    void* namespace_handler_user_data;",
          "236: #else",
          "238: #endif",
          "239:    int done;",
          "240:    rdfalist* context_stack;",
          "241:    size_t wb_preread;",
          "242:    int preread;",
          "243: } rdfacontext;",
          "",
          "[Removed Lines]",
          "237:    XML_Parser parser;",
          "",
          "[Added Lines]",
          "270:    xmlParserCtxtPtr parser;",
          "276:    int depth;",
          "",
          "---------------"
        ],
        "librdfa/rdfa_utils.c||librdfa/rdfa_utils.c": [
          "File: librdfa/rdfa_utils.c -> librdfa/rdfa_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"rdfa_utils.h\"",
          "27: #include \"rdfa.h\"",
          "29: #define RDFA_WHITESPACE_CHARACTERS \" \\a\\b\\t\\n\\v\\f\\r\"",
          "",
          "[Removed Lines]",
          "23: #include \"stdlib.h\"",
          "24: #include \"string.h\"",
          "25: #include \"stdio.h\"",
          "",
          "[Added Lines]",
          "23: #ifdef HAVE_CONFIG_H",
          "24: #  include <config.h>",
          "25: #endif",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "29: #include <stdio.h>",
          "32: #include \"strtok_r.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:    rval->max_items = size;",
          "111:    rval->num_items = 0;",
          "114:    return rval;",
          "115: }",
          "118: {",
          "130:    {",
          "139:          {",
          "142:          }",
          "145:          {",
          "152:       }",
          "153:    }",
          "",
          "[Removed Lines]",
          "112:    rval->items = (rdfalistitem**)malloc(sizeof(rdfalistitem) * rval->max_items);",
          "117: rdfalist* rdfa_copy_list(rdfalist* list)",
          "119:    rdfalist* rval = (rdfalist*)malloc(sizeof(rdfalist));",
          "120:    unsigned int i;",
          "123:    rval->max_items = list->max_items;",
          "124:    rval->num_items = list->num_items;",
          "125:    rval->items = (rdfalistitem**)malloc(sizeof(void*) * rval->max_items);",
          "129:    for(i = 0; i < list->max_items; i++)",
          "131:       if(i < list->num_items)",
          "132:       {",
          "133:          rval->items[i] = (rdfalistitem*)malloc(sizeof(rdfalistitem));",
          "134:          rval->items[i]->data = NULL;",
          "135:          rval->items[i]->flags = list->items[i]->flags;",
          "138:          if(list->items[i]->flags & RDFALIST_FLAG_TEXT)",
          "140:             rval->items[i]->data = (char*)rdfa_replace_string(",
          "141:                NULL, (const char*)list->items[i]->data);",
          "144:          else if(flags & RDFALIST_FLAG_CONTEXT)",
          "148:       }",
          "149:       else",
          "150:       {",
          "151:          rval->items[i] = NULL;",
          "",
          "[Added Lines]",
          "116:    rval->items = (rdfalistitem**)malloc(",
          "117:       sizeof(rdfalistitem*) * rval->max_items);",
          "122: rdfalist* rdfa_replace_list(rdfalist* old_list, rdfalist* new_list)",
          "124:    rdfalist* rval = NULL;",
          "126:    if(new_list != NULL)",
          "127:    {",
          "129:       rdfa_free_list(old_list);",
          "132:       rval = rdfa_copy_list(new_list);",
          "133:    }",
          "135:    return rval;",
          "136: }",
          "138: rdfalist* rdfa_copy_list(rdfalist* list)",
          "139: {",
          "140:    rdfalist* rval = NULL;",
          "142:    if(list != NULL)",
          "144:       unsigned int i;",
          "145:       rval = rdfa_create_list(list->max_items);",
          "148:       rval->num_items = list->num_items;",
          "149:       rval->user_data = list->user_data;",
          "153:       for(i = 0; i < list->max_items; i++)",
          "154:       {",
          "155:          if(i < list->num_items)",
          "157:             rval->items[i] = (rdfalistitem*)malloc(sizeof(rdfalistitem));",
          "158:             rval->items[i]->data = NULL;",
          "159:             rval->items[i]->flags = list->items[i]->flags;",
          "162:             if(list->items[i]->flags & RDFALIST_FLAG_TEXT)",
          "163:             {",
          "164:                rval->items[i]->data = strdup((char*)list->items[i]->data);",
          "165:             }",
          "166:             else if(list->items[i]->flags & RDFALIST_FLAG_TRIPLE)",
          "167:             {",
          "168:                rdftriple* t = (rdftriple*)list->items[i]->data;",
          "169:                rval->items[i]->data =",
          "170:                   rdfa_create_triple(t->subject, t->predicate, t->object,",
          "171:                      t->object_type, t->datatype, t->language);",
          "172:             }",
          "173:             else if(list->items[i]->flags & RDFALIST_FLAG_CONTEXT)",
          "174:             {",
          "176:             }",
          "178:          else",
          "180:             rval->items[i] = NULL;",
          "181:          }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:    printf(\" ]\\n\");",
          "175: }",
          "177: void rdfa_free_list(rdfalist* list)",
          "178: {",
          "179:    if(list != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: void rdfa_print_triple_list(rdfalist* list)",
          "208: {",
          "209:    unsigned int i;",
          "211:    if(list != NULL)",
          "212:    {",
          "213:       printf(\"[ \");",
          "215:       for(i = 0; i < list->num_items; i++)",
          "216:       {",
          "217:          if(i != 0)",
          "218:          {",
          "219:             printf(\", \");",
          "220:          }",
          "222:          rdfa_print_triple((rdftriple*)list->items[i]->data);",
          "223:       }",
          "225:       printf(\" ]\\n\");",
          "226:    }",
          "227:    else",
          "228:    {",
          "229:       printf(\"NULL\\n\");",
          "230:    }",
          "231: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:       unsigned int i;",
          "182:       for(i = 0; i < list->num_items; i++)",
          "183:       {",
          "185:          free(list->items[i]);",
          "186:       }",
          "",
          "[Removed Lines]",
          "184:          free(list->items[i]->data);",
          "",
          "[Added Lines]",
          "240:          if(list->items[i]->flags & RDFALIST_FLAG_TEXT)",
          "241:          {",
          "242:             free(list->items[i]->data);",
          "243:          }",
          "244:          else if(list->items[i]->flags & RDFALIST_FLAG_TRIPLE)",
          "245:          {",
          "246:             rdftriple* t = (rdftriple*)list->items[i]->data;",
          "247:             rdfa_free_triple(t);",
          "248:          }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:    item->data = NULL;",
          "220:    {",
          "221:       item->data = data;",
          "222:    }",
          "",
          "[Removed Lines]",
          "219:    if(flags & RDFALIST_FLAG_CONTEXT)",
          "",
          "[Added Lines]",
          "284:    if((flags & RDFALIST_FLAG_CONTEXT) || (flags & RDFALIST_FLAG_TRIPLE))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "232:    {",
          "233:       list->max_items = 1 + (list->max_items * 2);",
          "234:       list->items = (rdfalistitem**)realloc(",
          "236:    }",
          "238:    list->items[list->num_items] = item;",
          "239:    ++list->num_items;",
          "240: }",
          "244: {",
          "249:    if(mapping != NULL)",
          "250:    {",
          "251:       memset(mapping, 0, mapping_size);",
          "",
          "[Removed Lines]",
          "235:          list->items, sizeof(rdfalistitem) * list->max_items);",
          "242: #ifndef LIBRDFA_IN_RAPTOR",
          "243: char** rdfa_create_mapping(size_t elements)",
          "245:    size_t mapping_size = sizeof(char*) * MAX_URI_MAPPINGS * 2;",
          "246:    char** mapping = malloc(mapping_size);",
          "",
          "[Added Lines]",
          "300:          list->items, sizeof(rdfalistitem*) * list->max_items);",
          "307: void** rdfa_create_mapping(size_t elements)",
          "309:    size_t mapping_size = sizeof(void*) * MAX_URI_MAPPINGS * 2;",
          "310:    void** mapping = (void**)malloc(mapping_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "254:    return mapping;",
          "255: }",
          "258: {",
          "268:    while(*mptr != NULL)",
          "269:    {",
          "271:       rptr++;",
          "272:       mptr++;",
          "273:    }",
          "",
          "[Removed Lines]",
          "257: char** rdfa_copy_mapping(char** mapping)",
          "259:    size_t mapping_size = sizeof(char*) * MAX_URI_MAPPINGS * 2;",
          "260:    char** rval = malloc(mapping_size);",
          "261:    char** mptr = mapping;",
          "262:    char** rptr = rval;",
          "265:    memset(rval, 0, mapping_size);",
          "",
          "[Added Lines]",
          "321: void rdfa_create_list_mapping(",
          "322:    rdfacontext* context, void** mapping,",
          "323:    const char* subject, const char* key)",
          "325:    char* realkey = NULL;",
          "326:    size_t str_size;",
          "327:    rdfalist* value = NULL;",
          "328:    char* list_bnode;",
          "329:    rdftriple* triple;",
          "332:    value = (rdfalist*)rdfa_get_list_mapping(mapping, subject, key);",
          "334:    if(value == NULL)",
          "335:    {",
          "337:       value = rdfa_create_list(MAX_LIST_ITEMS);",
          "338:       value->user_data = context->depth;",
          "341:       str_size = strlen(subject);",
          "342:       realkey = strdup(subject);",
          "343:       realkey = rdfa_n_append_string(realkey, &str_size, \" \", 1);",
          "344:       realkey = rdfa_n_append_string(realkey, &str_size, key, strlen(key));",
          "345:       rdfa_update_mapping(mapping, realkey, value,",
          "346:          (update_mapping_value_fp)rdfa_replace_list);",
          "347:       free(realkey);",
          "348:       rdfa_free_list(value);",
          "351:       list_bnode = rdfa_create_bnode(context);",
          "352:       triple = rdfa_create_triple(",
          "353:          list_bnode, list_bnode, list_bnode, RDF_TYPE_IRI, NULL, NULL);",
          "354:       rdfa_append_to_list_mapping(mapping, subject, key, (void*)triple);",
          "355:       free(list_bnode);",
          "356:    }",
          "357: }",
          "359: void rdfa_append_to_list_mapping(",
          "360:    void** mapping, const char* subject, const char* key, void* value)",
          "361: {",
          "362:    rdfalist* list = (rdfalist*)rdfa_get_list_mapping(mapping, subject, key);",
          "363:    rdfa_add_item(list, value, RDFALIST_FLAG_TRIPLE);",
          "364: }",
          "366: void** rdfa_copy_mapping(",
          "367:    void** mapping, copy_mapping_value_fp copy_mapping_value)",
          "368: {",
          "369:    void** rval = (void**)calloc(MAX_URI_MAPPINGS * 2, sizeof(void*));",
          "370:    void** mptr = mapping;",
          "371:    void** rptr = rval;",
          "378:       rptr++;",
          "379:       mptr++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:    return rval;",
          "276: }",
          "279: {",
          "280:    int found = 0;",
          "286:    {",
          "288:       {",
          "289:          mptr++;",
          "291:          found = 1;",
          "292:       }",
          "293:       else",
          "",
          "[Removed Lines]",
          "278: void rdfa_update_mapping(char** mapping, const char* key, const char* value)",
          "281:    char** mptr = mapping;",
          "285:    while(*mptr != NULL)",
          "287:       if(strcmp(*mptr, key) == 0)",
          "",
          "[Added Lines]",
          "390: void rdfa_update_mapping(void** mapping, const char* key, const void* value,",
          "391:    update_mapping_value_fp update_mapping_value)",
          "394:    void** mptr = mapping;",
          "397:    while(!found && (*mptr != NULL))",
          "399:       if(strcmp((char*)*mptr, key) == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "297:       mptr++;",
          "298:    }",
          "302:    if(!found)",
          "303:    {",
          "305:       mptr++;",
          "307:    }",
          "308: }",
          "311: {",
          "316:    while(*mptr != NULL)",
          "317:    {",
          "318:       if(strcmp(*mptr, key) == 0)",
          "",
          "[Removed Lines]",
          "310: const char* rdfa_get_mapping(char** mapping, const char* key)",
          "312:    const char* rval = NULL;",
          "313:    char** mptr = mapping;",
          "",
          "[Added Lines]",
          "422: const void* rdfa_get_mapping(void** mapping, const char* key)",
          "424:    const void* rval = NULL;",
          "425:    char** mptr = (char**)mapping;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "330:    return rval;",
          "331: }",
          "334: {",
          "338:    if(*mapping != NULL)",
          "339:    {",
          "342:    }",
          "343: }",
          "346: {",
          "348:    printf(\"{\\n\");",
          "349:    while(*mptr != NULL)",
          "350:    {",
          "351:       char* key;",
          "354:       value = *mptr++;",
          "357:       if(*mptr != NULL)",
          "358:       {",
          "359:          printf(\",\\n\");",
          "",
          "[Removed Lines]",
          "333: void rdfa_next_mapping(char** mapping, char** key, char** value)",
          "345: void rdfa_print_mapping(char** mapping)",
          "347:    char** mptr = mapping;",
          "352:       char* value;",
          "353:       key = *mptr++;",
          "356:       printf(\"   %s : %s\", key, value);",
          "",
          "[Added Lines]",
          "445: const void* rdfa_get_list_mapping(",
          "446:    void** mapping, const char* subject, const char* key)",
          "447: {",
          "448:    void* rval;",
          "449:    char* realkey = NULL;",
          "450:    size_t str_size = strlen(subject);",
          "453:    realkey = strdup(subject);",
          "454:    realkey = rdfa_n_append_string(realkey, &str_size, \" \", 1);",
          "455:    realkey = rdfa_n_append_string(realkey, &str_size, key, strlen(key));",
          "456:    rval = (void*)rdfa_get_mapping(mapping, realkey);",
          "457:    free(realkey);",
          "459:    return (const void*)rval;",
          "460: }",
          "462: void rdfa_next_mapping(void** mapping, char** key, void** value)",
          "474: void rdfa_print_mapping(void** mapping, print_mapping_value_fp print_value)",
          "476:    void** mptr = mapping;",
          "481:       void* value;",
          "482:       key = (char*)*mptr++;",
          "485:       printf(\"   %s : \", key);",
          "486:       print_value(value);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "366:    printf(\"}\\n\");",
          "367: }",
          "370: {",
          "373:    if(mapping != NULL)",
          "374:    {",
          "376:       while(*mptr != NULL)",
          "377:       {",
          "378:          free(*mptr);",
          "379:          mptr++;",
          "380:       }",
          "382:       free(mapping);",
          "383:    }",
          "384: }",
          "",
          "[Removed Lines]",
          "369: void rdfa_free_mapping(char** mapping)",
          "371:    char** mptr = mapping;",
          "385: #endif",
          "",
          "[Added Lines]",
          "500: void rdfa_print_string(const char* str)",
          "502:    printf(\"%s\", str);",
          "503: }",
          "505: void rdfa_free_mapping(void** mapping, free_mapping_value_fp free_value)",
          "506: {",
          "507:    void** mptr = mapping;",
          "516:          free_value(*mptr);",
          "517:          mptr++;",
          "",
          "---------------"
        ],
        "librdfa/rdfa_utils.h||librdfa/rdfa_utils.h": [
          "File: librdfa/rdfa_utils.h -> librdfa/rdfa_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: typedef enum",
          "64: {",
          "65:    RDFALIST_FLAG_NONE = 0,",
          "71: } liflag_t;",
          "",
          "[Removed Lines]",
          "66:    RDFALIST_FLAG_FORWARD = (1 << 1),",
          "67:    RDFALIST_FLAG_REVERSE = (1 << 2),",
          "68:    RDFALIST_FLAG_TEXT = (1 << 3),",
          "69:    RDFALIST_FLAG_CONTEXT = (1 << 4),",
          "70:    RDFALIST_FLAG_LAST = (1 << 5)",
          "",
          "[Added Lines]",
          "66:    RDFALIST_FLAG_DIR_NONE = (1 << 1),",
          "67:    RDFALIST_FLAG_DIR_FORWARD  = (1 << 2),",
          "68:    RDFALIST_FLAG_DIR_REVERSE = (1 << 3),",
          "69:    RDFALIST_FLAG_TEXT = (1 << 4),",
          "70:    RDFALIST_FLAG_CONTEXT = (1 << 5),",
          "71:    RDFALIST_FLAG_TRIPLE = (1 << 6),",
          "72:    RDFALIST_FLAG_LAST = (1 << 7)",
          "78: #define RDFA_PROCESSOR_INFO \"http://www.w3.org/ns/rdfa#Info\"",
          "79: #define RDFA_PROCESSOR_WARNING \"http://www.w3.org/ns/rdfa#Warning\"",
          "80: #define RDFA_PROCESSOR_ERROR \"http://www.w3.org/ns/rdfa#Error\"",
          "83: #define RDFA_MAPPING_DELETED_KEY \"<DELETED-KEY>\"",
          "88: typedef void* (*copy_mapping_value_fp)(void*, void*);",
          "93: typedef void* (*update_mapping_value_fp)(const void*, const void*);",
          "98: typedef void (*print_mapping_value_fp)(void*);",
          "103: typedef void (*free_mapping_value_fp)(void*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "82: char** rdfa_create_mapping(size_t elements);",
          "",
          "[Added Lines]",
          "114: void** rdfa_create_mapping(size_t elements);",
          "126: void rdfa_create_list_mapping(",
          "127:    rdfacontext* context, void** mapping, const char* subject, const char* key);",
          "138: void rdfa_append_to_list_mapping(",
          "139:    void** mapping, const char* subject, const char* key, void* value);",
          "152: const void* rdfa_get_list_mapping(",
          "153:    void** mapping, const char* subject, const char* key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "94: char** rdfa_copy_mapping(char** mapping);",
          "",
          "[Added Lines]",
          "165: void** rdfa_copy_mapping(",
          "166:    void** mapping, copy_mapping_value_fp copy_mapping_value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "104: void rdfa_update_mapping(char** mapping, const char* key, const char* value);",
          "",
          "[Added Lines]",
          "178: void rdfa_update_mapping(void** mapping, const char* key, const void* value,",
          "179:    update_mapping_value_fp update_mapping_value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "115: const char* rdfa_get_mapping(char** mapping, const char* key);",
          "",
          "[Added Lines]",
          "190: const void* rdfa_get_mapping(void** mapping, const char* key);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "127: void rdfa_next_mapping(char** mapping, char** key, char** value);",
          "134: void rdfa_print_mapping(char** mapping);",
          "141: void rdfa_free_mapping(char** mapping);",
          "",
          "[Added Lines]",
          "202: void rdfa_next_mapping(void** mapping, char** key, void** value);",
          "210: void rdfa_print_mapping(void** mapping, print_mapping_value_fp print_value);",
          "218: void rdfa_free_mapping(void** mapping, free_mapping_value_fp free_value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "158: rdfalist* rdfa_copy_list(rdfalist* list);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: rdfalist* rdfa_replace_list(rdfalist* old_list, rdfalist* new_list);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243: char* rdfa_join_string(const char* prefix, const char* suffix);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: void rdfa_print_string(const char* str);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280: void rdfa_print_triple(rdftriple* triple);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386: void rdfa_print_triple_list(rdfalist* list);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332: char* rdfa_create_bnode(rdfacontext* context);",
          "335: void rdfa_update_uri_mappings(rdfacontext* context, const char* attr, const char* value);",
          "337:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "338:    const char* resource, const char* href, const rdfalist* type_of);",
          "340:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "341:    const char* resource, const char* href, const rdfalist* type_of);",
          "342: void rdfa_complete_incomplete_triples(rdfacontext* context);",
          "343: void rdfa_complete_type_triples(rdfacontext* context, const rdfalist* type_of);",
          "344: void rdfa_complete_relrev_triples(",
          "345:    rdfacontext* context, const rdfalist* rel, const rdfalist* rev);",
          "346: void rdfa_save_incomplete_triples(",
          "347:    rdfacontext* context, const rdfalist* rel, const rdfalist* rev);",
          "348: void rdfa_complete_object_literal_triples(rdfacontext* context);",
          "351: void rdfa_generate_namespace_triple(",
          "352:    rdfacontext* context, const char* prefix, const char* iri);",
          "354: #ifdef __cplusplus",
          "355: }",
          "",
          "[Removed Lines]",
          "336: void rdfa_establish_new_subject(",
          "339: void rdfa_establish_new_subject_with_relrev(",
          "",
          "[Added Lines]",
          "442: void rdfa_establish_new_1_0_subject(",
          "443:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "444:    const char* resource, const char* href, const rdfalist* type_of);",
          "445: void rdfa_establish_new_1_1_subject(",
          "446:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "447:    const char* resource, const char* href, const rdfalist* type_of,",
          "448:    const rdfalist* property, const char* content, const char* datatype);",
          "449: void rdfa_establish_new_1_0_subject_with_relrev(",
          "452: void rdfa_establish_new_1_1_subject_with_relrev(",
          "456: void rdfa_save_incomplete_list_triples(",
          "457:    rdfacontext* context, const rdfalist* rel);",
          "464: void rdfa_complete_current_property_value_triples(rdfacontext* context);",
          "469: void rdfa_processor_triples(",
          "470:    rdfacontext* context, const char* type, const char* msg);",
          "473: void rdfa_setup_initial_context(rdfacontext* context);",
          "474: void rdfa_establish_new_inlist_triples(",
          "475:    rdfacontext* context, rdfalist* predicates, const char* object,",
          "476:    rdfresource_t object_type);",
          "477: void rdfa_complete_list_triples(rdfacontext* context);",
          "478: rdfacontext* rdfa_create_new_element_context(rdfalist* context_stack);",
          "479: void rdfa_free_context_stack(rdfacontext* context);",
          "",
          "---------------"
        ],
        "librdfa/strtok_r.c||librdfa/strtok_r.c": [
          "File: librdfa/strtok_r.c -> librdfa/strtok_r.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #ifdef HAVE_CONFIG_H",
          "4: #  include <config.h>",
          "5: #endif",
          "7: #include <string.h>",
          "8: #include \"strtok_r.h\"",
          "10: #ifdef NEED_RDFA_STRTOK_R",
          "12: char *",
          "13: rdfa_strtok_r(char *str, const char *delim, char **saveptr)",
          "14: {",
          "15:    char *p;",
          "17:    if (str == NULL)",
          "18:       str = *saveptr;",
          "20:    if (str == NULL)",
          "21:       return NULL;",
          "23:    while (*str && strchr(delim, *str))",
          "24:       str++;",
          "26:    if (*str == '\\0')",
          "27:    {",
          "29:       return NULL;",
          "30:    }",
          "32:    p = str;",
          "33:    while (*p && !strchr(delim, *p))",
          "34:       p++;",
          "36:    if (*p == '\\0')",
          "38:    else",
          "39:    {",
          "41:       p++;",
          "43:    }",
          "45:    return str;",
          "46: }",
          "",
          "---------------"
        ],
        "librdfa/strtok_r.h||librdfa/strtok_r.h": [
          "File: librdfa/strtok_r.h -> librdfa/strtok_r.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #ifndef HAVE_STRTOK_R",
          "4: #  define NEED_RDFA_STRTOK_R",
          "5: #endif",
          "7: #if defined(WIN32) && defined(_MSC_VER) && _MSC_VER >= 1400",
          "8: #  define strtok_r(s,d,p) strtok_s(s,d,p)",
          "9: #  undef NEED_RDFA_STRTOK_R",
          "10: #endif",
          "12: #ifdef NEED_RDFA_STRTOK_R",
          "13: char *rdfa_strtok_r(char *str, const char *delim, char **saveptr);",
          "14: #  define strtok_r(s,d,p) rdfa_strtok_s(s,d,p)",
          "15: #endif",
          "",
          "---------------"
        ],
        "librdfa/subject.c||librdfa/subject.c": [
          "File: librdfa/subject.c -> librdfa/subject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <stdlib.h>",
          "23: #include <stdio.h>",
          "24: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef HAVE_CONFIG_H",
          "23: #  include <config.h>",
          "24: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "64:    const char* resource, const char* href, const rdfalist* type_of)",
          "65: {",
          "72:    if(about != NULL)",
          "73:    {",
          "76:       context->new_subject =",
          "77:          rdfa_replace_string(context->new_subject, about);",
          "78:    }",
          "79:    else if(src != NULL)",
          "80:    {",
          "83:       context->new_subject =",
          "84:          rdfa_replace_string(context->new_subject, src);",
          "85:    }",
          "86:    else if(resource != NULL)",
          "87:    {",
          "91:       context->new_subject =",
          "92:          rdfa_replace_string(context->new_subject, resource);",
          "93:    }",
          "94:    else if(href != NULL)",
          "95:    {",
          "98:       context->new_subject =",
          "99:          rdfa_replace_string(context->new_subject, href);",
          "100:    }",
          "111:    else if((type_of != NULL) && (type_of->num_items > 0))",
          "112:    {",
          "117:    }",
          "118:    else if(context->parent_object != NULL)",
          "119:    {",
          "122:       context->new_subject =",
          "123:          rdfa_replace_string(context->new_subject, context->parent_object);",
          "128:    }",
          "129: }",
          "",
          "[Removed Lines]",
          "62: void rdfa_establish_new_subject(",
          "103:    else if((strcmp(name, \"head\") == 0) || (strcmp(name, \"body\") == 0))",
          "104:    {",
          "108:       context->new_subject =",
          "109:          rdfa_replace_string(context->new_subject, context->base);",
          "110:    }",
          "116:       context->new_subject = rdfa_create_bnode(context);",
          "",
          "[Added Lines]",
          "66: void rdfa_establish_new_1_0_subject(",
          "110:       char* bnode = rdfa_create_bnode(context);",
          "111:       context->new_subject = rdfa_replace_string(context->new_subject, bnode);",
          "112:       free(bnode);",
          "124:    }",
          "125: }",
          "142: void rdfa_establish_new_1_1_subject(",
          "143:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "144:    const char* resource, const char* href, const rdfalist* type_of,",
          "145:    const rdfalist* property, const char* content, const char* datatype)",
          "146: {",
          "153:    if(property != NULL && content == NULL && datatype == NULL)",
          "154:    {",
          "158:       if(about != NULL)",
          "159:       {",
          "167:          context->new_subject =",
          "168:             rdfa_replace_string(context->new_subject, about);",
          "169:       }",
          "170:       else if(context->parent_object != NULL)",
          "171:       {",
          "175:          context->new_subject =",
          "176:             rdfa_replace_string(context->new_subject, context->parent_object);",
          "177:       }",
          "182:       if(type_of != NULL)",
          "183:       {",
          "184:          if(about != NULL)",
          "185:          {",
          "197:             context->typed_resource =",
          "198:                rdfa_replace_string(context->typed_resource, about);",
          "199:          }",
          "200:          else",
          "201:          {",
          "202:             if(resource != NULL)",
          "203:             {",
          "207:                context->typed_resource =",
          "208:                   rdfa_replace_string(context->typed_resource, resource);",
          "209:             }",
          "210:             else if(href != NULL)",
          "211:             {",
          "215:                context->typed_resource =",
          "216:                   rdfa_replace_string(context->typed_resource, href);",
          "217:             }",
          "218:             else if(src != NULL)",
          "219:             {",
          "223:                context->typed_resource =",
          "224:                   rdfa_replace_string(context->typed_resource, src);",
          "225:             }",
          "226:             else",
          "227:             {",
          "231:                char* bnode = rdfa_create_bnode(context);",
          "232:                context->typed_resource = rdfa_replace_string(",
          "233:                   context->typed_resource, bnode);",
          "234:                free(bnode);",
          "235:             }",
          "240:             context->current_object_resource = rdfa_replace_string(",
          "241:                context->current_object_resource, context->typed_resource);",
          "242:          }",
          "243:       }",
          "244:    }",
          "245:    else",
          "246:    {",
          "251:       if(about != NULL || href != NULL || src != NULL || resource != NULL)",
          "252:       {",
          "253:          if(about != NULL)",
          "254:          {",
          "258:             context->new_subject =",
          "259:                rdfa_replace_string(context->new_subject, about);",
          "260:          }",
          "261:          else if(resource != NULL)",
          "262:          {",
          "266:             context->new_subject =",
          "267:                rdfa_replace_string(context->new_subject, resource);",
          "268:          }",
          "269:          else if(href != NULL)",
          "270:          {",
          "274:             context->new_subject =",
          "275:                rdfa_replace_string(context->new_subject, href);",
          "276:          }",
          "277:          else if(src != NULL)",
          "278:          {",
          "282:             context->new_subject =",
          "283:                rdfa_replace_string(context->new_subject, src);",
          "284:          }",
          "285:       }",
          "286:       else",
          "287:       {",
          "299:          if(type_of != NULL)",
          "300:          {",
          "304:             char* bnode = rdfa_create_bnode(context);",
          "305:             context->new_subject = rdfa_replace_string(context->new_subject,",
          "306:                bnode);",
          "307:             free(bnode);",
          "308:          }",
          "309:          else if(context->parent_object != NULL)",
          "310:          {",
          "314:             context->new_subject = rdfa_replace_string(context->new_subject,",
          "315:                context->parent_object);",
          "320:             if(property == NULL)",
          "321:             {",
          "322:                context->skip_element = 1;",
          "323:             }",
          "324:          }",
          "325:       }",
          "327:       if(type_of != NULL)",
          "328:       {",
          "332:          context->typed_resource = rdfa_replace_string(context->typed_resource,",
          "333:             context->new_subject);",
          "334:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "146:    const char* resource, const char* href, const rdfalist* type_of)",
          "147: {",
          "156:    if(about != NULL)",
          "157:    {",
          "160:       context->new_subject =",
          "161:          rdfa_replace_string(context->new_subject, about);",
          "162:    }",
          "164:    {",
          "167:       context->new_subject =",
          "168:          rdfa_replace_string(context->new_subject, src);",
          "169:    }",
          "180:    else if((type_of != NULL) && (type_of->num_items > 0))",
          "181:    {",
          "186:    }",
          "187:    else if(context->parent_object != NULL)",
          "188:    {",
          "191:       context->new_subject =",
          "192:          rdfa_replace_string(context->new_subject, context->parent_object);",
          "193:    }",
          "197:    if(resource != NULL)",
          "198:    {",
          "201:       context->current_object_resource =",
          "202:          rdfa_replace_string(context->current_object_resource, resource);",
          "203:    }",
          "204:    else if(href != NULL)",
          "205:    {",
          "208:       context->current_object_resource =",
          "209:          rdfa_replace_string(context->current_object_resource, href);",
          "210:    }",
          "211:    else",
          "212:    {",
          "214:       context->current_object_resource = NULL;",
          "215:    }",
          "219: }",
          "",
          "[Removed Lines]",
          "144: void rdfa_establish_new_subject_with_relrev(",
          "163:    else if(src != NULL)",
          "172:    else if((strcmp(name, \"head\") == 0) || (strcmp(name, \"body\") == 0))",
          "173:    {",
          "177:       context->new_subject =",
          "178:          rdfa_replace_string(context->new_subject, context->base);",
          "179:    }",
          "185:       context->new_subject = rdfa_create_bnode(context);",
          "",
          "[Added Lines]",
          "351: void rdfa_establish_new_1_0_subject_with_relrev(",
          "370:    else if(context->rdfa_version == RDFA_VERSION_1_0 &&  src != NULL)",
          "382:       char* bnode = rdfa_create_bnode(context);",
          "383:       context->new_subject = rdfa_replace_string(context->new_subject, bnode);",
          "384:       free(bnode);",
          "418: }",
          "433: void rdfa_establish_new_1_1_subject_with_relrev(",
          "434:    rdfacontext* context, const char* name, const char* about, const char* src,",
          "435:    const char* resource, const char* href, const rdfalist* type_of)",
          "436: {",
          "446:    if(about != NULL)",
          "447:    {",
          "458:       context->new_subject =",
          "459:          rdfa_replace_string(context->new_subject, about);",
          "460:    }",
          "462:    if(type_of != NULL)",
          "463:    {",
          "467:       context->typed_resource =",
          "468:          rdfa_replace_string(context->typed_resource, context->new_subject);",
          "469:    }",
          "475:    if(context->new_subject == NULL && context->parent_object != NULL)",
          "476:    {",
          "479:       context->new_subject = rdfa_replace_string(",
          "480:          context->new_subject, context->parent_object);",
          "481:    }",
          "487:    if(resource != NULL)",
          "488:    {",
          "492:       context->current_object_resource = rdfa_replace_string(",
          "493:          context->current_object_resource, resource);",
          "494:    }",
          "495:    else if(href != NULL)",
          "496:    {",
          "500:       context->current_object_resource = rdfa_replace_string(",
          "501:          context->current_object_resource, href);",
          "502:    }",
          "503:    else if(src != NULL)",
          "504:    {",
          "508:       context->current_object_resource = rdfa_replace_string(",
          "509:          context->current_object_resource, src);",
          "510:    }",
          "511:    else if(type_of != NULL && about == NULL)",
          "512:    {",
          "516:       char* bnode = rdfa_create_bnode(context);",
          "517:       context->current_object_resource = rdfa_replace_string(",
          "518:          context->current_object_resource, bnode);",
          "519:       free(bnode);",
          "520:    }",
          "522:    if(type_of != NULL && about == NULL)",
          "523:    {",
          "527:       context->typed_resource = rdfa_replace_string(",
          "528:          context->typed_resource, context->current_object_resource);",
          "529:    }",
          "",
          "---------------"
        ],
        "librdfa/triple.c||librdfa/triple.c": [
          "File: librdfa/triple.c -> librdfa/triple.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"rdfa_utils.h\"",
          "29: #include \"rdfa.h\"",
          "",
          "[Removed Lines]",
          "25: #include \"stdlib.h\"",
          "26: #include \"string.h\"",
          "27: #include \"stdio.h\"",
          "",
          "[Added Lines]",
          "25: #ifdef HAVE_CONFIG_H",
          "26: #  include <config.h>",
          "27: #endif",
          "29: #include <stdlib.h>",
          "30: #include <string.h>",
          "31: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:    rval->datatype = NULL;",
          "43:    rval->language = NULL;",
          "53:    if((subject != NULL) && (predicate != NULL) && (object != NULL))",
          "54:    {",
          "55:       rval->subject = rdfa_replace_string(rval->subject, subject);",
          "56:       rval->predicate = rdfa_replace_string(rval->predicate, predicate);",
          "57:       rval->object = rdfa_replace_string(rval->object, object);",
          "60:       if(datatype != NULL)",
          "61:       {",
          "62:          rval->datatype = rdfa_replace_string(rval->datatype, datatype);",
          "63:       }",
          "66:       if(language != NULL)",
          "67:       {",
          "68:          rval->language = rdfa_replace_string(rval->language, language);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #if 0",
          "50:    printf(\"SUBJECT  : %s\\n\", subject);",
          "51:    printf(\"PREDICATE: %s\\n\", predicate);",
          "52:    printf(\"OBJECT   : %s\\n\", object);",
          "53:    printf(\"DATATYPE : %s\\n\", datatype);",
          "54:    printf(\"LANG     : %s\\n\", language);",
          "55: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "187:    }",
          "188: }",
          "189: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: void rdfa_processor_location_triples(rdfacontext* context, const char* subject);",
          "205: #endif",
          "206: void rdfa_processor_location_triples(rdfacontext* context, const char* subject)",
          "207: {",
          "208: }",
          "220: void rdfa_processor_triples(",
          "221:    rdfacontext* context, const char* type, const char* msg)",
          "222: {",
          "223:    if(context->processor_graph_triple_callback != NULL)",
          "224:    {",
          "225:       char buffer[32];",
          "226:       char* subject = rdfa_create_bnode(context);",
          "227:       char* context_subject = rdfa_create_bnode(context);",
          "230:       rdftriple* triple = rdfa_create_triple(",
          "231:          subject, \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",",
          "232:          type, RDF_TYPE_IRI, NULL, NULL);",
          "233:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "236:       triple = rdfa_create_triple(",
          "237:          subject, \"http://purl.org/dc/terms/description\", msg,",
          "238:          RDF_TYPE_PLAIN_LITERAL, NULL, \"en\");",
          "239:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "242:       triple = rdfa_create_triple(",
          "243:          subject, \"http://www.w3.org/ns/rdfa#context\",",
          "244:          context_subject, RDF_TYPE_IRI, NULL, NULL);",
          "245:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "248:       triple = rdfa_create_triple(",
          "249:          context_subject, \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",",
          "250:          \"http://www.w3.org/2009/pointers#LineCharPointer\",",
          "251:          RDF_TYPE_IRI, NULL, NULL);",
          "252:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "255:       snprintf(buffer, sizeof(buffer) - 1, \"%d\",",
          "256:          (int)xmlSAX2GetLineNumber(context->parser));",
          "257:       triple = rdfa_create_triple(",
          "258:          context_subject, \"http://www.w3.org/2009/pointers#lineNumber\",",
          "259:          buffer, RDF_TYPE_TYPED_LITERAL,",
          "260:          \"http://www.w3.org/2001/XMLSchema#positiveInteger\", NULL);",
          "261:       context->processor_graph_triple_callback(triple, context->callback_data);",
          "263:       free(context_subject);",
          "264:       free(subject);",
          "265:    }",
          "266: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198: void rdfa_complete_incomplete_triples(rdfacontext* context)",
          "199: {",
          "214:    unsigned int i;",
          "215:    for(i = 0; i < context->incomplete_triples->num_items; i++)",
          "216:    {",
          "217:       rdfalist* incomplete_triples = context->incomplete_triples;",
          "218:       rdfalistitem* incomplete_triple = incomplete_triples->items[i];",
          "221:       {",
          "230:          rdftriple* triple =",
          "231:             rdfa_create_triple(context->parent_subject,",
          "232:                (const char*)incomplete_triple->data, context->new_subject,",
          "",
          "[Removed Lines]",
          "220:       if(incomplete_triple->flags & RDFALIST_FLAG_FORWARD)",
          "",
          "[Added Lines]",
          "298:       if(incomplete_triple->flags & RDFALIST_FLAG_DIR_NONE)",
          "299:       {",
          "302:          const char* predicate = (const char*)incomplete_triple->data;",
          "303:          rdftriple* triple = rdfa_create_triple(context->parent_subject,",
          "304:             predicate, context->new_subject, RDF_TYPE_IRI, NULL, NULL);",
          "307:          rdfa_create_list_mapping(",
          "308:             context, context->local_list_mappings,",
          "309:             context->parent_subject, predicate);",
          "312:          rdfa_append_to_list_mapping(context->local_list_mappings,",
          "313:             context->parent_subject, predicate, (void*)triple);",
          "314:       }",
          "315:       else if(incomplete_triple->flags & RDFALIST_FLAG_DIR_FORWARD)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:       }",
          "236:       else",
          "237:       {",
          "246:          rdftriple* triple =",
          "247:             rdfa_create_triple(context->new_subject,",
          "248:                (const char*)incomplete_triple->data, context->parent_subject,",
          "249:                RDF_TYPE_IRI, NULL, NULL);",
          "250:          context->default_graph_triple_callback(triple, context->callback_data);",
          "251:       }",
          "252:       free(incomplete_triple);",
          "253:    }",
          "254:    context->incomplete_triples->num_items = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:       free(incomplete_triple->data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257: void rdfa_complete_type_triples(",
          "258:    rdfacontext* context, const rdfalist* type_of)",
          "259: {",
          "271:    unsigned int i;",
          "273:    rdfalistitem** iptr = type_of->items;",
          "274:    for(i = 0; i < type_of->num_items; i++)",
          "275:    {",
          "282:       context->default_graph_triple_callback(triple, context->callback_data);",
          "283:       iptr++;",
          "",
          "[Removed Lines]",
          "276:       rdfalistitem* curie = *iptr;",
          "278:       rdftriple* triple = rdfa_create_triple(context->new_subject,",
          "279:          \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",",
          "280:          (const char*)curie->data, RDF_TYPE_IRI, NULL, NULL);",
          "",
          "[Added Lines]",
          "358:    const char* subject;",
          "359:    const char* type;",
          "361:    if(context->rdfa_version == RDFA_VERSION_1_0)",
          "362:    {",
          "375:       subject = context->new_subject;",
          "376:    }",
          "377:    else",
          "378:    {",
          "391:       subject = context->typed_resource;",
          "392:    }",
          "396:       rdfalistitem* iri = *iptr;",
          "397:       rdftriple* triple;",
          "398:       type = (const char*)iri->data;",
          "400:       triple = rdfa_create_triple(subject,",
          "401:          \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\", type, RDF_TYPE_IRI,",
          "402:          NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "351:    rdfacontext* context, const rdfalist* rel, const rdfalist* rev)",
          "352: {",
          "353:    unsigned int i;",
          "370:    if(rel != NULL)",
          "371:    {",
          "372:       rdfalistitem** relptr = rel->items;",
          "",
          "[Removed Lines]",
          "359:    context->current_object_resource = rdfa_create_bnode(context);",
          "",
          "[Added Lines]",
          "481:    if(context->current_object_resource == NULL)",
          "482:    {",
          "483:       context->current_object_resource = rdfa_create_bnode(context);",
          "484:    }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "377:          rdfa_add_item(",
          "378:             context->local_incomplete_triples, curie->data,",
          "381:          relptr++;",
          "382:       }",
          "383:    }",
          "393:    if(rev != NULL)",
          "394:    {",
          "395:       rdfalistitem** revptr = rev->items;",
          "",
          "[Removed Lines]",
          "379:                (liflag_t)(RDFALIST_FLAG_FORWARD | RDFALIST_FLAG_TEXT));",
          "",
          "[Added Lines]",
          "504:                (liflag_t)(RDFALIST_FLAG_DIR_FORWARD | RDFALIST_FLAG_TEXT));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "400:          rdfa_add_item(",
          "401:             context->local_incomplete_triples, curie->data,",
          "404:          revptr++;",
          "405:       }",
          "",
          "[Removed Lines]",
          "402:                (liflag_t)(RDFALIST_FLAG_REVERSE | RDFALIST_FLAG_TEXT));",
          "",
          "[Added Lines]",
          "527:                (liflag_t)(RDFALIST_FLAG_DIR_REVERSE | RDFALIST_FLAG_TEXT));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "541:       pptr++;",
          "542:    }",
          "549:    context->recurse = 0;",
          "550: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: void rdfa_complete_current_property_value_triples(rdfacontext* context)",
          "678: {",
          "685:    char* current_property_value = NULL;",
          "686:    rdfresource_t type = RDF_TYPE_UNKNOWN;",
          "688:    unsigned int i;",
          "689:    rdfalistitem** pptr;",
          "695:    if((context->datatype != NULL) && (strcmp(context->datatype,",
          "696:       \"http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral\") != 0))",
          "697:    {",
          "701:       if(context->content != NULL)",
          "702:       {",
          "703:          current_property_value = context->content;",
          "704:       }",
          "705:       else",
          "706:       {",
          "707:          current_property_value = context->plain_literal;",
          "708:       }",
          "715:       if(strlen(context->datatype) > 0)",
          "716:       {",
          "717:          type = RDF_TYPE_TYPED_LITERAL;",
          "718:       }",
          "719:       else",
          "720:       {",
          "721:          type = RDF_TYPE_PLAIN_LITERAL;",
          "722:       }",
          "723:    }",
          "724:    else if((context->datatype != NULL) && (strcmp(context->datatype,",
          "725:       \"http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral\") == 0))",
          "726:    {",
          "744:       current_property_value = context->xml_literal;",
          "745:       type = RDF_TYPE_XML_LITERAL;",
          "746:    }",
          "747:    else if(context->content != NULL)",
          "748:    {",
          "751:       current_property_value = context->content;",
          "752:       type = RDF_TYPE_PLAIN_LITERAL;",
          "753:    }",
          "754:    else if((context->rel_present == 0) && (context->rev_present == 0) &&",
          "755:       (context->content == NULL))",
          "756:    {",
          "759:       if(context->resource != NULL)",
          "760:       {",
          "763:          current_property_value = context->resource;",
          "764:          type = RDF_TYPE_IRI;",
          "765:       }",
          "766:       else if(context->href != NULL)",
          "767:       {",
          "770:          current_property_value = context->href;",
          "771:          type = RDF_TYPE_IRI;",
          "772:       }",
          "773:       else if(context->src != NULL)",
          "774:       {",
          "777:          current_property_value = context->src;",
          "778:          type = RDF_TYPE_IRI;",
          "779:       }",
          "780:       else if((context->about == NULL) && (context->typed_resource != NULL))",
          "781:       {",
          "784:          current_property_value = context->typed_resource;",
          "785:          type = RDF_TYPE_IRI;",
          "786:       }",
          "787:       else",
          "788:       {",
          "790:          current_property_value = context->plain_literal;",
          "791:          type = RDF_TYPE_PLAIN_LITERAL;",
          "792:       }",
          "793:    }",
          "794:    else",
          "795:    {",
          "797:       current_property_value = context->plain_literal;",
          "798:       type = RDF_TYPE_PLAIN_LITERAL;",
          "799:    }",
          "810:    if(context->inlist_present)",
          "811:    {",
          "820:       rdfa_establish_new_inlist_triples(",
          "821:          context, context->property, current_property_value, type);",
          "822:    }",
          "823:    else",
          "824:    {",
          "825:       pptr = context->property->items;",
          "826:       for(i = 0; i < context->property->num_items; i++)",
          "827:       {",
          "836:          rdfalistitem* curie = *pptr;",
          "837:          rdftriple* triple = triple = rdfa_create_triple(context->new_subject,",
          "838:             (const char*)curie->data, current_property_value, type,",
          "839:             context->datatype, context->language);",
          "841:          context->default_graph_triple_callback(triple, context->callback_data);",
          "843:          pptr++;",
          "844:       }",
          "845:    }",
          "846: }",
          "",
          "---------------"
        ],
        "src/Makefile.am||src/Makefile.am": [
          "File: src/Makefile.am -> src/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: if LIBRDFA",
          "164: libraptor2_la_SOURCES += \\",
          "165: $(top_srcdir)/librdfa/curie.c \\",
          "166: $(top_srcdir)/librdfa/iri.c \\",
          "168: $(top_srcdir)/librdfa/rdfa.c \\",
          "169: $(top_srcdir)/librdfa/rdfa_utils.c \\",
          "170: $(top_srcdir)/librdfa/subject.c \\",
          "",
          "[Removed Lines]",
          "167: $(top_srcdir)/librdfa/language.c\\",
          "",
          "[Added Lines]",
          "165: $(top_srcdir)/librdfa/context.c \\",
          "168: $(top_srcdir)/librdfa/language.c \\",
          "169: $(top_srcdir)/librdfa/lists.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172: $(top_srcdir)/librdfa/rdfa.h \\",
          "173: $(top_srcdir)/librdfa/rdfa_utils.h",
          "175: AM_CPPFLAGS += -DLIBRDFA_IN_RAPTOR -I$(top_srcdir)/librdfa",
          "176: endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: if NEED_STRTOK_R",
          "178: libraptor2_la_SOURCES += \\",
          "179: $(top_srcdir)/librdfa/strtok_r.c \\",
          "180: $(top_srcdir)/librdfa/strtok_r.h",
          "181: endif",
          "",
          "---------------"
        ],
        "src/raptor_internal.h||src/raptor_internal.h": [
          "File: src/raptor_internal.h -> src/raptor_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "801: #ifdef RAPTOR_PARSER_RDFA",
          "802: #define rdfa_add_item raptor_librdfa_rdfa_add_item",
          "803: #define rdfa_canonicalize_string raptor_librdfa_rdfa_canonicalize_string",
          "804: #define rdfa_complete_incomplete_triples raptor_librdfa_rdfa_complete_incomplete_triples",
          "805: #define rdfa_complete_object_literal_triples raptor_librdfa_rdfa_complete_object_literal_triples",
          "806: #define rdfa_complete_relrev_triples raptor_librdfa_rdfa_complete_relrev_triples",
          "807: #define rdfa_complete_type_triples raptor_librdfa_rdfa_complete_type_triples",
          "808: #define rdfa_copy_list raptor_librdfa_rdfa_copy_list",
          "809: #define rdfa_create_bnode raptor_librdfa_rdfa_create_bnode",
          "810: #define rdfa_create_context raptor_librdfa_rdfa_create_context",
          "811: #define rdfa_create_list raptor_librdfa_rdfa_create_list",
          "812: #define rdfa_create_new_element_context raptor_librdfa_rdfa_create_new_element_context",
          "813: #define rdfa_create_triple raptor_librdfa_rdfa_create_triple",
          "818: #define rdfa_free_list raptor_librdfa_rdfa_free_list",
          "819: #define rdfa_free_triple raptor_librdfa_rdfa_free_triple",
          "820: #define rdfa_get_buffer raptor_librdfa_rdfa_get_buffer",
          "822: #define rdfa_init_base raptor_librdfa_rdfa_init_base",
          "823: #define rdfa_init_context raptor_librdfa_rdfa_init_context",
          "824: #define rdfa_iri_get_base raptor_librdfa_rdfa_iri_get_base",
          "825: #define rdfa_join_string raptor_librdfa_rdfa_join_string",
          "826: #define rdfa_n_append_string raptor_librdfa_rdfa_n_append_string",
          "827: #define rdfa_parse raptor_librdfa_rdfa_parse",
          "828: #define rdfa_parse_buffer raptor_librdfa_rdfa_parse_buffer",
          "829: #define rdfa_parse_chunk raptor_librdfa_rdfa_parse_chunk",
          "",
          "[Removed Lines]",
          "814: #define rdfa_establish_new_subject raptor_librdfa_rdfa_establish_new_subject",
          "815: #define rdfa_establish_new_subject_with_relrev raptor_librdfa_rdfa_establish_new_subject_with_relrev",
          "816: #define rdfa_free_context raptor_librdfa_rdfa_free_context",
          "817: #define rdfa_free_context_stack raptor_librdfa_rdfa_free_context_stack",
          "821: #define rdfa_get_curie_type raptor_librdfa_get_curie_type",
          "",
          "[Added Lines]",
          "803: #define rdfa_append_to_list_mapping raptor_librdfa_rdfa_append_to_list_mapping",
          "805: #define rdfa_complete_current_property_value_triples raptor_librdfa_rdfa_complete_current_property_value_triples",
          "807: #define rdfa_complete_list_triples raptor_librdfa_rdfa_complete_list_triples",
          "812: #define rdfa_copy_mapping raptor_librdfa_rdfa_copy_mapping",
          "816: #define rdfa_create_list_mapping raptor_librdfa_rdfa_create_list_mapping",
          "817: #define rdfa_create_mapping raptor_librdfa_rdfa_create_mapping",
          "820: #define rdfa_establish_new_1_0_subject raptor_librdfa_rdfa_establish_new_1_0_subject",
          "821: #define rdfa_establish_new_1_0_subject_with_relrev raptor_librdfa_ablish_new_1_0_subject_with_relrev",
          "822: #define rdfa_establish_new_1_1_subject raptor_librdfa_ablish_new_1_1_subject",
          "823: #define rdfa_establish_new_1_1_subject_with_relrev raptor_librdfa_ablish_new_1_1_subject_with_relrev",
          "824: #define rdfa_establish_new_inlist_triples raptor_librdfa_ablish_new_inlist_triples",
          "825: #define rdfa_free_context raptor_librdfa_e_context",
          "826: #define rdfa_free_context_stack raptor_librdfa_e_context_stack",
          "828: #define rdfa_free_mapping raptor_librdfa_rdfa_free_mapping",
          "831: #define rdfa_get_curie_type raptor_librdfa_rdfa_get_curie_type",
          "832: #define rdfa_get_list_mapping raptor_librdfa_rdfa_get_list_mapping",
          "833: #define rdfa_get_mapping raptor_librdfa_rdfa_get_mapping",
          "839: #define rdfa_names raptor_librdfa_rdfa_names",
          "840: #define rdfa_next_mapping raptor_librdfa_rdfa_next_mapping",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831: #define rdfa_parse_start raptor_librdfa_rdfa_parse_start",
          "832: #define rdfa_pop_item raptor_librdfa_rdfa_pop_item",
          "833: #define rdfa_print_list raptor_librdfa_rdfa_print_list",
          "834: #define rdfa_print_triple raptor_librdfa_rdfa_print_triple",
          "836: #define rdfa_push_item raptor_librdfa_rdfa_push_item",
          "837: #define rdfa_replace_string raptor_librdfa_rdfa_replace_string",
          "838: #define rdfa_resolve_curie raptor_librdfa_rdfa_resolve_curie",
          "839: #define rdfa_resolve_curie_list raptor_librdfa_rdfa_resolve_curie_list",
          "840: #define rdfa_resolve_relrev_curie raptor_librdfa_rdfa_resolve_relrev_curie",
          "841: #define rdfa_resolve_uri raptor_librdfa_rdfa_resolve_uri",
          "842: #define rdfa_save_incomplete_triples raptor_librdfa_rdfa_save_incomplete_triples",
          "843: #define rdfa_set_buffer_filler raptor_librdfa_rdfa_set_buffer_filler",
          "844: #define rdfa_set_default_graph_triple_handler raptor_librdfa_rdfa_set_default_graph_triple_handler",
          "845: #define rdfa_set_processor_graph_triple_handler raptor_librdfa_rdfa_set_processor_graph_triple_handler",
          "846: #define rdfa_update_language raptor_librdfa_rdfa_update_language",
          "847: #endif",
          "",
          "[Removed Lines]",
          "835: #define rdfa_process_doctype raptor_librdfa_rdfa_process_doctype",
          "",
          "[Added Lines]",
          "848: #define rdfa_print_mapping raptor_librdfa_rdfa_print_mapping",
          "849: #define rdfa_print_string raptor_librdfa_rdfa_print_string",
          "851: #define rdfa_print_triple_list raptor_librdfa_rdfa_print_triple_list",
          "853: #define rdfa_replace_list raptor_librdfa_rdfa_replace_list",
          "859: #define rdfa_save_incomplete_list_triples raptor_librdfa_rdfa_save_incomplete_list_triples",
          "864: #define rdfa_setup_initial_context raptor_librdfa_rdfa_setup_initial_context",
          "866: #define rdfa_update_mapping raptor_librdfa_rdfa_update_mapping",
          "867: #define rdfa_uri_strings raptor_librdfa_rdfa_uri_strings",
          "",
          "---------------"
        ],
        "src/raptor_librdfa.c||src/raptor_librdfa.c": [
          "File: src/raptor_librdfa.c -> src/raptor_librdfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"rdfa_utils.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #define RAPTOR_DEFAULT_RDFA_VERSION 11",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   raptor_statement statement;",
          "62: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   int rdfa_version;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: static int",
          "69: raptor_librdfa_parse_init(raptor_parser* rdf_parser, const char *name)",
          "70: {",
          "73:   return 0;",
          "74: }",
          "",
          "[Removed Lines]",
          "71:   raptor_statement_init(&rdf_parser->statement, rdf_parser->world);",
          "",
          "[Added Lines]",
          "75:   raptor_librdfa_parser_context *librdfa_parser;",
          "76:   int rdfa_version = RAPTOR_DEFAULT_RDFA_VERSION;",
          "78:   librdfa_parser = (raptor_librdfa_parser_context*)rdf_parser->context;",
          "80:   raptor_statement_init(&rdf_parser->statement, rdf_parser->world);",
          "82:   if(!strcmp(name, \"rdfa11\"))",
          "83:     rdfa_version = 11;",
          "84:   else if(!strcmp(name, \"rdfa10\"))",
          "85:     rdfa_version = 10;",
          "87:   librdfa_parser->rdfa_version = rdfa_version;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:   rdfa_set_processor_graph_triple_handler(librdfa_parser->context, NULL);",
          "278:   rc = rdfa_parse_start(librdfa_parser->context);",
          "279:   if(rc != RDFA_PARSE_SUCCESS)",
          "280:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:   librdfa_parser->context->raptor_rdfa_version = librdfa_parser->rdfa_version;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330: }",
          "335: static const char* const rdfa_uri_strings[3] = {",
          "336:   \"http://www.w3.org/ns/formats/RDFa\",",
          "",
          "[Removed Lines]",
          "333: static const char* const rdfa_names[2] = { \"rdfa\", NULL };",
          "",
          "[Added Lines]",
          "351: static const char* const rdfa_names[4] = { \"rdfa\", \"rdfa11\", \"rdfa10\", NULL };",
          "",
          "---------------"
        ],
        "tests/rdfa/Makefile.am||tests/rdfa/Makefile.am": [
          "File: tests/rdfa/Makefile.am -> tests/rdfa/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:    name=`basename $$test .xml` ; \\",
          "120:    $(RECHO) $(RECHO_N) \"Checking $$test $(RECHO_C)\"; \\",
          "121:    baseuri=$(BASE_URI)$$test; \\",
          "123:    status1=$$?; \\",
          "124:    if test $$status1 = 2; then \\",
          "125:      status1=0; \\",
          "",
          "[Removed Lines]",
          "122:    $(top_builddir)/utils/rapper -f noNet -q -i rdfa -I $$baseuri -o ntriples $(srcdir)/$$test > $$name-res.nt 2> $$name.err; \\",
          "",
          "[Added Lines]",
          "122:    $(top_builddir)/utils/rapper -f noNet -q -i rdfa10 -I $$baseuri -o ntriples $(srcdir)/$$test > $$name-res.nt 2> $$name.err; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:    else \\",
          "132:      $(RECHO) \"FAILED\"; \\",
          "133:      $(RECHO) \"Triple counts: expected: `wc -l < $(srcdir)/$$name.out` got: `wc -l < $$name-res.nt` \"; \\",
          "135:      $(RECHO) $(top_builddir)/utils/rdfdiff -f ntriples -u $$baseuri -t ntriples $(srcdir)/$$name.out $$name-res.nt '>' $$name.res; \\",
          "136:      cat $$name.err $$name.res; \\",
          "137:      failures=\"$$failures $$test\"; \\",
          "",
          "[Removed Lines]",
          "134:      $(RECHO) $(top_builddir)/utils/rapper -f noNet -q -i rdfa -I $$baseuri -o ntriples $(srcdir)/$$test '>' $$name-res.nt; \\",
          "",
          "[Added Lines]",
          "134:      $(RECHO) $(top_builddir)/utils/rapper -f noNet -q -i rdfa10 -I $$baseuri -o ntriples $(srcdir)/$$test '>' $$name-res.nt; \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}