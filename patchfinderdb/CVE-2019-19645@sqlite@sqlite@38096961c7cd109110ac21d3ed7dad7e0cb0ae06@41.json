{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
      "candidate_info": {
        "commit_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the obsolete \"fastfuzztest\" target from the makefiles.\n\nFossilOrigin-Name: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
      "candidate_info": {
        "commit_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/skipscan1.test"
        ],
        "message": "Disable the skip-scan optimization for DISTINCT queries. Fix for ticket [ced41c7c7d6b4d36]\n\nFossilOrigin-Name: a871d69c6de65038360aa6142fbad22689fb347e526cca56bb83e695c1441fbe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/skipscan1.test||test/skipscan1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48b518eb6f76fb0beb161d1ebcf3b793efc36262d6d77a1ad5906b6501138e28",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2723:    && pProbe->noSkipScan==0",
          "2724:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "2726:    && (rc = whereLoopResize(db, pNew, pNew->nLTerm+1))==SQLITE_OK",
          "2727:   ){",
          "2728:     LogEst nIter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2726:    && (pWInfo->wctrlFlags & (WHERE_WANT_DISTINCT|WHERE_DISTINCTBY))==0",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "376: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376: # 2019-07-29 Ticket ced41c7c7d6b4d36",
          "377: # Skip-scan is disabled for DISTINCT queries",
          "378: #",
          "379: db close",
          "380: sqlite3 db :memory:",
          "381: do_execsql_test skipscan1-3.1 {",
          "382:   CREATE TABLE t1 (c1, c2, c3, c4, PRIMARY KEY(c4, c3));",
          "383:   INSERT INTO t1 VALUES(NULL,0,1,NULL);",
          "384:   INSERT INTO t1 VALUES(0,NULL,1,NULL);",
          "385:   INSERT INTO t1 VALUES(NULL,NULL,1,NULL);",
          "386:   ANALYZE sqlite_master;",
          "387:   INSERT INTO sqlite_stat1 VALUES('t1','sqlite_autoindex_t1_1','18 18 6');",
          "388:   ANALYZE sqlite_master;",
          "389:   SELECT DISTINCT quote(c1), quote(c2), quote(c3), quote(c4), '|'",
          "390:     FROM t1 WHERE t1.c3 = 1;",
          "391: } {NULL 0 1 NULL | 0 NULL 1 NULL | NULL NULL 1 NULL |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
      "candidate_info": {
        "commit_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9b0c45161346f64478167a599f0bbcec7801a4d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Fix a problem with renaming an INTEGER PRIMARY KEY column of a WITHOUT ROWID table using ALTER TABLE.\n\nFossilOrigin-Name: 91f701d39852ef1ddb29d1527d1520867c5efea110333315c55d8b08084384e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     pList = sqlite3ExprListAppend(pParse, 0,",
          "1860:                   sqlite3ExprAlloc(db, TK_ID, &ipkToken, 0));",
          "1861:     if( pList==0 ) return;",
          "1862:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "1863:     assert( pParse->pNewTable==pTab );",
          "1864:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "1865:                        SQLITE_IDXTYPE_PRIMARYKEY);",
          "1866:     if( db->mallocFailed || pParse->nErr ) return;",
          "1867:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1869:   }else{",
          "1870:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1871:     assert( pPk!=0 );",
          "",
          "[Removed Lines]",
          "1868:     pTab->iPKey = -1;",
          "",
          "[Added Lines]",
          "1862:     if( IN_RENAME_OBJECT ){",
          "1863:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1864:     }",
          "1867:     pTab->iPKey = -1;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:   User {CREATE TABLE \"User\" (id integer)}",
          "570: }",
          "572: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: #-------------------------------------------------------------------------",
          "573: reset_db",
          "574: do_execsql_test 18.1.0 {",
          "575:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "576: }",
          "577: breakpoint",
          "578: do_execsql_test 18.1.1 {",
          "579:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "580: }",
          "581: do_execsql_test 18.1.2 {",
          "582:   SELECT sql FROM sqlite_master;",
          "583: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1)) WITHOUT ROWID}}",
          "585: reset_db",
          "586: do_execsql_test 18.2.0 {",
          "587:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0));",
          "588: }",
          "589: do_execsql_test 18.2.1 {",
          "590:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "591: }",
          "592: do_execsql_test 18.2.2 {",
          "593:   SELECT sql FROM sqlite_master;",
          "594: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1))}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
      "candidate_info": {
        "commit_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/expr2.test",
          "test/index7.test"
        ],
        "message": "Update the sqlite3ExprCompare() routine so that it does not think \"? IS NOT TRUE\" is the same as \"? IS TRUE\". Fix for [d3e7f2ba5b3].\n\nFossilOrigin-Name: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/expr2.test||test/expr2.test",
          "test/index7.test||test/index7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4862:      && (combinedFlags & EP_Reduced)==0",
          "4863:     ){",
          "4864:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4865:       if( pA->iTable!=pB->iTable",
          "4866:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4867:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4865:       if( pA->op2!=pB->op2 ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2484:   u8 op2;                /* TK_REGISTER: original value of Expr.op",
          "",
          "[Added Lines]",
          "2484:   u8 op2;                /* TK_REGISTER/TK_TRUTH: original value of Expr.op",
          "",
          "---------------"
        ],
        "test/expr2.test||test/expr2.test": [
          "File: test/expr2.test -> test/expr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 20",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing expressions.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix expr2",
          "19: do_execsql_test 1.0 {",
          "20:   CREATE TABLE t0(c0);",
          "21:   INSERT INTO t0(c0) VALUES ('val');",
          "22: }",
          "24: do_execsql_test 1.1 {",
          "25:   SELECT * FROM t0 WHERE (",
          "26:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "27:   )",
          "28: } {val}",
          "30: do_execsql_test 1.2.1 {",
          "31:   SELECT",
          "32:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "33:   FROM t0",
          "34: } {1}",
          "36: do_execsql_test 1.2.2 {",
          "37:   SELECT",
          "38:       ( (0 IS NOT FALSE) OR NOT (0 IS 0 OR (t0.c0 = 1)) ) IS 0",
          "39:   FROM t0",
          "40: } {1}",
          "42: do_execsql_test 1.3 {",
          "43:   SELECT ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) FROM t0",
          "44: } {0}",
          "46: do_execsql_test 1.4.1 {",
          "47:   SELECT (0 IS NOT FALSE) FROM t0",
          "48: } {0}",
          "49: do_execsql_test 1.4.2 {",
          "50:   SELECT NOT (0 IS FALSE OR (t0.c0 = 1)) FROM t0",
          "51: } {0}",
          "54: finish_test",
          "",
          "---------------"
        ],
        "test/index7.test||test/index7.test": [
          "File: test/index7.test -> test/index7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   CREATE INDEX t5a ON t5(a) WHERE a=#1;",
          "328: } {1 {near \"#1\": syntax error}}",
          "331: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: do_execsql_test index7-7.0 {",
          "331:   CREATE TABLE t6(x, y);",
          "332:   INSERT INTO t6 VALUES(1, 1);",
          "333:   INSERT INTO t6 VALUES(0, 0);",
          "334:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "335: } {1 1}",
          "337: do_execsql_test index7-7.1 {",
          "338:   CREATE INDEX i6 ON t6(x) WHERE y IS NOT TRUE;",
          "339:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "340: } {1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
      "candidate_info": {
        "commit_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Allow compile-time options -DHAVE_GETHOSTUUID=0 and -DHAVE_GETHOSTUUID=1.\n\nFossilOrigin-Name: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 102ef64462cf0d78395ccc7ebb8e3bf6b7647c06b7657a037e051697bc08d6b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: # include <sys/param.h>",
          "115: #  endif",
          "116: #endif",
          "",
          "[Removed Lines]",
          "108: #if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "109:                            (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "110: #  if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "111:        && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "112: #    define HAVE_GETHOSTUUID 1",
          "113: #  else",
          "114: #    warning \"gethostuuid() is disabled.\"",
          "",
          "[Added Lines]",
          "120: #ifndef HAVE_GETHOSTUUID",
          "121: # define HAVE_GETHOSTUUID 0",
          "122: # if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "123:                             (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "124: #    if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "125:          && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "126: #      undef HAVE_GETHOSTUUID",
          "127: #      define HAVE_GETHOSTUUID 1",
          "128: #    else",
          "129: #      warning \"gethostuuid() is disabled.\"",
          "130: #    endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6934: extern int gethostuuid(uuid_t id, const struct timespec *wait);",
          "6935: #endif",
          "",
          "[Removed Lines]",
          "6932: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6948: #if HAVE_GETHOSTUUID",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6940: static int proxyGetHostID(unsigned char *pHostID, int *pError){",
          "6941:   assert(PROXY_HOSTIDLEN == sizeof(uuid_t));",
          "6942:   memset(pHostID, 0, PROXY_HOSTIDLEN);",
          "6944:   {",
          "6946:     if( gethostuuid(pHostID, &timeout) ){",
          "",
          "[Removed Lines]",
          "6943: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6959: #if HAVE_GETHOSTUUID",
          "",
          "---------------"
        ]
      }
    }
  ]
}