{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
      "candidate_info": {
        "commit_hash": "0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b12613a006a69d05f4db3efd5c4190ef6a7bee9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an FTS3 test case that depends on the ICU extension so that it only runs if SQLite is compiled with ICU.\n\nFossilOrigin-Name: 19c6240bdbb022b2af463e59d873280d0f2385bf30e22b9aad5fc9677a99f251",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a17b29f08c888301911c35096899f10d24192c8ecec467cddde5401b6bd1903f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5782: #-------------------------------------------------------------------------",
          "5783: #",
          "",
          "[Removed Lines]",
          "5772: reset_db",
          "5773: do_catchsql_test 33.0 {",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5777:   INSERT INTO f VALUES (1, '1234');",
          "5778:   INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5772: ifcapable icu {",
          "5773:   reset_db",
          "5774:   do_catchsql_test 33.0 {",
          "5775:     CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5776:     CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5777:     CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5778:     INSERT INTO f VALUES (1, '1234');",
          "5779:     INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5780:     INSERT INTO f(f) VALUES ('merge=198,49');",
          "5781:   } {1 {database disk image is malformed}}",
          "5782: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
      "candidate_info": {
        "commit_hash": "e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2478dfa439d1dee0be7d26ebaf546313c4a2786",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Do an early close of virtual table cursors to avoid unnecessary cursor contention in UPDATE for some virtual table implementations. Ticket [56a74875be799b85]\n\nFossilOrigin-Name: eb95dac7f6482c36853a23234c5ce7af37c7beed8e3675d6a49c4d3a8307e076",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61c2233654158e65a3d3baeea947903a919a569fcc4a5b342b2e9a68cec1b6f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5340:       continue;",
          "5341:     }",
          "5343: #ifdef SQLITE_ENABLE_EARLY_CURSOR_CLOSE",
          "5350:      && pTab->pSelect==0",
          "5351:      && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0",
          "5352:     ){",
          "",
          "[Removed Lines]",
          "5349:     if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "[Added Lines]",
          "5343:     if( IsVirtual(pTab) ){",
          "5344:       sqlite3VdbeAddOp1(v, OP_Close, pTabItem->iCursor);",
          "5345:     }",
          "5352:     else if( (pTab->tabFlags & TF_Ephemeral)==0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
      "candidate_info": {
        "commit_hash": "6c1c85ca483154aafa41883253a941f196fa6d03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c1c85ca483154aafa41883253a941f196fa6d03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Fix to the optimization of check-in [a47efb7c8520a011] that reads the values of expressions used in an index-on-expression directly from the index rather than recomputing the value.  If the expression has a top-level COLLATE or unlikely() operator, be sure to clear the corresponding flags prior to converting it into a TK_COLUMN expression.  Failure to do this is most likely harmless in production, but might cause an assertion fault in debugging builds. Ticket [b0cb8aff561a6dcd].  Test cases in TH3.\n\nFossilOrigin-Name: 56539e1c132632c075efc217ad5951a35e4459605ac128914aec3a7be1e25718",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddb17d92df194337a103c561ef46ced00db5e67e4551e82de7cb5ad7f457dd5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:     pExpr->iTable = pX->iIdxCur;",
          "1146:     pExpr->iColumn = pX->iIdxCol;",
          "1147:     pExpr->y.pTab = 0;",
          "1148:     return WRC_Prune;",
          "1149:   }else{",
          "1150:     return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:     testcase( ExprHasProperty(pExpr, EP_Skip) );",
          "1149:     testcase( ExprHasProperty(pExpr, EP_Unlikely) );",
          "1150:     ExprClearProperty(pExpr, EP_Skip|EP_Unlikely);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e937df81f0b7993f1bfa2aaffeaeca0227cf0f7d",
      "candidate_info": {
        "commit_hash": "e937df81f0b7993f1bfa2aaffeaeca0227cf0f7d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e937df81f0b7993f1bfa2aaffeaeca0227cf0f7d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c",
          "src/btree.c",
          "src/btreeInt.h",
          "src/build.c",
          "src/main.c",
          "src/pragma.c",
          "src/vacuum.c"
        ],
        "message": "Fix the handling of reserve-bytes so that the maximum value of 255 can be used.\n\nFossilOrigin-Name: 99749d4fd4930ccf15227f67c732266af9e09dd3cabdc0834fb450ef98196441",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63e659d9a793227604aa95685a8d83cd08305f1d01e135407a3ffc6d54482ab8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static int setDestPgsz(sqlite3_backup *p){",
          "114:   int rc;",
          "116:   return rc;",
          "117: }",
          "",
          "[Removed Lines]",
          "115:   rc = sqlite3BtreeSetPageSize(p->pDest,sqlite3BtreeGetPageSize(p->pSrc),-1,0);",
          "",
          "[Added Lines]",
          "115:   rc = sqlite3BtreeSetPageSize(p->pDest,sqlite3BtreeGetPageSize(p->pSrc),0,0);",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2857: int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){",
          "2858:   int rc = SQLITE_OK;",
          "2859:   BtShared *pBt = p->pBt;",
          "2861:   sqlite3BtreeEnter(p);",
          "2865:   if( pBt->btsFlags & BTS_PAGESIZE_FIXED ){",
          "2866:     sqlite3BtreeLeave(p);",
          "2867:     return SQLITE_READONLY;",
          "2868:   }",
          "2872:   assert( nReserve>=0 && nReserve<=255 );",
          "2873:   if( pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE &&",
          "2874:         ((pageSize-1)&pageSize)==0 ){",
          "",
          "[Removed Lines]",
          "2860:   assert( nReserve>=-1 && nReserve<=254 );",
          "2862:   if( nReserve>=0 ){",
          "2863:     pBt->nReserveWanted = nReserve + 1;",
          "2864:   }",
          "2869:   if( nReserve<0 ){",
          "2870:     nReserve = pBt->pageSize - pBt->usableSize;",
          "2871:   }",
          "",
          "[Added Lines]",
          "2859:   int x;",
          "2861:   assert( nReserve>=0 && nReserve<=255 );",
          "2863:   pBt->nReserveWanted = nReserve;",
          "2864:   x = pBt->pageSize - pBt->usableSize;",
          "2865:   if( nReserve<x ) nReserve = x;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2921: int sqlite3BtreeGetRequestedReserve(Btree *p){",
          "2923:   sqlite3BtreeEnter(p);",
          "2926:   sqlite3BtreeLeave(p);",
          "2928: }",
          "",
          "[Removed Lines]",
          "2922:   int n;",
          "2924:   n = ((int)p->pBt->nReserveWanted) - 1;",
          "2925:   if( n<0 ) n = sqlite3BtreeGetReserveNoMutex(p);",
          "2927:   return n;",
          "",
          "[Added Lines]",
          "2920:   int n1, n2;",
          "2922:   n1 = (int)p->pBt->nReserveWanted;",
          "2923:   n2 = sqlite3BtreeGetReserveNoMutex(p);",
          "2925:   return n1>n2 ? n1 : n2;",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4630:     }",
          "4631:     db->aDb[1].pBt = pBt;",
          "4632:     assert( db->aDb[1].pSchema );",
          "4634:       sqlite3OomFault(db);",
          "4635:       return 1;",
          "4636:     }",
          "",
          "[Removed Lines]",
          "4633:     if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize, -1, 0) ){",
          "",
          "[Added Lines]",
          "4633:     if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize, 0, 0) ){",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3854:     }else if( op==SQLITE_FCNTL_RESERVE_BYTES ){",
          "3855:       int iNew = *(int*)pArg;",
          "3858:         sqlite3BtreeSetPageSize(pBtree, 0, iNew, 0);",
          "3859:       }",
          "3860:       rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "3857:       if( iNew>=0 && iNew<=254 ){",
          "",
          "[Added Lines]",
          "3857:       if( iNew>=0 && iNew<=255 ){",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:       db->nextPagesize = sqlite3Atoi(zRight);",
          "559:         sqlite3OomFault(db);",
          "560:       }",
          "561:     }",
          "",
          "[Removed Lines]",
          "558:       if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize,-1,0) ){",
          "",
          "[Added Lines]",
          "558:       if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize,0,0) ){",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:   db->nChange = saved_nChange;",
          "378:   db->nTotalChange = saved_nTotalChange;",
          "379:   db->mTrace = saved_mTrace;",
          "",
          "[Removed Lines]",
          "380:   sqlite3BtreeSetPageSize(pMain, -1, -1, 1);",
          "",
          "[Added Lines]",
          "380:   sqlite3BtreeSetPageSize(pMain, -1, 0, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fce445b8fa02ded3850c30a08d2519dd64e102ba",
      "candidate_info": {
        "commit_hash": "fce445b8fa02ded3850c30a08d2519dd64e102ba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fce445b8fa02ded3850c30a08d2519dd64e102ba",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/bigmmap.test"
        ],
        "message": "Fix a problem in test file bigmmap.test.\n\nFossilOrigin-Name: d8e47382160e98be646ce3ba568578493088d1bb11d513ded3e00b576fb07f06",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/bigmmap.test||test/bigmmap.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c778f8295c3c9b6cd6107b33fd7664ae75c97840fc974c9f971755a523f185c4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/bigmmap.test||test/bigmmap.test": [
          "File: test/bigmmap.test -> test/bigmmap.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     \" [string map {\"\\n    \" \"\\n\"} \"",
          "96:       QUERY PLAN",
          "97:       |--SCAN TABLE t$t AS o USING COVERING INDEX sqlite_autoindex_t${t}_1",
          "99:          `--SEARCH TABLE t$t AS i USING INTEGER PRIMARY KEY (rowid=?)",
          "100:     \"]",
          "101:   }",
          "",
          "[Removed Lines]",
          "98:       `--CORRELATED SCALAR SUBQUERY",
          "",
          "[Added Lines]",
          "98:       `--CORRELATED SCALAR SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    }
  ]
}