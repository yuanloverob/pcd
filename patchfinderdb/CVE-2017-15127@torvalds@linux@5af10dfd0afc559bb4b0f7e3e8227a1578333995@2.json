{
  "cve_id": "CVE-2017-15127",
  "cve_desc": "A flaw was found in the hugetlb_mcopy_atomic_pte function in mm/hugetlb.c in the Linux kernel before 4.13. A superfluous implicit page unlock for VM_SHARED hugetlbfs mapping could trigger a local denial of service (BUG).",
  "repo": "torvalds/linux",
  "patch_hash": "5af10dfd0afc559bb4b0f7e3e8227a1578333995",
  "patch_info": {
    "commit_hash": "5af10dfd0afc559bb4b0f7e3e8227a1578333995",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5af10dfd0afc559bb4b0f7e3e8227a1578333995",
    "files": [
      "mm/hugetlb.c"
    ],
    "message": "userfaultfd: hugetlbfs: remove superfluous page unlock in VM_SHARED case\n\nhuge_add_to_page_cache->add_to_page_cache implicitly unlocks the page\nbefore returning in case of errors.\n\nThe error returned was -EEXIST by running UFFDIO_COPY on a non-hole\noffset of a VM_SHARED hugetlbfs mapping.  It was an userland bug that\ntriggered it and the kernel must cope with it returning -EEXIST from\nioctl(UFFDIO_COPY) as expected.\n\n  page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))\n  kernel BUG at mm/filemap.c:964!\n  invalid opcode: 0000 [#1] SMP\n  CPU: 1 PID: 22582 Comm: qemu-system-x86 Not tainted 4.11.11-300.fc26.x86_64 #1\n  RIP: unlock_page+0x4a/0x50\n  Call Trace:\n    hugetlb_mcopy_atomic_pte+0xc0/0x320\n    mcopy_atomic+0x96f/0xbe0\n    userfaultfd_ioctl+0x218/0xe90\n    do_vfs_ioctl+0xa5/0x600\n    SyS_ioctl+0x79/0x90\n    entry_SYSCALL_64_fastpath+0x1a/0xa9\n\nLink: http://lkml.kernel.org/r/20170802165145.22628-2-aarcange@redhat.com\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nTested-by: Maxime Coquelin <maxime.coquelin@redhat.com>\nReviewed-by: Mike Kravetz <mike.kravetz@oracle.com>\nCc: \"Dr. David Alan Gilbert\" <dgilbert@redhat.com>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Alexey Perevalov <a.perevalov@samsung.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "mm/hugetlb.c||mm/hugetlb.c"
    ]
  },
  "patch_diff": {
    "mm/hugetlb.c||mm/hugetlb.c": [
      "File: mm/hugetlb.c -> mm/hugetlb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4062:  return ret;",
      "4063: out_release_unlock:",
      "4064:  spin_unlock(ptl);",
      "4066:  if (vm_shared)",
      "4067:   unlock_page(page);",
      "4068:  put_page(page);",
      "4069:  goto out;",
      "4070: }",
      "",
      "[Removed Lines]",
      "4065: out_release_nounlock:",
      "",
      "[Added Lines]",
      "4067: out_release_nounlock:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0e17a9b0df29590c45dfb296f541270a5941f41",
      "candidate_info": {
        "commit_hash": "b0e17a9b0df29590c45dfb296f541270a5941f41",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b0e17a9b0df29590c45dfb296f541270a5941f41",
        "files": [
          "drivers/scsi/ipr.c",
          "drivers/scsi/ipr.h"
        ],
        "message": "scsi: ipr: Fix scsi-mq lockdep issue\n\nFixes the following lockdep warning that can occur when scsi-mq is\nenabled with ipr due to ipr calling scsi_unblock_requests from irq\ncontext. The fix is to move the call to scsi_unblock_requests to ipr's\nexisting workqueue.\n\nstack backtrace:\nCPU: 28 PID: 0 Comm: swapper/28 Not tainted 4.13.0-rc2-gcc6x-gf74c89b #1\nCall Trace:\n[c000001fffe97550] [c000000000b50818] dump_stack+0xe8/0x160 (unreliable)\n[c000001fffe97590] [c0000000001586d0] print_usage_bug+0x2d0/0x390\n[c000001fffe97640] [c000000000158f34] mark_lock+0x7a4/0x8e0\n[c000001fffe976f0] [c00000000015a000] __lock_acquire+0x6a0/0x1a70\n[c000001fffe97860] [c00000000015befc] lock_acquire+0xec/0x2e0\n[c000001fffe97930] [c000000000b71514] _raw_spin_lock+0x44/0x70\n[c000001fffe97960] [c0000000005b60f4] blk_mq_sched_dispatch_requests+0xa4/0x2a0\n[c000001fffe979c0] [c0000000005acac0] __blk_mq_run_hw_queue+0x100/0x2c0\n[c000001fffe97a00] [c0000000005ad478] __blk_mq_delay_run_hw_queue+0x118/0x130\n[c000001fffe97a40] [c0000000005ad61c] blk_mq_start_hw_queues+0x6c/0xa0\n[c000001fffe97a80] [c000000000797aac] scsi_kick_queue+0x2c/0x60\n[c000001fffe97aa0] [c000000000797cf0] scsi_run_queue+0x210/0x360\n[c000001fffe97b10] [c00000000079b888] scsi_run_host_queues+0x48/0x80\n[c000001fffe97b40] [c0000000007b6090] ipr_ioa_bringdown_done+0x70/0x1e0\n[c000001fffe97bc0] [c0000000007bc860] ipr_reset_ioa_job+0x80/0xf0\n[c000001fffe97bf0] [c0000000007b4d50] ipr_reset_timer_done+0xd0/0x100\n[c000001fffe97c30] [c0000000001937bc] call_timer_fn+0xdc/0x4b0\n[c000001fffe97cf0] [c000000000193d08] expire_timers+0x178/0x330\n[c000001fffe97d60] [c0000000001940c8] run_timer_softirq+0xb8/0x120\n[c000001fffe97de0] [c000000000b726a8] __do_softirq+0x168/0x6d8\n[c000001fffe97ef0] [c0000000000df2c8] irq_exit+0x108/0x150\n[c000001fffe97f10] [c000000000017bf4] __do_irq+0x2a4/0x4a0\n[c000001fffe97f90] [c00000000002da50] call_do_irq+0x14/0x24\n[c0000007fad93aa0] [c000000000017e8c] do_IRQ+0x9c/0x140\n[c0000007fad93af0] [c000000000008b98] hardware_interrupt_common+0x138/0x140\n\nReported-by: Michael Ellerman <mpe@ellerman.id.au>\nSigned-off-by: Brian King <brking@linux.vnet.ibm.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/ipr.c||drivers/scsi/ipr.c",
          "drivers/scsi/ipr.h||drivers/scsi/ipr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/scsi/ipr.c||drivers/scsi/ipr.c": [
          "File: drivers/scsi/ipr.c -> drivers/scsi/ipr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3351:   return;",
          "3352:  }",
          "3354:  if (!ioa_cfg->scan_enabled) {",
          "3355:   spin_unlock_irqrestore(ioa_cfg->host->host_lock, lock_flags);",
          "3356:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3354:  if (ioa_cfg->scsi_unblock) {",
          "3355:   ioa_cfg->scsi_unblock = 0;",
          "3356:   ioa_cfg->scsi_blocked = 0;",
          "3357:   spin_unlock_irqrestore(ioa_cfg->host->host_lock, lock_flags);",
          "3358:   scsi_unblock_requests(ioa_cfg->host);",
          "3359:   spin_lock_irqsave(ioa_cfg->host->host_lock, lock_flags);",
          "3360:   if (ioa_cfg->scsi_blocked)",
          "3361:    scsi_block_requests(ioa_cfg->host);",
          "3362:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7211:  ENTER;",
          "7212:  if (!ioa_cfg->hrrq[IPR_INIT_HRRQ].removing_ioa) {",
          "7213:   ipr_trace;",
          "7217:  }",
          "7219:  ioa_cfg->in_reset_reload = 0;",
          "",
          "[Removed Lines]",
          "7214:   spin_unlock_irq(ioa_cfg->host->host_lock);",
          "7215:   scsi_unblock_requests(ioa_cfg->host);",
          "7216:   spin_lock_irq(ioa_cfg->host->host_lock);",
          "",
          "[Added Lines]",
          "7224:   ioa_cfg->scsi_unblock = 1;",
          "7225:   schedule_work(&ioa_cfg->work_q);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7287:  list_add_tail(&ipr_cmd->queue, &ipr_cmd->hrrq->hrrq_free_q);",
          "7288:  wake_up_all(&ioa_cfg->reset_wait_q);",
          "7297:  schedule_work(&ioa_cfg->work_q);",
          "7298:  LEAVE;",
          "7299:  return IPR_RC_JOB_RETURN;",
          "",
          "[Removed Lines]",
          "7290:  spin_unlock(ioa_cfg->host->host_lock);",
          "7291:  scsi_unblock_requests(ioa_cfg->host);",
          "7292:  spin_lock(ioa_cfg->host->host_lock);",
          "7294:  if (!ioa_cfg->hrrq[IPR_INIT_HRRQ].allow_cmds)",
          "7295:   scsi_block_requests(ioa_cfg->host);",
          "",
          "[Added Lines]",
          "7299:  ioa_cfg->scsi_unblock = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9249:   spin_unlock(&ioa_cfg->hrrq[i]._lock);",
          "9250:  }",
          "9251:  wmb();",
          "9253:   scsi_block_requests(ioa_cfg->host);",
          "9255:  ipr_cmd = ipr_get_free_ipr_cmnd(ioa_cfg);",
          "9256:  ioa_cfg->reset_cmd = ipr_cmd;",
          "",
          "[Removed Lines]",
          "9252:  if (!ioa_cfg->hrrq[IPR_INIT_HRRQ].removing_ioa)",
          "",
          "[Added Lines]",
          "9255:  if (!ioa_cfg->hrrq[IPR_INIT_HRRQ].removing_ioa) {",
          "9256:   ioa_cfg->scsi_unblock = 0;",
          "9257:   ioa_cfg->scsi_blocked = 1;",
          "9259:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9306:    wake_up_all(&ioa_cfg->reset_wait_q);",
          "9308:    if (!ioa_cfg->hrrq[IPR_INIT_HRRQ].removing_ioa) {",
          "9312:    }",
          "9313:    return;",
          "9314:   } else {",
          "",
          "[Removed Lines]",
          "9309:     spin_unlock_irq(ioa_cfg->host->host_lock);",
          "9310:     scsi_unblock_requests(ioa_cfg->host);",
          "9311:     spin_lock_irq(ioa_cfg->host->host_lock);",
          "",
          "[Added Lines]",
          "9315:     ioa_cfg->scsi_unblock = 1;",
          "9316:     schedule_work(&ioa_cfg->work_q);",
          "",
          "---------------"
        ],
        "drivers/scsi/ipr.h||drivers/scsi/ipr.h": [
          "File: drivers/scsi/ipr.h -> drivers/scsi/ipr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1488:  u8 cfg_locked:1;",
          "1489:  u8 clear_isr:1;",
          "1490:  u8 probe_done:1;",
          "1492:  u8 revid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1491:  u8 scsi_unblock:1;",
          "1492:  u8 scsi_blocked:1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e8b55411468ef9aa4401282a869715c45b0310b",
      "candidate_info": {
        "commit_hash": "3e8b55411468ef9aa4401282a869715c45b0310b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3e8b55411468ef9aa4401282a869715c45b0310b",
        "files": [
          "drivers/soc/qcom/smsm.c"
        ],
        "message": "soc: qcom: smsm: fix of_node refcnting problem\n\nof_find_node_with_property() drops the reference to the 'from' node,\nwhich eventually (after enough -EPROBE_DEFERs) drops the last reference\nto the node causing all sorts of fun problems, and this nice splat.\n\n  BUG: sleeping function called from invalid context at ../kernel/locking/mutex.c:747\n  in_atomic(): 1, irqs_disabled(): 128, pid: 33, name: kworker/0:1\n  4 locks held by kworker/0:1/33:\n   #0:  (\"events\"){.+.+.+}, at: [<ffff0000080fa91c>] process_one_work+0x1a4/0x728\n   #1:  (deferred_probe_work){+.+.+.}, at: [<ffff0000080fa91c>] process_one_work+0x1a4/0x728\n   #2:  (&dev->mutex){......}, at: [<ffff000008676078>] __device_attach+0x30/0x168\n   #3:  (devtree_lock){......}, at: [<ffff000008828fd0>] of_find_node_with_property+0x30/0xe0\n  irq event stamp: 18976\n  hardirqs last  enabled at (18975): [<ffff00000815794c>] __down_trylock_console_sem+0x74/0xb8\n  hardirqs last disabled at (18976): [<ffff0000089e26d4>] _raw_spin_lock_irqsave+0x2c/0x78\n  softirqs last  enabled at (16880): [<ffff0000080e0f00>] __do_softirq+0x580/0x640\n  softirqs last disabled at (16871): [<ffff0000080e13a4>] irq_exit+0xe4/0x138\n  CPU: 0 PID: 33 Comm: kworker/0:1 Tainted: G            E   4.12.0-rc5+ #1455\n  Hardware name: qualcomm dragonboard410c/dragonboard410c, BIOS 2017.07-rc1-00234-g22fa70a-dirty 06/26/2017\n  Workqueue: events deferred_probe_work_func\n  Call trace:\n  [<ffff000008089ee0>] dump_backtrace+0x0/0x230\n  [<ffff00000808a134>] show_stack+0x24/0x30\n  [<ffff0000084e1944>] dump_stack+0xac/0xe8\n  [<ffff00000810d7e0>] ___might_sleep+0x150/0x230\n  [<ffff00000810d918>] __might_sleep+0x58/0x90\n  [<ffff0000089dde18>] __mutex_lock+0x50/0x870\n  [<ffff0000089de674>] mutex_lock_nested+0x3c/0x50\n  [<ffff000008388ae0>] kernfs_remove+0x30/0x50\n  [<ffff00000838b720>] sysfs_remove_dir+0x58/0x70\n  [<ffff0000084e393c>] kobject_del+0x1c/0x58\n  [<ffff0000084e374c>] kobject_put+0xb4/0x208\n  [<ffff00000882c364>] of_node_put+0x24/0x30\n  [<ffff000008829018>] of_find_node_with_property+0x78/0xe0\n  [<ffff000000aff5f4>] qcom_smsm_probe+0x194/0x720 [smsm]\n  [<ffff0000086793b4>] platform_drv_probe+0x74/0x110\n  [<ffff0000086765bc>] driver_probe_device+0x2b4/0x420\n  [<ffff000008676920>] __device_attach_driver+0xd0/0x150\n  [<ffff000008673e78>] bus_for_each_drv+0x68/0xa8\n  [<ffff00000867611c>] __device_attach+0xd4/0x168\n  [<ffff000008676a1c>] device_initial_probe+0x24/0x30\n  [<ffff000008675380>] bus_probe_device+0xa0/0xa8\n  [<ffff000008675948>] deferred_probe_work_func+0xb8/0xf8\n  [<ffff0000080fa9d4>] process_one_work+0x25c/0x728\n  [<ffff0000080faef4>] worker_thread+0x54/0x3d8\n  [<ffff0000081031d8>] kthread+0x110/0x140\n  [<ffff000008082d90>] ret_from_fork+0x10/0x40\n  OF: ERROR: Bad of_node_put() on /smsm\n  CPU: 0 PID: 33 Comm: kworker/0:1 Tainted: G        W   E   4.12.0-rc5+ #1455\n  Hardware name: qualcomm dragonboard410c/dragonboard410c, BIOS 2017.07-rc1-00234-g22fa70a-dirty 06/26/2017\n  Workqueue: events deferred_probe_work_func\n\nSigned-off-by: Rob Clark <robdclark@gmail.com>\nSigned-off-by: Andy Gross <andy.gross@linaro.org>",
        "before_after_code_files": [
          "drivers/soc/qcom/smsm.c||drivers/soc/qcom/smsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/soc/qcom/smsm.c||drivers/soc/qcom/smsm.c": [
          "File: drivers/soc/qcom/smsm.c -> drivers/soc/qcom/smsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:  if (!smsm->hosts)",
          "497:   return -ENOMEM;",
          "500:  if (!local_node) {",
          "501:   dev_err(&pdev->dev, \"no state entry\\n\");",
          "502:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "499:  local_node = of_find_node_with_property(pdev->dev.of_node, \"#qcom,smem-state-cells\");",
          "",
          "[Added Lines]",
          "499:  local_node = of_find_node_with_property(of_node_get(pdev->dev.of_node),",
          "500:       \"#qcom,smem-state-cells\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d041353dc98a6339182cd6f628b4c8f111278cb3",
      "candidate_info": {
        "commit_hash": "d041353dc98a6339182cd6f628b4c8f111278cb3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d041353dc98a6339182cd6f628b4c8f111278cb3",
        "files": [
          "mm/shmem.c"
        ],
        "message": "mm: fix list corruptions on shmem shrinklist\n\nWe saw many list corruption warnings on shmem shrinklist:\n\n  WARNING: CPU: 18 PID: 177 at lib/list_debug.c:59 __list_del_entry+0x9e/0xc0\n  list_del corruption. prev->next should be ffff9ae5694b82d8, but was ffff9ae5699ba960\n  Modules linked in: intel_rapl sb_edac edac_core x86_pkg_temp_thermal coretemp iTCO_wdt iTCO_vendor_support crct10dif_pclmul crc32_pclmul ghash_clmulni_intel raid0 dcdbas shpchp wmi hed i2c_i801 ioatdma lpc_ich i2c_smbus acpi_cpufreq tcp_diag inet_diag sch_fq_codel ipmi_si ipmi_devintf ipmi_msghandler igb ptp crc32c_intel pps_core i2c_algo_bit i2c_core dca ipv6 crc_ccitt\n  CPU: 18 PID: 177 Comm: kswapd1 Not tainted 4.9.34-t3.el7.twitter.x86_64 #1\n  Hardware name: Dell Inc. PowerEdge C6220/0W6W6G, BIOS 2.2.3 11/07/2013\n  Call Trace:\n    dump_stack+0x4d/0x66\n    __warn+0xcb/0xf0\n    warn_slowpath_fmt+0x4f/0x60\n    __list_del_entry+0x9e/0xc0\n    shmem_unused_huge_shrink+0xfa/0x2e0\n    shmem_unused_huge_scan+0x20/0x30\n    super_cache_scan+0x193/0x1a0\n    shrink_slab.part.41+0x1e3/0x3f0\n    shrink_slab+0x29/0x30\n    shrink_node+0xf9/0x2f0\n    kswapd+0x2d8/0x6c0\n    kthread+0xd7/0xf0\n    ret_from_fork+0x22/0x30\n\n  WARNING: CPU: 23 PID: 639 at lib/list_debug.c:33 __list_add+0x89/0xb0\n  list_add corruption. prev->next should be next (ffff9ae5699ba960), but was ffff9ae5694b82d8. (prev=ffff9ae5694b82d8).\n  Modules linked in: intel_rapl sb_edac edac_core x86_pkg_temp_thermal coretemp iTCO_wdt iTCO_vendor_support crct10dif_pclmul crc32_pclmul ghash_clmulni_intel raid0 dcdbas shpchp wmi hed i2c_i801 ioatdma lpc_ich i2c_smbus acpi_cpufreq tcp_diag inet_diag sch_fq_codel ipmi_si ipmi_devintf ipmi_msghandler igb ptp crc32c_intel pps_core i2c_algo_bit i2c_core dca ipv6 crc_ccitt\n  CPU: 23 PID: 639 Comm: systemd-udevd Tainted: G        W       4.9.34-t3.el7.twitter.x86_64 #1\n  Hardware name: Dell Inc. PowerEdge C6220/0W6W6G, BIOS 2.2.3 11/07/2013\n  Call Trace:\n    dump_stack+0x4d/0x66\n    __warn+0xcb/0xf0\n    warn_slowpath_fmt+0x4f/0x60\n    __list_add+0x89/0xb0\n    shmem_setattr+0x204/0x230\n    notify_change+0x2ef/0x440\n    do_truncate+0x5d/0x90\n    path_openat+0x331/0x1190\n    do_filp_open+0x7e/0xe0\n    do_sys_open+0x123/0x200\n    SyS_open+0x1e/0x20\n    do_syscall_64+0x61/0x170\n    entry_SYSCALL64_slow_path+0x25/0x25\n\nThe problem is that shmem_unused_huge_shrink() moves entries from the\nglobal sbinfo->shrinklist to its local lists and then releases the\nspinlock.  However, a parallel shmem_setattr() could access one of these\nentries directly and add it back to the global shrinklist if it is\nremoved, with the spinlock held.\n\nThe logic itself looks solid since an entry could be either in a local\nlist or the global list, otherwise it is removed from one of them by\nlist_del_init().  So probably the race condition is that, one CPU is in\nthe middle of INIT_LIST_HEAD() but the other CPU calls list_empty()\nwhich returns true too early then the following list_add_tail() sees a\ncorrupted entry.\n\nlist_empty_careful() is designed to fix this situation.\n\n[akpm@linux-foundation.org: add comments]\nLink: http://lkml.kernel.org/r/20170803054630.18775-1-xiyou.wangcong@gmail.com\nFixes: 779750d20b93 (\"shmem: split huge pages beyond i_size under memory pressure\")\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/shmem.c||mm/shmem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/shmem.c||mm/shmem.c": [
          "File: mm/shmem.c -> mm/shmem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:    if (IS_ENABLED(CONFIG_TRANSPARENT_HUGE_PAGECACHE)) {",
          "1024:     spin_lock(&sbinfo->shrinklist_lock);",
          "1026:      list_add_tail(&info->shrinklist,",
          "1027:        &sbinfo->shrinklist);",
          "1028:      sbinfo->shrinklist_len++;",
          "",
          "[Removed Lines]",
          "1025:     if (list_empty(&info->shrinklist)) {",
          "",
          "[Added Lines]",
          "1029:     if (list_empty_careful(&info->shrinklist)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1819:    spin_lock(&sbinfo->shrinklist_lock);",
          "1821:     list_add_tail(&info->shrinklist,",
          "1822:       &sbinfo->shrinklist);",
          "1823:     sbinfo->shrinklist_len++;",
          "",
          "[Removed Lines]",
          "1820:    if (list_empty(&info->shrinklist)) {",
          "",
          "[Added Lines]",
          "1828:    if (list_empty_careful(&info->shrinklist)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c9e8def43a3452e7af658b340f5f4f4ecde5c38",
      "candidate_info": {
        "commit_hash": "1c9e8def43a3452e7af658b340f5f4f4ecde5c38",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1c9e8def43a3452e7af658b340f5f4f4ecde5c38",
        "files": [
          "mm/hugetlb.c",
          "mm/userfaultfd.c"
        ],
        "message": "userfaultfd: hugetlbfs: add UFFDIO_COPY support for shared mappings\n\nWhen userfaultfd hugetlbfs support was originally added, it followed the\npattern of anon mappings and did not support any vmas marked VM_SHARED.\nAs such, support was only added for private mappings.\n\nRemove this limitation and support shared mappings.  The primary\nfunctional change required is adding pages to the page cache.  More subtle\nchanges are required for huge page reservation handling in error paths.  A\nlengthy comment in the code describes the reservation handling.\n\n[mike.kravetz@oracle.com: update]\n  Link: http://lkml.kernel.org/r/c9c8cafe-baa7-05b4-34ea-1dfa5523a85f@oracle.com\nLink: http://lkml.kernel.org/r/1487195210-12839-1-git-send-email-mike.kravetz@oracle.com\nSigned-off-by: Mike Kravetz <mike.kravetz@oracle.com>\nReviewed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: \"Dr. David Alan Gilbert\" <dgilbert@redhat.com>\nCc: Hillf Danton <hillf.zj@alibaba-inc.com>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Pavel Emelyanov <xemul@parallels.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/hugetlb.c||mm/hugetlb.c",
          "mm/userfaultfd.c||mm/userfaultfd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mm/hugetlb.c||mm/hugetlb.c"
          ],
          "candidate": [
            "mm/hugetlb.c||mm/hugetlb.c"
          ]
        }
      },
      "candidate_diff": {
        "mm/hugetlb.c||mm/hugetlb.c": [
          "File: mm/hugetlb.c -> mm/hugetlb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3992:        unsigned long src_addr,",
          "3993:        struct page **pagep)",
          "3994: {",
          "3995:  struct hstate *h = hstate_vma(dst_vma);",
          "3996:  pte_t _dst_pte;",
          "3997:  spinlock_t *ptl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3995:  int vm_shared = dst_vma->vm_flags & VM_SHARED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4028:  __SetPageUptodate(page);",
          "4029:  set_page_huge_active(page);",
          "4031:  ptl = huge_pte_lockptr(h, dst_mm, dst_pte);",
          "4032:  spin_lock(ptl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4035:  if (vm_shared) {",
          "4036:   struct address_space *mapping = dst_vma->vm_file->f_mapping;",
          "4037:   pgoff_t idx = vma_hugecache_offset(h, dst_vma, dst_addr);",
          "4039:   ret = huge_add_to_page_cache(page, mapping, idx);",
          "4040:   if (ret)",
          "4041:    goto out_release_nounlock;",
          "4042:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4035:  if (!huge_pte_none(huge_ptep_get(dst_pte)))",
          "4036:   goto out_release_unlock;",
          "4041:  _dst_pte = make_huge_pte(dst_vma, page, dst_vma->vm_flags & VM_WRITE);",
          "4042:  if (dst_vma->vm_flags & VM_WRITE)",
          "",
          "[Removed Lines]",
          "4038:  ClearPagePrivate(page);",
          "4039:  hugepage_add_new_anon_rmap(page, dst_vma, dst_addr);",
          "",
          "[Added Lines]",
          "4051:  if (vm_shared) {",
          "4052:   page_dup_rmap(page, true);",
          "4053:  } else {",
          "4054:   ClearPagePrivate(page);",
          "4055:   hugepage_add_new_anon_rmap(page, dst_vma, dst_addr);",
          "4056:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4053:  update_mmu_cache(dst_vma, dst_addr, dst_pte);",
          "4055:  spin_unlock(ptl);",
          "4056:  ret = 0;",
          "4057: out:",
          "4058:  return ret;",
          "4059: out_release_unlock:",
          "4060:  spin_unlock(ptl);",
          "4061:  put_page(page);",
          "4062:  goto out;",
          "4063: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4073:  if (vm_shared)",
          "4074:   unlock_page(page);",
          "4080: out_release_nounlock:",
          "4081:  if (vm_shared)",
          "4082:   unlock_page(page);",
          "",
          "---------------"
        ],
        "mm/userfaultfd.c||mm/userfaultfd.c": [
          "File: mm/userfaultfd.c -> mm/userfaultfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:            unsigned long len,",
          "155:            bool zeropage)",
          "156: {",
          "157:  ssize_t err;",
          "158:  pte_t *dst_pte;",
          "159:  unsigned long src_addr, dst_addr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:  int vm_alloc_shared = dst_vma->vm_flags & VM_SHARED;",
          "158:  int vm_shared = dst_vma->vm_flags & VM_SHARED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:    goto out_unlock;",
          "212:   if (dst_start < dst_vma->vm_start ||",
          "213:       dst_start + len > dst_vma->vm_end)",
          "214:    goto out_unlock;",
          "215:  }",
          "217:  if (WARN_ON(dst_addr & (vma_hpagesize - 1) ||",
          "",
          "[Removed Lines]",
          "210:   if (dst_vma->vm_flags & VM_SHARED)",
          "211:    goto out_unlock;",
          "",
          "[Added Lines]",
          "216:   vm_shared = dst_vma->vm_flags & VM_SHARED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:   goto out_unlock;",
          "230:  err = -ENOMEM;",
          "234:  h = hstate_vma(dst_vma);",
          "",
          "[Removed Lines]",
          "231:  if (unlikely(anon_vma_prepare(dst_vma)))",
          "232:   goto out_unlock;",
          "",
          "[Added Lines]",
          "233:  if (!vm_shared) {",
          "234:   if (unlikely(anon_vma_prepare(dst_vma)))",
          "235:    goto out_unlock;",
          "236:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "266:       dst_addr, src_addr, &page);",
          "268:   mutex_unlock(&hugetlb_fault_mutex_table[hash]);",
          "270:   cond_resched();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:   vm_alloc_shared = vm_shared;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "305:  if (page) {",
          "320:   put_page(page);",
          "321:  }",
          "322:  BUG_ON(copied < 0);",
          "",
          "[Removed Lines]",
          "319:   ClearPagePrivate(page);",
          "",
          "[Added Lines]",
          "352:   if (vm_alloc_shared)",
          "353:    SetPagePrivate(page);",
          "354:   else",
          "355:    ClearPagePrivate(page);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:  dst_vma = find_vma(dst_mm, dst_start);",
          "373:  if (!dst_vma)",
          "374:   goto out_unlock;",
          "376:   goto out_unlock;",
          "377:  if (dst_start < dst_vma->vm_start ||",
          "378:      dst_start + len > dst_vma->vm_end)",
          "379:   goto out_unlock;",
          "",
          "[Removed Lines]",
          "375:  if (!vma_is_shmem(dst_vma) && dst_vma->vm_flags & VM_SHARED)",
          "",
          "[Added Lines]",
          "415:  if (WARN_ON_ONCE(vma_is_anonymous(dst_vma) &&",
          "416:      dst_vma->vm_flags & VM_SHARED))",
          "",
          "---------------"
        ]
      }
    }
  ]
}