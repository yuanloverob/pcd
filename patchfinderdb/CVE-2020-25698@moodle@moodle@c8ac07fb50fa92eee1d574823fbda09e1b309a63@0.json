{
  "cve_id": "CVE-2020-25698",
  "cve_desc": "Users' enrollment capabilities were not being sufficiently checked in Moodle when they are restored into an existing course. This could lead to them unenrolling users without having permission to do so. Versions affected: 3.5 to 3.5.14, 3.7 to 3.7.8, 3.8 to 3.8.5, 3.9 to 3.9.2 and earlier unsupported versions. Fixed in 3.9.3, 3.8.6, 3.7.9, 3.5.15, and 3.10.",
  "repo": "moodle/moodle",
  "patch_hash": "c8ac07fb50fa92eee1d574823fbda09e1b309a63",
  "patch_info": {
    "commit_hash": "c8ac07fb50fa92eee1d574823fbda09e1b309a63",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/c8ac07fb50fa92eee1d574823fbda09e1b309a63",
    "files": [
      "backup/controller/restore_controller.class.php",
      "backup/moodle2/restore_stepslib.php",
      "lib/enrollib.php",
      "lib/moodlelib.php"
    ],
    "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
    "before_after_code_files": [
      "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
      "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
      "lib/enrollib.php||lib/enrollib.php",
      "lib/moodlelib.php||lib/moodlelib.php"
    ]
  },
  "patch_diff": {
    "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
      "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "369:             $options = array();",
      "370:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
      "371:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
      "372:             restore_dbops::delete_course_content($this->get_courseid(), $options);",
      "373:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "372:             $options['userid'] = $this->userid;",
      "",
      "---------------"
    ],
    "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
      "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2163:         }",
      "2165:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
      "2169:             $plugins = enrol_get_plugins(true);",
      "2171:                 $plugin->restore_sync_course($course);",
      "2172:             }",
      "",
      "[Removed Lines]",
      "2167:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
      "2170:             foreach ($plugins as $plugin) {",
      "",
      "[Added Lines]",
      "2167:         $enrolinstances = enrol_get_instances($course->id, false);",
      "2169:         if ($enrolinstances) {",
      "2172:             $enrolmethods = array_map(function($enrolinstance) {",
      "2173:                 return $enrolinstance->enrol;",
      "2174:             }, $enrolinstances);",
      "2177:             foreach ($plugins as $pluginname => $plugin) {",
      "2179:                 if (!in_array($pluginname, $enrolmethods)) {",
      "2180:                     $plugin->course_updated(true, $course, null);",
      "2181:                 }",
      "",
      "---------------"
    ],
    "lib/enrollib.php||lib/enrollib.php": [
      "File: lib/enrollib.php -> lib/enrollib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1096:     global $DB;",
      "1098:     $instances = enrol_get_instances($course->id, false);",
      "1099:     $plugins = enrol_get_plugins(true);",
      "1100:     foreach ($instances as $instance) {",
      "1101:         if (isset($plugins[$instance->enrol])) {",
      "1102:             $plugins[$instance->enrol]->delete_instance($instance);",
      "1103:         }",
      "1106:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
      "1107:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
      "1108:         $DB->delete_records('enrol', array('id'=>$instance->id));",
      "",
      "[Removed Lines]",
      "1095: function enrol_course_delete($course) {",
      "1105:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
      "",
      "[Added Lines]",
      "1099: function enrol_course_delete($course, $userid = null) {",
      "1102:     $context = context_course::instance($course->id);",
      "1106:     if ($userid) {",
      "1109:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
      "1110:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
      "1111:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
      "1112:                 has_capability($unenrolcap, $context, $userid);",
      "1113:         });",
      "1114:     }",
      "",
      "---------------"
    ],
    "lib/moodlelib.php||lib/moodlelib.php": [
      "File: lib/moodlelib.php -> lib/moodlelib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5371:     }",
      "5372:     unset($childcontexts);",
      "5375:     if (empty($options['keep_roles_and_enrolments'])) {",
      "5377:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
      "5379:         if ($showfeedback) {",
      "5380:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
      "5381:         }",
      "",
      "[Removed Lines]",
      "5378:         enrol_course_delete($course);",
      "",
      "[Added Lines]",
      "5379:         $userid = $options['userid'] ?? null;",
      "5380:         enrol_course_delete($course, $userid);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4503b3f20f94db3d6a1f274c1e51789891d938a",
      "candidate_info": {
        "commit_hash": "b4503b3f20f94db3d6a1f274c1e51789891d938a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b4503b3f20f94db3d6a1f274c1e51789891d938a",
        "files": [
          "backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php",
          "lib/moodlelib.php"
        ],
        "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
        "before_after_code_files": [
          "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php||lib/enrollib.php",
          "lib/moodlelib.php||lib/moodlelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ],
          "candidate": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
          "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:             $options = array();",
          "363:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
          "364:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
          "365:             restore_dbops::delete_course_content($this->get_courseid(), $options);",
          "366:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:             $options['userid'] = $this->userid;",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2152:         }",
          "2154:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
          "2158:             $plugins = enrol_get_plugins(true);",
          "2160:                 $plugin->restore_sync_course($course);",
          "2161:             }",
          "",
          "[Removed Lines]",
          "2156:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
          "2159:             foreach ($plugins as $plugin) {",
          "",
          "[Added Lines]",
          "2156:         $enrolinstances = enrol_get_instances($course->id, false);",
          "2158:         if ($enrolinstances) {",
          "2161:             $enrolmethods = array_map(function($enrolinstance) {",
          "2162:                 return $enrolinstance->enrol;",
          "2163:             }, $enrolinstances);",
          "2166:             foreach ($plugins as $pluginname => $plugin) {",
          "2168:                 if (!in_array($pluginname, $enrolmethods)) {",
          "2169:                     $plugin->course_updated(true, $course, null);",
          "2170:                 }",
          "",
          "---------------"
        ],
        "lib/enrollib.php||lib/enrollib.php": [
          "File: lib/enrollib.php -> lib/enrollib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:     global $DB;",
          "1073:     $instances = enrol_get_instances($course->id, false);",
          "1074:     $plugins = enrol_get_plugins(true);",
          "1075:     foreach ($instances as $instance) {",
          "1076:         if (isset($plugins[$instance->enrol])) {",
          "1077:             $plugins[$instance->enrol]->delete_instance($instance);",
          "1078:         }",
          "1081:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
          "1082:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "1083:         $DB->delete_records('enrol', array('id'=>$instance->id));",
          "",
          "[Removed Lines]",
          "1070: function enrol_course_delete($course) {",
          "1080:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "",
          "[Added Lines]",
          "1074: function enrol_course_delete($course, $userid = null) {",
          "1077:     $context = context_course::instance($course->id);",
          "1081:     if ($userid) {",
          "1084:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
          "1085:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
          "1086:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
          "1087:                 has_capability($unenrolcap, $context, $userid);",
          "1088:         });",
          "1089:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5270:     }",
          "5271:     unset($childcontexts);",
          "5274:     if (empty($options['keep_roles_and_enrolments'])) {",
          "5276:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
          "5278:         if ($showfeedback) {",
          "5279:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
          "5280:         }",
          "",
          "[Removed Lines]",
          "5277:         enrol_course_delete($course);",
          "",
          "[Added Lines]",
          "5278:         $userid = $options['userid'] ?? null;",
          "5279:         enrol_course_delete($course, $userid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dfebe709e0668f53952e61d5ae2ae427af75011",
      "candidate_info": {
        "commit_hash": "2dfebe709e0668f53952e61d5ae2ae427af75011",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2dfebe709e0668f53952e61d5ae2ae427af75011",
        "files": [
          "backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php",
          "lib/moodlelib.php"
        ],
        "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
        "before_after_code_files": [
          "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php||lib/enrollib.php",
          "lib/moodlelib.php||lib/moodlelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ],
          "candidate": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
          "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:             $options = array();",
          "363:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
          "364:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
          "365:             restore_dbops::delete_course_content($this->get_courseid(), $options);",
          "366:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:             $options['userid'] = $this->userid;",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154:         }",
          "2156:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
          "2160:             $plugins = enrol_get_plugins(true);",
          "2162:                 $plugin->restore_sync_course($course);",
          "2163:             }",
          "",
          "[Removed Lines]",
          "2158:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
          "2161:             foreach ($plugins as $plugin) {",
          "",
          "[Added Lines]",
          "2158:         $enrolinstances = enrol_get_instances($course->id, false);",
          "2160:         if ($enrolinstances) {",
          "2163:             $enrolmethods = array_map(function($enrolinstance) {",
          "2164:                 return $enrolinstance->enrol;",
          "2165:             }, $enrolinstances);",
          "2168:             foreach ($plugins as $pluginname => $plugin) {",
          "2170:                 if (!in_array($pluginname, $enrolmethods)) {",
          "2171:                     $plugin->course_updated(true, $course, null);",
          "2172:                 }",
          "",
          "---------------"
        ],
        "lib/enrollib.php||lib/enrollib.php": [
          "File: lib/enrollib.php -> lib/enrollib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1096:     global $DB;",
          "1098:     $instances = enrol_get_instances($course->id, false);",
          "1099:     $plugins = enrol_get_plugins(true);",
          "1100:     foreach ($instances as $instance) {",
          "1101:         if (isset($plugins[$instance->enrol])) {",
          "1102:             $plugins[$instance->enrol]->delete_instance($instance);",
          "1103:         }",
          "1106:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
          "1107:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "1108:         $DB->delete_records('enrol', array('id'=>$instance->id));",
          "",
          "[Removed Lines]",
          "1095: function enrol_course_delete($course) {",
          "1105:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "",
          "[Added Lines]",
          "1099: function enrol_course_delete($course, $userid = null) {",
          "1102:     $context = context_course::instance($course->id);",
          "1106:     if ($userid) {",
          "1109:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
          "1110:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
          "1111:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
          "1112:                 has_capability($unenrolcap, $context, $userid);",
          "1113:         });",
          "1114:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5314:     }",
          "5315:     unset($childcontexts);",
          "5318:     if (empty($options['keep_roles_and_enrolments'])) {",
          "5320:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
          "5322:         if ($showfeedback) {",
          "5323:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
          "5324:         }",
          "",
          "[Removed Lines]",
          "5321:         enrol_course_delete($course);",
          "",
          "[Added Lines]",
          "5322:         $userid = $options['userid'] ?? null;",
          "5323:         enrol_course_delete($course, $userid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d0b569ba13ec3c49d16171863c364b24e1fd504",
      "candidate_info": {
        "commit_hash": "5d0b569ba13ec3c49d16171863c364b24e1fd504",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5d0b569ba13ec3c49d16171863c364b24e1fd504",
        "files": [
          "backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php",
          "lib/moodlelib.php"
        ],
        "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
        "before_after_code_files": [
          "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php||lib/enrollib.php",
          "lib/moodlelib.php||lib/moodlelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ],
          "candidate": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
          "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:             $options = array();",
          "370:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
          "371:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
          "372:             restore_dbops::delete_course_content($this->get_courseid(), $options);",
          "373:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:             $options['userid'] = $this->userid;",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2154:         }",
          "2156:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
          "2160:             $plugins = enrol_get_plugins(true);",
          "2162:                 $plugin->restore_sync_course($course);",
          "2163:             }",
          "",
          "[Removed Lines]",
          "2158:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
          "2161:             foreach ($plugins as $plugin) {",
          "",
          "[Added Lines]",
          "2158:         $enrolinstances = enrol_get_instances($course->id, false);",
          "2160:         if ($enrolinstances) {",
          "2163:             $enrolmethods = array_map(function($enrolinstance) {",
          "2164:                 return $enrolinstance->enrol;",
          "2165:             }, $enrolinstances);",
          "2168:             foreach ($plugins as $pluginname => $plugin) {",
          "2170:                 if (!in_array($pluginname, $enrolmethods)) {",
          "2171:                     $plugin->course_updated(true, $course, null);",
          "2172:                 }",
          "",
          "---------------"
        ],
        "lib/enrollib.php||lib/enrollib.php": [
          "File: lib/enrollib.php -> lib/enrollib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1096:     global $DB;",
          "1098:     $instances = enrol_get_instances($course->id, false);",
          "1099:     $plugins = enrol_get_plugins(true);",
          "1100:     foreach ($instances as $instance) {",
          "1101:         if (isset($plugins[$instance->enrol])) {",
          "1102:             $plugins[$instance->enrol]->delete_instance($instance);",
          "1103:         }",
          "1106:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
          "1107:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "1108:         $DB->delete_records('enrol', array('id'=>$instance->id));",
          "",
          "[Removed Lines]",
          "1095: function enrol_course_delete($course) {",
          "1105:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "",
          "[Added Lines]",
          "1099: function enrol_course_delete($course, $userid = null) {",
          "1102:     $context = context_course::instance($course->id);",
          "1106:     if ($userid) {",
          "1109:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
          "1110:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
          "1111:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
          "1112:                 has_capability($unenrolcap, $context, $userid);",
          "1113:         });",
          "1114:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5358:     }",
          "5359:     unset($childcontexts);",
          "5362:     if (empty($options['keep_roles_and_enrolments'])) {",
          "5364:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
          "5366:         if ($showfeedback) {",
          "5367:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
          "5368:         }",
          "",
          "[Removed Lines]",
          "5365:         enrol_course_delete($course);",
          "",
          "[Added Lines]",
          "5366:         $userid = $options['userid'] ?? null;",
          "5367:         enrol_course_delete($course, $userid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f651fc4c8acaa6456f0d85c15d4c8f737bf8e100",
      "candidate_info": {
        "commit_hash": "f651fc4c8acaa6456f0d85c15d4c8f737bf8e100",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f651fc4c8acaa6456f0d85c15d4c8f737bf8e100",
        "files": [
          "backup/moodle2/restore_stepslib.php",
          "backup/util/ui/restore_ui.class.php",
          "lib/enrollib.php",
          "lib/moodlelib.php"
        ],
        "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
        "before_after_code_files": [
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "backup/util/ui/restore_ui.class.php||backup/util/ui/restore_ui.class.php",
          "lib/enrollib.php||lib/enrollib.php",
          "lib/moodlelib.php||lib/moodlelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ],
          "candidate": [
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2132:         }",
          "2134:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
          "2138:             $plugins = enrol_get_plugins(true);",
          "2140:                 $plugin->restore_sync_course($course);",
          "2141:             }",
          "",
          "[Removed Lines]",
          "2136:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
          "2139:             foreach ($plugins as $plugin) {",
          "",
          "[Added Lines]",
          "2136:         $enrolinstances = enrol_get_instances($course->id, false);",
          "2138:         if ($enrolinstances) {",
          "2141:             $enrolmethods = array_map(function($enrolinstance) {",
          "2142:                 return $enrolinstance->enrol;",
          "2143:             }, $enrolinstances);",
          "2146:             foreach ($plugins as $pluginname => $plugin) {",
          "2148:                 if (!in_array($pluginname, $enrolmethods)) {",
          "2149:                     $plugin->course_updated(true, $course, null);",
          "2150:                 }",
          "",
          "---------------"
        ],
        "backup/util/ui/restore_ui.class.php||backup/util/ui/restore_ui.class.php": [
          "File: backup/util/ui/restore_ui.class.php -> backup/util/ui/restore_ui.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:             $options = array();",
          "220:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
          "221:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
          "222:             restore_dbops::delete_course_content($this->controller->get_courseid(), $options);",
          "223:         }",
          "224:         $this->controller->execute_plan();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:             $options['userid'] = $this->controller->get_userid();",
          "",
          "---------------"
        ],
        "lib/enrollib.php||lib/enrollib.php": [
          "File: lib/enrollib.php -> lib/enrollib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:     global $DB;",
          "1038:     $instances = enrol_get_instances($course->id, false);",
          "1039:     $plugins = enrol_get_plugins(true);",
          "1040:     foreach ($instances as $instance) {",
          "1041:         if (isset($plugins[$instance->enrol])) {",
          "1042:             $plugins[$instance->enrol]->delete_instance($instance);",
          "1043:         }",
          "1046:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
          "1047:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "1048:         $DB->delete_records('enrol', array('id'=>$instance->id));",
          "",
          "[Removed Lines]",
          "1035: function enrol_course_delete($course) {",
          "1045:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "",
          "[Added Lines]",
          "1039: function enrol_course_delete($course, $userid = null) {",
          "1042:     $context = context_course::instance($course->id);",
          "1046:     if ($userid) {",
          "1049:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
          "1050:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
          "1051:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
          "1052:                 has_capability($unenrolcap, $context, $userid);",
          "1053:         });",
          "1054:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5142:     }",
          "5143:     unset($childcontexts);",
          "5146:     if (empty($options['keep_roles_and_enrolments'])) {",
          "5148:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
          "5150:         if ($showfeedback) {",
          "5151:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
          "5152:         }",
          "",
          "[Removed Lines]",
          "5149:         enrol_course_delete($course);",
          "",
          "[Added Lines]",
          "5150:         $userid = $options['userid'] ?? null;",
          "5151:         enrol_course_delete($course, $userid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd2427746f6c6f5e3bd6fc673b4eb8a803e378cd",
      "candidate_info": {
        "commit_hash": "fd2427746f6c6f5e3bd6fc673b4eb8a803e378cd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/fd2427746f6c6f5e3bd6fc673b4eb8a803e378cd",
        "files": [
          "backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php",
          "lib/moodlelib.php"
        ],
        "message": "MDL-67837 backup: Verify caps before unenrolling users on course restore",
        "before_after_code_files": [
          "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "lib/enrollib.php||lib/enrollib.php",
          "lib/moodlelib.php||lib/moodlelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ],
          "candidate": [
            "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php",
            "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
            "lib/enrollib.php||lib/enrollib.php",
            "lib/moodlelib.php||lib/moodlelib.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/controller/restore_controller.class.php||backup/controller/restore_controller.class.php": [
          "File: backup/controller/restore_controller.class.php -> backup/controller/restore_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:             $options = array();",
          "370:             $options['keep_roles_and_enrolments'] = $this->get_setting_value('keep_roles_and_enrolments');",
          "371:             $options['keep_groups_and_groupings'] = $this->get_setting_value('keep_groups_and_groupings');",
          "372:             restore_dbops::delete_course_content($this->get_courseid(), $options);",
          "373:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:             $options['userid'] = $this->userid;",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2163:         }",
          "2165:         $course = $DB->get_record('course', array('id'=>$this->get_courseid()), '*', MUST_EXIST);",
          "2169:             $plugins = enrol_get_plugins(true);",
          "2171:                 $plugin->restore_sync_course($course);",
          "2172:             }",
          "",
          "[Removed Lines]",
          "2167:         if ($DB->record_exists('enrol', array('courseid'=>$this->get_courseid(), 'enrol'=>'manual'))) {",
          "2170:             foreach ($plugins as $plugin) {",
          "",
          "[Added Lines]",
          "2167:         $enrolinstances = enrol_get_instances($course->id, false);",
          "2169:         if ($enrolinstances) {",
          "2172:             $enrolmethods = array_map(function($enrolinstance) {",
          "2173:                 return $enrolinstance->enrol;",
          "2174:             }, $enrolinstances);",
          "2177:             foreach ($plugins as $pluginname => $plugin) {",
          "2179:                 if (!in_array($pluginname, $enrolmethods)) {",
          "2180:                     $plugin->course_updated(true, $course, null);",
          "2181:                 }",
          "",
          "---------------"
        ],
        "lib/enrollib.php||lib/enrollib.php": [
          "File: lib/enrollib.php -> lib/enrollib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1096:     global $DB;",
          "1098:     $instances = enrol_get_instances($course->id, false);",
          "1099:     $plugins = enrol_get_plugins(true);",
          "1100:     foreach ($instances as $instance) {",
          "1101:         if (isset($plugins[$instance->enrol])) {",
          "1102:             $plugins[$instance->enrol]->delete_instance($instance);",
          "1103:         }",
          "1106:         $DB->delete_records('role_assignments', array('itemid'=>$instance->id, 'component'=>'enrol_'.$instance->enrol));",
          "1107:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "1108:         $DB->delete_records('enrol', array('id'=>$instance->id));",
          "",
          "[Removed Lines]",
          "1095: function enrol_course_delete($course) {",
          "1105:         $DB->delete_records('user_enrolments', array('enrolid'=>$instance->id));",
          "",
          "[Added Lines]",
          "1099: function enrol_course_delete($course, $userid = null) {",
          "1102:     $context = context_course::instance($course->id);",
          "1106:     if ($userid) {",
          "1109:         $instances = array_filter($instances, function($instance) use ($userid, $plugins, $context) {",
          "1110:             $unenrolcap = \"enrol/{$instance->enrol}:unenrol\";",
          "1111:             return $plugins[$instance->enrol]->allow_unenrol($instance) &&",
          "1112:                 has_capability($unenrolcap, $context, $userid);",
          "1113:         });",
          "1114:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5371:     }",
          "5372:     unset($childcontexts);",
          "5375:     if (empty($options['keep_roles_and_enrolments'])) {",
          "5377:         role_unassign_all(array('contextid' => $coursecontext->id, 'component' => ''), true);",
          "5379:         if ($showfeedback) {",
          "5380:             echo $OUTPUT->notification($strdeleted.get_string('type_enrol_plural', 'plugin'), 'notifysuccess');",
          "5381:         }",
          "",
          "[Removed Lines]",
          "5378:         enrol_course_delete($course);",
          "",
          "[Added Lines]",
          "5379:         $userid = $options['userid'] ?? null;",
          "5380:         enrol_course_delete($course, $userid);",
          "",
          "---------------"
        ]
      }
    }
  ]
}