{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "acf6e08d20a663de5d4012effba666675bd23fe9",
      "candidate_info": {
        "commit_hash": "acf6e08d20a663de5d4012effba666675bd23fe9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/acf6e08d20a663de5d4012effba666675bd23fe9",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix typo for one instance of line number handling in the Lemon tool.\n\nFossilOrigin-Name: 980be1730dc1239c63a107923bf2e32b4ec7d4bc31b9190e711cc35f18cc2bb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a97804620a27acc30bebd2aaa04e38f2f36de48b0931038ca8bdc9cb0c36b8f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4426:     }",
          "4427:     i++;",
          "4428:   }",
          "4430:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4429:   if( j>0 ){ fprintf(out, \"\\n\"); lineno++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
      "candidate_info": {
        "commit_hash": "35fb866ea334beedadb258eaacb68b627a6b2554",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35fb866ea334beedadb258eaacb68b627a6b2554",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with fts5 \"ORDER BY rank\" queries when the fts5 table name requires quoting.\n\nFossilOrigin-Name: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   rc = fts5PrepareStatement(&pSorter->pStmt, pConfig,",
          "936:       pConfig->zDb, pConfig->zName, zRank, pConfig->zName,",
          "937:       (zRankArgs ? \", \" : \"\"),",
          "938:       (zRankArgs ? zRankArgs : \"\"),",
          "",
          "[Removed Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s\",",
          "",
          "[Added Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(\\\"%w\\\"%s%s) %s\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: do_catchsql_test 13.1 {",
          "769:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "772: #-------------------------------------------------------------------------",
          "773: reset_db",
          "",
          "[Removed Lines]",
          "770: } {1 {vtable constructor failed: t1}}",
          "",
          "[Added Lines]",
          "770: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959: do_catchsql_test 15.1 {",
          "960:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "963: #---------------------------------------------------------------------------",
          "964: #",
          "",
          "[Removed Lines]",
          "961: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "961: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3903: | end crash-fed6e90021ba5d.db",
          "3904: }]} {}",
          "3907:   CREATE VIRTUAL TABLE t2 USING fts5vocab('t1','row');",
          "3908:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3909:   CREATE VIRTUAL TABLE t4 USING fts5vocab('t1','instance');",
          "3912: do_catchsql_test 33.2 {",
          "3913:   SELECT * FROM t2;",
          "3916: do_catchsql_test 33.3 {",
          "3917:   SELECT * FROM t2, t3, t4 WHERE t2.term=t3.term AND t3.term=t4.term;",
          "3920: #-------------------------------------------------------------------------",
          "3921: reset_db",
          "",
          "[Removed Lines]",
          "3906: do_execsql_test 33.1 {",
          "3910: }",
          "3914: } {1 {database disk image is malformed}}",
          "3918: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "3906: do_catchsql_test 33.1 {",
          "3910: } {/*malformed database schema*/}",
          "3914: } {/*malformed database schema*/}",
          "3918: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4638: do_catchsql_test 37.1 {",
          "4639:   SELECT * FROM t3;",
          "4642: #-------------------------------------------------------------------------",
          "4643: reset_db",
          "4645:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4646:   INSERT INTO t1 VALUES('a', 'b');",
          "4647:   SELECT quote(block) FROM t1_data WHERE rowid=10;",
          "4648: } {X'000000000101010001010101'}",
          "4651:   UPDATE t1_data SET block = X'FFFFFFFF0101010001010101' WHERE rowid = 10;",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "",
          "[Removed Lines]",
          "4640: } {1 {database disk image is malformed}}",
          "4644: do_execsql_test 37.0 {",
          "4650: do_execsql_test 37.1 {",
          "",
          "[Added Lines]",
          "4640: } {/*malformed database schema*/}",
          "4644: do_execsql_test 37a.0 {",
          "4650: do_execsql_test 37a.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4895: do_catchsql_test 38.1 {",
          "4896:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4899: #-------------------------------------------------------------------------",
          "4900: reset_db",
          "",
          "[Removed Lines]",
          "4897: } {0 {}}",
          "",
          "[Added Lines]",
          "4897: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5326: | end crash2.txt.db",
          "5327: }]} {}",
          "5330:   BEGIN;",
          "5331:   INSERT INTO t1(b) VALUES(X'819192e578de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bf');",
          "5332:   INSERT INTO t1(b) VALUES(X'c8ae0d0e7c3175946e62ba2b449511d4eb504079984a20f77969f62206c9f3d7ea25358ab705e6978627290b6d48db9032f815a06a79a4f4b809841a0942eed12954ed166f666111812a508abc3bec87958846edaec0a6fe14564bc0a4b78f1c35ebcacca6bae29cc37ae9b59d8a2d7593af1e47dda0ece2268a98d20febafad037964f139851f9a57f48b3706b01721769071991412044cd6006f1d72eb6eb4aa5ad77e378176db8c15575fbeee47165e38a7c6c5a557ac2dfe11813976eaf6741cf593a9e457053a3c34cddfbe605a6e25419f993de8374fafcd3636509d8416a51dc7bcc14cfca322ae343078f47e23522431c17d0da0c033');",
          "5333:   INSERT INTO t1(b) VALUES(X'dc29a94e873a45a4243fce9b912aaefbadf1d0423e0345793874b356eeb500b92fb05284c1601fe9bad3143f72162f10242cec27c44ebf764c8fc9fb0824e32c4161472a4f914f579e0e8274f08ca1a02e59b9d8eec1f31061f9ccb9ed97a6f06534e991f7992c761489e6a7724f6e9c2b581e77487ded3a986d53c4419bbd3e9747cee300e670dd7294874c77e2ed48da68eaa6c3ec954a09ac410493d98e34d6686e54fbbe80696705f10e040c66093efb40746b33600685c94c664c7942835a9e954866121d5dcfb2cb12e92521ea3df175ee17072502dad9b9c1565f801b2179799011eb7418bfa00323e3157589e648ff7378be233c79b7');",
          "5336: do_catchsql_test 40.2 {",
          "5337:   INSERT INTO t1(a,b) VALUES(1,11),(2,22),(3, true ),(4,44);",
          "5340: #-------------------------------------------------------------------------",
          "5341: reset_db",
          "",
          "[Removed Lines]",
          "5329: do_execsql_test 40.1 {",
          "5334: }",
          "5338: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5329: do_catchsql_test 40.1 {",
          "5334: } {/*malformed database schema*/}",
          "5338: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5790: do_catchsql_test 43.1 {",
          "5791:   INSERT INTO t1(t1) VALUES('optimize');",
          "5794: #-------------------------------------------------------------------------",
          "5795: reset_db",
          "",
          "[Removed Lines]",
          "5792: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5792: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6047:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6048:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6049:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6052: #--------------------------------------------------------------------------",
          "6053: reset_db",
          "",
          "[Removed Lines]",
          "6050: } {0 {}}",
          "",
          "[Added Lines]",
          "6050: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6266: do_catchsql_test 46.1 {",
          "6267:   SELECT snippet(t1,'[','', '--',-1,10) FROM t1('*');",
          "6270: #--------------------------------------------------------------------------",
          "6271: reset_db",
          "",
          "[Removed Lines]",
          "6268: } {0 {{}}}",
          "",
          "[Added Lines]",
          "6268: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6419: do_catchsql_test 47.1 {",
          "6420:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6423: do_catchsql_test 47.2 {",
          "6424:   SELECT count(*) FROM (",
          "",
          "[Removed Lines]",
          "6421: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "6421: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6426:       highlight(t1, 2, '[', ']') FROM t1('g h')",
          "6427:       WHERE rank MATCH 'bm25(1.0, 1.0)' ORDER BY rank",
          "6428:   )",
          "6431: #--------------------------------------------------------------------------",
          "6432: reset_db",
          "",
          "[Removed Lines]",
          "6429: } {0 3}",
          "",
          "[Added Lines]",
          "6429: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7131: do_catchsql_test 52.1 {",
          "7132:   SELECT fts5_decode(id, block) FROM t1_data;",
          "7135: #-------------------------------------------------------------------------",
          "7136: reset_db",
          "",
          "[Removed Lines]",
          "7133: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7133: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7346: do_catchsql_test 53.1 {",
          "7347:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x<>1 FROM c WHERE x<10)",
          "7348:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7351: #-------------------------------------------------------------------------",
          "7352: reset_db",
          "",
          "[Removed Lines]",
          "7349: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7349: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7563: do_catchsql_test 54.1 {",
          "7564:   SELECT rowid==-1 FROM t1('t*');",
          "7567: #-------------------------------------------------------------------------",
          "7568: reset_db",
          "",
          "[Removed Lines]",
          "7565: } {0 {0 0 0}}",
          "",
          "[Added Lines]",
          "7565: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7777: | end crash-b366b5ac0d3887.db",
          "7778: }]} {}",
          "7781:   SAVEPOINT one;",
          "7782:   DELETE FROM t1 WHERE a MATCH 'ts';",
          "7785: do_execsql_test 55.2 {",
          "7786:   ROLLBACK TO one;",
          "",
          "[Removed Lines]",
          "7780: do_execsql_test 55.1 {",
          "7783: }",
          "",
          "[Added Lines]",
          "7780: do_catchsql_test 55.1 {",
          "7783: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8013:     set res \"1 {database disk image is malformed}\"",
          "8014:   }",
          "8015:   set res",
          "8018: #-------------------------------------------------------------------------",
          "8019: reset_db",
          "",
          "[Removed Lines]",
          "8016: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8016: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8132: do_catchsql_test 57.1 {",
          "8133:   INSERT INTO t1(t1) VALUES('optimize')",
          "8136: #-------------------------------------------------------------------------",
          "8137: reset_db",
          "",
          "[Removed Lines]",
          "8134: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8134: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8339: | end crash-5a5acd0ab42d31.db",
          "8340: }]} {}",
          "8343:   SELECT * FROM t1('t*');",
          "8346: #-------------------------------------------------------------------------",
          "8347: do_test 59.0 {",
          "",
          "[Removed Lines]",
          "8342: do_execsql_test 58.1 {",
          "8344: } {{} {} {} {} {} {}}",
          "",
          "[Added Lines]",
          "8342: do_catchsql_test 58.1 {",
          "8344: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8948: | end crash-e5fa281edabddf.db",
          "8949: }]} {}",
          "8952:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1'(),'col' );",
          "8955: do_catchsql_test 61.2 {",
          "8956:   SELECT * FROM t3 ORDER BY rowid;",
          "8959: breakpoint",
          "8960: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "8951: do_execsql_test 61.1 {",
          "8953: }",
          "8957: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8951: do_catchsql_test 61.1 {",
          "8953: } {/*malformed database schema*/}",
          "8957: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "9159: do_catchsql_test 62.1 {",
          "9160:   WITH c(x) AS (VALUES(false) UNION ALL SELECT x+1 FROM c WHERE x<72)",
          "9161:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "9164: #---------------------------------------------------------------------------",
          "9165: do_test 63.0 {",
          "",
          "[Removed Lines]",
          "9162: } {0 {}}",
          "",
          "[Added Lines]",
          "9162: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9358: do_catchsql_test 63.1 {",
          "9359:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9362: do_catchsql_test 63.2 {",
          "9363:   INSERT INTO t1(t1) VALUES('optimize');",
          "9367: do_catchsql_test 63.3 {",
          "9368:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9371: sqlite3_fts5_may_be_corrupt 0",
          "9372: finish_test",
          "",
          "[Removed Lines]",
          "9360: } {1 {database disk image is malformed}}",
          "9364: } {0 {}}",
          "9366: breakpoint",
          "9369: } {0 {}}",
          "",
          "[Added Lines]",
          "9360: } {/*malformed database schema*/}",
          "9364: } {/*malformed database schema*/}",
          "9368: } {/*malformed database schema*/}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test": [
          "File: ext/fts5/test/fts5rank.test -> ext/fts5/test/fts5rank.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   SELECT rowid FROM ttt('word') WHERE rowid BETWEEN 30 AND 40 ORDER BY rank;",
          "163: } {30 31 32 33 34 35 36 37 38 39 40}",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: reset_db",
          "167: do_execsql_test 6.0 {",
          "168:   CREATE VIRTUAL TABLE \"My.Table\" USING fts5(Text);",
          "170:   INSERT INTO \"My.Table\" VALUES ('hello this is a test');",
          "171:   INSERT INTO \"My.Table\" VALUES ('of trying to order by');",
          "172:   INSERT INTO \"My.Table\" VALUES ('rank on an fts5 table');",
          "173:   INSERT INTO \"My.Table\" VALUES ('that have periods in');",
          "174:   INSERT INTO \"My.Table\" VALUES ('the table names.');",
          "175:   INSERT INTO \"My.Table\" VALUES ('table table table');",
          "176: }",
          "177: do_execsql_test 6.1 {",
          "178:   SELECT * FROM \"My.Table\" WHERE Text MATCH 'table' ORDER BY rank;",
          "179: } {",
          "180:   {table table table} {the table names.} {rank on an fts5 table}",
          "181: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75aec4fc886c04fe098828cc03bc72c197cbf40f0a1890fe5bbb98d4fd5c3c7e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
      "candidate_info": {
        "commit_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b65e801e5f2123803ae9604c5cd53df7060b9995",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db\n\nFossilOrigin-Name: 049e9926202317f58c54b6351ff120fb69bf821f409909b1a1c5e335c0396707",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21a3b3191eb0869448601b07123639eae1789f05",
      "candidate_info": {
        "commit_hash": "21a3b3191eb0869448601b07123639eae1789f05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21a3b3191eb0869448601b07123639eae1789f05",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support Tcl libraries with a suffix.\n\nFossilOrigin-Name: 8d0153996a3685a9b109a01fea0cba76e4296b010e96fc0db43fa6fde54d1965",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "864: TCLVERSION = 86",
          "865: !ENDIF",
          "867: !IFNDEF TCLDIR",
          "868: TCLDIR = $(TOP)\\compat\\tcl",
          "869: !ENDIF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: !IFNDEF TCLSUFFIX",
          "868: TCLSUFFIX =",
          "869: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "877: !ENDIF",
          "879: !IFNDEF LIBTCL",
          "881: !ENDIF",
          "883: !IFNDEF LIBTCLSTUB",
          "885: !ENDIF",
          "887: !IFNDEF LIBTCLPATH",
          "",
          "[Removed Lines]",
          "880: LIBTCL = tcl$(TCLVERSION).lib",
          "884: LIBTCLSTUB = tclstub$(TCLVERSION).lib",
          "",
          "[Added Lines]",
          "884: LIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib",
          "888: LIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9f1972e10b0cdb5e351a776a64c60acf404dcfbe2a8a28c0a273bbe851e677f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
      "candidate_info": {
        "commit_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Add things to this branch that will be required to support the EXCLUDE clause.\n\nFossilOrigin-Name: 7d66cd2013206ebad50c7cdb7dab9211fa8b47f5cb7067dcb314b3e0180875f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3564:   u8 eExclude;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3578:   int regFirst;",
          "3579: };",
          "3581: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regStartRowid;",
          "3582:   int regEndRowid;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3613:   pCx->isTable = pOrig->isTable;",
          "3614:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3615:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3616:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   pCx->isOrdered = pOrig->isOrdered;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   }",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: struct NthValueCtx {",
          "207:   i64 nStep;",
          "208:   sqlite3_value *pValue;",
          "209: };",
          "210: static void nth_valueStepFunc(",
          "211:   sqlite3_context *pCtx,",
          "212:   int nArg,",
          "213:   sqlite3_value **apArg",
          "214: ){",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "229:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "230:   if( p && p->pValue ){",
          "231:     sqlite3_result_value(pCtx, p->pValue);",
          "232:   }",
          "233: }",
          "234: static void nth_valueFinalizeFunc(sqlite3_context *pCtx){",
          "235:   struct NthValueCtx *p;",
          "236:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "237:   if( p && p->pValue ){",
          "238:     sqlite3_result_value(pCtx, p->pValue);",
          "239:     sqlite3_value_free(p->pValue);",
          "240:     p->pValue = 0;",
          "241:   }",
          "242: }",
          "243: #define nth_valueInvFunc noopStepFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     WINDOWFUNCX(row_number, 0, 0),",
          "518:     WINDOWFUNCX(dense_rank, 0, 0),",
          "519:     WINDOWFUNCX(rank, 0, 0),",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "526:     WINDOWFUNCALL(last_value, 1, 0),",
          "528:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "529:     WINDOWFUNCNOOP(lead, 1, 0),",
          "530:     WINDOWFUNCNOOP(lead, 2, 0),",
          "",
          "[Removed Lines]",
          "527:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "",
          "[Added Lines]",
          "568:     WINDOWFUNCALL(nth_value, 2, 0),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:           pWin->eType = aUp[i].eType;",
          "623:           pWin->eStart = aUp[i].eStart;",
          "624:           pWin->eEnd = aUp[i].eEnd;",
          "625:           if( pWin->eStart==TK_FOLLOWING ){",
          "626:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "627:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:           pWin->eExclude = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:   if( p1->eType!=p2->eType ) return 1;",
          "1103:   if( p1->eStart!=p2->eStart ) return 1;",
          "1104:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1105:   if( sqlite3ExprCompare(pParse, p1->pStart, p2->pStart, -1) ) return 1;",
          "1106:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1107:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1131:   pMWin->regFirst = ++pParse->nMem;",
          "1132:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1134:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1135:     FuncDef *p = pWin->pFunc;",
          "1136:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178:   if( pMWin->eExclude ){",
          "1179:     pMWin->regStartRowid = ++pParse->nMem;",
          "1180:     pMWin->regEndRowid = ++pParse->nMem;",
          "1181:     pMWin->csrApp = pParse->nTab++;",
          "1182:     sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "1183:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "1184:     sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->csrApp, pMWin->iEphCsr);",
          "1185:     return;",
          "1186:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1250: ){",
          "1251:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1252:   Window *pWin;",
          "1253:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1254:     int regArg;",
          "1255:     int nArg = windowArgCount(pWin);",
          "1265:     }",
          "1269:     ){",
          "1270:       int addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regArg);",
          "1271:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1257:     if( csr>=0 ){",
          "1258:       int i;",
          "1259:       for(i=0; i<nArg; i++){",
          "1260:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1261:       }",
          "1262:       regArg = reg;",
          "1263:     }else{",
          "1264:       regArg = reg + pWin->iArgCol;",
          "1267:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1268:       && pWin->eStart!=TK_UNBOUNDED",
          "",
          "[Added Lines]",
          "1307:     FuncDef *pFunc = pWin->pFunc;",
          "1310:     int i;",
          "1312:     for(i=0; i<nArg; i++){",
          "1313:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1315:     regArg = reg;",
          "1317:     if( pMWin->regStartRowid==0",
          "1318:      && (pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1319:      && (pWin->eStart!=TK_UNBOUNDED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1282:       }",
          "1283:       sqlite3VdbeJumpHere(v, addrIsNull);",
          "1284:     }else if( pWin->regApp ){",
          "1287:       );",
          "1288:       assert( bInverse==0 || bInverse==1 );",
          "1289:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1295:       int addrIf = 0;",
          "1296:       if( pWin->pFilter ){",
          "1297:         int regTmp;",
          "1298:         assert( nArg==0 || nArg==pWin->pOwner->x.pList->nExpr );",
          "1299:         assert( nArg || pWin->pOwner->x.pList==0 );",
          "1306:         addrIf = sqlite3VdbeAddOp3(v, OP_IfNot, regTmp, 0, 1);",
          "1307:         VdbeCoverage(v);",
          "1311:       }",
          "1313:         CollSeq *pColl;",
          "1314:         assert( nArg>0 );",
          "1315:         pColl = sqlite3ExprNNCollSeq(pParse, pWin->pOwner->x.pList->a[0].pExpr);",
          "",
          "[Removed Lines]",
          "1285:       assert( pWin->pFunc->zName==nth_valueName",
          "1286:            || pWin->pFunc->zName==first_valueName",
          "1290:     }else if( pWin->pFunc->zName==leadName",
          "1291:            || pWin->pFunc->zName==lagName",
          "1292:     ){",
          "1294:     }else{",
          "1300:         if( csr>0 ){",
          "1301:           regTmp = sqlite3GetTempReg(pParse);",
          "1302:           sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1303:         }else{",
          "1304:           regTmp = regArg + nArg;",
          "1305:         }",
          "1308:         if( csr>0 ){",
          "1309:           sqlite3ReleaseTempReg(pParse, regTmp);",
          "1310:         }",
          "1312:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "[Added Lines]",
          "1336:       assert( pFunc->zName==nth_valueName",
          "1337:            || pFunc->zName==first_valueName",
          "1341:     }else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1343:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1349:         regTmp = sqlite3GetTempReg(pParse);",
          "1350:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1353:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1355:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1317:       }",
          "1318:       sqlite3VdbeAddOp3(v, bInverse? OP_AggInverse : OP_AggStep,",
          "1319:                         bInverse, regArg, pWin->regAccum);",
          "1321:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1322:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1323:     }",
          "",
          "[Removed Lines]",
          "1320:       sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "",
          "[Added Lines]",
          "1363:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1325: }",
          "1334:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1335:   Window *pWin;",
          "1337:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1340:     ){",
          "1341:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1342:       sqlite3VdbeAddOp1(v, OP_Last, pWin->csrApp);",
          "1343:       VdbeCoverage(v);",
          "1344:       sqlite3VdbeAddOp3(v, OP_Column, pWin->csrApp, 0, pWin->regResult);",
          "1345:       sqlite3VdbeJumpHere(v, sqlite3VdbeCurrentAddr(v)-2);",
          "1347:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1348:       }",
          "1349:     }else if( pWin->regApp ){",
          "1350:     }else{",
          "1353:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1354:         sqlite3VdbeAddOp2(v, OP_Copy, pWin->regAccum, pWin->regResult);",
          "1355:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1356:       }else{",
          "1359:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1360:       }",
          "1361:     }",
          "",
          "[Removed Lines]",
          "1333: static void windowAggFinal(Parse *pParse, Window *pMWin, int bFinal){",
          "1338:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1339:      && pWin->eStart!=TK_UNBOUNDED",
          "1346:       if( bFinal ){",
          "1351:       if( bFinal ){",
          "1352:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, windowArgCount(pWin));",
          "1357:         sqlite3VdbeAddOp3(v, OP_AggValue, pWin->regAccum, windowArgCount(pWin),",
          "1358:                              pWin->regResult);",
          "",
          "[Added Lines]",
          "1376: static void windowAggFinal(Parse *pParse, Window *pMWin, int regArg, int bFin){",
          "1380:   if( pMWin->regStartRowid ){",
          "1381:     int addrNext;",
          "1382:     int regRowid = sqlite3GetTempReg(pParse);",
          "1383:     assert( pMWin->csrApp );",
          "1384:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1385:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1386:     }",
          "1387:     sqlite3VdbeAddOp3(v, OP_SeekGE, pMWin->csrApp, 0, pMWin->regStartRowid);",
          "1388:     addrNext = sqlite3VdbeCurrentAddr(v);",
          "1389:     sqlite3VdbeAddOp2(v, OP_Rowid, pMWin->csrApp, regRowid);",
          "1390:     sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, 0, regRowid);",
          "1391:     windowAggStep(pParse, pMWin, pMWin->csrApp, 0, regArg);",
          "1392:     sqlite3VdbeAddOp2(v, OP_Next, pMWin->csrApp, addrNext);",
          "1393:     sqlite3VdbeJumpHere(v, addrNext-1);",
          "1394:     sqlite3VdbeJumpHere(v, addrNext+1);",
          "1395:     sqlite3ReleaseTempReg(pParse, regRowid);",
          "1396:   }",
          "1399:     if( pMWin->regStartRowid==0",
          "1400:      && (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1401:      && (pWin->eStart!=TK_UNBOUNDED)",
          "1408:       if( bFin ){",
          "1412:       assert( pMWin->regStartRowid==0 );",
          "1414:       int nArg = windowArgCount(pWin);",
          "1415:       if( bFin ){",
          "1416:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, nArg);",
          "1421:         sqlite3VdbeAddOp3(v, OP_AggValue,pWin->regAccum,nArg,pWin->regResult);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1388:     if( pFunc->zName==nth_valueName",
          "1389:      || pFunc->zName==first_valueName",
          "1390:     ){",
          "1392:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1393:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1394:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1396:       if( pFunc->zName==nth_valueName ){",
          "1398:         windowCheckValue(pParse, tmpReg, 2);",
          "1399:       }else{",
          "1400:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1401:       }",
          "1408:       sqlite3VdbeResolveLabel(v, lbl);",
          "1409:       sqlite3ReleaseTempReg(pParse, tmpReg);",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1391:       int csr = pWin->csrApp;",
          "1397:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1402:       sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1403:       sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1404:       VdbeCoverageNeverNull(v);",
          "1405:       sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1406:       VdbeCoverageNeverTaken(v);",
          "1407:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "",
          "[Added Lines]",
          "1459:         sqlite3VdbeAddOp3(v, OP_Column,pMWin->iEphCsr,pWin->iArgCol+1,tmpReg);",
          "1464:       if( pWin->eExclude==0 ){",
          "1465:         int csr = pWin->csrApp;",
          "1466:         sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1467:         sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1468:         VdbeCoverageNeverNull(v);",
          "1469:         sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1470:         VdbeCoverageNeverTaken(v);",
          "1471:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "1472:       }else{",
          "1473:         int regRowid = sqlite3GetTempReg(pParse);",
          "1474:         int csr = pMWin->csrApp;",
          "1475:         int addrNext;",
          "1476:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+1, 1);",
          "1477:         sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lbl, pMWin->regStartRowid);",
          "1478:         addrNext = sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1479:         sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lbl, regRowid);",
          "1480:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+3, 1);",
          "1481:         sqlite3VdbeAddOp3(v, OP_Column, csr, pMWin->iArgCol, pWin->regResult);",
          "1482:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1483:         sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1484:         sqlite3ReleaseTempReg(pParse, regRowid);",
          "1485:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1457:     FuncDef *pFunc = pWin->pFunc;",
          "1458:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1459:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1471:     }",
          "1472:   }",
          "1473:   regArg = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "1460:     if( pFunc->zName==nth_valueName",
          "1461:      || pFunc->zName==first_valueName",
          "1462:     ){",
          "1463:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1464:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1465:     }",
          "1467:     if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1468:       assert( pWin->eStart!=TK_UNBOUNDED );",
          "1469:       sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1470:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Added Lines]",
          "1538:     if( pWin->eExclude==0 ){",
          "1539:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1540:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1541:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1542:       }",
          "1544:       if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1545:         assert( pWin->eStart!=TK_UNBOUNDED );",
          "1546:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1547:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1548:       }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1482: static int windowCacheFrame(Window *pMWin){",
          "1483:   Window *pWin;",
          "1484:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1485:     FuncDef *pFunc = pWin->pFunc;",
          "1486:     if( (pFunc->zName==nth_valueName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:   if( pMWin->regStartRowid ) return 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1684:   }",
          "1686:   if( op==WINDOW_RETURN_ROW ){",
          "1688:   }",
          "1689:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "1690:   switch( op ){",
          "",
          "[Removed Lines]",
          "1687:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "1766:     windowAggFinal(pParse, pMWin, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1697:     case WINDOW_AGGINVERSE:",
          "1698:       csr = p->start.csr;",
          "1699:       reg = p->start.reg;",
          "1701:       break;",
          "1703:     case WINDOW_AGGSTEP:",
          "1704:       csr = p->end.csr;",
          "1705:       reg = p->end.reg;",
          "1707:       break;",
          "1708:   }",
          "",
          "[Removed Lines]",
          "1700:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1706:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "[Added Lines]",
          "1779:       if( pMWin->regStartRowid ){",
          "1780:         assert( pMWin->regEndRowid );",
          "1781:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "1782:       }else{",
          "1783:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "1784:       }",
          "1790:       if( pMWin->regStartRowid ){",
          "1791:         assert( pMWin->regEndRowid );",
          "1792:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "1793:       }else{",
          "1794:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "1795:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2279:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "2280:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2281:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2283:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2284:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2285:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "[Removed Lines]",
          "2282:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "2371:     windowAggFinal(pParse, pMWin, s.regArg, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2416:   if( pMWin->pPartition ){",
          "2417:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2418:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2419:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2506:     if( pMWin->regStartRowid ){",
          "2507:       sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "2508:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "2509:     }",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: ==========",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "94: execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "93: foreach {tn ex} {",
          "94:   1  { EXCLUDE NO OTHERS }",
          "95:   2  { EXCLUDE CURRENT ROW }",
          "96:   3  { EXCLUDE GROUP }",
          "97:   4  { EXCLUDE TIES }",
          "98: } {",
          "99:   execsql_test 2.$tn.1 \"",
          "100:     SELECT row_number() OVER win",
          "101:     FROM t3",
          "102:     WINDOW win AS (",
          "103:       ORDER BY c, b, a",
          "104:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex",
          "105:     )",
          "106:   \"",
          "108:   execsql_test 2.$tn.2 \"",
          "109:     SELECT nth_value(c, 14) OVER win",
          "110:     FROM t3",
          "111:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex)",
          "112:   \"",
          "113: }",
          "117: execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "116: } {",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "120: }",
          "",
          "[Removed Lines]",
          "117:   execsql_test 2.$tn \"",
          "",
          "[Added Lines]",
          "140:   execsql_test 3.$tn \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: #==========================================================================",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "438: do_execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "436: do_execsql_test 2.1.1 {",
          "437:   SELECT row_number() OVER win",
          "438:     FROM t3",
          "439:     WINDOW win AS (",
          "440:       ORDER BY c, b, a",
          "441:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS",
          "442:     )",
          "443: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "445: do_execsql_test 2.1.2 {",
          "446:   SELECT nth_value(c, 14) OVER win",
          "447:     FROM t3",
          "448:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS )",
          "449: } {938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "451: do_execsql_test 2.2.1 {",
          "452:   SELECT row_number() OVER win",
          "453:     FROM t3",
          "454:     WINDOW win AS (",
          "455:       ORDER BY c, b, a",
          "456:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW",
          "457:     )",
          "458: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "460: do_execsql_test 2.2.2 {",
          "461:   SELECT nth_value(c, 14) OVER win",
          "462:     FROM t3",
          "463:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW )",
          "464: } {660   660   660   660   660   660   660   660   660   660   660   660   660   660   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "466: do_execsql_test 2.3.1 {",
          "467:   SELECT row_number() OVER win",
          "468:     FROM t3",
          "469:     WINDOW win AS (",
          "470:       ORDER BY c, b, a",
          "471:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP",
          "472:     )",
          "473: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "475: do_execsql_test 2.3.2 {",
          "476:   SELECT nth_value(c, 14) OVER win",
          "477:     FROM t3",
          "478:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP )",
          "479: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "481: do_execsql_test 2.4.1 {",
          "482:   SELECT row_number() OVER win",
          "483:     FROM t3",
          "484:     WINDOW win AS (",
          "485:       ORDER BY c, b, a",
          "486:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES",
          "487:     )",
          "488: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "490: do_execsql_test 2.4.2 {",
          "491:   SELECT nth_value(c, 14) OVER win",
          "492:     FROM t3",
          "493:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES )",
          "494: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "498: do_execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "[Removed Lines]",
          "446: do_execsql_test 2.1 {",
          "450: do_execsql_test 2.2 {",
          "454: do_execsql_test 2.3 {",
          "458: do_execsql_test 2.4 {",
          "462: do_execsql_test 2.5 {",
          "466: do_execsql_test 2.6 {",
          "470: do_execsql_test 2.7 {",
          "474: do_execsql_test 2.8 {",
          "478: do_execsql_test 2.9 {",
          "482: do_execsql_test 2.10 {",
          "486: do_execsql_test 2.11 {",
          "490: do_execsql_test 2.12 {",
          "",
          "[Added Lines]",
          "506: do_execsql_test 3.1 {",
          "510: do_execsql_test 3.2 {",
          "514: do_execsql_test 3.3 {",
          "518: do_execsql_test 3.4 {",
          "522: do_execsql_test 3.5 {",
          "526: do_execsql_test 3.6 {",
          "530: do_execsql_test 3.7 {",
          "534: do_execsql_test 3.8 {",
          "538: do_execsql_test 3.9 {",
          "542: do_execsql_test 3.10 {",
          "546: do_execsql_test 3.11 {",
          "550: do_execsql_test 3.12 {",
          "",
          "---------------"
        ]
      }
    }
  ]
}