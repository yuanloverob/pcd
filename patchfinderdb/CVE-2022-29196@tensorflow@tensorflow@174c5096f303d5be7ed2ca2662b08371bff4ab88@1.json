{
  "cve_id": "CVE-2022-29196",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.Conv3DBackpropFilterV2` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate that the `filter_sizes` argument is a vector. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "174c5096f303d5be7ed2ca2662b08371bff4ab88",
  "patch_info": {
    "commit_hash": "174c5096f303d5be7ed2ca2662b08371bff4ab88",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/174c5096f303d5be7ed2ca2662b08371bff4ab88",
    "files": [
      "tensorflow/core/kernels/conv_grad_ops_3d.cc",
      "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
    ],
    "message": "Fix failed check in Conv3DBackpropFilterV2.\n\nPassing in a rank-0 `filter_size` causes a check fail and crash,\ncoming from a `filter_size.vec<>()` call.  Here we check the size\nfirst.\n\nPiperOrigin-RevId: 445517122",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc",
      "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
      "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "741:     TensorShape filter_shape;",
      "742:     if (takes_shape_) {",
      "743:       const Tensor& filter_sizes = context->input(1);",
      "744:       OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(",
      "745:                                   filter_sizes.vec<int32>(), &filter_shape));",
      "746:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "744:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
      "745:                   errors::InvalidArgument(",
      "746:                       \"filter_sizes shape must be rank 1 but is rank \",",
      "747:                       filter_sizes.shape().dims()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "875:     TensorShape filter_shape;",
      "876:     if (takes_shape_) {",
      "877:       const Tensor& filter_sizes = context->input(1);",
      "878:       OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(",
      "879:                                   filter_sizes.vec<int32>(), &filter_shape));",
      "880:     } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "882:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
      "883:                   errors::InvalidArgument(",
      "884:                       \"filter_sizes shape must be rank 1 but is rank \",",
      "885:                       filter_sizes.shape().dims()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1638:     TensorShape filter_shape;",
      "1639:     if (takes_shape_) {",
      "1640:       const Tensor& filter_sizes = context->input(1);",
      "1641:       OP_REQUIRES_OK(context, tensor::MakeShape(filter_sizes, &filter_shape));",
      "1642:     } else {",
      "1643:       filter_shape = context->input(1).shape();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1649:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
      "1650:                   errors::InvalidArgument(",
      "1651:                       \"filter_sizes shape must be rank 1 but is rank \",",
      "1652:                       filter_sizes.shape().dims()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py -> tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.python.framework import constant_op",
      "20: from tensorflow.python.framework import dtypes",
      "21: from tensorflow.python.framework import test_util",
      "22: from tensorflow.python.ops import array_ops",
      "23: from tensorflow.python.ops import gradient_checker",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:           err_tolerance = 1e-3",
      "59:           self.assertLess(err, err_tolerance)",
      "62: if __name__ == \"__main__\":",
      "63:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:   def testBadFilterShape(self):",
      "63:     strides = [1, 1, 1, 1, 1]",
      "64:     padding = \"VALID\"",
      "65:     tin = constant_op.constant(",
      "66:         .5053710941, shape=[2, 2, 2, 2, 1], dtype=dtypes.float32)",
      "67:     filter_sizes = constant_op.constant(0, shape=[], dtype=dtypes.int32)",
      "68:     out_backprop = constant_op.constant(",
      "69:         .5053710941, shape=[2, 2, 2, 2, 1], dtype=dtypes.float32)",
      "71:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "72:                                 \"must be rank 1\"):",
      "73:       nn_ops.conv3d_backprop_filter_v2(",
      "74:           input=tin,",
      "75:           filter_sizes=filter_sizes,",
      "76:           out_backprop=out_backprop,",
      "77:           strides=strides,",
      "78:           padding=padding)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91964070f95fa6cd7cf9e89b0c2ffdd0962154f5",
      "candidate_info": {
        "commit_hash": "91964070f95fa6cd7cf9e89b0c2ffdd0962154f5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/91964070f95fa6cd7cf9e89b0c2ffdd0962154f5",
        "files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
        ],
        "message": "Fix failed check in Conv3DBackpropFilterV2.\n\nPassing in a rank-0 `filter_size` causes a check fail and crash,\ncoming from a `filter_size.vec<>()` call.  Here we check the size\nfirst.\n\nPiperOrigin-RevId: 445517122",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_ops_3d.cc||tensorflow/core/kernels/conv_grad_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_grad_ops_3d.cc -> tensorflow/core/kernels/conv_grad_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:     TensorShape filter_shape;",
          "742:     if (takes_shape_) {",
          "743:       const Tensor& filter_sizes = context->input(1);",
          "744:       OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(",
          "745:                                   filter_sizes.vec<int32>(), &filter_shape));",
          "746:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
          "745:                   errors::InvalidArgument(",
          "746:                       \"filter_sizes shape must be rank 1 but is rank \",",
          "747:                       filter_sizes.shape().dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "875:     TensorShape filter_shape;",
          "876:     if (takes_shape_) {",
          "877:       const Tensor& filter_sizes = context->input(1);",
          "878:       OP_REQUIRES_OK(context, TensorShapeUtils::MakeShape(",
          "879:                                   filter_sizes.vec<int32>(), &filter_shape));",
          "880:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
          "883:                   errors::InvalidArgument(",
          "884:                       \"filter_sizes shape must be rank 1 but is rank \",",
          "885:                       filter_sizes.shape().dims()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1638:     TensorShape filter_shape;",
          "1639:     if (takes_shape_) {",
          "1640:       const Tensor& filter_sizes = context->input(1);",
          "1641:       OP_REQUIRES_OK(context, tensor::MakeShape(filter_sizes, &filter_shape));",
          "1642:     } else {",
          "1643:       filter_shape = context->input(1).shape();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:       OP_REQUIRES(context, TensorShapeUtils::IsVector(filter_sizes.shape()),",
          "1650:                   errors::InvalidArgument(",
          "1651:                       \"filter_sizes shape must be rank 1 but is rank \",",
          "1652:                       filter_sizes.shape().dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py||tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py -> tensorflow/python/kernel_tests/nn_ops/conv3d_backprop_filter_v2_grad_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import gradient_checker",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:           err_tolerance = 1e-3",
          "59:           self.assertLess(err, err_tolerance)",
          "62: if __name__ == \"__main__\":",
          "63:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   def testBadFilterShape(self):",
          "63:     strides = [1, 1, 1, 1, 1]",
          "64:     padding = \"VALID\"",
          "65:     tin = constant_op.constant(",
          "66:         .5053710941, shape=[2, 2, 2, 2, 1], dtype=dtypes.float32)",
          "67:     filter_sizes = constant_op.constant(0, shape=[], dtype=dtypes.int32)",
          "68:     out_backprop = constant_op.constant(",
          "69:         .5053710941, shape=[2, 2, 2, 2, 1], dtype=dtypes.float32)",
          "71:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "72:                                 \"must be rank 1\"):",
          "73:       nn_ops.conv3d_backprop_filter_v2(",
          "74:           input=tin,",
          "75:           filter_sizes=filter_sizes,",
          "76:           out_backprop=out_backprop,",
          "77:           strides=strides,",
          "78:           padding=padding)",
          "",
          "---------------"
        ]
      }
    }
  ]
}