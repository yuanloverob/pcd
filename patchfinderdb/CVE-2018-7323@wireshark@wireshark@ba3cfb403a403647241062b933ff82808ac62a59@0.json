{
  "cve_id": "CVE-2018-7323",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.4 and 2.2.0 to 2.2.12, epan/dissectors/packet-wccp.c had a large loop that was addressed by ensuring that a calculated length was monotonically increasing.",
  "repo": "wireshark/wireshark",
  "patch_hash": "ba3cfb403a403647241062b933ff82808ac62a59",
  "patch_info": {
    "commit_hash": "ba3cfb403a403647241062b933ff82808ac62a59",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/ba3cfb403a403647241062b933ff82808ac62a59",
    "files": [
      "epan/dissectors/packet-wccp.c"
    ],
    "message": "WCCP: Prevent very long loop in dissect_wccp2_alternate_mask_value_set_element\n\nSanity check the total_length to make sure it doesn't go negative.\n\nBug: 14412\nChange-Id: I87e38f6c792fa81184e4c412d6433fbbf2060f28\nReviewed-on: https://code.wireshark.org/review/25744\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
      "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2050:   for (i=0; i < number_of_elements; i++) {",
      "2051:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo, value_tree, addr_table);",
      "2052:     total_length += length - new_length;",
      "2053:     NOTE_EATEN_LENGTH(new_length);",
      "2054:   }",
      "2055:   proto_item_set_len(header, total_length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2053:     if (total_length < 0)",
      "2054:         return length;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78af50fc254744e697dd0cdb2b310a4643e6ccba",
      "candidate_info": {
        "commit_hash": "78af50fc254744e697dd0cdb2b310a4643e6ccba",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/78af50fc254744e697dd0cdb2b310a4643e6ccba",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP: Prevent very long loop in dissect_wccp2_alternate_mask_value_set_element\n\nSanity check the total_length to make sure it doesn't go negative.\n\nBug: 14412\nChange-Id: I87e38f6c792fa81184e4c412d6433fbbf2060f28\nReviewed-on: https://code.wireshark.org/review/25744\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit ba3cfb403a403647241062b933ff82808ac62a59)\nReviewed-on: https://code.wireshark.org/review/25752",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2057:   for (i=0; i < number_of_elements; i++) {",
          "2058:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo, value_tree, addr_table);",
          "2059:     total_length += length - new_length;",
          "2060:     NOTE_EATEN_LENGTH(new_length);",
          "2061:   }",
          "2062:   proto_item_set_len(header, total_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2060:     if (total_length < 0)",
          "2061:         return length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f9199ea8cff56c6704e9828c3d80360b27c4565",
      "candidate_info": {
        "commit_hash": "4f9199ea8cff56c6704e9828c3d80360b27c4565",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4f9199ea8cff56c6704e9828c3d80360b27c4565",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP: Prevent very long loop in dissect_wccp2_alternate_mask_value_set_element\n\nSanity check the total_length to make sure it doesn't go negative.\n\nBug: 14412\nChange-Id: I87e38f6c792fa81184e4c412d6433fbbf2060f28\nReviewed-on: https://code.wireshark.org/review/25744\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit ba3cfb403a403647241062b933ff82808ac62a59)\nReviewed-on: https://code.wireshark.org/review/25753",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2057:   for (i=0; i < number_of_elements; i++) {",
          "2058:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo, value_tree, addr_table);",
          "2059:     total_length += length - new_length;",
          "2060:     NOTE_EATEN_LENGTH(new_length);",
          "2061:   }",
          "2062:   proto_item_set_len(header, total_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2060:     if (total_length < 0)",
          "2061:         return length;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d45b69b590cabc5127282d1ade3bca1598e5f5c",
      "candidate_info": {
        "commit_hash": "5d45b69b590cabc5127282d1ade3bca1598e5f5c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5d45b69b590cabc5127282d1ade3bca1598e5f5c",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP: Make sure our offset increases.\n\nMake sure we advance our offset in various places. Clarify a macro name.\n\nBug: 14412\nChange-Id: I9b2af4bb57d039febe16f0c6d74ebb12fa34693c\nReviewed-on: https://code.wireshark.org/review/25965\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "770: #define EAT_AND_CHECK(x,next) {length -= x; offset += x; if (length < next) return length - next;}",
          "",
          "[Removed Lines]",
          "772: #define NOTE_EATEN_LENGTH(new_length) {if (new_length<0) return new_length;  offset += length-new_length; length = new_length; }",
          "",
          "[Added Lines]",
          "772: #define CHECK_LENGTH_ADVANCE_OFFSET(new_length) { \\",
          "773:   int old_offset = offset; \\",
          "774:   if (new_length<0) return new_length; \\",
          "775:   offset += length-new_length; \\",
          "776:   if (old_offset <= offset) return old_offset - offset; \\",
          "777:   length = new_length; \\",
          "778:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1102:   EAT(4);",
          "1104:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "1107:   n_routers = tvb_get_ntohl(tvb, offset);",
          "1108:   proto_tree_add_uint(info_tree, hf_router_router_num, tvb, offset, 4, n_routers);",
          "",
          "[Removed Lines]",
          "1105:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1111:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1245:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "1248:   n_routers = tvb_get_ntohl(tvb, offset);",
          "1249:   proto_tree_add_uint(info_tree, hf_assignment_info_router_num, tvb, offset, 4, n_routers);",
          "",
          "[Removed Lines]",
          "1246:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1252:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1262:   }",
          "1264:   new_length = dissect_wccp2_hash_buckets_assignment_element(tvb, offset, length, pinfo, info_tree, addr_table);",
          "1266:   return length;",
          "1267: }",
          "",
          "[Removed Lines]",
          "1265:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1271:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1379:   while (length >= 8) {",
          "1380:     capability_length = dissect_wccp2_capability_element(tvb,offset,length,pinfo,info_tree);",
          "1383:   }",
          "1384:   return length;",
          "1385: }",
          "",
          "[Removed Lines]",
          "1382:     NOTE_EATEN_LENGTH(capability_length);",
          "",
          "[Added Lines]",
          "1388:     CHECK_LENGTH_ADVANCE_OFFSET(capability_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1588:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, info_tree, addr_table);",
          "1592:   return length;",
          "1593: }",
          "",
          "[Removed Lines]",
          "1590:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1596:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1699:   new_length=dissect_wccp2_mask_value_set_list(tvb, offset, length, pinfo, mask_tree, addr_table);",
          "1703:   if (length < 2)",
          "1704:     return length-4;",
          "1706:   new_length =  dissect_wccp2_assignment_weight_and_status_element(tvb, offset, length, pinfo, info_tree);",
          "1709:   proto_item_set_len(mask_item, offset-start);",
          "1710:   return length;",
          "",
          "[Removed Lines]",
          "1701:   NOTE_EATEN_LENGTH(new_length);",
          "1707:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1707:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "1713:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1732:         new_length=dissect_wccp2_alternate_mask_value_set_list(tvb, offset, length, pinfo, mask_tree, addr_table);",
          "1735:       }",
          "1737:   if (length < 2)",
          "",
          "[Removed Lines]",
          "1734:         NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1740:         CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1941:       new_length=dissect_wccp2_mask_value_set_element(tvb, offset, length, i, pinfo, element_tree, addr_table);",
          "1944:     }",
          "1946:   proto_item_set_len(te, offset-start);",
          "",
          "[Removed Lines]",
          "1943:       NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "1949:       CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2000:     new_length=dissect_wccp2_alternate_mask_value_set_element(tvb, offset, length, i, pinfo, list_tree, addr_table);",
          "2003:   }",
          "2004:   return length;",
          "2005: }",
          "",
          "[Removed Lines]",
          "2002:     NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2008:     CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2025:   new_length=dissect_wccp2_mask_element(tvb,offset,length,pinfo,element_tree);",
          "2026:   total_length += length - new_length;",
          "2029:   if (length < 4)",
          "2030:     return length - 4;",
          "",
          "[Removed Lines]",
          "2027:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2033:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2035:   total_length += 4;",
          "2036:   EAT(4);",
          "2038:   for (i=0; i < number_of_elements; i++) {",
          "2039:     new_length=dissect_wccp2_web_cache_value_element(tvb, offset, length, pinfo, value_tree, addr_table);",
          "2040:     total_length += length - new_length;",
          "2044:   }",
          "2045:   proto_item_set_len(header, total_length);",
          "",
          "[Removed Lines]",
          "2041:     if (total_length < 0)",
          "2042:         return length;",
          "2043:     NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2048:     CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2265:                            ett_mv_set_element, &tl, \"Mask/Value Set Element(%d)\", idx);",
          "2267:   new_length = dissect_wccp2_mask_element(tvb,offset,length,pinfo,element_tree);",
          "2270:   if (length < 4)",
          "2271:     return length-4;",
          "",
          "[Removed Lines]",
          "2268:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2273:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2280:     {",
          "2281:       new_length=dissect_wccp2_value_element(tvb, offset, length, i, pinfo,  value_tree, addr_table);",
          "2284:     }",
          "2286:   proto_item_set_len(tl, 16+num_of_val_elements*16);",
          "",
          "[Removed Lines]",
          "2283:       NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2288:       CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2329:   }",
          "2331:   new_length=dissect_wccp2_assignment_key_element(tvb, offset, length, pinfo,  info_tree, addr_table);",
          "2334:   n_routers = tvb_get_ntohl(tvb, offset);",
          "2335:   proto_tree_add_uint(info_tree, hf_alt_assignment_info_num_routers, tvb, offset, 4, n_routers);",
          "",
          "[Removed Lines]",
          "2332:   NOTE_EATEN_LENGTH(new_length);",
          "",
          "[Added Lines]",
          "2337:   CHECK_LENGTH_ADVANCE_OFFSET(new_length);",
          "",
          "---------------"
        ]
      }
    }
  ]
}