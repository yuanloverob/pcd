{
  "cve_id": "CVE-2022-26530",
  "cve_desc": "swaylock before 1.6 allows attackers to trigger a crash and achieve unlocked access to a Wayland compositor.",
  "repo": "swaywm/swaylock",
  "patch_hash": "1d1c75b6316d21933069a9d201f966d84099f6ca",
  "patch_info": {
    "commit_hash": "1d1c75b6316d21933069a9d201f966d84099f6ca",
    "repo": "swaywm/swaylock",
    "commit_url": "https://github.com/swaywm/swaylock/commit/1d1c75b6316d21933069a9d201f966d84099f6ca",
    "files": [
      "include/swaylock.h",
      "main.c",
      "meson.build"
    ],
    "message": "Add support for ext-session-lock-v1\n\nThis is a new protocol to lock the session [1]. It should be more\nreliable than layer-shell + input-inhibitor.\n\n[1]: https://gitlab.freedesktop.org/wayland/wayland-protocols/-/merge_requests/131",
    "before_after_code_files": [
      "include/swaylock.h||include/swaylock.h",
      "main.c||main.c",
      "meson.build||meson.build"
    ]
  },
  "patch_diff": {
    "include/swaylock.h||include/swaylock.h": [
      "File: include/swaylock.h -> include/swaylock.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:  int failed_attempts;",
      "90:  bool run_display;",
      "91:  struct zxdg_output_manager_v1 *zxdg_output_manager;",
      "92: };",
      "94: struct swaylock_surface {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92:  struct ext_session_lock_manager_v1 *ext_session_lock_manager_v1;",
      "93:  struct ext_session_lock_v1 *ext_session_lock_v1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:  struct wl_surface *child; // surface made into subsurface",
      "102:  struct wl_subsurface *subsurface;",
      "103:  struct zwlr_layer_surface_v1 *layer_surface;",
      "104:  struct pool_buffer buffers[2];",
      "105:  struct pool_buffer indicator_buffers[2];",
      "106:  struct pool_buffer *current_buffer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  struct ext_session_lock_surface_v1 *ext_session_lock_surface_v1;",
      "",
      "---------------"
    ],
    "main.c||main.c": [
      "File: main.c -> main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"wlr-input-inhibitor-unstable-v1-client-protocol.h\"",
      "27: #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"",
      "28: #include \"xdg-output-unstable-v1-client-protocol.h\"",
      "30: static uint32_t parse_color(const char *color) {",
      "31:  if (color[0] == '#') {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: #include \"ext-session-lock-v1-client-protocol.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "97:  if (surface->layer_surface != NULL) {",
      "98:   zwlr_layer_surface_v1_destroy(surface->layer_surface);",
      "99:  }",
      "100:  if (surface->surface != NULL) {",
      "101:   wl_surface_destroy(surface->surface);",
      "102:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101:  if (surface->ext_session_lock_surface_v1 != NULL) {",
      "102:   ext_session_lock_surface_v1_destroy(surface->ext_session_lock_surface_v1);",
      "103:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109: }",
      "111: static const struct zwlr_layer_surface_v1_listener layer_surface_listener;",
      "113: static cairo_surface_t *select_image(struct swaylock_state *state,",
      "114:   struct swaylock_surface *surface);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116: static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "120:  return (surface->state->args.colors.background & 0xff) == 0xff;",
      "121: }",
      "124:  struct swaylock_state *state = surface->state;",
      "126:  surface->image = select_image(state, surface);",
      "",
      "[Removed Lines]",
      "123: static void create_layer_surface(struct swaylock_surface *surface) {",
      "",
      "[Added Lines]",
      "128: static void create_surface(struct swaylock_surface *surface) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:  assert(surface->subsurface);",
      "135:  wl_subsurface_set_sync(surface->subsurface);",
      "154:  if (surface_is_opaque(surface) &&",
      "155:    surface->state->args.mode != BACKGROUND_MODE_CENTER &&",
      "",
      "[Removed Lines]",
      "137:  surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(",
      "138:    state->layer_shell, surface->surface, surface->output,",
      "139:    ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");",
      "140:  assert(surface->layer_surface);",
      "142:  zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);",
      "143:  zwlr_layer_surface_v1_set_anchor(surface->layer_surface,",
      "144:    ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |",
      "145:    ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |",
      "146:    ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |",
      "147:    ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);",
      "148:  zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);",
      "149:  zwlr_layer_surface_v1_set_keyboard_interactivity(",
      "150:    surface->layer_surface, true);",
      "151:  zwlr_layer_surface_v1_add_listener(surface->layer_surface,",
      "152:    &layer_surface_listener, surface);",
      "",
      "[Added Lines]",
      "142:  if (state->ext_session_lock_v1) {",
      "143:   surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(",
      "144:     state->ext_session_lock_v1, surface->surface, surface->output);",
      "145:   ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,",
      "146:     &ext_session_lock_surface_v1_listener, surface);",
      "147:  } else {",
      "148:   surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(",
      "149:     state->layer_shell, surface->surface, surface->output,",
      "150:     ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");",
      "152:   zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);",
      "153:   zwlr_layer_surface_v1_set_anchor(surface->layer_surface,",
      "154:     ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |",
      "155:     ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |",
      "156:     ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |",
      "157:     ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);",
      "158:   zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);",
      "159:   zwlr_layer_surface_v1_set_keyboard_interactivity(",
      "160:     surface->layer_surface, true);",
      "161:   zwlr_layer_surface_v1_add_listener(surface->layer_surface,",
      "162:     &layer_surface_listener, surface);",
      "163:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "161:   wl_region_destroy(region);",
      "162:  }",
      "165: }",
      "167: static void layer_surface_configure(void *data,",
      "",
      "[Removed Lines]",
      "164:  wl_surface_commit(surface->surface);",
      "",
      "[Added Lines]",
      "175:  if (!state->ext_session_lock_v1) {",
      "176:   wl_surface_commit(surface->surface);",
      "177:  }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "188:  .closed = layer_surface_closed,",
      "189: };",
      "191: static const struct wl_callback_listener surface_frame_listener;",
      "193: static void surface_frame_handle_done(void *data, struct wl_callback *callback,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: static void ext_session_lock_surface_v1_handle_configure(void *data,",
      "205:   struct ext_session_lock_surface_v1 *lock_surface, uint32_t serial,",
      "206:   uint32_t width, uint32_t height) {",
      "207:  struct swaylock_surface *surface = data;",
      "208:  surface->width = width;",
      "209:  surface->height = height;",
      "210:  surface->indicator_width = 0;",
      "211:  surface->indicator_height = 0;",
      "212:  ext_session_lock_surface_v1_ack_configure(lock_surface, serial);",
      "213:  render_frame_background(surface);",
      "214:  render_frame(surface);",
      "215: }",
      "217: static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener = {",
      "218:  .configure = ext_session_lock_surface_v1_handle_configure,",
      "219: };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "302:  .description = handle_xdg_output_description,",
      "303: };",
      "305: static void handle_global(void *data, struct wl_registry *registry,",
      "306:   uint32_t name, const char *interface, uint32_t version) {",
      "307:  struct swaylock_state *state = data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "335: static void ext_session_lock_v1_handle_locked(void *data, struct ext_session_lock_v1 *lock) {",
      "337: }",
      "339: static void ext_session_lock_v1_handle_finished(void *data, struct ext_session_lock_v1 *lock) {",
      "340:  swaylock_log(LOG_ERROR, \"Failed to lock session -- \"",
      "341:    \"is another lockscreen running?\");",
      "342:  exit(2);",
      "343: }",
      "345: static const struct ext_session_lock_v1_listener ext_session_lock_v1_listener = {",
      "346:  .locked = ext_session_lock_v1_handle_locked,",
      "347:  .finished = ext_session_lock_v1_handle_finished,",
      "348: };",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "341:   wl_list_insert(&state->surfaces, &surface->link);",
      "343:   if (state->run_display) {",
      "345:    wl_display_roundtrip(state->display);",
      "346:   }",
      "347:  }",
      "348: }",
      "",
      "[Removed Lines]",
      "344:    create_layer_surface(surface);",
      "",
      "[Added Lines]",
      "389:    create_surface(surface);",
      "392:  } else if (strcmp(interface, ext_session_lock_manager_v1_interface.name) == 0) {",
      "393:   state->ext_session_lock_manager_v1 = wl_registry_bind(registry, name,",
      "394:     &ext_session_lock_manager_v1_interface, 1);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1182:  struct wl_registry *registry = wl_display_get_registry(state.display);",
      "1183:  wl_registry_add_listener(registry, &registry_listener, &state);",
      "1184:  wl_display_roundtrip(state.display);",
      "1190:   return 1;",
      "1191:  }",
      "1194:  if (wl_display_roundtrip(state.display) == -1) {",
      "1195:   free(state.args.font);",
      "1199:  }",
      "1201:  if (state.zxdg_output_manager) {",
      "",
      "[Removed Lines]",
      "1185:  assert(state.compositor && state.layer_shell && state.shm);",
      "1186:  if (!state.input_inhibit_manager) {",
      "1187:   free(state.args.font);",
      "1188:   swaylock_log(LOG_ERROR, \"Compositor does not support the input \"",
      "1189:     \"inhibitor protocol, refusing to run insecurely\");",
      "1193:  zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);",
      "1196:   swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"",
      "1197:     \" is another lockscreen already running?\");",
      "1198:   return 2;",
      "",
      "[Added Lines]",
      "1234:  if (!state.compositor || !state.shm) {",
      "1235:   swaylock_log(LOG_ERROR, \"Missing wl_compositor or wl_shm\");",
      "1236:   return 1;",
      "1237:  }",
      "1239:  if (state.ext_session_lock_manager_v1) {",
      "1240:   swaylock_log(LOG_DEBUG, \"Using ext-session-lock-v1\");",
      "1241:   state.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);",
      "1242:   ext_session_lock_v1_add_listener(state.ext_session_lock_v1,",
      "1243:     &ext_session_lock_v1_listener, &state);",
      "1244:  } else if (state.layer_shell && state.input_inhibit_manager) {",
      "1245:   swaylock_log(LOG_DEBUG, \"Using wlr-layer-shell + wlr-input-inhibitor\");",
      "1246:   zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);",
      "1247:  } else {",
      "1248:   swaylock_log(LOG_ERROR, \"Missing ext-session-lock-v1, wlr-layer-shell \"",
      "1249:     \"and wlr-input-inhibitor\");",
      "1255:   if (state.input_inhibit_manager) {",
      "1256:    swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"",
      "1257:      \" is another lockscreen already running?\");",
      "1258:    return 2;",
      "1259:   }",
      "1260:   return 1;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1215:  struct swaylock_surface *surface;",
      "1216:  wl_list_for_each(surface, &state.surfaces, link) {",
      "1218:  }",
      "1220:  if (state.args.daemonize) {",
      "",
      "[Removed Lines]",
      "1217:   create_layer_surface(surface);",
      "",
      "[Added Lines]",
      "1279:   create_surface(surface);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1237:   loop_poll(state.eventloop);",
      "1238:  }",
      "1240:  free(state.args.font);",
      "1241:  return 0;",
      "1242: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1302:  if (state.ext_session_lock_v1) {",
      "1303:   ext_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);",
      "1304:   wl_display_flush(state.display);",
      "1305:  }",
      "",
      "---------------"
    ],
    "meson.build||meson.build": [
      "File: meson.build -> meson.build",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: endif",
      "38: wayland_client = dependency('wayland-client')",
      "40: xkbcommon      = dependency('xkbcommon')",
      "41: cairo          = dependency('cairo')",
      "42: gdk_pixbuf     = dependency('gdk-pixbuf-2.0', required: get_option('gdk-pixbuf'))",
      "",
      "[Removed Lines]",
      "39: wayland_protos = dependency('wayland-protocols', version: '>=1.14', fallback: 'wayland-protocols')",
      "",
      "[Added Lines]",
      "39: wayland_protos = dependency('wayland-protocols', version: '>=1.25', fallback: 'wayland-protocols')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "86: client_protocols = [",
      "87:  [wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],",
      "88:  [wl_protocol_dir, 'unstable/xdg-output/xdg-output-unstable-v1.xml'],",
      "89:  ['wlr-layer-shell-unstable-v1.xml'],",
      "90:  ['wlr-input-inhibitor-unstable-v1.xml'],",
      "91: ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:  [wl_protocol_dir, 'staging/ext-session-lock/ext-session-lock-v1.xml'],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc2779330f3357cc5810b0079fd4460d65779a6d",
      "candidate_info": {
        "commit_hash": "cc2779330f3357cc5810b0079fd4460d65779a6d",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/cc2779330f3357cc5810b0079fd4460d65779a6d",
        "files": [
          "meson.build"
        ],
        "message": "meson: Clean up client_protocols",
        "before_after_code_files": [
          "meson.build||meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "meson.build||meson.build"
          ],
          "candidate": [
            "meson.build||meson.build"
          ]
        }
      },
      "candidate_diff": {
        "meson.build||meson.build": [
          "File: meson.build -> meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: client_protos_headers = []",
          "84: client_protocols = [",
          "89: ]",
          "93:  client_protos_src += wayland_scanner_code.process(xml)",
          "94:  client_protos_headers += wayland_scanner_client.process(xml)",
          "95: endforeach",
          "",
          "[Removed Lines]",
          "85:  [wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],",
          "86:  [wl_protocol_dir, 'staging/ext-session-lock/ext-session-lock-v1.xml'],",
          "87:  ['wlr-layer-shell-unstable-v1.xml'],",
          "88:  ['wlr-input-inhibitor-unstable-v1.xml'],",
          "91: foreach p : client_protocols",
          "92:  xml = join_paths(p)",
          "",
          "[Added Lines]",
          "85:  wl_protocol_dir / 'stable/xdg-shell/xdg-shell.xml',",
          "86:  wl_protocol_dir / 'staging/ext-session-lock/ext-session-lock-v1.xml',",
          "87:  'wlr-layer-shell-unstable-v1.xml',",
          "88:  'wlr-input-inhibitor-unstable-v1.xml',",
          "91: foreach xml : client_protocols",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1225e75be0a1f328415db1248c3588bf60adf29a",
      "candidate_info": {
        "commit_hash": "1225e75be0a1f328415db1248c3588bf60adf29a",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/1225e75be0a1f328415db1248c3588bf60adf29a",
        "files": [
          "main.c"
        ],
        "message": "Ensure that ext_session_lock_v1.unlock_and_destroy is processed.\n\nUse wl_display_roundtrip to ensure that the unlock request is received\nand processed by the server. The protocol requires[1] this to avoid\npossible races.\n\n[1]: https://gitlab.freedesktop.org/wayland/wayland-protocols/-/merge_requests/161",
        "before_after_code_files": [
          "main.c||main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main.c||main.c"
          ],
          "candidate": [
            "main.c||main.c"
          ]
        }
      },
      "candidate_diff": {
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:  if (state.ext_session_lock_v1) {",
          "1287:   ext_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);",
          "1289:  }",
          "1291:  free(state.args.font);",
          "",
          "[Removed Lines]",
          "1288:   wl_display_flush(state.display);",
          "",
          "[Added Lines]",
          "1288:   wl_display_roundtrip(state.display);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac3b49b6571ceda3f8db11a98bfe320106996280",
      "candidate_info": {
        "commit_hash": "ac3b49b6571ceda3f8db11a98bfe320106996280",
        "repo": "swaywm/swaylock",
        "commit_url": "https://github.com/swaywm/swaylock/commit/ac3b49b6571ceda3f8db11a98bfe320106996280",
        "files": [
          "README.md",
          "include/swaylock.h",
          "main.c",
          "meson.build",
          "wlr-input-inhibitor-unstable-v1.xml",
          "wlr-layer-shell-unstable-v1.xml"
        ],
        "message": "Drop support for layer-shell\n\nSuperseded by ext-session-lock-v1",
        "before_after_code_files": [
          "include/swaylock.h||include/swaylock.h",
          "main.c||main.c",
          "meson.build||meson.build"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c",
            "meson.build||meson.build"
          ],
          "candidate": [
            "include/swaylock.h||include/swaylock.h",
            "main.c||main.c",
            "meson.build||meson.build"
          ]
        }
      },
      "candidate_diff": {
        "include/swaylock.h||include/swaylock.h": [
          "File: include/swaylock.h -> include/swaylock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"cairo.h\"",
          "8: #include \"pool-buffer.h\"",
          "9: #include \"seat.h\"",
          "12: enum auth_state {",
          "13:  AUTH_STATE_IDLE,",
          "",
          "[Removed Lines]",
          "10: #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  struct wl_display *display;",
          "80:  struct wl_compositor *compositor;",
          "81:  struct wl_subcompositor *subcompositor;",
          "84:  struct wl_shm *shm;",
          "85:  struct wl_list surfaces;",
          "86:  struct wl_list images;",
          "",
          "[Removed Lines]",
          "82:  struct zwlr_layer_shell_v1 *layer_shell;",
          "83:  struct zwlr_input_inhibit_manager_v1 *input_inhibit_manager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:  struct wl_surface *surface;",
          "105:  struct wl_surface *child; // surface made into subsurface",
          "106:  struct wl_subsurface *subsurface;",
          "108:  struct ext_session_lock_surface_v1 *ext_session_lock_surface_v1;",
          "109:  struct pool_buffer buffers[2];",
          "110:  struct pool_buffer indicator_buffers[2];",
          "",
          "[Removed Lines]",
          "107:  struct zwlr_layer_surface_v1 *layer_surface;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.c||main.c": [
          "File: main.c -> main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"pool-buffer.h\"",
          "26: #include \"seat.h\"",
          "27: #include \"swaylock.h\"",
          "30: #include \"ext-session-lock-v1-client-protocol.h\"",
          "32: static uint32_t parse_color(const char *color) {",
          "",
          "[Removed Lines]",
          "28: #include \"wlr-input-inhibitor-unstable-v1-client-protocol.h\"",
          "29: #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: static void destroy_surface(struct swaylock_surface *surface) {",
          "98:  wl_list_remove(&surface->link);",
          "102:  if (surface->ext_session_lock_surface_v1 != NULL) {",
          "103:   ext_session_lock_surface_v1_destroy(surface->ext_session_lock_surface_v1);",
          "104:  }",
          "",
          "[Removed Lines]",
          "99:  if (surface->layer_surface != NULL) {",
          "100:   zwlr_layer_surface_v1_destroy(surface->layer_surface);",
          "101:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  free(surface);",
          "114: }",
          "117: static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener;",
          "119: static cairo_surface_t *select_image(struct swaylock_state *state,",
          "",
          "[Removed Lines]",
          "116: static const struct zwlr_layer_surface_v1_listener layer_surface_listener;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:  assert(surface->subsurface);",
          "141:  wl_subsurface_set_sync(surface->subsurface);",
          "166:  if (surface_is_opaque(surface) &&",
          "167:    surface->state->args.mode != BACKGROUND_MODE_CENTER &&",
          "",
          "[Removed Lines]",
          "143:  if (state->ext_session_lock_v1) {",
          "144:   surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(",
          "145:     state->ext_session_lock_v1, surface->surface, surface->output);",
          "146:   ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,",
          "147:     &ext_session_lock_surface_v1_listener, surface);",
          "148:  } else {",
          "149:   surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(",
          "150:     state->layer_shell, surface->surface, surface->output,",
          "151:     ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");",
          "153:   zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);",
          "154:   zwlr_layer_surface_v1_set_anchor(surface->layer_surface,",
          "155:     ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |",
          "156:     ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |",
          "157:     ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |",
          "158:     ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);",
          "159:   zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);",
          "160:   zwlr_layer_surface_v1_set_keyboard_interactivity(",
          "161:     surface->layer_surface, true);",
          "162:   zwlr_layer_surface_v1_add_listener(surface->layer_surface,",
          "163:     &layer_surface_listener, surface);",
          "164:  }",
          "",
          "[Added Lines]",
          "137:  surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(",
          "138:   state->ext_session_lock_v1, surface->surface, surface->output);",
          "139:  ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,",
          "140:   &ext_session_lock_surface_v1_listener, surface);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:   wl_surface_set_opaque_region(surface->surface, region);",
          "173:   wl_region_destroy(region);",
          "174:  }",
          "196: }",
          "203: static void ext_session_lock_surface_v1_handle_configure(void *data,",
          "204:   struct ext_session_lock_surface_v1 *lock_surface, uint32_t serial,",
          "205:   uint32_t width, uint32_t height) {",
          "",
          "[Removed Lines]",
          "176:  if (!state->ext_session_lock_v1) {",
          "177:   wl_surface_commit(surface->surface);",
          "178:  }",
          "179: }",
          "181: static void layer_surface_configure(void *data,",
          "182:   struct zwlr_layer_surface_v1 *layer_surface,",
          "183:   uint32_t serial, uint32_t width, uint32_t height) {",
          "184:  struct swaylock_surface *surface = data;",
          "185:  surface->width = width;",
          "186:  surface->height = height;",
          "187:  zwlr_layer_surface_v1_ack_configure(layer_surface, serial);",
          "188:  render_frame_background(surface);",
          "189:  render_frame(surface);",
          "190: }",
          "192: static void layer_surface_closed(void *data,",
          "193:   struct zwlr_layer_surface_v1 *layer_surface) {",
          "194:  struct swaylock_surface *surface = data;",
          "195:  destroy_surface(surface);",
          "198: static const struct zwlr_layer_surface_v1_listener layer_surface_listener = {",
          "199:  .configure = layer_surface_configure,",
          "200:  .closed = layer_surface_closed,",
          "201: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:    calloc(1, sizeof(struct swaylock_seat));",
          "348:   swaylock_seat->state = state;",
          "349:   wl_seat_add_listener(seat, &seat_listener, swaylock_seat);",
          "356:  } else if (strcmp(interface, wl_output_interface.name) == 0) {",
          "357:   struct swaylock_surface *surface =",
          "358:    calloc(1, sizeof(struct swaylock_surface));",
          "",
          "[Removed Lines]",
          "350:  } else if (strcmp(interface, zwlr_layer_shell_v1_interface.name) == 0) {",
          "351:   state->layer_shell = wl_registry_bind(",
          "352:     registry, name, &zwlr_layer_shell_v1_interface, 1);",
          "353:  } else if (strcmp(interface, zwlr_input_inhibit_manager_v1_interface.name) == 0) {",
          "354:   state->input_inhibit_manager = wl_registry_bind(",
          "355:     registry, name, &zwlr_input_inhibit_manager_v1_interface, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1273:   return 1;",
          "1274:  }",
          "1287:   return 1;",
          "1288:  }",
          "1290:  if (wl_display_roundtrip(state.display) == -1) {",
          "1291:   free(state.args.font);",
          "1297:   return 1;",
          "1298:  }",
          "",
          "[Removed Lines]",
          "1276:  if (state.ext_session_lock_manager_v1) {",
          "1277:   swaylock_log(LOG_DEBUG, \"Using ext-session-lock-v1\");",
          "1278:   state.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);",
          "1279:   ext_session_lock_v1_add_listener(state.ext_session_lock_v1,",
          "1280:     &ext_session_lock_v1_listener, &state);",
          "1281:  } else if (state.layer_shell && state.input_inhibit_manager) {",
          "1282:   swaylock_log(LOG_DEBUG, \"Using wlr-layer-shell + wlr-input-inhibitor\");",
          "1283:   zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);",
          "1284:  } else {",
          "1285:   swaylock_log(LOG_ERROR, \"Missing ext-session-lock-v1, wlr-layer-shell \"",
          "1286:     \"and wlr-input-inhibitor\");",
          "1292:   if (state.input_inhibit_manager) {",
          "1293:    swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"",
          "1294:      \" is another lockscreen already running?\");",
          "1295:    return 2;",
          "1296:   }",
          "",
          "[Added Lines]",
          "1220:  if (!state.ext_session_lock_manager_v1) {",
          "1221:   swaylock_log(LOG_ERROR, \"Missing ext-session-lock-v1\");",
          "1225:  state.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);",
          "1226:  ext_session_lock_v1_add_listener(state.ext_session_lock_v1,",
          "1227:   &ext_session_lock_v1_listener, &state);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1305:   create_surface(surface);",
          "1306:  }",
          "1318:    return 2;",
          "1319:   }",
          "1321:  }",
          "1323:  if (state.args.ready_fd >= 0) {",
          "",
          "[Removed Lines]",
          "1308:  if (state.ext_session_lock_manager_v1) {",
          "1309:   while (!state.locked) {",
          "1310:    if (wl_display_dispatch(state.display) < 0) {",
          "1311:     swaylock_log(LOG_ERROR, \"wl_display_dispatch() failed\");",
          "1312:     return 2;",
          "1313:    }",
          "1314:   }",
          "1315:  } else {",
          "1316:   if (wl_display_roundtrip(state.display) < 0) {",
          "1317:    swaylock_log(LOG_ERROR, \"wl_display_roundtrip() failed\");",
          "1320:   state.locked = true;",
          "",
          "[Added Lines]",
          "1242:  while (!state.locked) {",
          "1243:   if (wl_display_dispatch(state.display) < 0) {",
          "1244:    swaylock_log(LOG_ERROR, \"wl_display_dispatch() failed\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1353:   loop_poll(state.eventloop);",
          "1354:  }",
          "1361:  free(state.args.font);",
          "1362:  cairo_destroy(state.test_cairo);",
          "",
          "[Removed Lines]",
          "1356:  if (state.ext_session_lock_v1) {",
          "1357:   ext_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);",
          "1358:   wl_display_roundtrip(state.display);",
          "1359:  }",
          "",
          "[Added Lines]",
          "1282:  ext_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);",
          "1283:  wl_display_roundtrip(state.display);",
          "",
          "---------------"
        ],
        "meson.build||meson.build": [
          "File: meson.build -> meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: )",
          "70: client_protocols = [",
          "72:  wl_protocol_dir / 'staging/ext-session-lock/ext-session-lock-v1.xml',",
          "75: ]",
          "77: protos_src = []",
          "",
          "[Removed Lines]",
          "71:  wl_protocol_dir / 'stable/xdg-shell/xdg-shell.xml',",
          "73:  'wlr-layer-shell-unstable-v1.xml',",
          "74:  'wlr-input-inhibitor-unstable-v1.xml',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}