{
  "cve_id": "CVE-2012-6696",
  "cve_desc": "inspircd in Debian before 2.0.7 does not properly handle unsigned integers.  NOTE: This vulnerability exists because of an incomplete fix to CVE-2012-1836.",
  "repo": "inspircd/inspircd",
  "patch_hash": "ed28c1ba666b39581adb860bf51cdde43c84cc89",
  "patch_info": {
    "commit_hash": "ed28c1ba666b39581adb860bf51cdde43c84cc89",
    "repo": "inspircd/inspircd",
    "commit_url": "https://github.com/inspircd/inspircd/commit/ed28c1ba666b39581adb860bf51cdde43c84cc89",
    "files": [
      "src/dns.cpp"
    ],
    "message": "Fixed out of bounds memory access from malformed DNS queries that have an invalid length label. Introduced in a6a07de0daa353bcd29056a4535a9c4784c113c8.",
    "before_after_code_files": [
      "src/dns.cpp||src/dns.cpp"
    ]
  },
  "patch_diff": {
    "src/dns.cpp||src/dns.cpp": [
      "File: src/dns.cpp -> src/dns.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "761:    }",
      "762:   }",
      "764:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
      "",
      "[Removed Lines]",
      "763:   if (length - i < 10)",
      "",
      "[Added Lines]",
      "763:   if (static_cast<int>(length - i) < 10)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58c893e834ff20495d007709220881a3ff13f423",
      "candidate_info": {
        "commit_hash": "58c893e834ff20495d007709220881a3ff13f423",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/58c893e834ff20495d007709220881a3ff13f423",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed infinite loop cauesd by invalid dns packets",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/inspircd/inspircd/pull/16"
        ],
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:   case DNS_QUERY_CNAME:",
          "802:   case DNS_QUERY_PTR:",
          "803:    o = 0;",
          "804:    q = 0;",
          "805:    while (q == 0 && i < length && o + 256 < 1023)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:   {",
          "804:    unsigned short lowest_pos = length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "812:      i = ntohs(ptr);",
          "816:       return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\");",
          "819:      i &= ~DN_COMP_BITMASK;",
          "823:     }",
          "824:     else",
          "825:     {",
          "",
          "[Removed Lines]",
          "815:      if (!(i & DN_COMP_BITMASK))",
          "822:      i =- 12;",
          "",
          "[Added Lines]",
          "817:      if ((i & DN_COMP_BITMASK) != DN_COMP_BITMASK)",
          "824:      i -= 12;",
          "826:      if (i >= lowest_pos)",
          "827:       return std::make_pair((unsigned char *) NULL, \"Invalid decompression pointer\");",
          "828:      lowest_pos = i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "843:     }",
          "844:    }",
          "845:    res[o] = 0;",
          "846:   break;",
          "847:   case DNS_QUERY_AAAA:",
          "848:    if (rr.rdlength != sizeof(struct in6_addr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1aea44ff498519da6fe9c08cf250d34a8ac119a1",
      "candidate_info": {
        "commit_hash": "1aea44ff498519da6fe9c08cf250d34a8ac119a1",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/1aea44ff498519da6fe9c08cf250d34a8ac119a1",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed out of bounds memory access from malformed DNS queries that have an invalid length label. Introduced in a6a07de0daa353bcd29056a4535a9c4784c113c8.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:    }",
          "759:   }",
          "761:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "760:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "760:   if (static_cast<int>(length - i) < 10)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c28dfe87e7486fc735a09e95c4a7dd8ec57421c",
      "candidate_info": {
        "commit_hash": "5c28dfe87e7486fc735a09e95c4a7dd8ec57421c",
        "repo": "inspircd/inspircd",
        "commit_url": "https://github.com/inspircd/inspircd/commit/5c28dfe87e7486fc735a09e95c4a7dd8ec57421c",
        "files": [
          "src/dns.cpp"
        ],
        "message": "Fixed out of bounds memory access from malformed DNS queries that have an invalid length label. Introduced in a6a07de0daa353bcd29056a4535a9c4784c113c8.",
        "before_after_code_files": [
          "src/dns.cpp||src/dns.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dns.cpp||src/dns.cpp"
          ],
          "candidate": [
            "src/dns.cpp||src/dns.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/dns.cpp||src/dns.cpp": [
          "File: src/dns.cpp -> src/dns.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "846:    }",
          "847:   }",
          "849:    return std::make_pair((unsigned char*)NULL,\"Incorrectly sized DNS reply\");",
          "",
          "[Removed Lines]",
          "848:   if (length - i < 10)",
          "",
          "[Added Lines]",
          "848:   if (static_cast<int>(length - i) < 10)",
          "",
          "---------------"
        ]
      }
    }
  ]
}