{
  "cve_id": "CVE-2011-3944",
  "cve_desc": "The smacker_decode_header_tree function in libavcodec/smacker.c in FFmpeg before 0.10 allows remote attackers to have an unspecified impact via crafted Smacker data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "1285baaab550e3e761590ef6dfb1d9bd9d1332e4",
  "patch_info": {
    "commit_hash": "1285baaab550e3e761590ef6dfb1d9bd9d1332e4",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1285baaab550e3e761590ef6dfb1d9bd9d1332e4",
    "files": [
      "libavcodec/smacker.c"
    ],
    "message": "smackerdec: Check that the last indexes are within the table.\n\nFixes CVE-2011-3944\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/smacker.c||libavcodec/smacker.c"
    ]
  },
  "patch_diff": {
    "libavcodec/smacker.c||libavcodec/smacker.c": [
      "File: libavcodec/smacker.c -> libavcodec/smacker.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:     if(ctx.last[0] == -1) ctx.last[0] = huff.current++;",
      "260:     if(ctx.last[1] == -1) ctx.last[1] = huff.current++;",
      "261:     if(ctx.last[2] == -1) ctx.last[2] = huff.current++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "262:     if(huff.current > huff.length){",
      "263:         ctx.last[0] = ctx.last[1] = ctx.last[2] = 1;",
      "264:         av_log(smk->avctx, AV_LOG_ERROR, \"bigtree damaged\\n\");",
      "265:         return -1;",
      "266:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1947015b2eec65c7fbd702e1d8c22248be511e8",
      "candidate_info": {
        "commit_hash": "c1947015b2eec65c7fbd702e1d8c22248be511e8",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/c1947015b2eec65c7fbd702e1d8c22248be511e8",
        "files": [
          "libavcodec/smacker.c"
        ],
        "message": "smackaud: return meaningful error codes\n\nSigned-off-by: Paul B Mahol <onemda@gmail.com>",
        "before_after_code_files": [
          "libavcodec/smacker.c||libavcodec/smacker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/smacker.c||libavcodec/smacker.c"
          ],
          "candidate": [
            "libavcodec/smacker.c||libavcodec/smacker.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/smacker.c||libavcodec/smacker.c": [
          "File: libavcodec/smacker.c -> libavcodec/smacker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: {",
          "99:     if(length > 32) {",
          "100:         av_log(NULL, AV_LOG_ERROR, \"length too long\\n\");",
          "102:     }",
          "103:     if(!get_bits1(gb)){ //Leaf",
          "104:         if(hc->current >= 256){",
          "105:             av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");",
          "107:         }",
          "108:         if(length){",
          "109:             hc->bits[hc->current] = prefix;",
          "",
          "[Removed Lines]",
          "101:         return -1;",
          "106:             return -1;",
          "",
          "[Added Lines]",
          "101:         return AVERROR_INVALIDDATA;",
          "106:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: {",
          "135:     if (hc->current + 1 >= hc->length) {",
          "136:         av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");",
          "138:     }",
          "139:     if(!get_bits1(gb)){ //Leaf",
          "140:         int val, i1, i2;",
          "141:         i1 = ctx->v1->table ? get_vlc2(gb, ctx->v1->table, SMKTREE_BITS, 3) : 0;",
          "142:         i2 = ctx->v2->table ? get_vlc2(gb, ctx->v2->table, SMKTREE_BITS, 3) : 0;",
          "143:         if (i1 < 0 || i2 < 0)",
          "145:         val = ctx->recode1[i1] | (ctx->recode2[i2] << 8);",
          "146:         if(val == ctx->escapes[0]) {",
          "147:             ctx->last[0] = hc->current;",
          "",
          "[Removed Lines]",
          "137:         return -1;",
          "144:             return -1;",
          "",
          "[Added Lines]",
          "137:         return AVERROR_INVALIDDATA;",
          "144:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     if(size >= UINT_MAX>>4){ // (((size + 3) >> 2) + 3) << 2 must not overflow",
          "189:         av_log(smk->avctx, AV_LOG_ERROR, \"size too large\\n\");",
          "191:     }",
          "193:     tmp1.length = 256;",
          "",
          "[Removed Lines]",
          "190:         return -1;",
          "",
          "[Added Lines]",
          "190:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:                     tmp1.bits, sizeof(uint32_t), sizeof(uint32_t), INIT_VLC_LE);",
          "213:         if(res < 0) {",
          "214:             av_log(smk->avctx, AV_LOG_ERROR, \"Cannot build VLC table\\n\");",
          "216:         }",
          "217:     } else {",
          "218:         av_log(smk->avctx, AV_LOG_ERROR, \"Skipping low bytes tree\\n\");",
          "",
          "[Removed Lines]",
          "215:             return -1;",
          "",
          "[Added Lines]",
          "215:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:                     tmp2.bits, sizeof(uint32_t), sizeof(uint32_t), INIT_VLC_LE);",
          "226:         if(res < 0) {",
          "227:             av_log(smk->avctx, AV_LOG_ERROR, \"Cannot build VLC table\\n\");",
          "229:         }",
          "230:     } else {",
          "231:         av_log(smk->avctx, AV_LOG_ERROR, \"Skipping high bytes tree\\n\");",
          "",
          "[Removed Lines]",
          "228:             return -1;",
          "",
          "[Added Lines]",
          "228:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:     if(huff.current > huff.length){",
          "261:         ctx.last[0] = ctx.last[1] = ctx.last[2] = 1;",
          "262:         av_log(smk->avctx, AV_LOG_ERROR, \"bigtree damaged\\n\");",
          "264:     }",
          "",
          "[Removed Lines]",
          "263:         return -1;",
          "",
          "[Added Lines]",
          "263:         return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "297:         smk->mmap_last[0] = smk->mmap_last[1] = smk->mmap_last[2] = 1;",
          "298:     } else {",
          "299:         if (smacker_decode_header_tree(smk, &gb, &smk->mmap_tbl, smk->mmap_last, mmap_size))",
          "301:     }",
          "302:     if(!get_bits1(&gb)) {",
          "303:         av_log(smk->avctx, AV_LOG_INFO, \"Skipping MCLR tree\\n\");",
          "",
          "[Removed Lines]",
          "300:             return -1;",
          "",
          "[Added Lines]",
          "300:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:         smk->mclr_last[0] = smk->mclr_last[1] = smk->mclr_last[2] = 1;",
          "307:     } else {",
          "308:         if (smacker_decode_header_tree(smk, &gb, &smk->mclr_tbl, smk->mclr_last, mclr_size))",
          "310:     }",
          "311:     if(!get_bits1(&gb)) {",
          "312:         av_log(smk->avctx, AV_LOG_INFO, \"Skipping FULL tree\\n\");",
          "",
          "[Removed Lines]",
          "309:             return -1;",
          "",
          "[Added Lines]",
          "309:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "315:         smk->full_last[0] = smk->full_last[1] = smk->full_last[2] = 1;",
          "316:     } else {",
          "317:         if (smacker_decode_header_tree(smk, &gb, &smk->full_tbl, smk->full_last, full_size))",
          "319:     }",
          "320:     if(!get_bits1(&gb)) {",
          "321:         av_log(smk->avctx, AV_LOG_INFO, \"Skipping TYPE tree\\n\");",
          "",
          "[Removed Lines]",
          "318:             return -1;",
          "",
          "[Added Lines]",
          "318:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "324:         smk->type_last[0] = smk->type_last[1] = smk->type_last[2] = 1;",
          "325:     } else {",
          "326:         if (smacker_decode_header_tree(smk, &gb, &smk->type_tbl, smk->type_last, type_size))",
          "328:     }",
          "330:     return 0;",
          "",
          "[Removed Lines]",
          "327:             return -1;",
          "",
          "[Added Lines]",
          "327:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "652:                     h[i].bits, sizeof(uint32_t), sizeof(uint32_t), INIT_VLC_LE);",
          "653:             if(res < 0) {",
          "654:                 av_log(avctx, AV_LOG_ERROR, \"Cannot build VLC table\\n\");",
          "656:             }",
          "657:         }",
          "658:     }",
          "",
          "[Removed Lines]",
          "655:                 return -1;",
          "",
          "[Added Lines]",
          "655:                 return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "664:         for(; i < unp_size / 2; i++) {",
          "665:             if(get_bits_left(&gb)<0)",
          "667:             if(i & stereo) {",
          "668:                 if(vlc[2].table)",
          "669:                     res = get_vlc2(&gb, vlc[2].table, SMKTREE_BITS, 3);",
          "",
          "[Removed Lines]",
          "666:                 return -1;",
          "",
          "[Added Lines]",
          "666:                 return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "716:         for(; i < unp_size; i++) {",
          "717:             if(get_bits_left(&gb)<0)",
          "719:             if(i & stereo){",
          "720:                 if(vlc[1].table)",
          "721:                     res = get_vlc2(&gb, vlc[1].table, SMKTREE_BITS, 3);",
          "",
          "[Removed Lines]",
          "718:                 return -1;",
          "",
          "[Added Lines]",
          "718:                 return AVERROR_INVALIDDATA;",
          "",
          "---------------"
        ]
      }
    }
  ]
}