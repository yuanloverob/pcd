{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8f3b4c320f9d289e6fd75632c77874f4f253336",
      "candidate_info": {
        "commit_hash": "d8f3b4c320f9d289e6fd75632c77874f4f253336",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8f3b4c320f9d289e6fd75632c77874f4f253336",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a problem with corrupt fts3 database detection introduced by [95a9a39f].\n\nFossilOrigin-Name: c80bb15b44e9b6a3c0c5a49d5e93e66376c3520ecefc1db7425c8a7e09d3eade",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:    || (pReader->nPopulate==0 && pReader->aDoclist[pReader->nDoclist-1])",
          "1414:   ){",
          "1415:     return FTS_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "1412:   if( pReader->nDoclist-(pReader->aDoclist-pReader->aNode) > pReader->nNode",
          "",
          "[Added Lines]",
          "1412:   if( pReader->nDoclist > pReader->nNode-(pReader->aDoclist-pReader->aNode)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   INSERT INTO t1(t1) VALUES('optimize');",
          "167: }",
          "170: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #-------------------------------------------------------------------------",
          "170: reset_db",
          "171: do_test 5.0 {",
          "172:   sqlite3 db {}",
          "173:   db deserialize [decode_hexdb {",
          "174: | size 24576 pagesize 4096 filename c15.db",
          "175: | page 1 offset 0",
          "176: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "177: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "178: |     32: 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 04   ................",
          "179: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "180: |     96: 00 00 00 00 0d 0e f9 00 06 0d ec 00 0f cd 0f 69   ...............i",
          "181: |    112: 0f 01 0e 10 0e c6 0d ec 00 00 00 00 00 00 00 00   ................",
          "182: |   3552: 00 00 00 00 00 00 00 00 00 00 00 00 22 06 06 17   ................",
          "183: |   3568: 11 11 01 31 74 61 62 6c 65 74 32 74 32 06 43 52   ...1tablet2t2.CR",
          "184: |   3584: 45 41 54 45 20 54 41 42 4c 45 20 74 32 28 78 29   EATE TABLE t2(x)",
          "185: |   3600: 81 33 04 07 17 1f 1f 01 82 35 74 61 62 6c 65 74   .3.......5tablet",
          "186: |   3616: 31 5f 73 65 67 64 69 72 74 31 5f 73 65 67 64 69   1_segdirt1_segdi",
          "187: |   3632: 72 04 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   r.CREATE TABLE '",
          "188: |   3648: 74 31 5f 73 65 67 64 69 72 27 28 6c 65 76 65 6c   t1_segdir'(level",
          "189: |   3664: 20 49 4e 54 45 47 45 52 2c 69 64 78 20 49 4e 54    INTEGER,idx INT",
          "190: |   3680: 45 47 45 52 2c 73 74 61 72 74 5f 62 6c 6f 63 6b   EGER,start_block",
          "191: |   3696: 20 49 4e 54 45 47 45 52 2c 6c 65 61 76 65 73 5f    INTEGER,leaves_",
          "192: |   3712: 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45   end_block INTEGE",
          "193: |   3728: 52 2c 65 6e 64 5f 62 6c 6f 63 6b 20 49 4e 54 45   R,end_block INTE",
          "194: |   3744: 47 45 52 2c 72 6f 6f 74 20 42 4c 4f 42 2c 50 52   GER,root BLOB,PR",
          "195: |   3760: 49 4d 41 52 59 20 4b 45 59 28 6c 65 76 65 6c 2c   IMARY KEY(level,",
          "196: |   3776: 20 69 64 78 29 29 31 05 06 17 45 1f 01 00 69 6e    idx))1...E...in",
          "197: |   3792: 64 65 78 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e   dexsqlite_autoin",
          "198: |   3808: 64 65 79 5f 74 31 5f 73 65 67 64 69 72 5f 31 74   dey_t1_segdir_1t",
          "199: |   3824: 31 5f 73 65 67 64 69 72 05 00 00 00 08 00 00 00   1_segdir........",
          "200: |   3840: 00 66 03 07 17 23 23 01 81 13 74 61 62 6c 65 74   .f...##...tablet",
          "201: |   3856: 31 5f 73 65 67 6d 65 6e 74 73 74 31 5f 73 65 67   1_segmentst1_seg",
          "202: |   3872: 6d 65 6e 74 73 03 43 52 45 41 54 45 20 54 41 42   ments.CREATE TAB",
          "203: |   3888: 4c 45 20 27 74 31 5f 73 65 67 6d 65 6e 74 73 27   LE 't1_segments'",
          "204: |   3904: 28 62 6c 6f 63 6b 69 64 20 49 4e 54 45 47 45 52   (blockid INTEGER",
          "205: |   3920: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62 6c    PRIMARY KEY, bl",
          "206: |   3936: 6f 63 6b 20 42 4c 4f 42 29 62 02 07 17 21 21 01   ock BLOB)b...!!.",
          "207: |   3952: 81 0f 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65 6e   ..tablet1_conten",
          "208: |   3968: 74 74 31 5f 63 6f 6e 74 65 6e 74 02 43 52 45 41   tt1_content.CREA",
          "209: |   3984: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "210: |   4000: 74 65 6e 74 27 28 64 6f 63 69 64 20 49 4e 54 45   tent'(docid INTE",
          "211: |   4016: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "212: |   4032: 20 27 63 30 63 6f 6e 74 65 6e 74 27 29 31 01 06    'c0content')1..",
          "213: |   4048: 17 11 11 08 51 74 61 62 6c 65 74 31 74 31 43 52   ....Qtablet1t1CR",
          "214: |   4064: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "215: |   4080: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "216: | page 2 offset 4096",
          "217: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "218: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "219: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "220: | page 3 offset 8192",
          "221: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "222: | page 4 offset 12288",
          "223: |      0: 0d 00 00 00 01 0f d6 00 0f d6 00 00 00 00 00 00   ................",
          "224: |   4048: 00 00 00 00 00 00 28 01 07 08 08 08 08 15 46 30   ......(.......F0",
          "225: |   4064: 20 32 39 00 05 61 62 61 63 6b 03 01 02 00 03 02    29..aback......",
          "226: |   4080: 66 74 03 02 02 00 03 04 6e 64 6f 60 30 30 20 00   ft......ndo`00 .",
          "227: | page 5 offset 16384",
          "228: |      0: a0 00 00 00 10 ff b0 00 ff fb 00 00 00 00 00 00   ................",
          "229: |   4080: 00 00 00 00 00 00 00 00 00 00 00 04 04 08 08 09   ................",
          "230: | page 6 offset 20480",
          "231: |      0: 0d 00 00 00 05 0f b8 00 0f f4 0f e9 0f d6 0f c7   ................",
          "232: |     16: 0f b8 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64   ..'t1_content'(d",
          "233: |     32: 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50 52 49   ocid INTEGER PRI",
          "234: |     48: 4d 41 52 59 20 4b 45 59 2c 20 27 63 30 63 6f 6e   MARY KEY, 'c0con",
          "235: |     64: 74 65 6e 74 27 29 31 01 06 17 11 11 08 51 74 61   tent')1......Qta",
          "236: |     80: 62 6c 65 74 31 74 31 43 52 45 41 54 45 20 56 49   blet1t1CREATE VI",
          "237: |     96: 52 54 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55   RTUAL TABLE t1 U",
          "238: |    112: 53 49 4e 47 20 66 74 73 33 0d 00 00 00 03 0f e0   SING fts3.......",
          "239: |    128: 00 0f f6 0f ec 0f e0 00 00 00 00 00 00 00 00 00   ................",
          "240: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "241: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "242: |   4048: 3d 31 30 30 2c 38 11 03 02 2b 69 6e 74 65 67 72   =100,8...+integr",
          "243: |   4064: 69 74 79 2d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity-check....reb",
          "244: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "245: | end c15.db",
          "246: }]} {}",
          "248: do_catchsql_test 5.1 {",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "250: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
      "candidate_info": {
        "commit_hash": "3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f3f2c73575ea8ae9a46ea30b3af6dfc342cd6c9",
        "files": [
          "ext/fts5/fts5_main.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure that the idxStr for FTS5 is always zero-terminated. Fix for check-in [e6db945454a0dae2]\n\nFossilOrigin-Name: 090cd07d37904da4610d6a6787a3cc825c9a8bdcc5f051267d4608bba9b49d03",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:         pInfo->estimatedCost = 1e50;",
          "570:         return SQLITE_OK;",
          "571:       }else{",
          "572:         if( iCol==nCol+1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:         assert( iIdxStr < pInfo->nConstraint*6 + 1 );",
          "571:         idxStr[iIdxStr] = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a8927d14f88c44828e794787bab080455ab62705c93f65ce7d8db83478aa5a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
      "candidate_info": {
        "commit_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/e_vacuum.test"
        ],
        "message": "Only preserve rowid values for VACUUM INTO.  Keep the legacy behavior of renumbering rowids for ordinary VACUUM.\n\nFossilOrigin-Name: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d3af2010f4f652865f5c0d18e3bc793de05f8e75e75cc77786f61004b2ad28f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2353:       sqlite3VdbeJumpHere(v, addr2);",
          "2354:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2356:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2357:     }else{",
          "2358:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "[Added Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_VacuumInto) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "173:   if( pOut ){",
          "174:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "175:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     zOut = (const char*)sqlite3_value_text(pOut);",
          "179:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "180:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "181:   }else{",
          "182:     zOut = \"\";",
          "183:   }",
          "188:   saved_flags = db->flags;",
          "190:   saved_nChange = db->nChange;",
          "191:   saved_nTotalChange = db->nTotalChange;",
          "192:   saved_mTrace = db->mTrace;",
          "193:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "195:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "196:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "197:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:       zDbMain",
          "308:   );",
          "309:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "311:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "310:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: do_execsql_test e_vacuum-3.1.2 {",
          "233:   VACUUM;",
          "234:   SELECT rowid, x FROM t4;",
          "238: do_execsql_test e_vacuum-3.1.3 {",
          "239:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "240:   INSERT INTO t5(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 2 z}",
          "237: # Rowids are preserved if an INTEGER PRIMARY KEY is used",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   SELECT rowid, x FROM t5;",
          "249: } {1 x 3 z}",
          "251: # EVIDENCE-OF: R-49563-33883 A VACUUM will fail if there is an open",
          "252: # transaction, or if there are one or more active SQL statements when it",
          "253: # is run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # Rowid is preserved for VACUUM INTO",
          "252: do_execsql_test e_vacuum-3.1.5 {",
          "253:   DROP TABLE t5;",
          "254:   CREATE TABLE t5(x);",
          "255:   INSERT INTO t5(x) VALUES('x');",
          "256:   INSERT INTO t5(x) VALUES('y');",
          "257:   INSERT INTO t5(x) VALUES('z');",
          "258:   DELETE FROM t5 WHERE x = 'y';",
          "259:   SELECT rowid, x FROM t5;",
          "260: } {1 x 3 z}",
          "261: forcedelete test2.db",
          "262: do_execsql_test e_vacuum-3.1.6 {",
          "263:   VACUUM INTO 'test2.db';",
          "264:   ATTACH 'test2.db' AS aux1;",
          "265:   SELECT rowid, x FROM aux1.t5;",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "273:   CREATE TABLE t5(x,y,z);",
          "274:   INSERT INTO t5(x) VALUES('x');",
          "275:   INSERT INTO t5(x) VALUES('y');",
          "276:   INSERT INTO t5(x) VALUES('z');",
          "277:   UPDATE t5 SET y=x, z=random();",
          "278:   DELETE FROM t5 WHERE x = 'y';",
          "279:   CREATE INDEX t5x ON t5(x);",
          "280:   CREATE UNIQUE INDEX t5y ON t5(y);",
          "281:   CREATE INDEX t5zxy ON t5(z,x,y);",
          "282:   SELECT rowid, x FROM t5;",
          "283: } {1 x 3 z}",
          "284: do_execsql_test e_vacuum-3.1.8 {",
          "285:   VACUUM;",
          "286:   SELECT rowid, x FROM t5;",
          "287: } {1 x 3 z}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
      "candidate_info": {
        "commit_hash": "9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b2bd91d9a4bf91c3dff1caf1ec2687ed9b54873",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Give a link to the URI Filename document in the documentation to the various sqlite3_uri_parameter() interfaces.\n\nFossilOrigin-Name: 69b0b2ee536fda8975f60643f7f1891db4649958aca476822ea2a632ce731992",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54f2399fb2a626602d405c857297f2da833f9f048cbc478f9110bed2e9bda299",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
      "candidate_info": {
        "commit_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2158:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2159:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2160:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2161:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2162:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2163:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2161:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    }
  ]
}