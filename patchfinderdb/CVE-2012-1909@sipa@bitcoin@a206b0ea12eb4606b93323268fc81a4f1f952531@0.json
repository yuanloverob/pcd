{
  "cve_id": "CVE-2012-1909",
  "cve_desc": "The Bitcoin protocol, as used in bitcoind before 0.4.4, wxBitcoin, Bitcoin-Qt, and other programs, does not properly handle multiple transactions with the same identifier, which allows remote attackers to cause a denial of service (unspendable transaction) by leveraging the ability to create a duplicate coinbase transaction.",
  "repo": "sipa/bitcoin",
  "patch_hash": "a206b0ea12eb4606b93323268fc81a4f1f952531",
  "patch_info": {
    "commit_hash": "a206b0ea12eb4606b93323268fc81a4f1f952531",
    "repo": "sipa/bitcoin",
    "commit_url": "https://github.com/sipa/bitcoin/commit/a206b0ea12eb4606b93323268fc81a4f1f952531",
    "files": [
      "src/main.cpp"
    ],
    "message": "Do not allow overwriting unspent transactions (BIP 30)\n\nIntroduce the following network rule:\n * a block is not valid if it contains a transaction whose hash\n   already exists in the block chain, unless all that transaction's\n   outputs were already spent before said block.\n\nWarning: this is effectively a network rule change, with potential\nrisk for forking the block chain. Leaving this unfixed carries the\nsame risk however, for attackers that can cause a reorganisation\nin part of the network.\n\nThanks to Russell O'Connor and Ben Reeves.",
    "before_after_code_files": [
      "src/main.cpp||src/main.cpp"
    ]
  },
  "patch_diff": {
    "src/main.cpp||src/main.cpp": [
      "File: src/main.cpp -> src/main.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "976:     }",
      "982:     return true;",
      "983: }",
      "",
      "[Removed Lines]",
      "979:     if (!txdb.EraseTxIndex(*this))",
      "980:         return error(\"DisconnectInputs() : EraseTxPos failed\");",
      "",
      "[Added Lines]",
      "982:     txdb.EraseTxIndex(*this);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1256:     if (!CheckBlock())",
      "1257:         return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1271:     if (pindex->nTime > 1331769600 || (fTestNet && pindex->nTime > 1329696000))",
      "1272:         BOOST_FOREACH(CTransaction& tx, vtx)",
      "1273:         {",
      "1274:             CTxIndex txindexOld;",
      "1275:             if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))",
      "1276:                 BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)",
      "1277:                     if (pos.IsNull())",
      "1278:                         return false;",
      "1279:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7962747c4bfe90f9991d121fd22ac625ae2de30",
      "candidate_info": {
        "commit_hash": "d7962747c4bfe90f9991d121fd22ac625ae2de30",
        "repo": "sipa/bitcoin",
        "commit_url": "https://github.com/sipa/bitcoin/commit/d7962747c4bfe90f9991d121fd22ac625ae2de30",
        "files": [
          "src/main.cpp"
        ],
        "message": "Do not allow overwriting unspent transactions (BIP 30)\n\nIntroduce the following network rule:\n * a block is not valid if it contains a transaction whose hash\n   already exists in the block chain, unless all that transaction's\n   outputs were already spent before said block.\n\nWarning: this is effectively a network rule change, with potential\nrisk for forking the block chain. Leaving this unfixed carries the\nsame risk however, for attackers that can cause a reorganisation\nin part of the network.\n\nThanks to Russell O'Connor and Ben Reeves.",
        "before_after_code_files": [
          "src/main.cpp||src/main.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main.cpp||src/main.cpp"
          ],
          "candidate": [
            "src/main.cpp||src/main.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/main.cpp||src/main.cpp": [
          "File: src/main.cpp -> src/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:     }",
          "798:     return true;",
          "799: }",
          "",
          "[Removed Lines]",
          "795:     if (!txdb.EraseTxIndex(*this))",
          "796:         return error(\"DisconnectInputs() : EraseTxPos failed\");",
          "",
          "[Added Lines]",
          "798:     txdb.EraseTxIndex(*this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "982:     if (!CheckBlock())",
          "983:         return false;",
          "986:     unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:     if (pindex->nTime > 1331769600 || (fTestNet && pindex->nTime > 1329696000))",
          "998:         BOOST_FOREACH(CTransaction& tx, vtx)",
          "999:         {",
          "1000:             CTxIndex txindexOld;",
          "1001:             if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))",
          "1002:                 BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)",
          "1003:                     if (pos.IsNull())",
          "1004:                         return false;",
          "1005:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}