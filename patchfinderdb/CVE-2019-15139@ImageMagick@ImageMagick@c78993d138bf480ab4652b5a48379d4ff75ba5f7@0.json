{
  "cve_id": "CVE-2019-15139",
  "cve_desc": "The XWD image (X Window System window dumping file) parsing component in ImageMagick 7.0.8-41 Q16 allows attackers to cause a denial-of-service (application crash resulting from an out-of-bounds Read) in ReadXWDImage in coders/xwd.c by crafting a corrupted XWD image file, a different vulnerability than CVE-2019-11472.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "c78993d138bf480ab4652b5a48379d4ff75ba5f7",
  "patch_info": {
    "commit_hash": "c78993d138bf480ab4652b5a48379d4ff75ba5f7",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/c78993d138bf480ab4652b5a48379d4ff75ba5f7",
    "files": [
      "coders/xwd.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/1553",
    "before_after_code_files": [
      "coders/xwd.c||coders/xwd.c"
    ]
  },
  "patch_diff": {
    "coders/xwd.c||coders/xwd.c": [
      "File: coders/xwd.c -> coders/xwd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     Check to see if the dump file is in the proper format.",
      "241:   if (header.file_version != XWD_FILE_VERSION)",
      "242:     ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");",
      "243:   if (header.header_size < sz_XWDheader)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241:   if (header.file_version != XWD_FILE_VERSION)",
      "242:     ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "251:         ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
      "252:       break;",
      "253:     }",
      "255:     case PseudoColor:",
      "256:     {",
      "257:       if ((header.bits_per_pixel < 1) || (header.bits_per_pixel > 15) ||",
      "",
      "[Removed Lines]",
      "254:     case StaticColor:",
      "",
      "[Added Lines]",
      "256:     case StaticColor:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "318:   {",
      "319:     case LSBFirst:",
      "320:     case MSBFirst:",
      "323:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
      "324:   }",
      "325:   if (header.ncolors > 65535)",
      "",
      "[Removed Lines]",
      "321:       break;",
      "322:     default:",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "387:   authentic_colormap=MagickFalse;",
      "388:   colors=(XColor *) NULL;",
      "389:   if (header.ncolors != 0)",
      "392:         color;",
      "394:       colors=(XColor *) AcquireQuantumMemory((size_t) header.ncolors,",
      "",
      "[Removed Lines]",
      "390:     {",
      "391:       XWDColor",
      "",
      "[Added Lines]",
      "390:     {",
      "391:       XWDColor",
      "392:         color;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "691:   entry=AcquireMagickInfo(\"XWD\",\"XWD\",\"X Windows system window dump (color)\");",
      "692: #if defined(MAGICKCORE_X11_DELEGATE)",
      "693:   entry->decoder=(DecodeImageHandler *) ReadXWDImage;",
      "694:   entry->encoder=(EncodeImageHandler *) WriteXWDImage;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "694: #if defined(MAGICKCORE_X11_DELEGATE)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "429e32167d55f505ce5644c3cefeb757dbe32bea",
      "candidate_info": {
        "commit_hash": "429e32167d55f505ce5644c3cefeb757dbe32bea",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/429e32167d55f505ce5644c3cefeb757dbe32bea",
        "files": [
          "coders/xwd.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "coders/xwd.c||coders/xwd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/xwd.c||coders/xwd.c"
          ],
          "candidate": [
            "coders/xwd.c||coders/xwd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/xwd.c||coders/xwd.c": [
          "File: coders/xwd.c -> coders/xwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     Check to see if the dump file is in the proper format.",
          "252:   if (header.bitmap_unit > 32)",
          "253:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "254:   if (header.ncolors > 256)",
          "255:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "256:   switch (header.visual_class)",
          "257:   {",
          "258:     case StaticGray:",
          "259:     case GrayScale:",
          "260:     case StaticColor:",
          "261:     case PseudoColor:",
          "262:     case TrueColor:",
          "263:     case DirectColor:",
          "264:       break;",
          "265:     default:",
          "266:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "267:   }",
          "268:   switch (header.pixmap_format)",
          "269:   {",
          "270:     case XYBitmap:",
          "271:     case XYPixmap:",
          "272:     case ZPixmap:",
          "273:       break;",
          "274:     default:",
          "275:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "241:   if (header.file_version != XWD_FILE_VERSION)",
          "242:     ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");",
          "243:   if (header.header_size < sz_XWDheader)",
          "244:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "245:   if ((header.bits_per_pixel == 0) || (header.bits_per_pixel > 32))",
          "246:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "247:   if ((header.bitmap_bit_order != MSBFirst) &&",
          "248:       (header.bitmap_bit_order != LSBFirst))",
          "249:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "250:   if (((header.bitmap_pad % 8) != 0) || (header.bitmap_pad > 32))",
          "251:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Added Lines]",
          "245:   switch (header.visual_class)",
          "246:   {",
          "247:     case StaticGray:",
          "248:     case GrayScale:",
          "249:     {",
          "252:       break;",
          "253:     }",
          "254:     case StaticColor:",
          "255:     case PseudoColor:",
          "256:     {",
          "257:       if ((header.bits_per_pixel < 1) || (header.bits_per_pixel > 15) ||",
          "260:       break;",
          "261:     }",
          "262:     case TrueColor:",
          "263:     case DirectColor:",
          "265:       if ((header.bits_per_pixel != 16) && (header.bits_per_pixel != 24) &&",
          "272:   }",
          "273:   switch (header.pixmap_format)",
          "274:   {",
          "275:     case XYBitmap:",
          "276:     {",
          "279:       break;",
          "280:     }",
          "281:     case XYPixmap:",
          "282:     case ZPixmap:",
          "283:     {",
          "284:       if ((header.pixmap_depth < 1) || (header.pixmap_depth > 32))",
          "285:         ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "286:       switch (header.bitmap_pad)",
          "287:       {",
          "288:         case 8:",
          "289:         case 16:",
          "290:         case 32:",
          "291:           break;",
          "292:         default:",
          "293:           ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "294:       }",
          "295:       break;",
          "296:     }",
          "297:     default:",
          "298:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "299:   }",
          "300:   switch (header.bitmap_unit)",
          "301:   {",
          "302:     case 8:",
          "303:     case 16:",
          "304:     case 32:",
          "305:       break;",
          "306:     default:",
          "307:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "308:   }",
          "313:       break;",
          "314:     default:",
          "315:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "316:   }",
          "317:   switch (header.bitmap_bit_order)",
          "318:   {",
          "319:     case LSBFirst:",
          "320:     case MSBFirst:",
          "321:       break;",
          "322:     default:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "623297e5f42fc19a95718f9d81db2f3672a6dc3a",
      "candidate_info": {
        "commit_hash": "623297e5f42fc19a95718f9d81db2f3672a6dc3a",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/623297e5f42fc19a95718f9d81db2f3672a6dc3a",
        "files": [
          "coders/xwd.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "coders/xwd.c||coders/xwd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/xwd.c||coders/xwd.c"
          ],
          "candidate": [
            "coders/xwd.c||coders/xwd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/xwd.c||coders/xwd.c": [
          "File: coders/xwd.c -> coders/xwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     Check to see if the dump file is in the proper format.",
          "242:     ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");",
          "243:   if (header.header_size < sz_XWDheader)",
          "244:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "241:   if (header.file_version != XWD_FILE_VERSION)",
          "",
          "[Added Lines]",
          "241:   if (header.file_version != XWD_FILE_VERSION)",
          "242:     ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");",
          "243:   if (header.header_size < sz_XWDheader)",
          "244:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "245:   if (header.xoffset >= header.pixmap_width)",
          "246:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:   ximage->byte_order=(int) header.byte_order;",
          "354:   ximage->bitmap_unit=(int) header.bitmap_unit;",
          "355:   ximage->bitmap_bit_order=(int) header.bitmap_bit_order;",
          "360:   if ((ximage->width < 0) || (ximage->height < 0) || (ximage->depth < 0) ||",
          "361:       (ximage->format < 0) || (ximage->byte_order < 0) ||",
          "362:       (ximage->bitmap_bit_order < 0) || (ximage->bitmap_pad < 0) ||",
          "",
          "[Removed Lines]",
          "356:   ximage->bits_per_pixel=(int) header.bits_per_pixel;",
          "357:   ximage->red_mask=header.red_mask;",
          "358:   ximage->green_mask=header.green_mask;",
          "359:   ximage->blue_mask=header.blue_mask;",
          "",
          "[Added Lines]",
          "361:   ximage->bits_per_pixel=(int) header.bits_per_pixel;",
          "362:   ximage->red_mask=header.red_mask;",
          "363:   ximage->green_mask=header.green_mask;",
          "364:   ximage->blue_mask=header.blue_mask;",
          "365:   if ((ximage->depth < 0) || (ximage->format < 0) || (ximage->xoffset < 0) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "693:   entry=AcquireMagickInfo(\"XWD\",\"XWD\",\"X Windows system window dump (color)\");",
          "695:   entry->decoder=(DecodeImageHandler *) ReadXWDImage;",
          "696:   entry->encoder=(EncodeImageHandler *) WriteXWDImage;",
          "697: #endif",
          "",
          "[Removed Lines]",
          "694: #if defined(MAGICKCORE_X11_DELEGATE)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dabba008c570fd2fc25d6f990e65d0db28c663c7",
      "candidate_info": {
        "commit_hash": "dabba008c570fd2fc25d6f990e65d0db28c663c7",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/dabba008c570fd2fc25d6f990e65d0db28c663c7",
        "files": [
          "coders/xwd.c"
        ],
        "message": "...",
        "before_after_code_files": [
          "coders/xwd.c||coders/xwd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/xwd.c||coders/xwd.c"
          ],
          "candidate": [
            "coders/xwd.c||coders/xwd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/xwd.c||coders/xwd.c": [
          "File: coders/xwd.c -> coders/xwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   authentic_colormap=MagickFalse;",
          "388:   colors=(XColor *) NULL;",
          "389:   if (header.ncolors != 0)",
          "394:       length=(size_t) header.ncolors;",
          "395:       if (length > ((~0UL)/sizeof(*colors)))",
          "396:         ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "390:     {",
          "391:       XWDColor",
          "392:         color;",
          "",
          "[Added Lines]",
          "390:     {",
          "391:       XWDColor",
          "",
          "---------------"
        ]
      }
    }
  ]
}