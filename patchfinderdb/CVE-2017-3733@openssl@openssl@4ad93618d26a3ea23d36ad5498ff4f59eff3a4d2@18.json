{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
      "candidate_info": {
        "commit_hash": "f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f4cdd19a6a8a0845c08c8101538347f2d5a0d96c",
        "files": [
          "test/recipes/80-test_ssl_new.t"
        ],
        "message": "VMS fix of test/recipes/80-test_ssl_new.t\n\nOn VMS, file names with more than one period get all but the last get\nescaped with a ^, so 21-key-update.conf.in becomes 21-key-update^.conf.in\nThat means that %conf_dependent_tests and %skip become useless unless\nwe massage the file names that are used as indexes.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2678)\n(cherry picked from commit d89f66412ba5168e7d6fd9dd88619d927d716f55)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t": [
          "File: test/recipes/80-test_ssl_new.t -> test/recipes/80-test_ssl_new.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: my @conf_srcs =  glob(srctop_file(\"test\", \"ssl-tests\", \"*.conf.in\"));",
          "26: map { s/;.*// } @conf_srcs if $^O eq \"VMS\";",
          "30: # We hard-code the number of tests to double-check that the globbing above",
          "31: # finds all files as expected.",
          "",
          "[Removed Lines]",
          "27: my @conf_files = map { basename($_) } @conf_srcs;",
          "28: map { s/\\.in// } @conf_files;",
          "",
          "[Added Lines]",
          "27: my @conf_files = map { basename($_, \".in\") } @conf_srcs;",
          "28: map { s/\\^// } @conf_files if $^O eq \"VMS\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb879b098f90745a0394005f38b481c68b74ad4",
      "candidate_info": {
        "commit_hash": "feb879b098f90745a0394005f38b481c68b74ad4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/feb879b098f90745a0394005f38b481c68b74ad4",
        "files": [
          "crypto/ui/ui_openssl.c"
        ],
        "message": "VMS UI_OpenSSL: if the TT device isn't a tty, flag instead of error\n\nOn all platforms, if the controlling tty isn't an actual tty, this is\nflagged by setting is_a_tty to zero...  except on VMS, where this was\ntreated as an error.  Change this to behave like the other platforms.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2063)\n(cherry picked from commit 18edbe6519bd5b738bf410b23f437df3005526e3)",
        "before_after_code_files": [
          "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c": [
          "File: crypto/ui/ui_openssl.c -> crypto/ui/ui_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: #endif",
          "446: #ifdef OPENSSL_SYS_VMS",
          "447:     status = sys$assign(&terminal, &channel, 0, 0);",
          "448:     if (status != SS$_NORMAL)",
          "449:         return 0;",
          "453:     if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))",
          "455: #endif",
          "456:     return 1;",
          "457: }",
          "",
          "[Removed Lines]",
          "450:     status =",
          "451:         sys$qiow(0, channel, IO$_SENSEMODE, &iosb, 0, 0, tty_orig, 12, 0, 0,",
          "452:                  0, 0);",
          "454:         return 0;",
          "",
          "[Added Lines]",
          "453:     status = sys$qiow(0, channel, IO$_SENSEMODE, &iosb, 0, 0, tty_orig, 12,",
          "454:                       0, 0, 0, 0);",
          "458:         is_a_tty = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:         return 0;",
          "469: #endif",
          "470: #ifdef OPENSSL_SYS_VMS",
          "479: #endif",
          "480: #if defined(_WIN32) && !defined(_WIN32_WCE)",
          "481:     if (is_a_tty) {",
          "",
          "[Removed Lines]",
          "471:     tty_new[0] = tty_orig[0];",
          "472:     tty_new[1] = tty_orig[1] | TT$M_NOECHO;",
          "473:     tty_new[2] = tty_orig[2];",
          "474:     status =",
          "475:         sys$qiow(0, channel, IO$_SETMODE, &iosb, 0, 0, tty_new, 12, 0, 0, 0,",
          "476:                  0);",
          "477:     if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))",
          "478:         return 0;",
          "",
          "[Added Lines]",
          "475:     if (is_a_tty) {",
          "476:         tty_new[0] = tty_orig[0];",
          "477:         tty_new[1] = tty_orig[1] | TT$M_NOECHO;",
          "478:         tty_new[2] = tty_orig[2];",
          "479:         status = sys$qiow(0, channel, IO$_SETMODE, &iosb, 0, 0, tty_new, 12,",
          "480:                           0, 0, 0, 0);",
          "481:         if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))",
          "482:             return 0;",
          "483:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:         return 0;",
          "500: #endif",
          "501: #ifdef OPENSSL_SYS_VMS",
          "510: #endif",
          "511: #if defined(_WIN32) && !defined(_WIN32_WCE)",
          "512:     if (is_a_tty) {",
          "",
          "[Removed Lines]",
          "502:     tty_new[0] = tty_orig[0];",
          "503:     tty_new[1] = tty_orig[1] & ~TT$M_NOECHO;",
          "504:     tty_new[2] = tty_orig[2];",
          "505:     status =",
          "506:         sys$qiow(0, channel, IO$_SETMODE, &iosb, 0, 0, tty_new, 12, 0, 0, 0,",
          "507:                  0);",
          "508:     if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))",
          "509:         return 0;",
          "",
          "[Added Lines]",
          "507:     if (is_a_tty) {",
          "508:         tty_new[0] = tty_orig[0];",
          "509:         tty_new[1] = tty_orig[1] & ~TT$M_NOECHO;",
          "510:         tty_new[2] = tty_orig[2];",
          "511:         status = sys$qiow(0, channel, IO$_SETMODE, &iosb, 0, 0, tty_new, 12,",
          "512:                           0, 0, 0, 0);",
          "513:         if ((status != SS$_NORMAL) || (iosb.iosb$w_value != SS$_NORMAL))",
          "514:             return 0;",
          "515:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "526:         fclose(tty_out);",
          "527: #ifdef OPENSSL_SYS_VMS",
          "528:     status = sys$dassgn(channel);",
          "529: #endif",
          "530:     CRYPTO_THREAD_unlock(ui->lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:     if (status != SS$_NORMAL)",
          "536:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf1c92faf6d3adba62165432164f5732da3d99c9",
      "candidate_info": {
        "commit_hash": "bf1c92faf6d3adba62165432164f5732da3d99c9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bf1c92faf6d3adba62165432164f5732da3d99c9",
        "files": [
          "apps/pkcs8.c"
        ],
        "message": "Increase the password buffer size to APP_PASS_LEN.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2868)\n(cherry picked from commit bf580d5f30368f7ebc4c44f10575b5f0b411d594)",
        "before_after_code_files": [
          "apps/pkcs8.c||apps/pkcs8.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/pkcs8.c||apps/pkcs8.c": [
          "File: apps/pkcs8.c -> apps/pkcs8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     char *infile = NULL, *outfile = NULL;",
          "67:     char *passinarg = NULL, *passoutarg = NULL, *prog;",
          "68: #ifndef OPENSSL_NO_UI",
          "70: #endif",
          "71:     char *passin = NULL, *passout = NULL, *p8pass = NULL;",
          "72:     OPTION_CHOICE o;",
          "",
          "[Removed Lines]",
          "69:     char pass[50];",
          "",
          "[Added Lines]",
          "69:     char pass[APP_PASS_LEN];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5d82af6ef4e300784f3e59346030cd30bcce30e",
      "candidate_info": {
        "commit_hash": "f5d82af6ef4e300784f3e59346030cd30bcce30e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f5d82af6ef4e300784f3e59346030cd30bcce30e",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engines/e_capi.c: formatting and styling fixes.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit e08b444ac097825b10d3b90dbdb0d7197567cc4d)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: # endif",
          "71: # ifndef ALG_SID_SHA_256",
          "73: # endif",
          "74: # ifndef ALG_SID_SHA_384",
          "76: # endif",
          "77: # ifndef ALG_SID_SHA_512",
          "79: # endif",
          "81: # ifndef CALG_SHA_256",
          "83: # endif",
          "84: # ifndef CALG_SHA_384",
          "86: # endif",
          "87: # ifndef CALG_SHA_512",
          "89: # endif",
          "91: # ifndef PROV_RSA_AES",
          "",
          "[Removed Lines]",
          "72: #  define ALG_SID_SHA_256                 12",
          "75: #  define ALG_SID_SHA_384                 13",
          "78: #  define ALG_SID_SHA_512                 14",
          "82: #  define CALG_SHA_256            (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_256)",
          "85: #  define CALG_SHA_384            (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_384)",
          "88: #  define CALG_SHA_512            (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_512)",
          "",
          "[Added Lines]",
          "72: #  define ALG_SID_SHA_256   12",
          "75: #  define ALG_SID_SHA_384   13",
          "78: #  define ALG_SID_SHA_512   14",
          "82: #  define CALG_SHA_256      (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_256)",
          "85: #  define CALG_SHA_384      (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_384)",
          "88: #  define CALG_SHA_512      (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_512)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151: void engine_load_capi_int(void);",
          "",
          "[Removed Lines]",
          "153: typedef PCCERT_CONTEXT(WINAPI *CERTDLG) (HCERTSTORE, HWND, LPCWSTR,",
          "154:                                          LPCWSTR, DWORD, DWORD, void *);",
          "155: typedef HWND(WINAPI *GETCONSWIN) (void);",
          "",
          "[Added Lines]",
          "153: typedef PCCERT_CONTEXT(WINAPI *CERTDLG)(HCERTSTORE, HWND, LPCWSTR,",
          "154:                                         LPCWSTR, DWORD, DWORD, void *);",
          "155: typedef HWND(WINAPI *GETCONSWIN)(void);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     DWORD store_flags;",
          "184:     int lookup_method;",
          "198:     DWORD dump_flags;",
          "199:     int (*client_cert_select) (ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);",
          "200:     CERTDLG certselectdlg;",
          "",
          "[Removed Lines]",
          "179: # define CAPI_LU_SUBSTR          1",
          "181: # define CAPI_LU_FNAME           2",
          "183: # define CAPI_LU_CONTNAME        3",
          "187: # define CAPI_DMP_SUMMARY        0x1",
          "189: # define CAPI_DMP_FNAME          0x2",
          "191: # define CAPI_DMP_FULL           0x4",
          "193: # define CAPI_DMP_PEM            0x8",
          "195: # define CAPI_DMP_PSKEY          0x10",
          "197: # define CAPI_DMP_PKEYINFO       0x20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "961:         capi_addlasterror();",
          "962:         OPENSSL_free(tmpbuf);",
          "963:         return -1;",
          "965:         memcpy(to, tmpbuf, (flen = (int)dlen));",
          "967:     OPENSSL_free(tmpbuf);",
          "969:     return flen;",
          "",
          "[Removed Lines]",
          "964:     } else",
          "",
          "[Added Lines]",
          "955:     } else {",
          "957:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1154:         OPENSSL_free(name);",
          "1155:         if (*pname == NULL)",
          "1156:             return 0;",
          "1159:     CAPI_trace(ctx, \"capi_get_provname, returned name=%s, type=%d\\n\", *pname,",
          "",
          "[Removed Lines]",
          "1157:     } else",
          "",
          "[Added Lines]",
          "1148:     } else {",
          "1150:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1192:     CAPI_trace(ctx, \"Listing containers CSP=%s, type = %d\\n\", ctx->cspname,",
          "1193:                ctx->csptype);",
          "1194:     if (ctx->cspname && sizeof(TCHAR) != sizeof(char)) {",
          "1197:             cspname = alloca(clen * sizeof(WCHAR));",
          "1198:             MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, (WCHAR *)cspname,",
          "1199:                                 clen);",
          "",
          "[Removed Lines]",
          "1195:         if ((clen =",
          "1196:              MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, NULL, 0))) {",
          "",
          "[Added Lines]",
          "1187:         if ((clen = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1188:                                         NULL, 0))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1203:             capi_addlasterror();",
          "1204:             return 0;",
          "1205:         }",
          "1207:         cspname = (TCHAR *)ctx->cspname;",
          "1210:         CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS,",
          "1211:                 CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1212:         capi_addlasterror();",
          "1213:         return 0;",
          "1214:     }",
          "1217:         CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS, CAPI_R_ENUMCONTAINERS_ERROR);",
          "1218:         capi_addlasterror();",
          "1219:         CryptReleaseContext(hprov, 0);",
          "",
          "[Removed Lines]",
          "1206:     } else",
          "1208:     if (!CryptAcquireContext",
          "1209:         (&hprov, NULL, cspname, ctx->csptype, CRYPT_VERIFYCONTEXT)) {",
          "1215:     if (!CryptGetProvParam",
          "1216:         (hprov, PP_ENUMCONTAINERS, NULL, &buflen, CRYPT_FIRST)) {",
          "",
          "[Added Lines]",
          "1198:     } else {",
          "1200:     }",
          "1201:     if (!CryptAcquireContext(&hprov, NULL, cspname, ctx->csptype,",
          "1202:                              CRYPT_VERIFYCONTEXT)) {",
          "1208:     if (!CryptGetProvParam(hprov, PP_ENUMCONTAINERS, NULL, &buflen,",
          "1209:                            CRYPT_FIRST)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1236:             flags = CRYPT_FIRST;",
          "1237:         else",
          "1238:             flags = 0;",
          "1241:             err = GetLastError();",
          "1242:             if (err == ERROR_NO_MORE_ITEMS)",
          "1243:                 goto done;",
          "",
          "[Removed Lines]",
          "1239:         if (!CryptGetProvParam",
          "1240:             (hprov, PP_ENUMCONTAINERS, (BYTE *) cname, &clen, flags)) {",
          "",
          "[Added Lines]",
          "1232:         if (!CryptGetProvParam(hprov, PP_ENUMCONTAINERS, (BYTE *)cname,",
          "1233:                                &clen, flags)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1264:     return ret;",
          "1265: }",
          "1268: {",
          "1269:     DWORD len;",
          "1270:     CRYPT_KEY_PROV_INFO *pinfo;",
          "1274:         return NULL;",
          "1275:     pinfo = OPENSSL_malloc(len);",
          "1276:     if (pinfo == NULL) {",
          "1277:         CAPIerr(CAPI_F_CAPI_GET_PROV_INFO, ERR_R_MALLOC_FAILURE);",
          "1278:         return NULL;",
          "1279:     }",
          "1282:         CAPIerr(CAPI_F_CAPI_GET_PROV_INFO,",
          "1283:                 CAPI_R_ERROR_GETTING_KEY_PROVIDER_INFO);",
          "1284:         capi_addlasterror();",
          "",
          "[Removed Lines]",
          "1267: static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX * ctx, PCCERT_CONTEXT cert)",
          "1272:     if (!CertGetCertificateContextProperty",
          "1273:         (cert, CERT_KEY_PROV_INFO_PROP_ID, NULL, &len))",
          "1280:     if (!CertGetCertificateContextProperty",
          "1281:         (cert, CERT_KEY_PROV_INFO_PROP_ID, pinfo, &len)) {",
          "",
          "[Added Lines]",
          "1260: static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX * ctx,",
          "1261:                                                PCCERT_CONTEXT cert)",
          "1266:     if (!CertGetCertificateContextProperty(cert, CERT_KEY_PROV_INFO_PROP_ID,",
          "1267:                                            NULL, &len))",
          "1274:     if (!CertGetCertificateContextProperty(cert, CERT_KEY_PROV_INFO_PROP_ID,",
          "1275:                                            pinfo, &len)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1317:     DWORD dlen;",
          "1319:     CAPI_trace(ctx, \"capi_cert_get_fname\\n\");",
          "1322:         return NULL;",
          "1323:     wfname = OPENSSL_malloc(dlen);",
          "1324:     if (wfname == NULL)",
          "1325:         return NULL;",
          "1328:         char *fname = wide_to_asc(wfname);",
          "1329:         OPENSSL_free(wfname);",
          "1330:         return fname;",
          "",
          "[Removed Lines]",
          "1320:     if (!CertGetCertificateContextProperty",
          "1321:         (cert, CERT_FRIENDLY_NAME_PROP_ID, NULL, &dlen))",
          "1326:     if (CertGetCertificateContextProperty",
          "1327:         (cert, CERT_FRIENDLY_NAME_PROP_ID, wfname, &dlen)) {",
          "",
          "[Added Lines]",
          "1314:     if (!CertGetCertificateContextProperty(cert, CERT_FRIENDLY_NAME_PROP_ID,",
          "1315:                                            NULL, &dlen))",
          "1320:     if (CertGetCertificateContextProperty(cert, CERT_FRIENDLY_NAME_PROP_ID,",
          "1321:                                           wfname, &dlen)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1347:         if (fname) {",
          "1348:             BIO_printf(out, \"  Friendly Name \\\"%s\\\"\\n\", fname);",
          "1349:             OPENSSL_free(fname);",
          "1351:             BIO_printf(out, \"  <No Friendly Name>\\n\");",
          "1352:     }",
          "1354:     p = cert->pbCertEncoded;",
          "",
          "[Removed Lines]",
          "1350:         } else",
          "",
          "[Added Lines]",
          "1344:         } else {",
          "1346:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1442:     int match;",
          "1443:     switch (ctx->lookup_method) {",
          "1444:     case CAPI_LU_SUBSTR:",
          "1447:                                           CERT_FIND_SUBJECT_STR_A, id, NULL);",
          "1448:     case CAPI_LU_FNAME:",
          "1449:         for (;;) {",
          "",
          "[Removed Lines]",
          "1445:         return CertFindCertificateInStore(hstore,",
          "1446:                                           X509_ASN_ENCODING, 0,",
          "",
          "[Added Lines]",
          "1440:         return CertFindCertificateInStore(hstore, X509_ASN_ENCODING, 0,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1569:             if ((len = MultiByteToWideChar(CP_ACP, 0, id, -1, NULL, 0)) &&",
          "1570:                 (contname = alloca(len * sizeof(WCHAR)),",
          "1571:                  MultiByteToWideChar(CP_ACP, 0, id, -1, contname, len)) &&",
          "1587:                                ctx->csptype, ctx->keytype);",
          "1588:         break;",
          "1589:     }",
          "",
          "[Removed Lines]",
          "1572:                 (len =",
          "1573:                  MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, NULL, 0))",
          "1574:                 && (provname =",
          "1575:                     alloca(len * sizeof(WCHAR)), MultiByteToWideChar(CP_ACP,",
          "1576:                                                                      0,",
          "1577:                                                                      ctx->cspname,",
          "1578:                                                                      -1,",
          "1579:                                                                      provname,",
          "1580:                                                                      len)))",
          "1581:                 key =",
          "1582:                     capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1583:                                  ctx->csptype, ctx->keytype);",
          "1584:         } else",
          "1585:             key = capi_get_key(ctx, (TCHAR *)id,",
          "1586:                                (TCHAR *)ctx->cspname,",
          "",
          "[Added Lines]",
          "1566:                 (len = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1567:                                            NULL, 0)) &&",
          "1568:                 (provname = alloca(len * sizeof(WCHAR)),",
          "1569:                  MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1570:                                      provname, len)))",
          "1571:                 key = capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1572:                                    ctx->csptype, ctx->keytype);",
          "1573:         } else {",
          "1574:             key = capi_get_key(ctx, (TCHAR *)id, (TCHAR *)ctx->cspname,",
          "1576:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1650:                 name = alloca(len * sizeof(WCHAR));",
          "1651:                 MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);",
          "1652:             }",
          "1654:             name = (TCHAR *)pname;",
          "1656:         if (!name || !CryptAcquireContext(&hprov, NULL, name, type,",
          "1657:                                           CRYPT_VERIFYCONTEXT)) {",
          "1658:             CAPIerr(CAPI_F_CAPI_CTX_SET_PROVNAME,",
          "",
          "[Removed Lines]",
          "1653:         } else",
          "",
          "[Added Lines]",
          "1642:         } else {",
          "1644:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1757:                 certs = sk_X509_new_null();",
          "1759:             sk_X509_push(certs, x);",
          "1761:             X509_free(x);",
          "1763:     }",
          "1765:     if (cert)",
          "",
          "[Removed Lines]",
          "1760:         } else",
          "",
          "[Added Lines]",
          "1749:         } else {",
          "1751:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8d3b66971dab2b54dd0946d85fd45a2470714a8",
      "candidate_info": {
        "commit_hash": "d8d3b66971dab2b54dd0946d85fd45a2470714a8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d8d3b66971dab2b54dd0946d85fd45a2470714a8",
        "files": [
          "apps/rehash.c"
        ],
        "message": "Make \"openssl rehash\" work on VMS 8.3 and up\n\nA spelling error prevented it from building correctly.\nFurthermore, we need to be more careful when to add a / at the end\nof the dirname and when not.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2706)\n(cherry picked from commit 5c80e2af3a7d8aa5129a1668c286c1464983e1ac)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"apps.h\"",
          "18: #if defined(OPENSSL_SYS_UNIX) || defined(__APPLE__) || \\",
          "20: # include <unistd.h>",
          "21: # include <stdio.h>",
          "22: # include <limits.h>",
          "",
          "[Removed Lines]",
          "19:     (defined(__VMS) && defined(__DECC) && __CTRL_VER >= 80300000)",
          "",
          "[Added Lines]",
          "19:     (defined(__VMS) && defined(__DECC) && __CRTL_VER >= 80300000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     OPENSSL_free(s);",
          "268: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: static int ends_with_dirsep(const char *path)",
          "271: {",
          "272:     if (*path != '\\0')",
          "273:         path += strlen(path) - 1;",
          "274: # ifdef __VMS",
          "275:     if (*path == ']' || *path == '>' || *path == ':')",
          "276:         return 1;",
          "277: # elif _WIN32",
          "278:     if (*path == '\\\\')",
          "279:         return 1;",
          "280: # endif",
          "281:     return *path == '/';",
          "282: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:         return 1;",
          "290:     }",
          "291:     buflen = strlen(dirname);",
          "293:     buflen += NAME_MAX + 1 + 1;",
          "294:     buf = app_malloc(buflen, \"filename buffer\");",
          "",
          "[Removed Lines]",
          "292:     pathsep = (buflen && dirname[buflen - 1] == '/') ? \"\" : \"/\";",
          "",
          "[Added Lines]",
          "306:     pathsep = (buflen && !ends_with_dirsep(dirname)) ? \"/\": \"\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}