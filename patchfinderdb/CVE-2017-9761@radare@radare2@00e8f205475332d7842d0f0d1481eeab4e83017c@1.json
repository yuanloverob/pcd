{
  "cve_id": "CVE-2017-9761",
  "cve_desc": "The find_eoq function in libr/core/cmd.c in radare2 1.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted binary file.",
  "repo": "radare/radare2",
  "patch_hash": "00e8f205475332d7842d0f0d1481eeab4e83017c",
  "patch_info": {
    "commit_hash": "00e8f205475332d7842d0f0d1481eeab4e83017c",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/00e8f205475332d7842d0f0d1481eeab4e83017c",
    "files": [
      "libr/core/cmd.c",
      "libr/core/cmd_info.c"
    ],
    "message": "Fix #7727 - undefined pointers and out of band string access fixes",
    "before_after_code_files": [
      "libr/core/cmd.c||libr/core/cmd.c",
      "libr/core/cmd_info.c||libr/core/cmd_info.c"
    ]
  },
  "patch_diff": {
    "libr/core/cmd.c||libr/core/cmd.c": [
      "File: libr/core/cmd.c -> libr/core/cmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1443:    if (haveQuote) {",
      "1445:     cmd++;",
      "1447:     if (!p || !*p) {",
      "1448:      eprintf (\"Missing \\\" in (%s).\", cmd);",
      "1449:      return false;",
      "",
      "[Removed Lines]",
      "1446:     p = find_eoq (cmd + 1);",
      "",
      "[Added Lines]",
      "1446:     p = cmd[0] ? find_eoq (cmd + 1) : NULL;",
      "",
      "---------------"
    ],
    "libr/core/cmd_info.c||libr/core/cmd_info.c": [
      "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     break;",
      "396:    }",
      "397:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
      "399:   case 'L':",
      "400:   {",
      "401:    char *ptr = strchr (input, ' ');",
      "",
      "[Removed Lines]",
      "398:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0); break;",
      "",
      "[Added Lines]",
      "398:   case 'l':",
      "399:      {",
      "400:       RBinObject *obj = r_bin_cur_object (core->bin);",
      "401:       RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0);",
      "402:      }",
      "403:      break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "444:    break;",
      "445:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
      "446:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;",
      "448:   case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL, 0); break;",
      "449:   case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL, 0); break;",
      "450:   case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL, 0); break;",
      "",
      "[Removed Lines]",
      "447:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, obj? r_list_length (obj->imports): 0); break;",
      "",
      "[Added Lines]",
      "452:   case 'i': {",
      "453:       RBinObject *obj = r_bin_cur_object (core->bin);",
      "454:       RBININFO (\"imports\", R_CORE_BIN_ACC_IMPORTS, NULL,",
      "455:         obj? r_list_length (obj->imports): 0);",
      "456:      }",
      "457:      break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14ff70e4e7acc688cfc5318c52af92a1db8a1101",
      "candidate_info": {
        "commit_hash": "14ff70e4e7acc688cfc5318c52af92a1db8a1101",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/14ff70e4e7acc688cfc5318c52af92a1db8a1101",
        "files": [
          "libr/core/cconfig.c",
          "libr/core/cmd_info.c"
        ],
        "message": "Implement scr.tts and some i subcommands",
        "before_after_code_files": [
          "libr/core/cconfig.c||libr/core/cconfig.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ],
          "candidate": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cconfig.c||libr/core/cconfig.c": [
          "File: libr/core/cconfig.c -> libr/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2140:  SETPREF(\"scr.promptfile\", \"false\", \"Show user prompt file (used by r2 -q)\");",
          "2141:  SETPREF(\"scr.promptflag\", \"false\", \"Show flag name in the prompt\");",
          "2142:  SETPREF(\"scr.promptsect\", \"false\", \"Show section name in the prompt\");",
          "2143:  SETCB(\"scr.prompt\", \"true\", &cb_scrprompt, \"Show user prompt (used by r2 -q)\");",
          "2144:  SETCB(\"scr.tee\", \"\", &cb_teefile, \"Pipe output to file of this name\");",
          "2145:  SETPREF(\"scr.seek\", \"\", \"Seek to the specified address on startup\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2143:  SETPREF(\"scr.tts\", \"true\", \"Use tts if available by a command (see ic)\");",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:    r_core_bin_info (core, R_CORE_BIN_ACC_INFO,",
          "187:     mode, va, NULL, NULL);",
          "188:   }",
          "190:    r_cons_printf (\"}\\n\");",
          "192: }",
          "194: static int cmd_info(void *data, const char *input) {",
          "",
          "[Removed Lines]",
          "189:   if (mode == R_CORE_BIN_JSON && array == 0)",
          "191:  } else eprintf (\"No file selected\\n\");",
          "",
          "[Added Lines]",
          "189:   if (mode == R_CORE_BIN_JSON && array == 0) {",
          "191:   }",
          "192:  } else {",
          "193:   eprintf (\"No file selected\\n\");",
          "194:  }",
          "195: }",
          "197: static void playMsg(RCore *core, const char *n, int len) {",
          "198:  if (r_config_get_i (core->config, \"scr.tts\")) {",
          "199:   if (len > 0) {",
          "200:    char *s = r_str_newf (\"%d %s\", len, n);",
          "201:    r_sys_tts (s, true);",
          "202:    free (s);",
          "203:   } else if (len == 0) {",
          "204:    char *s = r_str_newf (\"there are no %s\", n);",
          "205:    r_sys_tts (s, true);",
          "206:    free (s);",
          "207:   }",
          "208:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:   if (strlen (input+1)>1)",
          "214:    is_array = 1;",
          "215:  }",
          "217:   r_cons_printf (\"{\");",
          "219:   cmd_info_bin (core, va, mode);",
          "221:  if (!strcmp (input, \"*\")) {",
          "222:   input = \"I*\";",
          "223:  }",
          "224:  while (*input) {",
          "225:   switch (*input) {",
          "226:   case 'b': // \"ib\"",
          "227:    {",
          "228:    ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
          "230:     baddr = r_num_math (core->num, input+1);",
          "",
          "[Removed Lines]",
          "216:  if (is_array)",
          "218:  if (!*input)",
          "229:    if (input[1]==' ')",
          "",
          "[Added Lines]",
          "233:  if (is_array) {",
          "235:  }",
          "236:  if (!*input) {",
          "238:  }",
          "243:  RBinObject *obj = r_bin_cur_object (core->bin);",
          "249:    if (input[1] == ' ') {",
          "251:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:     r_core_bin_load (core, fn, baddr);",
          "285:    }",
          "286:    break;",
          "288:  if (is_array) { \\",
          "289:   if (is_array == 1) is_array++; else r_cons_printf (\",\"); \\",
          "290:   r_cons_printf (\"\\\"%s\\\":\",n); \\",
          "291:  }\\",
          "292:  r_core_bin_info (core, x, mode, va, NULL, y);",
          "293:   case 'A':",
          "294:    newline = false;",
          "",
          "[Removed Lines]",
          "287:  #define RBININFO(n,x,y) \\",
          "",
          "[Added Lines]",
          "308:  #define RBININFO(n,x,y,z) \\",
          "313:  if (z) playMsg(core, n, z);\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:     r_bin_list_archs (core->bin, 1);",
          "301:    }",
          "302:    break;",
          "305:   case 'S':",
          "307:    if ((input[1] == 'm' && input[2] == 'z') || !input[1]) {",
          "309:    } else  { //iS entropy,sha1",
          "317:     while (*(++input));",
          "",
          "[Removed Lines]",
          "303:   case 'E': RBININFO (\"exports\", R_CORE_BIN_ACC_EXPORTS, NULL); break;",
          "304:   case 'Z': RBININFO (\"size\", R_CORE_BIN_ACC_SIZE, NULL); break;",
          "308:     RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, NULL);",
          "310:            if (mode == R_CORE_BIN_RADARE || mode == R_CORE_BIN_JSON || mode == R_CORE_BIN_SIMPLE) {",
          "311:                       RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 3);",
          "312:                   }",
          "313:                   else {",
          "314:                       RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2);",
          "315:                   }",
          "",
          "[Added Lines]",
          "325:   case 'E': RBININFO (\"exports\", R_CORE_BIN_ACC_EXPORTS, NULL, 0); break;",
          "326:   case 'Z': RBININFO (\"size\", R_CORE_BIN_ACC_SIZE, NULL, 0); break;",
          "330:     RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, NULL, 0);",
          "332:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "333:     if (mode == R_CORE_BIN_RADARE || mode == R_CORE_BIN_JSON || mode == R_CORE_BIN_SIMPLE) {",
          "334:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 3, r_list_length (obj->sections));",
          "335:     } else {",
          "336:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2, r_list_length (obj->sections));",
          "337:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:    break;",
          "323:   case 'H':",
          "324:    if (input[1] == 'H') { //iHH",
          "326:     break;",
          "327:    }",
          "330:   case 'L': r_bin_list (core->bin, input[1]=='j'); break;",
          "331:   case 's':",
          "332:    if (input[1] == '.') {",
          "",
          "[Removed Lines]",
          "325:     RBININFO (\"header\", R_CORE_BIN_ACC_HEADER, NULL);",
          "328:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL); break;",
          "329:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL); break;",
          "",
          "[Added Lines]",
          "347:     RBININFO (\"header\", R_CORE_BIN_ACC_HEADER, NULL, -1);",
          "350:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
          "351:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, r_list_length (obj->libs)); break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "342:     input++;",
          "343:     break;",
          "344:    } else {",
          "346:     break;",
          "347:    }",
          "348:   case 'R':",
          "358:   case 'z':",
          "359:    if (input[1] == 'z') { //izz",
          "360:     switch (input[2]) {",
          "",
          "[Removed Lines]",
          "345:      RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL);",
          "349:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL); break;",
          "350:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL); break;",
          "351:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL); break;",
          "352:   case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL); break;",
          "353:   case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL); break;",
          "354:   case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL); break;",
          "355:   case 'm': RBININFO (\"memory\", R_CORE_BIN_ACC_MEM, NULL); break;",
          "356:   case 'V': RBININFO (\"versioninfo\", R_CORE_BIN_ACC_VERSIONINFO, NULL); break;",
          "357:   case 'C': RBININFO (\"signature\", R_CORE_BIN_ACC_SIGNATURE, NULL); break;",
          "",
          "[Added Lines]",
          "367:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "368:     RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, r_list_length (obj->symbols));",
          "372:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
          "373:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;",
          "374:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, r_list_length (obj->imports)); break;",
          "375:   case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL, 0); break;",
          "376:   case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL, 0); break;",
          "377:   case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL, 0); break;",
          "378:   case 'm': RBININFO (\"memory\", R_CORE_BIN_ACC_MEM, NULL, 0); break;",
          "379:   case 'V': RBININFO (\"versioninfo\", R_CORE_BIN_ACC_VERSIONINFO, NULL, 0); break;",
          "380:   case 'C': RBININFO (\"signature\", R_CORE_BIN_ACC_SIGNATURE, NULL, 0); break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377:      break;",
          "378:     }",
          "379:     input++;",
          "381:    } else {",
          "382:         if (input[1] == 'q') {",
          "383:      mode = (input[2] == 'q')",
          "384:       ? R_CORE_BIN_SIMPLEST",
          "385:       : R_CORE_BIN_SIMPLE;",
          "386:      input++;",
          "387:     }",
          "389:    }",
          "390:    break;",
          "391:   case 'c': // for r2 `ic`",
          "",
          "[Removed Lines]",
          "380:     RBININFO (\"strings\", R_CORE_BIN_ACC_RAW_STRINGS, NULL);",
          "388:     RBININFO (\"strings\", R_CORE_BIN_ACC_STRINGS, NULL);",
          "",
          "[Added Lines]",
          "403:     RBININFO (\"strings\", R_CORE_BIN_ACC_RAW_STRINGS, NULL, 0);",
          "405:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "412:     RBININFO (\"strings\", R_CORE_BIN_ACC_STRINGS, NULL, r_list_length (obj->strings));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "441:       goto done;",
          "442:      }",
          "443:     } else {",
          "444:      if (input[1] == 'l' && obj) { // \"icl\"",
          "445:       r_list_foreach (obj->classes, iter, cls) {",
          "446:        r_list_foreach (cls->methods, iter2, sym) {",
          "447:         const char *comma = iter2->p? \" \": \"\";",
          "448:         r_cons_printf (\"%s0x%\"PFMT64d, comma, sym->vaddr);",
          "449:        }",
          "451:         r_cons_newline ();",
          "452:       }",
          "453:      } else {",
          "455:      }",
          "456:     }",
          "457:    } else {",
          "459:    }",
          "460:    break;",
          "461:   case 'D':",
          "463:     eprintf (\"|Usage: iD lang symbolname\\n\");",
          "464:    }",
          "465:    return 0;",
          "",
          "[Removed Lines]",
          "450:        if (!r_list_empty (cls->methods))",
          "454:       RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL);",
          "458:     RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL);",
          "462:    if (input[1]!=' ' || !demangle (core, input+2)) {",
          "",
          "[Added Lines]",
          "468:      playMsg (core, \"classes\", r_list_length (obj->classes));",
          "475:        if (!r_list_empty (cls->methods)) {",
          "477:        }",
          "480:       RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL, r_list_length (obj->classes));",
          "484:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "485:     int len = r_list_length (obj->classes);",
          "486:     RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL, len);",
          "490:    if (input[1]!=' ' || !demangle (core, input + 2)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64794df9078316eaab026a6b1c1d9a9431c002b5",
      "candidate_info": {
        "commit_hash": "64794df9078316eaab026a6b1c1d9a9431c002b5",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/64794df9078316eaab026a6b1c1d9a9431c002b5",
        "files": [
          "binr/rabin2/rabin2.c",
          "libr/bin/pdb/pdb_downloader.c",
          "libr/bin/pdb/pdb_downloader.h",
          "libr/core/cmd_info.c"
        ],
        "message": "Added idpd to download pdb file and automated idp (#7897)",
        "before_after_code_files": [
          "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c",
          "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c",
          "libr/bin/pdb/pdb_downloader.h||libr/bin/pdb/pdb_downloader.h",
          "libr/core/cmd_info.c||libr/core/cmd_info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ],
          "candidate": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ]
        }
      },
      "candidate_diff": {
        "binr/rabin2/rabin2.c||binr/rabin2/rabin2.c": [
          "File: binr/rabin2/rabin2.c -> binr/rabin2/rabin2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1000:   free (arch_name);",
          "1001:  }",
          "1002:  if (action & R_BIN_REQ_PDB_DWNLD) {",
          "1056:   r_core_fini (&core);",
          "1058:  }",
          "1060:  if ((tmp = r_sys_getenv (\"RABIN2_PREFIX\"))) {",
          "",
          "[Removed Lines]",
          "1003:   int ret;",
          "1004:   char *path;",
          "1005:   SPDBDownloaderOpt opt;",
          "1006:   SPDBDownloader pdb_downloader;",
          "1007:   RBinInfo *info = r_bin_get_info (core.bin);",
          "1008:   char *env_pdbserver = r_sys_getenv (\"PDB_SERVER\");",
          "1009:   char *env_pdbextract = r_sys_getenv(\"PDB_EXTRACT\");",
          "1010:   char *env_useragent = r_sys_getenv(\"PDB_USER_AGENT\");",
          "1012:   if (!info || !info->debug_file_name) {",
          "1013:    eprintf (\"Can't find debug filename\\n\");",
          "1014:    r_core_fini (&core);",
          "1015:    return 1;",
          "1016:   }",
          "1018:   if (info->file) {",
          "1019:    path = r_file_dirname (info->file);",
          "1020:   } else {",
          "1021:    path = strdup (\".\");",
          "1022:   }",
          "1024:   if (env_pdbserver && *env_pdbserver) {",
          "1025:    r_config_set (core.config, \"pdb.server\", env_pdbserver);",
          "1026:   }",
          "1027:   if (env_useragent && *env_useragent) {",
          "1028:    r_config_set (core.config, \"pdb.useragent\", env_useragent);",
          "1029:   }",
          "1030:   if (env_pdbextract && *env_pdbextract) {",
          "1031:    r_config_set_i (core.config, \"pdb.extract\", !(*env_pdbextract == '0'));",
          "1032:   }",
          "1033:   free (env_pdbextract);",
          "1034:   free (env_useragent);",
          "1036:   opt.dbg_file = info->debug_file_name;",
          "1037:   opt.guid = info->guid;",
          "1038:   opt.symbol_server = (char *)r_config_get (core.config, \"pdb.server\");",
          "1039:   opt.user_agent = (char *)r_config_get (core.config, \"pdb.useragent\");",
          "1040:   opt.path = path;",
          "1041:   opt.extract = r_config_get_i(core.config, \"pdb.extract\");",
          "1043:   init_pdb_downloader (&opt, &pdb_downloader);",
          "1044:   ret = pdb_downloader.download (&pdb_downloader);",
          "1045:   if (isradjson) {",
          "1046:    printf (\"%s\\\"pdb\\\":{\\\"file\\\":\\\"%s\\\",\\\"download\\\":%s}\",",
          "1047:     actions_done?\",\":\"\", opt.dbg_file, ret?\"true\":\"false\");",
          "1048:   } else {",
          "1049:    printf (\"PDB \\\"%s\\\" download %s\\n\",",
          "1050:     opt.dbg_file, ret? \"success\": \"failed\");",
          "1051:   }",
          "1052:   actions_done++;",
          "1053:   deinit_pdb_downloader (&pdb_downloader);",
          "1055:   free (path);",
          "1057:   return 0;",
          "",
          "[Added Lines]",
          "1003:   SPDBOptions pdbopts;",
          "1004:   pdbopts.user_agent = (char*) r_config_get (core.config, \"pdb.useragent\");",
          "1005:   pdbopts.symbol_server = (char*) r_config_get (core.config, \"pdb.server\");",
          "1006:   pdbopts.extract = r_config_get_i (core.config, \"pdb.extract\");",
          "1007:   int r = r_bin_pdb_download (&core, isradjson, &actions_done, &pdbopts);",
          "1009:   return r;",
          "",
          "---------------"
        ],
        "libr/bin/pdb/pdb_downloader.c||libr/bin/pdb/pdb_downloader.c": [
          "File: libr/bin/pdb/pdb_downloader.c -> libr/bin/pdb/pdb_downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <string.h>",
          "4: #include <r_util.h>",
          "6: static int checkPrograms () {",
          "7:  if (r_sys_cmd (\"cabextract -v > /dev/null\") != 0) {",
          "8:   eprintf (\"Missing cabextract\\n\");",
          "9:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <r_core.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: }",
          "109: void deinit_pdb_downloader(SPDBDownloader *pd) {",
          "116:  pd->download = 0;",
          "117: }",
          "",
          "[Removed Lines]",
          "110:  R_FREE(pd->opt->dbg_file);",
          "111:  R_FREE(pd->opt->guid);",
          "112:  R_FREE(pd->opt->symbol_server);",
          "113:  R_FREE(pd->opt->user_agent);",
          "114:  R_FREE(pd->opt->path);",
          "115:  R_FREE(pd->opt);",
          "",
          "[Added Lines]",
          "112:  R_FREE (pd->opt->dbg_file);",
          "113:  R_FREE (pd->opt->guid);",
          "114:  R_FREE (pd->opt->symbol_server);",
          "115:  R_FREE (pd->opt->user_agent);",
          "116:  R_FREE (pd->opt->path);",
          "117:  R_FREE (pd->opt);",
          "121: int r_bin_pdb_download(RCore* core, int isradjson, int* actions_done, SPDBOptions* options) {",
          "122:  int ret;",
          "123:  char *path;",
          "124:  SPDBDownloaderOpt opt;",
          "125:  SPDBDownloader pdb_downloader;",
          "126:  RBinInfo *info = r_bin_get_info (core->bin);",
          "128:  if (!info || !info->debug_file_name) {",
          "129:   eprintf (\"Can't find debug filename.\\n\");",
          "130:   return 1;",
          "131:  }",
          "133:  if (!options || !options->symbol_server || !options->user_agent) {",
          "134:   eprintf (\"Can't retrieve pdb configurations.\\n\");",
          "135:   return 1;",
          "136:  }",
          "138:  path = info->file ? r_file_dirname (info->file) : strdup (\".\");",
          "140:  opt.dbg_file = info->debug_file_name;",
          "141:  opt.guid = info->guid;",
          "142:  opt.symbol_server = options->symbol_server;",
          "143:  opt.user_agent = options->user_agent;",
          "144:  opt.path = path;",
          "145:  opt.extract = options->extract;",
          "147:  init_pdb_downloader (&opt, &pdb_downloader);",
          "148:  ret = pdb_downloader.download (&pdb_downloader);",
          "149:  if (isradjson && actions_done) {",
          "150:   printf (\"%s\\\"pdb\\\":{\\\"file\\\":\\\"%s\\\",\\\"download\\\":%s}\",",
          "152:  } else {",
          "153:   printf (\"PDB \\\"%s\\\" download %s\\n\",",
          "154:    opt.dbg_file, ret ? \"success\" : \"failed\");",
          "155:  }",
          "156:  if (actions_done) {",
          "158:  }",
          "159:  deinit_pdb_downloader (&pdb_downloader);",
          "161:  free (path);",
          "162:  return 0;",
          "163: }",
          "",
          "---------------"
        ],
        "libr/bin/pdb/pdb_downloader.h||libr/bin/pdb/pdb_downloader.h": [
          "File: libr/bin/pdb/pdb_downloader.h -> libr/bin/pdb/pdb_downloader.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef PDB_DOWNLOADER_H",
          "2: #define PDB_DOWNLOADER_H",
          "3: #include <r_types.h>",
          "4: #ifdef __cplusplus",
          "5: extern \"C\" {",
          "6: #endif",
          "8: typedef struct SPDBDownloaderOpt {",
          "9:  char *user_agent;",
          "10:  char *symbol_server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <r_core.h>",
          "9: typedef struct SPDBOptions {",
          "10:  char *user_agent;",
          "11:  char *symbol_server;",
          "12:  int extract;",
          "13: } SPDBOptions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: void deinit_pdb_downloader(SPDBDownloader *pdb_downloader);",
          "36: #ifdef __cplusplus",
          "37: }",
          "38: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: int r_bin_pdb_download (RCore* core, int isradjson, int* actions_done, SPDBOptions* options);",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"r_config.h\"",
          "6: #include \"r_cons.h\"",
          "7: #include \"r_core.h\"",
          "9: #define PAIR_WIDTH 9",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"../bin/pdb/pdb_downloader.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     break;",
          "395:    }",
          "396:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
          "398:      {",
          "399:       RBinObject *obj = r_bin_cur_object (core->bin);",
          "401:      }",
          "402:      break;",
          "403:   case 'L':",
          "",
          "[Removed Lines]",
          "397:   case 'l':",
          "400:       RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0);",
          "",
          "[Added Lines]",
          "398:   case 'l':",
          "401:       RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:     RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, obj? r_list_length (obj->symbols): 0);",
          "439:     break;",
          "440:    }",
          "442:    if  (input[1] == '*') {",
          "443:     mode = R_CORE_BIN_RADARE;",
          "444:    } else if (input[1] == 'j') {",
          "445:     mode = R_CORE_BIN_JSON;",
          "446:    }",
          "448:    break;",
          "449:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
          "450:   case 'd': // \"id\"",
          "",
          "[Removed Lines]",
          "441:   case 'R':",
          "447:    RBININFO (\"resources\", R_CORE_BIN_ACC_RESOURCES, NULL, 0);",
          "",
          "[Added Lines]",
          "442:   case 'R':",
          "448:    RBININFO (\"resources\", R_CORE_BIN_ACC_RESOURCES, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:     int mode = false;",
          "453:     if (input[2] == '*') { // \"idp*\"",
          "454:      mode = true;",
          "455:     }",
          "456:     char* filename = strchr (input, ' ');",
          "457:     if (filename) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:      input++;",
          "457:     } else if (input[2] == 'd') { // \"idpd\"",
          "458:      SPDBOptions pdbopts;",
          "459:      pdbopts.user_agent = (char*) r_config_get (core->config, \"pdb.useragent\");",
          "460:      pdbopts.symbol_server = (char*) r_config_get (core->config, \"pdb.server\");",
          "461:      pdbopts.extract = r_config_get_i (core->config, \"pdb.extract\");",
          "462:      int r = r_bin_pdb_download (core, 0, NULL, &pdbopts);",
          "463:      if (r > 0) {",
          "464:       eprintf (\"Error while downloading pdb file\\n\");",
          "465:      }",
          "466:      input += 2;",
          "467:      break;",
          "469:     input++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:      if (args) {",
          "462:      }",
          "469:      }",
          "475:      }",
          "480:     }",
          "481:    } else if (input[1] == '?') { // \"id?\"",
          "482:     const char *help_message[] = {",
          "483:      \"Usage: id\", \"\", \"Debug information\",",
          "484:      \"Output mode:\", \"\", \"\",",
          "485:      \"'*'\", \"\", \"Output in radare commands\",",
          "486:      \"id\", \"\", \"Source lines\",",
          "489:      NULL",
          "490:     };",
          "491:     r_core_cmd_help (core, help_message);",
          "492:    } else { // \"id\"",
          "493:     RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1);",
          "494:    }",
          "497:    break;",
          "498:   case 'i': {",
          "499:       RBinObject *obj = r_bin_cur_object (core->bin);",
          "",
          "[Removed Lines]",
          "464:      int current_fd = r_core_bin_cur (core)->fd;",
          "465:      char* r = r_core_cmd_strf (core, \"o %s\", filename);",
          "466:      if (r == NULL) {",
          "467:       eprintf (\"Error while trying to open '%s'\", filename);",
          "468:       goto id_end;",
          "470:      int fd = atoi (r);",
          "471:      free (r);",
          "472:      if (fd < 0) {",
          "473:       eprintf (\"Error while opening '%s'\", filename);",
          "474:       goto id_end;",
          "476:      RCoreBinFilter filter = { 0 };",
          "477:      r_core_bin_info (core, R_CORE_BIN_ACC_PDB, mode, true, &filter, NULL);",
          "478:      r_core_cmdf (core, \"o-%d\", fd);",
          "479:      r_core_cmdf (core, \"o %d\", current_fd);",
          "487:      \"idp\", \" <file.pdb>\", \"Show pdb file information\",",
          "488:      \".idp*\", \" <file.pdb\", \"Load pdb file information\",",
          "495:    id_end:",
          "496:    input++;",
          "",
          "[Added Lines]",
          "477:     } else {",
          "479:      RBinInfo *info = r_bin_get_info (core->bin);",
          "480:      if (!info || !info->debug_file_name) {",
          "481:       eprintf (\"Cannot get file's debug information\\n\");",
          "482:       break;",
          "483:      }",
          "484:      bool local_file = r_file_exists (info->debug_file_name);",
          "485:      if (local_file) {",
          "486:       filename = info->debug_file_name;",
          "487:      } else {",
          "488:       r_core_cmd0 (core, \"idpd\");",
          "489:       filename = (char*) r_file_basename (info->debug_file_name);",
          "491:     }",
          "493:     int current_fd = r_core_bin_cur (core)->fd;",
          "494:     char* r = r_core_cmd_strf (core, \"o %s\", filename);",
          "495:     if (!r || !*r) {",
          "496:      eprintf (\"FixMe: Could not read file descriptor\\n\");",
          "497:      if (!r) {",
          "498:       if (!(r = strdup (\"0\"))) {",
          "499:        eprintf (\"Error: strdup fail\\n\");",
          "500:        break;",
          "501:       }",
          "504:     int fd = atoi (r);",
          "505:     free (r);",
          "506:     if (fd < 0) {",
          "507:      eprintf (\"Error while opening '%s'\\n\", filename);",
          "508:      break;",
          "509:     }",
          "510:     RCoreBinFilter filter = { 0 };",
          "511:     r_core_bin_info (core, R_CORE_BIN_ACC_PDB, mode, true, &filter, NULL);",
          "512:     r_core_cmdf (core, \"o-%d\", fd);",
          "513:     r_core_cmdf (core, \"o %d\", current_fd);",
          "520:      \"idp\", \" [file.pdb]\", \"Show pdb file information\",",
          "521:      \".idp*\", \" [file.pdb]\", \"Load pdb file information\",",
          "522:      \"idpd\", \"\", \"Download pdb file on remote server\",",
          "526:     input++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1c55fded9d5d7c757e4e474f505f46afc7957b7",
      "candidate_info": {
        "commit_hash": "a1c55fded9d5d7c757e4e474f505f46afc7957b7",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/a1c55fded9d5d7c757e4e474f505f46afc7957b7",
        "files": [
          "libr/core/cmd.c"
        ],
        "message": "libr/core/cmd.c codestyle fix (#6615)\n\nfixed according to https://github.com/radare/radare2/blob/master/CONTRIBUTING.md",
        "before_after_code_files": [
          "libr/core/cmd.c||libr/core/cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ],
          "candidate": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   b->base = addr;",
          "115:   r_buf_set_bytes (b, buf, sizeof (buf));",
          "116:  } else {",
          "118:    if (!r_core_read_at (core, addr, buf, sizeof (buf))) {",
          "119:     return NULL;",
          "120:    }",
          "",
          "[Removed Lines]",
          "117:   if ((addr < b->base) || addr > (b->base+b->length-32)) {",
          "",
          "[Added Lines]",
          "117:   if ((addr < b->base) || addr > (b->base + b->length - 32)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:  delta = addr - b->base;",
          "126:  op = R_NEW0 (RAsmOp);",
          "127:  r_asm_set_pc (core->assembler, addr);",
          "129:   free (op);",
          "130:   return NULL;",
          "131:  }",
          "",
          "[Removed Lines]",
          "128:  if (r_asm_disassemble (core->assembler, op, b->buf+delta, b->length)<1) {",
          "",
          "[Added Lines]",
          "128:  if (r_asm_disassemble (core->assembler, op, b->buf + delta, b->length) < 1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:   r_core_cmd_help (data, help_msg);",
          "145:   return 1;",
          "146:  case 's':",
          "148:   return 1;",
          "149:  case 'w':",
          "151:   return 1;",
          "152:  }",
          "153: #if __UNIX__",
          "",
          "[Removed Lines]",
          "147:   r_core_cmdf (data, \"s-%s\", input+1);",
          "150:   r_core_cmdf (data, \"wc%s\", input+1);",
          "",
          "[Added Lines]",
          "147:   r_core_cmdf (data, \"s-%s\", input + 1);",
          "150:   r_core_cmdf (data, \"wc%s\", input + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:  int i;",
          "168:  char *def, *q, *desc, *buf;",
          "169:  RCore *core = (RCore *)data;",
          "171:   const char* help_msg[] = {",
          "172:    \"Usage:\", \"$alias[=cmd] [args...]\", \"Alias commands\",",
          "173:    \"$\", \"\", \"list all defined aliases\",",
          "",
          "[Removed Lines]",
          "170:  if (*input=='?') {",
          "",
          "[Added Lines]",
          "170:  if (*input == '?') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:   return 0;",
          "183:  }",
          "184:  i = strlen (input);",
          "186:  if (!buf) return 0;",
          "189:  q = strchr (buf, ' ');",
          "190:  def = strchr (buf, '=');",
          "191:  desc = strchr (buf, '?');",
          "",
          "[Removed Lines]",
          "185:  buf = malloc (i+2);",
          "188:  memcpy (buf+1, input, i+1);",
          "",
          "[Added Lines]",
          "185:  buf = malloc (i + 2);",
          "188:  memcpy (buf + 1, input, i + 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:   size_t len = strlen(def);",
          "201:    def++;",
          "202:   }",
          "",
          "[Removed Lines]",
          "199:   if ((def[0] == '\\'') && (def[len-1] == '\\'')) {",
          "200:    def[len-1] = 0x00;",
          "",
          "[Added Lines]",
          "199:   if ((def[0] == '\\'') && (def[len - 1] == '\\'')) {",
          "200:    def[len - 1] = 0x00;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "220:   }",
          "224:   int i, count = 0;",
          "225:   char **keys = r_cmd_alias_keys (core->rcmd, &count);",
          "227:    const char *v = r_cmd_alias_get (core->rcmd, keys[i], 0);",
          "228:    r_cons_printf (\"%s=%s\\n\", keys[i], v);",
          "229:   }",
          "230:  } else if (!buf[1]) {",
          "231:   int i, count = 0;",
          "232:   char **keys = r_cmd_alias_keys (core->rcmd, &count);",
          "234:    r_cons_println (keys[i]);",
          "235:   }",
          "",
          "[Removed Lines]",
          "223:  } else if (buf[1]=='*') {",
          "226:   for (i=0; i<count; i++) {",
          "233:   for (i=0; i<count; i++) {",
          "",
          "[Added Lines]",
          "223:  } else if (buf[1] == '*') {",
          "226:   for (i = 0; i < count; i++) {",
          "233:   for (i = 0; i < count; i++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:   v = r_cmd_alias_get (core->rcmd, buf, 0);",
          "241:   if (v) {",
          "242:    if (q) {",
          "244:     out = malloc (strlen (v) + strlen (args) + 2);",
          "245:     if (out) { //XXX slow",
          "246:      strcpy (out, v);",
          "",
          "[Removed Lines]",
          "243:     char *out, *args = q+1;",
          "",
          "[Added Lines]",
          "243:     char *out, *args = q + 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273:  switch (str[0]) {",
          "274:  case '-':",
          "275:   if (str[1]) {",
          "277:   } else {",
          "278:    r_cmd_alias_del (core->rcmd, NULL);",
          "",
          "[Removed Lines]",
          "276:    r_cmd_alias_del (core->rcmd, str+2);",
          "",
          "[Added Lines]",
          "276:    r_cmd_alias_del (core->rcmd, str + 2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "296: static int cmd_rap(void *data, const char *input) {",
          "297:  RCore *core = (RCore *)data;",
          "298:  switch (*input) {",
          "300:  case '\\0': r_core_rtr_list (core); break;",
          "301:  case 'h':",
          "302:   r_core_rtr_http (core, getArg (input[1], 'h'), input + 1);",
          "303:   break;",
          "304:  case 'H':",
          "306:    input++;",
          "307:   }",
          "308:   r_core_rtr_http (core, getArg (input[1], 'H'), input + 1);",
          "",
          "[Removed Lines]",
          "299:  case '$': aliascmd (core, input+1); break;",
          "305:   while (input[1]==' ') {",
          "",
          "[Added Lines]",
          "299:  case '$': aliascmd (core, input + 1); break;",
          "305:   while (input[1] == ' ') {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:  case '+': r_core_rtr_add (core, input + 1); break;",
          "312:  case '-': r_core_rtr_remove (core, input + 1); break;",
          "313:  case '=': r_core_rtr_session (core, input + 1); break;",
          "315:  case '<': r_core_rtr_pushout (core, input + 1); break;",
          "316:  case '!':",
          "319:    core->cmdremote = input[2]? 1: 0;",
          "320:    r_cons_println (r_str_bool (core->cmdremote));",
          "321:   } else {",
          "323:   }",
          "324:   break;",
          "325:  default: r_core_rtr_cmd (core, input);",
          "",
          "[Removed Lines]",
          "317:   if (input[1]=='=') {",
          "322:    r_io_system (core->io, input+1);",
          "",
          "[Added Lines]",
          "317:   if (input[1] == '=') {",
          "322:    r_io_system (core->io, input + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "337:  RCore *core = (RCore *)data;",
          "338:  switch (input[0]) {",
          "339:  case ' ':",
          "341:   break;",
          "342:  case 'l':",
          "343:   core->num->value = core->yank_buf->length;",
          "344:   break;",
          "345:  case 'y':",
          "348:   r_core_yank_paste (core, n, 0);",
          "349:   break;",
          "350:  case 'x':",
          "352:   break;",
          "353:  case 'z':",
          "355:   break;",
          "356:  case 'w':",
          "357:   switch (input[1]) {",
          "",
          "[Removed Lines]",
          "340:   r_core_yank (core, core->offset, r_num_math (core->num, input+1));",
          "346:   while (input[1]==' ') input++;",
          "347:   n = input[1]? r_num_math (core->num, input+1): core->offset;",
          "351:   r_core_yank_hexdump (core, r_num_math (core->num, input+1));",
          "354:   r_core_yank_string (core, core->offset, r_num_math (core->num, input+1));",
          "",
          "[Added Lines]",
          "340:   r_core_yank (core, core->offset, r_num_math (core->num, input + 1));",
          "346:   while (input[1] == ' ') input++;",
          "347:   n = input[1]? r_num_math (core->num, input + 1): core->offset;",
          "351:   r_core_yank_hexdump (core, r_num_math (core->num, input + 1));",
          "354:   r_core_yank_string (core, core->offset, r_num_math (core->num, input + 1));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "361:   case 'x':",
          "362:    if (input[2] == ' ') {",
          "363:     char *out = strdup (input + 3);",
          "365:     if (len> 0) {",
          "366:      r_core_yank_set (core, 0LL, (const ut8*)out, len);",
          "367:     } else {",
          "",
          "[Removed Lines]",
          "364:     int len = r_hex_str2bin (input+3, (ut8*)out);",
          "",
          "[Added Lines]",
          "364:     int len = r_hex_str2bin (input + 3, (ut8*)out);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "376:   }",
          "377:   break;",
          "378:  case 'p':",
          "380:   break;",
          "381:  case 's':",
          "382:   r_core_yank_cat_string (core, r_num_math (core->num, input + 1));",
          "",
          "[Removed Lines]",
          "379:   r_core_yank_cat (core, r_num_math (core->num, input+1));",
          "",
          "[Added Lines]",
          "379:   r_core_yank_cat (core, r_num_math (core->num, input + 1));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "472: #endif",
          "473:    const char *p = r_str_lchr (file, '.');",
          "474:    if (p) {",
          "477:     if (!strcmp (ext, \"js\")) {",
          "479:      r_lang_use (core->lang, \"pipe\");",
          "480:      r_lang_run_file (core->lang, cmd);",
          "481:      free (cmd);",
          "",
          "[Removed Lines]",
          "475:     const char *ext = p+1;",
          "478:      char *cmd = cmdstr(\"node\");",
          "",
          "[Added Lines]",
          "475:     const char *ext = p + 1;",
          "478:      char *cmd = cmdstr (\"node\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "484: #if __WINDOWS__",
          "485:      char *cmd = r_str_newf (\"%s\", file);",
          "486: #else",
          "488: #endif",
          "489:      r_lang_use (core->lang, \"pipe\");",
          "490:      r_lang_run_file (core->lang, cmd);",
          "",
          "[Removed Lines]",
          "487:      char *cmd = cmdstr(\"wine\");",
          "",
          "[Added Lines]",
          "487:      char *cmd = cmdstr (\"wine\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "497:      free (cmd);",
          "498:      ret = 1;",
          "499:     } else if (!strcmp (ext, \"lsp\")) {",
          "501:      r_lang_use (core->lang, \"pipe\");",
          "502:      r_lang_run_file (core->lang, cmd);",
          "503:      free (cmd);",
          "",
          "[Removed Lines]",
          "500:      char *cmd = cmdstr(\"newlisp -n\");",
          "",
          "[Added Lines]",
          "500:      char *cmd = cmdstr (\"newlisp -n\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "557: static int cmd_stdin(void *data, const char *input) {",
          "558:  RCore *core = (RCore *)data;",
          "560:   r_cons_printf (\"Usage: '-' '.-' '. -' do the same\\n\");",
          "561:   return false;",
          "562:  }",
          "",
          "[Removed Lines]",
          "559:  if (input[0]=='?') {",
          "",
          "[Added Lines]",
          "559:  if (input[0] == '?') {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "573:   r_core_cmd_repeat (core, 0);",
          "574:   break;",
          "575:  case ':':",
          "581:    eol = strchr (input + 1, ':');",
          "582:    if (eol) {",
          "586:    } else {",
          "587:     host = \"localhost\";",
          "588:     port = input + ((input[1] == ':')? 2: 1);",
          "",
          "[Removed Lines]",
          "576:   if ((ptr = strchr (input+1, ' '))) {",
          "579:    cmd = ptr+1;",
          "584:     host = input+1;",
          "585:     port = eol+1;",
          "",
          "[Added Lines]",
          "576:   if ((ptr = strchr (input + 1, ' '))) {",
          "579:    cmd = ptr + 1;",
          "584:     host = input + 1;",
          "585:     port = eol + 1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "600:   r_core_cmd_repeat (core, 1);",
          "601:   break;",
          "602:  case '-':",
          "604:    r_cons_printf (\"Usage: '-' '.-' '. -' do the same\\n\");",
          "605:   } else {",
          "606:    r_core_run_script (core, \"-\");",
          "",
          "[Removed Lines]",
          "603:   if (input[1]=='?') {",
          "",
          "[Added Lines]",
          "603:   if (input[1] == '?') {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "686:  char buf[1024], *out;",
          "687:  RCore *core = (RCore*)data;",
          "688:  const char *sp, *p = \"[sdb]> \";",
          "690:  Sdb *s = core->sdb;",
          "692:  switch (input[0]) {",
          "693:  case ' ':",
          "695:   if (out) {",
          "696:    r_cons_println (out);",
          "697:   }",
          "698:   free (out);",
          "699:   break;",
          "702:  case '\\0':",
          "703:   sdb_foreach (s, callback_foreach_kv, NULL);",
          "704:   break;",
          "",
          "[Removed Lines]",
          "689:  const int buflen = sizeof (buf)-1;",
          "694:   out = sdb_querys (s, NULL, 0, input+1);",
          "",
          "[Added Lines]",
          "689:  const int buflen = sizeof (buf) - 1;",
          "694:   out = sdb_querys (s, NULL, 0, input + 1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "710:   if (!r_config_get_i (core->config, \"scr.interactive\")) {",
          "711:    return false;",
          "712:   }",
          "716:    for (n = o = p; n; o = n) {",
          "717:     n = strchr (o, '/'); // SDB_NS_SEPARATOR NAMESPACE",
          "",
          "[Removed Lines]",
          "713:   if (input[1]==' ') {",
          "714:    char *n, *o, *p = strdup (input+2);",
          "",
          "[Added Lines]",
          "713:   if (input[1] == ' ') {",
          "714:    char *n, *o, *p = strdup (input + 2);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "723:   if (!s) s = core->sdb;",
          "724:   for (;;) {",
          "725:    r_line_set_prompt (p);",
          "727:     break;",
          "728:    if (!*buf) break;",
          "729:    out = sdb_querys (s, NULL, 0, buf);",
          "",
          "[Removed Lines]",
          "726:    if (r_cons_fgets (buf, buflen, 0, NULL)<1)",
          "",
          "[Added Lines]",
          "726:    if (r_cons_fgets (buf, buflen, 0, NULL) < 1)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "770:    return 0;",
          "771:   }",
          "772:   if (input[1] == ' ') {",
          "774:    char *ns = strchr (fn, ' ');",
          "775:    if (ns) {",
          "",
          "[Removed Lines]",
          "773:    char *fn = strdup (input+2);",
          "",
          "[Added Lines]",
          "773:    char *fn = strdup (input + 2);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "814:  sp = strchr (input + 1, ' ');",
          "815:  if (sp) {",
          "816:   char *inp = strdup (input);",
          "820:   if (out) {",
          "821:    r_cons_println (out);",
          "822:    free (out);",
          "",
          "[Removed Lines]",
          "817:   inp [(size_t)(sp-input)] = 0;",
          "818:   s = sdb_ns (core->sdb, inp+1, 1);",
          "819:   out = sdb_querys (s, NULL, 0, sp+1);",
          "",
          "[Added Lines]",
          "817:   inp [(size_t)(sp - input)] = 0;",
          "818:   s = sdb_ns (core->sdb, inp + 1, 1);",
          "819:   out = sdb_querys (s, NULL, 0, sp + 1);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "833:  RCore *core = (RCore *)data;",
          "834:  switch (input[0]) {",
          "835:  case 'm':",
          "838:   else r_cons_printf (\"0x%x\\n\", (ut32)core->blocksize_max);",
          "839:   break;",
          "840:  case '+':",
          "843:   break;",
          "844:  case '-':",
          "847:   break;",
          "848:  case 'f':",
          "851:    if (flag) {",
          "852:     r_core_block_size (core, flag->size);",
          "853:    } else {",
          "855:    }",
          "856:   } else {",
          "857:    eprintf (\"Usage: bf [flagname]\\n\");",
          "",
          "[Removed Lines]",
          "836:   n = r_num_math (core->num, input+1);",
          "837:   if (n>1) core->blocksize_max = n;",
          "841:   n = r_num_math (core->num, input+1);",
          "842:   r_core_block_size (core, core->blocksize+n);",
          "845:   n = r_num_math (core->num, input+1);",
          "846:   r_core_block_size (core, core->blocksize-n);",
          "849:   if (input[1]==' ') {",
          "850:    flag = r_flag_get (core->flags, input+2);",
          "854:     eprintf (\"bf: cannot find flag named '%s'\\n\", input+2);",
          "",
          "[Added Lines]",
          "836:   n = r_num_math (core->num, input + 1);",
          "837:   if (n > 1) core->blocksize_max = n;",
          "841:   n = r_num_math (core->num, input + 1);",
          "842:   r_core_block_size (core, core->blocksize + n);",
          "845:   n = r_num_math (core->num, input + 1);",
          "846:   r_core_block_size (core, core->blocksize - n);",
          "849:   if (input[1] == ' ') {",
          "850:    flag = r_flag_get (core->flags, input + 2);",
          "854:     eprintf (\"bf: cannot find flag named '%s'\\n\", input + 2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "886: static int cmd_resize(void *data, const char *input) {",
          "887:  RCore *core = (RCore *)data;",
          "889:  st64 delta = 0;",
          "890:  int grow, ret;",
          "",
          "[Removed Lines]",
          "888:  ut64 oldsize, newsize=0;",
          "",
          "[Added Lines]",
          "888:  ut64 oldsize, newsize = 0;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "898:   r_sys_cmdf (\"radare%s\", input);",
          "899:   return true;",
          "900:  case 'm':",
          "903:   else eprintf (\"Usage: rm [file]   # removes a file\\n\");",
          "904:   return true;",
          "905:  case '\\0':",
          "",
          "[Removed Lines]",
          "901:   if (input[1]==' ')",
          "902:    r_file_rm (input+2);",
          "",
          "[Added Lines]",
          "901:   if (input[1] == ' ')",
          "902:    r_file_rm (input + 2);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "915:   newsize = oldsize + delta;",
          "916:   break;",
          "917:  case ' ':",
          "921:     eprintf (\"Invalid size\\n\");",
          "922:    return false;",
          "923:   }",
          "",
          "[Removed Lines]",
          "918:   newsize = r_num_math (core->num, input+1);",
          "919:   if (newsize==0) {",
          "920:    if (input[1]=='0')",
          "",
          "[Added Lines]",
          "918:   newsize = r_num_math (core->num, input + 1);",
          "919:   if (newsize == 0) {",
          "920:    if (input[1] == '0')",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "941:  grow = (newsize > oldsize);",
          "942:  if (grow) {",
          "943:   ret = r_io_resize (core->io, newsize);",
          "945:    eprintf (\"r_io_resize: cannot resize\\n\");",
          "946:  }",
          "",
          "[Removed Lines]",
          "944:   if (ret<1)",
          "",
          "[Added Lines]",
          "944:   if (ret < 1)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "951:  if (!grow) {",
          "952:   ret = r_io_resize (core->io, newsize);",
          "954:    eprintf (\"r_io_resize: cannot resize\\n\");",
          "955:  }",
          "957:  if (newsize < core->offset+core->blocksize ||",
          "959:   r_core_block_read (core);",
          "960:  }",
          "961:  return true;",
          "",
          "[Removed Lines]",
          "953:   if (ret<1)",
          "958:    oldsize < core->offset+core->blocksize) {",
          "",
          "[Added Lines]",
          "953:   if (ret < 1)",
          "958:    oldsize < core->offset + core->blocksize) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1002:   r_core_task_list (core, *input);",
          "1003:   break;",
          "1004:  case '&':",
          "1007:   } else {",
          "1009:    if (tid) {",
          "1010:     RCoreTask *task = r_core_task_get (core, tid);",
          "1011:     if (task) {",
          "",
          "[Removed Lines]",
          "1005:   if (input[1]=='&') {",
          "1008:    int tid = r_num_math (core->num, input+1);",
          "",
          "[Added Lines]",
          "1005:   if (input[1] == '&') {",
          "1008:    int tid = r_num_math (core->num, input + 1);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1017:   }",
          "1018:   break;",
          "1019:  case '=': {",
          "1021:   if (tid) {",
          "1022:    RCoreTask *task = r_core_task_get (core, tid);",
          "1023:    if (task) {",
          "",
          "[Removed Lines]",
          "1020:   int tid = r_num_math (core->num, input+1);",
          "",
          "[Added Lines]",
          "1020:   int tid = r_num_math (core->num, input + 1);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1031:   }}",
          "1032:   break;",
          "1033:  case '+':",
          "1035:   break;",
          "1036:  case '-':",
          "1038:    r_core_task_del (core, -1);",
          "1039:   } else {",
          "1041:   }",
          "1042:   break;",
          "1043:  case '?':",
          "",
          "[Removed Lines]",
          "1034:   r_core_task_add (core, r_core_task_new (core, input+1, (RCoreTaskCallback)task_finished, core));",
          "1037:   if (input[1]=='*') {",
          "1040:    r_core_task_del (core, r_num_math (core->num, input+1));",
          "",
          "[Added Lines]",
          "1034:   r_core_task_add (core, r_core_task_new (core, input + 1, (RCoreTaskCallback)task_finished, core));",
          "1037:   if (input[1] == '*') {",
          "1040:    r_core_task_del (core, r_num_math (core->num, input + 1));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1065:   break;",
          "1066:  case ' ':",
          "1067:   {",
          "1069:    if (tid) {",
          "1070:     RCoreTask *task = r_core_task_get (core, tid);",
          "1071:     if (task) {",
          "",
          "[Removed Lines]",
          "1068:    int tid = r_num_math (core->num, input+1);",
          "",
          "[Added Lines]",
          "1068:    int tid = r_num_math (core->num, input + 1);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1075:     }",
          "1076:    } else {",
          "1077:     RCoreTask *task = r_core_task_add (core, r_core_task_new (",
          "1079:     RThread *th = r_th_new (taskbgrun, task, 0);",
          "1080:     task->msg->th = th;",
          "1081:    }",
          "",
          "[Removed Lines]",
          "1078:        core, input+1, (RCoreTaskCallback)task_finished, core));",
          "",
          "[Added Lines]",
          "1078:        core, input + 1, (RCoreTaskCallback)task_finished, core));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1094:  RCore *core = (RCore*) data;",
          "1095:  int ret = true;",
          "1096:  char *str, *eq;",
          "1099:   const char* help_msg[] = {",
          "1100:    \"Usage:\", \"*<addr>[=[0x]value]\", \"Pointer read/write data/values\",",
          "1101:    \"*\", \"entry0=cc\", \"write trap in entrypoint\",",
          "",
          "[Removed Lines]",
          "1097:  while (*input==' ') input++;",
          "1098:  if (!*input || *input=='?') {",
          "",
          "[Added Lines]",
          "1097:  while (*input == ' ') input++;",
          "1098:  if (!*input || *input == '?') {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1151:    char *out = NULL;",
          "1152:    char *cmd = r_core_sysenv_begin (core, input);",
          "1153:    if (cmd) {",
          "1155:     r_core_sysenv_end (core, input);",
          "1156:     r_cons_memcat (out, olen);",
          "1157:     free (out);",
          "",
          "[Removed Lines]",
          "1154:     ret = r_sys_cmd_str_full (cmd+1, NULL, &out, &olen, NULL);",
          "",
          "[Added Lines]",
          "1154:     ret = r_sys_cmd_str_full (cmd + 1, NULL, &out, &olen, NULL);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1170:   break;",
          "1171:  default:",
          "1172:   n = atoi (input);",
          "1174:    const char *cmd = r_line_hist_get (n);",
          "1175:    if (cmd) r_core_cmd0 (core, cmd);",
          "",
          "[Removed Lines]",
          "1173:   if (*input=='0' || n > 0) {",
          "",
          "[Added Lines]",
          "1173:   if (*input == '0' || n > 0) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1280:    const char *ov = r_config_get (core->config, kv);",
          "1281:    r_strbuf_appendf (buf, \"e %s=%s;\", kv, ov);",
          "1284:   } else {",
          "1285:    eprintf (\"Missing '=' in e: expression (%s)\\n\", kv);",
          "",
          "[Removed Lines]",
          "1282:    r_config_set (core->config, kv, eq+1);",
          "",
          "[Added Lines]",
          "1282:    r_config_set (core->config, kv, eq + 1);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1301:  if (!icmd || (cmd[0] == '#' && cmd[1] != '!' && cmd[1] != '?')) {",
          "1302:   goto beach;",
          "1303:  }",
          "1307:  }",
          "1308:  if (*cmd != '\"') {",
          "",
          "[Removed Lines]",
          "1304:  cmt = *icmd ? strchr (icmd+1, '#'): NULL;",
          "1305:  if (cmt && (cmt[1]==' ' || cmt[1]=='\\t')) {",
          "",
          "[Added Lines]",
          "1304:  cmt = *icmd ? strchr (icmd + 1, '#'): NULL;",
          "1305:  if (cmt && (cmt[1] == ' ' || cmt[1] == '\\t')) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1377:  }",
          "1378:  core->print->cur_enabled = ocur_enabled;",
          "1379:  if (colon && colon[1]) {",
          "1381:   r_core_cmd_subst (core, colon);",
          "1382:  } else {",
          "1383:   if (!*icmd) {",
          "",
          "[Removed Lines]",
          "1380:   for (++colon; *colon==';'; colon++);",
          "",
          "[Added Lines]",
          "1380:   for (++colon; *colon == ';'; colon++);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1392: static char *find_eoq(char *p) {",
          "1393:  for (; *p; p++) {",
          "1395:    break;",
          "1396:   }",
          "1398:    p++;",
          "1399:   }",
          "1400:  }",
          "",
          "[Removed Lines]",
          "1394:   if (*p=='\"') {",
          "1397:   if (*p=='\\\\' && p[1]=='\"') {",
          "",
          "[Added Lines]",
          "1394:   if (*p == '\"') {",
          "1397:   if (*p == '\\\\' && p[1] == '\"') {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1440:     return false;",
          "1441:    }",
          "1444:    while (IS_WHITESPACE (p[1])) p++;",
          "1447:     if (q) {",
          "1449:     }",
          "",
          "[Removed Lines]",
          "1445:    if (p[1]=='@' || (p[1] && p[2]=='@')) {",
          "1446:     char *q = strchr (p+1, '\"');",
          "",
          "[Added Lines]",
          "1445:    if (p[1] == '@' || (p[1] && p[2] == '@')) {",
          "1446:     char *q = strchr (p + 1, '\"');",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1470:    }",
          "1471:    line = strdup (cmd);",
          "1472:    line = r_str_replace (line, \"\\\\\\\"\", \"\\\"\", true);",
          "1475:     while (IS_WHITESPACE (*str)) {",
          "1476:      str++;",
          "1477:     }",
          "",
          "[Removed Lines]",
          "1473:    if (p && p[1]=='|') {",
          "1474:     str = p+2;",
          "",
          "[Added Lines]",
          "1473:    if (p && p[1] == '|') {",
          "1474:     str = p + 2;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1506:  if (*cmd != '#') {",
          "1507:   ptr = (char *)r_str_lastbut (cmd, '#', quotestr);",
          "1509:  }",
          "",
          "[Removed Lines]",
          "1508:   if (ptr && (ptr[1]==' '||ptr[1]=='\\t')) *ptr = '\\0';",
          "",
          "[Added Lines]",
          "1508:   if (ptr && (ptr[1] == ' ' || ptr[1] == '\\t')) *ptr = '\\0';",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1533:  ptr = (char *)r_str_lastbut (cmd, '|', quotestr);",
          "1534:  if (ptr) {",
          "1535:   char *ptr2 = strchr (cmd, '`');",
          "1537:    if (!tick || (tick && tick > ptr)) {",
          "1539:     cmd = r_str_clean (cmd);",
          "",
          "[Removed Lines]",
          "1536:   if (!ptr2 || (ptr2 && ptr2>ptr)) {",
          "",
          "[Added Lines]",
          "1536:   if (!ptr2 || (ptr2 && ptr2 > ptr)) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1554:  ptr = (char *)r_str_lastbut (cmd, '&', quotestr);",
          "1558:   ret = r_cmd_call (core->rcmd, cmd);",
          "1559:   if (ret == -1) {",
          "1560:    eprintf (\"command error(%s)\\n\", cmd);",
          "1561:    return ret;",
          "1562:   }",
          "1564:   ptr = strchr (cmd, '&');",
          "1565:  }",
          "",
          "[Removed Lines]",
          "1556:  while (ptr && ptr[1]=='&') {",
          "1563:   for (cmd = ptr + 2; cmd && *cmd==' '; cmd++);",
          "",
          "[Added Lines]",
          "1556:  while (ptr && ptr[1] == '&') {",
          "1563:   for (cmd = ptr + 2; cmd && *cmd == ' '; cmd++);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1612:      if (feof (stdin)) {",
          "1613:       break;",
          "1614:      }",
          "1616:      ret = strlen (buf);",
          "1617:      core->oobi_len += ret;",
          "1619:      if (core->oobi) {",
          "1620:       if (!strcmp (buf, str)) {",
          "1621:        break;",
          "",
          "[Removed Lines]",
          "1615:      if (*buf) buf[strlen (buf)-1]='\\0';",
          "1618:      core->oobi = realloc (core->oobi, core->oobi_len+1);",
          "",
          "[Added Lines]",
          "1615:      if (*buf) buf[strlen (buf) - 1]='\\0';",
          "1618:      core->oobi = realloc (core->oobi, core->oobi_len + 1);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1666:    char *fdnum = ptr - 1;",
          "1667:    if (*fdnum == 'H') {",
          "1668:     scr_html = r_config_get_i (core->config, \"scr.html\");",
          "",
          "[Removed Lines]",
          "1665:   if (ptr > (cmd+1) && iswhitechar (ptr[-2])) {",
          "",
          "[Added Lines]",
          "1665:   if (ptr > (cmd + 1) && iswhitechar (ptr[-2])) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1737:    if (ptr[1] == '!') {",
          "1739:    } else {",
          "1741:    }",
          "1742:    if (!str) {",
          "1743:     goto fail;",
          "",
          "[Removed Lines]",
          "1738:     str = r_core_cmd_str_pipe (core, ptr+1);",
          "1740:     str = r_core_cmd_str (core, ptr+1);",
          "",
          "[Added Lines]",
          "1738:     str = r_core_cmd_str_pipe (core, ptr + 1);",
          "1740:     str = r_core_cmd_str (core, ptr + 1);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1755:      }",
          "1756:     }",
          "1757:    }",
          "1759:    cmd = r_str_concat (strdup (cmd), str);",
          "1760:    core->num->value = value;",
          "1761:    ret = r_core_cmd_subst (core, cmd);",
          "",
          "[Removed Lines]",
          "1758:    str = r_str_concat (str, ptr2+1);",
          "",
          "[Added Lines]",
          "1758:    str = r_str_concat (str, ptr2 + 1);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1774:  ptr = (char *)r_str_lastbut (cmd, '~', quotestr);",
          "1775:  if (ptr && ptr>cmd) {",
          "1777:   if (*escape == '\\\\') {",
          "1778:    memmove (escape, ptr, strlen (escape));",
          "1779:    ptr = NULL;",
          "",
          "[Removed Lines]",
          "1776:   char *escape = ptr-1;",
          "",
          "[Added Lines]",
          "1776:   char *escape = ptr - 1;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1787:  }",
          "1791:   ptr = strchr (cmd, '@');",
          "1792:   if (ptr == cmd + 1 && *cmd == '?') {",
          "1793:    ptr = NULL;",
          "",
          "[Removed Lines]",
          "1790:  if (*cmd!='(' && *cmd!='\"') {",
          "",
          "[Added Lines]",
          "1790:  if (*cmd!= '(' && *cmd != '\"') {",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1811:   ut8 *buf;",
          "1816:   }",
          "1819:   } else {",
          "1820:    ptr--;",
          "",
          "[Removed Lines]",
          "1814:   for (ptr++; *ptr== ' '; ptr++) {",
          "1817:   if (*ptr && ptr[1]==':') {",
          "",
          "[Added Lines]",
          "1814:   for (ptr++; *ptr == ' '; ptr++) {",
          "1817:   if (*ptr && ptr[1] == ':') {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1825:   if (arroba) {",
          "1827:   }",
          "1829:    usemyblock = true;",
          "1830:    switch (ptr[0]) {",
          "1831:    case 'f': // \"@f:\" // slurp file in block",
          "",
          "[Removed Lines]",
          "1828:   if (ptr[0] && ptr[1]==':' && ptr[2]) {",
          "",
          "[Added Lines]",
          "1828:   if (ptr[0] && ptr[1] == ':' && ptr[2]) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1842:      }",
          "1843:      free (f);",
          "1844:     } else {",
          "1846:     }",
          "1847:     break;",
          "1848:    case 'r': // \"@r:\" // regname",
          "",
          "[Removed Lines]",
          "1845:      eprintf (\"cannot open '%s'\\n\", ptr+3);",
          "",
          "[Added Lines]",
          "1845:      eprintf (\"cannot open '%s'\\n\", ptr + 3);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1879:     }",
          "1880:     break;",
          "1881:    case 'e': // \"@e:\"",
          "1883:     break;",
          "1884:    case 'x': // \"@x:\" // hexpairs",
          "1885:     if (ptr[1] == ':') {",
          "1887:      if (buf) {",
          "1889:       r_core_block_size (core, R_ABS(len));",
          "1890:       memcpy (core->block, buf, core->blocksize);",
          "1891:       core->fixedblock = true;",
          "",
          "[Removed Lines]",
          "1882:     tmpeval = parse_tmp_evals (core, ptr+2);",
          "1886:      buf = malloc (strlen (ptr+2)+1);",
          "1888:       len = r_hex_str2bin (ptr+2, buf);",
          "",
          "[Added Lines]",
          "1882:     tmpeval = parse_tmp_evals (core, ptr + 2);",
          "1886:      buf = malloc (strlen (ptr + 2) + 1);",
          "1888:       len = r_hex_str2bin (ptr + 2, buf);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1899:     break;",
          "1900:    case 'k': // \"@k\"",
          "1901:      {",
          "1903:      if (out) {",
          "1904:       r_core_seek (core, r_num_math (core->num, out), 1);",
          "1905:       free (out);",
          "",
          "[Removed Lines]",
          "1902:      char *out = sdb_querys (core->sdb, NULL, 0, ptr+((ptr[1])?2:1));",
          "",
          "[Added Lines]",
          "1902:      char *out = sdb_querys (core->sdb, NULL, 0, ptr + ((ptr[1])? 2: 1));",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1921:       tmpbits = r_config_get (core->config, \"asm.bits\");",
          "1922:       r_config_set (core->config, \"asm.bits\", q);",
          "1923:      }",
          "1926:     } else {",
          "1927:      eprintf (\"Usage: pd 10 @a:arm:32\\n\");",
          "",
          "[Removed Lines]",
          "1924:      r_config_set (core->config, \"asm.arch\", ptr+2);",
          "",
          "[Added Lines]",
          "1924:      r_config_set (core->config, \"asm.arch\", ptr + 2);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1960:    }",
          "1961:   }",
          "1965:   addr = r_num_math (core->num, offstr);",
          "1966:   if (isalpha ((unsigned char)ptr[1]) && !addr) {",
          "1968:     eprintf (\"Invalid address (%s)\\n\", ptr + 1);",
          "1969:     goto fail;",
          "1970:    }",
          "",
          "[Removed Lines]",
          "1963:   offstr = r_str_trim_head (ptr+1);",
          "1967:    if (!r_flag_get (core->flags, ptr+1)) {",
          "",
          "[Added Lines]",
          "1963:   offstr = r_str_trim_head (ptr + 1);",
          "1967:    if (!r_flag_get (core->flags, ptr + 1)) {",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1985:    if (ptr[2] == '@') {",
          "1986:     char *rule = ptr + 3;",
          "1988:     ret = r_core_cmd_foreach3 (core, cmd, rule);",
          "1989:    } else {",
          "1991:    }",
          "1993:   } else {",
          "",
          "[Removed Lines]",
          "1987:     while (*rule && *rule==' ') rule++;",
          "1990:     ret = r_core_cmd_foreach (core, cmd, ptr+2);",
          "",
          "[Added Lines]",
          "1987:     while (*rule && *rule == ' ') rule++;",
          "1990:     ret = r_core_cmd_foreach (core, cmd, ptr + 2);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2098:  if (!strncmp (k, \"meta.C.\", 7)) {",
          "2099:   char *cmt = (char *)sdb_decode (v, 0);",
          "2100:   if (!cmt) cmt = strdup (\"\");",
          "2103:   r_core_cmd0 (core, cmd);",
          "2104:   free (cmt);",
          "2105:  }",
          "",
          "[Removed Lines]",
          "2102:   r_core_cmdf (core, \"s %s\", k+7);",
          "",
          "[Added Lines]",
          "2102:   r_core_cmdf (core, \"s %s\", k + 7);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2154:   {",
          "2155:    ut64 offorig = core->offset;",
          "2157:     RRegItem *item;",
          "2158:     ut64 value;",
          "2159:     head = r_reg_get_list (dbg->reg, i);",
          "",
          "[Removed Lines]",
          "2156:    for (i=0; i<128; i++) {",
          "",
          "[Added Lines]",
          "2156:    for (i=0; i < 128; i++) {",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2258:  RFlagItem *flag;",
          "2259:  ut64 oseek, addr;",
          "2264:  oseek = core->offset;",
          "2265:  ostr = str = strdup (each);",
          "",
          "[Removed Lines]",
          "2262:  for (; *cmd==' '; cmd++);",
          "",
          "[Added Lines]",
          "2262:  for (; *cmd == ' '; cmd++);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2439:  case 'k':",
          "2441:   {",
          "2443:   if (out) {",
          "2444:    each = out;",
          "2445:    do {",
          "",
          "[Removed Lines]",
          "2442:   char *out = sdb_querys (core->sdb, NULL, 0, str+((str[1])?2:1));",
          "",
          "[Added Lines]",
          "2442:   char *out = sdb_querys (core->sdb, NULL, 0, str + ((str[1])? 2: 1));",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2456:      addr = r_num_math (core->num, each);",
          "2457:     }",
          "2460:     r_core_seek (core, addr, 1);",
          "2461:     r_core_cmd (core, cmd, 0);",
          "2462:     r_cons_flush ();",
          "",
          "[Removed Lines]",
          "2459:     each = str+1;",
          "",
          "[Added Lines]",
          "2459:     each = str + 1;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2470:    char cmd2[1024];",
          "2472:    i = 0;",
          "2474:     if (r_cons_is_breaked ()) {",
          "2475:      break;",
          "2476:     }",
          "2478:     if (!core->rcmd->macro.brk_value) {",
          "2479:      break;",
          "2480:     }",
          "",
          "[Removed Lines]",
          "2473:    for (core->rcmd->macro.counter = 0;i < 999; core->rcmd->macro.counter++) {",
          "2477:     r_cmd_macro_call (&core->rcmd->macro, each+2);",
          "",
          "[Added Lines]",
          "2473:    for (core->rcmd->macro.counter = 0; i < 999; core->rcmd->macro.counter++) {",
          "2477:     r_cmd_macro_call (&core->rcmd->macro, each + 2);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2505:     }",
          "2506:     fclose (fd);",
          "2507:    } else {",
          "2509:    }",
          "2510:   }",
          "2511:   break;",
          "2512:  default:",
          "2513:   core->rcmd->macro.counter = 0;",
          "2515:   i = 0;",
          "2516:   while (str[i]) {",
          "2517:    j = i;",
          "",
          "[Removed Lines]",
          "2508:     eprintf (\"cannot open file '%s' to read offsets\\n\", each+1);",
          "2514:   for (; *each==' '; each++);",
          "",
          "[Added Lines]",
          "2508:     eprintf (\"cannot open file '%s' to read offsets\\n\", each + 1);",
          "2514:   for (; *each == ' '; each++);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2645:   }",
          "2646:   rcmd = ptr + 1;",
          "2647:  }",
          "2649:  free (ocmd);",
          "2650:  free (core->oobi);",
          "2651:  core->oobi = NULL;",
          "",
          "[Removed Lines]",
          "2648:  core->cmd_depth ++;",
          "",
          "[Added Lines]",
          "2648:  core->cmd_depth++;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2677:    r = r_core_cmd (core, data, 0);",
          "2678:    if (r < 0) { //== -1) {",
          "2680:     ret = -1; //r; //false;",
          "2681:     break;",
          "2682:    }",
          "",
          "[Removed Lines]",
          "2679:     data = nl+1;",
          "",
          "[Added Lines]",
          "2679:     data = nl + 1;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2690:     data = nl + 1;",
          "2691:     break;",
          "2692:    }",
          "2694:   } while ((nl = strchr (data, '\\n')));",
          "2695:   r_cons_break_pop ();",
          "2696:  }",
          "",
          "[Removed Lines]",
          "2693:    data = nl+1;",
          "",
          "[Added Lines]",
          "2693:    data = nl + 1;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2761:  while (ptr) {",
          "2763:   r_core_cmd (user, optr, 0);",
          "2765:   ptr = strchr (str, '\\n');",
          "2766:  }",
          "2767:  r_core_cmd (user, optr, 0);",
          "",
          "[Removed Lines]",
          "2764:   optr = ptr+1;",
          "",
          "[Added Lines]",
          "2764:   optr = ptr + 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}