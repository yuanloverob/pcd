{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
      "candidate_info": {
        "commit_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf1747b78259462caad907eecb10750993ee7e4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "The collating sequence of the column must be TEXT if the LIKE or GLOB pattern starts with a \"+\" sign.  This is another case of ticket [c94369cae9b561b1f996d005] that was discovered by Manuel Rigger.\n\nFossilOrigin-Name: b043a54c3de54b286c4eae564eab6b99118a410d99bdb63480faba3123d2ca11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e897702f8f789fe5119b9042fb93eca3fbfcc44564fbfa66c65628725b1157d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || (zNew[0]+1=='0' && iTo==1)",
          "281:         ){",
          "282:           if( pLeft->op!=TK_COLUMN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:          || zNew[0]=='+'",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   `--SEARCH TABLE t5b USING COVERING INDEX sqlite_autoindex_t5b_1 (x>? AND x<?)",
          "179: }",
          "181: # 2019-02-27",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # 2019-05-01",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "186:   CREATE INDEX t5c_0 ON t5c(c0 COLLATE NOCASE);",
          "187:   INSERT INTO t5c(rowid, c0) VALUES (99,'+/');",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
      "candidate_info": {
        "commit_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d4e720579192f378a3e407e390010de38bfcdcd",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Have fts5 reject attempts to insert a non-integer, non-null value into a rowid column with SQLITE_MISMATCH.\n\nFossilOrigin-Name: 4a9483f81e9ca1aa41d6ca33cb3171370418ccc71fdee9741bbf6f694bf4fbaa",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   assert( pVtab->zErrMsg==0 );",
          "1499:   assert( nArg==1 || nArg==(2+pConfig->nCol+2) );",
          "1503:   );",
          "1504:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1505:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Removed Lines]",
          "1500:   assert( nArg==1",
          "1501:       || sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1502:       || sqlite3_value_type(apVal[1])==SQLITE_NULL",
          "",
          "[Added Lines]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1556:       rc = sqlite3Fts5StorageDelete(pTab->pStorage, iDel, 0);",
          "1557:     }",
          "1567:       }",
          "1585:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1586:           }",
          "1590:         }",
          "1594:       }",
          "1595:     }",
          "1596:   }",
          "",
          "[Removed Lines]",
          "1560:     else if( eType0!=SQLITE_INTEGER ){",
          "1562:       if( eConflict==SQLITE_REPLACE",
          "1563:        && sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1564:       ){",
          "1566:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1568:       fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1569:     }",
          "1572:     else{",
          "1575:       if( iOld!=iNew ){",
          "1576:         if( eConflict==SQLITE_REPLACE ){",
          "1577:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1578:           if( rc==SQLITE_OK ){",
          "1579:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1580:           }",
          "1581:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1582:         }else{",
          "1583:           rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1584:           if( rc==SQLITE_OK ){",
          "1587:           if( rc==SQLITE_OK ){",
          "1588:             rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal, *pRowid);",
          "1589:           }",
          "1591:       }else{",
          "1592:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1593:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "[Added Lines]",
          "1559:     else{",
          "1560:       int eType1 = sqlite3_value_numeric_type(apVal[1]);",
          "1562:       if( eType1!=SQLITE_INTEGER && eType1!=SQLITE_NULL ){",
          "1563:         rc = SQLITE_MISMATCH;",
          "1566:       else if( eType0!=SQLITE_INTEGER ){",
          "1568:         if( eConflict==SQLITE_REPLACE && eType1==SQLITE_INTEGER ){",
          "1570:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1571:         }",
          "1572:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1573:       }",
          "1576:       else{",
          "1579:         if( eType1==SQLITE_INTEGER && iOld!=iNew ){",
          "1580:           if( eConflict==SQLITE_REPLACE ){",
          "1582:             if( rc==SQLITE_OK ){",
          "1583:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1584:             }",
          "1585:             fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1586:           }else{",
          "1587:             rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1588:             if( rc==SQLITE_OK ){",
          "1589:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1590:             }",
          "1591:             if( rc==SQLITE_OK ){",
          "1592:               rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal,*pRowid);",
          "1593:             }",
          "1595:         }else{",
          "1596:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1597:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test": [
          "File: ext/fts5/test/fts5update.test -> ext/fts5/test/fts5update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "135: } {}",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test 4.0 {",
          "138:   CREATE VIRTUAL TABLE x4 USING fts5(a, detail=%DETAIL%);",
          "139:   INSERT INTO x4 VALUES('one two three');",
          "140:   INSERT INTO x4(rowid, a) VALUES('2', 'one two three');",
          "141:   INSERT INTO x4(rowid, a) VALUES('3.0', 'one two three');",
          "142: }",
          "143: do_catchsql_test 4.1 {",
          "144:   INSERT INTO x4(rowid, a) VALUES('four', 'one two three');",
          "145: } {1 {datatype mismatch}}",
          "147: do_catchsql_test 4.2 {",
          "148:   UPDATE x4 SET rowid = 'four' WHERE rowid=1;",
          "149: } {1 {datatype mismatch}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1caff0fb0b2051e205e7a8cfd5dadf92680c52a88a441ded95b1ea6542db5f83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
      "candidate_info": {
        "commit_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Extra comments on fields of the Window object.\n\nFossilOrigin-Name: 3dbed162518a73213bbfb137c763064518fdc2daeae3952cfab39ce0e6813d3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3604:   int regAccum;",
          "3605:   int regResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3613:   int regStartRowid;",
          "3614:   int regEndRowid;",
          "3616: };",
          "3618: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;           /* Defer evaluation of window function arguments",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
      "candidate_info": {
        "commit_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains WINDOW definitions with (illegal) non-numeric expressions as part of a PRECEDING or FOLLOWING clause.\n\nFossilOrigin-Name: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   END}",
          "274: }",
          "276: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: reset_db",
          "279: do_execsql_test 12.1 {",
          "280: CREATE TABLE t1(a,b,c,d,e,f,g,h,j,jj,Zjj,k,aQ,bb,cc,dd,ee DEFAULT 3.14,",
          "281: ff DEFAULT('hiccup'),gg NOD NULL DEFAULT(false));",
          "282: CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "284: SELECT b () OVER , dense_rank() OVER d, d () OVER w1",
          "285: FROM t1",
          "286: WINDOW",
          "287: w1 AS",
          "288: ( w1 ORDER BY d",
          "289: ROWS BETWEEN 2 NOT IN(SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "290: WINDOW",
          "291: w1 AS",
          "292: (PARTITION BY d",
          "293: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "294: d AS",
          "295: (PARTITION BY b ORDER BY d",
          "296: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "297: ) PRECEDING AND 1 FOLLOWING),",
          "298: w2 AS",
          "299: (PARTITION BY b ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),",
          "300: w3 AS",
          "301: (PARTITION BY b ORDER BY d",
          "302: ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "303: ;",
          "304: SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "305: WINDOW",
          "306: w1 AS",
          "307: (PARTITION BY d",
          "308: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "309: d AS",
          "310: (PARTITION BY b ORDER BY d",
          "311: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "312: ;",
          "314: END;",
          "315: }",
          "317: do_execsql_test 12.2 {",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
      "candidate_info": {
        "commit_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d950af311f8db2c34efa5da0256477794b9c3dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereexpr.c",
          "test/whereG.test"
        ],
        "message": "Fix the likely(), unlikely(), and likelihood() functions so that they have no affinity, just like any other function. Ticket [7e07a3dbf5a8cd26]\n\nFossilOrigin-Name: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3384: static void exprToRegister(Expr *pExpr, int iReg){",
          "3386:   p->op2 = p->op;",
          "3387:   p->op = TK_REGISTER;",
          "3388:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3385:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3397:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4191: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4192:   int r2;",
          "4194:   if( ConstFactorOk(pParse)",
          "4195:    && pExpr->op!=TK_REGISTER",
          "4196:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4193:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4205:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4934: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4935:   return sqlite3ExprCompare(0,",
          "4938:              iTab);",
          "4939: }",
          "",
          "[Removed Lines]",
          "4936:              sqlite3ExprSkipCollate(pA),",
          "4937:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4948:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4949:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5143: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5144:   Walker w;",
          "5146:   while( p ){",
          "5147:     if( p->op==TK_NOTNULL ){",
          "5148:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5145:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5157:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4274: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4275: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4276: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4277: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4278: int sqlite3WritableSchema(sqlite3*);",
          "4279: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4277: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2769:   if( pIndex->bUnordered ) return 0;",
          "2770:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2771:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2773:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2774:       if( pExpr->iColumn<0 ) return 1;",
          "2775:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2772:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3710:     for(i=0; i<nOrderBy; i++){",
          "3711:       if( MASKBIT(i) & obSat ) continue;",
          "3713:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3714:       if( pOBExpr->iTable!=iCur ) continue;",
          "3715:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3712:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3829:         isMatch = 0;",
          "3830:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3831:           if( MASKBIT(i) & obSat ) continue;",
          "3833:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3834:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3835:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3832:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}