{
  "cve_id": "CVE-2018-7186",
  "cve_desc": "Leptonica before 1.75.3 does not limit the number of characters in a %s format argument to fscanf or sscanf, which allows remote attackers to cause a denial of service (stack-based buffer overflow) or possibly have unspecified other impact via a long string, as demonstrated by the gplotRead and ptaReadStream functions.",
  "repo": "DanBloomberg/leptonica",
  "patch_hash": "ee301cb2029db8a6289c5295daa42bba7715e99a",
  "patch_info": {
    "commit_hash": "ee301cb2029db8a6289c5295daa42bba7715e99a",
    "repo": "DanBloomberg/leptonica",
    "commit_url": "https://github.com/DanBloomberg/leptonica/commit/ee301cb2029db8a6289c5295daa42bba7715e99a",
    "files": [
      "README.md",
      "prog/xtractprotos.c",
      "src/gplot.c",
      "src/ptabasic.c",
      "src/sel1.c"
    ],
    "message": "Security fixes: expect final changes for release 1.75.3. * Fixed a debian security issue with fscanf() reading a string with   possible buffer overflow. * There were also a few similar situations with sscanf().",
    "before_after_code_files": [
      "prog/xtractprotos.c||prog/xtractprotos.c",
      "src/gplot.c||src/gplot.c",
      "src/ptabasic.c||src/ptabasic.c",
      "src/sel1.c||src/sel1.c"
    ]
  },
  "patch_diff": {
    "prog/xtractprotos.c||prog/xtractprotos.c": [
      "File: prog/xtractprotos.c -> prog/xtractprotos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "87: #include <string.h>",
      "88: #include \"allheaders.h\"",
      "91: static const char *version = \"1.5\";",
      "",
      "[Removed Lines]",
      "90: static const l_int32  L_BUF_SIZE = 512;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: {",
      "97: char        *filein, *str, *tempfile, *prestring, *outprotos, *protostr;",
      "98: const char  *spacestr = \" \";",
      "100: l_uint8     *allheaders;",
      "101: l_int32      i, maxindex, in_line, nflags, protos_added, firstfile, len, ret;",
      "102: size_t       nbytes;",
      "",
      "[Removed Lines]",
      "99: char         buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "99: char         buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125:         if (argv[i][0] == '-') {",
      "126:             if (!strncmp(argv[i], \"-prestring\", 10)) {",
      "127:                 nflags++;",
      "129:                 if (ret != 1) {",
      "130:                     fprintf(stderr, \"parse failure for prestring\\n\");",
      "131:                     return 1;",
      "132:                 }",
      "134:                     L_WARNING(\"prestring too large; omitting!\\n\", mainName);",
      "135:                 } else {",
      "136:                     buf[len] = ' ';",
      "",
      "[Removed Lines]",
      "128:                 ret = sscanf(argv[i] + 1, \"prestring=%s\", buf);",
      "133:                 if ((len = strlen(buf)) > L_BUF_SIZE - 3) {",
      "",
      "[Added Lines]",
      "128:                 ret = sscanf(argv[i] + 1, \"prestring=%490s\", buf);",
      "133:                 if ((len = strlen(buf)) > L_BUFSIZE - 3) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:                 }",
      "140:             } else if (!strncmp(argv[i], \"-protos\", 7)) {",
      "141:                 nflags++;",
      "143:                 if (ret != 1) {",
      "144:                     fprintf(stderr, \"parse failure for protos\\n\");",
      "145:                     return 1;",
      "",
      "[Removed Lines]",
      "142:                 ret = sscanf(argv[i] + 1, \"protos=%s\", buf);",
      "",
      "[Added Lines]",
      "142:                 ret = sscanf(argv[i] + 1, \"protos=%490s\", buf);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "166:     sa = sarrayCreate(0);",
      "167:     sarrayAddString(sa, (char *)\"/*\", L_COPY);",
      "169:              \" *  These prototypes were autogen'd by xtractprotos, v. %s\",",
      "170:              version);",
      "171:     sarrayAddString(sa, buf, L_COPY);",
      "",
      "[Removed Lines]",
      "168:     snprintf(buf, L_BUF_SIZE,",
      "",
      "[Added Lines]",
      "168:     snprintf(buf, L_BUFSIZE,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "190:         len = strlen(filein);",
      "192:             continue;",
      "194:                  filein, tempfile);",
      "196:         if (ret) {",
      "",
      "[Removed Lines]",
      "193:         snprintf(buf, L_BUF_SIZE, \"cpp -ansi -DNO_PROTOS %s %s\",",
      "",
      "[Added Lines]",
      "193:         snprintf(buf, L_BUFSIZE, \"cpp -ansi -DNO_PROTOS %s %s\",",
      "",
      "---------------"
    ],
    "src/gplot.c||src/gplot.c": [
      "File: src/gplot.c -> src/gplot.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100: #include <string.h>",
      "101: #include \"allheaders.h\"",
      "105: const char  *gplotstylenames[] = {\"with lines\",",
      "106:                                   \"with points\",",
      "",
      "[Removed Lines]",
      "103: static const l_int32  L_BUF_SIZE = 512;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:             const char  *ylabel)",
      "143: {",
      "144: char    *newroot;",
      "146: l_int32  badchar;",
      "147: GPLOT   *gplot;",
      "",
      "[Removed Lines]",
      "145: char     buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "145: char     buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "169:     newroot = genPathname(rootname, NULL);",
      "170:     gplot->rootname = newroot;",
      "171:     gplot->outformat = outformat;",
      "173:     gplot->cmdname = stringNew(buf);",
      "174:     if (outformat == GPLOT_PNG)",
      "176:     else if (outformat == GPLOT_PS)",
      "178:     else if (outformat == GPLOT_EPS)",
      "180:     else if (outformat == GPLOT_LATEX)",
      "182:     gplot->outname = stringNew(buf);",
      "183:     if (title) gplot->title = stringNew(title);",
      "184:     if (xlabel) gplot->xlabel = stringNew(xlabel);",
      "",
      "[Removed Lines]",
      "172:     snprintf(buf, L_BUF_SIZE, \"%s.cmd\", rootname);",
      "175:         snprintf(buf, L_BUF_SIZE, \"%s.png\", newroot);",
      "177:         snprintf(buf, L_BUF_SIZE, \"%s.ps\", newroot);",
      "179:         snprintf(buf, L_BUF_SIZE, \"%s.eps\", newroot);",
      "181:         snprintf(buf, L_BUF_SIZE, \"%s.tex\", newroot);",
      "",
      "[Added Lines]",
      "172:     snprintf(buf, L_BUFSIZE, \"%s.cmd\", rootname);",
      "175:         snprintf(buf, L_BUFSIZE, \"%s.png\", newroot);",
      "177:         snprintf(buf, L_BUFSIZE, \"%s.ps\", newroot);",
      "179:         snprintf(buf, L_BUFSIZE, \"%s.eps\", newroot);",
      "181:         snprintf(buf, L_BUFSIZE, \"%s.tex\", newroot);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "266:              l_int32      plotstyle,",
      "267:              const char  *plottitle)",
      "268: {",
      "270: char       emptystring[] = \"\";",
      "271: char      *datastr, *title;",
      "272: l_int32    n, i;",
      "",
      "[Removed Lines]",
      "269: char       buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "269: char       buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305:     gplot->nplots++;",
      "307:     sarrayAddString(gplot->datanames, buf, L_COPY);",
      "",
      "[Removed Lines]",
      "306:     snprintf(buf, L_BUF_SIZE, \"%s.data.%d\", gplot->rootname, gplot->nplots);",
      "",
      "[Added Lines]",
      "306:     snprintf(buf, L_BUFSIZE, \"%s.data.%d\", gplot->rootname, gplot->nplots);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "314:         else",
      "315:             valx = startx + i * delx;",
      "316:         numaGetFValue(nay, i, &valy);",
      "318:         sarrayAddString(sa, buf, L_COPY);",
      "319:     }",
      "320:     datastr = sarrayToString(sa, 0);",
      "",
      "[Removed Lines]",
      "317:         snprintf(buf, L_BUF_SIZE, \"%f %f\\n\", valx, valy);",
      "",
      "[Added Lines]",
      "317:         snprintf(buf, L_BUFSIZE, \"%f %f\\n\", valx, valy);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "378: l_int32",
      "379: gplotMakeOutput(GPLOT  *gplot)",
      "380: {",
      "382: char    *cmdname;",
      "383: l_int32  ignore;",
      "",
      "[Removed Lines]",
      "381: char     buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "381: char     buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "392:     cmdname = genPathname(gplot->cmdname, NULL);",
      "394: #ifndef _WIN32",
      "396: #else",
      "",
      "[Removed Lines]",
      "395:     snprintf(buf, L_BUF_SIZE, \"gnuplot %s\", cmdname);",
      "397:     snprintf(buf, L_BUF_SIZE, \"wgnuplot %s\", cmdname);",
      "",
      "[Added Lines]",
      "395:     snprintf(buf, L_BUFSIZE, \"gnuplot %s\", cmdname);",
      "397:     snprintf(buf, L_BUFSIZE, \"wgnuplot %s\", cmdname);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "415: l_int32",
      "416: gplotGenCommandFile(GPLOT  *gplot)",
      "417: {",
      "419: char    *cmdstr, *plottitle, *dataname;",
      "420: l_int32  i, plotstyle, nplots;",
      "421: FILE    *fp;",
      "",
      "[Removed Lines]",
      "418: char     buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "418: char     buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "434:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "435:     }",
      "438:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "439:     }",
      "442:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "443:     }",
      "446:     if (gplot->outformat == GPLOT_PNG) {",
      "448:                  gplot->outname);",
      "449:     } else if (gplot->outformat == GPLOT_PS) {",
      "451:                  gplot->outname);",
      "452:     } else if (gplot->outformat == GPLOT_EPS) {",
      "454:                  \"set terminal postscript eps; set output '%s'\",",
      "455:                  gplot->outname);",
      "456:     } else if (gplot->outformat == GPLOT_LATEX) {",
      "458:                  gplot->outname);",
      "459:     }",
      "460:     sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "462:     if (gplot->scaling == GPLOT_LOG_SCALE_X ||",
      "463:         gplot->scaling == GPLOT_LOG_SCALE_X_Y) {",
      "465:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "466:     }",
      "467:     if (gplot->scaling == GPLOT_LOG_SCALE_Y ||",
      "468:         gplot->scaling == GPLOT_LOG_SCALE_X_Y) {",
      "470:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "471:     }",
      "",
      "[Removed Lines]",
      "433:         snprintf(buf, L_BUF_SIZE, \"set title '%s'\", gplot->title);",
      "437:         snprintf(buf, L_BUF_SIZE, \"set xlabel '%s'\", gplot->xlabel);",
      "441:         snprintf(buf, L_BUF_SIZE, \"set ylabel '%s'\", gplot->ylabel);",
      "447:         snprintf(buf, L_BUF_SIZE, \"set terminal png; set output '%s'\",",
      "450:         snprintf(buf, L_BUF_SIZE, \"set terminal postscript; set output '%s'\",",
      "453:         snprintf(buf, L_BUF_SIZE,",
      "457:         snprintf(buf, L_BUF_SIZE, \"set terminal latex; set output '%s'\",",
      "464:         snprintf(buf, L_BUF_SIZE, \"set logscale x\");",
      "469:         snprintf(buf, L_BUF_SIZE, \"set logscale y\");",
      "",
      "[Added Lines]",
      "433:         snprintf(buf, L_BUFSIZE, \"set title '%s'\", gplot->title);",
      "437:         snprintf(buf, L_BUFSIZE, \"set xlabel '%s'\", gplot->xlabel);",
      "441:         snprintf(buf, L_BUFSIZE, \"set ylabel '%s'\", gplot->ylabel);",
      "447:         snprintf(buf, L_BUFSIZE, \"set terminal png; set output '%s'\",",
      "450:         snprintf(buf, L_BUFSIZE, \"set terminal postscript; set output '%s'\",",
      "453:         snprintf(buf, L_BUFSIZE,",
      "457:         snprintf(buf, L_BUFSIZE, \"set terminal latex; set output '%s'\",",
      "464:         snprintf(buf, L_BUFSIZE, \"set logscale x\");",
      "469:         snprintf(buf, L_BUFSIZE, \"set logscale y\");",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "476:         dataname = sarrayGetString(gplot->datanames, i, L_NOCOPY);",
      "477:         numaGetIValue(gplot->plotstyles, i, &plotstyle);",
      "478:         if (nplots == 1) {",
      "480:                      dataname, plottitle, gplotstylenames[plotstyle]);",
      "481:         } else {",
      "482:             if (i == 0)",
      "484:                      dataname, plottitle, gplotstylenames[plotstyle]);",
      "485:             else if (i < nplots - 1)",
      "487:                      dataname, plottitle, gplotstylenames[plotstyle]);",
      "488:             else",
      "490:                      dataname, plottitle, gplotstylenames[plotstyle]);",
      "491:         }",
      "492:         sarrayAddString(gplot->cmddata, buf, L_COPY);",
      "",
      "[Removed Lines]",
      "479:             snprintf(buf, L_BUF_SIZE, \"plot '%s' title '%s' %s\",",
      "483:                 snprintf(buf, L_BUF_SIZE, \"plot '%s' title '%s' %s, \\\\\",",
      "486:                 snprintf(buf, L_BUF_SIZE, \" '%s' title '%s' %s, \\\\\",",
      "489:                 snprintf(buf, L_BUF_SIZE, \" '%s' title '%s' %s\",",
      "",
      "[Added Lines]",
      "479:             snprintf(buf, L_BUFSIZE, \"plot '%s' title '%s' %s\",",
      "483:                 snprintf(buf, L_BUFSIZE, \"plot '%s' title '%s' %s, \\\\\",",
      "486:                 snprintf(buf, L_BUFSIZE, \" '%s' title '%s' %s, \\\\\",",
      "489:                 snprintf(buf, L_BUFSIZE, \" '%s' title '%s' %s\",",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "820: GPLOT *",
      "821: gplotRead(const char  *filename)",
      "822: {",
      "824: char    *rootname, *title, *xlabel, *ylabel, *ignores;",
      "825: l_int32  outformat, ret, version, ignore;",
      "826: FILE    *fp;",
      "",
      "[Removed Lines]",
      "823: char     buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "823: char     buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "844:         return (GPLOT *)ERROR_PTR(\"invalid gplot version\", procName, NULL);",
      "845:     }",
      "848:     rootname = stringNew(buf);",
      "849:     ignore = fscanf(fp, \"Output format: %d\\n\", &outformat);",
      "851:     title = stringNew(buf + 7);",
      "852:     title[strlen(title) - 1] = '\\0';",
      "854:     xlabel = stringNew(buf + 14);",
      "855:     xlabel[strlen(xlabel) - 1] = '\\0';",
      "857:     ylabel = stringNew(buf + 14);",
      "858:     ylabel[strlen(ylabel) - 1] = '\\0';",
      "",
      "[Removed Lines]",
      "847:     ignore = fscanf(fp, \"Rootname: %s\\n\", buf);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "872:     sarrayDestroy(&gplot->plottitles);",
      "873:     numaDestroy(&gplot->plotstyles);",
      "876:     stringReplace(&gplot->cmdname, buf);",
      "877:     ignore = fscanf(fp, \"\\nCommandfile data:\");",
      "878:     gplot->cmddata = sarrayReadStream(fp);",
      "",
      "[Removed Lines]",
      "875:     ignore = fscanf(fp, \"Commandfile name: %s\\n\", buf);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "886:     gplot->plotstyles = numaReadStream(fp);",
      "888:     ignore = fscanf(fp, \"Number of plots: %d\\n\", &gplot->nplots);",
      "890:     stringReplace(&gplot->outname, buf);",
      "891:     ignore = fscanf(fp, \"Axis scaling: %d\\n\", &gplot->scaling);",
      "",
      "[Removed Lines]",
      "889:     ignore = fscanf(fp, \"Output file name: %s\\n\", buf);",
      "",
      "[Added Lines]",
      "889:     ignore = fscanf(fp, \"Output file name: %511s\\n\", buf);",
      "",
      "---------------"
    ],
    "src/ptabasic.c||src/ptabasic.c": [
      "File: src/ptabasic.c -> src/ptabasic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "689: PTA *",
      "690: ptaReadStream(FILE  *fp)",
      "691: {",
      "693: l_int32    i, n, ix, iy, type, version;",
      "694: l_float32  x, y;",
      "695: PTA       *pta;",
      "",
      "[Removed Lines]",
      "692: char       typestr[128];",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "703:         return (PTA *)ERROR_PTR(\"not a pta file\", procName, NULL);",
      "704:     if (version != PTA_VERSION_NUMBER)",
      "705:         return (PTA *)ERROR_PTR(\"invalid pta version\", procName, NULL);",
      "707:         return (PTA *)ERROR_PTR(\"not a pta file\", procName, NULL);",
      "708:     if (!strcmp(typestr, \"float\"))",
      "709:         type = 0;",
      "",
      "[Removed Lines]",
      "706:     if (fscanf(fp, \" Number of pts = %d; format = %s\\n\", &n, typestr) != 2)",
      "",
      "[Added Lines]",
      "706:     if (fscanf(fp, \" Number of pts = %d; format = %127s\\n\", &n, typestr) != 2)",
      "",
      "---------------"
    ],
    "src/sel1.c||src/sel1.c": [
      "File: src/sel1.c -> src/sel1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: #include <string.h>",
      "142: #include \"allheaders.h\"",
      "146: static const l_int32  MANY_SELS = 1000;",
      "",
      "[Removed Lines]",
      "144: static const l_int32  L_BUF_SIZE = 256;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "978:                 l_int32  direction)",
      "979: {",
      "980: char    *selname;",
      "982: l_int32  i, nsels, sx, sy, found;",
      "983: SEL     *sel;",
      "",
      "[Removed Lines]",
      "981: char     combname[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "981: char     combname[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "993:     if (direction == L_HORIZ)",
      "998:     found = FALSE;",
      "999:     nsels = selaGetCount(sela);",
      "",
      "[Removed Lines]",
      "994:         snprintf(combname, L_BUF_SIZE, \"sel_comb_%dh\", size);",
      "996:         snprintf(combname, L_BUF_SIZE, \"sel_comb_%dv\", size);",
      "",
      "[Added Lines]",
      "994:         snprintf(combname, L_BUFSIZE, \"sel_comb_%dh\", size);",
      "996:         snprintf(combname, L_BUFSIZE, \"sel_comb_%dv\", size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1041: selaComputeCompositeParameters(const char  *fileout)",
      "1042: {",
      "1043: char    *str, *nameh1, *nameh2, *namev1, *namev2;",
      "1045: l_int32  size, size1, size2, len;",
      "1046: SARRAY  *sa;",
      "1047: SELA    *selabasic, *selacomb;",
      "",
      "[Removed Lines]",
      "1044: char     buf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "1044: char     buf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1060:             nameh2 = stringNew(\"\");",
      "1061:             namev2 = stringNew(\"\");",
      "1062:         }",
      "1064:                  \"      { %d, %d, %d, \\\"%s\\\", \\\"%s\\\", \\\"%s\\\", \\\"%s\\\" },\",",
      "1065:                  size, size1, size2, nameh1, nameh2, namev1, namev2);",
      "1066:         sarrayAddString(sa, buf, L_COPY);",
      "",
      "[Removed Lines]",
      "1063:         snprintf(buf, L_BUF_SIZE,",
      "",
      "[Added Lines]",
      "1063:         snprintf(buf, L_BUFSIZE,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1409: selReadStream(FILE  *fp)",
      "1410: {",
      "1411: char    *selname;",
      "1413: l_int32  sy, sx, cy, cx, i, j, version, ignore;",
      "1414: SEL     *sel;",
      "",
      "[Removed Lines]",
      "1412: char     linebuf[L_BUF_SIZE];",
      "",
      "[Added Lines]",
      "1412: char     linebuf[L_BUFSIZE];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1423:     if (version != SEL_VERSION_NUMBER)",
      "1424:         return (SEL *)ERROR_PTR(\"invalid sel version\", procName, NULL);",
      "1427:         return (SEL *)ERROR_PTR(\"error reading into linebuf\", procName, NULL);",
      "1428:     selname = stringNew(linebuf);",
      "1431:     if (fscanf(fp, \"  sy = %d, sx = %d, cy = %d, cx = %d\\n\",",
      "1432:             &sy, &sx, &cy, &cx) != 4) {",
      "",
      "[Removed Lines]",
      "1426:     if (fgets(linebuf, L_BUF_SIZE, fp) == NULL)",
      "1429:     sscanf(linebuf, \"  ------  %s  ------\", selname);",
      "",
      "[Added Lines]",
      "1426:     if (fgets(linebuf, L_BUFSIZE, fp) == NULL)",
      "1429:     sscanf(linebuf, \"  ------  %200s  ------\", selname);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b88c821f8d347bce0aea86d606c710303919f3d2",
      "candidate_info": {
        "commit_hash": "b88c821f8d347bce0aea86d606c710303919f3d2",
        "repo": "DanBloomberg/leptonica",
        "commit_url": "https://github.com/DanBloomberg/leptonica/commit/b88c821f8d347bce0aea86d606c710303919f3d2",
        "files": [
          "prog/comparepages.c",
          "prog/dewarptest5.c",
          "prog/italic_reg.c",
          "prog/lucasta.150.jpg",
          "prog/rankbin_reg.c",
          "prog/texturefill_reg.c",
          "prog/wordboxes_reg.c",
          "prog/words.15.tif",
          "prog/words.44.tif",
          "prog/wordsinorder.c",
          "prog/zanotti-78.jpg",
          "src/allheaders.h",
          "src/bmpio.c",
          "src/classapp.c",
          "src/finditalic.c",
          "src/gplot.c",
          "src/jbclass.c",
          "src/utils2.c"
        ],
        "message": "New implementation of pixWordMaskByDilation() * more robust, simpler, faster, fewer input args, better debugging output * also simplified pixGetWordsInTextlines(), pixGetWordBoxesInTextlines(),   and jbWordsInTextlines(). * better reg test prog/wordboxes_reg. * also use jpeg output for large images in texturefill_reg.c, instead of   png. The test is now 6x faster and the output images are 7x smaller. * Changes in several other progs due to simpler interfaces above. * Bug fix for bmp reading to set opacity. * Fix for potential injection attack using gplot rootdir.",
        "before_after_code_files": [
          "prog/comparepages.c||prog/comparepages.c",
          "prog/dewarptest5.c||prog/dewarptest5.c",
          "prog/italic_reg.c||prog/italic_reg.c",
          "prog/rankbin_reg.c||prog/rankbin_reg.c",
          "prog/texturefill_reg.c||prog/texturefill_reg.c",
          "prog/wordboxes_reg.c||prog/wordboxes_reg.c",
          "prog/wordsinorder.c||prog/wordsinorder.c",
          "src/allheaders.h||src/allheaders.h",
          "src/bmpio.c||src/bmpio.c",
          "src/classapp.c||src/classapp.c",
          "src/finditalic.c||src/finditalic.c",
          "src/gplot.c||src/gplot.c",
          "src/jbclass.c||src/jbclass.c",
          "src/utils2.c||src/utils2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gplot.c||src/gplot.c"
          ],
          "candidate": [
            "src/gplot.c||src/gplot.c"
          ]
        }
      },
      "candidate_diff": {
        "prog/comparepages.c||prog/comparepages.c": [
          "File: prog/comparepages.c -> prog/comparepages.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     pixs = pixRead(\"lucasta.047.jpg\");",
          "47:     pixb1 = pixConvertTo1(pixs, 128);",
          "49:     pixt = pixDrawBoxaRandom(pixs, boxa1, 2);",
          "50:     pixDisplay(pixt, 100, 100);",
          "51:     pixWrite(\"junkpixt\", pixt, IFF_PNG);",
          "",
          "[Removed Lines]",
          "48:     pixGetWordBoxesInTextlines(pixb1, 1, 10, 10, 500, 50, &boxa1, &nai1);",
          "",
          "[Added Lines]",
          "48:     pixGetWordBoxesInTextlines(pixb1, 10, 10, 500, 50, &boxa1, &nai1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     pixGetDimensions(pixb1, &w, &h, NULL);",
          "63:     pixRasterop(pixb2, 148, 133, w, h, PIX_SRC, pixb1, 0, 0);",
          "64:     pixDisplay(pixb2, 600, 0);",
          "66:     naa2 = boxaExtractSortedPattern(boxa2, nai2);",
          "67:     numaaCompareImagesByBoxes(naa1, naa2, 5, 10, 150, 150, 20, 20, &same, 1);",
          "68:     fprintf(stderr, \"Translation.  same?: %d\\n\\n\", same);",
          "",
          "[Removed Lines]",
          "65:     pixGetWordBoxesInTextlines(pixb2, 1, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "[Added Lines]",
          "65:     pixGetWordBoxesInTextlines(pixb2, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:     pixRasterop(pixb2, 0, 0, w, h / 3, PIX_SRC, pixb1, 0, 2 * h / 3);",
          "78:     pixRasterop(pixb2, 0, h / 3, w, 2 * h / 3, PIX_SRC, pixb1, 0, h / 3);",
          "79:     pixDisplay(pixb2, 900, 0);",
          "81:     naa2 = boxaExtractSortedPattern(boxa2, nai2);",
          "82:     numaaCompareImagesByBoxes(naa1, naa2, 5, 10, 150, 150, 20, 20, &same, 1);",
          "83:     fprintf(stderr, \"Aligned part below h/3.  same?: %d\\n\\n\", same);",
          "",
          "[Removed Lines]",
          "80:     pixGetWordBoxesInTextlines(pixb2, 1, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "[Added Lines]",
          "80:     pixGetWordBoxesInTextlines(pixb2, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:     pixRasterop(pixb2, 0, 0, w, h / 3, PIX_SRC, pixb1, 0, 2 * h / 3);",
          "93:     pixRasterop(pixb2, 0, h / 3, w, 2 * h / 3, PIX_SRC, pixb1, 0, 0);",
          "94:     pixDisplay(pixb2, 1200, 0);",
          "96:     naa2 = boxaExtractSortedPattern(boxa2, nai2);",
          "97:     numaaCompareImagesByBoxes(naa1, naa2, 5, 10, 150, 150, 20, 20, &same, 1);",
          "98:     fprintf(stderr, \"Top/Bot switched; no alignment.  Same?: %d\\n\", same);",
          "",
          "[Removed Lines]",
          "95:     pixGetWordBoxesInTextlines(pixb2, 1, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "[Added Lines]",
          "95:     pixGetWordBoxesInTextlines(pixb2, 10, 10, 500, 50, &boxa2, &nai2);",
          "",
          "---------------"
        ],
        "prog/dewarptest5.c||prog/dewarptest5.c": [
          "File: prog/dewarptest5.c -> prog/dewarptest5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     pixDisplay(pix2, 200, 100);",
          "84:     pix3 = pixConvertTo32(pix2);",
          "85:     pixRenderBoxaArb(pix3, boxa1, 2, 255, 0, 0);",
          "86:     pixDisplay(pix3, 400, 100);",
          "",
          "[Removed Lines]",
          "83:     pixGetWordBoxesInTextlines(pix2, 1, 5, 5, 500, 100, &boxa1, NULL);",
          "",
          "[Added Lines]",
          "83:     pixGetWordBoxesInTextlines(pix2, 5, 5, 500, 100, &boxa1, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     pixDisplay(pix4, 600, 100);",
          "103:     pix5 = pixConvertTo32(pixb);",
          "104:     pixRenderBoxaArb(pix5, boxa3, 2, 255, 0, 0);",
          "105:     pixDisplay(pix5, 800, 100);",
          "",
          "[Removed Lines]",
          "102:     pixGetWordBoxesInTextlines(pixb, 1, 5, 5, 500, 100, &boxa3, NULL);",
          "",
          "[Added Lines]",
          "102:     pixGetWordBoxesInTextlines(pixb, 5, 5, 500, 100, &boxa3, NULL);",
          "",
          "---------------"
        ],
        "prog/italic_reg.c||prog/italic_reg.c": [
          "File: prog/italic_reg.c -> prog/italic_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     pixadb = pixaCreate(5);",
          "69:     l_pdfSetDateAndVersion(0);",
          "70:     pixaConvertToPdf(pixadb, 100, 1.0, L_FLATE_ENCODE, 0, \"Word Mask\",",
          "71:                      \"/tmp/lept/ital/wordmask.pdf\");",
          "",
          "[Removed Lines]",
          "68:     pixWordMaskByDilation(pixs, 20, NULL, &size, pixadb);",
          "",
          "[Added Lines]",
          "68:     pixWordMaskByDilation(pixs, NULL, &size, pixadb);",
          "",
          "---------------"
        ],
        "prog/rankbin_reg.c||prog/rankbin_reg.c": [
          "File: prog/rankbin_reg.c -> prog/rankbin_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: l_int32       i, n, w, h;",
          "41: BOXA         *boxa;",
          "42: NUMA         *naindex, *naw, *nah, *naw_med, *nah_med;",
          "44: L_REGPARAMS  *rp;",
          "46:     if (regTestSetup(argc, argv, &rp))",
          "",
          "[Removed Lines]",
          "43: PIX          *pixs, *pixt;",
          "",
          "[Added Lines]",
          "43: PIX          *pixs, *pix1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     pixs = pixRead(\"feyn.tif\");",
          "52:     n = boxaGetCount(boxa);",
          "53:     naw = numaCreate(0);",
          "54:     nah = numaCreate(0);",
          "",
          "[Removed Lines]",
          "51:     pixGetWordBoxesInTextlines(pixs, 1, 6, 6, 500, 50, &boxa, &naindex);",
          "",
          "[Added Lines]",
          "51:     pix1 = pixReduceRankBinaryCascade(pixs, 1, 0, 0, 0);",
          "52:     pixGetWordBoxesInTextlines(pix1, 6, 6, 500, 50, &boxa, &naindex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     }",
          "60:     boxaDestroy(&boxa);",
          "61:     numaDestroy(&naindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     pixDestroy(&pix1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     pixDestroy(&pixs);",
          "108:     numaDestroy(&naw);",
          "",
          "[Removed Lines]",
          "94:     pixt = pixRead(\"/tmp/lept/regout/w_10bin.png\");",
          "95:     pixDisplayWithTitle(pixt, 0, 0, NULL, rp->display);",
          "96:     pixDestroy(&pixt);",
          "97:     pixt = pixRead(\"/tmp/lept/regout/h_10bin.png\");",
          "98:     pixDisplayWithTitle(pixt, 650, 0, NULL, rp->display);",
          "99:     pixDestroy(&pixt);",
          "100:     pixt = pixRead(\"/tmp/lept/regout/w_30bin.png\");",
          "101:     pixDisplayWithTitle(pixt, 0, 550, NULL, rp->display);",
          "102:     pixDestroy(&pixt);",
          "103:     pixt = pixRead(\"/tmp/lept/regout/h_30bin.png\");",
          "104:     pixDisplayWithTitle(pixt, 650, 550, NULL, rp->display);",
          "105:     pixDestroy(&pixt);",
          "",
          "[Added Lines]",
          "96:     pix1 = pixRead(\"/tmp/lept/regout/w_10bin.png\");",
          "97:     pixDisplayWithTitle(pix1, 0, 0, NULL, rp->display);",
          "98:     pixDestroy(&pix1);",
          "99:     pix1 = pixRead(\"/tmp/lept/regout/h_10bin.png\");",
          "100:     pixDisplayWithTitle(pix1, 650, 0, NULL, rp->display);",
          "101:     pixDestroy(&pix1);",
          "102:     pix1 = pixRead(\"/tmp/lept/regout/w_30bin.png\");",
          "103:     pixDisplayWithTitle(pix1, 0, 550, NULL, rp->display);",
          "104:     pixDestroy(&pix1);",
          "105:     pix1 = pixRead(\"/tmp/lept/regout/h_30bin.png\");",
          "106:     pixDisplayWithTitle(pix1, 650, 550, NULL, rp->display);",
          "107:     pixDestroy(&pix1);",
          "",
          "---------------"
        ],
        "prog/texturefill_reg.c||prog/texturefill_reg.c": [
          "File: prog/texturefill_reg.c -> prog/texturefill_reg.c"
        ],
        "prog/wordboxes_reg.c||prog/wordboxes_reg.c": [
          "File: prog/wordboxes_reg.c -> prog/wordboxes_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"allheaders.h\"",
          "39: void TestBoxaAdjacency(PIX *pixs, L_REGPARAMS  *rp);",
          "42: int main(int    argc,",
          "43:          char **argv)",
          "44: {",
          "47: L_REGPARAMS  *rp;",
          "49:     if (regTestSetup(argc, argv, &rp))",
          "50:         return 1;",
          "52:     pix1 = pixRead(\"lucasta.150.jpg\");",
          "55:     pixDestroy(&pix1);",
          "57:     pix1 = pixRead(\"zanotti-78.jpg\");",
          "60:     pixDestroy(&pix1);",
          "82:     return regTestCleanup(rp);",
          "83: }",
          "85: void",
          "86: MakeWordBoxes1(PIX          *pixs,",
          "88:                L_REGPARAMS  *rp)",
          "89: {",
          "100:     }",
          "103:     pixDestroy(&pix1);",
          "105: }",
          "107: void",
          "108: MakeWordBoxes2(PIX          *pixs,",
          "110:                L_REGPARAMS  *rp)",
          "111: {",
          "112: l_int32  default_minwidth = 10;",
          "",
          "[Removed Lines]",
          "37: void MakeWordBoxes1(PIX *pixs, l_int32 maxdil, L_REGPARAMS *rp);",
          "38: void MakeWordBoxes2(PIX *pixs, l_int32 reduction, L_REGPARAMS  *rp);",
          "45: BOXA         *boxa;",
          "46: PIX          *pix1, *pix2, *pix3, *pix4;",
          "56:     pixDestroy(&pix2);",
          "61:     pixDestroy(&pix2);",
          "78:     TestBoxaAdjacency(pix3, rp);",
          "80:     pixDestroy(&pix3);",
          "81:     pixDestroy(&pix4);",
          "87:                l_int32       maxdil,",
          "90: BOXA  *boxa;",
          "91: PIX   *pix1, *pixd;",
          "93:     pixWordMaskByDilation(pixs, maxdil, &pix1, NULL, NULL);",
          "94:     pixd = NULL;",
          "95:     if (pix1) {",
          "96:         boxa = pixConnComp(pix1, NULL, 8);",
          "97:         pixd = pixConvertTo8(pixs, 1);",
          "98:         pixRenderBoxaArb(pixd, boxa, 2, 255, 0, 0);",
          "99:         boxaDestroy(&boxa);",
          "101:     regTestWritePixAndCheck(rp, pixd, IFF_PNG);",
          "102:     pixDisplayWithTitle(pixd, 0, 100, NULL, rp->display);",
          "104:     pixDestroy(&pixd);",
          "109:                l_int32       reduction,",
          "",
          "[Added Lines]",
          "38: void MakeWordBoxes1(PIX *pixs, l_float32 scalefact, l_int32 thresh,",
          "39:                     l_int32 index, L_REGPARAMS *rp);",
          "40: void MakeWordBoxes2(PIX *pixs, l_float32 scalefact, l_int32 thresh,",
          "41:                     L_REGPARAMS  *rp);",
          "48: PIX          *pix1;",
          "54: #if 1",
          "60: #endif",
          "62: #if 1",
          "67: #endif",
          "69: #if 1",
          "70:     pix1 = pixRead(\"words.15.tif\");",
          "73:     pixDestroy(&pix1);",
          "74: #endif",
          "76: #if 1",
          "77:     pix1 = pixRead(\"words.44.tif\");",
          "80:     pixDestroy(&pix1);",
          "81: #endif",
          "83: #if 1",
          "87:     pix1 = pixRead(\"lucasta.150.jpg\");",
          "89:     pixDestroy(&pix1);",
          "90: #endif",
          "92: #if 1",
          "93:     pix1 = pixRead(\"zanotti-78.jpg\");",
          "95:     pixDestroy(&pix1);",
          "96: #endif",
          "98: #if 1",
          "100:     pix1 = pixRead(\"lucasta.150.jpg\");",
          "102:     pixDestroy(&pix1);",
          "103: #endif",
          "110:                l_float32     scalefact,",
          "111:                l_int32       thresh,",
          "112:                l_int32       index,",
          "115: BOXA  *boxa1, *boxa2;",
          "116: PIX   *pix1, *pix2, *pix3, *pix4, *pix5;",
          "117: PIXA  *pixa1;",
          "119:     pix1 = pixScale(pixs, scalefact, scalefact);",
          "120:     pix2 = pixConvertTo1(pix1, thresh);",
          "121:     pixa1 = pixaCreate(3);",
          "122:     pixWordMaskByDilation(pix2, &pix3, NULL, pixa1);",
          "123:     pix4 = NULL;",
          "124:     if (pix3) {",
          "125:         boxa1 = pixConnComp(pix3, NULL, 8);",
          "126:         boxa2 = boxaTransform(boxa1, 0, 0, 1.0/scalefact, 1.0/scalefact);",
          "127:         pix4 = pixConvertTo32(pixs);",
          "128:         pixRenderBoxaArb(pix4, boxa2, 2, 255, 0, 0);",
          "129:         pix5 = pixaDisplayTiledInColumns(pixa1, 1, 1.0, 25, 2);",
          "130:         pixDisplayWithTitle(pix5, 200 * index, 0, NULL, rp->display);",
          "131:         boxaDestroy(&boxa1);",
          "132:         boxaDestroy(&boxa2);",
          "133:         pixDestroy(&pix3);",
          "134:         pixDestroy(&pix5);",
          "136:     regTestWritePixAndCheck(rp, pix4, IFF_JFIF_JPEG);",
          "137:     pixDisplayWithTitle(pix4, 200 * index, 800, NULL, rp->display);",
          "139:     pixDestroy(&pix2);",
          "140:     pixDestroy(&pix4);",
          "141:     pixaDestroy(&pixa1);",
          "146:                l_float32     scalefact,",
          "147:                l_int32       thresh,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: l_int32  minwidth, minheight, maxwidth, maxheight;",
          "117: BOXA    *boxa1, *boxa2;",
          "118: NUMA    *na;",
          "120: PIXA    *pixa;",
          "129:                            maxwidth, maxheight, &boxa1, &pixa, &na);",
          "130:     pixaDestroy(&pixa);",
          "131:     numaDestroy(&na);",
          "140:     boxaDestroy(&boxa1);",
          "141:     boxaDestroy(&boxa2);",
          "145:                                maxwidth, maxheight, &boxa1, NULL);",
          "153:         L_ERROR(\"pix not the same\", \"MakeWordBoxes2\");",
          "155:     }",
          "158:     boxaDestroy(&boxa1);",
          "159:     boxaDestroy(&boxa2);",
          "160: }",
          "",
          "[Removed Lines]",
          "119: PIX     *pixd1, *pixd2;",
          "122:     minwidth = default_minwidth / reduction;",
          "123:     minheight = default_minheight / reduction;",
          "124:     maxwidth = default_maxwidth / reduction;",
          "125:     maxheight = default_maxheight / reduction;",
          "128:     pixGetWordsInTextlines(pixs, reduction, minwidth, minheight,",
          "132:     if (reduction == 1)",
          "133:         boxa2 = boxaCopy(boxa1, L_CLONE);",
          "134:     else",
          "135:         boxa2 = boxaTransform(boxa1, 0, 0, 2.0, 2.0);",
          "136:     pixd1 = pixConvertTo8(pixs, 1);",
          "137:     pixRenderBoxaArb(pixd1, boxa2, 2, 255, 0, 0);",
          "138:     regTestWritePixAndCheck(rp, pixd1, IFF_PNG);",
          "139:     pixDisplayWithTitle(pixd1, 700, 100, NULL, rp->display);",
          "144:     pixGetWordBoxesInTextlines(pixs, reduction, minwidth, minheight,",
          "146:     if (reduction == 1)",
          "147:         boxa2 = boxaCopy(boxa1, L_CLONE);",
          "148:     else",
          "149:         boxa2 = boxaTransform(boxa1, 0, 0, 2.0, 2.0);",
          "150:     pixd2 = pixConvertTo8(pixs, 1);",
          "151:     pixRenderBoxaArb(pixd2, boxa2, 2, 255, 0, 0);",
          "152:     if (regTestComparePix(rp, pixd1, pixd2)) {",
          "154:         pixDisplayWithTitle(pixd2, 1200, 100, NULL, rp->display);",
          "156:     pixDestroy(&pixd1);",
          "157:     pixDestroy(&pixd2);",
          "",
          "[Added Lines]",
          "157: PIX     *pix1, *pix2, *pix3, *pix4;",
          "160:     minwidth = scalefact * default_minwidth;",
          "161:     minheight = scalefact * default_minheight;",
          "162:     maxwidth = scalefact * default_maxwidth;",
          "163:     maxheight = scalefact * default_maxheight;",
          "166:     pix1 = pixScale(pixs, scalefact, scalefact);",
          "167:     pix2 = pixConvertTo1(pix1, thresh);",
          "168:     pixGetWordsInTextlines(pix2, minwidth, minheight,",
          "172:     boxa2 = boxaTransform(boxa1, 0, 0, 1.0 / scalefact, 1.0 / scalefact);",
          "173:     pix3 = pixConvertTo32(pixs);",
          "174:     pixRenderBoxaArb(pix3, boxa2, 2, 255, 0, 0);",
          "175:     regTestWritePixAndCheck(rp, pix3, IFF_JFIF_JPEG);",
          "176:     pixDisplayWithTitle(pix3, 900, 0, NULL, rp->display);",
          "181:     pixGetWordBoxesInTextlines(pix2, minwidth, minheight,",
          "183:     boxa2 = boxaTransform(boxa1, 0, 0, 1.0 / scalefact, 1.0 / scalefact);",
          "184:     pix4 = pixConvertTo32(pixs);",
          "185:     pixRenderBoxaArb(pix4, boxa2, 2, 255, 0, 0);",
          "186:     if (regTestComparePix(rp, pix3, pix4)) {",
          "188:         pixDisplayWithTitle(pix4, 1200, 0, NULL, rp->display);",
          "190:     pixDestroy(&pix1);",
          "191:     pixDestroy(&pix2);",
          "192:     pixDestroy(&pix3);",
          "193:     pixDestroy(&pix4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166: l_int32  i, j, k, n;",
          "167: BOX     *box1, *box2;",
          "168: BOXA    *boxa0, *boxa1, *boxa2;",
          "170: NUMAA   *naai, *naad;",
          "174:     boxa0 = pixConnComp(pix1, NULL, 8);",
          "175:     boxa1 = boxaSelectBySize(boxa0, 8, 8, L_SELECT_IF_BOTH,",
          "176:                              L_SELECT_IF_GT, NULL);",
          "178:     pixRenderBoxaArb(pix2, boxa1, 2, 255, 0, 0);",
          "181:     pixDestroy(&pix1);",
          "",
          "[Removed Lines]",
          "169: PIX     *pix1, *pix2, *pix3;",
          "173:     pixWordMaskByDilation(pixs, 20, &pix1, NULL, NULL);",
          "177:     pix2 = pixConvertTo8(pixs, 1);",
          "179:     regTestWritePixAndCheck(rp, pix2, IFF_PNG);",
          "180:     pixDisplayWithTitle(pix2, 600, 600, NULL, rp->display);",
          "",
          "[Added Lines]",
          "205: PIX     *pix0, *pix1, *pix2, *pix3;",
          "208:     pix0 = pixConvertTo1(pixs, 140);",
          "211:     pixWordMaskByDilation(pix0, &pix1, NULL, NULL);",
          "215:     pix2 = pixConvertTo32(pixs);",
          "217:     regTestWritePixAndCheck(rp, pix2, IFF_JFIF_JPEG);",
          "218:     pixDisplayWithTitle(pix2, 600, 700, NULL, rp->display);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:         boxDestroy(&box1);",
          "206:         boxaDestroy(&boxa2);",
          "207:     }",
          "211:     pixDestroy(&pix2);",
          "212:     pixDestroy(&pix3);",
          "213:     boxaDestroy(&boxa0);",
          "",
          "[Removed Lines]",
          "208:     regTestWritePixAndCheck(rp, pix3, IFF_PNG);",
          "209:     pixDisplayWithTitle(pix3, 1100, 600, NULL, rp->display);",
          "",
          "[Added Lines]",
          "246:     regTestWritePixAndCheck(rp, pix3, IFF_JFIF_JPEG);",
          "247:     pixDisplayWithTitle(pix3, 1100, 700, NULL, rp->display);",
          "249:     pixDestroy(&pix0);",
          "",
          "---------------"
        ],
        "prog/wordsinorder.c||prog/wordsinorder.c": [
          "File: prog/wordsinorder.c -> prog/wordsinorder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: NUMA        *nai;",
          "62: NUMAA       *naa;",
          "63: SARRAY      *safiles;",
          "65: PIXCMAP     *cmap;",
          "66: static char  mainName[] = \"wordsinorder\";",
          "",
          "[Removed Lines]",
          "64: PIX         *pixs, *pixt1, *pixt2, *pixd;",
          "",
          "[Added Lines]",
          "64: PIX         *pixs, *pix1, *pix2, *pixd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:             L_WARNING(\"image file %d not read\\n\", mainName, i);",
          "95:             continue;",
          "96:         }",
          "98:                                    MAX_WORD_WIDTH, MAX_WORD_HEIGHT,",
          "99:                                    &boxa, &nai);",
          "100:         boxaaAddBoxa(baa, boxa, L_INSERT);",
          "101:         numaaAddNuma(naa, nai, L_INSERT);",
          "103: #if  RENDER_PAGES",
          "109:         pixd = pixCreate(w, h, 8);",
          "111:         pixSetColormap(pixd, cmap);",
          "115:         ncomp = boxaGetCount(boxa);",
          "116:         for (j = 0; j < ncomp; j++) {",
          "117:             box = boxaGetBox(boxa, j, L_CLONE);",
          "",
          "[Removed Lines]",
          "97:         pixGetWordBoxesInTextlines(pixs, 2, MIN_WORD_WIDTH, MIN_WORD_HEIGHT,",
          "107:         pixt1 = pixReduceRankBinary2(pixs, 2, NULL);",
          "108:         pixGetDimensions(pixt1, &w, &h, NULL);",
          "113:         pixt2 = pixUnpackBinary(pixt1, 8, 1);",
          "114:         pixRasterop(pixd, 0, 0, w, h, PIX_SRC | PIX_DST, pixt2, 0, 0);",
          "",
          "[Added Lines]",
          "97:         pix1 = pixReduceRankBinary2(pixs, 1, NULL);",
          "98:         pixGetWordBoxesInTextlines(pix1, MIN_WORD_WIDTH, MIN_WORD_HEIGHT,",
          "103:         pixDestroy(&pix1);",
          "109:         pix1 = pixReduceRankBinary2(pixs, 2, NULL);",
          "110:         pixGetDimensions(pix1, &w, &h, NULL);",
          "115:         pix2 = pixUnpackBinary(pix1, 8, 1);",
          "116:         pixRasterop(pixd, 0, 0, w, h, PIX_SRC | PIX_DST, pix2, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         snprintf(filename, BUF_SIZE, \"%s.%05d\", rootname, i);",
          "126:         fprintf(stderr, \"filename: %s\\n\", filename);",
          "127:         pixWrite(filename, pixd, IFF_PNG);",
          "130:         pixDestroy(&pixs);",
          "131:         pixDestroy(&pixd);",
          "",
          "[Removed Lines]",
          "128:         pixDestroy(&pixt1);",
          "129:         pixDestroy(&pixt2);",
          "",
          "[Added Lines]",
          "130:         pixDestroy(&pix1);",
          "131:         pixDestroy(&pix2);",
          "",
          "---------------"
        ],
        "src/allheaders.h||src/allheaders.h": [
          "File: src/allheaders.h -> src/allheaders.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: LEPT_DLL extern l_int32 jbCorrelation ( const char *dirin, l_float32 thresh, l_float32 weight, l_int32 components, const char *rootname, l_int32 firstpage, l_int32 npages, l_int32 renderflag );",
          "424: LEPT_DLL extern l_int32 jbRankHaus ( const char *dirin, l_int32 size, l_float32 rank, l_int32 components, const char *rootname, l_int32 firstpage, l_int32 npages, l_int32 renderflag );",
          "425: LEPT_DLL extern JBCLASSER * jbWordsInTextlines ( const char *dirin, l_int32 reduction, l_int32 maxwidth, l_int32 maxheight, l_float32 thresh, l_float32 weight, NUMA **pnatl, l_int32 firstpage, l_int32 npages );",
          "428: LEPT_DLL extern NUMAA * boxaExtractSortedPattern ( BOXA *boxa, NUMA *na );",
          "429: LEPT_DLL extern l_int32 numaaCompareImagesByBoxes ( NUMAA *naa1, NUMAA *naa2, l_int32 nperline, l_int32 nreq, l_int32 maxshiftx, l_int32 maxshifty, l_int32 delx, l_int32 dely, l_int32 *psame, l_int32 debugflag );",
          "430: LEPT_DLL extern l_int32 pixColorContent ( PIX *pixs, l_int32 rwhite, l_int32 gwhite, l_int32 bwhite, l_int32 mingray, PIX **ppixr, PIX **ppixg, PIX **ppixb );",
          "",
          "[Removed Lines]",
          "426: LEPT_DLL extern l_int32 pixGetWordsInTextlines ( PIX *pixs, l_int32 reduction, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxad, PIXA **ppixad, NUMA **pnai );",
          "427: LEPT_DLL extern l_int32 pixGetWordBoxesInTextlines ( PIX *pixs, l_int32 reduction, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxad, NUMA **pnai );",
          "",
          "[Added Lines]",
          "426: LEPT_DLL extern l_int32 pixGetWordsInTextlines ( PIX *pixs, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxad, PIXA **ppixad, NUMA **pnai );",
          "427: LEPT_DLL extern l_int32 pixGetWordBoxesInTextlines ( PIX *pixs, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxad, NUMA **pnai );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1038: LEPT_DLL extern l_int32 pixRankHaustest ( PIX *pix1, PIX *pix2, PIX *pix3, PIX *pix4, l_float32 delx, l_float32 dely, l_int32 maxdiffw, l_int32 maxdiffh, l_int32 area1, l_int32 area3, l_float32 rank, l_int32 *tab8 );",
          "1039: LEPT_DLL extern l_int32 jbClassifyCorrelation ( JBCLASSER *classer, BOXA *boxa, PIXA *pixas );",
          "1040: LEPT_DLL extern l_int32 jbGetComponents ( PIX *pixs, l_int32 components, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxad, PIXA **ppixad );",
          "1043: LEPT_DLL extern PIXA * jbAccumulateComposites ( PIXAA *pixaa, NUMA **pna, PTA **pptat );",
          "1044: LEPT_DLL extern PIXA * jbTemplatesFromComposites ( PIXA *pixac, NUMA *na );",
          "1045: LEPT_DLL extern JBCLASSER * jbClasserCreate ( l_int32 method, l_int32 components );",
          "",
          "[Removed Lines]",
          "1041: LEPT_DLL extern l_int32 pixWordMaskByDilation ( PIX *pixs, l_int32 maxdil, PIX **ppixm, l_int32 *psize, PIXA *pixadb );",
          "1042: LEPT_DLL extern l_int32 pixWordBoxesByDilation ( PIX *pixs, l_int32 maxdil, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxa, l_int32 *psize, PIXA *pixadb );",
          "",
          "[Added Lines]",
          "1041: LEPT_DLL extern l_int32 pixWordMaskByDilation ( PIX *pixs, PIX **ppixm, l_int32 *psize, PIXA *pixadb );",
          "1042: LEPT_DLL extern l_int32 pixWordBoxesByDilation ( PIX *pixs, l_int32 minwidth, l_int32 minheight, l_int32 maxwidth, l_int32 maxheight, BOXA **pboxa, l_int32 *psize, PIXA *pixadb );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2600: LEPT_DLL extern char * stringReverse ( const char *src );",
          "2601: LEPT_DLL extern char * strtokSafe ( char *cstr, const char *seps, char **psaveptr );",
          "2602: LEPT_DLL extern l_int32 stringSplitOnToken ( char *cstr, const char *seps, char **phead, char **ptail );",
          "2603: LEPT_DLL extern char * stringRemoveChars ( const char *src, const char *remchars );",
          "2604: LEPT_DLL extern l_int32 stringFindSubstr ( const char *src, const char *sub, l_int32 *ploc );",
          "2605: LEPT_DLL extern char * stringReplaceSubstr ( const char *src, const char *sub1, const char *sub2, l_int32 *pfound, l_int32 *ploc );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2603: LEPT_DLL extern l_int32 stringCheckForChars ( const char *src, const char *chars, l_int32 *pfound );",
          "",
          "---------------"
        ],
        "src/bmpio.c||src/bmpio.c": [
          "File: src/bmpio.c -> src/bmpio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         cmap->n = L_MIN(cmapEntries, 256);",
          "233:     }",
          "234:     pixSetColormap(pix, cmap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:             pixcmapSetAlpha (cmap, i, 255);",
          "",
          "---------------"
        ],
        "src/classapp.c||src/classapp.c": [
          "File: src/classapp.c -> src/classapp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: BOXA       *boxa;",
          "283: JBCLASSER  *classer;",
          "284: NUMA       *nai, *natl;",
          "286: PIXA       *pixa;",
          "287: SARRAY     *safiles;",
          "",
          "[Removed Lines]",
          "285: PIX        *pix;",
          "",
          "[Added Lines]",
          "281: PIX        *pix1, *pix2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:     for (i = 0; i < nfiles; i++) {",
          "308:         fname = sarrayGetString(safiles, i, L_NOCOPY);",
          "310:             L_WARNING(\"image file %d not read\\n\", procName, i);",
          "311:             continue;",
          "312:         }",
          "322:                                JB_WORDS_MIN_HEIGHT, maxwidth, maxheight,",
          "323:                                &boxa, &pixa, &nai);",
          "325:         numaJoin(natl, nai, 0, -1);",
          "327:         numaDestroy(&nai);",
          "328:         boxaDestroy(&boxa);",
          "329:         pixaDestroy(&pixa);",
          "",
          "[Removed Lines]",
          "309:         if ((pix = pixRead(fname)) == NULL) {",
          "313:         pixGetDimensions(pix, &w, &h, NULL);",
          "314:         if (reduction == 1) {",
          "315:             classer->w = w;",
          "316:             classer->h = h;",
          "318:             classer->w = w / 2;",
          "319:             classer->h = h / 2;",
          "320:         }",
          "321:         pixGetWordsInTextlines(pix, reduction, JB_WORDS_MIN_WIDTH,",
          "324:         jbAddPageComponents(classer, pix, boxa, pixa);",
          "326:         pixDestroy(&pix);",
          "",
          "[Added Lines]",
          "305:         if ((pix1 = pixRead(fname)) == NULL) {",
          "309:         if (reduction == 1)",
          "310:             pix2 = pixClone(pix1);",
          "312:             pix2 = pixReduceRankBinaryCascade(pix1, 1, 0, 0, 0);",
          "313:         pixGetWordsInTextlines(pix2, JB_WORDS_MIN_WIDTH,",
          "316:         pixGetDimensions(pix2, &w, &h, NULL);",
          "317:         classer->w = w;",
          "318:         classer->h = h;",
          "319:         jbAddPageComponents(classer, pix2, boxa, pixa);",
          "321:         pixDestroy(&pix1);",
          "322:         pixDestroy(&pix2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385: l_int32",
          "386: pixGetWordsInTextlines(PIX     *pixs,",
          "388:                        l_int32  minwidth,",
          "389:                        l_int32  minheight,",
          "390:                        l_int32  maxwidth,",
          "",
          "[Removed Lines]",
          "387:                        l_int32  reduction,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "393:                        PIXA   **ppixad,",
          "394:                        NUMA   **pnai)",
          "395: {",
          "397: BOXA    *boxa1, *boxad;",
          "398: BOXAA   *baa;",
          "399: NUMA    *nai;",
          "400: NUMAA   *naa;",
          "401: PIXA    *pixa1, *pixad;",
          "403: PIXAA   *paa;",
          "405:     PROCNAME(\"pixGetWordsInTextlines\");",
          "",
          "[Removed Lines]",
          "396: l_int32  maxdil;",
          "402: PIX     *pix1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:     if (!pixs)",
          "413:         return ERROR_INT(\"pixs not defined\", procName, 1);",
          "",
          "[Removed Lines]",
          "414:     if (reduction != 1 && reduction != 2)",
          "415:         return ERROR_INT(\"reduction not in {1,2}\", procName, 1);",
          "417:     if (reduction == 1) {",
          "418:         pix1 = pixClone(pixs);",
          "419:         maxdil = 18;",
          "421:         pix1 = pixReduceRankBinaryCascade(pixs, 1, 0, 0, 0);",
          "422:         maxdil = 9;",
          "423:     }",
          "426:     pixWordBoxesByDilation(pix1, maxdil, minwidth, minheight,",
          "427:                            maxwidth, maxheight, &boxa1, NULL, NULL);",
          "",
          "[Added Lines]",
          "405:     pixWordBoxesByDilation(pixs, minwidth, minheight, maxwidth, maxheight,",
          "406:                            &boxa1, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "446:     pixaDestroy(&pixa1);",
          "447:     boxaDestroy(&boxa1);",
          "448:     boxaaDestroy(&baa);",
          "",
          "[Removed Lines]",
          "445:     pixDestroy(&pix1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "477: l_int32",
          "478: pixGetWordBoxesInTextlines(PIX     *pixs,",
          "480:                            l_int32  minwidth,",
          "481:                            l_int32  minheight,",
          "482:                            l_int32  maxwidth,",
          "",
          "[Removed Lines]",
          "479:                            l_int32  reduction,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "484:                            BOXA   **pboxad,",
          "485:                            NUMA   **pnai)",
          "486: {",
          "488: BOXA    *boxa1;",
          "489: BOXAA   *baa;",
          "490: NUMA    *nai;",
          "493:     PROCNAME(\"pixGetWordBoxesInTextlines\");",
          "",
          "[Removed Lines]",
          "487: l_int32  maxdil;",
          "491: PIX     *pix1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "499:     if (!pixs)",
          "500:         return ERROR_INT(\"pixs not defined\", procName, 1);",
          "517:     baa = boxaSort2d(boxa1, NULL, 3, -5, 5);",
          "",
          "[Removed Lines]",
          "501:     if (reduction != 1 && reduction != 2)",
          "502:         return ERROR_INT(\"reduction not in {1,2}\", procName, 1);",
          "504:     if (reduction == 1) {",
          "505:         pix1 = pixClone(pixs);",
          "506:         maxdil = 18;",
          "508:         pix1 = pixReduceRankBinaryCascade(pixs, 1, 0, 0, 0);",
          "509:         maxdil = 9;",
          "510:     }",
          "513:     pixWordBoxesByDilation(pix1, maxdil, minwidth, minheight,",
          "514:                            maxwidth, maxheight, &boxa1, NULL, NULL);",
          "",
          "[Added Lines]",
          "475:     pixWordBoxesByDilation(pixs, minwidth, minheight, maxwidth, maxheight,",
          "476:                            &boxa1, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "524:     else",
          "525:         numaDestroy(&nai);",
          "527:     boxaDestroy(&boxa1);",
          "528:     boxaaDestroy(&baa);",
          "529:     return 0;",
          "",
          "[Removed Lines]",
          "526:     pixDestroy(&pix1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/finditalic.c||src/finditalic.c": [
          "File: src/finditalic.c -> src/finditalic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     } else if (pixw) {",
          "149:         pixm = pixClone(pixw);",
          "150:     } else {",
          "152:         L_INFO(\"dilation size = %d\\n\", procName, size);",
          "153:         snprintf(opstring, sizeof(opstring), \"d1.5 + c%d.1\", size);",
          "154:         pixm = pixMorphSequence(pixs, opstring, 0);",
          "",
          "[Removed Lines]",
          "151:         pixWordMaskByDilation(pixs, 20, NULL, &size, NULL);",
          "",
          "[Added Lines]",
          "151:         pixWordMaskByDilation(pixs, NULL, &size, NULL);",
          "",
          "---------------"
        ],
        "src/gplot.c||src/gplot.c": [
          "File: src/gplot.c -> src/gplot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:             const char  *xlabel,",
          "142:             const char  *ylabel)",
          "143: {",
          "148:     PROCNAME(\"gplotCreate\");",
          "",
          "[Removed Lines]",
          "144: char   *newroot;",
          "145: char    buf[L_BUF_SIZE];",
          "146: GPLOT  *gplot;",
          "",
          "[Added Lines]",
          "144: char    *newroot;",
          "145: char     buf[L_BUF_SIZE];",
          "146: l_int32  badchar;",
          "147: GPLOT   *gplot;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     if (outformat != GPLOT_PNG && outformat != GPLOT_PS &&",
          "153:         outformat != GPLOT_EPS && outformat != GPLOT_LATEX)",
          "154:         return (GPLOT *)ERROR_PTR(\"outformat invalid\", procName, NULL);",
          "156:     if ((gplot = (GPLOT *)LEPT_CALLOC(1, sizeof(GPLOT))) == NULL)",
          "157:         return (GPLOT *)ERROR_PTR(\"gplot not made\", procName, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     stringCheckForChars(rootname, \"`;&|><\\\"?*\", &badchar);",
          "158:         return (GPLOT *)ERROR_PTR(\"invalid rootname\", procName, NULL);",
          "",
          "---------------"
        ],
        "src/jbclass.c||src/jbclass.c": [
          "File: src/jbclass.c -> src/jbclass.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: struct JbFindTemplatesState",
          "",
          "[Removed Lines]",
          "235: static const l_int32  MAX_ALLOWED_DILATION = 25;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1320: {",
          "1321: l_int32    empty, res, redfactor;",
          "1322: BOXA      *boxa;",
          "1324: PIXA      *pixa, *pixat;",
          "1326:     PROCNAME(\"jbGetComponents\");",
          "",
          "[Removed Lines]",
          "1323: PIX       *pixt1, *pixt2, *pixt3;",
          "",
          "[Added Lines]",
          "1320: PIX       *pix1, *pix2, *pix3;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:         boxa = pixConnComp(pixs, &pixa, 8);",
          "1362:     } else if (components == JB_CHARACTERS) {",
          "1365:         pixa = pixaClipToPix(pixat, pixs);",
          "1367:         pixaDestroy(&pixat);",
          "",
          "[Removed Lines]",
          "1363:         pixt1 = pixMorphSequence(pixs, \"c1.6\", 0);",
          "1364:         boxa = pixConnComp(pixt1, &pixat, 8);",
          "1366:         pixDestroy(&pixt1);",
          "",
          "[Added Lines]",
          "1360:         pix1 = pixMorphSequence(pixs, \"c1.6\", 0);",
          "1361:         boxa = pixConnComp(pix1, &pixat, 8);",
          "1363:         pixDestroy(&pix1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1375:         res = pixGetXRes(pixs);",
          "1376:         if (res <= 200) {",
          "1377:             redfactor = 1;",
          "1379:         } else if (res <= 400) {",
          "1380:             redfactor = 2;",
          "1382:         } else {",
          "1383:             redfactor = 4;",
          "1385:         }",
          "1405:         pixa = pixaClipToPix(pixat, pixs);",
          "1406:         pixaDestroy(&pixat);",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1378:             pixt1 = pixClone(pixs);",
          "1381:             pixt1 = pixReduceRankBinaryCascade(pixs, 1, 0, 0, 0);",
          "1384:             pixt1 = pixReduceRankBinaryCascade(pixs, 1, 1, 0, 0);",
          "1389:         pixWordMaskByDilation(pixt1, 8, &pixt2, NULL, NULL);",
          "1392:         pixt3 = pixExpandReplicate(pixt2, redfactor);",
          "1404:         boxa = pixConnComp(pixt3, &pixat, 4);",
          "1407:         pixDestroy(&pixt1);",
          "1408:         pixDestroy(&pixt2);",
          "1409:         pixDestroy(&pixt3);",
          "",
          "[Added Lines]",
          "1375:             pix1 = pixClone(pixs);",
          "1378:             pix1 = pixReduceRankBinaryCascade(pixs, 1, 0, 0, 0);",
          "1381:             pix1 = pixReduceRankBinaryCascade(pixs, 1, 1, 0, 0);",
          "1386:         pixWordMaskByDilation(pix1, &pix2, NULL, NULL);",
          "1389:         pix3 = pixExpandReplicate(pix2, redfactor);",
          "1401:         boxa = pixConnComp(pix3, &pixat, 4);",
          "1404:         pixDestroy(&pix1);",
          "1405:         pixDestroy(&pix2);",
          "1406:         pixDestroy(&pix3);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1445: l_int32",
          "1446: pixWordMaskByDilation(PIX      *pixs,",
          "1448:                       PIX     **ppixm,",
          "1449:                       l_int32  *psize,",
          "1450:                       PIXA     *pixadb)",
          "1451: {",
          "1458:     PROCNAME(\"pixWordMaskByDilation\");",
          "",
          "[Removed Lines]",
          "1447:                       l_int32   maxdil,",
          "1452: l_int32  i, diffmin, ndiff, imin;",
          "1453: l_int32  ncc[MAX_ALLOWED_DILATION + 1];",
          "1454: BOXA    *boxa;",
          "1455: NUMA    *nacc, *nadiff;",
          "1456: PIX     *pix1, *pix2;",
          "",
          "[Added Lines]",
          "1458: l_int32   i, n, ndil, maxdiff, diff, ibest;",
          "1459: l_int32   start, stop, check, count, total, xres;",
          "1461: l_int32  *diffa;",
          "1462: BOXA     *boxa;",
          "1463: NUMA     *nacc, *nadiff;",
          "1464: PIX      *pix1, *pix2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1464:     if (!ppixm && !psize)",
          "1465:         return ERROR_INT(\"no output requested\", procName, 1);",
          "1476:     pix1 = pixCopy(NULL, pixs);",
          "1486:             pix2 = pixCopy(NULL, pix1);",
          "",
          "[Removed Lines]",
          "1475:     diffmin = 1000000;",
          "1477:     if (maxdil <= 0)",
          "1479:     maxdil = L_MIN(maxdil, MAX_ALLOWED_DILATION);",
          "1480:     if (maxdil > 20)",
          "1481:         L_WARNING(\"large dilation: exceeds 20\\n\", procName);",
          "1482:     nacc = numaCreate(maxdil + 1);",
          "1483:     nadiff = numaCreate(maxdil + 1);",
          "1484:     for (i = 0; i <= maxdil; i++) {",
          "",
          "[Added Lines]",
          "1479:     nacc = numaCreate(ndil + 1);",
          "1480:     nadiff = numaCreate(ndil + 1);",
          "1481:     stop = FALSE;",
          "1482:     for (i = 0; i <= ndil; i++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1489:         boxa = pixConnCompBB(pix2, 4);",
          "1490:         ncc[i] = boxaGetCount(boxa);",
          "1491:         numaAddNumber(nacc, ncc[i]);",
          "1492:         if (i > 0) {",
          "1503:         }",
          "1504:         pixDestroy(&pix1);",
          "1505:         pix1 = pix2;",
          "1506:         boxaDestroy(&boxa);",
          "1507:     }",
          "1508:     pixDestroy(&pix1);",
          "1511:     if (pixadb) {",
          "1512:         lept_mkdir(\"lept/jb\");",
          "1513:         {GPLOT *gplot;",
          "1514:          NUMA  *naseq;",
          "1515:          PIX   *pix3, *pix4;",
          "1517:             naseq = numaMakeSequence(1, 1, numaGetCount(nacc));",
          "1518:             gplot = gplotCreate(\"/tmp/lept/jb/numcc\", GPLOT_PNG,",
          "1519:                                 \"Number of cc vs. horizontal dilation\",",
          "",
          "[Removed Lines]",
          "1493:             ndiff = ncc[i - 1] - ncc[i];",
          "1494:             numaAddNumber(nadiff, ndiff);",
          "1495:             if (pixadb) fprintf(stderr, \"ndiff[%d] = %d\\n\", i - 1, ndiff);",
          "1499:             if (ndiff < diffmin && (ndiff > 0 || i > 2)) {",
          "1500:                 imin = i;",
          "1501:                 diffmin = ndiff;",
          "1502:             }",
          "1509:     if (psize) *psize = imin + 1;",
          "1516:             L_INFO(\"Best dilation: %d\\n\", procName, imin);",
          "",
          "[Added Lines]",
          "1490:         if (i == 0) total = ncc[0];",
          "1492:             diff = ncc[i - 1] - ncc[i];",
          "1493:             numaAddNumber(nadiff, diff);",
          "1504:     diffa = numaGetIArray(nadiff);",
          "1505:     n = numaGetCount(nadiff);",
          "1506:     maxdiff = 0;",
          "1507:     start = 0;",
          "1508:     check = TRUE;",
          "1509:     ibest = 2;",
          "1510:     for (i = 1; i < n; i++) {",
          "1511:         numaGetIValue(nacc, i, &count);",
          "1512:         if (check && count < 0.3 * total) {",
          "1513:             ibest = i + 1;",
          "1514:             check = FALSE;",
          "1515:         }",
          "1516:         diff = diffa[i];",
          "1517:         if (diff > maxdiff) {",
          "1518:             maxdiff = diff;",
          "1519:             start = i;",
          "1520:         }",
          "1521:     }",
          "1522:     LEPT_FREE(diffa);",
          "1525:     xres = pixGetXRes(pixs);",
          "1526:     if (xres == 0) xres = 150;",
          "1527:     if (xres > 110) ibest++;",
          "1528:     if (ibest < 2) {",
          "1529:         L_INFO(\"setting ibest to minimum allowed value of 2\\n\", procName);",
          "1530:         ibest = 2;",
          "1531:     }",
          "1538:             L_INFO(\"Best dilation: %d\\n\", procName, L_MAX(3, ibest + 1));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1534:             pix3 = pixRead(\"/tmp/lept/jb/diffcc.png\");",
          "1535:             pixaAddPix(pixadb, pix3, L_INSERT);",
          "1536:             numaDestroy(&naseq);",
          "1538:             pix4 = pixScaleToSize(pix3, 600, 0);",
          "1539:             pixaAddPix(pixadb, pix4, L_INSERT);",
          "1540:             pixDestroy(&pix3);",
          "1541:         }",
          "1542:     }",
          "1552:     numaDestroy(&nacc);",
          "1553:     numaDestroy(&nadiff);",
          "",
          "[Removed Lines]",
          "1537:             pix3 = pixCloseBrick(NULL, pixs, imin + 1, 1);",
          "1545:     if (ppixm) {",
          "1546:         if (imin < 3)",
          "1547:             L_ERROR(\"imin = %d is too small\\n\", procName, imin);",
          "1548:         else",
          "1550:     }",
          "",
          "[Added Lines]",
          "1559:             pix3 = pixCloseBrick(NULL, pixs, ibest + 1, 1);",
          "1566:     if (psize) *psize = ibest + 1;",
          "1567:     if (ppixm)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1576: l_int32",
          "1577: pixWordBoxesByDilation(PIX      *pixs,",
          "1579:                        l_int32   minwidth,",
          "1580:                        l_int32   minheight,",
          "1581:                        l_int32   maxwidth,",
          "",
          "[Removed Lines]",
          "1578:                        l_int32   maxdil,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1601:         return ERROR_INT(\"pixWordMaskByDilation() failed\", procName, 1);",
          "",
          "[Removed Lines]",
          "1600:     if (pixWordMaskByDilation(pixs, maxdil, &pix1, psize, pixadb))",
          "",
          "[Added Lines]",
          "1616:     if (pixWordMaskByDilation(pixs, &pix1, psize, pixadb))",
          "",
          "---------------"
        ],
        "src/utils2.c||src/utils2.c": [
          "File: src/utils2.c -> src/utils2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: l_int32",
          "720: stringCheckForChars(const char  *src,",
          "721:                     const char  *chars,",
          "722:                     l_int32     *pfound)",
          "723: {",
          "724: char     ch;",
          "725: l_int32  i, n;",
          "727:     PROCNAME(\"stringCheckForChars\");",
          "729:     if (!pfound)",
          "730:         return ERROR_INT(\"&found not defined\", procName, 1);",
          "732:     if (!src || !chars)",
          "733:         return ERROR_INT(\"src and chars not both defined\", procName, 1);",
          "735:     n = strlen(src);",
          "736:     for (i = 0; i < n; i++) {",
          "737:         ch = src[i];",
          "738:         if (strchr(chars, ch)) {",
          "740:             break;",
          "741:         }",
          "742:     }",
          "743:     return 0;",
          "744: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}