{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b79824ec5055bf336840077e5b093e2869a2c18",
      "candidate_info": {
        "commit_hash": "0b79824ec5055bf336840077e5b093e2869a2c18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b79824ec5055bf336840077e5b093e2869a2c18",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Improve Lemon so that it enlarges some of its tables slightly in order to avoid having to index range checks on table lookups for a performance increase.\n\nFossilOrigin-Name: 4be6a23a188bd1fea445283d6dcc2f5c3470c28852dc4895d63117ad0c773fcf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94085fb3e756bc984237b74b6e29c68462ad860870c64dcb5124feaeec387660",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153:   struct rule *rp;",
          "4154:   struct acttab *pActtab;",
          "4155:   int i, j, n, sz;",
          "4158:   const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4156:   int nLookAhead;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4403:     if( la<0 ) la = lemp->nsymbol;",
          "4404:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4405:     fprintf(out, \" %4d,\", la);",
          "4407:       fprintf(out, \"\\n\"); lineno++;",
          "4408:       j = 0;",
          "4409:     }else{",
          "4410:       j++;",
          "4411:     }",
          "4412:   }",
          "4413:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4406:     if( j==9 || i==n-1 ){",
          "",
          "[Added Lines]",
          "4407:     if( j==9 ){",
          "4408:       fprintf(out, \"\\n\"); lineno++;",
          "4409:       j = 0;",
          "4410:     }else{",
          "4411:       j++;",
          "4412:     }",
          "4413:   }",
          "4417:   nLookAhead = lemp->nterminal + lemp->nactiontab;",
          "4418:   while( i<nLookAhead ){",
          "4419:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4420:     fprintf(out, \" %4d,\", lemp->nterminal);",
          "4421:     if( j==9 ){",
          "4427:     i++;",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4490:   if( lemp->has_fallback ){",
          "4491:     int mx = lemp->nterminal - 1;",
          "4493:     lemp->tablesize += (mx+1)*szCodeType;",
          "4494:     for(i=0; i<=mx; i++){",
          "4495:       struct symbol *p = lemp->symbols[i];",
          "",
          "[Removed Lines]",
          "4492:     while( mx>0 && lemp->symbols[mx]->fallback==0 ){ mx--; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:   do{",
          "522:     i = yy_shift_ofst[stateno];",
          "523:     assert( i>=0 );",
          "525:     assert( iLookAhead!=YYNOCODE );",
          "526:     assert( iLookAhead < YYNTOKEN );",
          "527:     i += iLookAhead;",
          "529: #ifdef YYFALLBACK",
          "533: #ifndef NDEBUG",
          "534:         if( yyTraceFILE ){",
          "535:           fprintf(yyTraceFILE, \"%sFALLBACK %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "528:     if( i>=YY_NLOOKAHEAD || yy_lookahead[i]!=iLookAhead ){",
          "531:       if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])",
          "532:              && (iFallback = yyFallback[iLookAhead])!=0 ){",
          "",
          "[Added Lines]",
          "524:     assert( i<=YY_ACTTAB_COUNT );",
          "525:     assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );",
          "529:     assert( i<(int)YY_NLOOKAHEAD );",
          "530:     if( yy_lookahead[i]!=iLookAhead ){",
          "533:       assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );",
          "534:       iFallback = yyFallback[iLookAhead];",
          "535:       if( iFallback!=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544: #ifdef YYWILDCARD",
          "545:       {",
          "546:         int j = i - iLookAhead + YYWILDCARD;",
          "557: #ifndef NDEBUG",
          "558:           if( yyTraceFILE ){",
          "559:             fprintf(yyTraceFILE, \"%sWILDCARD %s => %s\\n\",",
          "",
          "[Removed Lines]",
          "547:         if(",
          "548: #if YY_SHIFT_MIN+YYWILDCARD<0",
          "549:           j>=0 &&",
          "550: #endif",
          "551: #if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT",
          "552:           j<YY_ACTTAB_COUNT &&",
          "553: #endif",
          "554:           j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) &&",
          "555:           yy_lookahead[j]==YYWILDCARD && iLookAhead>0",
          "556:         ){",
          "",
          "[Added Lines]",
          "550:         assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );",
          "551:         if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1070: int ParseFallback(int iToken){",
          "1071: #ifdef YYFALLBACK",
          "1075: #else",
          "1076:   (void)iToken;",
          "1077: #endif",
          "",
          "[Removed Lines]",
          "1072:   if( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) ){",
          "1073:     return yyFallback[iToken];",
          "1074:   }",
          "",
          "[Added Lines]",
          "1067:   assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );",
          "1068:   return yyFallback[iToken];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
      "candidate_info": {
        "commit_hash": "1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e60261cfbc34cdad2625241ba6e5bedfb2e6716",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains an invocation of a currently unregistered aggregate with a FILTER clause.\n\nFossilOrigin-Name: bd37ce3fb8dee8d538f6afc0bfc13cdc3ebdd504e6461f0130c6ecc8af585f68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:         }",
          "893:       }",
          "894: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "896:         is_agg = 1;",
          "897:       }",
          "898: #endif",
          "",
          "[Removed Lines]",
          "895:       else if( pWin ){",
          "",
          "[Added Lines]",
          "895:       else if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:   ALTER TABLE t1 RENAME TO t1x;",
          "332: }",
          "334: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: #-------------------------------------------------------------------------",
          "335: reset_db",
          "336: do_execsql_test 14.1 {",
          "337:   CREATE TABLE t1(a);",
          "338:   CREATE TABLE t2(b);",
          "339:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "340:     SELECT sum() FILTER (WHERE (SELECT sum() FILTER (WHERE 0)) AND a);",
          "341:   END;",
          "342: }",
          "344: do_catchsql_test 14.2 {",
          "345:   ALTER TABLE t1 RENAME TO t1x;",
          "346: } {1 {error in trigger AFTER: no such column: a}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c6a92982ff68cdbace6527e817adbe5a0628ea0",
      "candidate_info": {
        "commit_hash": "9c6a92982ff68cdbace6527e817adbe5a0628ea0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c6a92982ff68cdbace6527e817adbe5a0628ea0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: f0ebea35d9d6b69a7bb4242fb79ff3db4267e429855fa6969f9f52ffee1c7a99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b47513d2b32b61ba42c1e9b59287d28f6fee231e6c65de2a3aa19effbbaf1e7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932:         Vdbe *v = sqlite3GetVdbe(pParse);",
          "933:         int iJump = sqlite3VdbeCurrentAddr(v) + pFKey->nCol + 1;",
          "934:         for(i=0; i<pFKey->nCol; i++){",
          "938:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iJump); VdbeCoverage(v);",
          "939:         }",
          "940:         sqlite3VdbeAddOp2(v, OP_FkCounter, pFKey->isDeferred, -1);",
          "",
          "[Removed Lines]",
          "935:           int iCol, iReg;",
          "936:           iCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iCol) + regOld + 1;",
          "",
          "[Added Lines]",
          "935:           int iFromCol, iReg;",
          "936:           iFromCol = pFKey->aCol[i].iFrom;",
          "937:           iReg = sqlite3TableColumnToStorage(pFKey->pFrom,iFromCol) + regOld+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30fdb45da018bb37d4a97a1b68e5b6d99b427332",
      "candidate_info": {
        "commit_hash": "30fdb45da018bb37d4a97a1b68e5b6d99b427332",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30fdb45da018bb37d4a97a1b68e5b6d99b427332",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ensure that the variable-length integer decoder in FTS3 never tries to left-shift a negative number.\n\nFossilOrigin-Name: 10ffc1fe006a1766ff2f1ffc6129786afb86b6b1f8d3a17334e8ecb838d37b9c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(const unsigned char*)(ptr++)) << shift );  \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 835e2cc55feea2f2426c99816c27f9c35d2fd4cdd9bf1c7f46f889ecfd222778",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
      "candidate_info": {
        "commit_hash": "328c84f1e9933701bf6dff61dc9024dafff979f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/328c84f1e9933701bf6dff61dc9024dafff979f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts3varint.test"
        ],
        "message": "Fix the fts3varint.test script so that it works even on versions of TCL for which Tcl_GetWideIntFromObj() does not work.\n\nFossilOrigin-Name: 53f787ad298756027f630bfefade98b46f01539eb152f7e359b280335c77379e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts3varint.test||test/fts3varint.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 858f62274eb727109d0452ad2d80c0e0acab0f569494b1218c404501e103ed39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3varint.test||test/fts3varint.test": [
          "File: test/fts3varint.test -> test/fts3varint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     2305843009213693951 2305843009213693952 2305843009213693953 }",
          "111: do_fts3_varint_test 2.62 {",
          "112:     4611686018427387903 4611686018427387904 4611686018427387905 }",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "113: do_fts3_varint_test 2.63 {",
          "114:     9223372036854775807 9223372036854775808 9223372036854775809 }",
          "116: do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "",
          "[Added Lines]",
          "114: if {![catch {fts3_test_varint 18446744073709551615}]} {",
          "115:   do_fts3_varint_test 2.63 {",
          "116:       9223372036854775807 9223372036854775808 9223372036854775809 }",
          "118:   do_fts3_varint_test 3.0 { 18446744073709551615 -18446744073709551615 }",
          "119: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}