{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59c3923672d33b4936fc9f82099be522b27f398e",
      "candidate_info": {
        "commit_hash": "59c3923672d33b4936fc9f82099be522b27f398e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/59c3923672d33b4936fc9f82099be522b27f398e",
        "files": [
          "src/node.cc",
          "test/fixtures/module-loading-error.node",
          "test/simple/test-module-loading-error.js"
        ],
        "message": "process: show detailed error message in process.dlopen()",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "test/fixtures/module-loading-error.node||test/fixtures/module-loading-error.node",
          "test/simple/test-module-loading-error.js||test/simple/test-module-loading-error.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "814: }",
          "818: Local<Value> UVException(int errorno,",
          "819:                          const char *syscall,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817: static bool get_uv_dlerror_message(uv_lib_t lib, char* error_msg, int size) {",
          "818:   int r;",
          "819:   const char *msg;",
          "820:   if ((msg = uv_dlerror(lib)) == NULL) {",
          "821:     r = snprintf(error_msg, size, \"%s\", \"Unable to load shared library \");",
          "822:   } else {",
          "823:     r = snprintf(error_msg, size, \"%s\", msg);",
          "824:     uv_dlerror_free(lib, msg);",
          "825:   }",
          "827:   return (0 < r && r < size);",
          "828: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1582:   err = uv_dlopen(*filename, &lib);",
          "1583:   if (err.code != UV_OK) {",
          "1584:     Local<Value> exception = Exception::Error(",
          "1587:     return ThrowException(exception);",
          "1588:   }",
          "",
          "[Removed Lines]",
          "1585:         String::Concat(String::New(\"Unable to load shared library \"),",
          "1586:         args[0]->ToString()));",
          "",
          "[Added Lines]",
          "1599:     char dlerror_msg[1024];",
          "1600:     if (!get_uv_dlerror_message(lib, dlerror_msg, sizeof dlerror_msg)) {",
          "1601:       Local<Value> exception = Exception::Error(",
          "1602:           String::New(\"Cannot retrieve an error message in process.dlopen\"));",
          "1603:       return ThrowException(exception);",
          "1604:     }",
          "1605: #ifdef __POSIX__",
          "1606:     Local<Value> exception = Exception::Error(String::New(dlerror_msg));",
          "1607: #else  // Windows needs to add the filename into the error message",
          "1609:         String::Concat(String::New(dlerror_msg), args[0]->ToString()));",
          "1610: #endif",
          "",
          "---------------"
        ],
        "test/fixtures/module-loading-error.node||test/fixtures/module-loading-error.node": [
          "File: test/fixtures/module-loading-error.node -> test/fixtures/module-loading-error.node",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: foobar",
          "",
          "---------------"
        ],
        "test/simple/test-module-loading-error.js||test/simple/test-module-loading-error.js": [
          "File: test/simple/test-module-loading-error.js -> test/simple/test-module-loading-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: common.debug('load test-module-loading-error.js');",
          "27: var error_desc = {",
          "28:   win32: '%1 is not a valid Win32 application',",
          "29:   linux: 'file too short',",
          "30:   sunos: 'unknown file type'",
          "31: };",
          "33: var dlerror_msg = error_desc[process.platform];",
          "35: if (!dlerror_msg) {",
          "36:   console.error('Skipping test, platform not supported.');",
          "37:   process.exit();",
          "38: }",
          "40: try {",
          "41:   require('../fixtures/module-loading-error.node');",
          "42: } catch (e) {",
          "43:   assert.notEqual(e.toString().indexOf(dlerror_msg), -1);",
          "44: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00fa8864b4b8ff0650e9c82a2ee1f5e87f452c4a",
      "candidate_info": {
        "commit_hash": "00fa8864b4b8ff0650e9c82a2ee1f5e87f452c4a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/00fa8864b4b8ff0650e9c82a2ee1f5e87f452c4a",
        "files": [
          "tools/addon.gypi",
          "tools/gyp_addon"
        ],
        "message": "tools: remove \"addon.gypi\" and \"gyp_addon\"\n\nThey've been merged into `node-gyp` and aren't serving any purpose\nin the node repo. Fixes #3760.",
        "before_after_code_files": [
          "tools/addon.gypi||tools/addon.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/addon.gypi||tools/addon.gypi": [
          "File: tools/addon.gypi -> tools/addon.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1595a6e885eebd5a9d854bd462ab1b80521ff754",
      "candidate_info": {
        "commit_hash": "1595a6e885eebd5a9d854bd462ab1b80521ff754",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1595a6e885eebd5a9d854bd462ab1b80521ff754",
        "files": [
          "lib/cluster.js"
        ],
        "message": "cluster: use process.disconnect method\n\nAfter adding a .disconect method and connected flag in child_process\nwe should no longer use the process._channel object.",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   this.suicide = true;",
          "383:   if (cluster.isMaster) {",
          "386:     closeWorkerChannel(this, function() {",
          "388:       self.process.kill();",
          "389:     });",
          "391:   } else {",
          "396:       sendInternalMessage(this, {cmd: 'suicide'}, function() {",
          "398:         process.exit(0);",
          "399:       });",
          "",
          "[Removed Lines]",
          "393:     if (this.process._channel !== null) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:       setInterval(function() {",
          "408:           process.exit(0);",
          "409:         }",
          "410:       }, 200);",
          "",
          "[Removed Lines]",
          "407:         if (self.process._channel === null) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "431: function quickDestroyCluster() {",
          "432:   eachWorker(function(worker) {",
          "433:     worker.process.kill();",
          "434:   });",
          "435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e7cb68be98920a9fca2fa07201ebb2414300b8d",
      "candidate_info": {
        "commit_hash": "5e7cb68be98920a9fca2fa07201ebb2414300b8d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5e7cb68be98920a9fca2fa07201ebb2414300b8d",
        "files": [
          "test/simple/test-module-load-list.js"
        ],
        "message": "test: remove simple/test-module-load-list\n\nSaid test adds little value and only serves to annoy me when moving around\nmodules. It was broken anyway: it passed inside the test runner and failed\nwhen run from the command line thanks to the environment sniffing it did.",
        "before_after_code_files": [
          "test/simple/test-module-load-list.js||test/simple/test-module-load-list.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-module-load-list.js||test/simple/test-module-load-list.js": [
          "File: test/simple/test-module-load-list.js -> test/simple/test-module-load-list.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5432a1d985df7df57db4106af72dc880d40ea497",
      "candidate_info": {
        "commit_hash": "5432a1d985df7df57db4106af72dc880d40ea497",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5432a1d985df7df57db4106af72dc880d40ea497",
        "files": [
          "src/process_wrap.cc"
        ],
        "message": "process_wrap: set duplex flags when creating a pipe",
        "before_after_code_files": [
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       if (type->Equals(String::NewSymbol(\"ignore\"))) {",
          "107:         options->stdio[i].flags = UV_IGNORE;",
          "108:       } else if (type->Equals(String::NewSymbol(\"pipe\"))) {",
          "110:         options->stdio[i].data.stream = reinterpret_cast<uv_stream_t*>(",
          "111:             PipeWrap::Unwrap(stdio",
          "112:                 ->Get(String::NewSymbol(\"handle\")).As<Object>())->UVHandle());",
          "",
          "[Removed Lines]",
          "109:         options->stdio[i].flags = UV_CREATE_PIPE;",
          "",
          "[Added Lines]",
          "109:         options->stdio[i].flags = static_cast<uv_stdio_flags>(",
          "110:             UV_CREATE_PIPE | UV_READABLE_PIPE | UV_WRITABLE_PIPE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}