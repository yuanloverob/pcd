{
  "cve_id": "CVE-2022-35940",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The `RaggedRangOp` function takes an argument `limits` that is eventually used to construct a `TensorShape` as an `int64`. If `limits` is a very large float, it can overflow when converted to an `int64`. This triggers an `InvalidArgument` but also throws an abort signal that crashes the program. We have patched the issue in GitHub commit 37cefa91bee4eace55715eeef43720b958a01192. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "37cefa91bee4eace55715eeef43720b958a01192",
  "patch_info": {
    "commit_hash": "37cefa91bee4eace55715eeef43720b958a01192",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/37cefa91bee4eace55715eeef43720b958a01192",
    "files": [
      "tensorflow/core/kernels/ragged_range_op.cc",
      "tensorflow/core/kernels/ragged_range_op_test.cc",
      "tensorflow/python/ops/ragged/ragged_range_op_test.py"
    ],
    "message": "[security] Fix int overflow in RaggedRangeOp.\n\nPiperOrigin-RevId: 461749624",
    "before_after_code_files": [
      "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
      "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
      "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc": [
      "File: tensorflow/core/kernels/ragged_range_op.cc -> tensorflow/core/kernels/ragged_range_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: See the License for the specific language governing permissions and",
      "13: limitations under the License.",
      "15: #include <limits>",
      "16: #include <memory>",
      "17: #include <string>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: #include <cstdint>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:       T limit = broadcast_limits ? limits(0) : limits(row);",
      "79:       T delta = broadcast_deltas ? deltas(0) : deltas(row);",
      "80:       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));",
      "83:     }",
      "84:     SPLITS_TYPE nvals = rt_nested_splits(nrows);",
      "",
      "[Removed Lines]",
      "81:       rt_nested_splits(row + 1) =",
      "82:           rt_nested_splits(row) + RangeSize(start, limit, delta);",
      "",
      "[Added Lines]",
      "82:       int64_t size;  // The number of elements in the specified range.",
      "83:       if (((delta > 0) && (limit < start)) ||",
      "84:           ((delta < 0) && (limit > start))) {",
      "85:         size = 0;",
      "86:       } else if (std::is_integral<T>::value) {",
      "88:         size = Eigen::divup(Eigen::numext::abs(limit - start),",
      "89:                             Eigen::numext::abs(delta));",
      "90:       } else {",
      "92:         auto size_auto =",
      "93:             Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));",
      "94:         OP_REQUIRES(",
      "95:             context, size_auto <= std::numeric_limits<int64_t>::max(),",
      "96:             errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
      "97:                                     std::numeric_limits<int64_t>::max()));",
      "98:         size = static_cast<int64_t>(size_auto);",
      "99:       }",
      "100:       rt_nested_splits(row + 1) = rt_nested_splits(row) + size;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "99:       }",
      "100:     }",
      "101:   }",
      "115: };",
      "117: #define REGISTER_CPU_KERNEL(TYPE)                                  \\",
      "",
      "[Removed Lines]",
      "103:  private:",
      "105:   SPLITS_TYPE RangeSize(T start, T limit, T delta) {",
      "106:     if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {",
      "107:       return 0;",
      "108:     }",
      "110:     return (std::is_integral<T>::value",
      "111:                 ? ((std::abs(limit - start) + std::abs(delta) - 1) /",
      "112:                    std::abs(delta))",
      "113:                 : std::ceil(std::abs((limit - start) / delta)));",
      "114:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc": [
      "File: tensorflow/core/kernels/ragged_range_op_test.cc -> tensorflow/core/kernels/ragged_range_op_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: limitations under the License.",
      "16: #include \"tensorflow/core/framework/fake_input.h\"",
      "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
      "18: #include \"tensorflow/core/framework/shape_inference.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: #include <gtest/gtest.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:       test::AsTensor<float>({0, 2, 4, 6, 5, 6, 5, 4, 3, 2}), 0.1);",
      "78: }",
      "80: TEST_F(RaggedRangeOpTest, BroadcastDeltas) {",
      "81:   BuildRaggedRangeGraph<int>();",
      "82:   AddInputFromArray<int>(TensorShape({3}), {0, 5, 8});  // starts",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: TEST_F(RaggedRangeOpTest, RangeSizeOverflow) {",
      "82:   BuildRaggedRangeGraph<float>();",
      "83:   AddInputFromArray<float>(TensorShape({2}), {1.1, 0.1});    // starts",
      "84:   AddInputFromArray<float>(TensorShape({2}), {10.0, 1e10});  // limits",
      "85:   AddInputFromArray<float>(TensorShape({2}), {1, 1e-10});    // deltas",
      "87:   EXPECT_EQ(absl::StrCat(\"Requires ((limit - start) / delta) <= \",",
      "88:                          std::numeric_limits<int64_t>::max()),",
      "89:             RunOpKernel().error_message());",
      "90: }",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py": [
      "File: tensorflow/python/ops/ragged/ragged_range_op_test.py -> tensorflow/python/ops/ragged/ragged_range_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:          list(range(5, 15, 3))])",
      "86:     # Broadcast all arguments.",
      "90:   def testEmptyRanges(self):",
      "91:     rt1 = ragged_math_ops.range([0, 5, 3], [0, 3, 5])",
      "",
      "[Removed Lines]",
      "87:     self.assertAllEqual(",
      "88:         ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
      "",
      "[Added Lines]",
      "87:     self.assertAllEqual(ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:                                 r'Requires delta != 0'):",
      "109:       self.evaluate(ragged_math_ops.range(0, 0, 0))",
      "111:   def testShape(self):",
      "112:     self.assertAllEqual(",
      "113:         ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "111:                                 r'Requires \\(\\(limit - start\\) / delta\\) <='):",
      "112:       self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf767e7d70caceaecee370e9ff4120979e90a56c",
      "candidate_info": {
        "commit_hash": "bf767e7d70caceaecee370e9ff4120979e90a56c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bf767e7d70caceaecee370e9ff4120979e90a56c",
        "files": [
          "tensorflow/core/kernels/as_string_op_test.cc",
          "tensorflow/core/kernels/collective_ops.cc",
          "tensorflow/core/kernels/ctc_loss_op.cc",
          "tensorflow/core/kernels/cudnn_rnn_ops.cc",
          "tensorflow/core/kernels/debug_ops.h",
          "tensorflow/core/kernels/fifo_queue.cc",
          "tensorflow/core/kernels/fingerprint_op_test.cc",
          "tensorflow/core/kernels/gpu_utils.cc",
          "tensorflow/core/kernels/matmul_util.cc",
          "tensorflow/core/kernels/padding_fifo_queue.cc",
          "tensorflow/core/kernels/partitioned_function_ops.cc",
          "tensorflow/core/kernels/ragged_gather_op_test.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc",
          "tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc",
          "tensorflow/core/kernels/random_shuffle_queue_op.cc",
          "tensorflow/core/kernels/requantize_op_test.cc",
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Use tsl::Status::message instead of error_message.\n\nPiperOrigin-RevId: 524071671",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc",
          "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc",
          "tensorflow/core/kernels/ctc_loss_op.cc||tensorflow/core/kernels/ctc_loss_op.cc",
          "tensorflow/core/kernels/cudnn_rnn_ops.cc||tensorflow/core/kernels/cudnn_rnn_ops.cc",
          "tensorflow/core/kernels/debug_ops.h||tensorflow/core/kernels/debug_ops.h",
          "tensorflow/core/kernels/fifo_queue.cc||tensorflow/core/kernels/fifo_queue.cc",
          "tensorflow/core/kernels/fingerprint_op_test.cc||tensorflow/core/kernels/fingerprint_op_test.cc",
          "tensorflow/core/kernels/gpu_utils.cc||tensorflow/core/kernels/gpu_utils.cc",
          "tensorflow/core/kernels/matmul_util.cc||tensorflow/core/kernels/matmul_util.cc",
          "tensorflow/core/kernels/padding_fifo_queue.cc||tensorflow/core/kernels/padding_fifo_queue.cc",
          "tensorflow/core/kernels/partitioned_function_ops.cc||tensorflow/core/kernels/partitioned_function_ops.cc",
          "tensorflow/core/kernels/ragged_gather_op_test.cc||tensorflow/core/kernels/ragged_gather_op_test.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc",
          "tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc||tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc",
          "tensorflow/core/kernels/random_shuffle_queue_op.cc||tensorflow/core/kernels/random_shuffle_queue_op.cc",
          "tensorflow/core/kernels/requantize_op_test.cc||tensorflow/core/kernels/requantize_op_test.cc",
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   Status s = Init(DT_STRING);",
          "175:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "176:   ASSERT_TRUE(absl::StrContains(",
          "178:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "179: }",
          "",
          "[Removed Lines]",
          "177:       s.error_message(),",
          "",
          "[Added Lines]",
          "177:       s.message(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "184:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "188: }",
          "190: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "",
          "[Removed Lines]",
          "185:   ASSERT_TRUE(",
          "186:       absl::StrContains(s.error_message(),",
          "187:                         \"Cannot select both scientific and shortest notation\"));",
          "",
          "[Added Lines]",
          "185:   ASSERT_TRUE(absl::StrContains(",
          "186:       s.message(), \"Cannot select both scientific and shortest notation\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "194:   ASSERT_TRUE(absl::StrContains(",
          "196:       \"scientific and shortest format not supported for datatype\"));",
          "197: }",
          "",
          "[Removed Lines]",
          "195:       s.error_message(),",
          "",
          "[Added Lines]",
          "194:       s.message(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "203:   ASSERT_TRUE(absl::StrContains(",
          "205:       \"scientific and shortest format not supported for datatype\"));",
          "206: }",
          "208: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "209:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "210:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "213: }",
          "215: TEST_F(AsStringGraphTest, LongFill) {",
          "216:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "217:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "219:                                 \"Fill string must be one or fewer characters\"));",
          "220: }",
          "",
          "[Removed Lines]",
          "204:       s.error_message(),",
          "211:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "212:                                 \"precision not supported for datatype\"));",
          "218:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "",
          "[Added Lines]",
          "203:       s.message(),",
          "210:   ASSERT_TRUE(",
          "211:       absl::StrContains(s.message(), \"precision not supported for datatype\"));",
          "217:   ASSERT_TRUE(absl::StrContains(s.message(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "253:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "254:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "257: }",
          "259: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "260:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "261:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "264: }",
          "266: }  // end namespace",
          "",
          "[Removed Lines]",
          "255:   ASSERT_TRUE(",
          "256:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "262:   ASSERT_TRUE(",
          "263:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "",
          "[Added Lines]",
          "254:   ASSERT_TRUE(absl::StrContains(s.message(), \"Fill argument not supported\"));",
          "260:   ASSERT_TRUE(absl::StrContains(s.message(), \"Fill argument not supported\"));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc": [
          "File: tensorflow/core/kernels/collective_ops.cc -> tensorflow/core/kernels/collective_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                      c->device()->GetAllocator(AllocatorAttributes()),",
          "61:   if (!status.ok()) {",
          "64:   }",
          "65:   return k;",
          "66: }",
          "",
          "[Removed Lines]",
          "62:     c->CtxFailureWithWarning(errors::Internal(",
          "63:         \"Failed to build OpKernel for \", name, \" : \", status.error_message()));",
          "",
          "[Added Lines]",
          "62:     c->CtxFailureWithWarning(errors::Internal(\"Failed to build OpKernel for \",",
          "63:                                               name, \" : \", status.message()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ctc_loss_op.cc||tensorflow/core/kernels/ctc_loss_op.cc": [
          "File: tensorflow/core/kernels/ctc_loss_op.cc -> tensorflow/core/kernels/ctc_loss_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     Status labels_sp_valid = labels_sp.IndicesValid();",
          "156:     OP_REQUIRES(ctx, labels_sp_valid.ok(),",
          "157:                 errors::InvalidArgument(\"label SparseTensor is not valid: \",",
          "160:     typename ctc::CTCLossCalculator<T>::LabelSequences labels_t(batch_size);",
          "161:     for (const auto& g : labels_sp.group({0})) {  // iterate by batch",
          "",
          "[Removed Lines]",
          "158:                                         labels_sp_valid.error_message()));",
          "",
          "[Added Lines]",
          "158:                                         labels_sp_valid.message()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/cudnn_rnn_ops.cc||tensorflow/core/kernels/cudnn_rnn_ops.cc": [
          "File: tensorflow/core/kernels/cudnn_rnn_ops.cc -> tensorflow/core/kernels/cudnn_rnn_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "325: }",
          "327: inline Status FromExecutorStatus(const tsl::Status& s) {",
          "329: }",
          "331: template <typename T>",
          "",
          "[Removed Lines]",
          "328:   return s.ok() ? OkStatus() : Status(s.code(), s.error_message());",
          "",
          "[Added Lines]",
          "328:   return s.ok() ? OkStatus() : Status(s.code(), s.message());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334: }",
          "336: inline tsl::Status ToExecutorStatus(const Status& s) {",
          "338: }",
          "340: template <typename>",
          "",
          "[Removed Lines]",
          "337:   return s.ok() ? OkStatus() : Status(s.code(), s.error_message());",
          "",
          "[Added Lines]",
          "337:   return s.ok() ? OkStatus() : Status(s.code(), s.message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/debug_ops.h||tensorflow/core/kernels/debug_ops.h": [
          "File: tensorflow/core/kernels/debug_ops.h -> tensorflow/core/kernels/debug_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:                    << debug_watch_key_->debug_node_name",
          "190:                    << \" failed to publish debug tensor data to all URLs \"",
          "191:                    << str_util::Join(debug_urls_, \", \")",
          "193:       }",
          "194:       return status;",
          "195:     }",
          "",
          "[Removed Lines]",
          "192:                    << \", due to: \" << status.error_message();",
          "",
          "[Added Lines]",
          "192:                    << \", due to: \" << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fifo_queue.cc||tensorflow/core/kernels/fifo_queue.cc": [
          "File: tensorflow/core/kernels/fifo_queue.cc -> tensorflow/core/kernels/fifo_queue.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:                           errors::DataLoss(\"Failed to restore element from \"",
          "278:                                            \"partially-dequeued batch \"",
          "279:                                            \"to FIFOQueue: \",",
          "281:                     }",
          "282:                     queues_[j].push_front(element);",
          "283:                   }",
          "",
          "[Removed Lines]",
          "280:                                            s.error_message()));",
          "",
          "[Added Lines]",
          "280:                                            s.message()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/fingerprint_op_test.cc||tensorflow/core/kernels/fingerprint_op_test.cc": [
          "File: tensorflow/core/kernels/fingerprint_op_test.cc -> tensorflow/core/kernels/fingerprint_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   const Status status = RunOpKernel();",
          "199:   EXPECT_FALSE(status.ok());",
          "201: }",
          "203: TEST_F(FingerprintOpTest, SupportedTypes) {",
          "",
          "[Removed Lines]",
          "200:   EXPECT_NE(status.error_message().find(\"unsupported_method\"), string::npos);",
          "",
          "[Added Lines]",
          "200:   EXPECT_NE(status.message().find(\"unsupported_method\"), string::npos);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/gpu_utils.cc||tensorflow/core/kernels/gpu_utils.cc": [
          "File: tensorflow/core/kernels/gpu_utils.cc -> tensorflow/core/kernels/gpu_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     absl::call_once(failure_logged, [&]() {",
          "70:       LOG(WARNING) << \"Failed to check cudnn convolutions for out-of-bounds \"",
          "71:                    << \"reads and writes with an error message: '\"",
          "73:                    << \"'; skipping this check. This only means that we won't \"",
          "74:                    << \"check cudnn for out-of-bounds reads and writes. This \"",
          "75:                    << \"message will only be printed once.\";",
          "",
          "[Removed Lines]",
          "72:                    << rz_status.status().error_message()",
          "",
          "[Added Lines]",
          "72:                    << rz_status.status().message()",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/matmul_util.cc||tensorflow/core/kernels/matmul_util.cc": [
          "File: tensorflow/core/kernels/matmul_util.cc -> tensorflow/core/kernels/matmul_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   Status status =",
          "72:       ReadInt64FromEnvVar(\"TF_MATMUL_AUTOTUNE_MAX_ALGORITHMS\", 10, &value);",
          "73:   if (!status.ok()) {",
          "75:   }",
          "76:   static constexpr const int kMaxValue = std::numeric_limits<int>::max();",
          "77:   if (value < 1 || value > kMaxValue) {",
          "",
          "[Removed Lines]",
          "74:     LOG(ERROR) << status.error_message();",
          "",
          "[Added Lines]",
          "74:     LOG(ERROR) << status.message();",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/padding_fifo_queue.cc||tensorflow/core/kernels/padding_fifo_queue.cc": [
          "File: tensorflow/core/kernels/padding_fifo_queue.cc -> tensorflow/core/kernels/padding_fifo_queue.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:                           errors::DataLoss(\"Failed to restore element from \"",
          "116:                                            \"partially-dequeued batch \"",
          "117:                                            \"to PaddingFIFOQueue: \",",
          "119:                     }",
          "120:                     queues_[j].push_front(element);",
          "121:                   }",
          "",
          "[Removed Lines]",
          "118:                                            s.error_message()));",
          "",
          "[Added Lines]",
          "118:                                            s.message()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/partitioned_function_ops.cc||tensorflow/core/kernels/partitioned_function_ops.cc": [
          "File: tensorflow/core/kernels/partitioned_function_ops.cc -> tensorflow/core/kernels/partitioned_function_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:              if (!status.ok()) {",
          "265:                const string function_and_msg =",
          "266:                    strings::StrCat(errors::FormatFunctionForError(func_name),",
          "268:                ctx->SetStatus(",
          "269:                    errors::CreateWithUpdatedMessage(status, function_and_msg));",
          "270:              } else {",
          "",
          "[Removed Lines]",
          "267:                                    \" \", status.error_message());",
          "",
          "[Added Lines]",
          "267:                                    \" \", status.message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_gather_op_test.cc||tensorflow/core/kernels/ragged_gather_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_gather_op_test.cc -> tensorflow/core/kernels/ragged_gather_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:       TensorShape({9}),                     // params_dense_values.shape",
          "186:       {.1, .2, .3, .4, .5, .6, .7, .8, .9}  // params_dense_values",
          "187:   );",
          "189: }",
          "191: TEST_F(RaggedGatherOpTest, InvalidSplitsNotSorted) {",
          "",
          "[Removed Lines]",
          "188:   EXPECT_EQ(\"indices[1] = 10 is not in [0, 4)\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "188:   EXPECT_EQ(\"indices[1] = 10 is not in [0, 4)\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:       TensorShape({9}),                     // params_dense_values.shape",
          "197:       {.1, .2, .3, .4, .5, .6, .7, .8, .9}  // params_dense_values",
          "198:   );",
          "200: }",
          "202: TEST_F(RaggedGatherOpTest, InvalidSplitsNegative) {",
          "",
          "[Removed Lines]",
          "199:   EXPECT_EQ(\"Ragged splits must be sorted\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "199:   EXPECT_EQ(\"Ragged splits must be sorted\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:       TensorShape({9}),                     // params_dense_values.shape",
          "208:       {.1, .2, .3, .4, .5, .6, .7, .8, .9}  // params_dense_values",
          "209:   );",
          "212: }",
          "214: TEST_F(RaggedGatherOpTest, InvalidSplitsEmpty) {",
          "",
          "[Removed Lines]",
          "210:   EXPECT_EQ(\"Ragged splits must be non-negative\",",
          "211:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "210:   EXPECT_EQ(\"Ragged splits must be non-negative\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:       TensorShape({0}),  // params_dense_values.shape",
          "220:       {}                 // params_dense_values",
          "221:   );",
          "223: }",
          "225: TEST_F(RaggedGatherOpTest, InvalidSplitsTooBig) {",
          "",
          "[Removed Lines]",
          "222:   EXPECT_EQ(\"Ragged splits may not be empty\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "221:   EXPECT_EQ(\"Ragged splits may not be empty\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:       {.1, .2, .3, .4, .5, .6, .7, .8, .9}  // params_dense_values",
          "232:   );",
          "233:   EXPECT_EQ(\"Ragged splits must not point past values\",",
          "235: }",
          "237: TEST_F(RaggedGatherOpTest, BadValuesShape) {",
          "",
          "[Removed Lines]",
          "234:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "233:             RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "242:       TensorShape({}),   // params_dense_values.shape",
          "243:       {.1}               // params_dense_values",
          "244:   );",
          "246: }",
          "248: TEST_F(RaggedGatherOpTest, ShapeFn) {",
          "",
          "[Removed Lines]",
          "245:   EXPECT_EQ(\"params.rank must be nonzero\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "244:   EXPECT_EQ(\"params.rank must be nonzero\", RunOpKernel().message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_range_op_test.cc -> tensorflow/core/kernels/ragged_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   EXPECT_EQ(absl::StrCat(\"Requires ((limit - start) / delta) <= \",",
          "88:                          std::numeric_limits<int64_t>::max()),",
          "90: }",
          "92: TEST_F(RaggedRangeOpTest, BroadcastDeltas) {",
          "",
          "[Removed Lines]",
          "89:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "89:             RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:   AddInputFromArray<int>(TensorShape({4, 1}), {0, 5, 8, 5});  // starts",
          "153:   AddInputFromArray<int>(TensorShape({4}), {8, 7, 8, 1});     // limits",
          "154:   AddInputFromArray<int>(TensorShape({4}), {2, 1, 1, -1});    // deltas",
          "156: }",
          "158: TEST_F(RaggedRangeOpTest, InvalidArgsLimits) {",
          "",
          "[Removed Lines]",
          "155:   EXPECT_EQ(\"starts must be a scalar or vector\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "155:   EXPECT_EQ(\"starts must be a scalar or vector\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:   AddInputFromArray<int>(TensorShape({4}), {0, 5, 8, 5});     // starts",
          "161:   AddInputFromArray<int>(TensorShape({4, 1}), {8, 7, 8, 1});  // limits",
          "162:   AddInputFromArray<int>(TensorShape({4}), {2, 1, 1, -1});    // deltas",
          "164: }",
          "166: TEST_F(RaggedRangeOpTest, InvalidArgsDeltas) {",
          "",
          "[Removed Lines]",
          "163:   EXPECT_EQ(\"limits must be a scalar or vector\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "163:   EXPECT_EQ(\"limits must be a scalar or vector\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:   AddInputFromArray<int>(TensorShape({4}), {0, 5, 8, 5});      // starts",
          "169:   AddInputFromArray<int>(TensorShape({4}), {8, 7, 8, 1});      // limits",
          "170:   AddInputFromArray<int>(TensorShape({4, 1}), {2, 1, 1, -1});  // deltas",
          "172: }",
          "174: TEST_F(RaggedRangeOpTest, InvalidArgsShapeMismatch) {",
          "",
          "[Removed Lines]",
          "171:   EXPECT_EQ(\"deltas must be a scalar or vector\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "171:   EXPECT_EQ(\"deltas must be a scalar or vector\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:   AddInputFromArray<int>(TensorShape({3}), {7, 8, 1});      // limits",
          "178:   AddInputFromArray<int>(TensorShape({4}), {2, 1, 1, -1});  // deltas",
          "179:   EXPECT_EQ(\"starts, limits, and deltas must have the same shape\",",
          "181: }",
          "183: TEST_F(RaggedRangeOpTest, InvalidArgsZeroDelta) {",
          "",
          "[Removed Lines]",
          "180:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "180:             RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "185:   AddInputFromArray<int>(TensorShape({4}), {0, 5, 8, 5});   // starts",
          "186:   AddInputFromArray<int>(TensorShape({4}), {7, 8, 8, 1});   // limits",
          "187:   AddInputFromArray<int>(TensorShape({4}), {2, 1, 0, -1});  // deltas",
          "189: }",
          "191: TEST_F(RaggedRangeOpTest, EmptyRangePositiveDelta) {",
          "",
          "[Removed Lines]",
          "188:   EXPECT_EQ(\"Requires delta != 0\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "188:   EXPECT_EQ(\"Requires delta != 0\", RunOpKernel().message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:       {component_variant_1, component_variant_2, component_variant_3,",
          "464:        component_variant_4});",
          "465:   EXPECT_TRUE(",
          "467:                        \"Inferred input_ragged_rank (output_ragged_rank - \"",
          "468:                        \"encoded_variant.dims()) must be >= 0\"));",
          "469: }",
          "",
          "[Removed Lines]",
          "466:       absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "466:       absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:   BuildDecodeRaggedTensorGraph<int, int64_t>(",
          "485:       input_ragged_rank, output_ragged_rank, TensorShape({2}),",
          "486:       {variant_component_1, variant_component_2});",
          "488:                                \"output_ragged_rank must be equal to \"",
          "489:                                \"input_ragged_rank + encoded_ragged.dims()\"));",
          "490: }",
          "",
          "[Removed Lines]",
          "487:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "487:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:   BuildDecodeRaggedTensorGraph<int, int64_t>(",
          "496:       input_ragged_rank, output_ragged_rank, TensorShape({2}), {1, 2});",
          "497:   EXPECT_TRUE(absl::StartsWith(",
          "499:       \"Input Variant element at index 0 doesn't hold a RaggedTensorVariant\"));",
          "500: }",
          "",
          "[Removed Lines]",
          "498:       RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "498:       RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "512:       input_ragged_rank, output_ragged_rank, TensorShape({1}),",
          "513:       {variant_component_1});",
          "514:   EXPECT_TRUE(",
          "516:                        \"Encoded input RaggedTensorVariant has ragged_rank=1.  \"",
          "517:                        \"Expected ragged_rank=2.\"));",
          "518: }",
          "",
          "[Removed Lines]",
          "515:       absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "515:       absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "530:                                          TensorShape({1}),",
          "531:                                          {variant_component_1});",
          "532:   EXPECT_TRUE(absl::StartsWith(",
          "534:       \"Expected row_splits Tensor dtype: int32, found: int64\"));",
          "535: }",
          "",
          "[Removed Lines]",
          "533:       RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "533:       RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "544:   int output_ragged_rank = 2;",
          "545:   BuildDecodeRaggedTensorGraph<int, int64_t>(",
          "546:       input_ragged_rank, output_ragged_rank, TensorShape({1}), {encoded});",
          "548:                                \"Ragged splits must have rank 1\"));",
          "549: }",
          "",
          "[Removed Lines]",
          "547:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "547:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "559:       input_ragged_rank, output_ragged_rank, TensorShape({1}),",
          "560:       {variant_component_1});",
          "561:   EXPECT_TRUE(",
          "563:                        \"Expected values Tensor dtype: string, found: int32\"));",
          "564: }",
          "",
          "[Removed Lines]",
          "562:       absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "562:       absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:   BuildDecodeRaggedTensorGraph<int, int64_t>(",
          "572:       input_ragged_rank, output_ragged_rank, TensorShape({1}),",
          "573:       {variant_component_1});",
          "575:                                \"Ragged values must have rank >= 1\"));",
          "576: }",
          "",
          "[Removed Lines]",
          "574:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "574:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "590:   BuildDecodeRaggedTensorGraph<int, int64_t>(",
          "591:       input_ragged_rank, output_ragged_rank, TensorShape({2}),",
          "592:       {variant_component_1, variant_component_2});",
          "594:                                \"Rank of values must match for all components\"));",
          "595: }",
          "",
          "[Removed Lines]",
          "593:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().error_message(),",
          "",
          "[Added Lines]",
          "593:   EXPECT_TRUE(absl::StartsWith(RunOpKernel().message(),",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc||tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc -> tensorflow/core/kernels/ragged_tensor_to_sparse_kernel_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:                    .Attr(\"T\", dtype)",
          "183:                    .Finalize(node_def()));",
          "184:   EXPECT_TRUE(absl::StartsWith(",
          "186:       \"Value for attr 'RAGGED_RANK' of 0 must be at least minimum 1\"));",
          "187: }",
          "",
          "[Removed Lines]",
          "185:       InitOp().error_message(),",
          "",
          "[Added Lines]",
          "185:       InitOp().message(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:   BuildRaggedTensorToSparseGraph<int>({{5, 7, 10}},      // splits",
          "191:                                       TensorShape({0}),  // values.shape",
          "192:                                       {});               // values",
          "195: }",
          "197: TEST_F(RaggedTensorToSparseTest, InvalidArg_BadSplitLengths1) {",
          "",
          "[Removed Lines]",
          "193:   EXPECT_EQ(\"First value of ragged splits must be 0.\",",
          "194:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "193:   EXPECT_EQ(\"First value of ragged splits must be 0.\", RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   EXPECT_EQ(",
          "202:       \"Final value of ragged splits must match the length \"",
          "203:       \"the corresponding ragged values.\",",
          "205: }",
          "207: TEST_F(RaggedTensorToSparseTest, InvalidArg_BadSplitLengths2) {",
          "",
          "[Removed Lines]",
          "204:       RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "203:       RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:   EXPECT_EQ(",
          "212:       \"Final value of ragged splits must match the length \"",
          "213:       \"the corresponding ragged values.\",",
          "215: }",
          "217: TEST_F(RaggedTensorToSparseTest, InvalidArg_EmptySplits) {",
          "218:   BuildRaggedTensorToSparseGraph<int>({{}},              // splits",
          "219:                                       TensorShape({0}),  // values.shape",
          "220:                                       {});               // values",
          "222: }",
          "224: }  // namespace",
          "",
          "[Removed Lines]",
          "214:       RunOpKernel().error_message());",
          "221:   EXPECT_EQ(\"ragged splits may not be empty.\", RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "213:       RunOpKernel().message());",
          "220:   EXPECT_EQ(\"ragged splits may not be empty.\", RunOpKernel().message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_shuffle_queue_op.cc||tensorflow/core/kernels/random_shuffle_queue_op.cc": [
          "File: tensorflow/core/kernels/random_shuffle_queue_op.cc -> tensorflow/core/kernels/random_shuffle_queue_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:                           errors::DataLoss(\"Failed to restore element from \"",
          "358:                                            \"partially-dequeued batch \"",
          "359:                                            \"to RandomShuffleQueue: \",",
          "361:                     }",
          "362:                     queues_[j].push_back(element);",
          "363:                   }",
          "",
          "[Removed Lines]",
          "360:                                            s.error_message()));",
          "",
          "[Added Lines]",
          "360:                                            s.message()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/requantize_op_test.cc||tensorflow/core/kernels/requantize_op_test.cc": [
          "File: tensorflow/core/kernels/requantize_op_test.cc -> tensorflow/core/kernels/requantize_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   AddInputFromArray<float>(TensorShape({}), {0.01f});",
          "77:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "78:   EXPECT_EQ(\"requested_output_min must be <= 0, but got 0.01\",",
          "80: }",
          "82: TEST_F(RequantizeTest, InvalidOutputMax) {",
          "",
          "[Removed Lines]",
          "79:             RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "79:             RunOpKernel().message());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   EXPECT_EQ(",
          "93:       \"requested_output_max must be >= requested_output_min, but got -11 and \"",
          "94:       \"-10\",",
          "96: }",
          "98: }  // end namespace tensorflow",
          "",
          "[Removed Lines]",
          "95:       RunOpKernel().error_message());",
          "",
          "[Added Lines]",
          "95:       RunOpKernel().message());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:                   \"This could mean that the variable has been deleted. \",",
          "146:                   \"In TF1, it can also mean the variable is uninitialized. \",",
          "147:                   \"Debug info: container=\", handle.container(),",
          "150:   tf_shared_lock ml(*variable->mu());",
          "",
          "[Removed Lines]",
          "148:                   \", status error message=\", status.error_message()));",
          "",
          "[Added Lines]",
          "148:                   \", status error message=\", status.message()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:                   \"This could mean that the variable has been deleted. \",",
          "368:                   \"In TF1, it can also mean the variable is uninitialized. \",",
          "369:                   \"Debug info: container=\", handle.container(),",
          "372:   if (variable->copy_on_read_mode.load()) {",
          "",
          "[Removed Lines]",
          "370:                   \", status error message=\", status.error_message()));",
          "",
          "[Added Lines]",
          "370:                   \", status error message=\", status.message()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82f2825ee45b3475260c1d738798221586c8d24d",
      "candidate_info": {
        "commit_hash": "82f2825ee45b3475260c1d738798221586c8d24d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/82f2825ee45b3475260c1d738798221586c8d24d",
        "files": [
          "tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ],
        "message": "[Security] Properly errors out ragged range when int overflowed.\n\nPiperOrigin-RevId: 496433917",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc": [
          "File: tensorflow/core/kernels/ragged_range_op.cc -> tensorflow/core/kernels/ragged_range_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/register_types.h\"",
          "23: #include \"tensorflow/core/framework/tensor.h\"",
          "24: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/tsl/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:       T limit = broadcast_limits ? limits(0) : limits(row);",
          "80:       T delta = broadcast_deltas ? deltas(0) : deltas(row);",
          "81:       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));",
          "83:       if (((delta > 0) && (limit < start)) ||",
          "84:           ((delta < 0) && (limit > start))) {",
          "85:         size = 0;",
          "",
          "[Removed Lines]",
          "82:       int64_t size;  // The number of elements in the specified range.",
          "",
          "[Added Lines]",
          "83:       SPLITS_TYPE size;  // The number of elements in the specified range.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:             context, size_auto <= std::numeric_limits<int64_t>::max(),",
          "96:             errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "97:                                     std::numeric_limits<int64_t>::max()));",
          "99:       }",
          "100:       rt_nested_splits(row + 1) = rt_nested_splits(row) + size;",
          "101:     }",
          "102:     SPLITS_TYPE nvals = rt_nested_splits(nrows);",
          "",
          "[Removed Lines]",
          "98:         size = static_cast<int64_t>(size_auto);",
          "",
          "[Added Lines]",
          "99:         size = static_cast<SPLITS_TYPE>(size_auto);",
          "102:       OP_REQUIRES(context, rt_nested_splits(row + 1) >= 0,",
          "103:                   InvalidArgument(",
          "104:                       \"The total range size overflowed. Consider using int64 \"",
          "105:                       \"instead of int32 for row_splits_dtype.\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_range_op_test.py -> tensorflow/python/ops/ragged/ragged_range_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: # ==============================================================================",
          "15: \"\"\"Tests for ragged_range op.\"\"\"",
          "17: from tensorflow.python.framework import errors",
          "18: from tensorflow.python.framework import test_util",
          "19: from tensorflow.python.ops.ragged import ragged_math_ops",
          "20: from tensorflow.python.platform import googletest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.ops import gen_ragged_math_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:                                 r'Requires \\(\\(limit - start\\) / delta\\) <='):",
          "112:       self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))",
          "114:   def testShape(self):",
          "115:     self.assertAllEqual(",
          "116:         ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     with self.assertRaisesRegex(errors.InvalidArgumentError, 'overflowed'):",
          "117:       self.evaluate(",
          "118:           gen_ragged_math_ops.ragged_range(",
          "119:               starts=[0, 0],",
          "120:               limits=[2**31 - 1, 1],",
          "121:               deltas=[1, 1],",
          "122:               Tsplits=dtypes.int32))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec6c7f6ee314734da6b7ec0765ba772e616f0cf",
      "candidate_info": {
        "commit_hash": "4ec6c7f6ee314734da6b7ec0765ba772e616f0cf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4ec6c7f6ee314734da6b7ec0765ba772e616f0cf",
        "files": [
          "tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ],
        "message": "[security] Fix int overflow in RaggedRangeOp.\n\nPiperOrigin-RevId: 461749624",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc": [
          "File: tensorflow/core/kernels/ragged_range_op.cc -> tensorflow/core/kernels/ragged_range_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "15: #include <limits>",
          "16: #include <memory>",
          "17: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <cstdint>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:       T limit = broadcast_limits ? limits(0) : limits(row);",
          "79:       T delta = broadcast_deltas ? deltas(0) : deltas(row);",
          "80:       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));",
          "83:     }",
          "84:     SPLITS_TYPE nvals = rt_nested_splits(nrows);",
          "",
          "[Removed Lines]",
          "81:       rt_nested_splits(row + 1) =",
          "82:           rt_nested_splits(row) + RangeSize(start, limit, delta);",
          "",
          "[Added Lines]",
          "82:       int64_t size;  // The number of elements in the specified range.",
          "83:       if (((delta > 0) && (limit < start)) ||",
          "84:           ((delta < 0) && (limit > start))) {",
          "85:         size = 0;",
          "86:       } else if (std::is_integral<T>::value) {",
          "88:         size = Eigen::divup(Eigen::numext::abs(limit - start),",
          "89:                             Eigen::numext::abs(delta));",
          "90:       } else {",
          "92:         auto size_auto =",
          "93:             Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));",
          "94:         OP_REQUIRES(",
          "95:             context, size_auto <= std::numeric_limits<int64_t>::max(),",
          "96:             errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "97:                                     std::numeric_limits<int64_t>::max()));",
          "98:         size = static_cast<int64_t>(size_auto);",
          "99:       }",
          "100:       rt_nested_splits(row + 1) = rt_nested_splits(row) + size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:       }",
          "100:     }",
          "101:   }",
          "115: };",
          "117: #define REGISTER_CPU_KERNEL(TYPE)                                  \\",
          "",
          "[Removed Lines]",
          "103:  private:",
          "105:   SPLITS_TYPE RangeSize(T start, T limit, T delta) {",
          "106:     if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {",
          "107:       return 0;",
          "108:     }",
          "110:     return (std::is_integral<T>::value",
          "111:                 ? ((std::abs(limit - start) + std::abs(delta) - 1) /",
          "112:                    std::abs(delta))",
          "113:                 : std::ceil(std::abs((limit - start) / delta)));",
          "114:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_range_op_test.cc -> tensorflow/core/kernels/ragged_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       test::AsTensor<float>({0, 2, 4, 6, 5, 6, 5, 4, 3, 2}), 0.1);",
          "78: }",
          "80: TEST_F(RaggedRangeOpTest, BroadcastDeltas) {",
          "81:   BuildRaggedRangeGraph<int>();",
          "82:   AddInputFromArray<int>(TensorShape({3}), {0, 5, 8});  // starts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: TEST_F(RaggedRangeOpTest, RangeSizeOverflow) {",
          "82:   BuildRaggedRangeGraph<float>();",
          "83:   AddInputFromArray<float>(TensorShape({2}), {1.1, 0.1});    // starts",
          "84:   AddInputFromArray<float>(TensorShape({2}), {10.0, 1e10});  // limits",
          "85:   AddInputFromArray<float>(TensorShape({2}), {1, 1e-10});    // deltas",
          "87:   EXPECT_EQ(absl::StrCat(\"Requires ((limit - start) / delta) <= \",",
          "88:                          std::numeric_limits<int64_t>::max()),",
          "89:             RunOpKernel().error_message());",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_range_op_test.py -> tensorflow/python/ops/ragged/ragged_range_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:          list(range(5, 15, 3))])",
          "90:     # Broadcast all arguments.",
          "94:   def testEmptyRanges(self):",
          "95:     rt1 = ragged_math_ops.range([0, 5, 3], [0, 3, 5])",
          "",
          "[Removed Lines]",
          "91:     self.assertAllEqual(",
          "92:         ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "[Added Lines]",
          "91:     self.assertAllEqual(ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:                                 r'Requires delta != 0'):",
          "113:       self.evaluate(ragged_math_ops.range(0, 0, 0))",
          "115:   def testShape(self):",
          "116:     self.assertAllEqual(",
          "117:         ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "115:                                 r'Requires \\(\\(limit - start\\) / delta\\) <='):",
          "116:       self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aef8b3751ec1437bc69a2c9aea77bb4ae671637d",
      "candidate_info": {
        "commit_hash": "aef8b3751ec1437bc69a2c9aea77bb4ae671637d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/aef8b3751ec1437bc69a2c9aea77bb4ae671637d",
        "files": [
          "tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ],
        "message": "[security] Fix int overflow in RaggedRangeOp.\n\nPiperOrigin-RevId: 461749624",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc": [
          "File: tensorflow/core/kernels/ragged_range_op.cc -> tensorflow/core/kernels/ragged_range_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "15: #include <limits>",
          "16: #include <memory>",
          "17: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <cstdint>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:       T limit = broadcast_limits ? limits(0) : limits(row);",
          "79:       T delta = broadcast_deltas ? deltas(0) : deltas(row);",
          "80:       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));",
          "83:     }",
          "84:     SPLITS_TYPE nvals = rt_nested_splits(nrows);",
          "",
          "[Removed Lines]",
          "81:       rt_nested_splits(row + 1) =",
          "82:           rt_nested_splits(row) + RangeSize(start, limit, delta);",
          "",
          "[Added Lines]",
          "82:       int64_t size;  // The number of elements in the specified range.",
          "83:       if (((delta > 0) && (limit < start)) ||",
          "84:           ((delta < 0) && (limit > start))) {",
          "85:         size = 0;",
          "86:       } else if (std::is_integral<T>::value) {",
          "88:         size = Eigen::divup(Eigen::numext::abs(limit - start),",
          "89:                             Eigen::numext::abs(delta));",
          "90:       } else {",
          "92:         auto size_auto =",
          "93:             Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));",
          "94:         OP_REQUIRES(",
          "95:             context, size_auto <= std::numeric_limits<int64_t>::max(),",
          "96:             errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "97:                                     std::numeric_limits<int64_t>::max()));",
          "98:         size = static_cast<int64_t>(size_auto);",
          "99:       }",
          "100:       rt_nested_splits(row + 1) = rt_nested_splits(row) + size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:       }",
          "100:     }",
          "101:   }",
          "115: };",
          "117: #define REGISTER_CPU_KERNEL(TYPE)                                  \\",
          "",
          "[Removed Lines]",
          "103:  private:",
          "105:   SPLITS_TYPE RangeSize(T start, T limit, T delta) {",
          "106:     if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {",
          "107:       return 0;",
          "108:     }",
          "110:     return (std::is_integral<T>::value",
          "111:                 ? ((std::abs(limit - start) + std::abs(delta) - 1) /",
          "112:                    std::abs(delta))",
          "113:                 : std::ceil(std::abs((limit - start) / delta)));",
          "114:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_range_op_test.cc -> tensorflow/core/kernels/ragged_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       test::AsTensor<float>({0, 2, 4, 6, 5, 6, 5, 4, 3, 2}), 0.1);",
          "78: }",
          "80: TEST_F(RaggedRangeOpTest, BroadcastDeltas) {",
          "81:   BuildRaggedRangeGraph<int>();",
          "82:   AddInputFromArray<int>(TensorShape({3}), {0, 5, 8});  // starts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: TEST_F(RaggedRangeOpTest, RangeSizeOverflow) {",
          "82:   BuildRaggedRangeGraph<float>();",
          "83:   AddInputFromArray<float>(TensorShape({2}), {1.1, 0.1});    // starts",
          "84:   AddInputFromArray<float>(TensorShape({2}), {10.0, 1e10});  // limits",
          "85:   AddInputFromArray<float>(TensorShape({2}), {1, 1e-10});    // deltas",
          "87:   EXPECT_EQ(absl::StrCat(\"Requires ((limit - start) / delta) <= \",",
          "88:                          std::numeric_limits<int64_t>::max()),",
          "89:             RunOpKernel().error_message());",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_range_op_test.py -> tensorflow/python/ops/ragged/ragged_range_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:          list(range(5, 15, 3))])",
          "86:     # Broadcast all arguments.",
          "90:   def testEmptyRanges(self):",
          "91:     rt1 = ragged_math_ops.range([0, 5, 3], [0, 3, 5])",
          "",
          "[Removed Lines]",
          "87:     self.assertAllEqual(",
          "88:         ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "[Added Lines]",
          "87:     self.assertAllEqual(ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                                 r'Requires delta != 0'):",
          "109:       self.evaluate(ragged_math_ops.range(0, 0, 0))",
          "111:   def testShape(self):",
          "112:     self.assertAllEqual(",
          "113:         ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "111:                                 r'Requires \\(\\(limit - start\\) / delta\\) <='):",
          "112:       self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a312d4937976de9701046a15eb58aa05685b01a",
      "candidate_info": {
        "commit_hash": "3a312d4937976de9701046a15eb58aa05685b01a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3a312d4937976de9701046a15eb58aa05685b01a",
        "files": [
          "tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ],
        "message": "[security] Fix int overflow in RaggedRangeOp.\n\nPiperOrigin-RevId: 461749624",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
          "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
          "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc",
            "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc",
            "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_range_op.cc||tensorflow/core/kernels/ragged_range_op.cc": [
          "File: tensorflow/core/kernels/ragged_range_op.cc -> tensorflow/core/kernels/ragged_range_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "15: #include <limits>",
          "16: #include <memory>",
          "17: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <cstdint>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:       T limit = broadcast_limits ? limits(0) : limits(row);",
          "79:       T delta = broadcast_deltas ? deltas(0) : deltas(row);",
          "80:       OP_REQUIRES(context, delta != 0, InvalidArgument(\"Requires delta != 0\"));",
          "83:     }",
          "84:     SPLITS_TYPE nvals = rt_nested_splits(nrows);",
          "",
          "[Removed Lines]",
          "81:       rt_nested_splits(row + 1) =",
          "82:           rt_nested_splits(row) + RangeSize(start, limit, delta);",
          "",
          "[Added Lines]",
          "82:       int64_t size;  // The number of elements in the specified range.",
          "83:       if (((delta > 0) && (limit < start)) ||",
          "84:           ((delta < 0) && (limit > start))) {",
          "85:         size = 0;",
          "86:       } else if (std::is_integral<T>::value) {",
          "88:         size = Eigen::divup(Eigen::numext::abs(limit - start),",
          "89:                             Eigen::numext::abs(delta));",
          "90:       } else {",
          "92:         auto size_auto =",
          "93:             Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));",
          "94:         OP_REQUIRES(",
          "95:             context, size_auto <= std::numeric_limits<int64_t>::max(),",
          "96:             errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",",
          "97:                                     std::numeric_limits<int64_t>::max()));",
          "98:         size = static_cast<int64_t>(size_auto);",
          "99:       }",
          "100:       rt_nested_splits(row + 1) = rt_nested_splits(row) + size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:       }",
          "100:     }",
          "101:   }",
          "115: };",
          "117: #define REGISTER_CPU_KERNEL(TYPE)                                  \\",
          "",
          "[Removed Lines]",
          "103:  private:",
          "105:   SPLITS_TYPE RangeSize(T start, T limit, T delta) {",
          "106:     if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {",
          "107:       return 0;",
          "108:     }",
          "110:     return (std::is_integral<T>::value",
          "111:                 ? ((std::abs(limit - start) + std::abs(delta) - 1) /",
          "112:                    std::abs(delta))",
          "113:                 : std::ceil(std::abs((limit - start) / delta)));",
          "114:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/ragged_range_op_test.cc||tensorflow/core/kernels/ragged_range_op_test.cc": [
          "File: tensorflow/core/kernels/ragged_range_op_test.cc -> tensorflow/core/kernels/ragged_range_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       test::AsTensor<float>({0, 2, 4, 6, 5, 6, 5, 4, 3, 2}), 0.1);",
          "78: }",
          "80: TEST_F(RaggedRangeOpTest, BroadcastDeltas) {",
          "81:   BuildRaggedRangeGraph<int>();",
          "82:   AddInputFromArray<int>(TensorShape({3}), {0, 5, 8});  // starts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: TEST_F(RaggedRangeOpTest, RangeSizeOverflow) {",
          "82:   BuildRaggedRangeGraph<float>();",
          "83:   AddInputFromArray<float>(TensorShape({2}), {1.1, 0.1});    // starts",
          "84:   AddInputFromArray<float>(TensorShape({2}), {10.0, 1e10});  // limits",
          "85:   AddInputFromArray<float>(TensorShape({2}), {1, 1e-10});    // deltas",
          "87:   EXPECT_EQ(absl::StrCat(\"Requires ((limit - start) / delta) <= \",",
          "88:                          std::numeric_limits<int64_t>::max()),",
          "89:             RunOpKernel().error_message());",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_range_op_test.py||tensorflow/python/ops/ragged/ragged_range_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_range_op_test.py -> tensorflow/python/ops/ragged/ragged_range_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:          list(range(5, 15, 3))])",
          "86:     # Broadcast all arguments.",
          "90:   def testEmptyRanges(self):",
          "91:     rt1 = ragged_math_ops.range([0, 5, 3], [0, 3, 5])",
          "",
          "[Removed Lines]",
          "87:     self.assertAllEqual(",
          "88:         ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "[Added Lines]",
          "87:     self.assertAllEqual(ragged_math_ops.range(0, 5, 1), [list(range(0, 5, 1))])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                                 r'Requires delta != 0'):",
          "109:       self.evaluate(ragged_math_ops.range(0, 0, 0))",
          "111:   def testShape(self):",
          "112:     self.assertAllEqual(",
          "113:         ragged_math_ops.range(0, 0, 1).shape.as_list(), [1, None])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "111:                                 r'Requires \\(\\(limit - start\\) / delta\\) <='):",
          "112:       self.evaluate(ragged_math_ops.range(0.1, 1e10, 1e-10))",
          "",
          "---------------"
        ]
      }
    }
  ]
}