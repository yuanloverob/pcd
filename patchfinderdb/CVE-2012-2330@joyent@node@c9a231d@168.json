{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f9aa01de326477be6a77ae258f080c57171a55fa",
      "candidate_info": {
        "commit_hash": "f9aa01de326477be6a77ae258f080c57171a55fa",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f9aa01de326477be6a77ae258f080c57171a55fa",
        "files": [
          "test/simple/test-debugger-repl.js"
        ],
        "message": "test: don't let debugger listen on common.PORT\n\nsimple/test-debugger-repl has a tendency to fail and leave behind a stray\nprocess that listens on common.PORT, making later tests fail with EADDRINUSE.",
        "before_after_code_files": [
          "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-debugger-repl.js||test/simple/test-debugger-repl.js": [
          "File: test/simple/test-debugger-repl.js -> test/simple/test-debugger-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var script = common.fixturesDir + '/breakpoints.js';",
          "32: var buffer = '';",
          "33: child.stdout.setEncoding('utf-8');",
          "",
          "[Removed Lines]",
          "30: var child = spawn(process.execPath, ['debug', '--port=' + common.PORT, script]);",
          "",
          "[Added Lines]",
          "30: var child = spawn(process.execPath,",
          "31:   ['debug', '--port=' + (common.PORT + 1337), script]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6531f187d877da403af0bbe5aa9814705e5ace61",
      "candidate_info": {
        "commit_hash": "6531f187d877da403af0bbe5aa9814705e5ace61",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6531f187d877da403af0bbe5aa9814705e5ace61",
        "files": [
          "lib/util.js"
        ],
        "message": "util: speed up formatting of large arrays/objects\n\nDon't .indexOf() into the keys array. V8 is smart but not so smart that it\nknows how to turn the linear scan into a O(1) lookup.\n\nFixes #3562.",
        "before_after_code_files": [
          "lib/util.js||liutil.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: }",
          "178: function formatValue(ctx, value, recurseTimes) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:   }",
          "200:   if (keys.length === 0) {",
          "",
          "[Removed Lines]",
          "196:   var visibleKeys = Object.keys(value);",
          "197:   var keys = ctx.showHidden ? Object.getOwnPropertyNames(value) : visibleKeys;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:       str = ctx.stylize('[Setter]', 'special');",
          "335:     }",
          "336:   }",
          "338:     name = '[' + key + ']';",
          "339:   }",
          "340:   if (!str) {",
          "",
          "[Removed Lines]",
          "337:   if (visibleKeys.indexOf(key) < 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae5e23310e64db99ddefbf4904f74a42906d6451",
      "candidate_info": {
        "commit_hash": "ae5e23310e64db99ddefbf4904f74a42906d6451",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ae5e23310e64db99ddefbf4904f74a42906d6451",
        "files": [
          "lib/repl.js",
          "test/simple/test-repl.js"
        ],
        "message": "repl: remove double calls where possible\n\nRepl is doing double evaluation of code: wrapped in parens and without\nthem. That's needed to allow users typing multiline chunks of code by\nhandling syntax errors on repl side. However if function declaration is\nwrapped in parens (`(function a() {})`) calling it will be impossible,\nso we're evaluating functions twice. That works fine for declaration,\nbut if entered code chunk returns function - it should not be called\ntwice.\n\nfix #2773",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js",
          "test/simple/test-repl.js||test/simple/test-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:                 function(e, ret) {",
          "186:             if (e && !isSyntaxError(e)) return finish(e);",
          "190:               self.eval(evalCmd, self.context, 'repl', finish);",
          "191:             } else {",
          "",
          "[Removed Lines]",
          "188:             if (typeof ret === 'function' || e) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-repl.js||test/simple/test-repl.js": [
          "File: test/simple/test-repl.js -> test/simple/test-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       expect: prompt_unix },",
          "125:     { client: client_unix, send: 'blah()',",
          "126:       expect: '1\\n' + prompt_unix },",
          "128:     { client: client_unix, send: '{ a: ',",
          "129:       expect: prompt_multiline },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     { client: client_unix, send: 'var I = [1,2,3,function() {}]; I.pop()',",
          "129:       expect: '[Function]' },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9014438c79b06d222df861f87e9af3cb919e495",
      "candidate_info": {
        "commit_hash": "f9014438c79b06d222df861f87e9af3cb919e495",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f9014438c79b06d222df861f87e9af3cb919e495",
        "files": [
          "lib/util.js"
        ],
        "message": "util: use getOwnPropertyDescripter\n\nChange formatProperty in util.js to use Object.getOwnPropertyDescriptor\ninstead of __lookup[GS]etter__.\n\nUse the cached value from the descriptor to reduce number of property\nlookups from 3 to 1.\n\nFallback to standard lookup if the descriptor is empty. This doesn't\never happen with normal JS objects (this function is called only when\nthe key exists) but apparently does with Node's custom ENV interface.\n\nFixes: #2109.",
        "before_after_code_files": [
          "lib/util.js||liutil.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {",
          "307:     } else {",
          "311:     }",
          "312:   }",
          "313:   if (visibleKeys.indexOf(key) < 0) {",
          "314:     name = '[' + key + ']';",
          "315:   }",
          "316:   if (!str) {",
          "318:       if (recurseTimes === null) {",
          "320:       } else {",
          "322:       }",
          "323:       if (str.indexOf('\\n') > -1) {",
          "324:         if (array) {",
          "",
          "[Removed Lines]",
          "299:   var name, str;",
          "300:   if (value.__lookupGetter__) {",
          "301:     if (value.__lookupGetter__(key)) {",
          "302:       if (value.__lookupSetter__(key)) {",
          "303:         str = ctx.stylize('[Getter/Setter]', 'special');",
          "304:       } else {",
          "305:         str = ctx.stylize('[Getter]', 'special');",
          "306:       }",
          "308:       if (value.__lookupSetter__(key)) {",
          "309:         str = ctx.stylize('[Setter]', 'special');",
          "310:       }",
          "317:     if (ctx.seen.indexOf(value[key]) < 0) {",
          "319:         str = formatValue(ctx, value[key], null);",
          "321:         str = formatValue(ctx, value[key], recurseTimes - 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e43fe5c833c941aba25bfdb6193ef41fc50ae405",
      "candidate_info": {
        "commit_hash": "e43fe5c833c941aba25bfdb6193ef41fc50ae405",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e43fe5c833c941aba25bfdb6193ef41fc50ae405",
        "files": [
          "lib/http.js",
          "lib/https.js"
        ],
        "message": "Revert \"http/https: pass request to .createConnection()\"\n\nThis reverts commit 53716eb0b5338999761d115fad9d392077836e63.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/https.js||lihttps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   }",
          "1068:   if (this.sockets[name].length < this.maxSockets) {",
          "1071:   } else {",
          "1073:     if (!this.requests[name]) {",
          "",
          "[Removed Lines]",
          "1070:     req.onSocket(this.createSocket(name, host, port, localAddress, req));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1076:     this.requests[name].push(req);",
          "1077:   }",
          "1078: };",
          "1080:   var self = this;",
          "1081:   var options = util._extend({}, self.options);",
          "1082:   options.port = port;",
          "1083:   options.host = host;",
          "1084:   options.localAddress = localAddress;",
          "1086:   if (!self.sockets[name]) {",
          "1087:     self.sockets[name] = [];",
          "1088:   }",
          "",
          "[Removed Lines]",
          "1079: Agent.prototype.createSocket = function(name, host, port, localAddress, req) {",
          "1085:   var s = self.createConnection.call(req, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:   }",
          "1124:   if (this.requests[name] && this.requests[name].length) {",
          "1131:   }",
          "1132: };",
          "",
          "[Removed Lines]",
          "1126:     this.createSocket(name,",
          "1127:                       host,",
          "1128:                       port,",
          "1129:                       localAddress,",
          "1130:                       this.requests[name][0]).emit('free');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:   var self = this;",
          "1140:   OutgoingMessage.call(self);",
          "1143:   self.agent = options.agent === undefined ? globalAgent : options.agent;",
          "1145:   var defaultPort = options.defaultPort || 80;",
          "",
          "[Removed Lines]",
          "1142:   this.options = util._extend({}, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1199:     self._last = true;",
          "1200:     self.shouldKeepAlive = false;",
          "1201:     if (options.createConnection) {",
          "1203:     } else {",
          "1204:       self.onSocket(net.createConnection(self.socketPath));",
          "1205:     }",
          "",
          "[Removed Lines]",
          "1202:       self.onSocket(options.createConnection.call(self, self.socketPath));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1215:     if (options.createConnection) {",
          "1216:       options.port = port;",
          "1217:       options.host = host;",
          "1219:     } else {",
          "1220:       var conn = net.createConnection({",
          "1221:         port: port,",
          "",
          "[Removed Lines]",
          "1218:       var conn = options.createConnection.call(self, options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var tls = require('tls');",
          "23: var http = require('http');",
          "27: function Server(opts, requestListener) {",
          "28:   if (!(this instanceof Server)) return new Server(opts, requestListener);",
          "",
          "[Removed Lines]",
          "24: var util = require('util');",
          "25: var inherits = util.inherits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: function createConnection(/* [port, host, options] */) {",
          "58:   if (typeof arguments[0] === 'object') {",
          "60:   } else if (typeof arguments[1] === 'object') {",
          "62:     options.port = arguments[0];",
          "63:   } else if (typeof arguments[2] === 'object') {",
          "65:     options.port = arguments[0];",
          "66:     options.host = arguments[1];",
          "67:   } else {",
          "",
          "[Removed Lines]",
          "56:   var options = util._extend({}, this.options);",
          "59:     options = util._extend(options, arguments[0]);",
          "61:     options = util._extend(options, arguments[1]);",
          "64:     options = util._extend(options, arguments[2]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}