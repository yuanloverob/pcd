{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "025697a94678005df28055913d0df5d122acecfe",
      "candidate_info": {
        "commit_hash": "025697a94678005df28055913d0df5d122acecfe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/025697a94678005df28055913d0df5d122acecfe",
        "files": [
          "crypto/modes/ctr128.c"
        ],
        "message": "modes/ctr128.c: fix false carry in counter increment procedure.\n\nGH issue #1916 affects only big-endian platforms. TLS is not affected,\nbecause TLS fragment is never big enough.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 76f572ed0469a277d92378848250b7a9705d3071)",
        "before_after_code_files": [
          "crypto/modes/ctr128.c||crypto/modes/ctr128.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/modes/ctr128.c||crypto/modes/ctr128.c": [
          "File: crypto/modes/ctr128.c -> crypto/modes/ctr128.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         --n;",
          "53:         d = data[n] += c;",
          "56:     } while (n);",
          "57: }",
          "58: #endif",
          "",
          "[Removed Lines]",
          "55:         c = ((d - c) ^ d) >> (sizeof(size_t) * 8 - 1);",
          "",
          "[Added Lines]",
          "55:         c = ((d - c) & ~d) >> (sizeof(size_t) * 8 - 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22173a40b2192d9ecd2180b750833fd40d66534a",
      "candidate_info": {
        "commit_hash": "22173a40b2192d9ecd2180b750833fd40d66534a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/22173a40b2192d9ecd2180b750833fd40d66534a",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Clang doesn't like -znodelete, make it a linker flag instead\n\ngcc is kinder, it silently passes quite a few flags to ld, while clang\nis stricter and wants them prefixed with -Wl,\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1836)\n(cherry picked from commit 075e9da055454ec5586962b43d9923e44bdcb313)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:         dso_scheme       => \"dlfcn\",",
          "633:         shared_target    => \"linux-shared\",",
          "634:         shared_cflag     => \"-fPIC -DOPENSSL_USE_NODELETE\",",
          "636:         shared_extension => \".so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR)\",",
          "637:     },",
          "638:     \"linux-generic64\" => {",
          "",
          "[Removed Lines]",
          "635:         shared_ldflag    => \"-znodelete\",",
          "",
          "[Added Lines]",
          "635:         shared_ldflag    => \"-Wl,-znodelete\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
      "candidate_info": {
        "commit_hash": "0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
        "files": [
          "crypto/x509/x_crl.c",
          "test/build.info",
          "test/crltest.c",
          "test/recipes/25-test_crl.t"
        ],
        "message": "CRL critical extension bugfix\n\nMore importantly, port CRL test from boringSSL crypto/x509/x509_test.cc\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1775)\n(cherry picked from commit 2b40699082d1e5d0e94811542c4f0633ab2d5989)",
        "before_after_code_files": [
          "crypto/x509/x_crl.c||crypto/x509/x_crl.c",
          "test/build.info||test/build.info",
          "test/crltest.c||test/crltest.c",
          "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_crl.c||crypto/x509/x_crl.c": [
          "File: crypto/x509/x_crl.c -> crypto/x509/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:                 if ((nid == NID_issuing_distribution_point)",
          "214:                     || (nid == NID_authority_key_identifier)",
          "215:                     || (nid == NID_delta_crl))",
          "217:                 crl->flags |= EXFLAG_CRITICAL;",
          "218:                 break;",
          "219:             }",
          "",
          "[Removed Lines]",
          "216:                     break;;",
          "",
          "[Added Lines]",
          "216:                     continue;",
          "",
          "---------------"
        ],
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:           randtest dhtest enginetest casttest \\",
          "12:           bftest ssltest_old dsatest exptest rsa_test \\",
          "13:           evp_test evp_extra_test igetest v3nametest v3ext \\",
          "15:           constant_time_test verify_extra_test clienthellotest \\",
          "16:           packettest asynctest secmemtest srptest memleaktest \\",
          "17:           dtlsv1listentest ct_test threadstest afalgtest d2i_test \\",
          "",
          "[Removed Lines]",
          "14:           danetest heartbeat_test p5_crpt2_test bad_dtls_test \\",
          "",
          "[Added Lines]",
          "14:           crltest danetest heartbeat_test p5_crpt2_test bad_dtls_test \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   INCLUDE[v3nametest]=../include",
          "163:   DEPEND[v3nametest]=../libcrypto",
          "165:   SOURCE[v3ext]=v3ext.c",
          "166:   INCLUDE[v3ext]=../include",
          "167:   DEPEND[v3ext]=../libcrypto",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   SOURCE[crltest]=crltest.c testutil.c",
          "166:   INCLUDE[crltest]=../include",
          "167:   DEPEND[crltest]=../libcrypto",
          "",
          "---------------"
        ],
        "test/crltest.c||test/crltest.c": [
          "File: test/crltest.c -> test/crltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdio.h>",
          "11: #include \"../e_os.h\"",
          "12: #include <string.h>",
          "13: #include <openssl/bio.h>",
          "14: #include <openssl/crypto.h>",
          "15: #include <openssl/err.h>",
          "16: #include <openssl/pem.h>",
          "17: #include <openssl/x509.h>",
          "19: #include \"testutil.h\"",
          "21: static const char *kCRLTestRoot[] = {",
          "22:     \"-----BEGIN CERTIFICATE-----\\n\",",
          "23:     \"MIIDbzCCAlegAwIBAgIJAODri7v0dDUFMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\\n\",",
          "24:     \"BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBW\\n\",",
          "25:     \"aWV3MRIwEAYDVQQKDAlCb3JpbmdTU0wwHhcNMTYwOTI2MTUwNjI2WhcNMjYwOTI0\\n\",",
          "26:     \"MTUwNjI2WjBOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQG\\n\",",
          "27:     \"A1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJQm9yaW5nU1NMMIIBIjANBgkq\\n\",",
          "28:     \"hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo16WiLWZuaymsD8n5SKPmxV1y6jjgr3B\\n\",",
          "29:     \"S/dUBpbrzd1aeFzNlI8l2jfAnzUyp+I21RQ+nh/MhqjGElkTtK9xMn1Y+S9GMRh+\\n\",",
          "30:     \"5R/Du0iCb1tCZIPY07Tgrb0KMNWe0v2QKVVruuYSgxIWodBfxlKO64Z8AJ5IbnWp\\n\",",
          "31:     \"uRqO6rctN9qUoMlTIAB6dL4G0tDJ/PGFWOJYwOMEIX54bly2wgyYJVBKiRRt4f7n\\n\",",
          "32:     \"8H922qmvPNA9idmX9G1VAtgV6x97XXi7ULORIQvn9lVQF6nTYDBJhyuPB+mLThbL\\n\",",
          "33:     \"P2o9orxGx7aCtnnBZUIxUvHNOI0FaSaZH7Fi0xsZ/GkG2HZe7ImPJwIDAQABo1Aw\\n\",",
          "34:     \"TjAdBgNVHQ4EFgQUWPt3N5cZ/CRvubbrkqfBnAqhq94wHwYDVR0jBBgwFoAUWPt3\\n\",",
          "35:     \"N5cZ/CRvubbrkqfBnAqhq94wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC\\n\",",
          "36:     \"AQEAORu6M0MOwXy+3VEBwNilfTxyqDfruQsc1jA4PT8Oe8zora1WxE1JB4q2FJOz\\n\",",
          "37:     \"EAuM3H/NXvEnBuN+ITvKZAJUfm4NKX97qmjMJwLKWe1gVv+VQTr63aR7mgWJReQN\\n\",",
          "38:     \"XdMztlVeZs2dppV6uEg3ia1X0G7LARxGpA9ETbMyCpb39XxlYuTClcbA5ftDN99B\\n\",",
          "39:     \"3Xg9KNdd++Ew22O3HWRDvdDpTO/JkzQfzi3sYwUtzMEonENhczJhGf7bQMmvL/w5\\n\",",
          "40:     \"24Wxj4Z7KzzWIHsNqE/RIs6RV3fcW61j/mRgW2XyoWnMVeBzvcJr9NXp4VQYmFPw\\n\",",
          "41:     \"amd8GKMZQvP0ufGnUn7D7uartA==\\n\",",
          "42:     \"-----END CERTIFICATE-----\\n\",",
          "43:     NULL",
          "44: };",
          "46: static const char *kCRLTestLeaf[] = {",
          "47:     \"-----BEGIN CERTIFICATE-----\\n\",",
          "48:     \"MIIDkDCCAnigAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwTjELMAkGA1UEBhMCVVMx\\n\",",
          "49:     \"EzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcxEjAQ\\n\",",
          "50:     \"BgNVBAoMCUJvcmluZ1NTTDAeFw0xNjA5MjYxNTA4MzFaFw0xNzA5MjYxNTA4MzFa\\n\",",
          "51:     \"MEsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQKDAlC\\n\",",
          "52:     \"b3JpbmdTU0wxEzARBgNVBAMMCmJvcmluZy5zc2wwggEiMA0GCSqGSIb3DQEBAQUA\\n\",",
          "53:     \"A4IBDwAwggEKAoIBAQDc5v1S1M0W+QWM+raWfO0LH8uvqEwuJQgODqMaGnSlWUx9\\n\",",
          "54:     \"8iQcnWfjyPja3lWg9K62hSOFDuSyEkysKHDxijz5R93CfLcfnVXjWQDJe7EJTTDP\\n\",",
          "55:     \"ozEvxN6RjAeYv7CF000euYr3QT5iyBjg76+bon1p0jHZBJeNPP1KqGYgyxp+hzpx\\n\",",
          "56:     \"e0gZmTlGAXd8JQK4v8kpdYwD6PPifFL/jpmQpqOtQmH/6zcLjY4ojmqpEdBqIKIX\\n\",",
          "57:     \"+saA29hMq0+NK3K+wgg31RU+cVWxu3tLOIiesETkeDgArjWRS1Vkzbi4v9SJxtNu\\n\",",
          "58:     \"OZuAxWiynRJw3JwH/OFHYZIvQqz68ZBoj96cepjPAgMBAAGjezB5MAkGA1UdEwQC\\n\",",
          "59:     \"MAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRl\\n\",",
          "60:     \"MB0GA1UdDgQWBBTGn0OVVh/aoYt0bvEKG+PIERqnDzAfBgNVHSMEGDAWgBRY+3c3\\n\",",
          "61:     \"lxn8JG+5tuuSp8GcCqGr3jANBgkqhkiG9w0BAQsFAAOCAQEAd2nM8gCQN2Dc8QJw\\n\",",
          "62:     \"XSZXyuI3DBGGCHcay/3iXu0JvTC3EiQo8J6Djv7WLI0N5KH8mkm40u89fJAB2lLZ\\n\",",
          "63:     \"ShuHVtcC182bOKnePgwp9CNwQ21p0rDEu/P3X46ZvFgdxx82E9xLa0tBB8PiPDWh\\n\",",
          "64:     \"lV16jbaKTgX5AZqjnsyjR5o9/mbZVupZJXx5Syq+XA8qiJfstSYJs4KyKK9UOjql\\n\",",
          "65:     \"ICkJVKpi2ahDBqX4MOH4SLfzVk8pqSpviS6yaA1RXqjpkxiN45WWaXDldVHMSkhC\\n\",",
          "66:     \"5CNXsXi4b1nAntu89crwSLA3rEwzCWeYj+BX7e1T9rr3oJdwOU/2KQtW1js1yQUG\\n\",",
          "67:     \"tjJMFw==\\n\",",
          "68:     \"-----END CERTIFICATE-----\\n\",",
          "69:     NULL",
          "70: };",
          "72: static const char *kBasicCRL[] = {",
          "73:     \"-----BEGIN X509 CRL-----\\n\",",
          "74:     \"MIIBpzCBkAIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "75:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "76:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoA4wDDAKBgNV\\n\",",
          "77:     \"HRQEAwIBATANBgkqhkiG9w0BAQsFAAOCAQEAnrBKKgvd9x9zwK9rtUvVeFeJ7+LN\\n\",",
          "78:     \"ZEAc+a5oxpPNEsJx6hXoApYEbzXMxuWBQoCs5iEBycSGudct21L+MVf27M38KrWo\\n\",",
          "79:     \"eOkq0a2siqViQZO2Fb/SUFR0k9zb8xl86Zf65lgPplALun0bV/HT7MJcl04Tc4os\\n\",",
          "80:     \"dsAReBs5nqTGNEd5AlC1iKHvQZkM//MD51DspKnDpsDiUVi54h9C1SpfZmX8H2Vv\\n\",",
          "81:     \"diyu0fZ/bPAM3VAGawatf/SyWfBMyKpoPXEG39oAzmjjOj8en82psn7m474IGaho\\n\",",
          "82:     \"/vBbhl1ms5qQiLYPjm4YELtnXQoFyC72tBjbdFd/ZE9k4CNKDbxFUXFbkw==\\n\",",
          "83:     \"-----END X509 CRL-----\\n\",",
          "84:     NULL",
          "85: };",
          "87: static const char *kRevokedCRL[] = {",
          "88:     \"-----BEGIN X509 CRL-----\\n\",",
          "89:     \"MIIBvjCBpwIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "90:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "91:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEyNDRaFw0xNjEwMjYxNTEyNDRaMBUwEwICEAAX\\n\",",
          "92:     \"DTE2MDkyNjE1MTIyNlqgDjAMMAoGA1UdFAQDAgECMA0GCSqGSIb3DQEBCwUAA4IB\\n\",",
          "93:     \"AQCUGaM4DcWzlQKrcZvI8TMeR8BpsvQeo5BoI/XZu2a8h//PyRyMwYeaOM+3zl0d\\n\",",
          "94:     \"sjgCT8b3C1FPgT+P2Lkowv7rJ+FHJRNQkogr+RuqCSPTq65ha4WKlRGWkMFybzVH\\n\",",
          "95:     \"NloxC+aU3lgp/NlX9yUtfqYmJek1CDrOOGPrAEAwj1l/BUeYKNGqfBWYJQtPJu+5\\n\",",
          "96:     \"OaSvIYGpETCZJscUWODmLEb/O3DM438vLvxonwGqXqS0KX37+CHpUlyhnSovxXxp\\n\",",
          "97:     \"Pz4aF+L7OtczxL0GYtD2fR9B7TDMqsNmHXgQrixvvOY7MUdLGbd4RfJL3yA53hyO\\n\",",
          "98:     \"xzfKY2TzxLiOmctG0hXFkH5J\\n\",",
          "99:     \"-----END X509 CRL-----\\n\",",
          "100:     NULL",
          "101: };",
          "103: static const char *kBadIssuerCRL[] = {",
          "104:     \"-----BEGIN X509 CRL-----\\n\",",
          "105:     \"MIIBwjCBqwIBATANBgkqhkiG9w0BAQsFADBSMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "106:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEWMBQGA1UECgwN\\n\",",
          "107:     \"Tm90IEJvcmluZ1NTTBcNMTYwOTI2MTUxMjQ0WhcNMTYxMDI2MTUxMjQ0WjAVMBMC\\n\",",
          "108:     \"AhAAFw0xNjA5MjYxNTEyMjZaoA4wDDAKBgNVHRQEAwIBAjANBgkqhkiG9w0BAQsF\\n\",",
          "109:     \"AAOCAQEAlBmjOA3Fs5UCq3GbyPEzHkfAabL0HqOQaCP12btmvIf/z8kcjMGHmjjP\\n\",",
          "110:     \"t85dHbI4Ak/G9wtRT4E/j9i5KML+6yfhRyUTUJKIK/kbqgkj06uuYWuFipURlpDB\\n\",",
          "111:     \"cm81RzZaMQvmlN5YKfzZV/clLX6mJiXpNQg6zjhj6wBAMI9ZfwVHmCjRqnwVmCUL\\n\",",
          "112:     \"TybvuTmkryGBqREwmSbHFFjg5ixG/ztwzON/Ly78aJ8Bql6ktCl9+/gh6VJcoZ0q\\n\",",
          "113:     \"L8V8aT8+Ghfi+zrXM8S9BmLQ9n0fQe0wzKrDZh14EK4sb7zmOzFHSxm3eEXyS98g\\n\",",
          "114:     \"Od4cjsc3ymNk88S4jpnLRtIVxZB+SQ==\\n\",",
          "115:     \"-----END X509 CRL-----\\n\",",
          "116:     NULL",
          "117: };",
          "123: static const char *kKnownCriticalCRL[] = {",
          "124:     \"-----BEGIN X509 CRL-----\\n\",",
          "125:     \"MIIBujCBowIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "126:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "127:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoCEwHzAKBgNV\\n\",",
          "128:     \"HRQEAwIBATARBgNVHRwBAf8EBzAFoQMBAf8wDQYJKoZIhvcNAQELBQADggEBAA+3\\n\",",
          "129:     \"i+5e5Ub8sccfgOBs6WVJFI9c8gvJjrJ8/dYfFIAuCyeocs7DFXn1n13CRZ+URR/Q\\n\",",
          "130:     \"mVWgU28+xeusuSPYFpd9cyYTcVyNUGNTI3lwgcE/yVjPaOmzSZKdPakApRxtpKKQ\\n\",",
          "131:     \"NN/56aQz3bnT/ZSHQNciRB8U6jiD9V30t0w+FDTpGaG+7bzzUH3UVF9xf9Ctp60A\\n\",",
          "132:     \"3mfLe0scas7owSt4AEFuj2SPvcE7yvdOXbu+IEv21cEJUVExJAbhvIweHXh6yRW+\\n\",",
          "133:     \"7VVeiNzdIjkZjyTmAzoXGha4+wbxXyBRbfH+XWcO/H+8nwyG8Gktdu2QB9S9nnIp\\n\",",
          "134:     \"o/1TpfOMSGhMyMoyPrk=\\n\",",
          "135:     \"-----END X509 CRL-----\\n\",",
          "136:     NULL",
          "137: };",
          "142: static const char *kUnknownCriticalCRL[] = {",
          "143:     \"-----BEGIN X509 CRL-----\\n\",",
          "144:     \"MIIBvDCBpQIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "145:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "146:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoCMwITAKBgNV\\n\",",
          "147:     \"HRQEAwIBATATBgwqhkiG9xIEAYS3CQABAf8EADANBgkqhkiG9w0BAQsFAAOCAQEA\\n\",",
          "148:     \"GvBP0xqL509InMj/3493YVRV+ldTpBv5uTD6jewzf5XdaxEQ/VjTNe5zKnxbpAib\\n\",",
          "149:     \"Kf7cwX0PMSkZjx7k7kKdDlEucwVvDoqC+O9aJcqVmM6GDyNb9xENxd0XCXja6MZC\\n\",",
          "150:     \"yVgP4AwLauB2vSiEprYJyI1APph3iAEeDm60lTXX/wBM/tupQDDujKh2GPyvBRfJ\\n\",",
          "151:     \"+wEDwGg3ICwvu4gO4zeC5qnFR+bpL9t5tOMAQnVZ0NWv+k7mkd2LbHdD44dxrfXC\\n\",",
          "152:     \"nhtfERx99SDmC/jtUAJrGhtCO8acr7exCeYcduN7KKCm91OeCJKK6OzWst0Og1DB\\n\",",
          "153:     \"kwzzU2rL3G65CrZ7H0SZsQ==\\n\",",
          "154:     \"-----END X509 CRL-----\\n\",",
          "155:     NULL",
          "156: };",
          "162: static const char *kUnknownCriticalCRL2[] = {",
          "163:     \"-----BEGIN X509 CRL-----\\n\",",
          "164:     \"MIIBzzCBuAIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "165:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "166:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoDYwNDAKBgNV\\n\",",
          "167:     \"HRQEAwIBATARBgNVHRwBAf8EBzAFoQMBAf8wEwYMKoZIhvcSBAGEtwkAAQH/BAAw\\n\",",
          "168:     \"DQYJKoZIhvcNAQELBQADggEBACTcpQC8jXL12JN5YzOcQ64ubQIe0XxRAd30p7qB\\n\",",
          "169:     \"BTXGpgqBjrjxRfLms7EBYodEXB2oXMsDq3km0vT1MfYdsDD05S+SQ9CDsq/pUfaC\\n\",",
          "170:     \"E2WNI5p8WircRnroYvbN2vkjlRbMd1+yNITohXYXCJwjEOAWOx3XIM10bwPYBv4R\\n\",",
          "171:     \"rDobuLHoMgL3yHgMHmAkP7YpkBucNqeBV8cCdeAZLuhXFWi6yfr3r/X18yWbC/r2\\n\",",
          "172:     \"2xXdkrSqXLFo7ToyP8YKTgiXpya4x6m53biEYwa2ULlas0igL6DK7wjYZX95Uy7H\\n\",",
          "173:     \"GKljn9weIYiMPV/BzGymwfv2EW0preLwtyJNJPaxbdin6Jc=\\n\",",
          "174:     \"-----END X509 CRL-----\\n\",",
          "175:     NULL",
          "176: };",
          "183: static BIO *glue(const char **pem, char **out)",
          "184: {",
          "185:     char *dest;",
          "186:     int i;",
          "187:     size_t s = 0;",
          "190:     for (i = 0; pem[i] != NULL; ++i)",
          "191:         s += strlen(pem[i]);",
          "192:     dest = *out = OPENSSL_malloc(s + 1);",
          "193:     if (dest == NULL)",
          "194:         return NULL;",
          "195:     for (i = 0; pem[i] != NULL; ++i)",
          "196:         dest += strlen(strcpy(dest, pem[i]));",
          "197:     return BIO_new_mem_buf(*out, s);",
          "198: }",
          "203: static X509_CRL *CRL_from_strings(const char **pem)",
          "204: {",
          "205:     char *p;",
          "206:     BIO *b = glue(pem, &p);",
          "207:     X509_CRL *crl = PEM_read_bio_X509_CRL(b, NULL, NULL, NULL);",
          "209:     OPENSSL_free(p);",
          "210:     BIO_free(b);",
          "211:     return crl;",
          "212: }",
          "217: static X509 *X509_from_strings(const char **pem)",
          "218: {",
          "219:     char *p;",
          "220:     BIO *b = glue(pem, &p);",
          "221:     X509 *x = PEM_read_bio_X509(b, NULL, NULL, NULL);",
          "223:     OPENSSL_free(p);",
          "224:     BIO_free(b);",
          "225:     return x;",
          "226: }",
          "234: static int verify(X509 *leaf, X509 *root, STACK_OF(X509_CRL) *crls,",
          "235:                   unsigned long flags)",
          "236: {",
          "237:     X509_STORE_CTX *ctx = X509_STORE_CTX_new();",
          "238:     X509_STORE *store = X509_STORE_new();",
          "239:     X509_VERIFY_PARAM *param = X509_VERIFY_PARAM_new();",
          "240:     STACK_OF(X509) *roots = sk_X509_new_null();",
          "241:     int status = X509_V_ERR_UNSPECIFIED;",
          "243:     if (ctx == NULL || store == NULL || param == NULL || roots == NULL)",
          "244:         goto err;",
          "247:     X509_up_ref(root);",
          "248:     if (!sk_X509_push(roots, root))",
          "249:         goto err;",
          "251:     if (!X509_STORE_CTX_init(ctx, store, leaf, NULL))",
          "252:         goto err;",
          "253:     X509_STORE_CTX_set0_trusted_stack(ctx, roots);",
          "254:     X509_STORE_CTX_set0_crls(ctx, crls);",
          "255:     X509_VERIFY_PARAM_set_time(param, 1474934400 /* Sep 27th, 2016 */);",
          "256:     X509_VERIFY_PARAM_set_depth(param, 16);",
          "257:     if (flags)",
          "258:         X509_VERIFY_PARAM_set_flags(param, flags);",
          "259:     X509_STORE_CTX_set0_param(ctx, param);",
          "261:     ERR_clear_error();",
          "262:     status = X509_verify_cert(ctx) == 1 ? X509_V_OK",
          "263:                                         : X509_STORE_CTX_get_error(ctx);",
          "264: err:",
          "265:     sk_X509_pop_free(roots, X509_free);",
          "266:     sk_X509_CRL_pop_free(crls, X509_CRL_free);",
          "267:     X509_STORE_CTX_free(ctx);",
          "268:     X509_STORE_free(store);",
          "269:     return status;",
          "270: }",
          "277: static STACK_OF(X509_CRL) *make_CRL_stack(X509_CRL *x1, X509_CRL *x2)",
          "278: {",
          "279:     STACK_OF(X509_CRL) *sk = sk_X509_CRL_new_null();",
          "281:     sk_X509_CRL_push(sk, x1);",
          "282:     X509_CRL_up_ref(x1);",
          "283:     if (x2 != NULL) {",
          "284:         sk_X509_CRL_push(sk, x2);",
          "285:         X509_CRL_up_ref(x2);",
          "286:     }",
          "287:     return sk;",
          "288: }",
          "290: static int test_crl()",
          "291: {",
          "292:     X509 *root = X509_from_strings(kCRLTestRoot);",
          "293:     X509 *leaf = X509_from_strings(kCRLTestLeaf);",
          "294:     X509_CRL *basic_crl = CRL_from_strings(kBasicCRL);",
          "295:     X509_CRL *revoked_crl = CRL_from_strings(kRevokedCRL);",
          "296:     X509_CRL *bad_issuer_crl = CRL_from_strings(kBadIssuerCRL);",
          "297:     X509_CRL *known_critical_crl = CRL_from_strings(kKnownCriticalCRL);",
          "298:     X509_CRL *unknown_critical_crl = CRL_from_strings(kUnknownCriticalCRL);",
          "299:     X509_CRL *unknown_critical_crl2 = CRL_from_strings(kUnknownCriticalCRL2);",
          "300:     int status = 0;",
          "302:     if (root == NULL || leaf == NULL || basic_crl == NULL",
          "303:             || revoked_crl == NULL || bad_issuer_crl == NULL",
          "304:             || known_critical_crl == NULL || unknown_critical_crl == NULL",
          "305:             || unknown_critical_crl2 == NULL) {",
          "306:         fprintf(stderr, \"Failed to parse certificates and CRLs.\\n\");",
          "307:         goto err;",
          "308:     }",
          "310:     if (verify(leaf, root, make_CRL_stack(basic_crl, NULL),",
          "311:                X509_V_FLAG_CRL_CHECK) != X509_V_OK) {",
          "312:         fprintf(stderr, \"Cert with CRL didn't verify.\\n\");",
          "313:         goto err;",
          "314:     }",
          "316:     if (verify(leaf, root, make_CRL_stack(basic_crl, revoked_crl),",
          "317:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_CERT_REVOKED) {",
          "318:         fprintf(stderr, \"Revoked CRL wasn't checked.\\n\");",
          "319:         goto err;",
          "320:     }",
          "322:     if (verify(leaf, root, NULL,",
          "323:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_UNABLE_TO_GET_CRL) {",
          "324:         fprintf(stderr, \"CRLs were not required.\\n\");",
          "325:         goto err;",
          "326:     }",
          "328:     if (verify(leaf, root, make_CRL_stack(bad_issuer_crl, NULL),",
          "329:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_UNABLE_TO_GET_CRL) {",
          "330:         fprintf(stderr, \"Bad CRL issuer was unnoticed.\\n\");",
          "331:         goto err;",
          "332:     }",
          "334:     if (verify(leaf, root, make_CRL_stack(known_critical_crl, NULL),",
          "335:                X509_V_FLAG_CRL_CHECK) != X509_V_OK) {",
          "336:         fprintf(stderr, \"CRL with known critical extension was rejected.\\n\");",
          "337:         goto err;",
          "338:     }",
          "340:     if (verify(leaf, root, make_CRL_stack(unknown_critical_crl, NULL),",
          "341:                X509_V_FLAG_CRL_CHECK) !=",
          "342:             X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION) {",
          "343:         fprintf(stderr, \"CRL with unknown critical extension was accepted.\\n\");",
          "344:         goto err;",
          "345:     }",
          "347:     if (verify(leaf, root, make_CRL_stack(unknown_critical_crl2, NULL),",
          "348:                X509_V_FLAG_CRL_CHECK) !=",
          "349:             X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION) {",
          "350:         fprintf(stderr, \"CRL with unknown critical extension (2) was accepted.\\n\");",
          "351:         goto err;",
          "352:     }",
          "354:     status = 1;",
          "356: err:",
          "357:     X509_free(root);",
          "358:     X509_free(leaf);",
          "359:     X509_CRL_free(basic_crl);",
          "360:     X509_CRL_free(revoked_crl);",
          "361:     X509_CRL_free(bad_issuer_crl);",
          "362:     X509_CRL_free(known_critical_crl);",
          "363:     X509_CRL_free(unknown_critical_crl);",
          "364:     X509_CRL_free(unknown_critical_crl2);",
          "365:     return status;",
          "366: }",
          "368: int main()",
          "369: {",
          "370:     ADD_TEST(test_crl);",
          "371:     return run_tests(\"crltest\");",
          "372: }",
          "",
          "---------------"
        ],
        "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t": [
          "File: test/recipes/25-test_crl.t -> test/recipes/25-test_crl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: setup(\"test_crl\");",
          "20: require_ok(srctop_file('test','recipes','tconversion.pl'));",
          "22: subtest 'crl conversions' => sub {",
          "23:     tconversion(\"crl\", srctop_file(\"test\",\"testcrl.pem\"));",
          "24: };",
          "",
          "[Removed Lines]",
          "18: plan tests => 2;",
          "",
          "[Added Lines]",
          "18: plan tests => 3;",
          "26: ok(run(test(['crltest'])));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64d1cc09f912fdc92b12588cc9ad189978051a3e",
      "candidate_info": {
        "commit_hash": "64d1cc09f912fdc92b12588cc9ad189978051a3e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/64d1cc09f912fdc92b12588cc9ad189978051a3e",
        "files": [
          "ssl/statem/statem.c"
        ],
        "message": "Use switch instead of multiple ifs\n\nMakes the logic a little bit clearer.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1571)\n(cherry picked from commit 4f8a5f4da94bb70e06cf709beb1ddfa57a218c3d)",
        "before_after_code_files": [
          "ssl/statem/statem.c||ssl/statem/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem.c||ssl/statem/statem.c": [
          "File: ssl/statem/statem.c -> ssl/statem/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:             s->init_num = 0;",
          "570:                 return SUB_STATE_ERROR;",
          "574:                 if (SSL_IS_DTLS(s)) {",
          "575:                     dtls1_stop_timer(s);",
          "576:                 }",
          "577:                 return SUB_STATE_FINISHED;",
          "581:                 st->read_state = READ_STATE_POST_PROCESS;",
          "582:                 st->read_state_work = WORK_MORE_A;",
          "584:                 st->read_state = READ_STATE_HEADER;",
          "585:             }",
          "586:             break;",
          "",
          "[Removed Lines]",
          "569:             if (ret == MSG_PROCESS_ERROR) {",
          "571:             }",
          "573:             if (ret == MSG_PROCESS_FINISHED_READING) {",
          "578:             }",
          "580:             if (ret == MSG_PROCESS_CONTINUE_PROCESSING) {",
          "583:             } else {",
          "",
          "[Added Lines]",
          "569:             switch (ret) {",
          "570:             case MSG_PROCESS_ERROR:",
          "573:             case MSG_PROCESS_FINISHED_READING:",
          "579:             case MSG_PROCESS_CONTINUE_PROCESSING:",
          "582:                 break;",
          "584:             default:",
          "586:                 break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
      "candidate_info": {
        "commit_hash": "f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f31917afc4fbc9061a1dc41f9a660dcb5537bf78",
        "files": [
          "test/recipes/70-test_sslmessages.t"
        ],
        "message": "Add a test to check messsages sent are the ones we expect\n\nRepeat for various handshake types\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "test/recipes/70-test_sslmessages.t||test/recipes/70-test_sslmessages.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslmessages.t||test/recipes/70-test_sslmessages.t": [
          "File: test/recipes/70-test_sslmessages.t -> test/recipes/70-test_sslmessages.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "9: use strict;",
          "10: use OpenSSL::Test qw/:DEFAULT cmdstr srctop_file bldtop_dir/;",
          "11: use OpenSSL::Test::Utils;",
          "12: use File::Temp qw(tempfile);",
          "13: use TLSProxy::Proxy;",
          "14: my $test_name = \"test_tls13messages\";",
          "15: setup($test_name);",
          "17: plan skip_all => \"TLSProxy isn't usable on $^O\"",
          "18:     if $^O =~ /^(VMS|MSWin32)$/;",
          "20: plan skip_all => \"$test_name needs the dynamic engine feature enabled\"",
          "21:     if disabled(\"engine\") || disabled(\"dynamic-engine\");",
          "23: plan skip_all => \"$test_name needs the sock feature enabled\"",
          "24:     if disabled(\"sock\");",
          "26: plan skip_all => \"$test_name needs TLS enabled\"",
          "27:     if alldisabled(available_protocols(\"tls\"));",
          "29: $ENV{OPENSSL_ia32cap} = '~0x200000200000000';",
          "31: use constant {",
          "32:     DEFAULT_HANDSHAKE => 1,",
          "33:     OCSP_HANDSHAKE => 2,",
          "34:     RESUME_HANDSHAKE => 4,",
          "35:     CLIENT_AUTH_HANDSHAKE => 8,",
          "36:     RENEG_HANDSHAKE => 16,",
          "38:     ALL_HANDSHAKES => 31",
          "39: };",
          "41: my @handmessages = (",
          "42:     [TLSProxy::Message::MT_CLIENT_HELLO, ALL_HANDSHAKES],",
          "43:     [TLSProxy::Message::MT_SERVER_HELLO, ALL_HANDSHAKES],",
          "44:     [TLSProxy::Message::MT_CERTIFICATE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "45:     [TLSProxy::Message::MT_CERTIFICATE_STATUS, OCSP_HANDSHAKE],",
          "46:     #ServerKeyExchange handshakes not currently supported by TLSProxy",
          "47:     [TLSProxy::Message::MT_CERTIFICATE_REQUEST, CLIENT_AUTH_HANDSHAKE],",
          "48:     [TLSProxy::Message::MT_SERVER_HELLO_DONE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "49:     [TLSProxy::Message::MT_CERTIFICATE, CLIENT_AUTH_HANDSHAKE],",
          "50:     [TLSProxy::Message::MT_CLIENT_KEY_EXCHANGE, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "51:     [TLSProxy::Message::MT_CERTIFICATE_VERIFY, CLIENT_AUTH_HANDSHAKE],",
          "52:     [TLSProxy::Message::MT_FINISHED, ALL_HANDSHAKES],",
          "53:     [TLSProxy::Message::MT_NEW_SESSION_TICKET, ALL_HANDSHAKES & ~RESUME_HANDSHAKE],",
          "54:     [TLSProxy::Message::MT_FINISHED, ALL_HANDSHAKES],",
          "55:     [TLSProxy::Message::MT_CLIENT_HELLO, RENEG_HANDSHAKE],",
          "56:     [TLSProxy::Message::MT_SERVER_HELLO, RENEG_HANDSHAKE],",
          "57:     [TLSProxy::Message::MT_CERTIFICATE, RENEG_HANDSHAKE],",
          "58:     [TLSProxy::Message::MT_SERVER_HELLO_DONE, RENEG_HANDSHAKE],",
          "59:     [TLSProxy::Message::MT_CLIENT_KEY_EXCHANGE, RENEG_HANDSHAKE],",
          "60:     [TLSProxy::Message::MT_FINISHED, RENEG_HANDSHAKE],",
          "61:     [TLSProxy::Message::MT_NEW_SESSION_TICKET, RENEG_HANDSHAKE],",
          "62:     [TLSProxy::Message::MT_FINISHED, RENEG_HANDSHAKE],",
          "63:     [0, 0]",
          "64: );",
          "66: my $proxy = TLSProxy::Proxy->new(",
          "67:     undef,",
          "68:     cmdstr(app([\"openssl\"]), display => 1),",
          "69:     srctop_file(\"apps\", \"server.pem\"),",
          "70:     (!$ENV{HARNESS_ACTIVE} || $ENV{HARNESS_VERBOSE})",
          "71: );",
          "73: sub checkmessages($$);",
          "75: #Test 1: Check we get all the right messages for a default handshake",
          "76: (undef, my $session) = tempfile();",
          "77: $proxy->serverconnects(2);",
          "78: $proxy->clientflags(\"-sess_out \".$session);",
          "79: $proxy->start() or plan skip_all => \"Unable to start up Proxy for tests\";",
          "80: plan tests => 5;",
          "81: checkmessages(DEFAULT_HANDSHAKE, \"Default handshake test\");",
          "83: #Test 2: Resumption handshake",
          "84: $proxy->clearClient();",
          "85: $proxy->clientflags(\"-sess_in \".$session);",
          "86: $proxy->clientstart();",
          "87: checkmessages(RESUME_HANDSHAKE, \"Resumption handshake test\");",
          "88: unlink $session;",
          "90: #Test 3: A client auth handshake",
          "91: $proxy->clear();",
          "92: $proxy->clientflags(\"-cert \".srctop_file(\"apps\", \"server.pem\"));",
          "93: $proxy->serverflags(\"-Verify 5\");",
          "94: $proxy->start();",
          "95: checkmessages(CLIENT_AUTH_HANDSHAKE, \"Client auth handshake test\");",
          "97: #Test 4: A handshake with a renegotiation",
          "98: $proxy->clear();",
          "99: $proxy->reneg(1);",
          "100: $proxy->start();",
          "101: checkmessages(RENEG_HANDSHAKE, \"Rengotiation handshake test\");",
          "103: #Test 5: A handshake with a renegotiation and client auth",
          "104: $proxy->clear();",
          "105: $proxy->clientflags(\"-cert \".srctop_file(\"apps\", \"server.pem\"));",
          "106: $proxy->serverflags(\"-Verify 5\");",
          "107: $proxy->reneg(1);",
          "108: $proxy->start();",
          "109: checkmessages(RENEG_HANDSHAKE | CLIENT_AUTH_HANDSHAKE,",
          "110:               \"Renogitation and client auth handshake test\");",
          "112: sub checkmessages($$)",
          "113: {",
          "114:     my ($handtype, $testname) = @_;",
          "116:     subtest $testname => sub {",
          "117:         my $loop = 0;",
          "118:         my $numtests;",
          "120:         #First count the number of tests",
          "121:         for ($numtests = 0; $handmessages[$loop][1] != 0; $loop++) {",
          "122:             $numtests++ if (($handmessages[$loop][1] & $handtype) != 0);",
          "123:         }",
          "125:         plan tests => $numtests;",
          "127:         my $nextmess = 0;",
          "128:         my $message = undef;",
          "129:         for ($loop = 0; $handmessages[$loop][1] != 0; $loop++) {",
          "130:             next if (($handmessages[$loop][1] & $handtype) == 0);",
          "131:             if (scalar @{$proxy->message_list} > $nextmess) {",
          "132:                 $message = ${$proxy->message_list}[$nextmess];",
          "133:                 $nextmess++;",
          "134:             } else {",
          "135:                 $message = undef;",
          "136:             }",
          "137:             if (!defined $message) {",
          "138:                 fail(\"Message type check. Got nothing, expected \"",
          "139:                      .$handmessages[$loop][0]);",
          "140:             } else {",
          "141:                 ok($message->mt == $handmessages[$loop][0],",
          "142:                    \"Message type check. Got \".$message->mt",
          "143:                    .\", expected \".$handmessages[$loop][0]);",
          "144:             }",
          "145:         }",
          "146:     }",
          "147: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}