{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
      "candidate_info": {
        "commit_hash": "08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
        "files": [
          "crypto/x509/x_all.c"
        ],
        "message": "Fix no-ocsp\n\nThe use of EXFLAG_SET requires the inclusion of openssl/x509v3.h.\nopenssl/ocsp.h does that, except when OCSP is disabled.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2227)\n(cherry picked from commit d62210af2e169d0818c65ff9f20ab5276693b2bf)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <openssl/ocsp.h>",
          "19: #include <openssl/rsa.h>",
          "20: #include <openssl/dsa.h>",
          "22: int X509_verify(X509 *a, EVP_PKEY *r)",
          "23: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <openssl/x509v3.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
      "candidate_info": {
        "commit_hash": "14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
        "files": [
          "apps/s_server.c"
        ],
        "message": "Simplify code around next_proto.len by changing 'len' data type.\n\nclean an useless static qualifier and a dead comment.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2278)\n\n(cherry picked from commit f2ff1432fc50e5033471859dc9899eb219278a7a)",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: #ifndef OPENSSL_NO_DTLS",
          "140: static int enable_timeouts = 0;",
          "141: static long socket_mtu;",
          "144: static int dtlslisten = 0;",
          "146: #ifndef OPENSSL_NO_PSK",
          "150: static unsigned int psk_server_cb(SSL *ssl, const char *identity,",
          "",
          "[Removed Lines]",
          "143: #endif",
          "147: static char *psk_identity = \"Client_identity\";",
          "",
          "[Added Lines]",
          "141: #endif",
          "144: static const char psk_identity[] = \"Client_identity\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585: typedef struct tlsextnextprotoctx_st {",
          "586:     unsigned char *data;",
          "588: } tlsextnextprotoctx;",
          "590: static int next_proto_cb(SSL *s, const unsigned char **data,",
          "",
          "[Removed Lines]",
          "587:     unsigned int len;",
          "",
          "[Added Lines]",
          "583:     size_t len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "919:     tlsextalpnctx alpn_ctx = { NULL, 0 };",
          "920: #ifndef OPENSSL_NO_PSK",
          "923:     char *p;",
          "924: #endif",
          "925: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "922:     static char *psk_identity_hint = NULL;",
          "",
          "[Added Lines]",
          "918:     char *psk_identity_hint = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1519:     }",
          "1520: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "1521:     if (next_proto_neg_in) {",
          "1524:         if (next_proto.data == NULL)",
          "1525:             goto end;",
          "1529:     }",
          "1530: #endif",
          "1531:     alpn_ctx.data = NULL;",
          "1532:     if (alpn_in) {",
          "1535:         if (alpn_ctx.data == NULL)",
          "1536:             goto end;",
          "1538:     }",
          "1540:     if (crl_file) {",
          "",
          "[Removed Lines]",
          "1522:         size_t len;",
          "1523:         next_proto.data = next_protos_parse(&len, next_proto_neg_in);",
          "1526:         next_proto.len = len;",
          "1527:     } else {",
          "1528:         next_proto.data = NULL;",
          "1533:         size_t len;",
          "1534:         alpn_ctx.data = next_protos_parse(&len, alpn_in);",
          "1537:         alpn_ctx.len = len;",
          "",
          "[Added Lines]",
          "1518:         next_proto.data = next_protos_parse(&next_proto.len, next_proto_neg_in);",
          "1525:         alpn_ctx.data = next_protos_parse(&alpn_ctx.len, alpn_in);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73a5150689571fb8374320a298c4082778d238f3",
      "candidate_info": {
        "commit_hash": "73a5150689571fb8374320a298c4082778d238f3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/73a5150689571fb8374320a298c4082778d238f3",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "When no SRP identity is found, no error was reported server side\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1859)\n\n(cherry picked from commit 7bb37cb5938a0cf76c12c8421950e72634d5f61c)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:             if (al != TLS1_AD_UNKNOWN_PSK_IDENTITY)",
          "1484:                 SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO,",
          "1485:                        SSL_R_CLIENTHELLO_TLSEXT);",
          "1486:             goto f_err;",
          "1487:         }",
          "1488:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:             else",
          "1487:                 SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO,",
          "1488:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
      "candidate_info": {
        "commit_hash": "c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
        "files": [
          "include/openssl/engine.h"
        ],
        "message": "Remove ENGINE_load_dasync() (no OPENSSL_INIT_ENGINE_DASYNC already)\n\nFixes: 8d00e30f96fb86b20bc992f626b188c3548fc58c (\"Don't try to init\ndasync internally\")\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nCLA: trivial\n(cherry picked from commit b9b5181dd2f52ff0560a33b116396cdae5e48048)",
        "before_after_code_files": [
          "include/openssl/engine.h||include/openssl/engine.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_PADLOCK, NULL)",
          "335: #  define ENGINE_load_capi() \\",
          "336:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_CAPI, NULL)",
          "339: #  define ENGINE_load_afalg() \\",
          "340:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_AFALG, NULL)",
          "341: # endif",
          "",
          "[Removed Lines]",
          "337: #  define ENGINE_load_dasync() \\",
          "338:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_DASYNC, NULL)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d951d8cdef56aeeb6c08387531de943683e80ce",
      "candidate_info": {
        "commit_hash": "2d951d8cdef56aeeb6c08387531de943683e80ce",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2d951d8cdef56aeeb6c08387531de943683e80ce",
        "files": [
          "ssl/record/ssl3_record.c"
        ],
        "message": "Check for zero records and return immediately\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2822)\n(cherry picked from commit a3004c820370b6bee82c919721fb1cbe95f72f3f)",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     const EVP_CIPHER *enc;",
          "662:     unsigned int ctr;",
          "664:     if (send) {",
          "665:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "666:             int n = EVP_MD_CTX_size(s->write_hash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     if (n_recs == 0)",
          "665:         return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}