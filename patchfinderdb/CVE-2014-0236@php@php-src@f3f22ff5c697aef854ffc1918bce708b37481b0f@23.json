{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94231ac454e112feadb6447cbfbb8a479add70cc",
      "candidate_info": {
        "commit_hash": "94231ac454e112feadb6447cbfbb8a479add70cc",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/94231ac454e112feadb6447cbfbb8a479add70cc",
        "files": [
          "tests/basic/bug67198.phpt"
        ],
        "message": "test for bug #67198",
        "before_after_code_files": [
          "tests/basic/bug67198.phpt||tests/basic/bug67198.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/basic/bug67198.phpt||tests/basic/bug67198.phpt": [
          "File: tests/basic/bug67198.phpt -> tests/basic/bug67198.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: php://input is empty when enable_post_data_reading=Off",
          "3: --INI--",
          "4: allow_url_fopen=1",
          "5: --SKIPIF--",
          "6: <?php",
          "7: include __DIR__.\"/../../sapi/cli/tests/skipif.inc\";",
          "8: ?>",
          "9: --FILE--",
          "10: <?php",
          "11: require __DIR__.\"/../../sapi/cli/tests/php_cli_server.inc\";",
          "13: $code =",
          "14: <<<'FL'",
          "15:  if(!ini_get('enable_post_data_reading')){",
          "16:   if($_SERVER['REQUEST_METHOD']=='POST'){",
          "17:    exit(file_get_contents('php://input'));",
          "18:   }",
          "19:  }else{",
          "20:   exit('Please SET php.ini: enable_post_data_reading = Off');",
          "21:  }",
          "22: FL;",
          "24: $postdata = \"PASS\";",
          "26: $opts = array('http' =>",
          "27:     array(",
          "28:         'method'  => 'POST',",
          "29:         'header'  => 'Content-type: application/x-www-form-urlencoded',",
          "30:         'content' => $postdata",
          "31:     )",
          "32: );",
          "34: $context  = stream_context_create($opts);",
          "36: php_cli_server_start(\"exit(file_get_contents('php://input'));\", false, \"-d enable_post_data_reading=Off\");",
          "38: var_dump(file_get_contents(\"http://\" . PHP_CLI_SERVER_ADDRESS, false, $context));",
          "39: var_dump(file_get_contents(\"http://\" . PHP_CLI_SERVER_ADDRESS, false, $context));",
          "40: --XFAIL--",
          "41: 67198 is open",
          "42: --EXPECT--",
          "43: string(4) \"PASS\"",
          "44: string(4) \"PASS\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7308d47c4b36403c4d5a37798446b1837090a683",
      "candidate_info": {
        "commit_hash": "7308d47c4b36403c4d5a37798446b1837090a683",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7308d47c4b36403c4d5a37798446b1837090a683",
        "files": [
          "main/SAPI.c"
        ],
        "message": "fix bug #67198 (php://input regression)",
        "before_after_code_files": [
          "main/SAPI.c||main/SAPI.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SAPI.c||main/SAPI.c": [
          "File: main/SAPI.c -> main/SAPI.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  SG(request_info).post_entry = NULL;",
          "464:  SG(global_request_time) = 0;",
          "467:  if (SG(request_info).request_method && !strcmp(SG(request_info).request_method, \"HEAD\")) {",
          "468:   SG(request_info).headers_only = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:  SG(post_read) = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60fd4d445c4c6de25c8cb85bc52e9e17b90eecfe",
      "candidate_info": {
        "commit_hash": "60fd4d445c4c6de25c8cb85bc52e9e17b90eecfe",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/60fd4d445c4c6de25c8cb85bc52e9e17b90eecfe",
        "files": [
          "sapi/fpm/fpm/fpm_stdio.c"
        ],
        "message": "Fix Bug #67530 \terror_log=syslog ignored\n\nAs for Bug #64915\nSystemd use --nodaemonize but need to error_log to file or syslog to be honoured",
        "before_after_code_files": [
          "sapi/fpm/fpm/fpm_stdio.c||sapi/fpm/fpm/fpm_stdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/fpm/fpm/fpm_stdio.c||sapi/fpm/fpm/fpm_stdio.c": [
          "File: sapi/fpm/fpm/fpm_stdio.c -> sapi/fpm/fpm/fpm_stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:  if (!strcasecmp(fpm_global_config.error_log, \"syslog\")) {",
          "269:   openlog(fpm_global_config.syslog_ident, LOG_PID | LOG_CONS, fpm_global_config.syslog_facility);",
          "270:   fpm_globals.error_log_fd = ZLOG_SYSLOG;",
          "271:   if (fpm_global_config.daemonize) {",
          "272:    zlog_set_fd(fpm_globals.error_log_fd);",
          "273:   }",
          "274:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #if HAVE_UNISTD_H",
          "272:   if (fpm_global_config.daemonize || !isatty(STDERR_FILENO)) {",
          "273: #else",
          "275: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0b47a20645994783eeb5662efaede5dcc4aa4e0",
      "candidate_info": {
        "commit_hash": "b0b47a20645994783eeb5662efaede5dcc4aa4e0",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/b0b47a20645994783eeb5662efaede5dcc4aa4e0",
        "files": [
          "sapi/cli/php.1.in"
        ],
        "message": "Update copyright year to 2014",
        "before_after_code_files": [
          "sapi/cli/php.1.in||sapi/cli/php.1.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/cli/php.1.in||sapi/cli/php.1.in": [
          "File: sapi/cli/php.1.in -> sapi/cli/php.1.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: .SH VERSION INFORMATION",
          "455: This manpage describes \\fBphp\\fP, version @PHP_VERSION@.",
          "456: .SH COPYRIGHT",
          "458: .LP",
          "459: This source file is subject to version 3.01 of the PHP license,",
          "460: that is bundled with this package in the file LICENSE, and is",
          "",
          "[Removed Lines]",
          "457: Copyright \\(co 1997\\-2013 The PHP Group",
          "",
          "[Added Lines]",
          "457: Copyright \\(co 1997\\-2014 The PHP Group",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0febafcfbe3e35f4a230430368ba931f19f8e957",
      "candidate_info": {
        "commit_hash": "0febafcfbe3e35f4a230430368ba931f19f8e957",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0febafcfbe3e35f4a230430368ba931f19f8e957",
        "files": [
          "sapi/phpdbg/config.m4",
          "sapi/phpdbg/phpdbg.h",
          "sapi/phpdbg/phpdbg_cmd.c",
          "sapi/phpdbg/phpdbg_prompt.c",
          "sapi/phpdbg/phpdbg_utils.c"
        ],
        "message": "Fix https://github.com/krakjoe/phpdbg/issues/91\n\nEnable edit feature when build with libedit.\n\nNotice: coloured prompt only enable with READLINE",
        "before_after_code_files": [
          "sapi/phpdbg/config.m4||sapi/phpdbg/config.m4",
          "sapi/phpdbg/phpdbg.h||sapi/phpdbg/phpdbg.h",
          "sapi/phpdbg/phpdbg_cmd.c||sapi/phpdbg/phpdbg_cmd.c",
          "sapi/phpdbg/phpdbg_prompt.c||sapi/phpdbg/phpdbg_prompt.c",
          "sapi/phpdbg/phpdbg_utils.c||sapi/phpdbg/phpdbg_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/phpdbg/config.m4||sapi/phpdbg/config.m4": [
          "File: sapi/phpdbg/config.m4 -> sapi/phpdbg/config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   PHP_PHPDBG_CFLAGS=\"-D_GNU_SOURCE\"",
          "22:   PHP_PHPDBG_FILES=\"phpdbg.c phpdbg_parser.c phpdbg_lexer.c phpdbg_prompt.c phpdbg_help.c phpdbg_break.c phpdbg_print.c phpdbg_bp.c phpdbg_opcode.c phpdbg_list.c phpdbg_utils.c phpdbg_info.c phpdbg_cmd.c phpdbg_set.c phpdbg_frame.c phpdbg_watch.c phpdbg_btree.c\"",
          "25:    PHPDBG_EXTRA_LIBS=\"$PHP_READLINE_LIBS\"",
          "26:   fi",
          "",
          "[Removed Lines]",
          "24:   if test \"$PHP_READLINE\" != \"no\"; then",
          "",
          "[Added Lines]",
          "24:   if test \"$PHP_READLINE\" != \"no\" -o  \"$PHP_LIBEDIT\" != \"no\"; then",
          "",
          "---------------"
        ],
        "sapi/phpdbg/phpdbg.h||sapi/phpdbg/phpdbg.h": [
          "File: sapi/phpdbg/phpdbg.h -> sapi/phpdbg/phpdbg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: # include \"TSRM.h\"",
          "65: #endif",
          "68: #   include <readline/readline.h>",
          "69: #   include <readline/history.h>",
          "70: #endif",
          "",
          "[Removed Lines]",
          "67: #ifdef HAVE_LIBREADLINE",
          "",
          "[Added Lines]",
          "67: #if defined(HAVE_LIBREADLINE) || defined(HAVE_LIBEDIT)",
          "",
          "---------------"
        ],
        "sapi/phpdbg/phpdbg_cmd.c||sapi/phpdbg/phpdbg_cmd.c": [
          "File: sapi/phpdbg/phpdbg_cmd.c -> sapi/phpdbg/phpdbg_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793: {",
          "794:  char *cmd = NULL;",
          "796:  char buf[PHPDBG_MAX_CMD];",
          "797: #endif",
          "798:  char *buffer = NULL;",
          "",
          "[Removed Lines]",
          "795: #ifndef HAVE_LIBREADLINE",
          "",
          "[Added Lines]",
          "795: #if !defined(HAVE_LIBREADLINE) && !defined(HAVE_LIBEDIT)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:     return NULL;",
          "812:    }",
          "815:    if (!(PHPDBG_G(flags) & PHPDBG_IS_REMOTE)) {",
          "816:     if (!phpdbg_write(\"%s\", phpdbg_get_prompt(TSRMLS_C))) {",
          "817:      goto disconnect;",
          "",
          "[Removed Lines]",
          "814: #ifndef HAVE_LIBREADLINE",
          "",
          "[Added Lines]",
          "814: #if !defined(HAVE_LIBREADLINE) && !defined(HAVE_LIBEDIT)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "851:   buffer = estrdup(cmd);",
          "854:   if (!buffered && cmd &&",
          "855:    !(PHPDBG_G(flags) & PHPDBG_IS_REMOTE)) {",
          "856:    free(cmd);",
          "",
          "[Removed Lines]",
          "853: #ifdef HAVE_LIBREADLINE",
          "",
          "[Added Lines]",
          "853: #if defined(HAVE_LIBREADLINE) || defined(HAVE_LIBEDIT)",
          "",
          "---------------"
        ],
        "sapi/phpdbg/phpdbg_prompt.c||sapi/phpdbg/phpdbg_prompt.c": [
          "File: sapi/phpdbg/phpdbg_prompt.c -> sapi/phpdbg/phpdbg_prompt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732: #else",
          "733:  phpdbg_writeln(\"Readline\\tno\");",
          "734: #endif",
          "736:  phpdbg_writeln(\"Exec\\t\\t%s\", PHPDBG_G(exec) ? PHPDBG_G(exec) : \"none\");",
          "737:  phpdbg_writeln(\"Compiled\\t%s\", PHPDBG_G(ops) ? \"yes\" : \"no\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735: #ifdef HAVE_LIBEDIT",
          "736:  phpdbg_writeln(\"Libedit\\t\\tyes\");",
          "737: #else",
          "738:  phpdbg_writeln(\"Libedit\\t\\tno\");",
          "739: #endif",
          "",
          "---------------"
        ],
        "sapi/phpdbg/phpdbg_utils.c||sapi/phpdbg/phpdbg_utils.c": [
          "File: sapi/phpdbg/phpdbg_utils.c -> sapi/phpdbg/phpdbg_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  }",
          "403:  if ((PHPDBG_G(flags) & PHPDBG_IS_COLOURED)) {",
          "404:   asprintf(",
          "405:    &PHPDBG_G(prompt)[1], \"\\033[%sm%s\\033[0m \",",
          "406:    PHPDBG_G(colors)[PHPDBG_COLOR_PROMPT]->code,",
          "407:    PHPDBG_G(prompt)[0]);",
          "409:   asprintf(",
          "410:    &PHPDBG_G(prompt)[1], \"%s \",",
          "411:    PHPDBG_G(prompt)[0]);",
          "",
          "[Removed Lines]",
          "408:  } else {",
          "",
          "[Added Lines]",
          "403: #ifdef HAVE_LIBREADLINE",
          "410:  } else",
          "411: #endif",
          "412:  {",
          "",
          "---------------"
        ]
      }
    }
  ]
}