{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
      "candidate_info": {
        "commit_hash": "fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Off-by-one error in the CAST to NUMERIC logic.\n\nFossilOrigin-Name: 25b89630206fdbb41c756e98f99baa711d35a8c226697a92339d0fe7e8b3652a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f2c8179f3c0b77f10da3f9b0771db4dec30d0bbf0b7f4751ce439bfb08da8f6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "704: }",
          "",
          "[Removed Lines]",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
      "candidate_info": {
        "commit_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5710f1ad4822394087defa0cfefec9129fa8e885",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_expr.test",
          "test/func.test"
        ],
        "message": "Modify three test cases so that they work even with unusual versions of the library printf().\n\nFossilOrigin-Name: 8f4a3750b7d272daf96831655ffee80d457875ee121fc4537008046b9a00d0e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_expr.test||test/e_expr.test",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c35d3f67b67a53ead08b1c395e7ca8e5bf65f94a5a962a0562994a3c66c95d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "1664: do_expr_test e_expr-32.1.6 {CAST( '9.223372036e14' AS NUMERIC)} integer  922337203600000",
          "1665: do_expr_test e_expr-32.1.7 {CAST('-9.223372036e14' AS NUMERIC)} integer -922337203600000",
          "1670: # EVIDENCE-OF: R-50300-26941 Any text input that describes a value",
          "1671: # outside the range of a 64-bit signed integer yields a REAL result.",
          "",
          "[Removed Lines]",
          "1666: do_expr_test e_expr-32.1.8 {CAST( '9.223372036e15' AS NUMERIC)} real     9223372036000000.0",
          "1667: do_expr_test e_expr-32.1.9 {CAST('-9.223372036e15' AS NUMERIC)} real    -9223372036000000.0",
          "",
          "[Added Lines]",
          "1666: do_test e_expr-32.1.8 {",
          "1667:   set expr {CAST( '9.223372036e15' AS NUMERIC)}",
          "1668:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1669:   list $type $value",
          "1670: } {real 9.22337e+15}",
          "1671: do_test e_expr-32.1.9 {",
          "1672:   set expr {CAST('-9.223372036e15' AS NUMERIC)}",
          "1673:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1674:   list $type $value",
          "1675: } {real -9.22337e+15}",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   do_test func-4.38 {",
          "316:     execsql {SELECT round(9999999999999.556,2);}",
          "317:   } {9999999999999.56}",
          "321: }",
          "323: # Test the upper() and lower() functions",
          "",
          "[Removed Lines]",
          "318:   do_execsql_test func-4.39 {",
          "319:     SELECT round(1e500), round(-1e500);",
          "320:   } {Inf -Inf}",
          "",
          "[Added Lines]",
          "318:   do_test func-4.39 {",
          "319:     string tolower [db eval {SELECT round(1e500), round(-1e500);}]",
          "320:   } {inf -inf}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8aa706e748e0392e0b1a432f2f750bce1e457e54",
      "candidate_info": {
        "commit_hash": "8aa706e748e0392e0b1a432f2f750bce1e457e54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8aa706e748e0392e0b1a432f2f750bce1e457e54",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a buffer overread that could occur in fts3 with corrupt %_stat records.\n\nFossilOrigin-Name: e01fdbf9f700e1bd9dd5283c65547d10d26ce4f4506d3cfef9e1087aecdc2305",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4850:   const int nHint = pHint->n;",
          "4851:   int i;",
          "4854:   while( i>0 && (pHint->a[i-1] & 0x80) ) i--;",
          "4855:   while( i>0 && (pHint->a[i-1] & 0x80) ) i--;",
          "4857:   pHint->n = i;",
          "4858:   i += sqlite3Fts3GetVarint(&pHint->a[i], piAbsLevel);",
          "4859:   i += fts3GetVarint32(&pHint->a[i], pnInput);",
          "4860:   if( i!=nHint ) return FTS_CORRUPT_VTAB;",
          "4862:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "4853:   i = pHint->n-2;",
          "",
          "[Added Lines]",
          "4853:   i = pHint->n-1;",
          "4854:   if( (pHint->a[i] & 0x80) ) return FTS_CORRUPT_VTAB;",
          "4856:   if( i==0 ) return FTS_CORRUPT_VTAB;",
          "4857:   i--;",
          "4863:   assert( i<=nHint );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 96b6a76da09a94182414ec1a56da91728c37329d2b55f889e433054ca21605ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5767:   UPDATE t1 SET b=((- '' )) WHERE a MATCH '0*t';",
          "5768: } {1 {database disk image is malformed}}",
          "5771: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5770: #-------------------------------------------------------------------------",
          "5771: #",
          "5772: reset_db",
          "5773: do_catchsql_test 32.0 {",
          "5774:   CREATE VIRTUAL TABLE f USING fts3(a,b,tokenize=icu);",
          "5775:   CREATE TABLE 'f_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
          "5776:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5777:   INSERT INTO f VALUES (1, '1234');",
          "5778:   INSERT INTO f_stat VALUES (1,x'0000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003bc502fffffffffb8b2afbfb6565f0740100650000000165656565db6569746565c5c52bc5c5c53e3a003bc502ffffffffc5c5c53e3a003b8b00c5c5c5c5c5bfc5');",
          "5779:   INSERT INTO f(f) VALUES ('merge=198,49');",
          "5780: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01325a3f756501a8929c0642eb69734667f24289",
      "candidate_info": {
        "commit_hash": "01325a3f756501a8929c0642eb69734667f24289",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01325a3f756501a8929c0642eb69734667f24289",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix an issue (discovered by OSSFuzz) in the enhanced OP_Concat operator from check-in [713caa382cf7dd] earlier today.\n\nFossilOrigin-Name: 3e897702f8f789fe5119b9042fb93eca3fbfcc44564fbfa66c65628725b1157d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ece481695fc3c959c3eba0fb485cdda43a10b06d17259b0121e15bfc5e8e8b9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476:   }",
          "1477:   if( (flags1 & (MEM_Str|MEM_Blob))==0 ){",
          "1478:     if( sqlite3VdbeMemStringify(pIn1,encoding,0) ) goto no_mem;",
          "1479:   }else if( (flags1 & MEM_Zero)!=0 ){",
          "1480:     if( sqlite3VdbeMemExpandBlob(pIn1) ) goto no_mem;",
          "1481:   }",
          "1482:   flags2 = pIn2->flags;",
          "1483:   if( (flags2 & (MEM_Str|MEM_Blob))==0 ){",
          "1484:     if( sqlite3VdbeMemStringify(pIn2,encoding,0) ) goto no_mem;",
          "1485:   }else if( (flags2 & MEM_Zero)!=0 ){",
          "1486:     if( sqlite3VdbeMemExpandBlob(pIn2) ) goto no_mem;",
          "1487:   }",
          "1488:   nByte = pIn1->n + pIn2->n;",
          "1489:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:     flags1 = pIn1->flags & ~MEM_Str;",
          "1482:     flags1 = pIn1->flags & ~MEM_Str;",
          "1487:     flags2 = pIn2->flags & ~MEM_Str;",
          "1490:     flags2 = pIn2->flags & ~MEM_Str;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7f3373ec7db12a1f6b7c1656d75d4c2630c8425",
      "candidate_info": {
        "commit_hash": "c7f3373ec7db12a1f6b7c1656d75d4c2630c8425",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7f3373ec7db12a1f6b7c1656d75d4c2630c8425",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/sqllimits1.test"
        ],
        "message": "Fix a problem caused by a small SQLITE_LIMIT_LENGTH value and a CREATE TABLE with a very large name.\n\nFossilOrigin-Name: 9b5d408864920b302f2d21abcae1d90f1e0cd68b18262136554ba0e6219d6025",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/sqllimits1.test||test/sqllimits1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3222:     for(pLoop=pTab->pIndex, n=1; pLoop; pLoop=pLoop->pNext, n++){}",
          "3223:     zName = sqlite3MPrintf(db, \"sqlite_autoindex_%s_%d\", pTab->zName, n);",
          "3224:     if( zName==0 ){",
          "3225:       goto exit_create_index;",
          "3226:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3225:       if( db->mallocFailed==0 ) pParse->rc = SQLITE_TOOBIG;",
          "3226:       pParse->nErr++;",
          "",
          "---------------"
        ],
        "test/sqllimits1.test||test/sqllimits1.test": [
          "File: test/sqllimits1.test -> test/sqllimits1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: foreach {key value} [array get saved] {",
          "890:   catch {set $key $value}",
          "891: }",
          "892: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893: #-------------------------------------------------------------------------",
          "894: # At one point the following caused an assert() to fail.",
          "895: #",
          "896: sqlite3_limit db SQLITE_LIMIT_LENGTH 10000",
          "897: set nm [string repeat x 10000]",
          "898: do_catchsql_test sqllimits1-17.1 \"",
          "899:   CREATE TABLE $nm (x PRIMARY KEY)",
          "900: \" {1 {string or blob too big}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}