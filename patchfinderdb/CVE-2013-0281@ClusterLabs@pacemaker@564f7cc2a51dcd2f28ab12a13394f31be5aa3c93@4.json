{
  "cve_id": "CVE-2013-0281",
  "cve_desc": "Pacemaker 1.1.10, when remote Cluster Information Base (CIB) configuration or resource management is enabled, does not limit the duration of connections to the blocking sockets, which allows remote attackers to cause a denial of service (connection blocking).",
  "repo": "ClusterLabs/pacemaker",
  "patch_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
  "patch_info": {
    "commit_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "repo": "ClusterLabs/pacemaker",
    "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "files": [
      "cib/callbacks.c",
      "cib/callbacks.h",
      "cib/notify.c",
      "cib/remote.c",
      "include/crm_internal.h",
      "lib/cib/cib_remote.c",
      "lib/common/mainloop.c",
      "lib/common/remote.c",
      "tools/crm_mon.c"
    ],
    "message": "High: core: Internal tls api improvements for reuse with future LRMD tls backend.",
    "before_after_code_files": [
      "cib/callbacks.c||cib/callbacks.c",
      "cib/callbacks.h||cib/callbacks.h",
      "cib/notify.c||cib/notify.c",
      "cib/remote.c||cib/remote.c",
      "include/crm_internal.h||include/crm_internal.h",
      "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
      "lib/common/mainloop.c||lib/common/mainloop.c",
      "lib/common/remote.c||lib/common/remote.c",
      "tools/crm_mon.c||tools/crm_mon.c"
    ]
  },
  "patch_diff": {
    "cib/callbacks.c||cib/callbacks.c": [
      "File: cib/callbacks.c -> cib/callbacks.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:         int rid = 0;",
      "349:         if(sync_reply) {",
      "356:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "358:         } else {",
      "359:             crm_trace(\"Sending an event to %s %s\",",
      "",
      "[Removed Lines]",
      "350:             CRM_LOG_ASSERT(client_obj->request_id);",
      "352:             rid = client_obj->request_id;",
      "353:             client_obj->request_id = 0;",
      "355:             crm_trace(\"Sending response %d to %s %s\",",
      "",
      "[Added Lines]",
      "350:             if (client_obj->ipc) {",
      "351:                 CRM_LOG_ASSERT(client_obj->request_id);",
      "353:                 rid = client_obj->request_id;",
      "354:                 client_obj->request_id = 0;",
      "356:                 crm_trace(\"Sending response %d to %s %s\",",
      "358:             } else {",
      "359:                 crm_trace(\"Sending response to %s %s\",",
      "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "361:             }",
      "",
      "---------------"
    ],
    "cib/callbacks.h||cib/callbacks.h": [
      "File: cib/callbacks.h -> cib/callbacks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     char *name;",
      "42:     char *callback_id;",
      "43:     char *user;",
      "44:     int request_id;",
      "46:     qb_ipcs_connection_t *ipc;",
      "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "49:     gnutls_session *session;",
      "50: #else",
      "51:     void *session;",
      "52: #endif",
      "53:     gboolean encrypted;",
      "54:     mainloop_io_t *remote;",
      "56:     unsigned long num_calls;",
      "58:     int pre_notify;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     char *recv_buf;",
      "51:     gboolean handshake_complete;",
      "56:     gboolean remote_auth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     int confirmations;",
      "61:     int replace;",
      "62:     int diffs;",
      "64:     GList *delegated_calls;",
      "65: } cib_client_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     int remote_auth_timeout;",
      "",
      "---------------"
    ],
    "cib/notify.c||cib/notify.c": [
      "File: cib/notify.c -> cib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     CRM_CHECK(client != NULL, return TRUE);",
      "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
      "87:         crm_warn(\"Skipping client with NULL channel\");",
      "88:         return FALSE;",
      "89:     }",
      "",
      "[Removed Lines]",
      "86:     if (client->ipc == NULL) {",
      "",
      "[Added Lines]",
      "86:     if (client->ipc == NULL && client->session == NULL) {",
      "",
      "---------------"
    ],
    "cib/remote.c||cib/remote.c": [
      "File: cib/remote.c -> cib/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: #  endif",
      "61: #endif",
      "67: extern int remote_tls_fd;",
      "68: extern gboolean cib_shutdown_flag;",
      "",
      "[Removed Lines]",
      "63: #ifdef HAVE_DECL_NANOSLEEP",
      "64: #  include <time.h>",
      "65: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "74: #  define DH_BITS 1024",
      "75: gnutls_dh_params dh_params;",
      "77: static void",
      "78: debug_log(int level, const char *str)",
      "79: {",
      "80:     fputs(str, stderr);",
      "81: }",
      "85: #endif",
      "87: int num_clients;",
      "88: int authenticate_user(const char *user, const char *passwd);",
      "89: int cib_remote_listen(gpointer data);",
      "",
      "[Removed Lines]",
      "76: extern gnutls_anon_server_credentials anon_cred_s;",
      "83: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "72: gnutls_anon_server_credentials anon_cred_s;",
      "80: #define REMOTE_AUTH_TIMEOUT 10000",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:     return FALSE;",
      "216: }",
      "218: int",
      "219: cib_remote_listen(gpointer data)",
      "220: {",
      "222:     int csock = 0;",
      "223:     unsigned laddr;",
      "226:     struct sockaddr_in addr;",
      "227:     int ssock = *(int *)data;",
      "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "230:     gnutls_session *session = NULL;",
      "231: #endif",
      "232:     cib_client_t *new_client = NULL;",
      "243:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
      "244:         {",
      "245:             .dispatch = cib_remote_msg,",
      "246:             .destroy = cib_remote_connection_destroy,",
      "250:     laddr = sizeof(addr);",
      "251:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
      "",
      "[Removed Lines]",
      "221:     int lpc = 0;",
      "224:     time_t now = 0;",
      "225:     time_t start = time(NULL);",
      "234:     xmlNode *login = NULL;",
      "235:     const char *user = NULL;",
      "236:     const char *pass = NULL;",
      "237:     const char *tmp = NULL;",
      "239: #ifdef HAVE_DECL_NANOSLEEP",
      "241: #endif",
      "247:         };",
      "",
      "[Added Lines]",
      "213: static gboolean",
      "214: cib_remote_auth(xmlNode *login)",
      "215: {",
      "216:     const char *user = NULL;",
      "217:     const char *pass = NULL;",
      "218:     const char *tmp = NULL;",
      "220:     crm_log_xml_info(login, \"Login: \");",
      "221:     if (login == NULL) {",
      "222:         return FALSE;",
      "223:     }",
      "225:     tmp = crm_element_name(login);",
      "226:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "227:         crm_err(\"Wrong tag: %s\", tmp);",
      "228:         return FALSE;",
      "229:     }",
      "231:     tmp = crm_element_value(login, \"op\");",
      "232:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "233:         crm_err(\"Wrong operation: %s\", tmp);",
      "234:         return FALSE;",
      "235:     }",
      "237:     user = crm_element_value(login, \"user\");",
      "238:     pass = crm_element_value(login, \"password\");",
      "240:     if (!user || !pass) {",
      "241:         crm_err(\"missing auth credentials\");",
      "242:         return FALSE;",
      "243:     }",
      "248:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "249:         crm_err(\"User is not a member of the required group\");",
      "250:         return FALSE;",
      "252:     } else if (authenticate_user(user, pass) == FALSE) {",
      "253:         crm_err(\"PAM auth failed\");",
      "254:         return FALSE;",
      "255:     }",
      "257:     return TRUE;",
      "258: }",
      "260: static gboolean",
      "261: remote_auth_timeout_cb(gpointer data)",
      "262: {",
      "263:     cib_client_t *client = data;",
      "265:     client->remote_auth_timeout = 0;",
      "267:     if (client->remote_auth == TRUE) {",
      "268:         return FALSE;",
      "269:     }",
      "271:     mainloop_del_fd(client->remote);",
      "272:     crm_err(\"Remote client authentication timed out\");",
      "274:     return FALSE;",
      "275: }",
      "283:     int flag;",
      "294:         };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:         return TRUE;",
      "258:     }",
      "260:     if (ssock == remote_tls_fd) {",
      "261: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "264:         if (session == NULL) {",
      "265:             crm_err(\"TLS session creation failed\");",
      "266:             close(csock);",
      "",
      "[Removed Lines]",
      "263:         session = create_tls_session(csock, GNUTLS_SERVER);",
      "",
      "[Added Lines]",
      "307:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
      "308:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "309:             crm_err( \"fcntl() write failed\");",
      "310:             close(csock);",
      "311:             return TRUE;",
      "312:         }",
      "313:     } else {",
      "314:         crm_err( \"fcntl() read failed\");",
      "315:         close(csock);",
      "316:         return TRUE;",
      "317:     }",
      "322:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "269: #endif",
      "270:     }",
      "327:     num_clients++;",
      "328:     new_client = calloc(1, sizeof(cib_client_t));",
      "332:     new_client->id = crm_generate_uuid();",
      "338:     new_client->callback_id = NULL;",
      "339:     if (ssock == remote_tls_fd) {",
      "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "341:         new_client->encrypted = TRUE;",
      "",
      "[Removed Lines]",
      "272:     do {",
      "273:         crm_trace(\"Iter: %d\", lpc++);",
      "274:         if (ssock == remote_tls_fd) {",
      "275: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "276:             login = crm_recv_remote_msg(session, TRUE);",
      "277: #endif",
      "278:         } else {",
      "279:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
      "280:         }",
      "281:         if (login != NULL) {",
      "282:             break;",
      "283:         }",
      "284: #ifdef HAVE_DECL_NANOSLEEP",
      "285:         nanosleep(&sleepfast, NULL);",
      "286: #else",
      "287:         sleep(1);",
      "288: #endif",
      "289:         now = time(NULL);",
      "292:     } while (login == NULL && (start - now) < 4);",
      "294:     crm_log_xml_info(login, \"Login: \");",
      "295:     if (login == NULL) {",
      "296:         goto bail;",
      "297:     }",
      "299:     tmp = crm_element_name(login);",
      "300:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "301:         crm_err(\"Wrong tag: %s\", tmp);",
      "302:         goto bail;",
      "303:     }",
      "305:     tmp = crm_element_value(login, \"op\");",
      "306:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "307:         crm_err(\"Wrong operation: %s\", tmp);",
      "308:         goto bail;",
      "309:     }",
      "311:     user = crm_element_value(login, \"user\");",
      "312:     pass = crm_element_value(login, \"password\");",
      "317:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "318:         crm_err(\"User is not a member of the required group\");",
      "319:         goto bail;",
      "321:     } else if (authenticate_user(user, pass) == FALSE) {",
      "322:         crm_err(\"PAM auth failed\");",
      "323:         goto bail;",
      "324:     }",
      "329:     new_client->name = crm_element_value_copy(login, \"name\");",
      "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
      "334: #if ENABLE_ACL",
      "335:     new_client->user = strdup(user);",
      "336: #endif",
      "",
      "[Added Lines]",
      "336:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "345:         new_client->session = GINT_TO_POINTER(csock);",
      "346:     }",
      "355:     new_client->remote = mainloop_add_fd(",
      "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
      "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
      "360:     return TRUE;",
      "373: }",
      "375: void",
      "376: cib_remote_connection_destroy(gpointer user_data)",
      "377: {",
      "378:     cib_client_t *client = user_data;",
      "380:     if (client == NULL) {",
      "381:         return;",
      "",
      "[Removed Lines]",
      "348:     free_xml(login);",
      "349:     login = create_xml_node(NULL, \"cib_result\");",
      "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
      "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
      "353:     free_xml(login);",
      "362:   bail:",
      "363:     if (ssock == remote_tls_fd) {",
      "364: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "365:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
      "366:         gnutls_deinit(*session);",
      "367:         gnutls_free(session);",
      "368: #endif",
      "369:     }",
      "370:     close(csock);",
      "371:     free_xml(login);",
      "372:     return TRUE;",
      "",
      "[Added Lines]",
      "359:     int csock = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
      "394:     num_clients--;",
      "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
      "396:     free(client->name);",
      "397:     free(client->callback_id);",
      "398:     free(client->id);",
      "399:     free(client->user);",
      "400:     free(client);",
      "401:     crm_trace(\"Freed the cib client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (client->remote_auth_timeout) {",
      "378:         g_source_remove(client->remote_auth_timeout);",
      "379:     }",
      "381:     if (client->encrypted) {",
      "382: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "383:         if (client->session) {",
      "384:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
      "385:             csock = GPOINTER_TO_INT(sock_ptr);",
      "386:             if (client->handshake_complete) {",
      "387:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
      "388:             }",
      "389:             gnutls_deinit(*client->session);",
      "390:             gnutls_free(client->session);",
      "391:         }",
      "392: #endif",
      "393:     } else {",
      "394:         csock = GPOINTER_TO_INT(client->session);",
      "395:     }",
      "396:     client->session = NULL;",
      "398:     if (csock > 0) {",
      "399:         close(csock);",
      "400:     }",
      "406:     free(client->recv_buf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "406:     return;",
      "407: }",
      "411: {",
      "412:     const char *value = NULL;",
      "423:     value = crm_element_name(command);",
      "424:     if (safe_str_neq(value, \"cib_command\")) {",
      "425:         crm_log_xml_trace(command, \"Bad command: \");",
      "427:     }",
      "429:     if (client->name == NULL) {",
      "",
      "[Removed Lines]",
      "409: int",
      "410: cib_remote_msg(gpointer data)",
      "413:     xmlNode *command = NULL;",
      "414:     cib_client_t *client = data;",
      "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
      "419:     if (command == NULL) {",
      "420:         return -1;",
      "421:     }",
      "426:         goto bail;",
      "",
      "[Added Lines]",
      "416: static void",
      "417: cib_handle_remote_msg(cib_client_t *client, xmlNode *command)",
      "424:         return;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "473:     crm_log_xml_trace(command, \"Remote command: \");",
      "474:     cib_common_callback_worker(0, 0, command, client, TRUE);",
      "478:     return 0;",
      "479: }",
      "",
      "[Removed Lines]",
      "475:   bail:",
      "476:     free_xml(command);",
      "477:     command = NULL;",
      "",
      "[Added Lines]",
      "473: }",
      "475: int",
      "476: cib_remote_msg(gpointer data)",
      "477: {",
      "478:     xmlNode *command = NULL;",
      "479:     cib_client_t *client = data;",
      "480:     int disconnected = 0;",
      "481:     int timeout = client->remote_auth ? -1 : 1000;",
      "483:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "485: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "486:     if (client->encrypted && (client->handshake_complete == FALSE)) {",
      "487:         int rc = 0;",
      "491:         do {",
      "492:             rc = gnutls_handshake(*client->session);",
      "494:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
      "495:                 crm_err(\"Remote cib tls handshake failed\");",
      "496:                 return -1;",
      "497:             }",
      "498:         } while (rc == GNUTLS_E_INTERRUPTED);",
      "500:         if (rc == 0) {",
      "501:             crm_debug(\"Remote cib tls handshake completed\");",
      "502:             client->handshake_complete = TRUE;",
      "503:             if (client->remote_auth_timeout) {",
      "504:                 g_source_remove(client->remote_auth_timeout);",
      "505:             }",
      "507:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
      "508:         }",
      "509:         return 0;",
      "510:     }",
      "511: #endif",
      "513:     crm_recv_remote_msg(client->session, &client->recv_buf, client->encrypted, timeout, &disconnected);",
      "516:     if (client->remote_auth == FALSE) {",
      "517:         xmlNode *reg;",
      "518: #if ENABLE_ACL",
      "519:         const char *user = NULL;",
      "520: #endif",
      "521:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "522:         if (cib_remote_auth(command) == FALSE) {",
      "523:             free_xml(command);",
      "524:             return -1;",
      "525:         }",
      "527:         crm_debug(\"remote connection authenticated successfully\");",
      "528:         client->remote_auth = TRUE;",
      "529:         g_source_remove(client->remote_auth_timeout);",
      "530:         client->remote_auth_timeout = 0;",
      "531:         client->name = crm_element_value_copy(command, \"name\");",
      "533: #if ENABLE_ACL",
      "534:         user = crm_element_value(command, \"user\");",
      "535:         if (user) {",
      "536:            new_client->user = strdup(user);",
      "537:         }",
      "538: #endif",
      "541:         reg = create_xml_node(NULL, \"cib_result\");",
      "542:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "543:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
      "544:         crm_send_remote_msg(client->session, reg, client->encrypted);",
      "545:         free_xml(reg);",
      "546:         free_xml(command);",
      "547:     }",
      "549:     command = crm_parse_remote_buffer(&client->recv_buf);",
      "550:     while (command) {",
      "551:         crm_trace(\"command received\");",
      "552:         cib_handle_remote_msg(client, command);",
      "553:         free_xml(command);",
      "554:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "555:     }",
      "557:     if (disconnected) {",
      "558:         crm_trace(\"disconnected while receiving remote cib msg.\");",
      "559:         return -1;",
      "560:     }",
      "",
      "---------------"
    ],
    "include/crm_internal.h||include/crm_internal.h": [
      "File: include/crm_internal.h -> include/crm_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "199: long long crm_int_helper(const char *text, char **end_text);",
      "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
      "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
      "205: const char *daemon_option(const char *option);",
      "206: void set_daemon_option(const char *option, const char *value);",
      "",
      "[Removed Lines]",
      "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
      "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "",
      "[Added Lines]",
      "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
      "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
      "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
      "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
      "210: int crm_remote_tcp_connect(const char *host, int port);",
      "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
      "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
      "233: #endif",
      "235: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
      "",
      "---------------"
    ],
    "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
      "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "39: #  undef KEYFILE",
      "40: #  include <gnutls/gnutls.h>",
      "44: const int kx_prio[] = {",
      "45:     GNUTLS_KX_ANON_DH,",
      "46:     0",
      "47: };",
      "49: #else",
      "50: typedef void gnutls_session;",
      "51: #endif",
      "",
      "[Removed Lines]",
      "41: extern gnutls_anon_client_credentials anon_cred_c;",
      "42: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "41: gnutls_anon_client_credentials anon_cred_c;",
      "49: static gboolean remote_gnutls_credentials_init = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     gnutls_session *session;",
      "62:     mainloop_io_t *source;",
      "63:     char *token;",
      "64: };",
      "66: typedef struct cib_remote_opaque_s {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     char *recv_buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: } cib_remote_opaque_t;",
      "78: void cib_remote_connection_destroy(gpointer user_data);",
      "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
      "81: int cib_remote_signoff(cib_t * cib);",
      "82: int cib_remote_free(cib_t * cib);",
      "",
      "[Removed Lines]",
      "79: int cib_remote_dispatch(gpointer user_data);",
      "",
      "[Added Lines]",
      "81: int cib_remote_callback_dispatch(gpointer user_data);",
      "82: int cib_remote_command_dispatch(gpointer user_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158: {",
      "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "167:     if (private->command.encrypted) {",
      "178:     }",
      "179: #endif",
      "180:     return 0;",
      "181: }",
      "183: static int",
      "185: {",
      "186:     int sock;",
      "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "189:     int rc = 0;",
      "196:     xmlNode *answer = NULL;",
      "197:     xmlNode *login = NULL;",
      "205:     connection->socket = 0;",
      "206:     connection->session = NULL;",
      "259:     }",
      "261:     if (connection->encrypted) {",
      "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "272:             cib_tls_close(cib);",
      "273:             return -1;",
      "274:         }",
      "",
      "[Removed Lines]",
      "163:     close(private->command.socket);",
      "164:     close(private->callback.socket);",
      "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "169:         gnutls_deinit(*(private->command.session));",
      "170:         gnutls_free(private->command.session);",
      "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "173:         gnutls_deinit(*(private->callback.session));",
      "174:         gnutls_free(private->callback.session);",
      "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
      "177:         gnutls_global_deinit();",
      "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
      "188:     struct sockaddr_in addr;",
      "190:     char *server = private->server;",
      "192:     int ret_ga;",
      "193:     struct addrinfo *res;",
      "194:     struct addrinfo hints;",
      "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
      "200:         {",
      "201:             .dispatch = cib_remote_dispatch,",
      "202:             .destroy = cib_remote_connection_destroy,",
      "203:         };",
      "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
      "210:     if (sock == -1) {",
      "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
      "212:         return -1;",
      "213:     }",
      "216:     bzero(&hints, sizeof(struct addrinfo));",
      "217:     hints.ai_flags = AI_CANONNAME;",
      "218:     hints.ai_family = AF_INET;",
      "219:     hints.ai_socktype = SOCK_RAW;",
      "221:     if (hints.ai_family == AF_INET6) {",
      "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
      "223:     } else {",
      "224:         hints.ai_protocol = IPPROTO_ICMP;",
      "225:     }",
      "227:     crm_debug(\"Looking up %s\", server);",
      "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "229:     if (ret_ga) {",
      "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "231:         close(sock);",
      "232:         return -1;",
      "233:     }",
      "235:     if (res->ai_canonname) {",
      "236:         server = res->ai_canonname;",
      "237:     }",
      "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
      "241:     if (!res->ai_addr) {",
      "242:         fprintf(stderr, \"getaddrinfo failed\");",
      "243:         crm_exit(1);",
      "244:     }",
      "245: #if 1",
      "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
      "247: #else",
      "249:     memset(&addr, 0, sizeof(addr));",
      "250:     addr.sin_family = AF_INET;",
      "251:     addr.sin_addr.s_addr = inet_addr(server);",
      "252: #endif",
      "253:     addr.sin_port = htons(private->port);",
      "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
      "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
      "257:         close(sock);",
      "258:         return -1;",
      "264:         gnutls_global_init();",
      "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
      "269:         if (connection->session == NULL) {",
      "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
      "271:             close(sock);",
      "",
      "[Added Lines]",
      "166:         if (private->command.session) {",
      "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "168:             gnutls_deinit(*(private->command.session));",
      "169:             gnutls_free(private->command.session);",
      "170:         }",
      "172:         if (private->callback.session) {",
      "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "174:             gnutls_deinit(*(private->callback.session));",
      "175:             gnutls_free(private->callback.session);",
      "176:         }",
      "177:         private->command.session = NULL;",
      "178:         private->callback.session = NULL;",
      "179:         if (remote_gnutls_credentials_init) {",
      "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
      "181:             gnutls_global_deinit();",
      "182:             remote_gnutls_credentials_init = FALSE;",
      "183:         }",
      "187:     if (private->command.socket) {",
      "189:         close(private->command.socket);",
      "190:     }",
      "191:     if (private->callback.socket) {",
      "193:         close(private->callback.socket);",
      "194:     }",
      "195:     private->command.socket = 0;",
      "196:     private->callback.socket = 0;",
      "198:     free(private->command.recv_buf);",
      "199:     free(private->callback.recv_buf);",
      "200:     private->command.recv_buf = NULL;",
      "201:     private->callback.recv_buf = NULL;",
      "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
      "212:     int disconnected = 0;",
      "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
      "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
      "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
      "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
      "226:     if (sock <= 0) {",
      "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
      "230:     connection->socket = sock;",
      "234:         if (remote_gnutls_credentials_init == FALSE) {",
      "235:             gnutls_global_init();",
      "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "237:             remote_gnutls_credentials_init = TRUE;",
      "238:         }",
      "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
      "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
      "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
      "246:             gnutls_deinit(*connection->session);",
      "247:             gnutls_free(connection->session);",
      "248:             connection->session = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
      "290:     free_xml(login);",
      "293:     crm_log_xml_trace(answer, \"Reply\");",
      "294:     if (answer == NULL) {",
      "295:         rc = -EPROTO;",
      "",
      "[Removed Lines]",
      "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
      "",
      "[Added Lines]",
      "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
      "271:     if (disconnected) {",
      "272:         rc = -ENOTCONN;",
      "273:     }",
      "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "310:             connection->token = strdup(tmp_ticket);",
      "311:         }",
      "312:     }",
      "314:     if (rc != 0) {",
      "315:         cib_tls_close(cib);",
      "316:     }",
      "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
      "320:     return rc;",
      "321: }",
      "",
      "[Removed Lines]",
      "318:     connection->socket = sock;",
      "",
      "[Added Lines]",
      "297:     free_xml(answer);",
      "298:     answer = NULL;",
      "302:         return rc;",
      "305:     crm_trace(\"remote client connection established\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "331: }",
      "333: int",
      "335: {",
      "336:     cib_t *cib = user_data;",
      "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "339:     xmlNode *msg = NULL;",
      "342:     crm_info(\"Message on callback channel\");",
      "359:         free_xml(msg);",
      "361:     }",
      "363: }",
      "365: int",
      "",
      "[Removed Lines]",
      "334: cib_remote_dispatch(gpointer user_data)",
      "340:     const char *type = NULL;",
      "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
      "345:     type = crm_element_value(msg, F_TYPE);",
      "346:     crm_trace(\"Activating %s callbacks...\", type);",
      "348:     if (safe_str_eq(type, T_CIB)) {",
      "349:         cib_native_callback(cib, msg, 0, 0);",
      "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "354:     } else {",
      "355:         crm_err(\"Unknown message type: %s\", type);",
      "356:     }",
      "358:     if (msg != NULL) {",
      "360:         return 0;",
      "362:     return -1;",
      "",
      "[Added Lines]",
      "321: cib_remote_command_dispatch(gpointer user_data)",
      "322: {",
      "323:     int disconnected = 0;",
      "324:     cib_t *cib = user_data;",
      "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
      "329:     free(private->command.recv_buf);",
      "330:     private->command.recv_buf = NULL;",
      "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
      "333:     if (disconnected) {",
      "334:         return -1;",
      "335:     }",
      "336:     return 0;",
      "337: }",
      "339: int",
      "340: cib_remote_callback_dispatch(gpointer user_data)",
      "346:     int disconnected = 0;",
      "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
      "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "353:     while (msg) {",
      "354:         const char *type = crm_element_value(msg, F_TYPE);",
      "355:         crm_trace(\"Activating %s callbacks...\", type);",
      "357:         if (safe_str_eq(type, T_CIB)) {",
      "358:             cib_native_callback(cib, msg, 0, 0);",
      "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "363:         } else {",
      "364:             crm_err(\"Unknown message type: %s\", type);",
      "365:         }",
      "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "369:     }",
      "371:     if (disconnected) {",
      "372:         return -1;",
      "375:     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:     }",
      "396:     if (rc == pcmk_ok) {",
      "398:     }",
      "400:     if (rc == pcmk_ok) {",
      "402:     }",
      "404:     if (rc == pcmk_ok) {",
      "",
      "[Removed Lines]",
      "397:         rc = cib_tls_signon(cib, &(private->command));",
      "401:         rc = cib_tls_signon(cib, &(private->callback));",
      "",
      "[Added Lines]",
      "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
      "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "463:     return rc;",
      "464: }",
      "482: int",
      "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
      "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
      "485: {",
      "486:     int rc = pcmk_ok;",
      "488:     xmlNode *op_msg = NULL;",
      "489:     xmlNode *op_reply = NULL;",
      "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "497:     if (cib->state == cib_disconnected) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "",
      "[Removed Lines]",
      "466: static gboolean timer_expired = FALSE;",
      "467: static struct timer_rec_s *sync_timer = NULL;",
      "468: static gboolean",
      "469: cib_timeout_handler(gpointer data)",
      "470: {",
      "471:     struct timer_rec_s *timer = data;",
      "473:     timer_expired = TRUE;",
      "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
      "479:     return TRUE;",
      "480: }",
      "493:     if (sync_timer == NULL) {",
      "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
      "495:     }",
      "",
      "[Added Lines]",
      "484:     int disconnected = 0;",
      "485:     int remaining_time = 0;",
      "486:     time_t start_time;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "524:     }",
      "526:     crm_trace(\"Sending %s message to CIB service\", op);",
      "528:     free_xml(op_msg);",
      "530:     if ((call_options & cib_discard_reply)) {",
      "",
      "[Removed Lines]",
      "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "",
      "[Added Lines]",
      "523:     if (!(call_options & cib_sync_call)) {",
      "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
      "525:     } else {",
      "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "538:     crm_trace(\"Waiting for a syncronous reply\");",
      "551:         int reply_id = -1;",
      "552:         int msg_id = cib->call_id;",
      "556:             break;",
      "557:         }",
      "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
      "565:         if (reply_id == msg_id) {",
      "566:             break;",
      "",
      "[Removed Lines]",
      "540:     if (cib->call_timeout > 0) {",
      "544:         timer_expired = FALSE;",
      "545:         sync_timer->call_id = cib->call_id;",
      "546:         sync_timer->timeout = cib->call_timeout * 1000;",
      "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
      "548:     }",
      "550:     while (timer_expired == FALSE) {",
      "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
      "555:         if (op_reply == NULL) {",
      "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
      "561:                   if (sync_timer->ref > 0) {",
      "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
      "563:                   return -ENOMSG) ;",
      "",
      "[Added Lines]",
      "540:     start_time = time(NULL);",
      "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
      "543:     while (remaining_time > 0 && !disconnected) {",
      "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
      "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
      "550:         if (!op_reply) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "580:         free_xml(op_reply);",
      "581:         op_reply = NULL;",
      "591:     }",
      "",
      "[Removed Lines]",
      "582:     }",
      "584:     if (sync_timer->ref > 0) {",
      "585:         g_source_remove(sync_timer->ref);",
      "586:         sync_timer->ref = 0;",
      "587:     }",
      "589:     if (timer_expired) {",
      "590:         return -ETIME;",
      "",
      "[Added Lines]",
      "575:         remaining_time = time(NULL) - start_time;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "600:         crm_err(\"No reply message - empty\");",
      "601:         return -ENOMSG;",
      "602:     }",
      "",
      "[Removed Lines]",
      "599:     if (op_reply == NULL) {",
      "",
      "[Added Lines]",
      "584:     if (disconnected) {",
      "585:         crm_err(\"Disconnected while waiting for reply.\");",
      "586:         return -ENOTCONN;",
      "587:     } else if (op_reply == NULL) {",
      "",
      "---------------"
    ],
    "lib/common/mainloop.c||lib/common/mainloop.c": [
      "File: lib/common/mainloop.c -> lib/common/mainloop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     source->trigger = FALSE;",
      "179:     if (source->id > 0) {",
      "180:         g_source_remove(source->id);",
      "181:     }",
      "182:     return TRUE;",
      "183: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         source->id = 0;",
      "",
      "---------------"
    ],
    "lib/common/remote.c||lib/common/remote.c": [
      "File: lib/common/remote.c -> lib/common/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <sys/stat.h>",
      "26: #include <unistd.h>",
      "27: #include <sys/socket.h>",
      "29: #include <netinet/ip.h>",
      "31: #include <stdlib.h>",
      "32: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <arpa/inet.h>",
      "30: #include <netdb.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: #endif",
      "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "46:     GNUTLS_KX_ANON_DH,",
      "47:     GNUTLS_KX_DHE_RSA,",
      "48:     GNUTLS_KX_DHE_DSS,",
      "",
      "[Removed Lines]",
      "45: const int tls_kx_order[] = {",
      "",
      "[Added Lines]",
      "47: const int anon_tls_kx_order[] = {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     0",
      "51: };",
      "67: {",
      "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
      "71:     gnutls_init(session, type);",
      "",
      "[Removed Lines]",
      "53: gnutls_anon_client_credentials anon_cred_c;",
      "54: gnutls_anon_server_credentials anon_cred_s;",
      "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
      "56: static char *cib_recv_tls(gnutls_session * session);",
      "57: #endif",
      "59: char *cib_recv_plaintext(int sock);",
      "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
      "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "63: gnutls_session *create_tls_session(int csock, int type);",
      "65: gnutls_session *",
      "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
      "68:     int rc = 0;",
      "",
      "[Added Lines]",
      "55: int",
      "56: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
      "57: {",
      "58:     int rc = 0;",
      "59:     int pollrc = 0;",
      "60:     time_t start = time(NULL);",
      "61:     gnutls_session *session = session_data;",
      "63:     do {",
      "64:         rc = gnutls_handshake(*session);",
      "65:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "66:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
      "67:             if (pollrc < 0) {",
      "69:                 rc = -1;",
      "70:             }",
      "71:         }",
      "72:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
      "73:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
      "75:     return rc;",
      "76: }",
      "78: void *",
      "79: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: #  else",
      "77:     gnutls_set_default_priority(*session);",
      "79: #  endif",
      "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
      "81:     switch (type) {",
      "88:     }",
      "100:     return session;",
      "101: }",
      "105: {",
      "113:     }",
      "142:         }",
      "144:     }",
      "148: }",
      "150: static char *",
      "152: {",
      "153:     char *buf = NULL;",
      "155:     int rc = 0;",
      "159:     if (session == NULL) {",
      "161:     }",
      "165:     while (TRUE) {",
      "182:             len += rc;",
      "198:         }",
      "199:     }",
      "204: }",
      "205: #endif",
      "209: {",
      "236:             goto retry;",
      "240:         }",
      "241:     }",
      "245: }",
      "249: {",
      "250:     char *buf = NULL;",
      "252:     ssize_t rc = 0;",
      "253:     ssize_t len = 0;",
      "280:             CRM_ASSERT(buf != NULL);",
      "285:             len += rc;",
      "291:         }",
      "292:     }",
      "297: }",
      "301: {",
      "302:     if (encrypted) {",
      "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "305: #else",
      "306:         CRM_ASSERT(encrypted == FALSE);",
      "307: #endif",
      "308:     } else {",
      "310:     }",
      "311: }",
      "313: xmlNode *",
      "315: {",
      "317:     xmlNode *xml = NULL;",
      "319:     if (encrypted) {",
      "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "322: #else",
      "323:         CRM_ASSERT(encrypted == FALSE);",
      "324: #endif",
      "325:     } else {",
      "327:     }",
      "328:     if (reply == NULL || strlen(reply) == 0) {",
      "329:         crm_trace(\"Empty reply\");",
      "335:         }",
      "336:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
      "82:         case GNUTLS_SERVER:",
      "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
      "84:             break;",
      "85:         case GNUTLS_CLIENT:",
      "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
      "87:             break;",
      "90:     do {",
      "91:         rc = gnutls_handshake(*session);",
      "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
      "94:     if (rc < 0) {",
      "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
      "96:         gnutls_deinit(*session);",
      "97:         gnutls_free(session);",
      "98:         return NULL;",
      "99:     }",
      "103: static char *",
      "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
      "106:     char *xml_text = NULL;",
      "108: #  if 0",
      "109:     const char *name = crm_element_name(msg);",
      "111:     if (safe_str_neq(name, \"cib_command\")) {",
      "112:         xmlNodeSetName(msg, \"cib_result\");",
      "114: #  endif",
      "115:     xml_text = dump_xml_unformatted(msg);",
      "116:     if (xml_text != NULL) {",
      "117:         char *unsent = xml_text;",
      "118:         int len = strlen(xml_text);",
      "119:         int rc = 0;",
      "122:         crm_trace(\"Message size: %d\", len);",
      "124:         while (TRUE) {",
      "125:             rc = gnutls_record_send(*session, unsent, len);",
      "126:             crm_debug(\"Sent %d bytes\", rc);",
      "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "129:                 crm_debug(\"Retry\");",
      "131:             } else if (rc < 0) {",
      "132:                 crm_debug(\"Connection terminated\");",
      "133:                 break;",
      "135:             } else if (rc < len) {",
      "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "137:                 len -= rc;",
      "138:                 unsent += rc;",
      "139:             } else {",
      "140:                 break;",
      "141:             }",
      "145:     free(xml_text);",
      "146:     return NULL;",
      "151: cib_recv_tls(gnutls_session * session)",
      "156:     int len = 0;",
      "157:     int chunk_size = 1024;",
      "160:         return NULL;",
      "163:     buf = calloc(1, chunk_size);",
      "166:         errno = 0;",
      "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
      "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
      "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "171:             crm_trace(\"Retry\");",
      "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
      "174:             crm_trace(\"Session disconnected\");",
      "175:             goto bail;",
      "177:         } else if (rc < 0) {",
      "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "179:             goto bail;",
      "181:         } else if (rc == chunk_size) {",
      "183:             chunk_size *= 2;",
      "184:             buf = realloc(buf, len + chunk_size);",
      "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "186:             CRM_ASSERT(buf != NULL);",
      "188:         } else if (buf[len + rc - 1] != 0) {",
      "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "191:             len += rc;",
      "192:             buf = realloc(buf, len + chunk_size);",
      "193:             CRM_ASSERT(buf != NULL);",
      "195:         } else {",
      "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
      "197:             return buf;",
      "200:   bail:",
      "201:     free(buf);",
      "202:     return NULL;",
      "207: char *",
      "208: cib_send_plaintext(int sock, xmlNode * msg)",
      "210:     char *xml_text = dump_xml_unformatted(msg);",
      "212:     if (xml_text != NULL) {",
      "213:         int rc = 0;",
      "214:         char *unsent = xml_text;",
      "215:         int len = strlen(xml_text);",
      "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "219:   retry:",
      "220:         rc = write(sock, unsent, len);",
      "221:         if (rc < 0) {",
      "222:             switch (errno) {",
      "223:                 case EINTR:",
      "224:                 case EAGAIN:",
      "225:                     crm_trace(\"Retry\");",
      "226:                     goto retry;",
      "227:                 default:",
      "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
      "229:                     break;",
      "230:             }",
      "232:         } else if (rc < len) {",
      "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "234:             len -= rc;",
      "235:             unsent += rc;",
      "238:         } else {",
      "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
      "242:     free(xml_text);",
      "243:     return NULL;",
      "247: char *",
      "248: cib_recv_plaintext(int sock)",
      "254:     ssize_t chunk_size = 512;",
      "256:     buf = calloc(1, chunk_size);",
      "258:     while (1) {",
      "259:         errno = 0;",
      "260:         rc = read(sock, buf + len, chunk_size);",
      "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "263:         if (errno == EINTR || errno == EAGAIN) {",
      "264:             crm_trace(\"Retry: %d\", (int)rc);",
      "265:             if (rc > 0) {",
      "266:                 len += rc;",
      "267:                 buf = realloc(buf, len + chunk_size);",
      "268:                 CRM_ASSERT(buf != NULL);",
      "269:             }",
      "271:         } else if (rc < 0) {",
      "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
      "273:             goto bail;",
      "275:         } else if (rc == chunk_size) {",
      "276:             len += rc;",
      "277:             chunk_size *= 2;",
      "278:             buf = realloc(buf, len + chunk_size);",
      "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "282:         } else if (buf[len + rc - 1] != 0) {",
      "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "286:             buf = realloc(buf, len + chunk_size);",
      "287:             CRM_ASSERT(buf != NULL);",
      "289:         } else {",
      "290:             return buf;",
      "293:   bail:",
      "294:     free(buf);",
      "295:     return NULL;",
      "299: void",
      "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "304:         cib_send_tls(session, msg);",
      "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
      "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
      "316:     char *reply = NULL;",
      "321:         reply = cib_recv_tls(session);",
      "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
      "331:     } else {",
      "332:         xml = string2xml(reply);",
      "333:         if (xml == NULL) {",
      "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
      "338:     free(reply);",
      "339:     return xml;",
      "",
      "[Added Lines]",
      "90:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
      "94:     case GNUTLS_SERVER:",
      "95:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
      "96:         break;",
      "97:     case GNUTLS_CLIENT:",
      "98:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
      "99:         break;",
      "105: static int",
      "106: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
      "108:     const char *unsent = buf;",
      "109:     int rc = 0;",
      "110:     int total_send;",
      "112:     if (buf == NULL) {",
      "113:         return -1;",
      "116:     total_send = len;",
      "117:     crm_trace(\"Message size: %d\", len);",
      "119:     while (TRUE) {",
      "120:         rc = gnutls_record_send(*session, unsent, len);",
      "122:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "123:             crm_debug(\"Retry\");",
      "125:         } else if (rc < 0) {",
      "126:             crm_err(\"Connection terminated rc = %d\", rc);",
      "127:             break;",
      "129:         } else if (rc < len) {",
      "130:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "131:             len -= rc;",
      "132:             unsent += rc;",
      "133:         } else {",
      "134:             crm_debug(\"Sent %d bytes\", rc);",
      "135:             break;",
      "139:     return rc < 0 ? rc : total_send;",
      "157: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
      "161:     size_t len = 0;",
      "162:     size_t chunk_size = max_size ? max_size : 1024;",
      "163:     size_t buf_size = 0;",
      "164:     size_t read_size = 0;",
      "167:         if (disconnected) {",
      "169:         }",
      "170:         goto done;",
      "173:     buf = calloc(1, chunk_size + 1);",
      "174:     buf_size = chunk_size;",
      "177:         read_size = buf_size - len;",
      "180:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "181:             buf_size += chunk_size;",
      "182:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "183:             buf = realloc(buf, buf_size + 1);",
      "184:             CRM_ASSERT(buf != NULL);",
      "186:             read_size = buf_size - len;",
      "187:         }",
      "189:         rc = gnutls_record_recv(*session, buf + len, read_size);",
      "191:         if (rc > 0) {",
      "192:             crm_trace(\"Got %d more bytes.\", rc);",
      "195:             buf[len] = '\\0';",
      "196:         }",
      "197:         if (max_size && (max_size == read_size)) {",
      "198:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "199:             goto done;",
      "200:         }",
      "203:         if (rc == GNUTLS_E_INTERRUPTED) {",
      "204:             crm_trace(\"EINTR encoutered, retry tls read\");",
      "205:         } else if (rc == GNUTLS_E_AGAIN) {",
      "206:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "207:             goto done;",
      "208:         } else if (rc <= 0) {",
      "209:             if (rc == 0) {",
      "210:                 crm_debug(\"EOF encoutered during TLS read\");",
      "211:             } else {",
      "212:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "213:             }",
      "214:             if (disconnected) {",
      "216:             }",
      "217:             goto done;",
      "221: done:",
      "222:     if (recv_len) {",
      "224:     }",
      "225:     if (!len) {",
      "226:         free(buf);",
      "227:         buf = NULL;",
      "228:     }",
      "229:     return buf;",
      "234: static int",
      "235: crm_send_plaintext(int sock, const char *buf, size_t len)",
      "238:     int rc = 0;",
      "239:     const char *unsent = buf;",
      "240:     int total_send;",
      "242:     if (buf == NULL) {",
      "243:         return -1;",
      "244:     }",
      "245:     total_send = len;",
      "247:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "248:   retry:",
      "249:     rc = write(sock, unsent, len);",
      "250:     if (rc < 0) {",
      "251:         switch (errno) {",
      "252:         case EINTR:",
      "253:         case EAGAIN:",
      "254:             crm_trace(\"Retry\");",
      "256:         default:",
      "257:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
      "258:             break;",
      "261:     } else if (rc < len) {",
      "262:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "263:         len -= rc;",
      "264:         unsent += rc;",
      "265:         goto retry;",
      "267:      } else {",
      "268:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
      "271:     return rc < 0 ? rc : total_send;",
      "288: static char *",
      "289: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
      "294:     ssize_t chunk_size = max_size ? max_size : 1024;",
      "295:     size_t buf_size = 0;",
      "296:     size_t read_size = 0;",
      "298:     if (sock <= 0) {",
      "299:         if (disconnected) {",
      "301:         }",
      "302:         goto done;",
      "303:     }",
      "305:     buf = calloc(1, chunk_size + 1);",
      "306:     buf_size = chunk_size;",
      "308:     while (TRUE) {",
      "309:         errno = 0;",
      "310:         read_size = buf_size - len;",
      "313:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "314:             buf_size += chunk_size;",
      "315:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "316:             buf = realloc(buf, buf_size + 1);",
      "319:             read_size = buf_size - len;",
      "320:         }",
      "322:         rc = read(sock, buf + len, chunk_size);",
      "324:         if (rc > 0) {",
      "325:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "328:             buf[len] = '\\0';",
      "329:         }",
      "330:         if (max_size && (max_size == read_size)) {",
      "331:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "332:             goto done;",
      "333:         }",
      "335:         if (rc > 0) {",
      "336:             continue;",
      "337:         } else if (rc == 0) {",
      "338:             if (disconnected) {",
      "340:             }",
      "341:             crm_trace(\"EOF encoutered during read\");",
      "342:             goto done;",
      "343:         }",
      "346:         if (errno == EINTR) {",
      "347:             crm_trace(\"EINTER encoutered, retry socket read.\");",
      "348:         } else if (errno == EAGAIN) {",
      "349:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "350:             goto done;",
      "351:         } else if (errno <= 0) {",
      "352:             if (disconnected) {",
      "354:             }",
      "355:             crm_debug(\"Error receiving message: %d\", (int)rc);",
      "356:             goto done;",
      "360: done:",
      "361:     if (recv_len) {",
      "363:     }",
      "364:     if (!len) {",
      "365:         free(buf);",
      "366:         buf = NULL;",
      "367:     }",
      "368:     return buf;",
      "371: static int",
      "372: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
      "374:     int rc = -1;",
      "377:         rc = crm_send_tls(session, buf, len);",
      "382:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
      "384:     return rc;",
      "387: int",
      "388: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "389: {",
      "390:     int rc = -1;",
      "391:     char *xml_text = NULL;",
      "392:     int len = 0;",
      "394:     xml_text = dump_xml_unformatted(msg);",
      "395:     if (xml_text) {",
      "396:         len = strlen(xml_text);",
      "397:     } else {",
      "398:         crm_err(\"Invalid XML, can not send msg\");",
      "399:         return -1;",
      "400:     }",
      "402:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
      "403:     if (rc < 0) {",
      "404:         goto done;",
      "405:     }",
      "406:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
      "408: done:",
      "409:     if (rc < 0) {",
      "410:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
      "411:     }",
      "413:     free(xml_text);",
      "414:     return rc;",
      "415: }",
      "423: crm_parse_remote_buffer(char **msg_buf)",
      "425:     char *buf = NULL;",
      "426:     char *start = NULL;",
      "427:     char *end = NULL;",
      "430:     if (*msg_buf == NULL) {",
      "431:         return NULL;",
      "432:     }",
      "435:     buf = *msg_buf;",
      "439:     start = buf;",
      "440:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "442:     while (!xml && end) {",
      "445:         end[0] = '\\0';",
      "446:         end += strlen(REMOTE_MSG_TERMINATOR);",
      "448:         xml = string2xml(start);",
      "449:         if (xml == NULL) {",
      "450:             crm_err(\"Couldn't parse: '%.120s'\", start);",
      "451:         }",
      "452:         start = end;",
      "453:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "454:     }",
      "456:     if (xml && start) {",
      "459:         free(buf);",
      "460:     } else if (!xml) {",
      "463:     }",
      "465:     return xml;",
      "466: }",
      "476: int",
      "477: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
      "478: {",
      "479:     struct pollfd fds = { 0, };",
      "480:     int sock = 0;",
      "481:     void *sock_ptr = NULL;",
      "482:     int rc = 0;",
      "483:     time_t start;",
      "485:     if (encrypted) {",
      "486: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "487:         gnutls_session *tls_session = session;",
      "488:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
      "489: #else",
      "490:         CRM_ASSERT(encrypted == FALSE);",
      "491: #endif",
      "492:     } else {",
      "493:         sock_ptr = session;",
      "494:     }",
      "496:     sock = GPOINTER_TO_INT(sock_ptr);",
      "497:     if (sock <= 0) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "501:     start = time(NULL);",
      "502:     errno = 0;",
      "503:     do {",
      "504:         fds.fd = sock;",
      "505:         fds.events = POLLIN;",
      "510:         if (errno == EINTR && (timeout > 0)) {",
      "511:             timeout = timeout - ((time(NULL) - start) * 1000);",
      "512:             if (timeout < 1000) {",
      "513:                 timeout = 1000;",
      "514:             }",
      "515:         }",
      "517:         rc = poll(&fds, 1, timeout);",
      "518:     } while (rc < 0 && errno == EINTR);",
      "520:     return rc;",
      "521: }",
      "523: char *",
      "524: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
      "525: {",
      "526:     char *reply = NULL;",
      "527:     if (recv_len) {",
      "529:     }",
      "531:     if (disconnected) {",
      "533:     }",
      "537:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
      "542:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
      "546:     }",
      "548:     return reply;",
      "549: }",
      "558: gboolean",
      "559: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
      "560: {",
      "561:     int ret;",
      "562:     size_t request_len = 0;",
      "563:     time_t start = time(NULL);",
      "564:     char *raw_request = NULL;",
      "565:     int remaining_timeout = 0;",
      "567:     if (total_timeout == 0) {",
      "568:         total_timeout = 10000;",
      "569:     } else if (total_timeout < 0) {",
      "570:         total_timeout = 60000;",
      "571:     }",
      "574:     remaining_timeout = total_timeout;",
      "575:     while ((remaining_timeout > 0) && !(*disconnected)) {",
      "578:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
      "579:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
      "580:         raw_request = NULL;",
      "582:         if (ret == 0) {",
      "583:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
      "584:             return FALSE;",
      "586:         } else if (ret < 0) {",
      "587:             if (errno != EINTR) {",
      "588:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
      "590:                 return FALSE;",
      "591:             }",
      "592:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
      "593:         } else {",
      "594:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
      "595:         }",
      "597:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
      "599:         if (!raw_request) {",
      "600:             crm_debug(\"Empty msg received after poll\");",
      "601:             continue;",
      "602:         }",
      "604:         if (*recv_buf) {",
      "605:             int old_len = strlen(*recv_buf);",
      "607:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
      "610:             memcpy(*recv_buf + old_len, raw_request, request_len);",
      "612:             free(raw_request);",
      "613:         } else {",
      "615:         }",
      "617:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
      "618:             return TRUE;",
      "622:     return FALSE;",
      "631: int",
      "632: crm_remote_tcp_connect(const char *host, int port)",
      "633: {",
      "634:     struct addrinfo *res;",
      "635:     struct addrinfo *rp;",
      "636:     struct addrinfo hints;",
      "637:     const char *server = host;",
      "638:     int ret_ga;",
      "639:     int sock;",
      "642:     memset(&hints, 0, sizeof(struct addrinfo));",
      "644:     hints.ai_socktype = SOCK_STREAM;",
      "645:     hints.ai_flags = AI_CANONNAME;",
      "647:     crm_debug(\"Looking up %s\", server);",
      "648:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "649:     if (ret_ga) {",
      "650:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "651:         return -1;",
      "652:     }",
      "654:     if (!res || !res->ai_addr) {",
      "655:         crm_err(\"getaddrinfo failed\");",
      "656:         return -1;",
      "657:     }",
      "659:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
      "660:         struct sockaddr *addr = rp->ai_addr;",
      "661:         int flag = 0;",
      "662:         if (!addr) {",
      "663:             continue;",
      "664:         }",
      "666:         if (rp->ai_canonname) {",
      "667:             server = res->ai_canonname;",
      "668:         }",
      "669:         crm_debug(\"Got address %s for %s\", server, host);",
      "672:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
      "673:         if (sock == -1) {",
      "674:             crm_err(\"Socket creation failed for remote client connection.\");",
      "675:             continue;",
      "676:         }",
      "677:         if (addr->sa_family == AF_INET6) {",
      "678:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
      "679:             addr_in->sin6_port = htons(port);",
      "680:         } else {",
      "681:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
      "682:             addr_in->sin_port = htons(port);",
      "683:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
      "684:         }",
      "686:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
      "687:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
      "688:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "689:                     crm_err( \"fcntl() write failed\");",
      "690:                     close(sock);",
      "691:                     sock = -1;",
      "692:                     continue;",
      "693:                 }",
      "694:             }",
      "696:         }",
      "698:         close(sock);",
      "699:         sock = -1;",
      "700:     }",
      "701:     freeaddrinfo(res);",
      "703:     return sock;",
      "704: }",
      "",
      "---------------"
    ],
    "tools/crm_mon.c||tools/crm_mon.c": [
      "File: tools/crm_mon.c -> tools/crm_mon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:             if (rc == pcmk_ok) {",
      "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
      "277:                 if (rc == -EPROTONOSUPPORT) {",
      "279:                     if (as_console) {",
      "280:                         sleep(2);",
      "281:                     }",
      "",
      "[Removed Lines]",
      "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
      "",
      "[Added Lines]",
      "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aee006c39ea2928a87a1c84303c32a3f00ca305a",
      "candidate_info": {
        "commit_hash": "aee006c39ea2928a87a1c84303c32a3f00ca305a",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/aee006c39ea2928a87a1c84303c32a3f00ca305a",
        "files": [
          "cib/callbacks.c",
          "cib/callbacks.h",
          "cib/main.c",
          "cib/remote.c",
          "crmd/crmd_callbacks.h",
          "crmd/heartbeat.c",
          "include/crm/common/cluster.h",
          "lib/cib/cib_remote.c",
          "lib/cluster/corosync.c",
          "lib/cluster/legacy.c",
          "mcp/corosync.c"
        ],
        "message": "Medium: Add file desciptor based connections to mainloop using IO Channels",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/callbacks.h||cib/callbacks.h",
          "cib/main.c||cib/main.c",
          "cib/remote.c||cib/remote.c",
          "crmd/crmd_callbacks.h||crmd/crmd_callbacks.h",
          "crmd/heartbeat.c||crmd/heartbeat.c",
          "include/crm/common/cluster.h||include/crm/common/cluster.h",
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
          "lib/cluster/corosync.c||lib/cluster/corosync.c",
          "lib/cluster/legacy.c||lib/cluster/legacy.c",
          "mcp/corosync.c||mcp/corosync.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/remote.c||cib/remote.c",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/remote.c||cib/remote.c",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121: int (*ccm_api_callback_done) (void *cookie) = NULL;",
          "1122: int (*ccm_api_handle_event) (const oc_ev_t * token) = NULL;",
          "1126: {",
          "1127:     int rc = 0;",
          "1128:     oc_ev_t *ccm_token = (oc_ev_t *) user_data;",
          "",
          "[Removed Lines]",
          "1124: gboolean",
          "1125: cib_ccm_dispatch(int fd, gpointer user_data)",
          "",
          "[Added Lines]",
          "1124: int",
          "1125: cib_ccm_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:     rc = (*ccm_api_handle_event) (ccm_token);",
          "1138:     if (0 == rc) {",
          "1140:     }",
          "1142:     crm_err(\"CCM connection appears to have failed: rc=%d.\", rc);",
          "",
          "[Removed Lines]",
          "1139:         return TRUE;",
          "",
          "[Added Lines]",
          "1139:         return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1145:     crm_err(\"Exiting to recover from CCM connection failure\");",
          "1146:     exit(2);",
          "1149: }",
          "1151: int current_instance = 0;",
          "",
          "[Removed Lines]",
          "1148:     return FALSE;",
          "",
          "[Added Lines]",
          "1148:     return -1;",
          "",
          "---------------"
        ],
        "cib/callbacks.h||cib/callbacks.h": [
          "File: cib/callbacks.h -> cib/callbacks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <crm/cib.h>",
          "25: #include <crm/common/xml.h>",
          "26: #include <crm/common/cluster.h>",
          "28: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "29: #  undef KEYFILE",
          "30: #  include <gnutls/gnutls.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <crm/common/mainloop.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     void *session;",
          "51: #endif",
          "52:     gboolean encrypted;",
          "55:     unsigned long num_calls;",
          "",
          "[Removed Lines]",
          "53:     GFDSource *remote;",
          "",
          "[Added Lines]",
          "53:     mainloop_io_t *remote;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89: void initiate_exit(void);",
          "91: #if SUPPORT_HEARTBEAT",
          "94: extern void cib_ccm_msg_callback(oc_ed_t event, void *cookie, size_t size, const void *data);",
          "95: #endif",
          "",
          "[Removed Lines]",
          "92: extern gboolean cib_ccm_dispatch(int fd, gpointer user_data);",
          "",
          "[Added Lines]",
          "92: extern int cib_ccm_dispatch(gpointer user_data);",
          "",
          "---------------"
        ],
        "cib/main.c||cib/main.c": [
          "File: cib/main.c -> cib/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:     int (*ccm_api_unregister) (oc_ev_t * token) =",
          "361:         find_library_function(&ccm_library, CCM_LIBRARY, \"oc_ev_unregister\");",
          "363:     while (did_fail) {",
          "364:         did_fail = FALSE;",
          "365:         crm_info(\"Registering with CCM...\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:     static struct mainloop_fd_callbacks ccm_fd_callbacks =",
          "364:         {",
          "365:             .dispatch = cib_ccm_dispatch,",
          "366:             .destroy = ccm_connection_destroy,",
          "367:         };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:     }",
          "406:     crm_debug(\"CCM Activation passed... all set to go!\");",
          "410:     return TRUE;",
          "411: }",
          "",
          "[Removed Lines]",
          "407:     G_main_add_fd(G_PRIORITY_HIGH, cib_ev_fd, FALSE,",
          "408:                   cib_ccm_dispatch, cib_ev_token, ccm_connection_destroy);",
          "",
          "[Added Lines]",
          "413:     mainloop_add_fd(\"heartbeat-ccm\", cib_ev_fd, cib_ev_token, &ccm_fd_callbacks);",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: int num_clients;",
          "85: int authenticate_user(const char *user, const char *passwd);",
          "89: static void",
          "90: remote_connection_destroy(gpointer user_data)",
          "",
          "[Removed Lines]",
          "86: gboolean cib_remote_listen(int ssock, gpointer data);",
          "87: gboolean cib_remote_msg(int csock, gpointer data);",
          "",
          "[Added Lines]",
          "87: int cib_remote_listen(gpointer data);",
          "88: int cib_remote_msg(gpointer data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     int ssock;",
          "100:     struct sockaddr_in saddr;",
          "101:     int optval;",
          "103:     if (port <= 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     static struct mainloop_fd_callbacks remote_listen_fd_callbacks =",
          "104:         {",
          "105:             .dispatch = cib_remote_listen,",
          "106:             .destroy = remote_connection_destroy,",
          "107:         };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:         return -3;",
          "154:     }",
          "159:     return ssock;",
          "160: }",
          "",
          "[Removed Lines]",
          "156:     G_main_add_fd(G_PRIORITY_HIGH, ssock, FALSE,",
          "157:                   cib_remote_listen, NULL, remote_connection_destroy);",
          "",
          "[Added Lines]",
          "162:     mainloop_add_fd(\"cib-remote\", ssock, &ssock, &remote_listen_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:     return FALSE;",
          "201: }",
          "205: {",
          "206:     int lpc = 0;",
          "207:     int csock = 0;",
          "",
          "[Removed Lines]",
          "203: gboolean",
          "204: cib_remote_listen(int ssock, gpointer data)",
          "",
          "[Added Lines]",
          "208: int",
          "209: cib_remote_listen(gpointer data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:     time_t now = 0;",
          "210:     time_t start = time(NULL);",
          "211:     struct sockaddr_in addr;",
          "213: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "214:     gnutls_session *session = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     int ssock = *(int *)data;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228: #endif",
          "231:     laddr = sizeof(addr);",
          "232:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
          "237:         {",
          "238:             .dispatch = cib_remote_msg,",
          "239:             .destroy = cib_remote_connection_destroy,",
          "240:         };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336:     cib_send_remote_msg(new_client->session, login, new_client->encrypted);",
          "337:     free_xml(login);",
          "343:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "",
          "[Removed Lines]",
          "339:     new_client->remote =",
          "340:         G_main_add_fd(G_PRIORITY_DEFAULT, csock, FALSE, cib_remote_msg, new_client,",
          "341:                       cib_remote_connection_destroy);",
          "",
          "[Added Lines]",
          "351:     new_client->remote = mainloop_add_fd(",
          "352:         \"cib-remote-client\", csock, new_client, &remote_client_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "375:         }",
          "376:     }",
          "385:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
          "386:     num_clients--;",
          "387:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "",
          "[Removed Lines]",
          "378:     if (client->remote != NULL) {",
          "380:         crm_trace(\"Deleting %s (%p) from mainloop\", client->name, client->remote);",
          "381:         G_main_del_fd(client->remote);",
          "382:         client->remote = NULL;",
          "383:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:     return;",
          "399: }",
          "403: {",
          "404:     const char *value = NULL;",
          "405:     xmlNode *command = NULL;",
          "",
          "[Removed Lines]",
          "401: gboolean",
          "402: cib_remote_msg(int csock, gpointer data)",
          "",
          "[Added Lines]",
          "405: int",
          "406: cib_remote_msg(gpointer data)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "410:     command = cib_recv_remote_msg(client->session, client->encrypted);",
          "411:     if (command == NULL) {",
          "413:     }",
          "415:     value = crm_element_name(command);",
          "",
          "[Removed Lines]",
          "412:         return FALSE;",
          "",
          "[Added Lines]",
          "416:         return -1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "469:   bail:",
          "470:     free_xml(command);",
          "471:     command = NULL;",
          "473: }",
          "475: #ifdef HAVE_PAM",
          "",
          "[Removed Lines]",
          "472:     return TRUE;",
          "",
          "[Added Lines]",
          "476:     return 0;",
          "",
          "---------------"
        ],
        "crmd/crmd_callbacks.h||crmd/crmd_callbacks.h": [
          "File: crmd/crmd_callbacks.h -> crmd/crmd_callbacks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: extern void crmd_ha_msg_filter(xmlNode * msg);",
          "",
          "[Removed Lines]",
          "23: #if SUPPORT_HEARTBEAT",
          "24: extern void ccm_event_detail(const oc_ev_membership_t * oc, oc_ed_t event);",
          "25: extern gboolean ccm_dispatch(int fd, gpointer user_data);",
          "26: extern void crmd_ccm_msg_callback(oc_ed_t event, void *cookie, size_t size, const void *data);",
          "27: extern gboolean crmd_ha_msg_dispatch(ll_cluster_t * cluster_conn, gpointer user_data);",
          "28: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crmd/heartbeat.c||crmd/heartbeat.c": [
          "File: crmd/heartbeat.c -> crmd/heartbeat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <ocf/oc_membership.h>",
          "39: void oc_ev_special(const oc_ev_t *, oc_ev_class_t, int);",
          "40: void crmd_ccm_msg_callback(oc_ed_t event, void *cookie, size_t size, const void *data);",
          "42: #define CCM_EVENT_DETAIL 0",
          "43: #define CCM_EVENT_DETAIL_PARTIAL 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: void ccm_event_detail(const oc_ev_membership_t * oc, oc_ed_t event);",
          "41: gboolean crmd_ha_msg_dispatch(ll_cluster_t * cluster_conn, gpointer user_data);",
          "43: int ccm_dispatch(gpointer user_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:                enum crmd_fsa_state cur_state,",
          "64:                enum crmd_fsa_input current_input, fsa_data_t * msg_data)",
          "65: {",
          "66:     if (is_heartbeat_cluster()) {",
          "67:         int (*ccm_api_register) (oc_ev_t ** token) =",
          "68:             find_library_function(&ccm_library, CCM_LIBRARY, \"oc_ev_register\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     static struct mainloop_fd_callbacks ccm_fd_callbacks =",
          "70:         {",
          "71:             .dispatch = ccm_dispatch,",
          "72:             .destroy = ccm_connection_destroy,",
          "73:         };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:                 }",
          "138:             }",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "140:             crm_info(\"CCM connection established...\" \" waiting for first callback\");",
          "142:             G_main_add_fd(G_PRIORITY_HIGH, fsa_ev_fd, FALSE, ccm_dispatch,",
          "143:                           fsa_ev_token, ccm_connection_destroy);",
          "",
          "[Added Lines]",
          "149:             crm_info(\"CCM connection established... waiting for first callback\");",
          "150:             mainloop_add_fd(\"heartbeat-ccm\", fsa_ev_fd, fsa_ev_token, &ccm_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:     return;",
          "262: }",
          "266: {",
          "267:     int rc = 0;",
          "268:     oc_ev_t *ccm_token = (oc_ev_t *) user_data;",
          "",
          "[Removed Lines]",
          "264: gboolean",
          "265: ccm_dispatch(int fd, gpointer user_data)",
          "",
          "[Added Lines]",
          "271: int",
          "272: ccm_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:     }",
          "287:     trigger_fsa(fsa_source);",
          "289: }",
          "291: void",
          "",
          "[Removed Lines]",
          "288:     return !was_error;",
          "",
          "[Added Lines]",
          "295:     if(was_error) {",
          "296:         return -1;",
          "297:     }",
          "299:     return 0;",
          "",
          "---------------"
        ],
        "include/crm/common/cluster.h||include/crm/common/cluster.h": [
          "File: include/crm/common/cluster.h -> include/crm/common/cluster.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: extern gboolean send_ais_text(int class, const char *data, gboolean local,",
          "89:                               const char *node, enum crm_ais_msg_types dest);",
          "90: extern gboolean get_ais_nodeid(uint32_t * id, char **uname);",
          "92: #  endif",
          "94: extern void empty_uuid_cache(void);",
          "",
          "[Removed Lines]",
          "91: extern gboolean ais_dispatch(int sender, gpointer user_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <crm/cib.h>",
          "34: #include <crm/msg_xml.h>",
          "35: #include <crm/common/ipc.h>",
          "36: #include <cib_private.h>",
          "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <crm/common/mainloop.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:     int socket;",
          "60:     gboolean encrypted;",
          "61:     gnutls_session *session;",
          "63:     char *token;",
          "64: };",
          "",
          "[Removed Lines]",
          "62:     GFDSource *source;",
          "",
          "[Added Lines]",
          "63:     mainloop_io_t *source;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: } cib_remote_opaque_t;",
          "78: void cib_remote_connection_destroy(gpointer user_data);",
          "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
          "81: int cib_remote_signoff(cib_t * cib);",
          "82: int cib_remote_free(cib_t * cib);",
          "",
          "[Removed Lines]",
          "79: gboolean cib_remote_dispatch(int fd, gpointer user_data);",
          "",
          "[Added Lines]",
          "80: int cib_remote_dispatch(gpointer user_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:     xmlNode *answer = NULL;",
          "197:     xmlNode *login = NULL;",
          "199:     connection->socket = 0;",
          "200:     connection->session = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
          "201:         {",
          "202:             .dispatch = cib_remote_dispatch,",
          "203:             .destroy = cib_remote_connection_destroy,",
          "204:         };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:     }",
          "312:     connection->socket = sock;",
          "316:     return rc;",
          "317: }",
          "",
          "[Removed Lines]",
          "313:     connection->source = G_main_add_fd(G_PRIORITY_HIGH, connection->socket, FALSE,",
          "314:                                        cib_remote_dispatch, cib, cib_remote_connection_destroy);",
          "",
          "[Added Lines]",
          "320:     connection->source = mainloop_add_fd(\"cib-remote\", connection->socket, cib, &cib_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "326:     return;",
          "327: }",
          "331: {",
          "332:     cib_t *cib = user_data;",
          "333:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "363:     } else {",
          "365:     }",
          "368: }",
          "370: int",
          "",
          "[Removed Lines]",
          "329: gboolean",
          "330: cib_remote_dispatch(int fd, gpointer user_data)",
          "335:     if (fd == private->callback.socket) {",
          "336:         xmlNode *msg = NULL;",
          "337:         const char *type = NULL;",
          "339:         crm_info(\"Message on callback channel\");",
          "340:         msg = cib_recv_remote_msg(private->callback.session, private->callback.encrypted);",
          "342:         type = crm_element_value(msg, F_TYPE);",
          "343:         crm_trace(\"Activating %s callbacks...\", type);",
          "345:         if (safe_str_eq(type, T_CIB)) {",
          "346:             cib_native_callback(cib, msg, 0, 0);",
          "348:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "349:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "351:         } else {",
          "352:             crm_err(\"Unknown message type: %s\", type);",
          "353:         }",
          "355:         if (msg != NULL) {",
          "356:             free_xml(msg);",
          "357:             return TRUE;",
          "358:         }",
          "360:     } else if (fd == private->command.socket) {",
          "361:         crm_err(\"Message on command channel\");",
          "364:         crm_err(\"Unknown fd\");",
          "367:     return FALSE;",
          "",
          "[Added Lines]",
          "334: int",
          "335: cib_remote_dispatch(gpointer user_data)",
          "340:     xmlNode *msg = NULL;",
          "341:     const char *type = NULL;",
          "343:     crm_info(\"Message on callback channel\");",
          "344:     msg = cib_recv_remote_msg(private->callback.session, private->callback.encrypted);",
          "346:     type = crm_element_value(msg, F_TYPE);",
          "347:     crm_trace(\"Activating %s callbacks...\", type);",
          "349:     if (safe_str_eq(type, T_CIB)) {",
          "350:         cib_native_callback(cib, msg, 0, 0);",
          "352:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "353:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "356:         crm_err(\"Unknown message type: %s\", type);",
          "359:     if (msg != NULL) {",
          "360:         free_xml(msg);",
          "361:         return 0;",
          "362:     }",
          "363:     return -1;",
          "",
          "---------------"
        ],
        "lib/cluster/corosync.c||lib/cluster/corosync.c": [
          "File: lib/cluster/corosync.c -> lib/cluster/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <crm/ais.h>",
          "26: #include <crm/common/ipc.h>",
          "27: #include <crm/common/cluster.h>",
          "28: #include <sys/utsname.h>",
          "29: #include \"stack.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <crm/common/mainloop.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     return type;",
          "107: }",
          "111: static char *ais_cluster_name = NULL;",
          "113: gboolean",
          "",
          "[Removed Lines]",
          "109: GFDSource *cpg_source = NULL;",
          "110: GFDSource *quorumd_source = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394: gboolean(*pcmk_cpg_dispatch_fn) (AIS_Message *, char *, int) = NULL;",
          "398: {",
          "399:     int rc = 0;",
          "",
          "[Removed Lines]",
          "396: static gboolean",
          "397: pcmk_cpg_dispatch(int sender, gpointer user_data)",
          "",
          "[Added Lines]",
          "395: static int",
          "396: pcmk_cpg_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "402:     rc = cpg_dispatch(pcmk_cpg_handle, CS_DISPATCH_ALL);",
          "403:     if (rc != CS_OK) {",
          "404:         crm_err(\"Connection to the CPG API failed: %d\", rc);",
          "406:     }",
          "408: }",
          "410: static void",
          "",
          "[Removed Lines]",
          "405:         return FALSE;",
          "407:     return TRUE;",
          "",
          "[Added Lines]",
          "404:         return -1;",
          "406:     return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "479:     int fd = 0;",
          "480:     int retries = 0;",
          "481:     crm_node_t *peer = NULL;",
          "483:     strcpy(pcmk_cpg_group.value, crm_system_name);",
          "484:     pcmk_cpg_group.length = strlen(crm_system_name) + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     struct mainloop_fd_callbacks cpg_fd_callbacks = {",
          "482:         .dispatch = pcmk_cpg_dispatch,",
          "483:         .destroy = destroy,",
          "484:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "509:         goto bail;",
          "510:     }",
          "515:   bail:",
          "516:     if (rc != CS_OK) {",
          "",
          "[Removed Lines]",
          "512:     crm_debug(\"Adding fd=%d to mainloop\", fd);",
          "513:     cpg_source = G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_cpg_dispatch, dispatch, destroy);",
          "",
          "[Added Lines]",
          "515:     mainloop_add_fd(\"corosync-cpg\", fd, dispatch, &cpg_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "523:     return TRUE;",
          "524: }",
          "528: {",
          "529:     int rc = 0;",
          "531:     rc = quorum_dispatch(pcmk_quorum_handle, CS_DISPATCH_ALL);",
          "532:     if (rc < 0) {",
          "533:         crm_err(\"Connection to the Quorum API failed: %d\", rc);",
          "535:     }",
          "537: }",
          "539: static void",
          "",
          "[Removed Lines]",
          "526: static gboolean",
          "527: pcmk_quorum_dispatch(int sender, gpointer user_data)",
          "534:         return FALSE;",
          "536:     return TRUE;",
          "",
          "[Added Lines]",
          "528: static int",
          "529: pcmk_quorum_dispatch(gpointer user_data)",
          "536:         return -1;",
          "538:     return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "609:     int fd = 0;",
          "610:     int quorate = 0;",
          "611:     uint32_t quorum_type = 0;",
          "613:     crm_debug(\"Configuring Pacemaker to obtain quorum from Corosync\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     struct mainloop_fd_callbacks quorum_fd_callbacks;",
          "615:     quorum_fd_callbacks.dispatch = pcmk_quorum_dispatch;",
          "616:     quorum_fd_callbacks.destroy = destroy;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "644:         goto bail;",
          "645:     }",
          "650:   bail:",
          "651:     if (rc != CS_OK) {",
          "",
          "[Removed Lines]",
          "647:     quorumd_source =",
          "648:         G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_quorum_dispatch, dispatch, destroy);",
          "",
          "[Added Lines]",
          "652:     mainloop_add_fd(\"quorum\", fd, dispatch, &quorum_fd_callbacks);",
          "",
          "---------------"
        ],
        "lib/cluster/legacy.c||lib/cluster/legacy.c": [
          "File: lib/cluster/legacy.c -> lib/cluster/legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static uint32_t pcmk_nodeid = 0;",
          "50: int ais_membership_timer = 0;",
          "51: gboolean ais_membership_force = FALSE;",
          "53: #define cs_repeat(counter, max, code) do {  \\",
          "54:  code;      \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: int ais_dispatch(gpointer user_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: void *ais_ipc_ctx = NULL;",
          "137: hdb_handle_t ais_ipc_handle = 0;",
          "142: static char *ais_cluster_name = NULL;",
          "144: gboolean",
          "",
          "[Removed Lines]",
          "138: GFDSource *ais_source = NULL;",
          "139: GFDSource *ais_source_sync = NULL;",
          "140: GFDSource *cman_source = NULL;",
          "141: GFDSource *cpg_source = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:     char *data = NULL;",
          "398:     if (is_classic_ais_cluster()) {",
          "401:             return FALSE;",
          "402:         }",
          "403:     }",
          "",
          "[Removed Lines]",
          "399:         if (ais_fd_async < 0 || ais_source == NULL) {",
          "400:             crm_err(\"Not connected to AIS: %d %p\", ais_fd_async, ais_source);",
          "",
          "[Added Lines]",
          "396:         if (ais_fd_async < 0) {",
          "397:             crm_err(\"Not connected to AIS: %d\", ais_fd_async);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "594:     goto done;",
          "595: }",
          "599: {",
          "600:     int rc = CS_OK;",
          "601:     gboolean good = TRUE;",
          "",
          "[Removed Lines]",
          "597: gboolean",
          "598: ais_dispatch(int sender, gpointer user_data)",
          "",
          "[Added Lines]",
          "591: int",
          "592: ais_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "608:         rc = coroipcc_dispatch_get(ais_ipc_handle, (void **)&buffer, 0);",
          "609:         if (rc == CS_ERR_TRY_AGAIN || rc == CS_ERR_QUEUE_FULL) {",
          "611:         }",
          "612:         if (rc != CS_OK) {",
          "613:             crm_perror(LOG_ERR, \"Receiving message body failed: (%d) %s\", rc, ais_error2text(rc));",
          "615:         }",
          "616:         if (buffer == NULL) {",
          "619:         }",
          "620:         good = ais_dispatch_message((AIS_Message *) buffer, dispatch);",
          "621:         coroipcc_dispatch_put(ais_ipc_handle);",
          "623:     } while (good && ais_ipc_handle);",
          "629: }",
          "631: static void",
          "",
          "[Removed Lines]",
          "610:             return TRUE;",
          "614:             goto bail;",
          "618:             return TRUE;",
          "625:     return good;",
          "627:   bail:",
          "628:     return FALSE;",
          "",
          "[Added Lines]",
          "604:             return 0;",
          "608:             return -1;",
          "612:             return 0;",
          "619:     if(good) {",
          "620:         return 0;",
          "621:     }",
          "623:     return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "640: #  if SUPPORT_CMAN",
          "644: {",
          "645:     int rc = cman_dispatch(pcmk_cman_handle, CMAN_DISPATCH_ALL);",
          "",
          "[Removed Lines]",
          "642: static gboolean",
          "643: pcmk_cman_dispatch(int sender, gpointer user_data)",
          "",
          "[Added Lines]",
          "637: static int",
          "638: pcmk_cman_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "724: #  if SUPPORT_CMAN",
          "725:     int rc = -1, fd = -1;",
          "726:     cman_cluster_t cluster;",
          "728:     crm_info(\"Configuring Pacemaker to obtain quorum from cman\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722:     struct mainloop_fd_callbacks cman_fd_callbacks = {",
          "723:         .dispatch = pcmk_cman_dispatch,",
          "724:         .destroy = destroy,",
          "725:     };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "753:                         cman_is_quorate(pcmk_cman_handle));",
          "755:     fd = cman_get_fd(pcmk_cman_handle);",
          "759:   cman_bail:",
          "760:     if (rc < 0) {",
          "",
          "[Removed Lines]",
          "756:     crm_debug(\"Adding fd=%d to mainloop\", fd);",
          "757:     cman_source = G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_cman_dispatch, dispatch, destroy);",
          "",
          "[Added Lines]",
          "756:     mainloop_add_fd(\"cman\", fd, dispatch, &cman_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "771: #  ifdef SUPPORT_COROSYNC",
          "772: gboolean(*pcmk_cpg_dispatch_fn) (AIS_Message *, char *, int) = NULL;",
          "776: {",
          "777:     int rc = 0;",
          "",
          "[Removed Lines]",
          "774: static gboolean",
          "775: pcmk_cpg_dispatch(int sender, gpointer user_data)",
          "",
          "[Added Lines]",
          "773: static int",
          "774: pcmk_cpg_dispatch(gpointer user_data)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "780:     rc = cpg_dispatch(pcmk_cpg_handle, CS_DISPATCH_ALL);",
          "781:     if (rc != CS_OK) {",
          "782:         crm_err(\"Connection to the CPG API failed: %d\", rc);",
          "784:     }",
          "786: }",
          "788: static void",
          "",
          "[Removed Lines]",
          "783:         return FALSE;",
          "785:     return TRUE;",
          "",
          "[Added Lines]",
          "782:         return -1;",
          "784:     return 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "859:     int fd = 0;",
          "860:     int retries = 0;",
          "861:     crm_node_t *peer = NULL;",
          "863:     strcpy(pcmk_cpg_group.value, crm_system_name);",
          "864:     pcmk_cpg_group.length = strlen(crm_system_name) + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "861:     struct mainloop_fd_callbacks cpg_fd_callbacks = {",
          "862:         .dispatch = pcmk_cpg_dispatch,",
          "863:         .destroy = destroy,",
          "864:     };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "889:         goto bail;",
          "890:     }",
          "895:   bail:",
          "896:     if (rc != CS_OK) {",
          "",
          "[Removed Lines]",
          "892:     crm_debug(\"Adding fd=%d to mainloop\", fd);",
          "893:     cpg_source = G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_cpg_dispatch, dispatch, destroy);",
          "",
          "[Added Lines]",
          "895:     mainloop_add_fd(\"corosync-cpg\", fd, dispatch, &cpg_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "926:     int pid = 0;",
          "927:     char *pid_s = NULL;",
          "928:     struct utsname name;",
          "930:     crm_info(\"Creating connection to our Corosync plugin\");",
          "931:     rc = coroipcc_service_connect(COROSYNC_SOCKET_NAME, PCMK_SERVICE_ID,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     struct mainloop_fd_callbacks ais_fd_callbacks = {",
          "932:         .dispatch = ais_dispatch,",
          "933:         .destroy = destroy,",
          "934:     };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "955:         destroy = ais_destroy;",
          "956:     }",
          "964:     crm_info(\"AIS connection established\");",
          "966:     pid = getpid();",
          "",
          "[Removed Lines]",
          "958:     if (dispatch) {",
          "959:         crm_debug(\"Adding fd=%d to mainloop\", ais_fd_async);",
          "960:         ais_source =",
          "961:             G_main_add_fd(G_PRIORITY_HIGH, ais_fd_async, FALSE, ais_dispatch, dispatch, destroy);",
          "962:     }",
          "",
          "[Added Lines]",
          "964:     mainloop_add_fd(\"corosync-plugin\", ais_fd_async, dispatch, &ais_fd_callbacks);",
          "",
          "---------------"
        ],
        "mcp/corosync.c||mcp/corosync.c": [
          "File: mcp/corosync.c -> mcp/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #endif",
          "35: #include <crm/common/cluster.h>",
          "37: #if SUPPORT_CMAN",
          "38: #  include <libcman.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <crm/common/mainloop.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     .corosync_cfg_shutdown_callback = cfg_shutdown_callback,",
          "69: };",
          "73: {",
          "74:     corosync_cfg_handle_t *handle = (corosync_cfg_handle_t *) user_data;",
          "75:     cs_error_t rc = corosync_cfg_dispatch(*handle, CS_DISPATCH_ALL);",
          "77:     if (rc != CS_OK) {",
          "79:     }",
          "81: }",
          "83: static void",
          "",
          "[Removed Lines]",
          "71: static gboolean",
          "72: pcmk_cfg_dispatch(int sender, gpointer user_data)",
          "78:         return FALSE;",
          "80:     return TRUE;",
          "",
          "[Added Lines]",
          "72: static int",
          "73: pcmk_cfg_dispatch(gpointer user_data)",
          "79:         return -1;",
          "81:     return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:     cfg_handle = 0;",
          "89:     pcmk_shutdown(SIGTERM);",
          "91: }",
          "93: gboolean",
          "",
          "[Removed Lines]",
          "90:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118: {",
          "119:     cs_error_t rc;",
          "120:     int fd = 0, retries = 0;",
          "122:     cs_repeat(retries, 30, rc = corosync_cfg_initialize(&cfg_handle, &cfg_callbacks));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     static struct mainloop_fd_callbacks cfg_fd_callbacks =",
          "122:         {",
          "123:             .dispatch = pcmk_cfg_dispatch,",
          "124:             .destroy = cfg_connection_destroy,",
          "125:         };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:     }",
          "143:     crm_debug(\"Our nodeid: %d\", *nodeid);",
          "149:     return TRUE;",
          "",
          "[Removed Lines]",
          "145:     crm_debug(\"Adding fd=%d to mainloop\", fd);",
          "146:     G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_cfg_dispatch, &cfg_handle,",
          "147:                   cfg_connection_destroy);",
          "",
          "[Added Lines]",
          "149:     mainloop_add_fd(\"corosync-cfg\", fd, &cfg_handle, &cfg_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160: {",
          "161:     cpg_handle_t *handle = (cpg_handle_t *) user_data;",
          "162:     cs_error_t rc = cpg_dispatch(*handle, CS_DISPATCH_ALL);",
          "164:     if (rc != CS_OK) {",
          "166:     }",
          "168: }",
          "170: static void",
          "",
          "[Removed Lines]",
          "158: static gboolean",
          "159: pcmk_cpg_dispatch(int sender, gpointer user_data)",
          "165:         return FALSE;",
          "167:     return TRUE;",
          "",
          "[Added Lines]",
          "160: static int",
          "161: pcmk_cpg_dispatch(gpointer user_data)",
          "167:         return -1;",
          "169:     return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172: {",
          "173:     crm_err(\"Connection destroyed\");",
          "174:     cpg_handle = 0;",
          "176: }",
          "178: static void",
          "",
          "[Removed Lines]",
          "175:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "226:     unsigned int nodeid;",
          "227:     int fd;",
          "228:     int retries = 0;",
          "230:     strcpy(cpg_group.value, \"pcmk\");",
          "231:     cpg_group.length = strlen(cpg_group.value) + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:     static struct mainloop_fd_callbacks cpg_fd_callbacks =",
          "231:         {",
          "232:             .dispatch = pcmk_cpg_dispatch,",
          "233:             .destroy = cpg_connection_destroy,",
          "234:         };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "260:         goto bail;",
          "261:     }",
          "267:     return TRUE;",
          "269:   bail:",
          "",
          "[Removed Lines]",
          "263:     crm_debug(\"Adding fd=%d to mainloop\", fd);",
          "264:     G_main_add_fd(G_PRIORITY_HIGH, fd, FALSE, pcmk_cpg_dispatch, &cpg_handle,",
          "265:                   cpg_connection_destroy);",
          "",
          "[Added Lines]",
          "269:     mainloop_add_fd(\"corosync-cpg\", fd, &cpg_handle, &cpg_fd_callbacks);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c49407892bb52d34f052fd6cc93d4a759e03b1bd",
      "candidate_info": {
        "commit_hash": "c49407892bb52d34f052fd6cc93d4a759e03b1bd",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/c49407892bb52d34f052fd6cc93d4a759e03b1bd",
        "files": [
          "TODO.markdown",
          "crmd/crmd_utils.h",
          "crmd/lrm.c",
          "include/crm/cib.h",
          "include/crm/cib/internal.h",
          "lib/cib/cib_attrs.c",
          "lib/cib/cib_client.c",
          "lib/cib/cib_file.c",
          "lib/cib/cib_native.c",
          "lib/cib/cib_remote.c",
          "lib/cib/cib_utils.c",
          "tools/cibadmin.c"
        ],
        "message": "High: cib: No longer expose the the variant_op API call",
        "before_after_code_files": [
          "crmd/crmd_utils.h||crmd/crmd_utils.h",
          "crmd/lrm.c||crmd/lrm.c",
          "include/crm/cib.h||include/crm/cib.h",
          "include/crm/cib/internal.h||include/crm/ciinternal.h",
          "lib/cib/cib_attrs.c||licicib_attrs.c",
          "lib/cib/cib_client.c||licicib_client.c",
          "lib/cib/cib_file.c||licicib_file.c",
          "lib/cib/cib_native.c||licicib_native.c",
          "lib/cib/cib_remote.c||licicib_remote.c",
          "lib/cib/cib_utils.c||licicib_utils.c",
          "tools/cibadmin.c||tools/cibadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c"
          ],
          "candidate": [
            "lib/cib/cib_remote.c||licicib_remote.c"
          ]
        }
      },
      "candidate_diff": {
        "crmd/crmd_utils.h||crmd/crmd_utils.h": [
          "File: crmd/crmd_utils.h -> crmd/crmd_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #  define fsa_cib_update(section, data, options, call_id, user_name) \\",
          "31:  if(fsa_cib_conn != NULL) {     \\",
          "33:   fsa_cib_conn, CIB_OP_MODIFY, NULL, section, data, \\",
          "34:   NULL, options, user_name);    \\",
          "35:          \\",
          "",
          "[Removed Lines]",
          "32:      call_id = fsa_cib_conn->cmds->delegated_variant_op(  \\",
          "",
          "[Added Lines]",
          "32:      call_id = cib_internal_op(                                  \\",
          "",
          "---------------"
        ],
        "crmd/lrm.c||crmd/lrm.c": [
          "File: crmd/lrm.c -> crmd/lrm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:     rsc_xpath = calloc(1, max);",
          "893:     snprintf(rsc_xpath, max, rsc_template, fsa_our_uname, rsc_id);",
          "898:     free(rsc_xpath);",
          "899:     return rc;",
          "",
          "[Removed Lines]",
          "895:     rc = fsa_cib_conn->cmds->delegated_variant_op(fsa_cib_conn, CIB_OP_DELETE, NULL, rsc_xpath,",
          "896:                                                   NULL, NULL, call_options | cib_xpath, user_name);",
          "",
          "[Added Lines]",
          "895:     rc = cib_internal_op(fsa_cib_conn, CIB_OP_DELETE, NULL, rsc_xpath,",
          "896:                          NULL, NULL, call_options | cib_xpath, user_name);",
          "",
          "---------------"
        ],
        "include/crm/cib.h||include/crm/cib.h": [
          "File: include/crm/cib.h -> include/crm/cib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: typedef struct cib_s cib_t;",
          "73: typedef struct cib_api_operations_s {",
          "78:     int (*signon) (cib_t * cib, const char *name, enum cib_conn_type type);",
          "79:     int (*signon_raw) (cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd,",
          "80:                        int *unused);",
          "",
          "[Removed Lines]",
          "74:     int (*variant_op) (cib_t * cib, const char *op, const char *host,",
          "75:                        const char *section, xmlNode * data,",
          "76:                        xmlNode ** output_data, int call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     int (*register_notification) (cib_t * cib, const char *callback, int enabled);",
          "129:                                    void *user_data, const char *callback_name,",
          "130:                                    void (*callback) (xmlNode *, int, int, xmlNode *, void *));",
          "136: } cib_api_operations_t;",
          "",
          "[Removed Lines]",
          "128:      gboolean(*register_callback) (cib_t * cib, int call_id, int timeout, gboolean only_success,",
          "132:     int (*delegated_variant_op) (cib_t * cib, const char *op, const char *host,",
          "133:                                  const char *section, xmlNode * data,",
          "134:                                  xmlNode ** output_data, int call_options, const char *user_name);",
          "",
          "[Added Lines]",
          "124:     gboolean(*register_callback) (cib_t * cib, int call_id, int timeout, gboolean only_success,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:     int call_id;",
          "144:     int call_timeout;",
          "145:     void *variant_opaque;",
          "147:     GList *notify_list;",
          "148:     void (*op_callback) (const xmlNode * msg, int call_id, int rc, xmlNode * output);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     void *delegate_fn;",
          "",
          "---------------"
        ],
        "include/crm/cib/internal.h||include/crm/ciinternal.h": [
          "File: include/crm/cib/internal.h -> include/crm/ciinternal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:                                int return_code);",
          "175: int cib_update_counter(xmlNode * xml_obj, const char *field, gboolean reset);",
          "177: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_attrs.c||licicib_attrs.c": [
          "File: lib/cib/cib_attrs.c -> licicib_attrs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     }",
          "125:     offset += snprintf(xpath_string + offset, xpath_max - offset, \"]\");",
          "132:     if (rc != pcmk_ok) {",
          "133:         crm_trace(\"Query failed for attribute %s (section=%s, node=%s, set=%s, xpath=%s): %s\",",
          "",
          "[Removed Lines]",
          "127:     rc = the_cib->cmds->delegated_variant_op(the_cib, CIB_OP_QUERY, NULL, xpath_string, NULL,",
          "128:                                              &xml_search,",
          "129:                                              cib_sync_call | cib_scope_local | cib_xpath,",
          "130:                                              user_name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:         const char *node_type = NULL;",
          "199:         xmlNode *cib_top = NULL;",
          "206:         value = crm_element_value(cib_top, \"ignore_dtd\");",
          "207:         if (value != NULL) {",
          "",
          "[Removed Lines]",
          "201:         rc = the_cib->cmds->delegated_variant_op(the_cib, CIB_OP_QUERY, NULL, \"/cib\", NULL,",
          "202:                                                  &cib_top,",
          "203:                                                  cib_sync_call | cib_scope_local | cib_xpath |",
          "204:                                                  cib_no_children, user_name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:     crm_xml_add(xml_obj, XML_NVPAIR_ATTR_VALUE, attr_value);",
          "336:     crm_log_xml_trace(xml_top, \"update_attr\");",
          "340:     if (rc < pcmk_ok) {",
          "341:         attr_msg(LOG_ERR, \"Error setting %s=%s (section=%s, set=%s): %s\",",
          "",
          "[Removed Lines]",
          "337:     rc = the_cib->cmds->delegated_variant_op(the_cib, CIB_OP_MODIFY, NULL, section, xml_top, NULL,",
          "338:                                              call_options | cib_quorum_override, user_name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "401:     crm_xml_add(xml_obj, XML_NVPAIR_ATTR_NAME, attr_name);",
          "402:     crm_xml_add(xml_obj, XML_NVPAIR_ATTR_VALUE, attr_value);",
          "407:     if (rc == pcmk_ok) {",
          "408:         attr_msg(LOG_DEBUG, \"Deleted %s %s: id=%s%s%s%s%s\\n\",",
          "",
          "[Removed Lines]",
          "404:     rc = the_cib->cmds->delegated_variant_op(the_cib, CIB_OP_DELETE, NULL, section, xml_obj, NULL,",
          "405:                                              options | cib_quorum_override, user_name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_client.c||licicib_client.c": [
          "File: lib/cib/cib_client.c -> licicib_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #define op_common(cib) do {                                             \\",
          "51:         if(cib == NULL) {                                               \\",
          "52:             return -EINVAL;      \\",
          "55:         }                                                               \\",
          "56:     } while(0)",
          "",
          "[Removed Lines]",
          "53:         } else if(cib->cmds->variant_op == NULL) {                      \\",
          "54:             return -EPROTONOSUPPORT;      \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: cib_client_noop(cib_t * cib, int call_options)",
          "60: {",
          "61:     op_common(cib);",
          "63: }",
          "65: static int",
          "66: cib_client_ping(cib_t * cib, xmlNode ** output_data, int call_options)",
          "67: {",
          "68:     op_common(cib);",
          "70: }",
          "72: static int",
          "",
          "[Removed Lines]",
          "62:     return cib->cmds->variant_op(cib, CRM_OP_NOOP, NULL, NULL, NULL, NULL, call_options);",
          "69:     return cib->cmds->variant_op(cib, CRM_OP_PING, NULL, NULL, NULL, output_data, call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:                       xmlNode ** output_data, int call_options)",
          "81: {",
          "82:     op_common(cib);",
          "84: }",
          "86: static int",
          "87: cib_client_is_master(cib_t * cib)",
          "88: {",
          "89:     op_common(cib);",
          "92: }",
          "94: static int",
          "95: cib_client_set_slave(cib_t * cib, int call_options)",
          "96: {",
          "97:     op_common(cib);",
          "99: }",
          "101: static int",
          "",
          "[Removed Lines]",
          "83:     return cib->cmds->variant_op(cib, CIB_OP_QUERY, host, section, NULL, output_data, call_options);",
          "90:     return cib->cmds->variant_op(cib, CIB_OP_ISMASTER, NULL, NULL, NULL, NULL,",
          "91:                                  cib_scope_local | cib_sync_call);",
          "98:     return cib->cmds->variant_op(cib, CIB_OP_SLAVE, NULL, NULL, NULL, NULL, call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109: {",
          "110:     op_common(cib);",
          "111:     crm_trace(\"Adding cib_scope_local to options\");",
          "114: }",
          "116: static int",
          "117: cib_client_bump_epoch(cib_t * cib, int call_options)",
          "118: {",
          "119:     op_common(cib);",
          "121: }",
          "123: static int",
          "124: cib_client_upgrade(cib_t * cib, int call_options)",
          "125: {",
          "126:     op_common(cib);",
          "128: }",
          "130: static int",
          "",
          "[Removed Lines]",
          "112:     return cib->cmds->variant_op(cib, CIB_OP_MASTER, NULL, NULL, NULL, NULL,",
          "113:                                  call_options | cib_scope_local);",
          "120:     return cib->cmds->variant_op(cib, CIB_OP_BUMP, NULL, NULL, NULL, NULL, call_options);",
          "127:     return cib->cmds->variant_op(cib, CIB_OP_UPGRADE, NULL, NULL, NULL, NULL, call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137: cib_client_sync_from(cib_t * cib, const char *host, const char *section, int call_options)",
          "138: {",
          "139:     op_common(cib);",
          "141: }",
          "143: static int",
          "144: cib_client_create(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "145: {",
          "146:     op_common(cib);",
          "148: }",
          "150: static int",
          "151: cib_client_modify(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "152: {",
          "153:     op_common(cib);",
          "155: }",
          "157: static int",
          "158: cib_client_update(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "159: {",
          "160:     op_common(cib);",
          "162: }",
          "164: static int",
          "165: cib_client_replace(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "166: {",
          "167:     op_common(cib);",
          "169: }",
          "171: static int",
          "172: cib_client_delete(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "173: {",
          "174:     op_common(cib);",
          "176: }",
          "178: static int",
          "179: cib_client_delete_absolute(cib_t * cib, const char *section, xmlNode * data, int call_options)",
          "180: {",
          "181:     op_common(cib);",
          "183: }",
          "185: static int",
          "186: cib_client_erase(cib_t * cib, xmlNode ** output_data, int call_options)",
          "187: {",
          "188:     op_common(cib);",
          "190: }",
          "192: static int",
          "193: cib_client_quit(cib_t * cib, int call_options)",
          "194: {",
          "195:     op_common(cib);",
          "197: }",
          "199: static void",
          "",
          "[Removed Lines]",
          "140:     return cib->cmds->variant_op(cib, CIB_OP_SYNC, host, section, NULL, NULL, call_options);",
          "147:     return cib->cmds->variant_op(cib, CIB_OP_CREATE, NULL, section, data, NULL, call_options);",
          "154:     return cib->cmds->variant_op(cib, CIB_OP_MODIFY, NULL, section, data, NULL, call_options);",
          "161:     return cib->cmds->variant_op(cib, CIB_OP_MODIFY, NULL, section, data, NULL, call_options);",
          "168:     return cib->cmds->variant_op(cib, CIB_OP_REPLACE, NULL, section, data, NULL, call_options);",
          "175:     return cib->cmds->variant_op(cib, CIB_OP_DELETE, NULL, section, data, NULL, call_options);",
          "182:     return cib->cmds->variant_op(cib, CIB_OP_DELETE_ALT, NULL, section, data, NULL, call_options);",
          "189:     return cib->cmds->variant_op(cib, CIB_OP_ERASE, NULL, NULL, NULL, output_data, call_options);",
          "196:     return cib->cmds->variant_op(cib, CRM_OP_QUIT, NULL, NULL, NULL, NULL, call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_file.c||licicib_file.c": [
          "File: lib/cib/cib_file.c -> licicib_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     private->filename = strdup(cib_location);",
          "88:     cib->cmds->signon = cib_file_signon;",
          "89:     cib->cmds->signoff = cib_file_signoff;",
          "90:     cib->cmds->free = cib_file_free;",
          "",
          "[Removed Lines]",
          "86:     cib->cmds->variant_op = cib_file_perform_op;",
          "87:     cib->cmds->delegated_variant_op = cib_file_perform_op_delegate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_native.c||licicib_native.c": [
          "File: lib/cib/cib_native.c -> licicib_native.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     native->dnotify_fn = NULL;",
          "76:     cib->cmds->signon = cib_native_signon;",
          "77:     cib->cmds->signon_raw = cib_native_signon_raw;",
          "78:     cib->cmds->signoff = cib_native_signoff;",
          "",
          "[Removed Lines]",
          "74:     cib->cmds->variant_op = cib_native_perform_op;",
          "75:     cib->cmds->delegated_variant_op = cib_native_perform_op_delegate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||licicib_remote.c": [
          "File: lib/cib/cib_remote.c -> licicib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: int cib_remote_free(cib_t * cib);",
          "84: int cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
          "87: static int",
          "88: cib_remote_inputfd(cib_t * cib)",
          "",
          "[Removed Lines]",
          "85:                           xmlNode * data, xmlNode ** output_data, int call_options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     private->callback.encrypted = encrypted;",
          "145:     cib->cmds->signon = cib_remote_signon;",
          "146:     cib->cmds->signoff = cib_remote_signoff;",
          "147:     cib->cmds->free = cib_remote_free;",
          "",
          "[Removed Lines]",
          "144:     cib->cmds->variant_op = cib_remote_perform_op;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482: int",
          "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
          "485: {",
          "486:     int rc = pcmk_ok;",
          "",
          "[Removed Lines]",
          "484:                       xmlNode * data, xmlNode ** output_data, int call_options)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_utils.c||licicib_utils.c": [
          "File: lib/cib/cib_utils.c -> licicib_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "771:     return changed;",
          "772: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/cibadmin.c||tools/cibadmin.c": [
          "File: tools/cibadmin.c -> tools/cibadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     } else if (cib_action != NULL) {",
          "517:         crm_trace(\"Passing \\\"%s\\\" to variant_op...\", cib_action);",
          "521:     } else {",
          "522:         crm_err(\"You must specify an operation\");",
          "",
          "[Removed Lines]",
          "518:         return the_cib->cmds->variant_op(the_cib, cib_action, host, obj_type,",
          "519:                                          input, output, call_options);",
          "",
          "[Added Lines]",
          "518:         return cib_internal_op(the_cib, cib_action, host, obj_type, input, output, call_options, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "715103322fdeb7e967fb01fe908963a441a614d5",
      "candidate_info": {
        "commit_hash": "715103322fdeb7e967fb01fe908963a441a614d5",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/715103322fdeb7e967fb01fe908963a441a614d5",
        "files": [
          "lib/common/mainloop.c"
        ],
        "message": "Fix: Core: Tolerate NULL in mainloop_destroy_trigger()",
        "before_after_code_files": [
          "lib/common/mainloop.c||lib/common/mainloop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ],
          "candidate": [
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/mainloop.c||lib/common/mainloop.c": [
          "File: lib/common/mainloop.c -> lib/common/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: gboolean",
          "227: mainloop_destroy_trigger(crm_trigger_t * source)",
          "228: {",
          "230:     crm_trace(\"Destroying %p with ref-count=%u\", source, g_source_refcount(gs));",
          "",
          "[Removed Lines]",
          "229:     GSource *gs = (GSource *)source;",
          "",
          "[Added Lines]",
          "229:     GSource *gs = NULL;",
          "231:     if(source == NULL) {",
          "232:         return TRUE;",
          "233:     }",
          "235:     gs = (GSource *)source;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c153b95a0a64cfc3c8171cb8c33eb9f888a919d",
      "candidate_info": {
        "commit_hash": "0c153b95a0a64cfc3c8171cb8c33eb9f888a919d",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/0c153b95a0a64cfc3c8171cb8c33eb9f888a919d",
        "files": [
          "cib/callbacks.c",
          "cib/notify.c",
          "cib/remote.c",
          "include/crm/common/ipcs.h",
          "include/crm_internal.h",
          "lib/cib/cib_remote.c",
          "lib/common/ipc.c",
          "lib/common/remote.c",
          "lib/lrmd/lrmd_client.c",
          "lrmd/lrmd_private.h",
          "lrmd/main.c",
          "lrmd/tls_backend.c"
        ],
        "message": "Refactor: Clean up the internal send/recv API for remote connections",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "include/crm/common/ipcs.h||include/crm/common/ipcs.h",
          "include/crm_internal.h||include/crm_internal.h",
          "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
          "lib/common/ipc.c||lib/common/ipc.c",
          "lib/common/remote.c||lib/common/remote.c",
          "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c",
          "lrmd/lrmd_private.h||lrmd/lrmd_private.h",
          "lrmd/main.c||lrmd/main.c",
          "lrmd/tls_backend.c||lrmd/tls_backend.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/remote.c||lib/common/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c",
            "include/crm_internal.h||include/crm_internal.h",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/remote.c||lib/common/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:         }",
          "314:         switch(client_obj->kind) {",
          "316:                 if (crm_ipcs_send(client_obj, rid, notify_src, !sync_reply) < 0) {",
          "317:                     local_rc = -ENOMSG;",
          "318:                 }",
          "319:                 break;",
          "329:                 break;",
          "330:             default:",
          "331:                 crm_err(\"Unknown transport %d for %s\", client_obj->kind, client_obj->name);",
          "",
          "[Removed Lines]",
          "315:             case client_type_ipc:",
          "320:             case client_type_tls:",
          "321:             case client_type_tcp:",
          "322:                 if(client_obj->userdata) {",
          "323:                     crm_send_remote_msg(",
          "324:                         client_obj->session, notify_src, client_obj->kind == client_type_tls);",
          "325:                 } else {",
          "326:                     crm_warn(\"Notification of remote client %s/%s failed\",",
          "327:                              client_obj->name, client_obj->id);",
          "328:                 }",
          "",
          "[Added Lines]",
          "315:             case CRM_CLIENT_IPC:",
          "320:             case CRM_CLIENT_TLS:",
          "321:             case CRM_CLIENT_TCP:",
          "322:                 crm_remote_send(client_obj->remote, notify_src);",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     CRM_CHECK(client != NULL, return TRUE);",
          "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
          "87:         crm_warn(\"Skipping client with NULL channel\");",
          "88:         return FALSE;",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:     if (client->ipcs == NULL && client->session == NULL) {",
          "",
          "[Added Lines]",
          "86:     if (client->ipcs == NULL && client->remote == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     if (do_send) {",
          "111:         switch(client->kind) {",
          "113:                 if(crm_ipcs_send(client, 0, update_msg, TRUE) == FALSE) {",
          "114:                     crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "115:                 }",
          "116:                 break;",
          "125:                 break;",
          "126:             default:",
          "127:                 crm_err(\"Unknown transport %d for %s\", client->kind, client->name);",
          "",
          "[Removed Lines]",
          "112:             case client_type_ipc:",
          "117:             case client_type_tls:",
          "118:             case client_type_tcp:",
          "119:                 if(client->userdata) {",
          "120:                     crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "121:                     crm_send_remote_msg(client->session, update_msg, client->kind == client_type_tls);",
          "122:                 } else {",
          "123:                     crm_warn(\"Notification of remote client %s/%s failed\", client->name, client->id);",
          "124:                 }",
          "",
          "[Added Lines]",
          "112:             case CRM_CLIENT_IPC:",
          "117:             case CRM_CLIENT_TLS:",
          "118:             case CRM_CLIENT_TCP:",
          "119:                 crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "120:                 crm_remote_send(client->remote, update_msg);",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: {",
          "264:     crm_client_t *client = data;",
          "269:         return FALSE;",
          "270:     }",
          "273:     crm_err(\"Remote client authentication timed out\");",
          "275:     return FALSE;",
          "",
          "[Removed Lines]",
          "266:     client->remote_auth_timeout = 0;",
          "268:     if (client->remote_auth == TRUE) {",
          "272:     mainloop_del_fd(client->remote);",
          "",
          "[Added Lines]",
          "266:     client->remote->auth_timeout = 0;",
          "268:     if (client->remote->authenticated == TRUE) {",
          "272:     mainloop_del_fd(client->remote->source);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     int ssock = *(int *)data;",
          "284:     int flag;",
          "289:     crm_client_t *new_client = NULL;",
          "291:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
          "",
          "[Removed Lines]",
          "286: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "287:     gnutls_session *session = NULL;",
          "288: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:     if (ssock == remote_tls_fd) {",
          "321: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "325:             crm_err(\"TLS session creation failed\");",
          "326:             close(csock);",
          "327:             return TRUE;",
          "",
          "[Removed Lines]",
          "323:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
          "324:         if (session == NULL) {",
          "",
          "[Added Lines]",
          "320:         new_client->remote->tls_session = crm_create_anon_tls_session(",
          "321:             csock, GNUTLS_SERVER, anon_cred_s);",
          "323:         if (new_client->remote->tls_session == NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:     crm_client_init();",
          "335:     new_client = calloc(1, sizeof(crm_client_t));",
          "337:     new_client->id = crm_generate_uuid();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:     new_client->remote = calloc(1, sizeof(crm_remote_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343: #endif",
          "348:     if (ssock == remote_tls_fd) {",
          "349: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "352: #endif",
          "353:     } else {",
          "356:     }",
          "359:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
          "361:     return TRUE;",
          "",
          "[Removed Lines]",
          "346:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
          "350:         new_client->session = session;",
          "351:         new_client->kind = client_type_tls;",
          "354:         new_client->kind = client_type_tcp;",
          "355:         new_client->session = GINT_TO_POINTER(csock);",
          "358:     new_client->remote = mainloop_add_fd(",
          "",
          "[Added Lines]",
          "346:     new_client->remote->auth_timeout = g_timeout_add(",
          "347:         REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
          "351:         new_client->kind = CRM_CLIENT_TLS;",
          "354:         new_client->kind = CRM_CLIENT_TCP;",
          "355:         new_client->remote->tcp_socket = csock;",
          "358:     new_client->remote->source = mainloop_add_fd(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:     num_clients--;",
          "378:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "381: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "384:             csock = GPOINTER_TO_INT(sock_ptr);",
          "387:             }",
          "390:         }",
          "391: #endif",
          "392:     } else {",
          "394:     }",
          "397:     if (csock > 0) {",
          "398:         close(csock);",
          "",
          "[Removed Lines]",
          "380:     if (client->kind == client_type_tls) {",
          "382:         if (client->session) {",
          "383:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
          "385:             if (client->handshake_complete) {",
          "386:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
          "388:             gnutls_deinit(*client->session);",
          "389:             gnutls_free(client->session);",
          "393:         csock = GPOINTER_TO_INT(client->session);",
          "395:     client->session = NULL;",
          "",
          "[Added Lines]",
          "380:     if (client->kind == CRM_CLIENT_TLS) {",
          "382:         if (client->remote->tls_session) {",
          "383:             void *sock_ptr = gnutls_transport_get_ptr(*client->remote->tls_session);",
          "385:             if (client->remote->tls_handshake_complete) {",
          "386:                 gnutls_bye(*client->remote->tls_session, GNUTLS_SHUT_WR);",
          "388:             gnutls_deinit(*client->remote->tls_session);",
          "389:             gnutls_free(client->remote->tls_session);",
          "393:         csock = GPOINTER_TO_INT(client->remote->tls_session);",
          "395:     client->remote->tls_session = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "428:         }",
          "429:     }",
          "432:         value = crm_element_value(command, F_CIB_CALLBACK_TOKEN);",
          "433:         if (value != NULL) {",
          "437:         } else {",
          "439:         }",
          "440:     }",
          "",
          "[Removed Lines]",
          "431:     if (client->callback_id == NULL) {",
          "434:             client->callback_id = strdup(value);",
          "435:             crm_trace(\"Callback channel for %s is %s\", client->id, client->callback_id);",
          "438:             client->callback_id = strdup(client->id);",
          "",
          "[Added Lines]",
          "431:     if (client->userdata == NULL) {",
          "434:             client->userdata = strdup(value);",
          "435:             crm_trace(\"Callback channel for %s is %s\", client->id, client->userdata);",
          "438:             client->userdata = strdup(client->id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "473:     xmlNode *command = NULL;",
          "474:     crm_client_t *client = data;",
          "475:     int disconnected = 0;",
          "480: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "482:         int rc = 0;",
          "486:         do {",
          "489:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
          "490:                 crm_err(\"Remote cib tls handshake failed\");",
          "",
          "[Removed Lines]",
          "476:     int timeout = client->remote_auth ? -1 : 1000;",
          "478:     crm_trace(\"%s callback\", client->kind == client_type_tls ? \"secure\" : \"clear-text\");",
          "481:     if (client->kind == client_type_tls && (client->handshake_complete == FALSE)) {",
          "487:             rc = gnutls_handshake(*client->session);",
          "",
          "[Added Lines]",
          "476:     int timeout = client->remote->authenticated ? -1 : 1000;",
          "478:     crm_trace(\"%s callback\", client->kind == CRM_CLIENT_TLS ? \"secure\" : \"clear-text\");",
          "481:     if (client->kind == CRM_CLIENT_TLS && (client->remote->tls_handshake_complete == FALSE)) {",
          "487:             rc = gnutls_handshake(*client->remote->tls_session);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "495:         if (rc == 0) {",
          "496:             crm_debug(\"Remote cib tls handshake completed\");",
          "500:             }",
          "503:         }",
          "504:         return 0;",
          "505:     }",
          "506: #endif",
          "512:         xmlNode *reg;",
          "513: #if ENABLE_ACL",
          "514:         const char *user = NULL;",
          "515: #endif",
          "517:         if (cib_remote_auth(command) == FALSE) {",
          "518:             free_xml(command);",
          "519:             return -1;",
          "520:         }",
          "522:         crm_debug(\"remote connection authenticated successfully\");",
          "526:         client->name = crm_element_value_copy(command, \"name\");",
          "528: #if ENABLE_ACL",
          "",
          "[Removed Lines]",
          "497:             client->handshake_complete = TRUE;",
          "498:             if (client->remote_auth_timeout) {",
          "499:                 g_source_remove(client->remote_auth_timeout);",
          "502:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
          "508:     crm_recv_remote_msg(client->session, &client->recv_buf, client->kind == client_type_tls, timeout, &disconnected);",
          "511:     if (client->remote_auth == FALSE) {",
          "516:         command = crm_parse_remote_buffer(&client->recv_buf);",
          "523:         client->remote_auth = TRUE;",
          "524:         g_source_remove(client->remote_auth_timeout);",
          "525:         client->remote_auth_timeout = 0;",
          "",
          "[Added Lines]",
          "497:             client->remote->tls_handshake_complete = TRUE;",
          "498:             if (client->remote->auth_timeout) {",
          "499:                 g_source_remove(client->remote->auth_timeout);",
          "502:             client->remote->auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
          "508:     crm_remote_recv(client->remote, timeout, &disconnected);",
          "511:     if (client->remote->authenticated == FALSE) {",
          "516:         command = crm_remote_parse_buffer(client->remote);",
          "523:         client->remote->authenticated = TRUE;",
          "524:         g_source_remove(client->remote->auth_timeout);",
          "525:         client->remote->auth_timeout = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "536:         reg = create_xml_node(NULL, \"cib_result\");",
          "537:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "538:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
          "540:         free_xml(reg);",
          "541:         free_xml(command);",
          "542:     }",
          "545:     while (command) {",
          "546:         crm_trace(\"command received\");",
          "547:         cib_handle_remote_msg(client, command);",
          "548:         free_xml(command);",
          "550:     }",
          "552:     if (disconnected) {",
          "",
          "[Removed Lines]",
          "539:         crm_send_remote_msg(client->session, reg, client->kind == client_type_tls);",
          "544:     command = crm_parse_remote_buffer(&client->recv_buf);",
          "549:         command = crm_parse_remote_buffer(&client->recv_buf);",
          "",
          "[Added Lines]",
          "539:         crm_remote_send(client->remote, reg);",
          "544:     command = crm_remote_parse_buffer(client->remote);",
          "549:         command = crm_remote_parse_buffer(client->remote);",
          "",
          "---------------"
        ],
        "include/crm/common/ipcs.h||include/crm/common/ipcs.h": [
          "File: include/crm/common/ipcs.h -> include/crm/common/ipcs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #ifndef CRM_COMMON_IPCS__H",
          "19: #  define CRM_COMMON_IPCS__H",
          "21: #include <qb/qbipcs.h>",
          "22: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "23: #  undef KEYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <crm/common/ipc.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: #endif",
          "27: typedef struct mainloop_io_s mainloop_io_t;",
          "29: enum client_type",
          "30: {",
          "33: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "35: #endif",
          "36: };",
          "",
          "[Removed Lines]",
          "31:         client_type_ipc = 1,",
          "32:         client_type_tcp = 2,",
          "34:         client_type_tls = 3,",
          "",
          "[Added Lines]",
          "30: typedef struct crm_client_s crm_client_t;",
          "34:         CRM_CLIENT_IPC = 1,",
          "35:         CRM_CLIENT_TCP = 2,",
          "37:         CRM_CLIENT_TLS = 3,",
          "38: #endif",
          "39: };",
          "41: struct crm_remote_s",
          "42: {",
          "44:         char *buffer;",
          "45:         int   auth_timeout;",
          "47:         mainloop_io_t *source;",
          "49:         int tcp_socket;",
          "53: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "54:         gnutls_session *tls_session;",
          "55:         bool tls_handshake_complete;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         enum client_type kind;",
          "79: };",
          "81: enum crm_ipc_server_flags",
          "",
          "[Removed Lines]",
          "61:         char *callback_id;",
          "64:         qb_ipcs_connection_t *ipcs;",
          "67:         char *recv_buf;",
          "68:         bool  remote_auth;",
          "69:         int   remote_auth_timeout;",
          "70:         mainloop_io_t *remote;",
          "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "74:         gnutls_session *session;",
          "75:         gboolean handshake_complete;",
          "76: #else",
          "77:         void *session;",
          "78: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: extern GHashTable *client_connections;",
          "94: void crm_client_init(void);",
          "95: void crm_client_cleanup(void);",
          "",
          "[Removed Lines]",
          "92: typedef struct crm_client_s crm_client_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm_internal.h||include/crm_internal.h": [
          "File: include/crm_internal.h -> include/crm_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: int crm_remote_tcp_connect(const char *host, int port);",
          "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Removed Lines]",
          "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
          "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
          "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
          "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
          "",
          "[Added Lines]",
          "205: typedef struct crm_remote_s crm_remote_t;",
          "207: int crm_remote_send(crm_remote_t *remote, xmlNode * msg);",
          "208: int crm_remote_ready(crm_remote_t *remote, int total_timeout /*ms */);",
          "209: gboolean crm_remote_recv(crm_remote_t *remote, int total_timeout /*ms */, int *disconnected);",
          "210: xmlNode *crm_remote_parse_buffer(crm_remote_t *remote);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
          "",
          "[Added Lines]",
          "222: int crm_initiate_client_tls_handshake(crm_remote_t *remote, int timeout_ms);",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
          "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define DH_BITS 1024",
          "68: typedef struct cib_remote_opaque_s {",
          "69:     int flags;",
          "70:     int socket;",
          "",
          "[Removed Lines]",
          "59: struct remote_connection_s {",
          "60:     int socket;",
          "61:     gboolean encrypted;",
          "62:     gnutls_session *session;",
          "63:     mainloop_io_t *source;",
          "64:     char *token;",
          "65:     char *recv_buf;",
          "66: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     char *server;",
          "73:     char *user;",
          "74:     char *passwd;",
          "78: } cib_remote_opaque_t;",
          "",
          "[Removed Lines]",
          "75:     struct remote_connection_s command;",
          "76:     struct remote_connection_s callback;",
          "",
          "[Added Lines]",
          "66:     gboolean encrypted;",
          "67:     crm_remote_t command;",
          "68:     crm_remote_t callback;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92: {",
          "93:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "96: }",
          "98: static int",
          "",
          "[Removed Lines]",
          "95:     return private->callback.socket;",
          "",
          "[Added Lines]",
          "87:     return private->callback.tcp_socket;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:     crm_xml_add(notify_msg, F_CIB_OPERATION, T_CIB_NOTIFY);",
          "111:     crm_xml_add(notify_msg, F_CIB_NOTIFY_TYPE, callback);",
          "112:     crm_xml_add_int(notify_msg, F_CIB_NOTIFY_ACTIVATE, enabled);",
          "114:     free_xml(notify_msg);",
          "115:     return pcmk_ok;",
          "116: }",
          "",
          "[Removed Lines]",
          "113:     crm_send_remote_msg(private->callback.session, notify_msg, private->callback.encrypted);",
          "",
          "[Added Lines]",
          "105:     crm_remote_send(&private->callback, notify_msg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     }",
          "142:     private->port = port;",
          "147:     cib->delegate_fn = cib_remote_perform_op;",
          "",
          "[Removed Lines]",
          "143:     private->command.encrypted = encrypted;",
          "144:     private->callback.encrypted = encrypted;",
          "",
          "[Added Lines]",
          "135:     private->encrypted = encrypted;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "164: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "170:         }",
          "176:         }",
          "179:         if (remote_gnutls_credentials_init) {",
          "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
          "181:             gnutls_global_deinit();",
          "",
          "[Removed Lines]",
          "165:     if (private->command.encrypted) {",
          "166:         if (private->command.session) {",
          "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
          "168:             gnutls_deinit(*(private->command.session));",
          "169:             gnutls_free(private->command.session);",
          "172:         if (private->callback.session) {",
          "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
          "174:             gnutls_deinit(*(private->callback.session));",
          "175:             gnutls_free(private->callback.session);",
          "177:         private->command.session = NULL;",
          "178:         private->callback.session = NULL;",
          "",
          "[Added Lines]",
          "156:     if (private->encrypted) {",
          "157:         if (private->command.tls_session) {",
          "158:             gnutls_bye(*(private->command.tls_session), GNUTLS_SHUT_RDWR);",
          "159:             gnutls_deinit(*(private->command.tls_session));",
          "160:             gnutls_free(private->command.tls_session);",
          "163:         if (private->callback.tls_session) {",
          "164:             gnutls_bye(*(private->callback.tls_session), GNUTLS_SHUT_RDWR);",
          "165:             gnutls_deinit(*(private->callback.tls_session));",
          "166:             gnutls_free(private->callback.tls_session);",
          "168:         private->command.tls_session = NULL;",
          "169:         private->callback.tls_session = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:     }",
          "185: #endif",
          "190:     }",
          "194:     }",
          "203:     return 0;",
          "204: }",
          "206: static int",
          "208: {",
          "209:     int sock;",
          "210:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "",
          "[Removed Lines]",
          "187:     if (private->command.socket) {",
          "189:         close(private->command.socket);",
          "191:     if (private->callback.socket) {",
          "193:         close(private->callback.socket);",
          "195:     private->command.socket = 0;",
          "196:     private->callback.socket = 0;",
          "198:     free(private->command.recv_buf);",
          "199:     free(private->callback.recv_buf);",
          "200:     private->command.recv_buf = NULL;",
          "201:     private->callback.recv_buf = NULL;",
          "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
          "",
          "[Added Lines]",
          "178:     if (private->command.tcp_socket) {",
          "180:         close(private->command.tcp_socket);",
          "182:     if (private->callback.tcp_socket) {",
          "184:         close(private->callback.tcp_socket);",
          "186:     private->command.tcp_socket = 0;",
          "187:     private->callback.tcp_socket = 0;",
          "189:     free(private->command.buffer);",
          "190:     free(private->callback.buffer);",
          "191:     private->command.buffer = NULL;",
          "192:     private->callback.buffer = NULL;",
          "198: cib_tls_signon(cib_t * cib, crm_remote_t *connection, gboolean event_channel)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
          "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
          "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
          "226:     if (sock <= 0) {",
          "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
          "228:     }",
          "233: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "234:         if (remote_gnutls_credentials_init == FALSE) {",
          "",
          "[Removed Lines]",
          "222:     connection->socket = 0;",
          "223:     connection->session = NULL;",
          "230:     connection->socket = sock;",
          "231:     if (connection->encrypted) {",
          "",
          "[Added Lines]",
          "213:     connection->tcp_socket = 0;",
          "214:     connection->tls_session = NULL;",
          "221:     connection->tcp_socket = sock;",
          "222:     if (private->encrypted) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "238:         }",
          "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
          "249:             cib_tls_close(cib);",
          "250:             return -1;",
          "251:         }",
          "",
          "[Removed Lines]",
          "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
          "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "246:             gnutls_deinit(*connection->session);",
          "247:             gnutls_free(connection->session);",
          "248:             connection->session = NULL;",
          "",
          "[Added Lines]",
          "232:         connection->tls_session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
          "234:         if (crm_initiate_client_tls_handshake(connection, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "237:             gnutls_deinit(*connection->tls_session);",
          "238:             gnutls_free(connection->tls_session);",
          "239:             connection->tls_session = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "253:         return -EPROTONOSUPPORT;",
          "254: #endif",
          "255:     } else {",
          "257:     }",
          "",
          "[Removed Lines]",
          "256:         connection->session = GUINT_TO_POINTER(sock);",
          "",
          "[Added Lines]",
          "247:         connection->tls_session = GUINT_TO_POINTER(sock);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "263:     crm_xml_add(login, \"password\", private->passwd);",
          "264:     crm_xml_add(login, \"hidden\", \"password\");",
          "267:     free_xml(login);",
          "271:     if (disconnected) {",
          "272:         rc = -ENOTCONN;",
          "273:     }",
          "277:     crm_log_xml_trace(answer, \"Reply\");",
          "278:     if (answer == NULL) {",
          "",
          "[Removed Lines]",
          "266:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
          "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
          "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
          "",
          "[Added Lines]",
          "257:     crm_remote_send(connection, login);",
          "260:     crm_remote_recv(connection, -1, &disconnected);",
          "266:     answer = crm_remote_parse_buffer(connection);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "303:     }",
          "305:     crm_trace(\"remote client connection established\");",
          "307:     return rc;",
          "308: }",
          "",
          "[Removed Lines]",
          "306:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
          "",
          "[Added Lines]",
          "297:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->tcp_socket, cib, &cib_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "324:     cib_t *cib = user_data;",
          "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
          "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
          "333:     if (disconnected) {",
          "",
          "[Removed Lines]",
          "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
          "329:     free(private->command.recv_buf);",
          "330:     private->command.recv_buf = NULL;",
          "",
          "[Added Lines]",
          "318:     crm_remote_recv(&private->command, -1, &disconnected);",
          "320:     free(private->command.buffer);",
          "321:     private->command.buffer = NULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "348:     crm_info(\"Message on callback channel\");",
          "353:     while (msg) {",
          "354:         const char *type = crm_element_value(msg, F_TYPE);",
          "355:         crm_trace(\"Activating %s callbacks...\", type);",
          "",
          "[Removed Lines]",
          "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
          "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
          "",
          "[Added Lines]",
          "341:     crm_remote_recv(&private->callback, -1, &disconnected);",
          "343:     msg = crm_remote_parse_buffer(&private->callback);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "365:         }",
          "367:         free_xml(msg);",
          "369:     }",
          "371:     if (disconnected) {",
          "",
          "[Removed Lines]",
          "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
          "",
          "[Added Lines]",
          "359:         msg = crm_remote_parse_buffer(&private->callback);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "418:         xmlNode *hello =",
          "419:             cib_create_op(0, private->callback.token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL);",
          "420:         crm_xml_add(hello, F_CIB_CLIENTNAME, name);",
          "422:         free_xml(hello);",
          "423:     }",
          "",
          "[Removed Lines]",
          "421:         crm_send_remote_msg(private->command.session, hello, private->command.encrypted);",
          "",
          "[Added Lines]",
          "412:         crm_remote_send(&private->command, hello);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "522:     crm_trace(\"Sending %s message to CIB service\", op);",
          "523:     if (!(call_options & cib_sync_call)) {",
          "525:     } else {",
          "527:     }",
          "528:     free_xml(op_msg);",
          "",
          "[Removed Lines]",
          "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
          "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
          "",
          "[Added Lines]",
          "515:         crm_remote_send(&private->callback, op_msg);",
          "517:         crm_remote_send(&private->command, op_msg);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "544:         int reply_id = -1;",
          "545:         int msg_id = cib->call_id;",
          "550:         if (!op_reply) {",
          "551:             break;",
          "",
          "[Removed Lines]",
          "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
          "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
          "",
          "[Added Lines]",
          "538:         crm_remote_recv(&private->command, remaining_time * 1000, &disconnected);",
          "539:         op_reply = crm_remote_parse_buffer(&private->command);",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||lib/common/ipc.c": [
          "File: lib/common/ipc.c -> lib/common/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     client = calloc(1, sizeof(crm_client_t));",
          "252:     client->ipcs = c;",
          "254:     client->pid = crm_ipcs_client_pid(c);",
          "256:     client->id = crm_generate_uuid();",
          "",
          "[Removed Lines]",
          "253:     client->kind = client_type_ipc;",
          "",
          "[Added Lines]",
          "253:     client->kind = CRM_CLIENT_IPC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:             g_hash_table_remove(client_connections, c->id);",
          "292:         }",
          "293:     }",
          "299:     free(c->id);",
          "300:     free(c->name);",
          "301:     free(c->user);",
          "305:     free(c);",
          "306: }",
          "",
          "[Removed Lines]",
          "295:     if (c->remote_auth_timeout) {",
          "296:         g_source_remove(c->remote_auth_timeout);",
          "297:     }",
          "302:     free(c->user);",
          "303:     free(c->recv_buf);",
          "304:     free(c->callback_id);",
          "",
          "[Added Lines]",
          "298:     if(c->remote) {",
          "299:         if (c->remote->auth_timeout) {",
          "300:             g_source_remove(c->remote->auth_timeout);",
          "301:         }",
          "302:         free(c->remote->buffer);",
          "303:         free(c->remote);",
          "304:     }",
          "",
          "---------------"
        ],
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <fcntl.h>",
          "36: #include <glib.h>",
          "39: #include <crm/common/xml.h>",
          "41: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Removed Lines]",
          "38: #include <crm/common/ipc.h>",
          "",
          "[Added Lines]",
          "38: #include <crm/common/ipcs.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: };",
          "59: int",
          "61: {",
          "62:     int rc = 0;",
          "63:     int pollrc = 0;",
          "64:     time_t start = time(NULL);",
          "67:     do {",
          "69:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
          "71:             if (pollrc < 0) {",
          "73:                 rc = -1;",
          "",
          "[Removed Lines]",
          "60: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
          "65:     gnutls_session *session = session_data;",
          "68:         rc = gnutls_handshake(*session);",
          "70:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
          "",
          "[Added Lines]",
          "60: crm_initiate_client_tls_handshake(crm_remote_t *remote, int timeout_ms)",
          "67:         rc = gnutls_handshake(*remote->tls_session);",
          "69:             pollrc = crm_remote_ready(remote, 1000);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399: }",
          "401: static int",
          "403: {",
          "406: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "410: #endif",
          "411:     } else {",
          "413:     }",
          "414:     return rc;",
          "415: }",
          "417: int",
          "419: {",
          "420:     int rc = -1;",
          "421:     char *xml_text = NULL;",
          "",
          "[Removed Lines]",
          "402: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
          "404:     int rc = -1;",
          "405:     if (encrypted) {",
          "407:         rc = crm_send_tls(session, buf, len);",
          "408: #else",
          "409:         CRM_ASSERT(encrypted == FALSE);",
          "412:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
          "418: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
          "",
          "[Added Lines]",
          "401: crm_remote_send_raw(crm_remote_t *remote, const char *buf, size_t len)",
          "403:     int rc = -ESOCKTNOSUPPORT;",
          "405:     if(remote->tcp_socket) {",
          "406:         rc = crm_send_plaintext(remote->tcp_socket, buf, len);",
          "409:     } else if(remote->tls_session) {",
          "410:         rc = crm_send_tls(remote->tls_session, buf, len);",
          "413:         crm_err(\"Unsupported connection type\");",
          "419: crm_remote_send(crm_remote_t *remote, xmlNode * msg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "429:         return -1;",
          "430:     }",
          "435:     }",
          "439:     if (rc < 0) {",
          "440:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
          "441:     }",
          "",
          "[Removed Lines]",
          "432:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
          "433:     if (rc < 0) {",
          "434:         goto done;",
          "436:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
          "438: done:",
          "",
          "[Added Lines]",
          "433:     rc = crm_remote_send_raw(remote, xml_text, len);",
          "434:     if (rc >= 0) {",
          "435:         rc = crm_remote_send_raw(remote, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452: xmlNode *",
          "454: {",
          "455:     char *buf = NULL;",
          "456:     char *start = NULL;",
          "457:     char *end = NULL;",
          "458:     xmlNode *xml = NULL;",
          "461:         return NULL;",
          "462:     }",
          "469:     start = buf;",
          "",
          "[Removed Lines]",
          "453: crm_parse_remote_buffer(char **msg_buf)",
          "460:     if (*msg_buf == NULL) {",
          "465:     buf = *msg_buf;",
          "",
          "[Added Lines]",
          "452: crm_remote_parse_buffer(crm_remote_t *remote)",
          "459:     if (remote->buffer == NULL) {",
          "464:     buf = remote->buffer;",
          "465:     remote->buffer = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "486:     if (xml && start) {",
          "489:         free(buf);",
          "490:     } else if (!xml) {",
          "493:     }",
          "495:     return xml;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:         remote->buffer = strdup(start);",
          "491:         remote->buffer = buf;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506: int",
          "508: {",
          "509:     struct pollfd fds = { 0, };",
          "510:     int sock = 0;",
          "512:     int rc = 0;",
          "513:     time_t start;",
          "516: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "521: #endif",
          "522:     } else {",
          "524:     }",
          "527:     if (sock <= 0) {",
          "528:         return -ENOTCONN;",
          "529:     }",
          "",
          "[Removed Lines]",
          "507: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
          "511:     void *sock_ptr = NULL;",
          "515:     if (encrypted) {",
          "517:         gnutls_session *tls_session = session;",
          "518:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
          "519: #else",
          "520:         CRM_ASSERT(encrypted == FALSE);",
          "523:         sock_ptr = session;",
          "526:     sock = GPOINTER_TO_INT(sock_ptr);",
          "",
          "[Added Lines]",
          "506: crm_remote_ready(crm_remote_t *remote, int timeout /* ms */)",
          "513:     if (remote->tcp_socket) {",
          "514:         sock = remote->tcp_socket;",
          "516:     } else if(remote->tls_session) {",
          "517:         void *sock_ptr = gnutls_transport_get_ptr(*remote->tls_session);",
          "518:         sock = GPOINTER_TO_INT(sock_ptr);",
          "521:         crm_err(\"Unsupported connection type\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "550:     return rc;",
          "551: }",
          "",
          "[Removed Lines]",
          "553: char *",
          "554: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
          "555: {",
          "556:     char *reply = NULL;",
          "557:     if (recv_len) {",
          "559:     }",
          "561:     if (disconnected) {",
          "563:     }",
          "565:     if (encrypted) {",
          "566: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "567:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
          "568: #else",
          "569:         CRM_ASSERT(encrypted == FALSE);",
          "570: #endif",
          "571:     } else {",
          "572:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
          "573:     }",
          "574:     if (reply == NULL || strlen(reply) == 0) {",
          "575:         crm_trace(\"Empty reply\");",
          "576:     }",
          "578:     return reply;",
          "579: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "588: gboolean",
          "590: {",
          "591:     int ret;",
          "592:     size_t request_len = 0;",
          "",
          "[Removed Lines]",
          "589: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
          "",
          "[Added Lines]",
          "558: crm_remote_recv(crm_remote_t *remote, int total_timeout /*ms */, int *disconnected)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "608:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
          "610:         raw_request = NULL;",
          "612:         if (ret == 0) {",
          "",
          "[Removed Lines]",
          "609:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
          "",
          "[Added Lines]",
          "578:         ret = crm_remote_ready(remote, remaining_timeout);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "620:                 return FALSE;",
          "621:             }",
          "622:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
          "623:         } else {",
          "625:         }",
          "627:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
          "",
          "[Removed Lines]",
          "624:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
          "",
          "[Added Lines]",
          "593:         } else if (remote->tcp_socket) {",
          "594:             raw_request = crm_recv_plaintext(remote->tcp_socket, 0, &request_len, disconnected);",
          "596: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "597:         } else if(remote->tls_session) {",
          "598:             raw_request = crm_recv_tls(remote->tls_session, 0, &request_len, disconnected);",
          "599: #endif",
          "601:             crm_err(\"Unsupported connection type\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "631:             continue;",
          "632:         }",
          "637:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
          "642:             free(raw_request);",
          "643:         } else {",
          "645:         }",
          "648:             return TRUE;",
          "649:         }",
          "650:     }",
          "",
          "[Removed Lines]",
          "634:         if (*recv_buf) {",
          "635:             int old_len = strlen(*recv_buf);",
          "640:             memcpy(*recv_buf + old_len, raw_request, request_len);",
          "647:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
          "",
          "[Added Lines]",
          "611:         if (remote->buffer) {",
          "612:             int old_len = strlen(remote->buffer);",
          "616:             remote->buffer = realloc(remote->buffer, old_len + request_len + 1);",
          "617:             memcpy(remote->buffer + old_len, raw_request, request_len);",
          "622:             remote->buffer = raw_request;",
          "625:         if (strstr(remote->buffer, REMOTE_MSG_TERMINATOR)) {",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lib/lrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lib/lrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: int lrmd_tls_set_key(gnutls_datum_t *key, const char *location);",
          "66: static void lrmd_tls_disconnect(lrmd_t *lrmd);",
          "67: static int global_remote_msg_id = 0;",
          "69: static void lrmd_tls_connection_destroy(gpointer userdata);",
          "70: #endif",
          "",
          "[Removed Lines]",
          "68: int lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "",
          "[Added Lines]",
          "68: int lrmd_tls_send_msg(crm_remote_t *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     crm_ipc_t *ipc;",
          "81: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "82:     char *server;",
          "83:     int port;",
          "84:     gnutls_psk_client_credentials_t psk_cred_c;",
          "90:     GList *pending_notify;",
          "91:     crm_trigger_t *process_notify;",
          "92: #endif",
          "",
          "[Removed Lines]",
          "85:     gnutls_session *session;",
          "86:     int sock;",
          "88:     char *recv_buf;",
          "",
          "[Added Lines]",
          "80:     crm_remote_t *remote;",
          "88:     int sock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "305: lrmd_tls_connected(lrmd_t *lrmd)",
          "306: {",
          "307:     lrmd_private_t *native = lrmd->private;",
          "309:         return TRUE;",
          "310:     }",
          "",
          "[Removed Lines]",
          "308:     if (native->session) {",
          "",
          "[Added Lines]",
          "307:     if (native->remote->tls_session) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:     }",
          "345:     if (rc == 0) {",
          "348:     } else if (rc < 0) {",
          "349:         disconnected = 1;",
          "350:     } else {",
          "353:     }",
          "354:     while (xml) {",
          "355:         lrmd_dispatch_internal(lrmd, xml);",
          "356:         free_xml(xml);",
          "358:     }",
          "360:     if (disconnected) {",
          "",
          "[Removed Lines]",
          "344:     rc = crm_recv_remote_ready(native->session, TRUE, 0);",
          "347:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "351:         crm_recv_remote_msg(native->session, &native->recv_buf, TRUE, -1, &disconnected);",
          "352:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "357:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "",
          "[Added Lines]",
          "343:     rc = crm_remote_ready(native->remote, 0);",
          "346:         xml = crm_remote_parse_buffer(native->remote);",
          "350:         crm_remote_recv(native->remote, -1, &disconnected);",
          "351:         xml = crm_remote_parse_buffer(native->remote);",
          "356:         xml = crm_remote_parse_buffer(native->remote);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "370: int lrmd_poll(lrmd_t *lrmd, int timeout)",
          "371: {",
          "373:     lrmd_private_t *native = lrmd->private;",
          "375:     switch (native->type) {",
          "379: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "381:             if (native->pending_notify) {",
          "382:                 return 1;",
          "384:                 return 1;",
          "385:             }",
          "389: #endif",
          "390:         default:",
          "391:             crm_err(\"Unsupported connection type: %d\", native->type);",
          "392:     }",
          "395: }",
          "",
          "[Removed Lines]",
          "372:     int fd = -1;",
          "376:         case client_type_ipc:",
          "377:             fd = crm_ipc_get_fd(native->ipc);",
          "378:             break;",
          "380:         case client_type_tls:",
          "383:             } else if (native->recv_buf && strstr(native->recv_buf, REMOTE_MSG_TERMINATOR)) {",
          "387:             fd = native->sock;",
          "388:             break;",
          "394:     return crm_recv_remote_ready(GUINT_TO_POINTER(fd), FALSE, 0);",
          "",
          "[Added Lines]",
          "374:         case CRM_CLIENT_IPC:",
          "375:             return crm_ipc_ready(native->ipc);",
          "378:         case CRM_CLIENT_TLS:",
          "381:             } else if (native->remote->buffer",
          "382:                        && strstr(native->remote->buffer, REMOTE_MSG_TERMINATOR)) {",
          "386:             return crm_remote_ready(native->remote, 0);",
          "392:     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:     private = lrmd->private;",
          "406:     switch (private->type) {",
          "408:             while (crm_ipc_ready(private->ipc)) {",
          "409:                 if (crm_ipc_read(private->ipc) > 0) {",
          "410:                     const char *msg = crm_ipc_buffer(private->ipc);",
          "",
          "[Removed Lines]",
          "407:         case client_type_ipc:",
          "",
          "[Added Lines]",
          "405:         case CRM_CLIENT_IPC:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "413:             }",
          "414:             break;",
          "415: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "417:             lrmd_tls_dispatch(lrmd);",
          "418:             break;",
          "419: #endif",
          "",
          "[Removed Lines]",
          "416:         case client_type_tls:",
          "",
          "[Added Lines]",
          "414:         case CRM_CLIENT_TLS:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "481:     crm_info(\"TLS connection destroyed\");",
          "487:     }",
          "488:     if (native->psk_cred_c) {",
          "489:         gnutls_psk_free_client_credentials(native->psk_cred_c);",
          "",
          "[Removed Lines]",
          "483:     if (native->session) {",
          "484:         gnutls_bye(*native->session, GNUTLS_SHUT_RDWR);",
          "485:         gnutls_deinit(*native->session);",
          "486:         gnutls_free(native->session);",
          "",
          "[Added Lines]",
          "481:     if (native->remote->tls_session) {",
          "482:         gnutls_bye(*native->remote->tls_session, GNUTLS_SHUT_RDWR);",
          "483:         gnutls_deinit(*native->remote->tls_session);",
          "484:         gnutls_free(native->remote->tls_session);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "500:         native->pending_notify = NULL;",
          "501:     }",
          "505:     native->source = 0;",
          "506:     native->sock = 0;",
          "507:     native->psk_cred_c = NULL;",
          "509:     native->sock = 0;",
          "511:     if (native->callback) {",
          "",
          "[Removed Lines]",
          "503:     free(native->recv_buf);",
          "504:     native->recv_buf = NULL;",
          "508:     native->session = NULL;",
          "",
          "[Added Lines]",
          "501:     free(native->remote->buffer);",
          "502:     native->remote->buffer = NULL;",
          "506:     native->remote->tls_session = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "517: }",
          "519: int",
          "521: {",
          "522:     int rc = -1;",
          "524:     crm_xml_add_int(msg, F_LRMD_REMOTE_MSG_ID, id);",
          "525:     crm_xml_add(msg, F_LRMD_REMOTE_MSG_TYPE, msg_type);",
          "529:     if (rc < 0) {",
          "530:         crm_err(\"Failed to send remote lrmd tls msg, rc = %d\" , rc);",
          "",
          "[Removed Lines]",
          "520: lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type)",
          "527:     rc = crm_send_remote_msg(session, msg, TRUE);",
          "",
          "[Added Lines]",
          "518: lrmd_tls_send_msg(crm_remote_t *session, xmlNode *msg, uint32_t id, const char *msg_type)",
          "525:     rc = crm_remote_send(session, msg);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "553:     while (!xml) {",
          "556:         if (!xml) {",
          "558:             if (remaining_timeout) {",
          "",
          "[Removed Lines]",
          "555:         xml = crm_parse_remote_buffer(&native->recv_buf);",
          "",
          "[Added Lines]",
          "553:         xml = crm_remote_parse_buffer(native->remote);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "564:                 return NULL;",
          "565:             }",
          "569:             if (!xml || *disconnected) {",
          "570:                 return NULL;",
          "571:             }",
          "",
          "[Removed Lines]",
          "567:             crm_recv_remote_msg(native->session, &native->recv_buf, TRUE, remaining_timeout, disconnected);",
          "568:             xml = crm_parse_remote_buffer(&native->recv_buf);",
          "",
          "[Added Lines]",
          "565:             crm_remote_recv(native->remote, remaining_timeout, disconnected);",
          "566:             xml = crm_remote_parse_buffer(native->remote);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "601:         }",
          "602:     }",
          "605:         mainloop_set_trigger(native->process_notify);",
          "606:     }",
          "",
          "[Removed Lines]",
          "604:     if (native->recv_buf && native->process_notify) {",
          "",
          "[Added Lines]",
          "602:     if (native->remote->buffer && native->process_notify) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "625:         global_remote_msg_id = 1;",
          "626:     }",
          "629:     if (rc <= 0) {",
          "630:         crm_err(\"Remote lrmd send failed, disconnecting\");",
          "631:         lrmd_tls_disconnect(lrmd);",
          "",
          "[Removed Lines]",
          "628:     rc = lrmd_tls_send_msg(native->session, msg, global_remote_msg_id, \"request\");",
          "",
          "[Added Lines]",
          "626:     rc = lrmd_tls_send_msg(native->remote, msg, global_remote_msg_id, \"request\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "660:     lrmd_private_t *native = lrmd->private;",
          "662:     switch (native->type) {",
          "664:             rc = crm_ipc_send(native->ipc, msg, crm_ipc_client_response, timeout, reply);",
          "665:             break;",
          "666: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "668:             rc = lrmd_tls_send_recv(lrmd, msg, timeout, reply);",
          "669:             break;",
          "670: #endif",
          "",
          "[Removed Lines]",
          "663:         case client_type_ipc:",
          "667:         case client_type_tls:",
          "",
          "[Added Lines]",
          "661:         case CRM_CLIENT_IPC:",
          "665:         case CRM_CLIENT_TLS:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "681:     lrmd_private_t *native = lrmd->private;",
          "683:     switch (native->type) {",
          "685:             return crm_ipc_connected(native->ipc);",
          "686:             break;",
          "687: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "689:             return lrmd_tls_connected(lrmd);",
          "690:             break;",
          "691: #endif",
          "",
          "[Removed Lines]",
          "684:         case client_type_ipc:",
          "688:         case client_type_tls:",
          "",
          "[Added Lines]",
          "682:         case CRM_CLIENT_IPC:",
          "686:         case CRM_CLIENT_TLS:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "956:     }",
          "958:     native->sock = sock;",
          "962:         crm_err(\"Session creation for %s:%d failed\", native->server, native->port);",
          "966:         lrmd_tls_connection_destroy(lrmd);",
          "967:         return -1;",
          "968:     }",
          "",
          "[Removed Lines]",
          "959:     native->session = create_psk_tls_session(sock, GNUTLS_CLIENT, native->psk_cred_c);",
          "961:     if (crm_initiate_client_tls_handshake(native->session, LRMD_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "963:         gnutls_deinit(*native->session);",
          "964:         gnutls_free(native->session);",
          "965:         native->session = NULL;",
          "",
          "[Added Lines]",
          "957:     native->remote->tls_session = create_psk_tls_session(sock, GNUTLS_CLIENT, native->psk_cred_c);",
          "959:     if (crm_initiate_client_tls_handshake(native->remote, LRMD_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
          "961:         gnutls_deinit(*native->remote->tls_session);",
          "962:         gnutls_free(native->remote->tls_session);",
          "963:         native->remote->tls_session = NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "992:     lrmd_private_t *native = lrmd->private;",
          "994:     switch (native->type) {",
          "996:             rc = lrmd_ipc_connect(lrmd, fd);",
          "997:             break;",
          "998: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1000:             rc = lrmd_tls_connect(lrmd, fd);",
          "1001:             break;",
          "1002: #endif",
          "",
          "[Removed Lines]",
          "995:         case client_type_ipc:",
          "999:         case client_type_tls:",
          "",
          "[Added Lines]",
          "993:         case CRM_CLIENT_IPC:",
          "997:         case CRM_CLIENT_TLS:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1040: {",
          "1041:     lrmd_private_t *native = lrmd->private;",
          "1048:     }",
          "1050:     if (native->source != NULL) {",
          "",
          "[Removed Lines]",
          "1043:     if (native->session) {",
          "1044:         gnutls_bye(*native->session, GNUTLS_SHUT_RDWR);",
          "1045:         gnutls_deinit(*native->session);",
          "1046:         gnutls_free(native->session);",
          "1047:         native->session = 0;",
          "",
          "[Added Lines]",
          "1041:     if (native->remote->tls_session) {",
          "1042:         gnutls_bye(*native->remote->tls_session, GNUTLS_SHUT_RDWR);",
          "1043:         gnutls_deinit(*native->remote->tls_session);",
          "1044:         gnutls_free(native->remote->tls_session);",
          "1045:         native->remote->tls_session = 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1071:     crm_info(\"Disconnecting from lrmd service\");",
          "1072:     switch (native->type) {",
          "1074:         lrmd_ipc_disconnect(lrmd);",
          "1075:         break;",
          "1076: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1078:             lrmd_tls_disconnect(lrmd);",
          "1079:             break;",
          "1080: #endif",
          "",
          "[Removed Lines]",
          "1073:     case client_type_ipc:",
          "1077:         case client_type_tls:",
          "",
          "[Added Lines]",
          "1071:     case CRM_CLIENT_IPC:",
          "1075:         case CRM_CLIENT_TLS:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1589:     new_lrmd = calloc(1, sizeof(lrmd_t));",
          "1590:     pvt = calloc(1, sizeof(lrmd_private_t));",
          "1591:     new_lrmd->cmds = calloc(1, sizeof(lrmd_api_operations_t));",
          "1594:     new_lrmd->private = pvt;",
          "1596:     new_lrmd->cmds->connect = lrmd_api_connect;",
          "",
          "[Removed Lines]",
          "1593:     pvt->type = client_type_ipc;",
          "",
          "[Added Lines]",
          "1589:     pvt->remote = calloc(1, sizeof(crm_remote_t));",
          "1592:     pvt->type = CRM_CLIENT_IPC;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1620:     lrmd_t *new_lrmd = lrmd_api_new();",
          "1621:     lrmd_private_t *native = new_lrmd->private;",
          "1624:     native->server = strdup(server);",
          "1625:     native->port = port ? port : DEFAULT_REMOTE_PORT;",
          "1626:     return new_lrmd;",
          "",
          "[Removed Lines]",
          "1623:     native->type = client_type_tls;",
          "",
          "[Added Lines]",
          "1622:     native->type = CRM_CLIENT_TLS;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1639:     }",
          "1641:     free(lrmd->cmds);",
          "1644:         lrmd_private_t *native = lrmd->private;",
          "1645:         free(native->server);",
          "1647: #endif",
          "1648:     free(lrmd->private);",
          "1649:     free(lrmd);",
          "1650: }",
          "",
          "[Removed Lines]",
          "1642: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1646:     }",
          "",
          "[Added Lines]",
          "1641:     if (lrmd->private) {",
          "1643: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "1646:         free(native->remote);",
          "1647:     }",
          "",
          "---------------"
        ],
        "lrmd/lrmd_private.h||lrmd/lrmd_private.h": [
          "File: lrmd/lrmd_private.h -> lrmd/lrmd_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: void lrmd_tls_server_destroy(void);",
          "66: extern int lrmd_tls_set_key(gnutls_datum_t *key, const char *location);",
          "67: #endif",
          "",
          "[Removed Lines]",
          "65: extern int lrmd_tls_send_msg(gnutls_session *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "",
          "[Added Lines]",
          "65: extern int lrmd_tls_send_msg(crm_remote_t *session, xmlNode *msg, uint32_t id, const char *msg_type);",
          "",
          "---------------"
        ],
        "lrmd/main.c||lrmd/main.c": [
          "File: lrmd/main.c -> lrmd/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     crm_trace(\"sending reply to client (%s) with msg id %d\", client->id, id);",
          "173:     switch (client->kind) {",
          "175:             return crm_ipcs_send(client, id, reply, FALSE);",
          "176: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "179: #endif",
          "180:         default:",
          "181:             crm_err(\"Unknown lrmd client type %d\" , client->kind);",
          "",
          "[Removed Lines]",
          "174:         case client_type_ipc:",
          "177:         case client_type_tls:",
          "178:             return lrmd_tls_send_msg(client->session, reply, id, \"reply\");",
          "",
          "[Added Lines]",
          "174:         case CRM_CLIENT_IPC:",
          "177:         case CRM_CLIENT_TLS:",
          "178:             return lrmd_tls_send_msg(client->remote, reply, id, \"reply\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187: {",
          "188:     crm_trace(\"sending notify to client (%s)\", client->id);",
          "189:     switch (client->kind) {",
          "191:             if (client->ipcs == NULL) {",
          "192:                 crm_trace(\"Asked to send event to disconnected local client\");",
          "193:                 return -1;",
          "194:             }",
          "195:             return crm_ipcs_send(client, 0, msg, TRUE);",
          "196: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "199:                 crm_trace(\"Asked to send event to disconnected remote client\");",
          "200:                 return -1;",
          "201:             }",
          "203: #endif",
          "204:         default:",
          "205:             crm_err(\"Unknown lrmd client type %d\" , client->kind);",
          "",
          "[Removed Lines]",
          "190:         case client_type_ipc:",
          "197:         case client_type_tls:",
          "198:             if (client->session == NULL) {",
          "202:             return lrmd_tls_send_msg(client->session, msg, 0, \"notify\");",
          "",
          "[Added Lines]",
          "190:         case CRM_CLIENT_IPC:",
          "197:         case CRM_CLIENT_TLS:",
          "198:             if (client->remote == NULL) {",
          "202:             return lrmd_tls_send_msg(client->remote, msg, 0, \"notify\");",
          "",
          "---------------"
        ],
        "lrmd/tls_backend.c||lrmd/tls_backend.c": [
          "File: lrmd/tls_backend.c -> lrmd/tls_backend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     xmlNode *request = NULL;",
          "57:     crm_client_t *client = data;",
          "60:         int rc = 0;",
          "64:         do {",
          "67:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
          "68:                 crm_err(\"Remote lrmd tls handshake failed\");",
          "",
          "[Removed Lines]",
          "59:     if (client->handshake_complete == FALSE) {",
          "65:             rc = gnutls_handshake(*client->session);",
          "",
          "[Added Lines]",
          "59:     if (client->remote->tls_handshake_complete == FALSE) {",
          "65:             rc = gnutls_handshake(*client->remote->tls_session);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         if (rc == 0) {",
          "74:             crm_debug(\"Remote lrmd tls handshake completed\");",
          "78:             }",
          "80:         }",
          "81:         return 0;",
          "82:     }",
          "85:     if (rc == 0) {",
          "87:         return 0;",
          "",
          "[Removed Lines]",
          "75:             client->handshake_complete = TRUE;",
          "76:             if (client->remote_auth_timeout) {",
          "77:                 g_source_remove(client->remote_auth_timeout);",
          "79:             client->remote_auth_timeout = 0;",
          "84:     rc = crm_recv_remote_ready(client->session, TRUE, 0);",
          "",
          "[Added Lines]",
          "75:             client->remote->tls_handshake_complete = TRUE;",
          "76:             if (client->remote->auth_timeout) {",
          "77:                 g_source_remove(client->remote->auth_timeout);",
          "79:             client->remote->auth_timeout = 0;",
          "84:     rc = crm_remote_ready(client->remote, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:         return -1;",
          "91:     }",
          "97:         crm_element_value_int(request, F_LRMD_REMOTE_MSG_ID, &id);",
          "98:         crm_trace(\"processing request from remote client with remote msg id %d\", id);",
          "99:         if (!client->name) {",
          "",
          "[Removed Lines]",
          "93:     crm_recv_remote_msg(client->session, &client->recv_buf, TRUE, -1, &disconnected);",
          "95:     request = crm_parse_remote_buffer(&client->recv_buf);",
          "96:  while (request) {",
          "",
          "[Added Lines]",
          "93:     crm_remote_recv(client->remote, -1, &disconnected);",
          "95:     request = crm_remote_parse_buffer(client->remote);",
          "96:     while (request) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         free_xml(request);",
          "120:     }",
          "122:     if (disconnected) {",
          "",
          "[Removed Lines]",
          "119:         request = crm_parse_remote_buffer(&client->recv_buf);",
          "",
          "[Added Lines]",
          "119:         request = crm_remote_parse_buffer(client->remote);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:         client->name ? client->name : \"<unknown>\",",
          "143:         client->id);",
          "146:         void *sock_ptr;",
          "147:         int csock;",
          "149:         csock = GPOINTER_TO_INT(sock_ptr);",
          "154:         close(csock);",
          "155:     }",
          "",
          "[Removed Lines]",
          "145:     if (client->session) {",
          "148:         sock_ptr = gnutls_transport_get_ptr(*client->session);",
          "151:         gnutls_bye(*client->session, GNUTLS_SHUT_RDWR);",
          "152:         gnutls_deinit(*client->session);",
          "153:         gnutls_free(client->session);",
          "",
          "[Added Lines]",
          "145:     if (client->remote->tls_session) {",
          "148:         sock_ptr = gnutls_transport_get_ptr(*client->remote->tls_session);",
          "151:         gnutls_bye(*client->remote->tls_session, GNUTLS_SHUT_RDWR);",
          "152:         gnutls_deinit(*client->remote->tls_session);",
          "153:         gnutls_free(client->remote->tls_session);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "164: {",
          "165:     crm_client_t *client = data;",
          "170:         return FALSE;",
          "171:     }",
          "175:     crm_err(\"Remote client authentication timed out\");",
          "177:     return FALSE;",
          "",
          "[Removed Lines]",
          "167:     client->remote_auth_timeout = 0;",
          "169:     if (client->handshake_complete == TRUE) {",
          "173:     mainloop_del_fd(client->remote);",
          "174:     client->remote = NULL;",
          "",
          "[Added Lines]",
          "167:     client->remote->auth_timeout = 0;",
          "169:     if (client->remote->tls_handshake_complete == TRUE) {",
          "173:     mainloop_del_fd(client->remote->source);",
          "174:     client->remote->source = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:     }",
          "225:     new_client = calloc(1, sizeof(crm_client_t));",
          "228:     new_client->id = crm_generate_uuid();",
          "230:     crm_notice(\"LRMD client connection established. %p id: %s\", new_client, new_client->id);",
          "233:     g_hash_table_insert(client_connections, new_client->id, new_client);",
          "235:     return TRUE;",
          "",
          "[Removed Lines]",
          "226:     new_client->kind = client_type_tls;",
          "227:     new_client->session = session;",
          "229:     new_client->remote_auth_timeout = g_timeout_add(LRMD_REMOTE_AUTH_TIMEOUT, lrmd_auth_timeout_cb, new_client);",
          "232:     new_client->remote = mainloop_add_fd(\"lrmd-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &lrmd_remote_fd_cb);",
          "",
          "[Added Lines]",
          "226:     new_client->remote = calloc(1, sizeof(crm_remote_t));",
          "227:     new_client->kind = CRM_CLIENT_TLS;",
          "228:     new_client->remote->tls_session = session;",
          "230:     new_client->remote->auth_timeout = g_timeout_add(LRMD_REMOTE_AUTH_TIMEOUT, lrmd_auth_timeout_cb, new_client);",
          "233:     new_client->remote->source = mainloop_add_fd(",
          "234:         \"lrmd-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &lrmd_remote_fd_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a4299e967851a7e8e57dee28d5482818e201aeb",
      "candidate_info": {
        "commit_hash": "1a4299e967851a7e8e57dee28d5482818e201aeb",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/1a4299e967851a7e8e57dee28d5482818e201aeb",
        "files": [
          "lib/common/mainloop.c"
        ],
        "message": "Refactor: mainloop: Saner ordering of reference counting events in mainloop_destroy_trigger()",
        "before_after_code_files": [
          "lib/common/mainloop.c||lib/common/mainloop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ],
          "candidate": [
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/mainloop.c||lib/common/mainloop.c": [
          "File: lib/common/mainloop.c -> lib/common/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:     }",
          "235:     gs = (GSource *)source;",
          "241:     }",
          "243:     return TRUE;",
          "244: }",
          "",
          "[Removed Lines]",
          "236:     crm_trace(\"Destroying %p with ref-count=%u\", source, g_source_refcount(gs));",
          "239:     if(g_source_refcount(gs) > 1) {",
          "240:         crm_info(\"Trigger %p is still referenced %u times\", source, g_source_refcount(gs));",
          "",
          "[Added Lines]",
          "237:     if(g_source_refcount(gs) > 2) {",
          "238:         crm_info(\"Trigger %p is still referenced %u times\", gs, g_source_refcount(gs));",
          "242:     g_source_unref(gs); /* The caller no longer carries a reference to source",
          "",
          "---------------"
        ]
      }
    }
  ]
}