{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20e12e4be37f394672c001fdb9b05c0275731901",
      "candidate_info": {
        "commit_hash": "20e12e4be37f394672c001fdb9b05c0275731901",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/20e12e4be37f394672c001fdb9b05c0275731901",
        "files": [
          "doc/api/events.markdown",
          "lib/events.js",
          "test/simple/test-event-emitter-listeners.js"
        ],
        "message": "events: make .listeners() return a copy\n\nMake EventEmitter.listeners(event) return a copy of the listeners array instead\nof the array itself.\n\nFixes #3442.",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-listeners.js||test/simple/test-event-emitter-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:   if (!isArray(this._events[type])) {",
          "243:     this._events[type] = [this._events[type]];",
          "244:   }",
          "246: };",
          "",
          "[Removed Lines]",
          "245:   return this._events[type];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-listeners.js||test/simple/test-event-emitter-listeners.js": [
          "File: test/simple/test-event-emitter-listeners.js -> test/simple/test-event-emitter-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var events = require('events');",
          "27: function listener() {}",
          "28: function listener2() {}",
          "30: var e1 = new events.EventEmitter();",
          "31: e1.on('foo', listener);",
          "32: var fooListeners = e1.listeners('foo');",
          "33: assert.deepEqual(e1.listeners('foo'), [listener]);",
          "34: e1.removeAllListeners('foo');",
          "35: assert.deepEqual(e1.listeners('foo'), []);",
          "36: assert.deepEqual(fooListeners, [listener]);",
          "38: var e2 = new events.EventEmitter();",
          "39: e2.on('foo', listener);",
          "40: var e2ListenersCopy = e2.listeners('foo');",
          "41: assert.deepEqual(e2ListenersCopy, [listener]);",
          "42: assert.deepEqual(e2.listeners('foo'), [listener]);",
          "43: e2ListenersCopy.push(listener2);",
          "44: assert.deepEqual(e2.listeners('foo'), [listener]);",
          "45: assert.deepEqual(e2ListenersCopy, [listener, listener2]);",
          "47: var e3 = new events.EventEmitter();",
          "48: e3.on('foo', listener);",
          "49: var e3ListenersCopy = e3.listeners('foo');",
          "50: e3.on('foo', listener2);",
          "51: assert.deepEqual(e3.listeners('foo'), [listener, listener2]);",
          "52: assert.deepEqual(e3ListenersCopy, [listener]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3346f6760f3f4e68a825a0826ebc93c2e150092",
      "candidate_info": {
        "commit_hash": "c3346f6760f3f4e68a825a0826ebc93c2e150092",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c3346f6760f3f4e68a825a0826ebc93c2e150092",
        "files": [
          "node.gyp",
          "src/cares_wrap.cc",
          "src/fs_event_wrap.cc",
          "src/handle_wrap.cc",
          "src/node.cc",
          "src/node.h",
          "src/node_crypto.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "src/node_zlib.cc",
          "src/pipe_wrap.cc",
          "src/process_wrap.cc",
          "src/stream_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/tty_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "isolates: isolate-ify the main loop",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "src/fs_event_wrap.cc||src/fs_event_wrap.cc",
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h",
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "src/node_zlib.cc||src/node_zlib.cc",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/process_wrap.cc||src/process_wrap.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/tty_wrap.cc||src/tty_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         'src/node.cc',",
          "75:         'src/node_vars.cc',",
          "76:         'src/node_buffer.cc',",
          "77:         'src/node_constants.cc',",
          "78:         'src/node_extensions.cc',",
          "79:         'src/node_file.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         'src/node_isolate.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         'src/node.h',",
          "98:         'src/node_vars.h',",
          "99:         'src/node_buffer.h',",
          "100:         'src/node_constants.h',",
          "101:         'src/node_crypto.h',",
          "102:         'src/node_extensions.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         'src/node_isolate.h',",
          "",
          "---------------"
        ],
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:   if (status) {",
          "611:     argv[0] = Local<Value>::New(Null());",
          "612:   } else {",
          "",
          "[Removed Lines]",
          "610:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "610:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   hints.ai_family = fam;",
          "711:   hints.ai_socktype = SOCK_STREAM;",
          "714:                          &req_wrap->req_,",
          "715:                          AfterGetAddrInfo,",
          "",
          "[Removed Lines]",
          "713:   int r = uv_getaddrinfo(uv_default_loop(),",
          "",
          "[Added Lines]",
          "713:   int r = uv_getaddrinfo(NODE_LOOP(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "719:   req_wrap->Dispatched();",
          "721:   if (r) {",
          "723:     delete req_wrap;",
          "724:     return scope.Close(v8::Null());",
          "725:   } else {",
          "",
          "[Removed Lines]",
          "722:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "722:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "736:   assert(r == ARES_SUCCESS);",
          "738:   struct ares_options options;",
          "740:   assert(r == 0);",
          "742:   NODE_SET_METHOD(target, \"queryA\", Query<QueryAWrap>);",
          "",
          "[Removed Lines]",
          "739:   uv_ares_init_options(uv_default_loop(), &ares_channel, &options, 0);",
          "",
          "[Added Lines]",
          "739:   uv_ares_init_options(NODE_LOOP(), &ares_channel, &options, 0);",
          "",
          "---------------"
        ],
        "src/fs_event_wrap.cc||src/fs_event_wrap.cc": [
          "File: src/fs_event_wrap.cc -> src/fs_event_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   String::Utf8Value path(args[0]->ToString());",
          "113:   if (r == 0) {",
          "115:     if (!args[1]->IsTrue()) {",
          "117:     }",
          "118:     wrap->initialized_ = true;",
          "119:   } else {",
          "121:   }",
          "123:   return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "112:   int r = uv_fs_event_init(uv_default_loop(), &wrap->handle_, *path, OnEvent, 0);",
          "116:       uv_unref(uv_default_loop());",
          "120:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "112:   int r = uv_fs_event_init(NODE_LOOP(), &wrap->handle_, *path, OnEvent, 0);",
          "116:       uv_unref(NODE_LOOP());",
          "120:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   if (status) {",
          "149:     eventStr = String::Empty();",
          "150:   }",
          "151:   else if (events & UV_RENAME) {",
          "",
          "[Removed Lines]",
          "148:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "148:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   }",
          "72:   wrap->unref = true;",
          "75:   return v8::Undefined();",
          "76: }",
          "",
          "[Removed Lines]",
          "73:   uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "73:   uv_unref(NODE_LOOP());",
          "",
          "---------------"
        ],
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: static void Check(uv_check_t* watcher, int status) {",
          "171:   assert(watcher == &gc_check);",
          "174:   tick_time_head = (tick_time_head + 1) % RPM_SAMPLES;",
          "176:   StartGCTimer();",
          "",
          "[Removed Lines]",
          "173:   tick_times[tick_time_head] = uv_now(uv_default_loop());",
          "",
          "[Added Lines]",
          "173:   tick_times[tick_time_head] = uv_now(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   need_tick_cb = false;",
          "201:   if (uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "202:     uv_idle_stop(&tick_spinner);",
          "204:   }",
          "206:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "203:     uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "203:     uv_unref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:   if (!uv_is_active((uv_handle_t*) &tick_spinner)) {",
          "244:     uv_idle_start(&tick_spinner, Spin);",
          "246:   }",
          "247:   return Undefined();",
          "248: }",
          "",
          "[Removed Lines]",
          "245:     uv_ref(uv_default_loop());",
          "",
          "[Added Lines]",
          "245:     uv_ref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1494:     }",
          "1495:   }",
          "",
          "[Removed Lines]",
          "1497:   double d = uv_now(uv_default_loop()) - TICK_TIME(3);",
          "",
          "[Added Lines]",
          "1497:   double d = uv_now(NODE_LOOP()) - TICK_TIME(3);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1523: v8::Handle<v8::Value> UVCounters(const v8::Arguments& args) {",
          "1524:   HandleScope scope;",
          "1528:   Local<Object> obj = Object::New();",
          "",
          "[Removed Lines]",
          "1526:   uv_counters_t* c = &uv_default_loop()->counters;",
          "",
          "[Added Lines]",
          "1526:   uv_counters_t* c = &NODE_LOOP()->counters;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2566:   RegisterSignalHandler(SIGTERM, SignalExit);",
          "2567: #endif // __POSIX__",
          "2569:   uv_prepare_init(uv_default_loop(), &prepare_tick_watcher);",
          "2570:   uv_prepare_start(&prepare_tick_watcher, PrepareTick);",
          "2573:   uv_check_init(uv_default_loop(), &check_tick_watcher);",
          "2574:   uv_check_start(&check_tick_watcher, node::CheckTick);",
          "2577:   uv_idle_init(uv_default_loop(), &tick_spinner);",
          "2580:   uv_check_init(uv_default_loop(), &gc_check);",
          "2581:   uv_check_start(&gc_check, node::Check);",
          "2584:   uv_idle_init(uv_default_loop(), &gc_idle);",
          "2587:   uv_timer_init(uv_default_loop(), &gc_timer);",
          "2590:   V8::SetFatalErrorHandler(node::OnFatalError);",
          "",
          "[Removed Lines]",
          "2571:   uv_unref(uv_default_loop());",
          "2575:   uv_unref(uv_default_loop());",
          "2578:   uv_unref(uv_default_loop());",
          "2582:   uv_unref(uv_default_loop());",
          "2585:   uv_unref(uv_default_loop());",
          "2588:   uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "2570:   uv_loop_t* const loop = uv_default_loop();",
          "2574:   uv_unref(loop);",
          "2578:   uv_unref(loop);",
          "2581:   uv_unref(loop);",
          "2585:   uv_unref(loop);",
          "2588:   uv_unref(loop);",
          "2591:   uv_unref(loop);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2610:   if (use_debug_agent) {",
          "",
          "[Removed Lines]",
          "2601:   uv_async_init(uv_default_loop(), &debug_watcher, node::DebugMessageCallback);",
          "2603:   uv_unref(uv_default_loop());",
          "2607:   node_isolate = Isolate::GetCurrent();",
          "",
          "[Added Lines]",
          "2604:   uv_async_init(loop, &debug_watcher, node::DebugMessageCallback);",
          "2606:   uv_unref(loop);",
          "2610:   node_isolate = v8::Isolate::GetCurrent();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2646:   Persistent<v8::Context> context = v8::Context::New();",
          "2647:   v8::Context::Scope context_scope(context);",
          "2649:   Handle<Object> process_l = SetupProcessObject(argc, argv);",
          "2650:   v8_typed_array::AttachBindings(context->Global());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2653:   Isolate::New(uv_default_loop());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2663:   EmitExit(process_l);",
          "",
          "[Removed Lines]",
          "2661:   uv_run(uv_default_loop());",
          "",
          "[Added Lines]",
          "2668:   uv_run(NODE_LOOP());",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <sys/stat.h>",
          "65: #include <assert.h>",
          "67: #include <node_object_wrap.h>",
          "69: #ifndef offset_of",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #include <node_isolate.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: #define NODE_STRINGIFY_HELPER(n) #n",
          "88: #endif",
          "90: namespace node {",
          "92: int Start(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: #define NODE_LOOP() (node::Isolate::GetCurrent()->GetLoop())",
          "",
          "---------------"
        ],
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4118:   req = new uv_work_t();",
          "4119:   req->data = request;",
          "4121:   return Undefined();",
          "4123: err:",
          "",
          "[Removed Lines]",
          "4120:   uv_queue_work(uv_default_loop(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "[Added Lines]",
          "4120:   uv_queue_work(NODE_LOOP(), req, EIO_PBKDF2, EIO_PBKDF2After);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4239:     Local<Function> callback_v = Local<Function>(Function::Cast(*args[1]));",
          "4240:     req->callback_ = Persistent<Function>::New(callback_v);",
          "4243:                   &req->work_req_,",
          "4244:                   RandomBytesWork<generator>,",
          "4245:                   RandomBytesAfter<generator>);",
          "",
          "[Removed Lines]",
          "4242:     uv_queue_work(uv_default_loop(),",
          "",
          "[Added Lines]",
          "4243:     uv_queue_work(NODE_LOOP(),",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"node_isolate.h\"",
          "23: #include <assert.h>",
          "26: namespace node {",
          "29: Isolate* Isolate::New(uv_loop_t* loop) {",
          "30:   return new Isolate(loop);",
          "31: }",
          "34: Isolate::Isolate(uv_loop_t* loop) {",
          "35:   loop_ = loop;",
          "36:   isolate_ = v8::Isolate::GetCurrent();",
          "37:   assert(isolate_->GetData() == NULL);",
          "38:   isolate_->SetData(this);",
          "39: }",
          "42: } // namespace node",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_NODE_ISOLATE_H_",
          "23: #define SRC_NODE_ISOLATE_H_",
          "25: #include <v8.h>",
          "26: #include <uv.h>",
          "28: #ifdef NDEBUG",
          "29: # define NODE_ISOLATE_CHECK(ptr) ((void) (ptr))",
          "30: #else",
          "31: # include <assert.h>",
          "32: # define NODE_ISOLATE_CHECK(ptr)                        \\",
          "33:   do {                                                  \\",
          "34:     node::Isolate* data_ = node::Isolate::GetCurrent(); \\",
          "35:     assert(data_ == (ptr));                             \\",
          "36:   }                                                     \\",
          "37:   while (0)",
          "38: #endif",
          "41: namespace node {",
          "43: class Isolate {",
          "44: public:",
          "45:   static Isolate* New(uv_loop_t* loop);",
          "47:   static Isolate* GetCurrent() {",
          "48:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "49:   }",
          "51:   uv_loop_t* GetLoop() {",
          "52:     NODE_ISOLATE_CHECK(this);",
          "53:     return loop_;",
          "54:   }",
          "56:   operator v8::Isolate*() {",
          "57:     NODE_ISOLATE_CHECK(this);",
          "58:     return isolate_;",
          "59:   }",
          "61: private:",
          "62:   Isolate(uv_loop_t* loop);",
          "63:   v8::Isolate* isolate_;",
          "64:   uv_loop_t* loop_;",
          "65: };",
          "67: } // namespace node",
          "69: #endif // SRC_NODE_ISOLATE_H_",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     uv_work_t* work_req = new uv_work_t();",
          "134:     work_req->data = req_wrap;",
          "137:                   work_req,",
          "138:                   ZCtx<mode>::Process,",
          "139:                   ZCtx<mode>::After);",
          "",
          "[Removed Lines]",
          "136:     uv_queue_work(uv_default_loop(),",
          "",
          "[Added Lines]",
          "136:     uv_queue_work(NODE_LOOP(),",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: PipeWrap::PipeWrap(Handle<Object> object, bool ipc)",
          "125:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "127:   assert(r == 0); // How do we proxy this error up to javascript?",
          "129:   handle_.data = reinterpret_cast<void*>(this);",
          "",
          "[Removed Lines]",
          "126:   int r = uv_pipe_init(uv_default_loop(), &handle_, ipc);",
          "",
          "[Added Lines]",
          "126:   int r = uv_pipe_init(NODE_LOOP(), &handle_, ipc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   int r = uv_pipe_bind(&wrap->handle_, *name);",
          "146:   return scope.Close(Integer::New(r));",
          "147: }",
          "",
          "[Removed Lines]",
          "144:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "144:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "177:   return scope.Close(Integer::New(r));",
          "178: }",
          "",
          "[Removed Lines]",
          "175:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "175:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:   assert(wrap->object_.IsEmpty() == false);",
          "227:   if (status) {",
          "229:   }",
          "231:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         Get(String::NewSymbol(\"windowsVerbatimArguments\"))->IsTrue();",
          "176: #endif",
          "180:     wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "181:     assert(wrap->process_.data == wrap);",
          "",
          "[Removed Lines]",
          "178:     int r = uv_spawn(uv_default_loop(), &wrap->process_, options);",
          "",
          "[Added Lines]",
          "178:     int r = uv_spawn(NODE_LOOP(), &wrap->process_, options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:       delete [] options.env;",
          "196:     }",
          "200:     return scope.Close(Integer::New(r));",
          "201:   }",
          "",
          "[Removed Lines]",
          "198:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "198:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:     int r = uv_process_kill(&wrap->process_, signal);",
          "214:     return scope.Close(Integer::New(r));",
          "215:   }",
          "",
          "[Removed Lines]",
          "212:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "212:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   }",
          "137:   return scope.Close(Integer::New(r));",
          "138: }",
          "",
          "[Removed Lines]",
          "135:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "135:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   int r = uv_read_stop(wrap->stream_);",
          "151:   return scope.Close(Integer::New(r));",
          "152: }",
          "",
          "[Removed Lines]",
          "149:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "149:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:       slab_used -= buf.len;",
          "226:     }",
          "229:     MakeCallback(wrap->object_, \"onread\", 0, NULL);",
          "230:     return;",
          "231:   }",
          "",
          "[Removed Lines]",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "228:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:   wrap->UpdateWriteQueueSize();",
          "340:   if (r) {",
          "342:     delete req_wrap;",
          "343:     return scope.Close(v8::Null());",
          "344:   } else {",
          "",
          "[Removed Lines]",
          "341:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "341:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   assert(wrap->object_.IsEmpty() == false);",
          "360:   if (status) {",
          "362:   }",
          "364:   wrap->UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "361:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "361:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "388:   req_wrap->Dispatched();",
          "390:   if (r) {",
          "392:     delete req_wrap;",
          "393:     return scope.Close(v8::Null());",
          "394:   } else {",
          "",
          "[Removed Lines]",
          "391:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "391:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:   HandleScope scope;",
          "410:   if (status) {",
          "412:   }",
          "414:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "411:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "411:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: TCPWrap::TCPWrap(Handle<Object> object)",
          "156:     : StreamWrap(object, (uv_stream_t*) &handle_) {",
          "158:   assert(r == 0); // How do we proxy this error up to javascript?",
          "160:   UpdateWriteQueueSize();",
          "",
          "[Removed Lines]",
          "157:   int r = uv_tcp_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "157:   int r = uv_tcp_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   Local<Object> sockname = Object::New();",
          "184:   if (r != 0) {",
          "186:   } else {",
          "187:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "185:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "185:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:   Local<Object> sockname = Object::New();",
          "226:   if (r != 0) {",
          "228:   } else {",
          "229:     family = address.ss_family;",
          "",
          "[Removed Lines]",
          "227:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "227:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:   int r = uv_tcp_nodelay(&wrap->handle_, 1);",
          "259:   if (r)",
          "262:   return Undefined();",
          "263: }",
          "",
          "[Removed Lines]",
          "260:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "260:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:   int r = uv_tcp_keepalive(&wrap->handle_, enable, delay);",
          "275:   if (r)",
          "278:   return Undefined();",
          "279: }",
          "",
          "[Removed Lines]",
          "276:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "276:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:   int r = uv_tcp_simultaneous_accepts(&wrap->handle_, enable ? 1 : 0);",
          "291:   if (r)",
          "294:   return Undefined();",
          "295: }",
          "",
          "[Removed Lines]",
          "292:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "292:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:   int r = uv_tcp_bind(&wrap->handle_, address);",
          "313:   return scope.Close(Integer::New(r));",
          "314: }",
          "",
          "[Removed Lines]",
          "311:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "311:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:   int r = uv_tcp_bind6(&wrap->handle_, address);",
          "331:   return scope.Close(Integer::New(r));",
          "332: }",
          "",
          "[Removed Lines]",
          "329:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "329:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "342:   int r = uv_listen((uv_stream_t*)&wrap->handle_, backlog, OnConnection);",
          "347:   return scope.Close(Integer::New(r));",
          "348: }",
          "",
          "[Removed Lines]",
          "345:   if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "345:   if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "378:     argv[0] = client_obj;",
          "379:   } else {",
          "381:     argv[0] = v8::Null();",
          "382:   }",
          "",
          "[Removed Lines]",
          "380:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "380:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "396:   assert(wrap->object_.IsEmpty() == false);",
          "398:   if (status) {",
          "400:   }",
          "402:   Local<Value> argv[3] = {",
          "",
          "[Removed Lines]",
          "399:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "399:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432:   req_wrap->Dispatched();",
          "434:   if (r) {",
          "436:     delete req_wrap;",
          "437:     return scope.Close(v8::Null());",
          "438:   } else {",
          "",
          "[Removed Lines]",
          "435:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "435:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "459:   req_wrap->Dispatched();",
          "461:   if (r) {",
          "463:     delete req_wrap;",
          "464:     return scope.Close(v8::Null());",
          "465:   } else {",
          "",
          "[Removed Lines]",
          "462:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "462:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:       : HandleWrap(object, (uv_handle_t*) &handle_) {",
          "92:     active_ = false;",
          "95:     assert(r == 0);",
          "97:     handle_.data = this;",
          "",
          "[Removed Lines]",
          "94:     int r = uv_timer_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "94:     int r = uv_timer_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   }",
          "105:   ~TimerWrap() {",
          "107:   }",
          "109:   void StateChange() {",
          "",
          "[Removed Lines]",
          "102:     uv_unref(uv_default_loop());",
          "106:     if (!active_) uv_ref(uv_default_loop());",
          "",
          "[Added Lines]",
          "102:     uv_unref(NODE_LOOP());",
          "106:     if (!active_) uv_ref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:     if (!was_active && active_) {",
          "117:     } else if (was_active && !active_) {",
          "121:     }",
          "122:   }",
          "",
          "[Removed Lines]",
          "116:       uv_ref(uv_default_loop());",
          "120:       uv_unref(uv_default_loop());",
          "",
          "[Added Lines]",
          "116:       uv_ref(NODE_LOOP());",
          "120:       uv_unref(NODE_LOOP());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     int r = uv_timer_start(&wrap->handle_, OnTimeout, timeout, repeat);",
          "137:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "135:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "135:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:     int r = uv_timer_stop(&wrap->handle_);",
          "151:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "149:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "149:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:     int r = uv_timer_again(&wrap->handle_);",
          "165:     wrap->StateChange();",
          "",
          "[Removed Lines]",
          "163:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "163:     if (r) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:     int64_t repeat = uv_timer_get_repeat(&wrap->handle_);",
          "191:     return scope.Close(Integer::New(repeat));",
          "192:   }",
          "",
          "[Removed Lines]",
          "189:     if (repeat < 0) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "189:     if (repeat < 0) SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ],
        "src/tty_wrap.cc||src/tty_wrap.cc": [
          "File: src/tty_wrap.cc -> src/tty_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     int r = uv_tty_get_winsize(&wrap->handle_, &width, &height);",
          "126:     if (r) {",
          "128:       return v8::Undefined();",
          "129:     }",
          "",
          "[Removed Lines]",
          "127:       SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "127:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     int r = uv_tty_set_mode(&wrap->handle_, args[0]->IsTrue());",
          "145:     if (r) {",
          "147:     }",
          "149:     return scope.Close(Integer::New(r));",
          "",
          "[Removed Lines]",
          "146:       SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "146:       SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:   TTYWrap(Handle<Object> object, int fd, bool readable)",
          "171:       : StreamWrap(object, (uv_stream_t*)&handle_) {",
          "173:   }",
          "175:   uv_tty_t handle_;",
          "",
          "[Removed Lines]",
          "172:     uv_tty_init(uv_default_loop(), &handle_, fd, readable);",
          "",
          "[Added Lines]",
          "172:     uv_tty_init(NODE_LOOP(), &handle_, fd, readable);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: UDPWrap::UDPWrap(Handle<Object> object): HandleWrap(object,",
          "105:                                                     (uv_handle_t*)&handle_) {",
          "107:   assert(r == 0); // can't fail anyway",
          "108:   handle_.data = reinterpret_cast<void*>(this);",
          "109: }",
          "",
          "[Removed Lines]",
          "106:   int r = uv_udp_init(uv_default_loop(), &handle_);",
          "",
          "[Added Lines]",
          "106:   int r = uv_udp_init(NODE_LOOP(), &handle_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   }",
          "178:   if (r)",
          "181:   return scope.Close(Integer::New(r));",
          "182: }",
          "",
          "[Removed Lines]",
          "179:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "179:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   req_wrap->Dispatched();",
          "235:   if (r) {",
          "237:     delete req_wrap;",
          "238:     return Null();",
          "239:   }",
          "",
          "[Removed Lines]",
          "236:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "236:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:   int r = uv_udp_recv_start(&wrap->handle_, OnAlloc, OnRecv);",
          "265:     return False();",
          "266:   }",
          "",
          "[Removed Lines]",
          "263:   if (r && uv_last_error(uv_default_loop()).code != UV_EALREADY) {",
          "264:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "263:   if (r && uv_last_error(NODE_LOOP()).code != UV_EALREADY) {",
          "264:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "297:     return scope.Close(sockname);",
          "298:   }",
          "299:   else {",
          "301:     return Null();",
          "302:   }",
          "303: }",
          "",
          "[Removed Lines]",
          "300:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "300:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "316:   assert(wrap->object_.IsEmpty() == false);",
          "318:   if (status) {",
          "320:   }",
          "322:   Local<Value> argv[4] = {",
          "",
          "[Removed Lines]",
          "319:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "319:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "364:   };",
          "366:   if (nread == -1) {",
          "368:   }",
          "369:   else {",
          "370:     Local<Object> rinfo = Object::New();",
          "",
          "[Removed Lines]",
          "367:     SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "367:     SetErrno(uv_last_error(NODE_LOOP()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a98e845516204f59b682228a96289cd884769242",
      "candidate_info": {
        "commit_hash": "a98e845516204f59b682228a96289cd884769242",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a98e845516204f59b682228a96289cd884769242",
        "files": [
          "lib/http.js"
        ],
        "message": "Break up huge function in ClientRequest.onSocket\n\nConflicts:\n\n\tlib/http.js",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1261:     if (parser.socket) {",
          "1262:       parser.socket.onend = null;",
          "1263:       parser.socket.ondata = null;",
          "1264:     }",
          "1265:     parser.socket = null;",
          "1266:     parser.incoming = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1272:   }",
          "1273: }",
          "1276: ClientRequest.prototype.onSocket = function(socket) {",
          "1277:   var req = this;",
          "1278:   process.nextTick(function() {",
          "1279:     var parser = parsers.alloc();",
          "1280:     req.socket = socket;",
          "1281:     req.connection = socket;",
          "1283:     parser.socket = socket;",
          "1284:     parser.incoming = null;",
          "1285:     req.parser = parser;",
          "",
          "[Removed Lines]",
          "1282:     parser.reinitialize(HTTPParser.RESPONSE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1293:     }",
          "1295:     socket._httpMessage = req;",
          "1480:     req.emit('socket', socket);",
          "1481:   });",
          "1483: };",
          "1485: ClientRequest.prototype._deferToConnect = function(method, arguments_, cb) {",
          "",
          "[Removed Lines]",
          "1297:     httpSocketSetup(socket);",
          "1299:     function errorListener(err) {",
          "1300:       debug('HTTP SOCKET ERROR: ' + err.message + '\\n' + err.stack);",
          "1301:       if (req) {",
          "1302:         req.emit('error', err);",
          "1305:         req._hadError = true;",
          "1306:       }",
          "1307:       if (parser) {",
          "1308:         parser.finish();",
          "1309:         freeParser(parser, req);",
          "1310:       }",
          "1311:       socket.destroy();",
          "1312:     }",
          "1314:     socket.on('error', errorListener);",
          "1316:     var timeoutListener = function() {",
          "1317:       req.emit('timeout');",
          "1318:       if (parser) {",
          "1319:         parser.finish();",
          "1320:         freeParser();",
          "1321:       }",
          "1322:       socket.destroy();",
          "1323:     }",
          "1325:     socket.on('timeout', timeoutListener);",
          "1327:     socket.ondata = function(d, start, end) {",
          "1328:       var ret = parser.execute(d, start, end - start);",
          "1329:       if (ret instanceof Error) {",
          "1330:         debug('parse error');",
          "1331:         freeParser(parser, req);",
          "1332:         socket.destroy(ret);",
          "1333:       } else if (parser.incoming && parser.incoming.upgrade) {",
          "1335:         var bytesParsed = ret;",
          "1336:         var res = parser.incoming;",
          "1337:         req.res = res;",
          "1339:         socket.ondata = null;",
          "1340:         socket.onend = null;",
          "1341:         parser.finish();",
          "1344:         var bodyHead = d.slice(start + bytesParsed, end);",
          "1346:         var eventName = req.method === 'CONNECT' ? 'connect' : 'upgrade';",
          "1347:         if (req.listeners(eventName).length) {",
          "1348:           req.upgradeOrConnect = true;",
          "1351:           socket.emit('agentRemove');",
          "1352:           socket.removeListener('close', closeListener);",
          "1353:           socket.removeListener('error', errorListener);",
          "1354:           socket.removeListener('timeout', timeoutListener);",
          "1356:           req.emit(eventName, res, socket, bodyHead);",
          "1357:           req.emit('close');",
          "1358:         } else {",
          "1360:           socket.destroy();",
          "1361:         }",
          "1362:         freeParser(parser, req);",
          "1363:       } else if (parser.incoming && parser.incoming.complete &&",
          "1367:                  parser.incoming.statusCode !== 100) {",
          "1368:         freeParser(parser, req);",
          "1369:       }",
          "1370:     };",
          "1372:     socket.onend = function() {",
          "1373:       if (!req.res) {",
          "1376:         req.emit('error', createHangUpError());",
          "1377:         req._hadError = true;",
          "1378:       }",
          "1379:       if (parser) {",
          "1380:         parser.finish();",
          "1381:         freeParser(parser, req);",
          "1382:       }",
          "1383:       socket.destroy();",
          "1384:     };",
          "1386:     var closeListener = function() {",
          "1387:       debug('HTTP socket close');",
          "1388:       var req = socket._httpMessage;",
          "1389:       req.emit('close');",
          "1390:       if (req.res && req.res.readable) {",
          "1392:         req.res.emit('aborted');",
          "1393:         var res = req.res;",
          "1394:         req.res._emitPending(function() {",
          "1395:           res._emitEnd();",
          "1396:           res.emit('close');",
          "1397:           res = null;",
          "1398:         });",
          "1399:       } else if (!req.res && !req._hadError) {",
          "1403:         req.emit('error', createHangUpError());",
          "1404:       }",
          "1410:       req = null;",
          "1411:       socket._httpMessage = null;",
          "1412:     }",
          "1413:     socket.on('close', closeListener);",
          "1415:     parser.onIncoming = function(res, shouldKeepAlive) {",
          "1416:       debug('AGENT incoming response!');",
          "1418:       if (req.res) {",
          "1421:         socket.destroy();",
          "1422:         return;",
          "1423:       }",
          "1424:       req.res = res;",
          "1427:       if (req.method === 'CONNECT') {",
          "1428:         res.upgrade = true;",
          "1429:         return true; // skip body",
          "1430:       }",
          "1437:       var isHeadResponse = req.method == 'HEAD';",
          "1438:       debug('AGENT isHeadResponse ' + isHeadResponse);",
          "1440:       if (res.statusCode == 100) {",
          "1442:         delete req.res; // Clear res so that we don't hit double-responses.",
          "1443:         req.emit('continue');",
          "1444:         return true;",
          "1445:       }",
          "1447:       if (req.shouldKeepAlive && !shouldKeepAlive && !req.upgradeOrConnect) {",
          "1451:         req.shouldKeepAlive = false;",
          "1452:       }",
          "1454:       res.addListener('end', function() {",
          "1455:         if (!req.shouldKeepAlive) {",
          "1456:           if (socket.writable) {",
          "1457:             debug('AGENT socket.destroySoon()');",
          "1458:             socket.destroySoon();",
          "1459:           }",
          "1460:           assert(!socket.writable);",
          "1461:         } else {",
          "1462:           debug('AGENT socket keep-alive');",
          "1463:         }",
          "1464:       });",
          "1466:       DTRACE_HTTP_CLIENT_RESPONSE(socket, req);",
          "1467:       req.emit('response', res);",
          "1469:       res.on('end', function() {",
          "1470:         if (req.shouldKeepAlive) {",
          "1471:           socket.removeListener('close', closeListener);",
          "1472:           socket.removeListener('error', errorListener);",
          "1473:           socket.removeListener('timeout', timeoutListener);",
          "1474:           socket.emit('free');",
          "1475:         }",
          "1476:       });",
          "1478:       return isHeadResponse;",
          "1479:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d43f852e3428fe231ce662f94b154ae51254e0",
      "candidate_info": {
        "commit_hash": "19d43f852e3428fe231ce662f94b154ae51254e0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/19d43f852e3428fe231ce662f94b154ae51254e0",
        "files": [
          "src/pipe_wrap.cc",
          "src/tcp_wrap.cc",
          "src/timer_wrap.cc",
          "src/udp_wrap.cc"
        ],
        "message": "export HandleWrap Unref Ref in tcp/udp/timer/pipe",
        "before_after_code_files": [
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc",
          "src/timer_wrap.cc||src/timer_wrap.cc",
          "src/udp_wrap.cc||src/udp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   NODE_SET_PROTOTYPE_METHOD(t, \"close\", HandleWrap::Close);",
          "86:   NODE_SET_PROTOTYPE_METHOD(t, \"unref\", HandleWrap::Unref);",
          "88:   NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "89:   NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   NODE_SET_PROTOTYPE_METHOD(t, \"ref\", HandleWrap::Ref);",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   NODE_SET_PROTOTYPE_METHOD(t, \"close\", HandleWrap::Close);",
          "99:   NODE_SET_PROTOTYPE_METHOD(t, \"readStart\", StreamWrap::ReadStart);",
          "100:   NODE_SET_PROTOTYPE_METHOD(t, \"readStop\", StreamWrap::ReadStop);",
          "101:   NODE_SET_PROTOTYPE_METHOD(t, \"shutdown\", StreamWrap::Shutdown);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   NODE_SET_PROTOTYPE_METHOD(t, \"ref\", HandleWrap::Ref);",
          "100:   NODE_SET_PROTOTYPE_METHOD(t, \"unref\", HandleWrap::Unref);",
          "",
          "---------------"
        ],
        "src/timer_wrap.cc||src/timer_wrap.cc": [
          "File: src/timer_wrap.cc -> src/timer_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     constructor->SetClassName(String::NewSymbol(\"Timer\"));",
          "54:     NODE_SET_PROTOTYPE_METHOD(constructor, \"close\", HandleWrap::Close);",
          "56:     NODE_SET_PROTOTYPE_METHOD(constructor, \"start\", Start);",
          "57:     NODE_SET_PROTOTYPE_METHOD(constructor, \"stop\", Stop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     NODE_SET_PROTOTYPE_METHOD(constructor, \"ref\", HandleWrap::Ref);",
          "56:     NODE_SET_PROTOTYPE_METHOD(constructor, \"unref\", HandleWrap::Unref);",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   NODE_SET_PROTOTYPE_METHOD(t, \"setBroadcast\", SetBroadcast);",
          "111:   NODE_SET_PROTOTYPE_METHOD(t, \"setTTL\", SetTTL);",
          "113:   target->Set(String::NewSymbol(\"UDP\"),",
          "114:               Persistent<FunctionTemplate>::New(t)->GetFunction());",
          "115: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   NODE_SET_PROTOTYPE_METHOD(t, \"ref\", HandleWrap::Ref);",
          "114:   NODE_SET_PROTOTYPE_METHOD(t, \"unref\", HandleWrap::Unref);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f640c5d35cba96634cd8176a525a1d876e361a61",
      "candidate_info": {
        "commit_hash": "f640c5d35cba96634cd8176a525a1d876e361a61",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f640c5d35cba96634cd8176a525a1d876e361a61",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.08.15, Version 0.8.7 (Stable)\n\n* npm: Upgrade to 1.1.49\n\n* website: download page (Golo Roden)\n\n* crypto: fix uninitialized memory access in openssl (Ben Noordhuis)\n\n* buffer, crypto: fix buffer decoding (Ben Noordhuis)\n\n* build: compile with -fno-tree-vrp when gcc >= 4.0 (Ben Noordhuis)\n\n* tls: handle multiple CN fields when verifying cert (Ben Noordhuis)\n\n* doc: remove unused util from child_process (Kyle Robinson Young)\n\n* build: rework -fvisibility=hidden detection (Ben Noordhuis)\n\n* windows: don't duplicate invalid stdio handles (Bert Belder)\n\n* windows: fix typos in process-stdio.c (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "27: #define NODE_PATCH_VERSION 7",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}