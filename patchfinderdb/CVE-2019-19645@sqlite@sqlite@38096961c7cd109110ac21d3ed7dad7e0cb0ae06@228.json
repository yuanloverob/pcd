{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dfa15270c4108fedd817a99751fc73d43d7fb29d",
      "candidate_info": {
        "commit_hash": "dfa15270c4108fedd817a99751fc73d43d7fb29d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfa15270c4108fedd817a99751fc73d43d7fb29d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "test/gencol1.test"
        ],
        "message": "Change the way generated columns are computed so that no column is computed inside branch code that might not be taken.  Ticket [4fc08501f4e56692]\n\nFossilOrigin-Name: 9e07b48934e9a972dcf62e3538b3b21ffa044c553feba0441675ac0bbe13bcb2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bc8205dd9c1657c736a9c6a1a90dd9dad442accfbb77d296eaae2c09ab46bd1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3645:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "3646: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3647:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3658:             return iSrc;",
          "3659:           }else",
          "",
          "[Removed Lines]",
          "3648:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3649:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3650:                               pCol->zName);",
          "3651:               return 0;",
          "3652:             }",
          "3653:             pCol->colFlags |= COLFLAG_BUSY;",
          "3654:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3655:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "3656:             }",
          "3657:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "",
          "[Added Lines]",
          "3648:             sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   return 0;",
          "202: }",
          "204: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: static int exprColumnFlagUnion(Walker *pWalker, Expr *pExpr){",
          "208:   if( pExpr->op==TK_COLUMN ){",
          "209:     pWalker->eCode |= pWalker->u.pTab->aCol[pExpr->iColumn].colFlags;",
          "210:   }",
          "211:   return WRC_Continue;",
          "212: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "",
          "[Removed Lines]",
          "218:   int nv;",
          "",
          "[Added Lines]",
          "228:   Walker w;",
          "229:   Column *pRedo;",
          "230:   int eProgress;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "228:     }",
          "229:   }",
          "235:   pParse->iSelfTab = -iRegStore;",
          "249:       }",
          "251:     }",
          "253:   }",
          "254:   pParse->iSelfTab = 0;",
          "255: }",
          "",
          "[Removed Lines]",
          "236:   for(i=nv=0; i<pTab->nCol; i++){",
          "237:     u32 colFlags = pTab->aCol[i].colFlags;",
          "238:     if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "239:       assert( colFlags & COLFLAG_GENERATED );",
          "240:       if( colFlags & COLFLAG_VIRTUAL ){",
          "242:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "243:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i],",
          "244:                                        iRegStore+pTab->nNVCol+nv);",
          "245:       }else{",
          "247:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "248:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i], iRegStore+i-nv);",
          "250:       pTab->aCol[i].colFlags &= ~COLFLAG_NOTAVAIL;",
          "252:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "",
          "[Added Lines]",
          "244:   w.u.pTab = pTab;",
          "245:   w.xExprCallback = exprColumnFlagUnion;",
          "246:   w.xSelectCallback = 0;",
          "247:   w.xSelectCallback2 = 0;",
          "255:   do{",
          "256:     eProgress = 0;",
          "257:     pRedo = 0;",
          "258:     for(i=0; i<pTab->nCol; i++){",
          "259:       Column *pCol = pTab->aCol + i;",
          "260:       if( (pCol->colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "261:         int x;",
          "262:         pCol->colFlags |= COLFLAG_BUSY;",
          "263:         w.eCode = 0;",
          "264:         sqlite3WalkExpr(&w, pCol->pDflt);",
          "265:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "266:         if( w.eCode & COLFLAG_NOTAVAIL ){",
          "267:           pRedo = pCol;",
          "268:           continue;",
          "269:         }",
          "270:         eProgress = 1;",
          "271:         assert( pCol->colFlags & COLFLAG_GENERATED );",
          "272:         x = sqlite3TableColumnToStorage(pTab, i) + iRegStore;",
          "273:         sqlite3ExprCodeGeneratedColumn(pParse, pCol, x);",
          "274:         pCol->colFlags &= ~COLFLAG_NOTAVAIL;",
          "277:   }while( pRedo && eProgress );",
          "278:   if( pRedo ){",
          "279:     sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pRedo->zName);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "225: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: # 2019-11-06 ticket 4fc08501f4e56692",
          "226: do_execsql_test gencol1-8.10 {",
          "227:   DROP TABLE IF EXISTS t0;",
          "228:   CREATE TABLE t0(",
          "229:     c0 AS (('a', 9) < ('b', c1)),",
          "230:     c1 AS (1),",
          "231:     c2 CHECK (1 = c1)",
          "232:   );",
          "233:   INSERT INTO t0 VALUES (0),(99);",
          "234:   SELECT * FROM t0;",
          "235: } {1 1 0 1 1 99}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
      "candidate_info": {
        "commit_hash": "94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94c7ab5038510e3eb84920f5ef2b0ec704d7b470",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c"
        ],
        "message": "In the test_vfs.c VFS, if a Tcl xWrite script returns \"SQLITE_OMIT\", silently omit the write() call.\n\nFossilOrigin-Name: 8b5a621e2ee3bb9d7d4f905217872e7e59153be9477aaa626cea287d56710b5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e859d3184606dd453b9fc4ee388922d7be4b61aad84a66ac82107935ffd56f3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "237:     { SQLITE_READONLY_CANTINIT, \"SQLITE_READONLY_CANTINIT\"   },",
          "238:   };",
          "240:   const char *z;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     { -1,              \"SQLITE_OMIT\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:         Tcl_NewWideIntObj(iOfst), Tcl_NewIntObj(iAmt)",
          "383:     );",
          "384:     tvfsResultCode(p, &rc);",
          "385:   }",
          "387:   if( rc==SQLITE_OK && tvfsInjectFullerr(p) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     if( rc<0 ) return SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
      "candidate_info": {
        "commit_hash": "c310c53e01388c8477c9863767ab779cf941a59f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c310c53e01388c8477c9863767ab779cf941a59f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Always include OP_Explain opcodes in the bytecode when SQLITE_DEBUG is enabled.\n\nFossilOrigin-Name: d8c1235c02b745138ac2b12e8bbb00dda4cac321176be92a2fa9547be029b3d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: void sqlite3VdbeExplain(Parse *pParse, u8 bPush, const char *zFmt, ...){",
          "360:     char *zMsg;",
          "361:     Vdbe *v;",
          "362:     va_list ap;",
          "",
          "[Removed Lines]",
          "359:   if( pParse->explain==2 ){",
          "",
          "[Added Lines]",
          "359: #ifndef SQLITE_DEBUG",
          "362:   if( pParse->explain==2 )",
          "363: #endif",
          "364:   {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
      "candidate_info": {
        "commit_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix various harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 1c0fe5b5763fe5cbace9773dcdab742e126d0bd035ab13d61f9d134afa0afc0c",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55be6d0a9fa8a64b9c9c5ed51a2b9144304f7f0870a13b92d5864ac4d54491b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21908b2166875fcaf92b194c00719d9031da5fa6",
      "candidate_info": {
        "commit_hash": "21908b2166875fcaf92b194c00719d9031da5fa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21908b2166875fcaf92b194c00719d9031da5fa6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Disable the xfer-optimization if the two tables have the same root page due to schema corruption.\n\nFossilOrigin-Name: f31b3bd2a6a8aa35a6454f37f3a4b4595e2ad74256cd180439019ab4c6c2059e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4538d9afe4e6360e20c7b474e77314e5ad293453e1edbe356bf6ea84c05857ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2208:   if( pSrc==0 ){",
          "2210:   }",
          "2213:   }",
          "2214:   if( HasRowid(pDest)!=HasRowid(pSrc) ){",
          "",
          "[Removed Lines]",
          "2211:   if( pSrc==pDest ){",
          "",
          "[Added Lines]",
          "2211:   if( pSrc->tnum==pDest->tnum && pSrc->pSchema==pDest->pSchema ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}