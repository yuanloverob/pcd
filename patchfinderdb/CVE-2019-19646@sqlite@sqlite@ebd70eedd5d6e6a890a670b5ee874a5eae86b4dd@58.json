{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
      "candidate_info": {
        "commit_hash": "f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4d9c9822df99cbf29b49a3af6f183aa4992fb36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a faulty testcase() macro.\n\nFossilOrigin-Name: 80124ae55246b79023d23d3f55487ac3c0b40e8ff301c5daf4dd0631de8ddb29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e8e9f77d52974f6ba0a536d05837b280a996745deb3a2169bb29379f10e49df4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5112:     case TK_IN:",
          "5113:     case TK_FUNCTION:",
          "5114:       testcase( pExpr->op==TK_ISNOT );",
          "5116:       testcase( pExpr->op==TK_ISNULL );",
          "5117:       testcase( pExpr->op==TK_NOTNULL );",
          "5118:       testcase( pExpr->op==TK_IS );",
          "",
          "[Removed Lines]",
          "5115:       testcase( pExpr->op==TK_NOT );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
      "candidate_info": {
        "commit_hash": "82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/82642f815bc9f31af3403fbbdf94d6f8d9ab3615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Ensure that the nProgressLimit variable is always initialized in sqlite3VdbeExec(), even if the routine jumps to its exit processing early.\n\nFossilOrigin-Name: 167b91df77fff1a84791f6ab5f72239b90475475be690a838248119b6dd312f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   sqlite3VdbeEnter(p);",
          "625:   if( p->rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "626:   if( db->xProgress ){",
          "627:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "628:     assert( 0 < db->nProgressOps );",
          "629:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "630:   }else{",
          "631:     nProgressLimit = 0xffffffff;",
          "632:   }",
          "633: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:   db->busyHandler.nBusy = 0;",
          "636:   if( db->u1.isInterrupted ) goto abort_due_to_interrupt;",
          "637:   sqlite3VdbeIOTraceSql(p);",
          "647: #ifdef SQLITE_DEBUG",
          "648:   sqlite3BeginBenignMalloc();",
          "649:   if( p->pc==0",
          "",
          "[Removed Lines]",
          "638: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "639:   if( db->xProgress ){",
          "640:     u32 iPrior = p->aCounter[SQLITE_STMTSTATUS_VM_STEP];",
          "641:     assert( 0 < db->nProgressOps );",
          "642:     nProgressLimit = db->nProgressOps - (iPrior % db->nProgressOps);",
          "643:   }else{",
          "644:     nProgressLimit = 0xffffffff;",
          "645:   }",
          "646: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
      "candidate_info": {
        "commit_hash": "3967d946c7a1fe956e963b0a2e67a8353404a454",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3967d946c7a1fe956e963b0a2e67a8353404a454",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix the query planner so that it is able to use an index on a CAST expression.\n\nFossilOrigin-Name: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9faf9033910927c74553e66c474d84ed3386f263cef3eec299e25d8306f410d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   return 0;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static SQLITE_NOINLINE WhereTerm *whereScanInitIndexExpr(WhereScan *pScan){",
          "320:   pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "321:   return whereScanNext(pScan);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   pScan->pIdxExpr = 0;",
          "343:   pScan->idxaff = 0;",
          "344:   pScan->zCollName = 0;",
          "345:   if( pIdx ){",
          "346:     int j = iColumn;",
          "347:     iColumn = pIdx->aiColumn[j];",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "351:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "352:       iColumn = XN_ROWID;",
          "353:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356:   pScan->opMask = opMask;",
          "357:   pScan->k = 0;",
          "358:   pScan->aiCur[0] = iCur;",
          "359:   pScan->nEquiv = 1;",
          "360:   pScan->iEquiv = 1;",
          "367:       pScan->aiColumn[0] = XN_EXPR;",
          "368:       return whereScanInitIndexExpr(pScan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "357:   }else if( iColumn==XN_EXPR ){",
          "358:     return 0;",
          "359:   }",
          "363:   pScan->aiColumn[0] = iColumn;",
          "366:   return whereScanNext(pScan);",
          "367: }",
          "",
          "[Removed Lines]",
          "360:   pScan->opMask = opMask;",
          "361:   pScan->k = 0;",
          "362:   pScan->aiCur[0] = iCur;",
          "364:   pScan->nEquiv = 1;",
          "365:   pScan->iEquiv = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #-------------------------------------------------------------------------",
          "253: do_execsql_test 6.0 {",
          "254:   CREATE TABLE x1(a INTEGER PRIMARY KEY, b);",
          "255:   INSERT INTO x1 VALUES",
          "256:       (1, 123), (2, '123'), (3, '123abc'), (4, 123.0), (5, 1234);",
          "257: }",
          "259: do_execsql_test 6.1.1 {",
          "260:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "261: } {1 123   2 123   3 123abc  4 123.0}",
          "262: do_execsql_test 6.1.2 {",
          "263:   CREATE INDEX x1i ON x1( CAST(b AS INTEGER) );",
          "264:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "265: } {1 123   2 123   3 123abc  4 123.0}",
          "266: do_eqp_test 6.1.3 {",
          "267:   SELECT a, b FROM x1 WHERE CAST(b AS INTEGER) = 123;",
          "268: } {SEARCH TABLE x1 USING INDEX x1i (<expr>=?)}",
          "270: do_execsql_test 6.2.1 {",
          "271:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "272: } {1 123   2 123}",
          "273: do_execsql_test 6.2.2 {",
          "274:   CREATE INDEX x1i2 ON x1( CAST(b AS TEXT) );",
          "275:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "276: } {1 123   2 123}",
          "277: do_eqp_test 6.2.3 {",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
      "candidate_info": {
        "commit_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Experimental code that tries to put the computation of subqueries inside a subroutine, and reuse that subroutine if the same subquery is evaluated more than once.  Current code does not work for CHECK constraints.\n\nFossilOrigin-Name: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:     }",
          "2545:     assert( pX->op==TK_IN );",
          "2547:     if( rMayHaveNull ){",
          "2549:     }",
          "2550:     pParse->nQueryLoop = savedNQueryLoop;",
          "2553:   }",
          "2555:   if( aiMap && eType!=IN_INDEX_INDEX_ASC && eType!=IN_INDEX_INDEX_DESC ){",
          "",
          "[Removed Lines]",
          "2546:     sqlite3CodeRhsOfIN(pParse, pX, eType==IN_INDEX_ROWID);",
          "2548:       sqlite3SetHasNullFlag(v, pX->iTable, rMayHaveNull);",
          "2551:   }else{",
          "2552:     pX->iTable = iTab;",
          "",
          "[Added Lines]",
          "2547:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "2549:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658: void sqlite3CodeRhsOfIN(",
          "2662: ){",
          "2671:   assert( v!=0 );",
          "2683:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2685:   }",
          "",
          "[Removed Lines]",
          "2670:   v = sqlite3GetVdbe(pParse);",
          "2684:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2675:   v = pParse->pVdbe;",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2694:       sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "2695:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2696:                         pExpr->y.sub.iAddr);",
          "2697:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2698:       return;",
          "2699:     }",
          "2702:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2703:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2704:     pExpr->y.sub.iAddr =",
          "2705:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2706:     VdbeComment((v, \"return address\"));",
          "2708:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2696:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2697:       pExpr->iTable, (isRowid?0:nVal));",
          "2698:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "2700:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2695:   pExpr->iTable = pParse->nTab++;",
          "",
          "[Added Lines]",
          "2719:   pExpr->iTable = iTab;",
          "2722: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2723:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2724:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "2725:   }else{",
          "2726:     VdbeComment((v, \"RHS of IN operator\"));",
          "2727:   }",
          "2728: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2706:     Select *pSelect = pExpr->x.pSelect;",
          "2707:     ExprList *pEList = pSelect->pEList;",
          "2711:     ));",
          "2712:     assert( !isRowid );",
          "",
          "[Removed Lines]",
          "2709:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY\",",
          "2710:         jmpIfDynamic>=0?\"\":\"CORRELATED \"",
          "",
          "[Added Lines]",
          "2740:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2741:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2775:       if( jmpIfDynamic>=0 && !sqlite3ExprIsConstant(pE2) ){",
          "2776:         sqlite3VdbeChangeToNoop(v, jmpIfDynamic);",
          "2777:         jmpIfDynamic = -1;",
          "",
          "[Added Lines]",
          "2806:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2807:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2808:         addrOnce = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2799:   if( pKeyInfo ){",
          "2800:     sqlite3VdbeChangeP4(v, addr, (void *)pKeyInfo, P4_KEYINFO);",
          "2801:   }",
          "2804:   }",
          "2805: }",
          "",
          "[Removed Lines]",
          "2802:   if( jmpIfDynamic>=0 ){",
          "2803:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2833:   if( addrOnce ){",
          "2834:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2836:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2837:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2822: #ifndef SQLITE_OMIT_SUBQUERY",
          "2823: int sqlite3CodeSubselect(Parse *pParse, Expr *pExpr){",
          "2831:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2830:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2843:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2845:   }",
          "",
          "[Removed Lines]",
          "2844:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2862:   pSel = pExpr->x.pSelect;",
          "2863:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY\",",
          "2865:   nReg = pExpr->op==TK_SELECT ? pSel->pEList->nExpr : 1;",
          "2866:   sqlite3SelectDestInit(&dest, 0, pParse->nMem+1);",
          "2867:   pParse->nMem += nReg;",
          "",
          "[Removed Lines]",
          "2864:         jmpIfDynamic>=0?\"\":\"CORRELATED \"));",
          "",
          "[Added Lines]",
          "2912:         addrOnce?\"\":\"CORRELATED \"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2887:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "2888:     return 0;",
          "2889:   }",
          "2891:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2895:   }",
          "2897:   return rReg;",
          "2898: }",
          "",
          "[Removed Lines]",
          "2890:   rReg = dest.iSDParm;",
          "2893:   if( jmpIfDynamic>=0 ){",
          "2894:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2938:   pExpr->iTable = rReg = dest.iSDParm;",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2987:   VdbeNoopComment((v, \"begin IN expr\"));",
          "2988:   eType = sqlite3FindInIndex(pParse, pExpr,",
          "2989:                              IN_INDEX_MEMBERSHIP | IN_INDEX_NOOP_OK,",
          "2992:   assert( pParse->nErr || nVector==1 || eType==IN_INDEX_EPH",
          "2993:        || eType==IN_INDEX_INDEX_ASC || eType==IN_INDEX_INDEX_DESC",
          "",
          "[Removed Lines]",
          "2990:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull, aiMap);",
          "",
          "[Added Lines]",
          "3042:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull,",
          "3043:                              aiMap, &iTab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3099:     VdbeCoverage(v);",
          "3101:   }else{",
          "3102:     sqlite3VdbeAddOp4(v, OP_Affinity, rLhs, nVector, 0, zAff, nVector);",
          "3103:     if( destIfFalse==destIfNull ){",
          "3106:                            rLhs, nVector); VdbeCoverage(v);",
          "3107:       goto sqlite3ExprCodeIN_finished;",
          "3108:     }",
          "3111:                                       rLhs, nVector); VdbeCoverage(v);",
          "3112:   }",
          "",
          "[Removed Lines]",
          "3098:     sqlite3VdbeAddOp3(v, OP_SeekRowid, pExpr->iTable, destIfFalse, rLhs);",
          "3105:       sqlite3VdbeAddOp4Int(v, OP_NotFound, pExpr->iTable, destIfFalse,",
          "3110:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, pExpr->iTable, 0,",
          "",
          "[Added Lines]",
          "3151:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iTab, destIfFalse, rLhs);",
          "3158:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iTab, destIfFalse,",
          "3163:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, iTab, 0,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3134:   if( destStep6 ) sqlite3VdbeResolveLabel(v, destStep6);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Removed Lines]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "",
          "[Added Lines]",
          "3188:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3147:     int r3 = sqlite3GetTempReg(pParse);",
          "3148:     p = sqlite3VectorFieldSubexpr(pLeft, i);",
          "3149:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "3151:     sqlite3VdbeAddOp4(v, OP_Ne, rLhs+i, destNotNull, r3,",
          "3152:                       (void*)pColl, P4_COLLSEQ);",
          "3153:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3150:     sqlite3VdbeAddOp3(v, OP_Column, pExpr->iTable, i, r3);",
          "",
          "[Added Lines]",
          "3203:     sqlite3VdbeAddOp3(v, OP_Column, iTab, i, r3);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3156:   sqlite3VdbeAddOp2(v, OP_Goto, 0, destIfNull);",
          "3157:   if( nVector>1 ){",
          "3158:     sqlite3VdbeResolveLabel(v, destNotNull);",
          "3160:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3159:     sqlite3VdbeAddOp2(v, OP_Next, pExpr->iTable, addrTop+1);",
          "",
          "[Added Lines]",
          "3212:     sqlite3VdbeAddOp2(v, OP_Next, iTab, addrTop+1);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2485:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "2488:   } y;",
          "2489: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:     } sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4258: int sqlite3GetToken(const unsigned char *, int *);",
          "4259: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4260: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4262: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4263: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4264: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4261: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4266: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4516: int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);",
          "4517: int sqlite3JournalSize(sqlite3_vfs *);",
          "",
          "[Removed Lines]",
          "4514: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*);",
          "",
          "[Added Lines]",
          "4519: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*, int*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   pCx->isEphemeral = 1;",
          "3611:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3612:   pCx->isTable = pOrig->isTable;",
          "3614:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "3613:   rc = sqlite3BtreeCursor(pOrig->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3613:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3614:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3686:         pCx->pgnoRoot = pgno;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "3693:     }",
          "3694:   }",
          "3695:   if( rc ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3695:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "855:                           pTabItem->regResult, 1);",
          "856:     sqlite3VdbeGoto(v, addrTop);",
          "857:   }else{",
          "858:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "859:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857:     pTabItem->fg.viaCoroutine = 0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:       if( pLoop->aLTerm[i]->pExpr==pX ) nEq++;",
          "539:     }",
          "541:     if( (pX->flags & EP_xIsSelect)==0 || pX->x.pSelect->pEList->nExpr==1 ){",
          "543:     }else{",
          "544:       sqlite3 *db = pParse->db;",
          "545:       pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);",
          "547:       if( !db->mallocFailed ){",
          "548:         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);",
          "551:       }",
          "552:       sqlite3ExprDelete(db, pX);",
          "553:       pX = pTerm->pExpr;",
          "",
          "[Removed Lines]",
          "542:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0);",
          "549:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap);",
          "550:         pTerm->pExpr->iTable = pX->iTable;",
          "",
          "[Added Lines]",
          "541:     iTab = 0;",
          "543:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0, &iTab);",
          "550:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap, &iTab);",
          "551:         pTerm->pExpr->iTable = iTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:       testcase( bRev );",
          "558:       bRev = !bRev;",
          "559:     }",
          "561:     sqlite3VdbeAddOp2(v, bRev ? OP_Last : OP_Rewind, iTab, 0);",
          "562:     VdbeCoverageIf(v, bRev);",
          "563:     VdbeCoverageIf(v, !bRev);",
          "",
          "[Removed Lines]",
          "560:     iTab = pX->iTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2197:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "2198:     if( (pAlt->eOperator & WO_IN)",
          "2199:      && (pAlt->pExpr->flags & EP_xIsSelect)",
          "2201:     ){",
          "2202:       continue;",
          "2203:     }",
          "",
          "[Removed Lines]",
          "2200:      && (pAlt->pExpr->x.pSelect->pEList->nExpr>1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
      "candidate_info": {
        "commit_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Additional debugging information printed with the \".wheretrace 0x100\" option. No changes to normally delivered code.\n\nFossilOrigin-Name: fc72ec52c92ca6a953e765b48e21d52021fdb23a2cd84f737da4e43c642f6a5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1816:   }else{",
          "1817:     char *z;",
          "1818:     if( p->u.vtab.idxStr ){",
          "1820:                 p->u.vtab.idxNum, p->u.vtab.idxStr, p->u.vtab.omitMask);",
          "1821:     }else{",
          "1822:       z = sqlite3_mprintf(\"(%d,%x)\", p->u.vtab.idxNum, p->u.vtab.omitMask);",
          "",
          "[Removed Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%x)\",",
          "",
          "[Added Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%#x)\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4810:     }",
          "4811:   }",
          "4813:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4814:   }",
          "4815: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4813:     sqlite3DebugPrintf(\"---- WHERE clause at start of analysis:\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4948:       nTabList--;",
          "4949:     }",
          "4950:   }",
          "4951:   WHERETRACE(0xffff,(\"*** Optimizer Finished ***\\n\"));",
          "4952:   pWInfo->pParse->nQueryLoop += pWInfo->nRowOut;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4952: #if defined(WHERETRACE_ENABLED)",
          "4954:     sqlite3DebugPrintf(\"---- WHERE clause at end of analysis:\\n\");",
          "4955:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4956:   }",
          "4958: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}