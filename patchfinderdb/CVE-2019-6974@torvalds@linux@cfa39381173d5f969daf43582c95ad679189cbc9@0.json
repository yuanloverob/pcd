{
  "cve_id": "CVE-2019-6974",
  "cve_desc": "In the Linux kernel before 4.20.8, kvm_ioctl_create_device in virt/kvm/kvm_main.c mishandles reference counting because of a race condition, leading to a use-after-free.",
  "repo": "torvalds/linux",
  "patch_hash": "cfa39381173d5f969daf43582c95ad679189cbc9",
  "patch_info": {
    "commit_hash": "cfa39381173d5f969daf43582c95ad679189cbc9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/cfa39381173d5f969daf43582c95ad679189cbc9",
    "files": [
      "virt/kvm/kvm_main.c"
    ],
    "message": "kvm: fix kvm_ioctl_create_device() reference counting (CVE-2019-6974)\n\nkvm_ioctl_create_device() does the following:\n\n1. creates a device that holds a reference to the VM object (with a borrowed\n   reference, the VM's refcount has not been bumped yet)\n2. initializes the device\n3. transfers the reference to the device to the caller's file descriptor table\n4. calls kvm_get_kvm() to turn the borrowed reference to the VM into a real\n   reference\n\nThe ownership transfer in step 3 must not happen before the reference to the VM\nbecomes a proper, non-borrowed reference, which only happens in step 4.\nAfter step 3, an attacker can close the file descriptor and drop the borrowed\nreference, which can cause the refcount of the kvm object to drop to zero.\n\nThis means that we need to grab a reference for the device before\nanon_inode_getfd(), otherwise the VM can disappear from under us.\n\nFixes: 852b6d57dc7f (\"kvm: add device control API\")\nCc: stable@kernel.org\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
    ]
  },
  "patch_diff": {
    "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
      "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3000:  if (ops->init)",
      "3001:   ops->init(dev);",
      "3003:  ret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);",
      "3004:  if (ret < 0) {",
      "3005:   mutex_lock(&kvm->lock);",
      "3006:   list_del(&dev->vm_node);",
      "3007:   mutex_unlock(&kvm->lock);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3003:  kvm_get_kvm(kvm);",
      "3006:   kvm_put_kvm(kvm);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3009:   return ret;",
      "3010:  }",
      "3013:  cd->fd = ret;",
      "3014:  return 0;",
      "3015: }",
      "",
      "[Removed Lines]",
      "3012:  kvm_get_kvm(kvm);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "149487bdacde32f5a9a344a49533ae0772fb9db7",
      "candidate_info": {
        "commit_hash": "149487bdacde32f5a9a344a49533ae0772fb9db7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/149487bdacde32f5a9a344a49533ae0772fb9db7",
        "files": [
          "arch/powerpc/kvm/book3s_64_mmu_hv.c",
          "arch/powerpc/kvm/book3s_64_vio.c",
          "include/linux/kvm_host.h",
          "virt/kvm/kvm_main.c"
        ],
        "message": "KVM: Add separate helper for putting borrowed reference to kvm\n\nAdd a new helper, kvm_put_kvm_no_destroy(), to handle putting a borrowed\nreference[*] to the VM when installing a new file descriptor fails.  KVM\nexpects the refcount to remain valid in this case, as the in-progress\nioctl() has an explicit reference to the VM.  The primary motiviation\nfor the helper is to document that the 'kvm' pointer is still valid\nafter putting the borrowed reference, e.g. to document that doing\nmutex(&kvm->lock) immediately after putting a ref to kvm isn't broken.\n\n[*] When exposing a new object to userspace via a file descriptor, e.g.\n    a new vcpu, KVM grabs a reference to itself (the VM) prior to making\n    the object visible to userspace to avoid prematurely freeing the VM\n    in the scenario where userspace immediately closes file descriptor.\n\nSigned-off-by: Sean Christopherson <sean.j.christopherson@intel.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "arch/powerpc/kvm/book3s_64_mmu_hv.c||arch/powerpc/kvm/book3s_64_mmu_hv.c",
          "arch/powerpc/kvm/book3s_64_vio.c||arch/powerpc/kvm/book3s_64_vio.c",
          "include/linux/kvm_host.h||include/linux/kvm_host.h",
          "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
          ],
          "candidate": [
            "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/book3s_64_mmu_hv.c||arch/powerpc/kvm/book3s_64_mmu_hv.c": [
          "File: arch/powerpc/kvm/book3s_64_mmu_hv.c -> arch/powerpc/kvm/book3s_64_mmu_hv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2000:  ret = anon_inode_getfd(\"kvm-htab\", &kvm_htab_fops, ctx, rwflag | O_CLOEXEC);",
          "2001:  if (ret < 0) {",
          "2002:   kfree(ctx);",
          "2004:   return ret;",
          "2005:  }",
          "",
          "[Removed Lines]",
          "2003:   kvm_put_kvm(kvm);",
          "",
          "[Added Lines]",
          "2003:   kvm_put_kvm_no_destroy(kvm);",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_64_vio.c||arch/powerpc/kvm/book3s_64_vio.c": [
          "File: arch/powerpc/kvm/book3s_64_vio.c -> arch/powerpc/kvm/book3s_64_vio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:  if (ret >= 0)",
          "318:   list_add_rcu(&stt->list, &kvm->arch.spapr_tce_tables);",
          "319:  else",
          "322:  mutex_unlock(&kvm->lock);",
          "",
          "[Removed Lines]",
          "320:   kvm_put_kvm(kvm);",
          "",
          "[Added Lines]",
          "320:   kvm_put_kvm_no_destroy(kvm);",
          "",
          "---------------"
        ],
        "include/linux/kvm_host.h||include/linux/kvm_host.h": [
          "File: include/linux/kvm_host.h -> include/linux/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: void kvm_get_kvm(struct kvm *kvm);",
          "623: void kvm_put_kvm(struct kvm *kvm);",
          "625: static inline struct kvm_memslots *__kvm_memslots(struct kvm *kvm, int as_id)",
          "626: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: void kvm_put_kvm_no_destroy(struct kvm *kvm);",
          "",
          "---------------"
        ],
        "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
          "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772: }",
          "773: EXPORT_SYMBOL_GPL(kvm_put_kvm);",
          "776: static int kvm_vm_release(struct inode *inode, struct file *filp)",
          "777: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782: void kvm_put_kvm_no_destroy(struct kvm *kvm)",
          "783: {",
          "784:  WARN_ON(refcount_dec_and_test(&kvm->users_count));",
          "785: }",
          "786: EXPORT_SYMBOL_GPL(kvm_put_kvm_no_destroy);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2679:  kvm_get_kvm(kvm);",
          "2680:  r = create_vcpu_fd(vcpu);",
          "2681:  if (r < 0) {",
          "2683:   goto unlock_vcpu_destroy;",
          "2684:  }",
          "",
          "[Removed Lines]",
          "2682:   kvm_put_kvm(kvm);",
          "",
          "[Added Lines]",
          "2694:   kvm_put_kvm_no_destroy(kvm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3117:  kvm_get_kvm(kvm);",
          "3118:  ret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);",
          "3119:  if (ret < 0) {",
          "3121:   mutex_lock(&kvm->lock);",
          "3122:   list_del(&dev->vm_node);",
          "3123:   mutex_unlock(&kvm->lock);",
          "",
          "[Removed Lines]",
          "3120:   kvm_put_kvm(kvm);",
          "",
          "[Added Lines]",
          "3132:   kvm_put_kvm_no_destroy(kvm);",
          "",
          "---------------"
        ]
      }
    }
  ]
}