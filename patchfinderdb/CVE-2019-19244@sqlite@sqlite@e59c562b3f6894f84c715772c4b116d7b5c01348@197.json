{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
      "candidate_info": {
        "commit_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Fix the OP_DeferredSeek index-to-table column map in P4 so that it works with generated columns.  Ticket [ce22a07731530118]\n\nFossilOrigin-Name: 36c11ad51fe9ab1bde0b98d0ea9b8588e07d168cd8027486749372894941ad93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b1c90add514050fe62f22751362fecacd99f9775346cffc60e09c326e64e10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054:     if( ai ){",
          "1055:       ai[0] = pTab->nCol;",
          "1056:       for(i=0; i<pIdx->nColumn-1; i++){",
          "1057:         assert( pIdx->aiColumn[i]<pTab->nCol );",
          "1059:       }",
          "1060:       sqlite3VdbeChangeP4(v, -1, (char*)ai, P4_INTARRAY);",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1058:         if( pIdx->aiColumn[i]>=0 ) ai[pIdx->aiColumn[i]+1] = i+1;",
          "",
          "[Added Lines]",
          "1057:         int x1, x2;",
          "1059:         x1 = pIdx->aiColumn[i];",
          "1060:         x2 = sqlite3TableColumnToStorage(pTab, x1);",
          "1061:         testcase( x1!=x2 );",
          "1062:         if( pIdx->aiColumn[i]>=0 ) ai[x2+1] = i+1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "214: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: # 2019-11-06 ticket b13b7dce76e9352b34e7",
          "215: do_execsql_test gencol1-7.10 {",
          "216:   DROP TABLE IF EXISTS t0;",
          "217:   CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
          "218:   INSERT INTO t0(c1) VALUES (1);",
          "219:   SELECT quote(0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1) FROM t0;",
          "220: } {NULL}",
          "221: do_execsql_test gencol1-7.20 {",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
      "candidate_info": {
        "commit_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Do not run shmlock.test as part of the inmemory_journal permutation.\n\nFossilOrigin-Name: d3fea69cbb071867a90ad56ca05123ebf8e44689a92577a525a883c176c791bd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e467e4c8fa256ddd6c26c1f21bc26289a21f18b781737eaf706bc813ed8234fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   # the number of fsync() calls.",
          "753:   pager.test exclusive.test jrnlmode.test sync.test misc1.test",
          "754:   journal1.test conflict.test crash8.test tkt3457.test io.test",
          "757:   pager1.test async4.test corrupt.test filefmt.test pager2.test",
          "758:   corrupt5.test corruptA.test pageropt.test",
          "",
          "[Removed Lines]",
          "755:   journal3.test 8_3_names.test",
          "",
          "[Added Lines]",
          "755:   journal3.test 8_3_names.test shmlock.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
      "candidate_info": {
        "commit_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "files": [
          "ext/misc/memtrace.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the memtrace.c extension.\n\nFossilOrigin-Name: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
        "before_after_code_files": [
          "ext/misc/memtrace.c||ext/misc/memtrace.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/memtrace.c||ext/misc/memtrace.c": [
          "File: ext/misc/memtrace.c -> ext/misc/memtrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   memtraceSize,",
          "78:   memtraceRoundup,",
          "79:   memtraceInit,",
          "81: };",
          "",
          "[Removed Lines]",
          "80:   memtraceShutdown",
          "",
          "[Added Lines]",
          "80:   memtraceShutdown,",
          "81:   0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4978ee8b5405f958723b4ebbd4288bd08bff2b453da2d1c032d1ae904c2a3821",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "129371553c0c543a26678a12680c484ea0e8ad09",
      "candidate_info": {
        "commit_hash": "129371553c0c543a26678a12680c484ea0e8ad09",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/129371553c0c543a26678a12680c484ea0e8ad09",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3fault.test"
        ],
        "message": "Avoid deferencing a freed pointer following an OOM or SQLITE_CORRUPT error in the fts3 xDestroy method.\n\nFossilOrigin-Name: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3fault.test||test/fts3fault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "564:   if( p->zContentTbl==0 ){",
          "565:     fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_content'\", zDb, p->zName);",
          "566:   }",
          "567:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_segments'\", zDb,p->zName);",
          "568:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_segdir'\", zDb, p->zName);",
          "569:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_docsize'\", zDb, p->zName);",
          "570:   fts3DbExec(&rc, db, \"DROP TABLE IF EXISTS %Q.'%q_stat'\", zDb, p->zName);",
          "",
          "[Added Lines]",
          "564:   fts3DbExec(&rc, db,",
          "565:     \"DROP TABLE IF EXISTS %Q.'%q_segments';\"",
          "566:     \"DROP TABLE IF EXISTS %Q.'%q_segdir';\"",
          "567:     \"DROP TABLE IF EXISTS %Q.'%q_docsize';\"",
          "568:     \"DROP TABLE IF EXISTS %Q.'%q_stat';\"",
          "569:     \"%s DROP TABLE IF EXISTS %Q.'%q_content';\",",
          "570:     zDb, p->zName,",
          "571:     zDb, p->zName,",
          "572:     zDb, p->zName,",
          "573:     zDb, p->zName,",
          "574:     (p->zContentTbl ? \"--\" : \"\"), zDb,p->zName",
          "575:   );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c33a303ebbb0f5193ead535280ba63118e14fb4f9977ce80dc716a0b082ec99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3fault.test||test/fts3fault.test": [
          "File: test/fts3fault.test -> test/fts3fault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   faultsim_test_result {0 {}}",
          "241: }",
          "243: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #-------------------------------------------------------------------------",
          "244: reset_db",
          "245: do_execsql_test 11.0 {",
          "246:   CREATE VIRTUAL TABLE t1 USING fts3(a, b);",
          "247: }",
          "248: faultsim_save_and_close",
          "250: do_faultsim_test 11 -faults oom* -prep {",
          "251:   faultsim_restore_and_reopen",
          "252: } -body {",
          "253:   execsql { DROP TABLE t1 }",
          "254: } -test {",
          "255:   faultsim_test_result {0 {}}",
          "256: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
      "candidate_info": {
        "commit_hash": "bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf00f6d7ece6a1e207e096a9a94e039594fb6d77",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Enhanced VdbeCoverage() macros in the new windows function code.\n\nFossilOrigin-Name: f24066f8dd847dfb656f26c4a8142e7fb6a412ffe325aea6254cb122cfbb3e1c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1840:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1841:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1838:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1838:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1839:   VdbeCoverageIf(v, op==OP_Ge);",
          "1840:   VdbeCoverageIf(v, op==OP_Gt);",
          "1841:   VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2533:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2534:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2535:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2537:     windowAggFinal(&s, 0);",
          "2538:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2539:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "2536:     VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2539:     VdbeCoverageIf(v, op==OP_Ge);",
          "2540:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------"
        ]
      }
    }
  ]
}