{
  "cve_id": "CVE-2016-9120",
  "cve_desc": "Race condition in the ion_ioctl function in drivers/staging/android/ion/ion.c in the Linux kernel before 4.6 allows local users to gain privileges or cause a denial of service (use-after-free) by calling ION_IOC_FREE on two CPUs at the same time.",
  "repo": "torvalds/linux",
  "patch_hash": "9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
  "patch_info": {
    "commit_hash": "9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/9590232bb4f4cc824f3425a6e1349afbe6d6d2b7",
    "files": [
      "drivers/staging/android/ion/ion.c"
    ],
    "message": "staging/android/ion : fix a race condition in the ion driver\n\nThere is a use-after-free problem in the ion driver.\nThis is caused by a race condition in the ion_ioctl()\nfunction.\n\nA handle has ref count of 1 and two tasks on different\ncpus calls ION_IOC_FREE simultaneously.\n\ncpu 0                                   cpu 1\n-------------------------------------------------------\nion_handle_get_by_id()\n(ref == 2)\n                            ion_handle_get_by_id()\n                            (ref == 3)\n\nion_free()\n(ref == 2)\n\nion_handle_put()\n(ref == 1)\n\n                            ion_free()\n                            (ref == 0 so ion_handle_destroy() is\n                            called\n                            and the handle is freed.)\n\n                            ion_handle_put() is called and it\n                            decreases the slub's next free pointer\n\nThe problem is detected as an unaligned access in the\nspin lock functions since it uses load exclusive\n instruction. In some cases it corrupts the slub's\nfree pointer which causes a mis-aligned access to the\nnext free pointer.(kmalloc returns a pointer like\nffffc0745b4580aa). And it causes lots of other\nhard-to-debug problems.\n\nThis symptom is caused since the first member in the\nion_handle structure is the reference count and the\nion driver decrements the reference after it has been\nfreed.\n\nTo fix this problem client->lock mutex is extended\nto protect all the codes that uses the handle.\n\nSigned-off-by: Eun Taik Lee <eun.taik.lee@samsung.com>\nReviewed-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
    ]
  },
  "patch_diff": {
    "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
      "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:  kref_get(&handle->ref);",
      "388: }",
      "391: {",
      "392:  struct ion_client *client = handle->client;",
      "393:  int ret;",
      "395:  mutex_lock(&client->lock);",
      "397:  mutex_unlock(&client->lock);",
      "399:  return ret;",
      "",
      "[Removed Lines]",
      "390: static int ion_handle_put(struct ion_handle *handle)",
      "396:  ret = kref_put(&handle->ref, ion_handle_destroy);",
      "",
      "[Added Lines]",
      "390: static int ion_handle_put_nolock(struct ion_handle *handle)",
      "391: {",
      "392:  int ret;",
      "394:  ret = kref_put(&handle->ref, ion_handle_destroy);",
      "396:  return ret;",
      "397: }",
      "399: int ion_handle_put(struct ion_handle *handle)",
      "405:  ret = ion_handle_put_nolock(handle);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:  return ERR_PTR(-EINVAL);",
      "418: }",
      "421:       int id)",
      "422: {",
      "423:  struct ion_handle *handle;",
      "426:  handle = idr_find(&client->idr, id);",
      "427:  if (handle)",
      "428:   ion_handle_get(handle);",
      "431:  return handle ? handle : ERR_PTR(-EINVAL);",
      "432: }",
      "434: static bool ion_handle_validate(struct ion_client *client,",
      "435:     struct ion_handle *handle)",
      "436: {",
      "",
      "[Removed Lines]",
      "420: static struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
      "425:  mutex_lock(&client->lock);",
      "429:  mutex_unlock(&client->lock);",
      "",
      "[Added Lines]",
      "429: static struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
      "441: struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
      "442:       int id)",
      "443: {",
      "444:  struct ion_handle *handle;",
      "446:  mutex_lock(&client->lock);",
      "447:  handle = ion_handle_get_by_id_nolock(client, id);",
      "448:  mutex_unlock(&client->lock);",
      "450:  return handle;",
      "451: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "532: }",
      "533: EXPORT_SYMBOL(ion_alloc);",
      "536: {",
      "537:  bool valid_handle;",
      "539:  BUG_ON(client != handle->client);",
      "542:  valid_handle = ion_handle_validate(client, handle);",
      "544:  if (!valid_handle) {",
      "545:   WARN(1, \"%s: invalid handle passed to free.\\n\", __func__);",
      "547:   return;",
      "548:  }",
      "549:  mutex_unlock(&client->lock);",
      "551: }",
      "552: EXPORT_SYMBOL(ion_free);",
      "",
      "[Removed Lines]",
      "535: void ion_free(struct ion_client *client, struct ion_handle *handle)",
      "541:  mutex_lock(&client->lock);",
      "546:   mutex_unlock(&client->lock);",
      "550:  ion_handle_put(handle);",
      "",
      "[Added Lines]",
      "554: static void ion_free_nolock(struct ion_client *client, struct ion_handle *handle)",
      "566:  ion_handle_put_nolock(handle);",
      "567: }",
      "569: void ion_free(struct ion_client *client, struct ion_handle *handle)",
      "570: {",
      "571:  BUG_ON(client != handle->client);",
      "573:  mutex_lock(&client->lock);",
      "574:  ion_free_nolock(client, handle);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1332:  {",
      "1333:   struct ion_handle *handle;",
      "1337:    return PTR_ERR(handle);",
      "1340:   break;",
      "1341:  }",
      "1342:  case ION_IOC_SHARE:",
      "",
      "[Removed Lines]",
      "1335:   handle = ion_handle_get_by_id(client, data.handle.handle);",
      "1336:   if (IS_ERR(handle))",
      "1338:   ion_free(client, handle);",
      "1339:   ion_handle_put(handle);",
      "",
      "[Added Lines]",
      "1360:   mutex_lock(&client->lock);",
      "1361:   handle = ion_handle_get_by_id_nolock(client, data.handle.handle);",
      "1362:   if (IS_ERR(handle)) {",
      "1363:    mutex_unlock(&client->lock);",
      "1365:   }",
      "1366:   ion_free_nolock(client, handle);",
      "1367:   ion_handle_put_nolock(handle);",
      "1368:   mutex_unlock(&client->lock);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1fa6d8acb50c8e90f50fb262e5d4b7d478592bf",
      "candidate_info": {
        "commit_hash": "b1fa6d8acb50c8e90f50fb262e5d4b7d478592bf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b1fa6d8acb50c8e90f50fb262e5d4b7d478592bf",
        "files": [
          "drivers/staging/android/ion/Makefile",
          "drivers/staging/android/ion/ion-ioctl.c",
          "drivers/staging/android/ion/ion.c",
          "drivers/staging/android/ion/ion_priv.h"
        ],
        "message": "staging: android: ion: Pull out ion ioctls to a separate file\n\nThe number of Ion ioctls may continue to grow along with necessary\nvalidation. Pull it out into a separate file for easier management\nand review.\n\nSigned-off-by: Laura Abbott <labbott@redhat.com>\nAcked-by: Arnd Bergmann <arnd@arndb.de>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion-ioctl.c||drivers/staging/android/ion/ion-ioctl.c",
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c",
          "drivers/staging/android/ion/ion_priv.h||drivers/staging/android/ion/ion_priv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion-ioctl.c||drivers/staging/android/ion/ion-ioctl.c": [
          "File: drivers/staging/android/ion/ion-ioctl.c -> drivers/staging/android/ion/ion-ioctl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <linux/kernel.h>",
          "17: #include <linux/file.h>",
          "18: #include <linux/fs.h>",
          "19: #include <linux/uaccess.h>",
          "21: #include \"ion.h\"",
          "22: #include \"ion_priv.h\"",
          "23: #include \"compat_ion.h\"",
          "26: static unsigned int ion_ioctl_dir(unsigned int cmd)",
          "27: {",
          "28:  switch (cmd) {",
          "29:  case ION_IOC_SYNC:",
          "30:  case ION_IOC_FREE:",
          "31:  case ION_IOC_CUSTOM:",
          "32:   return _IOC_WRITE;",
          "33:  default:",
          "34:   return _IOC_DIR(cmd);",
          "35:  }",
          "36: }",
          "38: long ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)",
          "39: {",
          "40:  struct ion_client *client = filp->private_data;",
          "41:  struct ion_device *dev = client->dev;",
          "42:  struct ion_handle *cleanup_handle = NULL;",
          "43:  int ret = 0;",
          "44:  unsigned int dir;",
          "46:  union {",
          "47:   struct ion_fd_data fd;",
          "48:   struct ion_allocation_data allocation;",
          "49:   struct ion_handle_data handle;",
          "50:   struct ion_custom_data custom;",
          "51:  } data;",
          "53:  dir = ion_ioctl_dir(cmd);",
          "55:  if (_IOC_SIZE(cmd) > sizeof(data))",
          "56:   return -EINVAL;",
          "58:  if (dir & _IOC_WRITE)",
          "59:   if (copy_from_user(&data, (void __user *)arg, _IOC_SIZE(cmd)))",
          "60:    return -EFAULT;",
          "62:  switch (cmd) {",
          "63:  case ION_IOC_ALLOC:",
          "64:  {",
          "65:   struct ion_handle *handle;",
          "67:   handle = ion_alloc(client, data.allocation.len,",
          "68:       data.allocation.align,",
          "69:       data.allocation.heap_id_mask,",
          "70:       data.allocation.flags);",
          "71:   if (IS_ERR(handle))",
          "72:    return PTR_ERR(handle);",
          "74:   data.allocation.handle = handle->id;",
          "76:   cleanup_handle = handle;",
          "77:   break;",
          "78:  }",
          "79:  case ION_IOC_FREE:",
          "80:  {",
          "81:   struct ion_handle *handle;",
          "83:   mutex_lock(&client->lock);",
          "84:   handle = ion_handle_get_by_id_nolock(client, data.handle.handle);",
          "85:   if (IS_ERR(handle)) {",
          "86:    mutex_unlock(&client->lock);",
          "87:    return PTR_ERR(handle);",
          "88:   }",
          "89:   ion_free_nolock(client, handle);",
          "90:   ion_handle_put_nolock(handle);",
          "91:   mutex_unlock(&client->lock);",
          "92:   break;",
          "93:  }",
          "94:  case ION_IOC_SHARE:",
          "95:  case ION_IOC_MAP:",
          "96:  {",
          "97:   struct ion_handle *handle;",
          "99:   handle = ion_handle_get_by_id(client, data.handle.handle);",
          "100:   if (IS_ERR(handle))",
          "101:    return PTR_ERR(handle);",
          "102:   data.fd.fd = ion_share_dma_buf_fd(client, handle);",
          "103:   ion_handle_put(handle);",
          "104:   if (data.fd.fd < 0)",
          "105:    ret = data.fd.fd;",
          "106:   break;",
          "107:  }",
          "108:  case ION_IOC_IMPORT:",
          "109:  {",
          "110:   struct ion_handle *handle;",
          "112:   handle = ion_import_dma_buf_fd(client, data.fd.fd);",
          "113:   if (IS_ERR(handle))",
          "114:    ret = PTR_ERR(handle);",
          "115:   else",
          "116:    data.handle.handle = handle->id;",
          "117:   break;",
          "118:  }",
          "119:  case ION_IOC_SYNC:",
          "120:  {",
          "121:   ret = ion_sync_for_device(client, data.fd.fd);",
          "122:   break;",
          "123:  }",
          "124:  case ION_IOC_CUSTOM:",
          "125:  {",
          "126:   if (!dev->custom_ioctl)",
          "127:    return -ENOTTY;",
          "128:   ret = dev->custom_ioctl(client, data.custom.cmd,",
          "129:       data.custom.arg);",
          "130:   break;",
          "131:  }",
          "132:  default:",
          "133:   return -ENOTTY;",
          "134:  }",
          "136:  if (dir & _IOC_READ) {",
          "137:   if (copy_to_user((void __user *)arg, &data, _IOC_SIZE(cmd))) {",
          "138:    if (cleanup_handle)",
          "139:     ion_free(client, cleanup_handle);",
          "140:    return -EFAULT;",
          "141:   }",
          "142:  }",
          "143:  return ret;",
          "144: }",
          "",
          "---------------"
        ],
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"ion_priv.h\"",
          "42: #include \"compat_ion.h\"",
          "118: bool ion_buffer_fault_user_mappings(struct ion_buffer *buffer)",
          "119: {",
          "120:  return (buffer->flags & ION_FLAG_CACHED) &&",
          "",
          "[Removed Lines]",
          "53: struct ion_device {",
          "54:  struct miscdevice dev;",
          "55:  struct rb_root buffers;",
          "56:  struct mutex buffer_lock;",
          "57:  struct rw_semaphore lock;",
          "58:  struct plist_head heaps;",
          "59:  long (*custom_ioctl)(struct ion_client *client, unsigned int cmd,",
          "60:         unsigned long arg);",
          "61:  struct rb_root clients;",
          "62:  struct dentry *debug_root;",
          "63:  struct dentry *heaps_debug_root;",
          "64:  struct dentry *clients_debug_root;",
          "65: };",
          "83: struct ion_client {",
          "84:  struct rb_node node;",
          "85:  struct ion_device *dev;",
          "86:  struct rb_root handles;",
          "87:  struct idr idr;",
          "88:  struct mutex lock;",
          "89:  const char *name;",
          "90:  char *display_name;",
          "91:  int display_serial;",
          "92:  struct task_struct *task;",
          "93:  pid_t pid;",
          "94:  struct dentry *debug_root;",
          "95: };",
          "109: struct ion_handle {",
          "110:  struct kref ref;",
          "111:  struct ion_client *client;",
          "112:  struct ion_buffer *buffer;",
          "113:  struct rb_node node;",
          "114:  unsigned int kmap_cnt;",
          "115:  int id;",
          "116: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:  kref_get(&handle->ref);",
          "377: }",
          "380: {",
          "381:  return kref_put(&handle->ref, ion_handle_destroy);",
          "382: }",
          "385: {",
          "386:  struct ion_client *client = handle->client;",
          "387:  int ret;",
          "",
          "[Removed Lines]",
          "379: static int ion_handle_put_nolock(struct ion_handle *handle)",
          "384: static int ion_handle_put(struct ion_handle *handle)",
          "",
          "[Added Lines]",
          "305: int ion_handle_put_nolock(struct ion_handle *handle)",
          "310: int ion_handle_put(struct ion_handle *handle)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:  return ERR_PTR(-EINVAL);",
          "412: }",
          "416: {",
          "417:  struct ion_handle *handle;",
          "",
          "[Removed Lines]",
          "414: static struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
          "415:             int id)",
          "",
          "[Added Lines]",
          "340: struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
          "341:             int id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "423:  return handle ? handle : ERR_PTR(-EINVAL);",
          "424: }",
          "427:             int id)",
          "428: {",
          "429:  struct ion_handle *handle;",
          "",
          "[Removed Lines]",
          "426: static struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
          "",
          "[Added Lines]",
          "352: struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "536: }",
          "537: EXPORT_SYMBOL(ion_alloc);",
          "541: {",
          "542:  if (!ion_handle_validate(client, handle)) {",
          "543:   WARN(1, \"%s: invalid handle passed to free.\\n\", __func__);",
          "",
          "[Removed Lines]",
          "539: static void ion_free_nolock(struct ion_client *client,",
          "540:        struct ion_handle *handle)",
          "",
          "[Added Lines]",
          "465: void ion_free_nolock(struct ion_client *client,",
          "466:        struct ion_handle *handle)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1209: }",
          "1210: EXPORT_SYMBOL(ion_import_dma_buf_fd);",
          "1213: {",
          "1214:  struct dma_buf *dmabuf;",
          "1215:  struct ion_buffer *buffer;",
          "",
          "[Removed Lines]",
          "1212: static int ion_sync_for_device(struct ion_client *client, int fd)",
          "",
          "[Added Lines]",
          "1138: int ion_sync_for_device(struct ion_client *client, int fd)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1233:  return 0;",
          "1234: }",
          "1358: static int ion_release(struct inode *inode, struct file *file)",
          "1359: {",
          "1360:  struct ion_client *client = file->private_data;",
          "",
          "[Removed Lines]",
          "1237: static unsigned int ion_ioctl_dir(unsigned int cmd)",
          "1238: {",
          "1239:  switch (cmd) {",
          "1240:  case ION_IOC_SYNC:",
          "1241:  case ION_IOC_FREE:",
          "1242:  case ION_IOC_CUSTOM:",
          "1243:   return _IOC_WRITE;",
          "1244:  default:",
          "1245:   return _IOC_DIR(cmd);",
          "1246:  }",
          "1247: }",
          "1249: static long ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)",
          "1250: {",
          "1251:  struct ion_client *client = filp->private_data;",
          "1252:  struct ion_device *dev = client->dev;",
          "1253:  struct ion_handle *cleanup_handle = NULL;",
          "1254:  int ret = 0;",
          "1255:  unsigned int dir;",
          "1257:  union {",
          "1258:   struct ion_fd_data fd;",
          "1259:   struct ion_allocation_data allocation;",
          "1260:   struct ion_handle_data handle;",
          "1261:   struct ion_custom_data custom;",
          "1262:  } data;",
          "1264:  dir = ion_ioctl_dir(cmd);",
          "1266:  if (_IOC_SIZE(cmd) > sizeof(data))",
          "1267:   return -EINVAL;",
          "1269:  if (dir & _IOC_WRITE)",
          "1270:   if (copy_from_user(&data, (void __user *)arg, _IOC_SIZE(cmd)))",
          "1271:    return -EFAULT;",
          "1273:  switch (cmd) {",
          "1274:  case ION_IOC_ALLOC:",
          "1275:  {",
          "1276:   struct ion_handle *handle;",
          "1278:   handle = ion_alloc(client, data.allocation.len,",
          "1279:        data.allocation.align,",
          "1280:        data.allocation.heap_id_mask,",
          "1281:        data.allocation.flags);",
          "1282:   if (IS_ERR(handle))",
          "1283:    return PTR_ERR(handle);",
          "1285:   data.allocation.handle = handle->id;",
          "1287:   cleanup_handle = handle;",
          "1288:   break;",
          "1289:  }",
          "1290:  case ION_IOC_FREE:",
          "1291:  {",
          "1292:   struct ion_handle *handle;",
          "1294:   mutex_lock(&client->lock);",
          "1295:   handle = ion_handle_get_by_id_nolock(client,",
          "1296:            data.handle.handle);",
          "1297:   if (IS_ERR(handle)) {",
          "1298:    mutex_unlock(&client->lock);",
          "1299:    return PTR_ERR(handle);",
          "1300:   }",
          "1301:   ion_free_nolock(client, handle);",
          "1302:   ion_handle_put_nolock(handle);",
          "1303:   mutex_unlock(&client->lock);",
          "1304:   break;",
          "1305:  }",
          "1306:  case ION_IOC_SHARE:",
          "1307:  case ION_IOC_MAP:",
          "1308:  {",
          "1309:   struct ion_handle *handle;",
          "1311:   handle = ion_handle_get_by_id(client, data.handle.handle);",
          "1312:   if (IS_ERR(handle))",
          "1313:    return PTR_ERR(handle);",
          "1314:   data.fd.fd = ion_share_dma_buf_fd(client, handle);",
          "1315:   ion_handle_put(handle);",
          "1316:   if (data.fd.fd < 0)",
          "1317:    ret = data.fd.fd;",
          "1318:   break;",
          "1319:  }",
          "1320:  case ION_IOC_IMPORT:",
          "1321:  {",
          "1322:   struct ion_handle *handle;",
          "1324:   handle = ion_import_dma_buf_fd(client, data.fd.fd);",
          "1325:   if (IS_ERR(handle))",
          "1326:    ret = PTR_ERR(handle);",
          "1327:   else",
          "1328:    data.handle.handle = handle->id;",
          "1329:   break;",
          "1330:  }",
          "1331:  case ION_IOC_SYNC:",
          "1332:  {",
          "1333:   ret = ion_sync_for_device(client, data.fd.fd);",
          "1334:   break;",
          "1335:  }",
          "1336:  case ION_IOC_CUSTOM:",
          "1337:  {",
          "1338:   if (!dev->custom_ioctl)",
          "1339:    return -ENOTTY;",
          "1340:   ret = dev->custom_ioctl(client, data.custom.cmd,",
          "1341:       data.custom.arg);",
          "1342:   break;",
          "1343:  }",
          "1344:  default:",
          "1345:   return -ENOTTY;",
          "1346:  }",
          "1348:  if (dir & _IOC_READ) {",
          "1349:   if (copy_to_user((void __user *)arg, &data, _IOC_SIZE(cmd))) {",
          "1350:    if (cleanup_handle)",
          "1351:     ion_free(client, cleanup_handle);",
          "1352:    return -EFAULT;",
          "1353:   }",
          "1354:  }",
          "1355:  return ret;",
          "1356: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/staging/android/ion/ion_priv.h||drivers/staging/android/ion/ion_priv.h": [
          "File: drivers/staging/android/ion/ion_priv.h -> drivers/staging/android/ion/ion_priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <linux/sched.h>",
          "27: #include <linux/shrinker.h>",
          "28: #include <linux/types.h>",
          "30: #include \"ion.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <linux/miscdevice.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: };",
          "81: void ion_buffer_destroy(struct ion_buffer *buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: struct ion_device {",
          "94:  struct miscdevice dev;",
          "95:  struct rb_root buffers;",
          "96:  struct mutex buffer_lock;",
          "97:  struct rw_semaphore lock;",
          "98:  struct plist_head heaps;",
          "99:  long (*custom_ioctl)(struct ion_client *client, unsigned int cmd,",
          "100:         unsigned long arg);",
          "101:  struct rb_root clients;",
          "102:  struct dentry *debug_root;",
          "103:  struct dentry *heaps_debug_root;",
          "104:  struct dentry *clients_debug_root;",
          "105: };",
          "123: struct ion_client {",
          "124:  struct rb_node node;",
          "125:  struct ion_device *dev;",
          "126:  struct rb_root handles;",
          "127:  struct idr idr;",
          "128:  struct mutex lock;",
          "129:  const char *name;",
          "130:  char *display_name;",
          "131:  int display_serial;",
          "132:  struct task_struct *task;",
          "133:  pid_t pid;",
          "134:  struct dentry *debug_root;",
          "135: };",
          "149: struct ion_handle {",
          "150:  struct kref ref;",
          "151:  struct ion_client *client;",
          "152:  struct ion_buffer *buffer;",
          "153:  struct rb_node node;",
          "154:  unsigned int kmap_cnt;",
          "155:  int id;",
          "156: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376: void ion_pages_sync_for_device(struct device *dev, struct page *page,",
          "377:   size_t size, enum dma_data_direction dir);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454: long ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);",
          "456: int ion_sync_for_device(struct ion_client *client, int fd);",
          "458: struct ion_handle *ion_handle_get_by_id_nolock(struct ion_client *client,",
          "459:       int id);",
          "461: void ion_free_nolock(struct ion_client *client, struct ion_handle *handle);",
          "463: int ion_handle_put_nolock(struct ion_handle *handle);",
          "465: struct ion_handle *ion_handle_get_by_id(struct ion_client *client,",
          "466:       int id);",
          "468: int ion_handle_put(struct ion_handle *handle);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "450524614bd2fc05239dd6186eb6d0deec483c24",
      "candidate_info": {
        "commit_hash": "450524614bd2fc05239dd6186eb6d0deec483c24",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/450524614bd2fc05239dd6186eb6d0deec483c24",
        "files": [
          "drivers/staging/android/ion/ion.c"
        ],
        "message": "staging: android: ion: Remove ret variable in ion_handle_put_nolock\n\nIt is not necessary to save the return value of kref_put since it is directly\nreturned.\n\nSigned-off-by: Johanna Abrahamsson <johanna@mjao.org>\nAcked-by: Laura Abbott <labbott@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "before_after_code_files": [
          "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ],
          "candidate": [
            "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/staging/android/ion/ion.c||drivers/staging/android/ion/ion.c": [
          "File: drivers/staging/android/ion/ion.c -> drivers/staging/android/ion/ion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: static int ion_handle_put_nolock(struct ion_handle *handle)",
          "385: {",
          "391: }",
          "393: static int ion_handle_put(struct ion_handle *handle)",
          "",
          "[Removed Lines]",
          "386:  int ret;",
          "388:  ret = kref_put(&handle->ref, ion_handle_destroy);",
          "390:  return ret;",
          "",
          "[Added Lines]",
          "386:  return kref_put(&handle->ref, ion_handle_destroy);",
          "",
          "---------------"
        ]
      }
    }
  ]
}