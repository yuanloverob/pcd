{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
      "candidate_info": {
        "commit_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55220a6c7016750ad316a985d2b887ed58b017ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Improved reuse of file descriptors for which close() is delayed to prevent clearly of posix advisory locks.\n\nFossilOrigin-Name: 509c1ba26a4c12c63ecf04ddfa2f175eaf4dd9b96ab7be15faebd36deb0a0a31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5770:       UnixUnusedFd **pp;",
          "5771:       assert( sqlite3_mutex_notheld(pInode->pLockMutex) );",
          "5772:       sqlite3_mutex_enter(pInode->pLockMutex);",
          "5773:       for(pp=&pInode->pUnused; *pp && (*pp)->flags!=flags; pp=&((*pp)->pNext));",
          "5774:       pUnused = *pp;",
          "5775:       if( pUnused ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5773:       flags &= (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6074:   if( p->pPreallocatedUnused ){",
          "6075:     p->pPreallocatedUnused->fd = fd;",
          "6077:   }",
          "6079:   if( isDelete ){",
          "",
          "[Removed Lines]",
          "6076:     p->pPreallocatedUnused->flags = flags;",
          "",
          "[Added Lines]",
          "6077:     p->pPreallocatedUnused->flags =",
          "6078:                           flags & (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
      "candidate_info": {
        "commit_hash": "01e92df41ef05b7ec1807beccc697fd521abc584",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01e92df41ef05b7ec1807beccc697fd521abc584",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Merge performance enhancements from trunk.\n\nFossilOrigin-Name: 0f1b9ff9e1e6f13e03045fcb7d0907227085054f9eb0b0b8471fb26b0094b13a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da53f3d3ff26cc32d3a5ac788b6785baa3d1688e50d9354025a3130dc7e71a38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   pParse->pVdbe = p;",
          "37:   assert( pParse->aLabel==0 );",
          "38:   assert( pParse->nLabel==0 );",
          "40:   assert( pParse->szOpAlloc==0 );",
          "41:   sqlite3VdbeAddOp2(p, OP_Init, 0, 1);",
          "42:   return p;",
          "",
          "[Removed Lines]",
          "39:   assert( pParse->nOpAlloc==0 );",
          "",
          "[Added Lines]",
          "39:   assert( p->nOpAlloc==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (p->nOpAlloc>=512 ? p->nOpAlloc*2 : p->nOpAlloc+nOp);",
          "160:   int nNew = (p->nOpAlloc ? p->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:   }",
          "170:   assert( nOp<=(1024/sizeof(Op)) );",
          "172:   pNew = sqlite3DbRealloc(p->db, v->aOp, nNew*sizeof(Op));",
          "173:   if( pNew ){",
          "174:     p->szOpAlloc = sqlite3DbMallocSize(p->db, pNew);",
          "176:     v->aOp = pNew;",
          "177:   }",
          "178:   return (pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT);",
          "",
          "[Removed Lines]",
          "171:   assert( nNew>=(p->nOpAlloc+nOp) );",
          "175:     p->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "[Added Lines]",
          "171:   assert( nNew>=(v->nOpAlloc+nOp) );",
          "175:     v->nOpAlloc = p->szOpAlloc/sizeof(Op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208: static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "210:   if( growOpArray(p, 1) ) return 1;",
          "212:   return sqlite3VdbeAddOp3(p, op, p1, p2, p3);",
          "213: }",
          "214: int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){",
          "",
          "[Removed Lines]",
          "209:   assert( p->pParse->nOpAlloc<=p->nOp );",
          "211:   assert( p->pParse->nOpAlloc>p->nOp );",
          "",
          "[Added Lines]",
          "209:   assert( p->nOpAlloc<=p->nOp );",
          "211:   assert( p->nOpAlloc>p->nOp );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:   i = p->nOp;",
          "219:   assert( p->magic==VDBE_MAGIC_INIT );",
          "220:   assert( op>=0 && op<0xff );",
          "222:     return growOp3(p, op, p1, p2, p3);",
          "223:   }",
          "224:   p->nOp++;",
          "",
          "[Removed Lines]",
          "221:   if( p->pParse->nOpAlloc<=i ){",
          "",
          "[Added Lines]",
          "221:   if( p->nOpAlloc<=i ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "810: void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){",
          "812: }",
          "813: #endif",
          "",
          "[Removed Lines]",
          "811:   assert( p->nOp + N <= p->pParse->nOpAlloc );",
          "",
          "[Added Lines]",
          "811:   assert( p->nOp + N <= p->nOpAlloc );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "880:   VdbeOp *pOut, *pFirst;",
          "881:   assert( nOp>0 );",
          "882:   assert( p->magic==VDBE_MAGIC_INIT );",
          "884:     return 0;",
          "885:   }",
          "886:   pFirst = pOut = &p->aOp[p->nOp];",
          "",
          "[Removed Lines]",
          "883:   if( p->nOp + nOp > p->pParse->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "[Added Lines]",
          "883:   if( p->nOp + nOp > p->nOpAlloc && growOpArray(p, nOp) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2211: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2213: #endif",
          "2215:     x.pSpace = p->pFree = sqlite3DbMallocRawNN(db, x.nNeeded);",
          "2216:     x.nFree = x.nNeeded;",
          "2219:   p->pVList = pParse->pVList;",
          "2220:   pParse->pVList =  0;",
          "",
          "[Removed Lines]",
          "2205:   do {",
          "2206:     x.nNeeded = 0;",
          "2207:     p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2208:     p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2209:     p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2210:     p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2212:     p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2214:     if( x.nNeeded==0 ) break;",
          "2217:   }while( !db->mallocFailed );",
          "",
          "[Added Lines]",
          "2205:   x.nNeeded = 0;",
          "2206:   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));",
          "2207:   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));",
          "2208:   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));",
          "2209:   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));",
          "2211:   p->anExec = allocSpace(&x, 0, p->nOp*sizeof(i64));",
          "2213:   if( x.nNeeded ){",
          "2216:     if( !db->mallocFailed ){",
          "2217:       p->aMem = allocSpace(&x, p->aMem, nMem*sizeof(Mem));",
          "2218:       p->aVar = allocSpace(&x, p->aVar, nVar*sizeof(Mem));",
          "2219:       p->apArg = allocSpace(&x, p->apArg, nArg*sizeof(Mem*));",
          "2220:       p->apCsr = allocSpace(&x, p->apCsr, nCursor*sizeof(VdbeCursor*));",
          "2221: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "2222:       p->anExec = allocSpace(&x, p->anExec, p->nOp*sizeof(i64));",
          "2223: #endif",
          "2224:     }",
          "2225:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
      "candidate_info": {
        "commit_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56b99ebc3245ce03f4242849284656c9d32aba05",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Add test case for the previous commit.\n\nFossilOrigin-Name: 197edb235b785c68fda7be788efbc61137d9452886599415a927b959ade93c65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f21c6f1343edc4ba68f9f8e68caac34da0d1c651526ecaf61c0e2d66593a555e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   INSERT INTO t1(b) VALUES(zeroblob(40000));",
          "579: } {1 {database disk image is malformed}}",
          "583: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: #-------------------------------------------------------------------------",
          "582: reset_db",
          "583: do_test 6.0 {",
          "584:   sqlite3 db {}",
          "585:   db deserialize [decode_hexdb {",
          "586: | size 20480 pagesize 4096 filename crash-d260f001fa015c.db",
          "587: | page 1 offset 0",
          "588: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "589: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "590: |     32: 00 00 00 00 00 ff ff f0 00 00 00 02 00 00 00 04   ................",
          "591: |     48: 00 00 00 00 00 00 00 64 00 00 00 01 00 00 00 00   .......d........",
          "592: |     96: 00 00 00 00 0d 0f f8 00 04 0e ce 00 0f 4c 0f d3   .............L..",
          "593: |    112: 0e fa 0e ce 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "594: |   3776: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2a 04   ..............*.",
          "595: |   3792: 06 17 13 11 01 3f 69 6e 64 65 78 74 31 62 74 31   .....?indext1bt1",
          "596: |   3808: 05 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "597: |   3824: 62 20 4f 4e 20 74 31 28 62 29 50 03 06 17 2b 2b   b ON t1(b)P...++",
          "598: |   3840: 01 59 74 61 62 6c 65 73 71 6c 69 74 65 5f 73 65   .Ytablesqlite_se",
          "599: |   3856: 71 75 65 6e 63 65 73 71 6c 69 74 65 5f 73 65 71   quencesqlite_seq",
          "600: |   3872: 75 65 6e 63 65 04 43 52 45 41 54 45 20 54 41 42   uence.CREATE TAB",
          "601: |   3888: 4c 45 20 73 71 6c 69 74 65 5f 73 65 71 75 65 6e   LE sqlite_sequen",
          "602: |   3904: 63 65 28 6e 61 6d 65 2c 73 65 71 29 81 04 01 07   ce(name,seq)....",
          "603: |   3920: 17 11 11 01 81 73 74 61 c2 6c 65 74 31 74 31 02   .....sta.let1t1.",
          "604: |   3936: 43 52 45 41 54 45 20 54 41 42 4c 45 20 74 31 28   CREATE TABLE t1(",
          "605: |   3952: 61 20 52 45 41 4c 20 4e 4f 54 20 4e 55 4c 4c 20   a REAL NOT NULL",
          "606: |   3968: 44 45 46 41 55 4c 54 28 32 35 2b 33 32 29 2c 62   DEFAULT(25+32),b",
          "607: |   3984: 20 46 4c 4f 41 54 2c 63 20 44 4f 55 42 4c 45 20    FLOAT,c DOUBLE",
          "608: |   4000: 55 4e 49 51 55 45 2c 0a 64 20 43 4c 4f 42 2c 65   UNIQUE,.d CLOB,e",
          "609: |   4016: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "610: |   4032: 20 4b 45 59 20 41 55 54 4f 49 4e 43 52 45 4d 45    KEY AUTOINCREME",
          "611: |   4048: 4e 54 29 23 02 06 17 37 11 01 00 69 6e 64 65 78   NT)#...7...index",
          "612: |   4064: 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e 64 65 78   sqlite_autoindex",
          "613: |   4080: 5f 74 31 5f 31 74 31 05 00 00 00 08 00 00 00 00   _t1_1t1.........",
          "614: | page 2 offset 4096",
          "615: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "616: | page 3 offset 8192",
          "617: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "618: | page 4 offset 12288",
          "619: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "620: | page 5 offset 16384",
          "621: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "622: | end crash-d260f001fa015c.db",
          "623: }]} {}",
          "625: do_catchsql_test 6.1 {",
          "626:   BEGIN;",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
      "candidate_info": {
        "commit_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Remove a stray tab from the source code.\n\nFossilOrigin-Name: 0ada58e9303d53aba8bdc37abe5904aa40e91f80e247eb51cb1192387b0d661c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   assert( p->zSql!=0 );",
          "68:   sqlite3OsCurrentTimeInt64(db->pVfs, &iNow);",
          "69:   iElapse = (iNow - p->startTime)*1000000;",
          "71:   if( db->xProfile ){",
          "72:     db->xProfile(db->pProfileArg, p->zSql, iElapse);",
          "73:   }",
          "",
          "[Removed Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "[Added Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
      "candidate_info": {
        "commit_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/de7109e61b4ff3b632250cdcd962a1a440609549",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeapi.c",
          "test/index.test"
        ],
        "message": "Ensure that the typeof() function always returns SQLITE_FLOAT for floating point values even when the value is stored as an integer to save space.\n\nFossilOrigin-Name: 48889530a9de22fee536edfd1627be62396ed18d842d5fd6d91e010b4337be95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   };",
          "270:   return aType[pVal->flags&MEM_AffMask];",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: #ifdef SQLITE_DEBUG",
          "303:   {",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "314:     assert( eType == aType[pVal->flags&MEM_AffMask] );",
          "315:   }",
          "316: #endif",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "761: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760: do_execsql_test index-23.1 {",
          "761:   DROP TABLE t1;",
          "762:   CREATE TABLE t1(a REAL);",
          "763:   CREATE UNIQUE INDEX index_0 ON t1(TYPEOF(a));",
          "764:   INSERT OR IGNORE INTO t1(a) VALUES (0.1),(FALSE);",
          "765:   SELECT * FROM t1;",
          "766:   REINDEX;",
          "767: } {0.1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}