{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf731a27c2bffc000bc3f4ba7d15f819d87014a1",
      "candidate_info": {
        "commit_hash": "cf731a27c2bffc000bc3f4ba7d15f819d87014a1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/cf731a27c2bffc000bc3f4ba7d15f819d87014a1",
        "files": [
          "include/ppc.h",
          "tests/test_ppc.c"
        ],
        "message": "improve type safety, use ppc_reg instead of unsigned int",
        "before_after_code_files": [
          "include/ppc.h||include/ppc.h",
          "tests/test_ppc.c||tests/test_ppc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/ppc.h||include/ppc.h": [
          "File: include/ppc.h -> include/ppc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  PPC_BH_MINUS, // MINUS hint",
          "40: } ppc_bh;",
          "93: typedef enum ppc_reg {",
          "94:  PPC_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "43: typedef enum ppc_op_type {",
          "44:  PPC_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).",
          "45:  PPC_OP_REG, // = CS_OP_REG (Register operand).",
          "46:  PPC_OP_IMM, // = CS_OP_IMM (Immediate operand).",
          "47:  PPC_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "48:  PPC_OP_CRX = 64, // Condition Register field",
          "49: } ppc_op_type;",
          "53: typedef struct ppc_op_mem {",
          "54:  unsigned int base; // base register",
          "55:  int32_t disp; // displacement/offset value",
          "56: } ppc_op_mem;",
          "58: typedef struct ppc_op_crx {",
          "59:  unsigned int scale;",
          "60:  unsigned int reg;",
          "61:  ppc_bc cond;",
          "62: } ppc_op_crx;",
          "65: typedef struct cs_ppc_op {",
          "66:  ppc_op_type type; // operand type",
          "67:  union {",
          "68:   unsigned int reg; // register value for REG operand",
          "69:   int32_t imm;  // immediate value for IMM operand",
          "70:   ppc_op_mem mem;  // base/disp value for MEM operand",
          "71:   ppc_op_crx crx;  // operand with condition register",
          "72:  };",
          "73: } cs_ppc_op;",
          "76: typedef struct cs_ppc {",
          "78:  ppc_bc bc;",
          "81:  ppc_bh bh;",
          "84:  bool update_cr0;",
          "88:  uint8_t op_count;",
          "89:  cs_ppc_op operands[8]; // operands for this instruction.",
          "90: } cs_ppc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:  PPC_REG_ENDING,   // <-- mark the end of the list of registers",
          "277: } ppc_reg;",
          "280: typedef enum ppc_insn {",
          "281:  PPC_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: typedef enum ppc_op_type {",
          "231:  PPC_OP_INVALID = 0, // = CS_OP_INVALID (Uninitialized).",
          "232:  PPC_OP_REG, // = CS_OP_REG (Register operand).",
          "233:  PPC_OP_IMM, // = CS_OP_IMM (Immediate operand).",
          "234:  PPC_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "235:  PPC_OP_CRX = 64, // Condition Register field",
          "236: } ppc_op_type;",
          "240: typedef struct ppc_op_mem {",
          "241:  ppc_reg base; // base register",
          "242:  int32_t disp; // displacement/offset value",
          "243: } ppc_op_mem;",
          "245: typedef struct ppc_op_crx {",
          "246:  unsigned int scale;",
          "247:  ppc_reg reg;",
          "248:  ppc_bc cond;",
          "249: } ppc_op_crx;",
          "252: typedef struct cs_ppc_op {",
          "253:  ppc_op_type type; // operand type",
          "254:  union {",
          "255:   ppc_reg reg; // register value for REG operand",
          "256:   int32_t imm;  // immediate value for IMM operand",
          "257:   ppc_op_mem mem;  // base/disp value for MEM operand",
          "258:   ppc_op_crx crx;  // operand with condition register",
          "259:  };",
          "260: } cs_ppc_op;",
          "263: typedef struct cs_ppc {",
          "265:  ppc_bc bc;",
          "268:  ppc_bh bh;",
          "271:  bool update_cr0;",
          "275:  uint8_t op_count;",
          "276:  cs_ppc_op operands[8]; // operands for this instruction.",
          "277: } cs_ppc;",
          "",
          "---------------"
        ],
        "tests/test_ppc.c||tests/test_ppc.c": [
          "File: tests/test_ppc.c -> tests/test_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     break;",
          "84:    case PPC_OP_MEM:",
          "85:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "87:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "88:        i, cs_reg_name(handle, op->mem.base));",
          "89:     if (op->mem.disp != 0)",
          "",
          "[Removed Lines]",
          "86:     if (op->mem.base != X86_REG_INVALID)",
          "",
          "[Added Lines]",
          "86:     if (op->mem.base != PPC_REG_INVALID)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7fe640bd0ae517ea024d44db9acf8e73702c11a",
      "candidate_info": {
        "commit_hash": "f7fe640bd0ae517ea024d44db9acf8e73702c11a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f7fe640bd0ae517ea024d44db9acf8e73702c11a",
        "files": [
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/M68K/M68KInstPrinter.c",
          "cs.c",
          "tests/test_arm.c",
          "tests/test_arm64.c",
          "tests/test_m68k.c"
        ],
        "message": "port #684 to the next branch",
        "before_after_code_files": [
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c",
          "cs.c||cs.c",
          "tests/test_arm.c||tests/test_arm.c",
          "tests/test_arm64.c||tests/test_arm64.c",
          "tests/test_m68k.c||tests/test_m68k.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:  double FPImm = MCOperand_isFPImm(MO) ? MCOperand_getFPImm(MO) : AArch64_AM_getFPImmFloat((int)MCOperand_getImm(MO));",
          "1278:  SStream_concat(O, \"#%.8f\", FPImm);",
          "1279:  if (MI->csh->detail) {",
          "1280: #ifndef CAPSTONE_DIET",
          "1281:   uint8_t access;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1278: #if defined(_KERNEL_MODE)",
          "1280:  SStream_concat(O, \"#<float_point_unsupported>\");",
          "1281: #else",
          "1283: #endif",
          "",
          "---------------"
        ],
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   case M68K_AM_ABSOLUTE_DATA_LONG: SStream_concat(O, \"$%x.l\", op->imm); break;",
          "148:   case M68K_AM_IMMIDIATE:",
          "149:     if (inst->op_size.type == M68K_SIZE_TYPE_FPU) {",
          "150:      if (inst->op_size.fpu_size == M68K_FPU_SIZE_SINGLE)",
          "151:       SStream_concat(O, \"#%f\", op->simm);",
          "152:      else if (inst->op_size.fpu_size == M68K_FPU_SIZE_DOUBLE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #if defined(_KERNEL_MODE)",
          "152:      SStream_concat(O, \"#<float_point_unsupported>\");",
          "153:      break;",
          "154: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:      else",
          "155:       SStream_concat(O, \"#<unsupported>\");",
          "156:      break;",
          "157:     }",
          "158:     SStream_concat(O, \"#$%x\", op->imm);",
          "159:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: #endif",
          "",
          "---------------"
        ],
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"windows\\winkernel_mm.h\"",
          "22: #endif",
          "24: #if !defined(CAPSTONE_HAS_OSXKERNEL) && !defined(CAPSTONE_DIET) && !defined(_KERNEL_MODE)",
          "25: #define INSN_CACHE_SIZE 32",
          "26: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #if defined(_KERNEL_MODE) && !defined(CAPSTONE_DIET)",
          "26: #if defined(CAPSTONE_HAS_ARM) || defined(CAPSTONE_HAS_ARM64) || defined(CAPSTONE_HAS_M68K)",
          "27: #define CAPSTONE_STR_INTERNAL(x) #x",
          "28: #define CAPSTONE_STR(x) CAPSTONE_STR_INTERNAL(x)",
          "29: #define CAPSTONE_MSVC_WRANING_PREFIX __FILE__ \"(\"CAPSTONE_STR(__LINE__)\") : warning message : \"",
          "31: #pragma message(CAPSTONE_MSVC_WRANING_PREFIX \"Windows driver does not support full features for selected architecture(s). Define CAPSTONE_DIET to compile Capstone with only supported features. See issue #681 for details.\")",
          "33: #undef CAPSTONE_MSVC_WRANING_PREFIX",
          "34: #undef CAPSTONE_STR",
          "35: #undef CAPSTONE_STR_INTERNAL",
          "36: #endif",
          "37: #endif // defined(_KERNEL_MODE) && !defined(CAPSTONE_DIET)",
          "",
          "---------------"
        ],
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "59:     break;",
          "60:    case ARM_OP_FP:",
          "61:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "62:     break;",
          "63:    case ARM_OP_MEM:",
          "64:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #if defined(_KERNEL_MODE)",
          "63:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "64: #else",
          "66: #endif",
          "",
          "---------------"
        ],
        "tests/test_arm64.c||tests/test_arm64.c": [
          "File: tests/test_arm64.c -> tests/test_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "57:     break;",
          "58:    case ARM64_OP_FP:",
          "59:     printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "60:     break;",
          "61:    case ARM64_OP_MEM:",
          "62:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #if defined(_KERNEL_MODE)",
          "61:     printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "62: #else",
          "64: #endif",
          "",
          "---------------"
        ],
        "tests/test_m68k.c||tests/test_m68k.c": [
          "File: tests/test_m68k.c -> tests/test_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     break;",
          "87:    case M68K_OP_IMM:",
          "88:     if (m68k->op_size.type == M68K_SIZE_TYPE_FPU) {",
          "89:      if (m68k->op_size.fpu_size == M68K_FPU_SIZE_SINGLE)",
          "90:       printf(\"\\t\\toperands[%u].type: IMM = %f\\n\", i, op->simm);",
          "91:      else if (m68k->op_size.fpu_size == M68K_FPU_SIZE_DOUBLE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #if defined(_KERNEL_MODE)",
          "91:      printf(\"\\t\\toperands[%u].type: IMM = <float_point_unsupported>\\n\", i);",
          "92:      break;",
          "93: #else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:      else",
          "94:       printf(\"\\t\\toperands[%u].type: IMM = <unsupported>\\n\", i);",
          "95:      break;",
          "96:     }",
          "98:     printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, (int)op->imm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e213802e63eaf7b1f207a4277b410ca48d04fe85",
      "candidate_info": {
        "commit_hash": "e213802e63eaf7b1f207a4277b410ca48d04fe85",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e213802e63eaf7b1f207a4277b410ca48d04fe85",
        "files": [
          "cstool/cstool.c",
          "include/platform.h"
        ],
        "message": "Fix build under VS2012 (i.e. MSC_VER = 1700)\n\ncstool.c currently imports inttypes.h, which breaks\nbuilding on older Visual Studio versions (I've been\ntesting 2012). This commit removes the explicit include\nof inttypes.h, which is already handled in platform.h\n(which is included by capstone.h). A define for the\nfunction strtoull (used by cstool) has also been added\nto platform.h for the case where MSC_VER <= 1700.\n\nI don't know what effect this will have on OS X builds\nas I'm unable to test on that platform.\n\nAlso, cstool.c doesn't need to include stdio.h\nbecause it's already included by capstone.h.",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "include/platform.h||include/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <string.h>",
          "5: #include <ctype.h>",
          "6: #include <errno.h>",
          "",
          "[Removed Lines]",
          "2: #include <stdio.h>",
          "3: #include <inttypes.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/platform.h||include/platform.h": [
          "File: include/platform.h -> include/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #define PRIX32        \"X\"",
          "91: #endif",
          "93: #define PRId64        __PRI_64_LENGTH_MODIFIER__ \"d\"",
          "94: #define PRIi64        __PRI_64_LENGTH_MODIFIER__ \"i\"",
          "95: #define PRIo64        __PRI_64_LENGTH_MODIFIER__ \"o\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #if defined(_MSC_VER) && _MSC_VER <= 1700",
          "95: #define strtoull _strtoui64",
          "96: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fa3f02f2aa731b32db0aa20e126a90229d5a46e",
      "candidate_info": {
        "commit_hash": "2fa3f02f2aa731b32db0aa20e126a90229d5a46e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/2fa3f02f2aa731b32db0aa20e126a90229d5a46e",
        "files": [
          "arch/PowerPC/PPCInstPrinter.c"
        ],
        "message": "ppc: print 0 offset for memory operand. see issue #856",
        "before_after_code_files": [
          "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/PowerPC/PPCInstPrinter.c||arch/PowerPC/PPCInstPrinter.c": [
          "File: arch/PowerPC/PPCInstPrinter.c -> arch/PowerPC/PPCInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502: {",
          "503:  if (MCOperand_isImm(MCInst_getOperand(MI, OpNo))) {",
          "504:   short Imm = (short)MCOperand_getImm(MCInst_getOperand(MI, OpNo));",
          "509:   if (Imm >= 0) {",
          "510:    if (Imm > HEX_THRESHOLD)",
          "",
          "[Removed Lines]",
          "506:   if (Imm == 0)",
          "507:    return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d609ebdb03e95fe8086aeec00593a0a745d05a2",
      "candidate_info": {
        "commit_hash": "6d609ebdb03e95fe8086aeec00593a0a745d05a2",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/6d609ebdb03e95fe8086aeec00593a0a745d05a2",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: support arm64be",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  if (cs_support(CS_ARCH_ARM64)) {",
          "95:   printf(\"        arm64:     aarch64 mode\\n\");",
          "96:  }",
          "98:  if (cs_support(CS_ARCH_MIPS)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   printf(\"        arm64be:   aarch64 + big endian\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "225:  }",
          "227:  if (!strcmp(mode, \"mips\")) {",
          "228:   arch = CS_ARCH_MIPS;",
          "229:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 | CS_MODE_LITTLE_ENDIAN, &handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:  if (!strcmp(mode, \"arm64be\")) {",
          "229:   arch = CS_ARCH_ARM64;",
          "230:   err = cs_open(CS_ARCH_ARM64, CS_MODE_BIG_ENDIAN, &handle);",
          "231:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}