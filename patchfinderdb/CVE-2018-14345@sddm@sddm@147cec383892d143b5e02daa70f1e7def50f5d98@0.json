{
  "cve_id": "CVE-2018-14345",
  "cve_desc": "An issue was discovered in SDDM through 0.17.0. If configured with ReuseSession=true, the password is not checked for users with an already existing session. Any user with access to the system D-Bus can therefore unlock any graphical session. This is related to daemon/Display.cpp and helper/backend/PamBackend.cpp.",
  "repo": "sddm/sddm",
  "patch_hash": "147cec383892d143b5e02daa70f1e7def50f5d98",
  "patch_info": {
    "commit_hash": "147cec383892d143b5e02daa70f1e7def50f5d98",
    "repo": "sddm/sddm",
    "commit_url": "https://github.com/sddm/sddm/commit/147cec383892d143b5e02daa70f1e7def50f5d98",
    "files": [
      "src/daemon/Display.cpp",
      "src/helper/backend/PamBackend.cpp"
    ],
    "message": "Fix authentication when reusing an existing session\n\n- Check the success value before unlocking the session\n- Don't attempt to use the nonexistant \"sddm-check\" PAM service",
    "before_after_code_files": [
      "src/daemon/Display.cpp||src/daemon/Display.cpp",
      "src/helper/backend/PamBackend.cpp||src/helper/backend/PamBackend.cpp"
    ]
  },
  "patch_diff": {
    "src/daemon/Display.cpp||src/daemon/Display.cpp": [
      "File: src/daemon/Display.cpp -> src/daemon/Display.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:         } else {",
      "343:                 qDebug() << \"activating existing seat\";",
      "344:                 OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());",
      "345:                 manager.UnlockSession(existingSessionId);",
      "",
      "[Removed Lines]",
      "342:             connect(m_auth, &Auth::authentication, this, [=](){",
      "",
      "[Added Lines]",
      "342:             connect(m_auth, &Auth::authentication, this, [=](const QString &, bool success){",
      "343:                 if(!success)",
      "344:                     return;",
      "",
      "---------------"
    ],
    "src/helper/backend/PamBackend.cpp||src/helper/backend/PamBackend.cpp": [
      "File: src/helper/backend/PamBackend.cpp -> src/helper/backend/PamBackend.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "220:         if (user == QStringLiteral(\"sddm\") && m_greeter)",
      "221:             service = QStringLiteral(\"sddm-greeter\");",
      "224:         else if (m_autologin)",
      "225:             service = QStringLiteral(\"sddm-autologin\");",
      "226:         result = m_pam->start(service, user);",
      "",
      "[Removed Lines]",
      "222:         else if (m_app->session()->path().isEmpty())",
      "223:             service = QStringLiteral(\"sddm-check\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72b82eba652da365b7d6a40f6bb2fa1e51075b41",
      "candidate_info": {
        "commit_hash": "72b82eba652da365b7d6a40f6bb2fa1e51075b41",
        "repo": "sddm/sddm",
        "commit_url": "https://github.com/sddm/sddm/commit/72b82eba652da365b7d6a40f6bb2fa1e51075b41",
        "files": [
          "data/interfaces/org.freedesktop.login1.Manager.xml",
          "data/interfaces/org.freedesktop.login1.Seat.xml",
          "data/interfaces/org.freedesktop.login1.Session.xml",
          "data/interfaces/org.freedesktop.login1.User.xml",
          "src/common/Configuration.h",
          "src/daemon/CMakeLists.txt",
          "src/daemon/Display.cpp",
          "src/helper/CMakeLists.txt",
          "src/helper/HelperApp.cpp"
        ],
        "message": "Re-use existing sessions\n\nMost desktop environments don't support logging in as the same user\ntwice, especially with system changes that means the DBUS session bus is\nthe same.\n\nWith this patch if a user tries to log in as a user that is already\nlogged in we unlock and activate that session rather than creating a new\nsession.\n\nThis behaviour is configurable with a config option. The default matches\nthe current behaviour.",
        "before_after_code_files": [
          "src/common/Configuration.h||src/common/Configuration.h",
          "src/daemon/Display.cpp||src/daemon/Display.cpp",
          "src/helper/HelperApp.cpp||src/helper/HelperApp.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/daemon/Display.cpp||src/daemon/Display.cpp"
          ],
          "candidate": [
            "src/daemon/Display.cpp||src/daemon/Display.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/common/Configuration.h||src/common/Configuration.h": [
          "File: src/common/Configuration.h -> src/common/Configuration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                                                                                                    \"Users with these shells as their default won't be listed\"));",
          "89:             Entry(RememberLastUser,    bool,        true,                                       _S(\"Remember the last successfully logged in user\"));",
          "90:             Entry(RememberLastSession, bool,        true,                                       _S(\"Remember the session of the last successfully logged in user\"));",
          "91:         );",
          "93:         Section(Autologin,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:             Entry(ReuseSession,        bool,        false,                                      _S(\"When logging in as the same user twice, restore the original session, rather than create a new one\"));",
          "",
          "---------------"
        ],
        "src/daemon/Display.cpp||src/daemon/Display.cpp": [
          "File: src/daemon/Display.cpp -> src/daemon/Display.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <pwd.h>",
          "40: #include <unistd.h>",
          "42: namespace SDDM {",
          "43:     Display::Display(const int terminalId, Seat *parent) : QObject(parent),",
          "44:         m_terminalId(terminalId),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include <QDBusConnection>",
          "43: #include <QDBusMessage>",
          "44: #include <QDBusReply>",
          "46: #include \"Login1Manager.h\"",
          "47: #include \"Login1Session.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:             return;",
          "273:         }",
          "276:         m_lastSession = session;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:         QString existingSessionId;",
          "285:         if (Logind::isAvailable() && mainConfig.Users.ReuseSession.get()) {",
          "286:             OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());",
          "287:             auto reply = manager.ListSessions();",
          "288:             reply.waitForFinished();",
          "290:             foreach(const SessionInfo &s, reply.value()) {",
          "291:                 if (s.userName == user) {",
          "292:                     OrgFreedesktopLogin1SessionInterface session(Logind::serviceName(), s.sessionPath.path(), QDBusConnection::systemBus());",
          "293:                     if (session.service() == QLatin1String(\"sddm\")) {",
          "294:                         existingSessionId =  s.sessionId;",
          "295:                         break;",
          "296:                     }",
          "297:                 }",
          "298:             }",
          "299:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:         m_auth->insertEnvironment(env);",
          "308:         m_auth->setUser(user);",
          "310:         m_auth->start();",
          "311:     }",
          "",
          "[Removed Lines]",
          "309:         m_auth->setSession(session.exec());",
          "",
          "[Added Lines]",
          "335:         if (existingSessionId.isNull()) {",
          "336:             m_auth->setSession(session.exec());",
          "337:         } else {",
          "340:             connect(m_auth, &Auth::authentication, this, [=](){",
          "341:                 qDebug() << \"activating existing seat\";",
          "342:                 OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());",
          "343:                 manager.UnlockSession(existingSessionId);",
          "344:                 manager.ActivateSession(existingSessionId);",
          "345:             });",
          "346:         }",
          "",
          "---------------"
        ],
        "src/helper/HelperApp.cpp||src/helper/HelperApp.cpp": [
          "File: src/helper/HelperApp.cpp -> src/helper/HelperApp.cpp"
        ]
      }
    }
  ]
}