{
  "cve_id": "CVE-2018-7329",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.4 and 2.2.0 to 2.2.12, epan/dissectors/packet-s7comm.c had an infinite loop that was addressed by correcting off-by-one errors.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5d99febe66e96b55a1defa58a906be254bad3a51",
  "patch_info": {
    "commit_hash": "5d99febe66e96b55a1defa58a906be254bad3a51",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5d99febe66e96b55a1defa58a906be254bad3a51",
    "files": [
      "epan/dissectors/packet-s7comm.c"
    ],
    "message": "S7comm: fix range check to prevent infinite loop when upper bound is 255\n\nWhile we are at it, fix identification of not last element in a few\nplaces\n\nBug: 14423\nChange-Id: I568530949d09ddfd8c5c58d24050dfed32ce10f5\nReviewed-on: https://code.wireshark.org/review/25851\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c": [
      "File: epan/dissectors/packet-s7comm.c -> epan/dissectors/packet-s7comm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2476:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_dbread_numareas, tvb, offset, 1, ENC_BIG_ENDIAN, &number_of_areas);",
      "2477:     proto_item_append_text(tree, \" (%d Data-Areas of Syntax-Id DBREAD)\", number_of_areas);",
      "2478:     offset += 1;",
      "2480:         sub_item = proto_tree_add_item(tree, hf_s7comm_param_subitem, tvb, offset, 5, ENC_NA);",
      "2481:         sub_item_tree = proto_item_add_subtree(sub_item, ett_s7comm_param_subitem);",
      "2482:         proto_tree_add_item_ret_uint(sub_item_tree, hf_s7comm_item_dbread_length, tvb, offset, 1, ENC_BIG_ENDIAN, &len);",
      "",
      "[Removed Lines]",
      "2479:     for (i = 1; i <= number_of_areas; i++) {",
      "",
      "[Added Lines]",
      "2479:     for (i = 0; i < number_of_areas; i++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2486:         proto_tree_add_item_ret_uint(sub_item_tree, hf_s7comm_item_dbread_startadr, tvb, offset, 2, ENC_BIG_ENDIAN, &bytepos);",
      "2487:         offset += 2;",
      "2490:     }",
      "2491:     return offset;",
      "2492: }",
      "",
      "[Removed Lines]",
      "2489:         proto_item_append_text(sub_item, \" [%d]: (DB%d.DBB %d BYTE %d)\", i, db, bytepos, len);",
      "",
      "[Added Lines]",
      "2489:         proto_item_append_text(sub_item, \" [%d]: (DB%d.DBB %d BYTE %d)\", i+1, db, bytepos, len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2714:     proto_item *item = NULL;",
      "2715:     proto_tree *item_tree = NULL;",
      "2718:         ret_val = tvb_get_guint8(tvb, offset);",
      "2720:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, 1, ENC_NA);",
      "2721:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
      "2723:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
      "2724:         offset += 1;",
      "2725:     }",
      "",
      "[Removed Lines]",
      "2717:     for (i = 1; i <= item_count; i++) {",
      "2722:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
      "",
      "[Added Lines]",
      "2717:     for (i = 0; i < item_count; i++) {",
      "2722:         proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2759:         }",
      "2760:     } else {",
      "2763:             ret_val = tvb_get_guint8(tvb, offset);",
      "2764:             if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||",
      "2765:                 ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||",
      "",
      "[Removed Lines]",
      "2762:         for (i = 1; i <= item_count; i++) {",
      "",
      "[Added Lines]",
      "2762:         for (i = 0; i < item_count; i++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2781:                 }",
      "2785:                     len2 = len + 1;",
      "2786:                 } else {",
      "2787:                     len2 = len;",
      "",
      "[Removed Lines]",
      "2784:                 if ((len % 2) && (i < item_count)) {",
      "",
      "[Added Lines]",
      "2784:                 if ((len % 2) && (i < (item_count-1))) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2791:             item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);",
      "2792:             item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
      "2795:             proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
      "2796:             proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
      "",
      "[Removed Lines]",
      "2793:             proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
      "",
      "[Added Lines]",
      "2793:             proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4004:     nr_objects = tvb_get_guint8(tvb, offset);",
      "4005:     proto_tree_add_uint(msg_item_tree, hf_s7comm_cpu_alarm_message_nr_objects, tvb, offset, 1, nr_objects);",
      "4006:     offset += 1;",
      "4008:         msg_obj_start_offset = offset;",
      "4009:         msg_obj_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_obj_item, tvb, offset, 0, ENC_NA);",
      "4010:         msg_obj_item_tree = proto_item_add_subtree(msg_obj_item, ett_s7comm_cpu_alarm_message_object);",
      "4012:         if (type == S7COMM_UD_TYPE_REQ || type == S7COMM_UD_TYPE_PUSH) {",
      "4013:             proto_tree_add_item(msg_obj_item_tree, hf_s7comm_item_varspec, tvb, offset, 1, ENC_BIG_ENDIAN);",
      "4014:             offset += 1;",
      "",
      "[Removed Lines]",
      "4007:     for (i = 1; i <= nr_objects; i++) {",
      "4011:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i);",
      "",
      "[Added Lines]",
      "4007:     for (i = 0; i < nr_objects; i++) {",
      "4011:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i+1);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4635:                     offset = s7comm_decode_param_item(tvb, offset, data_tree, i);",
      "4637:                     len_item = offset - offset_old;",
      "4639:                         offset += 1;",
      "4640:                     }",
      "4641:                 }",
      "",
      "[Removed Lines]",
      "4638:                     if ((len_item % 2) && (i < item_count)) {",
      "",
      "[Added Lines]",
      "4638:                     if ((len_item % 2) && (i < (item_count-1))) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5036:                         offset = s7comm_decode_param_item(tvb, offset, param_tree, i);",
      "5038:                         len = offset - offset_old;",
      "5040:                             offset += 1;",
      "5041:                         }",
      "5042:                     }",
      "",
      "[Removed Lines]",
      "5039:                         if ((len % 2) && (i < item_count)) {",
      "",
      "[Added Lines]",
      "5039:                         if ((len % 2) && (i < (item_count-1))) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d24db8ddcdd4cdd5c1ea859da93681b4cc98b399",
      "candidate_info": {
        "commit_hash": "d24db8ddcdd4cdd5c1ea859da93681b4cc98b399",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d24db8ddcdd4cdd5c1ea859da93681b4cc98b399",
        "files": [
          "epan/dissectors/packet-s7comm.c"
        ],
        "message": "S7comm: fix range check to prevent infinite loop when upper bound is 255\n\nWhile we are at it, fix identification of not last element in a few\nplaces\n\nBug: 14423\nChange-Id: I568530949d09ddfd8c5c58d24050dfed32ce10f5\nReviewed-on: https://code.wireshark.org/review/25851\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 5d99febe66e96b55a1defa58a906be254bad3a51)\nConflicts:\n\tepan/dissectors/packet-s7comm.c\nReviewed-on: https://code.wireshark.org/review/25867",
        "before_after_code_files": [
          "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c": [
          "File: epan/dissectors/packet-s7comm.c -> epan/dissectors/packet-s7comm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2635:     proto_item *item = NULL;",
          "2636:     proto_tree *item_tree = NULL;",
          "2639:         ret_val = tvb_get_guint8(tvb, offset);",
          "2641:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, 1, ENC_NA);",
          "2642:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2644:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2645:         offset += 1;",
          "2646:     }",
          "",
          "[Removed Lines]",
          "2638:     for (i = 1; i <= item_count; i++) {",
          "2643:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "[Added Lines]",
          "2638:     for (i = 0; i < item_count; i++) {",
          "2643:         proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2667:     proto_item *item = NULL;",
          "2668:     proto_tree *item_tree = NULL;",
          "2671:         ret_val = tvb_get_guint8(tvb, offset);",
          "2672:         if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||",
          "2673:             ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||",
          "",
          "[Removed Lines]",
          "2670:     for (i = 1; i <= item_count; i++) {",
          "",
          "[Added Lines]",
          "2670:     for (i = 0; i < item_count; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2689:             }",
          "2693:                 len2 = len + 1;",
          "2694:             } else {",
          "2695:                 len2 = len;",
          "",
          "[Removed Lines]",
          "2692:             if ((len % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "2692:             if ((len % 2) && (i < (item_count-1))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2699:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);",
          "2700:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2703:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2704:         proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
          "",
          "[Removed Lines]",
          "2701:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "[Added Lines]",
          "2701:         proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3897:     nr_objects = tvb_get_guint8(tvb, offset);",
          "3898:     proto_tree_add_uint(msg_item_tree, hf_s7comm_cpu_alarm_message_nr_objects, tvb, offset, 1, nr_objects);",
          "3899:     offset += 1;",
          "3901:         msg_obj_start_offset = offset;",
          "3902:         msg_obj_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_obj_item, tvb, offset, 0, ENC_NA);",
          "3903:         msg_obj_item_tree = proto_item_add_subtree(msg_obj_item, ett_s7comm_cpu_alarm_message_object);",
          "3905:         if (type == S7COMM_UD_TYPE_REQ || type == S7COMM_UD_TYPE_PUSH) {",
          "3906:             proto_tree_add_item(msg_obj_item_tree, hf_s7comm_item_varspec, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3907:             offset += 1;",
          "",
          "[Removed Lines]",
          "3900:     for (i = 1; i <= nr_objects; i++) {",
          "3904:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i);",
          "",
          "[Added Lines]",
          "3900:     for (i = 0; i < nr_objects; i++) {",
          "3904:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i+1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4527:                     offset = s7comm_decode_param_item(tvb, offset, data_tree, i);",
          "4529:                     len_item = offset - offset_old;",
          "4531:                         offset += 1;",
          "4532:                     }",
          "4533:                 }",
          "",
          "[Removed Lines]",
          "4530:                     if ((len_item % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "4530:                     if ((len_item % 2) && (i < (item_count-1))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4905:                         offset = s7comm_decode_param_item(tvb, offset, param_tree, i);",
          "4907:                         len = offset - offset_old;",
          "4909:                             offset += 1;",
          "4910:                         }",
          "4911:                     }",
          "",
          "[Removed Lines]",
          "4908:                         if ((len % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "4908:                         if ((len % 2) && (i < (item_count-1))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8a0cbc4f2979e0b1cadbe79f0b8b4ecb92477be",
      "candidate_info": {
        "commit_hash": "d8a0cbc4f2979e0b1cadbe79f0b8b4ecb92477be",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d8a0cbc4f2979e0b1cadbe79f0b8b4ecb92477be",
        "files": [
          "epan/dissectors/packet-s7comm.c"
        ],
        "message": "S7comm: fix range check to prevent infinite loop when upper bound is 255\n\nWhile we are at it, fix identification of not last element in a few\nplaces\n\nBug: 14423\nChange-Id: I568530949d09ddfd8c5c58d24050dfed32ce10f5\nReviewed-on: https://code.wireshark.org/review/25851\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 5d99febe66e96b55a1defa58a906be254bad3a51)\nConflicts:\n\tepan/dissectors/packet-s7comm.c\nReviewed-on: https://code.wireshark.org/review/25867\n(cherry picked from commit d24db8ddcdd4cdd5c1ea859da93681b4cc98b399)\nReviewed-on: https://code.wireshark.org/review/25868",
        "before_after_code_files": [
          "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c": [
          "File: epan/dissectors/packet-s7comm.c -> epan/dissectors/packet-s7comm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2630:     proto_item *item = NULL;",
          "2631:     proto_tree *item_tree = NULL;",
          "2634:         ret_val = tvb_get_guint8(tvb, offset);",
          "2636:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, 1, ENC_NA);",
          "2637:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2639:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2640:         offset += 1;",
          "2641:     }",
          "",
          "[Removed Lines]",
          "2633:     for (i = 1; i <= item_count; i++) {",
          "2638:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "[Added Lines]",
          "2633:     for (i = 0; i < item_count; i++) {",
          "2638:         proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2662:     proto_item *item = NULL;",
          "2663:     proto_tree *item_tree = NULL;",
          "2666:         ret_val = tvb_get_guint8(tvb, offset);",
          "2667:         if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||",
          "2668:             ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||",
          "",
          "[Removed Lines]",
          "2665:     for (i = 1; i <= item_count; i++) {",
          "",
          "[Added Lines]",
          "2665:     for (i = 0; i < item_count; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2684:             }",
          "2688:                 len2 = len + 1;",
          "2689:             } else {",
          "2690:                 len2 = len;",
          "",
          "[Removed Lines]",
          "2687:             if ((len % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "2687:             if ((len % 2) && (i < (item_count-1))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2694:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);",
          "2695:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2698:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2699:         proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
          "",
          "[Removed Lines]",
          "2696:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "[Added Lines]",
          "2696:         proto_item_append_text(item, \" [%d]: (%s)\", i+1, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3873:     nr_objects = tvb_get_guint8(tvb, offset);",
          "3874:     proto_tree_add_uint(msg_item_tree, hf_s7comm_cpu_alarm_message_nr_objects, tvb, offset, 1, nr_objects);",
          "3875:     offset += 1;",
          "3877:         msg_obj_start_offset = offset;",
          "3878:         msg_obj_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_obj_item, tvb, offset, 0, ENC_NA);",
          "3879:         msg_obj_item_tree = proto_item_add_subtree(msg_obj_item, ett_s7comm_cpu_alarm_message_object);",
          "3881:         if (type == S7COMM_UD_TYPE_REQ || type == S7COMM_UD_TYPE_PUSH) {",
          "3882:             proto_tree_add_item(msg_obj_item_tree, hf_s7comm_item_varspec, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3883:             offset += 1;",
          "",
          "[Removed Lines]",
          "3876:     for (i = 1; i <= nr_objects; i++) {",
          "3880:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i);",
          "",
          "[Added Lines]",
          "3876:     for (i = 0; i < nr_objects; i++) {",
          "3880:         proto_item_append_text(msg_obj_item_tree, \" [%d]\", i+1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4494:                     offset = s7comm_decode_param_item(tvb, offset, data_tree, i);",
          "4496:                     len_item = offset - offset_old;",
          "4498:                         offset += 1;",
          "4499:                     }",
          "4500:                 }",
          "",
          "[Removed Lines]",
          "4497:                     if ((len_item % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "4497:                     if ((len_item % 2) && (i < (item_count-1))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4872:                         offset = s7comm_decode_param_item(tvb, offset, param_tree, i);",
          "4874:                         len = offset - offset_old;",
          "4876:                             offset += 1;",
          "4877:                         }",
          "4878:                     }",
          "",
          "[Removed Lines]",
          "4875:                         if ((len % 2) && (i < item_count)) {",
          "",
          "[Added Lines]",
          "4875:                         if ((len % 2) && (i < (item_count-1))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86302a7622a1fe529abb042033a856bcf25602fe",
      "candidate_info": {
        "commit_hash": "86302a7622a1fe529abb042033a856bcf25602fe",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/86302a7622a1fe529abb042033a856bcf25602fe",
        "files": [
          "epan/dissectors/packet-s7comm.c"
        ],
        "message": "s7comm: Syntax-id decoding of frequency inverter parameters\n\nAdd Syntax-id decoding for accessing frequency inverter parameters.\nMoved the decoding of all other syntax-ids to separate functions.\n\nChange-Id: Iba41f0631c4aeaf31a4ec6f73ffc42ca0b76f00d\nReviewed-on: https://code.wireshark.org/review/24102\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c": [
          "File: epan/dissectors/packet-s7comm.c -> epan/dissectors/packet-s7comm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     { S7COMM_AREA_TIMER200,                 \"IEC timers (200 family)\" },",
          "372:     { 0,                                    NULL }",
          "373: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: static const value_string item_areanames_short[] = {",
          "376:     { S7COMM_AREA_SYSINFO,                  \"SI200\" },",
          "377:     { S7COMM_AREA_SYSFLAGS,                 \"SF200\" },",
          "378:     { S7COMM_AREA_ANAIN,                    \"AI200\" },",
          "379:     { S7COMM_AREA_ANAOUT,                   \"AO\" },",
          "380:     { S7COMM_AREA_P,                        \"P\" },",
          "381:     { S7COMM_AREA_INPUTS,                   \"I\" },",
          "382:     { S7COMM_AREA_OUTPUTS,                  \"Q\" },",
          "383:     { S7COMM_AREA_FLAGS,                    \"M\" },",
          "384:     { S7COMM_AREA_DB,                       \"DB\" },",
          "385:     { S7COMM_AREA_DI,                       \"DI\" },",
          "386:     { S7COMM_AREA_LOCAL,                    \"L\" },",
          "387:     { S7COMM_AREA_V,                        \"V\" },",
          "388:     { S7COMM_AREA_COUNTER,                  \"C\" },",
          "389:     { S7COMM_AREA_TIMER,                    \"T\" },",
          "390:     { S7COMM_AREA_COUNTER200,               \"C200\" },",
          "391:     { S7COMM_AREA_TIMER200,                 \"T200\" },",
          "392:     { 0,                                    NULL }",
          "393: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2367: static guint32",
          "2372: {",
          "2373:     guint32 a_address = 0;",
          "2374:     guint32 bytepos = 0;",
          "2375:     guint32 bitpos = 0;",
          "2384:     proto_item *address_item = NULL;",
          "2385:     proto_tree *address_item_tree = NULL;",
          "2391:     proto_item *sub_item = NULL;",
          "2394:     guint8 tia_lid_flags = 0;",
          "2395:     guint32 tia_value = 0;",
          "2404:     var_spec_type = tvb_get_guint8(tvb, offset);",
          "2405:     var_spec_length = tvb_get_guint8(tvb, offset + 1);",
          "2406:     var_spec_syntax_id = tvb_get_guint8(tvb, offset + 2);",
          "2414:     item = proto_tree_add_item(sub_tree, hf_s7comm_param_item, tvb, offset, var_spec_length + 2, ENC_NA);",
          "2415:     item_tree = proto_item_add_subtree(item, ett_s7comm_param_item);",
          "2417:     proto_item_append_text(item, \" [%d]:\", item_no + 1);",
          "",
          "[Removed Lines]",
          "2368: s7comm_decode_param_item(tvbuff_t *tvb,",
          "2369:                          guint32 offset,",
          "2370:                          proto_tree *sub_tree,",
          "2371:                          guint8 item_no)",
          "2376:     guint8 t_size = 0;",
          "2377:     guint16 len = 0;",
          "2378:     guint16 db = 0;",
          "2379:     guint16 i;",
          "2380:     guint8 area = 0;",
          "2381:     proto_item *item = NULL;",
          "2382:     proto_tree *item_tree = NULL;",
          "2383:     proto_tree *sub_item_tree = NULL;",
          "2386:     guint8 number_of_areas = 0;",
          "2388:     guint8 var_spec_type = 0;",
          "2389:     guint8 var_spec_length = 0;",
          "2390:     guint8 var_spec_syntax_id = 0;",
          "2392:     guint16 tia_var_area1 = 0;",
          "2393:     guint16 tia_var_area2 = 0;",
          "2397:     guint8 nck_area = 0;",
          "2398:     guint8 nck_unit = 0;",
          "2399:     guint16 nck_column = 0;",
          "2400:     guint16 nck_line = 0;",
          "2401:     guint8 nck_module = 0;",
          "",
          "[Added Lines]",
          "2395: s7comm_syntaxid_s7any(tvbuff_t *tvb,",
          "2396:                       guint32 offset,",
          "2397:                       proto_tree *tree)",
          "2399:     guint32 t_size = 0;",
          "2400:     guint32 len = 0;",
          "2401:     guint32 db = 0;",
          "2402:     guint32 area = 0;",
          "2410:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_transport_size, tvb, offset, 1, ENC_BIG_ENDIAN, &t_size);",
          "2411:     offset += 1;",
          "2413:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_length, tvb, offset, 2, ENC_BIG_ENDIAN, &len);",
          "2414:     offset += 2;",
          "2416:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_db, tvb, offset, 2, ENC_BIG_ENDIAN, &db);",
          "2417:     offset += 2;",
          "2419:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_area, tvb, offset, 1, ENC_BIG_ENDIAN, &area);",
          "2420:     offset += 1;",
          "2422:     address_item = proto_tree_add_item_ret_uint(tree, hf_s7comm_item_address, tvb, offset, 3, ENC_BIG_ENDIAN, &a_address);",
          "2423:     address_item_tree = proto_item_add_subtree(address_item, ett_s7comm_item_address);",
          "2424:     bytepos = a_address / 8;",
          "2425:     bitpos = a_address % 8;",
          "2427:     proto_item_append_text(tree, \" (%s\", val_to_str(area, item_areanames_short, \"unknown area 0x%02x\"));",
          "2428:     if (area == S7COMM_AREA_TIMER || area == S7COMM_AREA_COUNTER) {",
          "2429:         proto_item_append_text(tree, \" %d)\", a_address);",
          "2430:         proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_nr, tvb, offset, 3, a_address);",
          "2431:     } else {",
          "2432:         proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_byte, tvb, offset, 3, a_address);",
          "2433:         proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_bit, tvb, offset, 3, a_address);",
          "2434:         if (area == S7COMM_AREA_DB) {",
          "2435:             proto_item_append_text(tree, \" %d.DBX\", db);",
          "2436:         } else if (area == S7COMM_AREA_DI) {",
          "2437:             proto_item_append_text(tree, \" %d.DIX\", db);",
          "2438:         }",
          "2439:         proto_item_append_text(tree, \" %d.%d %s %d)\",",
          "2440:             bytepos, bitpos, val_to_str(t_size, item_transportsizenames, \"Unknown transport size: 0x%02x\"), len);",
          "2441:     }",
          "2442:     offset += 3;",
          "2443:     return offset;",
          "2444: }",
          "2451: static guint32",
          "2452: s7comm_syntaxid_dbread(tvbuff_t *tvb,",
          "2453:                        guint32 offset,",
          "2454:                        proto_tree *tree)",
          "2455: {",
          "2456:     guint32 number_of_areas = 0;",
          "2457:     guint32 len = 0;",
          "2458:     guint32 db = 0;",
          "2459:     guint32 bytepos = 0;",
          "2460:     guint32 i;",
          "2462:     proto_tree *sub_item_tree = NULL;",
          "2464:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_dbread_numareas, tvb, offset, 1, ENC_BIG_ENDIAN, &number_of_areas);",
          "2465:     proto_item_append_text(tree, \" (%d Data-Areas of Syntax-Id DBREAD)\", number_of_areas);",
          "2466:     offset += 1;",
          "2467:     for (i = 1; i <= number_of_areas; i++) {",
          "2468:         sub_item = proto_tree_add_item(tree, hf_s7comm_param_subitem, tvb, offset, 5, ENC_NA);",
          "2469:         sub_item_tree = proto_item_add_subtree(sub_item, ett_s7comm_param_subitem);",
          "2470:         proto_tree_add_item_ret_uint(sub_item_tree, hf_s7comm_item_dbread_length, tvb, offset, 1, ENC_BIG_ENDIAN, &len);",
          "2471:         offset += 1;",
          "2472:         proto_tree_add_item_ret_uint(sub_item_tree, hf_s7comm_item_dbread_db, tvb, offset, 2, ENC_BIG_ENDIAN, &db);",
          "2473:         offset += 2;",
          "2474:         proto_tree_add_item_ret_uint(sub_item_tree, hf_s7comm_item_dbread_startadr, tvb, offset, 2, ENC_BIG_ENDIAN, &bytepos);",
          "2475:         offset += 2;",
          "2477:         proto_item_append_text(sub_item, \" [%d]: (DB%d.DBB %d BYTE %d)\", i, db, bytepos, len);",
          "2478:     }",
          "2479:     return offset;",
          "2480: }",
          "2488: static guint32",
          "2489: s7comm_syntaxid_1200sym(tvbuff_t *tvb,",
          "2490:                         guint32 offset,",
          "2491:                         proto_tree *tree,",
          "2492:                         guint8 var_spec_length)",
          "2493: {",
          "2494:     guint32 tia_var_area1 = 0;",
          "2495:     guint32 tia_var_area2 = 0;",
          "2498:     guint16 i;",
          "2499:     proto_item *sub_item = NULL;",
          "2500:     proto_tree *sub_item_tree = NULL;",
          "2502:     proto_item_append_text(tree, \" 1200 symbolic address\");",
          "2504:     proto_tree_add_item(tree, hf_s7comm_tia1200_item_reserved1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2505:     offset += 1;",
          "2509:     proto_tree_add_item_ret_uint(tree, hf_s7comm_tia1200_item_area1, tvb, offset, 2, ENC_BIG_ENDIAN, &tia_var_area1);",
          "2510:     offset += 2;",
          "2511:     tia_var_area2 = tvb_get_ntohs(tvb, offset);",
          "2512:     if (tia_var_area1 == S7COMM_TIA1200_VAR_ITEM_AREA1_IQMCT) {",
          "2513:         proto_tree_add_uint(tree, hf_s7comm_tia1200_item_area2, tvb, offset, 2, tia_var_area2);",
          "2514:         proto_item_append_text(tree, \" - Accessing %s\", val_to_str(tia_var_area2, tia1200_var_item_area2_names, \"Unknown IQMCT Area: 0x%04x\"));",
          "2515:         offset += 2;",
          "2516:     } else if (tia_var_area1 == S7COMM_TIA1200_VAR_ITEM_AREA1_DB) {",
          "2517:         proto_tree_add_uint(tree, hf_s7comm_tia1200_item_dbnumber, tvb, offset, 2, tia_var_area2);",
          "2518:         proto_item_append_text(tree, \" - Accessing DB%d\", tia_var_area2);",
          "2519:         offset += 2;",
          "2520:     } else {",
          "2522:         proto_tree_add_uint(tree, hf_s7comm_tia1200_item_area2unknown, tvb, offset, 2, tia_var_area2);",
          "2523:         proto_item_append_text(tree, \" - Unknown area specification\");",
          "2524:         offset += 2;",
          "2525:     }",
          "2526:     proto_tree_add_item(tree, hf_s7comm_tia1200_item_crc, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2527:     offset += 4;",
          "2529:     for (i = 0; i < (var_spec_length - 10) / 4; i++) {",
          "2530:         sub_item = proto_tree_add_item(tree, hf_s7comm_tia1200_substructure_item, tvb, offset, 4, ENC_NA);",
          "2531:         sub_item_tree = proto_item_add_subtree(sub_item, ett_s7comm_param_subitem);",
          "2532:         tia_lid_flags = tvb_get_guint8(tvb, offset) >> 4;",
          "2533:         proto_tree_add_item(sub_item_tree, hf_s7comm_tia1200_var_lid_flags, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2534:         tia_value = tvb_get_ntohl(tvb, offset) & 0x0fffffff;",
          "2535:         proto_item_append_text(sub_item, \" [%d]: %s, Value: %u\", i + 1,",
          "2536:             val_to_str(tia_lid_flags, tia1200_var_lid_flag_names, \"Unknown flags: 0x%02x\"),",
          "2537:             tia_value",
          "2538:         );",
          "2539:         proto_tree_add_item(sub_item_tree, hf_s7comm_tia1200_item_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2540:         offset += 4;",
          "2541:     }",
          "2542:     return offset;",
          "2543: }",
          "2551: static guint32",
          "2552: s7comm_syntaxid_nck(tvbuff_t *tvb,",
          "2553:                     guint32 offset,",
          "2554:                     proto_tree *tree)",
          "2555: {",
          "2556:     guint32 area = 0;",
          "2557:     guint32 nck_area = 0;",
          "2558:     guint32 nck_unit = 0;",
          "2559:     guint32 nck_column = 0;",
          "2560:     guint32 nck_line = 0;",
          "2561:     guint32 nck_module = 0;",
          "2563:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_nck_areaunit, tvb, offset, 1, ENC_BIG_ENDIAN, &area);",
          "2564:     nck_area = area >> 5;",
          "2565:     nck_unit = area & 0x1f;",
          "2566:     proto_tree_add_item(tree, hf_s7comm_item_nck_area, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2567:     proto_tree_add_item(tree, hf_s7comm_item_nck_unit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2568:     offset += 1;",
          "2569:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_nck_column, tvb, offset, 2, ENC_BIG_ENDIAN, &nck_column);",
          "2570:     offset += 2;",
          "2571:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_nck_line, tvb, offset, 2, ENC_BIG_ENDIAN, &nck_line);",
          "2572:     offset += 2;",
          "2573:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_nck_module, tvb, offset, 1, ENC_BIG_ENDIAN, &nck_module);",
          "2574:     offset += 1;",
          "2575:     proto_tree_add_item(tree, hf_s7comm_item_nck_linecount, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2576:     offset += 1;",
          "2577:     proto_item_append_text(tree, \" (NCK Area:%d Unit:%d Column:%d Line:%d Module:0x%02x)\",",
          "2578:         nck_area, nck_unit, nck_column, nck_line, nck_module);",
          "2579:     return offset;",
          "2580: }",
          "2588: static guint32",
          "2589: s7comm_syntaxid_driveesany(tvbuff_t *tvb,",
          "2590:                            guint32 offset,",
          "2591:                            proto_tree *tree)",
          "2592: {",
          "2593:     guint32 nr = 0;",
          "2594:     guint32 idx = 0;",
          "2596:     proto_tree_add_item(tree, hf_s7comm_item_driveesany_unknown1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2597:     offset += 1;",
          "2598:     proto_tree_add_item(tree, hf_s7comm_item_driveesany_unknown2, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2599:     offset += 2;",
          "2600:     proto_tree_add_item(tree, hf_s7comm_item_driveesany_unknown3, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2601:     offset += 2;",
          "2602:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_driveesany_parameter_nr, tvb, offset, 2, ENC_BIG_ENDIAN, &nr);",
          "2603:     offset += 2;",
          "2604:     proto_tree_add_item_ret_uint(tree, hf_s7comm_item_driveesany_parameter_idx, tvb, offset, 2, ENC_BIG_ENDIAN, &idx);",
          "2605:     offset += 2;",
          "2606:     proto_item_append_text(tree, \" (DriveES Parameter: %d[%d])\", nr, idx);",
          "2607:     return offset;",
          "2608: }",
          "2615: static guint32",
          "2616: s7comm_decode_param_item(tvbuff_t *tvb,",
          "2617:                          guint32 offset,",
          "2618:                          proto_tree *sub_tree,",
          "2619:                          guint8 item_no)",
          "2620: {",
          "2621:     proto_item *item = NULL;",
          "2622:     proto_tree *item_tree = NULL;",
          "2623:     guint8 var_spec_type = 0;",
          "2624:     guint8 var_spec_length = 0;",
          "2625:     guint8 var_spec_syntax_id = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2424:     proto_tree_add_item(item_tree, hf_s7comm_item_syntax_id, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2425:     offset += 1;",
          "2429:     if (var_spec_type == 0x12 && var_spec_length == 10 && var_spec_syntax_id == S7COMM_SYNTAXID_S7ANY) {",
          "2500:     } else if (var_spec_type == 0x12 && var_spec_length >= 7 && var_spec_syntax_id == S7COMM_SYNTAXID_DBREAD) {",
          "2526:     } else if (var_spec_type == 0x12 && var_spec_length >= 14 && var_spec_syntax_id == S7COMM_SYNTAXID_1200SYM) {",
          "2571:     } else if (var_spec_type == 0x12 && var_spec_length == 8 && var_spec_syntax_id == S7COMM_SYNTAXID_NCK) {",
          "2592:     }",
          "2593:     else {",
          "",
          "[Removed Lines]",
          "2431:         t_size = tvb_get_guint8(tvb, offset);",
          "2432:         proto_tree_add_uint(item_tree, hf_s7comm_item_transport_size, tvb, offset, 1, t_size);",
          "2433:         offset += 1;",
          "2435:         len = tvb_get_ntohs(tvb, offset);",
          "2436:         proto_tree_add_uint(item_tree, hf_s7comm_item_length, tvb, offset, 2, len);",
          "2437:         offset += 2;",
          "2439:         db = tvb_get_ntohs(tvb, offset);",
          "2440:         proto_tree_add_uint(item_tree, hf_s7comm_item_db, tvb, offset, 2, db);",
          "2441:         offset += 2;",
          "2443:         area = tvb_get_guint8(tvb, offset);",
          "2444:         proto_tree_add_uint(item_tree, hf_s7comm_item_area, tvb, offset, 1, area);",
          "2445:         offset += 1;",
          "2447:         a_address = tvb_get_ntoh24(tvb, offset);",
          "2448:         address_item = proto_tree_add_uint(item_tree, hf_s7comm_item_address, tvb, offset, 3, a_address);",
          "2449:         address_item_tree = proto_item_add_subtree(address_item, ett_s7comm_item_address);",
          "2450:         bytepos = a_address / 8;",
          "2451:         bitpos = a_address % 8;",
          "2453:         switch (area) {",
          "2454:             case (S7COMM_AREA_P):",
          "2455:                 proto_item_append_text(item_tree, \" (P\");",
          "2456:                 break;",
          "2457:             case (S7COMM_AREA_INPUTS):",
          "2458:                 proto_item_append_text(item_tree, \" (I\");",
          "2459:                 break;",
          "2460:             case (S7COMM_AREA_OUTPUTS):",
          "2461:                 proto_item_append_text(item_tree, \" (Q\");",
          "2462:                 break;",
          "2463:             case (S7COMM_AREA_FLAGS):",
          "2464:                 proto_item_append_text(item_tree, \" (M\");",
          "2465:                 break;",
          "2466:             case (S7COMM_AREA_DB):",
          "2467:                 proto_item_append_text(item_tree, \" (DB%d.DBX\", db);",
          "2468:                 break;",
          "2469:             case (S7COMM_AREA_DI):",
          "2470:                 proto_item_append_text(item_tree, \" (DI%d.DIX\", db);",
          "2471:                 break;",
          "2472:             case (S7COMM_AREA_LOCAL):",
          "2473:                 proto_item_append_text(item_tree, \" (L\");",
          "2474:                 break;",
          "2475:             case (S7COMM_AREA_COUNTER):",
          "2476:                 proto_item_append_text(item_tree, \" (C\");",
          "2477:                 break;",
          "2478:             case (S7COMM_AREA_TIMER):",
          "2479:                 proto_item_append_text(item_tree, \" (T\");",
          "2480:                 break;",
          "2481:             default:",
          "2482:                 proto_item_append_text(item_tree, \" (unknown area\");",
          "2483:                 break;",
          "2484:         }",
          "2485:         if (area == S7COMM_AREA_TIMER || area == S7COMM_AREA_COUNTER) {",
          "2486:             proto_item_append_text(item_tree, \" %d)\", a_address);",
          "2487:             proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_nr, tvb, offset, 3, a_address);",
          "2488:         } else {",
          "2489:             proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_byte, tvb, offset, 3, a_address);",
          "2490:             proto_tree_add_uint(address_item_tree, hf_s7comm_item_address_bit, tvb, offset, 3, a_address);",
          "2491:             proto_item_append_text(item_tree, \" %d.%d %s %d)\",",
          "2492:                 bytepos, bitpos, val_to_str(t_size, item_transportsizenames, \"Unknown transport size: 0x%02x\"), len);",
          "2493:         }",
          "2494:         offset += 3;",
          "2502:         number_of_areas = tvb_get_guint8(tvb, offset);",
          "2503:         proto_tree_add_uint(item_tree, hf_s7comm_item_dbread_numareas, tvb, offset, 1, number_of_areas);",
          "2504:         proto_item_append_text(item_tree, \" (%d Data-Areas of Syntax-Id DBREAD)\", number_of_areas);",
          "2505:         offset += 1;",
          "2506:         for (i = 1; i <= number_of_areas; i++) {",
          "2507:             sub_item = proto_tree_add_item(item_tree, hf_s7comm_param_subitem, tvb, offset, 5, ENC_NA);",
          "2508:             sub_item_tree = proto_item_add_subtree(sub_item, ett_s7comm_param_subitem);",
          "2510:             len = tvb_get_guint8(tvb, offset);",
          "2511:             proto_tree_add_uint(sub_item_tree, hf_s7comm_item_dbread_length, tvb, offset, 1, len);",
          "2512:             offset += 1;",
          "2514:             db = tvb_get_ntohs(tvb, offset);",
          "2515:             proto_tree_add_uint(sub_item_tree, hf_s7comm_item_dbread_db, tvb, offset, 2, db);",
          "2516:             offset += 2;",
          "2518:             bytepos = tvb_get_ntohs(tvb, offset);",
          "2519:             proto_tree_add_uint(sub_item_tree, hf_s7comm_item_dbread_startadr, tvb, offset, 2, bytepos);",
          "2520:             offset += 2;",
          "2522:             proto_item_append_text(sub_item, \" [%d]: (DB%d.DBB %d BYTE %d)\", i, db, bytepos, len);",
          "2523:         }",
          "2527:         proto_item_append_text(item_tree, \" 1200 symbolic address\");",
          "2529:         proto_tree_add_item(item_tree, hf_s7comm_tia1200_item_reserved1, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2530:         offset += 1;",
          "2534:         tia_var_area1 = tvb_get_ntohs(tvb, offset);",
          "2535:         proto_tree_add_uint(item_tree, hf_s7comm_tia1200_item_area1, tvb, offset, 2, tia_var_area1);",
          "2536:         offset += 2;",
          "2537:         tia_var_area2 = tvb_get_ntohs(tvb, offset);",
          "2538:         if (tia_var_area1 == S7COMM_TIA1200_VAR_ITEM_AREA1_IQMCT) {",
          "2539:             proto_tree_add_uint(item_tree, hf_s7comm_tia1200_item_area2, tvb, offset, 2, tia_var_area2);",
          "2540:             proto_item_append_text(item_tree, \" - Accessing %s\", val_to_str(tia_var_area2, tia1200_var_item_area2_names, \"Unknown IQMCT Area: 0x%04x\"));",
          "2541:             offset += 2;",
          "2542:         } else if (tia_var_area1 == S7COMM_TIA1200_VAR_ITEM_AREA1_DB) {",
          "2543:             proto_tree_add_uint(item_tree, hf_s7comm_tia1200_item_dbnumber, tvb, offset, 2, tia_var_area2);",
          "2544:             proto_item_append_text(item_tree, \" - Accessing DB%d\", tia_var_area2);",
          "2545:             offset += 2;",
          "2546:         } else {",
          "2548:             proto_tree_add_uint(item_tree, hf_s7comm_tia1200_item_area2unknown, tvb, offset, 2, tia_var_area2);",
          "2549:             proto_item_append_text(item_tree, \" - Unknown area specification\");",
          "2550:             offset += 2;",
          "2551:         }",
          "2552:         proto_tree_add_item(item_tree, hf_s7comm_tia1200_item_crc, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2553:         offset += 4;",
          "2555:         for (i = 0; i < (var_spec_length - 10) / 4; i++) {",
          "2557:             sub_item = proto_tree_add_item(item_tree, hf_s7comm_tia1200_substructure_item, tvb, offset, 4, ENC_NA);",
          "2558:             sub_item_tree = proto_item_add_subtree(sub_item, ett_s7comm_param_subitem);",
          "2559:             tia_lid_flags = tvb_get_guint8(tvb, offset) >> 4;",
          "2560:             proto_tree_add_item(sub_item_tree, hf_s7comm_tia1200_var_lid_flags, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2561:             tia_value = tvb_get_ntohl(tvb, offset) & 0x0fffffff;",
          "2562:             proto_item_append_text(sub_item, \" [%d]: %s, Value: %u\", i + 1,",
          "2563:                 val_to_str(tia_lid_flags, tia1200_var_lid_flag_names, \"Unknown flags: 0x%02x\"),",
          "2564:                 tia_value",
          "2565:             );",
          "2566:             proto_tree_add_item(sub_item_tree, hf_s7comm_tia1200_item_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2567:             offset += 4;",
          "2568:         }",
          "2572:         area = tvb_get_guint8(tvb, offset);",
          "2573:         nck_area = area >> 5;",
          "2574:         nck_unit = area & 0x1f;",
          "2575:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_areaunit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2576:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_area, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2577:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_unit, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2578:         offset += 1;",
          "2579:         nck_column = tvb_get_ntohs(tvb, offset);",
          "2580:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_column, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2581:         offset += 2;",
          "2582:         nck_line = tvb_get_ntohs(tvb, offset);",
          "2583:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_line, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2584:         offset += 2;",
          "2585:         nck_module = tvb_get_guint8(tvb, offset);",
          "2586:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_module, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2587:         offset += 1;",
          "2588:         proto_tree_add_item(item_tree, hf_s7comm_item_nck_linecount, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2589:         offset += 1;",
          "2590:         proto_item_append_text(item_tree, \" (NCK Area:%d Unit:%d Column:%d Line:%d Module:0x%02x)\",",
          "2591:             nck_area, nck_unit, nck_column, nck_line, nck_module);",
          "",
          "[Added Lines]",
          "2646:         offset = s7comm_syntaxid_s7any(tvb, offset, item_tree);",
          "2649:         offset = s7comm_syntaxid_dbread(tvb, offset, item_tree);",
          "2652:         offset = s7comm_syntaxid_1200sym(tvb, offset, item_tree, var_spec_length);",
          "2655:         offset = s7comm_syntaxid_nck(tvb, offset, item_tree);",
          "2656:     } else if (var_spec_type == 0x12 && var_spec_length == 10 && var_spec_syntax_id == S7COMM_SYNTAXID_DRIVEESANY) {",
          "2658:         offset = s7comm_syntaxid_driveesany(tvb, offset, item_tree);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5241:         { &hf_s7comm_item_dbread_startadr,",
          "5242:         { \"Start address\", \"s7comm.param.item.dbread.startaddress\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5243:           NULL, HFILL }},",
          "5245:         { &hf_s7comm_item_nck_areaunit,",
          "5246:         { \"NCK Area/Unit\", \"s7comm.param.item.nck.area_unit\", FT_UINT8, BASE_HEX, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5312:         { &hf_s7comm_item_driveesany_unknown1,",
          "5313:         { \"DriveES Unknown 1\", \"s7comm.param.item.driveesany.unknown1\", FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5314:           NULL, HFILL }},",
          "5315:         { &hf_s7comm_item_driveesany_unknown2,",
          "5316:         { \"DriveES Unknown 2\", \"s7comm.param.item.driveesany.unknown2\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5317:           NULL, HFILL }},",
          "5318:         { &hf_s7comm_item_driveesany_unknown3,",
          "5319:         { \"DriveES Unknown 3\", \"s7comm.param.item.driveesany.unknown3\", FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5320:           NULL, HFILL }},",
          "5321:         { &hf_s7comm_item_driveesany_parameter_nr,",
          "5322:         { \"DriveES Parameter number\", \"s7comm.param.item.driveesany.parameternr\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5323:           NULL, HFILL }},",
          "5324:         { &hf_s7comm_item_driveesany_parameter_idx,",
          "5325:         { \"DriveES Parameter index\", \"s7comm.param.item.driveesany.parameteridx\", FT_UINT16, BASE_DEC, NULL, 0x0,",
          "5326:           NULL, HFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8c7975b6f0a83826b13b407b84f941124767080",
      "candidate_info": {
        "commit_hash": "e8c7975b6f0a83826b13b407b84f941124767080",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e8c7975b6f0a83826b13b407b84f941124767080",
        "files": [
          "epan/dissectors/packet-s7comm.c"
        ],
        "message": "s7comm: Several minor improvements\n\nThis patch includes several minor improvements:\n- Special (only for Sinumerik NC): allow NCK address description in\n  data-part\n- Userdata parameter part: add text definition for second req/res\n- Don't add data tree in userdata telegrams, when there is no data in\n  there\n- Cyclic functions: add new subfunction\n- Alarming: add SCAN message decoding\n- Improve info column display when there are multiple PDUs in one frame\n\nChange-Id: Ib9afd0c6b14cf97ed645084e095f79fb40b07f43\nReviewed-on: https://code.wireshark.org/review/24170\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ],
          "candidate": [
            "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-s7comm.c||epan/dissectors/packet-s7comm.c": [
          "File: epan/dissectors/packet-s7comm.c -> epan/dissectors/packet-s7comm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     { S7COMM_DATA_TRANSPORT_SIZE_BDINT,     \"DINTEGER\" },",
          "488:     { S7COMM_DATA_TRANSPORT_SIZE_BREAL,     \"REAL\" },",
          "489:     { S7COMM_DATA_TRANSPORT_SIZE_BSTR,      \"OCTET STRING\" },",
          "490:     { 0,                                    NULL }",
          "491: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     { S7COMM_DATA_TRANSPORT_SIZE_NCKADDR1,  \"NCK ADDRESS1\" },",
          "493:     { S7COMM_DATA_TRANSPORT_SIZE_NCKADDR2,  \"NCK ADDRESS2\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "594:     { 0,                                    NULL }",
          "595: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: #define S7COMM_UD_REQRES2_UNDEF             0x00",
          "605: #define S7COMM_UD_REQRES2_REQ               0x11",
          "606: #define S7COMM_UD_REQRES2_RES               0x12",
          "608: static const value_string userdata_reqres2_names[] = {",
          "610:     { S7COMM_UD_REQRES2_REQ,                \"Req\" },",
          "611:     { S7COMM_UD_REQRES2_RES,                \"Res\" },",
          "612:     { 0,                                    NULL }",
          "613: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "763: #define S7COMM_UD_SUBF_CYCLIC_MEM           0x01",
          "764: #define S7COMM_UD_SUBF_CYCLIC_UNSUBSCRIBE   0x04",
          "766: static const value_string userdata_cyclic_subfunc_names[] = {",
          "769:     { 0,                                    NULL }",
          "770: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783: #define S7COMM_UD_SUBF_CYCLIC_MEM2          0x05",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "790: static const value_string userdata_cpu_subfunc_names[] = {",
          "791:     { S7COMM_UD_SUBF_CPU_READSZL,           \"Read SZL\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809: #define S7COMM_UD_SUBF_CPU_SCAN_IND         0x09",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1119: static gint hf_s7comm_userdata_param_head = -1;",
          "1120: static gint hf_s7comm_userdata_param_len = -1;",
          "1122: static gint hf_s7comm_userdata_param_type = -1;",
          "1123: static gint hf_s7comm_userdata_param_funcgroup = -1;",
          "1124: static gint hf_s7comm_userdata_param_subfunc_prog = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: static gint hf_s7comm_userdata_param_reqres2 = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1502: static gint hf_s7comm_cpu_alarm_message_event_going = -1;",
          "1503: static gint hf_s7comm_cpu_alarm_message_event_lastchanged = -1;",
          "1504: static gint hf_s7comm_cpu_alarm_message_event_reserved = -1;",
          "1506: static gint hf_s7comm_cpu_alarm_message_signal_sig1 = -1;",
          "1507: static gint hf_s7comm_cpu_alarm_message_signal_sig2 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1527: static gint hf_s7comm_cpu_alarm_message_scan_unknown1 = -1;",
          "1528: static gint hf_s7comm_cpu_alarm_message_scan_unknown2 = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2734:     proto_item *item = NULL;",
          "2735:     proto_tree *item_tree = NULL;",
          "2755:                 }",
          "2763:             }",
          "2781:             }",
          "2782:         }",
          "2783:     }",
          "",
          "[Removed Lines]",
          "2737:     for (i = 1; i <= item_count; i++) {",
          "2738:         ret_val = tvb_get_guint8(tvb, offset);",
          "2739:         if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||",
          "2740:             ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||",
          "2741:             ret_val == S7COMM_ITEM_RETVAL_DATA_ERR",
          "2742:             ) {",
          "2743:             tsize = tvb_get_guint8(tvb, offset + 1);",
          "2744:             len = tvb_get_ntohs(tvb, offset + 2);",
          "2746:             if (tsize == S7COMM_DATA_TRANSPORT_SIZE_BBIT ||",
          "2747:                 tsize == S7COMM_DATA_TRANSPORT_SIZE_BBYTE ||",
          "2748:                 tsize == S7COMM_DATA_TRANSPORT_SIZE_BINT",
          "2751:                     len /= 8;",
          "2752:                     len = len + 1;",
          "2753:                 } else {",
          "2754:                     len /= 8;",
          "2756:             }",
          "2759:             if ((len % 2) && (i < item_count)) {",
          "2760:                 len2 = len + 1;",
          "2761:             } else {",
          "2762:                 len2 = len;",
          "2764:         }",
          "2766:         item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);",
          "2767:         item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2768:         proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "2770:         proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2771:         proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
          "2772:         proto_tree_add_uint(item_tree, hf_s7comm_data_length, tvb, offset + 2, 2, len);",
          "2773:         offset += head_len;",
          "2775:         if (ret_val == S7COMM_ITEM_RETVAL_DATA_OK || ret_val == S7COMM_ITEM_RETVAL_RESERVED) {",
          "2776:             proto_tree_add_item(item_tree, hf_s7comm_readresponse_data, tvb, offset, len, ENC_NA);",
          "2777:             offset += len;",
          "2778:             if (len != len2) {",
          "2779:                 proto_tree_add_item(item_tree, hf_s7comm_data_fillbyte, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2780:                 offset += 1;",
          "",
          "[Added Lines]",
          "2764:     tsize = tvb_get_guint8(tvb, offset + 1);",
          "2765:     if (tsize == S7COMM_DATA_TRANSPORT_SIZE_NCKADDR1 || tsize == S7COMM_DATA_TRANSPORT_SIZE_NCKADDR2) {",
          "2766:         proto_tree_add_item(tree, hf_s7comm_data_returncode, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2767:         proto_tree_add_uint(tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
          "2768:         offset += 2;",
          "2769:         for (i = 0; i < item_count; i++) {",
          "2770:             offset = s7comm_decode_param_item(tvb, offset, tree, i);",
          "2771:         }",
          "2772:     } else {",
          "2774:         for (i = 1; i <= item_count; i++) {",
          "2775:             ret_val = tvb_get_guint8(tvb, offset);",
          "2776:             if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||",
          "2777:                 ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||",
          "2778:                 ret_val == S7COMM_ITEM_RETVAL_DATA_ERR",
          "2779:                 ) {",
          "2780:                 tsize = tvb_get_guint8(tvb, offset + 1);",
          "2781:                 len = tvb_get_ntohs(tvb, offset + 2);",
          "2783:                 if (tsize == S7COMM_DATA_TRANSPORT_SIZE_BBIT ||",
          "2784:                     tsize == S7COMM_DATA_TRANSPORT_SIZE_BBYTE ||",
          "2785:                     tsize == S7COMM_DATA_TRANSPORT_SIZE_BINT",
          "2788:                         len /= 8;",
          "2789:                         len = len + 1;",
          "2790:                     } else {",
          "2791:                         len /= 8;",
          "2792:                     }",
          "2796:                 if ((len % 2) && (i < item_count)) {",
          "2797:                     len2 = len + 1;",
          "2798:                 } else {",
          "2799:                     len2 = len;",
          "2800:                 }",
          "2803:             item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);",
          "2804:             item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);",
          "2805:             proto_item_append_text(item, \" [%d]: (%s)\", i, val_to_str(ret_val, s7comm_item_return_valuenames, \"Unknown code: 0x%02x\"));",
          "2807:             proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "2808:             proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);",
          "2809:             proto_tree_add_uint(item_tree, hf_s7comm_data_length, tvb, offset + 2, 2, len);",
          "2810:             offset += head_len;",
          "2812:             if (ret_val == S7COMM_ITEM_RETVAL_DATA_OK || ret_val == S7COMM_ITEM_RETVAL_RESERVED) {",
          "2813:                 proto_tree_add_item(item_tree, hf_s7comm_readresponse_data, tvb, offset, len, ENC_NA);",
          "2814:                 offset += len;",
          "2815:                 if (len != len2) {",
          "2816:                     proto_tree_add_item(item_tree, hf_s7comm_data_fillbyte, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2817:                     offset += 1;",
          "2818:                 }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3952:     msg_item = proto_tree_add_item(data_tree, hf_s7comm_cpu_alarm_message_item, tvb, offset, 0, ENC_NA);",
          "3953:     msg_item_tree = proto_item_add_subtree(msg_item, ett_s7comm_cpu_alarm_message);",
          "3961:     }",
          "3962:     proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_function, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3963:     offset += 1;",
          "",
          "[Removed Lines]",
          "3955:     if (subfunc == S7COMM_UD_SUBF_CPU_ALARM8_IND || subfunc == S7COMM_UD_SUBF_CPU_ALARMACK_IND ||",
          "3956:         subfunc == S7COMM_UD_SUBF_CPU_ALARMSQ_IND || subfunc == S7COMM_UD_SUBF_CPU_ALARMS_IND ||",
          "3957:         subfunc == S7COMM_UD_SUBF_CPU_NOTIFY_IND || subfunc == S7COMM_UD_SUBF_CPU_NOTIFY8_IND) {",
          "3958:         msg_work_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_timestamp_coming, tvb, offset, 8, ENC_NA);",
          "3959:         msg_work_item_tree = proto_item_add_subtree(msg_work_item, ett_s7comm_cpu_alarm_message_timestamp);",
          "3960:         offset = s7comm_add_timestamp_to_tree(tvb, msg_work_item_tree, offset, TRUE, FALSE);",
          "",
          "[Added Lines]",
          "3993:     switch (subfunc) {",
          "3994:         case S7COMM_UD_SUBF_CPU_SCAN_IND:",
          "3995:             proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_scan_unknown1, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3996:             offset += 2;",
          "3997:             msg_work_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_timestamp_coming, tvb, offset, 8, ENC_NA);",
          "3998:             msg_work_item_tree = proto_item_add_subtree(msg_work_item, ett_s7comm_cpu_alarm_message_timestamp);",
          "3999:             offset = s7comm_add_timestamp_to_tree(tvb, msg_work_item_tree, offset, TRUE, FALSE);",
          "4000:             proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_scan_unknown2, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4001:             offset += 2;",
          "4002:             break;",
          "4003:         case S7COMM_UD_SUBF_CPU_ALARM8_IND:",
          "4004:         case S7COMM_UD_SUBF_CPU_ALARMACK_IND:",
          "4005:         case S7COMM_UD_SUBF_CPU_ALARMSQ_IND:",
          "4006:         case S7COMM_UD_SUBF_CPU_ALARMS_IND:",
          "4007:         case S7COMM_UD_SUBF_CPU_NOTIFY_IND:",
          "4008:         case S7COMM_UD_SUBF_CPU_NOTIFY8_IND:",
          "4009:             msg_work_item = proto_tree_add_item(msg_item_tree, hf_s7comm_cpu_alarm_message_timestamp_coming, tvb, offset, 8, ENC_NA);",
          "4010:             msg_work_item_tree = proto_item_add_subtree(msg_work_item, ett_s7comm_cpu_alarm_message_timestamp);",
          "4011:             offset = s7comm_add_timestamp_to_tree(tvb, msg_work_item_tree, offset, TRUE, FALSE);",
          "4012:             break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4580:     switch (subfunc)",
          "4581:     {",
          "4582:         case S7COMM_UD_SUBF_CYCLIC_MEM:",
          "4584:             proto_tree_add_uint(data_tree, hf_s7comm_param_itemcount, tvb, offset, 2, item_count);",
          "4585:             offset += 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4635:         case S7COMM_UD_SUBF_CYCLIC_MEM2:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4729:     guint16 len;",
          "4730:     guint32 errorcode;",
          "4731:     guint32 offset_temp;",
          "4733:     guint8 type;",
          "4734:     guint8 funcgroup;",
          "4735:     guint8 subfunc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4785:     guint32 reqres2;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4751:     proto_tree_add_item(param_tree, hf_s7comm_userdata_param_len, tvb, offset_temp, 1, ENC_BIG_ENDIAN);",
          "4752:     offset_temp += 1;",
          "4755:     offset_temp += 1;",
          "4757:     type = (tvb_get_guint8(tvb, offset_temp) & 0xf0) >> 4;",
          "4758:     funcgroup = (tvb_get_guint8(tvb, offset_temp) & 0x0f);",
          "4759:     proto_tree_add_item(param_tree, hf_s7comm_userdata_param_type, tvb, offset_temp, 1, ENC_BIG_ENDIAN);",
          "4766:     proto_item_append_text(param_tree, \": (%s)\", val_to_str(type, userdata_type_names, \"Unknown type: 0x%02x\"));",
          "4767:     proto_item_append_text(param_tree, \" ->(%s)\", val_to_str(funcgroup, userdata_functiongroup_names, \"Unknown function: 0x%02x\"));",
          "",
          "[Removed Lines]",
          "4754:     proto_tree_add_item(param_tree, hf_s7comm_userdata_param_reqres2, tvb, offset_temp, 1, ENC_BIG_ENDIAN);",
          "4761:     col_append_fstr(pinfo->cinfo, COL_INFO, \" Function:[%s] -> [%s]\",",
          "4762:         val_to_str(type, userdata_type_names, \"Unknown type: 0x%02x\"),",
          "4763:         val_to_str(funcgroup, userdata_functiongroup_names, \"Unknown function: 0x%02x\")",
          "4764:         );",
          "",
          "[Added Lines]",
          "4807:     proto_tree_add_item_ret_uint(param_tree, hf_s7comm_userdata_param_reqres2, tvb, offset, 1, ENC_BIG_ENDIAN, &reqres2);",
          "4813:     if (type == S7COMM_UD_TYPE_PUSH || type == S7COMM_UD_TYPE_NCPUSH) {",
          "4814:         col_append_fstr(pinfo->cinfo, COL_INFO, \" Function:[%s-%s] -> [%s]\",",
          "4815:             val_to_str(type, userdata_type_names, \"Unknown type: 0x%02x\"),",
          "4816:             val_to_str(reqres2, userdata_reqres2_names, \"Unknown method: 0x%02x\"),",
          "4817:             val_to_str(funcgroup, userdata_functiongroup_names, \"Unknown function: 0x%02x\")",
          "4818:             );",
          "4819:     } else {",
          "4820:         col_append_fstr(pinfo->cinfo, COL_INFO, \" Function:[%s] -> [%s]\",",
          "4821:             val_to_str(type, userdata_type_names, \"Unknown type: 0x%02x\"),",
          "4822:             val_to_str(funcgroup, userdata_functiongroup_names, \"Unknown function: 0x%02x\")",
          "4823:             );",
          "4824:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4854:     if (dlength >= 4) {",
          "4857:         proto_tree_add_uint(data_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);",
          "4858:         offset += 1;",
          "",
          "[Removed Lines]",
          "4850:     item = proto_tree_add_item(tree, hf_s7comm_data, tvb, offset, dlength, ENC_NA);",
          "4851:     data_tree = proto_item_add_subtree(item, ett_s7comm_data);",
          "4855:         ret_val = tvb_get_guint8(tvb, offset);",
          "",
          "[Added Lines]",
          "4913:         item = proto_tree_add_item(tree, hf_s7comm_data, tvb, offset, dlength, ENC_NA);",
          "4914:         data_tree = proto_item_add_subtree(item, ett_s7comm_data);",
          "4916:         ret_val = tvb_get_guint8(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4872:         if (dlength > 4) {",
          "4874:                 case S7COMM_UD_FUNCGROUP_PROG:",
          "4875:                     offset = s7comm_decode_ud_prog_subfunc(tvb, data_tree, type, subfunc, dlength, offset);",
          "4876:                     break;",
          "",
          "[Removed Lines]",
          "4873:             switch (funcgroup){",
          "",
          "[Added Lines]",
          "4933:             switch (funcgroup) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4881:                     offset = s7comm_decode_ud_block_subfunc(tvb, pinfo, data_tree, type, subfunc, ret_val, tsize, len, dlength, offset);",
          "4882:                     break;",
          "4883:                 case S7COMM_UD_FUNCGROUP_CPU:",
          "4903:                     }",
          "4904:                     break;",
          "4905:                 case S7COMM_UD_FUNCGROUP_SEC:",
          "",
          "[Removed Lines]",
          "4884:                     if (subfunc == S7COMM_UD_SUBF_CPU_READSZL) {",
          "4885:                         offset = s7comm_decode_ud_cpu_szl_subfunc(tvb, pinfo, data_tree, type, ret_val, len, dlength, data_unit_ref, last_data_unit, offset);",
          "4886:                     } else if (subfunc == S7COMM_UD_SUBF_CPU_NOTIFY_IND || subfunc == S7COMM_UD_SUBF_CPU_NOTIFY8_IND",
          "4887:                             || subfunc == S7COMM_UD_SUBF_CPU_ALARM8_IND || subfunc == S7COMM_UD_SUBF_CPU_ALARMSQ_IND",
          "4888:                             || subfunc == S7COMM_UD_SUBF_CPU_ALARMS_IND || subfunc == S7COMM_UD_SUBF_CPU_ALARMACK_IND",
          "4889:                             || subfunc == S7COMM_UD_SUBF_CPU_ALARMACK",
          "4890:                             || subfunc == S7COMM_UD_SUBF_CPU_ALARM8LOCK || subfunc == S7COMM_UD_SUBF_CPU_ALARM8LOCK_IND",
          "4891:                             || subfunc == S7COMM_UD_SUBF_CPU_ALARM8UNLOCK || subfunc == S7COMM_UD_SUBF_CPU_ALARM8UNLOCK_IND",
          "4892:                             || (subfunc == S7COMM_UD_SUBF_CPU_ALARMQUERY && type != S7COMM_UD_TYPE_RES)) {",
          "4893:                         offset = s7comm_decode_ud_cpu_alarm_main(tvb, pinfo, data_tree, type, subfunc, offset);",
          "4894:                     } else if (subfunc == S7COMM_UD_SUBF_CPU_ALARMQUERY && type == S7COMM_UD_TYPE_RES) {",
          "4895:                         offset = s7comm_decode_ud_cpu_alarm_query_response(tvb, pinfo, data_tree, offset);",
          "4896:                     } else if (subfunc == S7COMM_UD_SUBF_CPU_DIAGMSG) {",
          "4897:                         offset = s7comm_decode_ud_cpu_diagnostic_message(tvb, pinfo, TRUE, data_tree, offset);",
          "4898:                     } else if (subfunc == S7COMM_UD_SUBF_CPU_MSGS) {",
          "4899:                         offset = s7comm_decode_message_service(tvb, pinfo, data_tree, type, dlength - 4, offset);",
          "4900:                     } else {",
          "4902:                         proto_tree_add_item(data_tree, hf_s7comm_userdata_data, tvb, offset, dlength - 4, ENC_NA);",
          "",
          "[Added Lines]",
          "4944:                     switch (subfunc) {",
          "4945:                         case S7COMM_UD_SUBF_CPU_READSZL:",
          "4946:                             offset = s7comm_decode_ud_cpu_szl_subfunc(tvb, pinfo, data_tree, type, ret_val, len, dlength, data_unit_ref, last_data_unit, offset);",
          "4947:                             break;",
          "4948:                         case S7COMM_UD_SUBF_CPU_NOTIFY_IND:",
          "4949:                         case S7COMM_UD_SUBF_CPU_NOTIFY8_IND:",
          "4950:                         case S7COMM_UD_SUBF_CPU_ALARMSQ_IND:",
          "4951:                         case S7COMM_UD_SUBF_CPU_ALARMS_IND:",
          "4952:                         case S7COMM_UD_SUBF_CPU_SCAN_IND:",
          "4953:                         case S7COMM_UD_SUBF_CPU_ALARMACK:",
          "4954:                         case S7COMM_UD_SUBF_CPU_ALARMACK_IND:",
          "4955:                         case S7COMM_UD_SUBF_CPU_ALARM8_IND:",
          "4956:                         case S7COMM_UD_SUBF_CPU_ALARM8LOCK:",
          "4957:                         case S7COMM_UD_SUBF_CPU_ALARM8LOCK_IND:",
          "4958:                         case S7COMM_UD_SUBF_CPU_ALARM8UNLOCK:",
          "4959:                         case S7COMM_UD_SUBF_CPU_ALARM8UNLOCK_IND:",
          "4960:                             offset = s7comm_decode_ud_cpu_alarm_main(tvb, pinfo, data_tree, type, subfunc, offset);",
          "4961:                             break;",
          "4962:                         case S7COMM_UD_SUBF_CPU_ALARMQUERY:",
          "4963:                             if (type == S7COMM_UD_TYPE_RES) {",
          "4964:                                 offset = s7comm_decode_ud_cpu_alarm_query_response(tvb, pinfo, data_tree, offset);",
          "4965:                             } else {",
          "4966:                                 offset = s7comm_decode_ud_cpu_alarm_main(tvb, pinfo, data_tree, type, subfunc, offset);",
          "4967:                             }",
          "4968:                             break;",
          "4969:                         case S7COMM_UD_SUBF_CPU_DIAGMSG:",
          "4970:                             offset = s7comm_decode_ud_cpu_diagnostic_message(tvb, pinfo, TRUE, data_tree, offset);",
          "4971:                             break;",
          "4972:                         case S7COMM_UD_SUBF_CPU_MSGS:",
          "4973:                             offset = s7comm_decode_message_service(tvb, pinfo, data_tree, type, dlength - 4, offset);",
          "4974:                             break;",
          "4975:                         default:",
          "4977:                             proto_tree_add_item(data_tree, hf_s7comm_userdata_data, tvb, offset, dlength - 4, ENC_NA);",
          "4978:                             break;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5121:     col_set_str(pinfo->cinfo, COL_PROTOCOL, PROTO_TAG_S7COMM);",
          "5122:     col_clear(pinfo->cinfo, COL_INFO);",
          "5130:     s7comm_item = proto_tree_add_item(tree, proto_s7comm, tvb, 0, -1, ENC_NA);",
          "5131:     s7comm_tree = proto_item_add_subtree(s7comm_item, ett_s7comm);",
          "",
          "[Removed Lines]",
          "5128:     col_add_fstr(pinfo->cinfo, COL_INFO, \"ROSCTR:[%-8s]\", val_to_str(rosctr, rosctr_names, \"Unknown: 0x%02x\"));",
          "",
          "[Added Lines]",
          "5199:     col_append_sep_str(pinfo->cinfo, COL_INFO, \" | \", \"\");",
          "5205:     col_append_fstr(pinfo->cinfo, COL_INFO, \"ROSCTR:[%-8s]\", val_to_str(rosctr, rosctr_names, \"Unknown: 0x%02x\"));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5187:     if (errorcode > 0) {",
          "5188:         col_append_fstr(pinfo->cinfo, COL_INFO, \" -> Errorcode:[0x%04x]\", errorcode);",
          "5189:     }",
          "5190:     return TRUE;",
          "5191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5268:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5383:         { \"Parameter length\", \"s7comm.param.userdata.length\", FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5384:           \"Length of following parameter data (without head)\", HFILL }},",
          "5385:         { &hf_s7comm_userdata_param_reqres2,",
          "5389:         { &hf_s7comm_userdata_param_type,",
          "5390:         { \"Type\", \"s7comm.param.userdata.type\", FT_UINT8, BASE_DEC, VALS(userdata_type_names), 0xf0,",
          "",
          "[Removed Lines]",
          "5386:         { \"Unknown (Request/Response)\", \"s7comm.param.userdata.reqres1\", FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5387:           \"Unknown part, possible request/response (0x11, 0x12), but not in programmer commands\", HFILL }},",
          "",
          "[Added Lines]",
          "5465:         { \"Method (Request/Response)\", \"s7comm.param.userdata.reqres1\", FT_UINT8, BASE_HEX, VALS(userdata_reqres2_names), 0x0,",
          "5466:           \"Unknown part, second request/response (0x00, 0x11, 0x12)\", HFILL }},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6041:         { &hf_s7comm_cpu_alarm_message_event_reserved,",
          "6042:         { \"Reserved\", \"s7comm.alarm.event.reserved\", FT_UINT8, BASE_HEX, NULL, 0x0,",
          "6043:           NULL, HFILL }},",
          "6045:         { &hf_s7comm_cpu_alarm_query_unknown1,",
          "6046:         { \"Unknown/Reserved (1)\", \"s7comm.alarm.query.unknown1\", FT_UINT8, BASE_HEX, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6123:         { &hf_s7comm_cpu_alarm_message_scan_unknown1,",
          "6124:         { \"SCAN unknown 1\", \"s7comm.alarm.scan.unknown1\", FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6125:           NULL, HFILL }},",
          "6126:         { &hf_s7comm_cpu_alarm_message_scan_unknown2,",
          "6127:         { \"SCAN unknown 2\", \"s7comm.alarm.scan.unknown2\", FT_UINT16, BASE_HEX, NULL, 0x0,",
          "6128:           NULL, HFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}