{
  "cve_id": "CVE-2016-2529",
  "cve_desc": "The iseries_check_file_type function in wiretap/iseries.c in the iSeries file parser in Wireshark 2.0.x before 2.0.2 does not consider that a line may lack the \"OBJECT PROTOCOL\" substring, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "96d585a5e9baef21e1eea8505d78305b034dc80e",
  "patch_info": {
    "commit_hash": "96d585a5e9baef21e1eea8505d78305b034dc80e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/96d585a5e9baef21e1eea8505d78305b034dc80e",
    "files": [
      "wiretap/iseries.c"
    ],
    "message": "[iseries] fix iseries_check_file_type()\n\ncheck that we have a line that contains OBJECT PROTOCOL ETHERNET\n(at the moment, we fail if there's a line containing OBJECT PROTOCOL but\n not ETHERNET and succeed otherwise\n -> a file with some random lines will be identified as iseries)\n\ninitialize our line buffer with 0s to make sure we don't access uninitialized\ndata while parsing\n\ndon't set wth->priv unless the file is really an iseries file\n\nfree the iseries struct if the file is not our type\n\nBug: 11985\nChange-Id: I0ac7003c047f54ca025d02e59b56d1ff4e2a6be7\nReviewed-on: https://code.wireshark.org/review/13360\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
    "before_after_code_files": [
      "wiretap/iseries.c||wiretap/iseries.c"
    ]
  },
  "patch_diff": {
    "wiretap/iseries.c||wiretap/iseries.c": [
      "File: wiretap/iseries.c -> wiretap/iseries.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304: static gboolean",
      "305: iseries_check_file_type (wtap * wth, int *err, gchar **err_info, int format)",
      "306: {",
      "307:   guint      line;",
      "308:   int        num_items_scanned;",
      "309:   char       buf[ISERIES_LINE_LENGTH], protocol[9];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:   gboolean   is_iseries = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "313:   iseries                = (iseries_t *) g_malloc (sizeof (iseries_t));",
      "315:   iseries->have_date     = FALSE;",
      "316:   iseries->format        = format;",
      "318:   for (line = 0; line < ISERIES_HDR_LINES_TO_CHECK; line++)",
      "319:     {",
      "320:       if (file_gets (buf, ISERIES_LINE_LENGTH, wth->fh) == NULL)",
      "321:         {",
      "324:           if (*err == WTAP_ERR_SHORT_READ)",
      "327:         }",
      "",
      "[Removed Lines]",
      "314:   wth->priv              = (void *) iseries;",
      "326:           return FALSE;",
      "",
      "[Added Lines]",
      "320:       memset(buf, 0x0, sizeof(buf));",
      "327:           break;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:                                    protocol);",
      "340:         if (num_items_scanned == 1)",
      "341:           {",
      "344:           }",
      "",
      "[Removed Lines]",
      "342:             if (memcmp (protocol, \"ETHERNET\", 8) != 0)",
      "343:               return FALSE;",
      "",
      "[Added Lines]",
      "343:             if (memcmp (protocol, \"ETHERNET\", 8) == 0)",
      "344:               {",
      "346:                 is_iseries = TRUE;",
      "347:               }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "356:             iseries->have_date = TRUE;",
      "357:           }",
      "358:     }",
      "361: }",
      "",
      "[Removed Lines]",
      "360:   return TRUE;",
      "",
      "[Added Lines]",
      "364:   if (is_iseries)",
      "365:     wth->priv = (void *) iseries;",
      "366:   else",
      "367:     g_free(iseries);",
      "369:   return is_iseries;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83dd13cc56cd825219fa3209ae401b730414b413",
      "candidate_info": {
        "commit_hash": "83dd13cc56cd825219fa3209ae401b730414b413",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/83dd13cc56cd825219fa3209ae401b730414b413",
        "files": [
          "wiretap/iseries.c"
        ],
        "message": "[iseries] fix iseries_check_file_type()\n\ncheck that we have a line that contains OBJECT PROTOCOL ETHERNET\n(at the moment, we fail if there's a line containing OBJECT PROTOCOL but\n not ETHERNET and succeed otherwise\n -> a file with some random lines will be identified as iseries)\n\ninitialize our line buffer with 0s to make sure we don't access uninitialized\ndata while parsing\n\ndon't set wth->priv unless the file is really an iseries file\n\nfree the iseries struct if the file is not our type\n\nBug: 11985\nChange-Id: I0ac7003c047f54ca025d02e59b56d1ff4e2a6be7\nReviewed-on: https://code.wireshark.org/review/13360\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit 96d585a5e9baef21e1eea8505d78305b034dc80e)\nReviewed-on: https://code.wireshark.org/review/13373\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "wiretap/iseries.c||wiretap/iseries.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/iseries.c||wiretap/iseries.c"
          ],
          "candidate": [
            "wiretap/iseries.c||wiretap/iseries.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/iseries.c||wiretap/iseries.c": [
          "File: wiretap/iseries.c -> wiretap/iseries.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304: static gboolean",
          "305: iseries_check_file_type (wtap * wth, int *err, gchar **err_info, int format)",
          "306: {",
          "307:   guint      line;",
          "308:   int        num_items_scanned;",
          "309:   char       buf[ISERIES_LINE_LENGTH], protocol[9];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:   gboolean   is_iseries = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:   iseries                = (iseries_t *) g_malloc (sizeof (iseries_t));",
          "315:   iseries->have_date     = FALSE;",
          "316:   iseries->format        = format;",
          "318:   for (line = 0; line < ISERIES_HDR_LINES_TO_CHECK; line++)",
          "319:     {",
          "320:       if (file_gets (buf, ISERIES_LINE_LENGTH, wth->fh) == NULL)",
          "321:         {",
          "324:           if (*err == WTAP_ERR_SHORT_READ)",
          "327:         }",
          "",
          "[Removed Lines]",
          "314:   wth->priv              = (void *) iseries;",
          "326:           return FALSE;",
          "",
          "[Added Lines]",
          "320:       memset(buf, 0x0, sizeof(buf));",
          "327:           break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:                                    protocol);",
          "340:         if (num_items_scanned == 1)",
          "341:           {",
          "344:           }",
          "",
          "[Removed Lines]",
          "342:             if (memcmp (protocol, \"ETHERNET\", 8) != 0)",
          "343:               return FALSE;",
          "",
          "[Added Lines]",
          "343:             if (memcmp (protocol, \"ETHERNET\", 8) == 0)",
          "344:               {",
          "346:                 is_iseries = TRUE;",
          "347:               }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:             iseries->have_date = TRUE;",
          "357:           }",
          "358:     }",
          "361: }",
          "",
          "[Removed Lines]",
          "360:   return TRUE;",
          "",
          "[Added Lines]",
          "364:   if (is_iseries)",
          "365:     wth->priv = (void *) iseries;",
          "366:   else",
          "367:     g_free(iseries);",
          "369:   return is_iseries;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "106da4ad5f8f2e18a0382148a3c746793a5c55e4",
      "candidate_info": {
        "commit_hash": "106da4ad5f8f2e18a0382148a3c746793a5c55e4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/106da4ad5f8f2e18a0382148a3c746793a5c55e4",
        "files": [
          "wiretap/iseries.c"
        ],
        "message": "Fix indentation.\n\nChange-Id: I9fc0b8f98439ac37d4356e742d8c411e2dce473f\nReviewed-on: https://code.wireshark.org/review/13425\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/iseries.c||wiretap/iseries.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/iseries.c||wiretap/iseries.c"
          ],
          "candidate": [
            "wiretap/iseries.c||wiretap/iseries.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/iseries.c||wiretap/iseries.c": [
          "File: wiretap/iseries.c -> wiretap/iseries.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:           break;",
          "328:         }",
          "362:     }",
          "364:   if (is_iseries)",
          "",
          "[Removed Lines]",
          "333:         if (iseries->format == ISERIES_FORMAT_UNICODE)",
          "334:           {",
          "335:             iseries_UNICODE_to_ASCII ((guint8 *)buf, ISERIES_LINE_LENGTH);",
          "336:           }",
          "337:         ascii_strup_inplace (buf);",
          "338:         num_items_scanned = sscanf (buf,",
          "339:                                    \"%*[ \\n\\t]OBJECT PROTOCOL%*[ .:\\n\\t]%8s\",",
          "340:                                    protocol);",
          "341:         if (num_items_scanned == 1)",
          "342:           {",
          "343:             if (memcmp (protocol, \"ETHERNET\", 8) == 0)",
          "344:               {",
          "346:                 is_iseries = TRUE;",
          "347:               }",
          "348:           }",
          "354:         num_items_scanned = sscanf (buf,",
          "355:                                     \"%*[ \\n\\t]START DATE/TIME%*[ .:\\n\\t]%2d/%2d/%2d\",",
          "356:                                     &iseries->month, &iseries->day,",
          "357:                                     &iseries->year);",
          "358:         if (num_items_scanned == 3)",
          "359:           {",
          "360:             iseries->have_date = TRUE;",
          "361:           }",
          "",
          "[Added Lines]",
          "333:       if (iseries->format == ISERIES_FORMAT_UNICODE)",
          "334:         {",
          "335:           iseries_UNICODE_to_ASCII ((guint8 *)buf, ISERIES_LINE_LENGTH);",
          "336:         }",
          "337:       ascii_strup_inplace (buf);",
          "338:       num_items_scanned = sscanf (buf,",
          "339:                                  \"%*[ \\n\\t]OBJECT PROTOCOL%*[ .:\\n\\t]%8s\",",
          "340:                                  protocol);",
          "341:       if (num_items_scanned == 1)",
          "342:         {",
          "343:           if (memcmp (protocol, \"ETHERNET\", 8) == 0)",
          "344:             {",
          "346:               is_iseries = TRUE;",
          "347:             }",
          "348:         }",
          "354:       num_items_scanned = sscanf (buf,",
          "355:                                   \"%*[ \\n\\t]START DATE/TIME%*[ .:\\n\\t]%2d/%2d/%2d\",",
          "356:                                   &iseries->month, &iseries->day,",
          "357:                                   &iseries->year);",
          "358:       if (num_items_scanned == 3)",
          "359:         {",
          "360:           iseries->have_date = TRUE;",
          "361:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}