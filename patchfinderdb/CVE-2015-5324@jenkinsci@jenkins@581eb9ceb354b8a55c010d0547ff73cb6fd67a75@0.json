{
  "cve_id": "CVE-2015-5324",
  "cve_desc": "Jenkins before 1.638 and LTS before 1.625.2 allow remote attackers to obtain sensitive information via a direct request to queue/api.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
  "patch_info": {
    "commit_hash": "581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/581eb9ceb354b8a55c010d0547ff73cb6fd67a75",
    "files": [
      "core/src/main/java/hudson/model/Queue.java",
      "test/src/test/java/hudson/model/QueueTest.java"
    ],
    "message": "[SECURITY-186] check user permissions when calling QUEUE API",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java",
      "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
      "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "109: import jenkins.util.AtmostOneTaskExecutor;",
      "110: import org.acegisecurity.AccessDeniedException;",
      "111: import org.acegisecurity.Authentication;",
      "112: import org.kohsuke.stapler.HttpResponse;",
      "113: import org.kohsuke.stapler.HttpResponses;",
      "114: import org.kohsuke.stapler.export.Exported;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "695:     @Exported(inline=true)",
      "696:     public synchronized Item[] getItems() {",
      "706:         return r;",
      "707:     }",
      "",
      "[Removed Lines]",
      "697:         Item[] r = new Item[waitingList.size() + blockedProjects.size() + buildables.size() + pendings.size()];",
      "698:         waitingList.toArray(r);",
      "699:         int idx = waitingList.size();",
      "700:         for (BlockedItem p : blockedProjects.values())",
      "701:             r[idx++] = p;",
      "702:         for (BuildableItem p : reverse(buildables.values()))",
      "703:             r[idx++] = p;",
      "704:         for (BuildableItem p : reverse(pendings.values()))",
      "705:             r[idx++] = p;",
      "",
      "[Added Lines]",
      "698:         List<Item> r = new ArrayList<Item>();",
      "700:         for(WaitingItem p : waitingList) {",
      "701:             r = filterItemListBasedOnPermissions(r, p);",
      "702:         }",
      "703:         for (BlockedItem p : blockedProjects.values()){",
      "704:             r = filterItemListBasedOnPermissions(r, p);",
      "705:         }",
      "706:         for (BuildableItem p : reverse(buildables.values())) {",
      "707:             r = filterItemListBasedOnPermissions(r, p);",
      "708:         }",
      "709:         for (BuildableItem p : reverse(pendings.values())) {",
      "710:             r= filterItemListBasedOnPermissions(r, p);",
      "711:         }",
      "712:         Item[] items = new Item[r.size()];",
      "713:         r.toArray(items);",
      "714:         return items;",
      "715:     }",
      "717:     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {",
      "718:         if (t.task instanceof hudson.model.Item) {",
      "719:             if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {",
      "720:                 r.add(t);",
      "721:             }",
      "722:         }",
      "723:         return r;",
      "724:     }",
      "732:     @Restricted(NoExternalUse.class)",
      "733:     @Exported(inline=true)",
      "734:     public synchronized StubItem[] getDiscoverableItems() {",
      "735:         List<StubItem> r = new ArrayList<StubItem>();",
      "737:         for(WaitingItem p : waitingList) {",
      "738:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "739:         }",
      "740:         for (BlockedItem p : blockedProjects.values()){",
      "741:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "742:         }",
      "743:         for (BuildableItem p : reverse(buildables.values())) {",
      "744:             r = filterDiscoverableItemListBasedOnPermissions(r, p);",
      "745:         }",
      "746:         for (BuildableItem p : reverse(pendings.values())) {",
      "747:             r= filterDiscoverableItemListBasedOnPermissions(r, p);",
      "748:         }",
      "749:         StubItem[] items = new StubItem[r.size()];",
      "750:         r.toArray(items);",
      "751:         return items;",
      "752:     }",
      "754:     private List<StubItem> filterDiscoverableItemListBasedOnPermissions(List<StubItem> r, Item t) {",
      "755:         if (t.task instanceof hudson.model.Item) {",
      "756:             if (!((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ) && ((hudson.model.Item)t.task).hasPermission(hudson.model.Item.DISCOVER)) {",
      "757:                 r.add(new StubItem(new StubTask(t.task)));",
      "758:             }",
      "759:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1581:         }",
      "1583:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1643:     @Restricted(NoExternalUse.class)",
      "1644:     @ExportedBean(defaultVisibility = 999)",
      "1645:     public static class StubTask {",
      "1647:         private String name;",
      "1649:         public StubTask(@Nonnull Queue.Task base) {",
      "1650:             this.name = base.getName();",
      "1651:         }",
      "1653:         @Exported",
      "1654:         public String getName() {",
      "1655:             return name;",
      "1656:         }",
      "1657:     }",
      "1663:     @Restricted(NoExternalUse.class)",
      "1664:     @ExportedBean(defaultVisibility = 999)",
      "1665:     public class StubItem {",
      "1667:         @Exported public StubTask task;",
      "1669:         public StubItem(StubTask task) {",
      "1670:             this.task = task;",
      "1671:         }",
      "1673:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
      "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.model;",
      "26: import com.gargoylesoftware.htmlunit.html.HtmlFileInput;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "29: import hudson.Launcher;",
      "30: import hudson.matrix.AxisList;",
      "31: import hudson.matrix.LabelAxis;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import com.gargoylesoftware.htmlunit.html.DomElement;",
      "27: import com.gargoylesoftware.htmlunit.html.DomNode;",
      "31: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: import hudson.model.Queue.Executable;",
      "40: import hudson.model.Queue.WaitingItem;",
      "41: import hudson.model.queue.AbstractQueueTask;",
      "42: import hudson.model.queue.QueueTaskFuture;",
      "43: import hudson.model.queue.ScheduleResult;",
      "44: import hudson.model.queue.SubTask;",
      "45: import hudson.security.ACL;",
      "46: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "47: import hudson.security.SparseACL;",
      "48: import hudson.slaves.DumbSlave;",
      "49: import hudson.slaves.DummyCloudImpl;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import hudson.model.queue.CauseOfBlockage;",
      "46: import hudson.model.queue.QueueTaskDispatcher;",
      "51: import hudson.security.AuthorizationMatrixProperty;",
      "53: import hudson.security.Permission;",
      "54: import hudson.security.ProjectMatrixAuthorizationStrategy;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58: import java.util.ArrayList;",
      "59: import java.util.Arrays;",
      "60: import java.util.Collections;",
      "61: import java.util.List;",
      "62: import java.util.concurrent.CancellationException;",
      "63: import java.util.concurrent.ExecutionException;",
      "64: import java.util.concurrent.Future;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: import java.util.HashMap;",
      "71: import java.util.Map;",
      "72: import java.util.Set;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84: import org.jvnet.hudson.test.HudsonTestCase;",
      "85: import org.jvnet.hudson.test.MockQueueItemAuthenticator;",
      "86: import org.jvnet.hudson.test.SequenceLock;",
      "87: import org.jvnet.hudson.test.TestBuilder;",
      "88: import org.mortbay.jetty.Server;",
      "89: import org.mortbay.jetty.bio.SocketConnector;",
      "90: import org.mortbay.jetty.servlet.ServletHandler;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98: import org.jvnet.hudson.test.SleepBuilder;",
      "100: import org.jvnet.hudson.test.TestExtension;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "413:         FreeStyleBuild b = v.waitForStart();",
      "414:         assertEquals(1,b.getNumber());",
      "415:         assertTrue(b.isBuilding());",
      "418:         ev.signal();    // let the build complete",
      "419:         FreeStyleBuild b2 = assertBuildStatusSuccess(v);",
      "421:     }",
      "423:     @Inject",
      "",
      "[Removed Lines]",
      "416:         assertSame(p,b.getProject());",
      "420:         assertSame(b,b2);",
      "",
      "[Added Lines]",
      "429:         assertSame(p, b.getProject());",
      "433:         assertSame(b, b2);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "579:         } catch (CancellationException e) {",
      "580:         }",
      "581:     }",
      "582: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     public void testQueueApiOutputShouldBeFilteredByUserPermission() throws Exception {",
      "598:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "599:         ProjectMatrixAuthorizationStrategy str = new ProjectMatrixAuthorizationStrategy();",
      "600:         str.add(Jenkins.READ, \"bob\");",
      "601:         str.add(Jenkins.READ, \"alice\");",
      "602:         str.add(Jenkins.READ, \"james\");",
      "603:         jenkins.setAuthorizationStrategy(str);",
      "605:         FreeStyleProject project = createFreeStyleProject(\"project\");",
      "607:         Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>();",
      "608:         permissions.put(Item.READ, Collections.singleton(\"bob\"));",
      "609:         permissions.put(Item.DISCOVER, Collections.singleton(\"james\"));",
      "610:         AuthorizationMatrixProperty prop1 = new AuthorizationMatrixProperty(permissions);",
      "611:         project.addProperty(prop1);",
      "612:         project.getBuildersList().add(new SleepBuilder(10));",
      "613:         project.scheduleBuild2(0);",
      "615:         WebClient webClient = new WebClient();",
      "616:         webClient.login(\"bob\", \"bob\");",
      "617:         XmlPage p = webClient.goToXml(\"/queue/api/xml\");",
      "620:         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){",
      "621:             if(element.getNodeName().equals(\"task\")){",
      "622:                 assertEquals(((DomElement)element).getElementsByTagName(\"name\").size(),1);",
      "623:                 assertEquals(((DomElement) element).getElementsByTagName(\"name\").item(0).getFirstChild().toString(), \"project\");",
      "624:                 assertEquals(((DomElement)element).getElementsByTagName(\"url\").size(),1);",
      "625:             }",
      "626:         }",
      "627:         WebClient webClient2 = new WebClient();",
      "628:         webClient2.login(\"alice\");",
      "629:         XmlPage p2 = webClient2.goToXml(\"/queue/api/xml\");",
      "631:         assertEquals(\"<queue></queue>\", p2.getContent());",
      "633:         WebClient webClient3 = new WebClient();",
      "634:         webClient3.login(\"james\");",
      "635:         XmlPage p3 = webClient3.goToXml(\"/queue/api/xml\");",
      "637:         assertEquals(\"<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>\",",
      "638:                 p3.getContent());",
      "640:     }",
      "643:     @TestExtension(\"testQueueApiOutputShouldBeFilteredByUserPermission\")",
      "644:     public static class MyQueueTaskDispatcher extends QueueTaskDispatcher {",
      "645:         @Override",
      "646:         public CauseOfBlockage canTake(Node node, Queue.BuildableItem item) {",
      "647:             return new CauseOfBlockage() {",
      "648:                 @Override",
      "649:                 public String getShortDescription() {",
      "650:                     return \"blocked by canTake\";",
      "651:                 }",
      "652:             };",
      "653:         }",
      "654:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf1fdf98e435b4c7df54f1a8e958d185f1a0f3d2",
      "candidate_info": {
        "commit_hash": "cf1fdf98e435b4c7df54f1a8e958d185f1a0f3d2",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/cf1fdf98e435b4c7df54f1a8e958d185f1a0f3d2",
        "files": [
          "core/src/main/java/hudson/model/Queue.java"
        ],
        "message": "[FIXED JENKINS-31649] Check should be against AccessControlled and Permission.READ\n\n- The previous check was to narrow.\n- We now check on AccessControlled (which is implemented by Item)\n- We now also check on Permission.READ (which is the generic read permission)\n\nThis should allow subtasks who's task may not be an Item to at least implement AccessControlled to alow visibility.\n\nThere remains an open question as to whether tasks that are not AccessControlled should ever be visible in the UI",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
          "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:     }",
          "801:     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {",
          "804:                 r.add(t);",
          "805:             }",
          "806:         }",
          "",
          "[Removed Lines]",
          "802:         if (t.task instanceof hudson.model.Item) {",
          "803:             if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {",
          "",
          "[Added Lines]",
          "802:         if (t.task instanceof hudson.security.AccessControlled) {",
          "803:             if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)",
          "804:                     || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b51653d2bfa1a8b4e854bb0991202879e7228da8",
      "candidate_info": {
        "commit_hash": "b51653d2bfa1a8b4e854bb0991202879e7228da8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/b51653d2bfa1a8b4e854bb0991202879e7228da8",
        "files": [
          "core/src/main/java/hudson/model/Queue.java"
        ],
        "message": "[FIXED JENKINS-31649] Check should be against AccessControlled and Permission.READ\n\n- The previous check was to narrow.\n- We now check on AccessControlled (which is implemented by Item)\n- We now also check on Permission.READ (which is the generic read permission)\n\nThis should allow subtasks who's task may not be an Item to at least implement AccessControlled to alow visibility.\n\nThere remains an open question as to whether tasks that are not AccessControlled should ever be visible in the UI\n\n(cherry picked from commit cf1fdf98e435b4c7df54f1a8e958d185f1a0f3d2)",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
          "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:     }",
          "802:     private List<Item> filterItemListBasedOnPermissions(List<Item> r, Item t) {",
          "805:                 r.add(t);",
          "806:             }",
          "807:         }",
          "",
          "[Removed Lines]",
          "803:         if (t.task instanceof hudson.model.Item) {",
          "804:             if (((hudson.model.Item)t.task).hasPermission(hudson.model.Item.READ)) {",
          "",
          "[Added Lines]",
          "803:         if (t.task instanceof hudson.security.AccessControlled) {",
          "804:             if (((hudson.security.AccessControlled)t.task).hasPermission(hudson.model.Item.READ)",
          "805:                     || ((hudson.security.AccessControlled) t.task).hasPermission(hudson.security.Permission.READ)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33b55588a6a5f844a59f2cd8940d385c6d412eb5",
      "candidate_info": {
        "commit_hash": "33b55588a6a5f844a59f2cd8940d385c6d412eb5",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/33b55588a6a5f844a59f2cd8940d385c6d412eb5",
        "files": [
          "test/src/test/java/hudson/model/QueueTest.java"
        ],
        "message": "[security-186]fix relative path",
        "before_after_code_files": [
          "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
          "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:         WebClient webClient = new WebClient();",
          "616:         webClient.login(\"bob\", \"bob\");",
          "620:         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){",
          "",
          "[Removed Lines]",
          "617:         XmlPage p = webClient.goToXml(\"/queue/api/xml\");",
          "",
          "[Added Lines]",
          "617:         XmlPage p = webClient.goToXml(\"queue/api/xml\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "626:         }",
          "627:         WebClient webClient2 = new WebClient();",
          "628:         webClient2.login(\"alice\");",
          "631:         assertEquals(\"<queue></queue>\", p2.getContent());",
          "633:         WebClient webClient3 = new WebClient();",
          "634:         webClient3.login(\"james\");",
          "637:         assertEquals(\"<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>\",",
          "638:                 p3.getContent());",
          "",
          "[Removed Lines]",
          "629:         XmlPage p2 = webClient2.goToXml(\"/queue/api/xml\");",
          "635:         XmlPage p3 = webClient3.goToXml(\"/queue/api/xml\");",
          "",
          "[Added Lines]",
          "629:         XmlPage p2 = webClient2.goToXml(\"queue/api/xml\");",
          "635:         XmlPage p3 = webClient3.goToXml(\"queue/api/xml\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "114ae54bb966850a309173f896d4030cddb4da9b",
      "candidate_info": {
        "commit_hash": "114ae54bb966850a309173f896d4030cddb4da9b",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/114ae54bb966850a309173f896d4030cddb4da9b",
        "files": [
          "test/src/test/java/hudson/model/QueueTest.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java"
        ],
        "message": "Some more test fixes.",
        "before_after_code_files": [
          "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
          "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import hudson.triggers.TimerTrigger.TimerTriggerCause;",
          "69: import hudson.util.OneShotEvent;",
          "70: import hudson.util.XStream2;",
          "91: import jenkins.model.Jenkins;",
          "92: import jenkins.security.QueueItemAuthenticatorConfiguration;",
          "93: import jenkins.triggers.ReverseBuildTrigger;",
          "",
          "[Removed Lines]",
          "71: import java.io.File;",
          "72: import java.io.IOException;",
          "73: import java.util.ArrayList;",
          "74: import java.util.Arrays;",
          "75: import java.util.Collections;",
          "76: import java.util.HashMap;",
          "77: import java.util.List;",
          "78: import java.util.Map;",
          "79: import java.util.Set;",
          "80: import java.util.concurrent.CancellationException;",
          "81: import java.util.concurrent.ExecutionException;",
          "82: import java.util.concurrent.Future;",
          "83: import java.util.concurrent.ScheduledThreadPoolExecutor;",
          "84: import java.util.concurrent.TimeUnit;",
          "85: import java.util.concurrent.TimeoutException;",
          "86: import java.util.concurrent.atomic.AtomicInteger;",
          "87: import javax.servlet.ServletException;",
          "88: import javax.servlet.http.HttpServlet;",
          "89: import javax.servlet.http.HttpServletRequest;",
          "90: import javax.servlet.http.HttpServletResponse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: import org.apache.commons.fileupload.disk.DiskFileItemFactory;",
          "100: import org.apache.commons.fileupload.servlet.ServletFileUpload;",
          "101: import org.apache.commons.io.FileUtils;",
          "106: import org.eclipse.jetty.server.Server;",
          "107: import org.eclipse.jetty.server.ServerConnector;",
          "108: import org.eclipse.jetty.servlet.ServletHandler;",
          "",
          "[Removed Lines]",
          "103: import static org.hamcrest.Matchers.nullValue;",
          "104: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: import org.jvnet.hudson.test.TestExtension;",
          "120: import org.jvnet.hudson.test.recipes.LocalData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: import javax.servlet.ServletException;",
          "99: import javax.servlet.http.HttpServlet;",
          "100: import javax.servlet.http.HttpServletRequest;",
          "101: import javax.servlet.http.HttpServletResponse;",
          "102: import java.io.File;",
          "103: import java.io.IOException;",
          "104: import java.util.ArrayList;",
          "105: import java.util.Arrays;",
          "106: import java.util.Collections;",
          "107: import java.util.HashMap;",
          "108: import java.util.List;",
          "109: import java.util.Map;",
          "110: import java.util.Set;",
          "111: import java.util.concurrent.CancellationException;",
          "112: import java.util.concurrent.ExecutionException;",
          "113: import java.util.concurrent.Future;",
          "114: import java.util.concurrent.ScheduledThreadPoolExecutor;",
          "115: import java.util.concurrent.TimeUnit;",
          "116: import java.util.concurrent.TimeoutException;",
          "117: import java.util.concurrent.atomic.AtomicInteger;",
          "119: import static org.hamcrest.Matchers.nullValue;",
          "120: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "937:         webClient.login(\"alice\");",
          "938:         XmlPage p2 = webClient.goToXml(\"queue/api/xml\");",
          "942:         webClient = r.createWebClient();",
          "943:         webClient.login(\"james\");",
          "944:         XmlPage p3 = webClient.goToXml(\"queue/api/xml\");",
          "949:     }",
          "",
          "[Removed Lines]",
          "940:         assertEquals(\"<queue></queue>\", p2.getContent());",
          "946:         assertEquals(\"<queue><discoverableItem><task><name>project</name></task></discoverableItem></queue>\",",
          "947:                 p3.getContent());",
          "",
          "[Added Lines]",
          "940:         assertTrue(p2.getByXPath(\"/queue/node()\").isEmpty());",
          "946:         List projects = p3.getByXPath(\"/queue/discoverableItem/task/name/text()\");",
          "947:         assertEquals(1, projects.size());",
          "948:         assertEquals(\"project\", projects.get(0).toString());",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "10: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "13: import org.junit.Before;",
          "14: import org.junit.Rule;",
          "15: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "11: import java.net.HttpURLConnection;",
          "12: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "11: import net.sf.json.JSONObject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "19: import org.jvnet.hudson.test.recipes.PresetData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.net.HttpURLConnection;",
          "22: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     @Test public void apiJson() throws Exception {",
          "127:         WebClient wc = r.createWebClient();",
          "128:         String json = wc.goTo(\"crumbIssuer/api/json\", \"application/json\").getWebResponse().getContentAsString();",
          "130:         wc.assertFails(\"crumbIssuer/api/json?jsonp=hack\", HttpURLConnection.HTTP_FORBIDDEN);",
          "131:     }",
          "",
          "[Removed Lines]",
          "129:         assertTrue(json, json.matches(\"\\\\Q{\\\"crumb\\\":\\\"\\\\E[0-9a-f]+\\\\Q\\\",\\\"crumbRequestField\\\":\\\"\" + r.jenkins.getCrumbIssuer().getCrumbRequestField() + \"\\\"}\\\\E\"));",
          "",
          "[Added Lines]",
          "132:         JSONObject jsonObject = JSONObject.fromObject(json);",
          "133:         assertEquals(r.jenkins.getCrumbIssuer().getCrumbRequestField(),jsonObject.getString(\"crumbRequestField\"));",
          "134:         assertTrue(jsonObject.getString(\"crumb\").matches(\"[0-9a-f]+\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a72e938d58598cd4bd3caa48ee9e8a3f60c30e4",
      "candidate_info": {
        "commit_hash": "4a72e938d58598cd4bd3caa48ee9e8a3f60c30e4",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/4a72e938d58598cd4bd3caa48ee9e8a3f60c30e4",
        "files": [
          "test/src/test/java/hudson/model/QueueTest.java"
        ],
        "message": "[security-186] getElementByTagName does not work",
        "before_after_code_files": [
          "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/model/QueueTest.java||test/src/test/java/hudson/model/QueueTest.java": [
          "File: test/src/test/java/hudson/model/QueueTest.java -> test/src/test/java/hudson/model/QueueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:         for (DomNode element: p.getFirstChild().getFirstChild().getChildNodes()){",
          "944:             }",
          "945:         }",
          "946:         webClient = r.createWebClient();",
          "",
          "[Removed Lines]",
          "940:             if(element.getNodeName().equals(\"task\")){",
          "941:                 assertEquals(((DomElement)element).getElementsByTagName(\"name\").size(),1);",
          "942:                 assertEquals(((DomElement) element).getElementsByTagName(\"name\").item(0).getFirstChild().toString(), \"project\");",
          "943:                 assertEquals(((DomElement)element).getElementsByTagName(\"url\").size(),1);",
          "",
          "[Added Lines]",
          "940:             if (element.getNodeName().equals(\"task\")) {",
          "941:                 for (DomNode child: ((DomElement) element).getChildNodes()) {",
          "942:                     if (child.getNodeName().equals(\"name\")) {",
          "943:                         assertEquals(child.asText(), \"project\");",
          "944:                     } else if (child.getNodeName().equals(\"url\")) {",
          "945:                         assertNotNull(child.asText());",
          "946:                     }",
          "947:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}