{
  "cve_id": "CVE-2021-32139",
  "cve_desc": "The gf_isom_vp_config_get function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
  "repo": "gpac/gpac",
  "patch_hash": "d527325a9b72218612455a534a508f9e1753f76e",
  "patch_info": {
    "commit_hash": "d527325a9b72218612455a534a508f9e1753f76e",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/d527325a9b72218612455a534a508f9e1753f76e",
    "files": [
      "src/isomedia/box_code_3gpp.c",
      "src/isomedia/box_funcs.c",
      "src/isomedia/tx3g.c"
    ],
    "message": "fixed #1768",
    "before_after_code_files": [
      "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
      "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
      "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
      "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:  u16 pSize;",
      "348:  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;",
      "352:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
      "353:  if (e) return e;",
      "",
      "[Removed Lines]",
      "350:  ISOM_DECREASE_SIZE(ptr, 51);",
      "",
      "[Added Lines]",
      "350:  ISOM_DECREASE_SIZE(ptr, 8);",
      "354:  if (!ptr->size) {",
      "355:   ptr->textJustification = 1;",
      "356:   return GF_OK;",
      "357:  }",
      "358:  ISOM_DECREASE_SIZE(ptr, 43);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "503: {",
      "504:  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;",
      "508:  if (ptr->textName)",
      "509:   s->size += strlen(ptr->textName);",
      "510:  return GF_OK;",
      "",
      "[Removed Lines]",
      "507:  s->size += 51 + 1;",
      "",
      "[Added Lines]",
      "513:  s->size += 8;",
      "515:  s->size += 43 + 1;",
      "",
      "---------------"
    ],
    "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
      "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:  payload_start = gf_bs_get_position(bs);",
      "255:  end = gf_bs_available(bs);",
      "256:  if (size - hdr_size > end ) {",
      "257:   newBox->size = size - hdr_size - end;",
      "",
      "[Removed Lines]",
      "253: retry_unknown_box:",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "305:   gf_isom_box_del(newBox);",
      "316:   if (!skip_logs) {",
      "317:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box \\\"%s\\\" (start \"LLU\") failed (%s) - skipping\\n\", gf_4cc_to_str(type), start, gf_error_to_string(e)));",
      "318:   }",
      "",
      "[Removed Lines]",
      "308:   if (parent_type==GF_ISOM_BOX_TYPE_STSD) {",
      "309:    newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);",
      "310:    if (!newBox) return GF_OUT_OF_MEM;",
      "311:    ((GF_UnknownBox *)newBox)->original_4cc = type;",
      "312:    newBox->size = size;",
      "313:    gf_bs_seek(bs, payload_start);",
      "314:    goto retry_unknown_box;",
      "315:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/isomedia/tx3g.c||src/isomedia/tx3g.c": [
      "File: src/isomedia/tx3g.c -> src/isomedia/tx3g.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #ifndef GPAC_DISABLE_ISOM",
      "32: GF_Err gf_isom_get_text_description(GF_ISOFile *movie, u32 trackNumber, u32 descriptionIndex, GF_TextSampleDescriptor **out_desc)",
      "33: {",
      "34:  GF_TrackBox *trak;",
      "35:  u32 i;",
      "39:  if (!descriptionIndex || !out_desc) return GF_BAD_PARAM;",
      "41:  trak = gf_isom_get_track_from_file(movie, trackNumber);",
      "",
      "[Removed Lines]",
      "36:  Bool is_qt_text = GF_FALSE;",
      "37:  GF_Tx3gSampleEntryBox *txt;",
      "",
      "[Added Lines]",
      "31: static u32 rgb_48_to_32(char *val)",
      "32: {",
      "33:  u32 res = 0x0;",
      "34:  u32 i;",
      "36:  for (i=0; i<3; i++) {",
      "37:   u32 v = val[2*i];",
      "38:   v<<=8;",
      "39:   v|=val[2*i + 1];",
      "40:   v/=0xFF;",
      "42:   res <<= 8;",
      "43:   res |= v;",
      "44:  }",
      "45:  return res;",
      "46: }",
      "52:  GF_Tx3gSampleEntryBox *txt = NULL;",
      "53:  GF_TextSampleEntryBox *qt_txt = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:  case GF_ISOM_BOX_TYPE_TX3G:",
      "56:   break;",
      "57:  case GF_ISOM_BOX_TYPE_TEXT:",
      "59:   break;",
      "60:  default:",
      "61:   return GF_BAD_PARAM;",
      "",
      "[Removed Lines]",
      "58:   is_qt_text = GF_TRUE;",
      "",
      "[Added Lines]",
      "73:   qt_txt = (GF_TextSampleEntryBox *)txt;",
      "74:   txt = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "64:  (*out_desc) = (GF_TextSampleDescriptor *) gf_odf_desc_new(GF_ODF_TX3G_TAG);",
      "65:  if (! (*out_desc) ) return GF_OUT_OF_MEM;",
      "74:   if (qt_txt->textName) {",
      "75:    (*out_desc)->font_count = 1;",
      "76:    (*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord));",
      "77:    (*out_desc)->fonts[0].fontName = gf_strdup(qt_txt->textName);",
      "78:   }",
      "79:  } else {",
      "80:   (*out_desc)->font_count = txt->font_table->entry_count;",
      "81:   (*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * txt->font_table->entry_count);",
      "82:   for (i=0; i<txt->font_table->entry_count; i++) {",
      "",
      "[Removed Lines]",
      "66:  (*out_desc)->back_color = txt->back_color;",
      "67:  (*out_desc)->default_pos = txt->default_box;",
      "68:  (*out_desc)->default_style = txt->default_style;",
      "69:  (*out_desc)->displayFlags = txt->displayFlags;",
      "70:  (*out_desc)->vert_justif = txt->vertical_justification;",
      "71:  (*out_desc)->horiz_justif = txt->horizontal_justification;",
      "72:  if (is_qt_text) {",
      "73:   GF_TextSampleEntryBox *qt_txt = (GF_TextSampleEntryBox *) txt;",
      "",
      "[Added Lines]",
      "83:  if (qt_txt) {",
      "84:   (*out_desc)->back_color = rgb_48_to_32(qt_txt->background_color);",
      "85:   (*out_desc)->default_pos = qt_txt->default_box;",
      "86:   (*out_desc)->default_style.style_flags = qt_txt->fontFace;",
      "87:   (*out_desc)->default_style.text_color = rgb_48_to_32(qt_txt->foreground_color);",
      "88:   (*out_desc)->displayFlags = qt_txt->displayFlags;",
      "89:   (*out_desc)->vert_justif = -1;",
      "90:   (*out_desc)->horiz_justif = qt_txt->textJustification;",
      "97:   (*out_desc)->back_color = txt->back_color;",
      "98:   (*out_desc)->default_pos = txt->default_box;",
      "99:   (*out_desc)->default_style = txt->default_style;",
      "100:   (*out_desc)->displayFlags = txt->displayFlags;",
      "101:   (*out_desc)->vert_justif = txt->vertical_justification;",
      "102:   (*out_desc)->horiz_justif = txt->horizontal_justification;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "695: #define SAMPLE_INDEX_OFFSET  129",
      "699: {",
      "700:  u32 size, j, fount_count;",
      "702:  const char *qt_fontname = NULL;",
      "703:  void gpp_write_rgba(GF_BitStream *bs, u32 col);",
      "704:  void gpp_write_box(GF_BitStream *bs, GF_BoxRecord *rec);",
      "705:  void gpp_write_style(GF_BitStream *bs, GF_StyleRecord *rec);",
      "708:  if (sidx_offset) gf_bs_write_u8(bs, sidx + sidx_offset);",
      "",
      "[Removed Lines]",
      "698: static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *a, GF_BitStream *bs, u32 sidx, u32 sidx_offset)",
      "701:  Bool is_qt_text = (a->type==GF_ISOM_BOX_TYPE_TEXT) ? GF_TRUE : GF_FALSE;",
      "",
      "[Added Lines]",
      "721: static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *_a, GF_BitStream *bs, u32 sidx, u32 sidx_offset)",
      "729:  GF_TextSampleEntryBox *qt = (_a->type==GF_ISOM_BOX_TYPE_TEXT) ? (GF_TextSampleEntryBox *)_a : NULL;",
      "730:  GF_Tx3gSampleEntryBox *ttxt = (_a->type!=GF_ISOM_BOX_TYPE_TEXT) ? (GF_Tx3gSampleEntryBox *)_a : NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "711:  size = 8 + 18 + 8 + 12;",
      "712:  size += 8 + 2;",
      "713:  fount_count = 0;",
      "727:   }",
      "728:  }",
      "730:  gf_bs_write_u32(bs, size);",
      "741:  size -= (8 + 18 + 8 + 12);",
      "742:  gf_bs_write_u32(bs, size);",
      "",
      "[Removed Lines]",
      "714:  if (is_qt_text) {",
      "715:   GF_TextSampleEntryBox *qt = (GF_TextSampleEntryBox *)a;",
      "716:   if (qt->textName) {",
      "717:    qt_fontname = qt->textName;",
      "718:    fount_count = 1;",
      "719:   }",
      "720:  } else {",
      "721:   if (a->font_table) {",
      "722:    fount_count = a->font_table->entry_count;",
      "723:    for (j=0; j<fount_count; j++) {",
      "724:     size += 3;",
      "725:     if (a->font_table->fonts[j].fontName) size += (u32) strlen(a->font_table->fonts[j].fontName);",
      "726:    }",
      "731:  gf_bs_write_u32(bs, a->type);",
      "732:  gf_bs_write_data(bs, a->reserved, 6);",
      "733:  gf_bs_write_u16(bs, a->dataReferenceIndex);",
      "734:  gf_bs_write_u32(bs, a->displayFlags);",
      "735:  gf_bs_write_u8(bs, a->horizontal_justification);",
      "736:  gf_bs_write_u8(bs, a->vertical_justification);",
      "737:  gpp_write_rgba(bs, a->back_color);",
      "738:  gpp_write_box(bs, &a->default_box);",
      "739:  gpp_write_style(bs, &a->default_style);",
      "",
      "[Added Lines]",
      "738:  if (qt && qt->textName) {",
      "739:   qt_fontname = qt->textName;",
      "740:   fount_count = 1;",
      "741:  } else if (ttxt && ttxt->font_table) {",
      "742:   fount_count = ttxt->font_table->entry_count;",
      "743:   for (j=0; j<fount_count; j++) {",
      "744:    size += 3;",
      "745:    if (ttxt->font_table->fonts[j].fontName)",
      "746:     size += (u32) strlen(ttxt->font_table->fonts[j].fontName);",
      "751:  gf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_TX3G);",
      "752:  gf_bs_write_data(bs, _a->reserved, 6);",
      "753:  gf_bs_write_u16(bs, _a->dataReferenceIndex);",
      "754:  gf_bs_write_u32(bs, _a->displayFlags);",
      "755:  if (qt) {",
      "756:   GF_StyleRecord sr;",
      "757:   memset(&sr, 0, sizeof(GF_StyleRecord));",
      "758:   gf_bs_write_u8(bs, qt->textJustification);",
      "759:   gf_bs_write_u8(bs, (u8) -1);",
      "760:   gpp_write_rgba(bs, rgb_48_to_32(qt->background_color) );",
      "761:   gpp_write_box(bs, &qt->default_box);",
      "762:   sr.text_color = rgb_48_to_32(qt->foreground_color);",
      "763:   sr.style_flags = qt->fontFace;",
      "764:   gpp_write_style(bs, &sr);",
      "765:  } else {",
      "766:   gf_bs_write_u8(bs, ttxt->horizontal_justification);",
      "767:   gf_bs_write_u8(bs, ttxt->vertical_justification);",
      "768:   gpp_write_rgba(bs, ttxt->back_color);",
      "769:   gpp_write_box(bs, &ttxt->default_box);",
      "770:   gpp_write_style(bs, &ttxt->default_style);",
      "771:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "745:  gf_bs_write_u16(bs, fount_count);",
      "746:  for (j=0; j<fount_count; j++) {",
      "748:    gf_bs_write_u16(bs, 0);",
      "749:    if (qt_fontname) {",
      "750:     u32 len = (u32) strlen(qt_fontname);",
      "",
      "[Removed Lines]",
      "747:   if (is_qt_text) {",
      "",
      "[Added Lines]",
      "779:   if (qt) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "754:     gf_bs_write_u8(bs, 0);",
      "755:    }",
      "756:   } else {",
      "760:     gf_bs_write_u8(bs, len);",
      "762:    } else {",
      "763:     gf_bs_write_u8(bs, 0);",
      "764:    }",
      "",
      "[Removed Lines]",
      "757:    gf_bs_write_u16(bs, a->font_table->fonts[j].fontID);",
      "758:    if (a->font_table->fonts[j].fontName) {",
      "759:     u32 len = (u32) strlen(a->font_table->fonts[j].fontName);",
      "761:     gf_bs_write_data(bs, a->font_table->fonts[j].fontName, len);",
      "",
      "[Added Lines]",
      "789:    gf_bs_write_u16(bs, ttxt->font_table->fonts[j].fontID);",
      "790:    if (ttxt->font_table->fonts[j].fontName) {",
      "791:     u32 len = (u32) strlen(ttxt->font_table->fonts[j].fontName);",
      "793:     gf_bs_write_data(bs, ttxt->font_table->fonts[j].fontName, len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd96f6797581528d2e82266604ed0582d83c9985",
      "candidate_info": {
        "commit_hash": "bd96f6797581528d2e82266604ed0582d83c9985",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/bd96f6797581528d2e82266604ed0582d83c9985",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c",
          "src/isomedia/hint_track.c",
          "src/isomedia/hinting.c",
          "src/isomedia/iff.c",
          "src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c",
          "src/isomedia/isom_store.c",
          "src/isomedia/isom_write.c",
          "src/isomedia/media.c",
          "src/isomedia/media_odf.c",
          "src/isomedia/meta.c",
          "src/isomedia/movie_fragments.c",
          "src/isomedia/sample_descs.c",
          "src/isomedia/stbl_write.c",
          "src/isomedia/track.c",
          "src/isomedia/ttml.c",
          "src/isomedia/tx3g.c"
        ],
        "message": "cleanup of alloc checks in isomedia lib",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c",
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c",
          "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c",
          "src/isomedia/hint_track.c||src/isomedia/hint_track.c",
          "src/isomedia/hinting.c||src/isomedia/hinting.c",
          "src/isomedia/iff.c||src/isomedia/iff.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c||src/isomedia/isom_read.c",
          "src/isomedia/isom_store.c||src/isomedia/isom_store.c",
          "src/isomedia/isom_write.c||src/isomedia/isom_write.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/media_odf.c||src/isomedia/media_odf.c",
          "src/isomedia/meta.c||src/isomedia/meta.c",
          "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c",
          "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c",
          "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/isomedia/ttml.c||src/isomedia/ttml.c",
          "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
            "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ],
          "candidate": [
            "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
            "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3672: GF_Err FlushCaptureMode(GF_ISOFile *movie);",
          "3673: GF_Err CanAccessMovie(GF_ISOFile *movie, u32 Mode);",
          "3674: GF_ISOFile *gf_isom_create_movie(const char *fileName, u32 OpenMode, const char *tmp_dir);",
          "3677: GF_Err WriteToFile(GF_ISOFile *movie);",
          "3678: GF_Err Track_SetStreamDescriptor(GF_TrackBox *trak, u32 StreamDescriptionIndex, u32 DataReferenceIndex, GF_ESD *esd, u32 *outStreamIndex);",
          "",
          "[Removed Lines]",
          "3675: void gf_isom_insert_moov(GF_ISOFile *file);",
          "",
          "[Added Lines]",
          "3675: GF_Err gf_isom_insert_moov(GF_ISOFile *file);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3787: Bool gf_isom_cenc_has_saiz_saio_traf(GF_TrackFragmentBox *traf, u32 scheme_type);",
          "3788: void gf_isom_cenc_set_saiz_saio(GF_SampleEncryptionBox *senc, GF_SampleTableBox *stbl, GF_TrackFragmentBox  *traf, u32 len);",
          "3789: #endif",
          "3792: void gf_isom_parse_trif_info(const char *data, u32 size, u32 *id, u32 *independent, Bool *full_picture, u32 *x, u32 *y, u32 *w, u32 *h);",
          "",
          "[Removed Lines]",
          "3790: void gf_isom_cenc_merge_saiz_saio(GF_SampleEncryptionBox *senc, GF_SampleTableBox *stbl, u64 offset, u32 len);",
          "",
          "[Added Lines]",
          "3790: GF_Err gf_isom_cenc_merge_saiz_saio(GF_SampleEncryptionBox *senc, GF_SampleTableBox *stbl, u64 offset, u32 len);",
          "",
          "---------------"
        ],
        "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c": [
          "File: src/isomedia/avc_ext.c -> src/isomedia/avc_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147:          || esd->ipiPtr || esd->qos || esd->RegDescriptor) {",
          "1149:   avc->descr = (GF_MPEG4ExtensionDescriptorsBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_M4DS);",
          "1150:   if (esd->RegDescriptor) {",
          "1151:    gf_list_add(avc->descr->descriptors, esd->RegDescriptor);",
          "1152:    esd->RegDescriptor = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1150:   if (!avc->descr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1185:  if (!avc->lhvc_config && (esd->decoderConfig->objectTypeIndication==GPAC_OTI_VIDEO_HEVC)) {",
          "1186:   if (!avc->hevc_config) avc->hevc_config = (GF_HEVCConfigurationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_HVCC);",
          "1187:   if (esd->decoderConfig->decoderSpecificInfo && esd->decoderConfig->decoderSpecificInfo->data) {",
          "1188:    if (avc->hevc_config->config) gf_odf_hevc_cfg_del(avc->hevc_config->config);",
          "1189:    avc->hevc_config->config = gf_odf_hevc_cfg_read(esd->decoderConfig->decoderSpecificInfo->data, esd->decoderConfig->decoderSpecificInfo->dataLength, GF_FALSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188:   if (!avc->hevc_config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1191:  }",
          "1192:  else if (!avc->svc_config && !avc->mvc_config && (esd->decoderConfig->objectTypeIndication==GPAC_OTI_VIDEO_AVC)) {",
          "1193:   if (!avc->avc_config) avc->avc_config = (GF_AVCConfigurationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_AVCC);",
          "1194:   if (esd->decoderConfig->decoderSpecificInfo && esd->decoderConfig->decoderSpecificInfo->data) {",
          "1195:    if (avc->avc_config->config) gf_odf_avc_cfg_del(avc->avc_config->config);",
          "1196:    avc->avc_config->config = gf_odf_avc_cfg_read(esd->decoderConfig->decoderSpecificInfo->data, esd->decoderConfig->decoderSpecificInfo->dataLength);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1196:   if (!avc->avc_config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1397:  entry = (GF_MPEGVisualSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_AVC1);",
          "1398:  if (!entry) return GF_OUT_OF_MEM;",
          "1399:  entry->avc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_AVCC);",
          "1400:  entry->avc_config->config = AVC_DuplicateConfig(cfg);",
          "1401:  entry->dataReferenceIndex = dataRefIndex;",
          "1402:  e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1403:  if (!entry->avc_config) return GF_OUT_OF_MEM;",
          "1405:  if (!entry->avc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1434:  case 0:",
          "1435:   if (!cfg) return GF_BAD_PARAM;",
          "1436:   if (!entry->avc_config) entry->avc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_AVCC);",
          "1437:   if (entry->avc_config->config) gf_odf_avc_cfg_del(entry->avc_config->config);",
          "1438:   entry->avc_config->config = AVC_DuplicateConfig(cfg);",
          "1439:   entry->type = GF_ISOM_BOX_TYPE_AVC1;",
          "1440:   break;",
          "1442:  case 1:",
          "1443:   if (!cfg) return GF_BAD_PARAM;",
          "1444:   if (!entry->svc_config) entry->svc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_SVCC);",
          "1445:   if (entry->svc_config->config) gf_odf_avc_cfg_del(entry->svc_config->config);",
          "1446:   entry->svc_config->config = AVC_DuplicateConfig(cfg);",
          "1447:   entry->type = GF_ISOM_BOX_TYPE_AVC1;",
          "1448:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1442:   if (!entry->avc_config) return GF_OUT_OF_MEM;",
          "1445:   if (!entry->avc_config->config) return GF_OUT_OF_MEM;",
          "1452:   if (!entry->svc_config) return GF_OUT_OF_MEM;",
          "1455:   if (!entry->svc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1454:    entry->avc_config = NULL;",
          "1455:   }",
          "1456:   if (!entry->svc_config) entry->svc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_SVCC);",
          "1457:   if (entry->svc_config->config) gf_odf_avc_cfg_del(entry->svc_config->config);",
          "1458:   entry->svc_config->config = AVC_DuplicateConfig(cfg);",
          "1459:   entry->type = GF_ISOM_BOX_TYPE_SVC1;",
          "1460:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1466:   if (!entry->svc_config) return GF_OUT_OF_MEM;",
          "1469:   if (!entry->svc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1495:  case 4:",
          "1496:   if (!cfg) return GF_BAD_PARAM;",
          "1497:   if (!entry->mvc_config) entry->mvc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_MVCC);",
          "1498:   if (entry->mvc_config->config) gf_odf_avc_cfg_del(entry->mvc_config->config);",
          "1499:   entry->mvc_config->config = AVC_DuplicateConfig(cfg);",
          "1500:   entry->type = GF_ISOM_BOX_TYPE_AVC1;",
          "1501:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509:   if (!entry->mvc_config) return GF_OUT_OF_MEM;",
          "1512:   if (!entry->mvc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1507:    entry->avc_config = NULL;",
          "1508:   }",
          "1509:   if (!entry->mvc_config) entry->mvc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_MVCC);",
          "1510:   if (entry->mvc_config->config) gf_odf_avc_cfg_del(entry->mvc_config->config);",
          "1511:   entry->mvc_config->config = AVC_DuplicateConfig(cfg);",
          "1512:   entry->type = GF_ISOM_BOX_TYPE_MVC1;",
          "1513:   break;",
          "1514:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523:   if (!entry->mvc_config) return GF_OUT_OF_MEM;",
          "1526:   if (!entry->mvc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1615:  }",
          "1617:  if (!entry->ipod_ext) entry->ipod_ext = (GF_UnknownUUIDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_UUID);",
          "1618:  memcpy(entry->ipod_ext->uuid, GF_ISOM_IPOD_EXT, sizeof(u8)*16);",
          "1619:  entry->ipod_ext->dataSize = 0;",
          "1620:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1633:  if (!entry->ipod_ext) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1648:   entry = (GF_MPEGVisualSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MVC1);",
          "1649:   if (!entry) return GF_OUT_OF_MEM;",
          "1650:   entry->mvc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_MVCC);",
          "1651:   entry->mvc_config->config = AVC_DuplicateConfig(cfg);",
          "1652:  } else {",
          "1653:   entry = (GF_MPEGVisualSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SVC1);",
          "1654:   if (!entry) return GF_OUT_OF_MEM;",
          "1655:   entry->svc_config = (GF_AVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_SVCC);",
          "1656:   entry->svc_config->config = AVC_DuplicateConfig(cfg);",
          "1657:  }",
          "1658:  entry->dataReferenceIndex = dataRefIndex;",
          "1659:  e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1667:   if (!entry->mvc_config) return GF_OUT_OF_MEM;",
          "1669:   if (!entry->mvc_config->config) return GF_OUT_OF_MEM;",
          "1674:   if (!entry->svc_config) return GF_OUT_OF_MEM;",
          "1676:   if (!entry->svc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1703:  entry = (GF_MPEGVisualSampleEntryBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_HVC1);",
          "1704:  if (!entry) return GF_OUT_OF_MEM;",
          "1705:  entry->hevc_config = (GF_HEVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_HVCC);",
          "1706:  entry->hevc_config->config = HEVC_DuplicateConfig(cfg);",
          "1707:  entry->dataReferenceIndex = dataRefIndex;",
          "1708:  e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1726:  if (!entry->hevc_config) return GF_OUT_OF_MEM;",
          "1728:  if (!entry->hevc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1742:  entry->vp_config = (GF_VPConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_VPCC);",
          "1743:  if (!entry->vp_config) return GF_OUT_OF_MEM;",
          "1744:  entry->vp_config->config = VP_DuplicateConfig(cfg);",
          "1745:  strncpy(entry->compressor_name, \"\\012VPC Coding\", sizeof(entry->compressor_name)-1);",
          "1746:  entry->dataReferenceIndex = dataRefIndex;",
          "1747:  e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:  if (!entry->vp_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1779:  entry->av1_config = (GF_AV1ConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_AV1C);",
          "1780:  if (!entry->av1_config) return GF_OUT_OF_MEM;",
          "1781:  entry->av1_config->config = AV1_DuplicateConfig(cfg);",
          "1782:  entry->dataReferenceIndex = dataRefIndex;",
          "1783:  e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1805:  if (!entry->av1_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1864:    entry->type = GF_ISOM_BOX_TYPE_HEV2;",
          "1865:  } else if (operand_type == GF_ISOM_HVCC_SET_TILE) {",
          "1866:   if (!entry->hevc_config) entry->hevc_config = (GF_HEVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_HVCC);",
          "1867:   if (entry->hevc_config->config) gf_odf_hevc_cfg_del(entry->hevc_config->config);",
          "1868:   entry->hevc_config->config = NULL;",
          "1869:   entry->type = GF_ISOM_BOX_TYPE_HVT1;",
          "1870:  } else if (operand_type < GF_ISOM_HVCC_SET_LHVC) {",
          "1872:    entry->hevc_config = (GF_HEVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_HVCC);",
          "1874:   if (cfg) {",
          "1875:    if (entry->hevc_config->config) gf_odf_hevc_cfg_del(entry->hevc_config->config);",
          "",
          "[Removed Lines]",
          "1871:   if ((operand_type != GF_ISOM_HVCC_SET_INBAND) && !entry->hevc_config)",
          "",
          "[Added Lines]",
          "1891:   if (!entry->hevc_config) return GF_OUT_OF_MEM;",
          "1896:   if ((operand_type != GF_ISOM_HVCC_SET_INBAND) && !entry->hevc_config) {",
          "1898:    if (!entry->hevc_config) return GF_OUT_OF_MEM;",
          "1899:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1913:     else entry->type =  (operand_type==GF_ISOM_HVCC_SET_LHVC_WITH_BASE) ? GF_ISOM_BOX_TYPE_HVC2 : GF_ISOM_BOX_TYPE_HVC1;",
          "1914:    } else {",
          "1915:     if (!entry->lhvc_config) entry->lhvc_config = (GF_HEVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_LHVC);",
          "1916:     if (entry->lhvc_config->config) gf_odf_hevc_cfg_del(entry->lhvc_config->config);",
          "1917:     entry->lhvc_config->config = HEVC_DuplicateConfig(cfg);",
          "1919:     if (operand_type==GF_ISOM_HVCC_SET_LHVC_WITH_BASE_BACKWARD) {",
          "1920:      if (entry->type==GF_ISOM_BOX_TYPE_HEV2) entry->type = GF_ISOM_BOX_TYPE_HEV1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1943:     if (!entry->lhvc_config) return GF_OUT_OF_MEM;",
          "1946:     if (!entry->lhvc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1934:    if (!cfg) return GF_BAD_PARAM;",
          "1936:    if (!entry->lhvc_config) entry->lhvc_config = (GF_HEVCConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_LHVC);",
          "1937:    if (entry->lhvc_config->config) gf_odf_hevc_cfg_del(entry->lhvc_config->config);",
          "1938:    entry->lhvc_config->config = HEVC_DuplicateConfig(cfg);",
          "1940:    if ((entry->type==GF_ISOM_BOX_TYPE_HEV1) || (entry->type==GF_ISOM_BOX_TYPE_HEV2)) entry->type = GF_ISOM_BOX_TYPE_LHE1;",
          "1941:    else entry->type = GF_ISOM_BOX_TYPE_LHV1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1966:    if (!entry->lhvc_config) return GF_OUT_OF_MEM;",
          "1969:    if (!entry->lhvc_config->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2003:  case GF_ISOM_BOX_TYPE_SVCC:",
          "2004:  case GF_ISOM_BOX_TYPE_MVCC:",
          "2005:   clone = gf_isom_box_new(box->type);",
          "2006:   ((GF_AVCConfigurationBox *)clone)->config = AVC_DuplicateConfig(((GF_AVCConfigurationBox *)box)->config);",
          "2007:   break;",
          "2008:  case GF_ISOM_BOX_TYPE_HVCC:",
          "2009:   clone = gf_isom_box_new(box->type);",
          "2010:   ((GF_HEVCConfigurationBox *)clone)->config = HEVC_DuplicateConfig(((GF_HEVCConfigurationBox *)box)->config);",
          "2011:   break;",
          "2012:  case GF_ISOM_BOX_TYPE_AV1C:",
          "2013:   clone = gf_isom_box_new(box->type);",
          "2014:   ((GF_AV1ConfigurationBox *)clone)->config = AV1_DuplicateConfig(((GF_AV1ConfigurationBox *)box)->config);",
          "2015:   break;",
          "2016:  default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037:   if (!clone) return NULL;",
          "2042:   if (!clone) return NULL;",
          "2047:   if (!clone) return NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2256: GF_Err btrt_Read(GF_Box *s, GF_BitStream *bs)",
          "2257: {",
          "2258:  GF_BitRateBox *ptr = (GF_BitRateBox *)s;",
          "2259:  ptr->bufferSizeDB = gf_bs_read_u32(bs);",
          "2260:  ptr->maxBitrate = gf_bs_read_u32(bs);",
          "2261:  ptr->avgBitrate = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2293:  ISOM_DECREASE_SIZE(ptr, 12)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2372:  if (ptr->config) gf_odf_avc_cfg_del(ptr->config);",
          "2373:  ptr->config = gf_odf_avc_cfg_new();",
          "2374:  ptr->config->configurationVersion = gf_bs_read_u8(bs);",
          "2375:  ptr->config->AVCProfileIndication = gf_bs_read_u8(bs);",
          "2376:  ptr->config->profile_compatibility = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2410:  ISOM_DECREASE_SIZE(ptr, 7) //7 includes the 2 counts of sps and pps",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2385:  gf_bs_read_int(bs, 3);",
          "2386:  count = gf_bs_read_int(bs, 5);",
          "2390:  for (i=0; i<count; i++) {",
          "2391:   GF_AVCConfigSlot *sl = (GF_AVCConfigSlot *) gf_malloc(sizeof(GF_AVCConfigSlot));",
          "2392:   sl->size = gf_bs_read_u16(bs);",
          "2394:    gf_free(sl);",
          "2395:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"AVCC: Not enough bits to parse. Aborting.\\n\"));",
          "2396:    return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "2388:  ptr->size -= 7; //including 2nd count",
          "2393:   if (!sl->size || gf_bs_available(bs) < sl->size) {",
          "",
          "[Added Lines]",
          "2428:   ISOM_DECREASE_SIZE(ptr, 2)",
          "2430:   if (!sl->size || (gf_bs_available(bs) < sl->size) || (ptr->size < sl->size) ) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2398:   sl->data = (char *)gf_malloc(sizeof(char) * sl->size);",
          "2399:   gf_bs_read_data(bs, sl->data, sl->size);",
          "2400:   gf_list_add(ptr->config->sequenceParameterSets, sl);",
          "2402:  }",
          "2404:  count = gf_bs_read_u8(bs);",
          "2405:  for (i=0; i<count; i++) {",
          "2406:   GF_AVCConfigSlot *sl = (GF_AVCConfigSlot *)gf_malloc(sizeof(GF_AVCConfigSlot));",
          "2407:   sl->size = gf_bs_read_u16(bs);",
          "2409:    gf_free(sl);",
          "2410:    GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"AVCC: Not enough bits to parse. Aborting.\\n\"));",
          "2411:    return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "2401:   ptr->size -= 2+sl->size;",
          "2408:   if (!sl->size || gf_bs_available(bs) < sl->size) {",
          "",
          "[Added Lines]",
          "2438:   ptr->size -= sl->size;",
          "2444:   ISOM_DECREASE_SIZE(ptr, 2)",
          "2446:   if (!sl->size || (gf_bs_available(bs) < sl->size) || (ptr->size<sl->size)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2413:   sl->data = (char *)gf_malloc(sizeof(char) * sl->size);",
          "2414:   gf_bs_read_data(bs, sl->data, sl->size);",
          "2415:   gf_list_add(ptr->config->pictureParameterSets, sl);",
          "2417:  }",
          "2419:  if (ptr->type==GF_ISOM_BOX_TYPE_AVCC) {",
          "",
          "[Removed Lines]",
          "2416:   ptr->size -= 2+sl->size;",
          "",
          "[Added Lines]",
          "2454:   ptr->size -= sl->size;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2437: #endif",
          "2438:     return GF_OK;",
          "2439:    }",
          "2440:    gf_bs_read_int(bs, 6);",
          "2441:    ptr->config->chroma_format = gf_bs_read_int(bs, 2);",
          "2442:    gf_bs_read_int(bs, 5);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2478:    ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2445:    ptr->config->chroma_bit_depth = 8 + gf_bs_read_int(bs, 3);",
          "2447:    count = gf_bs_read_int(bs, 8);",
          "2449:    if (count*2 > ptr->size) {",
          "2451:     GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"AVCC: invalid numOfSequenceParameterSetExt value. Skipping.\\n\"));",
          "",
          "[Removed Lines]",
          "2448:    ptr->size -= 4;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2455:     ptr->config->sequenceParameterSetExtensions = gf_list_new();",
          "2456:     for (i=0; i<count; i++) {",
          "2457:      GF_AVCConfigSlot *sl = (GF_AVCConfigSlot *)gf_malloc(sizeof(GF_AVCConfigSlot));",
          "2458:      sl->size = gf_bs_read_u16(bs);",
          "2460:       gf_free(sl);",
          "2461:       GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"AVCC: Not enough bits to parse. Aborting.\\n\"));",
          "2462:       return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "2459:      if (gf_bs_available(bs) < sl->size) {",
          "",
          "[Added Lines]",
          "2496:      ISOM_DECREASE_SIZE(ptr, 2)",
          "2498:      if ((gf_bs_available(bs) < sl->size) || (ptr->size<sl->size)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2464:      sl->data = (char *)gf_malloc(sizeof(char) * sl->size);",
          "2465:      gf_bs_read_data(bs, sl->data, sl->size);",
          "2466:      gf_list_add(ptr->config->sequenceParameterSetExtensions, sl);",
          "2468:     }",
          "2469:    }",
          "2470:   }",
          "",
          "[Removed Lines]",
          "2467:      ptr->size -= sl->size + 2;",
          "",
          "[Added Lines]",
          "2506:      ptr->size -= sl->size;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2583: GF_Err hvcc_Read(GF_Box *s, GF_BitStream *bs)",
          "2584: {",
          "2586:  GF_HEVCConfigurationBox *ptr = (GF_HEVCConfigurationBox *)s;",
          "2588:  if (ptr->config) gf_odf_hevc_cfg_del(ptr->config);",
          "2591:  ptr->config = gf_odf_hevc_cfg_read_bs(bs, (s->type == GF_ISOM_BOX_TYPE_HVCC) ? GF_FALSE : GF_TRUE);",
          "2596:  return ptr->config ? GF_OK : GF_ISOM_INVALID_FILE;",
          "2597: }",
          "",
          "[Removed Lines]",
          "2585:  u64 pos;",
          "2590:  pos = gf_bs_get_position(bs);",
          "2592:  pos = gf_bs_get_position(bs) - pos ;",
          "2593:  if (pos < ptr->size)",
          "2594:   ptr->size -= (u32) pos;",
          "",
          "[Added Lines]",
          "2624:  u64 consummed;",
          "2629:  consummed = gf_bs_get_position(bs);",
          "2631:  consummed = gf_bs_get_position(bs) - consummed ;",
          "2632:  ISOM_DECREASE_SIZE(ptr, (u32)consummed)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2859: GF_Err SmDm_Read(GF_Box *s, GF_BitStream *bs)",
          "2860: {",
          "2861:  GF_SMPTE2086MasteringDisplayMetadataBox *p = (GF_SMPTE2086MasteringDisplayMetadataBox *)s;",
          "2862:  p->primaryRChromaticity_x = gf_bs_read_u16(bs);",
          "2863:  p->primaryRChromaticity_y = gf_bs_read_u16(bs);",
          "2864:  p->primaryGChromaticity_x = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900:  ISOM_DECREASE_SIZE(p, 24)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2921: GF_Err CoLL_Read(GF_Box *s, GF_BitStream *bs)",
          "2922: {",
          "2923:  GF_VPContentLightLevelBox *p = (GF_VPContentLightLevelBox *)s;",
          "2924:  p->maxCLL = gf_bs_read_u16(bs);",
          "2925:  p->maxFALL = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2963:  ISOM_DECREASE_SIZE(p, 4)",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  if (ptr == NULL) return GF_BAD_PARAM;",
          "51:  memset(&ptr->cfg, 0, sizeof(GF_3GPConfig));",
          "53:  ptr->cfg.vendor = gf_bs_read_u32(bs);",
          "54:  ptr->cfg.decoder_version = gf_bs_read_u8(bs);",
          "56:  switch (ptr->type) {",
          "57:  case GF_ISOM_BOX_TYPE_D263:",
          "58:   ptr->cfg.H263_level = gf_bs_read_u8(bs);",
          "59:   ptr->cfg.H263_profile = gf_bs_read_u8(bs);",
          "60:   break;",
          "61:  case GF_ISOM_BOX_TYPE_DAMR:",
          "62:   ptr->cfg.AMR_mode_set = gf_bs_read_u16(bs);",
          "63:   ptr->cfg.AMR_mode_change_period = gf_bs_read_u8(bs);",
          "64:   ptr->cfg.frames_per_sample = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  ISOM_DECREASE_SIZE(ptr, 5)",
          "59:   ISOM_DECREASE_SIZE(ptr, 2)",
          "64:   ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  case GF_ISOM_BOX_TYPE_DEVC:",
          "67:  case GF_ISOM_BOX_TYPE_DQCP:",
          "68:  case GF_ISOM_BOX_TYPE_DSMV:",
          "69:   ptr->cfg.frames_per_sample = gf_bs_read_u8(bs);",
          "70:   break;",
          "71:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:   return GF_OK;",
          "158:  }",
          "159:  ptr->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord)*ptr->entry_count);",
          "160:  memset(ptr->fonts, 0, sizeof(GF_FontRecord)*ptr->entry_count);",
          "161:  for (i=0; i<ptr->entry_count; i++) {",
          "162:   u32 len;",
          "163:   ptr->fonts[i].fontID = gf_bs_read_u16(bs);",
          "164:   len = gf_bs_read_u8(bs);",
          "165:   if (len) {",
          "166:    ptr->fonts[i].fontName = (char *)gf_malloc(sizeof(char)*(len+1));",
          "167:    gf_bs_read_data(bs, ptr->fonts[i].fontName, len);",
          "168:    ptr->fonts[i].fontName[len] = 0;",
          "169:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  if (!ptr->fonts) return GF_OUT_OF_MEM;",
          "169:   ISOM_DECREASE_SIZE(ptr, 3);",
          "173:    ISOM_DECREASE_SIZE(ptr, len);",
          "175:    if (!ptr->fonts[i].fontName) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299:  GF_Err e;",
          "300:  GF_Tx3gSampleEntryBox *ptr = (GF_Tx3gSampleEntryBox*)s;",
          "304:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "305:  if (e) return e;",
          "",
          "[Removed Lines]",
          "302:  if (ptr->size < 18 + GPP_BOX_SIZE + GPP_STYLE_SIZE) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "311:  ISOM_DECREASE_SIZE(ptr, (18 + GPP_BOX_SIZE + GPP_STYLE_SIZE) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:  gpp_read_box(bs, &ptr->default_box);",
          "312:  gpp_read_style(bs, &ptr->default_style);",
          "316:  return gf_isom_box_array_read(s, bs, tx3g_AddBox);",
          "317: }",
          "",
          "[Removed Lines]",
          "314:  ISOM_DECREASE_SIZE(ptr, (18 + GPP_BOX_SIZE + GPP_STYLE_SIZE) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "323:  u16 pSize;",
          "324:  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;",
          "326:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "327:  if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:  ISOM_DECREASE_SIZE(ptr, 51);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "342:  if (!ptr->size)",
          "343:   return GF_OK;",
          "346:  ISOM_DECREASE_SIZE(ptr, 1);",
          "348:  if (ptr->size < pSize) {",
          "349:   u32 s = pSize;",
          "350:   size_t i = 0;",
          "351:   GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] text box doesn't use a Pascal string: trying to decode anyway.\\n\"));",
          "352:   ptr->textName = (char*)gf_malloc((size_t)ptr->size + 1 + 1);",
          "353:   do {",
          "354:    char c = (char)s;",
          "355:    if (c == '\\0') {",
          "",
          "[Removed Lines]",
          "339:  ISOM_DECREASE_SIZE(ptr, 51);",
          "",
          "[Added Lines]",
          "362:   if (!ptr->textName) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "375:  }",
          "376:  if (pSize) {",
          "377:   ptr->textName = (char*) gf_malloc(pSize+1 * sizeof(char));",
          "378:   if (gf_bs_read_data(bs, ptr->textName, pSize) != pSize) {",
          "379:    gf_free(ptr->textName);",
          "380:    ptr->textName = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:   if (!ptr->textName) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "508: {",
          "509:  u32 i;",
          "510:  GF_TextStyleBox*ptr = (GF_TextStyleBox*)s;",
          "511:  ptr->entry_count = gf_bs_read_u16(bs);",
          "512:  if (ptr->entry_count) {",
          "513:   ptr->styles = (GF_StyleRecord*)gf_malloc(sizeof(GF_StyleRecord)*ptr->entry_count);",
          "514:   for (i=0; i<ptr->entry_count; i++) {",
          "515:    gpp_read_style(bs, &ptr->styles[i]);",
          "516:   }",
          "517:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:  ISOM_DECREASE_SIZE(ptr, 2);",
          "527:  if (ptr->size<ptr->entry_count * GPP_STYLE_SIZE)",
          "528:   return GF_ISOM_INVALID_FILE;",
          "532:   if (!ptr->styles) return GF_OUT_OF_MEM;",
          "534:    ISOM_DECREASE_SIZE(ptr, GPP_STYLE_SIZE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "556: GF_Err hlit_Read(GF_Box *s, GF_BitStream *bs)",
          "557: {",
          "558:  GF_TextHighlightBox *ptr = (GF_TextHighlightBox *)s;",
          "559:  ptr->startcharoffset = gf_bs_read_u16(bs);",
          "560:  ptr->endcharoffset = gf_bs_read_u16(bs);",
          "561:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "595: GF_Err hclr_Read(GF_Box *s, GF_BitStream *bs)",
          "596: {",
          "597:  GF_TextHighlightColorBox*ptr = (GF_TextHighlightColorBox*)s;",
          "598:  ptr->hil_color = gpp_read_rgba(bs);",
          "599:  return GF_OK;",
          "600: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "635: {",
          "636:  GF_TextKaraokeBox*ptr = (GF_TextKaraokeBox*)s;",
          "638:  ptr->highlight_starttime = gf_bs_read_u32(bs);",
          "639:  ptr->nb_entries = gf_bs_read_u16(bs);",
          "640:  if (ptr->nb_entries) {",
          "641:   u32 i;",
          "642:   ptr->records = (KaraokeRecord*)gf_malloc(sizeof(KaraokeRecord)*ptr->nb_entries);",
          "643:   for (i=0; i<ptr->nb_entries; i++) {",
          "644:    ptr->records[i].highlight_endtime = gf_bs_read_u32(bs);",
          "645:    ptr->records[i].start_charoffset = gf_bs_read_u16(bs);",
          "646:    ptr->records[i].end_charoffset = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:  ISOM_DECREASE_SIZE(ptr, 6)",
          "663:  if (ptr->size < ptr->nb_entries * 8)",
          "664:   return GF_ISOM_INVALID_FILE;",
          "669:   if (!ptr->records) return GF_OUT_OF_MEM;",
          "671:    ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "691: GF_Err dlay_Read(GF_Box *s, GF_BitStream *bs)",
          "692: {",
          "693:  GF_TextScrollDelayBox*ptr = (GF_TextScrollDelayBox*)s;",
          "694:  ptr->scroll_delay = gf_bs_read_u32(bs);",
          "695:  return GF_OK;",
          "696: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "732: {",
          "733:  u32 len;",
          "734:  GF_TextHyperTextBox*ptr = (GF_TextHyperTextBox*)s;",
          "735:  ptr->startcharoffset = gf_bs_read_u16(bs);",
          "736:  ptr->endcharoffset = gf_bs_read_u16(bs);",
          "737:  len = gf_bs_read_u8(bs);",
          "738:  if (len) {",
          "739:   ptr->URL = (char *) gf_malloc(sizeof(char) * (len+1));",
          "740:   gf_bs_read_data(bs, ptr->URL, len);",
          "741:   ptr->URL[len] = 0;",
          "742:  }",
          "743:  len = gf_bs_read_u8(bs);",
          "744:  if (len) {",
          "745:   ptr->URL_hint = (char *) gf_malloc(sizeof(char) * (len+1));",
          "746:   gf_bs_read_data(bs, ptr->URL_hint, len);",
          "747:   ptr->URL_hint[len]= 0;",
          "748:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:  ISOM_DECREASE_SIZE(ptr, 6) //including 2 length fields",
          "769:   ISOM_DECREASE_SIZE(ptr, len)",
          "771:   if (!ptr->URL) return GF_OUT_OF_MEM;",
          "777:   ISOM_DECREASE_SIZE(ptr, len)",
          "779:   if (!ptr->URL_hint) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "803: GF_Err tbox_Read(GF_Box *s, GF_BitStream *bs)",
          "804: {",
          "805:  GF_TextBoxBox*ptr = (GF_TextBoxBox*)s;",
          "806:  gpp_read_box(bs, &ptr->box);",
          "807:  return GF_OK;",
          "808: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:  ISOM_DECREASE_SIZE(ptr, GPP_BOX_SIZE)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "841: GF_Err blnk_Read(GF_Box *s, GF_BitStream *bs)",
          "842: {",
          "843:  GF_TextBlinkBox*ptr = (GF_TextBlinkBox*)s;",
          "844:  ptr->startcharoffset = gf_bs_read_u16(bs);",
          "845:  ptr->endcharoffset = gf_bs_read_u16(bs);",
          "846:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "880: GF_Err twrp_Read(GF_Box *s, GF_BitStream *bs)",
          "881: {",
          "882:  GF_TextWrapBox*ptr = (GF_TextWrapBox*)s;",
          "883:  ptr->wrap_flag = gf_bs_read_u8(bs);",
          "884:  return GF_OK;",
          "885: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:  ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "916:  u32 i;",
          "917:  GF_TrackSelectionBox *ptr = (GF_TrackSelectionBox *) s;",
          "920:  ISOM_DECREASE_SIZE(ptr, 4);",
          "922:  if (ptr->size % 4) return GF_ISOM_INVALID_FILE;",
          "923:  ptr->attributeListCount = (u32)ptr->size/4;",
          "",
          "[Removed Lines]",
          "919:  ptr->switchGroup = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "957:  ptr->switchGroup = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "985:  u32 i;",
          "986:  GF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;",
          "988:  p->profile = gf_bs_read_u8(bs);",
          "989:  p->level = gf_bs_read_u8(bs);",
          "990:  p->pathComponents = gf_bs_read_int(bs, 4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:  ISOM_DECREASE_SIZE(p, 3);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "992:  p->streamType = gf_bs_read_int(bs, 1);",
          "993:  p->containsRedundant = gf_bs_read_int(bs, 2);",
          "997:  i=0;",
          "998:  str[0]=0;",
          "999:  while (i < ARRAY_LENGTH(str)) {",
          "",
          "[Removed Lines]",
          "995:  ISOM_DECREASE_SIZE(p, 3);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_adobe.c||src/isomedia/box_code_adobe.c": [
          "File: src/isomedia/box_code_adobe.c -> src/isomedia/box_code_adobe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  char *tmp_str;",
          "81:  GF_Err e;",
          "83:  ptr->bootstrapinfo_version = gf_bs_read_u32(bs);",
          "84:  ptr->profile = gf_bs_read_int(bs, 2);",
          "85:  ptr->live = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:  ISOM_DECREASE_SIZE(ptr, 25)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:  if (ptr->size<=8) return GF_ISOM_INVALID_FILE;",
          "94:  strsize = tmp_strsize=(u32)ptr->size-8;",
          "95:  tmp_str = gf_malloc(sizeof(char)*tmp_strsize);",
          "97:  while (tmp_strsize) {",
          "98:   tmp_str[i] = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:  if (!tmp_str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:  unsigned int i;",
          "332:  GF_AdobeFragRandomAccessBox *ptr = (GF_AdobeFragRandomAccessBox *)s;",
          "334:  ptr->long_ids = gf_bs_read_int(bs, 1);",
          "335:  ptr->long_offsets = gf_bs_read_int(bs, 1);",
          "336:  ptr->global_entries = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:  ISOM_DECREASE_SIZE(ptr, 9)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:  ptr->time_scale = gf_bs_read_u32(bs);",
          "340:  ptr->entry_count = gf_bs_read_u32(bs);",
          "341:  for (i=0; i<ptr->entry_count; i++) {",
          "342:   GF_AfraEntry *ae = gf_malloc(sizeof(GF_AfraEntry));",
          "344:   ae->time = gf_bs_read_u64(bs);",
          "346:    ae->offset = gf_bs_read_u64(bs);",
          "348:    ae->offset = gf_bs_read_u32(bs);",
          "350:   gf_list_insert(ptr->local_access_entries, ae, i);",
          "351:  }",
          "353:  if (ptr->global_entries) {",
          "354:   ptr->global_entry_count = gf_bs_read_u32(bs);",
          "355:   for (i=0; i<ptr->global_entry_count; i++) {",
          "356:    GF_GlobalAfraEntry *ae = gf_malloc(sizeof(GF_GlobalAfraEntry));",
          "358:    ae->time = gf_bs_read_u64(bs);",
          "359:    if (ptr->long_ids) {",
          "360:     ae->segment = gf_bs_read_u32(bs);",
          "361:     ae->fragment = gf_bs_read_u32(bs);",
          "362:    } else {",
          "363:     ae->segment = gf_bs_read_u16(bs);",
          "364:     ae->fragment = gf_bs_read_u16(bs);",
          "365:    }",
          "366:    if (ptr->long_offsets) {",
          "367:     ae->afra_offset = gf_bs_read_u64(bs);",
          "368:     ae->offset_from_afra = gf_bs_read_u64(bs);",
          "369:    } else {",
          "370:     ae->afra_offset = gf_bs_read_u32(bs);",
          "371:     ae->offset_from_afra = gf_bs_read_u32(bs);",
          "372:    }",
          "",
          "[Removed Lines]",
          "345:   if (ptr->long_offsets)",
          "347:   else",
          "",
          "[Added Lines]",
          "344:  if (ptr->size < ptr->entry_count * (ptr->long_offsets ? 16 : 12))",
          "345:   return GF_ISOM_INVALID_FILE;",
          "349:   if (!ae) return GF_OUT_OF_MEM;",
          "351:   ISOM_DECREASE_SIZE(ptr, 8)",
          "353:   if (ptr->long_offsets) {",
          "354:    ISOM_DECREASE_SIZE(ptr, 8)",
          "356:   } else {",
          "357:    ISOM_DECREASE_SIZE(ptr, 4)",
          "359:   }",
          "365:   ISOM_DECREASE_SIZE(ptr, 4)",
          "369:    if (!ae) return GF_OUT_OF_MEM;",
          "370:    ISOM_DECREASE_SIZE(ptr, 8)",
          "373:     ISOM_DECREASE_SIZE(ptr, 8)",
          "377:     ISOM_DECREASE_SIZE(ptr, 4)",
          "382:     ISOM_DECREASE_SIZE(ptr, 16)",
          "386:     ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "477:  unsigned int i;",
          "478:  GF_AdobeSegmentRunTableBox *ptr = (GF_AdobeSegmentRunTableBox *)s;",
          "480:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "481:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "482:   int j=0;",
          "484:   char *tmp_str = (char*) gf_malloc(tmp_strsize);",
          "485:   while (tmp_strsize) {",
          "486:    tmp_str[j] = gf_bs_read_u8(bs);",
          "487:    tmp_strsize--;",
          "",
          "[Removed Lines]",
          "483:   u32 tmp_strsize=(u32)ptr->size-8;",
          "",
          "[Added Lines]",
          "497:  ISOM_DECREASE_SIZE(ptr, 1)",
          "499:  if (ptr->size < ptr->quality_entry_count)",
          "500:   return GF_ISOM_INVALID_FILE;",
          "504:   u32 tmp_strsize=(u32)ptr->size;",
          "506:   if (!tmp_str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "489:     break;",
          "490:    j++;",
          "491:   }",
          "492:   gf_list_insert(ptr->quality_segment_url_modifiers, tmp_str, i);",
          "493:  }",
          "495:  ptr->segment_run_entry_count = gf_bs_read_u32(bs);",
          "496:  for (i=0; i<ptr->segment_run_entry_count; i++) {",
          "497:   GF_AdobeSegmentRunEntry *sre = gf_malloc(sizeof(GF_AdobeSegmentRunEntry));",
          "498:   sre->first_segment = gf_bs_read_u32(bs);",
          "499:   sre->fragment_per_segment = gf_bs_read_u32(bs);",
          "500:   gf_list_insert(ptr->segment_run_entry_table, sre, i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:   ISOM_DECREASE_SIZE(ptr, j)",
          "518:  ISOM_DECREASE_SIZE(ptr, 4)",
          "520:  if (ptr->size < ptr->segment_run_entry_count*8)",
          "521:   return GF_ISOM_INVALID_FILE;",
          "525:   if (!sre) return GF_OUT_OF_MEM;",
          "526:   ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "581:  unsigned int i;",
          "582:  GF_AdobeFragmentRunTableBox *ptr = (GF_AdobeFragmentRunTableBox *)s;",
          "584:  ptr->timescale = gf_bs_read_u32(bs);",
          "586:  ptr->quality_entry_count = gf_bs_read_u8(bs);",
          "587:  for (i=0; i<ptr->quality_entry_count; i++) {",
          "588:   int j=0;",
          "589:   u32 tmp_strsize=(u32)ptr->size-8;",
          "590:   char *tmp_str = (char*) gf_malloc(tmp_strsize);",
          "591:   while (tmp_strsize) {",
          "592:    tmp_str[j] = gf_bs_read_u8(bs);",
          "593:    tmp_strsize--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:  ISOM_DECREASE_SIZE(ptr, 5)",
          "617:  if (ptr->size < ptr->quality_entry_count)",
          "618:   return GF_ISOM_INVALID_FILE;",
          "624:   if (!tmp_str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "595:     break;",
          "596:    j++;",
          "597:   }",
          "598:   gf_list_insert(ptr->quality_segment_url_modifiers, tmp_str, i);",
          "599:  }",
          "601:  ptr->fragment_run_entry_count = gf_bs_read_u32(bs);",
          "602:  for (i=0; i<ptr->fragment_run_entry_count; i++) {",
          "603:   GF_AdobeFragmentRunEntry *fre = gf_malloc(sizeof(GF_AdobeFragmentRunEntry));",
          "604:   fre->first_fragment = gf_bs_read_u32(bs);",
          "605:   fre->first_fragment_timestamp = gf_bs_read_u64(bs);",
          "606:   fre->fragment_duration = gf_bs_read_u32(bs);",
          "608:    fre->discontinuity_indicator = gf_bs_read_u8(bs);",
          "609:   gf_list_insert(ptr->fragment_run_entry_table, fre, i);",
          "610:  }",
          "",
          "[Removed Lines]",
          "607:   if (!fre->fragment_duration)",
          "",
          "[Added Lines]",
          "632:   ISOM_DECREASE_SIZE(ptr, j)",
          "637:  if (ptr->size < ptr->fragment_run_entry_count*16)",
          "638:   return GF_ISOM_INVALID_FILE;",
          "641:   if (!fre) return GF_ISOM_INVALID_FILE;",
          "642:   ISOM_DECREASE_SIZE(ptr, 16)",
          "646:   if (!fre->fragment_duration) {",
          "647:    ISOM_DECREASE_SIZE(ptr, 1)",
          "649:   }",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_apple.c||src/isomedia/box_code_apple.c": [
          "File: src/isomedia/box_code_apple.c -> src/isomedia/box_code_apple.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   ptr->data->dataSize = gf_bs_read_u16(bs);",
          "146:   gf_bs_read_u16(bs);",
          "147:   ptr->data->data = (char *) gf_malloc(sizeof(char)*(ptr->data->dataSize + 1));",
          "148:   gf_bs_read_data(bs, ptr->data->data, ptr->data->dataSize);",
          "149:   ptr->data->data[ptr->data->dataSize] = 0;",
          "150:   ISOM_DECREASE_SIZE(ptr, ptr->data->dataSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:   if (!ptr->data->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220: {",
          "221:  GF_DataBox *ptr = (GF_DataBox *)s;",
          "224:  ISOM_DECREASE_SIZE(ptr, 4);",
          "226:  if (ptr->size) {",
          "227:   ptr->dataSize = (u32) ptr->size;",
          "228:   ptr->data = (char*)gf_malloc(ptr->dataSize * sizeof(ptr->data[0]) + 1);",
          "230:   ptr->data[ptr->dataSize] = 0;",
          "231:   gf_bs_read_data(bs, ptr->data, ptr->dataSize);",
          "232:  }",
          "",
          "[Removed Lines]",
          "223:  ptr->reserved = gf_bs_read_int(bs, 32);",
          "229:   if (ptr->data == NULL) return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "226:  ptr->reserved = gf_bs_read_u32(bs);",
          "231:   if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:   len = (u32) ptr->size;",
          "607:  if (len) {",
          "608:   ptr->font = gf_malloc(len+1);",
          "609:   gf_bs_read_data(bs, ptr->font, len);",
          "610:   ptr->size -= len;",
          "611:   ptr->font[len]=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:   if (!ptr->font) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:  ptr->bitmap = gf_bs_read_u32(bs);",
          "816:  ptr->num_audio_description = gf_bs_read_u32(bs);",
          "818:  ptr->audio_descs = gf_malloc(sizeof(GF_AudioChannelDescription) * ptr->num_audio_description);",
          "821:  for (i=0; i<ptr->num_audio_description; i++) {",
          "822:   GF_AudioChannelDescription *adesc = &ptr->audio_descs[i];",
          "823:   ISOM_DECREASE_SIZE(s, 20);",
          "",
          "[Removed Lines]",
          "819:  if (!ptr->audio_descs)",
          "820:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "821:  if (ptr->size < ptr->num_audio_description*20)",
          "822:   return GF_ISOM_INVALID_FILE;",
          "825:  if (!ptr->audio_descs) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:  u32 nb_chaps, len, i, count;",
          "134:  GF_ChapterListBox *ptr = (GF_ChapterListBox *)s;",
          "137:  gf_bs_read_u32(bs);",
          "138:  nb_chaps = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  ISOM_DECREASE_SIZE(ptr, 5)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  while (nb_chaps) {",
          "142:   GF_SAFEALLOC(ce, GF_ChapterEntry);",
          "143:   if (!ce) return GF_OUT_OF_MEM;",
          "144:   ce->start_time = gf_bs_read_u64(bs);",
          "145:   len = gf_bs_read_u8(bs);",
          "146:   if (len) {",
          "147:    ce->name = (char *)gf_malloc(sizeof(char)*(len+1));",
          "148:    gf_bs_read_data(bs, ce->name, len);",
          "149:    ce->name[len] = 0;",
          "150:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:   ISOM_DECREASE_SIZE(ptr, 9)",
          "148:   if (ptr->size<len) return GF_ISOM_INVALID_FILE;",
          "151:    if (!ce->name) return GF_OUT_OF_MEM;",
          "152:    ISOM_DECREASE_SIZE(ptr, len)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218: {",
          "219:  GF_CopyrightBox *ptr = (GF_CopyrightBox *)s;",
          "221:  gf_bs_read_int(bs, 1);",
          "223:  ptr->packedLanguageCode[0] = gf_bs_read_int(bs, 5);",
          "224:  ptr->packedLanguageCode[1] = gf_bs_read_int(bs, 5);",
          "225:  ptr->packedLanguageCode[2] = gf_bs_read_int(bs, 5);",
          "229:  if (ptr->packedLanguageCode[0] || ptr->packedLanguageCode[1] || ptr->packedLanguageCode[2]) {",
          "",
          "[Removed Lines]",
          "226:  ISOM_DECREASE_SIZE(ptr, 2);",
          "",
          "[Added Lines]",
          "226:  ISOM_DECREASE_SIZE(ptr, 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:   char *data;",
          "308:   u32 schemeURIlen;",
          "309:   data = (char*)gf_malloc(bytesToRead * sizeof(char));",
          "311:   gf_bs_read_data(bs, data, bytesToRead);",
          "313:   if (data[bytesToRead-1]) {",
          "319:    bytesToRead++;",
          "320:   }",
          "321:   ptr->schemeURI = gf_strdup(data);",
          "322:   schemeURIlen = (u32) strlen(data);",
          "323:   if (bytesToRead > schemeURIlen+1) {",
          "325:    char *data_value = data + schemeURIlen +1;",
          "326:    ptr->value = gf_strdup(data_value);",
          "327:   }",
          "328:   gf_free(data);",
          "329:  }",
          "",
          "[Removed Lines]",
          "310:   if (data == NULL) return GF_OUT_OF_MEM;",
          "314:    char *str = (char*)gf_malloc((u32) bytesToRead + 1);",
          "315:    memcpy(str, data, (u32) bytesToRead);",
          "316:    str[ptr->size] = 0;",
          "317:    gf_free(data);",
          "318:    data = str;",
          "",
          "[Added Lines]",
          "315:   if (!data) return GF_OUT_OF_MEM;",
          "319:    data = (char*)gf_realloc(data, sizeof(char)*(bytesToRead + 1));",
          "320:    if (!data) return GF_OUT_OF_MEM;",
          "321:    data[bytesToRead] = 0;",
          "325:   if (!ptr->schemeURI) return GF_OUT_OF_MEM;",
          "331:    if (!ptr->value) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:  u32 sampleCount;",
          "381:  GF_CompositionOffsetBox *ptr = (GF_CompositionOffsetBox *)s;",
          "384:  ISOM_DECREASE_SIZE(ptr, 4);",
          "386:  if (ptr->nb_entries > ptr->size / 8) {",
          "387:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in ctts\\n\", ptr->nb_entries));",
          "",
          "[Removed Lines]",
          "383:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "389:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:  if (!ptr->entries) return GF_OUT_OF_MEM;",
          "394:  sampleCount = 0;",
          "395:  for (i=0; i<ptr->nb_entries; i++) {",
          "396:   ptr->entries[i].sampleCount = gf_bs_read_u32(bs);",
          "397:   if (ptr->version)",
          "398:    ptr->entries[i].decodingOffset = gf_bs_read_int(bs, 32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458: {",
          "459:  GF_CompositionToDecodeBox *ptr = (GF_CompositionToDecodeBox *)s;",
          "461:  ptr->compositionToDTSShift = gf_bs_read_int(bs, 32);",
          "462:  ptr->leastDecodeToDisplayDelta = gf_bs_read_int(bs, 32);",
          "463:  ptr->greatestDecodeToDisplayDelta = gf_bs_read_int(bs, 32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467:  ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "994:  GF_DataReferenceBox *ptr = (GF_DataReferenceBox *)s;",
          "996:  if (ptr == NULL) return GF_BAD_PARAM;",
          "998:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1000:  return gf_isom_box_array_read(s, bs, dref_AddDataEntry);",
          "1001: }",
          "",
          "[Removed Lines]",
          "997:  gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "1005:  gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1128:  GF_EdtsEntry *p;",
          "1129:  GF_EditListBox *ptr = (GF_EditListBox *)s;",
          "1132:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1134:  if (ptr->version == 1) {",
          "1135:   if (nb_entries > ptr->size / 20) {",
          "",
          "[Removed Lines]",
          "1131:  nb_entries = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "1138:  nb_entries = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1148:   p = (GF_EdtsEntry *) gf_malloc(sizeof(GF_EdtsEntry));",
          "1149:   if (!p) return GF_OUT_OF_MEM;",
          "1150:   if (ptr->version == 1) {",
          "1151:    p->segmentDuration = gf_bs_read_u64(bs);",
          "1152:    p->mediaTime = (s64) gf_bs_read_u64(bs);",
          "1153:   } else {",
          "1154:    p->segmentDuration = gf_bs_read_u32(bs);",
          "1155:    tr = gf_bs_read_u32(bs);",
          "1156:    p->mediaTime = (s64) tr;",
          "1157:   }",
          "1158:   p->mediaRate = gf_bs_read_u16(bs);",
          "1159:   gf_bs_read_u16(bs);",
          "1160:   gf_list_add(ptr->entryList, p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1157:    ISOM_DECREASE_SIZE(ptr, 16);",
          "1161:    ISOM_DECREASE_SIZE(ptr, 8);",
          "1166:   ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1339:  if (bytesToRead) {",
          "1340:   ptr->data = (char*)gf_malloc(bytesToRead * sizeof(char));",
          "1341:   gf_bs_read_data(bs, ptr->data, bytesToRead);",
          "1342:   ptr->dataSize = bytesToRead;",
          "1343:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1350:   if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1406:  u32 i;",
          "1407:  GF_FileTypeBox *ptr = (GF_FileTypeBox *)s;",
          "1413:  ptr->majorBrand = gf_bs_read_u32(bs);",
          "1414:  ptr->minorVersion = gf_bs_read_u32(bs);",
          "1417:  ptr->altCount = ( (u32) (ptr->size)) / 4;",
          "1418:  if (!ptr->altCount) return GF_OK;",
          "1421:  ptr->altBrand = (u32*)gf_malloc(sizeof(u32)*ptr->altCount);",
          "1422:  for (i = 0; i<ptr->altCount; i++) {",
          "1423:   ptr->altBrand[i] = gf_bs_read_u32(bs);",
          "1424:  }",
          "",
          "[Removed Lines]",
          "1409:  if (ptr->size < 8) {",
          "1410:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Found ftyp with size < 8, likely broken!\\n\"));",
          "1411:   return GF_BAD_PARAM;",
          "1412:  }",
          "1415:  ISOM_DECREASE_SIZE(ptr, 8);",
          "1419:  if (ptr->altCount * 4 != (u32) (ptr->size)) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "1419:  ISOM_DECREASE_SIZE(ptr, 8);",
          "1423:  if (ptr->size % 4) return GF_ISOM_INVALID_FILE;",
          "1428:  if (!ptr->altBrand) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1624: {",
          "1625:  GF_HandlerBox *ptr = (GF_HandlerBox *)s;",
          "1627:  ptr->reserved1 = gf_bs_read_u32(bs);",
          "1628:  ptr->handlerType = gf_bs_read_u32(bs);",
          "1629:  gf_bs_read_data(bs, (char*)ptr->reserved2, 12);",
          "1633:  if (ptr->size) {",
          "1634:   ptr->nameUTF8 = (char*)gf_malloc((u32) ptr->size);",
          "1636:   gf_bs_read_data(bs, ptr->nameUTF8, (u32) ptr->size);",
          "",
          "[Removed Lines]",
          "1631:  ISOM_DECREASE_SIZE(ptr, 20);",
          "1635:   if (ptr->nameUTF8 == NULL) return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "1635:  ISOM_DECREASE_SIZE(ptr, 20);",
          "1642:   if (!ptr->nameUTF8) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1759: {",
          "1760:  GF_HintMediaHeaderBox *ptr = (GF_HintMediaHeaderBox *)s;",
          "1762:  ptr->maxPDUSize = gf_bs_read_u16(bs);",
          "1763:  ptr->avgPDUSize = gf_bs_read_u16(bs);",
          "1764:  ptr->maxBitrate = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1769:  ISOM_DECREASE_SIZE(ptr, 16);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1970: GF_Err trpy_Read(GF_Box *s, GF_BitStream *bs)",
          "1971: {",
          "1972:  GF_TRPYBox *ptr = (GF_TRPYBox *)s;",
          "1973:  ptr->nbBytes = gf_bs_read_u64(bs);",
          "1974:  return GF_OK;",
          "1975: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1981:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2009: GF_Err totl_Read(GF_Box *s, GF_BitStream *bs)",
          "2010: {",
          "2011:  GF_TOTLBox *ptr = (GF_TOTLBox *)s;",
          "2012:  ptr->nbBytes = gf_bs_read_u32(bs);",
          "2013:  return GF_OK;",
          "2014: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2021:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2049: GF_Err nump_Read(GF_Box *s, GF_BitStream *bs)",
          "2050: {",
          "2051:  GF_NUMPBox *ptr = (GF_NUMPBox *)s;",
          "2052:  ptr->nbPackets = gf_bs_read_u64(bs);",
          "2053:  return GF_OK;",
          "2054: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2062:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2088: GF_Err npck_Read(GF_Box *s, GF_BitStream *bs)",
          "2089: {",
          "2090:  GF_NPCKBox *ptr = (GF_NPCKBox *)s;",
          "2091:  ptr->nbPackets = gf_bs_read_u32(bs);",
          "2092:  return GF_OK;",
          "2093: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2102:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2127: {",
          "2128:  GF_NTYLBox *ptr = (GF_NTYLBox *)s;",
          "2129:  if (ptr == NULL) return GF_BAD_PARAM;",
          "2130:  ptr->nbBytes = gf_bs_read_u64(bs);",
          "2131:  return GF_OK;",
          "2132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2142:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2164: GF_Err tpay_Read(GF_Box *s, GF_BitStream *bs)",
          "2165: {",
          "2166:  GF_TPAYBox *ptr = (GF_TPAYBox *)s;",
          "2167:  ptr->nbBytes = gf_bs_read_u32(bs);",
          "2168:  return GF_OK;",
          "2169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2180:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2203: {",
          "2204:  GF_MAXRBox *ptr = (GF_MAXRBox *)s;",
          "2205:  if (ptr == NULL) return GF_BAD_PARAM;",
          "2206:  ptr->granularity = gf_bs_read_u32(bs);",
          "2207:  ptr->maxDataRate = gf_bs_read_u32(bs);",
          "2208:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2220:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2243: GF_Err dmed_Read(GF_Box *s, GF_BitStream *bs)",
          "2244: {",
          "2245:  GF_DMEDBox *ptr = (GF_DMEDBox *)s;",
          "2246:  ptr->nbBytes = gf_bs_read_u64(bs);",
          "2247:  return GF_OK;",
          "2248: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2261:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2280: GF_Err dimm_Read(GF_Box *s, GF_BitStream *bs)",
          "2281: {",
          "2282:  GF_DIMMBox *ptr = (GF_DIMMBox *)s;",
          "2283:  ptr->nbBytes = gf_bs_read_u64(bs);",
          "2284:  return GF_OK;",
          "2285: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2299:  ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2317: GF_Err drep_Read(GF_Box *s, GF_BitStream *bs)",
          "2318: {",
          "2319:  GF_DREPBox *ptr = (GF_DREPBox *)s;",
          "2320:  ptr->nbBytes = gf_bs_read_u64(bs);",
          "2321:  return GF_OK;",
          "2322: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2337:  ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2356: GF_Err tmin_Read(GF_Box *s, GF_BitStream *bs)",
          "2357: {",
          "2358:  GF_TMINBox *ptr = (GF_TMINBox *)s;",
          "2359:  ptr->minTime = gf_bs_read_u32(bs);",
          "2360:  return GF_OK;",
          "2361: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2377:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2394: GF_Err tmax_Read(GF_Box *s, GF_BitStream *bs)",
          "2395: {",
          "2396:  GF_TMAXBox *ptr = (GF_TMAXBox *)s;",
          "2397:  ptr->maxTime = gf_bs_read_u32(bs);",
          "2398:  return GF_OK;",
          "2399: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2416:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2432: GF_Err pmax_Read(GF_Box *s, GF_BitStream *bs)",
          "2433: {",
          "2434:  GF_PMAXBox *ptr = (GF_PMAXBox *)s;",
          "2435:  ptr->maxSize = gf_bs_read_u32(bs);",
          "2436:  return GF_OK;",
          "2437: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2455:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2470: GF_Err dmax_Read(GF_Box *s, GF_BitStream *bs)",
          "2471: {",
          "2472:  GF_DMAXBox *ptr = (GF_DMAXBox *)s;",
          "2473:  ptr->maxDur = gf_bs_read_u32(bs);",
          "2474:  return GF_OK;",
          "2475: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2494:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2512:  u32 length;",
          "2513:  GF_PAYTBox *ptr = (GF_PAYTBox *)s;",
          "2515:  ptr->payloadCode = gf_bs_read_u32(bs);",
          "2516:  length = gf_bs_read_u8(bs);",
          "2517:  ptr->payloadString = (char*)gf_malloc(sizeof(char) * (length+1) );",
          "2518:  if (! ptr->payloadString) return GF_OUT_OF_MEM;",
          "2519:  gf_bs_read_data(bs, ptr->payloadString, length);",
          "2520:  ptr->payloadString[length] = 0;",
          "2523:  return GF_OK;",
          "2524: }",
          "2525: GF_Box *payt_New()",
          "",
          "[Removed Lines]",
          "2522:  ISOM_DECREASE_SIZE(ptr, (4+length+1) );",
          "",
          "[Added Lines]",
          "2537:  ISOM_DECREASE_SIZE(ptr, 5 );",
          "2540:  ISOM_DECREASE_SIZE(ptr, length);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2609: GF_Err tssy_Read(GF_Box *s, GF_BitStream *bs)",
          "2610: {",
          "2611:  GF_TimeStampSynchronyBox *ptr = (GF_TimeStampSynchronyBox *)s;",
          "2612:  gf_bs_read_int(bs, 6);",
          "2613:  ptr->timestamp_sync = gf_bs_read_int(bs, 2);",
          "2614:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2635:  ISOM_DECREASE_SIZE(ptr, 1)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2730: GF_Err rssr_Read(GF_Box *s, GF_BitStream *bs)",
          "2731: {",
          "2732:  GF_ReceivedSsrcBox *ptr = (GF_ReceivedSsrcBox *)s;",
          "2733:  ptr->ssrc = gf_bs_read_u32(bs);",
          "2734:  return GF_OK;",
          "2735: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2757:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2778:  descSize = (u32) (ptr->size);",
          "2779:  desc = (char*)gf_malloc(sizeof(char) * descSize);",
          "2780:  gf_bs_read_data(bs, desc, descSize);",
          "2781:  e = gf_odf_desc_read(desc, descSize, &ptr->descriptor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2805:  if (!desc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2888:  GF_MediaHeaderBox *ptr = (GF_MediaHeaderBox *)s;",
          "2890:  if (ptr->version == 1) {",
          "2891:   ptr->creationTime = gf_bs_read_u64(bs);",
          "2892:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "2893:   ptr->timeScale = gf_bs_read_u32(bs);",
          "2894:   ptr->duration = gf_bs_read_u64(bs);",
          "2895:  } else {",
          "2896:   ptr->creationTime = gf_bs_read_u32(bs);",
          "2897:   ptr->modificationTime = gf_bs_read_u32(bs);",
          "2898:   ptr->timeScale = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2918:   ISOM_DECREASE_SIZE(ptr, 28)",
          "2924:   ISOM_DECREASE_SIZE(ptr, 16)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2906:  ptr->original_duration = ptr->duration;",
          "2909:  gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2937:  ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3183:  GF_RandomAccessEntry *p = 0;",
          "3184:  GF_TrackFragmentRandomAccessBox *ptr = (GF_TrackFragmentRandomAccessBox *)s;",
          "3189:  ptr->track_id = gf_bs_read_u32(bs);",
          "3192:  if (gf_bs_read_int(bs, 26) != 0)",
          "3193:   return GF_ISOM_INVALID_FILE;",
          "3195:  ptr->traf_bits = (gf_bs_read_int(bs, 2) + 1) * 8;",
          "3196:  ptr->trun_bits = (gf_bs_read_int(bs, 2) + 1) * 8;",
          "3197:  ptr->sample_bits = (gf_bs_read_int(bs, 2) + 1) * 8;",
          "3200:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "3203:  if (ptr->version == 1) {",
          "3204:   if (ptr->nb_entries > ptr->size / (16+(ptr->traf_bits+ptr->trun_bits+ptr->sample_bits)/8)) {",
          "",
          "[Removed Lines]",
          "3186:  if (ptr->size < 12)",
          "3187:   return GF_ISOM_INVALID_FILE;",
          "3190:  ISOM_DECREASE_SIZE(ptr, 4);",
          "3198:  ISOM_DECREASE_SIZE(ptr, 4);",
          "3201:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Added Lines]",
          "3216:  ISOM_DECREASE_SIZE(ptr, 12);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3307: {",
          "3308:  GF_MovieFragmentRandomAccessOffsetBox *ptr = (GF_MovieFragmentRandomAccessOffsetBox *)s;",
          "3311:  ISOM_DECREASE_SIZE(ptr, 4);",
          "3313:  return GF_OK;",
          "3314: }",
          "",
          "[Removed Lines]",
          "3310:  ptr->container_size = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "3336:  ptr->container_size = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3357:   if (ptr->extended_language[ptr->size-1]) {",
          "3358:    char *str = (char*)gf_malloc((u32) ptr->size + 1);",
          "3359:    memcpy(str, ptr->extended_language, (u32) ptr->size);",
          "3360:    str[ptr->size] = 0;",
          "3361:    gf_free(ptr->extended_language);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:    if (!str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3409: GF_Err mfhd_Read(GF_Box *s, GF_BitStream *bs)",
          "3410: {",
          "3411:  GF_MovieFragmentHeaderBox *ptr = (GF_MovieFragmentHeaderBox *)s;",
          "3412:  ptr->sequence_number = gf_bs_read_u32(bs);",
          "3413:  return GF_OK;",
          "3414: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3437:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4067:  gf_bs_seek(bs, pos);",
          "4068:  data = (char*)gf_malloc(sizeof(char) * size);",
          "4069:  gf_bs_read_data(bs, data, size);",
          "4070:  for (i=0; i<size-8; i++) {",
          "4071:   if (GF_4CC((u32)data[i+4], (u8)data[i+5], (u8)data[i+6], (u8)data[i+7]) == GF_ISOM_BOX_TYPE_ESDS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4095:  if (!data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4867:  GF_MovieExtendsHeaderBox *ptr = (GF_MovieExtendsHeaderBox *)s;",
          "4869:  if (ptr->version==1) {",
          "4870:   ptr->fragment_duration = gf_bs_read_u64(bs);",
          "4871:  } else {",
          "4872:   ptr->fragment_duration = (u64) gf_bs_read_u32(bs);",
          "4873:  }",
          "4874:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4898:   ISOM_DECREASE_SIZE(ptr, 8);",
          "4901:   ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4911:  GF_MovieHeaderBox *ptr = (GF_MovieHeaderBox *)s;",
          "4912:  if (ptr == NULL) return GF_BAD_PARAM;",
          "4913:  if (ptr->version == 1) {",
          "4914:   ptr->creationTime = gf_bs_read_u64(bs);",
          "4915:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "4916:   ptr->timeScale = gf_bs_read_u32(bs);",
          "4917:   ptr->duration = gf_bs_read_u64(bs);",
          "4918:  } else {",
          "4919:   ptr->creationTime = gf_bs_read_u32(bs);",
          "4920:   ptr->modificationTime = gf_bs_read_u32(bs);",
          "4921:   ptr->timeScale = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4944:   ISOM_DECREASE_SIZE(ptr, 28);",
          "4950:   ISOM_DECREASE_SIZE(ptr, 16);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4925:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Movie header timescale is invalid (0) - defaulting to 600\\n\" ));",
          "4926:   ptr->timeScale = 600;",
          "4927:  }",
          "4928:  ptr->preferredRate = gf_bs_read_u32(bs);",
          "4929:  ptr->preferredVolume = gf_bs_read_u16(bs);",
          "4930:  gf_bs_read_data(bs, ptr->reserved, 10);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4960:  ISOM_DECREASE_SIZE(ptr, 80);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5071:  u32 i;",
          "5072:  GF_PaddingBitsBox *ptr = (GF_PaddingBitsBox *)s;",
          "5074:  ptr->SampleCount = gf_bs_read_u32(bs);",
          "5076:  ptr->padbits = (u8 *)gf_malloc(sizeof(u8)*ptr->SampleCount);",
          "5077:  for (i=0; i<ptr->SampleCount; i += 2) {",
          "5078:   gf_bs_read_int(bs, 1);",
          "5079:   if (i+1 < ptr->SampleCount) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5107:  ISOM_DECREASE_SIZE(ptr, 4);",
          "5109:  if (ptr->size < ptr->SampleCount/2) //half byte per sample",
          "5110:   return GF_ISOM_INVALID_FILE;",
          "5113:  if (!ptr->padbits) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "5141: GF_Err rely_Read(GF_Box *s, GF_BitStream *bs)",
          "5142: {",
          "5143:  GF_RelyHintBox *ptr = (GF_RelyHintBox *)s;",
          "5144:  ptr->reserved = gf_bs_read_int(bs, 6);",
          "5145:  ptr->prefered = gf_bs_read_int(bs, 1);",
          "5146:  ptr->required = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5182:  ISOM_DECREASE_SIZE(ptr, 1);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "5185: GF_Err rtpo_Read(GF_Box *s, GF_BitStream *bs)",
          "5186: {",
          "5187:  GF_RTPOBox *ptr = (GF_RTPOBox *)s;",
          "5188:  ptr->timeOffset = gf_bs_read_u32(bs);",
          "5189:  return GF_OK;",
          "5190: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5227:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "5227: GF_Err smhd_Read(GF_Box *s, GF_BitStream *bs)",
          "5228: {",
          "5229:  GF_SoundMediaHeaderBox *ptr = (GF_SoundMediaHeaderBox *)s;",
          "5230:  ptr->balance = gf_bs_read_u16(bs);",
          "5231:  ptr->reserved = gf_bs_read_u16(bs);",
          "5232:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5270:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "5274: GF_Err snro_Read(GF_Box *s, GF_BitStream *bs)",
          "5275: {",
          "5276:  GF_SeqOffHintEntryBox *ptr = (GF_SeqOffHintEntryBox *)s;",
          "5277:  ptr->SeqOffset = gf_bs_read_u32(bs);",
          "5278:  return GF_OK;",
          "5279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5318:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "5673:  u32 entries;",
          "5674:  GF_ChunkOffsetBox *ptr = (GF_ChunkOffsetBox *)s;",
          "5677:  ISOM_DECREASE_SIZE(ptr, 4);",
          "5678:  if (ptr->nb_entries > ptr->size / 4) {",
          "5679:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in stco\\n\", ptr->nb_entries));",
          "5680:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "5676:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "5719:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "5804:  u32 i;",
          "5805:  GF_SampleToChunkBox *ptr = (GF_SampleToChunkBox *)s;",
          "5808:  ISOM_DECREASE_SIZE(ptr, 4);",
          "5809:  if (ptr->nb_entries > ptr->size / 12) {",
          "5810:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in stsc\\n\", ptr->nb_entries));",
          "5811:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "5807:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "5850:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "5913: GF_Err stsd_Read(GF_Box *s, GF_BitStream *bs)",
          "5914: {",
          "5916:  ISOM_DECREASE_SIZE(s, 4)",
          "5918:  return gf_isom_box_array_read_ex(s, bs, stsd_AddBox, GF_ISOM_BOX_TYPE_STSD);",
          "5919: }",
          "",
          "[Removed Lines]",
          "5915:  gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "5959:  gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "5973:  GF_StshEntry *ent;",
          "5974:  GF_ShadowSyncBox *ptr = (GF_ShadowSyncBox *)s;",
          "5976:  count = gf_bs_read_u32(bs);",
          "5978:  for (i = 0; i < count; i++) {",
          "5979:   ent = (GF_StshEntry *) gf_malloc(sizeof(GF_StshEntry));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6019:  ISOM_DECREASE_SIZE(s, 4)",
          "6021:  if (ptr->size < count*8)",
          "6022:   return GF_ISOM_INVALID_FILE;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "6043:  u32 i;",
          "6044:  GF_SyncSampleBox *ptr = (GF_SyncSampleBox *)s;",
          "6047:  ISOM_DECREASE_SIZE(ptr, 4);",
          "6049:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in stss\\n\", ptr->nb_entries));",
          "6050:   return GF_ISOM_INVALID_FILE;",
          "6051:  }",
          "",
          "[Removed Lines]",
          "6046:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "6048:  if (ptr->nb_entries > ptr->size / 4) {",
          "",
          "[Added Lines]",
          "6093:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "6094:  if (ptr->size <  ptr->nb_entries * 4) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "6113:  if (s->type == GF_ISOM_BOX_TYPE_STSZ) {",
          "6114:   ptr->sampleSize = gf_bs_read_u32(bs);",
          "6115:   ptr->sampleCount = gf_bs_read_u32(bs);",
          "6118:  } else {",
          "6120:   gf_bs_read_int(bs, 24);",
          "6121:   i = gf_bs_read_u8(bs);",
          "6122:   ptr->sampleCount = gf_bs_read_u32(bs);",
          "6124:   switch (i) {",
          "6125:   case 4:",
          "6126:   case 8:",
          "",
          "[Removed Lines]",
          "6117:   ISOM_DECREASE_SIZE(ptr, 8);",
          "6123:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Added Lines]",
          "6160:   ISOM_DECREASE_SIZE(ptr, 8);",
          "6165:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "6152:     return GF_ISOM_INVALID_FILE;",
          "6153:    }",
          "6154:    ptr->sizes = (u32 *) gf_malloc(ptr->sampleCount * sizeof(u32));",
          "6156:    if (! ptr->sizes) return GF_OUT_OF_MEM;",
          "6157:    for (i = 0; i < ptr->sampleCount; i++) {",
          "6158:     ptr->sizes[i] = gf_bs_read_u32(bs);",
          "6159:    }",
          "",
          "[Removed Lines]",
          "6155:    ptr->alloc_size = ptr->sampleCount;",
          "",
          "[Added Lines]",
          "6201:    ptr->alloc_size = ptr->sampleCount;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "6338: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "6339:  ptr->w_LastDTS = 0;",
          "6340: #endif",
          "6342:  ISOM_DECREASE_SIZE(ptr, 4);",
          "6344:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in stts\\n\", ptr->nb_entries));",
          "6345:   return GF_ISOM_INVALID_FILE;",
          "6346:  }",
          "",
          "[Removed Lines]",
          "6341:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "6343:  if (ptr->nb_entries > ptr->size / 8) {",
          "",
          "[Added Lines]",
          "6388:  ptr->nb_entries = gf_bs_read_u32(bs);",
          "6389:  if (ptr->size < ptr->nb_entries * 8) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "6428: {",
          "6429:  GF_TrackFragmentHeaderBox *ptr = (GF_TrackFragmentHeaderBox *)s;",
          "6431:  ptr->trackID = gf_bs_read_u32(bs);",
          "6434:  if (ptr->flags & GF_ISOM_TRAF_BASE_OFFSET) {",
          "6435:   ptr->base_data_offset = gf_bs_read_u64(bs);",
          "6436:  }",
          "6437:  if (ptr->flags & GF_ISOM_TRAF_SAMPLE_DESC) {",
          "6438:   ptr->sample_desc_index = gf_bs_read_u32(bs);",
          "6439:  }",
          "6440:  if (ptr->flags & GF_ISOM_TRAF_SAMPLE_DUR) {",
          "6441:   ptr->def_sample_duration = gf_bs_read_u32(bs);",
          "6442:  }",
          "6443:  if (ptr->flags & GF_ISOM_TRAF_SAMPLE_SIZE) {",
          "6444:   ptr->def_sample_size = gf_bs_read_u32(bs);",
          "6445:  }",
          "6446:  if (ptr->flags & GF_ISOM_TRAF_SAMPLE_FLAGS) {",
          "6447:   ptr->def_sample_flags = gf_bs_read_u32(bs);",
          "6448:  }",
          "6449:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6478:  ISOM_DECREASE_SIZE(ptr, 4);",
          "6483:   ISOM_DECREASE_SIZE(ptr, 8);",
          "6487:   ISOM_DECREASE_SIZE(ptr, 4);",
          "6491:   ISOM_DECREASE_SIZE(ptr, 4);",
          "6495:   ISOM_DECREASE_SIZE(ptr, 4);",
          "6499:   ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "6518: GF_Err tims_Read(GF_Box *s, GF_BitStream *bs)",
          "6519: {",
          "6520:  GF_TSHintEntryBox *ptr = (GF_TSHintEntryBox *)s;",
          "6521:  ptr->timeScale = gf_bs_read_u32(bs);",
          "6522:  return GF_OK;",
          "6523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6574:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "6564:  GF_TrackHeaderBox *ptr = (GF_TrackHeaderBox *)s;",
          "6566:  if (ptr->version == 1) {",
          "6567:   ptr->creationTime = gf_bs_read_u64(bs);",
          "6568:   ptr->modificationTime = gf_bs_read_u64(bs);",
          "6569:   ptr->trackID = gf_bs_read_u32(bs);",
          "6570:   ptr->reserved1 = gf_bs_read_u32(bs);",
          "6571:   ptr->duration = gf_bs_read_u64(bs);",
          "6572:  } else {",
          "6573:   ptr->creationTime = gf_bs_read_u32(bs);",
          "6574:   ptr->modificationTime = gf_bs_read_u32(bs);",
          "6575:   ptr->trackID = gf_bs_read_u32(bs);",
          "6576:   ptr->reserved1 = gf_bs_read_u32(bs);",
          "6577:   ptr->duration = gf_bs_read_u32(bs);",
          "6578:  }",
          "6579:  ptr->reserved2[0] = gf_bs_read_u32(bs);",
          "6580:  ptr->reserved2[1] = gf_bs_read_u32(bs);",
          "6581:  ptr->layer = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6621:   ISOM_DECREASE_SIZE(ptr, 32);",
          "6628:   ISOM_DECREASE_SIZE(ptr, 20);",
          "6635:  ISOM_DECREASE_SIZE(ptr, 60);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "6783: GF_Err tfxd_Read(GF_Box *s, GF_BitStream *bs)",
          "6784: {",
          "6785:  GF_MSSTimeExtBox *ptr = (GF_MSSTimeExtBox *)s;",
          "6787:  ptr->version = gf_bs_read_u8(bs);",
          "6788:  ptr->flags = gf_bs_read_u24(bs);",
          "6791:  if (ptr->version == 0x01) {",
          "6792:   ptr->absolute_time_in_track_timescale = gf_bs_read_u64(bs);",
          "6793:   ptr->fragment_duration_in_track_timescale = gf_bs_read_u64(bs);",
          "6794:  } else {",
          "6795:   ptr->absolute_time_in_track_timescale = gf_bs_read_u32(bs);",
          "6796:   ptr->fragment_duration_in_track_timescale = gf_bs_read_u32(bs);",
          "6797:  }",
          "",
          "[Removed Lines]",
          "6786:  if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "6789:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Added Lines]",
          "6843:  ISOM_DECREASE_SIZE(ptr, 4);",
          "6848:   ISOM_DECREASE_SIZE(ptr, 16);",
          "6852:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "7360: {",
          "7361:  size_t i;",
          "7362:  GF_SubTrackInformationBox *ptr = (GF_SubTrackInformationBox *)s;",
          "7363:  ptr->switch_group = gf_bs_read_u16(bs);",
          "7364:  ptr->alternate_group = gf_bs_read_u16(bs);",
          "7365:  ptr->sub_track_id = gf_bs_read_u32(bs);",
          "7367:  ptr->attribute_count = ptr->size / 4;",
          "7368:  GF_SAFE_ALLOC_N(ptr->attribute_list, (size_t)ptr->attribute_count, u32);",
          "7369:  if (!ptr->attribute_list) return GF_OUT_OF_MEM;",
          "7370:  for (i = 0; i < ptr->attribute_count; i++) {",
          "7371:   ptr->attribute_list[i] = gf_bs_read_u32(bs);",
          "7372:  }",
          "7373:  return GF_OK;",
          "",
          "[Removed Lines]",
          "7366:  ptr->size -= 8;",
          "",
          "[Added Lines]",
          "7421:  ISOM_DECREASE_SIZE(ptr, 8)",
          "7429:   ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "7694: {",
          "7695:  GF_TrackExtendsBox *ptr = (GF_TrackExtendsBox *)s;",
          "7697:  ptr->trackID = gf_bs_read_u32(bs);",
          "7698:  ptr->def_sample_desc_index = gf_bs_read_u32(bs);",
          "7699:  ptr->def_sample_duration = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7756:  ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "7755: {",
          "7756:  GF_TrackExtensionPropertiesBox *ptr = (GF_TrackExtensionPropertiesBox *)s;",
          "7759:  ISOM_DECREASE_SIZE(ptr, 4);",
          "7761:  return gf_isom_box_array_read(s, bs, gf_isom_box_add_default);",
          "7762: }",
          "",
          "[Removed Lines]",
          "7758:  ptr->trackID = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "7819:  ptr->trackID = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "7828:  if ((ptr->flags & GF_ISOM_TRUN_FIRST_FLAG) && (ptr->flags & GF_ISOM_TRUN_FLAGS))",
          "7829:   return GF_ISOM_INVALID_FILE;",
          "7832:  ISOM_DECREASE_SIZE(ptr, 4);",
          "7835:  if (ptr->flags & GF_ISOM_TRUN_DATA_OFFSET) {",
          "7837:   ISOM_DECREASE_SIZE(ptr, 4);",
          "7838:  }",
          "7839:  if (ptr->flags & GF_ISOM_TRUN_FIRST_FLAG) {",
          "7841:   ISOM_DECREASE_SIZE(ptr, 4);",
          "7842:  }",
          "7843:  if (! (ptr->flags & (GF_ISOM_TRUN_DURATION | GF_ISOM_TRUN_SIZE | GF_ISOM_TRUN_FLAGS | GF_ISOM_TRUN_CTS_OFFSET) ) ) {",
          "7844:   GF_SAFEALLOC(p, GF_TrunEntry);",
          "",
          "[Removed Lines]",
          "7831:  ptr->sample_count = gf_bs_read_u32(bs);",
          "7836:   ptr->data_offset = gf_bs_read_u32(bs);",
          "7840:   ptr->first_sample_flags = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "7892:  ptr->sample_count = gf_bs_read_u32(bs);",
          "7897:   ptr->data_offset = gf_bs_read_u32(bs);",
          "7901:   ptr->first_sample_flags = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "7986: GF_Err tsro_Read(GF_Box *s, GF_BitStream *bs)",
          "7987: {",
          "7988:  GF_TimeOffHintEntryBox *ptr = (GF_TimeOffHintEntryBox *)s;",
          "7989:  ptr->TimeOffset = gf_bs_read_u32(bs);",
          "7990:  return GF_OK;",
          "7991: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8049:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "8165: {",
          "8166:  GF_VideoMediaHeaderBox *ptr = (GF_VideoMediaHeaderBox *)s;",
          "8168:  ptr->reserved = gf_bs_read_u64(bs);",
          "8169:  return GF_OK;",
          "8170: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8229:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "8262:  ptr->count = (u32) (ptr->size) / 8;",
          "8263:  ptr->rates = (u32*)gf_malloc(sizeof(u32)*ptr->count);",
          "8264:  ptr->times = (u32*)gf_malloc(sizeof(u32)*ptr->count);",
          "8265:  for (i=0; i<ptr->count; i++) {",
          "8266:   ptr->rates[i] = gf_bs_read_u32(bs);",
          "8267:   ptr->times[i] = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8326:  if (!ptr->rates) return GF_OUT_OF_MEM;",
          "8328:  if (!ptr->times) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "8323:  else if (ptr->sampleCount > (u32) ptr->size) return GF_ISOM_INVALID_FILE;",
          "8325:  ptr->sample_info = (u8 *) gf_malloc(sizeof(u8)*ptr->sampleCount);",
          "8326:  gf_bs_read_data(bs, (char*)ptr->sample_info, ptr->sampleCount);",
          "8327:  ISOM_DECREASE_SIZE(ptr, ptr->sampleCount);",
          "8328:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8390:  if (!ptr->sample_info) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "8369: GF_Err pasp_Read(GF_Box *s, GF_BitStream *bs)",
          "8370: {",
          "8371:  GF_PixelAspectRatioBox *ptr = (GF_PixelAspectRatioBox*)s;",
          "8372:  ptr->hSpacing = gf_bs_read_u32(bs);",
          "8373:  ptr->vSpacing = gf_bs_read_u32(bs);",
          "8375:  return GF_OK;",
          "8376: }",
          "",
          "[Removed Lines]",
          "8374:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Added Lines]",
          "8437:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "8510:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "8511:  if (e) return e;",
          "8514:  str = gf_malloc(sizeof(char)*size);",
          "8516:  i=0;",
          "",
          "[Removed Lines]",
          "8513:  size = (u32) ptr->size - 8;",
          "",
          "[Added Lines]",
          "8577:  ISOM_DECREASE_SIZE(ptr, 8);",
          "8579:  size = (u32) ptr->size;",
          "8581:  if (!str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "8711: {",
          "8712:  GF_TextConfigBox *ptr = (GF_TextConfigBox*)s;",
          "8713:  ptr->config = (char *)gf_malloc(sizeof(char)*((u32) ptr->size+1));",
          "8714:  gf_bs_read_data(bs, ptr->config, (u32) ptr->size);",
          "8715:  ptr->config[ptr->size] = 0;",
          "8716:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8781:  if (!ptr->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "8770:  if (ptr->cfg.is_ec3) {",
          "8771:   u32 i;",
          "8772:   ptr->cfg.brcode = gf_bs_read_int(bs, 13);",
          "8773:   ptr->cfg.nb_streams = gf_bs_read_int(bs, 3) + 1;",
          "8774:   for (i=0; i<ptr->cfg.nb_streams; i++) {",
          "8775:    ptr->cfg.streams[i].fscod = gf_bs_read_int(bs, 2);",
          "8776:    ptr->cfg.streams[i].bsid = gf_bs_read_int(bs, 5);",
          "8777:    ptr->cfg.streams[i].bsmod = gf_bs_read_int(bs, 5);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8840:   ISOM_DECREASE_SIZE(ptr, 2);",
          "8844:    ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "8780:    gf_bs_read_int(bs, 3);",
          "8781:    ptr->cfg.streams[i].nb_dep_sub = gf_bs_read_int(bs, 4);",
          "8782:    if (ptr->cfg.streams[i].nb_dep_sub) {",
          "8783:     ptr->cfg.streams[i].chan_loc = gf_bs_read_int(bs, 9);",
          "8784:    } else {",
          "8785:     gf_bs_read_int(bs, 1);",
          "8786:    }",
          "8787:   }",
          "8788:  } else {",
          "8789:   ptr->cfg.nb_streams = 1;",
          "8790:   ptr->cfg.streams[0].fscod = gf_bs_read_int(bs, 2);",
          "8791:   ptr->cfg.streams[0].bsid = gf_bs_read_int(bs, 5);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8853:     ISOM_DECREASE_SIZE(ptr, 1);",
          "8860:   ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "8877:  GF_LASERConfigurationBox *ptr = (GF_LASERConfigurationBox *)s;",
          "8878:  ptr->hdr_size = (u32) ptr->size;",
          "8879:  ptr->hdr = gf_malloc(sizeof(char)*ptr->hdr_size);",
          "8882:  gf_bs_read_data(bs, ptr->hdr, ptr->hdr_size);",
          "8883:  return GF_OK;",
          "8884: }",
          "",
          "[Removed Lines]",
          "8880:  if (!ptr->hdr)",
          "8881:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "8952:  if (!ptr->hdr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "9021:  u32 i;",
          "9022:  GF_SegmentIndexBox *ptr = (GF_SegmentIndexBox*) s;",
          "9024:  ptr->reference_ID = gf_bs_read_u32(bs);",
          "9025:  ptr->timescale = gf_bs_read_u32(bs);",
          "9028:  if (ptr->version==0) {",
          "9029:   ptr->earliest_presentation_time = gf_bs_read_u32(bs);",
          "9030:   ptr->first_offset = gf_bs_read_u32(bs);",
          "9032:  } else {",
          "9033:   ptr->earliest_presentation_time = gf_bs_read_u64(bs);",
          "9034:   ptr->first_offset = gf_bs_read_u64(bs);",
          "9036:  }",
          "9038:  ptr->nb_refs = gf_bs_read_u16(bs);",
          "9041:  ptr->refs = gf_malloc(sizeof(GF_SIDXReference)*ptr->nb_refs);",
          "9044:  for (i=0; i<ptr->nb_refs; i++) {",
          "9045:   ptr->refs[i].reference_type = gf_bs_read_int(bs, 1);",
          "9046:   ptr->refs[i].reference_size = gf_bs_read_int(bs, 31);",
          "",
          "[Removed Lines]",
          "9026:  ISOM_DECREASE_SIZE(ptr, 8);",
          "9031:   ISOM_DECREASE_SIZE(ptr, 8);",
          "9035:   ISOM_DECREASE_SIZE(ptr, 16);",
          "9039:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9042:  if (!ptr->refs)",
          "9043:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "9095:  ISOM_DECREASE_SIZE(ptr, 8);",
          "9100:   ISOM_DECREASE_SIZE(ptr, 8);",
          "9104:   ISOM_DECREASE_SIZE(ptr, 16);",
          "9108:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9113:  if (!ptr->refs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "9130:  u32 i,j;",
          "9131:  GF_SubsegmentIndexBox *ptr = (GF_SubsegmentIndexBox*)s;",
          "9134:  ptr->subsegment_count = gf_bs_read_u32(bs);",
          "9138:   return GF_ISOM_INVALID_FILE;",
          "9140:  GF_SAFE_ALLOC_N(ptr->subsegments, ptr->subsegment_count, GF_SubsegmentInfo);",
          "",
          "[Removed Lines]",
          "9133:  if (ptr->size < 4) return GF_BAD_PARAM;",
          "9135:  ptr->size -= 4;",
          "9137:  if (ptr->subsegment_count > UINT_MAX / sizeof(GF_SubsegmentInfo))",
          "",
          "[Added Lines]",
          "9203:  ISOM_DECREASE_SIZE(ptr, 4)",
          "9206:  if (ptr->size < ptr->subsegment_count*4)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "9142:      return GF_OUT_OF_MEM;",
          "9143:  for (i = 0; i < ptr->subsegment_count; i++) {",
          "9144:   GF_SubsegmentInfo *subseg = &ptr->subsegments[i];",
          "9146:   subseg->range_count = gf_bs_read_u32(bs);",
          "9149:   subseg->ranges = (GF_SubsegmentRangeInfo*) gf_malloc(sizeof(GF_SubsegmentRangeInfo) * subseg->range_count);",
          "9150:   for (j = 0; j < subseg->range_count; j++) {",
          "9151:    subseg->ranges[j].level = gf_bs_read_u8(bs);",
          "9152:    subseg->ranges[j].range_size = gf_bs_read_u24(bs);",
          "9154:   }",
          "9155:  }",
          "9156:  return GF_OK;",
          "",
          "[Removed Lines]",
          "9145:   if (ptr->size < 4) return GF_BAD_PARAM;",
          "9147:   ptr->size -= 4;",
          "9148:   if (ptr->size < subseg->range_count*4) return GF_BAD_PARAM;",
          "9153:    ptr->size -= 4;",
          "",
          "[Added Lines]",
          "9214:   ISOM_DECREASE_SIZE(ptr, 4)",
          "9217:   if (ptr->size < subseg->range_count*4)",
          "9218:    return GF_ISOM_INVALID_FILE;",
          "9220:   if (!subseg->ranges) return GF_OUT_OF_MEM;",
          "9222:    ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "9212:  u32 i;",
          "9213:  GF_LevelAssignmentBox *ptr = (GF_LevelAssignmentBox*)s;",
          "9216:  ptr->level_count = gf_bs_read_u8(bs);",
          "9218:  GF_SAFE_ALLOC_N(ptr->levels, ptr->level_count, GF_LevelAssignment);",
          "9219:  for (i = 0; i < ptr->level_count; i++) {",
          "9220:   GF_LevelAssignment *level = &ptr->levels[i];",
          "9221:   u8 tmp;",
          "9223:   level->track_id = gf_bs_read_u32(bs);",
          "9224:   tmp = gf_bs_read_u8(bs);",
          "9225:   level->padding_flag = tmp >> 7;",
          "9226:   level->type = tmp & 0x7F;",
          "9227:   if (level->type == 0) {",
          "9228:    level->grouping_type = gf_bs_read_u32(bs);",
          "9229:   }",
          "9230:   else if (level->type == 1) {",
          "9231:    level->grouping_type = gf_bs_read_u32(bs);",
          "9232:    level->grouping_type_parameter = gf_bs_read_u32(bs);",
          "9233:   }",
          "9234:   else if (level->type == 4) {",
          "9235:    level->sub_track_id = gf_bs_read_u32(bs);",
          "9236:   }",
          "9237:  }",
          "",
          "[Removed Lines]",
          "9215:  if (ptr->size < 4) return GF_BAD_PARAM;",
          "9217:  ptr->size -= 4;",
          "9222:   if (ptr->size < 5) return GF_BAD_PARAM;",
          "",
          "[Added Lines]",
          "9286:  ISOM_DECREASE_SIZE(ptr, 1)",
          "9289:  if (ptr->size < ptr->level_count * 5)",
          "9290:   return GF_ISOM_INVALID_FILE;",
          "9293:  if (!ptr->levels) return GF_OUT_OF_MEM;",
          "9298:   ISOM_DECREASE_SIZE(ptr, 5)",
          "9305:    ISOM_DECREASE_SIZE(ptr, 4)",
          "9309:    ISOM_DECREASE_SIZE(ptr, 8)",
          "9314:    ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "9312:  u32 i;",
          "9313:  GF_PcrInfoBox *ptr = (GF_PcrInfoBox*) s;",
          "9316:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9318:  ptr->pcr_values = gf_malloc(sizeof(u64)*ptr->subsegment_count);",
          "9321:  for (i=0; i<ptr->subsegment_count; i++) {",
          "9322:   u64 data1 = gf_bs_read_u32(bs);",
          "9323:   u64 data2 = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "9315:  ptr->subsegment_count = gf_bs_read_u32(bs);",
          "9319:  if (!ptr->pcr_values)",
          "9320:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "9396:  ptr->subsegment_count = gf_bs_read_u32(bs);",
          "9399:  if (!ptr->pcr_values) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "9460:  u32 entry_count, i, j;",
          "9461:  u16 subsample_count;",
          "9464:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9466:  for (i=0; i<entry_count; i++) {",
          "9467:   u32 subs_size=0;",
          "",
          "[Removed Lines]",
          "9463:  entry_count = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "9543:  entry_count = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "9519:  GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;",
          "9521:  if (ptr->version==1) {",
          "9523:   ISOM_DECREASE_SIZE(ptr, 8);",
          "9524:  } else {",
          "9526:   ISOM_DECREASE_SIZE(ptr, 4);",
          "9527:  }",
          "9528:  return GF_OK;",
          "9529: }",
          "",
          "[Removed Lines]",
          "9522:   ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);",
          "9525:   ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "9602:   ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);",
          "9605:   ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "9578: GF_Err rvcc_Read(GF_Box *s,GF_BitStream *bs)",
          "9579: {",
          "9580:  GF_RVCConfigurationBox *ptr = (GF_RVCConfigurationBox*)s;",
          "9582:  ISOM_DECREASE_SIZE(ptr, 2);",
          "9583:  if (!ptr->predefined_rvc_config) {",
          "9585:   ISOM_DECREASE_SIZE(ptr, 2);",
          "9586:  }",
          "9587:  return GF_OK;",
          "9588: }",
          "",
          "[Removed Lines]",
          "9581:  ptr->predefined_rvc_config = gf_bs_read_u16(bs);",
          "9584:   ptr->rvc_meta_idx = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "9661:  ptr->predefined_rvc_config = gf_bs_read_u16(bs);",
          "9664:   ptr->rvc_meta_idx = gf_bs_read_u16(bs);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "9633:  u32 i;",
          "9634:  GF_SampleGroupBox *ptr = (GF_SampleGroupBox *)s;",
          "9636:  ptr->grouping_type = gf_bs_read_u32(bs);",
          "9639:  if (ptr->version==1) {",
          "9641:   ISOM_DECREASE_SIZE(ptr, 4);",
          "9642:  }",
          "9643:  ptr->entry_count = gf_bs_read_u32(bs);",
          "9646:  if (ptr->size < sizeof(GF_SampleGroupEntry)*ptr->entry_count)",
          "9647:      return GF_ISOM_INVALID_FILE;",
          "9648:  ptr->sample_entries = gf_malloc(sizeof(GF_SampleGroupEntry)*ptr->entry_count);",
          "9652:  for (i=0; i<ptr->entry_count; i++) {",
          "9653:   ptr->sample_entries[i].sample_count = gf_bs_read_u32(bs);",
          "9654:   ptr->sample_entries[i].group_description_index = gf_bs_read_u32(bs);",
          "9657:  }",
          "9658:  return GF_OK;",
          "9659: }",
          "",
          "[Removed Lines]",
          "9637:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9640:   ptr->grouping_type_parameter = gf_bs_read_u32(bs);",
          "9644:  ISOM_DECREASE_SIZE(ptr, 4);",
          "9649:  if (!ptr->sample_entries)",
          "9650:      return GF_OUT_OF_MEM;",
          "9651:  if (!ptr->sample_entries) return GF_IO_ERR;",
          "9656:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Added Lines]",
          "9715:  ISOM_DECREASE_SIZE(ptr, 8);",
          "9720:   ptr->grouping_type_parameter = gf_bs_read_u32(bs);",
          "9728:  if (!ptr->sample_entries) return GF_OUT_OF_MEM;",
          "9731:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "9857:  if (entry_size) {",
          "9858:   ptr->length = entry_size;",
          "9859:   ptr->data = (u8 *) gf_malloc(sizeof(u8)*ptr->length);",
          "9860:   gf_bs_read_data(bs, (char *) ptr->data, ptr->length);",
          "9862:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9937:   if (!ptr->data) {",
          "9938:    gf_free(ptr);",
          "9939:    return NULL;",
          "9940:   }",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "9998:  u32 entry_count;",
          "9999:  GF_SampleGroupDescriptionBox *p = (GF_SampleGroupDescriptionBox *)s;",
          "10001:  p->grouping_type = gf_bs_read_u32(bs);",
          "10004:  if (p->version>=1) {",
          "10006:   ISOM_DECREASE_SIZE(p, 4);",
          "10007:  }",
          "10008:  if (p->version>=2) {",
          "10010:   ISOM_DECREASE_SIZE(p, 4);",
          "10011:  }",
          "10012:  entry_count = gf_bs_read_u32(bs);",
          "10015:  if (entry_count>p->size)",
          "10016:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "10002:  ISOM_DECREASE_SIZE(p, 4);",
          "10005:   p->default_length = gf_bs_read_u32(bs);",
          "10009:   p->default_description_index = gf_bs_read_u32(bs);",
          "10013:  ISOM_DECREASE_SIZE(p, 4);",
          "",
          "[Added Lines]",
          "10082:  ISOM_DECREASE_SIZE(p, 8);",
          "10087:   p->default_length = gf_bs_read_u32(bs);",
          "10091:   p->default_description_index = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "10106:  GF_SampleAuxiliaryInfoSizeBox*ptr = (GF_SampleAuxiliaryInfoSizeBox*)s;",
          "10108:  if (ptr->flags & 1) {",
          "10109:   ptr->aux_info_type = gf_bs_read_u32(bs);",
          "10110:   ptr->aux_info_type_parameter = gf_bs_read_u32(bs);",
          "10113:  }",
          "10114:  ptr->default_sample_info_size = gf_bs_read_u8(bs);",
          "10115:  ptr->sample_count = gf_bs_read_u32(bs);",
          "10118:  if (ptr->default_sample_info_size == 0) {",
          "10119:   if (ptr->size < sizeof(u8)*ptr->sample_count)",
          "10120:       return GF_ISOM_INVALID_FILE;",
          "10121:   ptr->sample_info_size = gf_malloc(sizeof(u8)*ptr->sample_count);",
          "10125:   ISOM_DECREASE_SIZE(ptr, ptr->sample_count);",
          "10126:  }",
          "10127:  return GF_OK;",
          "10128: }",
          "",
          "[Removed Lines]",
          "10112:   ISOM_DECREASE_SIZE(ptr, 8);",
          "10116:  ISOM_DECREASE_SIZE(ptr, 5);",
          "10122:   if (!ptr->sample_info_size)",
          "10123:       return GF_OUT_OF_MEM;",
          "10124:   gf_bs_read_data(bs, (char *) ptr->sample_info_size, ptr->sample_count);",
          "",
          "[Added Lines]",
          "10189:   ISOM_DECREASE_SIZE(ptr, 8);",
          "10193:  ISOM_DECREASE_SIZE(ptr, 5);",
          "10202:   if (!ptr->sample_info_size) return GF_OUT_OF_MEM;",
          "10205:   gf_bs_read_data(bs, (char *) ptr->sample_info_size, ptr->sample_count);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "10184:  GF_SampleAuxiliaryInfoOffsetBox *ptr = (GF_SampleAuxiliaryInfoOffsetBox *)s;",
          "10186:  if (ptr->flags & 1) {",
          "10187:   ptr->aux_info_type = gf_bs_read_u32(bs);",
          "10188:   ptr->aux_info_type_parameter = gf_bs_read_u32(bs);",
          "10190:  }",
          "10192:  ISOM_DECREASE_SIZE(ptr, 4);",
          "10194:  if (ptr->entry_count) {",
          "10195:   u32 i;",
          "10196:   if (ptr->version==0) {",
          "10199:    ptr->offsets = gf_malloc(sizeof(u32)*ptr->entry_count);",
          "10202:    for (i=0; i<ptr->entry_count; i++)",
          "10203:     ptr->offsets[i] = gf_bs_read_u32(bs);",
          "10206:   } else {",
          "10209:    ptr->offsets_large = gf_malloc(sizeof(u64)*ptr->entry_count);",
          "10212:    for (i=0; i<ptr->entry_count; i++)",
          "10213:     ptr->offsets_large[i] = gf_bs_read_u64(bs);",
          "10215:   }",
          "10216:  }",
          "10217:  return GF_OK;",
          "",
          "[Removed Lines]",
          "10189:   ISOM_DECREASE_SIZE(ptr, 8);",
          "10191:  ptr->entry_count = gf_bs_read_u32(bs);",
          "10197:    if (ptr->size < sizeof(u32)*ptr->entry_count)",
          "10198:        return GF_ISOM_INVALID_FILE;",
          "10200:    if (!ptr->offsets)",
          "10201:        return GF_OUT_OF_MEM;",
          "10205:    ISOM_DECREASE_SIZE(ptr, 4*ptr->entry_count);",
          "10207:    if (ptr->size < sizeof(u64)*ptr->entry_count)",
          "10208:        return GF_ISOM_INVALID_FILE;",
          "10210:    if (!ptr->offsets_large)",
          "10211:        return GF_OUT_OF_MEM;",
          "10214:    ISOM_DECREASE_SIZE(ptr, 8*ptr->entry_count);",
          "",
          "[Added Lines]",
          "10267:   ISOM_DECREASE_SIZE(ptr, 8);",
          "10272:  ptr->entry_count = gf_bs_read_u32(bs);",
          "10277:    ISOM_DECREASE_SIZE(ptr, 4*ptr->entry_count);",
          "10280:    if (!ptr->offsets) return GF_OUT_OF_MEM;",
          "10285:    ISOM_DECREASE_SIZE(ptr, 8*ptr->entry_count);",
          "10288:    if (!ptr->offsets_large) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "10305: {",
          "10306:  GF_ProducerReferenceTimeBox *ptr = (GF_ProducerReferenceTimeBox *) s;",
          "10308:  ptr->refTrackID = gf_bs_read_u32(bs);",
          "10309:  ptr->ntp = gf_bs_read_u64(bs);",
          "10310:  if (ptr->version==0) {",
          "10311:   ptr->timestamp = gf_bs_read_u32(bs);",
          "10312:  } else {",
          "10313:   ptr->timestamp = gf_bs_read_u64(bs);",
          "10314:  }",
          "10315:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10385:  ISOM_DECREASE_SIZE(ptr, 12);",
          "10389:   ISOM_DECREASE_SIZE(ptr, 4);",
          "10392:   ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "10421: GF_Err trgt_Read(GF_Box *s, GF_BitStream *bs)",
          "10422: {",
          "10423:  GF_TrackGroupTypeBox *ptr = (GF_TrackGroupTypeBox *)s;",
          "10425:  ISOM_DECREASE_SIZE(ptr, 4);",
          "10426:  return GF_OK;",
          "10427: }",
          "",
          "[Removed Lines]",
          "10424:  ptr->track_group_id = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "10505:  ptr->track_group_id = gf_bs_read_u32(bs);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "10478:  ptr->stereo_scheme = gf_bs_read_u32(bs);",
          "10479:  ptr->sit_len = gf_bs_read_u32(bs);",
          "10480:  ISOM_DECREASE_SIZE(ptr, ptr->sit_len);",
          "10483:  ptr->stereo_indication_type = gf_malloc(sizeof(char)*ptr->sit_len);",
          "10486:  gf_bs_read_data(bs, ptr->stereo_indication_type, ptr->sit_len);",
          "10487:  return GF_OK;",
          "10488: }",
          "",
          "[Removed Lines]",
          "10481:  if (ptr->size < sizeof(char)*ptr->sit_len)",
          "10482:      return GF_ISOM_INVALID_FILE;",
          "10484:  if (!ptr->stereo_indication_type)",
          "10485:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "10563:  if (!ptr->stereo_indication_type) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "10732:  u32 i=0;",
          "10735:  while (1) {",
          "10736:   ISOM_DECREASE_SIZE(s, 1 );",
          "10737:   (*out_str)[i] = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10814:  if (! *out_str) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "10778:  ptr->nb_entries = gf_bs_read_int(bs, ptr->version ? 32 : 16);",
          "10779:  if (ptr->nb_entries > UINT_MAX / 6)",
          "10780:   return GF_ISOM_INVALID_FILE;",
          "10781:  ISOM_DECREASE_SIZE(ptr, ptr->nb_entries * 6 );",
          "10782:  GF_SAFE_ALLOC_N(ptr->entries, ptr->nb_entries, FilePartitionEntry);",
          "10783:  for (i=0;i < ptr->nb_entries; i++) {",
          "10784:   ptr->entries[i].block_count = gf_bs_read_u16(bs);",
          "10785:   ptr->entries[i].block_size = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10865:  if (!ptr->entries) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "10862:  ISOM_DECREASE_SIZE(ptr, ptr->nb_entries * (ptr->version ? 8 : 6) );",
          "10863:  GF_SAFE_ALLOC_N(ptr->entries, ptr->nb_entries, FECReservoirEntry);",
          "10864:  for (i=0; i<ptr->nb_entries; i++) {",
          "10865:   ptr->entries[i].item_id = gf_bs_read_int(bs, ptr->version ? 32 : 16);",
          "10866:   ptr->entries[i].symbol_count = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10948:  if (!ptr->entries) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "10926:  ISOM_DECREASE_SIZE(ptr, 2);",
          "10927:  ptr->num_session_groups = gf_bs_read_u16(bs);",
          "10929:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in segr\\n\", ptr->num_session_groups));",
          "10930:   ptr->num_session_groups = 0;",
          "10931:   return GF_ISOM_INVALID_FILE;",
          "10932:  }",
          "10934:  GF_SAFE_ALLOC_N(ptr->session_groups, ptr->num_session_groups, SessionGroupEntry);",
          "10935:  for (i=0; i<ptr->num_session_groups; i++) {",
          "10936:   ptr->session_groups[i].nb_groups = gf_bs_read_u8(bs);",
          "10937:   ISOM_DECREASE_SIZE(ptr, 1);",
          "10938:   GF_SAFE_ALLOC_N(ptr->session_groups[i].group_ids, ptr->session_groups[i].nb_groups, u32);",
          "10939:   for (k=0; k<ptr->session_groups[i].nb_groups; k++) {",
          "10941:    ptr->session_groups[i].group_ids[k] = gf_bs_read_u32(bs);",
          "10942:   }",
          "10944:   ptr->session_groups[i].nb_channels = gf_bs_read_u16(bs);",
          "10945:   GF_SAFE_ALLOC_N(ptr->session_groups[i].channels, ptr->session_groups[i].nb_channels, u32);",
          "10946:   for (k=0; k<ptr->session_groups[i].nb_channels; k++) {",
          "10948:    ptr->session_groups[i].channels[k] = gf_bs_read_u32(bs);",
          "10949:   }",
          "10950:  }",
          "",
          "[Removed Lines]",
          "10928:  if (ptr->num_session_groups*3>ptr->size) {",
          "10940:    ISOM_DECREASE_SIZE(ptr, 4);",
          "10947:    ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Added Lines]",
          "11014:  if (ptr->size < ptr->num_session_groups) {",
          "11021:  if (!ptr->session_groups) return GF_OUT_OF_MEM;",
          "11027:   ISOM_DECREASE_SIZE(ptr, ptr->session_groups[i].nb_groups*4);",
          "11030:   if (!ptr->session_groups[i].group_ids) return GF_OUT_OF_MEM;",
          "11037:   ISOM_DECREASE_SIZE(ptr, ptr->session_groups[i].nb_channels*4);",
          "11040:   if (!ptr->session_groups[i].channels) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "11023:  ISOM_DECREASE_SIZE(ptr, 2);",
          "11024:  ptr->nb_entries = gf_bs_read_u16(bs);",
          "11026:  GF_SAFE_ALLOC_N(ptr->entries, ptr->nb_entries, GroupIdNameEntry);",
          "11027:  for (i=0; i<ptr->nb_entries; i++) {",
          "11028:   ISOM_DECREASE_SIZE(ptr, 4);",
          "11029:   ptr->entries[i].group_id = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11120:  if (ptr->size < ptr->nb_entries*4)",
          "11121:   return GF_ISOM_INVALID_FILE;",
          "11124:  if (!ptr->entries) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "11107:  ptr->info.transport_object_identifier = gf_bs_read_u16(bs);",
          "11108:  ISOM_DECREASE_SIZE(ptr, 2);",
          "11109:  ptr->header_ext_count = gf_bs_read_u16(bs);",
          "11111:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Invalid number of entries %d in fdpa\\n\", ptr->header_ext_count));",
          "11112:   return GF_ISOM_INVALID_FILE;",
          "11113:  }",
          "11115:  GF_SAFE_ALLOC_N(ptr->headers, ptr->header_ext_count, GF_LCTheaderExtension);",
          "11116:  for (i=0; i<ptr->header_ext_count; i++) {",
          "11117:   ptr->headers[i].header_extension_type = gf_bs_read_u8(bs);",
          "11118:   ISOM_DECREASE_SIZE(ptr, 1);",
          "11120:   if (ptr->headers[i].header_extension_type > 127) {",
          "11121:    gf_bs_read_data(bs, (char *) ptr->headers[i].content, 3);",
          "11122:   } else {",
          "11123:    ISOM_DECREASE_SIZE(ptr, 1);",
          "",
          "[Removed Lines]",
          "11110:  if (ptr->header_ext_count*2>ptr->size) {",
          "",
          "[Added Lines]",
          "11209:  if (ptr->size < ptr->header_ext_count*2) {",
          "11215:  if (!ptr->headers) return GF_OUT_OF_MEM;",
          "11222:    ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "11127:     if (ptr->size < sizeof(char) * ptr->headers[i].data_length)",
          "11128:         return GF_ISOM_INVALID_FILE;",
          "11129:     ptr->headers[i].data = gf_malloc(sizeof(char) * ptr->headers[i].data_length);",
          "11132:     gf_bs_read_data(bs, ptr->headers[i].data, ptr->headers[i].data_length);",
          "11133:    }",
          "11134:   }",
          "",
          "[Removed Lines]",
          "11130:     if (!ptr->headers[i].data)",
          "11131:         return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "11232:     if (!ptr->headers[i].data) return GF_OUT_OF_MEM;",
          "11234:     ISOM_DECREASE_SIZE(ptr, ptr->headers[i].data_length);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "11216:  if (!ptr->feci || ptr->feci->size > ptr->size) return GF_ISOM_INVALID_MEDIA;",
          "11217:  ptr->data_length = (u32) (ptr->size - ptr->feci->size);",
          "11218:  ptr->data = gf_malloc(sizeof(char)*ptr->data_length);",
          "11221:  gf_bs_read_data(bs, ptr->data, ptr->data_length);",
          "11223:  return GF_OK;",
          "",
          "[Removed Lines]",
          "11219:  if (!ptr->data)",
          "11220:      return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "11322:  if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "11352:  GF_TrickPlayBox *ptr = (GF_TrickPlayBox *) s;",
          "11353:  ptr->entry_count = (u32) ptr->size;",
          "11354:  ptr->entries = (GF_TrickPlayBoxEntry *) gf_malloc(ptr->entry_count * sizeof(GF_TrickPlayBoxEntry) );",
          "11357:  for (i=0; i< ptr->entry_count; i++) {",
          "11358:   ptr->entries[i].pic_type = gf_bs_read_int(bs, 2);",
          "",
          "[Removed Lines]",
          "11355:  if (ptr->entries == NULL) return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "11457:  if (!ptr->entries) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "11509:  ptr->mha_config_size = gf_bs_read_u16(bs);",
          "11510:  if (ptr->mha_config_size) {",
          "11511:   ISOM_DECREASE_SIZE(s, ptr->mha_config_size)",
          "11514:   ptr->mha_config = gf_malloc(sizeof(char)*ptr->mha_config_size);",
          "11517:   gf_bs_read_data(bs, ptr->mha_config, ptr->mha_config_size);",
          "11518:  }",
          "11519:  return GF_OK;",
          "",
          "[Removed Lines]",
          "11512:   if (ptr->size < sizeof(char)*ptr->mha_config_size)",
          "11513:       return GF_ISOM_INVALID_FILE;",
          "11515:   if (!ptr->mha_config)",
          "11516:       return GF_OUT_OF_MEM;",
          "",
          "[Added Lines]",
          "11616:   if (!ptr->mha_config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "11561: GF_Box *dvcC_New()",
          "11562: {",
          "11563:  GF_DOVIConfigurationBox *tmp = (GF_DOVIConfigurationBox *)gf_malloc(sizeof(GF_DOVIConfigurationBox));",
          "11565:  memset(tmp, 0, sizeof(GF_DOVIConfigurationBox));",
          "11566:  tmp->type = GF_ISOM_BOX_TYPE_DVCC;",
          "11567:  return (GF_Box *)tmp;",
          "",
          "[Removed Lines]",
          "11564:  if (tmp == NULL) return NULL;",
          "",
          "[Added Lines]",
          "11665:  if (!tmp) return NULL;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "11576: GF_Err dvcC_Read(GF_Box *s, GF_BitStream *bs)",
          "11577: {",
          "11578:  GF_DOVIConfigurationBox *ptr = (GF_DOVIConfigurationBox *)s;",
          "11581:  ptr->DOVIConfig.dv_version_major = gf_bs_read_u8(bs);",
          "11582:  ptr->DOVIConfig.dv_version_minor = gf_bs_read_u8(bs);",
          "11583:  ptr->DOVIConfig.dv_profile = gf_bs_read_int(bs, 7);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11679:  u32 i;",
          "11680:  u32 data[5];",
          "11684:  ISOM_DECREASE_SIZE(ptr, 24)",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "11585:  ptr->DOVIConfig.rpu_present_flag = gf_bs_read_int(bs, 1);",
          "11586:  ptr->DOVIConfig.el_present_flag = gf_bs_read_int(bs, 1);",
          "11587:  ptr->DOVIConfig.bl_present_flag = gf_bs_read_int(bs, 1);",
          "11598:   }",
          "11599:  }",
          "11601:  return GF_OK;",
          "11602: }",
          "",
          "[Removed Lines]",
          "11588:  {",
          "11589:   int i = 0;",
          "11590:   u32 data[5];",
          "11591:   memset(data, 0, sizeof(data));",
          "11592:   gf_bs_read_data(bs, (char*)data, 20);",
          "11593:   for (i = 0; i < 5; ++i) {",
          "11594:    if (data[i] != 0) {",
          "11595:     GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] dvcC reserved bytes are not zero\\n\"));",
          "11597:    }",
          "",
          "[Added Lines]",
          "11693:  memset(data, 0, sizeof(u32)*5);",
          "11694:  gf_bs_read_data(bs, (char*)data, 20);",
          "11695:  for (i = 0; i < 5; ++i) {",
          "11696:   if (data[i] != 0) {",
          "11697:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] dvcC reserved bytes are not zero\\n\"));",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: GF_Err frma_Read(GF_Box *s, GF_BitStream *bs)",
          "128: {",
          "129:  GF_OriginalFormatBox *ptr = (GF_OriginalFormatBox *)s;",
          "130:  ptr->data_format = gf_bs_read_u32(bs);",
          "131:  return GF_OK;",
          "132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: {",
          "171:  GF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *)s;",
          "173:  ptr->scheme_type = gf_bs_read_u32(bs);",
          "174:  ptr->scheme_version = gf_bs_read_u32(bs);",
          "177:  if (ptr->size && (ptr->flags & 0x000001)) {",
          "178:   u32 len = (u32) (ptr->size);",
          "",
          "[Removed Lines]",
          "175:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Added Lines]",
          "174:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426: {",
          "427:  GF_ISMASampleFormatBox *ptr = (GF_ISMASampleFormatBox *)s;",
          "429:  ptr->selective_encryption = gf_bs_read_int(bs, 1);",
          "430:  gf_bs_read_int(bs, 7);",
          "431:  ptr->key_indicator_length = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:  ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:  u16 cid_len, ri_len;",
          "531:  GF_OMADRMCommonHeaderBox *ptr = (GF_OMADRMCommonHeaderBox*)s;",
          "533:  ptr->EncryptionMethod = gf_bs_read_u8(bs);",
          "534:  ptr->PaddingScheme = gf_bs_read_u8(bs);",
          "535:  ptr->PlaintextLength = gf_bs_read_u64(bs);",
          "536:  cid_len = gf_bs_read_u16(bs);",
          "537:  ri_len = gf_bs_read_u16(bs);",
          "538:  ptr->TextualHeadersLen = gf_bs_read_u16(bs);",
          "541:  if (ptr->size<cid_len+ri_len+ptr->TextualHeadersLen) return GF_ISOM_INVALID_FILE;",
          "543:  if (cid_len) {",
          "544:   ptr->ContentID = (char *)gf_malloc(sizeof(char)*(cid_len+1));",
          "545:   gf_bs_read_data(bs, ptr->ContentID, cid_len);",
          "546:   ptr->ContentID[cid_len]=0;",
          "547:  }",
          "549:  if (ri_len) {",
          "550:   ptr->RightsIssuerURL = (char *)gf_malloc(sizeof(char)*(ri_len+1));",
          "551:   gf_bs_read_data(bs, ptr->RightsIssuerURL, ri_len);",
          "552:   ptr->RightsIssuerURL[ri_len]=0;",
          "553:  }",
          "555:  if (ptr->TextualHeadersLen) {",
          "556:   ptr->TextualHeaders = (char *)gf_malloc(sizeof(char)*(ptr->TextualHeadersLen+1));",
          "557:   gf_bs_read_data(bs, ptr->TextualHeaders, ptr->TextualHeadersLen);",
          "558:   ptr->TextualHeaders[ptr->TextualHeadersLen] = 0;",
          "559:  }",
          "",
          "[Removed Lines]",
          "539:  ISOM_DECREASE_SIZE(ptr, (1+1+8+2+2+2) );",
          "",
          "[Added Lines]",
          "535:  ISOM_DECREASE_SIZE(ptr, (1+1+8+2+2+2) );",
          "547:   if (!ptr->ContentID) return GF_OUT_OF_MEM;",
          "554:   if (!ptr->RightsIssuerURL) return GF_OUT_OF_MEM;",
          "561:   if (!ptr->TextualHeaders) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "623:  u16 gid_len;",
          "624:  GF_OMADRMGroupIDBox *ptr = (GF_OMADRMGroupIDBox*)s;",
          "626:  gid_len = gf_bs_read_u16(bs);",
          "627:  ptr->GKEncryptionMethod = gf_bs_read_u8(bs);",
          "628:  ptr->GKLength = gf_bs_read_u16(bs);",
          "632:  if (ptr->size<gid_len+ptr->GKLength) return GF_ISOM_INVALID_FILE;",
          "634:  ptr->GroupID = gf_malloc(sizeof(char)*(gid_len+1));",
          "635:  gf_bs_read_data(bs, ptr->GroupID, gid_len);",
          "636:  ptr->GroupID[gid_len]=0;",
          "638:  ptr->GroupKey = (char *)gf_malloc(sizeof(char)*ptr->GKLength);",
          "639:  gf_bs_read_data(bs, ptr->GroupKey, ptr->GKLength);",
          "640:  ISOM_DECREASE_SIZE(ptr, (gid_len+ptr->GKLength) );",
          "641:  return GF_OK;",
          "",
          "[Removed Lines]",
          "630:  ISOM_DECREASE_SIZE(ptr, (1+2+2) );",
          "",
          "[Added Lines]",
          "631:  ISOM_DECREASE_SIZE(ptr, (1+2+2) );",
          "639:  if (!ptr->GroupID) return GF_OUT_OF_MEM;",
          "644:  if (!ptr->GroupKey) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "770:  ptr->oma_ro_size = (u32) ptr->size;",
          "771:  ptr->oma_ro = (char*) gf_malloc(sizeof(char)*ptr->oma_ro_size);",
          "772:  gf_bs_read_data(bs, ptr->oma_ro, ptr->oma_ro_size);",
          "773:  ptr->size = 0;",
          "774:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:  if (!ptr->oma_ro) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "982: {",
          "983:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "985:  gf_bs_read_u8(bs); //reserved",
          "986:  if (!ptr->version) {",
          "987:   gf_bs_read_u8(bs); //reserved",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "992:  ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "993:  ptr->Per_Sample_IV_Size = gf_bs_read_u8(bs);",
          "994:  gf_bs_read_data(bs, (char *) ptr->KID, 16);",
          "998:  if ((ptr->isProtected == 1) && !ptr->Per_Sample_IV_Size) {",
          "999:   ptr->constant_IV_size = gf_bs_read_u8(bs);",
          "1000:   if (ptr->constant_IV_size > sizeof(ptr->constant_IV))",
          "1001:    return GF_ISOM_INVALID_FILE;",
          "1005:  }",
          "1006:  return GF_OK;",
          "1007: }",
          "",
          "[Removed Lines]",
          "996:  ISOM_DECREASE_SIZE(ptr, 20);",
          "1002:   gf_bs_read_data(bs, (char *) ptr->constant_IV, ptr->constant_IV_size);",
          "1003:   ISOM_DECREASE_SIZE(ptr, (1 + ptr->constant_IV_size) );",
          "",
          "[Added Lines]",
          "1011:   ISOM_DECREASE_SIZE(ptr, (1 + ptr->constant_IV_size) );",
          "1012:   gf_bs_read_data(bs, (char *) ptr->constant_IV, ptr->constant_IV_size);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1060: {",
          "1061:  GF_PIFFTrackEncryptionBox *ptr = (GF_PIFFTrackEncryptionBox*)s;",
          "1065:  ptr->version = gf_bs_read_u8(bs);",
          "1066:  ptr->flags = gf_bs_read_u24(bs);",
          "1069:  ptr->AlgorithmID = gf_bs_read_int(bs, 24);",
          "1070:  ptr->IV_size = gf_bs_read_u8(bs);",
          "1071:  gf_bs_read_data(bs, (char *) ptr->KID, 16);",
          "1073:  return GF_OK;",
          "1074: }",
          "",
          "[Removed Lines]",
          "1063:  if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "1067:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1072:  ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "[Added Lines]",
          "1071:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1076:  ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1125: GF_Err piff_psec_Read(GF_Box *s, GF_BitStream *bs)",
          "1126: {",
          "1127:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *)s;",
          "1130:  ptr->version = gf_bs_read_u8(bs);",
          "1131:  ptr->flags = gf_bs_read_u24(bs);",
          "1134:  if (ptr->flags & 1) {",
          "1135:   ptr->AlgorithmID = gf_bs_read_int(bs, 24);",
          "1136:   ptr->IV_size = gf_bs_read_u8(bs);",
          "1137:   gf_bs_read_data(bs, (char *) ptr->KID, 16);",
          "1139:  }",
          "1140:  if (ptr->IV_size == 0)",
          "1141:   ptr->IV_size = 8; //default to 8",
          "",
          "[Removed Lines]",
          "1128:  if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "1132:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1138:   ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "[Added Lines]",
          "1136:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1142:   ISOM_DECREASE_SIZE(ptr, 20);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1269: {",
          "1270:  GF_PIFFProtectionSystemHeaderBox *ptr = (GF_PIFFProtectionSystemHeaderBox*)s;",
          "1273:  ptr->version = gf_bs_read_u8(bs);",
          "1274:  ptr->flags = gf_bs_read_u24(bs);",
          "1275:  gf_bs_read_data(bs, (char *) ptr->SystemID, 16);",
          "1276:  ptr->private_data_size = gf_bs_read_u32(bs);",
          "1280:  if (ptr->size < sizeof(char)*ptr->private_data_size)",
          "1281:      return GF_ISOM_INVALID_FILE;",
          "1282:  ptr->private_data = gf_malloc(sizeof(char)*ptr->private_data_size);",
          "1283:  if (!ptr->private_data)",
          "1284:      return GF_OUT_OF_MEM;",
          "1286:  ISOM_DECREASE_SIZE(ptr, ptr->private_data_size);",
          "1287:  return GF_OK;",
          "1288: }",
          "",
          "[Removed Lines]",
          "1278:  ISOM_DECREASE_SIZE(ptr, 24);",
          "1285:  gf_bs_read_data(bs, (char *) ptr->private_data, ptr->private_data_size);",
          "",
          "[Added Lines]",
          "1279:  ISOM_DECREASE_SIZE(ptr, 24);",
          "1293:  gf_bs_read_data(bs, (char *) ptr->private_data, ptr->private_data_size);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1355:  if (!senc->samp_aux_info) senc->samp_aux_info = gf_list_new();",
          "1356:  for (i=0; i<count; i++) {",
          "1357:   u32 is_encrypted;",
          "1361:   if (trak) {",
          "1362:    e = gf_isom_get_sample_cenc_info_ex(trak, traf, senc, sample_number, &is_encrypted, &sai->IV_size, NULL, NULL, NULL, NULL, NULL);",
          "",
          "[Removed Lines]",
          "1358:   GF_CENCSampleAuxInfo *sai = (GF_CENCSampleAuxInfo *)gf_malloc(sizeof(GF_CENCSampleAuxInfo));",
          "1359:   memset(sai, 0, sizeof(GF_CENCSampleAuxInfo));",
          "",
          "[Added Lines]",
          "1365:   GF_CENCSampleAuxInfo *sai;",
          "1366:   GF_SAFEALLOC(sai, GF_CENCSampleAuxInfo);",
          "1367:   if (!sai) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1387:    if (senc->flags & 0x00000002) {",
          "1388:     sai->subsample_count = gf_bs_read_u16(bs);",
          "1389:     sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1390:     for (j = 0; j < sai->subsample_count; j++) {",
          "1391:      if (gf_bs_get_size(bs) - gf_bs_get_position(bs) < 6) {",
          "1392:       gf_isom_cenc_samp_aux_info_del(sai);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1398:     if (!sai->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1414: GF_Err senc_Read(GF_Box *s, GF_BitStream *bs)",
          "1415: {",
          "1416:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *)s;",
          "1418:  ptr->version = gf_bs_read_u8(bs);",
          "1419:  ptr->flags = gf_bs_read_u24(bs);",
          "1422:  ptr->bs_offset = gf_bs_get_position(bs);",
          "1423:  gf_bs_skip_bytes(bs, ptr->size);",
          "",
          "[Removed Lines]",
          "1420:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "[Added Lines]",
          "1427:  ISOM_DECREASE_SIZE(ptr, 4);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1725:  len = (u32) ptr->size - 1;",
          "1726:  if (len) {",
          "1728:   ptr->enc_algo = (char *)gf_malloc(len*sizeof(char));",
          "1729:   gf_bs_read_data(bs, ptr->enc_algo, len);",
          "1730:  }",
          "1731:  ptr->key_length = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "1727:   if (ptr->enc_algo) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "1738:   if (!ptr->enc_algo) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1845:  len = (u32) ptr->size;",
          "1846:  if (len) {",
          "1848:   ptr->metadata = (char *)gf_malloc(len*sizeof(char));",
          "1849:   gf_bs_read_data(bs, ptr->metadata, len);",
          "1850:  }",
          "1851:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1847:   if (ptr->metadata) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "1858:   if (!ptr->metadata) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1891: {",
          "1892:  GF_AdobeDRMAUFormatBox *ptr = (GF_AdobeDRMAUFormatBox*)s;",
          "1894:  ptr->selective_enc = gf_bs_read_u8(bs);",
          "1895:  gf_bs_read_u8(bs);//resersed",
          "1896:  ptr->IV_length = gf_bs_read_u8(bs);",
          "1898:  return GF_OK;",
          "1899: }",
          "",
          "[Removed Lines]",
          "1897:  ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "[Added Lines]",
          "1904:  ISOM_DECREASE_SIZE(ptr, 3);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_meta.c||src/isomedia/box_code_meta.c": [
          "File: src/isomedia/box_code_meta.c -> src/isomedia/box_code_meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  u32 item_count, extent_count, i, j;",
          "364:  GF_ItemLocationBox *ptr = (GF_ItemLocationBox *)s;",
          "366:  ptr->offset_size = gf_bs_read_int(bs, 4);",
          "367:  ptr->length_size = gf_bs_read_int(bs, 4);",
          "368:  ptr->base_offset_size = gf_bs_read_int(bs, 4);",
          "369:  if (ptr->version == 1 || ptr->version == 2) {",
          "370:   ptr->index_size = gf_bs_read_int(bs, 4);",
          "373:   gf_bs_read_int(bs, 4);",
          "374:  }",
          "375:  if (ptr->version < 2) {",
          "376:   item_count = gf_bs_read_u16(bs);",
          "379:   item_count = gf_bs_read_u32(bs);",
          "380:  }",
          "381:  for (i = 0; i < item_count; i++) {",
          "382:   GF_ItemLocationEntry *location_entry = (GF_ItemLocationEntry *)gf_malloc(sizeof(GF_ItemLocationEntry));",
          "383:   gf_list_add(ptr->location_entries, location_entry);",
          "384:   if (ptr->version < 2) {",
          "385:    location_entry->item_ID = gf_bs_read_u16(bs);",
          "388:    location_entry->item_ID = gf_bs_read_u32(bs);",
          "389:   }",
          "390:   if (ptr->version == 1 || ptr->version == 2) {",
          "391:    location_entry->construction_method = gf_bs_read_u16(bs);",
          "392:   }",
          "393:   else {",
          "394:    location_entry->construction_method = 0;",
          "395:   }",
          "396:   location_entry->data_reference_index = gf_bs_read_u16(bs);",
          "397:   location_entry->base_offset = gf_bs_read_int(bs, 8*ptr->base_offset_size);",
          "398: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "399:   location_entry->original_base_offset = location_entry->base_offset;",
          "400: #endif",
          "402:   extent_count = gf_bs_read_u16(bs);",
          "403:   location_entry->extent_entries = gf_list_new();",
          "404:   for (j = 0; j < extent_count; j++) {",
          "405:    GF_ItemExtentEntry *extent_entry = (GF_ItemExtentEntry *)gf_malloc(sizeof(GF_ItemExtentEntry));",
          "406:    gf_list_add(location_entry->extent_entries, extent_entry);",
          "407:    if ((ptr->version == 1 || ptr->version == 2) && ptr->index_size > 0) {",
          "408:     extent_entry->extent_index = gf_bs_read_int(bs, 8 * ptr->index_size);",
          "409:    }",
          "410:    else {",
          "411:     extent_entry->extent_index = 0;",
          "412:    }",
          "413:    extent_entry->extent_offset = gf_bs_read_int(bs, 8*ptr->offset_size);",
          "414:    extent_entry->extent_length = gf_bs_read_int(bs, 8*ptr->length_size);",
          "415: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "",
          "[Removed Lines]",
          "371:  }",
          "372:  else {",
          "377:  }",
          "378:  else {",
          "386:   }",
          "387:   else {",
          "",
          "[Added Lines]",
          "366:  ISOM_DECREASE_SIZE(ptr, 2)",
          "372:  } else {",
          "376:   ISOM_DECREASE_SIZE(ptr, 2)",
          "378:  } else {",
          "379:   ISOM_DECREASE_SIZE(ptr, 4)",
          "385:   if (!location_entry) return GF_OUT_OF_MEM;",
          "389:    ISOM_DECREASE_SIZE(ptr, 2)",
          "391:   } else {",
          "392:    ISOM_DECREASE_SIZE(ptr, 4)",
          "396:    ISOM_DECREASE_SIZE(ptr, 2)",
          "402:   ISOM_DECREASE_SIZE(ptr, (2 + ptr->base_offset_size) )",
          "409:   ISOM_DECREASE_SIZE(ptr, 2)",
          "414:    if (!extent_entry) return GF_OUT_OF_MEM;",
          "418:     ISOM_DECREASE_SIZE(ptr, ptr->index_size)",
          "424:    ISOM_DECREASE_SIZE(ptr, (ptr->offset_size+ptr->length_size) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521: GF_Err pitm_Read(GF_Box *s, GF_BitStream *bs)",
          "522: {",
          "523:  GF_PrimaryItemBox *ptr = (GF_PrimaryItemBox *)s;",
          "525:  ptr->item_ID = gf_bs_read_u16(bs);",
          "526:  return GF_OK;",
          "527: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:  ISOM_DECREASE_SIZE(ptr, 2)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "644:  u32 buf_len, i, string_len, string_start;",
          "645:  GF_ItemInfoEntryBox *ptr = (GF_ItemInfoEntryBox *)s;",
          "647:  ptr->item_ID = gf_bs_read_u16(bs);",
          "648:  ptr->item_protection_index = gf_bs_read_u16(bs);",
          "650:  if (ptr->version == 2) {",
          "652:   ISOM_DECREASE_SIZE(ptr, 4);",
          "653:  }",
          "654:  buf_len = (u32) (ptr->size);",
          "655:  buf = (char*)gf_malloc(buf_len);",
          "656:  if (buf_len != gf_bs_read_data(bs, buf, buf_len)) {",
          "657:   gf_free(buf);",
          "658:   return GF_ISOM_INVALID_FILE;",
          "",
          "[Removed Lines]",
          "649:  ISOM_DECREASE_SIZE(ptr, 4);",
          "651:   ptr->item_type = gf_bs_read_u32(bs);",
          "",
          "[Added Lines]",
          "660:  ISOM_DECREASE_SIZE(ptr, 4);",
          "666:   ptr->item_type = gf_bs_read_u32(bs);",
          "670:  if (!buf) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:   if (buf[i] == 0) {",
          "664:    if (!ptr->item_name) {",
          "665:     ptr->item_name = (char*)gf_malloc(sizeof(char)*string_len);",
          "666:     memcpy(ptr->item_name, buf+string_start, string_len);",
          "667:    } else if (!ptr->content_type) {",
          "668:     ptr->content_type = (char*)gf_malloc(sizeof(char)*string_len);",
          "669:     memcpy(ptr->content_type, buf+string_start, string_len);",
          "670:    } else {",
          "671:     ptr->content_encoding = (char*)gf_malloc(sizeof(char)*string_len);",
          "672:     memcpy(ptr->content_encoding, buf+string_start, string_len);",
          "673:    }",
          "674:    string_start += string_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:     if (!ptr->item_name) return GF_OUT_OF_MEM;",
          "685:     if (!ptr->content_type) return GF_OUT_OF_MEM;",
          "689:     if (!ptr->content_encoding) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "926: GF_Err ireftype_Read(GF_Box *s, GF_BitStream *bs)",
          "927: {",
          "929:  u32 i;",
          "930:  GF_ItemReferenceTypeBox *ptr = (GF_ItemReferenceTypeBox *)s;",
          "935:  ptr->from_item_id = gf_bs_read_u16(bs);",
          "936:  ptr->reference_count = gf_bs_read_u16(bs);",
          "937:  ptr->to_item_IDs = (u32 *)gf_malloc(ptr->reference_count * sizeof(u32));",
          "938:  if (!ptr->to_item_IDs) return GF_OUT_OF_MEM;",
          "941:   ptr->to_item_IDs[i] = gf_bs_read_u16(bs);",
          "942:  }",
          "943:  return GF_OK;",
          "",
          "[Removed Lines]",
          "928:  u32 bytesToRead;",
          "932:  bytesToRead = (u32)(ptr->size);",
          "933:  if (!bytesToRead) return GF_OK;",
          "940:  for (i = 0; i < ptr->reference_count; i++) {",
          "",
          "[Added Lines]",
          "949:  ISOM_DECREASE_SIZE(ptr, 4)",
          "952:  if (ptr->size < ptr->reference_count*2)",
          "953:   return GF_ISOM_INVALID_FILE;",
          "958:  for (i=0; i < ptr->reference_count; i++) {",
          "959:   ISOM_DECREASE_SIZE(ptr, 2)",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5018:    fprintf(trace, \"<profile><![CDATA[\");",
          "5019:    size_64 = 2*ptr->opaque_size;",
          "5020:    prof_data_64 = gf_malloc(size_64);",
          "5021:    size_64 = gf_base64_encode((const char *) ptr->opaque, ptr->opaque_size, (char *)prof_data_64, size_64);",
          "5022:    prof_data_64[size_64] = 0;",
          "5023:    fprintf(trace, \"%s\", prof_data_64);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5021:    if (!prof_data_64) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   if (parent_type==GF_ISOM_BOX_TYPE_STSD) {",
          "219:    newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);",
          "220:    ((GF_UnknownBox *)newBox)->original_4cc = type;",
          "221:    newBox->size = size;",
          "222:    gf_bs_seek(bs, payload_start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:    if (!newBox) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1607: {",
          "1608:  if (ptr->registry->max_version_plus_one) {",
          "1609:   GF_FullBox *self = (GF_FullBox *) ptr;",
          "1611:   self->version = gf_bs_read_u8(bs);",
          "1612:   self->flags = gf_bs_read_u24(bs);",
          "1614:  }",
          "1615:  return GF_OK;",
          "1616: }",
          "",
          "[Removed Lines]",
          "1610:   if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "1613:   ptr->size -= 4;",
          "",
          "[Added Lines]",
          "1611:   ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1629:  }",
          "1630:  for (i = 0; i <= nb_versions; i++) {",
          "1631:   a = gf_isom_box_new(box_registry[idx].box_4cc);",
          "1632:   a->registry = &box_registry[idx];",
          "1634:   if (box_registry[idx].alt_4cc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1632:   if (!a) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c": [
          "File: src/isomedia/drm_sample.c -> src/isomedia/drm_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   if (KI_length) {",
          "83:    if (s->dataLength < KI_length) goto exit;",
          "84:    s->key_indicator = (u8 *)gf_malloc(KI_length);",
          "85:    gf_bs_read_data(bs, (char*)s->key_indicator, KI_length);",
          "86:    s->dataLength -= KI_length;",
          "87:   }",
          "88:  }",
          "89:  s->data = (char*)gf_malloc(sizeof(char)*s->dataLength);",
          "90:  gf_bs_read_data(bs, s->data, s->dataLength);",
          "91:  gf_bs_del(bs);",
          "92:  return s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:    if (!s->key_indicator) goto exit;",
          "91:  if (!s->data) goto exit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  }",
          "475:  sinf = (GF_ProtectionSchemeInfoBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SINF);",
          "476:  gf_list_add(sea->protections, sinf);",
          "478:  sinf->scheme_type = (GF_SchemeTypeBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SCHM);",
          "479:  sinf->scheme_type->version = version;",
          "480:  sinf->scheme_type->flags = flags;",
          "481:  sinf->scheme_type->scheme_type = scheme_type;",
          "482:  sinf->scheme_type->scheme_version = scheme_version;",
          "483:  if (sinf->scheme_type->flags == 1 && scheme_uri) {",
          "484:   sinf->scheme_type->URI = (char *)gf_malloc(sizeof(char)*strlen(scheme_uri));",
          "485:   memmove(sinf->scheme_type->URI, scheme_uri, strlen(scheme_uri));",
          "486:  }",
          "488:  sinf->original_format = (GF_OriginalFormatBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_FRMA);",
          "489:  sinf->original_format->data_format = original_format;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  if (!sinf) return GF_OUT_OF_MEM;",
          "482:  if (!sinf->scheme_type) return GF_OUT_OF_MEM;",
          "489:   if (!sinf->scheme_type->URI) return GF_OUT_OF_MEM;",
          "494:  if (!sinf->original_format) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "513:  }",
          "515:  sinf->info->ikms = (GF_ISMAKMSBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IKMS);",
          "516:  sinf->info->ikms->URI = gf_strdup(kms_URI);",
          "518:  sinf->info->isfm = (GF_ISMASampleFormatBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ISFM);",
          "519:  sinf->info->isfm->selective_encryption = selective_encryption;",
          "520:  sinf->info->isfm->key_indicator_length = KI_length;",
          "521:  sinf->info->isfm->IV_length = IV_length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:  if (!sinf->info->ikms) return GF_OUT_OF_MEM;",
          "526:  if (!sinf->info->isfm) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:  if (e) return e;",
          "536:  sinf->info->odkm = (GF_OMADRMKMSBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ODKM);",
          "537:  sinf->info->odkm->fmt = (GF_OMADRMAUFormatBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_ODAF);",
          "538:  sinf->info->odkm->fmt->selective_encryption = selective_encryption;",
          "539:  sinf->info->odkm->fmt->key_indicator_length = KI_length;",
          "540:  sinf->info->odkm->fmt->IV_length = IV_length;",
          "542:  sinf->info->odkm->hdr = (GF_OMADRMCommonHeaderBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_OHDR);",
          "543:  sinf->info->odkm->hdr->EncryptionMethod = encryption_type;",
          "544:  sinf->info->odkm->hdr->PaddingScheme = (encryption_type==0x01) ? 1 : 0;",
          "545:  sinf->info->odkm->hdr->PlaintextLength = plainTextLength;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:  if (!sinf->info->odkm) return GF_OUT_OF_MEM;",
          "547:  if (!sinf->info->odkm->fmt) return GF_OUT_OF_MEM;",
          "553:  if (!sinf->info->odkm->hdr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547:  if (kms_URI) sinf->info->odkm->hdr->RightsIssuerURL = gf_strdup(kms_URI);",
          "548:  if (textual_headers) {",
          "549:   sinf->info->odkm->hdr->TextualHeaders = (char*)gf_malloc(sizeof(char)*textual_headers_len);",
          "550:   memcpy(sinf->info->odkm->hdr->TextualHeaders, textual_headers, sizeof(char)*textual_headers_len);",
          "551:   sinf->info->odkm->hdr->TextualHeadersLen = textual_headers_len;",
          "552:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:   if (!sinf->info->odkm->hdr->TextualHeaders) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "670:  if (scheme_type==GF_ISOM_PIFF_SCHEME) {",
          "671:   sinf->info->piff_tenc = (GF_PIFFTrackEncryptionBox *) gf_isom_box_new(GF_ISOM_BOX_UUID_TENC);",
          "672:   sinf->info->piff_tenc->AlgorithmID = 1;",
          "673:   sinf->info->piff_tenc->IV_size = default_IV_size;",
          "674:   memcpy(sinf->info->piff_tenc->KID, default_KID, 16*sizeof(char));",
          "675:  } else {",
          "676:   sinf->info->tenc = (GF_TrackEncryptionBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_TENC);",
          "678:   sinf->info->tenc->isProtected = default_IsEncrypted;",
          "679:   sinf->info->tenc->Per_Sample_IV_Size = default_IV_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684:   if (!sinf->info->piff_tenc) return GF_OUT_OF_MEM;",
          "690:   if (!sinf->info->tenc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "705:   return GF_BAD_PARAM;",
          "707:  saio = (GF_SampleAuxiliaryInfoOffsetBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SAIO);",
          "708:  saio->aux_info_type = GF_ISOM_CENC_SCHEME;",
          "709:  saio->aux_info_type_parameter = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722:  if (!saio) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "794:  if (use_piff) {",
          "795:   GF_PIFFProtectionSystemHeaderBox *piff_pssh = (GF_PIFFProtectionSystemHeaderBox *)gf_isom_box_new(GF_ISOM_BOX_UUID_PSSH);",
          "796:   if (!piff_pssh)",
          "798:   memmove((char *)piff_pssh->SystemID, systemID, 16);",
          "799:   piff_pssh->version = version;",
          "801:   piff_pssh->private_data_size = len;",
          "803:    piff_pssh->private_data = (u8 *)gf_malloc(piff_pssh->private_data_size*sizeof(char));",
          "804:   memmove((char *)piff_pssh->private_data, data, piff_pssh->private_data_size);",
          "805:   gf_list_add(mp4->moov->other_boxes, piff_pssh);",
          "807:  } else {",
          "808:   GF_ProtectionSystemHeaderBox *pssh = (GF_ProtectionSystemHeaderBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_PSSH);",
          "809:   if (!pssh)",
          "811:   memmove((char *)pssh->SystemID, systemID, 16);",
          "812:   pssh->version = version;",
          "813:   if (version) {",
          "814:    pssh->KID_count = KID_count;",
          "815:    if (KID_count) {",
          "817:     memmove(pssh->KIDs, KIDs, pssh->KID_count*sizeof(bin128));",
          "818:    }",
          "819:   }",
          "820:   pssh->private_data_size = len;",
          "822:    pssh->private_data = (u8 *)gf_malloc(pssh->private_data_size*sizeof(char));",
          "823:   memmove((char *)pssh->private_data, data, pssh->private_data_size);",
          "824:   gf_list_add(mp4->moov->other_boxes, pssh);",
          "825:  }",
          "",
          "[Removed Lines]",
          "797:    return GF_IO_ERR;",
          "802:   if (!piff_pssh->private_data)",
          "810:    return GF_IO_ERR;",
          "816:     if (!pssh->KIDs) pssh->KIDs = (bin128 *)gf_malloc(pssh->KID_count*sizeof(bin128));",
          "821:   if (!pssh->private_data)",
          "",
          "[Added Lines]",
          "812:    return GF_OUT_OF_MEM;",
          "817:   if (!piff_pssh->private_data) {",
          "819:    if (!piff_pssh->private_data) return GF_OUT_OF_MEM;",
          "820:   }",
          "827:    return GF_OUT_OF_MEM;",
          "833:     if (!pssh->KIDs) {",
          "834:      pssh->KIDs = (bin128 *)gf_malloc(pssh->KID_count*sizeof(bin128));",
          "835:      if (!pssh->KIDs) return GF_OUT_OF_MEM;",
          "836:     }",
          "841:   if (!pssh->private_data) {",
          "843:    if (!pssh->private_data) return GF_OUT_OF_MEM;",
          "844:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "996:  u32  i;",
          "997:  if (!senc->cenc_saiz) {",
          "998:   senc->cenc_saiz = (GF_SampleAuxiliaryInfoSizeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SAIZ);",
          "1000:   senc->cenc_saiz->aux_info_type = 0;",
          "1001:   senc->cenc_saiz->aux_info_type_parameter = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:   if (!senc->cenc_saiz) return;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1006:  }",
          "1007:  if (!senc->cenc_saio) {",
          "1008:   senc->cenc_saio = (GF_SampleAuxiliaryInfoOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SAIO);",
          "1010:   senc->cenc_saio->version = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:   if (!senc->cenc_saio) return;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1034:  }",
          "1035: }",
          "1038: {",
          "1039:  u32  i;",
          "1040:  if (!senc->cenc_saiz) {",
          "1041:   senc->cenc_saiz = (GF_SampleAuxiliaryInfoSizeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SAIZ);",
          "1042:   senc->cenc_saiz->aux_info_type = GF_ISOM_CENC_SCHEME;",
          "1043:   senc->cenc_saiz->aux_info_type_parameter = 0;",
          "1044:   if (stbl)",
          "",
          "[Removed Lines]",
          "1037: void gf_isom_cenc_merge_saiz_saio(GF_SampleEncryptionBox *senc, GF_SampleTableBox *stbl, u64 offset, u32 len)",
          "",
          "[Added Lines]",
          "1061: GF_Err gf_isom_cenc_merge_saiz_saio(GF_SampleEncryptionBox *senc, GF_SampleTableBox *stbl, u64 offset, u32 len)",
          "1066:   if (!senc->cenc_saiz) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1046:  }",
          "1047:  if (!senc->cenc_saio) {",
          "1048:   senc->cenc_saio = (GF_SampleAuxiliaryInfoOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SAIO);",
          "1050:   senc->cenc_saio->version = 1;",
          "1051:   senc->cenc_saio->aux_info_type = GF_ISOM_CENC_SCHEME;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:   if (!senc->cenc_saio) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1059:   senc->cenc_saiz->default_sample_info_size = len;",
          "1060:  } else {",
          "1061:   senc->cenc_saiz->sample_info_size = (u8*)gf_realloc(senc->cenc_saiz->sample_info_size, sizeof(u8)*(senc->cenc_saiz->sample_count+1));",
          "1063:   if (senc->cenc_saiz->default_sample_info_size) {",
          "1064:    for (i=0; i<senc->cenc_saiz->sample_count; i++)",
          "1065:     senc->cenc_saiz->sample_info_size[i] = senc->cenc_saiz->default_sample_info_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088:   if (!senc->cenc_saiz->sample_info_size) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1069:   senc->cenc_saiz->sample_count++;",
          "1070:  }",
          "1081: }",
          "",
          "[Removed Lines]",
          "1072:  if (!senc->cenc_saio->entry_count) {",
          "1073:   senc->cenc_saio->offsets_large = (u64 *)gf_malloc(sizeof(u64));",
          "1074:   senc->cenc_saio->offsets_large[0] = offset;",
          "1075:   senc->cenc_saio->entry_count ++;",
          "1076:  } else {",
          "1077:   senc->cenc_saio->offsets_large = (u64*)gf_realloc(senc->cenc_saio->offsets_large, sizeof(u64)*(senc->cenc_saio->entry_count+1));",
          "1078:   senc->cenc_saio->offsets_large[senc->cenc_saio->entry_count] = offset;",
          "1079:   senc->cenc_saio->entry_count++;",
          "1080:  }",
          "",
          "[Added Lines]",
          "1099:  senc->cenc_saio->offsets_large = (u64*)gf_realloc(senc->cenc_saio->offsets_large, sizeof(u64)*(senc->cenc_saio->entry_count+1));",
          "1100:  if (!senc->cenc_saio->offsets_large) return GF_OUT_OF_MEM;",
          "1102:  senc->cenc_saio->offsets_large[senc->cenc_saio->entry_count] = offset;",
          "1103:  senc->cenc_saio->entry_count++;",
          "1104:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1114:    sai->subsample_count = gf_bs_read_u16(bs);",
          "1115:    if (sai->subsample_count) senc->flags = 0x00000002;",
          "1116:    sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1117:    for (i = 0; i < sai->subsample_count; i++) {",
          "1118:     sai->subsamples[i].bytes_clear_data = gf_bs_read_u16(bs);",
          "1119:     sai->subsamples[i].bytes_encrypted_data = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:    if (!sai->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1137:     sai->subsample_count ++;",
          "1138:    }",
          "1139:    sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1140:    olen = len;",
          "1141:    for (i = 0; i < sai->subsample_count; i++) {",
          "1142:     if (olen<0xFFFF) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1166:    if (!sai->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1337:  cur_position = gf_bs_get_position(mdia->information->dataHandler->bs);",
          "1338:  gf_bs_seek(mdia->information->dataHandler->bs, offset);",
          "1339:  buffer = (char *)gf_malloc(size);",
          "1340:  gf_bs_read_data(mdia->information->dataHandler->bs, buffer, size);",
          "1341:  gf_bs_seek(mdia->information->dataHandler->bs, cur_position);",
          "1344:  memset(*sai, 0, sizeof(GF_CENCSampleAuxInfo));",
          "1345:  if (size) {",
          "1346:   bs = gf_bs_new(buffer, size, GF_BITSTREAM_READ);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1368:  if (!buffer) return GF_OUT_OF_MEM;",
          "1374:  if (! *sai) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1348:   if (size > IV_size) {",
          "1349:    (*sai)->subsample_count = gf_bs_read_u16(bs);",
          "1350:    (*sai)->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sizeof(GF_CENCSubSampleEntry)*(*sai)->subsample_count);",
          "1351:    for (i = 0; i < (*sai)->subsample_count; i++) {",
          "1352:     (*sai)->subsamples[i].bytes_clear_data = gf_bs_read_u16(bs);",
          "1353:     (*sai)->subsamples[i].bytes_encrypted_data = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1383:    if (! (*sai)->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1442:   (*sai)->subsample_count = a_sai->subsample_count;",
          "1443:   if ((*sai)->subsample_count > 0) {",
          "1444:    (*sai)->subsamples = (GF_CENCSubSampleEntry*)gf_malloc(sizeof(GF_CENCSubSampleEntry)*(*sai)->subsample_count);",
          "1445:    memmove((*sai)->subsamples, a_sai->subsamples, sizeof(GF_CENCSubSampleEntry)*(*sai)->subsample_count);",
          "1446:   }",
          "1447:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:    if (! (*sai)->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1538: #endif",
          "1540:  sinf->info->adkm = (GF_AdobeDRMKeyManagementSystemBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ADKM);",
          "1542:  sinf->info->adkm->header = (GF_AdobeDRMHeaderBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_AHDR);",
          "1544:  sinf->info->adkm->header->std_enc_params = (GF_AdobeStdEncryptionParamsBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_APRM);",
          "1546:  sinf->info->adkm->header->std_enc_params->enc_info = (GF_AdobeEncryptionInfoBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_AEIB);",
          "1549:  sinf->info->adkm->header->std_enc_params->enc_info->enc_algo = (char *)gf_malloc(8*sizeof(char));",
          "1550:  strncpy(sinf->info->adkm->header->std_enc_params->enc_info->enc_algo, \"AES-CBC\", 7);",
          "1551:  sinf->info->adkm->header->std_enc_params->enc_info->enc_algo[7] = 0;",
          "1552:  sinf->info->adkm->header->std_enc_params->enc_info->key_length = 16;",
          "1554:  sinf->info->adkm->header->std_enc_params->key_info = (GF_AdobeKeyInfoBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_AKEY);",
          "1556:  sinf->info->adkm->header->std_enc_params->key_info->params = (GF_AdobeFlashAccessParamsBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_FLXS);",
          "1557:  if (metadata && len) {",
          "1560:   sinf->info->adkm->header->std_enc_params->key_info->params->metadata = (char *)gf_malloc((len+1)*sizeof(char));",
          "1561:   strncpy(sinf->info->adkm->header->std_enc_params->key_info->params->metadata, metadata, len);",
          "1562:   sinf->info->adkm->header->std_enc_params->key_info->params->metadata[len] = 0;",
          "1563:  }",
          "1565:  sinf->info->adkm->au_format = (GF_AdobeDRMAUFormatBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ADAF);",
          "1566:  sinf->info->adkm->au_format->selective_enc = is_selective_enc ? 0x10 : 0x00;",
          "1567:  sinf->info->adkm->au_format->IV_length = 16;",
          "",
          "[Removed Lines]",
          "1547:  if (sinf->info->adkm->header->std_enc_params->enc_info->enc_algo)",
          "1548:   gf_free(sinf->info->adkm->header->std_enc_params->enc_info->enc_algo);",
          "1558:   if (sinf->info->adkm->header->std_enc_params->key_info->params->metadata)",
          "1559:    gf_free(sinf->info->adkm->header->std_enc_params->key_info->params->metadata);",
          "",
          "[Added Lines]",
          "1576:  if (!sinf->info->adkm) return GF_OUT_OF_MEM;",
          "1579:  if (!sinf->info->adkm->header) return GF_OUT_OF_MEM;",
          "1582:  if (!sinf->info->adkm->header->std_enc_params) return GF_OUT_OF_MEM;",
          "1585:  if (!sinf->info->adkm->header->std_enc_params->enc_info) return GF_OUT_OF_MEM;",
          "1588:  if (!sinf->info->adkm->header->std_enc_params->enc_info->enc_algo) return GF_OUT_OF_MEM;",
          "1595:  if (!sinf->info->adkm->header->std_enc_params->key_info) return GF_OUT_OF_MEM;",
          "1599:  if (!sinf->info->adkm->header->std_enc_params->key_info->params) return GF_OUT_OF_MEM;",
          "1603:   if (!sinf->info->adkm->header->std_enc_params->key_info->params->metadata) return GF_OUT_OF_MEM;",
          "1610:  if (!sinf->info->adkm->au_format) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/hint_track.c||src/isomedia/hint_track.c": [
          "File: src/isomedia/hint_track.c -> src/isomedia/hint_track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:  if (!trak->References) {",
          "124:   if (!trak->References) {",
          "125:    tref = (GF_TrackReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREF);",
          "126:    e = trak_AddBox((GF_Box*)trak, (GF_Box *)tref);",
          "127:    if (e) return e;",
          "128:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:    if (!tref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:  dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "140:  dpnd->reference_type = GF_ISOM_BOX_TYPE_HINT;",
          "141:  e = tref_AddBox((GF_Box*)tref, (GF_Box *) dpnd);",
          "142:  if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:  if (!trak->udta) {",
          "149:   udta = (GF_UserDataBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_UDTA);",
          "150:   e = trak_AddBox((GF_Box*)trak, (GF_Box *) udta);",
          "151:   if (e) return e;",
          "152:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   if (!udta) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:  hdesc = (GF_HintSampleEntryBox *) gf_isom_box_new(GetHintFormat(trak));",
          "189:  if (HintTrackVersion > 0) hdesc->HintTrackVersion = HintTrackVersion;",
          "190:  if (LastCompatibleVersion > 0) hdesc->LastCompatibleVersion = LastCompatibleVersion;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:  if (!hdesc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:  relyA = (GF_RelyHintBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_RELY);",
          "211:  if (Rely == 1) {",
          "212:   relyA->prefered = 1;",
          "213:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:  if (!relyA) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:  }",
          "248:  ent = (GF_TSHintEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TIMS);",
          "249:  ent->timeScale = TimeScale;",
          "250:  return gf_isom_box_add_default((GF_Box*) hdesc, (GF_Box*) ent);",
          "251: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  if (!ent) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "276:  }",
          "278:  ent = (GF_TimeOffHintEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TSRO);",
          "279:  ent->TimeOffset = TimeOffset;",
          "281:  return gf_isom_box_add_default((GF_Box *)hdesc->other_boxes, (GF_Box *)ent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:  if (!ent) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "307:  }",
          "309:  ent = (GF_SeqOffHintEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SNRO);",
          "310:  ent->SeqOffset = SequenceNumberOffset;",
          "311:  return gf_isom_box_add_default((GF_Box *)hdesc->other_boxes, (GF_Box *)ent);",
          "312: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:  if (!ent) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "672:  }",
          "674:  rtpo = (GF_RTPOBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_RTPO);",
          "675:  rtpo->timeOffset = timeOffset;",
          "677:  return gf_list_add(pck->TLV, rtpo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:  if (!rtpo) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "759:  if (!sdp->sdpText) {",
          "760:   sdp->sdpText = (char *)gf_malloc(sizeof(char) * (strlen(text) + 3));",
          "761:   strcpy(sdp->sdpText, text);",
          "762:   strcat(sdp->sdpText, \"\\r\\n\");",
          "763:   return GF_OK;",
          "764:  }",
          "765:  buf = (char *)gf_malloc(sizeof(char) * (strlen(sdp->sdpText) + strlen(text) + 3));",
          "766:  strcpy(buf, sdp->sdpText);",
          "767:  strcat(buf, text);",
          "768:  strcat(buf, \"\\r\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:   if (!sdp->sdpText) return GF_OUT_OF_MEM;",
          "777:  if (!buf) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "839:  if (!hnti->SDP) {",
          "840:   GF_Box *a = gf_isom_box_new_ex(GF_ISOM_BOX_TYPE_RTP, GF_ISOM_BOX_TYPE_HNTI, 0, GF_FALSE);",
          "841:   hnti_AddBox((GF_Box*)hnti, a);",
          "842:  }",
          "843:  rtp = (GF_RTPBox *) hnti->SDP;",
          "845:  if (!rtp->sdpText) {",
          "846:   rtp->sdpText = (char*)gf_malloc(sizeof(char) * (strlen(text) + 3));",
          "847:   strcpy(rtp->sdpText, text);",
          "848:   strcat(rtp->sdpText, \"\\r\\n\");",
          "849:   return GF_OK;",
          "850:  }",
          "851:  buf = (char*)gf_malloc(sizeof(char) * (strlen(rtp->sdpText) + strlen(text) + 3));",
          "852:  strcpy(buf, rtp->sdpText);",
          "853:  strcat(buf, text);",
          "854:  strcat(buf, \"\\r\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:   if (!a) return GF_OUT_OF_MEM;",
          "861:   if (!rtp->sdpText) return GF_OUT_OF_MEM;",
          "868:  if (!buf) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/hinting.c||src/isomedia/hinting.c": [
          "File: src/isomedia/hinting.c -> src/isomedia/hinting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  GF_HintSampleEntryBox *ptr = (GF_HintSampleEntryBox *)s;",
          "57:  if (ptr == NULL) return GF_BAD_PARAM;",
          "61:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "62:  if (e) return e;",
          "",
          "[Removed Lines]",
          "59:  if (ptr->size < 16) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "60:  ISOM_DECREASE_SIZE(ptr, 12)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  ptr->HintTrackVersion = gf_bs_read_u16(bs);",
          "65:  ptr->LastCompatibleVersion = gf_bs_read_u16(bs);",
          "68:  if ((s->type == GF_ISOM_BOX_TYPE_RTP_STSD) || (s->type == GF_ISOM_BOX_TYPE_SRTP_STSD) || (s->type == GF_ISOM_BOX_TYPE_RRTP_STSD) || (s->type == GF_ISOM_BOX_TYPE_RTCP_STSD)) {",
          "69:   ptr->MaxPacketSize = gf_bs_read_u32(bs);",
          "71:  } else if (s->type == GF_ISOM_BOX_TYPE_FDP_STSD) {",
          "72:   ptr->partition_entry_ID = gf_bs_read_u16(bs);",
          "73:   ptr->FEC_overhead = gf_bs_read_u16(bs);",
          "76:  }",
          "77:  return gf_isom_box_array_read(s, bs, gf_isom_box_add_default);",
          "",
          "[Removed Lines]",
          "67:  ptr->size -= 12;",
          "70:   ptr->size -= 4;",
          "74:   ptr->size -= 4;",
          "",
          "[Added Lines]",
          "69:   ISOM_DECREASE_SIZE(ptr, 4)",
          "72:   ISOM_DECREASE_SIZE(ptr, 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  if ((u32)sizeOut < sampleSize) {",
          "221:   ptr->dataLength = sampleSize - (u32)sizeOut;",
          "222:   ptr->AdditionalData = (char*)gf_malloc(sizeof(char) * ptr->dataLength);",
          "223:   gf_bs_read_data(bs, ptr->AdditionalData, ptr->dataLength);",
          "224:  }",
          "225:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:   if (!ptr->AdditionalData) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425: GF_GenericDTE *New_EmptyDTE()",
          "426: {",
          "427:  GF_EmptyDTE *dte = (GF_EmptyDTE *)gf_malloc(sizeof(GF_EmptyDTE));",
          "429:  return (GF_GenericDTE *)dte;",
          "430: }",
          "",
          "[Removed Lines]",
          "428:  dte->source = 0;",
          "",
          "[Added Lines]",
          "429:  if (dte) dte->source = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "443: GF_GenericDTE *New_SampleDTE()",
          "444: {",
          "445:  GF_SampleDTE *dte = (GF_SampleDTE *)gf_malloc(sizeof(GF_SampleDTE));",
          "446:  dte->source = 2;",
          "448:  dte->trackRefIndex = (s8) -2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:  if (!dte) return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "457: GF_GenericDTE *New_StreamDescDTE()",
          "458: {",
          "459:  GF_StreamDescDTE *dte = (GF_StreamDescDTE *)gf_malloc(sizeof(GF_StreamDescDTE));",
          "460:  dte->source = 3;",
          "461:  dte->byteOffset = 0;",
          "462:  dte->dataLength = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:  if (!dte) return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "924:   return GF_ISOM_INVALID_MEDIA;",
          "925:  }",
          "926:  ptr->data = gf_malloc(sizeof(char) * ptr->length);",
          "927:  gf_bs_read_data(bs, ptr->data, ptr->length);",
          "928:  return GF_OK;",
          "929: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "930:  if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/iff.c||src/isomedia/iff.c": [
          "File: src/isomedia/iff.c -> src/isomedia/iff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: {",
          "103:  GF_ColourInformationBox *p = (GF_ColourInformationBox *)s;",
          "105:  p->colour_type = gf_bs_read_u32(bs);",
          "107:  switch (p->colour_type) {",
          "108:  case GF_ISOM_SUBTYPE_NCLX:",
          "109:   p->colour_primaries = gf_bs_read_u16(bs);",
          "110:   p->transfer_characteristics = gf_bs_read_u16(bs);",
          "111:   p->matrix_coefficients = gf_bs_read_u16(bs);",
          "112:   p->full_range_flag = (gf_bs_read_u8(bs) & 0x80 ? GF_TRUE : GF_FALSE);",
          "113:   break;",
          "114:  case GF_ISOM_SUBTYPE_NCLC:",
          "115:   p->colour_primaries = gf_bs_read_u16(bs);",
          "116:   p->transfer_characteristics = gf_bs_read_u16(bs);",
          "117:   p->matrix_coefficients = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "106:  p->size -= 4;",
          "",
          "[Added Lines]",
          "105:  ISOM_DECREASE_SIZE(p, 4)",
          "109:   ISOM_DECREASE_SIZE(p, 7)",
          "116:   ISOM_DECREASE_SIZE(p, 6)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   p->opaque = gf_malloc(sizeof(u8)*(size_t)p->size);",
          "121:   p->opaque_size = (u32) p->size;",
          "122:   gf_bs_read_data(bs, (char *) p->opaque, p->opaque_size);",
          "123:   break;",
          "124:  }",
          "125:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   p->size = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   p->num_channels = gf_bs_read_u8(bs);",
          "198:   p->bits_per_channel = (u8 *)gf_malloc(p->num_channels);",
          "199:   for (i = 0; i < p->num_channels; i++) {",
          "200:    p->bits_per_channel[i] = gf_bs_read_u8(bs);",
          "201:   }",
          "202:   return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:    ISOM_DECREASE_SIZE(p, 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489:  GF_ItemPropertyAssociationBox *p = (GF_ItemPropertyAssociationBox *)s;",
          "490:  u32 entry_count, association_count;",
          "492:  entry_count = gf_bs_read_u32(bs);",
          "493:  for (i = 0; i < entry_count; i++) {",
          "494:   GF_ItemPropertyAssociationEntry *entry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:  ISOM_DECREASE_SIZE(p, 4)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "498:   entry->property_index = gf_list_new();",
          "499:   gf_list_add(p->entries, entry);",
          "500:   if (p->version == 0) {",
          "501:    entry->item_id = gf_bs_read_u16(bs);",
          "502:   } else {",
          "503:    entry->item_id = gf_bs_read_u32(bs);",
          "504:   }",
          "505:   association_count = gf_bs_read_u8(bs);",
          "506:   for (j = 0; j < association_count; j++) {",
          "509:    if (p->flags & 1) {",
          "510:     u16 tmp = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "507:    Bool *ess = (Bool *)gf_malloc(sizeof(Bool));",
          "508:    u32 *prop_index = (u32 *)gf_malloc(sizeof(u32));",
          "",
          "[Added Lines]",
          "506:    ISOM_DECREASE_SIZE(p, 3)",
          "509:    ISOM_DECREASE_SIZE(p, 5)",
          "514:    Bool *ess;",
          "515:    u32 *prop_index;",
          "516:    ISOM_DECREASE_SIZE(p, ((p->flags & 1) ? 2 : 1))",
          "518:    ess = (Bool *)gf_malloc(sizeof(Bool));",
          "519:    prop_index = (u32 *)gf_malloc(sizeof(u32));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "629: GF_Err grptype_Read(GF_Box *s, GF_BitStream *bs)",
          "630: {",
          "632:  u32 i;",
          "633:  GF_EntityToGroupTypeBox *ptr = (GF_EntityToGroupTypeBox *)s;",
          "637:  ptr->group_id = gf_bs_read_u32(bs);",
          "638:  ptr->entity_id_count = gf_bs_read_u32(bs);",
          "640:  if (ptr->entity_id_count*4 > ptr->size) return GF_ISOM_INVALID_FILE;",
          "642:  ptr->entity_ids = (u32 *) gf_malloc(ptr->entity_id_count * sizeof(u32));",
          "",
          "[Removed Lines]",
          "631:  u32 bytesToRead;",
          "635:  bytesToRead = (u32) (ptr->size);",
          "636:  if (!bytesToRead) return GF_OK;",
          "639:  ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "[Added Lines]",
          "645:  ISOM_DECREASE_SIZE(ptr, 8)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "878: GF_Err clli_Read(GF_Box *s, GF_BitStream *bs)",
          "879: {",
          "880:  GF_ContentLightLevelBox *p = (GF_ContentLightLevelBox *)s;",
          "881:  p->max_content_light_level = gf_bs_read_u16(bs);",
          "882:  p->max_pic_average_light_level = gf_bs_read_u16(bs);",
          "883:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890:  ISOM_DECREASE_SIZE(p, 4)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "922: {",
          "923:  int c = 0;",
          "924:  GF_MasteringDisplayColourVolumeBox *p = (GF_MasteringDisplayColourVolumeBox *)s;",
          "925:  for (c = 0; c<3; c++) {",
          "926:   p->display_primaries[c].x = gf_bs_read_u16(bs);",
          "927:   p->display_primaries[c].y = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "935:  ISOM_DECREASE_SIZE(p, 24)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1046:   case GF_ISOM_SUBTYPE_AVC4_H264:",
          "1048:    config_box = gf_isom_box_new(GF_ISOM_BOX_TYPE_AVCC);",
          "1049:    ((GF_AVCConfigurationBox *)config_box)->config = gf_isom_avc_config_get(movie, imported_track, imported_sample_desc_index);",
          "1050:    item_type = GF_ISOM_SUBTYPE_AVC_H264;",
          "1051:    config_needed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1060:    if (!config_box) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1056:    break;",
          "1057:   case GF_ISOM_SUBTYPE_SVC_H264:",
          "1058:    config_box = gf_isom_box_new(GF_ISOM_BOX_TYPE_SVCC);",
          "1059:    ((GF_AVCConfigurationBox *)config_box)->config = gf_isom_svc_config_get(movie, imported_track, imported_sample_desc_index);",
          "1060:    item_type = GF_ISOM_SUBTYPE_SVC_H264;",
          "1061:    config_needed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1071:    if (!config_box) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1066:    break;",
          "1067:   case GF_ISOM_SUBTYPE_MVC_H264:",
          "1068:    config_box = gf_isom_box_new(GF_ISOM_BOX_TYPE_MVCC);",
          "1069:    ((GF_AVCConfigurationBox *)config_box)->config = gf_isom_mvc_config_get(movie, imported_track, imported_sample_desc_index);",
          "1070:    item_type = GF_ISOM_SUBTYPE_MVC_H264;",
          "1071:    config_needed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:    if (!config_box) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1082:   case GF_ISOM_SUBTYPE_LHV1:",
          "1083:   case GF_ISOM_SUBTYPE_LHE1:",
          "1084:    config_box = gf_isom_box_new(GF_ISOM_BOX_TYPE_HVCC);",
          "1085:    ((GF_HEVCConfigurationBox *)config_box)->config = gf_isom_hevc_config_get(movie, imported_track, imported_sample_desc_index);",
          "1086:    if (subtype == GF_ISOM_SUBTYPE_HVT1) {",
          "1087:     item_type = GF_ISOM_SUBTYPE_HVT1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1099:    if (!config_box) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1103:   case GF_ISOM_SUBTYPE_AV01:",
          "1104:    {",
          "1105:     config_box = gf_isom_box_new(GF_ISOM_BOX_TYPE_AV1C);",
          "1106:     ((GF_AV1ConfigurationBox *)config_box)->config = gf_isom_av1_config_get(movie, imported_track, imported_sample_desc_index);",
          "1107:     item_type = GF_ISOM_SUBTYPE_AV01;",
          "1108:     config_needed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:     if (!config_box) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   while ((a = (GF_Box *)gf_list_enum(moof->other_boxes, &i))) {",
          "105:    if (a->type == GF_ISOM_BOX_TYPE_PSSH) {",
          "106:     GF_ProtectionSystemHeaderBox *pssh = (GF_ProtectionSystemHeaderBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_PSSH);",
          "107:     memmove(pssh->SystemID, ((GF_ProtectionSystemHeaderBox *)a)->SystemID, 16);",
          "108:     if (((GF_ProtectionSystemHeaderBox *)a)->KIDs && ((GF_ProtectionSystemHeaderBox *)a)->KID_count > 0) {",
          "109:      pssh->KID_count = ((GF_ProtectionSystemHeaderBox *)a)->KID_count;",
          "110:      pssh->KIDs = (bin128 *)gf_malloc(pssh->KID_count*sizeof(bin128));",
          "111:      memmove(pssh->KIDs, ((GF_ProtectionSystemHeaderBox *)a)->KIDs, pssh->KID_count*sizeof(bin128));",
          "112:     }",
          "113:     pssh->private_data_size = ((GF_ProtectionSystemHeaderBox *)a)->private_data_size;",
          "114:     pssh->private_data = (u8 *)gf_malloc(pssh->private_data_size*sizeof(char));",
          "115:     memmove(pssh->private_data, ((GF_ProtectionSystemHeaderBox *)a)->private_data, pssh->private_data_size);",
          "117:     if (!mov->moov->other_boxes) mov->moov->other_boxes = gf_list_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     if (!pssh) return GF_OUT_OF_MEM;",
          "112:      if (!pssh->KIDs) return GF_OUT_OF_MEM;",
          "118:     if (!pssh->private_data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:    else if (!mov->mdat && (mov->openMode != GF_ISOM_OPEN_READ) && (mov->openMode != GF_ISOM_OPEN_CAT_FRAGMENTS)) {",
          "297:     gf_isom_box_del(a);",
          "298:     mov->mdat = (GF_MediaDataBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDAT);",
          "299:     e = gf_list_add(mov->TopBoxes, mov->mdat);",
          "300:     if (e) {",
          "301:      return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     if (!mov->mdat) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:  if (!mov->mdat && (mov->openMode != GF_ISOM_OPEN_READ) && (mov->openMode != GF_ISOM_OPEN_CAT_FRAGMENTS)) {",
          "512:   mov->mdat = (GF_MediaDataBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDAT);",
          "513:   e = gf_list_add(mov->TopBoxes, mov->mdat);",
          "514:   if (e) return e;",
          "515:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:   if (!mov->mdat) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "940: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "943: {",
          "944:  u64 now;",
          "945:  GF_MovieHeaderBox *mvhd;",
          "949:  file->moov = (GF_MovieBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MOOV);",
          "950:  file->moov->mov = file;",
          "952:  now = gf_isom_get_mp4time();",
          "953:  mvhd = (GF_MovieHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MVHD);",
          "954:  mvhd->creationTime = now;",
          "955:  if (!file->keep_utc)",
          "956:   mvhd->modificationTime = now;",
          "",
          "[Removed Lines]",
          "942: void gf_isom_insert_moov(GF_ISOFile *file)",
          "946:  if (file->moov) return;",
          "",
          "[Added Lines]",
          "948: GF_Err gf_isom_insert_moov(GF_ISOFile *file)",
          "952:  if (file->moov) return GF_OK;",
          "956:  if (!file->moov) return GF_OUT_OF_MEM;",
          "961:  if (!mvhd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "961:  file->interleavingTime = mvhd->timeScale;",
          "962:  moov_AddBox((GF_Box*)file->moov, (GF_Box *)mvhd);",
          "963:  gf_list_add(file->TopBoxes, file->moov);",
          "964: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1003:  mov->mdat = (GF_MediaDataBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDAT);",
          "1004:  gf_list_add(mov->TopBoxes, mov->mdat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013:  if (!mov->mdat) {",
          "1014:   gf_isom_set_last_error(NULL, GF_OUT_OF_MEM);",
          "1015:   gf_isom_delete_movie(mov);",
          "1016:   return NULL;",
          "1017:  }",
          "",
          "---------------"
        ],
        "src/isomedia/isom_read.c||src/isomedia/isom_read.c": [
          "File: src/isomedia/isom_read.c -> src/isomedia/isom_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:  }",
          "214:  file->moov = (GF_MovieBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MOOV);",
          "215:  file->moov->mov = file;",
          "216:  file->is_smooth = GF_TRUE;",
          "217:  file->moov->mvhd = (GF_MovieHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MVHD);",
          "218:  file->moov->mvhd->timeScale = timescale;",
          "219:  file->moov->mvex = (GF_MovieExtendsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MVEX);",
          "220:  trex = (GF_TrackExtendsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREX);",
          "221:  trex->def_sample_desc_index = 1;",
          "222:  trex->trackID = 1;",
          "223:  gf_list_add(file->moov->mvex->TrackExList, trex);",
          "225:  trak = (GF_TrackBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRAK);",
          "226:  trak->moov = file->moov;",
          "227:  gf_list_add(file->moov->trackList, trak);",
          "229:  trak->Header = (GF_TrackHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TKHD);",
          "230:  trak->Header->trackID = 1;",
          "231:  trak->Header->flags |= 1;",
          "232:  trak->Header->width = width;",
          "233:  trak->Header->height = height;",
          "235:  trak->Media = (GF_MediaBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDIA);",
          "236:  trak->Media->mediaTrack = trak;",
          "237:  trak->Media->mediaHeader = (GF_MediaHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDHD);",
          "238:  trak->Media->mediaHeader->timeScale = timescale;",
          "240:  trak->Media->handler = (GF_HandlerBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_HDLR);",
          "242:  trak->Media->handler->handlerType = width ? GF_ISOM_MEDIA_VISUAL : GF_ISOM_MEDIA_AUDIO;",
          "244:  trak->Media->information = (GF_MediaInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MINF);",
          "245:  trak->Media->information->sampleTable = (GF_SampleTableBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STBL);",
          "246:  trak->Media->information->sampleTable->SampleSize = (GF_SampleSizeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSZ);",
          "247:  trak->Media->information->sampleTable->TimeToSample = (GF_TimeToSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STTS);",
          "248:  trak->Media->information->sampleTable->ChunkOffset = (GF_Box *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STCO);",
          "249:  trak->Media->information->sampleTable->SampleToChunk = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "250:  trak->Media->information->sampleTable->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "252:  trak->Media->information->sampleTable->SampleDescription = (GF_SampleDescriptionBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSD);",
          "254:  trak->dts_at_seg_start = tfdt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:  if (!file->moov) return GF_OUT_OF_MEM;",
          "219:  if (!file->moov->mvhd) return GF_OUT_OF_MEM;",
          "222:  if (!file->moov->mvex) return GF_OUT_OF_MEM;",
          "224:  if (!trex) return GF_OUT_OF_MEM;",
          "230:  if (!trak) return GF_OUT_OF_MEM;",
          "235:  if (!trak->Header) return GF_OUT_OF_MEM;",
          "242:  if (!trak->Media) return GF_OUT_OF_MEM;",
          "245:  if (!trak->Media->mediaHeader) return GF_OUT_OF_MEM;",
          "249:  if (!trak->Media->handler) return GF_OUT_OF_MEM;",
          "254:  if (!trak->Media->information) return GF_OUT_OF_MEM;",
          "256:  if (!trak->Media->information->sampleTable) return GF_OUT_OF_MEM;",
          "258:  if (!trak->Media->information->sampleTable->SampleSize) return GF_OUT_OF_MEM;",
          "260:  if (!trak->Media->information->sampleTable->TimeToSample) return GF_OUT_OF_MEM;",
          "262:  if (!trak->Media->information->sampleTable->ChunkOffset) return GF_OUT_OF_MEM;",
          "264:  if (!trak->Media->information->sampleTable->SampleToChunk) return GF_OUT_OF_MEM;",
          "266:  if (!trak->Media->information->sampleTable->SyncSample) return GF_OUT_OF_MEM;",
          "269:  if (!trak->Media->information->sampleTable->SampleDescription) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   u32 pos = 0;",
          "259:   u32 end, sc_size=0;",
          "260:   GF_MPEGVisualSampleEntryBox *avc =  (GF_MPEGVisualSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_AVC1);",
          "261:   avc->avc_config =  (GF_AVCConfigurationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_AVCC);",
          "263:   avc->Width = width;",
          "264:   avc->Height = height;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   if (!avc) return GF_OUT_OF_MEM;",
          "280:   if (!avc->avc_config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:    GF_SAFEALLOC(slc, GF_AVCConfigSlot);",
          "282:    slc->size = end;",
          "283:    slc->data = gf_malloc(sizeof(char)*slc->size);",
          "284:    memcpy(slc->data, nal, sizeof(char)*slc->size);",
          "286:    nal_type = nal[0] & 0x1F;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:    if (!slc->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "312: #endif",
          "314:   GF_MPEGAudioSampleEntryBox *aac =  (GF_MPEGAudioSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MP4A);",
          "315:   aac->esd = (GF_ESDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_ESDS);",
          "316:   aac->esd->desc = gf_odf_desc_esd_new(2);",
          "317: #ifndef GPAC_DISABLE_AV_PARSERS",
          "318:   memset(&aacinfo, 0, sizeof(GF_M4ADecSpecInfo));",
          "319:   aacinfo.nb_chan = nb_channels;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:   if (!aac) return GF_OUT_OF_MEM;",
          "337:   if (!aac->esd) return GF_OUT_OF_MEM;",
          "339:   if (!aac->esd->desc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "471:    if (movie->mfra) {",
          "472:     if (!movie->mfra->mfro)",
          "473:      movie->mfra->mfro = (GF_MovieFragmentRandomAccessOffsetBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_MFRO);",
          "475:     e = gf_isom_box_size((GF_Box *)movie->mfra);",
          "476:     if (e) return e;",
          "477:     movie->mfra->mfro->container_size = (u32) movie->mfra->size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:     if (!movie->mfra->mfro) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "542:  switch (movie->moov->iods->descriptor->tag) {",
          "543:  case GF_ODF_ISOM_OD_TAG:",
          "544:   od = (GF_ObjectDescriptor*)gf_malloc(sizeof(GF_ObjectDescriptor));",
          "545:   memset(od, 0, sizeof(GF_ObjectDescriptor));",
          "546:   od->ESDescriptors = gf_list_new();",
          "547:   useIOD = 0;",
          "548:   break;",
          "549:  case GF_ODF_ISOM_IOD_TAG:",
          "550:   iod = (GF_InitialObjectDescriptor*)gf_malloc(sizeof(GF_InitialObjectDescriptor));",
          "551:   memset(iod, 0, sizeof(GF_InitialObjectDescriptor));",
          "552:   iod->ESDescriptors = gf_list_new();",
          "553:   useIOD = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:   if (!od) return NULL;",
          "577:   if (!iod) return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1242:  if (!wm) return GF_NOT_SUPPORTED;",
          "1245:  memcpy(*data, wm->data, wm->dataSize);",
          "1247:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1273:  if (! *data) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/isom_store.c||src/isomedia/isom_store.c": [
          "File: src/isomedia/isom_store.c -> src/isomedia/isom_store.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  }",
          "107: }",
          "110: {",
          "111:  u32 i;",
          "112:  TrackWriter *writer;",
          "",
          "[Removed Lines]",
          "109: void ResetWriters(GF_List *writers)",
          "",
          "[Added Lines]",
          "109: GF_Err ResetWriters(GF_List *writers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   writer->sampleNumber = 1;",
          "120:   gf_isom_box_del((GF_Box *)writer->stsc);",
          "121:   writer->stsc = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "122:   if (writer->stco->type == GF_ISOM_BOX_TYPE_STCO) {",
          "123:    gf_free(((GF_ChunkOffsetBox *)writer->stco)->offsets);",
          "124:    ((GF_ChunkOffsetBox *)writer->stco)->offsets = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   if (!writer->stsc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:    ((GF_ChunkLargeOffsetBox *)writer->stco)->alloc_size = 0;",
          "132:   }",
          "133:  }",
          "134: }",
          "136: GF_Err SetupWriters(MovieWriter *mw, GF_List *writers, u8 interleaving)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:    writer->constant_size = writer->constant_dur = 0;",
          "172:   writer->stsc = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "173:   if (writer->stbl->ChunkOffset->type == GF_ISOM_BOX_TYPE_STCO) {",
          "174:    writer->stco = gf_isom_box_new(GF_ISOM_BOX_TYPE_STCO);",
          "175:   } else {",
          "176:    writer->stco = gf_isom_box_new(GF_ISOM_BOX_TYPE_CO64);",
          "177:   }",
          "179:   if (interleaving) writer->stbl->MaxSamplePerChunk = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   if (!writer->stsc) return GF_OUT_OF_MEM;",
          "181:   if (!writer->stco) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/isom_write.c||src/isomedia/isom_write.c": [
          "File: src/isomedia/isom_write.c -> src/isomedia/isom_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  ((GF_IsomObjectDescriptor *)od)->objectDescriptorID = 1;",
          "114:  iods = (GF_ObjectDescriptorBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_IODS);",
          "115:  iods->descriptor = od;",
          "116:  return moov_AddBox((GF_Box*)moov, (GF_Box *)iods);",
          "117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:  if (!iods) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "127:  if (e) return e;",
          "130:  if (!movie->moov->iods) AddMovieIOD(movie->moov, 0);",
          "",
          "[Removed Lines]",
          "128:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "129:  e = gf_isom_insert_moov(movie);",
          "130:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:   }",
          "290:   if (!elng && (strlen(code) > 3)) {",
          "291:    elng = (GF_ExtendedLanguageBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ELNG);",
          "292:    if (!count) {",
          "293:     trak->Media->other_boxes = gf_list_new();",
          "294:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:    if (!elng) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306:  return GF_OK;",
          "307: }",
          "310: {",
          "311:  GF_IsomInitialObjectDescriptor *iod;",
          "312:  GF_IsomObjectDescriptor *od;",
          "315:  if (!movie->moov->iods) {",
          "316:   AddMovieIOD(movie->moov, 1);",
          "318:  }",
          "321:  od = (GF_IsomObjectDescriptor *) movie->moov->iods->descriptor;",
          "322:  iod = (GF_IsomInitialObjectDescriptor*)gf_malloc(sizeof(GF_IsomInitialObjectDescriptor));",
          "323:  memset(iod, 0, sizeof(GF_IsomInitialObjectDescriptor));",
          "325:  iod->ES_ID_IncDescriptors = od->ES_ID_IncDescriptors;",
          "",
          "[Removed Lines]",
          "309: static void gf_isom_set_root_iod(GF_ISOFile *movie)",
          "314:  gf_isom_insert_moov(movie);",
          "317:   return;",
          "320:  if (movie->moov->iods->descriptor->tag == GF_ODF_ISOM_IOD_TAG) return;",
          "",
          "[Added Lines]",
          "312: static GF_Err gf_isom_set_root_iod(GF_ISOFile *movie)",
          "316:  GF_Err e;",
          "318:  e = gf_isom_insert_moov(movie);",
          "319:  if (e) return e;",
          "322:   return GF_OK;",
          "325:  if (movie->moov->iods->descriptor->tag == GF_ODF_ISOM_IOD_TAG) return GF_OK;",
          "328:  if (!iod) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:  gf_odf_desc_del((GF_Descriptor *) od);",
          "341:  movie->moov->iods->descriptor = (GF_Descriptor *)iod;",
          "342: }",
          "344: GF_EXPORT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "350:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "351:  if (e) return e;",
          "354:  if (!movie->moov->iods) AddMovieIOD(movie->moov, 0);",
          "355:  if (!movie->moov->iods) return GF_OUT_OF_MEM;",
          "358:  desc = movie->moov->iods->descriptor;",
          "",
          "[Removed Lines]",
          "352:  gf_isom_insert_moov(movie);",
          "356:  if (theDesc->tag==GF_ODF_IPMP_TL_TAG) gf_isom_set_root_iod(movie);",
          "",
          "[Added Lines]",
          "360:  e = gf_isom_insert_moov(movie);",
          "361:  if (e) return e;",
          "365:  if (theDesc->tag==GF_ODF_IPMP_TL_TAG) {",
          "366:   e = gf_isom_set_root_iod(movie);",
          "367:   if (e) return e;",
          "368:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "384:  GF_Err e;",
          "385:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "386:  if (e) return e;",
          "389:  if (movie->moov->mvhd->timeScale == timeScale) return GF_OK;",
          "",
          "[Removed Lines]",
          "387:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "399:  e = gf_isom_insert_moov(movie);",
          "400:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "426:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "427:  if (e) return e;",
          "430:  iod = (GF_IsomInitialObjectDescriptor *)movie->moov->iods->descriptor;",
          "432:  switch (PL_Code) {",
          "",
          "[Removed Lines]",
          "429:  gf_isom_set_root_iod(movie);",
          "",
          "[Added Lines]",
          "442:  e = gf_isom_set_root_iod(movie);",
          "443:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "459:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "460:  if (e) return e;",
          "463:  if (!movie->moov->iods) AddMovieIOD(movie->moov, 0);",
          "464:  if (!movie->moov->iods) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "462:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "477:  e = gf_isom_insert_moov(movie);",
          "478:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "482:  GF_Err e;",
          "483:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "484:  if (e) return e;",
          "487:  if (!movie->moov->iods) AddMovieIOD(movie->moov, 0);",
          "488:  if (!movie->moov->iods) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "485:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "501:  e = gf_isom_insert_moov(movie);",
          "502:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "521:   gf_isom_set_last_error(movie, e);",
          "522:   return 0;",
          "523:  }",
          "527:  isHint = 0;",
          "",
          "[Removed Lines]",
          "524:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "541:  e = gf_isom_insert_moov(movie);",
          "542:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1228:  if (!trak->References) {",
          "1229:   tref = (GF_TrackReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREF);",
          "1230:   e = trak_AddBox((GF_Box*)trak, (GF_Box *)tref);",
          "1231:   if (e) return e;",
          "1232:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1248:   if (!tref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1237:  if (!dpnd) {",
          "1238:   tmpRef = 0;",
          "1239:   dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "1240:   dpnd->reference_type = GF_ISOM_BOX_TYPE_IPIR;",
          "1241:   e = tref_AddBox((GF_Box*)tref, (GF_Box *) dpnd);",
          "1242:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259:   if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1410:   return GF_OK;",
          "1411:  }",
          "1412:  if (!vent->pasp) vent->pasp = (GF_PixelAspectRatioBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_PASP);",
          "1414:  vent->pasp->hSpacing = hSpacing;",
          "1415:  vent->pasp->vSpacing = vSpacing;",
          "1416:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1433:  if (!vent->pasp) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1451:  }",
          "1452:  if (!clr) {",
          "1453:   clr = (GF_ColourInformationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_COLR);",
          "1454:   ((GF_MPEGVisualSampleEntryBox *)entry)->colr = clr;",
          "1455:  }",
          "1456:  clr->colour_type = colour_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1474:   if (!clr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1465:   clr->opaque_size = icc_data ? icc_size : 0;",
          "1466:   if (clr->opaque_size) {",
          "1467:    clr->opaque = gf_malloc(sizeof(char)*clr->opaque_size);",
          "1468:    memcpy(clr->opaque, icc_data, sizeof(char)*clr->opaque_size);",
          "1469:   }",
          "1470:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:    if (!clr->opaque) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1506:  }",
          "1507:  if (!dovi) {",
          "1508:   dovi = (GF_DOVIConfigurationBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_DVCC);",
          "1509:   ((GF_MPEGVisualSampleEntryBox*)entry)->dovi_config = dovi;",
          "1510:  }",
          "1511:  entry->type = GF_ISOM_BOX_TYPE_DVHE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1531:   if (!dovi) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1548:  if (!vent->mdcv) vent->mdcv = (GF_MasteringDisplayColourVolumeBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_MDCV);",
          "1549:  for (i = 0; i < 3; ++i) {",
          "1550:   vent->mdcv->display_primaries[i].x = mdcv->display_primaries[i].x;",
          "1551:   vent->mdcv->display_primaries[i].y = mdcv->display_primaries[i].y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1572:  if (!vent->mdcv) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1559:  if (!vent->clli) vent->clli = (GF_ContentLightLevelBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_CLLI);",
          "1560:  vent->clli->max_content_light_level = clli->max_content_light_level;",
          "1561:  vent->clli->max_pic_average_light_level = clli->max_pic_average_light_level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:  if (!vent->clli) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1597:   return GF_OK;",
          "1598:  }",
          "1599:  if (!vent->clap) vent->clap = (GF_CleanApertureBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_CLAP);",
          "1600:  vent->clap->cleanApertureWidthN = cleanApertureWidthN;",
          "1601:  vent->clap->cleanApertureWidthD = cleanApertureWidthD;",
          "1602:  vent->clap->cleanApertureHeightN = cleanApertureHeightN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:  if (!vent->clap) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1751:   return GF_OK;",
          "1752:  }",
          "1753:  if (!vent->ccst) vent->ccst = (GF_CodingConstraintsBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_CCST);",
          "1754:  vent->ccst->all_ref_pics_intra = all_ref_pics_intra;",
          "1755:  vent->ccst->intra_pred_used = intra_pred_used;",
          "1756:  vent->ccst->max_ref_per_pic = max_ref_per_pic;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:  if (!vent->ccst) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1791:   return GF_OK;",
          "1792:  }",
          "1793:  if (!vent->auxi) vent->auxi = (GF_AuxiliaryTypeInfoBox*)gf_isom_box_new(GF_ISOM_BOX_TYPE_AUXI);",
          "1794:  vent->auxi->aux_track_type = gf_strdup(\"urn:mpeg:mpegB:cicp:systems:auxiliary:alpha\");",
          "1795:  return GF_OK;",
          "1796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1821:  if (!vent->auxi) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2221:     gf_list_rem(trak->References->other_boxes, j);",
          "2222:    } else {",
          "2223:     newRefs = (u32*)gf_malloc(sizeof(u32) * (tref->trackIDCount - found));",
          "2224:     found = 0;",
          "2225:     for (k = 0; k < tref->trackIDCount; k++) {",
          "2226:      if (tref->trackIDs[k] != the_trak->Header->trackID) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2252:     if (!newRefs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2275:  if (!notice || !threeCharCode) return GF_BAD_PARAM;",
          "2279:  if (!movie->moov->udta) {",
          "2280:   e = moov_AddBox((GF_Box*)movie->moov, gf_isom_box_new(GF_ISOM_BOX_TYPE_UDTA));",
          "",
          "[Removed Lines]",
          "2277:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2306:  e = gf_isom_insert_moov(movie);",
          "2307:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2290:    if (!strcmp(threeCharCode, (const char *) ptr->packedLanguageCode)) {",
          "2291:     gf_free(ptr->notice);",
          "2292:     ptr->notice = (char*)gf_malloc(sizeof(char) * (strlen(notice) + 1));",
          "2293:     strcpy(ptr->notice, notice);",
          "2294:     return GF_OK;",
          "2295:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2323:     if (!ptr->notice) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2297:  }",
          "2299:  ptr = (GF_CopyrightBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_CPRT);",
          "2301:  memcpy(ptr->packedLanguageCode, threeCharCode, 4);",
          "2302:  ptr->notice = (char*)gf_malloc(sizeof(char) * (strlen(notice)+1));",
          "2303:  strcpy(ptr->notice, notice);",
          "2304:  return udta_AddBox((GF_Box *)movie->moov->udta, (GF_Box *) ptr);",
          "2305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:  if (!ptr) return GF_OUT_OF_MEM;",
          "2335:  if (!ptr->notice) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2316:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2317:  if (e) return e;",
          "2321:  if (trackNumber) {",
          "2322:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "",
          "[Removed Lines]",
          "2319:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2352:  e = gf_isom_insert_moov(movie);",
          "2353:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2365:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2366:  if (e) return e;",
          "2369:  if (trackNumber) {",
          "2370:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "",
          "[Removed Lines]",
          "2367:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2401:  e = gf_isom_insert_moov(movie);",
          "2402:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2409:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2410:  if (e) return e;",
          "2414:  if (trackNumber) {",
          "2415:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "",
          "[Removed Lines]",
          "2412:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2447:  e = gf_isom_insert_moov(movie);",
          "2448:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2480:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2481:  if (e) return e;",
          "2484:  if (trackNumber) {",
          "2485:   GF_TrackBox *trak = gf_isom_get_track_from_file(movie, trackNumber);",
          "",
          "[Removed Lines]",
          "2482:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2518:  e = gf_isom_insert_moov(movie);",
          "2519:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2530:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2531:  if (e) return e;",
          "2534:  if (!index) return GF_BAD_PARAM;",
          "2535:  if (!movie->moov->udta) return GF_OK;",
          "",
          "[Removed Lines]",
          "2532:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2569:  e = gf_isom_insert_moov(movie);",
          "2570:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2566:  e = CanAccessMovie(movie, GF_ISOM_OPEN_WRITE);",
          "2567:  if (e) return e;",
          "2570:  if (!movie->moov->udta) {",
          "2571:   e = moov_AddBox((GF_Box*)movie->moov, gf_isom_box_new(GF_ISOM_BOX_TYPE_UDTA));",
          "2572:   if (e) return e;",
          "",
          "[Removed Lines]",
          "2569:  gf_isom_insert_moov(movie);",
          "",
          "[Added Lines]",
          "2607:  e = gf_isom_insert_moov(movie);",
          "2608:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2578:   if (ptr) {",
          "2579:    gf_free(ptr->data);",
          "2580:    ptr->data = (char*)gf_malloc(length);",
          "2581:    memcpy(ptr->data, data, length);",
          "2582:    ptr->dataSize = length;",
          "2583:    return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2620:    if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2585:  }",
          "2587:  ptr = (GF_UnknownUUIDBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_UUID);",
          "2588:  memcpy(ptr->uuid, UUID, 16);",
          "2589:  ptr->data = (char*)gf_malloc(length);",
          "2590:  memcpy(ptr->data, data, length);",
          "2591:  ptr->dataSize = length;",
          "2592:  return udta_AddBox((GF_Box *)movie->moov->udta, (GF_Box *) ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2628:  if (!ptr) return GF_OUT_OF_MEM;",
          "2632:  if (!ptr->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2680:   if (stsz->sizes) gf_free(stsz->sizes);",
          "2681:   stsz->sizes = (u32*) gf_malloc(sizeof(u32)*stsz->sampleCount);",
          "2682:   memset(stsz->sizes, stsz->sampleSize, sizeof(u32));",
          "2683:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2725:   if (!stsz->sizes) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2708:  if (!movie->brand) {",
          "2709:   movie->brand = (GF_FileTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_FTYP);",
          "2710:   gf_list_add(movie->TopBoxes, movie->brand);",
          "2711:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2754:   if (!movie->brand) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2716:  if (!movie->brand->altBrand) {",
          "2717:   movie->brand->altBrand = (u32*)gf_malloc(sizeof(u32));",
          "2718:   movie->brand->altBrand[0] = MajorBrand;",
          "2719:   movie->brand->altCount = 1;",
          "2720:   return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2763:   if (!movie->brand->altBrand) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2825:  if (!movie->brand) {",
          "2826:   movie->brand = (GF_FileTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_FTYP);",
          "2827:   gf_list_add(movie->TopBoxes, movie->brand);",
          "2828:  }",
          "2829:  p = (u32*)gf_malloc(sizeof(u32));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2873:   if (!movie->brand) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2976:  if (UserDataType) {",
          "2977:   GF_UnknownBox *a = (GF_UnknownBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);",
          "2978:   a->original_4cc = UserDataType;",
          "2979:   if (DataLength) {",
          "2980:    a->data = (char*)gf_malloc(sizeof(char)*DataLength);",
          "2981:    memcpy(a->data, data, DataLength);",
          "2982:    a->dataSize = DataLength;",
          "2983:   }",
          "2984:   return udta_AddBox((GF_Box *)udta, (GF_Box *) a);",
          "2985:  } else {",
          "2986:   GF_UnknownUUIDBox *a = (GF_UnknownUUIDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_UUID);",
          "2987:   memcpy(a->uuid, UUID, 16);",
          "2988:   if (DataLength) {",
          "2989:    a->data = (char*)gf_malloc(sizeof(char)*DataLength);",
          "2990:    memcpy(a->data, data, DataLength);",
          "2991:    a->dataSize = DataLength;",
          "2992:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3025:   if (!a) return GF_OUT_OF_MEM;",
          "3029:    if (!a->data) return GF_OUT_OF_MEM;",
          "3036:   if (!a) return GF_OUT_OF_MEM;",
          "3040:    if (!a->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3214:  e = CanAccessMovie(dest_file, GF_ISOM_OPEN_WRITE);",
          "3215:  if (e) return e;",
          "3219:  trak = gf_isom_get_track_from_file(orig_file, orig_track);",
          "",
          "[Removed Lines]",
          "3216:  gf_isom_insert_moov(dest_file);",
          "",
          "[Added Lines]",
          "3267:  e = gf_isom_insert_moov(dest_file);",
          "3268:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3222:  stbl = trak->Media->information->sampleTable;",
          "3223:  stbl_temp = (GF_SampleTableBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STBL);",
          "3225:  stbl_temp->SampleDescription = stbl->SampleDescription;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3276:  if (!stbl_temp) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3271:  stbl = new_tk->Media->information->sampleTable;",
          "3272:  stbl->ChunkOffset = gf_isom_box_new(GF_ISOM_BOX_TYPE_STCO);",
          "3273:  stbl->SampleSize = (GF_SampleSizeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSZ);",
          "3274:  stbl->SampleToChunk = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "3275:  stbl->TimeToSample = (GF_TimeToSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STTS);",
          "3278:  if (gf_isom_get_track_by_id(dest_file, new_tk->Header->trackID)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3327:  if (!stbl->ChunkOffset) return GF_OUT_OF_MEM;",
          "3329:  if (!stbl->SampleSize) return GF_OUT_OF_MEM;",
          "3331:  if (!stbl->SampleToChunk) return GF_OUT_OF_MEM;",
          "3333:  if (!stbl->TimeToSample) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3691:  tref = trak->References;",
          "3692:  if (!tref) {",
          "3693:   tref = (GF_TrackReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREF);",
          "3694:   e = trak_AddBox((GF_Box*)trak, (GF_Box *) tref);",
          "3695:   if (e) return e;",
          "3696:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3752:   if (!tref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3701:  if (!dpnd) {",
          "3702:   dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "3703:   dpnd->reference_type = referenceType;",
          "3704:   e = tref_AddBox((GF_Box*)tref, (GF_Box *)dpnd);",
          "3705:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3762:   if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3741:  }",
          "3742:  k = 0;",
          "3743:  newIDs = (u32*)gf_malloc(sizeof(u32)*(dpnd->trackIDCount-1));",
          "3744:  for (i=0; i<dpnd->trackIDCount; i++) {",
          "3745:   if (i+1 != ReferenceIndex) {",
          "3746:    newIDs[k] = dpnd->trackIDs[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3804:  if (!newIDs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3912:  if (!trak) return GF_BAD_PARAM;",
          "3913:  if (unpack) {",
          "3914:   if (!trak->Media->information->sampleTable->CompositionOffset) trak->Media->information->sampleTable->CompositionOffset = (GF_CompositionOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CTTS);",
          "3915:   e = stbl_unpackCTS(trak->Media->information->sampleTable);",
          "3916:  } else {",
          "3917:   if (!trak->Media->information->sampleTable->CompositionOffset) return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3977:   if (!trak->Media->information->sampleTable->CompositionOffset) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4058:    if (len) {",
          "4059:     u32 k;",
          "4060:     trak->name = (char*)gf_malloc(sizeof(char)*(len+1));",
          "4061:     for (k=0; k<len; k++) trak->name[k] = gf_bs_read_u8(bs);",
          "4062:     trak->name[k] = 0;",
          "4063:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4125:     if (!trak->name) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4162:   cur_dts = 0;",
          "4164:   DTSs = (u64*)gf_malloc(sizeof(u64) * (stbl->SampleSize->sampleCount) );",
          "4167:   if (!DTSs) return GF_OUT_OF_MEM;",
          "4168:   if (stbl->CompositionOffset) {",
          "4169:    CTSs = (s64*)gf_malloc(sizeof(u64) * (stbl->SampleSize->sampleCount) );",
          "4170:   }",
          "4172:   for (i=0; i<stbl->TimeToSample->nb_entries; i++) {",
          "",
          "[Removed Lines]",
          "4165:   CTSs = NULL;",
          "",
          "[Added Lines]",
          "4233:   CTSs = NULL;",
          "4236:    if (!CTSs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4536:  stbl = trak->Media->information->sampleTable;",
          "4537:  if (!stbl->ShadowSync) stbl->ShadowSync = (GF_ShadowSyncBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSH);",
          "4540:  if (!stbl->SyncSample) return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4605:  if (!stbl->ShadowSync) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4737:   }",
          "4738:   else gf_fseek(f, 0, SEEK_SET);",
          "4739:   trak->Media->handler->nameUTF8 = (char*)gf_malloc(sizeof(char)*(size_t)(size+1));",
          "4740:   size = fread(trak->Media->handler->nameUTF8, sizeof(char), (size_t)size, f);",
          "4741:   trak->Media->handler->nameUTF8[size] = 0;",
          "4742:   gf_fclose(f);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4808:   if (!trak->Media->handler->nameUTF8) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4802:  e = gf_isom_remove_root_od(output);",
          "4803:  if (e) return e;",
          "4804:  if (!input->moov || !input->moov->iods || !input->moov->iods->descriptor) return GF_OK;",
          "4806:  e = AddMovieIOD(output->moov, 0);",
          "4807:  if (e) return e;",
          "4808:  if (output->moov->iods->descriptor) gf_odf_desc_del(output->moov->iods->descriptor);",
          "",
          "[Removed Lines]",
          "4805:  gf_isom_insert_moov(output);",
          "",
          "[Added Lines]",
          "4875:  e = gf_isom_insert_moov(output);",
          "4876:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4916:     btype = gf_isom_solve_uuid_box((char *) UUID);",
          "4917:     if (!btype) btype = GF_ISOM_BOX_TYPE_UUID;",
          "4918:     box = gf_isom_box_new(btype);",
          "4919:  uuidb = (GF_UnknownUUIDBox*)box;",
          "4920:  uuidb->internal_4cc = gf_isom_solve_uuid_box((char *) UUID);",
          "4921:  memcpy(uuidb->uuid, UUID, sizeof(bin128));",
          "4922:  uuidb->dataSize = data_size;",
          "4923:  uuidb->data = (char*)gf_malloc(sizeof(char)*data_size);",
          "4924:  memcpy(uuidb->data, data, sizeof(char)*data_size);",
          "4925:  gf_list_add(list, uuidb);",
          "4926:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4990:     if (!box) return GF_OUT_OF_MEM;",
          "4996:  if (!uuidb->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "4948:  ilst = gf_ismo_locate_box(meta->other_boxes, GF_ISOM_BOX_TYPE_ILST, NULL);",
          "4949:  if (!ilst) {",
          "4950:   ilst = (GF_ItemListBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_ILST);",
          "4951:   if (!meta->other_boxes) meta->other_boxes = gf_list_new();",
          "4952:   gf_list_add(meta->other_boxes, ilst);",
          "4953:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5025:   if (!ilst) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "4995:   }",
          "4996:   info->data->dataSize = data_len;",
          "4997:   info->data->data = (char*)gf_malloc(sizeof(char)*data_len);",
          "4998:   memcpy(info->data->data , data, sizeof(char)*data_len);",
          "4999:  }",
          "5000:  else if (data_len && (tag==GF_ISOM_ITUNE_GENRE)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5073:   if (!info->data->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "5009:   info = (GF_ListItemBox *)gf_isom_box_new(btype);",
          "5010:   if (info == NULL) return GF_OUT_OF_MEM;",
          "5011:   info->data->data = (char*)gf_malloc(sizeof(char));",
          "5012:   info->data->data[0] = 1;",
          "5013:   info->data->dataSize = 1;",
          "5014:   info->data->flags = 21;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5088:   if (!info->data->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "5132:   }",
          "5133:   if (!tsel) {",
          "5134:    tsel = (GF_TrackSelectionBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_TSEL);",
          "5135:    e = udta_AddBox((GF_Box *)trak->udta, (GF_Box *) tsel);",
          "5136:    if (e) return e;",
          "5137:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5212:    if (!tsel) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "5140:   tsel->attributeListCount = criteriaListCount;",
          "5141:   if (tsel->attributeList) gf_free(tsel->attributeList);",
          "5142:   tsel->attributeList = (u32*)gf_malloc(sizeof(u32)*criteriaListCount);",
          "5143:   memcpy(tsel->attributeList, criteriaList, sizeof(u32)*criteriaListCount);",
          "5144:  }",
          "5145:  return GF_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5221:   if (!tsel->attributeList) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "5225:  }",
          "5226:  if (!sub_samples) {",
          "5227:   sub_samples = (GF_SubSampleInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SUBS);",
          "5228:   gf_list_add(trak->Media->information->sampleTable->sub_samples, sub_samples);",
          "5229:   sub_samples->version = (subSampleSize>0xFFFF) ? 1 : 0;",
          "5230:   sub_samples->flags = flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5307:   if (!sub_samples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "5259:  if (!entry->rvcc) {",
          "5260:   entry->rvcc = (GF_RVCConfigurationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_RVCC);",
          "5261:  }",
          "5262:  entry->rvcc->predefined_rvc_config = rvc_predefined;",
          "5263:  if (!rvc_predefined) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5341:   if (!entry->rvcc) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "5287:  }",
          "5288:  if (!sgroup) {",
          "5289:   sgroup = (GF_SampleGroupBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SBGP);",
          "5290:   sgroup->grouping_type = grouping_type;",
          "5291:   sgroup->grouping_type_parameter = grouping_type_parameter;",
          "5292:   gf_list_add(sampleGroups, sgroup);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5371:   if (!sgroup) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "5305:   u32 idx = 0;",
          "5306:   sgroup->entry_count = (sample_number>1) ? 2 : 1;",
          "5307:   sgroup->sample_entries = (GF_SampleGroupEntry*)gf_malloc(sizeof(GF_SampleGroupEntry) * sgroup->entry_count );",
          "5308:   if (sample_number>1) {",
          "5309:    sgroup->sample_entries[0].sample_count = sample_number-1;",
          "5310:    sgroup->sample_entries[0].group_description_index = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5390:   if (!sgroup->sample_entries) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "5392:  }",
          "5393:  if (!sgdesc) {",
          "5394:   sgdesc = (GF_SampleGroupDescriptionBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SGPD);",
          "5395:   sgdesc->grouping_type = grouping_type;",
          "5396:   gf_list_add(groupList, sgdesc);",
          "5397:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5478:   if (!sgdesc) return NULL;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "5847:  if (!trak->Media->information->sampleTable->CompositionToDecode)",
          "5848:   trak->Media->information->sampleTable->CompositionToDecode = (GF_CompositionToDecodeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CSLG);",
          "5850:  cslg = trak->Media->information->sampleTable->CompositionToDecode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5933:  if (!trak->Media->information->sampleTable->CompositionToDecode)",
          "5934:   return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "5943:  if (!trak) return GF_BAD_PARAM;",
          "5945:  trak->Media->information->sampleTable->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "5946:  return GF_OK;",
          "5947: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6032:  if (!trak->Media->information->sampleTable->SyncSample)",
          "6033:   return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "6046:   }",
          "6047:   if (!dst_subs) {",
          "6048:    dst_subs = (GF_SubSampleInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SUBS);",
          "6049:    dst_subs->version=0;",
          "6050:    dst_subs->flags = subs_flags;",
          "6051:    gf_list_add(dst_trak->Media->information->sampleTable->sub_samples, dst_subs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6137:    if (!dst_subs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "6271:  while ((a = (GF_Box *)gf_list_enum(input->moov->other_boxes, &i))) {",
          "6272:   if (a->type == GF_ISOM_BOX_TYPE_PSSH) {",
          "6273:    GF_ProtectionSystemHeaderBox *pssh = (GF_ProtectionSystemHeaderBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_PSSH);",
          "6274:    memmove(pssh->SystemID, ((GF_ProtectionSystemHeaderBox *)a)->SystemID, 16);",
          "6275:    if (((GF_ProtectionSystemHeaderBox *)a)->KIDs && ((GF_ProtectionSystemHeaderBox *)a)->KID_count > 0) {",
          "6276:     pssh->KID_count = ((GF_ProtectionSystemHeaderBox *)a)->KID_count;",
          "6277:     pssh->KIDs = (bin128 *)gf_malloc(pssh->KID_count*sizeof(bin128));",
          "6278:     memmove(pssh->KIDs, ((GF_ProtectionSystemHeaderBox *)a)->KIDs, pssh->KID_count*sizeof(bin128));",
          "6279:    }",
          "6280:    pssh->private_data_size = ((GF_ProtectionSystemHeaderBox *)a)->private_data_size;",
          "6281:    pssh->private_data = (u8 *)gf_malloc(pssh->private_data_size*sizeof(char));",
          "6282:    memmove(pssh->private_data, ((GF_ProtectionSystemHeaderBox *)a)->private_data, pssh->private_data_size);",
          "6284: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6363:    if (!pssh) return GF_OUT_OF_MEM;",
          "6368:     if (!pssh->KIDs) return GF_OUT_OF_MEM;",
          "6373:    if (!pssh->private_data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "6305:  trak = gf_isom_get_track_from_file(file, track_number);",
          "6306:  if (!trak) return GF_BAD_PARAM;",
          "6307:  if (!trak->groups) trak->groups = (GF_TrackGroupBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGR);",
          "6309:  for (j=0; j<gf_list_count(file->moov->trackList); j++) {",
          "6310:   GF_TrackBox *a_trak = gf_list_get(file->moov->trackList, j);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6400:  if (!trak->groups) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "6330:  }",
          "6332:  trgt = (GF_TrackGroupTypeBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);",
          "6333:  trgt->track_group_id = track_group_id;",
          "6334:  trgt->group_type = group_type;",
          "6335:  return gf_list_add(trak->groups->groups, trgt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6426:  if (!trgt) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:    esd->decoderConfig->objectTypeIndication = GPAC_OTI_SCENE_LASER;",
          "348:    esd->decoderConfig->decoderSpecificInfo->dataLength = ptr->lsr_config->hdr_size;",
          "349:    esd->decoderConfig->decoderSpecificInfo->data = gf_malloc(sizeof(char)*ptr->lsr_config->hdr_size);",
          "350:    memcpy(esd->decoderConfig->decoderSpecificInfo->data, ptr->lsr_config->hdr, sizeof(char)*ptr->lsr_config->hdr_size);",
          "351:    break;",
          "352:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    if (!esd->decoderConfig->decoderSpecificInfo->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:   (*samp)->data = (char *) gf_malloc(sizeof(char) * ( (*samp)->dataLength + mdia->mediaTrack->padding_bytes) );",
          "491:   if (mdia->mediaTrack->padding_bytes)",
          "492:    memset((*samp)->data + (*samp)->dataLength, 0, sizeof(char) * mdia->mediaTrack->padding_bytes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:   if (! (*samp)->data) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "836:  if (!URLname && !URNname) {",
          "838:   entry = (GF_DataEntryURLBox *) gf_isom_box_new(use_alis ? GF_QT_BOX_TYPE_ALIS : GF_ISOM_BOX_TYPE_URL);",
          "839:   entry->flags = 1;",
          "840:   e = dref_AddDataEntry(dref, (GF_Box *)entry);",
          "841:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:   if (!entry) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "844:  } else if (!URNname && URLname) {",
          "846:   entry = (GF_DataEntryURLBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_URL);",
          "847:   entry->flags = 0;",
          "849:   e = Media_SetDrefURL(entry, URLname, movie->fileName ? movie->fileName : movie->finalName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:   if (!entry) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "858:  } else {",
          "860:   entry = (GF_DataEntryURLBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_URN);",
          "861:   ((GF_DataEntryURNBox *)entry)->flags = 0;",
          "862:   ((GF_DataEntryURNBox *)entry)->nameURN = (char*)gf_malloc(strlen(URNname)+1);",
          "863:   if (! ((GF_DataEntryURNBox *)entry)->nameURN) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "865:   if (!entry) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "904:  if (sample->CTS_Offset) {",
          "906:   if (!stbl->CompositionOffset) stbl->CompositionOffset = (GF_CompositionOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CTTS);",
          "908:   e = stbl_AddCTS(stbl, sampleNumber, sample->CTS_Offset);",
          "909:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "912:   if (!stbl->CompositionOffset) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "924:   if (!stbl->SyncSample) {",
          "925:    stbl->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "927:    for (i=0; i<stbl->SampleSize->sampleCount; i++) {",
          "928:     if (i+1 != sampleNumber) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:    if (!stbl->SyncSample) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "944:  if (!syncShadowNumber) return GF_OK;",
          "945:  if (!stbl->ShadowSync) stbl->ShadowSync = (GF_ShadowSyncBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSH);",
          "946:  return stbl_AddShadow(mdia->information->sampleTable->ShadowSync, sampleNumber, syncShadowNumber);",
          "947: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:  if (!stbl->ShadowSync) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "964:   if (CTS) {",
          "965:    stbl->CompositionOffset = (GF_CompositionOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CTTS);",
          "966:    stbl_AddCTS(stbl, sampleNumber, CTS);",
          "967:   }",
          "968:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:    if (!stbl->CompositionOffset) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "974:   if (! isRap) {",
          "975:    stbl->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "977:    for (i=0; i<stbl->SampleSize->sampleCount; i++) {",
          "978:     if (i+1 != sampleNumber) stbl_AddRAP(stbl->SyncSample, i+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:    if (!stbl->SyncSample) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/media_odf.c||src/isomedia/media_odf.c": [
          "File: src/isomedia/media_odf.c -> src/isomedia/media_odf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:  tref = mdia->mediaTrack->References;",
          "256:  if (!tref) {",
          "257:   tref = (GF_TrackReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREF);",
          "258:   e = trak_AddBox((GF_Box*)mdia->mediaTrack, (GF_Box *) tref);",
          "259:   if (e) return e;",
          "260:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:   if (!tref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:  if (e) return e;",
          "264:  if (!mpod) {",
          "265:   mpod = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "266:   mpod->reference_type = GF_ISOM_BOX_TYPE_MPOD;",
          "267:   e = tref_AddBox((GF_Box*)tref, (GF_Box *)mpod);",
          "268:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:   if (!mpod) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     if (e) goto err_exit;",
          "308:     if (desc->tag == GF_ODF_OD_TAG) {",
          "309:      isom_od = (GF_IsomObjectDescriptor *) gf_malloc(sizeof(GF_IsomObjectDescriptor));",
          "310:      isom_od->tag = GF_ODF_ISOM_OD_TAG;",
          "311:     } else {",
          "312:      isom_od = (GF_IsomObjectDescriptor *) gf_malloc(sizeof(GF_IsomInitialObjectDescriptor));",
          "313:      isom_od->tag = GF_ODF_ISOM_IOD_TAG;",
          "315:      ((GF_IsomInitialObjectDescriptor *)isom_od)->inlineProfileFlag = ((GF_InitialObjectDescriptor *)od)->inlineProfileFlag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:      if (!isom_od) return GF_OUT_OF_MEM;",
          "316:      if (!isom_od) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/meta.c||src/isomedia/meta.c": [
          "File: src/isomedia/meta.c -> src/isomedia/meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:  if (!meta) {",
          "437:   if (!metaType) return GF_OK;",
          "438:   meta = (GF_MetaBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_META);",
          "439:   if (root_meta) {",
          "440:    file->meta = meta;",
          "441:    gf_list_add(file->TopBoxes, meta);",
          "442:   } else {",
          "444:    if (!track_num) {",
          "445:     file->moov->meta = meta;",
          "446:    } else {",
          "",
          "[Removed Lines]",
          "443:    gf_isom_insert_moov(file);",
          "",
          "[Added Lines]",
          "439:   if (!meta) return GF_OUT_OF_MEM;",
          "444:    e = gf_isom_insert_moov(file);",
          "445:    if (e) return e;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474:  if (!meta->handler)",
          "475:   meta->handler = (GF_HandlerBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_HDLR);",
          "477:  if (meta->handler->nameUTF8) gf_free(meta->handler->nameUTF8);",
          "478:  meta->handler->handlerType = metaType;",
          "479:  sprintf(szName, \"GPAC %s Handler\", gf_4cc_to_str(metaType));",
          "480:  meta->handler->nameUTF8 = gf_strdup(szName);",
          "481:  return GF_OK;",
          "482: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  if (!meta->handler) return GF_OUT_OF_MEM;",
          "484:  if (!meta->handler->nameUTF8) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:  length = (u32) gf_ftell(xmlfile);",
          "534:  gf_fseek(xmlfile, 0, SEEK_SET);",
          "535:  xml->xml = (char*)gf_malloc(sizeof(unsigned char)*(length+1));",
          "544:  }",
          "545:  gf_fclose(xmlfile);",
          "547: }",
          "549: GF_EXPORT",
          "",
          "[Removed Lines]",
          "536:  bread =  (u32) fread(xml->xml, 1, sizeof(unsigned char)*length, xmlfile);",
          "537:  if (ferror(xmlfile) || (bread != length)) {",
          "538:   gf_free(xml->xml);",
          "539:   xml->xml = NULL;",
          "540:   return GF_BAD_PARAM;",
          "541:  }",
          "542:  else {",
          "543:   xml->xml[length] = '\\0';",
          "546:  return GF_OK;",
          "",
          "[Added Lines]",
          "540:  if (!xml->xml) {",
          "541:   e = GF_OUT_OF_MEM;",
          "542:  } else {",
          "543:   bread = (u32) fread(xml->xml, 1, sizeof(unsigned char)*length, xmlfile);",
          "544:   if (ferror(xmlfile) || (bread != length)) {",
          "545:    gf_free(xml->xml);",
          "546:    xml->xml = NULL;",
          "547:    e = GF_IO_ERR;",
          "548:   } else {",
          "549:    xml->xml[length] = '\\0';",
          "550:    e = GF_OK;",
          "551:   }",
          "554:  return e;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "572:  xml->xml = (char*)gf_malloc(sizeof(unsigned char)*data_size);",
          "573:  memcpy(xml->xml, data, sizeof(unsigned char)*data_size);",
          "574:  return GF_OK;",
          "575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:  if (!xml->xml) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "710:  return -1;",
          "711: }",
          "714:  u32 i, count;",
          "715:  GF_ItemPropertyAssociationEntry *found_entry = NULL;",
          "716:  Bool *ess = (Bool *)gf_malloc(sizeof(Bool));",
          "717:  u32 *index = (u32 *)gf_malloc(sizeof(u32));",
          "721:  count = gf_list_count(ipma->entries);",
          "",
          "[Removed Lines]",
          "713: static void meta_add_item_property_association(GF_ItemPropertyAssociationBox *ipma, u32 item_ID, u32 prop_index, Bool essential) {",
          "",
          "[Added Lines]",
          "722: static GF_Err meta_add_item_property_association(GF_ItemPropertyAssociationBox *ipma, u32 item_ID, u32 prop_index, Bool essential) {",
          "728:  if (!ess || !index) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "728:  }",
          "729:  if (!found_entry) {",
          "730:   GF_SAFEALLOC(found_entry, GF_ItemPropertyAssociationEntry);",
          "733:   gf_list_add(ipma->entries, found_entry);",
          "734:   found_entry->item_id = item_ID;",
          "",
          "[Removed Lines]",
          "731:   if (!found_entry) return;",
          "",
          "[Added Lines]",
          "742:   if (!found_entry) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "737:  }",
          "738:  gf_list_add(found_entry->essential, ess);",
          "739:  gf_list_add(found_entry->property_index, index);",
          "740: }",
          "743:  GF_ImageItemProperties searchprop;",
          "744:  GF_ItemPropertyAssociationBox *ipma;",
          "745:  GF_ItemPropertyContainerBox *ipco;",
          "746:  s32 prop_index;",
          "747:  memset(&searchprop, 0, sizeof(GF_ImageItemProperties));",
          "749:  if (!meta->item_props) {",
          "750:   meta->item_props = (GF_ItemPropertiesBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IPRP);",
          "751:   meta->item_props->property_container = (GF_ItemPropertyContainerBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IPCO);",
          "752:   ipco = meta->item_props->property_container;",
          "753:   ipma = (GF_ItemPropertyAssociationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IPMA);",
          "754:   meta->item_props->property_association = ipma;",
          "755:  } else {",
          "756:   ipco = meta->item_props->property_container;",
          "",
          "[Removed Lines]",
          "742: static void meta_process_image_properties(GF_MetaBox *meta, u32 item_ID, GF_ImageItemProperties *image_props) {",
          "",
          "[Added Lines]",
          "751:  return GF_OK;",
          "754: static GF_Err meta_process_image_properties(GF_MetaBox *meta, u32 item_ID, GF_ImageItemProperties *image_props)",
          "755: {",
          "760:  GF_Err e;",
          "765:   if (!meta->item_props) return GF_OUT_OF_MEM;",
          "767:   if (!meta->item_props->property_container) return GF_OUT_OF_MEM;",
          "770:   if (!ipma) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "762:   if (fp) {",
          "763:    size_t read;",
          "764:    GF_ColourInformationBox *colr = (GF_ColourInformationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_COLR);",
          "765:    GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, (\"[iso file] reading ICC colour profile from file %s\\n\", &image_props->iccPath));",
          "766:    colr->colour_type = GF_ISOM_SUBTYPE_PROF;",
          "767:    fseek(fp,0,SEEK_END);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:    if (!colr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "775:    } else {",
          "776:     gf_list_add(ipco->other_boxes, colr);",
          "777:     prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "779:    }",
          "780:   } else {",
          "781:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Error opening ICC colour profile file at %s\\n\", &image_props->iccPath));",
          "",
          "[Removed Lines]",
          "778:     meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "",
          "[Added Lines]",
          "797:     e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "798:     if (e) return e;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "788:   prop_index = meta_find_prop(ipco, &searchprop);",
          "789:   if (prop_index < 0) {",
          "790:    GF_ImageSpatialExtentsPropertyBox *ispe = (GF_ImageSpatialExtentsPropertyBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ISPE);",
          "791:    ispe->image_width = image_props->width;",
          "792:    ispe->image_height = image_props->height;",
          "793:    gf_list_add(ipco->other_boxes, ispe);",
          "794:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "795:   }",
          "797:   searchprop.width = 0;",
          "798:   searchprop.height = 0;",
          "799:  }",
          "",
          "[Removed Lines]",
          "796:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "",
          "[Added Lines]",
          "812:    if (!ispe) return GF_OUT_OF_MEM;",
          "818:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "819:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "803:   prop_index = meta_find_prop(ipco, &searchprop);",
          "804:   if (prop_index < 0) {",
          "805:    GF_RelativeLocationPropertyBox *rloc = (GF_RelativeLocationPropertyBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_RLOC);",
          "806:    rloc->horizontal_offset = image_props->hOffset;",
          "807:    rloc->vertical_offset = image_props->vOffset;",
          "808:    gf_list_add(ipco->other_boxes, rloc);",
          "809:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "810:   }",
          "812:   searchprop.hOffset = 0;",
          "813:   searchprop.vOffset = 0;",
          "814:  }",
          "",
          "[Removed Lines]",
          "811:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "",
          "[Added Lines]",
          "830:    if (!rloc) return GF_OUT_OF_MEM;",
          "836:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "837:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "818:   prop_index = meta_find_prop(ipco, &searchprop);",
          "819:   if (prop_index < 0) {",
          "820:    GF_PixelAspectRatioBox *pasp = (GF_PixelAspectRatioBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_PASP);",
          "821:    pasp->hSpacing = image_props->hSpacing;",
          "822:    pasp->vSpacing = image_props->vSpacing;",
          "823:    gf_list_add(ipco->other_boxes, pasp);",
          "824:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "825:   }",
          "827:   searchprop.hSpacing = 0;",
          "828:   searchprop.vSpacing = 0;",
          "829:  }",
          "",
          "[Removed Lines]",
          "826:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "",
          "[Added Lines]",
          "847:    if (!pasp) return GF_OUT_OF_MEM;",
          "853:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_FALSE);",
          "854:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "832:   prop_index = meta_find_prop(ipco, &searchprop);",
          "833:   if (prop_index < 0) {",
          "834:    GF_ImageRotationBox *irot = (GF_ImageRotationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IROT);",
          "835:    irot->angle = image_props->angle/90;",
          "836:    gf_list_add(ipco->other_boxes, irot);",
          "837:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "838:   }",
          "840:   searchprop.angle = 0;",
          "841:  }",
          "842:  if (image_props->config) {",
          "",
          "[Removed Lines]",
          "839:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "",
          "[Added Lines]",
          "863:    if (!irot) return GF_OUT_OF_MEM;",
          "868:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "869:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "846:    gf_list_add(ipco->other_boxes, gf_isom_clone_config_box(image_props->config));",
          "847:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "848:   }",
          "850:   searchprop.config = NULL;",
          "851:  }",
          "852:  if (image_props->alpha) {",
          "",
          "[Removed Lines]",
          "849:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "",
          "[Added Lines]",
          "879:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "880:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "854:   prop_index = meta_find_prop(ipco, &searchprop);",
          "855:   if (prop_index < 0) {",
          "856:    GF_AuxiliaryTypePropertyBox *auxC = (GF_AuxiliaryTypePropertyBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_AUXC);",
          "857:    auxC->aux_urn = gf_strdup(\"urn:mpeg:mpegB:cicp:systems:auxiliary:alpha\");",
          "858:    gf_list_add(ipco->other_boxes, auxC);",
          "859:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "860:   }",
          "862:   searchprop.alpha = GF_FALSE;",
          "863:  }",
          "864:  if (image_props->num_channels) {",
          "",
          "[Removed Lines]",
          "861:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "",
          "[Added Lines]",
          "888:    if (!auxC) return GF_OUT_OF_MEM;",
          "893:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "894:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "867:   prop_index = meta_find_prop(ipco, &searchprop);",
          "868:   if (prop_index < 0) {",
          "869:    GF_PixelInformationPropertyBox *pixi = (GF_PixelInformationPropertyBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_PIXI);",
          "870:    pixi->num_channels = image_props->num_channels;",
          "871:    pixi->bits_per_channel = gf_malloc(pixi->num_channels);",
          "872:    memcpy(pixi->bits_per_channel, image_props->bits_per_channel, image_props->num_channels);",
          "873:    gf_list_add(ipco->other_boxes, pixi);",
          "874:    prop_index = gf_list_count(ipco->other_boxes) - 1;",
          "875:   }",
          "877:   searchprop.num_channels = 0;",
          "878:  }",
          "879: }",
          "881: GF_EXPORT",
          "",
          "[Removed Lines]",
          "876:   meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "",
          "[Added Lines]",
          "903:    if (!pixi) return GF_OUT_OF_MEM;",
          "906:    if (!pixi->bits_per_channel) return GF_OUT_OF_MEM;",
          "911:   e = meta_add_item_property_association(ipma, item_ID, prop_index + 1, GF_TRUE);",
          "912:   if (e) return e;",
          "915:  return GF_OK;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "951:  }",
          "953:  infe = (GF_ItemInfoEntryBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_INFE);",
          "954:  if (item_id) {",
          "955:   infe->item_ID = item_id;",
          "956:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991:  if (!infe) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "986:  if (!file->mdat) {",
          "987:   file->mdat = (GF_MediaDataBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_MDAT);",
          "988:   gf_list_add(file->TopBoxes, file->mdat);",
          "989:  }",
          "992:  if (!meta->item_locations) meta->item_locations = (GF_ItemLocationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_ILOC);",
          "993:  gf_list_add(meta->item_locations->location_entries, location_entry);",
          "994:  location_entry->item_ID = infe->item_ID;",
          "996:  if (!meta->item_infos) meta->item_infos = (GF_ItemInfoBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IINF);",
          "997:  e = gf_list_add(meta->item_infos->item_infos, infe);",
          "998:  if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026:   if (!file->mdat) return GF_OUT_OF_MEM;",
          "1032:  if (!meta->item_locations) return GF_OUT_OF_MEM;",
          "1038:  if (!meta->item_infos) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1001:   if (image_props->hidden) {",
          "1002:    infe->flags = 0x1;",
          "1003:   }",
          "1005:  }",
          "",
          "[Removed Lines]",
          "1004:   meta_process_image_properties(meta, infe->item_ID, image_props);",
          "",
          "[Added Lines]",
          "1046:   e = meta_process_image_properties(meta, infe->item_ID, image_props);",
          "1047:   if (e) return e;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1018:  if (URL || URN) {",
          "1019:   u32 dataRefIndex;",
          "1020:   if (!meta->file_locations) meta->file_locations = (GF_DataInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DINF);",
          "1021:   if (!meta->file_locations->dref) meta->file_locations->dref = (GF_DataReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DREF);",
          "1022:   e = Media_FindDataRef(meta->file_locations->dref, (char *) URL, (char *) URN, &dataRefIndex);",
          "1023:   if (e) return e;",
          "1024:   if (!dataRefIndex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   if (!meta->file_locations) return GF_OUT_OF_MEM;",
          "1067:   if (!meta->file_locations->dref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1094:   else if (!location_entry->data_reference_index) {",
          "1095:    if (data) {",
          "1096:     infe->full_path = (char *)gf_malloc(sizeof(char) * data_len);",
          "1097:     memcpy(infe->full_path, data, sizeof(char) * data_len);",
          "1098:     infe->data_len = data_len;",
          "1099:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144:     if (!infe->full_path) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1161:  if (meta->primary_resource) gf_isom_box_del((GF_Box*)meta->primary_resource);",
          "1162:  meta->primary_resource = (GF_PrimaryItemBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_PITM);",
          "1163:  meta->primary_resource->item_ID = item_id;",
          "1164:  return GF_OK;",
          "1165: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:  if (!meta->primary_resource) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1177:  if (!meta) return GF_BAD_PARAM;",
          "1178:  if (!meta->item_refs) {",
          "1179:   meta->item_refs = (GF_ItemReferenceBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_IREF);",
          "1180:  }",
          "1181:  count = gf_list_count(meta->item_refs->references);",
          "1182:  for (i = 0; i < count; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1230:   if (!meta->item_refs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1188:  }",
          "1189:  if (index < 0) {",
          "1190:   ref = (GF_ItemReferenceTypeBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);",
          "1191:   gf_list_add(meta->item_refs->references, ref);",
          "1192:   ref->reference_type = type;",
          "1193:   ref->from_item_id = from_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1242:   if (!ref) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c": [
          "File: src/isomedia/movie_fragments.c -> src/isomedia/movie_fragments.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  if (!movie->moov->mvex) return GF_BAD_PARAM;",
          "73:  if (!movie->moov->mvex->mehd) {",
          "74:   movie->moov->mvex->mehd = (GF_MovieExtendsHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MEHD);",
          "75:  }",
          "76:  movie->moov->mvex->mehd->fragment_duration = duration;",
          "77:  movie->moov->mvhd->duration = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   if (!movie->moov->mvex->mehd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     if (!trep) {",
          "124:      trep = (GF_TrackExtensionPropertiesBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREP);",
          "125:      trep->trackID = trex->trackID;",
          "126:      gf_list_add(movie->moov->mvex->TrackExPropList, trep);",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:      if (!trep) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:  if (!movie->moov->mvex) {",
          "269:   mvex = (GF_MovieExtendsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MVEX);",
          "270:   moov_AddBox((GF_Box*)movie->moov, (GF_Box *) mvex);",
          "271:  } else {",
          "272:   mvex = movie->moov->mvex;",
          "273:  }",
          "274:  if (!mvex->mehd) {",
          "275:   mvex->mehd = (GF_MovieExtendsHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MEHD);",
          "276:  }",
          "278:  trex = GetTrex(movie->moov, TrackID);",
          "279:  if (!trex) {",
          "280:   trex = (GF_TrackExtendsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREX);",
          "281:   trex->trackID = TrackID;",
          "282:   mvex_AddBox((GF_Box*)mvex, (GF_Box *) trex);",
          "283:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:   if (!mvex) return GF_OUT_OF_MEM;",
          "279:   if (!mvex->mehd) return GF_OUT_OF_MEM;",
          "285:   if (!trex) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "938:  if (movie->moof_first && !movie->moof->mdat) {",
          "939:   buffer = (char*)gf_malloc(sizeof(char)*mdat_size);",
          "940:   e = gf_bs_seek(bs, movie->moof->fragment_offset);",
          "941:   if (e) return e;",
          "942:   gf_bs_read_data(bs, buffer, mdat_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:   if (!buffer) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1046:  if (gf_list_count(movie->moof_list)) return GF_BAD_PARAM;",
          "1048:  movie->root_sidx = (GF_SegmentIndexBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SIDX);",
          "1050:  movie->root_sidx->first_offset = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055:  if (!movie->root_sidx) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1053:  movie->root_sidx->nb_refs = nb_segs;",
          "1055:  movie->root_sidx->refs = (GF_SIDXReference*)gf_malloc(sizeof(GF_SIDXReference) * movie->root_sidx->nb_refs);",
          "1056:  memset(movie->root_sidx->refs, 0, sizeof(GF_SIDXReference) * movie->root_sidx->nb_refs);",
          "1058:  movie->root_sidx_index = 0;",
          "1060:  if (use_ssix) {",
          "1061:   movie->root_ssix = (GF_SubsegmentIndexBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SSIX);",
          "1062:   movie->root_ssix->subsegments = gf_malloc(sizeof(GF_SubsegmentInfo) * nb_segs);",
          "1063:   movie->root_ssix->subsegment_count = nb_segs;",
          "1064:   for (i=0; i<nb_segs; i++) {",
          "1065:    movie->root_ssix->subsegments[i].range_count = 2;",
          "1066:    movie->root_ssix->subsegments[i].ranges = gf_malloc(sizeof(GF_SubsegmentRangeInfo)*2);",
          "1067:    movie->root_ssix->subsegments[i].ranges[0].level = 0;",
          "1068:    movie->root_ssix->subsegments[i].ranges[0].range_size = 0;",
          "1069:    movie->root_ssix->subsegments[i].ranges[1].level = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1063:  if (!movie->root_sidx->refs) return GF_OUT_OF_MEM;",
          "1070:   if (!movie->root_ssix) return GF_OUT_OF_MEM;",
          "1072:   if (!movie->root_ssix->subsegments) return GF_OUT_OF_MEM;",
          "1077:    if (!movie->root_ssix->subsegments[i].ranges) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1464:    sidx = movie->root_sidx;",
          "1465:   } else {",
          "1466:    sidx = (GF_SegmentIndexBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SIDX);",
          "1467:   }",
          "1468:   sidx->reference_ID = referenceTrackID;",
          "1469:   sidx->timescale = trak->Media->mediaHeader->timeScale;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478:    if (!sidx) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1535:    }",
          "1537:    sidx->refs = (GF_SIDXReference*)gf_malloc(sizeof(GF_SIDXReference)*sidx->nb_refs);",
          "1538:    memset(sidx->refs, 0, sizeof(GF_SIDXReference)*sidx->nb_refs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550:    if (!sidx->refs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1548:    if (use_ssix && !ssix && !movie->root_ssix) {",
          "1549:     u32 k;",
          "1550:     ssix = (GF_SubsegmentIndexBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SSIX);",
          "1551:     ssix->subsegments = gf_malloc(sizeof(GF_SubsegmentInfo) * sidx->nb_refs);",
          "1552:     ssix->subsegment_count = sidx->nb_refs;",
          "1553:     for (k=0; k<sidx->nb_refs; k++) {",
          "1554:      GF_SubsegmentInfo *subs = &ssix->subsegments[k];",
          "1555:      subs->range_count = 2;",
          "1556:      subs->ranges = gf_malloc(sizeof(GF_SubsegmentRangeInfo)*2);",
          "1557:      subs->ranges[0].level = 1;",
          "1558:      subs->ranges[1].level = 2;",
          "1559:      subs->ranges[0].range_size = subs->ranges[1].range_size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1564:     if (!ssix) return GF_OUT_OF_MEM;",
          "1566:     if (!ssix->subsegments) return GF_OUT_OF_MEM;",
          "1572:      if (!subs->ranges) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1606:   if (!no_sidx && !sidx && (root_sidx || daisy_chain_sidx) ) {",
          "1607:    u32 subsegments_remaining;",
          "1608:    sidx = (GF_SegmentIndexBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_SIDX);",
          "1609:    sidx->reference_ID = referenceTrackID;",
          "1610:    sidx->timescale = trak ? trak->Media->mediaHeader->timeScale : 1000;",
          "1611:    sidx->earliest_presentation_time = get_presentation_time( ref_track_decode_time + sidx_dur + moof_get_earliest_cts(movie->moof, referenceTrackID), ts_shift);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:    if (!sidx) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1625:     sidx->nb_refs += 1;",
          "1626:    }",
          "1627:    sidx->refs = (GF_SIDXReference*)gf_malloc(sizeof(GF_SIDXReference)*sidx->nb_refs);",
          "1628:    memset(sidx->refs, 0, sizeof(GF_SIDXReference)*sidx->nb_refs);",
          "1630:    if (root_sidx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1645:    if (!sidx->refs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1954:   if (traf->tfxd)",
          "1955:    gf_isom_box_del((GF_Box*)traf->tfxd);",
          "1956:   traf->tfxd = (GF_MSSTimeExtBox *)gf_isom_box_new(GF_ISOM_BOX_UUID_TFXD);",
          "1957:   traf->tfxd->absolute_time_in_track_timescale = ntp_in_track_timescale;",
          "1958:   traf->tfxd->fragment_duration_in_track_timescale = traf_duration_in_track_timescale;",
          "1959:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1975:   if (!traf->tfxd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1990:  movie->moof = (GF_MovieFragmentBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MOOF);",
          "1991:  movie->moof->mfhd = (GF_MovieFragmentHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MFHD);",
          "1992:  movie->moof->mfhd->sequence_number = movie->NextMoofNumber;",
          "1993:  movie->NextMoofNumber ++;",
          "1994:  if (movie->use_segments)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2010:  if (!movie->moof) return GF_OUT_OF_MEM;",
          "2012:  if (!movie->moof->mfhd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2005:  for (i=0; i<count; i++) {",
          "2006:   trex = (GF_TrackExtendsBox*)gf_list_get(movie->moov->mvex->TrackExList, i);",
          "2007:   traf = (GF_TrackFragmentBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRAF);",
          "2008:   traf->trex = trex;",
          "2009:   traf->tfhd = (GF_TrackFragmentHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TFHD);",
          "2010:   traf->tfhd->trackID = trex->trackID;",
          "2012:   traf->tfhd->base_data_offset = movie->moof->fragment_offset + 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2029:   if (!traf) return GF_OUT_OF_MEM;",
          "2032:   if (!traf->tfhd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2017:    GF_RandomAccessEntry *raf;",
          "2018:    if (!traf->trex->tfra) {",
          "2019:     tfra = (GF_TrackFragmentRandomAccessBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_TFRA);",
          "2020:     tfra->track_id = traf->trex->trackID;",
          "2021:     tfra->traf_bits = 8;",
          "2022:     tfra->trun_bits = 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2043:     if (!tfra) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2092:    }",
          "2093:   }",
          "2094:   traf_2 = (GF_TrackFragmentBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRAF);",
          "2095:   traf_2->trex = traf->trex;",
          "2096:   traf_2->tfhd = (GF_TrackFragmentHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TFHD);",
          "2097:   traf_2->tfhd->trackID = traf->tfhd->trackID;",
          "2099:   traf_2->tfhd->base_data_offset = movie->moof->fragment_offset + 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2119:   if (!traf_2) return GF_OUT_OF_MEM;",
          "2122:   if (!traf_2->tfhd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2139:  if (!count) {",
          "2140:   trun = (GF_TrackFragmentRunBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TRUN);",
          "2142:   trun->data_offset = (u32) (pos - movie->moof->fragment_offset - 8);",
          "2143:   gf_list_add(traf->TrackRuns, trun);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2167:   if (!trun) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2354:  }",
          "2355:  if (!subs) {",
          "2356:   subs = (GF_SubSampleInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SUBS);",
          "2357:   subs->version = (subSampleSize>0xFFFF) ? 1 : 0;",
          "2358:   subs->flags = flags;",
          "2359:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2384:   if (!subs) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2447:   }",
          "2448:   if (!subs_traf) {",
          "2449:    subs_traf = (GF_SubSampleInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SUBS);",
          "2450:    subs_traf->version = 0;",
          "2451:    subs_traf->flags = subs_flags;",
          "2452:    gf_list_add(traf->sub_samples, subs_traf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2478:    if (!subs_traf) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c": [
          "File: src/isomedia/sample_descs.c -> src/isomedia/sample_descs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: GF_Err gf_isom_video_sample_entry_read(GF_VisualSampleEntryBox *ptr, GF_BitStream *bs)",
          "63: {",
          "64:  GF_Err e;",
          "67:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "68:  if (e) return e;",
          "",
          "[Removed Lines]",
          "65:  if (ptr->size < 78) return GF_ISOM_INVALID_FILE;",
          "66:  ptr->size -= 78;",
          "",
          "[Added Lines]",
          "65:  ISOM_DECREASE_SIZE(ptr, 78)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: GF_Err gf_isom_audio_sample_entry_read(GF_AudioSampleEntryBox *ptr, GF_BitStream *bs)",
          "129: {",
          "130:  GF_Err e;",
          "133:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "134:  if (e) return e;",
          "",
          "[Removed Lines]",
          "131:  if (ptr->size<28) return GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "131:  ISOM_DECREASE_SIZE(ptr, 28)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:  ptr->samplerate_hi = gf_bs_read_u16(bs);",
          "144:  ptr->samplerate_lo = gf_bs_read_u16(bs);",
          "147:  if (!ptr->is_qtff) return GF_OK;",
          "149:  if (ptr->version==1) {",
          "151:   gf_bs_read_data(bs, (char *) ptr->extensions, 16);",
          "153:  } else if (ptr->version==2) {",
          "155:   gf_bs_read_data(bs,  (char *) ptr->extensions, 36);",
          "157:  }",
          "158:  return GF_OK;",
          "159: }",
          "",
          "[Removed Lines]",
          "146:  ptr->size -= 28;",
          "150:   if (ptr->size<16) return GF_ISOM_INVALID_FILE;",
          "152:   ptr->size-=16;",
          "154:   if (ptr->size<36) return GF_ISOM_INVALID_FILE;",
          "156:   ptr->size -= 36;",
          "",
          "[Added Lines]",
          "149:   ISOM_DECREASE_SIZE(ptr, 16)",
          "152:   ISOM_DECREASE_SIZE(ptr, 36)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:  if (!config) return NULL;",
          "300:  res = (GF_3GPConfig*)gf_malloc(sizeof(GF_3GPConfig));",
          "302:  return res;",
          "303: }",
          "",
          "[Removed Lines]",
          "301:  memcpy(res, config, sizeof(GF_3GPConfig));",
          "",
          "[Added Lines]",
          "298:  if (res)",
          "299:   memcpy(res, config, sizeof(GF_3GPConfig));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:  if ( (entry->cfg_ac3->type!=GF_ISOM_BOX_TYPE_DAC3) && (entry->cfg_ac3->type!=GF_ISOM_BOX_TYPE_DEC3) ) return NULL;",
          "319:  res = (GF_AC3Config*)gf_malloc(sizeof(GF_AC3Config));",
          "321:  return res;",
          "322: }",
          "",
          "[Removed Lines]",
          "320:  memcpy(res, &entry->cfg_ac3->cfg, sizeof(GF_AC3Config));",
          "",
          "[Added Lines]",
          "318:  if (res)",
          "319:   memcpy(res, &entry->cfg_ac3->cfg, sizeof(GF_AC3Config));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "560:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "562:  dims = (GF_DIMSSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DIMS);",
          "563:  dims->dataReferenceIndex = dataRefIndex;",
          "564:  gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, dims);",
          "565:  if (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->other_boxes);",
          "567:  dims->config = (GF_DIMSSceneConfigBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_DIMC);",
          "568:  dims->config->profile = desc->profile;",
          "569:  dims->config->level = desc->level;",
          "570:  dims->config->pathComponents = desc->pathComponents;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:  if (!dims) return GF_OUT_OF_MEM;",
          "568:  if (!dims->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "578:  if (desc->content_script_types) {",
          "579:   dims->scripts = (GF_DIMSScriptTypesBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_DIST);",
          "580:   dims->scripts->content_script_types = gf_strdup(desc->content_script_types);",
          "581:  }",
          "582:  return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:   if (!dims->scripts) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "600:  if (dims->type != GF_ISOM_BOX_TYPE_DIMS) return GF_BAD_PARAM;",
          "601:  if (!dims->config)",
          "602:   dims->config = (GF_DIMSSceneConfigBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_DIMC);",
          "604:  if (!movie->keep_utc)",
          "605:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:  if (!dims->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:  if (desc->content_script_types) {",
          "621:   if (!dims->scripts)",
          "622:    dims->scripts = (GF_DIMSScriptTypesBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_DIST);",
          "623:   if (dims->scripts->content_script_types) gf_free(dims->scripts->content_script_types);",
          "624:   dims->scripts->content_script_types = gf_strdup(desc->content_script_types ? desc->content_script_types  :\"\");",
          "625:  } else if (dims->scripts) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   if (!dims->scripts) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "647:          || esd->ipiPtr || esd->qos || esd->RegDescriptor) {",
          "649:   lsr->descr = (GF_MPEG4ExtensionDescriptorsBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_M4DS);",
          "650:   if (esd->RegDescriptor) {",
          "651:    gf_list_add(lsr->descr->descriptors, esd->RegDescriptor);",
          "652:    esd->RegDescriptor = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654:   if (!lsr->descr) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "685:  if (!lsr->lsr_config) lsr->lsr_config = (GF_LASERConfigurationBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_LSRC);",
          "686:  if (esd->decoderConfig->decoderSpecificInfo && esd->decoderConfig->decoderSpecificInfo->data) {",
          "687:   lsr->lsr_config->hdr = gf_realloc(lsr->lsr_config->hdr, sizeof(char) * esd->decoderConfig->decoderSpecificInfo->dataLength);",
          "688:   lsr->lsr_config->hdr_size = esd->decoderConfig->decoderSpecificInfo->dataLength;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:  if (!lsr->lsr_config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "851:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "853:  stpp = (GF_MetaDataSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STPP);",
          "854:  stpp->dataReferenceIndex = dataRefIndex;",
          "855:  gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, stpp);",
          "856:  if (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->other_boxes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860:  if (!stpp) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "977:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "979:  sample_entry = (GF_MetaDataSampleEntryBox *) gf_isom_box_new(type);",
          "980:  sample_entry->dataReferenceIndex = dataRefIndex;",
          "981:  gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, sample_entry);",
          "982:  if (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->other_boxes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:  if (!sample_entry) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "985:  if (encoding) sample_entry->content_encoding = gf_strdup(encoding);",
          "986:  if (config) {",
          "987:   sample_entry->config = (GF_TextConfigBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_TXTC);",
          "988:   sample_entry->config->config = gf_strdup(config);",
          "989:  }",
          "990:  return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "996:   if (!sample_entry->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1016:  if (!sample_entry->config)",
          "1017:   sample_entry->config = (GF_TextConfigBox*) gf_isom_box_new(GF_ISOM_BOX_TYPE_TXTC);",
          "1019:  if (!movie->keep_utc)",
          "1020:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1027:  if (!sample_entry->config) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1143:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "1145:  wvtt = (GF_WebVTTSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_WVTT);",
          "1146:  wvtt->dataReferenceIndex = dataRefIndex;",
          "1147:  gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, wvtt);",
          "1148:  if (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->other_boxes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1156:  if (!wvtt) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c": [
          "File: src/isomedia/stbl_write.c -> src/isomedia/stbl_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:   if (offset > 0xFFFFFFFF) {",
          "746:    co64 = (GF_ChunkLargeOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CO64);",
          "747:    co64->nb_entries = stco->nb_entries + 1;",
          "748:    co64->alloc_size = co64->nb_entries;",
          "749:    co64->offsets = (u64*)gf_malloc(sizeof(u64) * co64->nb_entries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:    if (!co64) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:   if (offset > 0xFFFFFFFF) {",
          "849:    co64 = (GF_ChunkLargeOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CO64);",
          "850:    co64->nb_entries = ((GF_ChunkOffsetBox *)stbl->ChunkOffset)->nb_entries;",
          "851:    co64->alloc_size = co64->nb_entries;",
          "852:    co64->offsets = (u64*)gf_malloc(sizeof(u64)*co64->nb_entries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851:    if (!co64) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1295:  if (!stbl->PaddingBits) stbl->PaddingBits = (GF_PaddingBitsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_PADB);",
          "1298:  if (!stbl->PaddingBits->padbits || !stbl->PaddingBits->SampleCount) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:  if (!stbl->PaddingBits) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1527:   if (offset>0xFFFFFFFF) {",
          "1528:    co64 = (GF_ChunkLargeOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CO64);",
          "1529:    co64->nb_entries = stco->nb_entries + 1;",
          "1530:    if (co64->nb_entries<=stco->nb_entries) return GF_OUT_OF_MEM;",
          "1531:    co64->alloc_size = co64->nb_entries;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1532:    if (!co64) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1605:   stbl->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "1606:   if (stbl->SampleSize->sampleCount > 1) {",
          "1607:    stbl->SyncSample->sampleNumbers = (u32*)gf_malloc(sizeof(u32) * (stbl->SampleSize->sampleCount-1));",
          "1608:    if (!stbl->SyncSample->sampleNumbers) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1610:   if (!stbl->SyncSample) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1653: GF_Err stbl_AppendPadding(GF_SampleTableBox *stbl, u8 padding)",
          "1654: {",
          "1655:  if (!stbl->PaddingBits) stbl->PaddingBits = (GF_PaddingBitsBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_PADB);",
          "1657:  stbl->PaddingBits->padbits = (u8*)gf_realloc(stbl->PaddingBits->padbits, sizeof(u8) * stbl->SampleSize->sampleCount);",
          "1658:  if (!stbl->PaddingBits->padbits) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1661:  if (!stbl->PaddingBits) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1666:  GF_CompositionOffsetBox *ctts;",
          "1668:  if (!stbl->CompositionOffset) stbl->CompositionOffset = (GF_CompositionOffsetBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_CTTS);",
          "1670:  ctts = stbl->CompositionOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1675:  if (!stbl->CompositionOffset) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1689: GF_Err stbl_AppendDegradation(GF_SampleTableBox *stbl, u16 DegradationPriority)",
          "1690: {",
          "1691:  if (!stbl->DegradationPriority) stbl->DegradationPriority = (GF_DegradationPriorityBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STDP);",
          "1693:  stbl->DegradationPriority->priorities = (u16 *)gf_realloc(stbl->DegradationPriority->priorities, sizeof(u16) * stbl->SampleSize->sampleCount);",
          "1694:  if (!stbl->DegradationPriority->priorities) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1699:  if (!stbl->DegradationPriority) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1701: GF_Err stbl_AppendDepType(GF_SampleTableBox *stbl, u32 DepType)",
          "1702: {",
          "1703:  if (!stbl->SampleDep) stbl->SampleDep= (GF_SampleDependencyTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SDTP);",
          "1704:  stbl->SampleDep->sample_info = (u8*)gf_realloc(stbl->SampleDep->sample_info, sizeof(u8)*stbl->SampleSize->sampleCount );",
          "1705:  if (!stbl->SampleDep->sample_info) return GF_OUT_OF_MEM;",
          "1706:  stbl->SampleDep->sample_info[stbl->SampleDep->sampleCount] = DepType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1712:  if (!stbl->SampleDep) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1770:  stsc_tmp = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "1772:  stsc_tmp->nb_entries = stsc_tmp->alloc_size = stbl->SampleSize->sampleCount;",
          "1773:  stsc_tmp->entries = gf_malloc(sizeof(GF_StscEntry)*stsc_tmp->nb_entries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:  if (!stsc_tmp) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   ) {",
          "277:    esd->slConfig->hasRandomAccessUnitsOnlyFlag = 0;",
          "278:    esd->slConfig->useRandomAccessPointFlag = 1;",
          "280:     stbl->SyncSample = (GF_SyncSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSS);",
          "281:   } else {",
          "282:    esd->slConfig->hasRandomAccessUnitsOnlyFlag = 1;",
          "283:    esd->slConfig->useRandomAccessPointFlag = 0;",
          "",
          "[Removed Lines]",
          "279:    if (trak->moov->mov->openMode!=GF_ISOM_OPEN_READ)",
          "",
          "[Added Lines]",
          "279:    if (trak->moov->mov->openMode!=GF_ISOM_OPEN_READ) {",
          "281:     if (!stbl->SyncSample) return GF_OUT_OF_MEM;",
          "282:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:      continue;",
          "664:     new_idx = (u32 *)gf_malloc(gf_list_count(sgdesc->group_descriptions)*sizeof(u32));",
          "665:     count = 0;",
          "666:     while (gf_list_count(sgdesc->group_descriptions)) {",
          "667:      void *sgpd_entry = gf_list_get(sgdesc->group_descriptions, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:     if (!new_idx) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "703:    }",
          "704:    if (!stbl_group) {",
          "705:     stbl_group = (GF_SampleGroupBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_SBGP);",
          "706:     stbl_group->grouping_type = frag_group->grouping_type;",
          "707:     stbl_group->grouping_type_parameter = frag_group->grouping_type_parameter;",
          "708:     stbl_group->version = frag_group->version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:     if (!stbl_group) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "846:       if (size > sai->IV_size) {",
          "847:        sai->subsample_count = gf_bs_read_u16(trak->moov->mov->movieFileMap->bs);",
          "848:        sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sizeof(GF_CENCSubSampleEntry)*sai->subsample_count);",
          "849:        for (j = 0; j < sai->subsample_count; j++) {",
          "850:         sai->subsamples[j].bytes_clear_data = gf_bs_read_u16(trak->moov->mov->movieFileMap->bs);",
          "851:         sai->subsamples[j].bytes_encrypted_data = gf_bs_read_u32(trak->moov->mov->movieFileMap->bs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:        if (!sai->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "861:      gf_list_add(senc->samp_aux_info, sai);",
          "862:      if (sai->subsample_count) senc->flags = 0x00000002;",
          "864:      if (nb_saio == 1)",
          "865:       offset += size;",
          "866:     }",
          "",
          "[Removed Lines]",
          "863:      gf_isom_cenc_merge_saiz_saio(senc, trak->Media->information->sampleTable, offset, size);",
          "",
          "[Added Lines]",
          "869:      e = gf_isom_cenc_merge_saiz_saio(senc, trak->Media->information->sampleTable, offset, size);",
          "870:      if (e) return e;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "872:     sai = (GF_CENCSampleAuxInfo *)gf_list_get(sais, i);",
          "874:     new_sai = (GF_CENCSampleAuxInfo *)gf_malloc(sizeof(GF_CENCSampleAuxInfo));",
          "875:     new_sai->IV_size = sai->IV_size;",
          "876:     memmove((char *)new_sai->IV, (const char*)sai->IV, 16);",
          "877:     new_sai->subsample_count = sai->subsample_count;",
          "878:     new_sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(new_sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "879:     memmove(new_sai->subsamples, sai->subsamples, new_sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "881:     gf_list_add(senc->samp_aux_info, new_sai);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:     if (!new_sai) return GF_OUT_OF_MEM;",
          "887:     if (!new_sai->subsamples) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "961:  mdhd = (GF_MediaHeaderBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MDHD);",
          "964:  switch (MediaType) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "970:  if (! *mdia) return GF_OUT_OF_MEM;",
          "972:  if (! mdhd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1037:   str = \"GPAC IsoMedia Handler\";",
          "1038:   break;",
          "1039:  }",
          "1040:  hdlr = (GF_HandlerBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_HDLR);",
          "1041:  minf = (GF_MediaInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MINF);",
          "1043:  mdhd->timeScale = TimeScale;",
          "1044:  hdlr->handlerType = MediaType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1051:  if (!mediaInfo) return GF_OUT_OF_MEM;",
          "1053:  if (!hdlr) return GF_OUT_OF_MEM;",
          "1055:  if (!minf) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1048:  stbl = (GF_SampleTableBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STBL);",
          "1049:  dinf = (GF_DataInformationBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DINF);",
          "1050:  stbl->SampleDescription = (GF_SampleDescriptionBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSD);",
          "1051:  stbl->ChunkOffset = gf_isom_box_new(GF_ISOM_BOX_TYPE_STCO);",
          "1053:  stbl->SampleSize = (GF_SampleSizeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSZ);",
          "1054:  stbl->SampleToChunk = (GF_SampleToChunkBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STSC);",
          "1055:  stbl->TimeToSample = (GF_TimeToSampleBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_STTS);",
          "1058:  dref = (GF_DataReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DREF);",
          "1059:  e = dinf_AddBox((GF_Box*)dinf, (GF_Box *)dref);",
          "1060:  if (e) goto err_exit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1063:  if (!stbl) return GF_OUT_OF_MEM;",
          "1065:  if (!dinf) return GF_OUT_OF_MEM;",
          "1067:  if (!stbl->SampleDescription) return GF_OUT_OF_MEM;",
          "1069:  if (!stbl->ChunkOffset) return GF_OUT_OF_MEM;",
          "1072:  if (!stbl->SampleSize) return GF_OUT_OF_MEM;",
          "1074:  if (!stbl->SampleToChunk) return GF_OUT_OF_MEM;",
          "1076:  if (!stbl->TimeToSample) return GF_OUT_OF_MEM;",
          "1080:  if (!dref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1116:  if (esd->dependsOnESID  || esd->OCRESID ) {",
          "1117:   if (!trak->References) {",
          "1118:    tref = (GF_TrackReferenceBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TREF);",
          "1119:    e = trak_AddBox((GF_Box*)trak, (GF_Box *)tref);",
          "1120:    if (e) return e;",
          "1121:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:    if (!tref) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1127:  if (e) return e;",
          "1128:  if (!dpnd && esd->dependsOnESID) {",
          "1129:   dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "1130:   dpnd->reference_type = GF_ISOM_BOX_TYPE_DPND;",
          "1131:   e = tref_AddBox((GF_Box*)tref, (GF_Box *) dpnd);",
          "1132:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153:   if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1142:  if (e) return e;",
          "1143:  if (!dpnd && esd->OCRESID) {",
          "1144:   dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "1145:   dpnd->reference_type = GF_ISOM_BOX_TYPE_SYNC;",
          "1146:   e = tref_AddBox((GF_Box*)tref, (GF_Box *) dpnd);",
          "1147:   if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169:   if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1162:   if (!dpnd) {",
          "1163:    tmpRef = 0;",
          "1164:    dpnd = (GF_TrackReferenceTypeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);",
          "1165:    dpnd->reference_type = GF_ISOM_BOX_TYPE_IPIR;",
          "1166:    e = tref_AddBox((GF_Box*)tref, (GF_Box *) dpnd);",
          "1167:    if (e) return e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:    if (!dpnd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1290:     entry_v = (GF_MPEGVisualSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MP4V);",
          "1291:     if (!entry_v) return GF_OUT_OF_MEM;",
          "1292:     entry_v->esd = (GF_ESDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_ESDS);",
          "1293:     entry_v->esd->desc = esd;",
          "1294:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1319:     if (!entry_v->esd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1301:     GF_MPEGAudioSampleEntryBox *opus = (GF_MPEGAudioSampleEntryBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_OPUS);",
          "1302:     if (!opus) return GF_OUT_OF_MEM;",
          "1303:     opus->cfg_opus = (GF_OpusSpecificBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_DOPS);",
          "1304:     entry = (GF_MPEGSampleEntryBox*)opus;",
          "1305:     gf_odf_desc_del((GF_Descriptor *) esd);",
          "1306:    } else if (esd->decoderConfig->objectTypeIndication == GPAC_OTI_AUDIO_AC3) {",
          "1307:     GF_MPEGAudioSampleEntryBox *ac3 = (GF_MPEGAudioSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_AC3);",
          "1308:     if (!ac3) return GF_OUT_OF_MEM;",
          "1309:     ac3->cfg_ac3 = (GF_AC3ConfigBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DAC3);",
          "1310:     entry = (GF_MPEGSampleEntryBox*) ac3;",
          "1311:     gf_odf_desc_del((GF_Descriptor *) esd);",
          "1312:    } else if (esd->decoderConfig->objectTypeIndication==GPAC_OTI_AUDIO_EAC3) {",
          "1313:     GF_MPEGAudioSampleEntryBox *eac3 = (GF_MPEGAudioSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_EC3);",
          "1314:     if (!eac3) return GF_OUT_OF_MEM;",
          "1315:     eac3->cfg_ac3 = (GF_AC3ConfigBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_DEC3);",
          "1316:     entry = (GF_MPEGSampleEntryBox*) eac3;",
          "1317:     gf_odf_desc_del((GF_Descriptor *) esd);",
          "1318:    } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1331:     if (!opus->cfg_opus) return GF_OUT_OF_MEM;",
          "1338:     if (!ac3->cfg_ac3) return GF_OUT_OF_MEM;",
          "1345:     if (!eac3->cfg_ac3) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1320:     if (!entry_a) return GF_OUT_OF_MEM;",
          "1321:     entry_a->samplerate_hi = trak->Media->mediaHeader->timeScale;",
          "1322:     entry_a->esd = (GF_ESDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_ESDS);",
          "1323:     entry_a->esd->desc = esd;",
          "1325:     entry = (GF_MPEGSampleEntryBox*) entry_a;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1353:     if (!entry_a->esd) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1334:    } else {",
          "1335:     entry = (GF_MPEGSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_MP4S);",
          "1336:     entry->esd = (GF_ESDBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_ESDS);",
          "1337:     entry->esd->desc = esd;",
          "1338:    }",
          "1339:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1368:     if (!entry->esd) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/isomedia/ttml.c||src/isomedia/ttml.c": [
          "File: src/isomedia/ttml.c -> src/isomedia/ttml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   s->text = (char *) gf_malloc(sizeof(char)*(s->len+2) );",
          "109:   s->text[s->len] = 0;",
          "110:   s->text[s->len+1] = 0;",
          "111:   gf_bs_read_data(bs, s->text, s->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   if (!s->text) return NULL;",
          "",
          "---------------"
        ],
        "src/isomedia/tx3g.c||src/isomedia/tx3g.c": [
          "File: src/isomedia/tx3g.c -> src/isomedia/tx3g.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  if (txt->font_table) gf_isom_box_del((GF_Box*)txt->font_table);",
          "76:  txt->font_table = (GF_FontTableBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_FTAB);",
          "77:  txt->font_table->entry_count = desc->font_count;",
          "78:  txt->font_table->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * desc->font_count);",
          "79:  for (i=0; i<desc->font_count; i++) {",
          "80:   txt->font_table->fonts[i].fontID = desc->fonts[i].fontID;",
          "81:   if (desc->fonts[i].fontName) txt->font_table->fonts[i].fontName = gf_strdup(desc->fonts[i].fontName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:  if (!txt->font_table) return GF_OUT_OF_MEM;",
          "80:  if (!txt->font_table->fonts) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();",
          "118:  txt = (GF_Tx3gSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_TX3G);",
          "119:  txt->dataReferenceIndex = dataRefIndex;",
          "120:  gf_list_add(trak->Media->information->sampleTable->SampleDescription->other_boxes, txt);",
          "121:  if (outDescriptionIndex) *outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->other_boxes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:  if (!txt) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:  txt->vertical_justification = desc->vert_justif;",
          "128:  txt->horizontal_justification = desc->horiz_justif;",
          "129:  txt->font_table = (GF_FontTableBox *)gf_isom_box_new(GF_ISOM_BOX_TYPE_FTAB);",
          "130:  txt->font_table->entry_count = desc->font_count;",
          "132:  txt->font_table->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * desc->font_count);",
          "133:  for (i=0; i<desc->font_count; i++) {",
          "134:   txt->font_table->fonts[i].fontID = desc->fonts[i].fontID;",
          "135:   if (desc->fonts[i].fontName) txt->font_table->fonts[i].fontName = gf_strdup(desc->fonts[i].fontName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:  if (!txt->font_table) return GF_OUT_OF_MEM;",
          "137:  if (!txt->font_table->fonts) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:  if (!samp || samp->text) return GF_BAD_PARAM;",
          "158:  samp->text = (char*)gf_malloc(sizeof(char) * 2);",
          "159:  samp->text[0] = (char) 0xFE;",
          "160:  samp->text[1] = (char) 0xFF;",
          "161:  samp->len = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  if (!samp->text) return GF_OUT_OF_MEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483:   s->text = (char *) gf_malloc(sizeof(char)*(s->len+2) );",
          "484:   s->text[s->len] = 0;",
          "485:   s->text[s->len+1] = 0;",
          "486:   gf_bs_read_data(bs, s->text, s->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   if (!s->text) return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "499:       s->styles = st2;",
          "500:      } else {",
          "501:       s->styles->styles = (GF_StyleRecord*)gf_realloc(s->styles->styles, sizeof(GF_StyleRecord) * (s->styles->entry_count + st2->entry_count));",
          "502:       memcpy(&s->styles->styles[s->styles->entry_count], st2->styles, sizeof(GF_StyleRecord) * st2->entry_count);",
          "503:       s->styles->entry_count += st2->entry_count;",
          "504:       gf_isom_box_del(a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:       if (!s->styles->styles) {",
          "510:        s->styles->entry_count = 0;",
          "511:        return s;",
          "512:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7b9b1faf5f74dfd8cb0497e709cef8b1c2f31ef",
      "candidate_info": {
        "commit_hash": "a7b9b1faf5f74dfd8cb0497e709cef8b1c2f31ef",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/a7b9b1faf5f74dfd8cb0497e709cef8b1c2f31ef",
        "files": [
          "src/isomedia/box_code_3gpp.c"
        ],
        "message": "fixed parsing of files with broken text box in stsd - cf #1853",
        "before_after_code_files": [
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c"
          ],
          "candidate": [
            "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:  ISOM_DECREASE_SIZE(ptr, 8);",
          "351:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "352:  if (e) return e;",
          "354:  if (!ptr->size) {",
          "356:   return GF_OK;",
          "357:  }",
          "358:  ISOM_DECREASE_SIZE(ptr, 43);",
          "",
          "[Removed Lines]",
          "355:   ptr->textJustification = 1;",
          "",
          "[Added Lines]",
          "354:  ptr->textJustification = 1;",
          "358:   return GF_OK;",
          "359:  }",
          "360:  if (ptr->size < 43) {",
          "361:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Broken text box (%d bytes but min 43 required), skiping parsing.\\n\", ptr->size));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:  }",
          "420:  ISOM_DECREASE_SIZE(ptr, pSize);",
          "421:  return gf_isom_box_array_read(s, bs);",
          "422: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:  u32 next_size = gf_bs_peek_bits(bs, 32, 0);",
          "428:  if (next_size > ptr->size) {",
          "429:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] Broken text box detected, skiping parsing.\\n\"));",
          "430:   ptr->textJustification = 1;",
          "431:   return GF_OK;",
          "432:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56a228e391da55275937db1d1feaf1a1bdceb70c",
      "candidate_info": {
        "commit_hash": "56a228e391da55275937db1d1feaf1a1bdceb70c",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/56a228e391da55275937db1d1feaf1a1bdceb70c",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h",
          "share/doc/man/gpac-filters.1",
          "share/doc/man/gpac.1",
          "share/doc/man/mp4box.1",
          "share/doc/man/mp4client.1",
          "src/filters/isoffin.h",
          "src/filters/isoffin_load.c",
          "src/filters/isoffin_read.c",
          "src/filters/load_text.c",
          "src/filters/mux_isom.c",
          "src/isomedia/media.c",
          "src/isomedia/tx3g.c",
          "src/media_tools/isom_tools.c",
          "src/media_tools/media_import.c",
          "src/scene_manager/loader_isom.c",
          "testsuite"
        ],
        "message": "fixes in mpeg4 streaming text",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h||include/gpac/isomedia.h",
          "src/filters/isoffin.h||src/filters/isoffin.h",
          "src/filters/isoffin_load.c||src/filters/isoffin_load.c",
          "src/filters/isoffin_read.c||src/filters/isoffin_read.c",
          "src/filters/load_text.c||src/filters/load_text.c",
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/tx3g.c||src/isomedia/tx3g.c",
          "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c",
          "src/media_tools/media_import.c||src/media_tools/media_import.c",
          "src/scene_manager/loader_isom.c||src/scene_manager/loader_isom.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ],
          "candidate": [
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4279: };",
          "4281: GF_TextSample *gf_isom_parse_text_sample(GF_BitStream *bs);",
          "4284: struct _generic_subtitle_sample",
          "4285: {",
          "",
          "[Removed Lines]",
          "4282: GF_TextSample *gf_isom_parse_text_sample_from_data(u8 *data, u32 dataLength);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/gpac/isomedia.h||include/gpac/isomedia.h": [
          "File: include/gpac/isomedia.h -> include/gpac/isomedia.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4711: GF_Err gf_isom_new_text_description(GF_ISOFile *isom_file, u32 trackNumber, GF_TextSampleDescriptor *desc, const char *URLname, const char *URNname, u32 *outDescriptionIndex);",
          "4724: \\param tx_samp the target text sample",
          "4725: \\return error if any",
          "",
          "[Removed Lines]",
          "4714: \\param isom_file the target ISO file",
          "4715: \\param trackNumber the target track",
          "4716: \\param sampleDescriptionIndex the target sample description index",
          "4717: \\param desc the text sample descriptor to use",
          "4718: \\return error if any",
          "4720: GF_Err gf_isom_update_text_description(GF_ISOFile *isom_file, u32 trackNumber, u32 sampleDescriptionIndex, GF_TextSampleDescriptor *desc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4732: GF_Err gf_isom_text_reset_styles(GF_TextSample *tx_samp);",
          "4742: handling UTF8 and UTF16 strings in a transparent manner",
          "4743: \\param tx_samp the target text sample",
          "",
          "[Removed Lines]",
          "4735: on (cf below) is not formatted as UTF16 data(2 bytes char) the resulting text sample won't be compliant,",
          "4736: but this library won't warn",
          "4737: \\param tx_samp the target text sample",
          "4738: \\return error if any",
          "4740: GF_Err gf_isom_text_set_utf16_marker(GF_TextSample *tx_samp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4759: \\return error if any",
          "4761: GF_Err gf_isom_text_add_highlight(GF_TextSample *tx_samp, u16 start_char, u16 end_char);",
          "4772: \\param tx_samp the target text sample",
          "4773: \\param argb color value",
          "4774: \\return error if any",
          "4778: \\param tx_samp the target text sample",
          "4779: \\param start_time karaoke start time expressed in text stream timescale, but relative to the sample media time",
          "",
          "[Removed Lines]",
          "4763: \\param tx_samp the target text sample",
          "4764: \\param r red component value",
          "4765: \\param g green component value",
          "4766: \\param b blue component value",
          "4767: \\param a alpha component value",
          "4768: \\return error if any",
          "4770: GF_Err gf_isom_text_set_highlight_color(GF_TextSample *tx_samp, u8 r, u8 g, u8 b, u8 a);",
          "4776: GF_Err gf_isom_text_set_highlight_color_argb(GF_TextSample *tx_samp, u32 argb);",
          "",
          "[Added Lines]",
          "4751: GF_Err gf_isom_text_set_highlight_color(GF_TextSample *tx_samp, u32 argb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4827: GF_Err gf_isom_text_set_wrap(GF_TextSample *tx_samp, u8 wrap_flags);",
          "4836: \\param tx_samp the target text sample",
          "4837: \\param bs thetarget bitstream",
          "",
          "[Removed Lines]",
          "4830: The resulting sample will always be marked as random access",
          "4831: \\param tx_samp the target text sample",
          "4832: \\return the corresponding serialized ISO sample",
          "4834: GF_ISOSample *gf_isom_text_to_sample(const GF_TextSample *tx_samp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/filters/isoffin.h||src/filters/isoffin.h": [
          "File: src/filters/isoffin.h -> src/filters/isoffin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  Bool analyze;",
          "63:  char *catseg;",
          "64:  Bool sigfrag;",
          "66:  u32 mstore_purge, mstore_samples, mstore_size;",
          "",
          "[Removed Lines]",
          "65:  Bool nocrypt;",
          "",
          "[Added Lines]",
          "65:  Bool nocrypt, strtxt;",
          "",
          "---------------"
        ],
        "src/filters/isoffin_load.c||src/filters/isoffin_load.c": [
          "File: src/filters/isoffin_load.c -> src/filters/isoffin_load.c"
        ],
        "src/filters/isoffin_read.c||src/filters/isoffin_read.c": [
          "File: src/filters/isoffin_read.c -> src/filters/isoffin_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  if (!read->input_loaded && read->frag_type)",
          "136:   read->refresh_fragmented = GF_TRUE;",
          "138:  return isor_declare_objects(read);",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:  if (read->strtxt)",
          "139:   gf_isom_text_set_streaming_mode(read->mov, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1322:  { OFFS(mstore_size), \"target buffer size in bytes\", GF_PROP_UINT, \"1000000\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "1323:  { OFFS(mstore_purge), \"minimum size in bytes between memory purges when reading from memory stream (pipe etc...), 0 means purge as soon as possible\", GF_PROP_UINT, \"50000\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "1324:  { OFFS(mstore_samples), \"minimum number of samples to be present before purging sample tables when reading from memory stream (pipe etc...), 0 means purge as soon as possible\", GF_PROP_UINT, \"50\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "1326:  {0}",
          "1327: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:  { OFFS(strtxt), \"load text tracks (apple/tx3g) as MPEG-4 streaming text tracks\", GF_PROP_BOOL, \"false\", NULL, GF_FS_ARG_HINT_EXPERT},",
          "",
          "---------------"
        ],
        "src/filters/load_text.c||src/filters/load_text.c": [
          "File: src/filters/load_text.c -> src/filters/load_text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2036:     has_text = GF_TRUE;",
          "2037:    }",
          "2038:    else if (!strcmp(att->name, \"scrollDelay\")) gf_isom_text_set_scroll_delay(samp, (u32) (1000*atoi(att->value)));",
          "2040:    else if (!strcmp(att->name, \"wrap\") && !strcmp(att->value, \"Automatic\")) gf_isom_text_set_wrap(samp, 0x01);",
          "2041:   }",
          "",
          "[Removed Lines]",
          "2039:    else if (!strcmp(att->name, \"highlightColor\")) gf_isom_text_set_highlight_color_argb(samp, ttxt_get_color(att->value));",
          "",
          "[Added Lines]",
          "2039:    else if (!strcmp(att->name, \"highlightColor\")) gf_isom_text_set_highlight_color(samp, ttxt_get_color(att->value));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2515:     while ((att=(GF_XMLAttribute *)gf_list_enum(desc->attributes, &k))) {",
          "2516:      if (!strcmp(att->name, \"targetEncoding\") && !strcmp(att->value, \"utf16\")) ;//is_utf16 = 1;",
          "2517:      else if (!strcmp(att->name, \"scrollDelay\")) gf_isom_text_set_scroll_delay(samp, atoi(att->value) );",
          "2519:     }",
          "2520:     start = end = 0;",
          "2521:     k=0;",
          "",
          "[Removed Lines]",
          "2518:      else if (!strcmp(att->name, \"highlightColor\")) gf_isom_text_set_highlight_color_argb(samp, tx3g_get_color(att->value));",
          "",
          "[Added Lines]",
          "2518:      else if (!strcmp(att->name, \"highlightColor\")) gf_isom_text_set_highlight_color(samp, tx3g_get_color(att->value));",
          "",
          "---------------"
        ],
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:   override_stype = GF_STREAM_ND_SUBPIC;",
          "1344:   comp_name = \"VobSub\";",
          "1345:   break;",
          "1347:  case GF_CODECID_AV1:",
          "1348:   use_gen_sample_entry = GF_FALSE;",
          "1349:   m_subtype = GF_ISOM_SUBTYPE_AV01;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346:  case GF_CODECID_TEXT_MPEG4:",
          "1347:   use_m4sys = GF_TRUE;",
          "1348:   gf_isom_set_media_type(ctx->file, tkw->track_num, GF_ISOM_MEDIA_SCENE);",
          "1349:   comp_name = \"MPEG4 Streaming Text\";",
          "1350:   break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1601:  if (!use_dref) src_url = NULL;",
          "1605:  if (use_m4sys) {",
          "1606:   GF_ESD *esd = gf_odf_desc_esd_new(2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1607:  if (use_m4sys && !gf_codecid_oti(codec_id)) {",
          "1608:   use_m4sys = GF_FALSE;",
          "1609:  }",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   if (e) return e;",
          "579:  }",
          "580:  else if (mdia->mediaTrack->moov->mov->convert_streaming_text",
          "582:           && (entry->type == GF_ISOM_BOX_TYPE_TX3G || entry->type == GF_ISOM_BOX_TYPE_TEXT)",
          "583:          ) {",
          "584:   u64 dur;",
          "",
          "[Removed Lines]",
          "581:           && ((mdia->handler->handlerType == GF_ISOM_MEDIA_TEXT) || (mdia->handler->handlerType == GF_ISOM_MEDIA_SUBT))",
          "",
          "[Added Lines]",
          "581:           && ((mdia->handler->handlerType == GF_ISOM_MEDIA_TEXT) || (mdia->handler->handlerType == GF_ISOM_MEDIA_SCENE) || (mdia->handler->handlerType == GF_ISOM_MEDIA_SUBT))",
          "",
          "---------------"
        ],
        "src/isomedia/tx3g.c||src/isomedia/tx3g.c": [
          "File: src/isomedia/tx3g.c -> src/isomedia/tx3g.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #ifndef GPAC_DISABLE_ISOM_WRITE",
          "93: GF_Err gf_isom_update_text_description(GF_ISOFile *movie, u32 trackNumber, u32 descriptionIndex, GF_TextSampleDescriptor *desc)",
          "94: {",
          "95:  GF_TrackBox *trak;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #if 0 //unused",
          "95: \\param isom_file the target ISO file",
          "96: \\param trackNumber the target track",
          "97: \\param sampleDescriptionIndex the target sample description index",
          "98: \\param desc the text sample descriptor to use",
          "99: \\return error if any",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:  }",
          "155:  return e;",
          "156: }",
          "158: GF_EXPORT",
          "159: GF_Err gf_isom_new_text_description(GF_ISOFile *movie, u32 trackNumber, GF_TextSampleDescriptor *desc, const char *URLname, const char *URNname, u32 *outDescriptionIndex)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #endif //unused",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:  return GF_OK;",
          "224: }",
          "226: GF_Err gf_isom_text_set_utf16_marker(GF_TextSample *samp)",
          "227: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #if 0 //unused",
          "237: on (cf below) is not formatted as UTF16 data(2 bytes char) the resulting text sample won't be compliant,",
          "238: but this library won't warn",
          "239: \\param tx_samp the target text sample",
          "240: \\return error if any",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:  samp->len = 2;",
          "234:  return GF_OK;",
          "235: }",
          "237: GF_EXPORT",
          "238: GF_Err gf_isom_text_add_style(GF_TextSample *samp, GF_StyleRecord *rec)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: #endif //unused",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:  return gf_list_add(samp->others, a);",
          "265: }",
          "287: {",
          "288:  if (!samp) return GF_BAD_PARAM;",
          "",
          "[Removed Lines]",
          "267: GF_EXPORT",
          "268: GF_Err gf_isom_text_set_highlight_color(GF_TextSample *samp, u8 r, u8 g, u8 b, u8 a)",
          "269: {",
          "270:  if (!samp) return GF_BAD_PARAM;",
          "272:  if (!samp->highlight_color) {",
          "273:   samp->highlight_color = (GF_TextHighlightColorBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_HCLR);",
          "274:   if (!samp->highlight_color) return GF_OUT_OF_MEM;",
          "275:  }",
          "276:  samp->highlight_color->hil_color = a;",
          "277:  samp->highlight_color->hil_color <<= 8;",
          "278:  samp->highlight_color->hil_color = r;",
          "279:  samp->highlight_color->hil_color <<= 8;",
          "280:  samp->highlight_color->hil_color = g;",
          "281:  samp->highlight_color->hil_color <<= 8;",
          "282:  samp->highlight_color->hil_color = b;",
          "283:  return GF_OK;",
          "284: }",
          "286: GF_Err gf_isom_text_set_highlight_color_argb(GF_TextSample *samp, u32 argb)",
          "",
          "[Added Lines]",
          "285: GF_EXPORT",
          "286: GF_Err gf_isom_text_set_highlight_color(GF_TextSample *samp, u32 argb)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420:  return e;",
          "421: }",
          "423: GF_ISOSample *gf_isom_text_to_sample(const GF_TextSample *samp)",
          "424: {",
          "425:  GF_Err e;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: #if 0 //unused",
          "425: The resulting sample will always be marked as random access",
          "426: \\param tx_samp the target text sample",
          "427: \\return the corresponding serialized ISO sample",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "445:  res->IsRAP = RAP;",
          "446:  return res;",
          "447: }",
          "449: u32 gf_isom_text_sample_size(GF_TextSample *samp)",
          "450: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454: #endif //unused",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "667:  return s;",
          "668: }",
          "670: GF_TextSample *gf_isom_parse_text_sample_from_data(u8 *data, u32 dataLength)",
          "671: {",
          "672:  GF_TextSample *s;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: #if 0 //unused",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "681:  gf_bs_del(bs);",
          "682:  return s;",
          "683: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692: #endif",
          "",
          "---------------"
        ],
        "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c": [
          "File: src/media_tools/isom_tools.c -> src/media_tools/isom_tools.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:   gf_bs_del(bs);",
          "1132:   return esd;",
          "1133:  }",
          "1135:  return NULL;",
          "1136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134:  if (mp4->convert_streaming_text && ((subtype == GF_ISOM_SUBTYPE_TEXT) || (subtype == GF_ISOM_SUBTYPE_TX3G))",
          "1135:  ) {",
          "1136:   return gf_isom_get_esd(mp4, track, stsd_idx);",
          "1137:  }",
          "",
          "---------------"
        ],
        "src/media_tools/media_import.c||src/media_tools/media_import.c": [
          "File: src/media_tools/media_import.c -> src/media_tools/media_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1423:    importer->esd->slConfig = esd->slConfig;",
          "1424:    esd->slConfig = NULL;",
          "1425:   }",
          "1427:  }",
          "1429:  if (importer->print_stats_graph & 1) gf_fs_print_stats(fsess);",
          "",
          "[Removed Lines]",
          "1426:   if (esd) gf_odf_desc_del((GF_Descriptor *) esd);",
          "",
          "[Added Lines]",
          "1426:   if (esd) {",
          "1427:    gf_odf_desc_del((GF_Descriptor *) esd);",
          "1428:   }",
          "1430:   if (!importer->esd->ESID) {",
          "1431:    importer->esd->ESID = importer->final_trackID;",
          "1432:   }",
          "",
          "---------------"
        ],
        "src/scene_manager/loader_isom.c||src/scene_manager/loader_isom.c": [
          "File: src/scene_manager/loader_isom.c -> src/scene_manager/loader_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:   }",
          "217:   esd = gf_isom_get_esd(load->isom, i+1, 1);",
          "218:   if (!esd) continue;",
          "221:   if ((esd->decoderConfig->objectTypeIndication == GF_CODECID_AFX) ||",
          "222:           (esd->decoderConfig->objectTypeIndication == GF_CODECID_SYNTHESIZED_TEXTURE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:   if (esd->decoderConfig && (esd->decoderConfig->objectTypeIndication==GF_CODECID_TEXT_MPEG4))",
          "220:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0ea96c7bfb7279cfb6874670f4c870c81bfef11",
      "candidate_info": {
        "commit_hash": "c0ea96c7bfb7279cfb6874670f4c870c81bfef11",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/c0ea96c7bfb7279cfb6874670f4c870c81bfef11",
        "files": [
          "src/filters/out_video.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/tx3g.c",
          "src/utils/constants.c"
        ],
        "message": "fixed warnings",
        "before_after_code_files": [
          "src/filters/out_video.c||src/filters/out_video.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/tx3g.c||src/isomedia/tx3g.c",
          "src/utils/constants.c||src/utils/constants.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ],
          "candidate": [
            "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
            "src/isomedia/tx3g.c||src/isomedia/tx3g.c"
          ]
        }
      },
      "candidate_diff": {
        "src/filters/out_video.c||src/filters/out_video.c": [
          "File: src/filters/out_video.c -> src/filters/out_video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1214: exit:",
          "1219:   gf_filter_lock(ctx->filter, GF_TRUE);",
          "1221:    if (!ctx->overlay_tx) {",
          "1222:     glGenTextures(1, &ctx->overlay_tx);",
          "",
          "[Removed Lines]",
          "1217:  if (ctx->oldata.ptr) {",
          "1220:   if (ctx->oldata.ptr && (ctx->oldata.size <= 4 * ctx->olsize.x * ctx->olsize.y) ) {",
          "",
          "[Added Lines]",
          "1217:  if (ctx->oldata.ptr && (ctx->olsize.x>0) && (ctx->olsize.y>0)) {",
          "1220:   if (ctx->oldata.ptr && ((s32) ctx->oldata.size <= 4 * ctx->olsize.x * ctx->olsize.y) ) {",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box)",
          "92: {",
          "93:  u32 type, uuid_type, hdr_size, restore_type;",
          "95:  char uuid[16];",
          "96:  GF_Err e;",
          "97:  GF_BitStream *uncomp_bs = NULL;",
          "",
          "[Removed Lines]",
          "94:  u64 size, start, comp_start, payload_start, end;",
          "",
          "[Added Lines]",
          "94:  u64 size, start, comp_start, end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:  if (restore_type)",
          "249:   newBox->type = restore_type;",
          "253:  end = gf_bs_available(bs);",
          "254:  if (size - hdr_size > end ) {",
          "255:   newBox->size = size - hdr_size - end;",
          "",
          "[Removed Lines]",
          "251:  payload_start = gf_bs_get_position(bs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/isomedia/tx3g.c||src/isomedia/tx3g.c": [
          "File: src/isomedia/tx3g.c -> src/isomedia/tx3g.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  if (qt_txt) {",
          "84:   (*out_desc)->back_color = rgb_48_to_32(qt_txt->background_color);",
          "85:   (*out_desc)->default_pos = qt_txt->default_box;",
          "87:   (*out_desc)->default_style.text_color = rgb_48_to_32(qt_txt->foreground_color);",
          "88:   (*out_desc)->displayFlags = qt_txt->displayFlags;",
          "89:   (*out_desc)->vert_justif = -1;",
          "",
          "[Removed Lines]",
          "86:   (*out_desc)->default_style.style_flags = qt_txt->fontFace;",
          "",
          "[Added Lines]",
          "86:   (*out_desc)->default_style.style_flags = 0; //todo, expose qt_txt->fontFace;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "760:   gpp_write_rgba(bs, rgb_48_to_32(qt->background_color) );",
          "761:   gpp_write_box(bs, &qt->default_box);",
          "762:   sr.text_color = rgb_48_to_32(qt->foreground_color);",
          "764:   gpp_write_style(bs, &sr);",
          "765:  } else {",
          "766:   gf_bs_write_u8(bs, ttxt->horizontal_justification);",
          "",
          "[Removed Lines]",
          "763:   sr.style_flags = qt->fontFace;",
          "",
          "[Added Lines]",
          "763:   sr.style_flags = 0; //todo expose qt->fontFace;",
          "",
          "---------------"
        ],
        "src/utils/constants.c||src/utils/constants.c": [
          "File: src/utils/constants.c -> src/utils/constants.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:    char *sep = strchr(n, '|');",
          "175:    u32 len;",
          "176:    if (sep)",
          "178:    else",
          "179:     len = (u32) strlen(n);",
          "",
          "[Removed Lines]",
          "177:     len = sep - n;",
          "",
          "[Added Lines]",
          "177:     len = (u32) (sep - n);",
          "",
          "---------------"
        ]
      }
    }
  ]
}