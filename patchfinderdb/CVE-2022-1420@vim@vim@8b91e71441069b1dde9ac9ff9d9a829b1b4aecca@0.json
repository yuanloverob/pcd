{
  "cve_id": "CVE-2022-1420",
  "cve_desc": "Use of Out-of-range Pointer Offset in GitHub repository vim/vim prior to 8.2.4774.",
  "repo": "vim/vim",
  "patch_hash": "8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
  "patch_info": {
    "commit_hash": "8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
    "files": [
      "src/errors.h",
      "src/eval.c",
      "src/testdir/test_lambda.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4774: crash when using a number for lambda name\n\nProblem:    Crash when using a number for lambda name.\nSolution:   Check the type of the lambda reference.",
    "before_after_code_files": [
      "src/errors.h||src/errors.h",
      "src/eval.c||src/eval.c",
      "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/errors.h||src/errors.h": [
      "File: src/errors.h -> src/errors.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3259:  INIT(= N_(\"E1273: (NFA regexp) missing value in '\\\\%%%c'\"));",
      "3260: EXTERN char e_no_script_file_name_to_substitute_for_script[]",
      "3261:  INIT(= N_(\"E1274: No script file name to substitute for \\\"<script>\\\"\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3262: #ifdef FEAT_EVAL",
      "3263: EXTERN char e_string_or_function_required_for_arrow_parens_expr[]",
      "3264:  INIT(= N_(\"E1275: String or function required for ->(expr)\"));",
      "3265: #endif",
      "",
      "---------------"
    ],
    "src/eval.c||src/eval.c": [
      "File: src/eval.c -> src/eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4102:  ++*arg;",
      "4103:  ret = eval1(arg, rettv, evalarg);",
      "4106:  {",
      "4108:  }",
      "4110:  {",
      "4113:  }",
      "4114:     }",
      "4115:     if (ret != OK)",
      "4116:  return FAIL;",
      "4118:     {",
      "4119:  if (verbose)",
      "4120:  {",
      "",
      "[Removed Lines]",
      "4105:  if (**arg == ')')",
      "4107:      ++*arg;",
      "4109:  else",
      "4111:      emsg(_(e_missing_closing_paren));",
      "4112:      ret = FAIL;",
      "4117:     else if (**arg != '(')",
      "",
      "[Added Lines]",
      "4105:  if (**arg != ')')",
      "4107:      emsg(_(e_missing_closing_paren));",
      "4108:      return FAIL;",
      "4110:  if (rettv->v_type != VAR_STRING && rettv->v_type != VAR_FUNC",
      "4111:             && rettv->v_type != VAR_PARTIAL)",
      "4113:      emsg(_(e_string_or_function_required_for_arrow_parens_expr));",
      "4114:      return FAIL;",
      "4116:  ++*arg;",
      "4121:     if (**arg != '(')",
      "",
      "---------------"
    ],
    "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim": [
      "File: src/testdir/test_lambda.vim -> src/testdir/test_lambda.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:   echo assert_fails('echo 10->{a -> a + 2}', 'E107:')",
      "68:   call assert_fails('eval 0->(', \"E110: Missing ')'\")",
      "69: endfunc",
      "71: func Test_not_lamda()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:   call assert_fails('eval 0->(3)()', \"E1275:\")",
      "70:   call assert_fails('eval 0->([3])()', \"E1275:\")",
      "71:   call assert_fails('eval 0->({\"a\": 3})()', \"E1275:\")",
      "72:   call assert_fails('eval 0->(xxx)()', \"E121:\")",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4773,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4774,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "605ec91e5a7330d61be313637e495fa02a6dc264",
      "candidate_info": {
        "commit_hash": "605ec91e5a7330d61be313637e495fa02a6dc264",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/605ec91e5a7330d61be313637e495fa02a6dc264",
        "files": [
          "src/eval.c",
          "src/testdir/test_lambda.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3847: illegal memory access when using a lambda with an error\n\nProblem:    Illegal memory access when using a lambda with an error.\nSolution:   Avoid skipping over the NUL after a string.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871:  ++*arg;",
          "3872:  ret = eval1(arg, rettv, evalarg);",
          "3875:  {",
          "3876:      emsg(_(e_missing_closing_paren));",
          "3877:      ret = FAIL;",
          "3878:  }",
          "3880:     }",
          "3881:     if (ret != OK)",
          "3882:  return FAIL;",
          "",
          "[Removed Lines]",
          "3874:  if (**arg != ')')",
          "3879:  ++*arg;",
          "",
          "[Added Lines]",
          "3874:  if (**arg == ')')",
          "3875:  {",
          "3876:      ++*arg;",
          "3877:  }",
          "3878:  else",
          "",
          "---------------"
        ],
        "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim": [
          "File: src/testdir/test_lambda.vim -> src/testdir/test_lambda.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   call assert_fails('echo {a, a -> a + a}(1, 2)', 'E853:')",
          "65:   call assert_fails('echo {a, b -> a + b)}(1, 2)', 'E451:')",
          "66:   echo assert_fails('echo 10->{a -> a + 2}', 'E107:')",
          "67: endfunc",
          "69: func Test_not_lamda()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   call assert_fails('eval 0->(', \"E110: Missing ')'\")",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3846,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3847,",
          "",
          "---------------"
        ]
      }
    }
  ]
}