{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efc752b131cd2745e1bd71ae1511303150478b07",
      "candidate_info": {
        "commit_hash": "efc752b131cd2745e1bd71ae1511303150478b07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efc752b131cd2745e1bd71ae1511303150478b07",
        "files": [
          "ext/misc/sqlar.c",
          "ext/misc/vfsstat.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix minor compile issues with optional extensions.\n\nFossilOrigin-Name: 3261ee9ec26bbeaa64190c12556a1d8146270b6660c70004830bd38c1b5b63f4",
        "before_after_code_files": [
          "ext/misc/sqlar.c||ext/misc/sqlar.c",
          "ext/misc/vfsstat.c||ext/misc/vfsstat.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sqlar.c||ext/misc/sqlar.c": [
          "File: ext/misc/sqlar.c -> ext/misc/sqlar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"sqlite3ext.h\"",
          "18: SQLITE_EXTENSION_INIT1",
          "19: #include <zlib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <assert.h>",
          "",
          "---------------"
        ],
        "ext/misc/vfsstat.c||ext/misc/vfsstat.c": [
          "File: ext/misc/vfsstat.c -> ext/misc/vfsstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:   if( rc==SQLITE_OK ){",
          "812:     rc = vstatRegister(db, pzErrMsg, pApi);",
          "813:     if( rc==SQLITE_OK ){",
          "815:     }",
          "816:   }",
          "817:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;",
          "",
          "[Removed Lines]",
          "814:       rc = sqlite3_auto_extension(vstatRegister);",
          "",
          "[Added Lines]",
          "814:       rc = sqlite3_auto_extension((void(*)(void))vstatRegister);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a77ceaf6ba934b1d73c90b8980191a65d02ad6ce1e11e6baf573b3a132685545",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89efac94fdfac50fac7f971edbde4850b008ecd8",
      "candidate_info": {
        "commit_hash": "89efac94fdfac50fac7f971edbde4850b008ecd8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89efac94fdfac50fac7f971edbde4850b008ecd8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h"
        ],
        "message": "When stat4 information is available, try to use it to improve the truth probability of WHERE clause terms that do not participate in the index.\n\nFossilOrigin-Name: 1babd6ec5d60e2c34aa1c0285ead768a88004218468e97262411973fe3487022",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f02030b3403d67734bba471a91ad5bfdb03ddf6fdc3ef14808a04495e43b0470",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2307:           }else{",
          "2308:             k = 20;",
          "2309:           }",
          "2311:         }",
          "2312:       }",
          "2313:     }",
          "",
          "[Removed Lines]",
          "2310:           if( iReduce<k ) iReduce = k;",
          "",
          "[Added Lines]",
          "2310:           if( iReduce<k ){",
          "2311:             pTerm->wtFlags |= TERM_HEURTRUTH;",
          "2312:             iReduce = k;",
          "2313:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2489:     }",
          "2491:     if( IsUniqueIndex(pProbe) && saved_nEq==pProbe->nKeyCol-1 ){",
          "2493:     }else{",
          "2495:     }",
          "2496:     pNew->wsFlags = saved_wsFlags;",
          "2497:     pNew->u.btree.nEq = saved_nEq;",
          "",
          "[Removed Lines]",
          "2492:       pBuilder->bldFlags |= SQLITE_BLDF_UNIQUE;",
          "2494:       pBuilder->bldFlags |= SQLITE_BLDF_INDEXED;",
          "",
          "[Added Lines]",
          "2495:       pBuilder->bldFlags1 |= SQLITE_BLDF1_UNIQUE;",
          "2497:       pBuilder->bldFlags1 |= SQLITE_BLDF1_INDEXED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2657:           if( nOut ){",
          "2658:             pNew->nOut = sqlite3LogEst(nOut);",
          "2659:             if( pNew->nOut>saved_nOut ) pNew->nOut = saved_nOut;",
          "2660:             pNew->nOut -= nIn;",
          "2661:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2662:             if( nEq==1 && pTerm->truthProb>0 ){",
          "2664:               if( sqlite3WhereTrace & 0x01 ){",
          "2665:                 sqlite3DebugPrintf(\"Update truthProb from %d to %d:\\n\",",
          "2666:                        pTerm->truthProb, pNew->nOut - pProbe->aiRowLogEst[0]);",
          "2667:                 sqlite3WhereTermPrint(pTerm, 999);",
          "2668:               }",
          "2669: #endif",
          "2670:               pTerm->truthProb = pNew->nOut - pProbe->aiRowLogEst[0];",
          "2671:               if( pTerm->wtFlags & TERM_HEURTRUTH ){",
          "2674:                 pBuilder->bldFlags2 |= SQLITE_BLDF2_2NDPASS;",
          "2675:               }",
          "2676:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3080:       }",
          "3081:     }",
          "3084:     rc = whereLoopAddBtreeIndex(pBuilder, pSrc, pProbe, 0);",
          "",
          "[Removed Lines]",
          "3083:     pBuilder->bldFlags = 0;",
          "3085:     if( pBuilder->bldFlags==SQLITE_BLDF_INDEXED ){",
          "",
          "[Added Lines]",
          "3101:     pBuilder->bldFlags1 = 0;",
          "3103:     if( pBuilder->bldFlags1==SQLITE_BLDF1_INDEXED ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4838:   if( nTabList!=1 || whereShortCut(&sWLB)==0 ){",
          "4839:     rc = whereLoopAddAll(&sWLB);",
          "4840:     if( rc ) goto whereBeginError;",
          "4842: #ifdef WHERETRACE_ENABLED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4860: #ifdef SQLITE_ENABLE_STAT4",
          "4866:     if( sWLB.bldFlags2 & SQLITE_BLDF2_2NDPASS ){",
          "4867:       WHERETRACE(0xffff,",
          "4868:          (\"**** Redo all loop computations due to truthProb changes ****\\n\"));",
          "4869:       while( pWInfo->pLoops ){",
          "4870:         WhereLoop *p = pWInfo->pLoops;",
          "4871:         pWInfo->pLoops = p->pNextLoop;",
          "4872:         whereLoopDelete(db, p);",
          "4873:       }",
          "4874:       rc = whereLoopAddAll(&sWLB);",
          "4875:       if( rc ) goto whereBeginError;",
          "4876:     }",
          "4877: #endif",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ]
      }
    },
    {
      "candidate_hash": "ce678c297bc0a533fe7ba38581ee14b04239cbae",
      "candidate_info": {
        "commit_hash": "ce678c297bc0a533fe7ba38581ee14b04239cbae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce678c297bc0a533fe7ba38581ee14b04239cbae",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Improved tracing output from the LEMON-generated parser.\n\nFossilOrigin-Name: 4d6d2fc046d586a1e5989bbb2757f13d0371fbfad0acf45a0e2fd77dffd8d8f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 840de36df1aaeb4bad9a7c18e97cc560ba3b8c629c4520a05bc456d67b3347b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:   for(i=0, rp=lem.rule; rp; rp=rp->next){",
          "1717:     rp->iRule = rp->code ? i++ : -1;",
          "1718:   }",
          "1719:   for(rp=lem.rule; rp; rp=rp->next){",
          "1720:     if( rp->iRule<0 ) rp->iRule = i++;",
          "1721:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1720:   lem.nruleWithAction = i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4431:   fprintf(out,\"#define YYNSTATE             %d\\n\",lemp->nxstate);  lineno++;",
          "4432:   fprintf(out,\"#define YYNRULE              %d\\n\",lemp->nrule);  lineno++;",
          "4433:   fprintf(out,\"#define YYNTOKEN             %d\\n\",lemp->nterminal); lineno++;",
          "4434:   fprintf(out,\"#define YY_MAX_SHIFT         %d\\n\",lemp->nxstate-1); lineno++;",
          "4435:   i = lemp->minShiftReduce;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4435:   fprintf(out,\"#define YYNRULE_WITH_ACTION  %d\\n\",lemp->nruleWithAction);",
          "4436:          lineno++;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:   if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){",
          "726:     yysize = yyRuleInfoNRhs[yyruleno];",
          "727:     if( yysize ){",
          "729:         yyTracePrompt,",
          "731:     }else{",
          "734:     }",
          "735:   }",
          "",
          "[Removed Lines]",
          "728:       fprintf(yyTraceFILE, \"%sReduce %d [%s], go to state %d.\\n\",",
          "730:         yyruleno, yyRuleName[yyruleno], yymsp[yysize].stateno);",
          "732:       fprintf(yyTraceFILE, \"%sReduce %d [%s].\\n\",",
          "733:         yyTracePrompt, yyruleno, yyRuleName[yyruleno]);",
          "",
          "[Added Lines]",
          "728:       fprintf(yyTraceFILE, \"%sReduce %d [%s]%s, pop back to state %d.\\n\",",
          "730:         yyruleno, yyRuleName[yyruleno],",
          "731:         yyruleno<YYNRULE_WITH_ACTION ? \"\" : \" without external action\",",
          "732:         yymsp[yysize].stateno);",
          "734:       fprintf(yyTraceFILE, \"%sReduce %d [%s]%s.\\n\",",
          "735:         yyTracePrompt, yyruleno, yyRuleName[yyruleno],",
          "736:         yyruleno<YYNRULE_WITH_ACTION ? \"\" : \" without external action\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79d9af960b39c02be348b68b14f4a8736137a0e3",
      "candidate_info": {
        "commit_hash": "79d9af960b39c02be348b68b14f4a8736137a0e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d9af960b39c02be348b68b14f4a8736137a0e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Attempt to silence harmless static analyzer warnings in Lemon and in the Lemon-generated parser.\n\nFossilOrigin-Name: de8ce22a46c90afa5475cd24c28b7a82b26410dc72d662af2f9d9e5e528e0eec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4542d194e2fef5e21e1c3679914bd9e21fab31cfb111cf640524fb3514a8afa3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:   while( rp ){",
          "1599:     pNext = rp->next;",
          "1600:     rp->next = 0;",
          "1602:       rp = Rule_merge(x[i], rp);",
          "1603:       x[i] = 0;",
          "1604:     }",
          "",
          "[Removed Lines]",
          "1601:     for(i=0; i<sizeof(x)/sizeof(x[0]) && x[i]; i++){",
          "",
          "[Added Lines]",
          "1601:     for(i=0; i<sizeof(x)/sizeof(x[0])-1 && x[i]; i++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3518: {",
          "3519:   const char *pathlist;",
          "3520:   char *pathbufptr;",
          "3522:   char *path,*cp;",
          "3523:   char c;",
          "",
          "[Removed Lines]",
          "3521:   char *pathbuf;",
          "",
          "[Added Lines]",
          "3521:   char *pathbuf = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3552:         else pathbuf = &cp[1];",
          "3553:         if( access(path,modemask)==0 ) break;",
          "3554:       }",
          "3556:     }",
          "3557:   }",
          "3558:   return path;",
          "3559: }",
          "",
          "[Removed Lines]",
          "3555:       free(pathbufptr);",
          "",
          "[Added Lines]",
          "3556:     free(pathbufptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3637:   char buf[1000];",
          "3638:   FILE *in;",
          "3639:   char *tpltname;",
          "3640:   char *cp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3640:   char *toFree = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3668:   }else if( access(templatename,004)==0 ){",
          "3669:     tpltname = templatename;",
          "3670:   }else{",
          "3672:   }",
          "3673:   if( tpltname==0 ){",
          "3674:     fprintf(stderr,\"Can't find the parser driver template file \\\"%s\\\".\\n\",",
          "",
          "[Removed Lines]",
          "3671:     tpltname = pathsearch(lemp->argv0,templatename,0);",
          "",
          "[Added Lines]",
          "3672:     toFree = tpltname = pathsearch(lemp->argv0,templatename,0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3678:   }",
          "3679:   in = fopen(tpltname,\"rb\");",
          "3680:   if( in==0 ){",
          "3682:     lemp->errorcnt++;",
          "3684:   }",
          "3685:   return in;",
          "3686: }",
          "",
          "[Removed Lines]",
          "3681:     fprintf(stderr,\"Can't open the template file \\\"%s\\\".\\n\",templatename);",
          "3683:     return 0;",
          "",
          "[Added Lines]",
          "3682:     fprintf(stderr,\"Can't open the template file \\\"%s\\\".\\n\",tpltname);",
          "3685:   free(toFree);",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:   (void)yyLookahead;",
          "719:   (void)yyLookaheadToken;",
          "720:   yymsp = yypParser->yytos;",
          "721: #ifndef NDEBUG",
          "723:     yysize = yyRuleInfoNRhs[yyruleno];",
          "724:     if( yysize ){",
          "725:       fprintf(yyTraceFILE, \"%sReduce %d [%s]%s, pop back to state %d.\\n\",",
          "",
          "[Removed Lines]",
          "722:   if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){",
          "",
          "[Added Lines]",
          "721:   assert( yyruleno>=0 );",
          "722:   assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );",
          "724:   if( yyTraceFILE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c08716a317ee00de91537da8d2f44092cd0896c0",
      "candidate_info": {
        "commit_hash": "c08716a317ee00de91537da8d2f44092cd0896c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c08716a317ee00de91537da8d2f44092cd0896c0",
        "files": [
          "ext/fts3/fts3_tokenize_vtab.c",
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix harmless USAN warnings from gcc9.\n\nFossilOrigin-Name: 72c4c69fea13f5e24df25645e6941ce3ff896f0a3c73cd63329f819cc907ab40",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c",
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c": [
          "File: ext/fts3/fts3_tokenize_vtab.c -> ext/fts3/fts3_tokenize_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:   assert( (rc==SQLITE_OK)==(pMod!=0) );",
          "190:   if( rc==SQLITE_OK ){",
          "192:     rc = pMod->xCreate((nDequote>1 ? nDequote-1 : 0), azArg, &pTok);",
          "193:   }",
          "",
          "[Removed Lines]",
          "191:     const char * const *azArg = (const char * const *)&azDequote[1];",
          "",
          "[Added Lines]",
          "191:     const char * const *azArg = 0;",
          "192:     if( nDequote>1 ) azArg = (const char * const *)&azDequote[1];",
          "",
          "---------------"
        ],
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2956:   }",
          "2958:   p->apValue = (sqlite3_value**)p->tblhdr.aBuf;",
          "2961:   return (p->rc = rc);",
          "2962: }",
          "",
          "[Removed Lines]",
          "2959:   p->abPK = (u8*)&p->apValue[p->nCol*2];",
          "2960:   p->zTab = (char*)&p->abPK[p->nCol];",
          "",
          "[Added Lines]",
          "2959:   if( p->apValue==0 ){",
          "2960:     p->abPK = 0;",
          "2961:     p->zTab = 0;",
          "2962:   }else{",
          "2963:     p->abPK = (u8*)&p->apValue[p->nCol*2];",
          "2964:     p->zTab = p->abPK ? (char*)&p->abPK[p->nCol] : 0;",
          "2965:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc1590f32fc4e2696b4126bd0302cb6405031dd4f55b86f3f1611f7f39299f85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     }",
          "165:     if {[regexp {runtime error: +(.*)} $line all msg]} {",
          "166:       # skip over \"value is outside range\" errors",
          "168:          # noop",
          "169:       } else {",
          "170:         incr G(test.$name.nError)",
          "",
          "[Removed Lines]",
          "167:       if {[regexp {value .* is outside the range of representable} $line]} {",
          "",
          "[Added Lines]",
          "167:       if {[regexp {.* is outside the range of representable} $line]} {",
          "",
          "---------------"
        ]
      }
    }
  ]
}