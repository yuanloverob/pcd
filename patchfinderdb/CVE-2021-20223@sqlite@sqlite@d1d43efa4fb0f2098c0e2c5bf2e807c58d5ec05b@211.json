{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b023cf5928f9c728ec8445144a47e1705546c24",
      "candidate_info": {
        "commit_hash": "8b023cf5928f9c728ec8445144a47e1705546c24",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b023cf5928f9c728ec8445144a47e1705546c24",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/update.c",
          "test/upfrom2.test",
          "test/upfromfault.test"
        ],
        "message": "Add OOM tests for the new code on this branch.\n\nFossilOrigin-Name: e4a18601e5093896e5b323c21aec986b07259353d2ef9455d0a81c6846f40282",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/update.c||src/update.c",
          "test/upfrom2.test||test/upfrom2.test",
          "test/upfromfault.test||test/upfromfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ffcdb6689123bb871c9bd8f977197f86f37c42e9094e2d4bb187ff479f74cf65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4503: SrcList *sqlite3SrcListAppendList(Parse *pParse, SrcList *p1, SrcList *p2){",
          "4509:       memcpy(&p1->a[1], p2->a, p2->nSrc*sizeof(struct SrcList_item));",
          "4510:       sqlite3_free(p2);",
          "4513:     }",
          "4514:   }",
          "4515:   return p1;",
          "",
          "[Removed Lines]",
          "4504:   if( p2 && p1 ){",
          "4505:     assert( p1->nSrc==1 );",
          "4506:     p1 = sqlite3SrcListEnlarge(pParse, p1, p2->nSrc, p1->nSrc);",
          "4507:     if( p1 ){",
          "4508:       assert( p1->nSrc==1+p2->nSrc );",
          "4511:     }else{",
          "4512:       sqlite3SrcListDelete(pParse->db, p2);",
          "",
          "[Added Lines]",
          "4504:   assert( p1 && p1->nSrc==1 );",
          "4505:   if( p2 ){",
          "4506:     SrcList *pNew = sqlite3SrcListEnlarge(pParse, p1, p2->nSrc, 1);",
          "4507:     if( pNew==0 ){",
          "4508:       sqlite3SrcListDelete(pParse->db, p2);",
          "4509:     }else{",
          "4510:       p1 = pNew;",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:       );",
          "230:     }",
          "231:   }",
          "236:   }",
          "237:   pSelect = sqlite3SelectNew(",
          "238:       pParse, pList, pSrc, pWhere2, pGroupBy, 0, pOrderBy2, 0, pLimit2",
          "",
          "[Removed Lines]",
          "232:   for(i=0; i<pChanges->nExpr; i++){",
          "233:     pList = sqlite3ExprListAppend(pParse, pList,",
          "234:         sqlite3ExprDup(db, pChanges->a[i].pExpr, 0)",
          "235:     );",
          "",
          "[Added Lines]",
          "232:   assert( pChanges || db->mallocFailed );",
          "233:   if( pChanges ){",
          "234:     for(i=0; i<pChanges->nExpr; i++){",
          "235:       pList = sqlite3ExprListAppend(pParse, pList,",
          "236:           sqlite3ExprDup(db, pChanges->a[i].pExpr, 0)",
          "237:       );",
          "238:     }",
          "",
          "---------------"
        ],
        "test/upfrom2.test||test/upfrom2.test": [
          "File: test/upfrom2.test -> test/upfrom2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: }]",
          "290: }}",
          "293: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: reset_db",
          "293: do_execsql_test 3.0 {",
          "294:   CREATE TABLE data(x, y, z);",
          "295:   CREATE VIEW t1 AS SELECT * FROM data;",
          "296:   CREATE TRIGGER t1_insert INSTEAD OF INSERT ON t1 BEGIN",
          "297:     INSERT INTO data VALUES(new.x, new.y, new.z);",
          "298:   END;",
          "299:   CREATE TRIGGER t1_update INSTEAD OF UPDATE ON t1 BEGIN",
          "300:     INSERT INTO log VALUES(old.z || '->' || new.z);",
          "301:   END;",
          "303:   CREATE TABLE log(t TEXT);",
          "305:   INSERT INTO t1 VALUES(1, 'i',   'one');",
          "306:   INSERT INTO t1 VALUES(2, 'ii',  'two');",
          "307:   INSERT INTO t1 VALUES(3, 'iii', 'three');",
          "308:   INSERT INTO t1 VALUES(4, 'iv',  'four');",
          "309: }",
          "311: do_execsql_test 3.1 {",
          "312:   WITH input(k, v) AS (",
          "313:       VALUES(3, 'thirty'), (1, 'ten')",
          "314:   )",
          "315:   UPDATE t1 SET z=v FROM input WHERE x=k;",
          "316: }",
          "",
          "---------------"
        ],
        "test/upfromfault.test||test/upfromfault.test": [
          "File: test/upfromfault.test -> test/upfromfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 April 29",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix upfromfault",
          "17: foreach {tn sql} {",
          "18:   1 {",
          "19:     CREATE TABLE t1(x PRIMARY KEY, y, z UNIQUE);",
          "20:     CREATE INDEX t1y ON t1(y);",
          "21:   }",
          "22:   2 {",
          "23:     CREATE TABLE t1(x PRIMARY KEY, y, z UNIQUE) WITHOUT ROWID;",
          "24:     CREATE INDEX t1y ON t1(y);",
          "25:   }",
          "26:   3 {",
          "27:     CREATE TABLE t1(x, y, z UNIQUE, PRIMARY KEY(x,y)) WITHOUT ROWID;",
          "28:   }",
          "29:   4 {",
          "30:     CREATE VIRTUAL TABLE t1 USING fts5(x, y, z);",
          "31:   }",
          "32:   5 {",
          "33:     CREATE TABLE real(x, y, z);",
          "34:     CREATE VIEW t1 AS SELECT * FROM real;",
          "35:     CREATE TRIGGER t1_insert INSTEAD OF INSERT ON t1 BEGIN",
          "36:       INSERT INTO real VALUES(new.x, new.y, new.z);",
          "37:     END;",
          "38:     CREATE TRIGGER t1_update INSTEAD OF UPDATE ON t1 BEGIN",
          "39:       INSERT INTO log VALUES(old.z || '->' || new.z);",
          "40:       UPDATE real SET y=new.y, z=new.z WHERE x=old.x;",
          "41:     END;",
          "42:   }",
          "43: } {",
          "44: if {$tn<5} continue",
          "45:   reset_db",
          "47:   ifcapable !fts5 { if {$tn==4} continue }",
          "49:   execsql $sql",
          "50:   do_execsql_test 1.$tn.0 {",
          "51:     CREATE TABLE log(t TEXT);",
          "53:     INSERT INTO t1 VALUES(1, 'i',   'one');",
          "54:     INSERT INTO t1 VALUES(2, 'ii',  'two');",
          "55:     INSERT INTO t1 VALUES(3, 'iii', 'three');",
          "56:     INSERT INTO t1 VALUES(4, 'iv',  'four');",
          "57:   }",
          "58:   if {$tn!=4 && $tn!=5} {",
          "59:     do_execsql_test 1.$tn.0b {",
          "60:       CREATE TRIGGER tr1 BEFORE UPDATE ON t1 BEGIN",
          "61:         INSERT INTO log VALUES(old.z || '->' || new.z);",
          "62:       END;",
          "63:       CREATE TRIGGER tr2 AFTER UPDATE ON t1 BEGIN",
          "64:         INSERT INTO log VALUES(old.y || '->' || new.y);",
          "65:       END;",
          "66:     }",
          "67:   }",
          "69:   faultsim_save_and_close",
          "71:   do_faultsim_test 1.$tn -prep {",
          "72:     faultsim_restore_and_reopen",
          "73:     execsql { SELECT * FROM t1 }",
          "74:   } -body {",
          "75:     execsql {",
          "76:       WITH data(k, v) AS (",
          "77:           VALUES(3, 'thirty'), (1, 'ten')",
          "78:       )",
          "79:       UPDATE t1 SET z=v FROM data WHERE x=k;",
          "80:     }",
          "81:   } -test {",
          "82:     faultsim_test_result {0 {}} {1 {vtable constructor failed: t1}}",
          "83:     if {$testrc==0} {",
          "84:       set res [execsql { SELECT * FROM t1 }]",
          "85:       if {$res!=\"1 i ten 2 ii two 3 iii thirty 4 iv four\"} {",
          "86:         error \"unexpected result: $res\"",
          "87:       }",
          "88:     }",
          "89:   }",
          "90: }",
          "93: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b2949c36ec15d1f340e59345e236129397b4595",
      "candidate_info": {
        "commit_hash": "0b2949c36ec15d1f340e59345e236129397b4595",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b2949c36ec15d1f340e59345e236129397b4595",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/wherecode.c"
        ],
        "message": "Coverage testing of the OP_SeekScan opcode.  Fix a problem that comes up when OP_SeekScan reaches the end of the table.\n\nFossilOrigin-Name: 9e57e758a6a33f54d28a546b4eebfb5cfacef30dc4e0207e43bb9d2c06fc3439",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6110fdd5bb7b4ae5c065404c802ae726362ef084966b73cffe58c4bfb98689d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4477:     rc = sqlite3VdbeIdxKeyCompare(db, pC, &r, &res);",
          "4478:     if( rc ) goto abort_due_to_error;",
          "4479:     if( res>0 ){",
          "4480: #ifdef SQLITE_DEBUG",
          "4484: #endif",
          "4485:       pOp++;",
          "4486:       goto jump_to_p2;",
          "4487:     }",
          "4488:     if( res==0 ){",
          "4489: #ifdef SQLITE_DEBUG",
          "4493: #endif",
          "4494:       pOp += 2;",
          "4495:       break;",
          "4496:     }",
          "4498:     n--;",
          "4499:     rc = sqlite3BtreeNext(pC->uc.pCursor, 0);",
          "4501:   }",
          "4502:   break;",
          "4503: }",
          "",
          "[Removed Lines]",
          "4481:      if( db->flags&SQLITE_VdbeTrace ){",
          "4482:        printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "4483:      }",
          "4490:      if( db->flags&SQLITE_VdbeTrace ){",
          "4491:        printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4492:      }",
          "4497:     if( n<=0 ) break;",
          "4500:     if( rc ) goto abort_due_to_error;",
          "",
          "[Added Lines]",
          "4480:       seekscan_search_fail:",
          "4482:       if( db->flags&SQLITE_VdbeTrace ){",
          "4483:         printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "4484:       }",
          "4487:       VdbeBranchTaken(1,3);",
          "4492:       if( db->flags&SQLITE_VdbeTrace ){",
          "4493:         printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4494:       }",
          "4497:       VdbeBranchTaken(2,3);",
          "4498:       break;",
          "4499:     }",
          "4500:     if( n<=0 ){",
          "4501: #ifdef SQLITE_DEBUG",
          "4502:       if( db->flags&SQLITE_VdbeTrace ){",
          "4503:         printf(\"... fall through after %d steps\\n\", pOp->p1);",
          "4504:       }",
          "4505: #endif",
          "4506:       VdbeBranchTaken(0,3);",
          "4511:     if( rc ){",
          "4512:       if( rc==SQLITE_DONE ){",
          "4513:         rc = SQLITE_OK;",
          "4514:         goto seekscan_search_fail;",
          "4515:       }else{",
          "4516:         goto abort_due_to_error;",
          "4517:       }",
          "4518:     }",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0 ){",
          "1808:         assert( op==OP_SeekGE );",
          "1809:         assert( regBignull==0 );",
          "1811:       }",
          "1812:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1813:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1810:         sqlite3VdbeAddOp1(v, OP_SeekScan, 10);",
          "",
          "[Added Lines]",
          "1810:         sqlite3VdbeAddOp1(v, OP_SeekScan, 10);  VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
      "candidate_info": {
        "commit_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Change the COLFLAG_NOTAVAIL bitmask so that it fits in the single-byte Walker.eCode field.\n\nFossilOrigin-Name: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "dc4a1687b8b53a4464bbffaf351e25305b6a525e",
      "candidate_info": {
        "commit_hash": "dc4a1687b8b53a4464bbffaf351e25305b6a525e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc4a1687b8b53a4464bbffaf351e25305b6a525e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Improved bytecode comments for the ANALYZE command.\n\nFossilOrigin-Name: c38ea4139d87535b789f43eb1e38b2dc4b8312352a721035283e67cf0f3d5067",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93d710262eb046e2370660b1096ac634373755f92a2e9b1220df3b2bda5f9eeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1148:         char *pColl = (char*)sqlite3LocateCollSeq(pParse, pIdx->azColl[i]);",
          "1149:         sqlite3VdbeAddOp2(v, OP_Integer, i, regChng);",
          "1150:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, i, regTemp);",
          "1151:         aGotoChng[i] =",
          "1152:         sqlite3VdbeAddOp4(v, OP_Ne, regTemp, 0, regPrev+i, pColl, P4_COLLSEQ);",
          "1153:         sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1151:         VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1168:       for(i=0; i<nColTest; i++){",
          "1169:         sqlite3VdbeJumpHere(v, aGotoChng[i]);",
          "1170:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, i, regPrev+i);",
          "1171:       }",
          "1172:       sqlite3VdbeResolveLabel(v, endDistinctTest);",
          "1173:       sqlite3DbFree(db, aGotoChng);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:         VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1193:           k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "1194:           assert( k>=0 && k<pIdx->nColumn );",
          "1195:           sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1197:         }",
          "1198:         sqlite3VdbeAddOp3(v, OP_MakeRecord, regKey, pPk->nKeyCol, regRowid);",
          "1199:         sqlite3ReleaseTempRange(pParse, regKey, pPk->nKeyCol);",
          "",
          "[Removed Lines]",
          "1196:           VdbeComment((v, \"%s\", pTab->aCol[pPk->aiColumn[j]].zName));",
          "",
          "[Added Lines]",
          "1198:           VdbeComment((v, \"%s.column(%d)\", pIdx->zName, i));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23bef340beb7799bdac6d5fd857809139d9f3683",
      "candidate_info": {
        "commit_hash": "23bef340beb7799bdac6d5fd857809139d9f3683",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23bef340beb7799bdac6d5fd857809139d9f3683",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c"
        ],
        "message": "Use AtomicStore() when setting the mem0.nearlyFull boolean to avoid harmless TSAN warnings and to forestall doubts about threadsafety.\n\nFossilOrigin-Name: ce980af65a9b528f112baa22a95020a98ac5340155a0b53b09c46f99aad9b12b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7556bc632e271d8a1e4fd836ce91e28213768ac09c90857b91171e9cd1009884",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   }",
          "112:   mem0.alarmThreshold = n;",
          "113:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "115:   sqlite3_mutex_leave(mem0.mutex);",
          "116:   excess = sqlite3_memory_used() - n;",
          "117:   if( excess>0 ) sqlite3_release_memory((int)(excess & 0x7fffffff));",
          "",
          "[Removed Lines]",
          "114:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Added Lines]",
          "114:   AtomicStore(&mem0.nearlyFull, n>0 && n<=nUsed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   if( mem0.alarmThreshold>0 ){",
          "244:     sqlite3_int64 nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "245:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "247:       sqlite3MallocAlarm(nFull);",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "",
          "[Removed Lines]",
          "246:       mem0.nearlyFull = 1;",
          "",
          "[Added Lines]",
          "246:       AtomicStore(&mem0.nearlyFull, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253:         }",
          "254:       }",
          "255:     }else{",
          "257:     }",
          "258:   }",
          "259:   p = sqlite3GlobalConfig.m.xMalloc(nFull);",
          "",
          "[Removed Lines]",
          "256:       mem0.nearlyFull = 0;",
          "",
          "[Added Lines]",
          "256:       AtomicStore(&mem0.nearlyFull, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}