{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
      "candidate_info": {
        "commit_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Call sqlite3Prepare() directly, rather than going through sqlite3_prepare(), when processing the sqlite_master.sql column for a schema.\n\nFossilOrigin-Name: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static int sqlite3Prepare(",
          "69: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "107:     db->init.orphanTrigger = 0;",
          "108:     db->init.azInit = argv;",
          "110:     rc = db->errCode;",
          "111:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "112:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "121:     pStmt = 0;",
          "122:     TESTONLY(rcp = ) sqlite3Prepare(db, argv[4], -1, 0, 0, &pStmt, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
      "candidate_info": {
        "commit_hash": "21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21b9225ff595a1ec121ac18ebb5ab066257a9893",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/normalize.test"
        ],
        "message": "Refactor the sqlite3_normalized_sql() implementation.\n\nFossilOrigin-Name: 06e955e5d2b857b9ce94a73fb174b620c101bdb160842f9a0e958bdb48e8c987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c878d741733a897d47a1a0b57b454bc9095ce302b48cc01089336d5d20e2a24c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   return rc;",
          "710: }",
          "",
          "[Removed Lines]",
          "712: #ifdef SQLITE_ENABLE_NORMALIZE",
          "721: static int estimateNormalizedSize(",
          "724: ){",
          "725:   int nOut = nSql + 4;",
          "726:   const char *z = zSql;",
          "727:   while( nOut<nSql*5 ){",
          "728:     while( z[0]!=0 && z[0]!='I' && z[0]!='i' ){ z++; }",
          "729:     if( z[0]==0 ) break;",
          "730:     z++;",
          "731:     if( z[0]!='N' && z[0]!='n' ) break;",
          "732:     z++;",
          "733:     while( sqlite3Isspace(z[0]) ){ z++; }",
          "734:     if( z[0]!='(' ) break;",
          "735:     z++;",
          "737:   }",
          "738:   return nOut;",
          "739: }",
          "747: static void copyNormalizedToken(",
          "754: ){",
          "755:   int bQuoted = tokenFlags & SQLITE_TOKEN_QUOTED;",
          "756:   int bKeyword = tokenFlags & SQLITE_TOKEN_KEYWORD;",
          "757:   int j = *piOut, k = 0;",
          "758:   for(; k<nToken; k++){",
          "759:     if( bQuoted ){",
          "760:       if( k==0 && iIn>0 ){",
          "761:         zOut[j++] = '\"';",
          "762:         continue;",
          "763:       }else if( k==nToken-1 ){",
          "764:         zOut[j++] = '\"';",
          "765:         continue;",
          "766:       }",
          "767:     }",
          "768:     if( bKeyword ){",
          "769:       zOut[j++] = sqlite3Toupper(zSql[iIn+k]);",
          "770:     }else{",
          "771:       zOut[j++] = sqlite3Tolower(zSql[iIn+k]);",
          "772:     }",
          "773:   }",
          "775: }",
          "782: char *sqlite3Normalize(",
          "786: ){",
          "799:   db = sqlite3VdbeDb(pVdbe);",
          "800:   assert( db!=0 );",
          "801:   if( zSql==0 ) return 0;",
          "802:   nZ = estimateNormalizedSize(zSql, nSql);",
          "803:   z = sqlite3DbMallocRawNN(db, nZ);",
          "804:   if( z==0 ) goto normalizeError;",
          "805:   for(i=j=0; i<nSql && zSql[i]; i+=n){",
          "806:     int flags = 0;",
          "807:     if( tokenType!=TK_SPACE ) prevTokenType = tokenType;",
          "808:     n = sqlite3GetTokenNormalized((unsigned char*)zSql+i, &tokenType, &flags);",
          "809:     switch( tokenType ){",
          "810:       case TK_SPACE: {",
          "811:         break;",
          "812:       }",
          "813:       case TK_ILLEGAL: {",
          "814:         goto normalizeError;",
          "815:       }",
          "816:       case TK_STRING:",
          "817:       case TK_INTEGER:",
          "818:       case TK_FLOAT:",
          "819:       case TK_VARIABLE:",
          "820:       case TK_BLOB: {",
          "821:         z[j++] = '?';",
          "822:         break;",
          "823:       }",
          "824:       case TK_LP:",
          "825:       case TK_RP: {",
          "826:         if( tokenType==TK_LP ){",
          "827:           nParen++;",
          "828:           if( prevTokenType==TK_IN ){",
          "829:             iStartIN = j;",
          "830:             nParenAtIN = nParen;",
          "831:           }",
          "832:         }else{",
          "833:           if( iStartIN>0 && nParen==nParenAtIN ){",
          "834:             assert( iStartIN+6<nZ );",
          "835:             memcpy(z+iStartIN+1, \"?,?,?\", 5);",
          "836:             j = iStartIN+6;",
          "837:             assert( nZ-1-j>=0 );",
          "838:             assert( nZ-1-j<nZ );",
          "839:             memset(z+j, 0, nZ-1-j);",
          "840:             iStartIN = 0;",
          "841:           }",
          "842:           nParen--;",
          "843:         }",
          "844:         assert( nParen>=0 );",
          "846:       }",
          "847:       case TK_MINUS:",
          "848:       case TK_SEMI:",
          "849:       case TK_PLUS:",
          "850:       case TK_STAR:",
          "851:       case TK_SLASH:",
          "852:       case TK_REM:",
          "853:       case TK_EQ:",
          "854:       case TK_LE:",
          "855:       case TK_NE:",
          "856:       case TK_LSHIFT:",
          "857:       case TK_LT:",
          "858:       case TK_RSHIFT:",
          "859:       case TK_GT:",
          "860:       case TK_GE:",
          "861:       case TK_BITOR:",
          "862:       case TK_CONCAT:",
          "863:       case TK_COMMA:",
          "864:       case TK_BITAND:",
          "865:       case TK_BITNOT:",
          "866:       case TK_DOT:",
          "867:       case TK_IN:",
          "868:       case TK_IS:",
          "869:       case TK_NOT:",
          "870:       case TK_NULL:",
          "871:       case TK_ID: {",
          "872:         if( tokenType==TK_NULL ){",
          "873:           if( prevTokenType==TK_IS || prevTokenType==TK_NOT ){",
          "875:           }else{",
          "877:             z[j++] = '?';",
          "878:             break;",
          "879:           }",
          "880:         }",
          "881:         if( j>0 && sqlite3IsIdChar(z[j-1]) && sqlite3IsIdChar(zSql[i]) ){",
          "882:           z[j++] = ' ';",
          "883:         }",
          "884:         if( tokenType==TK_ID ){",
          "885:           if( zSql[i]=='\"'",
          "886:            && sqlite3VdbeUsesDoubleQuotedString(db,pVdbe,zSql+i,n)",
          "887:           ){",
          "888:             z[j++] = '?';",
          "889:             break;",
          "890:           }",
          "891:           if( nParen==nParenAtIN ) iStartIN = 0;",
          "892:         }",
          "893:         copyNormalizedToken(zSql, i, n, flags, z, &j);",
          "894:         break;",
          "895:       }",
          "896:     }",
          "897:   }",
          "898:   assert( j<nZ && \"one\" );",
          "899:   while( j>0 && z[j-1]==' ' ){ j--; }",
          "900:   if( j>0 && z[j-1]!=';' ){ z[j++] = ';'; }",
          "901:   z[j] = 0;",
          "902:   assert( j<nZ && \"two\" );",
          "903:   return z;",
          "905: normalizeError:",
          "906:   sqlite3DbFree(db, z);",
          "907:   return 0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4255: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "4256: void sqlite3AlterRenameColumn(Parse*, SrcList*, Token*, Token*);",
          "4257: int sqlite3GetToken(const unsigned char *, int *);",
          "4261: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4262: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4263: int sqlite3CodeSubselect(Parse*, Expr *, int, int);",
          "",
          "[Removed Lines]",
          "4258: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4259: int sqlite3GetTokenNormalized(const unsigned char *, int *, int *);",
          "4260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:   return i;",
          "546: }",
          "",
          "[Removed Lines]",
          "548: #ifdef SQLITE_ENABLE_NORMALIZE",
          "560: int sqlite3GetTokenNormalized(",
          "561:   const unsigned char *z,",
          "562:   int *tokenType,",
          "563:   int *flags",
          "564: ){",
          "565:   int n;",
          "566:   unsigned char iClass = aiClass[*z];",
          "567:   if( iClass==CC_KYWD ){",
          "568:     int i;",
          "569:     for(i=1; aiClass[z[i]]<=CC_KYWD; i++){}",
          "570:     if( IdChar(z[i]) ){",
          "574:       i++;",
          "575:       while( IdChar(z[i]) ){ i++; }",
          "577:       return i;",
          "578:     }",
          "580:     n = keywordCode((char*)z, i, tokenType);",
          "585:     switch( *tokenType ){",
          "586:       case TK_ID: {",
          "588:         break;",
          "589:       }",
          "590:       case TK_IN:",
          "591:       case TK_IS:",
          "592:       case TK_NOT:",
          "593:       case TK_NULL: {",
          "595:         break;",
          "596:       }",
          "597:       default: {",
          "600:         break;",
          "601:       }",
          "602:     }",
          "603:   }else{",
          "604:     n = sqlite3GetToken(z, tokenType);",
          "607:     if( *tokenType==TK_ID && (iClass==CC_QUOTE || iClass==CC_QUOTE2) ){",
          "609:     }",
          "610:   }",
          "611:   return n;",
          "612: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:   assert( nErr==0 || pParse->rc!=SQLITE_OK );",
          "782:   return nErr;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719: #ifdef SQLITE_ENABLE_NORMALIZE",
          "724: static void addSpaceSeparator(sqlite3_str *pStr){",
          "725:   if( pStr->nChar && sqlite3IsIdChar(pStr->zText[pStr->nChar-1]) ){",
          "726:     sqlite3_str_append(pStr, \" \", 1);",
          "727:   }",
          "728: }",
          "735: char *sqlite3Normalize(",
          "739: ){",
          "751:   if( zSql==0 || nSql==0 ) return 0;",
          "752:   db = sqlite3VdbeDb(pVdbe);",
          "753:   tokenType = -1;",
          "754:   nParen = iStartIN = nParenAtIN = 0;",
          "755:   pStr = sqlite3_str_new(db);",
          "756:   for(i=0; i<nSql && pStr->accError==0; i+=n){",
          "757:     if( tokenType!=TK_SPACE ){",
          "758:       prevType = tokenType;",
          "759:     }",
          "760:     n = sqlite3GetToken((unsigned char*)zSql+i, &tokenType);",
          "761:     if( NEVER(n<=0) ) break;",
          "762:     switch( tokenType ){",
          "763:       case TK_SPACE: {",
          "764:         break;",
          "765:       }",
          "766:       case TK_NULL: {",
          "767:         if( prevType==TK_IS || prevType==TK_NOT ){",
          "768:           sqlite3_str_append(pStr, \" NULL\", 5);",
          "769:           break;",
          "770:         }",
          "772:       }",
          "773:       case TK_STRING:",
          "774:       case TK_INTEGER:",
          "775:       case TK_FLOAT:",
          "776:       case TK_VARIABLE:",
          "777:       case TK_BLOB: {",
          "778:         sqlite3_str_append(pStr, \"?\", 1);",
          "779:         break;",
          "780:       }",
          "781:       case TK_LP: {",
          "782:         nParen++;",
          "783:         if( prevType==TK_IN ){",
          "784:           iStartIN = pStr->nChar;",
          "785:           nParenAtIN = nParen;",
          "786:         }",
          "787:         sqlite3_str_append(pStr, \"(\", 1);",
          "788:         break;",
          "789:       }",
          "790:       case TK_RP: {",
          "791:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "792:           assert( pStr->nChar>=iStartIN );",
          "793:           pStr->nChar = iStartIN+1;",
          "794:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "795:           iStartIN = 0;",
          "796:         }",
          "797:         nParen--;",
          "798:         sqlite3_str_append(pStr, \")\", 1);",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         iStartIN = 0;",
          "803:         j = pStr->nChar;",
          "804:         if( sqlite3Isquote(zSql[i]) ){",
          "805:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "806:           int nId;",
          "807:           int eType = 0;",
          "808:           if( zId==0 ) break;",
          "809:           sqlite3Dequote(zId);",
          "810:           if( zSql[i]=='\"' && sqlite3VdbeUsesDoubleQuotedString(pVdbe, zId) ){",
          "811:             sqlite3_str_append(pStr, \"?\", 1);",
          "812:             sqlite3DbFree(db, zId);",
          "813:             break;",
          "814:           }",
          "815:           nId = sqlite3Strlen30(zId);",
          "816:           if( sqlite3GetToken((u8*)zId, &eType)==nId && eType==TK_ID ){",
          "817:             addSpaceSeparator(pStr);",
          "818:             sqlite3_str_append(pStr, zId, nId);",
          "819:           }else{",
          "820:             sqlite3_str_appendf(pStr, \"\\\"%w\\\"\", zId);",
          "821:           }",
          "822:           sqlite3DbFree(db, zId);",
          "823:         }else{",
          "824:           addSpaceSeparator(pStr);",
          "825:           sqlite3_str_append(pStr, zSql+i, n);",
          "826:         }",
          "827:         while( j<pStr->nChar ){",
          "828:           pStr->zText[j] = sqlite3Tolower(pStr->zText[j]);",
          "829:           j++;",
          "830:         }",
          "831:         break;",
          "832:       }",
          "833:       case TK_SELECT: {",
          "834:         iStartIN = 0;",
          "836:       }",
          "837:       default: {",
          "838:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "839:         j = pStr->nChar;",
          "840:         sqlite3_str_append(pStr, zSql+i, n);",
          "841:         while( j<pStr->nChar ){",
          "842:           pStr->zText[j] = sqlite3Toupper(pStr->zText[j]);",
          "843:           j++;",
          "844:         }",
          "845:         break;",
          "846:       }",
          "847:     }",
          "848:   }",
          "849:   if( tokenType!=TK_SEMI ) sqlite3_str_append(pStr, \";\", 1);",
          "850:   return sqlite3_str_finish(pStr);",
          "851: }",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, u8);",
          "254: #ifdef SQLITE_ENABLE_NORMALIZE",
          "255: void sqlite3VdbeAddDblquoteStr(sqlite3*,Vdbe*,const char*);",
          "257: #endif",
          "258: void sqlite3VdbeSwap(Vdbe*,Vdbe*);",
          "259: VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);",
          "",
          "[Removed Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(sqlite3*,Vdbe*,const char*,int);",
          "",
          "[Added Lines]",
          "256: int sqlite3VdbeUsesDoubleQuotedString(Vdbe*,const char*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: int sqlite3VdbeUsesDoubleQuotedString(",
          "104: ){",
          "106:   DblquoteStr *pStr;",
          "107:   assert( zId!=0 );",
          "111:   if( pVdbe->pDblStr==0 ) return 0;",
          "115:   for(pStr=pVdbe->pDblStr; pStr; pStr=pStr->pNextStr){",
          "117:   }",
          "120: }",
          "121: #endif",
          "",
          "[Removed Lines]",
          "105:   char *z;",
          "108:   assert( zId[0]=='\"' );",
          "109:   assert( nId>=2 );",
          "110:   assert( zId[nId-1]=='\"' );",
          "112:   z = sqlite3DbStrNDup(db, zId, nId);",
          "113:   if( z==0 ) return 0;",
          "114:   sqlite3Dequote(z);",
          "116:     if( strcmp(z, pStr->z)==0 ) break;",
          "118:   sqlite3DbFree(db, z);",
          "119:   return pStr!=0;",
          "",
          "[Added Lines]",
          "107:     if( strcmp(zId, pStr->z)==0 ) return 1;",
          "109:   return 0;",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   430",
          "208:   {SELECT \"a\" FROM t1 WHERE \"x\" IN (\"1\",\"2\",'3');}",
          "209:   0x2",
          "212:   440",
          "213:   {SELECT 'a' FROM t1 WHERE 'x';}",
          "",
          "[Removed Lines]",
          "210:   {0 {SELECT\"a\"FROM t1 WHERE\"x\"IN(?,?,?);}}",
          "",
          "[Added Lines]",
          "210:   {0 {SELECT a FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   450",
          "218:   {SELECT [a] FROM t1 WHERE [x];}",
          "219:   0x2",
          "222:   460",
          "223:   {SELECT * FROM t1 WHERE x IN (x);}",
          "",
          "[Removed Lines]",
          "220:   {0 {SELECT\"a\"FROM t1 WHERE\"x\";}}",
          "",
          "[Added Lines]",
          "220:   {0 {SELECT a FROM t1 WHERE x;}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   480",
          "233:   {SELECT * FROM t1 WHERE x IN ([x],\"a\");}",
          "234:   0x2",
          "237:   500",
          "238:   {SELECT * FROM t1 WHERE x IN ([x],\"a\",'b',sqlite_version());}",
          "239:   0x2",
          "242:   520",
          "243:   {SELECT * FROM t1 WHERE x IN (SELECT x FROM t1);}",
          "",
          "[Removed Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\");}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\",?,sqlite_version());}}",
          "",
          "[Added Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(x,a);}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(x,a,?,sqlite_version());}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:   540",
          "248:   {SELECT * FROM t1 WHERE x IN ((SELECT x FROM t1));}",
          "249:   0x2",
          "252:   550",
          "253:   {SELECT a, a+1, a||'b', a+\"b\" FROM t1;}",
          "254:   0x2",
          "257:   570",
          "258:   {SELECT * FROM t1 WHERE x IN (1);}",
          "",
          "[Removed Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN(?,?,?);}}",
          "255:   {0 {SELECT a,a+?,a||?,a+\"b\"FROM t1;}}",
          "",
          "[Added Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN((SELECT x FROM t1));}}",
          "255:   {0 {SELECT a,a+?,a||?,a+b FROM t1;}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   680",
          "317:   {SELECT a, \"col f\" FROM t1 LEFT OUTER JOIN t2 ON [t1].[col f] == [t2].[col y];}",
          "318:   0x2",
          "321:   690",
          "322:   {SELECT * FROM ( WITH x AS ( SELECT * FROM t1 WHERE x IN ( 1)) SELECT 10);}",
          "",
          "[Removed Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON\"t1\".\"col f\"==\"t2\".\"col y\";}}",
          "",
          "[Added Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON t1.\"col f\"==t2.\"col y\";}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:   760",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(\"x\"IS NOT NULL,?,?,?,\"b\",?);}}",
          "",
          "[Added Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
      "candidate_info": {
        "commit_hash": "83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83a1dafb03af90f40c75e4839c81cf74b5cbfbc0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "When values have real affinity and are converted into strings for CHECK constraints or index expressions, do the conversions into a real-number format even if the values are stored as integers for efficiency. This appears to fix ticket [ae0f637bddc5290b446].\n\nFossilOrigin-Name: 5997d075665faca6b70fa647e877ebc84c473b32887b96235865d59ce80247f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a77cd85b1a8b86e71b511f05f8c67faa046d24a48684139d2f64e51249203411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "517:   }else if( p->flags & MEM_Int ){",
          "518:     printf(\" i:%lld\", p->u.i);",
          "519: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2776:   assert( pOp->p2>0 );",
          "2777:   assert( zAffinity[pOp->p2]==0 );",
          "2778:   pIn1 = &aMem[pOp->p1];",
          "2780:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2781:     assert( memIsValid(pIn1) );",
          "2783:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2784:     pIn1++;",
          "2786:   break;",
          "2787: }",
          "",
          "[Removed Lines]",
          "2779:   do{",
          "2782:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2785:   }while( zAffinity[0] );",
          "",
          "[Added Lines]",
          "2781:   while( 1 /*edit-by-break*/ ){",
          "2784:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2785:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2788:       pIn1->flags |= MEM_IntReal;",
          "2789:     }",
          "2791:     zAffinity++;",
          "2792:     if( zAffinity[0]==0 ) break;",
          "2794:   }",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: }",
          "93: #endif",
          "95: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "110:   assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "112: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   int i, j, incr;",
          "119:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "120:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "126:   z = p->z;",
          "127:   i = j = 0;",
          "128:   incr = 1;",
          "",
          "[Removed Lines]",
          "121:   if( p->flags & MEM_Int ){",
          "122:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%lld\",p->u.i);",
          "123:   }else{",
          "124:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%!.15g\",p->u.r);",
          "125:   }",
          "",
          "[Added Lines]",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:   }",
          "249:   assert( (pMem->flags & MEM_Dyn)==0 );",
          "250:   pMem->z = pMem->zMalloc;",
          "252:   return SQLITE_OK;",
          "253: }",
          "",
          "[Removed Lines]",
          "251:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "266:   pMem->flags &= (MEM_Null|MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351: int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){",
          "353:   const int nByte = 32;",
          "355:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "359:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "360:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "352:   int fg = pMem->flags;",
          "356:   assert( !(fg&MEM_Zero) );",
          "357:   assert( !(fg&(MEM_Str|MEM_Blob)) );",
          "358:   assert( fg&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:     return SQLITE_NOMEM_BKPT;",
          "366:   }",
          "380:   assert( pMem->z!=0 );",
          "381:   pMem->n = sqlite3Strlen30NN(pMem->z);",
          "382:   pMem->enc = SQLITE_UTF8;",
          "383:   pMem->flags |= MEM_Str|MEM_Term;",
          "385:   sqlite3VdbeChangeEncoding(pMem, enc);",
          "386:   return SQLITE_OK;",
          "387: }",
          "",
          "[Removed Lines]",
          "374:   if( fg & MEM_Int ){",
          "375:     sqlite3_snprintf(nByte, pMem->z, \"%lld\", pMem->u.i);",
          "376:   }else{",
          "377:     assert( fg & MEM_Real );",
          "378:     sqlite3_snprintf(nByte, pMem->z, \"%!.15g\", pMem->u.r);",
          "379:   }",
          "384:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "382:   vdbeMemRenderNum(nByte, pMem->z, pMem);",
          "387:   if( bForce ) pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "741:       pMem->flags |= (pMem->flags&MEM_Blob)>>3;",
          "742:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "743:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "745:       break;",
          "746:     }",
          "747:   }",
          "",
          "[Removed Lines]",
          "744:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_Blob|MEM_Zero);",
          "",
          "[Added Lines]",
          "747:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
      "candidate_info": {
        "commit_hash": "9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a50f4c72a072892f830b7bf09a787bc2486c0ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Update error detection logic in releasetest.tcl to account for new output formats in USAN.\n\nFossilOrigin-Name: 3f36b988360204628d5ad1df2db34818b9a2d6ba989018d4c17757229f4b0f65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb9470fc064aad72a4e42c6a021410401b3b1a32446ae8b9cd9c759f0a2a01ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:       # skip over \"value is outside range\" errors",
          "413:       if {[regexp {value .* is outside the range of representable} $line]} {",
          "414:          # noop",
          "415:       } else {",
          "416:         incr ::NERRCASE",
          "417:         if {$rc==0} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:       } elseif {[regexp {overflow: .* cannot be represented} $line]} {",
          "416:          # noop",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
      "candidate_info": {
        "commit_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "If the \".open\" command fails in the CLI, reopen to :memory: so that at least some database is available for subsequent commands.\n\nFossilOrigin-Name: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26275fc7e89eb2542a65d01fd271cef016a4a1815bc3845c599cf2f4fbf7513d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871:     if( p->db==0 || SQLITE_OK!=sqlite3_errcode(p->db) ){",
          "3872:       utf8_printf(stderr,\"Error: unable to open database \\\"%s\\\": %s\\n\",",
          "3873:           p->zDbFilename, sqlite3_errmsg(p->db));",
          "3875:       exit(1);",
          "3876:     }",
          "3877: #ifndef SQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ) return;",
          "",
          "[Added Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ){",
          "3875:         sqlite3_open(\":memory:\", &p->db);",
          "3876:         return;",
          "3877:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}