{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
      "candidate_info": {
        "commit_hash": "d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d102d9df8625cb6f75c537b7f2a696bb5f305ff2",
        "files": [
          "include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/record.h",
          "ssl/record/record_locl.h",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c",
          "ssl/s3_msg.c",
          "ssl/ssl_err.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Implement write pipeline support in libssl\n\nUse the new pipeline cipher capability to encrypt multiple records being\nwritten out all in one go. Two new SSL/SSL_CTX parameters can be used to\ncontrol how this works: max_pipelines and split_send_fragment.\n\nmax_pipelines defines the maximum number of pipelines that can ever be used\nin one go for a single connection. It must always be less than or equal to\nSSL_MAX_PIPELINES (currently defined to be 32). By default only one\npipeline will be used (i.e. normal non-parallel operation).\n\nsplit_send_fragment defines how data is split up into pipelines. The number\nof pipelines used will be determined by the amount of data provided to the\nSSL_write call divided by split_send_fragment. For example if\nsplit_send_fragment is set to 2000 and max_pipelines is 4 then:\nSSL_write called with 0-2000 bytes == 1 pipeline used\nSSL_write called with 2001-4000 bytes == 2 pipelines used\nSSL_write called with 4001-6000 bytes == 3 pipelines used\nSSL_write_called with 6001+ bytes == 4 pipelines used\n\nsplit_send_fragment must always be less than or equal to max_send_fragment.\nBy default it is set to be equal to max_send_fragment. This will mean that\nthe same number of records will always be created as would have been\ncreated in the non-parallel case, although the data will be apportioned\ndifferently. In the parallel case data will be spread equally between the\npipelines.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/record/record_locl.h||ssl/record/record_locl.h",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/s3_msg.c||ssl/s3_msg.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ],
          "candidate": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: # define SSL_MAX_KEY_ARG_LENGTH                  8",
          "182: # define SSL_MAX_MASTER_KEY_LENGTH               48",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: # define SSL_MAX_PIPELINES  32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1233: # define SSL_CTRL_GET_EXTMS_SUPPORT              122",
          "1234: # define SSL_CTRL_SET_MIN_PROTO_VERSION          123",
          "1235: # define SSL_CTRL_SET_MAX_PROTO_VERSION          124",
          "1236: # define SSL_CERT_SET_FIRST                      1",
          "1237: # define SSL_CERT_SET_NEXT                       2",
          "1238: # define SSL_CERT_SET_SERVER                     3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239: # define SSL_CTRL_SET_SPLIT_SEND_FRAGMENT        125",
          "1240: # define SSL_CTRL_SET_MAX_PIPELINES              126",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1794:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)",
          "1795: # define SSL_set_max_send_fragment(ssl,m) \\",
          "1796:         SSL_ctrl(ssl,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)",
          "1799: # ifndef OPENSSL_NO_DH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1802: # define SSL_CTX_set_split_send_fragment(ctx,m) \\",
          "1803:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)",
          "1804: # define SSL_set_split_send_fragment(ssl,m) \\",
          "1805:         SSL_ctrl(ssl,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)",
          "1806: # define SSL_CTX_set_max_pipelines(ctx,m) \\",
          "1807:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)",
          "1808: # define SSL_set_max_pipelines(ssl,m) \\",
          "1809:         SSL_ctrl(ssl,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2193: # define SSL_F_TLS1_CHANGE_CIPHER_STATE                   209",
          "2194: # define SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS            341",
          "2195: # define SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT              274",
          "2196: # define SSL_F_TLS1_EXPORT_KEYING_MATERIAL                314",
          "2197: # define SSL_F_TLS1_GET_CURVELIST                         338",
          "2198: # define SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT            275",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2209: # define SSL_F_TLS1_ENC                                   401",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2412: # define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE          199",
          "2413: # define SSL_R_PEM_NAME_BAD_PREFIX                        391",
          "2414: # define SSL_R_PEM_NAME_TOO_SHORT                         392",
          "2415: # define SSL_R_PRE_MAC_LENGTH_TOO_LONG                    205",
          "2416: # define SSL_R_PROTOCOL_IS_SHUTDOWN                       207",
          "2417: # define SSL_R_PSK_IDENTITY_NOT_FOUND                     223",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2429: # define SSL_R_PIPELINE_FAILURE                           406",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:     SSL3_BUFFER *wb;",
          "1040:     SSL_SESSION *sess;",
          "",
          "[Removed Lines]",
          "1042:     wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "1042:     wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1130:     if (s->compress != NULL) {",
          "1132:             SSLerr(SSL_F_DO_DTLS1_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "1133:             goto err;",
          "1134:         }",
          "",
          "[Removed Lines]",
          "1131:         if (!ssl3_do_compress(s)) {",
          "",
          "[Added Lines]",
          "1131:         if (!ssl3_do_compress(s, wr)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:     if (mac_size != 0) {",
          "1149:                 &(p[SSL3_RECORD_get_length(wr) + eivlen]), 1) < 0)",
          "1150:             goto err;",
          "1151:         SSL3_RECORD_add_length(wr, mac_size);",
          "",
          "[Removed Lines]",
          "1148:         if (s->method->ssl3_enc->mac(s,",
          "",
          "[Added Lines]",
          "1148:         if (s->method->ssl3_enc->mac(s, wr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1158:     if (eivlen)",
          "1159:         SSL3_RECORD_add_length(wr, eivlen);",
          "1162:         goto err;",
          "",
          "[Removed Lines]",
          "1161:     if (s->method->ssl3_enc->enc(s, 1) < 1)",
          "",
          "[Added Lines]",
          "1161:     if (s->method->ssl3_enc->enc(s, wr, 1, 1) < 1)",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: void RECORD_LAYER_clear(RECORD_LAYER *rl)",
          "143: {",
          "144:     rl->rstate = SSL_ST_READ_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     unsigned int pipes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     rl->wpend_buf = NULL;",
          "163:     SSL3_BUFFER_clear(&rl->rbuf);",
          "165:     SSL3_RECORD_clear(&rl->rrec);",
          "166:     SSL3_RECORD_clear(&rl->wrec);",
          "",
          "[Removed Lines]",
          "164:     SSL3_BUFFER_clear(&rl->wbuf);",
          "",
          "[Added Lines]",
          "166:     for(pipes = 0; pipes < rl->numwpipes; pipes++)",
          "167:         SSL3_BUFFER_clear(&rl->wbuf[pipes]);",
          "168:     rl->numwpipes = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176: {",
          "177:     if (SSL3_BUFFER_is_initialised(&rl->rbuf))",
          "178:         ssl3_release_read_buffer(rl->s);",
          "180:         ssl3_release_write_buffer(rl->s);",
          "181:     SSL3_RECORD_release(&rl->rrec);",
          "182: }",
          "",
          "[Removed Lines]",
          "179:     if (SSL3_BUFFER_is_initialised(&rl->wbuf))",
          "",
          "[Added Lines]",
          "183:     if (rl->numwpipes > 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189: int RECORD_LAYER_write_pending(RECORD_LAYER *rl)",
          "190: {",
          "192: }",
          "194: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len)",
          "",
          "[Removed Lines]",
          "191:     return SSL3_BUFFER_get_left(&rl->wbuf) != 0;",
          "",
          "[Added Lines]",
          "195:     return (rl->numwpipes > 0)",
          "196:             && SSL3_BUFFER_get_left(&rl->wbuf[rl->numwpipes-1]) != 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:     int tot;",
          "434:     unsigned int n, nw;",
          "435: #if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "437:     unsigned int u_len = (unsigned int)len;",
          "438: #endif",
          "440:     int i;",
          "442:     if (len < 0) {",
          "",
          "[Removed Lines]",
          "436:     unsigned int max_send_fragment;",
          "439:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "441:     unsigned int max_send_fragment, split_send_fragment, maxpipes;",
          "444:     SSL3_BUFFER *wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "622:     }",
          "624:     n = (len - tot);",
          "625:     for (;;) {",
          "628:         else",
          "632:         if (i <= 0) {",
          "634:             s->rlayer.wnum = tot;",
          "",
          "[Removed Lines]",
          "626:         if (n > s->max_send_fragment)",
          "627:             nw = s->max_send_fragment;",
          "629:             nw = n;",
          "631:         i = do_ssl3_write(s, type, &(buf[tot]), nw, 0);",
          "",
          "[Added Lines]",
          "631:     split_send_fragment = s->split_send_fragment;",
          "638:     maxpipes = s->max_pipelines;",
          "639:     if (maxpipes > SSL_MAX_PIPELINES) {",
          "644:         SSLerr(SSL_F_SSL3_WRITE_BYTES, ERR_R_INTERNAL_ERROR);",
          "645:         return -1;",
          "646:     }",
          "647:     if (maxpipes == 0",
          "648:             || s->enc_write_ctx == NULL",
          "649:             || !(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx))",
          "650:                  & EVP_CIPH_FLAG_PIPELINE)",
          "651:             || !SSL_USE_EXPLICIT_IV(s))",
          "652:         maxpipes = 1;",
          "653:     if (s->max_send_fragment == 0 || split_send_fragment > s->max_send_fragment",
          "654:             || split_send_fragment == 0) {",
          "659:         SSLerr(SSL_F_SSL3_WRITE_BYTES, ERR_R_INTERNAL_ERROR);",
          "660:         return -1;",
          "661:     }",
          "664:         unsigned int pipelens[SSL_MAX_PIPELINES], tmppipelen, remain;",
          "665:         unsigned int numpipes, j;",
          "667:         if (n == 0)",
          "668:             numpipes = 1;",
          "670:             numpipes = ((n - 1) / split_send_fragment) + 1;",
          "671:         if (numpipes > maxpipes)",
          "672:             numpipes = maxpipes;",
          "674:         if (n / numpipes >= s->max_send_fragment) {",
          "679:             for (j = 0; j < numpipes; j++) {",
          "680:                 pipelens[j] = s->max_send_fragment;",
          "681:             }",
          "682:         } else {",
          "684:             tmppipelen = n / numpipes;",
          "685:             remain = n % numpipes;",
          "686:             for (j = 0; j < numpipes; j++) {",
          "687:                 pipelens[j] = tmppipelen;",
          "688:                 if (j < remain)",
          "689:                     pipelens[j]++;",
          "690:             }",
          "691:         }",
          "693:         i = do_ssl3_write(s, type, &(buf[tot]), pipelens, numpipes, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "657: }",
          "659: int do_ssl3_write(SSL *s, int type, const unsigned char *buf,",
          "661: {",
          "663:     int i, mac_size, clear = 0;",
          "664:     int prefix_len = 0;",
          "665:     int eivlen;",
          "666:     size_t align = 0;",
          "669:     SSL_SESSION *sess;",
          "679:     if (s->s3->alert_dispatch) {",
          "",
          "[Removed Lines]",
          "660:                   unsigned int len, int create_empty_fragment)",
          "662:     unsigned char *p, *plen;",
          "667:     SSL3_RECORD *wr;",
          "668:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "675:     if (SSL3_BUFFER_get_left(wb) != 0)",
          "676:         return (ssl3_write_pending(s, type, buf, len));",
          "",
          "[Added Lines]",
          "722:                   unsigned int *pipelens, unsigned int numpipes,",
          "723:                   int create_empty_fragment)",
          "725:     unsigned char *outbuf[SSL_MAX_PIPELINES], *plen[SSL_MAX_PIPELINES];",
          "726:     SSL3_RECORD wr[SSL_MAX_PIPELINES];",
          "731:     SSL3_BUFFER *wb;",
          "733:     unsigned int totlen = 0;",
          "734:     unsigned int j;",
          "736:     for (j = 0; j < numpipes; j++)",
          "737:         totlen += pipelens[j];",
          "742:     if (RECORD_LAYER_write_pending(&s->rlayer))",
          "743:         return (ssl3_write_pending(s, type, buf, totlen));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "684:     }",
          "688:             return -1;",
          "691:         return 0;",
          "694:     sess = s->session;",
          "696:     if ((sess == NULL) ||",
          "",
          "[Removed Lines]",
          "686:     if (!SSL3_BUFFER_is_initialised(wb))",
          "687:         if (!ssl3_setup_write_buffer(s))",
          "690:     if (len == 0 && !create_empty_fragment)",
          "693:     wr = &s->rlayer.wrec;",
          "",
          "[Added Lines]",
          "753:     if (s->rlayer.numwpipes < numpipes)",
          "754:         if (!ssl3_setup_write_buffer(s, numpipes))",
          "757:     if (totlen == 0 && !create_empty_fragment)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "724:             if (prefix_len <= 0)",
          "725:                 goto err;",
          "",
          "[Removed Lines]",
          "723:             prefix_len = do_ssl3_write(s, type, buf, 0, 1);",
          "",
          "[Added Lines]",
          "789:             unsigned int tmppipelen = 0;",
          "791:             prefix_len = do_ssl3_write(s, type, buf, &tmppipelen, 1, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737:     }",
          "739:     if (create_empty_fragment) {",
          "740: #if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:         wb = &s->rlayer.wbuf[0];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "746:         align = (size_t)SSL3_BUFFER_get_buf(wb) + 2 * SSL3_RT_HEADER_LENGTH;",
          "747:         align = (0-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "748: #endif",
          "750:         SSL3_BUFFER_set_offset(wb, align);",
          "751:     } else if (prefix_len) {",
          "753:     } else {",
          "754: #if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0",
          "757: #endif",
          "760:     }",
          "782:     if (s->enc_write_ctx && SSL_USE_EXPLICIT_IV(s)) {",
          "783:         int mode = EVP_CIPHER_CTX_mode(s->enc_write_ctx);",
          "",
          "[Removed Lines]",
          "749:         p = SSL3_BUFFER_get_buf(wb) + align;",
          "752:         p = SSL3_BUFFER_get_buf(wb) + SSL3_BUFFER_get_offset(wb) + prefix_len;",
          "755:         align = (size_t)SSL3_BUFFER_get_buf(wb) + SSL3_RT_HEADER_LENGTH;",
          "756:         align = (0-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "758:         p = SSL3_BUFFER_get_buf(wb) + align;",
          "759:         SSL3_BUFFER_set_offset(wb, align);",
          "765:     SSL3_RECORD_set_type(wr, type);",
          "772:     if (SSL_get_state(s) == TLS_ST_CW_CLNT_HELLO",
          "773:         && !s->renegotiate && TLS1_get_version(s) > TLS1_VERSION)",
          "775:     else",
          "779:     plen = p;",
          "780:     p += 2;",
          "",
          "[Added Lines]",
          "818:         outbuf[0] = SSL3_BUFFER_get_buf(wb) + align;",
          "821:         wb = &s->rlayer.wbuf[0];",
          "822:         outbuf[0] = SSL3_BUFFER_get_buf(wb) + SSL3_BUFFER_get_offset(wb)",
          "823:                     + prefix_len;",
          "825:         for (j=0; j < numpipes; j++) {",
          "826:             wb = &s->rlayer.wbuf[j];",
          "828:             align = (size_t)SSL3_BUFFER_get_buf(wb) + SSL3_RT_HEADER_LENGTH;",
          "829:             align = (-align) & (SSL3_ALIGN_PAYLOAD - 1);",
          "831:             outbuf[j] = SSL3_BUFFER_get_buf(wb) + align;",
          "832:             SSL3_BUFFER_set_offset(wb, align);",
          "833:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "796:     } else",
          "797:         eivlen = 0;",
          "849:     }",
          "871:     }",
          "881:     s->rlayer.wpend_buf = buf;",
          "882:     s->rlayer.wpend_type = type;",
          "887:  err:",
          "888:     return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "800:     SSL3_RECORD_set_data(wr, p + eivlen);",
          "801:     SSL3_RECORD_set_length(wr, (int)len);",
          "802:     SSL3_RECORD_set_input(wr, (unsigned char *)buf);",
          "810:     if (s->compress != NULL) {",
          "811:         if (!ssl3_do_compress(s)) {",
          "812:             SSLerr(SSL_F_DO_SSL3_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "813:             goto err;",
          "814:         }",
          "815:     } else {",
          "816:         memcpy(wr->data, wr->input, wr->length);",
          "817:         SSL3_RECORD_reset_input(wr);",
          "818:     }",
          "826:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "827:         if (s->method->ssl3_enc->mac(s, &(p[wr->length + eivlen]), 1) < 0)",
          "828:             goto err;",
          "829:         SSL3_RECORD_add_length(wr, mac_size);",
          "830:     }",
          "832:     SSL3_RECORD_set_data(wr, p);",
          "833:     SSL3_RECORD_reset_input(wr);",
          "835:     if (eivlen) {",
          "839:         SSL3_RECORD_add_length(wr, eivlen);",
          "840:     }",
          "842:     if (s->method->ssl3_enc->enc(s, 1) < 1)",
          "843:         goto err;",
          "845:     if (SSL_USE_ETM(s) && mac_size != 0) {",
          "846:         if (s->method->ssl3_enc->mac(s, p + wr->length, 1) < 0)",
          "847:             goto err;",
          "848:         SSL3_RECORD_add_length(wr, mac_size);",
          "852:     s2n(SSL3_RECORD_get_length(wr), plen);",
          "854:     if (s->msg_callback)",
          "855:         s->msg_callback(1, 0, SSL3_RT_HEADER, plen - 5, 5, s,",
          "856:                         s->msg_callback_arg);",
          "863:     SSL3_RECORD_add_length(wr, SSL3_RT_HEADER_LENGTH);",
          "865:     if (create_empty_fragment) {",
          "870:         return SSL3_RECORD_get_length(wr);",
          "874:     SSL3_BUFFER_set_left(wb, prefix_len + SSL3_RECORD_get_length(wr));",
          "880:     s->rlayer.wpend_tot = len;",
          "883:     s->rlayer.wpend_ret = len;",
          "886:     return ssl3_write_pending(s, type, buf, len);",
          "",
          "[Added Lines]",
          "855:     totlen = 0;",
          "857:     memset(wr, 0, sizeof wr);",
          "858:     for (j=0; j < numpipes; j++) {",
          "861:         SSL3_RECORD_set_type(&wr[j], type);",
          "868:         if (SSL_get_state(s) == TLS_ST_CW_CLNT_HELLO",
          "869:             && !s->renegotiate && TLS1_get_version(s) > TLS1_VERSION)",
          "871:         else",
          "875:         plen[j] = outbuf[j];",
          "876:         outbuf[j] += 2;",
          "879:         SSL3_RECORD_set_data(&wr[j], outbuf[j] + eivlen);",
          "880:         SSL3_RECORD_set_length(&wr[j], (int)pipelens[j]);",
          "881:         SSL3_RECORD_set_input(&wr[j], (unsigned char *)&buf[totlen]);",
          "882:         totlen += pipelens[j];",
          "889:         if (s->compress != NULL) {",
          "890:             if (!ssl3_do_compress(s, &wr[j])) {",
          "891:                 SSLerr(SSL_F_DO_SSL3_WRITE, SSL_R_COMPRESSION_FAILURE);",
          "892:                 goto err;",
          "893:             }",
          "894:         } else {",
          "895:             memcpy(wr[j].data, wr[j].input, wr[j].length);",
          "896:             SSL3_RECORD_reset_input(&wr[j]);",
          "897:         }",
          "905:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "906:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "907:                     &(outbuf[j][wr[j].length + eivlen]), 1) < 0)",
          "908:                 goto err;",
          "909:             SSL3_RECORD_add_length(&wr[j], mac_size);",
          "910:         }",
          "913:         SSL3_RECORD_set_data(&wr[j], outbuf[j]);",
          "914:         SSL3_RECORD_reset_input(&wr[j]);",
          "916:         if (eivlen) {",
          "920:             SSL3_RECORD_add_length(&wr[j], eivlen);",
          "921:         }",
          "924:     if (s->method->ssl3_enc->enc(s, wr, numpipes, 1) < 1)",
          "925:         goto err;",
          "927:     for (j=0; j < numpipes; j++) {",
          "928:         if (SSL_USE_ETM(s) && mac_size != 0) {",
          "929:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "930:                                          outbuf[j] + wr[j].length, 1) < 0)",
          "931:                 goto err;",
          "932:             SSL3_RECORD_add_length(&wr[j], mac_size);",
          "933:         }",
          "936:         s2n(SSL3_RECORD_get_length(&wr[j]), plen[j]);",
          "938:         if (s->msg_callback)",
          "939:             s->msg_callback(1, 0, SSL3_RT_HEADER, plen[j] - 5, 5, s,",
          "940:                             s->msg_callback_arg);",
          "947:         SSL3_RECORD_add_length(&wr[j], SSL3_RT_HEADER_LENGTH);",
          "949:         if (create_empty_fragment) {",
          "954:             if (j > 0) {",
          "956:                 SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
          "957:                 goto err;",
          "958:             }",
          "959:             return SSL3_RECORD_get_length(wr);",
          "960:         }",
          "963:         SSL3_BUFFER_set_left(&s->rlayer.wbuf[j],",
          "964:             prefix_len + SSL3_RECORD_get_length(&wr[j]));",
          "973:     s->rlayer.wpend_tot = totlen;",
          "976:     s->rlayer.wpend_ret = totlen;",
          "979:     return ssl3_write_pending(s, type, buf, totlen);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "893:                        unsigned int len)",
          "894: {",
          "895:     int i;",
          "899:     if ((s->rlayer.wpend_tot > (int)len)",
          "",
          "[Removed Lines]",
          "896:     SSL3_BUFFER *wb = &s->rlayer.wbuf;",
          "",
          "[Added Lines]",
          "989:     SSL3_BUFFER *wb = s->rlayer.wbuf;",
          "990:     unsigned int currbuf = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "905:     }",
          "907:     for (;;) {",
          "908:         clear_sys_error();",
          "909:         if (s->wbio != NULL) {",
          "910:             s->rwstate = SSL_WRITING;",
          "911:             i = BIO_write(s->wbio,",
          "914:         } else {",
          "915:             SSLerr(SSL_F_SSL3_WRITE_PENDING, SSL_R_BIO_NOT_SET);",
          "916:             i = -1;",
          "917:         }",
          "921:             s->rwstate = SSL_NOTHING;",
          "922:             return (s->rlayer.wpend_ret);",
          "923:         } else if (i <= 0) {",
          "",
          "[Removed Lines]",
          "912:                 (char *)&(SSL3_BUFFER_get_buf(wb)[SSL3_BUFFER_get_offset(wb)]),",
          "913:                 (unsigned int)SSL3_BUFFER_get_left(wb));",
          "918:         if (i == SSL3_BUFFER_get_left(wb)) {",
          "919:             SSL3_BUFFER_set_left(wb, 0);",
          "920:             SSL3_BUFFER_add_offset(wb, i);",
          "",
          "[Added Lines]",
          "1003:         if (SSL3_BUFFER_get_left(&wb[currbuf]) == 0",
          "1004:                 && currbuf < s->rlayer.numwpipes - 1) {",
          "1005:             currbuf++;",
          "1006:             continue;",
          "1007:         }",
          "1012:                 (char *)&(SSL3_BUFFER_get_buf(&wb[currbuf])[",
          "1013:                                 SSL3_BUFFER_get_offset(&wb[currbuf])]),",
          "1014:                 (unsigned int)SSL3_BUFFER_get_left(&wb[currbuf]));",
          "1019:         if (i == SSL3_BUFFER_get_left(&wb[currbuf])) {",
          "1020:             SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "1021:             SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "1022:             if (currbuf + 1 < s->rlayer.numwpipes)",
          "1023:                 continue;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "930:             }",
          "931:             return (i);",
          "932:         }",
          "935:     }",
          "936: }",
          "",
          "[Removed Lines]",
          "929:                 SSL3_BUFFER_set_left(wb, 0);",
          "933:         SSL3_BUFFER_add_offset(wb, i);",
          "934:         SSL3_BUFFER_add_left(wb, -i);",
          "",
          "[Added Lines]",
          "1032:                 SSL3_BUFFER_set_left(&wb[currbuf], 0);",
          "1036:         SSL3_BUFFER_add_offset(&wb[currbuf], i);",
          "1037:         SSL3_BUFFER_add_left(&wb[currbuf], -i);",
          "",
          "---------------"
        ],
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     int read_ahead;",
          "254:     int rstate;",
          "256:     SSL3_BUFFER rbuf;",
          "260:     SSL3_RECORD rrec;",
          "",
          "[Removed Lines]",
          "258:     SSL3_BUFFER wbuf;",
          "",
          "[Added Lines]",
          "256:     unsigned int numwpipes;",
          "260:     SSL3_BUFFER wbuf[SSL_MAX_PIPELINES];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326: __owur int ssl3_pending(const SSL *s);",
          "327: __owur int ssl3_write_bytes(SSL *s, int type, const void *buf, int len);",
          "328: __owur int do_ssl3_write(SSL *s, int type, const unsigned char *buf,",
          "330: __owur int ssl3_read_bytes(SSL *s, int type, int *recvd_type,",
          "331:                            unsigned char *buf, int len, int peek);",
          "332: __owur int ssl3_setup_buffers(SSL *s);",
          "335: __owur int ssl3_write_pending(SSL *s, int type, const unsigned char *buf,",
          "336:                        unsigned int len);",
          "339: int DTLS_RECORD_LAYER_new(RECORD_LAYER *rl);",
          "340: void DTLS_RECORD_LAYER_free(RECORD_LAYER *rl);",
          "341: void DTLS_RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "329:                          unsigned int len, int create_empty_fragment);",
          "333: __owur int ssl3_enc(SSL *s, int send_data);",
          "334: __owur int n_ssl3_mac(SSL *ssl, unsigned char *md, int send_data);",
          "337: __owur int tls1_enc(SSL *s, int snd);",
          "338: __owur int tls1_mac(SSL *ssl, unsigned char *md, int snd);",
          "",
          "[Added Lines]",
          "331:                          unsigned int *pipelens, unsigned int numpipes,",
          "332:                          int create_empty_fragment);",
          "336: __owur int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int numpipes,",
          "337:                     int send);",
          "338: __owur int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "341: __owur int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int numpipes,",
          "342:                     int send);",
          "343: __owur int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "",
          "---------------"
        ],
        "ssl/record/record_locl.h||ssl/record/record_locl.h": [
          "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
          "123: #define RECORD_LAYER_get_rrec(rl)               (&(rl)->rrec)",
          "124: #define RECORD_LAYER_get_wrec(rl)               (&(rl)->wrec)",
          "125: #define RECORD_LAYER_set_packet(rl, p)          ((rl)->packet = (p))",
          "",
          "[Removed Lines]",
          "122: #define RECORD_LAYER_get_wbuf(rl)               (&(rl)->wbuf)",
          "",
          "[Added Lines]",
          "122: #define RECORD_LAYER_get_wbuf(rl)               ((rl)->wbuf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, const unsigned char *d, int n);",
          "166: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "167: __owur int ssl3_setup_read_buffer(SSL *s);",
          "169: int ssl3_release_read_buffer(SSL *s);",
          "170: int ssl3_release_write_buffer(SSL *s);",
          "",
          "[Removed Lines]",
          "168: __owur int ssl3_setup_write_buffer(SSL *s);",
          "",
          "[Added Lines]",
          "168: __owur int ssl3_setup_write_buffer(SSL *s, unsigned int numwpipes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194: int SSL3_RECORD_setup(SSL3_RECORD *r);",
          "195: void SSL3_RECORD_set_seq_num(SSL3_RECORD *r, const unsigned char *seq_num);",
          "196: int ssl3_get_record(SSL *s);",
          "198: __owur int ssl3_do_uncompress(SSL *ssl);",
          "199: void ssl3_cbc_copy_mac(unsigned char *out,",
          "200:                        const SSL3_RECORD *rec, unsigned md_size);",
          "",
          "[Removed Lines]",
          "197: __owur int ssl3_do_compress(SSL *ssl);",
          "",
          "[Added Lines]",
          "197: __owur int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr);",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     return 0;",
          "177: }",
          "180: {",
          "181:     unsigned char *p;",
          "182:     size_t len, align = 0, headerlen;",
          "183:     SSL3_BUFFER *wb;",
          "187:     if (SSL_IS_DTLS(s))",
          "188:         headerlen = DTLS1_RT_HEADER_LENGTH + 1;",
          "",
          "[Removed Lines]",
          "179: int ssl3_setup_write_buffer(SSL *s)",
          "185:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "",
          "[Added Lines]",
          "179: int ssl3_setup_write_buffer(SSL *s, unsigned int numwpipes)",
          "184:     unsigned int currpipe;",
          "186:     s->rlayer.numwpipes = numwpipes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:     align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);",
          "194: #endif",
          "199: #ifndef OPENSSL_NO_COMP",
          "202: #endif",
          "210:     }",
          "212:     return 1;",
          "",
          "[Removed Lines]",
          "196:     if (wb->buf == NULL) {",
          "197:         len = s->max_send_fragment",
          "198:             + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "200:         if (ssl_allow_compression(s))",
          "201:             len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;",
          "203:         if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))",
          "204:             len += headerlen + align + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;",
          "206:         if ((p = OPENSSL_malloc(len)) == NULL)",
          "207:             goto err;",
          "208:         wb->buf = p;",
          "209:         wb->len = len;",
          "",
          "[Added Lines]",
          "198:     len = s->max_send_fragment",
          "199:         + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "201:     if (ssl_allow_compression(s))",
          "202:         len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;",
          "204:     if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))",
          "205:         len += headerlen + align + SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;",
          "207:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "208:     for (currpipe = 0; currpipe < numwpipes; currpipe++) {",
          "209:         if (wb[currpipe].buf == NULL) {",
          "210:             if ((p = OPENSSL_malloc(len)) == NULL) {",
          "211:                 s->rlayer.numwpipes = currpipe;",
          "212:                 goto err;",
          "213:             }",
          "214:             wb[currpipe].buf = p;",
          "215:             wb[currpipe].len = len;",
          "216:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220: {",
          "221:     if (!ssl3_setup_read_buffer(s))",
          "222:         return 0;",
          "224:         return 0;",
          "225:     return 1;",
          "226: }",
          "",
          "[Removed Lines]",
          "223:     if (!ssl3_setup_write_buffer(s))",
          "",
          "[Added Lines]",
          "230:     if (!ssl3_setup_write_buffer(s, 1))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228: int ssl3_release_write_buffer(SSL *s)",
          "229: {",
          "230:     SSL3_BUFFER *wb;",
          "236:     return 1;",
          "237: }",
          "",
          "[Removed Lines]",
          "232:     wb = RECORD_LAYER_get_wbuf(&s->rlayer);",
          "234:     OPENSSL_free(wb->buf);",
          "235:     wb->buf = NULL;",
          "",
          "[Added Lines]",
          "238:     unsigned int pipes;",
          "240:     pipes = s->rlayer.numwpipes;",
          "241:     while (pipes > 0) {",
          "242:         wb = &RECORD_LAYER_get_wbuf(&s->rlayer)[pipes - 1];",
          "244:         OPENSSL_free(wb->buf);",
          "245:         wb->buf = NULL;",
          "246:         pipes--;",
          "247:     }",
          "248:     s->rlayer.numwpipes = 0;",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         }",
          "374:         rr->length -= mac_size;",
          "375:         mac = rr->data + rr->length;",
          "377:         if (i < 0 || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0) {",
          "378:             al = SSL_AD_BAD_RECORD_MAC;",
          "379:             SSLerr(SSL_F_SSL3_GET_RECORD,",
          "",
          "[Removed Lines]",
          "376:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "376:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:         }",
          "383:     }",
          "",
          "[Removed Lines]",
          "385:     enc_err = s->method->ssl3_enc->enc(s, 0);",
          "",
          "[Added Lines]",
          "385:     enc_err = s->method->ssl3_enc->enc(s, rr, 1, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:             mac = &rr->data[rr->length];",
          "450:         }",
          "453:         if (i < 0 || mac == NULL",
          "454:             || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0)",
          "455:             enc_err = -1;",
          "",
          "[Removed Lines]",
          "452:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "452:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     return (1);",
          "543: }",
          "546: {",
          "547: #ifndef OPENSSL_NO_COMP",
          "548:     int i;",
          "552:     i = COMP_compress_block(ssl->compress, wr->data,",
          "553:                             SSL3_RT_MAX_COMPRESSED_LENGTH,",
          "554:                             wr->input, (int)wr->length);",
          "",
          "[Removed Lines]",
          "545: int ssl3_do_compress(SSL *ssl)",
          "549:     SSL3_RECORD *wr;",
          "551:     wr = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "545: int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "576: {",
          "577:     SSL3_RECORD *rec;",
          "578:     EVP_CIPHER_CTX *ds;",
          "",
          "[Removed Lines]",
          "575: int ssl3_enc(SSL *s, int send)",
          "",
          "[Added Lines]",
          "573: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int numpipes, int send)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "580:     int bs, i, mac_size = 0;",
          "581:     const EVP_CIPHER *enc;",
          "583:     if (send) {",
          "584:         ds = s->enc_write_ctx;",
          "586:         if (s->enc_write_ctx == NULL)",
          "587:             enc = NULL;",
          "588:         else",
          "589:             enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);",
          "590:     } else {",
          "591:         ds = s->enc_read_ctx;",
          "593:         if (s->enc_read_ctx == NULL)",
          "594:             enc = NULL;",
          "595:         else",
          "",
          "[Removed Lines]",
          "585:         rec = RECORD_LAYER_get_wrec(&s->rlayer);",
          "592:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "581:     rec = inrecs;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650: {",
          "652:     EVP_CIPHER_CTX *ds;",
          "654:     int bs, i, j, k, pad = 0, ret, mac_size = 0;",
          "655:     const EVP_CIPHER *enc;",
          "657:     if (send) {",
          "658:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "",
          "[Removed Lines]",
          "649: int tls1_enc(SSL *s, int send)",
          "651:     SSL3_RECORD *rec;",
          "653:     unsigned long l;",
          "",
          "[Added Lines]",
          "646: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int numpipes, int send)",
          "649:     size_t reclen[SSL_MAX_PIPELINES];",
          "650:     unsigned char buf[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];",
          "653:     unsigned int ctr;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:             OPENSSL_assert(n >= 0);",
          "661:         }",
          "662:         ds = s->enc_write_ctx;",
          "664:         if (s->enc_write_ctx == NULL)",
          "665:             enc = NULL;",
          "666:         else {",
          "",
          "[Removed Lines]",
          "663:         rec = RECORD_LAYER_get_wrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "673:             else",
          "674:                 ivlen = 0;",
          "675:             if (ivlen > 1) {",
          "684:             }",
          "685:         }",
          "686:     } else {",
          "",
          "[Removed Lines]",
          "676:                 if (rec->data != rec->input)",
          "681:                     fprintf(stderr, \"tls1_enc(): rec->data != rec->input\\n\");",
          "682:                 else if (RAND_bytes(rec->input, ivlen) <= 0)",
          "683:                     return -1;",
          "",
          "[Added Lines]",
          "673:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "674:                     if (recs[ctr].data != recs[ctr].input) {",
          "679:                         SSLerr(SSL_F_TLS1_ENC, ERR_R_INTERNAL_ERROR);",
          "680:                         return -1;",
          "681:                     } else if (RAND_bytes(recs[ctr].input, ivlen) <= 0) {",
          "682:                         SSLerr(SSL_F_TLS1_ENC, ERR_R_INTERNAL_ERROR);",
          "683:                         return -1;",
          "684:                     }",
          "685:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "689:             OPENSSL_assert(n >= 0);",
          "690:         }",
          "691:         ds = s->enc_read_ctx;",
          "693:         if (s->enc_read_ctx == NULL)",
          "694:             enc = NULL;",
          "695:         else",
          "",
          "[Removed Lines]",
          "692:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "697:     }",
          "699:     if ((s->session == NULL) || (ds == NULL) || (enc == NULL)) {",
          "702:         ret = 1;",
          "703:     } else {",
          "726:                 }",
          "753:         }",
          "758:         }",
          "762:             ? (i < 0)",
          "763:             : (i == 0))",
          "765:         if (send == 0) {",
          "766:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "770:             } else if (EVP_CIPHER_mode(enc) == EVP_CIPH_CCM_MODE) {",
          "774:             }",
          "775:         }",
          "777:         ret = 1;",
          "778:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "779:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "782:         if (pad && !send)",
          "784:     }",
          "785:     return ret;",
          "786: }",
          "789: {",
          "791:     unsigned char *mac_sec, *seq;",
          "792:     const EVP_MD_CTX *hash;",
          "793:     unsigned char *p, rec_char;",
          "",
          "[Removed Lines]",
          "700:         memmove(rec->data, rec->input, rec->length);",
          "701:         rec->input = rec->data;",
          "704:         l = rec->length;",
          "705:         bs = EVP_CIPHER_CTX_block_size(ds);",
          "707:         if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds)) & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "708:             unsigned char buf[EVP_AEAD_TLS1_AAD_LEN], *seq;",
          "710:             seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "711:                 : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "713:             if (SSL_IS_DTLS(s)) {",
          "714:                 unsigned char dtlsseq[9], *p = dtlsseq;",
          "716:                 s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "717:                     DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "718:                 memcpy(p, &seq[2], 6);",
          "719:                 memcpy(buf, dtlsseq, 8);",
          "720:             } else {",
          "721:                 memcpy(buf, seq, 8);",
          "723:                     ++seq[i];",
          "724:                     if (seq[i] != 0)",
          "725:                         break;",
          "727:             }",
          "729:             buf[8] = rec->type;",
          "730:             buf[9] = (unsigned char)(s->version >> 8);",
          "731:             buf[10] = (unsigned char)(s->version);",
          "732:             buf[11] = rec->length >> 8;",
          "733:             buf[12] = rec->length & 0xff;",
          "734:             pad = EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_AEAD_TLS1_AAD,",
          "735:                                       EVP_AEAD_TLS1_AAD_LEN, buf);",
          "736:             if (pad <= 0)",
          "737:                 return -1;",
          "738:             if (send) {",
          "739:                 l += pad;",
          "740:                 rec->length += pad;",
          "741:             }",
          "742:         } else if ((bs != 1) && send) {",
          "743:             i = bs - ((int)l % bs);",
          "748:             j = i - 1;",
          "749:             for (k = (int)l; k < (int)(l + i); k++)",
          "750:                 rec->input[k] = j;",
          "751:             l += i;",
          "752:             rec->length += i;",
          "755:         if (!send) {",
          "756:             if (l == 0 || l % bs != 0)",
          "757:                 return 0;",
          "760:         i = EVP_Cipher(ds, rec->data, rec->input, l);",
          "761:         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds)) & EVP_CIPH_FLAG_CUSTOM_CIPHER)",
          "767:                 rec->data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "768:                 rec->input += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "769:                 rec->length -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "771:                 rec->data += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "772:                 rec->input += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "773:                 rec->length -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "780:         if ((bs != 1) && !send)",
          "781:             ret = tls1_cbc_remove_padding(s, rec, bs, mac_size);",
          "783:             rec->length -= pad;",
          "788: int n_ssl3_mac(SSL *ssl, unsigned char *md, int send)",
          "790:     SSL3_RECORD *rec;",
          "",
          "[Added Lines]",
          "701:         for (ctr = 0; ctr < numpipes; ctr++) {",
          "702:             memmove(recs[ctr].data, recs[ctr].input, recs[ctr].length);",
          "703:             recs[ctr].input = recs[ctr].data;",
          "704:         }",
          "707:         bs = EVP_CIPHER_block_size(EVP_CIPHER_CTX_cipher(ds));",
          "709:         if (numpipes > 1) {",
          "710:             if(!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "711:                                   & EVP_CIPH_FLAG_PIPELINE)) {",
          "716:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "717:                 return -1;",
          "718:             }",
          "719:         }",
          "720:         for (ctr = 0; ctr < numpipes; ctr++) {",
          "721:             reclen[ctr] = recs[ctr].length;",
          "723:             if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "724:                     & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "725:                 unsigned char *seq;",
          "727:                 seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "728:                     : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "730:                 if (SSL_IS_DTLS(s)) {",
          "732:                     unsigned char dtlsseq[9], *p = dtlsseq;",
          "734:                     s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "735:                         DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "736:                     memcpy(p, &seq[2], 6);",
          "737:                     memcpy(buf[ctr], dtlsseq, 8);",
          "738:                 } else {",
          "739:                     memcpy(buf[ctr], seq, 8);",
          "741:                         ++seq[i];",
          "742:                         if (seq[i] != 0)",
          "743:                             break;",
          "744:                     }",
          "745:                 }",
          "747:                 buf[ctr][8] = recs[ctr].type;",
          "748:                 buf[ctr][9] = (unsigned char)(s->version >> 8);",
          "749:                 buf[ctr][10] = (unsigned char)(s->version);",
          "750:                 buf[ctr][11] = recs[ctr].length >> 8;",
          "751:                 buf[ctr][12] = recs[ctr].length & 0xff;",
          "752:                 pad = EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_AEAD_TLS1_AAD,",
          "753:                                           EVP_AEAD_TLS1_AAD_LEN, buf[ctr]);",
          "754:                 if (pad <= 0)",
          "755:                     return -1;",
          "757:                 if (send) {",
          "758:                     reclen[ctr] += pad;",
          "759:                     recs[ctr].length += pad;",
          "762:             } else if ((bs != 1) && send) {",
          "763:                 i = bs - ((int)reclen[ctr] % bs);",
          "768:                 j = i - 1;",
          "769:                 for (k = (int)reclen[ctr]; k < (int)(reclen[ctr] + i); k++)",
          "770:                     recs[ctr].input[k] = j;",
          "771:                 reclen[ctr] += i;",
          "772:                 recs[ctr].length += i;",
          "773:             }",
          "775:             if (!send) {",
          "776:                 if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)",
          "777:                     return 0;",
          "778:             }",
          "780:         if (numpipes > 1) {",
          "781:             unsigned char *data[SSL_MAX_PIPELINES];",
          "784:             for(ctr = 0; ctr < numpipes; ctr++) {",
          "785:                 data[ctr] = recs[ctr].data;",
          "786:             }",
          "787:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS,",
          "788:                                       numpipes, data) <= 0) {",
          "789:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "790:             }",
          "792:             for(ctr = 0; ctr < numpipes; ctr++) {",
          "793:                 data[ctr] = recs[ctr].input;",
          "794:             }",
          "795:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_BUFS,",
          "796:                                       numpipes, data) <= 0",
          "797:                 || EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_LENS,",
          "798:                                       numpipes, reclen) <= 0) {",
          "799:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "800:                 return -1;",
          "801:             }",
          "804:         i = EVP_Cipher(ds, recs[0].data, recs[0].input, reclen[0]);",
          "805:         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "806:                 & EVP_CIPH_FLAG_CUSTOM_CIPHER)",
          "812:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "813:                     recs[ctr].data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "814:                     recs[ctr].input += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "815:                     recs[ctr].length -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "816:                 }",
          "818:                 for (ctr = 0; ctr < numpipes; ctr++) {",
          "819:                     recs[ctr].data += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "820:                     recs[ctr].input += EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "821:                     recs[ctr].length -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "822:                 }",
          "829:         if ((bs != 1) && !send) {",
          "831:             ret = tls1_cbc_remove_padding(s, recs, bs, mac_size);",
          "832:         }",
          "834:             recs[0].length -= pad;",
          "839: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "796:     int t;",
          "798:     if (send) {",
          "800:         mac_sec = &(ssl->s3->write_mac_secret[0]);",
          "801:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "802:         hash = ssl->write_hash;",
          "803:     } else {",
          "805:         mac_sec = &(ssl->s3->read_mac_secret[0]);",
          "806:         seq = RECORD_LAYER_get_read_sequence(&ssl->rlayer);",
          "807:         hash = ssl->read_hash;",
          "",
          "[Removed Lines]",
          "799:         rec = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "804:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "885:     return (md_size);",
          "886: }",
          "889: {",
          "891:     unsigned char *seq;",
          "892:     EVP_MD_CTX *hash;",
          "893:     size_t md_size;",
          "",
          "[Removed Lines]",
          "888: int tls1_mac(SSL *ssl, unsigned char *md, int send)",
          "890:     SSL3_RECORD *rec;",
          "",
          "[Added Lines]",
          "936: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "899:     int t;",
          "901:     if (send) {",
          "903:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "904:         hash = ssl->write_hash;",
          "905:     } else {",
          "907:         seq = RECORD_LAYER_get_read_sequence(&ssl->rlayer);",
          "908:         hash = ssl->read_hash;",
          "909:     }",
          "",
          "[Removed Lines]",
          "902:         rec = RECORD_LAYER_get_wrec(&ssl->rlayer);",
          "906:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1253:     rr->data = rr->input;",
          "1254:     rr->orig_len = rr->length;",
          "",
          "[Removed Lines]",
          "1256:     enc_err = s->method->ssl3_enc->enc(s, 0);",
          "",
          "[Added Lines]",
          "1301:     enc_err = s->method->ssl3_enc->enc(s, rr, 1, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1320:             mac = &rr->data[rr->length];",
          "1321:         }",
          "1324:         if (i < 0 || mac == NULL",
          "1325:             || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0)",
          "1326:             enc_err = -1;",
          "",
          "[Removed Lines]",
          "1323:         i = s->method->ssl3_enc->mac(s, md, 0 /* not send */ );",
          "",
          "[Added Lines]",
          "1368:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "",
          "---------------"
        ],
        "ssl/s3_msg.c||ssl/s3_msg.c": [
          "File: ssl/s3_msg.c -> ssl/s3_msg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: int ssl3_dispatch_alert(SSL *s)",
          "193: {",
          "194:     int i, j;",
          "195:     void (*cb) (const SSL *ssl, int type, int val) = NULL;",
          "197:     s->s3->alert_dispatch = 0;",
          "199:     if (i <= 0) {",
          "200:         s->s3->alert_dispatch = 1;",
          "201:     } else {",
          "",
          "[Removed Lines]",
          "198:     i = do_ssl3_write(s, SSL3_RT_ALERT, &s->s3->send_alert[0], 2, 0);",
          "",
          "[Added Lines]",
          "195:     unsigned int alertlen;",
          "199:     alertlen = 2;",
          "200:     i = do_ssl3_write(s, SSL3_RT_ALERT, &s->s3->send_alert[0], &alertlen, 1, 0);",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:      \"tls1_check_duplicate_extensions\"},",
          "291:     {ERR_FUNC(SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT),",
          "292:      \"TLS1_CHECK_SERVERHELLO_TLSEXT\"},",
          "293:     {ERR_FUNC(SSL_F_TLS1_EXPORT_KEYING_MATERIAL),",
          "294:      \"tls1_export_keying_material\"},",
          "295:     {ERR_FUNC(SSL_F_TLS1_GET_CURVELIST), \"tls1_get_curvelist\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:     {ERR_FUNC(SSL_F_TLS1_ENC), \"tls1_enc\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:      \"peer did not return a certificate\"},",
          "571:     {ERR_REASON(SSL_R_PEM_NAME_BAD_PREFIX), \"pem name bad prefix\"},",
          "572:     {ERR_REASON(SSL_R_PEM_NAME_TOO_SHORT), \"pem name too short\"},",
          "573:     {ERR_REASON(SSL_R_PRE_MAC_LENGTH_TOO_LONG), \"pre mac length too long\"},",
          "574:     {ERR_REASON(SSL_R_PROTOCOL_IS_SHUTDOWN), \"protocol is shutdown\"},",
          "575:     {ERR_REASON(SSL_R_PSK_IDENTITY_NOT_FOUND), \"psk identity not found\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     {ERR_REASON(SSL_R_PIPELINE_FAILURE), \"pipeline failure\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     ssl_undefined_function,",
          "176:     (int (*)(SSL *, unsigned char *, unsigned char *, int))",
          "177:         ssl_undefined_function,",
          "",
          "[Removed Lines]",
          "173:     (int (*)(SSL *, int))ssl_undefined_function,",
          "174:     (int (*)(SSL *, unsigned char *, int))ssl_undefined_function,",
          "",
          "[Added Lines]",
          "173:     (int (*)(SSL *, SSL3_RECORD *, unsigned int, int))ssl_undefined_function,",
          "174:     (int (*)(SSL *, SSL3_RECORD *, unsigned char *, int))ssl_undefined_function,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:     X509_VERIFY_PARAM_inherit(s->param, ctx->param);",
          "671:     s->quiet_shutdown = ctx->quiet_shutdown;",
          "672:     s->max_send_fragment = ctx->max_send_fragment;",
          "674:     CRYPTO_add(&ctx->references, 1, CRYPTO_LOCK_SSL_CTX);",
          "675:     s->ctx = ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     s->split_send_fragment = ctx->split_send_fragment;",
          "674:     s->max_pipelines = ctx->max_pipelines;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1680:         if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1681:             return 0;",
          "1682:         s->max_send_fragment = larg;",
          "1683:         return 1;",
          "1684:     case SSL_CTRL_GET_RI_SUPPORT:",
          "1685:         if (s->s3)",
          "1686:             return s->s3->send_connection_binding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1685:         if (s->max_send_fragment < s->split_send_fragment)",
          "1686:             s->split_send_fragment = s->max_send_fragment;",
          "1687:         return 1;",
          "1688:     case SSL_CTRL_SET_SPLIT_SEND_FRAGMENT:",
          "1689:         if (larg > s->max_send_fragment || larg == 0)",
          "1690:             return 0;",
          "1691:         s->split_send_fragment = larg;",
          "1693:     case SSL_CTRL_SET_MAX_PIPELINES:",
          "1694:         if (larg < 1 || larg > SSL_MAX_PIPELINES)",
          "1695:             return 0;",
          "1696:         s->max_pipelines = larg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1820:         if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1821:             return 0;",
          "1822:         ctx->max_send_fragment = larg;",
          "1823:         return 1;",
          "1824:     case SSL_CTRL_CERT_FLAGS:",
          "1825:         return (ctx->cert->cert_flags |= larg);",
          "1826:     case SSL_CTRL_CLEAR_CERT_FLAGS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1836:         if (ctx->max_send_fragment < ctx->split_send_fragment)",
          "1837:             ctx->split_send_fragment = ctx->split_send_fragment;",
          "1839:     case SSL_CTRL_SET_SPLIT_SEND_FRAGMENT:",
          "1840:         if (larg > ctx->max_send_fragment || larg == 0)",
          "1841:             return 0;",
          "1842:         ctx->split_send_fragment = larg;",
          "1843:         return 1;",
          "1844:     case SSL_CTRL_SET_MAX_PIPELINES:",
          "1845:         if (larg < 1 || larg > SSL_MAX_PIPELINES)",
          "1846:             return 0;",
          "1847:         ctx->max_pipelines = larg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2370:         ret->comp_methods = SSL_COMP_get_compression_methods();",
          "2372:     ret->max_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;",
          "2375:     if ((RAND_bytes(ret->tlsext_tick_key_name, 16) <= 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2397:     ret->split_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:     void *ct_validation_callback_arg;",
          "830: #  endif",
          "836:     unsigned int max_send_fragment;",
          "838: #  ifndef OPENSSL_NO_ENGINE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     unsigned int split_send_fragment;",
          "844:     unsigned int max_pipelines;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1085:     int first_packet;",
          "1087:     int client_version;",
          "1088:     unsigned int max_send_fragment;",
          "1091:     void (*tlsext_debug_cb) (SSL *s, int client_server, int type,",
          "1092:                              const unsigned char *data, int len, void *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1101:     unsigned int split_send_fragment;",
          "1109:     unsigned int max_pipelines;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1637: typedef struct ssl3_enc_method {",
          "1640:     int (*setup_key_block) (SSL *);",
          "1641:     int (*generate_master_secret) (SSL *, unsigned char *, unsigned char *,",
          "1642:                                    int);",
          "",
          "[Removed Lines]",
          "1638:     int (*enc) (SSL *, int);",
          "1639:     int (*mac) (SSL *, unsigned char *, int);",
          "",
          "[Added Lines]",
          "1659:     int (*enc) (SSL *, SSL3_RECORD *, unsigned int, int);",
          "1660:     int (*mac) (SSL *, SSL3_RECORD *, unsigned char *, int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa62f39514026609d0378090dfd8a27834d8a21",
      "candidate_info": {
        "commit_hash": "3aa62f39514026609d0378090dfd8a27834d8a21",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3aa62f39514026609d0378090dfd8a27834d8a21",
        "files": [
          "ssl/record/ssl3_record.c",
          "test/danetest.c"
        ],
        "message": "Fix some -Wshadow warnings\n\nFound using various (old-ish) versions of gcc.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2940)\n(cherry picked from commit aebe9e399109dcde63a1d0328ffdfc5619b49431)",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "test/danetest.c||test/danetest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ],
          "candidate": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578: {",
          "579:     SSL3_RECORD *rec;",
          "580:     EVP_CIPHER_CTX *ds;",
          "",
          "[Removed Lines]",
          "577: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int send)",
          "",
          "[Added Lines]",
          "577: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:     if (n_recs != 1)",
          "590:         return 0;",
          "592:         ds = s->enc_write_ctx;",
          "593:         if (s->enc_write_ctx == NULL)",
          "594:             enc = NULL;",
          "",
          "[Removed Lines]",
          "591:     if (send) {",
          "",
          "[Added Lines]",
          "591:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:             i = bs - ((int)l % bs);",
          "",
          "[Removed Lines]",
          "614:         if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "614:         if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "625:             rec->input[l - 1] = (i - 1);",
          "626:         }",
          "629:             if (l == 0 || l % bs != 0)",
          "630:                 return 0;",
          "",
          "[Removed Lines]",
          "628:         if (!send) {",
          "",
          "[Added Lines]",
          "628:         if (!sending) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "637:         if (EVP_MD_CTX_md(s->read_hash) != NULL)",
          "638:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "640:             return ssl3_cbc_remove_padding(rec, bs, mac_size);",
          "641:     }",
          "642:     return (1);",
          "",
          "[Removed Lines]",
          "639:         if ((bs != 1) && !send)",
          "",
          "[Added Lines]",
          "639:         if ((bs != 1) && !sending)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "656: {",
          "657:     EVP_CIPHER_CTX *ds;",
          "658:     size_t reclen[SSL_MAX_PIPELINES];",
          "",
          "[Removed Lines]",
          "655: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int send)",
          "",
          "[Added Lines]",
          "655: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "664:     if (n_recs == 0)",
          "665:         return 0;",
          "668:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "669:             int n = EVP_MD_CTX_size(s->write_hash);",
          "670:             OPENSSL_assert(n >= 0);",
          "",
          "[Removed Lines]",
          "667:     if (send) {",
          "",
          "[Added Lines]",
          "667:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "736:                 & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "737:                 unsigned char *seq;",
          "740:                     : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "742:                 if (SSL_IS_DTLS(s)) {",
          "744:                     unsigned char dtlsseq[9], *p = dtlsseq;",
          "747:                         DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "748:                     memcpy(p, &seq[2], 6);",
          "749:                     memcpy(buf[ctr], dtlsseq, 8);",
          "",
          "[Removed Lines]",
          "739:                 seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "746:                     s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "[Added Lines]",
          "739:                 seq = sending ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "746:                     s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "766:                 if (pad <= 0)",
          "767:                     return -1;",
          "770:                     reclen[ctr] += pad;",
          "771:                     recs[ctr].length += pad;",
          "772:                 }",
          "775:                 i = bs - ((int)reclen[ctr] % bs);",
          "",
          "[Removed Lines]",
          "769:                 if (send) {",
          "774:             } else if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "769:                 if (sending) {",
          "774:             } else if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "784:                 recs[ctr].length += i;",
          "785:             }",
          "788:                 if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)",
          "789:                     return 0;",
          "790:             }",
          "",
          "[Removed Lines]",
          "787:             if (!send) {",
          "",
          "[Added Lines]",
          "787:             if (!sending) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "819:             ? (i < 0)",
          "820:             : (i == 0))",
          "823:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "824:                 for (ctr = 0; ctr < n_recs; ctr++) {",
          "825:                     recs[ctr].data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "",
          "[Removed Lines]",
          "822:         if (send == 0) {",
          "",
          "[Added Lines]",
          "822:         if (sending == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "838:         ret = 1;",
          "839:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "840:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "842:             int tmpret;",
          "843:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "844:                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);",
          "",
          "[Removed Lines]",
          "841:         if ((bs != 1) && !send) {",
          "",
          "[Added Lines]",
          "841:         if ((bs != 1) && !sending) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "853:                                                ret, -1);",
          "854:             }",
          "855:         }",
          "857:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "858:                 recs[ctr].length -= pad;",
          "859:             }",
          "",
          "[Removed Lines]",
          "856:         if (pad && !send) {",
          "",
          "[Added Lines]",
          "856:         if (pad && !sending) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "862:     return ret;",
          "863: }",
          "866: {",
          "867:     unsigned char *mac_sec, *seq;",
          "868:     const EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "865: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "865: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "871:     int npad;",
          "872:     int t;",
          "875:         mac_sec = &(ssl->s3->write_mac_secret[0]);",
          "876:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "877:         hash = ssl->write_hash;",
          "",
          "[Removed Lines]",
          "874:     if (send) {",
          "",
          "[Added Lines]",
          "874:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "887:     md_size = t;",
          "888:     npad = (48 / md_size) * md_size;",
          "891:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "892:         ssl3_cbc_record_digest_supported(hash)) {",
          "",
          "[Removed Lines]",
          "890:     if (!send &&",
          "",
          "[Added Lines]",
          "890:     if (!sending &&",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "959:     return (md_size);",
          "960: }",
          "963: {",
          "964:     unsigned char *seq;",
          "965:     EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "962: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "962: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "967:     int i;",
          "968:     EVP_MD_CTX *hmac = NULL, *mac_ctx;",
          "969:     unsigned char header[13];",
          "971:                       : (ssl->mac_flags & SSL_MAC_FLAG_READ_MAC_STREAM));",
          "972:     int t;",
          "975:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "976:         hash = ssl->write_hash;",
          "977:     } else {",
          "",
          "[Removed Lines]",
          "970:     int stream_mac = (send ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "974:     if (send) {",
          "",
          "[Added Lines]",
          "970:     int stream_mac = (sending ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "974:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "996:     if (SSL_IS_DTLS(ssl)) {",
          "997:         unsigned char dtlsseq[8], *p = dtlsseq;",
          "1000:             DTLS_RECORD_LAYER_get_r_epoch(&ssl->rlayer), p);",
          "1001:         memcpy(p, &seq[2], 6);",
          "",
          "[Removed Lines]",
          "999:         s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "[Added Lines]",
          "999:         s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1010:     header[11] = (rec->length) >> 8;",
          "1011:     header[12] = (rec->length) & 0xff;",
          "1014:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1015:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1013:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1013:     if (!sending && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1035:             EVP_MD_CTX_free(hmac);",
          "1036:             return -1;",
          "1037:         }",
          "1039:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
          "1040:                                        mac_ctx, rec->input,",
          "1041:                                        rec->length, rec->orig_len)) {",
          "",
          "[Removed Lines]",
          "1038:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "[Added Lines]",
          "1038:         if (!sending && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "---------------"
        ],
        "test/danetest.c||test/danetest.c": [
          "File: test/danetest.c -> test/danetest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:     return 1;",
          "318: }",
          "321:                          BIO *f, const char *path)",
          "322: {",
          "323:     char *line;",
          "",
          "[Removed Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *basename,",
          "",
          "[Added Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *base_name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         if ((ssl = SSL_new(ctx)) == NULL)",
          "354:             return -1;",
          "355:         SSL_set_connect_state(ssl);",
          "357:             SSL_free(ssl);",
          "358:             return -1;",
          "359:         }",
          "",
          "[Removed Lines]",
          "356:         if (SSL_dane_enable(ssl, basename) <= 0) {",
          "",
          "[Added Lines]",
          "356:         if (SSL_dane_enable(ssl, base_name) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
      "candidate_info": {
        "commit_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28a31a0a10f41ef855cabab4e18c994c44225125",
        "files": [
          "include/openssl/ssl3.h",
          "ssl/d1_lib.c",
          "ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/t1_enc.c",
          "test/dtls_mtu_test.c"
        ],
        "message": "Don't change the state of the ETM flags until CCS processing\n\nIn 1.1.0 changing the ciphersuite during a renegotiation can result in\na crash leading to a DoS attack. In master this does not occur with TLS\n(instead you get an internal error, which is still wrong but not a security\nissue) - but the problem still exists in the DTLS code.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/d1_lib.c||ssl/d1_lib.c",
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl3.h||include/openssl/ssl3.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "include/openssl/ssl3.h||include/openssl/ssl3.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "265: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
          "271: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
          "273: # define SSL3_MT_HELLO_REQUEST                   0",
          "274: # define SSL3_MT_CLIENT_HELLO                    1",
          "275: # define SSL3_MT_SERVER_HELLO                    2",
          "",
          "[Removed Lines]",
          "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
          "",
          "[Added Lines]",
          "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
          "269: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
          "274: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
          "",
          "---------------"
        ],
        "ssl/d1_lib.c||ssl/d1_lib.c": [
          "File: ssl/d1_lib.c -> ssl/d1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "937:                                  &blocksize, &ext_overhead))",
          "938:         return 0;",
          "941:         ext_overhead += mac_overhead;",
          "942:     else",
          "943:         int_overhead += mac_overhead;",
          "",
          "[Removed Lines]",
          "940:     if (SSL_USE_ETM(s))",
          "",
          "[Added Lines]",
          "940:     if (SSL_READ_ETM(s))",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:         if (!s->method->ssl3_enc->mac(s, &wr,",
          "1034:                                       &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
          "1035:                                       1))",
          "",
          "[Removed Lines]",
          "1032:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "1032:     if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1047:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
          "1048:         goto err;",
          "1051:         if (!s->method->ssl3_enc->mac(s, &wr,",
          "1052:                                       &(p[SSL3_RECORD_get_length(&wr)]), 1))",
          "1053:             goto err;",
          "",
          "[Removed Lines]",
          "1050:     if (SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "1050:     if (SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:     if (type == SSL3_RT_APPLICATION_DATA &&",
          "402:         len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
          "403:         s->compress == NULL && s->msg_callback == NULL &&",
          "405:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
          "406:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
          "407:         unsigned char aad[13];",
          "",
          "[Removed Lines]",
          "404:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "[Added Lines]",
          "404:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "874:             unsigned char *mac;",
          "876:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
          "",
          "[Removed Lines]",
          "873:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "873:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "923:             SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
          "924:             goto err;",
          "925:         }",
          "927:             unsigned char *mac;",
          "929:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
          "",
          "[Removed Lines]",
          "926:         if (SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "926:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         unsigned char *mac;",
          "389:         imac_size = EVP_MD_CTX_size(s->read_hash);",
          "",
          "[Removed Lines]",
          "386:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "",
          "[Added Lines]",
          "386:     if (SSL_READ_ETM(s) && s->read_hash) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     if ((sess != NULL) &&",
          "442:         (s->enc_read_ctx != NULL) &&",
          "445:         unsigned char *mac = NULL;",
          "446:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "443:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
          "",
          "[Added Lines]",
          "443:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "915:         }",
          "917:         ret = 1;",
          "919:             imac_size = EVP_MD_CTX_size(s->read_hash);",
          "920:             if (imac_size < 0)",
          "921:                 return -1;",
          "",
          "[Removed Lines]",
          "918:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
          "",
          "[Added Lines]",
          "918:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1092:     header[11] = (unsigned char)(rec->length >> 8);",
          "1093:     header[12] = (unsigned char)(rec->length & 0xff);",
          "1096:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1097:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1095:     if (!send && !SSL_USE_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1095:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1118:             EVP_MD_CTX_free(hmac);",
          "1119:             return 0;",
          "1120:         }",
          "1122:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
          "1123:                                        mac_ctx, rec->input,",
          "1124:                                        rec->length, rec->orig_len)) {",
          "",
          "[Removed Lines]",
          "1121:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
          "",
          "[Added Lines]",
          "1121:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1408:     rr->data = rr->input;",
          "1409:     rr->orig_len = rr->length;",
          "1412:         unsigned char *mac;",
          "1413:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "1414:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "",
          "[Removed Lines]",
          "1411:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "",
          "[Added Lines]",
          "1411:     if (SSL_READ_ETM(s) && s->read_hash) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1452: #endif",
          "1456:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
          "1458:         unsigned char *mac = NULL;",
          "",
          "[Removed Lines]",
          "1455:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
          "",
          "[Added Lines]",
          "1455:     if ((sess != NULL) && !SSL_READ_ETM(s) &&",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "395: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
          "396:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
          "401: # define SSL_PKEY_RSA            0",
          "",
          "[Removed Lines]",
          "398: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
          "",
          "[Added Lines]",
          "398: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
          "399: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1134:         int psk_kex_mode;",
          "1135:     } ext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1138:         int use_etm;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: #endif",
          "208:     {",
          "209:         TLSEXT_TYPE_encrypt_then_mac,",
          "211:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
          "212:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
          "213:     },",
          "",
          "[Removed Lines]",
          "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
          "",
          "[Added Lines]",
          "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "913: static int init_etm(SSL *s, unsigned int context)",
          "914: {",
          "917:     return 1;",
          "918: }",
          "",
          "[Removed Lines]",
          "915:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "915:     s->ext.use_etm = 0;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1172:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
          "1173:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "1174:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "1177:     return 1;",
          "1178: }",
          "",
          "[Removed Lines]",
          "1175:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "1175:         s->ext.use_etm = 1;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:                        size_t chainidx, int *al)",
          "452: {",
          "453:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "456:     return 1;",
          "457: }",
          "",
          "[Removed Lines]",
          "454:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "454:         s->ext.use_etm = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, unsigned int context, X509 *x,",
          "954:                            size_t chainidx, int *al)",
          "955: {",
          "957:         return 1;",
          "",
          "[Removed Lines]",
          "956:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
          "",
          "[Added Lines]",
          "956:     if (!s->ext.use_etm)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "964:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
          "965:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
          "966:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
          "968:         return 1;",
          "969:     }",
          "",
          "[Removed Lines]",
          "967:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "967:         s->ext.use_etm = 0;",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: #endif",
          "131:     if (which & SSL3_CC_READ) {",
          "132:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "133:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
          "134:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:         if (s->ext.use_etm)",
          "133:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "134:         else",
          "135:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:         mac_secret = &(s->s3->read_mac_secret[0]);",
          "168:         mac_secret_size = &(s->s3->read_mac_secret_size);",
          "169:     } else {",
          "170:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "171:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "172:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:         if (s->ext.use_etm)",
          "176:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "177:         else",
          "178:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     if (s->s3->tmp.key_block_length != 0)",
          "370:         return (1);",
          "375:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
          "376:         return (0);",
          "377:     }",
          "",
          "[Removed Lines]",
          "372:     if (!ssl_cipher_get_evp",
          "373:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
          "374:          SSL_USE_ETM(s))) {",
          "",
          "[Added Lines]",
          "382:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
          "383:                             &comp, s->ext.use_etm)) {",
          "",
          "---------------"
        ],
        "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
          "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         }",
          "134:     }",
          "135:     rv = 1;",
          "137:         rv = 2;",
          "138:  out:",
          "139:     SSL_free(clnt_ssl);",
          "",
          "[Removed Lines]",
          "136:     if (SSL_USE_ETM(clnt_ssl))",
          "",
          "[Added Lines]",
          "136:     if (SSL_READ_ETM(clnt_ssl))",
          "",
          "---------------"
        ]
      }
    }
  ]
}