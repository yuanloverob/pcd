{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
      "candidate_info": {
        "commit_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2734645bfc4b245550e864db5eb462ce03caee46",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.17\": workaround crash when using \"x=assert(...)\", etc. Still needs to warn user/avoid memory leak.\n\nFossilOrigin-Name: 0f81e6a593d206d94de23aa801de2f00e6d8745e74cb4851be6df9889a6b9641",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 16",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 17",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:     while(ip < end && rc == JSI_OK) {",
          "1060:         int plop = ip->op;",
          "1062:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1063:             interp->curIp = ip;",
          "1064:             switch (ip->logflag) {",
          "1065:                 case jsi_Oplf_assert:",
          "1072:                     break;",
          "1073:                 case jsi_Oplf_debug:",
          "1080:                     break;",
          "1081:                 case jsi_Oplf_test:",
          "1088:                     break;",
          "1089:                 case jsi_Oplf_trace:",
          "1096:                     break;",
          "1097:                 default:",
          "1098:                     break;",
          "",
          "[Removed Lines]",
          "1066:                     if (!interp->asserts) {",
          "1067:                         ip++;",
          "1068:                         if (ip->logflag != jsi_Oplf_assert && (ip->op == OP_POP || ip->op == OP_RET))",
          "1069:                             ip++;",
          "1070:                         continue;",
          "1071:                     }",
          "1074:                     if (!interp->logOpts.Debug && !(interp->framePtr->logflag &(1<<jsi_Oplf_debug))) {",
          "1075:                         ip++;",
          "1076:                         if (ip->logflag != jsi_Oplf_debug && (ip->op == OP_POP || ip->op == OP_RET))",
          "1077:                             ip++;",
          "1078:                         continue;",
          "1079:                     }",
          "1082:                     if (!interp->logOpts.Test && !(interp->framePtr->logflag &(1<<jsi_Oplf_test))) {",
          "1083:                         ip++;",
          "1084:                         if (ip->logflag != jsi_Oplf_test && (ip->op == OP_POP || ip->op == OP_RET))",
          "1085:                             ip++;",
          "1086:                         continue;",
          "1087:                     }",
          "1090:                     if (!interp->logOpts.Trace && !(interp->framePtr->logflag &(1<<jsi_Oplf_trace))) {",
          "1091:                         ip++;",
          "1092:                         if (ip->logflag != jsi_Oplf_trace && (ip->op == OP_POP || ip->op == OP_RET))",
          "1093:                             ip++;",
          "1094:                         continue;",
          "1095:                     }",
          "",
          "[Added Lines]",
          "1062: #define _JSI_BI_OP_SKIP_SUB(n) {\\",
          "1063:     ip++;\\",
          "1064:     if (ip->logflag != n && (ip->op == OP_POP || ip->op == OP_RET || ip->op == OP_ASSIGN))\\",
          "1065:         ip++;\\",
          "1066:     continue;\\",
          "1067: }",
          "1068: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "1074:                     if (!interp->asserts) { _JSI_BI_OP_SKIP_SUB(jsi_Oplf_assert) }",
          "1077:                     _JSI_BI_OP_SKIP(Debug, jsi_Oplf_debug)",
          "1080:                     _JSI_BI_OP_SKIP(Test, jsi_Oplf_test)",
          "1083:                     _JSI_BI_OP_SKIP(Trace, jsi_Oplf_trace)",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
      "candidate_info": {
        "commit_hash": "5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/5c723f7e1f9d26141d3acf2a2dcb443cc9c9e981",
        "files": [
          "lib/Cdata.jsi",
          "lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFilesys.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.40\": Fix try/catch bug. Add LogXX to CData\n\nFossilOrigin-Name: ce0ecd9114b6ed6c5c3106bac2a4ca5f76ccd0a142a4ffd7f2eda5c74ebee956",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:             inits.push(sinit);",
          "433:             evItems.push(evIt);",
          "434:         }",
          "435:         crc = 0;",
          "436:         if (!port) // Non-portable fields add platform crc.",
          "437:             crc = Info.platform().crc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:         if (name == self.name)",
          "436:             sc += '  Jsi_PkgOpts* popts;\\n';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:             }",
          "695:             var fcprefix = '(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr';",
          "696:             ifpre += '\\nstatic Jsi_RC '+fcmdName2 + fcprefix + ifprecc2 + ') {\\n';",
          "697:             if (isObj && !fconstr) {",
          "698:                 if (!self.setCons)",
          "699:                     self.out += '#define CDATA_CONSTRUCTOR 1\\n';",
          "700:                 self.setCons=1;",
          "701:                 ifpre += '  '+otyp+' *cmdPtr = ('+otyp+' *)Jsi_UserObjGetData(interp, _this, funcPtr);\\n'",
          "703:             } else if (intData) {",
          "704:                 ifpre += '#ifdef JSI_INI_DEFN_'+otyp+'\\n  '+otyp+' *cmdPtr = ('+otyp+' *)Jsi_InterpGetData(interp, \"'+name+'\", NULL);\\n'",
          "706:             }",
          "707:             var rettyp = typeValidate('return', fre[3].substr(1));",
          "708:             if (rettyp.length>1 || rettyp[0] != 'any') {",
          "",
          "[Removed Lines]",
          "702:                     + '  if (!cmdPtr) { Jsi_LogError(\"Apply in a non object\"); return JSI_ERROR; }\\n';",
          "705:                     + '  if (!cmdPtr) { Jsi_LogError(\"Missing interp data\"); return JSI_ERROR; }\\n#endif\\n';",
          "",
          "[Added Lines]",
          "699:             var svendx = 'Jsi_LogTraceExt(\"'+name+fname+'\");\\n';",
          "705:                     + '  if (!cmdPtr) return Jsi_LogError(\"Apply in a non object\"); \\n'+svendx;",
          "708:                     + '  if (!cmdPtr) return Jsi_LogError(\"Missing interp data\"); \\n'+svendx+'#endif\\n';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "962:         var scnm = self.icode[name+'_'];",
          "963:         if (!scnm) scnm = '';",
          "964:         self.out = self.preface + ' ' + self.verStr + ' from: '+self.infile+'\\n\\n'",
          "965:             + self.jscHeaderStr.replace(/Demo/g, name) + self.outcode",
          "967:         + \"#define _JSI_CDEFS_\"+name+\"_H_\\n\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:             + '#define JSI_EXT_OPTS cmdPtr->popts \\n'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1555: #ifdef CDATA_CODE_PER_INTERP_Demo",
          "1556:     cmdPtr->_ = (void *)Jsi_InterpGetData(interp, \"Demo_InterpData\", NULL);",
          "1557: #endif",
          "1559:     bool hasOpts = (arg != NULL && !Jsi_ValueIsNull(interp,arg));",
          "1560:     if ((hasOpts && Jsi_OptionsProcess(interp, Demo_Specs, cmdPtr, arg, 0) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:     cmdPtr->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1562:         DemoObjFree(interp, cmdPtr);",
          "1563:         return JSI_ERROR;",
          "1564:     }",
          "1566:     Jsi_Value *toacc = NULL;",
          "1567:     if (Jsi_FunctionIsConstructor(funcPtr)) {",
          "1568:         toacc = _this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1570:     Jsi_LogDebugExt(\"Starting\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695: }",
          "1696: #endif",
          "1697: #endif",
          "1698: ';",
          "1700:     var retval = main();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1703: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         putsCmd     :null,      // Command to relay Interp.putsCallback.",
          "14:         quiet       :false,     // Quiet mode",
          "15:         retAll      :false,     // Return object with these fields: retVal, putsVal, msgVal.",
          "17:     };",
          "18:     var self = {",
          "19:         srcFile:null,",
          "",
          "[Removed Lines]",
          "16:         unitTest    :false      // Enable unit test output (ie. like -U).",
          "",
          "[Added Lines]",
          "16:         unitTest    :false,     // Enable unit test output (ie. like -U).",
          "17:         write       :false,     // Enable write to given dir.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             if (isdir) {",
          "87:                 sopts.scriptFile='';",
          "88:                 sopts.safeReadDirs = [fn];",
          "89:             } else {",
          "90:                 sopts.safeReadDirs = [File.dirname(fn)];",
          "91:                 sopts.scriptFile=fn;",
          "92:             }",
          "94:             if (self.unitTest) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:                 if (self.write)",
          "91:                     sopts.safeWriteDirs = [fn];",
          "95:                 if (self.write)",
          "96:                     sopts.safeWriteDirs = sopts.safeReadDirs;",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             if (req.where !== '') req.where = ' WHERE '+req.where;",
          "192:             if (req.orderby !== '') req.orderby = ' ORDER BY '+req.orderby;",
          "193:             req.limit = parseInt(req.limit);",
          "195:             req.offset = parseInt(req.offset);",
          "197:             var query = 'select '+cols+' from \"'+table+'\" '+req.where;",
          "198:             query += ' ' + req.orderby + ' limit '+req.limit;",
          "199:             if (req.offset)",
          "",
          "[Removed Lines]",
          "194:             if (req.limit === NaN || req.limit<=0) req.limit = 20;",
          "196:             if (req.offset === NaN || req.offset<=0) req.offset = 0;",
          "",
          "[Added Lines]",
          "194:             if (isNaN(req.limit)|| req.limit<=0) req.limit = 20;",
          "196:             if (isNaN(req.offset) || req.offset<=0) req.offset = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:             WsSend(id,'loadTable', lst);",
          "209:         }",
          "210:         catch (e) {",
          "211:             WsSend(id,'error', e);",
          "212:         }",
          "213:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             LogWarn(\"ERROR:\", e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:             WsSend(id,'loadTable', lst);",
          "225:         }",
          "226:         catch (e) {",
          "227:             WsSend(id,'error', e);",
          "228:         }",
          "229:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:             LogWarn(\"ERROR:\", e);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 39",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 40",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: } Jsi_CmdSpec;",
          "394: typedef struct {",
          "396:     int traceCall;",
          "397:     bool coverage;",
          "398:     bool profile;",
          "",
          "[Removed Lines]",
          "395:     int log, logmask;",
          "",
          "[Added Lines]",
          "395:     uint log, logmask;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: typedef struct {",
          "402:     struct Jsi_OptionSpec *spec;",
          "404:     Jsi_CmdSpec *cmdSpec;",
          "405:     Jsi_Value *info;",
          "406:     void *reserved[3]; // Reserved for future use.",
          "",
          "[Removed Lines]",
          "403:     void *data;",
          "",
          "[Added Lines]",
          "403:     void *data; // \"status\" output in Info.package",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1250: typedef struct {",
          "",
          "[Removed Lines]",
          "1237: #define Jsi_LogBug(fmt,...) Jsi_LogMsg(interp, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1238: #define Jsi_LogError(fmt,...) Jsi_LogMsg(interp, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1239: #define Jsi_LogParse(fmt,...) Jsi_LogMsg(interp, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogWarn(fmt,...) Jsi_LogMsg(interp, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogInfo(fmt,...) Jsi_LogMsg(interp, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogDebug(fmt,...) Jsi_LogMsg(interp, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogTrace(fmt,...) Jsi_LogMsg(interp, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTest(fmt,...) Jsi_LogMsg(interp, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1246: JSI_EXTERN Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,3,4)));",
          "",
          "[Added Lines]",
          "1238: #define Jsi_LogBug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1239: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogWarn(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogInfo(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogTest(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1247: #ifndef JSI_EXT_OPTS_OMIT",
          "1248: #define Jsi_LogBugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1251: #define Jsi_LogWarnExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogInfoExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogTestExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1256: #else",
          "1257: #define Jsi_LogBugExt(fmt,...)",
          "1258: #define Jsi_LogErrorExt(fmt,...)",
          "1259: #define Jsi_LogParseExt(fmt,...)",
          "1260: #define Jsi_LogWarnExt(fmt,...)",
          "1261: #define Jsi_LogInfoExt(fmt,...)",
          "1262: #define Jsi_LogDebugExt(fmt,...)",
          "1263: #define Jsi_LogTraceExt(fmt,...)",
          "1264: #define Jsi_LogTestExt(fmt,...)",
          "1265: #endif",
          "1267: JSI_EXTERN Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...)  /*STUB = 348*/ __attribute__((format (printf,4, 5)));",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756:     return rc;",
          "757: }",
          "759: Jsi_Number Jsi_PkgRequireEx(Jsi_Interp *interp, const char *name, Jsi_Number version, Jsi_PkgOpts **poptsPtr)",
          "760: {",
          "761:     jsi_PkgInfo *ptr = jsi_PkgGet(interp, name), *ptr2 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759: Jsi_PkgOpts *Jsi_CommandPkgOpts(Jsi_Interp *interp, Jsi_Func *func) {",
          "760:     if (!func || func->type != FC_BUILDIN || !func->fobj->func->pkg) return NULL;",
          "761:     Jsi_PkgOpts *popts = &func->fobj->func->pkg->popts;",
          "762:     return popts;",
          "763: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "767:                 return -1;",
          "768:             ptr->needInit = 0;",
          "769:         }",
          "772:         return ptr->version;",
          "773:     } else if ((ptr2 = jsi_PkgGet(interp->topInterp, name)) && ptr2->initProc) {",
          "",
          "[Removed Lines]",
          "770:             if (poptsPtr)",
          "",
          "[Added Lines]",
          "776:         if (poptsPtr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "975:     jsi_PkgInfo *ptr;",
          "976:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "977:     Jsi_Value *opts = (popts?popts->info:NULL);",
          "978:     if (version<0) {",
          "979:         if (hPtr) {",
          "980:             ptr = (jsi_PkgInfo*)Jsi_HashValueGet(hPtr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:     jsi_Frame *fp = interp->framePtr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "988:     else {",
          "989:         if (hPtr) {",
          "990:             ptr = (jsi_PkgInfo*)Jsi_HashValueGet(hPtr);",
          "992:                 return Jsi_LogError(\"package %s already provided from: %s\", name, ptr->loadFile?ptr->loadFile:\"\");",
          "993:             return JSI_OK;",
          "994:         }",
          "",
          "[Removed Lines]",
          "991:             if (ptr && ptr->needInit==0)",
          "",
          "[Added Lines]",
          "998:             if (ptr && ptr->needInit==0 && fp->filePtr->fileName != ptr->loadFile)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "999:         ptr = (jsi_PkgInfo*)Jsi_Calloc(1, sizeof(*ptr));",
          "1000:         ptr->version = version;",
          "1001:         ptr->initProc = initProc;",
          "1003:         if (popts) {",
          "1004:             ptr->popts = *popts;",
          "1005:             if (popts->info)",
          "",
          "[Removed Lines]",
          "1002:         jsi_Frame *fp = interp->framePtr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1616: }",
          "1618: static Jsi_RC SysPutsCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1620: {",
          "1621:     int i = 0, cnt = 0, argc = 0, quote = (popts->file);",
          "1623:     const char *fn = NULL;",
          "1624:     Jsi_DString dStr, oStr;",
          "1625:     Jsi_Value *v;",
          "1626:     if (args)",
          "1627:         argc = Jsi_ValueGetLength(interp, args);",
          "1629:         v = Jsi_ValueArrayIndex(interp, args, 1);",
          "1630:         if ((isbool=Jsi_ValueIsBoolean(interp, v)))",
          "1631:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1619:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, bool conLog, int islog)",
          "1622:     bool isbool = 0;",
          "1628:     if (islog == 2 && argc > 2) {",
          "",
          "[Added Lines]",
          "1625:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, int islog)",
          "1628:     bool isbool = 0, isbool0 = 0;",
          "1634:     if (islog == 3 && argc > 1) {",
          "1635:         v = Jsi_ValueArrayIndex(interp, args, 0);",
          "1636:         if ((isbool0=Jsi_ValueIsBoolean(interp, v)))",
          "1637:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "1638:     }",
          "1639:     else if (islog == 2 && argc > 2) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1648:     if (argStr)",
          "1649:         Jsi_DSAppend(&dStr, argStr, NULL);",
          "1650:     if (args) { // Assert may call with a null args",
          "1657:         for (; i < argc; ++i) {",
          "1658:             if (isbool && i==1)",
          "1659:                 continue;",
          "1660:             v = Jsi_ValueArrayIndex(interp, args, i);",
          "1661:             if (!v) continue;",
          "1662:             int len = 0;",
          "",
          "[Removed Lines]",
          "1652:             if (   ((!(interp->log&(1<<JSI_LOG_ERROR))) && jsi_PrefixMatch(argStr, \"ERROR: \"))",
          "1653:                 || ((!(interp->log&(1<<JSI_LOG_WARN))) && jsi_PrefixMatch(argStr, \"WARN: \"))",
          "1654:                 || ((!(interp->log&(1<<JSI_LOG_INFO))) && jsi_PrefixMatch(argStr, \"INFO: \")))",
          "1655:                 goto done;",
          "",
          "[Added Lines]",
          "1665:             if (isbool0 && i==0)",
          "1666:                 continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1723: static Jsi_RC consoleErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1724:     Jsi_Func *funcPtr)",
          "1725: {",
          "1728: }",
          "1730: static Jsi_RC consoleLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1731:     Jsi_Func *funcPtr)",
          "1732: {",
          "1735: }",
          "1736: static Jsi_RC consoleLogPCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1737:     Jsi_Func *funcPtr)",
          "1738: {",
          "1741: }",
          "1742: static Jsi_RC consolePutsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1743:     Jsi_Func *funcPtr)",
          "1744: {",
          "1745:     jsi_LogOptions lo = {};",
          "1747: }",
          "1749: #define FN_puts JSI_INFO(\"\\",
          "",
          "[Removed Lines]",
          "1726:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1727:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", conLog, 1);",
          "1733:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1734:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog, 1);",
          "1739:     int conLog = ((interp->log&jsi_LogDefMaskVal)==jsi_LogDefMaskVal);",
          "1740:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, conLog, 2);",
          "1746:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "",
          "[Added Lines]",
          "1733:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 1);",
          "1739:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, 1);",
          "1744:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, NULL, 2);",
          "1750:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1752:     Jsi_Func *funcPtr)",
          "1753: {",
          "1754:     jsi_LogOptions lo = {};",
          "1756: }",
          "1758: static Jsi_RC SysLogCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1759:     Jsi_Func *funcPtr)",
          "1760: {",
          "1762: }",
          "1764: typedef struct {",
          "",
          "[Removed Lines]",
          "1755:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0, 0);",
          "1761:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 0, 1);",
          "",
          "[Added Lines]",
          "1759:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, (interp->tracePuts?&interp->logOpts:&lo), NULL, 0);",
          "1765:     return SysPutsCmd_(interp, args, _this, ret, funcPtr, 0, &interp->logOpts, NULL, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1791:             logmask |= fp->filePtr->pkg->logmask;",
          "1792:         }",
          "1793:      }",
          "1796:     if (maskidx)",
          "1797:         logflag = logflag&(1<<maskidx);",
          "1798:     return logflag;",
          "",
          "[Removed Lines]",
          "1794:     if (logmask)",
          "1795:         logflag &= ~logmask;",
          "",
          "[Added Lines]",
          "1798:     logflag &= ~logmask;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1877:             jsi_LogOptions lo = {}, *loPtr = ((udata.mode==jsi_AssertModeLog || interp->tracePuts)?&interp->logOpts:&lo);",
          "1878:             Jsi_DSInit(&dStr);",
          "1879:             const char *imsg = Jsi_DSAppend(&dStr, msg, NULL);",
          "1881:             Jsi_DSFree(&dStr);",
          "1882:         } else",
          "1883:             rv = Jsi_LogError(\"%s\", msg);",
          "",
          "[Removed Lines]",
          "1880:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0, 0);",
          "",
          "[Added Lines]",
          "1883:             SysPutsCmd_(interp, NULL, _this, ret, funcPtr, !udata.noStderr, loPtr, imsg, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4619:     }",
          "4620:     return \"\";",
          "4621: }",
          "4653: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4654:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "4623:     Jsi_Value *v2 = Jsi_ValueObjLookup(interp, v1, name, 0);",
          "4624:     if (v2 && Jsi_ValueIsFalse(interp, v2)) return true;",
          "4625:     return false;",
          "4626: }",
          "4628: static bool jsi_ModLogEnabled(Jsi_Interp *interp, Jsi_Value *v1, const char *name) {",
          "4629:     jsi_Frame *fptr = interp->framePtr;",
          "4630:     Jsi_Value *v2 = Jsi_ValueObjLookup(interp, v1, name, 0);",
          "4631:     if (v2 && Jsi_ValueIsTrue(interp, v2)) return true;",
          "4632: #ifndef JSI_OMIT_INTERP_ENV",
          "4633:     const char *fname = fptr->funcName;",
          "4634:     if (!fname) return false;",
          "4635:     const char *cp;",
          "4636:     static int isinit = 0;",
          "4637:     static const char *ce = NULL;",
          "4638:     if (!isinit) {",
          "4639:         isinit = 1;",
          "4640:         ce = getenv(\"JSI_PARSEOPTS\");",
          "4641:     }",
          "4642:     if (!ce) return false;",
          "4643:     int len = Jsi_Strlen(fname);",
          "4644:     cp = Jsi_Strstr(ce, fname);",
          "4645:     if (!cp || cp[len]!='=') return false;",
          "4646:     char buf[JSI_BUFSIZ];",
          "4647:     snprintf(buf, sizeof(buf), \"%s=%s\", fname, name);",
          "4648:     return (Jsi_Strstr(ce, buf) != NULL);",
          "4649: #endif",
          "4650:     return false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4823:                  }",
          "4824:             }",
          "4825:         }",
          "4856:     }",
          "4857:     return rc;",
          "4858: }",
          "",
          "[Removed Lines]",
          "4828:         if (mo && mo->name) { \\",
          "4829:             evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_##lname);\\",
          "4830:         } else if ((vlv = Jsi_ValueObjLookup(interp, v1, #name, 0))) { \\",
          "4831:              if (Jsi_ValueIsFalse(interp, vlv)) { \\",
          "4832:                  puts(\"LOGMASK\"); \\",
          "4833:                  evfunc->callflags.bits.nologFlag |= (1<<jsi_Oplf_##lname); \\",
          "4834:              } else \\",
          "4835:                 evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_##lname);\\",
          "4836:         }",
          "4837:         jsiModLogCheck(Debug, debug)",
          "4838:         jsiModLogCheck(Trace, trace)",
          "4842:             evfunc->callflags.bits.nologFlag |= (1<<jsi_Oplf_debug);",
          "4843:         } else if (jsi_ModLogEnabled(interp, v1, \"Debug\") || (mo && mo->Debug)) {",
          "4845:             cptr->logflag |= (1<<jsi_Oplf_debug);",
          "4846:             evfunc->callflags.bits.logFlag |= (1<<jsi_Oplf_debug);",
          "4847:         }",
          "4848:         if (jsi_ModLogEnabled(interp, v1, \"Trace\") || (mo && mo->Trace)) {",
          "4850:             cptr->logflag |= (1<<jsi_Oplf_trace);",
          "4851:         }",
          "4852:         if (jsi_ModLogEnabled(interp, v1, \"Test\") || (mo && mo->Test)) {",
          "4854:             cptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4955: }",
          "4957: static Jsi_RC SysLogDebugCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4959: static Jsi_RC SysLogTraceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4961: static Jsi_RC SysLogTestCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4963: static Jsi_RC SysLogInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4965: static Jsi_RC SysLogWarnCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4967: static Jsi_RC SysLogErrorCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4971: static Jsi_CmdSpec utilCmds[] = {",
          "",
          "[Removed Lines]",
          "4958: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3, 2); }",
          "4960: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3, 2); }",
          "4962: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3, 2); }",
          "4964: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3, 2); }",
          "4966: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3, 2); }",
          "4968: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3, 2); }",
          "",
          "[Added Lines]",
          "4901: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"DEBUG: \", 3); }",
          "4903: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TRACE: \", 3); }",
          "4905: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"TEST: \", 3); }",
          "4907: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"INFO: \", 3); }",
          "4909: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"WARN: \", 3); }",
          "4911: {  return SysPutsCmd_(interp, args, _this, ret, funcPtr, 1, &interp->logOpts, \"ERROR: \", 3); }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define _jsi_THIS (interp->Obj_this)",
          "13: #define _jsi_THISIDX(s) interp->Obj_this[s]",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "",
          "[Removed Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "",
          "[Added Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { return Jsi_LogError(\"Eval error: %s\", str); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348: }",
          "352: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "353:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "",
          "[Removed Lines]",
          "350: #define JSI_DO_THROW(nam) if (jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "",
          "[Added Lines]",
          "350: #define JSI_DO_THROW(nam) if ((rc=jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam)) != JSI_OK) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "412:     }",
          "413:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "415:         const char *fn = ip->filePtr->fileName,  *cp = Jsi_Strrchr(fn, '/');",
          "416:         if (cp) fn = cp+1;",
          "417:         Jsi_Printf(interp, jsi_Stderr, \", %s:%d\", fn, ip->Line);",
          "",
          "[Removed Lines]",
          "414:     if (ip->filePtr->fileName[0]) {",
          "",
          "[Added Lines]",
          "414:     if (ip->filePtr && ip->filePtr->fileName[0]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1989:                 Jsi_LogBug(\"invalid op ceod: %d\", ip->op);",
          "1990: #endif",
          "1991:         }",
          "1992:         lop = plop;",
          "1993:         ip++;",
          "1994:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1992:         if (rc == JSI_ERROR) {",
          "1993:             JSI_DO_THROW(\"error\");",
          "1994:             rc = JSI_OK;",
          "1995:         }",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     Jsi_Chan *ch = NULL;",
          "437:     void *data;",
          "438:     int fnl = 0;",
          "439:     const char *fileName = Jsi_ValueString(interp, file, &fnl), *oldFN = fileName;",
          "440:     if (!fileName || !fnl) {",
          "441:         Jsi_LogError(\"expected string filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     char pbuf[FILENAME_MAX];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518:         else",
          "519:             Jsi_LogError(\"File open failed '%s'\", fileName);",
          "520:     } else {",
          "525:         }",
          "526:         FILE *fp = fopen(fileName, Mode);",
          "527:         fsPtr = &jsiFilesystem;",
          "",
          "[Removed Lines]",
          "521:         if (interp->isSafe && ((rc && Jsi_InterpAccess(interp, file, JSI_INTACCESS_CREATE) != JSI_OK)",
          "522:         || Jsi_InterpAccess(interp, file, aflag) != JSI_OK)) {",
          "523:             Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "524:             goto done;",
          "",
          "[Added Lines]",
          "522:         if (interp->isSafe) {",
          "523:             if ((rc && Jsi_InterpAccess(interp, file, JSI_INTACCESS_CREATE) != JSI_OK)",
          "524:             || (Jsi_InterpAccess(interp, file, aflag) != JSI_OK",
          "525:                 && (aflag || !interp->opts.argv[0] || Jsi_Strcmp(fileName, Jsi_FileRealpathStr(interp, interp->opts.argv[0], pbuf))))",
          "526:             ) {",
          "527:                 Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "528:                 goto done;",
          "529:             }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA",
          "260: } jsi_Sig;",
          "264: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "265: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "263: #define jsi_LogDefMaskVal (uint)~((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "263: #define jsi_LogDefVal (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1137:     jsi_SubOptions subOpts;",
          "1138:     bool isInteractive;",
          "1139:     const char *confArgs;",
          "1140:     Jsi_Value *stdinStr;",
          "1141:     Jsi_Value *stdoutStr;",
          "1142:     Jsi_TypeCheck typeCheck;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1140:     const char *lockDown;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1190:     Jsi_Value *callee;",
          "1191:     jsi_Pstate *ps, *parsePs;",
          "1192:     Jsi_Value *argv0;",
          "1193:     Jsi_Value *args;",
          "1194:     Jsi_Value *console;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193:     const char *Argv0;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "98:     JSI_OPT(FUNC,  Jsi_Interp, jsppCallback,.help=\"Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number)\"),",
          "99:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
          "100:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
          "101:     JSI_OPT(CUSTOM,Jsi_Interp, log,         .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     JSI_OPT(STRKEY,Jsi_Interp, lockDown,    .help=\"Directory to Safe-lockdown interpreter to\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:         dohelp:",
          "772:         puts(\"USAGE:\\n  jsish [PREFIX-OPTS] [COMMAND-OPTS|FILE] ...\\n\"",
          "773:           \"\\nPREFIX-OPTS:\\n\"",
          "783:           \"\\nCOMMAND-OPTS:\\n\"",
          "784:           \"  -a\\t\\tArchive: mount an archive (zip, sqlar or fossil repo) and run module.\\n\"",
          "785:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "786:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "788:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "789:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "790:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "",
          "[Removed Lines]",
          "774:           \"  --C FILE\\tOption file of config options.\\n\"",
          "775:           \"  --F\\t\\tTrace all function calls and returns.\\n\"",
          "776:           \"  --I OPT=VAL\\tInterp option bits: equivalent to Interp.conf({OPT:VAL}).\\n\"",
          "777:           \"  --L OPT\\tLogging bits: equivalent to Interp.conf({log:'XXX'})..\\n\"",
          "778:           \"  --S PATH\\tSet safeMode to \\\"lockdown\\\" using PATH for safe(Read/Write)Dirs.\\n\"",
          "779:           \"  --T OPT\\tTypechecking bits: equivalent to Interp.conf({typeCheck:'XXX'})..\\n\"",
          "780:           \"  --U\\t\\tDisplay unittest output, minus pass/fail compare.\\n\"",
          "781:           \"  --V\\t\\tSame as --U, but adds file and line number to output.\\n\"",
          "782:           \"  --X OPT\\tTracing bits: equivalent to Interp.conf({traceCall:'XXX'})..\\n\"",
          "787:           \"  -e CODE ...\\tEvaluate javascript CODE.\\n\"",
          "",
          "[Added Lines]",
          "775:           \"  --E CODE\\tJavascript to evaluate before program starts\\n\"",
          "776:           \"  --I OPT=VAL\\tInterp option bits: equivalent to Interp.conf({OPT:VAL}); VAL defaults to true.\\n\"",
          "781:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:                 rc = Jsi_EvalString(interp, \"moduleRun('Zip');\", JSI_EVAL_ISMAIN);",
          "886:                 break;",
          "887:             default:",
          "890:                 return jsi_DoExit(interp, 1);",
          "891:         }",
          "892:     } else {",
          "",
          "[Removed Lines]",
          "888:                 puts(\"usage: jsish [  --C FILE | --I OPT:VAL | --L OPT | --T OPT | --X OPT | --S PATH | --U | --V | --F ] | -e STRING |\\n\\t\"",
          "889:                 \"| -a | -c | -d | -D | -h | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "[Added Lines]",
          "882:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL ] \\n\\t\"",
          "883:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1056:     return rc;",
          "1057: }",
          "1059: static Jsi_Interp* jsi_InterpNew(Jsi_Interp *parent, Jsi_Value *opts, Jsi_InterpOpts *iopts)",
          "1060: {",
          "1061:     Jsi_Interp* interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1053: static void jsi_UnitTestSetup(Jsi_Interp *interp)  {",
          "1054:     if (interp->unitTest&2) {",
          "1055:         interp->logOpts.before = 1;",
          "1056:         interp->logOpts.full = 1;",
          "1057:         interp->tracePuts = 1;",
          "1058:         interp->noStderr = 1;",
          "1059:     }",
          "1060:     if (interp->unitTest&1)",
          "1061:         interp->log |= JSI_LOG_ASSERT;",
          "1062:     if ((interp->unitTest&3) == 3)",
          "1063:         interp->tracePuts = 1;",
          "1064: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1103:     interp->logOpts.func = 1;",
          "1104:     interp->logOpts.before = 1;",
          "1105:     interp->typeCheck.strict = 1;",
          "1107:     int argc = interp->opts.argc;",
          "1108:     char **argv = interp->opts.argv;",
          "1109:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1106:     interp->log = jsi_LogDefMaskVal;",
          "",
          "[Added Lines]",
          "1113:     interp->log = ~jsi_LogDefVal;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1148:             break;",
          "1149:         else {",
          "1150:             switch (aio[2]) {",
          "1154:                     continue;",
          "1155:                 case 'I': {",
          "1156:                     const char *aio2 = argv[iocnt+1];",
          "",
          "[Removed Lines]",
          "1151:                 case 'T': case 'S': case 'C': case 'L': case 'X':",
          "1152:                     continue;",
          "1153:                 case 'F': case 'U': case 'V':  iocnt--;",
          "",
          "[Added Lines]",
          "1158:                 case 'E':",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1219:             break;",
          "1220:         else {",
          "1221:             switch (aio[2]) {",
          "1288:                     interp->iskips+=2;",
          "1289:                     continue;",
          "1290:                 }",
          "",
          "[Removed Lines]",
          "1222:                 case 'F':",
          "1223:                     interp->traceCall |= (jsi_callTraceFuncs |jsi_callTraceArgs |jsi_callTraceReturn | jsi_callTraceBefore | jsi_callTraceFullPath);",
          "1224:                     iocnt--;",
          "1225:                     interp->iskips++;",
          "1226:                     continue;",
          "1227:                 case 'U':",
          "1228:                     interp->log |= JSI_LOG_ASSERT;",
          "1229:                     interp->unitTest = 1;",
          "1230:                     iocnt--;",
          "1231:                     interp->iskips++;",
          "1232:                     continue;",
          "1233:                 case 'V':",
          "1234:                     interp->log |= JSI_LOG_ASSERT;",
          "1235:                     interp->unitTest = 5;",
          "1236:                     interp->tracePuts = 1;",
          "1237:                     iocnt--;",
          "1238:                     interp->iskips++;",
          "1239:                     continue;",
          "1240:                 case 'C':",
          "1241:                     if (interp->confFile)",
          "1242:                        Jsi_LogWarn(\"overriding confFile: %s\", interp->confFile);",
          "1243:                     interp->confFile = argv[iocnt+1];",
          "1244:                     interp->iskips+=2;",
          "1245:                     continue;",
          "1246:                 case 'S': {",
          "1247:                     struct stat sb;",
          "1248:                     const char* path = argv[iocnt+1]; //TODO: convert to Jsi_Value first?",
          "1249:                     if (!path || stat(path, &sb)",
          "1250:                         || !((S_ISREG(sb.st_mode) && !access(path, W_OK)) || (S_ISDIR(sb.st_mode) && !access(path, X_OK)))) {",
          "1251:                         Jsi_LogError(\"Lockdown path must exist and be a writable file or executable dir: %s\", path);",
          "1252:                         Jsi_InterpDelete(interp);",
          "1253:                         return NULL;",
          "1254:                     }",
          "1255:                     interp->isSafe = true;",
          "1256:                     interp->safeMode = jsi_safe_Lockdown;",
          "1257:                     if (interp->safeWriteDirs) {",
          "1258:                         Jsi_LogWarn(\"Overriding safeWriteDirs\");",
          "1259:                         Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1260:                     }",
          "1261:                     const char *vda[2] = {};",
          "1262:                     char npath[PATH_MAX];",
          "1263:                     vda[0] = Jsi_FileRealpathStr(interp, path, npath);",
          "1264:                     interp->safeWriteDirs = Jsi_ValueNewArray(interp, vda, 1);",
          "1265:                     Jsi_IncrRefCount(interp, interp->safeWriteDirs);",
          "1266:                     if (!interp->safeReadDirs) {",
          "1267:                         interp->safeReadDirs = interp->safeWriteDirs;",
          "1268:                         Jsi_IncrRefCount(interp, interp->safeReadDirs);",
          "1269:                     }",
          "1270:                     interp->iskips+=2;",
          "1271:                     continue;",
          "1272:                 }",
          "1273:                 case 'T': case 'L': case 'X': {",
          "1274:                     Jsi_Value *lv = Jsi_ValueNewStringConst(interp, argv[iocnt+1], -1);",
          "1275:                     Jsi_IncrRefCount(interp, lv);",
          "1276:                     if (aio[2]=='L')",
          "1277:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"log\", lv, 0);",
          "1278:                     else if (aio[2]=='T')",
          "1279:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"typeCheck\", lv, 0);",
          "1280:                     else",
          "1281:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"traceCall\", lv, 0);",
          "1282:                     Jsi_DecrRefCount(interp, lv);",
          "1283:                     if (JSI_OK != rc) {",
          "1285:                         Jsi_InterpDelete(interp);",
          "1286:                         return NULL;",
          "1287:                     }",
          "",
          "[Added Lines]",
          "1228:                 case 'E': {",
          "1229:                     Jsi_DSAppend(&interp->interpEvalQ, argv[iocnt+1], NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1484:     interp->framePtr->ingsc = interp->gsc = jsi_ScopeChainNew(interp, 0);",
          "1493:     if (interp->args && argc) {",
          "1494:         Jsi_LogBug(\"args may not be specified both as options and parameter\");",
          "1495:         Jsi_InterpDelete(interp);",
          "",
          "[Removed Lines]",
          "1487:     if (interp->unitTest&2) {",
          "1488:         interp->logOpts.before = 1;",
          "1489:         interp->logOpts.full = 1;",
          "1490:         interp->tracePuts = 1;",
          "1491:         interp->noStderr = 1;",
          "1492:     }",
          "",
          "[Added Lines]",
          "1429:     jsi_UnitTestSetup(interp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1580:     }",
          "1581: #endif",
          "1582:     Jsi_PkgProvide(interp, \"Jsi\", JSI_VERSION, NULL);",
          "1583:     if (argc > 0) {",
          "1584:         char *ss = argv0;",
          "1585:         char epath[PATH_MAX] = \"\"; // Path of executable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1519:     if (Jsi_DSLength(&interp->interpEvalQ)) {",
          "1520:         rc = Jsi_EvalString(interp, Jsi_DSValue(&interp->interpEvalQ), 0);",
          "1521:         Jsi_DSSetLength(&interp->interpEvalQ, 0);",
          "1522:         if (JSI_OK != rc) {",
          "1523:             Jsi_InterpDelete(interp);",
          "1524:             return NULL;",
          "1525:         }",
          "1526:     }",
          "1527:     if (interp->lockDown) {",
          "1528:         struct stat sb;",
          "1529:         const char* path = interp->lockDown;",
          "1530:         if (!path || stat(path, &sb)",
          "1531:             || !((S_ISREG(sb.st_mode) && !access(path, W_OK)) || (S_ISDIR(sb.st_mode) && !access(path, X_OK)))) {",
          "1532:             Jsi_LogError(\"Lockdown path must exist and be a writable file or executable dir: %s\", path);",
          "1533:             Jsi_InterpDelete(interp);",
          "1534:             return NULL;",
          "1535:         }",
          "1536:         interp->isSafe = true;",
          "1537:         interp->safeMode = jsi_safe_Lockdown;",
          "1538:         if (interp->safeWriteDirs) {",
          "1539:             Jsi_LogWarn(\"Overriding safeWriteDirs\");",
          "1540:             Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1541:         }",
          "1542:         const char *vda[2] = {};",
          "1543:         char npath[PATH_MAX];",
          "1544:         vda[0] = Jsi_FileRealpathStr(interp, path, npath);",
          "1545:         interp->safeWriteDirs = Jsi_ValueNewArray(interp, vda, 1);",
          "1546:         Jsi_IncrRefCount(interp, interp->safeWriteDirs);",
          "1547:         if (!interp->safeReadDirs) {",
          "1548:             interp->safeReadDirs = interp->safeWriteDirs;",
          "1549:             Jsi_IncrRefCount(interp, interp->safeReadDirs);",
          "1550:         }",
          "1551:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2904:             Jsi_DecrRefCount(sinterp, popts);",
          "2905:         Jsi_CleanValue(sinterp, interp, *ret, ret);",
          "2906:     }",
          "2907:     return rc;",
          "2908: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2876:     jsi_UnitTestSetup(sinterp);",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #if JSI__MYSQL==1",
          "4: typedef enum { MYSQL_SIG_DB = 0xbeefdeaa, MYSQL_SIG_FUNC, MYSQL_SIG_EXEC, MYSQL_SIG_STMT } MySql_Sig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #define JSI_EXT_OPTS jdb->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #define JSI_DBQUERY_PRINTF(fmt, ...) fprintf(stderr, fmt, ##__VA_ARGS__)",
          "46: #endif",
          "49:     int init;",
          "56: static Jsi_OptionSpec mydb_ObjCmd_Specs[] =",
          "57: {",
          "62: };",
          "",
          "[Removed Lines]",
          "48: typedef struct mydb_ObjCmd {",
          "52: } mydb_ObjCmd;",
          "54: static mydb_ObjCmd mydbObjCmd = {};",
          "58:     JSI_OPT(INT,   mydb_ObjCmd, init, .help=\"Init counter\"),",
          "59:     JSI_OPT(INT,   mydb_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "60:     JSI_OPT(INT,   mydb_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "61:     JSI_OPT_END(mydb_ObjCmd, .help=\"Options for Sqlite module\")",
          "",
          "[Added Lines]",
          "49: typedef struct mydb_Pkg_Status {",
          "53: } mydb_Pkg_Status;",
          "55: static mydb_Pkg_Status mydb_PkgStatus = {};",
          "59:     JSI_OPT(INT,   mydb_Pkg_Status, init, .help=\"Init counter\"),",
          "60:     JSI_OPT(INT,   mydb_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "61:     JSI_OPT(INT,   mydb_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "62:     JSI_OPT_END(mydb_Pkg_Status, .help=\"Options for Sqlite module\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:     MySql_Sig sig;",
          "193:     Jsi_Value *host;",
          "194:     const char *user;",
          "195:     const char *password;",
          "",
          "[Removed Lines]",
          "192:     mydb_ObjCmd *_;",
          "",
          "[Added Lines]",
          "193:     mydb_Pkg_Status *_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:     Jsi_Value* udata;",
          "225:     Jsi_Value *sslKey, *sslCert, *sslCA, *sslCAPath, *sslCipher;",
          "226:     Jsi_Hash *typeNameHash;",
          "227: } MySqlObj;",
          "229: typedef struct MyDbEvalContext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "401:     if (m == MYSQL_NO_DATA)",
          "402:         return JSI_BREAK;",
          "403:     if (m)",
          "405:     return JSI_OK;",
          "406: }",
          "",
          "[Removed Lines]",
          "404:         return Jsi_LogError(\"fetch failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "406:         return Jsi_LogErrorExt(\"fetch failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:                             const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "575:                             Jsi_DSAppend(&eStr, (n++?\", \":\"\"), key, NULL);",
          "576:                         }",
          "578:                         Jsi_DSFree(&eStr);",
          "579:                     }",
          "580:                     Jsi_DSFree(&tStr);",
          "",
          "[Removed Lines]",
          "577:                         Jsi_LogWarn(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "[Added Lines]",
          "579:                         Jsi_LogWarnExt(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650:     if (!prep) {",
          "651:         myStmt = mysql_stmt_init(jdb->db);",
          "652:         if (!myStmt)",
          "654:         char **paramNames;",
          "655:         int paramCnt;",
          "656:         int namedParams = 0;",
          "",
          "[Removed Lines]",
          "653:             return Jsi_LogError(\"can't get statement: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "655:             return Jsi_LogErrorExt(\"can't get statement: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "662:             Jsi_DSInit(&nsStr);",
          "663:             Jsi_DSInit(&nnStr);",
          "664:             if (MySqlExtractParmNames(jdb, zSql, &nsStr, &nnStr) != JSI_OK)",
          "666:             else if (Jsi_DSLength(&nnStr)) {",
          "667:                 namedParams = 1;",
          "668:                 zSql = Jsi_DSFreeDup(&nsStr);",
          "",
          "[Removed Lines]",
          "665:                 rc = Jsi_LogError(\"parsing names from query: %s\", zSql);",
          "",
          "[Added Lines]",
          "667:                 rc = Jsi_LogErrorExt(\"parsing names from query: %s\", zSql);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "678:         if (mysql_stmt_prepare(myStmt, zSql, Jsi_Strlen(zSql)) )",
          "679:         {",
          "681:             mysql_stmt_close(myStmt);",
          "682:             if (namedParams) {",
          "683:                 Jsi_DSFree(naStr);",
          "",
          "[Removed Lines]",
          "680:             Jsi_LogError(\"error in sql: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "682:             Jsi_LogErrorExt(\"error in sql: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "737: static Jsi_RC mdbEvalPrep(MyDbEvalContext *p) {",
          "738:     MysqlPrep *prep = p->prep;",
          "739:     Jsi_Interp *interp = p->jdb->interp;",
          "740:     Jsi_RC rc = JSI_OK;",
          "741:     if( p->prep==0 ) {",
          "742:         rc = mdbPrepareAndBind(p); //p->jdb, p->zSql, &p->zSql, &p->prep);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "749:         }",
          "750:         if (mysql_stmt_execute(prep->myStmt)) {",
          "751:             Jsi_Interp *interp = p->jdb->interp;",
          "753:         }",
          "754:         if (p->jdb->optPtr->prefetch && mysql_stmt_store_result(prep->myStmt)) {",
          "756:             p->jdb->optPtr->prefetch = 0;",
          "757:         }",
          "758:         MYSQL_RES *res = mysql_stmt_result_metadata(prep->myStmt);",
          "",
          "[Removed Lines]",
          "752:             rc = Jsi_LogError(\"execute failed: %s\", mysql_error(p->jdb->db));",
          "755:             Jsi_LogWarn(\"prefetch failed, disabling: %s\", mysql_error(p->jdb->db));",
          "",
          "[Added Lines]",
          "755:             rc = Jsi_LogErrorExt(\"execute failed: %s\", mysql_error(p->jdb->db));",
          "758:             Jsi_LogWarnExt(\"prefetch failed, disabling: %s\", mysql_error(p->jdb->db));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "929:         tname[0] = 0;",
          "930:         if (zVar == NULL) {",
          "931:             if (!jdb->optPtr || !(apv=jdb->optPtr->values))",
          "933:             if (!(pv =Jsi_ValueArrayIndex(interp, apv, i-1)))",
          "935:         }",
          "936:         else if ((zVar[0]!='$' && zVar[0]!=':' && zVar[0]!='@') )",
          "939:             int zvLen = Jsi_Strlen(zVar);",
          "940:             char *zcp;",
          "",
          "[Removed Lines]",
          "932:                 return Jsi_LogError(\"? bind without values for param %d\", i);",
          "934:                 return Jsi_LogError(\"array element %d missing\", nVar);",
          "937:             return Jsi_LogError(\"can not find bind var %s\", zVar); else {",
          "",
          "[Added Lines]",
          "935:                 return Jsi_LogErrorExt(\"? bind without values for param %d\", i);",
          "937:                 return Jsi_LogErrorExt(\"array element %d missing\", nVar);",
          "940:             return Jsi_LogErrorExt(\"can not find bind var %s\", zVar); else {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "980:         if(!pv ) {",
          "981:             if (!jdb->bindWarn) {",
          "983:                 break;",
          "984:             } else",
          "986:         } else {",
          "987:             if (btype && !Jsi_ValueIsUndef(interp, pv)) {",
          "988:                 int done = 0, match = 1, cast = (jdb->optPtr->typeCheck==mdbTypeCheck_Cast);",
          "",
          "[Removed Lines]",
          "982:                 rc = Jsi_LogError(\"unknown bind param: %s\", zVar);",
          "985:                 Jsi_LogWarn(\"unknown bind param: %s\", zVar);",
          "",
          "[Added Lines]",
          "985:                 rc = Jsi_LogErrorExt(\"unknown bind param: %s\", zVar);",
          "988:                 Jsi_LogWarnExt(\"unknown bind param: %s\", zVar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1039: errout:",
          "1040:                  {",
          "1041:                     int ltyp = (jdb->optPtr->typeCheck==mdbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "1043:                     if (ltyp == JSI_LOG_ERROR)",
          "1044:                         return JSI_ERROR;",
          "1045:                 }",
          "",
          "[Removed Lines]",
          "1042:                     Jsi_LogMsg(interp, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "1045:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1090:                     bind->buffer_type = MYSQL_TYPE_BLOB;",
          "1091:             } else {",
          "1092:                 if (!jdb->bindWarn) {",
          "1094:                     break;",
          "1095:                 } else {",
          "1097:                     goto bindnull;",
          "1098:                 }",
          "1099:             }",
          "1100:         }",
          "1101:     }",
          "1102:     if (mysql_stmt_bind_param(prep->myStmt, prep->bindParam))",
          "1104:     return rc;",
          "1105: }",
          "",
          "[Removed Lines]",
          "1093:                     rc = Jsi_LogError(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1096:                     Jsi_LogWarn(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1103:         rc = Jsi_LogError(\"bind failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1096:                     rc = Jsi_LogErrorExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1099:                     Jsi_LogWarnExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "1106:         rc = Jsi_LogErrorExt(\"bind failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1215:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1216:     MysqlPrep *prep = p->prep;",
          "1217:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1218:     Jsi_Interp *interp = p->jdb->interp;",
          "1219:     if (field->isnull)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1220:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1256:             return;",
          "1257:         }",
          "1258:         default:",
          "1261:     }",
          "1262: }",
          "",
          "[Removed Lines]",
          "1259:             Jsi_LogWarn(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "[Added Lines]",
          "1263:             Jsi_LogWarnExt(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1265: static Jsi_Value* mdbEvalSetColumnValue(MyDbEvalContext *p, int iCol, Jsi_Value **val) {",
          "1266:     Jsi_Interp *interp = p->jdb->interp;",
          "1267:     MysqlPrep *prep = p->prep;",
          "1268:     SqlFieldResults *field = prep->fieldResult+iCol;",
          "1269:     if (field->isnull)",
          "1270:         return Jsi_ValueMakeNull(interp, val);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1272:     MySqlObj *jdb = p->jdb;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1294:         case JSI_OPTION_DOUBLE:",
          "1295:              return Jsi_ValueMakeNumber(interp, val, (Jsi_Number)field->buffer.vdouble);",
          "1296:         default:",
          "1298:     }",
          "1299:     return Jsi_ValueNew1(interp);",
          "1300: }",
          "",
          "[Removed Lines]",
          "1297:             Jsi_LogWarn(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "[Added Lines]",
          "1302:             Jsi_LogWarnExt(\"unknown type: %d\", field->jsiTypeMap);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1347: {",
          "1348:     MySqlObj *jdb = (MySqlObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1349:     if (!jdb) {",
          "1351:         return NULL;",
          "1352:     }",
          "1353:     if (!jdb->db)",
          "1354:     {",
          "1356:         return NULL;",
          "1357:     }",
          "1358:     return jdb;",
          "",
          "[Removed Lines]",
          "1350:         Jsi_LogError(\"MySql call to a non-mysql object\");",
          "1355:         Jsi_LogError(\"MySql db is closed\");",
          "",
          "[Added Lines]",
          "1355:         Jsi_LogErrorExt(\"MySql call to a non-mysql object\");",
          "1360:         Jsi_LogErrorExt(\"MySql db is closed\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1414:     mysql_close(jdb->db);",
          "1415:     jdb->db = mysql_init(NULL);",
          "1416:     if (!mdbConnect(interp, jdb))",
          "1418:     return JSI_OK;",
          "1419: }",
          "",
          "[Removed Lines]",
          "1417:         return Jsi_LogError(\"reconnect failed: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1422:         return Jsi_LogErrorExt(\"reconnect failed: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1430:     Jsi_RC rc = JSI_OK;",
          "1431:     const char *zSql = Jsi_ValueArrayIndexToStr(interp, args, 0, &zLen);",
          "1433:     if (mysql_real_query(jdb->db, zSql, zLen))",
          "1435:     else if (jdb->enableMulti) {",
          "1436:         MYSQL_RES *results;",
          "1437:         int sr = mysql_next_result(jdb->db);",
          "",
          "[Removed Lines]",
          "1434:         rc = Jsi_LogError(\"mysql error: %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "1438:     Jsi_LogTraceExt(\"MYSQL-EVAL: %s\", zSql);",
          "1440:         rc = Jsi_LogErrorExt(\"mysql error: %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1594:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "1595:             isopts = 1;",
          "1596:         else  {",
          "1598:             goto bail;",
          "1599:         }",
          "1600:     }",
          "",
          "[Removed Lines]",
          "1597:             rc = Jsi_LogError(\"argument must be null, a function, string, array or options\");",
          "",
          "[Added Lines]",
          "1603:             rc = Jsi_LogErrorExt(\"argument must be null, a function, string, array or options\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1611:         char *cdata = (char*)jdb->queryOpts.CData;",
          "1612:         MySqlObjMultipleBind* copts = Jsi_CarrayLookup(interp, cdata);",
          "1613:         if (!copts)",
          "1615:         int n = MySqlObjQuery(jdb, copts->opts, copts->data, copts->numData, zSql, copts->flags);",
          "1616:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "1617:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "1614:             return Jsi_LogError(\"unknown CData option: %s\", jdb->queryOpts.CData);",
          "",
          "[Added Lines]",
          "1620:             return Jsi_LogErrorExt(\"unknown CData option: %s\", jdb->queryOpts.CData);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1625:         if (opts.obj.name)",
          "1626:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "1627:         else",
          "1629:         goto bail;",
          "1630:     }",
          "1631:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "1628:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "1634:             rc = Jsi_LogErrorExt(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1657:             goto bail;",
          "1658:         }",
          "1659:     }",
          "1660:     if (opts.mode == _mdb_EF_NONE)",
          "1661:         goto bail;",
          "1662:     if (callback) {",
          "1663:         sEval.tocall = callback;",
          "1664:         if (opts.mode != _mdb_EF_ROWS)",
          "1666:         else",
          "1667:             rc = mdbEvalCallCmd(&sEval, interp, JSI_OK);",
          "1668:         goto bail;",
          "",
          "[Removed Lines]",
          "1665:             rc = Jsi_LogError(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "[Added Lines]",
          "1666:     Jsi_LogTraceExt(\"MYSQL-QUERY: %s\", zSql);",
          "1672:             rc = Jsi_LogErrorExt(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2257:     jdb->maxStmts = oldMax;",
          "2258:     Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)mysql_reset_connection(jdb->db));",
          "2259: #else",
          "2261: #endif",
          "2262:     return JSI_OK;",
          "2263: }",
          "",
          "[Removed Lines]",
          "2260:     Jsi_LogWarn(\"mysql reset unavailable: requires version 5.7.3+\");",
          "",
          "[Added Lines]",
          "2267:     Jsi_LogWarnExt(\"mysql reset unavailable: requires version 5.7.3+\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2274:     if (val)",
          "2275:         Jsi_ValueGetBoolean(interp, val, &noErr);",
          "2276:     if (n && noErr==0)",
          "2278:     Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "2280:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2277:         return Jsi_LogError(\"ping failed: (%d) %s\", n, mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "2284:         return Jsi_LogErrorExt(\"ping failed: (%d) %s\", n, mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2387:     jdb = (MySqlObj*)Jsi_Calloc(1, sizeof(*jdb));",
          "2388:     SQLSIGINIT(jdb, DB);",
          "2389:     const char *groupname = \"mysqljsi\";",
          "2391:     jdb->_->newCnt++;",
          "2392:     jdb->_->activeCnt++;",
          "",
          "[Removed Lines]",
          "2390:     jdb->_ = &mydbObjCmd;",
          "",
          "[Added Lines]",
          "2397:     jdb->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "2398:     jdb->_ = &mydb_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2400:         mysqlObjFree(interp, jdb);",
          "2401:         return JSI_ERROR;",
          "2402:     }",
          "2403:     if (!jdb->udata) {",
          "2404:         jdb->udata = Jsi_ValueNewObj(interp, NULL);",
          "2405:         Jsi_IncrRefCount(interp, jdb->udata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2411:     Jsi_LogDebugExt(\"Starting MyDB\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2429: #endif",
          "2431:     if (!mdbConnect(interp, jdb)) {",
          "2433:         mysqlObjFree(interp, jdb);",
          "2434:         return JSI_ERROR;",
          "2435:     }",
          "2437:     if (jdb->enableMulti) {",
          "2438:         if (mysql_set_server_option(jdb->db, MYSQL_OPTION_MULTI_STATEMENTS_ON))",
          "2440:     }",
          "2442:     Jsi_Value *toacc = NULL;",
          "",
          "[Removed Lines]",
          "2432:         Jsi_LogError(\"connect failed %s\", mysql_error(jdb->db));",
          "2439:             Jsi_LogWarn(\"multi on failed %s\", mysql_error(jdb->db));",
          "",
          "[Added Lines]",
          "2441:         Jsi_LogErrorExt(\"connect failed %s\", mysql_error(jdb->db));",
          "2448:             Jsi_LogWarnExt(\"multi on failed %s\", mysql_error(jdb->db));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2474: Jsi_RC Jsi_InitMySql(Jsi_Interp *interp, int release)",
          "2475: {",
          "2476:     if (release) {",
          "2478:             mysql_library_end();",
          "2479:         return Jsi_DoneMySql(interp);",
          "2480:     }",
          "",
          "[Removed Lines]",
          "2477:         if (!--mydbObjCmd.init)",
          "",
          "[Added Lines]",
          "2486:         if (!--mydb_PkgStatus.init)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2484:     return JSI_ERROR;",
          "2485: #endif",
          "2486: #ifndef JSI_OMIT_THREADS",
          "2488:         return Jsi_LogError(\"failed to initialize MySQL library\\n\");",
          "2489: #else",
          "2491: #endif",
          "2493:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "2494:     Jsi_JSONParseFmt(interp, &info, \"{pkgVer:%d}\", MYSQL_VERSION_ID);",
          "2496:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"MySql\", 1.1, Jsi_InitMySql, &dbPkgOpts);",
          "2497:     Jsi_DecrRefCount(interp, info);",
          "2498:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2487:     if (mydbObjCmd.init == 0 && mysql_library_init(0, NULL, NULL))",
          "2490:     return Jsi_LogError(\"Threads required for mysql\");",
          "2495:     Jsi_PkgOpts dbPkgOpts = { mydb_ObjCmd_Specs, &mydbObjCmd, mysqlCmds, info};",
          "",
          "[Added Lines]",
          "2496:     if (mydb_PkgStatus.init == 0 && mysql_library_init(0, NULL, NULL))",
          "2499:     return Jsi_LogErrorExt(\"Threads required for mysql\");",
          "2504:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds, .info=info};",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2502:     else if (!Jsi_CommandCreateSpecs(interp, mysqlobject.name, mysqlCmds, dbSys, JSI_CMDSPEC_ISOBJ))",
          "2503:         rc = JSI_ERROR;",
          "2504:     if (rc == JSI_OK)",
          "2506:     else",
          "2507:         mysql_library_end();",
          "2508:     return rc;",
          "2509: }",
          "2511: #endif",
          "",
          "[Removed Lines]",
          "2505:         mydbObjCmd.init++;",
          "",
          "[Added Lines]",
          "2514:         mydb_PkgStatus.init++;",
          "2520: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define JSI_SQLITE_DB_VFS \"SQLITE_DB_VFS\"",
          "3: #ifndef JSI_AMALGAMATION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI_EXT_OPTS db->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: typedef struct jsi_DbVfs {",
          "15:     int sig;",
          "18:     Jsi_Db* (*dbNew)(const char *zFile, int inFlags /* JSI_DBI_* */);",
          "19: } jsi_DbVfs;",
          "",
          "[Removed Lines]",
          "16:     int (*dbcQuery)(Jsi_Db *jdb, Jsi_CDataDb *dbc, const char *query);",
          "17:     void *(*dbHandle)(Jsi_Interp *interp, Jsi_Db* jdb);",
          "",
          "[Added Lines]",
          "17:     int (*dbcQuery)(Jsi_Db *db, Jsi_CDataDb *dbc, const char *query);",
          "18:     void *(*dbHandle)(Jsi_Interp *interp, Jsi_Db* db);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102: # define UTF_TRANSLATION_NEEDED 1",
          "103: #endif",
          "110: #ifndef JSI_LITE_ONLY",
          "113: static Jsi_OptionSpec db_ObjCmd_Specs[] =",
          "114: {",
          "118: };",
          "119: #endif",
          "",
          "[Removed Lines]",
          "105: typedef struct db_ObjCmd {",
          "108: } db_ObjCmd;",
          "111: static db_ObjCmd dbObjCmd = {};",
          "115:     JSI_OPT(INT,   db_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "116:     JSI_OPT(INT,   db_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "117:     JSI_OPT_END(db_ObjCmd, .help=\"Options for Sqlite module\")",
          "",
          "[Added Lines]",
          "106: typedef struct {",
          "109: } db_Pkg_Status;",
          "112: static db_Pkg_Status db_PkgStatus = {};",
          "116:     JSI_OPT(INT,   db_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "117:     JSI_OPT(INT,   db_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "118:     JSI_OPT_END(db_Pkg_Status, .help=\"Options for Sqlite module\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     Sqlite_Sig sig;",
          "147: };",
          "",
          "[Removed Lines]",
          "145:     Jsi_Db      *jdb;",
          "",
          "[Added Lines]",
          "146:     Jsi_Db      *db;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:     Sqlite_Sig sig;",
          "",
          "[Removed Lines]",
          "210:     db_ObjCmd *_;              // Module data.",
          "",
          "[Added Lines]",
          "211:     db_Pkg_Status *_;              // Module data.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:     Jsi_DString name;",
          "257:     Jsi_Hash *typeNameHash;",
          "258:     Jsi_Hash *regexpHash;",
          "259: } Jsi_Db;",
          "261: static const int jsi_DbPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "368: #endif",
          "373:     Jsi_HashSet(hPtr, (void*)\"blob\", (void*)JSI_OPTION_STRBUF);",
          "374:     Jsi_HashSet(hPtr, (void*)\"string\", (void*)JSI_OPTION_STRING);",
          "375:     Jsi_HashSet(hPtr, (void*)\"double\", (void*)JSI_OPTION_DOUBLE);",
          "",
          "[Removed Lines]",
          "370: void dbTypeNameHashInit(Jsi_Db *jdb) {",
          "371:     Jsi_Interp *interp = jdb->interp;",
          "372:     Jsi_Hash *hPtr = jdb->typeNameHash = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Added Lines]",
          "372: void dbTypeNameHashInit(Jsi_Db *db) {",
          "373:     Jsi_Interp *interp = db->interp;",
          "374:     Jsi_Hash *hPtr = db->typeNameHash = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386: #define SQLITE_OMIT_INCRBLOB",
          "390: {",
          "392:     if (rc == SQLITE_BUSY) {",
          "393:         if (erc) *erc = -2;",
          "394:     } else if (rc != SQLITE_OK) {",
          "",
          "[Removed Lines]",
          "389: static int dbExecCmd(Jsi_Db *jdb, const char *zQuery, int *erc)",
          "391:     int rc = sqlite3_exec(jdb->db, zQuery, 0, 0, 0);",
          "",
          "[Added Lines]",
          "391: static int dbExecCmd(Jsi_Db *db, const char *zQuery, int *erc)",
          "393:     int rc = sqlite3_exec(db->db, zQuery, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "475: }",
          "477: #ifndef JSI_LITE_ONLY",
          "479: #endif",
          "480: static void dbReleaseColumnNames(DbEvalContext *p);",
          "485: static Jsi_RC dbEvalStepSub(DbEvalContext *p, int release, int *erc) {",
          "486:     int rcs;",
          "489:     JSI_NOTUSED(interp);",
          "490:     SqlPreparedStmt *pPreStmt = p->pPreStmt;",
          "491:     SQLSIGASSERT(pPreStmt, STMT);",
          "492:     sqlite3_stmt *pStmt = pPreStmt->pStmt;",
          "495:         JSI_DBQUERY_PRINTF( \"DEBUG: step: %s\\n\", pPreStmt->zSql);",
          "496:     rcs = sqlite3_step(pStmt);",
          "497:     if( rcs==SQLITE_BUSY ) {",
          "",
          "[Removed Lines]",
          "478: static Jsi_RC dbPrepareAndBind( Jsi_Db *jdb, char const *zIn, char const **pzOut,  SqlPreparedStmt **ppPreStmt );",
          "481: static void dbReleaseStmt( Jsi_Db *jdb, SqlPreparedStmt *pPreStmt, int discard );",
          "487:     Jsi_Db *jdb = p->jdb;",
          "488:     Jsi_Interp *interp = jdb->interp;",
          "494:     if (jdb->debug & TMODE_STEP)",
          "",
          "[Added Lines]",
          "480: static Jsi_RC dbPrepareAndBind( Jsi_Db *db, char const *zIn, char const **pzOut,  SqlPreparedStmt **ppPreStmt );",
          "483: static void dbReleaseStmt( Jsi_Db *db, SqlPreparedStmt *pPreStmt, int discard );",
          "489:     Jsi_Db *db = p->db;",
          "490:     Jsi_Interp *interp = db->interp;",
          "496:     if (db->debug & TMODE_STEP)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "506:     }",
          "507:     rcs = sqlite3_reset(pStmt);",
          "511:     if (release==0 && rcs==SQLITE_OK)",
          "512:         return JSI_BREAK;",
          "513:     dbReleaseColumnNames(p);",
          "",
          "[Removed Lines]",
          "509:     jdb->stepCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_FULLSCAN_STEP,1);",
          "510:     jdb->sortCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_SORT,1);",
          "",
          "[Added Lines]",
          "511:     db->stepCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_FULLSCAN_STEP,1);",
          "512:     db->sortCnt = sqlite3_stmt_status(pStmt,SQLITE_STMTSTATUS_SORT,1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "516:     if( rcs!=SQLITE_OK ) {",
          "521:         return JSI_ERROR;",
          "522:     } else {",
          "524:     }",
          "525:     return JSI_BREAK;",
          "526: }",
          "",
          "[Removed Lines]",
          "519:         Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "520:         dbReleaseStmt(jdb, pPreStmt, 1);",
          "523:         dbReleaseStmt(jdb, pPreStmt, p->nocache);",
          "",
          "[Added Lines]",
          "521:         Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "522:         dbReleaseStmt(db, pPreStmt, 1);",
          "525:         dbReleaseStmt(db, pPreStmt, p->nocache);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "536: ) {",
          "537:     p->dSql = dStr;",
          "538:     p->zSql = Jsi_DSAppend(p->dSql, zSql?zSql:\"\", NULL);",
          "540:     return JSI_OK;",
          "541: }",
          "544: {",
          "545:     if (prep->deleting)",
          "546:         return;",
          "",
          "[Removed Lines]",
          "539:     p->jdb = jdb;",
          "543: static void dbPrepStmtFree( Jsi_Db *jdb, SqlPreparedStmt *prep)",
          "",
          "[Added Lines]",
          "541:     p->db = db;",
          "545: static void dbPrepStmtFree( Jsi_Db *db, SqlPreparedStmt *prep)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "555:     if (prep->elPtr)",
          "556:         Jsi_ListEntryDelete(prep->elPtr);",
          "557:     Jsi_Free( (char*)prep );",
          "559: }",
          "566: {",
          "571:     }",
          "572: }",
          "575: static Jsi_RC dbStmtFreeProc(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *value) {",
          "577:     Jsi_ListEntry *l = (Jsi_ListEntry*)hPtr;",
          "578:     SqlPreparedStmt *prep = (SqlPreparedStmt *)Jsi_ListValueGet(l);",
          "579:     prep->elPtr = NULL;",
          "581:     return JSI_OK;",
          "582: }",
          "",
          "[Removed Lines]",
          "558:     jdb->stmtCacheCnt--;",
          "565: static void dbPrepStmtLimit( Jsi_Db *jdb)",
          "567:     while(jdb->stmtCacheCnt>jdb->stmtCacheMax ) {",
          "568:         Jsi_ListEntry *l = Jsi_ListPopBack(jdb->stmtCache);",
          "569:         dbPrepStmtFree(jdb, (SqlPreparedStmt*)Jsi_ListValueGet(l));",
          "570:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "576:     Jsi_Db *jdb = (Jsi_Db*)interp;",
          "580:     dbPrepStmtFree(jdb, prep);",
          "",
          "[Added Lines]",
          "560:     db->stmtCacheCnt--;",
          "567: static void dbPrepStmtLimit( Jsi_Db *db)",
          "569:     while(db->stmtCacheCnt>db->stmtCacheMax ) {",
          "570:         Jsi_ListEntry *l = Jsi_ListPopBack(db->stmtCache);",
          "571:         dbPrepStmtFree(db, (SqlPreparedStmt*)Jsi_ListValueGet(l));",
          "572:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "578:     Jsi_Db *db = (Jsi_Db*)interp;",
          "582:     dbPrepStmtFree(db, prep);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "592: }",
          "594: #endif",
          "",
          "[Removed Lines]",
          "589: static void dbFlushStmtCache( Jsi_Db *jdb ) {",
          "590:     Jsi_ListClear(jdb->stmtCache);",
          "591:     jdb->stmtCacheCnt = 0;",
          "",
          "[Added Lines]",
          "591: static void dbFlushStmtCache( Jsi_Db *db ) {",
          "592:     Jsi_ListClear(db->stmtCache);",
          "593:     db->stmtCacheCnt = 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "622:     } else {",
          "624:         if (!pPreStmt->elPtr)",
          "626:         else",
          "630:     }",
          "631: }",
          "",
          "[Removed Lines]",
          "619:     if( jdb->stmtCacheMax<=0 || discard ) {",
          "621:         dbPrepStmtFree(jdb, pPreStmt);",
          "625:             pPreStmt->elPtr = Jsi_ListPushFrontNew(jdb->stmtCache, pPreStmt);",
          "627:             Jsi_ListPushFront(jdb->stmtCache, pPreStmt->elPtr);",
          "628:         dbPrepStmtLimit(jdb);",
          "629:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "621:     if( db->stmtCacheMax<=0 || discard ) {",
          "623:         dbPrepStmtFree(db, pPreStmt);",
          "627:             pPreStmt->elPtr = Jsi_ListPushFrontNew(db->stmtCache, pPreStmt);",
          "629:             Jsi_ListPushFront(db->stmtCache, pPreStmt->elPtr);",
          "630:         dbPrepStmtLimit(db);",
          "631:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "682:     Jsi_RC rc = JSI_OK;",
          "684:     JSI_NOTUSED(interp);",
          "",
          "[Removed Lines]",
          "683:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "685:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "690:         zSql++;",
          "691:     }",
          "694:     if (entry && ((pPreStmt = (SqlPreparedStmt*)Jsi_HashValueGet(entry)))) {",
          "697:             JSI_DBQUERY_PRINTF( \"DEBUG: prepare cache-hit: %s\\n\", zSql);",
          "698:         pStmt = pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "693:     Jsi_HashEntry *entry = Jsi_HashEntryFind(jdb->stmtHash, zSql);",
          "696:         if (jdb->debug & TMODE_PREPARE)",
          "",
          "[Added Lines]",
          "695:     Jsi_HashEntry *entry = Jsi_HashEntryFind(db->stmtHash, zSql);",
          "698:         if (db->debug & TMODE_PREPARE)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "708:     }",
          "",
          "[Removed Lines]",
          "705:         Jsi_ListPop(jdb->stmtCache, pPreStmt->elPtr);",
          "706:         jdb->stmtCacheCnt = Jsi_ListSize(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "707:         Jsi_ListPop(db->stmtCache, pPreStmt->elPtr);",
          "708:         db->stmtCacheCnt = Jsi_ListSize(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "712:     if( pPreStmt==0 ) {",
          "713:         int nByte;",
          "718:         if( pStmt==0 ) {",
          "722:                 return JSI_ERROR;",
          "723:             } else {",
          "",
          "[Removed Lines]",
          "715:         if( SQLITE_OK!=sqlite3_prepare_v2(jdb->db, zSql, -1, &pStmt, pzOut) )",
          "717:             return Jsi_LogError(\"PREPARE: %s\", sqlite3_errmsg(jdb->db));",
          "719:             if( SQLITE_OK!=sqlite3_errcode(jdb->db) ) {",
          "721:                 Jsi_LogError(\"PREP: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "717:         if( SQLITE_OK!=sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, pzOut) )",
          "719:             return Jsi_LogErrorExt(\"PREPARE: %s\", sqlite3_errmsg(db->db));",
          "721:             if( SQLITE_OK!=sqlite3_errcode(db->db) ) {",
          "723:                 Jsi_LogErrorExt(\"PREP: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "728:             }",
          "729:         }",
          "732:             JSI_DBQUERY_PRINTF( \"DEBUG: prepare new: %s\\n\", zSql);",
          "733:         assert( pPreStmt==0 );",
          "736:         nByte = sizeof(SqlPreparedStmt); // + nVar*sizeof(Jsi_Obj *);",
          "737:         pPreStmt = (SqlPreparedStmt*)Jsi_Calloc(1, nByte);",
          "738:         pPreStmt->sig = SQLITE_SIG_STMT;",
          "",
          "[Removed Lines]",
          "731:         if (jdb->debug & TMODE_PREPARE)",
          "735:         jdb->stmtCacheCnt++;",
          "",
          "[Added Lines]",
          "733:         if (db->debug & TMODE_PREPARE)",
          "737:         db->stmtCacheCnt++;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "741:         pPreStmt->nSql = (*pzOut - zSql);",
          "742:         pPreStmt->zSql = sqlite3_sql(pStmt);",
          "743:         bool isNew = 0;",
          "745:         if (!isNew)",
          "746:             JSI_DBQUERY_PRINTF( \"sqlite dup stmt entry\");",
          "747:         Jsi_HashValueSet(pPreStmt->entry, pPreStmt);",
          "",
          "[Removed Lines]",
          "744:         pPreStmt->entry = Jsi_HashEntryNew(jdb->stmtHash, zSql, &isNew);",
          "",
          "[Added Lines]",
          "746:         pPreStmt->entry = Jsi_HashEntryNew(db->stmtHash, zSql, &isNew);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "774:     while( p->zSql[0] || p->pPreStmt ) {",
          "775:         Jsi_RC rc;",
          "776:         if( p->pPreStmt==0 ) {",
          "778:             if( rc!=JSI_OK ) return rc;",
          "779:         }",
          "780:         rc = dbEvalStepSub(p, 1, NULL);",
          "",
          "[Removed Lines]",
          "777:             rc = dbPrepareAndBind(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "",
          "[Added Lines]",
          "779:             rc = dbPrepareAndBind(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "786:     return JSI_BREAK;",
          "787: }",
          "790: {",
          "793:     int i, btype = 0, bindArr=0, n;",
          "794:     Jsi_RC rc = JSI_OK;",
          "795:     Jsi_Number r;",
          "",
          "[Removed Lines]",
          "789: static Jsi_RC dbBindStmt(Jsi_Db *jdb, SqlPreparedStmt *prep)",
          "792:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "791: static Jsi_RC dbBindStmt(Jsi_Db *db, SqlPreparedStmt *prep)",
          "794:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "805:         int isInt = 0, isBlob = 0;",
          "806:         const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "807:         if (zVar == NULL) {",
          "810:             if (!(pv =Jsi_ValueArrayIndex(interp, apv, i-1)))",
          "812:         }",
          "813:         else if((zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ) {",
          "814:             int zvLen = Jsi_Strlen(zVar);",
          "",
          "[Removed Lines]",
          "808:             if (!jdb->optPtr || !(apv=jdb->optPtr->values))",
          "809:                 return Jsi_LogError(\"? bind without values for param %d\", i);",
          "811:                 return Jsi_LogError(\"array element %d missing\", nVar);",
          "",
          "[Added Lines]",
          "810:             if (!db->optPtr || !(apv=db->optPtr->values))",
          "811:                 return Jsi_LogErrorExt(\"? bind without values for param %d\", i);",
          "813:                 return Jsi_LogErrorExt(\"array element %d missing\", nVar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "825:                     Jsi_DString tStr = {};",
          "826:                     int tlen = Jsi_Strlen(ttp+1);",
          "827:                     Jsi_DSAppendLen(&tStr, ttp+1, tlen-1);",
          "831:                     int rc = ( htPtr != NULL);",
          "832:                     if (!htPtr) {",
          "833:                         Jsi_DString eStr = {};",
          "834:                         Jsi_HashSearch search;",
          "836:                         int n = 0;",
          "837:                         Jsi_HashEntry *hPtr;",
          "839:                             hPtr != NULL; hPtr = Jsi_HashSearchNext(&search)) {",
          "840:                             const char *key = (char*)Jsi_HashKeyGet(hPtr);",
          "841:                             Jsi_DSAppend(&eStr, (n++?\", \":\"\"), key, NULL);",
          "842:                         }",
          "844:                         Jsi_DSFree(&eStr);",
          "845:                     }",
          "846:                     Jsi_Strcpy(tname, Jsi_DSValue(&tStr));",
          "",
          "[Removed Lines]",
          "828:                     if (!jdb->typeNameHash)",
          "829:                         dbTypeNameHashInit(jdb);",
          "830:                     Jsi_HashEntry *htPtr = Jsi_HashEntryFind(jdb->typeNameHash, Jsi_DSValue(&tStr));",
          "835:                         Jsi_Interp *interp = jdb->interp;",
          "838:                         for (hPtr = Jsi_HashSearchFirst(jdb->typeNameHash, &search);",
          "843:                         Jsi_LogWarn(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "[Added Lines]",
          "830:                     if (!db->typeNameHash)",
          "831:                         dbTypeNameHashInit(db);",
          "832:                     Jsi_HashEntry *htPtr = Jsi_HashEntryFind(db->typeNameHash, Jsi_DSValue(&tStr));",
          "837:                         Jsi_Interp *interp = db->interp;",
          "840:                         for (hPtr = Jsi_HashSearchFirst(db->typeNameHash, &search);",
          "845:                         Jsi_LogWarnExt(\"bind type \\\"%s\\\" is not one of: %s\", Jsi_DSValue(&tStr), Jsi_DSValue(&eStr));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "867:             } else",
          "868:                 pv = Jsi_VarLookup(interp, &zVar[1]);",
          "869:         } else",
          "872:         if(!pv ) {",
          "875:                 rc = JSI_ERROR;",
          "876:                 break;",
          "877:             } else",
          "879:         } else {",
          "881:             if (btype && !Jsi_ValueIsUndef(interp, pv)) {",
          "882:                 switch (btype) {",
          "883:                     case JSI_OPTION_STRBUF:",
          "",
          "[Removed Lines]",
          "870:             return Jsi_LogError(\"can not find bind var %s\", zVar);",
          "873:             if (!jdb->bindWarn) {",
          "874:                 Jsi_LogError(\"unknown bind param: %s\", zVar);",
          "878:                 Jsi_LogWarn(\"unknown bind param: %s\", zVar);",
          "880:             int match = 1, cast = (jdb->optPtr->typeCheck==dbTypeCheck_Cast);",
          "",
          "[Added Lines]",
          "872:             return Jsi_LogErrorExt(\"can not find bind var %s\", zVar);",
          "875:             if (!db->bindWarn) {",
          "876:                 Jsi_LogErrorExt(\"unknown bind param: %s\", zVar);",
          "880:                 Jsi_LogWarnExt(\"unknown bind param: %s\", zVar);",
          "882:             int match = 1, cast = (db->optPtr->typeCheck==dbTypeCheck_Cast);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "920:                         Jsi_LogBug(\"Unhandled bind type: %s = %d\", tname, btype);",
          "921:                 }",
          "922:                 if (cast == 0 && match == 0) {",
          "925:                     if (ltyp == JSI_LOG_ERROR)",
          "926:                         return JSI_ERROR;",
          "927:                 }",
          "",
          "[Removed Lines]",
          "923:                     int ltyp = (jdb->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "924:                     Jsi_LogMsg(interp, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "[Added Lines]",
          "925:                     int ltyp = (db->optPtr->typeCheck==dbTypeCheck_Error?JSI_LOG_ERROR:JSI_LOG_WARN);",
          "926:                     Jsi_LogMsgExt(interp, JSI_EXT_OPTS, ltyp, \"bind param \\\"%s\\\" type is not \\\"%s\\\"\", zVar, tname);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "934:             } else if (Jsi_ValueIsNumber(interp, pv)) {",
          "935:                 Jsi_GetNumberFromValue(interp, pv, &r);",
          "936:                 wv = (Jsi_Wide)r;",
          "938:                     sqlite3_bind_int64(pStmt, i,wv);",
          "939:                 else",
          "940:                     sqlite3_bind_double(pStmt, i,(double)r);",
          "942:                 sqlite3_bind_null(pStmt, i);",
          "943:             } else if (Jsi_ValueIsString(interp, pv)) {",
          "944:                 const char *sstr = Jsi_ValueGetStringLen(interp, pv, &n);",
          "",
          "[Removed Lines]",
          "937:                 if (isInt || (jdb->forceInt && (((Jsi_Number)wv)-r)==0))",
          "941:             } else if (Jsi_ValueIsNull(interp, pv) || (Jsi_ValueIsUndef(interp, pv) && jdb->queryOpts.mapundef)) {",
          "",
          "[Added Lines]",
          "939:                 if (isInt || (db->forceInt && (((Jsi_Number)wv)-r)==0))",
          "943:             } else if (Jsi_ValueIsNull(interp, pv) || (Jsi_ValueIsUndef(interp, pv) && db->queryOpts.mapundef)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "947:                     sqlite3_bind_blob(pStmt, i, (char *)sstr, n, SQLITE_TRANSIENT );",
          "948:                 else",
          "949:                     sqlite3_bind_text(pStmt, i, (char *)sstr, n, SQLITE_TRANSIENT );",
          "951:                 || Jsi_ValueIsObjType(interp, pv, JSI_OT_OBJECT))",
          "952:                 && (((dectyp = sqlite3_column_decltype(pStmt, i))==NULL) ||",
          "953:                     !Jsi_Strncasecmp(dectyp,\"charjson\",8))) {",
          "",
          "[Removed Lines]",
          "950:             } else if (!jdb->noJsonConv && bindArr && ((isArr=Jsi_ValueIsArray(interp, pv))",
          "",
          "[Added Lines]",
          "952:             } else if (!db->noJsonConv && bindArr && ((isArr=Jsi_ValueIsArray(interp, pv))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "958:                     sqlite3_bind_text(pStmt, i, Jsi_DSValue(&jStr), n, SQLITE_TRANSIENT );",
          "959:                     Jsi_DSFree(&jStr);",
          "960:             } else {",
          "963:                     rc = JSI_ERROR;",
          "964:                     break;",
          "965:                 } else",
          "967:                 sqlite3_bind_null(pStmt, i);",
          "968:             }",
          "",
          "[Removed Lines]",
          "961:                 if (!jdb->bindWarn) {",
          "962:                     Jsi_LogError(\"bind param must be string/number/bool/null: %s\", zVar);",
          "966:                     Jsi_LogWarn(\"bind param must be string/number/bool/null: %s\", zVar);",
          "",
          "[Added Lines]",
          "963:                 if (!db->bindWarn) {",
          "964:                     Jsi_LogErrorExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "968:                     Jsi_LogWarnExt(\"bind param must be string/number/bool/null: %s\", zVar);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "973: }",
          "975: static Jsi_RC dbPrepareAndBind(",
          "980: ) {",
          "982:         return JSI_ERROR;",
          "984: }",
          "985: #endif",
          "",
          "[Removed Lines]",
          "981:     if (dbPrepareStmt(jdb, zIn, pzOut, ppPreStmt) != JSI_OK)",
          "983:     return dbBindStmt(jdb, *ppPreStmt);",
          "",
          "[Added Lines]",
          "983:     if (dbPrepareStmt(db, zIn, pzOut, ppPreStmt) != JSI_OK)",
          "985:     return dbBindStmt(db, *ppPreStmt);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "992: static void dbEvalFinalize(DbEvalContext *p) {",
          "995:     if( p->pPreStmt ) {",
          "996:         sqlite3_reset(p->pPreStmt->pStmt);",
          "998:         p->pPreStmt = 0;",
          "999:     }",
          "1000:     if (p->dSql)",
          "",
          "[Removed Lines]",
          "997:         dbReleaseStmt(p->jdb, p->pPreStmt, p->nocache);",
          "",
          "[Added Lines]",
          "999:         dbReleaseStmt(p->db, p->pPreStmt, p->nocache);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1034: {",
          "1037:         JSI_DBQUERY_PRINTF( \"DEBUG: delete\\n\");",
          "1052:         Jsi_DSFree(&pFunc->dScript);",
          "1053:         Jsi_DecrRefCount(interp, pFunc->tocall);",
          "1054:         Jsi_Free((char*)pFunc);",
          "1055:     }",
          "1059:         Jsi_Free((char*)pCollate);",
          "1060:     }",
          "1065: }",
          "1067: static int dbGetIntBool(Jsi_Interp *interp, Jsi_Value* v)",
          "",
          "[Removed Lines]",
          "1033: static void dbDeleteCmd(Jsi_Db *jdb)",
          "1035:     Jsi_Interp *interp = jdb->interp;",
          "1036:     if (jdb->debug & TMODE_DELETE)",
          "1038:     dbFlushStmtCache(jdb);",
          "1039:     if (jdb->stmtHash)",
          "1040:         Jsi_HashDelete(jdb->stmtHash);",
          "1041:     if (jdb->typeNameHash)",
          "1042:         Jsi_HashDelete(jdb->typeNameHash);",
          "1043:     if (jdb->regexpHash)",
          "1044:         Jsi_HashDelete(jdb->regexpHash);",
          "1046:     if (jdb->db) {",
          "1047:         DbClose(jdb->db);",
          "1048:     }",
          "1049:     while( jdb->pFunc ) {",
          "1050:         SqlFunc *pFunc = jdb->pFunc;",
          "1051:         jdb->pFunc = pFunc->pNext;",
          "1056:     while( jdb->pCollate ) {",
          "1057:         SqlCollate *pCollate = jdb->pCollate;",
          "1058:         jdb->pCollate = pCollate->pNext;",
          "1062:     Jsi_OptionsFree(interp, SqlOptions, jdb, 0);",
          "1063:     if (jdb->stmtCache)",
          "1064:         Jsi_ListDelete(jdb->stmtCache);",
          "",
          "[Added Lines]",
          "1035: static void dbDeleteCmd(Jsi_Db *db)",
          "1037:     Jsi_Interp *interp = db->interp;",
          "1038:     if (db->debug & TMODE_DELETE)",
          "1040:     dbFlushStmtCache(db);",
          "1041:     if (db->stmtHash)",
          "1042:         Jsi_HashDelete(db->stmtHash);",
          "1043:     if (db->typeNameHash)",
          "1044:         Jsi_HashDelete(db->typeNameHash);",
          "1045:     if (db->regexpHash)",
          "1046:         Jsi_HashDelete(db->regexpHash);",
          "1048:     if (db->db) {",
          "1049:         DbClose(db->db);",
          "1050:     }",
          "1051:     while( db->pFunc ) {",
          "1052:         SqlFunc *pFunc = db->pFunc;",
          "1053:         db->pFunc = pFunc->pNext;",
          "1058:     while( db->pCollate ) {",
          "1059:         SqlCollate *pCollate = db->pCollate;",
          "1060:         db->pCollate = pCollate->pNext;",
          "1064:     Jsi_OptionsFree(interp, SqlOptions, db, 0);",
          "1065:     if (db->stmtCache)",
          "1066:         Jsi_ListDelete(db->stmtCache);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1087: static int dbBusyHandler(void *cd, int nTries) {",
          "1088:     int rc;",
          "1090:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1094:     items[1] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)nTries);",
          "1095:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1096:     Jsi_IncrRefCount(interp, vpargs);",
          "1097:     ret = Jsi_ValueNew1(interp);",
          "1099:     if( JSI_OK!=rc ) {",
          "1101:         rc = 1;",
          "1102:     } else",
          "1103:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1089:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1091:     Jsi_Interp *interp = jdb->interp;",
          "1093:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1098:     rc = Jsi_FunctionInvoke(interp, jdb->onBusy, vpargs, &ret, NULL);",
          "1100:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1091:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1093:     Jsi_Interp *interp = db->interp;",
          "1095:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1100:     rc = Jsi_FunctionInvoke(interp, db->onBusy, vpargs, &ret, NULL);",
          "1102:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1112: static int dbProgressHandler(void *cd) {",
          "1114:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1118:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1119:     Jsi_IncrRefCount(interp, vpargs);",
          "1120:     ret = Jsi_ValueNew1(interp);",
          "1122:     if( JSI_OK!=rc ) {",
          "1124:         rc = 1;",
          "1125:     } else",
          "1126:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1113:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1115:     Jsi_Interp *interp = jdb->interp;",
          "1117:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1121:     int rc = Jsi_FunctionInvoke(interp, jdb->onProgress, vpargs, &ret, NULL);",
          "1123:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1115:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1117:     Jsi_Interp *interp = db->interp;",
          "1119:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1123:     int rc = Jsi_FunctionInvoke(interp, db->onProgress, vpargs, &ret, NULL);",
          "1125:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1136: static void dbTraceHandler(void *cd, const char *zSql)",
          "1137: {",
          "1138:     int rc;",
          "1140:     Jsi_Value *vpargs, *items[2] = {}, *ret;",
          "1143:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zSql);",
          "1144:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1145:     Jsi_IncrRefCount(interp, vpargs);",
          "1146:     ret = Jsi_ValueNew1(interp);",
          "1148:     Jsi_DecrRefCount(interp, vpargs);",
          "1149:     Jsi_DecrRefCount(interp, ret);",
          "1150:     if (rc != JSI_OK)",
          "1152: }",
          "1158: static void dbProfileHandler(void *cd, const char *zSql, sqlite_uint64 tm) {",
          "1159:     int rc;",
          "1162:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1165:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zSql);",
          "1166:     items[2] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)tm);",
          "1167:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1168:     Jsi_IncrRefCount(interp, vpargs);",
          "1169:     ret = Jsi_ValueNew1(interp);",
          "1171:     Jsi_DecrRefCount(interp, vpargs);",
          "1172:     Jsi_DecrRefCount(interp, ret);",
          "1173:     if (rc != JSI_OK)",
          "1175: }",
          "1183: static int dbCommitHandler(void *cd) {",
          "1184:     int rc = 0;",
          "1187:     Jsi_Value *vpargs, *items[2] = {}, *ret = Jsi_ValueNew1(interp);",
          "1190:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1191:     Jsi_IncrRefCount(interp, vpargs);",
          "1194:         rc = 1;",
          "1195:     } else",
          "1196:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1139:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1141:     Jsi_Interp *interp = jdb->interp;",
          "1142:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1147:     rc = Jsi_FunctionInvoke(interp, jdb->onTrace, vpargs, &ret, NULL);",
          "1151:         jdb->errCnt++;",
          "1160:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1161:     Jsi_Interp *interp = jdb->interp;",
          "1164:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1170:     rc = Jsi_FunctionInvoke(interp, jdb->onProfile, vpargs, &ret, NULL);",
          "1174:         jdb->errCnt++;",
          "1185:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1186:     Jsi_Interp *interp = jdb->interp;",
          "1189:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1192:     if( JSI_OK!=Jsi_FunctionInvoke(interp, jdb->onCommit, NULL, &ret, NULL) ) {",
          "1193:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1141:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1143:     Jsi_Interp *interp = db->interp;",
          "1144:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1149:     rc = Jsi_FunctionInvoke(interp, db->onTrace, vpargs, &ret, NULL);",
          "1153:         db->errCnt++;",
          "1162:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1163:     Jsi_Interp *interp = db->interp;",
          "1166:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1172:     rc = Jsi_FunctionInvoke(interp, db->onProfile, vpargs, &ret, NULL);",
          "1176:         db->errCnt++;",
          "1187:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1188:     Jsi_Interp *interp = db->interp;",
          "1191:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1194:     if( JSI_OK!=Jsi_FunctionInvoke(interp, db->onCommit, NULL, &ret, NULL) ) {",
          "1195:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1206:     int rc;",
          "1209:     Jsi_Value *vpargs, *items[3] = {}, *ret;",
          "1212:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zDb);",
          "1213:     items[2] = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)nEntry);",
          "1214:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1215:     Jsi_IncrRefCount(interp, vpargs);",
          "1216:     ret = Jsi_ValueNew(interp);",
          "1218:     Jsi_DecrRefCount(interp, vpargs);",
          "1219:     if (rc != JSI_OK) {",
          "1221:         rc = 1;",
          "1222:     } else",
          "1224:     Jsi_DecrRefCount(interp, ret);",
          "1225:     return rc;",
          "1226: }",
          "1228: static void dbRollbackHandler(void *cd) {",
          "1231:     Jsi_Value *vpargs, *items[2] = {}, *ret = Jsi_ValueNew1(interp);",
          "1234:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 1, 0));",
          "1235:     Jsi_IncrRefCount(interp, vpargs);",
          "1237:     Jsi_DecrRefCount(interp, vpargs);",
          "1238:     Jsi_DecrRefCount(interp, ret);",
          "1239: }",
          "",
          "[Removed Lines]",
          "1205: static int dbWalHandler( void *cd, sqlite3 *db, const char *zDb, int nEntry ){",
          "1207:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1208:     Jsi_Interp *interp = jdb->interp;",
          "1211:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1217:     rc = Jsi_FunctionInvoke(interp, jdb->onWalHook, vpargs, &ret, NULL);",
          "1220:         jdb->errCnt++;",
          "1223:         rc = dbGetIntBool(jdb->interp, ret);",
          "1229:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1230:     Jsi_Interp *interp = jdb->interp;",
          "1233:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1236:     Jsi_FunctionInvoke(interp, jdb->onRollback, NULL, &ret, NULL);",
          "",
          "[Added Lines]",
          "1207: static int dbWalHandler( void *cd, sqlite3 *sdb, const char *zDb, int nEntry ){",
          "1209:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1210:     Jsi_Interp *interp = db->interp;",
          "1213:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1219:     rc = Jsi_FunctionInvoke(interp, db->onWalHook, vpargs, &ret, NULL);",
          "1222:         db->errCnt++;",
          "1225:         rc = dbGetIntBool(db->interp, ret);",
          "1231:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1232:     Jsi_Interp *interp = db->interp;",
          "1235:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1238:     Jsi_FunctionInvoke(interp, db->onRollback, NULL, &ret, NULL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1246:     const char *zTbl,",
          "1247:     sqlite_int64 rowid",
          "1248: ) {",
          "1251:     int rc, i = 0;",
          "1252:     Jsi_Value *vpargs, *items[10] = {}, *ret;",
          "1254:     assert( op==SQLITE_INSERT || op==SQLITE_UPDATE || op==SQLITE_DELETE );",
          "1256:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, (op==SQLITE_INSERT)?\"INSERT\":(op==SQLITE_UPDATE)?\"UPDATE\":\"DELETE\");",
          "1257:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zDb);",
          "1258:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zTbl);",
          "",
          "[Removed Lines]",
          "1249:     Jsi_Db *jdb = (Jsi_Db *)p;",
          "1250:     Jsi_Interp *interp = jdb->interp;",
          "1255:     items[i++] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "",
          "[Added Lines]",
          "1251:     Jsi_Db *db = (Jsi_Db *)p;",
          "1252:     Jsi_Interp *interp = db->interp;",
          "1257:     items[i++] = Jsi_ValueNewObj(interp, db->fobj);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1260:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "1261:     Jsi_IncrRefCount(interp, vpargs);",
          "1262:     ret = Jsi_ValueNew1(interp);",
          "1264:     Jsi_DecrRefCount(interp, vpargs);",
          "1265:     Jsi_DecrRefCount(interp, ret);",
          "1266:     if (rc != JSI_OK)",
          "1268: }",
          "1270: static void dbCollateNeeded(",
          "1271:     void *cd,",
          "1273:     int enc,",
          "1274:     const char *zName",
          "1275: ) {",
          "1276:     int rc;",
          "1279:     Jsi_Value *vpargs, *items[2], *ret;",
          "1281:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, zName);",
          "1282:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 2, 0));",
          "1283:     Jsi_IncrRefCount(interp, vpargs);",
          "1284:     ret = Jsi_ValueNew1(interp);",
          "1286:     Jsi_DecrRefCount(interp, vpargs);",
          "1287:     Jsi_DecrRefCount(interp, ret);",
          "1288:     if (rc != JSI_OK)",
          "1291: }",
          "",
          "[Removed Lines]",
          "1263:     rc = Jsi_FunctionInvoke(interp, jdb->onUpdate, vpargs, &ret, NULL);",
          "1267:         jdb->errCnt++;",
          "1272:     sqlite3 *db,",
          "1277:     Jsi_Db *jdb = (Jsi_Db*)cd;",
          "1278:     Jsi_Interp *interp = jdb->interp;",
          "1280:     items[0] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "1285:     rc = Jsi_FunctionInvoke(interp, jdb->onNeedCollate, vpargs,& ret, NULL);",
          "1289:         jdb->errCnt++;",
          "",
          "[Added Lines]",
          "1265:     rc = Jsi_FunctionInvoke(interp, db->onUpdate, vpargs, &ret, NULL);",
          "1269:         db->errCnt++;",
          "1274:     sqlite3 *sdb,",
          "1279:     Jsi_Db *db = (Jsi_Db*)cd;",
          "1280:     Jsi_Interp *interp = db->interp;",
          "1282:     items[0] = Jsi_ValueNewObj(interp, db->fobj);",
          "1287:     rc = Jsi_FunctionInvoke(interp, db->onNeedCollate, vpargs,& ret, NULL);",
          "1291:         db->errCnt++;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1305:     Jsi_Interp *interp = p->interp;",
          "1307:     int rc;",
          "1309:     Jsi_Value *vpargs, *items[3], *ret;",
          "1312:     items[1] = Jsi_ValueMakeStringDup(interp, NULL, (char*)zA);",
          "1313:     items[2] = Jsi_ValueMakeStringDup(interp, NULL, (char*)zB);",
          "1314:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, 3, 0));",
          "1315:     ret = Jsi_ValueNew1(interp);",
          "1316:     rc = Jsi_FunctionInvoke(interp, p->zScript, vpargs, &ret, NULL);",
          "1317:     if( JSI_OK!=rc ) {",
          "1319:         rc = 0;",
          "1320:     } else",
          "1321:         rc = dbGetIntBool(interp, ret);",
          "",
          "[Removed Lines]",
          "1311:     items[0] = Jsi_ValueNewObj(interp, p->jdb->fobj);",
          "",
          "[Added Lines]",
          "1313:     items[0] = Jsi_ValueNewObj(interp, p->db->fobj);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1361: }",
          "1363: static void jsiSqlFuncUnixTime(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1367:     if (argc>3) {",
          "1369:         return;",
          "1370:     }",
          "1371:     const char *str = NULL, *fmt = NULL;",
          "",
          "[Removed Lines]",
          "1364:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1365:     SQLSIGASSERT(jdb,DB);",
          "1366:     Jsi_Interp *interp = jdb->interp;",
          "1368:         Jsi_LogWarn(\"sqlite unixtime, expected: str fmt isutc\");",
          "",
          "[Added Lines]",
          "1366:     Jsi_Db *db = (Jsi_Db*)sqlite3_user_data(context);",
          "1367:     SQLSIGASSERT(db,DB);",
          "1368:     Jsi_Interp *interp = db->interp;",
          "1370:         Jsi_LogWarnExt(\"sqlite unixtime, expected: str fmt isutc\");",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1389: }",
          "1391: static void jsiSqlFuncRegexp(sqlite3_context *context, int argc, sqlite3_value**argv) {",
          "1395:     if (argc!=2 && argc!=3) {",
          "1397:         return;",
          "1398:     }",
          "1399:     const char *str = (char *)sqlite3_value_text(argv[1]);",
          "",
          "[Removed Lines]",
          "1392:     Jsi_Db *jdb = (Jsi_Db*)sqlite3_user_data(context);",
          "1393:     SQLSIGASSERT(jdb,DB);",
          "1394:     Jsi_Interp *interp = jdb->interp;",
          "1396:         Jsi_LogWarn(\"sqlite regex, expected: str pattern ?modifier?\");",
          "",
          "[Added Lines]",
          "1394:     Jsi_Db *db = (Jsi_Db*)sqlite3_user_data(context);",
          "1395:     SQLSIGASSERT(db,DB);",
          "1396:     Jsi_Interp *interp = db->interp;",
          "1398:         Jsi_LogWarnExt(\"sqlite regex, expected: str pattern ?modifier?\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1402:     bool isNew = 0;",
          "1403:     Jsi_Value *pat = NULL;",
          "1404:     Jsi_HashEntry *hPtr;",
          "1406:         pat = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "1407:     if (!pat) {",
          "1410:             return;",
          "1411:         }",
          "1412:         pat = Jsi_ValueNewRegExp(interp, spat, mod);",
          "1413:         if (!pat)",
          "1414:             return;",
          "1415:         Jsi_IncrRefCount(interp, pat);",
          "1420:             if (!hPtr) {",
          "1421:                 Jsi_DecrRefCount(interp, pat);",
          "1422:                 return;",
          "",
          "[Removed Lines]",
          "1405:     if (jdb->regexpHash && ((hPtr = Jsi_HashEntryFind(jdb->regexpHash, spat))))",
          "1408:         if (jdb->regexpHash && jdb->maxRegexCache>0 && (int)Jsi_HashSize(jdb->regexpHash)>=jdb->maxRegexCache) {",
          "1409:             Jsi_LogError(\"Regex hash reached max size: %d\", jdb->maxRegexCache);",
          "1416:         if (jdb->maxRegexCache) {",
          "1417:             if (!jdb->regexpHash)",
          "1418:                 jdb->regexpHash = Jsi_HashNew(interp, JSI_KEYS_STRING, jsiSqlfreeValueTbl);",
          "1419:             hPtr = Jsi_HashEntryNew(jdb->regexpHash, spat, &isNew);",
          "",
          "[Added Lines]",
          "1407:     if (db->regexpHash && ((hPtr = Jsi_HashEntryFind(db->regexpHash, spat))))",
          "1410:         if (db->regexpHash && db->maxRegexCache>0 && (int)Jsi_HashSize(db->regexpHash)>=db->maxRegexCache) {",
          "1411:             Jsi_LogErrorExt(\"Regex hash reached max size: %d\", db->maxRegexCache);",
          "1418:         if (db->maxRegexCache) {",
          "1419:             if (!db->regexpHash)",
          "1420:                 db->regexpHash = Jsi_HashNew(interp, JSI_KEYS_STRING, jsiSqlfreeValueTbl);",
          "1421:             hPtr = Jsi_HashEntryNew(db->regexpHash, spat, &isNew);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1426:     }",
          "1427:     if (Jsi_RegExpMatch(interp, pat, str, &rc, NULL)==JSI_OK)",
          "1428:         sqlite3_result_int(context, rc);",
          "1430:         Jsi_DecrRefCount(interp, pat);",
          "1431: }",
          "",
          "[Removed Lines]",
          "1429:     if (!jdb->maxRegexCache)",
          "",
          "[Added Lines]",
          "1431:     if (!db->maxRegexCache)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1494:     const char *zCode;",
          "1495:     int rc;",
          "1496:     const char *zReply;",
          "1501:     switch( code ) {",
          "1502:     case SQLITE_COPY              :",
          "",
          "[Removed Lines]",
          "1497:     Jsi_Db *jdb = (Jsi_Db*)pArg;",
          "1498:     Jsi_Interp *interp = jdb->interp;",
          "1499:     if( jdb->disableAuth ) return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1499:     Jsi_Db *db = (Jsi_Db*)pArg;",
          "1500:     Jsi_Interp *interp = db->interp;",
          "1501:     if( db->disableAuth ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1604:     }",
          "1605:     int i = 0;",
          "1606:     Jsi_Value *vpargs, *items[10] = {}, *ret;",
          "1608:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zCode);",
          "1609:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zArg1 ? zArg1 : \"\");",
          "1610:     items[i++] = Jsi_ValueMakeStringDup(interp, NULL, zArg2 ? zArg2 : \"\");",
          "",
          "[Removed Lines]",
          "1607:     items[i++] = Jsi_ValueNewObj(interp, jdb->fobj);",
          "",
          "[Added Lines]",
          "1609:     items[i++] = Jsi_ValueNewObj(interp, db->fobj);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1613:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, items, i, 0));",
          "1614:     Jsi_IncrRefCount(interp, vpargs);",
          "1615:     ret = Jsi_ValueNew(interp);",
          "1617:     Jsi_DecrRefCount(interp, vpargs);",
          "1619:     if (rc == JSI_OK && (zReply = Jsi_ValueGetStringLen(interp, ret, NULL)))",
          "",
          "[Removed Lines]",
          "1616:     rc = Jsi_FunctionInvoke(interp, jdb->onAuth, vpargs, &ret, NULL);",
          "",
          "[Added Lines]",
          "1618:     rc = Jsi_FunctionInvoke(interp, db->onAuth, vpargs, &ret, NULL);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1705:     Jsi_RC rc = result;",
          "1706:     const char *zEnd;",
          "",
          "[Removed Lines]",
          "1708:     jdb->nTransaction--;",
          "1709:     zEnd = azEnd[(rc==JSI_ERROR)*2 + (jdb->nTransaction==0)];",
          "1711:     jdb->disableAuth++;",
          "1712:     if( sqlite3_exec(jdb->db, zEnd, 0, 0, 0)) {",
          "",
          "[Added Lines]",
          "1710:     db->nTransaction--;",
          "1711:     zEnd = azEnd[(rc==JSI_ERROR)*2 + (db->nTransaction==0)];",
          "1713:     db->disableAuth++;",
          "1714:     if( sqlite3_exec(db->db, zEnd, 0, 0, 0)) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1723:         if( rc!=JSI_ERROR ) {",
          "1725:             rc = JSI_ERROR;",
          "1726:         }",
          "1728:     }",
          "1731:     return rc;",
          "1732: }",
          "",
          "[Removed Lines]",
          "1724:             Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "1727:         sqlite3_exec(jdb->db, \"ROLLBACK\", 0, 0, 0);",
          "1729:     jdb->disableAuth--;",
          "",
          "[Added Lines]",
          "1726:             Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "1729:         sqlite3_exec(db->db, \"ROLLBACK\", 0, 0, 0);",
          "1731:     db->disableAuth--;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1739: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1741:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1743:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1740:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1742:     Jsi_Interp *interp = p->db->interp;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1782:     }",
          "1783:     const char *str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1784:     if (!str)",
          "1786:     Jsi_JSONQuote(interp, str?str:\"\", -1, dStr);",
          "1787: }",
          "1789: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
          "1791:     char nbuf[JSI_MAX_NUMBER_STRING];",
          "1793:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "",
          "[Removed Lines]",
          "1785:         str = p->jdb->optPtr->nullvalue;",
          "1790:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1787:         str = p->db->optPtr->nullvalue;",
          "1792:     Jsi_Interp *interp = p->db->interp;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1830:     }",
          "1831:     const char *str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1832:     if (!str)",
          "1834:     Jsi_DSAppend(dStr, str?str:\"\", NULL);",
          "1835: }",
          "1838: static Jsi_Value* dbEvalSetColumnValue(DbEvalContext *p, int iCol, Jsi_Value **val) {",
          "1841:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "1842:     const char *str;",
          "",
          "[Removed Lines]",
          "1833:         str = p->jdb->optPtr->nullvalue;",
          "1839:     Jsi_Interp *interp = p->jdb->interp;",
          "",
          "[Added Lines]",
          "1835:         str = p->db->optPtr->nullvalue;",
          "1841:     Jsi_Interp *interp = p->db->interp;",
          "1842:     Jsi_Db *db = p->db;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1877:         break;;",
          "1878:     }",
          "1879:     case SQLITE_TEXT: {",
          "1881:             const char *dectyp = sqlite3_column_decltype(pStmt, iCol);",
          "1882:             if (dectyp && !Jsi_Strncasecmp(dectyp, \"charjson\", 8)) {",
          "1883:                 Jsi_Value *v = NULL; //Jsi_ValueNew1(interp);",
          "1884:                 str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1885:                 if (JSI_OK != Jsi_JSONParse(interp, str, &v, 0))",
          "1887:                 return v;",
          "1888:             }",
          "1889:         }",
          "",
          "[Removed Lines]",
          "1880:         if (!p->jdb->noJsonConv) {",
          "1886:                     Jsi_LogWarn(\"JSON parse failure for CHARJSON column\");",
          "",
          "[Added Lines]",
          "1882:         if (!p->db->noJsonConv) {",
          "1888:                     Jsi_LogWarnExt(\"JSON parse failure for CHARJSON column\");",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1891:     default:",
          "1892:         str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1893:         if (!str)",
          "1895:         return Jsi_ValueMakeStringDup(interp, val, str?str:\"\");",
          "1896:     }",
          "1897:     return Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "1894:             str = p->jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "1896:             str = p->db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1914:     Jsi_Obj *argso;",
          "1915:     char **apColName = NULL;",
          "1916:     int *apColType = NULL;",
          "1918:         JSI_DBQUERY_PRINTF( \"DEBUG: eval\\n\");",
          "1920:     while( (rc==JSI_OK) && JSI_OK==(rc = dbEvalStep(p)) ) {",
          "",
          "[Removed Lines]",
          "1917:     if (p->jdb->debug & TMODE_EVAL)",
          "",
          "[Added Lines]",
          "1919:     if (p->db->debug & TMODE_EVAL)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1953: static Jsi_Db *dbGetDbHandle(Jsi_Interp *interp, Jsi_Value *_this, Jsi_Func *funcPtr)",
          "1954: {",
          "1958:         return NULL;",
          "1959:     }",
          "1961:     {",
          "1963:         return NULL;",
          "1964:     }",
          "1966: }",
          "1969: {",
          "1972: }",
          "1974: static Jsi_RC sqliteObjFree(Jsi_Interp *interp, void *data)",
          "",
          "[Removed Lines]",
          "1955:     Jsi_Db *jdb = (Jsi_Db*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1956:     if (!jdb) {",
          "1957:         Jsi_LogError(\"Sqlite call to a non-sqlite object\");",
          "1960:     if (!jdb->db)",
          "1962:         Jsi_LogError(\"Sqlite db closed\");",
          "1965:     return jdb;",
          "1968: static void sqliteObjErase(Jsi_Db *jdb)",
          "1970:     dbDeleteCmd(jdb);",
          "1971:     jdb->db = NULL;",
          "",
          "[Added Lines]",
          "1957:     Jsi_Db *db = (Jsi_Db*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1958:     if (!db) {",
          "1959:         Jsi_LogErrorExt(\"Sqlite call to a non-sqlite object\");",
          "1962:     if (!db->db)",
          "1964:         Jsi_LogErrorExt(\"Sqlite db closed\");",
          "1967:     return db;",
          "1970: static void sqliteObjErase(Jsi_Db *db)",
          "1972:     dbDeleteCmd(db);",
          "1973:     db->db = NULL;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2005: static Jsi_RC SqliteCollateCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2006:                             Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2007: {",
          "2009:     Jsi_Value *func;",
          "2011:     SqlCollate *pCollate;",
          "2012:     char *zName;",
          "2015:     zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2016:     func = Jsi_ValueArrayIndex(interp, args, 1);",
          "2017:     pCollate = (SqlCollate*)Jsi_Calloc(1, sizeof(*pCollate));",
          "2018:     if( pCollate==0 ) return JSI_ERROR;",
          "2020:     pCollate->interp = interp;",
          "2028:     return JSI_OK;",
          "2029: }",
          "",
          "[Removed Lines]",
          "2008:     Jsi_Db *jdb;",
          "2013:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2019:     pCollate->jdb = jdb;",
          "2021:     pCollate->pNext = jdb->pCollate;",
          "2023:     jdb->pCollate = pCollate;",
          "2025:     if( sqlite3_create_collation(jdb->db, zName, SQLITE_UTF8, pCollate, dbSqlCollate) )",
          "2027:         return Jsi_LogError(\"%s\", (char *)sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "2010:     Jsi_Db *db;",
          "2015:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2021:     pCollate->db = db;",
          "2023:     pCollate->pNext = db->pCollate;",
          "2025:     db->pCollate = pCollate;",
          "2027:     if( sqlite3_create_collation(db->db, zName, SQLITE_UTF8, pCollate, dbSqlCollate) )",
          "2029:         return Jsi_LogErrorExt(\"%s\", (char *)sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2067: static Jsi_RC SqliteImportCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2068:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2069: {",
          "2071:     Jsi_RC rv = JSI_OK;",
          "2072:     int rc;",
          "",
          "[Removed Lines]",
          "2070:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "2072:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2089:     const char *zSep;",
          "2090:     const char *zNull;",
          "2093:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 2);",
          "2094:     ImportData opts = {};",
          "",
          "[Removed Lines]",
          "2092:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "2094:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2115:     nSep = Jsi_Strlen(zSep);",
          "2116:     nNull = Jsi_Strlen(zNull);",
          "2117:     if( nSep==0 )",
          "2121:     zSql = sqlite3_mprintf(\"SELECT * FROM '%q'\", zTable);",
          "2122:     if (zSql==0)",
          "2125:     if (opts.headers) {",
          "2126:         in = Jsi_Open(interp, fname, \"rb\");",
          "2127:         if( in==0 )",
          "2129:         if ((zLine = dbLocalGetline(interp, 0, in))==0 ) {",
          "2130:             Jsi_Close(interp, in);",
          "2131:             return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "2118:         return Jsi_LogError(\"Error: non-null separator required for copy\");",
          "2123:         return Jsi_LogError(\"Error: bad table: %s\", zTable);",
          "2128:             return Jsi_LogError(\"Error: cannot open file: %s\", zFile);",
          "",
          "[Added Lines]",
          "2120:         return Jsi_LogErrorExt(\"Error: non-null separator required for copy\");",
          "2125:         return Jsi_LogErrorExt(\"Error: bad table: %s\", zTable);",
          "2130:             return Jsi_LogErrorExt(\"Error: cannot open file: %s\", zFile);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2155:         Jsi_Free(zLine);",
          "2156:         if (zlen<=0) {",
          "2157:             Jsi_DSFree(&cStr);",
          "2159:             return JSI_ERROR;",
          "2160:         }",
          "2162:         Jsi_DSFree(&cStr);",
          "2163:         if (rc)",
          "2165:         created = 1;",
          "2166:     }",
          "2168:     nByte = Jsi_Strlen(zSql);",
          "2170:         sqlite3_free(zSql);",
          "2171:     if( rc ) {",
          "2173:         nCol = 0;",
          "2174:     } else {",
          "2175:         nCol = sqlite3_column_count(pStmt);",
          "",
          "[Removed Lines]",
          "2158:             Jsi_LogError(\"null header problem\");",
          "2161:         rc = sqlite3_exec(jdb->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "2164:             return Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "2169:     rc = sqlite3_prepare(jdb->db, zSql, -1, &pStmt, 0);",
          "2172:         Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "2160:             Jsi_LogErrorExt(\"null header problem\");",
          "2163:         rc = sqlite3_exec(db->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "2166:             return Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "2171:     rc = sqlite3_prepare(db->db, zSql, -1, &pStmt, 0);",
          "2174:         Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2181:     }",
          "2182:     zSql = (char*)Jsi_Malloc( nByte + 50 + nCol*2 );",
          "2183:     if( zSql==0 ) {",
          "2185:         rc = JSI_ERROR;",
          "2186:         goto bail;",
          "2187:     }",
          "",
          "[Removed Lines]",
          "2184:         Jsi_LogError(\"Error: can't malloc()\");",
          "",
          "[Added Lines]",
          "2186:         Jsi_LogErrorExt(\"Error: can't malloc()\");",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2194:     }",
          "2195:     zSql[j++] = ')';",
          "2196:     zSql[j] = 0;",
          "2198:     Jsi_Free(zSql);",
          "2199:     if( rc ) {",
          "2201:         sqlite3_finalize(pStmt);",
          "2202:         return JSI_ERROR;",
          "2203:     }",
          "2204:     in = Jsi_Open(interp, fname, \"rb\");",
          "2205:     if( in==0 ) {",
          "2207:         sqlite3_finalize(pStmt);",
          "2208:         return JSI_ERROR;",
          "2209:     }",
          "2210:     azCol = (char**)Jsi_Malloc( sizeof(azCol[0])*(nCol+1) );",
          "2211:     if( azCol==0 ) {",
          "2213:         Jsi_Close(interp, in);",
          "2214:         rc = JSI_ERROR;",
          "2215:         goto bail;",
          "2216:     }",
          "2218:     onCommit = \"COMMIT\";",
          "2219:     while ((zLine = dbLocalGetline(interp, 0, in))!=0 ) {",
          "2220:         char *z;",
          "",
          "[Removed Lines]",
          "2197:     rc = sqlite3_prepare(jdb->db, zSql, -1, &pStmt, 0);",
          "2200:         Jsi_LogError(\"Error: %s\", sqlite3_errmsg(jdb->db));",
          "2206:         Jsi_LogError(\"Error: cannot open file: %s\", zFile);",
          "2212:         Jsi_LogError(\"Error: can't malloc()\");",
          "2217:     (void)sqlite3_exec(jdb->db, \"BEGIN\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "2199:     rc = sqlite3_prepare(db->db, zSql, -1, &pStmt, 0);",
          "2202:         Jsi_LogErrorExt(\"Error: %s\", sqlite3_errmsg(db->db));",
          "2208:         Jsi_LogErrorExt(\"Error: cannot open file: %s\", zFile);",
          "2214:         Jsi_LogErrorExt(\"Error: can't malloc()\");",
          "2219:     (void)sqlite3_exec(db->db, \"BEGIN\", 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2254:                 Jsi_DSFree(&sStr);",
          "2255:                 Jsi_Free(zLine);",
          "2256:                 Jsi_Close(interp, in);",
          "2258:                 break;",
          "2259:             }",
          "2260:             while (z) {",
          "",
          "[Removed Lines]",
          "2257:                 Jsi_LogError(\"unterminated string at line: %d\", lineno);",
          "",
          "[Added Lines]",
          "2259:                 Jsi_LogErrorExt(\"unterminated string at line: %d\", lineno);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2311:             }",
          "2312:         }",
          "2313:         if( i+1!=nCol ) {",
          "2315:                  zFile, lineno, nCol, i+1);",
          "2316:             onCommit = \"ROLLBACK\";",
          "2317:             break;",
          "",
          "[Removed Lines]",
          "2314:             Jsi_LogError(\"%s line %d: expected %d columns of data but found %d\",",
          "",
          "[Added Lines]",
          "2316:             Jsi_LogErrorExt(\"%s line %d: expected %d columns of data but found %d\",",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2331:         if (zLine)",
          "2332:             Jsi_Free(zLine);",
          "2333:         if( rc!=SQLITE_OK ) {",
          "2335:             onCommit = \"ROLLBACK\";",
          "2336:             break;",
          "2337:         }",
          "",
          "[Removed Lines]",
          "2334:             Jsi_LogError(\"%s at line: %d\", sqlite3_errmsg(jdb->db), lineno);",
          "",
          "[Added Lines]",
          "2336:             Jsi_LogErrorExt(\"%s at line: %d\", sqlite3_errmsg(db->db), lineno);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2339:     Jsi_Free(azCol);",
          "2340:     Jsi_Close(interp, in);",
          "2341:     sqlite3_finalize(pStmt);",
          "2344:     if( onCommit[0] == 'C' ) {",
          "",
          "[Removed Lines]",
          "2342:     (void)sqlite3_exec(jdb->db, onCommit, 0, 0, 0);",
          "",
          "[Added Lines]",
          "2344:     (void)sqlite3_exec(db->db, onCommit, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2353:     if (rc != JSI_OK && created && opts.conflict == CC_ROLLBACK) {",
          "2354:         Jsi_DString cStr = {};",
          "2355:         Jsi_DSAppend(&cStr, \"DROP TABLE IF EXISTS '\", zTable, \"';\", NULL);",
          "2357:         Jsi_DSFree(&cStr);",
          "2358:     }",
          "2359:     return rv;",
          "",
          "[Removed Lines]",
          "2356:         (void)sqlite3_exec(jdb->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "",
          "[Added Lines]",
          "2358:         (void)sqlite3_exec(db->db, Jsi_DSValue(&cStr), 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2367:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2368: {",
          "2369:     int rc = SQLITE_OK, rc2;",
          "2371:     sqlite3_stmt *pStmt = NULL;",
          "2375:     const char *zSql = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2376:     const char *zStart = zSql, *zLeftover = NULL, *zErrMsg = NULL;",
          "2377:     int lnum = 1;",
          "2381:     while( zSql && zSql[0] && (SQLITE_OK == rc) ) {",
          "2384:         if( SQLITE_OK != rc ) {",
          "2385:             break;",
          "",
          "[Removed Lines]",
          "2370:     Jsi_Db *jdb;",
          "2373:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2374:     sqlite3 *db = jdb->db;",
          "2378:     if (jdb->echo && zSql)",
          "2379:         Jsi_LogInfo(\"SQL-EVAL: %s\\n\", zSql);",
          "2382:         rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zLeftover);",
          "",
          "[Added Lines]",
          "2372:     Jsi_Db *db;",
          "2375:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "2379:     if (db->echo && zSql)",
          "2380:         Jsi_LogInfo(\"SQL-EVAL: %s\", zSql);",
          "2381:     Jsi_LogTraceExt(\"SQL-EVAL: %s\", zSql);",
          "2384:         rc = sqlite3_prepare_v2(db->db, zSql, -1, &pStmt, &zLeftover);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2392:             }",
          "2394:             do {",
          "2396:                     JSI_DBQUERY_PRINTF( \"DEBUG: step: %s\\n\", zSql);",
          "2397:                 rc = sqlite3_step(pStmt);",
          "2398:             } while( rc == SQLITE_ROW );",
          "",
          "[Removed Lines]",
          "2395:                 if (jdb->debug & TMODE_STEP)",
          "",
          "[Added Lines]",
          "2397:                 if (db->debug & TMODE_STEP)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2407:     }",
          "2409:     if (rc == SQLITE_OK) {",
          "2411:         return JSI_OK;",
          "2412:     }",
          "2413:     while (zSql && zStart<zSql) {",
          "2414:         if (zStart[0] == '\\n') lnum++;",
          "2415:         zStart++;",
          "2416:     }",
          "2419:     return JSI_ERROR;",
          "2420: }",
          "",
          "[Removed Lines]",
          "2410:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "2417:     zErrMsg = sqlite3_errmsg(db);",
          "2418:     Jsi_LogError(\"sqlite error: %s in statement at line %d\", (zErrMsg ? zErrMsg : \"\"), lnum);",
          "",
          "[Added Lines]",
          "2412:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "2419:     zErrMsg = sqlite3_errmsg(db->db);",
          "2420:     Jsi_LogErrorExt(\"sqlite error: %s in statement at line %d\", (zErrMsg ? zErrMsg : \"\"), lnum);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2561:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2562: {",
          "2563:     Jsi_RC rc = JSI_OK;",
          "2566:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "2567:     Jsi_DString eStr = {};",
          "2568: #ifdef JSI_DB_DSTRING_SIZE",
          "",
          "[Removed Lines]",
          "2564:     Jsi_Db *jdb;",
          "2565:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "2566:     Jsi_Db *db;",
          "2567:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2577:     char **apColName = NULL;",
          "2578:     int *apColType = NULL, isopts = 0;",
          "2579:     DbEvalContext sEval = {};",
          "2582:     opts.callback = NULL;",
          "2583:     opts.width = NULL;",
          "2584:     opts.obj.name = NULL;",
          "",
          "[Removed Lines]",
          "2580:     QueryOpts opts, *oEopt = jdb->optPtr;",
          "2581:     opts = jdb->queryOpts;",
          "",
          "[Added Lines]",
          "2582:     QueryOpts opts, *oEopt = db->optPtr;",
          "2583:     opts = db->queryOpts;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2595:         else if (Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT))",
          "2596:             isopts = 1;",
          "2597:         else {",
          "2599:             goto bail;",
          "2600:         }",
          "2601:     }",
          "",
          "[Removed Lines]",
          "2598:             rc = Jsi_LogError(\"arg 2: expected function, string, array or options\");",
          "",
          "[Added Lines]",
          "2600:             rc = Jsi_LogErrorExt(\"arg 2: expected function, string, array or options\");",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2605:             rc = JSI_ERROR;",
          "2606:             goto bail;",
          "2607:         }",
          "2610:     }",
          "2611:     if (opts.retChanged) {",
          "2612:         if (opts.callback) {",
          "2614:             goto bail;",
          "2615:         }",
          "2616:         opts.mode = _JSI_EF_NONE;",
          "",
          "[Removed Lines]",
          "2608:         callback = (opts.callback ? opts.callback : jdb->queryOpts.callback);",
          "2609:         width = (opts.width ? opts.width : jdb->queryOpts.width);",
          "2613:             rc = Jsi_LogError(\"can not use retChanged with callback\");",
          "",
          "[Added Lines]",
          "2610:         callback = (opts.callback ? opts.callback : db->queryOpts.callback);",
          "2611:         width = (opts.width ? opts.width : db->queryOpts.width);",
          "2615:             rc = Jsi_LogErrorExt(\"can not use retChanged with callback\");",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2619:     if (opts.cdata) {",
          "2620:         Jsi_CDataDb* copts = Jsi_CDataLookup(interp, opts.cdata);",
          "2621:         if (!copts)",
          "2623:         else {",
          "2625:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)n);",
          "2626:         }",
          "2627:         goto bail;",
          "",
          "[Removed Lines]",
          "2622:             rc = Jsi_LogError(\"unknown cdata name: %s\", opts.cdata);",
          "2624:             int n = Jsi_DbQuery(jdb, copts, zSql);",
          "",
          "[Added Lines]",
          "2624:             rc = Jsi_LogErrorExt(\"unknown cdata name: %s\", opts.cdata);",
          "2626:             int n = Jsi_DbQuery(db, copts, zSql);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2631:             goto bail;",
          "2632:         zSql = Jsi_DSValue(&eStr);",
          "2633:     }",
          "2636:     if ((opts.obj.getSql)) {",
          "2637:         if (opts.obj.name)",
          "2638:             Jsi_ValueMakeStringDup(interp, ret, zSql);",
          "2639:         else",
          "2641:         goto bail;",
          "2642:     }",
          "2643:     if (!opts.separator) {",
          "",
          "[Removed Lines]",
          "2634:     if ((jdb->echo || opts.echo) && zSql)",
          "2635:         Jsi_LogInfo(\"SQL-ECHO: %s\\n\", zSql);",
          "2640:             rc = Jsi_LogError(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "[Added Lines]",
          "2636:     if ((db->echo || opts.echo) && zSql)",
          "2637:         Jsi_LogInfo(\"SQL-ECHO: %s\", zSql);",
          "2638:     Jsi_LogTraceExt(\"SQL-QUERY: %s\", zSql);",
          "2643:             rc = Jsi_LogErrorExt(\"'obj.getSql' can only be used with 'objName'\");",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2651:     Jsi_DString sStr;",
          "2652:     Jsi_DSInit(&sStr);",
          "2653:     sEval.nocache = opts.nocache;",
          "2655:         goto bail;",
          "2656:     sEval.ret = *ret;",
          "2658:     if (callback) {",
          "2659:         sEval.tocall = callback;",
          "2660:         if (opts.mode != _JSI_EF_ROWS) {",
          "2662:             rc = JSI_ERROR;",
          "2663:             goto bail;",
          "2664:         }",
          "",
          "[Removed Lines]",
          "2654:     if ((rc = dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0)) != JSI_OK)",
          "2657:     jdb->optPtr = &opts;",
          "2661:             Jsi_LogError(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "[Added Lines]",
          "2657:     if ((rc = dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0)) != JSI_OK)",
          "2660:     db->optPtr = &opts;",
          "2664:             Jsi_LogErrorExt(\"'mode' must be 'rows' with 'callback'\");",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2672:             if (opts.limit && cnt>=opts.limit) break;",
          "2673:         }",
          "2674:         if (opts.retChanged)",
          "2676:         if (rc == JSI_BREAK)",
          "2677:             rc = JSI_OK;",
          "2678:         goto bail;",
          "",
          "[Removed Lines]",
          "2675:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "",
          "[Added Lines]",
          "2678:             Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3095:     }",
          "3096:     }",
          "3097:     if (opts.retChanged)",
          "3099:     else",
          "3100:         Jsi_ValueFromDS(interp, dStr, ret);",
          "3101:     if( rc==JSI_BREAK )",
          "",
          "[Removed Lines]",
          "3098:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(jdb->db));",
          "",
          "[Added Lines]",
          "3101:         Jsi_ValueMakeNumber(interp, ret, (Jsi_Number)sqlite3_changes(db->db));",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3107:     }",
          "3108:     Jsi_DSFree(dStr);",
          "3109:     Jsi_DSFree(&eStr);",
          "3111:     return rc;",
          "3112: }",
          "",
          "[Removed Lines]",
          "3110:     jdb->optPtr = oEopt;",
          "",
          "[Added Lines]",
          "3113:     db->optPtr = oEopt;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3115:                           Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3116: {",
          "3117:     Jsi_RC rc;",
          "3120:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "3121:     Jsi_DString dStr;",
          "3122:     Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "3118:     Jsi_Db *jdb;",
          "3119:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3121:     Jsi_Db *db;",
          "3122:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3125:     DbEvalContext sEval = {};",
          "3126:     const char *zSql = Jsi_ValueGetDString(interp, vSql, &dStr, 0);",
          "3130:         return rc;",
          "3131:     sEval.ret = *ret;",
          "3132:     sEval.tocall = NULL;",
          "",
          "[Removed Lines]",
          "3128:     sEval.nocache = jdb->queryOpts.nocache;",
          "3129:     if ((rc = dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0)) != JSI_OK)",
          "",
          "[Added Lines]",
          "3131:     sEval.nocache = db->queryOpts.nocache;",
          "3132:     if ((rc = dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0)) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3152:                            Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3153: {",
          "3154:     Jsi_RC rc;",
          "3157:     Jsi_Value *vSql = Jsi_ValueArrayIndex(interp, args, 0);",
          "3158:     const char *zSql;",
          "3159:     Jsi_DString dStr = {};",
          "",
          "[Removed Lines]",
          "3155:     Jsi_Db *jdb;",
          "3156:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3158:     Jsi_Db *db;",
          "3159:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3163:     Jsi_DString sStr;",
          "3164:     Jsi_DSInit(&sStr);",
          "3167:         return JSI_ERROR;",
          "3168:     sEval.ret = *ret;",
          "3169:     int cnt = 0;",
          "",
          "[Removed Lines]",
          "3165:     sEval.nocache = jdb->queryOpts.nocache;",
          "3166:     if (dbEvalInit(interp, &sEval, jdb, zSql, &sStr, 0, 0) != JSI_OK)",
          "",
          "[Added Lines]",
          "3168:     sEval.nocache = db->queryOpts.nocache;",
          "3169:     if (dbEvalInit(interp, &sEval, db, zSql, &sStr, 0, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3190: #if (SQLITE_VERSION_NUMBER>3007009)",
          "3191:     const char *zName = \"main\";",
          "3192:     int argc = Jsi_ValueGetLength(interp, args);",
          "3196:     if (argc)",
          "3197:         zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "3199:     if (zName)",
          "3200:         Jsi_ValueMakeStringDup(interp, ret, zName);",
          "3201: #endif",
          "",
          "[Removed Lines]",
          "3193:     Jsi_Db *jdb;",
          "3195:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3198:     zName = sqlite3_db_filename(jdb->db, zName);",
          "",
          "[Added Lines]",
          "3196:     Jsi_Db *db;",
          "3198:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3201:     zName = sqlite3_db_filename(db->db, zName);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3211:     SqlFunc *p, *pNew;",
          "3212:     int i;",
          "3213:     pNew = (SqlFunc*)Jsi_Calloc(1, sizeof(*pNew) + Jsi_Strlen(zName) + 1 );",
          "",
          "[Removed Lines]",
          "3210: static SqlFunc *dbFindSqlFunc(Jsi_Db *jdb, const char *zName) {",
          "",
          "[Added Lines]",
          "3213: static SqlFunc *dbFindSqlFunc(Jsi_Db *db, const char *zName) {",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3217:         pNew->zName[i] = tolower(zName[i]);",
          "3218:     }",
          "3219:     pNew->zName[i] = 0;",
          "3221:         if( Jsi_Strcmp(p->zName, pNew->zName)==0 ) {",
          "3222:             Jsi_Free((char*)pNew);",
          "3223:             return p;",
          "3224:         }",
          "3225:     }",
          "3227:     pNew->pScript = 0;",
          "3228:     Jsi_DSInit(&pNew->dScript);",
          "3231:     return pNew;",
          "3232: }",
          "",
          "[Removed Lines]",
          "3220:     for(p=jdb->pFunc; p; p=p->pNext) {",
          "3226:     pNew->interp = jdb->interp;",
          "3229:     pNew->pNext = jdb->pFunc;",
          "3230:     jdb->pFunc = pNew;",
          "",
          "[Added Lines]",
          "3223:     for(p=db->pFunc; p; p=p->pNext) {",
          "3229:     pNew->interp = db->interp;",
          "3232:     pNew->pNext = db->pFunc;",
          "3233:     db->pFunc = pNew;",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3239:     char *zName;",
          "3240:     int rc, nArg = -1, argc;",
          "3241:     argc = Jsi_ValueGetLength(interp, args);",
          "3246:     zName = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "3247:     tocall = Jsi_ValueArrayIndex(interp, args, 1);",
          "3248:     if (zName == NULL)",
          "3250:     if (!Jsi_ValueIsFunction(interp, tocall))",
          "3252:     if (argc == 3) {",
          "3253:         nVal = Jsi_ValueArrayIndex(interp, args, 2);",
          "3254:         if (Jsi_GetIntFromValue(interp, nVal, &nArg) != JSI_OK)",
          "",
          "[Removed Lines]",
          "3242:     Jsi_Db *jdb;",
          "3244:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3249:         return Jsi_LogError(\"expected name\");",
          "3251:         return Jsi_LogError(\"expected function\");",
          "",
          "[Added Lines]",
          "3245:     Jsi_Db *db;",
          "3247:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3252:         return Jsi_LogErrorExt(\"expected name\");",
          "3254:         return Jsi_LogErrorExt(\"expected function\");",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3257:         Jsi_FunctionArguments(interp, tocall, &nArg);",
          "3258:     }",
          "3259:     if (nArg > SQLITE_LIMIT_FUNCTION_ARG)",
          "3262:         const char *z = Jsi_GetString(objv[3]);",
          "3263:         int n = Jsi_Strlen(z);",
          "3264:         if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "3265:           if( Jsi_GetIntFromObj(interp, objv[4], &nArg) ) return JSI_ERROR;",
          "3266:           if( nArg<0 )",
          "3268:         }",
          "3269:         pScript = objv[5];",
          "3270:       }else if( argc!=4 ){",
          "",
          "[Removed Lines]",
          "3260:         return Jsi_LogError(\"to many args\");",
          "3267:               return Jsi_LogError( \"number of arguments must be non-negative\");",
          "",
          "[Added Lines]",
          "3263:         return Jsi_LogErrorExt(\"to many args\");",
          "3270:               return Jsi_LogErrorExt( \"number of arguments must be non-negative\");",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3273:       }else{",
          "3274:         pScript = objv[3];",
          "3277:     if( pFunc==0 ) return JSI_ERROR;",
          "3278:     SQLSIGASSERT(pFunc,FUNC);",
          "3280:     pFunc->tocall = tocall;",
          "3281:     Jsi_IncrRefCount(interp, pFunc->tocall);",
          "3283:                                  pFunc, jsiSqlFunc, 0, 0);",
          "3285:     if( rc!=SQLITE_OK ) {",
          "3286:         rc = JSI_ERROR;",
          "3288:     }",
          "3289:     return JSI_OK;",
          "3290: }",
          "",
          "[Removed Lines]",
          "3276:     pFunc = dbFindSqlFunc(jdb, zName);",
          "3282:     rc = sqlite3_create_function(jdb->db, zName, nArg, SQLITE_UTF8,",
          "3287:         Jsi_LogError(\"function create error: %s\", (char *)sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3279:     pFunc = dbFindSqlFunc(db, zName);",
          "3285:     rc = sqlite3_create_function(db->db, zName, nArg, SQLITE_UTF8,",
          "3290:         Jsi_LogErrorExt(\"function create error: %s\", (char *)sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3293: static Jsi_RC SqliteInterruptCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3294:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3295: {",
          "3299:     return JSI_OK;",
          "3300: }",
          "",
          "[Removed Lines]",
          "3296:     Jsi_Db *jdb;",
          "3297:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3298:     sqlite3_interrupt(jdb->db);",
          "",
          "[Added Lines]",
          "3299:     Jsi_Db *db;",
          "3300:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3301:     sqlite3_interrupt(db->db);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3303: static Jsi_RC SqliteCompleteCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3304:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3305: {",
          "3308:     Jsi_Value *s = Jsi_ValueArrayIndex(interp, args, 0);",
          "3309:     const char *str =  Jsi_ValueString(interp, s, NULL);",
          "3310:     int isComplete = 0;",
          "",
          "[Removed Lines]",
          "3306:     Jsi_Db *jdb;",
          "3307:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3309:     Jsi_Db *db;",
          "3310:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3323: static Jsi_RC SqliteRestoreCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3324:                             Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3325: {",
          "3327:     const char *zSrcFile;",
          "3328:     const char *zDestDb;",
          "3329:     sqlite3 *pSrc;",
          "",
          "[Removed Lines]",
          "3326:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "3329:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3331:     int nTimeout = 0;",
          "3332:     int rc;",
          "3335:     Jsi_Value *vFile = Jsi_ValueArrayIndex(interp, args, 0);",
          "3336:     int argc = Jsi_ValueGetLength(interp, args);",
          "3337:     if( argc==1 ) {",
          "",
          "[Removed Lines]",
          "3334:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3337:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3345:     else {",
          "3346:         zSrcFile = Jsi_ValueNormalPath(interp, vFile, &dStr);",
          "3347:         if (zSrcFile == NULL)",
          "3349:     }",
          "3350:     rc = sqlite3_open_v2(zSrcFile, &pSrc, SQLITE_OPEN_READONLY, 0);",
          "3352:     if( rc!=SQLITE_OK ) {",
          "3354:         DbClose(pSrc);",
          "3355:         Jsi_DSFree(&dStr);",
          "3356:         return JSI_ERROR;",
          "3357:     }",
          "3359:     if( pBackup==0 ) {",
          "3361:         DbClose(pSrc);",
          "3362:         Jsi_DSFree(&dStr);",
          "3363:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "3348:             return Jsi_LogError(\"bad or missing file name\");",
          "3353:         Jsi_LogError(\"cannot open source database: %s\", sqlite3_errmsg(pSrc));",
          "3358:     pBackup = sqlite3_backup_init(jdb->db, zDestDb, pSrc, \"main\");",
          "3360:         Jsi_LogError(\"restore failed: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3351:             return Jsi_LogErrorExt(\"bad or missing file name\");",
          "3356:         Jsi_LogErrorExt(\"cannot open source database: %s\", sqlite3_errmsg(pSrc));",
          "3361:     pBackup = sqlite3_backup_init(db->db, zDestDb, pSrc, \"main\");",
          "3363:         Jsi_LogErrorExt(\"restore failed: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3374:     if( rc==SQLITE_DONE ) {",
          "3375:         rv = JSI_OK;",
          "3376:     } else if( rc==SQLITE_BUSY || rc==SQLITE_LOCKED ) {",
          "3378:         rv = JSI_ERROR;",
          "3379:     } else {",
          "3381:         rv = JSI_ERROR;",
          "3382:     }",
          "3383:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3377:         Jsi_LogError(\"restore failed: source database busy\");",
          "3380:         Jsi_LogError(\"restore failed: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3380:         Jsi_LogErrorExt(\"restore failed: source database busy\");",
          "3383:         Jsi_LogErrorExt(\"restore failed: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3395:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3396: {",
          "3397:     int rc;",
          "3400:     int argc = Jsi_ValueGetLength(interp, args);",
          "3403:     Jsi_Value *pScript;",
          "3404:     const char *zBegin = \"SAVEPOINT _jsi_transaction\";",
          "3407:         Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3408:         static const char *TTYPE_strs[] = {",
          "3409:             \"deferred\",   \"exclusive\",  \"immediate\", 0",
          "",
          "[Removed Lines]",
          "3398:     Jsi_Db *jdb;",
          "3401:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3406:     if( jdb->nTransaction==0 && argc==2 ) {",
          "",
          "[Added Lines]",
          "3401:     Jsi_Db *db;",
          "3404:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3409:     if( db->nTransaction==0 && argc==2 ) {",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3430:     }",
          "3431:     pScript = Jsi_ValueArrayIndex(interp, args, argc-1);",
          "3432:     if(!Jsi_ValueIsFunction(interp, pScript))",
          "3439:     if( rc!=SQLITE_OK )",
          "3446:     Jsi_RC rv = Jsi_FunctionInvoke(interp, pScript, NULL, NULL, NULL);",
          "3448:     return rv;",
          "3449: }",
          "",
          "[Removed Lines]",
          "3433:         return Jsi_LogError(\"expected function\");",
          "3436:     jdb->disableAuth++;",
          "3437:     rc = sqlite3_exec(jdb->db, zBegin, 0, 0 ,0);",
          "3438:     jdb->disableAuth--;",
          "3440:         return Jsi_LogError(\"%s\", sqlite3_errmsg(jdb->db));",
          "3441:     jdb->nTransaction++;",
          "3447:     rv = dbTransPostCmd(jdb, interp, rv);",
          "",
          "[Added Lines]",
          "3436:         return Jsi_LogErrorExt(\"expected function\");",
          "3439:     db->disableAuth++;",
          "3440:     rc = sqlite3_exec(db->db, zBegin, 0, 0 ,0);",
          "3441:     db->disableAuth--;",
          "3443:         return Jsi_LogErrorExt(\"%s\", sqlite3_errmsg(db->db));",
          "3444:     db->nTransaction++;",
          "3450:     rv = dbTransPostCmd(db, interp, rv);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3456: static Jsi_RC SqliteBackupCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3457:                            Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3458: {",
          "3460:     Jsi_RC rv = JSI_OK;",
          "3461:     int rc;",
          "3462:     const char *zDestFile;",
          "",
          "[Removed Lines]",
          "3459:     Jsi_Db *jdb;",
          "",
          "[Added Lines]",
          "3462:     Jsi_Db *db;",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3464:     sqlite3 *pDest;",
          "3465:     sqlite3_backup *pBackup;",
          "3468:     Jsi_Value *vFile = Jsi_ValueArrayIndex(interp, args, 0);",
          "3469:     int argc = Jsi_ValueGetLength(interp, args);",
          "3470:     if( argc==1 ) {",
          "",
          "[Removed Lines]",
          "3467:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "[Added Lines]",
          "3470:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3478:     else {",
          "3479:         zDestFile = Jsi_ValueNormalPath(interp, vFile, &dStr);",
          "3480:         if (zDestFile == NULL)",
          "3482:     }",
          "3483:     rc = sqlite3_open(zDestFile, &pDest);",
          "3484:     if( rc!=SQLITE_OK ) {",
          "3486:         DbClose(pDest);",
          "3487:         Jsi_DSFree(&dStr);",
          "3488:         return JSI_ERROR;",
          "3489:     }",
          "3491:     if( pBackup==0 ) {",
          "3493:         DbClose(pDest);",
          "3494:         Jsi_DSFree(&dStr);",
          "3495:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "3481:             return Jsi_LogError(\"bad or missing file name\");",
          "3485:         Jsi_LogError(\"cannot open target database %s: %s\", zDestFile, sqlite3_errmsg(pDest));",
          "3490:     pBackup = sqlite3_backup_init(pDest, \"main\", jdb->db, zSrcDb);",
          "3492:         Jsi_LogError(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "[Added Lines]",
          "3484:             return Jsi_LogErrorExt(\"bad or missing file name\");",
          "3488:         Jsi_LogErrorExt(\"cannot open target database %s: %s\", zDestFile, sqlite3_errmsg(pDest));",
          "3493:     pBackup = sqlite3_backup_init(pDest, \"main\", db->db, zSrcDb);",
          "3495:         Jsi_LogErrorExt(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3499:     if( rc==SQLITE_DONE ) {",
          "3500:         rv = JSI_OK;",
          "3501:     } else {",
          "3503:         rv = JSI_ERROR;",
          "3504:     }",
          "3505:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3502:         Jsi_LogError(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "[Added Lines]",
          "3505:         Jsi_LogErrorExt(\"backup failed: %s\", sqlite3_errmsg(pDest));",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3507:     return rv;",
          "3508: }",
          "3511: {",
          "3514:     else",
          "3519:     else",
          "3524:     else",
          "3529:     else",
          "3534:     else",
          "3539:     else",
          "3544:     else",
          "3549:     else",
          "3554:     else",
          "3559:     else",
          "3570:     else",
          "3573: }",
          "",
          "[Removed Lines]",
          "3510: void dbSetupCallbacks(Jsi_Db *jdb, Jsi_Db *ojdb)",
          "3512:     if (jdb->onAuth && (!ojdb || !ojdb->onAuth) )",
          "3513:         sqlite3_set_authorizer(jdb->db, dbAuthCallback, jdb);",
          "3515:         sqlite3_set_authorizer(jdb->db, 0, 0);",
          "3517:     if (jdb->onCommit && (!ojdb || !ojdb->onCommit) )",
          "3518:         sqlite3_commit_hook(jdb->db, dbCommitHandler, jdb);",
          "3520:         sqlite3_commit_hook(jdb->db, 0, 0);",
          "3522:     if (jdb->onBusy && (!ojdb || !ojdb->onBusy) )",
          "3523:         sqlite3_busy_handler(jdb->db, dbBusyHandler, jdb);",
          "3525:         sqlite3_busy_handler(jdb->db, 0, 0);",
          "3527:     if (jdb->onTrace && (!ojdb || !ojdb->onTrace) )",
          "3528:         sqlite3_trace(jdb->db, dbTraceHandler, jdb);",
          "3530:         sqlite3_trace(jdb->db, 0, 0);",
          "3532:     if (jdb->onNeedCollate && (!ojdb || !ojdb->onNeedCollate) )",
          "3533:         sqlite3_collation_needed(jdb->db, jdb, dbCollateNeeded);",
          "3535:         sqlite3_collation_needed(jdb->db, 0, 0);",
          "3537:     if (jdb->onUpdate && (!ojdb || !ojdb->onUpdate) )",
          "3538:         sqlite3_update_hook(jdb->db, dbUpdateHandler, jdb);",
          "3540:         sqlite3_update_hook(jdb->db, 0, 0);",
          "3542:     if (jdb->onWalHook && (!ojdb || !ojdb->onWalHook) )",
          "3543:         sqlite3_wal_hook(jdb->db, dbWalHandler, jdb);",
          "3545:         sqlite3_wal_hook(jdb->db, 0, 0);",
          "3547:     if (jdb->onRollback && (!ojdb || !ojdb->onRollback) )",
          "3548:         sqlite3_rollback_hook(jdb->db, dbRollbackHandler, jdb);",
          "3550:         sqlite3_rollback_hook(jdb->db, 0, 0);",
          "3552:     if (jdb->onProfile && (!ojdb || !ojdb->onProfile) )",
          "3553:         sqlite3_profile(jdb->db, dbProfileHandler, jdb);",
          "3555:         sqlite3_profile(jdb->db, 0, 0);",
          "3557:     if (jdb->onProgress && jdb->progressSteps && (!ojdb || !ojdb->onProgress || ojdb->progressSteps != jdb->progressSteps) )",
          "3558:         sqlite3_progress_handler(jdb->db, jdb->progressSteps, dbProgressHandler, jdb);",
          "3560:         sqlite3_progress_handler(jdb->db, 0, 0, 0);",
          "3562:     if (!ojdb || jdb->load != ojdb->load)",
          "3563:         sqlite3_enable_load_extension(jdb->db, jdb->load);",
          "3565:     if (!ojdb || jdb->timeout != ojdb->timeout)",
          "3566:         sqlite3_busy_timeout( jdb->db, jdb->timeout );",
          "3569:         sqlite3_unlock_notify(jdb->db, dbUnlockNotify, (void*)jdb);",
          "3571:         sqlite3_unlock_notify(jdb->db, 0, 0);",
          "",
          "[Added Lines]",
          "3513: void dbSetupCallbacks(Jsi_Db *db, Jsi_Db *ojdb)",
          "3515:     if (db->onAuth && (!ojdb || !ojdb->onAuth) )",
          "3516:         sqlite3_set_authorizer(db->db, dbAuthCallback, db);",
          "3518:         sqlite3_set_authorizer(db->db, 0, 0);",
          "3520:     if (db->onCommit && (!ojdb || !ojdb->onCommit) )",
          "3521:         sqlite3_commit_hook(db->db, dbCommitHandler, db);",
          "3523:         sqlite3_commit_hook(db->db, 0, 0);",
          "3525:     if (db->onBusy && (!ojdb || !ojdb->onBusy) )",
          "3526:         sqlite3_busy_handler(db->db, dbBusyHandler, db);",
          "3528:         sqlite3_busy_handler(db->db, 0, 0);",
          "3530:     if (db->onTrace && (!ojdb || !ojdb->onTrace) )",
          "3531:         sqlite3_trace(db->db, dbTraceHandler, db);",
          "3533:         sqlite3_trace(db->db, 0, 0);",
          "3535:     if (db->onNeedCollate && (!ojdb || !ojdb->onNeedCollate) )",
          "3536:         sqlite3_collation_needed(db->db, db, dbCollateNeeded);",
          "3538:         sqlite3_collation_needed(db->db, 0, 0);",
          "3540:     if (db->onUpdate && (!ojdb || !ojdb->onUpdate) )",
          "3541:         sqlite3_update_hook(db->db, dbUpdateHandler, db);",
          "3543:         sqlite3_update_hook(db->db, 0, 0);",
          "3545:     if (db->onWalHook && (!ojdb || !ojdb->onWalHook) )",
          "3546:         sqlite3_wal_hook(db->db, dbWalHandler, db);",
          "3548:         sqlite3_wal_hook(db->db, 0, 0);",
          "3550:     if (db->onRollback && (!ojdb || !ojdb->onRollback) )",
          "3551:         sqlite3_rollback_hook(db->db, dbRollbackHandler, db);",
          "3553:         sqlite3_rollback_hook(db->db, 0, 0);",
          "3555:     if (db->onProfile && (!ojdb || !ojdb->onProfile) )",
          "3556:         sqlite3_profile(db->db, dbProfileHandler, db);",
          "3558:         sqlite3_profile(db->db, 0, 0);",
          "3560:     if (db->onProgress && db->progressSteps && (!ojdb || !ojdb->onProgress || ojdb->progressSteps != db->progressSteps) )",
          "3561:         sqlite3_progress_handler(db->db, db->progressSteps, dbProgressHandler, db);",
          "3563:         sqlite3_progress_handler(db->db, 0, 0, 0);",
          "3565:     if (!ojdb || db->load != ojdb->load)",
          "3566:         sqlite3_enable_load_extension(db->db, db->load);",
          "3568:     if (!ojdb || db->timeout != ojdb->timeout)",
          "3569:         sqlite3_busy_timeout( db->db, db->timeout );",
          "3572:         sqlite3_unlock_notify(db->db, dbUnlockNotify, (void*)db);",
          "3574:         sqlite3_unlock_notify(db->db, 0, 0);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3576: static Jsi_RC SqliteConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3577:                          Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3578: {",
          "3581:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "3596:         rc = JSI_ERROR;",
          "3597:     }",
          "3600:     return rc;",
          "3601: }",
          "",
          "[Removed Lines]",
          "3579:     Jsi_Db *jdb, ojdb;",
          "3580:     if (!(jdb = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3582:     if (jdb->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "3583:         return Jsi_LogError(\"Socket conf() is disabled for set\");",
          "3584:     ojdb = *jdb;",
          "3586:     jdb->lastInsertId = sqlite3_last_insert_rowid(jdb->db);",
          "3587:     jdb->changeCnt = sqlite3_changes(jdb->db);",
          "3588:     jdb->changeCntAll = sqlite3_total_changes(jdb->db);",
          "3589:     jdb->errorCode = sqlite3_errcode(jdb->db);",
          "3591:     Jsi_RC rc = Jsi_OptionsConf(interp, SqlOptions, jdb, opts, ret, 0);",
          "3593:     if (jdb->stmtCacheMax<0 || jdb->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3594:         JSI_DBQUERY_PRINTF( \"option stmtCacheMax value %d is not in range 0..%d\", jdb->stmtCacheMax, MAX_PREPARED_STMTS);",
          "3595:         jdb->stmtCacheMax = ojdb.stmtCacheMax;",
          "3598:     dbSetupCallbacks(jdb, &ojdb);",
          "3599:     dbPrepStmtLimit(jdb);",
          "",
          "[Added Lines]",
          "3582:     Jsi_Db *db, ojdb;",
          "3583:     if (!(db = dbGetDbHandle(interp, _this, funcPtr))) return JSI_ERROR;",
          "3585:     if (db->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "3586:         return Jsi_LogErrorExt(\"Socket conf() is disabled for set\");",
          "3587:     ojdb = *db;",
          "3589:     db->lastInsertId = sqlite3_last_insert_rowid(db->db);",
          "3590:     db->changeCnt = sqlite3_changes(db->db);",
          "3591:     db->changeCntAll = sqlite3_total_changes(db->db);",
          "3592:     db->errorCode = sqlite3_errcode(db->db);",
          "3594:     Jsi_RC rc = Jsi_OptionsConf(interp, SqlOptions, db, opts, ret, 0);",
          "3596:     if (db->stmtCacheMax<0 || db->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3597:         JSI_DBQUERY_PRINTF( \"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "3598:         db->stmtCacheMax = ojdb.stmtCacheMax;",
          "3601:     dbSetupCallbacks(db, &ojdb);",
          "3602:     dbPrepStmtLimit(db);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3687:     Jsi_Db *db = (Jsi_Db*)Jsi_Calloc(1, sizeof(*db) );",
          "3688:     if( db==0 ) {",
          "3689:         Jsi_DSFree(&dStr);",
          "3691:         return JSI_ERROR;",
          "3692:     }",
          "3693:     db->sig = SQLITE_SIG_DB;",
          "3695:     db->_->newCnt++;",
          "3696:     db->_->activeCnt++;",
          "3697:     db->stmtCacheMax = NUM_PREPARED_STMTS;",
          "",
          "[Removed Lines]",
          "3690:         Jsi_LogError(\"malloc failed\");",
          "3694:     db->_ = &dbObjCmd;",
          "",
          "[Added Lines]",
          "3692:         Jsi_LogErrorExt(\"malloc failed\");",
          "3695:     db->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "3696:     Jsi_LogDebugExt(\"Starting DB\");",
          "3698:     db->_ = &db_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3705:     if (ismem == 0 &&",
          "3706:         (Jsi_InterpAccess(interp, vFile, (db->readonly ? JSI_INTACCESS_READ : JSI_INTACCESS_WRITE)) != JSI_OK",
          "3707:         || (create && Jsi_InterpAccess(interp, vFile, JSI_INTACCESS_CREATE) != JSI_OK))) {",
          "3709:         goto bail;",
          "3710:     }",
          "3712:     if (db->stmtCacheMax<0 || db->stmtCacheMax>MAX_PREPARED_STMTS) {",
          "3714:         goto bail;",
          "3715:     }",
          "3716:     if (!db->udata) {",
          "",
          "[Removed Lines]",
          "3708:         Jsi_LogError(\"Safe accces denied\");",
          "3713:         Jsi_LogError(\"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "",
          "[Added Lines]",
          "3712:         Jsi_LogErrorExt(\"Safe accces denied\");",
          "3717:         Jsi_LogErrorExt(\"option stmtCacheMax value %d is not in range 0..%d\", db->stmtCacheMax, MAX_PREPARED_STMTS);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3743:     }",
          "3745:     if (SQLITE_OK != sqlite3_open_v2(zFile, &db->db, flags, vfs)) {",
          "3747:         goto bail;",
          "3748:     }",
          "",
          "[Removed Lines]",
          "3746:         Jsi_LogError(\"db open failed: %s\", zFile);",
          "",
          "[Added Lines]",
          "3750:         Jsi_LogErrorExt(\"db open failed: %s\", zFile);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3816:     return NULL;",
          "3817: }",
          "3820:                             int dataIdx, int bindMax, Jsi_CDataDb *dbopts)",
          "3821: {",
          "3823:     int j, k, cnt = 0, idx, sidx = -1, rc = 0;",
          "3824:     Jsi_StructSpec *specPtr, *specs;",
          "3825:     void *rec;",
          "",
          "[Removed Lines]",
          "3819: static Jsi_RC dbBindOptionStmt(Jsi_Db *jdb, sqlite3_stmt *pStmt, OptionBind *obPtr,",
          "3822:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "3823: static Jsi_RC dbBindOptionStmt(Jsi_Db *db, sqlite3_stmt *pStmt, OptionBind *obPtr,",
          "3826:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3849:             if (bindMax>0 && k>=bindMax)",
          "3850:                 continue;",
          "3851:             if (!dbopts[k].sf) {",
          "3853:                 continue;",
          "3854:             }",
          "3855:         }",
          "",
          "[Removed Lines]",
          "3852:                 Jsi_LogError(\"bad bind: %s\", bName);",
          "",
          "[Added Lines]",
          "3856:                 Jsi_LogErrorExt(\"bad bind: %s\", bName);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3880:             }",
          "3881:         }",
          "3882:         if (specPtr->id<JSI_OPTION_BOOL || specPtr->id>=JSI_OPTION_END)",
          "3885:         char *ptr = (char *)rec + specPtr->offset;",
          "3886:         switch (specPtr->id) {",
          "",
          "[Removed Lines]",
          "3883:             return Jsi_LogError(\"unknown bind: %s\", bName);",
          "",
          "[Added Lines]",
          "3887:             return Jsi_LogErrorExt(\"unknown bind: %s\", bName);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3930:                 rc = sqlite3_bind_text(pStmt, idx, Jsi_DSValue(&dStr), -1, SQLITE_TRANSIENT );",
          "3931:                 Jsi_DSFree(&dStr);",
          "3932:             } else",
          "3934:             break;",
          "3935:         }",
          "3936:         case JSI_OPTION_DSTRING:",
          "3937:             eStr = (Jsi_DString*)ptr;",
          "3939:                 rc = sqlite3_bind_text(pStmt, idx, NULL, -1, statFlags );",
          "3940:             else",
          "3941:                 rc = sqlite3_bind_text(pStmt, idx, Jsi_DSValue(eStr), -1, statFlags );",
          "3942:             break;",
          "3943:         case JSI_OPTION_STRBUF:",
          "3945:                 rc = sqlite3_bind_text(pStmt, idx, NULL, -1, statFlags );",
          "3946:             else",
          "3947:                 rc = sqlite3_bind_text(pStmt, idx, (char*)ptr, -1, statFlags );",
          "",
          "[Removed Lines]",
          "3933:                 return Jsi_LogError(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "3938:             if (jdb->optPtr->nullvalue && !Jsi_Strcmp(jdb->optPtr->nullvalue, Jsi_DSValue(eStr)))",
          "3944:             if (jdb->optPtr->nullvalue && ptr && !Jsi_Strcmp(jdb->optPtr->nullvalue, (char*)ptr))",
          "",
          "[Added Lines]",
          "3937:                 return Jsi_LogErrorExt(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "3942:             if (db->optPtr->nullvalue && !Jsi_Strcmp(db->optPtr->nullvalue, Jsi_DSValue(eStr)))",
          "3948:             if (db->optPtr->nullvalue && ptr && !Jsi_Strcmp(db->optPtr->nullvalue, (char*)ptr))",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3968: #else",
          "3969:         default:",
          "3970: #endif",
          "3972:             return JSI_ERROR;",
          "3974:         }",
          "3975:         if (rc != SQLITE_OK)",
          "3977:     }",
          "3978:     cnt++;",
          "3979:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "3971:             Jsi_LogError(\"unsupported jdb option type \\\"%s\\\" for \\\"%s\\\"\", jsi_DbOptionTypeStr(specPtr->id, 0), specPtr->name);",
          "3976:             Jsi_LogError(\"bind failure: %s\", sqlite3_errmsg(jdb->db));",
          "",
          "[Added Lines]",
          "3975:             Jsi_LogErrorExt(\"unsupported db option type \\\"%s\\\" for \\\"%s\\\"\", jsi_DbOptionTypeStr(specPtr->id, 0), specPtr->name);",
          "3980:             Jsi_LogErrorExt(\"bind failure: %s\", sqlite3_errmsg(db->db));",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3985: static Jsi_RC dbEvalStepOption(DbEvalContext *p, OptionBind *obPtr, int *cntPtr, int dataIdx, int bindMax, Jsi_CDataDb *dbopts, int *erc) {",
          "3987:     int cnt = 0;",
          "3988:     while( p->zSql[0] || p->pPreStmt ) {",
          "3989:         Jsi_RC rc;",
          "3990:         cnt++;",
          "3991:         if( p->pPreStmt==0 ) {",
          "3993:             if( rc!=JSI_OK ) return rc;",
          "3994:         }",
          "3995:         if (bindMax!=0) {",
          "3997:             if( rc!=JSI_OK ) return rc;",
          "3998:         }",
          "3999:         rc = dbEvalStepSub(p, 1, erc);",
          "",
          "[Removed Lines]",
          "3986:     Jsi_Db *jdb = p->jdb;",
          "3992:             rc = dbPrepareStmt(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "3996:             rc = dbBindOptionStmt(jdb, p->pPreStmt->pStmt, obPtr, dataIdx, bindMax, dbopts);",
          "",
          "[Added Lines]",
          "3990:     Jsi_Db *db = p->db;",
          "3996:             rc = dbPrepareStmt(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "4000:             rc = dbBindOptionStmt(db, p->pPreStmt->pStmt, obPtr, dataIdx, bindMax, dbopts);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4018:     return NULL;",
          "4019: }",
          "4022: {",
          "4023: #ifndef JSI_LITE_ONLY",
          "4026: #endif",
          "4027:     Jsi_HashEntry *hPtr;",
          "4028:     bool isNew;",
          "4030:     assert(hPtr) ;",
          "4031:     return (const char*)Jsi_HashKeyGet(hPtr);",
          "4032: }",
          "4035: {",
          "4036:     void *rec = dbopts[0].data, **recPtrPtr = NULL;",
          "4038:     Jsi_StructSpec *specPtr, *specs = dbopts[0].sf;",
          "4039:     DbEvalContext sEval = {};",
          "4040:     int ccnt = 0;",
          "",
          "[Removed Lines]",
          "4021: const char* Jsi_DbKeyAdd(Jsi_Db *jdb, const char *str)",
          "4024:     if (jdb->interp)",
          "4025:         return Jsi_KeyAdd(jdb->interp, str);",
          "4029:     hPtr = Jsi_HashEntryNew(jdb->strKeyTbl, str, &isNew);",
          "4034: static int dbOptSelect(Jsi_Db *jdb, const char *cmd, OptionBind *obPtr, Jsi_CDataDb *dbopts)",
          "4037:     Jsi_Interp *interp = jdb->interp;",
          "",
          "[Added Lines]",
          "4025: const char* Jsi_DbKeyAdd(Jsi_Db *db, const char *str)",
          "4028:     if (db->interp)",
          "4029:         return Jsi_KeyAdd(db->interp, str);",
          "4033:     hPtr = Jsi_HashEntryNew(db->strKeyTbl, str, &isNew);",
          "4038: static int dbOptSelect(Jsi_Db *db, const char *cmd, OptionBind *obPtr, Jsi_CDataDb *dbopts)",
          "4041:     Jsi_Interp *interp = db->interp;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4048:     Jsi_DString sStr, *dStr = &sStr;",
          "4049:     Jsi_DSInit(dStr);",
          "4050: #endif",
          "4052:     if (dbopts->noCache)",
          "4053:         sEval.nocache = 1;",
          "4054:     Jsi_DSAppendLen(dStr, cmd, cPtr?(cPtr-cmd):-1);",
          "",
          "[Removed Lines]",
          "4051:     dbEvalInit(interp, &sEval, jdb, NULL, dStr, 0, 0);",
          "",
          "[Added Lines]",
          "4055:     dbEvalInit(interp, &sEval, db, NULL, dStr, 0, 0);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4065:         Jsi_DSAppend(dStr, cPtr+3, NULL);",
          "4066:     }",
          "4067:     sEval.zSql = Jsi_DSValue(dStr);",
          "4069:     int rc = JSI_ERROR, erc = -1, structSize = 0;",
          "4070:     int cnt = 0, dataMax = (dbopts->isPtr2?0:1);",
          "4071:     int multi = (dbopts->isPtr2!=0);",
          "",
          "[Removed Lines]",
          "4068:     sEval.nocache = jdb->optPtr->nocache;",
          "",
          "[Added Lines]",
          "4072:     sEval.nocache = db->optPtr->nocache;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4140:         for (idx=0; idx<nCol; idx++) {",
          "4141:             specPtr = dbLookupSpecFromName(specs, apColName[idx]);",
          "4142:             if (!specPtr) {",
          "4144:                 goto bail;",
          "4145:             }",
          "4146:             if (specPtr->id<JSI_OPTION_BOOL || specPtr->id>=JSI_OPTION_END) {",
          "4148:                 goto bail;",
          "4149:             }",
          "4150:             char *ptr = (char*)prec + specPtr->offset;",
          "",
          "[Removed Lines]",
          "4143:                 Jsi_LogError(\"unknown column name: %s\", apColName[idx]);",
          "4147:                 Jsi_LogError(\"unknown option type \\\"%d\\\" for \\\"%s\\\"\", specPtr->id, specPtr->name);",
          "",
          "[Added Lines]",
          "4147:                 Jsi_LogErrorExt(\"unknown column name: %s\", apColName[idx]);",
          "4151:                 Jsi_LogErrorExt(\"unknown option type \\\"%d\\\" for \\\"%s\\\"\", specPtr->id, specPtr->name);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4192:                     eStr = (Jsi_DString*)ptr;",
          "4193:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4194:                     if (!str)",
          "4196:                     Jsi_DSSet(eStr, str?str:\"\");",
          "4197:                     break;",
          "4198:                 case JSI_OPTION_STRBUF:",
          "4199:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4200:                     if (!str)",
          "4202:                     strncpy((char*)ptr, str?str:\"\", specPtr->size);",
          "4203:                     ((char*)ptr)[specPtr->size-1] = 0;",
          "4204:                     break;",
          "",
          "[Removed Lines]",
          "4195:                         str = jdb->optPtr->nullvalue;",
          "4201:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4199:                         str = db->optPtr->nullvalue;",
          "4205:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4210:                             goto bail;",
          "4211:                         }",
          "4212:                     } else {",
          "4214:                         goto bail;",
          "4215:                     }",
          "4216:                     break;",
          "",
          "[Removed Lines]",
          "4213:                         Jsi_LogError(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "",
          "[Added Lines]",
          "4217:                         Jsi_LogErrorExt(\"missing or invalid custom for \\\"%s\\\"\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4218:                 case JSI_OPTION_STRKEY:",
          "4219:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4220:                     if (!str)",
          "4223:                     break;",
          "4224: #ifndef JSI_LITE_ONLY",
          "4225:                 case JSI_OPTION_STRING: {",
          "",
          "[Removed Lines]",
          "4221:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4225:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4230:                     }",
          "4231:                     str = (char*)sqlite3_column_text(pStmt, idx );",
          "4232:                     if (!str)",
          "4234:                     if (str) {",
          "4235:                         vPtr = Jsi_ValueNewStringDup(interp, str);",
          "",
          "[Removed Lines]",
          "4233:                         str = jdb->optPtr->nullvalue;",
          "",
          "[Added Lines]",
          "4237:                         str = db->optPtr->nullvalue;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4275:     return erc;",
          "4276: }",
          "4279: {",
          "4280:     int k, cnt, erc = -1;",
          "4281:     Jsi_CDataDb statbinds[] = {{}, {}};",
          "4282:     if (!dbopts) dbopts = statbinds;",
          "4283:     OptionBind ob = {.binds = dbopts};",
          "4284:     Jsi_StructSpec *specPtr, *specs;",
          "4286:     if (!query) query=\"\";",
          "4287:     if (query[0]==';') {",
          "4290:             return erc;",
          "4291:         }",
          "4292:         return 0;",
          "",
          "[Removed Lines]",
          "4278: static int jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dbopts, const char *query)",
          "4285:     Jsi_Interp *interp = jdb->interp;",
          "4288:         if (!dbExecCmd(jdb, query+1, &erc)) {",
          "4289:             Jsi_LogError(\"EXEC ERROR=\\\"%s\\\", SQL=\\\"%s\\\"\", sqlite3_errmsg(jdb->db), query);",
          "",
          "[Added Lines]",
          "4282: static int jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dbopts, const char *query)",
          "4289:     Jsi_Interp *interp = db->interp;",
          "4292:         if (!dbExecCmd(db, query+1, &erc)) {",
          "4293:             Jsi_LogErrorExt(\"EXEC ERROR=\\\"%s\\\", SQL=\\\"%s\\\"\", sqlite3_errmsg(db->db), query);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4294:     const char *cPtr = Jsi_Strstr(query, \" %s\");",
          "4295:     if (!cPtr) cPtr = Jsi_Strstr(query, \"\\t%s\");",
          "4296:     if (!dbopts) {",
          "4298:         return -1;",
          "4299:     }",
          "4300:     if (!dbopts[0].data) {",
          "4302:         return -1;",
          "4303:     }",
          "4304:     if (!dbopts[0].sf) {",
          "4306:         return -1;",
          "4307:     }",
          "4308:     for (k=0; dbopts[k].sf; k++) {",
          "",
          "[Removed Lines]",
          "4297:         Jsi_LogError(\"dbopts may not be null\");",
          "4301:         Jsi_LogError(\"data may not be null\");",
          "4305:         Jsi_LogError(\"specs may not be null\");",
          "",
          "[Added Lines]",
          "4301:         Jsi_LogErrorExt(\"dbopts may not be null\");",
          "4305:         Jsi_LogErrorExt(\"data may not be null\");",
          "4309:         Jsi_LogErrorExt(\"specs may not be null\");",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4315:                 if (k==0) {",
          "4316:                     if (specPtr->flags&JSI_OPT_DB_ROWID) {",
          "4317:                         if (specPtr->id != JSI_OPTION_INT64) {",
          "4319:                             return -1;",
          "4320:                         }",
          "4321:                         ob.rowidPtr = specPtr;",
          "",
          "[Removed Lines]",
          "4318:                             Jsi_LogError(\"rowid flag must be a wide field: %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "4322:                             Jsi_LogErrorExt(\"rowid flag must be a wide field: %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4324:                         if (specPtr->id == JSI_OPTION_BOOL || specPtr->id == JSI_OPTION_INT) {",
          "4325:                             ob.dirtyPtr = specPtr;",
          "4326:                         } else {",
          "4328:                             return -1;",
          "4329:                         }",
          "4330:                     }",
          "",
          "[Removed Lines]",
          "4327:                             Jsi_LogError(\"dirty flag must be a int/bool field: %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "4331:                             Jsi_LogErrorExt(\"dirty flag must be a int/bool field: %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4371:     }",
          "4373:     if (!Jsi_Strncasecmp(query, \"SELECT\", 6))",
          "4376:     DbEvalContext sEval = {};",
          "4377:     int insert = 0, replace = 0, update = 0;",
          "",
          "[Removed Lines]",
          "4374:         return dbOptSelect(jdb, query, &ob, dbopts);",
          "",
          "[Added Lines]",
          "4378:         return dbOptSelect(db, query, &ob, dbopts);",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4384: #endif",
          "4385:     if (dbopts->noCache)",
          "4386:         sEval.nocache = 1;",
          "4388:         return -1;",
          "4389:     int dataMax = dbopts[0].arrSize;",
          "4390:     cnt = 0;",
          "",
          "[Removed Lines]",
          "4387:     if (dbEvalInit(interp, &sEval, jdb, NULL, dStr, 0, 0) != JSI_OK)",
          "",
          "[Added Lines]",
          "4391:     if (dbEvalInit(interp, &sEval, db, NULL, dStr, 0, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4450:     } else if (!Jsi_Strncasecmp(query, \"DELETE\", 6)) {",
          "4451:         Jsi_DSAppend(dStr, query, NULL);",
          "4452:     } else {",
          "4454:         return -1;",
          "4455:     }",
          "4456:     sEval.zSql = Jsi_DSValue(dStr);",
          "4460:     int rc, bindMax = -1, dataIdx = 0;",
          "4461:     cnt = 0;",
          "",
          "[Removed Lines]",
          "4453:         Jsi_LogError(\"unrecognized query \\\"%s\\\": expected one of: SELECT, UPDATE, INSERT, REPLACE or DELETE\", query);",
          "4457:     if (jdb->echo && sEval.zSql)",
          "4458:         Jsi_LogInfo(\"SQL-ECHO: %s\\n\", sEval.zSql);",
          "",
          "[Added Lines]",
          "4457:         Jsi_LogErrorExt(\"unrecognized query \\\"%s\\\": expected one of: SELECT, UPDATE, INSERT, REPLACE or DELETE\", query);",
          "4461:     if (db->echo && sEval.zSql)",
          "4462:         Jsi_LogInfoExt(\"SQL-ECHO: %s\", sEval.zSql);",
          "4463:     Jsi_LogTraceExt(\"SQL-QUERY: %s\", sEval.zSql);",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4463:     int isnew = (replace||insert);",
          "4464:     int didBegin = 0;",
          "4465:     DbEvalContext *p = &sEval;",
          "4467:     if( rc!=JSI_OK ) return -1;",
          "4468:     if (dataMax>1 && !dbopts->noBegin) {",
          "4469:         didBegin = 1;",
          "4471:             goto bail;",
          "4472:     }",
          "4473:     while (dataIdx<dataMax) {",
          "",
          "[Removed Lines]",
          "4466:     rc = dbPrepareStmt(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);",
          "4470:         if (!dbExecCmd(jdb, JSI_DBQUERY_BEGIN_STR, &erc))",
          "",
          "[Added Lines]",
          "4471:     rc = dbPrepareStmt(p->db, p->zSql, &p->zSql, &p->pPreStmt);",
          "4475:         if (!dbExecCmd(db, JSI_DBQUERY_BEGIN_STR, &erc))",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4489:             isDirty &= ~(1<<(bit));",
          "4491:         }",
          "4493:         if( rc!=JSI_OK )",
          "4494:             goto bail;",
          "4495:         bindMax = 1;",
          "4496:         rc = dbEvalStepSub(p, (dataIdx>=dataMax), &erc);",
          "4497:         if (rc == JSI_ERROR)",
          "4498:             goto bail;",
          "4500:         if (rc != JSI_OK && rc != JSI_BREAK)",
          "4501:             break;",
          "4502:         if (ob.rowidPtr && isnew) {",
          "",
          "[Removed Lines]",
          "4492:         rc = dbBindOptionStmt(jdb, p->pPreStmt->pStmt, &ob, dataIdx, bindMax, dbopts);",
          "4499:         cnt += sqlite3_changes(jdb->db);",
          "",
          "[Added Lines]",
          "4497:         rc = dbBindOptionStmt(db, p->pPreStmt->pStmt, &ob, dataIdx, bindMax, dbopts);",
          "4504:         cnt += sqlite3_changes(db->db);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4506:             else",
          "4507:                 rec = (char*)rec + (dataIdx * structSize);",
          "4508:             char *ptr = (char*)rec + ob.rowidPtr->offset;",
          "4510:         }",
          "4511:         dataIdx++;",
          "4512:     }",
          "4514:         rc = JSI_ERROR;",
          "4515:     dbEvalFinalize(&sEval);",
          "4516:     if( rc==JSI_BREAK ) {",
          "",
          "[Removed Lines]",
          "4513:     if (didBegin && !dbExecCmd(jdb, JSI_DBQUERY_COMMIT_STR, &erc))",
          "",
          "[Added Lines]",
          "4518:     if (didBegin && !dbExecCmd(db, JSI_DBQUERY_COMMIT_STR, &erc))",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4521: bail:",
          "4522:     dbEvalFinalize(&sEval);",
          "4523:     if (didBegin)",
          "4525:     return erc;",
          "4526: }",
          "",
          "[Removed Lines]",
          "4524:         dbExecCmd(jdb, JSI_DBQUERY_ROLLBACK_STR, NULL);",
          "",
          "[Added Lines]",
          "4529:         dbExecCmd(db, JSI_DBQUERY_ROLLBACK_STR, NULL);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4531: #undef Jsi_DbNew",
          "4532: #endif",
          "4533: int",
          "4535: {",
          "4537: #ifdef JSI_DBQUERY_ERRORCMD",
          "4538:     if (rc<0)",
          "4540: #endif",
          "4541:     return rc;",
          "4542: }",
          "4545: {",
          "4548: }",
          "",
          "[Removed Lines]",
          "4534: Jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dbopts, const char *query)",
          "4536:     int rc = jsi_DbQuery(jdb, dbopts, query);",
          "4539:         rc = JSI_DBQUERY_ERRORCMD(jdb, specs, data, arrSize, query, dopts, rc);",
          "4544: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* jdb)",
          "4546:     SQLSIGASSERT(jdb,DB);",
          "4547:     return jdb->db;",
          "",
          "[Added Lines]",
          "4539: Jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dbopts, const char *query)",
          "4541:     int rc = jsi_DbQuery(db, dbopts, query);",
          "4544:         rc = JSI_DBQUERY_ERRORCMD(db, specs, data, arrSize, query, dopts, rc);",
          "4549: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* db)",
          "4551:     SQLSIGASSERT(db,DB);",
          "4552:     return db->db;",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "4648:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4649:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4650:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4652:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4653:     Jsi_DecrRefCount(interp, info);",
          "4654:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4651:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&dbObjCmd, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "[Added Lines]",
          "4656:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "4689: #endif",
          "4691: int",
          "4693: {",
          "4694:     if (!jsi_dbVfsPtr) {",
          "4695:         printf( \"Sqlite unsupported\\n\");",
          "4696:         return -1;",
          "4697:     }",
          "4699: }",
          "4702: {",
          "4703:     if (!jsi_dbVfsPtr) {",
          "4704:         printf( \"Sqlite unsupported\\n\");",
          "4705:         return NULL;",
          "4706:     }",
          "4708: }",
          "4710: Jsi_Db* Jsi_DbNew(const char *zFile, int inFlags /* JSI_DBI_* */)",
          "",
          "[Removed Lines]",
          "4692: Jsi_DbQuery(Jsi_Db *jdb, Jsi_CDataDb *dPtr, const char *query)",
          "4698:     return jsi_dbVfsPtr->dbcQuery(jdb, dPtr, query);",
          "4701: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* jdb)",
          "4707:     return jsi_dbVfsPtr->dbHandle(interp, jdb);",
          "",
          "[Added Lines]",
          "4697: Jsi_DbQuery(Jsi_Db *db, Jsi_CDataDb *dPtr, const char *query)",
          "4703:     return jsi_dbVfsPtr->dbcQuery(db, dPtr, query);",
          "4706: void *Jsi_DbHandle(Jsi_Interp *interp, Jsi_Db* db)",
          "4712:     return jsi_dbVfsPtr->dbHandle(interp, db);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "4717: }",
          "4719: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4725: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"d977e4091854ba810b69d2f9aba2c778\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"b43953bc9ba7fc791f74958478337968\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:     Jsi_Mutex*(*_Jsi_MutexNew)(Jsi_Interp *interp, int timeout, int flags);",
          "377:     void*(*_Jsi_CurrentThread)(void);",
          "378:     void*(*_Jsi_InterpThread)(Jsi_Interp *interp);",
          "380:     Jsi_Event*(*_Jsi_EventNew)(Jsi_Interp *interp, Jsi_EventHandlerProc *callback, void* data);",
          "381:     void(*_Jsi_EventFree)(Jsi_Interp *interp, Jsi_Event* event);",
          "382:     int(*_Jsi_EventProcess)(Jsi_Interp *interp, int maxEvents);",
          "",
          "[Removed Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsg)(Jsi_Interp *interp, uint level, const char *format,...);",
          "",
          "[Added Lines]",
          "379:     Jsi_RC(*_Jsi_LogMsgExt)(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint level, const char *format,...);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     Jsi_Value*(*_Jsi_ValueNewRegExp)(Jsi_Interp *interp, const char *regtxt, const char* modifiers);",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val);",
          "452:     void *endPtr;",
          "453: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "804:     Jsi_MutexNew,\\",
          "805:     Jsi_CurrentThread,\\",
          "806:     Jsi_InterpThread,\\",
          "808:     Jsi_EventNew,\\",
          "809:     Jsi_EventFree,\\",
          "810:     Jsi_EventProcess,\\",
          "",
          "[Removed Lines]",
          "807:     Jsi_LogMsg,\\",
          "",
          "[Added Lines]",
          "808:     Jsi_LogMsgExt,\\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "877:     Jsi_UserObjName,\\",
          "878:     Jsi_ValueNewRegExp,\\",
          "879:     Jsi_ObjGetValues,\\",
          "880:     NULL",
          "882: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881:     Jsi_CommandPkgOpts,\\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1228: #define Jsi_MutexNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_MutexNew(n0,n1,n2))",
          "1229: #define Jsi_CurrentThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_CurrentThread(n0))",
          "1230: #define Jsi_InterpThread(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpThread(n0))",
          "1232: #define Jsi_EventNew(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_EventNew(n0,n1,n2))",
          "1233: #define Jsi_EventFree(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventFree(n0,n1))",
          "1234: #define Jsi_EventProcess(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_EventProcess(n0,n1))",
          "",
          "[Removed Lines]",
          "1231: #define Jsi_LogMsg(n0,n1,n2,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsg(n0,n1,n2,##__VA_ARGS__))",
          "",
          "[Added Lines]",
          "1233: #define Jsi_LogMsgExt(n0,n1,n2,n3,...) JSISTUBCALL(jsiStubsPtr, _Jsi_LogMsgExt(n0,n1,n2,n3,##__VA_ARGS__))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1301: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1302: #define Jsi_ValueNewRegExp(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ValueNewRegExp(n0,n1,n2))",
          "1303: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1305: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: jsi_IntData jsiIntData = {};",
          "75: #ifdef JSI_LITE_ONLY",
          "77:     va_list va;",
          "78:     va_start (va, format);",
          "79:     const char *mt = (code <= JSI__LOGLAST ? jsi_LogCodes[code] : \"\");",
          "",
          "[Removed Lines]",
          "76: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint code, const char *format,...) {",
          "",
          "[Added Lines]",
          "76: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts *popts, uint code, const char *format,...) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "114:         return JSI_ERROR;",
          "117:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "118:     char buf[JSI_BUFSIZ/2];",
          "119:     const char *term = \"\", *pterm=pbuf;",
          "",
          "[Removed Lines]",
          "112: Jsi_RC Jsi_LogMsg(Jsi_Interp *interp, uint code, const char *format,...) {",
          "113:     if (Jsi_InterpGone(interp))",
          "115:     va_list va;",
          "116:     va_start (va, format);",
          "",
          "[Added Lines]",
          "112: Jsi_RC Jsi_LogMsgExt(Jsi_Interp *interp, Jsi_PkgOpts* popts, uint code, const char *format,...) {",
          "113:     if (!interp || Jsi_InterpGone(interp))",
          "115:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "116:     uint log = 0, mask, cshift = (1<<code);",
          "117:     if (!popts)",
          "118:         log = jsi_GetLogFlag(interp, code);",
          "119:     else {",
          "120:         mask = popts->modConf.logmask;",
          "121:         log = popts->modConf.log;",
          "122:         log = ((~mask|log)&cshift);",
          "123:         isExt = 1;",
          "124:         ftail = 1;",
          "125:     }",
          "126:     if (!log) {",
          "127:         if (code == JSI_LOG_ERROR)",
          "128:             puts(\"FUCK\");",
          "129:         else",
          "130:             return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "131:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     Jsi_OptionSpec *oep = interp->parseMsgSpec;",
          "128:     const char *pps = \"\", *curFile = \"\";",
          "129:     char *ss = interp->lastPushStr;",
          "131:     jsi_Frame *fp = interp->framePtr;",
          "134:     if (interp==NULL)",
          "135:         interp = jsiIntData.mainInterp;",
          "136:     LastInterp = interp;",
          "",
          "[Removed Lines]",
          "130:     uint log = jsi_GetLogFlag(interp, code);",
          "132:     if (!log)",
          "133:         return JSI_OK;",
          "",
          "[Added Lines]",
          "146:     va_list va;",
          "147:     va_start (va, format);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:     if (!Jsi_Strchr(format,'\\n')) term = \"\\n\";",
          "175:     if (interp->typeCheck.strict && interp->lastParseOpt)",
          "176:         ss = (char*)Jsi_ValueToString(interp, interp->lastParseOpt, NULL);",
          "178:         char psbuf[JSI_BUFSIZ/6];",
          "179:         if (Jsi_Strchr(ss,'%')) {",
          "180:             char *s = ss, *sd = psbuf;",
          "",
          "[Removed Lines]",
          "177:     if (code != JSI_LOG_INFO && code < JSI_LOG_TEST && interp && ss && ss[0]) {",
          "",
          "[Added Lines]",
          "191:     if (isExt)",
          "192:         snprintf(pbuf, sizeof(pbuf), \"    (c-extn [%s])\", popts->cmdSpec->name);",
          "193:     else if (code != JSI_LOG_INFO && code < JSI_LOG_TEST && ss && ss[0]) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         }",
          "226:     }",
          "227:     char *cpt;",
          "229:         curFile = cpt+1;",
          "230:     if (curFile && curFile[0] && Jsi_Strchr(curFile,'%')==0 && !islog) {",
          "231:         if (!interp->subOpts.logColNums)",
          "",
          "[Removed Lines]",
          "228:     if (curFile && interp->logOpts.ftail && (cpt =Jsi_Strrchr(curFile, '/')) && cpt[1])",
          "",
          "[Added Lines]",
          "244:     if (curFile && ftail && (cpt =Jsi_Strrchr(curFile, '/')) && cpt[1])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:     if ((code & jsi_fatalexit) && !interp->opts.no_exit)",
          "284:         jsi_DoExit(interp, 1);",
          "285:     return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "289: }",
          "291: const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str)",
          "",
          "[Removed Lines]",
          "287:     va_end(va);",
          "288:     return JSI_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #ifndef JSI_LITE_ONLY",
          "2: #if JSI__WEBSOCKET==1",
          "3: #if JSI__MEMDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define JSI_EXT_OPTS cmdPtr->popts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: typedef struct {",
          "98: static Jsi_OptionSpec wsObjCmd_Specs[] =",
          "99: {",
          "103: };",
          "105: typedef struct {",
          "",
          "[Removed Lines]",
          "94: } ws_ObjCmd;",
          "96: static ws_ObjCmd wsObjCmd = {};",
          "100:     JSI_OPT(INT,   ws_ObjCmd, activeCnt, .help=\"Number of active objects\"),",
          "101:     JSI_OPT(INT,   ws_ObjCmd, newCnt,    .help=\"Number of new calls\"),",
          "102:     JSI_OPT_END(ws_ObjCmd, .help=\"Options for WebSocket module\")",
          "",
          "[Added Lines]",
          "95: } ws_Pkg_Status;",
          "97: static ws_Pkg_Status ws_PkgStatus = {};",
          "101:     JSI_OPT(INT,   ws_Pkg_Status, activeCnt, .help=\"Number of active objects\"),",
          "102:     JSI_OPT(INT,   ws_Pkg_Status, newCnt,    .help=\"Number of new calls\"),",
          "103:     JSI_OPT_END(ws_Pkg_Status, .help=\"Options for WebSocket module\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     uint sig;",
          "118:     Jsi_Interp *interp;",
          "120:     Jsi_Hash *pssTable, *handlers, *fileHash;",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "",
          "[Removed Lines]",
          "119:     ws_ObjCmd *_;",
          "",
          "[Added Lines]",
          "120:     ws_Pkg_Status *_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:     const char *curRoot;",
          "182:     int sfd;        // File descriptor for http.",
          "183:     Jsi_DString cName;",
          "184: } jsi_wsCmdObj;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     Jsi_PkgOpts *popts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:         const char *hn = Jsi_ValueArrayIndexToStr(interp, hdrs, i, NULL),",
          "828:         if (!hn || !hv || !(len=Jsi_Strlen(hn))) {",
          "830:             return false;",
          "831:         }",
          "832:         if (hn[len-1] != ':') {",
          "834:             return false;",
          "835:         }",
          "836:         if (lws_add_http_header_by_name(wsi, (const uchar *)hn, (const uchar *)hv, hvl, &p, end))",
          "",
          "[Removed Lines]",
          "829:             Jsi_LogWarn(\"Header invalid: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "833:             Jsi_LogWarn(\"Header name must end in colon: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "",
          "[Added Lines]",
          "831:             Jsi_LogWarnExt(\"Header invalid: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "835:             Jsi_LogWarnExt(\"Header name must end in colon: %s %s\", (hn?hn:\"\"), (hv?hv:\"\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "910:         if (mVal) {",
          "911:             bool b = 0;",
          "912:             if (Jsi_ValueGetBoolean(interp, mVal, &b) != JSI_OK) {",
          "914:                 Jsi_DecrRefCount(interp, cmdPtr->ssiExts);",
          "915:                 cmdPtr->ssiExts = NULL;",
          "916:             }",
          "",
          "[Removed Lines]",
          "913:                 Jsi_LogWarn(\"expected bool for ssiExts '%s': disabling all\\n\", ext);",
          "",
          "[Added Lines]",
          "915:                 Jsi_LogWarnExt(\"expected bool for ssiExts '%s': disabling all\\n\", ext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "979:         llen = se-sp;",
          "980:         Jsi_DSSetLength(&lStr, 0);",
          "981:         cp = Jsi_DSAppendLen(&lStr, sp, llen);",
          "983:         if (!II[ii].elide)",
          "984:             Jsi_DSAppendLen(dStr, cs, sp-cs-4);",
          "",
          "[Removed Lines]",
          "982:         if (Jsi_Strchr(cp, '\\n')) { rc = Jsi_LogError(\"unexpected newline in directive \\\"%.10s\\\"\", cp); break; }",
          "",
          "[Added Lines]",
          "984:         if (Jsi_Strchr(cp, '\\n')) { rc = Jsi_LogErrorExt(\"unexpected newline in directive \\\"%.10s\\\"\", cp); break; }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093:                 val = Jsi_ValueObjLookup(interp, pss->queryObj, cp, 0);",
          "1094:             if (!val) {",
          "1095:                 if (req) { msg = \"symbol not found\"; break; }",
          "1097:             } else if (Jsi_ValueGetBoolean(interp, val, &nifval) != JSI_OK) {",
          "1098:                 const char *valStr = NULL;",
          "1099:                 if (val) valStr = Jsi_ValueString(interp, val, NULL);",
          "1100:                 if (!valStr || Jsi_GetBool(interp, valStr, &nifval) != JSI_OK) {",
          "1101:                     if (!warn) { msg = \"symbol not a boolean\"; break; }",
          "1103:                 }",
          "1104:             }",
          "1105:             if (inot) nifval = !nifval;",
          "",
          "[Removed Lines]",
          "1096:                 if (warn) Jsi_LogWarn(\"symbol \\\"%s\\\" not found: %s\", cp, fbuf);",
          "1102:                     Jsi_LogWarn(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "",
          "[Added Lines]",
          "1098:                 if (warn) Jsi_LogWarnExt(\"symbol \\\"%s\\\" not found: %s\", cp, fbuf);",
          "1104:                     Jsi_LogWarnExt(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1139:     }",
          "1140:     if (msg) {",
          "1141:         while (*fname=='/') fname++;",
          "1143:     }",
          "1144:     Jsi_DSFree(&tStr);",
          "1145:     Jsi_DSFree(&lStr);",
          "",
          "[Removed Lines]",
          "1142:         rc = Jsi_LogError(\"SHTML Error in \\\"%s\\\": %s: at \\\"%.40s\\\" \", fname, msg, sp);",
          "",
          "[Added Lines]",
          "1144:         rc = Jsi_LogErrorExt(\"SHTML Error in \\\"%s\\\": %s: at \\\"%.40s\\\" \", fname, msg, sp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1192: {",
          "1193:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "1194:     if (!cmdPtr)",
          "1196:     int vlen, nlen;",
          "1197:     const char *kstr, *vstr, *nstr = Jsi_ValueArrayIndexToStr(interp, args, 0, &nlen);",
          "1198:     if (!nstr)",
          "1200:     Jsi_Value *v, *a = cmdPtr->pathAliases;",
          "1201:     if (!a|| !Jsi_ValueIsObjType(interp, a, JSI_OT_OBJECT)) return JSI_OK;",
          "1202:     Jsi_IterObj *io = Jsi_IterObjNew(interp, NULL);",
          "",
          "[Removed Lines]",
          "1195:         return Jsi_LogError(\"Apply to non-websock object\");",
          "1199:         return Jsi_LogError(\"arg 1: expected string\");",
          "",
          "[Added Lines]",
          "1197:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "1201:         return Jsi_LogErrorExt(\"arg 1: expected string\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1355:                     Jsi_DecrRefCount(interp, ret);",
          "1357:                     if (rc != JSI_OK) {",
          "1359:                         return -1;",
          "1360:                     }",
          "1361:                     ok = rb;",
          "",
          "[Removed Lines]",
          "1358:                         Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "1360:                         Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1464:             Jsi_DecrRefCount(interp, ret);",
          "1466:             if (rc != JSI_OK) {",
          "1468:             } else {",
          "1469:                 Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1470:                 if (mVal)",
          "",
          "[Removed Lines]",
          "1467:                 Jsi_LogWarn(\"websock mimeLookupFunc bad eval\");",
          "",
          "[Added Lines]",
          "1469:                 Jsi_LogWarnExt(\"websock mimeLookupFunc bad eval\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1517:                 if (!vrc || !Jsi_ValueIsFunction(interp, vrc)) {",
          "1518:                     if (vrc)",
          "1519:                         Jsi_DecrRefCount(interp, vrc);",
          "1521:                     jsi_wsServeString(pss, wsi, \"Failed to autoload handler\", 404, NULL, NULL);",
          "1522:                     return -1;",
          "1523:                 }",
          "",
          "[Removed Lines]",
          "1520:                     Jsi_LogError(\"Failed to autoload handle: %s\", hstr);",
          "",
          "[Added Lines]",
          "1522:                     Jsi_LogErrorExt(\"Failed to autoload handle: %s\", hstr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1538:                 if (Jsi_InterpGone(interp))",
          "1539:                     return -1;",
          "1540:                 if (evrc != JSI_OK || !vrc || !Jsi_ValueIsObjType(interp, vrc, JSI_OT_OBJECT)) {",
          "1542:                     jsi_wsServeString(pss, wsi, \"Failed to load obj\", 404, NULL, NULL);",
          "1543:                     return -1;",
          "1544:                 }",
          "1545:                 Jsi_Value *fvrc = Jsi_ValueObjLookup(interp, vrc, \"parse\", 0);",
          "1546:                 if (!fvrc || !Jsi_ValueIsFunction(interp, fvrc)) {",
          "1548:                     jsi_wsServeString(pss, wsi, \"Failed to find parse\", 404, NULL, NULL);",
          "1549:                     return -1;",
          "1550:                 }",
          "",
          "[Removed Lines]",
          "1541:                     Jsi_LogError(\"Failed to load obj: %s\", hstr);",
          "1547:                     Jsi_LogError(\"Failed to find parse: %s\", hstr);",
          "",
          "[Added Lines]",
          "1543:                     Jsi_LogErrorExt(\"Failed to load obj: %s\", hstr);",
          "1549:                     Jsi_LogErrorExt(\"Failed to find parse: %s\", hstr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1576:             }",
          "1578:             if (evrc != JSI_OK) {",
          "1580:             } else if ((!vrc) ||",
          "1581:                 (!(vStr = Jsi_ValueString(interp, vrc, &strLen)))) {",
          "1583:             } else {",
          "1584:                 hrc = jsi_wsServeString(pss, wsi, vStr, 0, NULL, mime);",
          "1585:             }",
          "",
          "[Removed Lines]",
          "1579:                 Jsi_LogError(\"failure in websocket handler\");",
          "1582:                 Jsi_LogError(\"failed to get result\");",
          "",
          "[Added Lines]",
          "1581:                 Jsi_LogErrorExt(\"failure in websocket handler\");",
          "1584:                 Jsi_LogErrorExt(\"failed to get result\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1779:             return JSI_OK;",
          "1780:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "1781:         if ((cmdPtr->echo||(pss && pss->echo)) && inPtr)",
          "1783:     }",
          "1784:     vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, n, 0));",
          "1785:     Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "1782:             Jsi_LogInfo(\"WS-RECV: %s\\n\", inPtr);",
          "",
          "[Added Lines]",
          "1784:             Jsi_LogInfo(\"WS-RECV: %s\", inPtr);",
          "1785:         Jsi_LogTraceExt(\"WS-RECV: %s\", inPtr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1834:     Jsi_DecrRefCount(interp, vpargs);",
          "1835:     Jsi_DecrRefCount(interp, ret);",
          "1836:     if (rc != JSI_OK) {",
          "1838:         return -1;",
          "1839:     }",
          "1840:     return 0;",
          "",
          "[Removed Lines]",
          "1837:         Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "1840:         Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2044:             Jsi_DecrRefCount(interp, vpargs);",
          "2045:             Jsi_DecrRefCount(interp, ret);",
          "2046:             if (rc != JSI_OK) {",
          "2048:                 return 1;",
          "2049:             }",
          "2050:             if (killcon)",
          "",
          "[Removed Lines]",
          "2047:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2050:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2333:             Jsi_DecrRefCount(interp, vpargs);",
          "2334:             Jsi_DecrRefCount(interp, ret);",
          "2335:             if (rc != JSI_OK) {",
          "2337:                 return 1;",
          "2338:             }",
          "2339:             if (killcon)",
          "",
          "[Removed Lines]",
          "2336:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2339:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2368:             Jsi_DecrRefCount(interp, vpargs);",
          "2369:             Jsi_DecrRefCount(interp, ret);",
          "2370:             if (rc != JSI_OK)",
          "2372:         }",
          "2373:         break;",
          "",
          "[Removed Lines]",
          "2371:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2374:                 return Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2382:         if (cmdPtr->onClose || pss->onClose) {",
          "2383:             rc = jsi_wsrecv_callback(interp, cmdPtr, pss, inPtr, len, 1, 0);",
          "2384:             if (rc != JSI_OK)",
          "2386:         }",
          "2387:         jsi_wsdeletePss(pss);",
          "2388:         if (cmdPtr->stats.connectCnt<=0 && cmdPtr->onCloseLast && !Jsi_InterpGone(interp)) {",
          "",
          "[Removed Lines]",
          "2385:                 return Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2388:                 return Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2481:             if (inPtr != in)",
          "2482:                 Jsi_Free(inPtr);",
          "2483:             if (rc != JSI_OK) {",
          "2485:                 return 1;",
          "2486:             }",
          "2487:         }",
          "",
          "[Removed Lines]",
          "2484:                 Jsi_LogError(\"websock bad rcv eval\");",
          "",
          "[Added Lines]",
          "2487:                 Jsi_LogErrorExt(\"websock bad rcv eval\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2502:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2504:     if (!cmdPtr)",
          "2506:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2507:     if (cmdPtr->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2509:     jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "2510:     return Jsi_OptionsConf(interp, WSOptions, cmdPtr, opts, ret, 0);",
          "",
          "[Removed Lines]",
          "2505:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "2508:         return Jsi_LogError(\"WebSocket conf() is disabled for set\");",
          "",
          "[Added Lines]",
          "2508:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "2511:         return Jsi_LogErrorExt(\"WebSocket conf() is disabled for set\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2517:     Jsi_RC rc = JSI_OK;",
          "2518:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2519:     if (!cmdPtr)",
          "2521:     Jsi_Value *v, *valPtr = Jsi_ValueArrayIndex(interp, args, 0);",
          "2522:     Jsi_Number vid;",
          "2523:     if (Jsi_ValueGetNumber(interp, valPtr, &vid) != JSI_OK || vid < 0)",
          "2525:     int id = (int)vid;",
          "2526:     jsi_wsPss *pss = NULL;",
          "2527:     Jsi_HashEntry *hPtr;",
          "",
          "[Removed Lines]",
          "2520:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "2524:         return Jsi_LogError(\"Expected connection number id\");",
          "",
          "[Added Lines]",
          "2523:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "2527:         return Jsi_LogErrorExt(\"Expected connection number id\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2537:     }",
          "2539:     if (!pss)",
          "2541:     switch (op) {",
          "2542:         case 0:",
          "2543:             v = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "2540:         return Jsi_LogError(\"No such id: %d\", id);",
          "",
          "[Added Lines]",
          "2543:         return Jsi_LogErrorExt(\"No such id: %d\", id);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2578: {",
          "2579:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2580:     if (!cmdPtr)",
          "2582:     const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2583:     Jsi_DString dStr = {\"[\"};",
          "2584:     jsi_wsPss *pss = NULL;",
          "",
          "[Removed Lines]",
          "2581:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2584:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2615:     if (ts<0||te<0||se<0||sx<0)",
          "2617:     else {",
          "2618:         Jsi_DSAppendLen(tStr, s, ts-s);",
          "2619:         Jsi_DSAppend(tStr, \"let template=`\", NULL);",
          "",
          "[Removed Lines]",
          "2616:         rc = Jsi_LogError(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "",
          "[Added Lines]",
          "2619:         rc = Jsi_LogErrorExt(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2654:     Jsi_HashEntry *hPtr;",
          "2655:     jsi_wsHander *hdlPtr;",
          "2656:     if (!cmdPtr)",
          "2658:     WSSIGASSERT(cmdPtr, OBJ);",
          "2659:     int argc = Jsi_ValueGetLength(interp, args);",
          "2660:     if (argc == 0) {",
          "",
          "[Removed Lines]",
          "2657:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2660:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2678:     }",
          "2679:     const char *key = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2680:     if (!key || !*key)",
          "2682:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "2683:     if (Jsi_ValueIsNull(interp, valPtr)) {",
          "2684:         hPtr = Jsi_HashEntryFind(cmdPtr->handlers, key);",
          "",
          "[Removed Lines]",
          "2681:         return Jsi_LogError(\"handler: extension key must not be empty: %s\", key);",
          "",
          "[Added Lines]",
          "2684:         return Jsi_LogErrorExt(\"handler: extension key must not be empty: %s\", key);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2694:         return JSI_OK;",
          "2695:     }",
          "2696:     if (Jsi_ValueIsFunction(interp, valPtr)==0 && Jsi_ValueIsString(interp, valPtr)==0)",
          "2698:     Jsi_Value *argPtr = Jsi_ValueArrayIndex(interp, args, 2);",
          "2699:     if (argPtr) {",
          "2700:         if (Jsi_ValueIsNull(interp, argPtr))",
          "2701:             argPtr = NULL;",
          "2702:         else if (!Jsi_ValueIsString(interp, argPtr))",
          "2704:     }",
          "2705:     hPtr = Jsi_HashEntryNew(cmdPtr->handlers, key, NULL);",
          "2706:     if (!hPtr)",
          "",
          "[Removed Lines]",
          "2697:         return Jsi_LogError(\"expected string, function or null\");",
          "2703:             return Jsi_LogError(\"expected a string\");",
          "",
          "[Added Lines]",
          "2700:         return Jsi_LogErrorExt(\"expected string, function or null\");",
          "2706:             return Jsi_LogErrorExt(\"expected a string\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2725: {",
          "2726:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2727:     if (!cmdPtr)",
          "2729:     WSSIGASSERT(cmdPtr, OBJ);",
          "2730:     jsi_wsPss *pss;",
          "2731:     Jsi_HashEntry *hPtr;",
          "",
          "[Removed Lines]",
          "2728:         return Jsi_LogError(\"Apply in a non-websock object\");",
          "",
          "[Added Lines]",
          "2731:         return Jsi_LogErrorExt(\"Apply in a non-websock object\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2735:     int id = -1, argc = Jsi_ValueGetLength(interp, args);",
          "2736:     Jsi_DString eStr = {};",
          "2737:     if (argc!=2)",
          "2739:     Jsi_Number dnum;",
          "2740:     Jsi_Value *darg = Jsi_ValueArrayIndex(interp, args, 0);",
          "2741:     if (Jsi_ValueGetNumber(interp, darg, &dnum) != JSI_OK)",
          "2743:     id = (int)dnum;",
          "2745:     if (!str)",
          "2746:         str = (char*)Jsi_ValueGetDString(interp, arg, &eStr, JSI_OUTPUT_JSON);",
          "2748:     if (cmdPtr->echo)",
          "2751:     for (hPtr = Jsi_HashSearchFirst(cmdPtr->pssTable, &cursor);",
          "2752:         hPtr != NULL; hPtr = Jsi_HashSearchNext(&cursor)) {",
          "",
          "[Removed Lines]",
          "2738:         return Jsi_LogError(\"wrong args\");",
          "2742:         return Jsi_LogError(\"invalid id\");",
          "2749:         Jsi_LogInfo(\"WS-SEND: %s\\n\", str);",
          "",
          "[Added Lines]",
          "2741:         return Jsi_LogErrorExt(\"wrong args\");",
          "2745:         return Jsi_LogErrorExt(\"invalid id\");",
          "2752:         Jsi_LogInfo(\"WS-SEND: %s\", str);",
          "2753:     Jsi_LogTraceExt(\"WS-SEND: %s\", str);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2760:             Jsi_StackPush(pss->stack, msg);",
          "2761:             pss->stats.msgQLen++;",
          "2762:             if (!cmdPtr->echo && pss->echo)",
          "2764:         }",
          "2765:     }",
          "",
          "[Removed Lines]",
          "2763:                 Jsi_LogInfo(\"WS-SEND: %s\\n\", str);",
          "",
          "[Added Lines]",
          "2767:                 Jsi_LogInfo(\"WS-SEND: %s\", str);",
          "2768:             Jsi_LogTraceExt(\"WS-SEND: %s\", str);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2832:     Jsi_DecrRefCount(interp, vpargs);",
          "2833:     Jsi_DecrRefCount(interp, ret);",
          "2834:     if (rc != JSI_OK) {",
          "2836:         Jsi_DecrRefCount(interp, cmdPtr->onModify);",
          "2837:         cmdPtr->onModify = NULL;",
          "2838:     }",
          "",
          "[Removed Lines]",
          "2835:         Jsi_LogWarn(\"websock bad onModify eval: disabling\");",
          "",
          "[Added Lines]",
          "2840:         Jsi_LogWarnExt(\"websock bad onModify eval: disabling\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2916: {",
          "2917:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "2918:     if (!cmdPtr)",
          "2920:     if (!cmdPtr->noUpdate)",
          "2921:         jsi_wsService(cmdPtr);",
          "2922:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2919:         return Jsi_LogError(\"Apply to non-websock object\");",
          "",
          "[Added Lines]",
          "2924:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3030: {",
          "3031:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "3032:     if (!cmdPtr)",
          "3034:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "3035:     if (val)",
          "3036:         return jsi_wsFileAdd(interp, cmdPtr, val);",
          "",
          "[Removed Lines]",
          "3033:         return Jsi_LogError(\"Apply to non-websock object\");",
          "",
          "[Added Lines]",
          "3038:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3044: {",
          "3045:     jsi_wsCmdObj *cmdPtr = (jsi_wsCmdObj*)Jsi_UserObjGetData(interp, _this, funcPtr);",
          "3046:     if (!cmdPtr)",
          "3048: #ifndef OMIT_LWS_WITH_SERVER_STATUS",
          "3049:     char cbuf[JSI_BUFSIZ*2];",
          "3050:     lws_json_dump_context(cmdPtr->context, cbuf, sizeof(cbuf), 0);",
          "3051:     return Jsi_JSONParse(interp, cbuf, ret, 0);",
          "3052: #else",
          "3054: #endif",
          "3055: }",
          "",
          "[Removed Lines]",
          "3047:         return Jsi_LogError(\"Apply to non-websock object\");",
          "3053:     return Jsi_LogError(\"unsupported\");",
          "",
          "[Added Lines]",
          "3052:         return Jsi_LogErrorExt(\"Apply to non-websock object\");",
          "3058:     return Jsi_LogErrorExt(\"unsupported\");",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3114:     cmdPtr = (jsi_wsCmdObj*)Jsi_Calloc(1, sizeof(*cmdPtr));",
          "3115:     cmdPtr->sig = JWS_SIG_OBJ;",
          "3117:     cmdPtr->_->newCnt++;",
          "3118:     cmdPtr->_->activeCnt++;",
          "3119:     cmdPtr->port = 8080;",
          "",
          "[Removed Lines]",
          "3116:     cmdPtr->_ = &wsObjCmd;",
          "",
          "[Added Lines]",
          "3121:     cmdPtr->popts = Jsi_CommandPkgOpts(interp, funcPtr);",
          "3122:     cmdPtr->_ = &ws_PkgStatus;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3134:         jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3135:         return JSI_ERROR;",
          "3136:     }",
          "3137:     if (cmdPtr->mimeTypes)",
          "3138:         jsi_ws_loadMimeTypes(interp, cmdPtr, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3143:     Jsi_LogDebugExt(\"Starting WS: %d\", cmdPtr->port);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3144:     Jsi_PathNormalize(interp, &cmdPtr->rootdir);",
          "3146:     if (cmdPtr->headers && (Jsi_ValueGetLength(interp, cmdPtr->headers)%2)) {",
          "3148:         goto bail;",
          "3149:     }",
          "3150:     const char *up = cmdPtr->urlPrefix, *ur = cmdPtr->urlRedirect;",
          "3151:     if (up && ur && Jsi_Strncmp(ur, up, Jsi_Strlen(up))) {",
          "3153:         goto bail;",
          "3154:     }",
          "3155:     const char* subprot = (cmdPtr->protocol&&cmdPtr->protocol[0]?cmdPtr->protocol:\"ws\");",
          "3156:     if (cmdPtr->protocol && !cmdPtr->protocol[0])",
          "3158:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].name=\"http-only\";",
          "3159:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].callback=jsi_wscallback_http;",
          "3160:     cmdPtr->protocols[JWS_PROTOCOL_HTTP].per_session_data_size=sizeof(jsi_wsUser);",
          "",
          "[Removed Lines]",
          "3147:         Jsi_LogError(\"Odd header length\");",
          "3152:         Jsi_LogError(\"urlRedirect does not start with urlPrefix\");",
          "3157:         Jsi_LogWarn(\"empty protocol string: forcing to 'ws'\");",
          "",
          "[Added Lines]",
          "3154:         Jsi_LogErrorExt(\"Odd header length\");",
          "3159:         Jsi_LogErrorExt(\"urlRedirect does not start with urlPrefix\");",
          "3164:         Jsi_LogWarnExt(\"empty protocol string: forcing to 'ws'\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3166:         cmdPtr->bufferPwr2 = 16;",
          "3167:     if (cmdPtr->bufferPwr2>0) {",
          "3168:         if (cmdPtr->bufferPwr2>20) {",
          "3170:             goto bail;",
          "3171:         }",
          "3172:         cmdPtr->protocols[JWS_PROTOCOL_WEBSOCK].rx_buffer_size=(1<<cmdPtr->bufferPwr2);",
          "",
          "[Removed Lines]",
          "3169:             Jsi_LogError(\"bufferPwr2 not in 0-20: %d\", cmdPtr->bufferPwr2);",
          "",
          "[Added Lines]",
          "3176:             Jsi_LogErrorExt(\"bufferPwr2 not in 0-20: %d\", cmdPtr->bufferPwr2);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3220:     }",
          "3221:     if (cmdPtr->ssl) {",
          "3222: #ifndef LWS_OPENSSL_SUPPORT",
          "3224:         goto bail;",
          "3225: #endif",
          "3226:         cmdPtr->info.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;",
          "",
          "[Removed Lines]",
          "3223:         Jsi_LogError(\"WebSocket not compiled with SSL\");",
          "",
          "[Added Lines]",
          "3230:         Jsi_LogErrorExt(\"WebSocket not compiled with SSL\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3228:     cmdPtr->context = lws_create_context(&cmdPtr->info);",
          "3229:     if (cmdPtr->context == NULL) {",
          "3230: fail:",
          "3232:         goto bail;",
          "3233:     }",
          "3234:     if (cmdPtr->info.options & LWS_SERVER_OPTION_EXPLICIT_VHOSTS) {",
          "",
          "[Removed Lines]",
          "3231:         Jsi_LogError(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "[Added Lines]",
          "3238:         Jsi_LogErrorExt(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3259:         if (NULL == lws_client_connect_via_info(&lci))",
          "3260:         {",
          "3262:             jsi_wswebsocketObjFree(interp, cmdPtr);",
          "3263:             return JSI_ERROR;",
          "3264:         }",
          "",
          "[Removed Lines]",
          "3261:             Jsi_LogError(\"websock connect failed\");",
          "",
          "[Added Lines]",
          "3268:             Jsi_LogErrorExt(\"websock connect failed\");",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3340: #endif",
          "3341:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3342:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "3344:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3345:     Jsi_DecrRefCount(interp, info);",
          "3346:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "3343:     Jsi_PkgOpts wsPkgOpts = { wsObjCmd_Specs, &wsObjCmd, websockCmds, info };",
          "",
          "[Added Lines]",
          "3350:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .info=info };",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3358: #endif",
          "3359: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3367: #undef JSI_EXT_OPTS",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "631: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "632: <tr><td>jsppCallback</td><td><i>FUNC</i></td><td>Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number).</td><td><i></i></td></tr>",
          "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
          "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
          "635: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "636: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634: <tr><td>lockDown</td><td><i>STRKEY</i></td><td>Directory to Safe-lockdown interpreter to.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f865853f222f32e977ce20640242c71cc6888fc7",
      "candidate_info": {
        "commit_hash": "f865853f222f32e977ce20640242c71cc6888fc7",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f865853f222f32e977ce20640242c71cc6888fc7",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiProto.c",
          "tests/bind.jsi",
          "tests/prob/bind.js",
          "tools/protos.jsi"
        ],
        "message": "Callback finalize.\n\nFossilOrigin-Name: 40ec67d315a25eecafc91b4ac267de92db06c2a040e2a669aafc32ff83483185",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiProto.c||src/jsiProto.c",
          "tests/bind.jsi||tests/bind.jsi",
          "tests/prob/bind.js||tests/prob/bind.js",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 13",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 14",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define _jsi_THIS (interp->Obj_this)",
          "13: #define _jsi_THISIDX(s) interp->Obj_this[s]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval)",
          "24: {",
          "",
          "[Removed Lines]",
          "15: static Jsi_RC jsi_EvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsi_EvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsi_EvalLogErr(interp, \"value is NaN\"))",
          "19: #define _jsi_StrictUChk(v) ((strict==0 || v->vt != JSI_VT_UNDEF) ? JSI_OK : jsi_EvalLogErr(interp, \"value is undefined\"))",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsi_EvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsi_EvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "",
          "[Added Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "19: #define _jsi_StrictUChk(v) ((strict==0 || v->vt != JSI_VT_UNDEF) ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     return r;",
          "83: }",
          "86:     int i;",
          "87:     Jsi_Value **v = (Jsi_Value **)Jsi_Realloc(old, cnt* sizeof(Jsi_Value*));",
          "88:     for (i=oldsz; i<cnt; i++)",
          "",
          "[Removed Lines]",
          "85: static Jsi_Value** jsi_ValuesAlloc(Jsi_Interp *interp, int cnt, Jsi_Value**old, int oldsz) {",
          "",
          "[Added Lines]",
          "85: static Jsi_Value** jsiValuesAlloc(Jsi_Interp *interp, int cnt, Jsi_Value**old, int oldsz) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         interp->maxStack += STACK_INCR_SIZE;",
          "98:     else",
          "99:         interp->maxStack = STACK_INIT_SIZE;",
          "102: }",
          "104: static void jsiPush(Jsi_Interp* interp, int n) {",
          "",
          "[Removed Lines]",
          "100:     _jsi_STACK = jsi_ValuesAlloc(interp, interp->maxStack, _jsi_STACK, oldsz);",
          "101:     _jsi_THIS = jsi_ValuesAlloc(interp, interp->maxStack, _jsi_THIS, oldsz); //TODO:!!! use interp->framePtr for this.",
          "",
          "[Added Lines]",
          "100:     _jsi_STACK = jsiValuesAlloc(interp, interp->maxStack, _jsi_STACK, oldsz);",
          "101:     _jsi_THIS = jsiValuesAlloc(interp, interp->maxStack, _jsi_THIS, oldsz); //TODO:!!! use interp->framePtr for this.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: }",
          "150: {",
          "151:     Jsi_Value *v;",
          "152:     if (dst->vt != JSI_VT_VARIABLE) {",
          "",
          "[Removed Lines]",
          "149: static Jsi_RC inline jsi_ValueAssign(Jsi_Interp *interp, Jsi_Value *dst, Jsi_Value* src, int lop)",
          "",
          "[Added Lines]",
          "149: static Jsi_RC inline jsiValueAssign(Jsi_Interp *interp, Jsi_Value *dst, Jsi_Value* src, int lop)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:     jsiPop(interp, 1);                                          \\",
          "236: }",
          "239:     Jsi_Value *v, *v1 = _jsi_STACK[interp->framePtr->Sp-i1], *v2 = _jsi_STACK[interp->framePtr->Sp-i2], *res = _jsi_TOQ;",
          "240:     int val = 0, l1 = 0, l2 = 0;",
          "241:     bool strict = interp->strict;",
          "",
          "[Removed Lines]",
          "238: static Jsi_RC jsi_logic_less(Jsi_Interp* interp, int i1, int i2) {",
          "",
          "[Added Lines]",
          "238: static Jsi_RC jsiLogicLess(Jsi_Interp* interp, int i1, int i2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:     return JSI_OK;",
          "286: }",
          "289: {",
          "290:     static char buf[JSI_MAX_NUMBER_STRING];",
          "291:     if (!v)",
          "",
          "[Removed Lines]",
          "288: static const char *jsi_evalprint(Jsi_Value *v)",
          "",
          "[Added Lines]",
          "288: static const char *jsiEvalPrint(Jsi_Value *v)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:     return buf;",
          "309: }",
          "313: {",
          "314:     interp->framePtr->tryDepth--;",
          "315:     jsi_TryList *t = (*head)->next;",
          "",
          "[Removed Lines]",
          "311: #define pop_try(head) jsi_pop_try(interp, &head)",
          "312: static void jsi_pop_try(Jsi_Interp* interp, jsi_TryList **head)",
          "",
          "[Added Lines]",
          "311: #define pop_try(head) jsiPopTry(interp, &head)",
          "312: static void jsiPopTry(Jsi_Interp* interp, jsi_TryList **head)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     interp->tryList = t;",
          "319: }",
          "322: {",
          "323:     interp->tryList = n;",
          "324:     interp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "321: static void jsi_push_try(Jsi_Interp* interp, jsi_TryList **head, jsi_TryList *n)",
          "",
          "[Added Lines]",
          "321: static void jsiPushTry(Jsi_Interp* interp, jsi_TryList **head, jsi_TryList *n)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327: }",
          "331:     &scope, &currentScope, &context_id)",
          "333:   jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id) {",
          "",
          "[Removed Lines]",
          "330: #define JSI_RESTORE_SCOPE() jsi_restore_scope(interp, ps, trylist, \\",
          "332: static void jsi_restore_scope(Jsi_Interp* interp, jsi_Pstate *ps, jsi_TryList* trylist,",
          "",
          "[Added Lines]",
          "330: #define JSI_RESTORE_SCOPE() jsiRestoreScope(interp, ps, trylist, \\",
          "332: static void jsiRestoreScope(Jsi_Interp* interp, jsi_Pstate *ps, jsi_TryList* trylist,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "347: }",
          "352:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "353:     if (Jsi_InterpGone(interp))",
          "354:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "349: #define JSI_DO_THROW(nam) if (jsi_do_throw(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "351: static int jsi_do_throw(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "[Added Lines]",
          "349: #define JSI_DO_THROW(nam) if (jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "351: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "376:                 break;",
          "377:             } else if (*ipp >= trylist->d.td.fstart && *ipp < trylist->d.td.fend) {",
          "379:                 trylist = *tlp;",
          "380:             } else Jsi_LogBug(\"Throw within a try, but not in its scope?\");",
          "381:         } else {",
          "384:             trylist = *tlp;",
          "385:         }",
          "386:     }",
          "387:     return JSI_OK;",
          "388: }",
          "391: {",
          "392:     jsi_TryList *n = (jsi_TryList *)Jsi_Calloc(1,sizeof(*n));",
          "",
          "[Removed Lines]",
          "378:                 jsi_pop_try(interp, tlp);",
          "382:             jsi_restore_scope(interp, ps, trylist, scope, currentScope, context_id);",
          "383:             jsi_pop_try(interp, tlp);",
          "390: static jsi_TryList *jsi_trylist_new(jsi_try_op_type t, jsi_ScopeChain *scope_save, Jsi_Value *curscope_save)",
          "",
          "[Added Lines]",
          "378:                 jsiPopTry(interp, tlp);",
          "382:             jsiRestoreScope(interp, ps, trylist, scope, currentScope, context_id);",
          "383:             jsiPopTry(interp, tlp);",
          "390: static jsi_TryList *jsiTrylistNew(jsi_try_op_type t, jsi_ScopeChain *scope_save, Jsi_Value *curscope_save)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405:     int i;",
          "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
          "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
          "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
          "411:     }",
          "412:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "413:     if (ip->fname) {",
          "",
          "[Removed Lines]",
          "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsi_evalprint(_jsi_STACKIDX(i)));",
          "",
          "[Added Lines]",
          "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsiEvalPrint(_this));",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "419:     jsi_TryList *tlt = trylist;",
          "420:     for (i = 0; tlt; tlt = tlt->next) i++;",
          "421:     if (ps->last_exception)",
          "423: }",
          "426: {",
          "427:    return Jsi_Strcmp(* (char * const *) p1, * (char * const *) p2);",
          "428: }",
          "431:     int argc, i;",
          "432:     char **argv;",
          "433:     Jsi_DString sStr;",
          "434:     Jsi_DSInit(&sStr);",
          "435:     Jsi_SplitStr(Jsi_DSValue(dStr), &argc, &argv, sep, &sStr);",
          "437:     Jsi_DSSetLength(dStr, 0);",
          "438:     for (i=0; i<argc; i++)",
          "439:         Jsi_DSAppend(dStr, (i?\" \":\"\"), argv[i], NULL);",
          "440:     Jsi_DSFree(&sStr);",
          "441: }",
          "444: {",
          "445:     if (target->vt != JSI_VT_OBJECT) return;",
          "446:     const char *kstr = Jsi_ValueToString(interp, key, NULL);",
          "",
          "[Removed Lines]",
          "422:         Jsi_Printf(interp, jsi_Stderr, \"TL: %d, excpt: %s\\n\", i, jsi_evalprint(ps->last_exception));",
          "425: static int jsi_cmpstringp(const void *p1, const void *p2)",
          "430: void jsi_SortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep) {",
          "436:     qsort(argv, argc, sizeof(char*), jsi_cmpstringp);",
          "443: static void jsi_ValueObjDelete(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, int force)",
          "",
          "[Added Lines]",
          "422:         Jsi_Printf(interp, jsi_Stderr, \"TL: %d, excpt: %s\\n\", i, jsiEvalPrint(ps->last_exception));",
          "425: static int jsiCmpStringp(const void *p1, const void *p2)",
          "430: static void jsiSortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep) {",
          "436:     qsort(argv, argc, sizeof(char*), jsiCmpStringp);",
          "443: static void jsiValueObjDelete(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, int force)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:     Jsi_TreeSearchDone(&srch);",
          "482: }",
          "485:     Jsi_DString dStr;",
          "486:     Jsi_DSInit(&dStr);",
          "487:     Jsi_MapEntry *hPtr;",
          "",
          "[Removed Lines]",
          "484: static void jsi_DumpFunctions(Jsi_Interp *interp, const char *spnam) {",
          "",
          "[Added Lines]",
          "484: static void jsiDumpFunctions(Jsi_Interp *interp, const char *spnam) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "558:             }",
          "559:             csi = (csi?csi->next:NULL);",
          "560:         }",
          "562:         if (varname)",
          "563:             spnam = varname;",
          "564:         else if (interp->lastPushStr && !spnam[0])",
          "",
          "[Removed Lines]",
          "561:         jsi_SortDString(interp, &dStr, \" \");",
          "",
          "[Added Lines]",
          "561:         jsiSortDString(interp, &dStr, \" \");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "708:     }",
          "709: }",
          "712:     Jsi_Value **ret, Jsi_Value *tocall, int discard)",
          "713: {",
          "714:     Jsi_RC rc = JSI_OK;",
          "715:     const char *oldCurFunc = interp->curFunction, *spnam = \"\";",
          "716:     jsi_OpCode *ip = interp->curIp;",
          "717:     int adds, as_constructor = (ip->op == OP_NEWFCALL);",
          "724:     if (tocall->vt == JSI_VT_UNDEF && tocall->f.bits.lookupfailed && tocall->d.lookupFail && !interp->noAutoLoad) {",
          "",
          "[Removed Lines]",
          "711: Jsi_RC jsi_FunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "718:     double timStart = 0;",
          "719:     int docall;",
          "720:     int calltrc = 0, profile = interp->profile, coverage = interp->coverage;",
          "721:     int tc;",
          "",
          "[Added Lines]",
          "711: static Jsi_RC jsiFunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "718:     int calltrc = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "731:     if (!Jsi_ValueIsFunction(interp, tocall)) {",
          "735:         rc = JSI_ERROR;",
          "736:         goto empty_func;",
          "737:     }",
          "",
          "[Removed Lines]",
          "734:         jsi_DumpFunctions(interp, spnam);",
          "",
          "[Added Lines]",
          "731:         jsiDumpFunctions(interp, spnam);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "786:         calltrc = (interp->traceCall&jsi_callTraceNew);",
          "787:     }",
          "790:     if (funcPtr->type == FC_BUILDIN) {",
          "791:         funcPtr->callflags.bits.iscons = (as_constructor?JSI_CALL_CONSTRUCTOR:0);",
          "792:         funcPtr->fobj = fobj; // Backlink for bind.",
          "793:         funcPtr->callflags.bits.isdiscard = discard;",
          "794:     }",
          "795:     rc = jsi_FuncCallSub(interp, args, tocall, ret, funcPtr, _this, calltrc);",
          "893:     if (!onam)",
          "894:         funcPtr->name = NULL;",
          "",
          "[Removed Lines]",
          "789: #if 1",
          "796: #else",
          "797:     Jsi_Func *prevActive = interp->activeFunc;",
          "798:     interp->activeFunc = funcPtr;",
          "800:     if (rc != JSI_OK)",
          "801:         goto bail;",
          "802:     funcPtr->callflags.bits.addargs = 0;",
          "803:     jsi_InitLocalVar(interp, args, funcPtr);",
          "805:     Jsi_Value *oc = interp->callee;",
          "806:     interp->callee = tocall;",
          "808:     tc = interp->traceCall;",
          "809:     jsi_PkgInfo *pkg = funcPtr->pkg;",
          "810:     if (pkg) {",
          "811:         tc |= pkg->popts.modConf.traceCall;",
          "812:         profile |= pkg->popts.modConf.profile;",
          "813:         coverage |= pkg->popts.modConf.coverage;",
          "814:     }",
          "816:     if (!calltrc) {",
          "817:         if (funcPtr->type == FC_NORMAL)",
          "818:             calltrc = (tc&jsi_callTraceFuncs);",
          "819:         else",
          "820:             calltrc = (tc&jsi_callTraceCmds);",
          "821:     }",
          "822:     if (calltrc && funcPtr->name)",
          "823:         jsi_TraceFuncCall(interp, funcPtr, ip, _this, args, 0, tc);",
          "827:     interp->activeFunc = funcPtr;",
          "828:     docall = (rc==JSI_OK);",
          "829:     if (profile || coverage) {",
          "830:         interp->profileCnt++;",
          "831:         timStart = jsi_GetTimestamp();",
          "832:     }",
          "833:     if (funcPtr->type == FC_NORMAL) {",
          "834:         if (docall) {",
          "835:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, tocall->d.obj->d.fobj->scope,",
          "836:                 args, _this, ret);",
          "837:         }",
          "838:         interp->funcCallCnt++;",
          "839:     } else if (!funcPtr->callback) {",
          "840:         rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "841:     } else {",
          "842:         int oldcf = funcPtr->callflags.i;",
          "843:         funcPtr->callflags.bits.iscons = (as_constructor?JSI_CALL_CONSTRUCTOR:0);",
          "844:         if (funcPtr->f.bits.hasattr)",
          "845:         {",
          "846: #define SPTR(s) (s?s:\"\")",
          "847:             if ((funcPtr->f.bits.isobj) && _this->vt != JSI_VT_OBJECT) {",
          "848:                 rc = JSI_ERROR;",
          "849:                 docall = 0;",
          "850:                 Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "851:             } else if ((!(funcPtr->f.bits.iscons)) && as_constructor) {",
          "852:                 docall = 0;",
          "853:                 rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "854:             } else {",
          "855:                 int aCnt = Jsi_ValueGetLength(interp, args);",
          "856:                 if (aCnt<(cs->minArgs+adds)) {",
          "857:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, SPTR(cs->argStr));",
          "858:                     docall = 0;",
          "859:                 } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "860:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, SPTR(cs->argStr));",
          "861:                     docall = 0;",
          "862:                 }",
          "863:             }",
          "864:         }",
          "865:         if (docall) {",
          "866:             rc = funcPtr->callback(interp, args,",
          "867:                 _this, ret, funcPtr);",
          "868:             interp->cmdCallCnt++;",
          "869:         }",
          "870:         funcPtr->callflags.i = oldcf;",
          "871:     }",
          "872:     interp->callee = oc;",
          "873:     if (profile || coverage) {",
          "874:         double timEnd = jsi_GetTimestamp(), timUsed = (timEnd - timStart);;",
          "875:         assert(timUsed>=0);",
          "876:         funcPtr->allTime += timUsed;",
          "877:         if (interp->framePtr->evalFuncPtr)",
          "878:             interp->framePtr->evalFuncPtr->subTime += timUsed;",
          "879:         else",
          "880:             interp->subTime += timUsed;",
          "881:     }",
          "882:     if (calltrc && (tc&jsi_callTraceReturn) && funcPtr->name)",
          "883:         jsi_TraceFuncCall(interp, funcPtr, ip, _this, NULL, *ret, tc);",
          "884:     if (docall) {",
          "885:         funcPtr->callCnt++;",
          "886:         if (rc == JSI_OK && !as_constructor && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "887:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "888:     }",
          "889:     interp->activeFunc = prevActive;",
          "891: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "902:         }",
          "903:     }",
          "906:     Jsi_DecrRefCount(interp, _this);",
          "907:     interp->curFunction = oldCurFunc;",
          "909:     return rc;",
          "910: }",
          "913:     Jsi_Interp *interp = ps->interp;",
          "914:     int stackargc = (int)(uintptr_t)ip->data;",
          "915:     jsiVarDeref(interp, stackargc + 1);",
          "",
          "[Removed Lines]",
          "905: bail:",
          "912: Jsi_RC jsiEvalFunction(jsi_Pstate *ps, jsi_OpCode *ip, int discard) {",
          "",
          "[Added Lines]",
          "811: static Jsi_RC jsiEvalFunction(jsi_Pstate *ps, jsi_OpCode *ip, int discard) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "926:         _this = Jsi_ValueDup(interp, _this);",
          "927:         jsiClearThis(interp, tocall_index);",
          "928:     }",
          "931:     jsiPop(interp, stackargc);",
          "932:     jsiClearStack(interp,1);",
          "",
          "[Removed Lines]",
          "929:     Jsi_RC rc = jsi_FunctionSubCall(interp, args, _this, &spretPtr, tocall, discard);",
          "",
          "[Added Lines]",
          "828:     Jsi_RC rc = jsiFunctionSubCall(interp, args, _this, &spretPtr, tocall, discard);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "946:     return rc;",
          "947: }",
          "950:     Jsi_Interp *interp = ps->interp;",
          "951:     jsi_FastVar *fvar = (typeof(fvar))ip->data;",
          "952:     SIGASSERT(fvar,FASTVAR);",
          "",
          "[Removed Lines]",
          "949: static Jsi_RC jsi_PushVar(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope, int context_id) {",
          "",
          "[Added Lines]",
          "848: static Jsi_RC jsiPushVar(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope, int context_id) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "999:     return JSI_OK;",
          "1000: }",
          "1004:     Jsi_Interp *interp = ps->interp;",
          "1005:     Jsi_FuncObj *fo = jsi_FuncObjNew(interp, (Jsi_Func *)ip->data);",
          "",
          "[Removed Lines]",
          "1002: static void jsi_PushFunc(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope) {",
          "",
          "[Added Lines]",
          "901: static void jsiPushFunc(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1038:     jsiPush(interp,1);",
          "1039: }",
          "1042:     Jsi_Value *currentScope)",
          "1043: {",
          "1044:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "1041: static Jsi_RC jsi_evalSubscript(Jsi_Interp *interp, Jsi_Value *src, Jsi_Value *idx, jsi_OpCode *ip,  jsi_OpCode *end,",
          "",
          "[Added Lines]",
          "940: static Jsi_RC jsiEvalSubscript(Jsi_Interp *interp, Jsi_Value *src, Jsi_Value *idx, jsi_OpCode *ip,  jsi_OpCode *end,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1129: }",
          "1132:     if (lop == OP_FCALL || lop == OP_NEWFCALL)",
          "1133:         return JSI_OK;",
          "1134:     if (val->f.bits.lookupfailed && val->d.lookupFail)",
          "",
          "[Removed Lines]",
          "1131: static Jsi_RC jsi_ValueAssignCheck(Jsi_Interp *interp, Jsi_Value *val, int lop) {",
          "",
          "[Added Lines]",
          "1030: static Jsi_RC jsiValueAssignCheck(Jsi_Interp *interp, Jsi_Value *val, int lop) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1136:     return JSI_OK;",
          "1137: }",
          "1140:      jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1141:      Jsi_Value *_this, Jsi_Value *vret)",
          "1142: {",
          "",
          "[Removed Lines]",
          "1139: Jsi_RC jsi_evalcode_sub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "",
          "[Added Lines]",
          "1038: Jsi_RC jsiEvalCodeSub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1301:                 break;",
          "1302:             }",
          "1303:             case OP_PUSHVAR: {",
          "1305:                 break;",
          "1306:             }",
          "1307:             case OP_PUSHFUN: {",
          "1309:                 break;",
          "1310:             }",
          "1311:             case OP_NEWFCALL:",
          "",
          "[Removed Lines]",
          "1304:                 rc = jsi_PushVar(ps, ip, scope, currentScope, context_id);",
          "1308:                 jsi_PushFunc(ps, ip, scope, currentScope);",
          "",
          "[Added Lines]",
          "1203:                 rc = jsiPushVar(ps, ip, scope, currentScope, context_id);",
          "1207:                 jsiPushFunc(ps, ip, scope, currentScope);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1331:                 break;",
          "1332:             }",
          "1333:             case OP_SUBSCRIPT: {",
          "1335:                 break;",
          "1336:             }",
          "1337:             case OP_ASSIGN: {",
          "",
          "[Removed Lines]",
          "1334:                 rc = jsi_evalSubscript(interp, _jsi_TOQ, _jsi_TOP, ip, end, currentScope);",
          "",
          "[Added Lines]",
          "1233:                 rc = jsiEvalSubscript(interp, _jsi_TOQ, _jsi_TOP, ip, end, currentScope);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1339:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "1340:                 if ((uintptr_t)ip->data == 1) {",
          "1341:                     jsiVarDeref(interp,1);",
          "1343:                     if (strict && sval->vt == JSI_VT_UNDEF)",
          "1345:                     jsiPop(interp,1);",
          "1346:                 } else {",
          "1347:                     jsiVarDeref(interp, 3);",
          "1348:                     Jsi_Value *v3 = _jsi_STACKIDX(interp->framePtr->Sp-3);",
          "1349:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1350:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1352:                         jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "1353:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1354:                     } else if (strict)",
          "",
          "[Removed Lines]",
          "1342:                     rc = jsi_ValueAssign(interp, dval, sval, lop);",
          "1344:                         rc = jsi_ValueAssignCheck(interp, sval, lop);",
          "1351:                             rc = jsi_ValueAssignCheck(interp, sval, lop);",
          "",
          "[Added Lines]",
          "1241:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "1243:                         rc = jsiValueAssignCheck(interp, sval, lop);",
          "1250:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1581:             }",
          "1582:             case OP_LESS:",
          "1583:                 jsiVarDeref(interp,2);",
          "1585:                 jsiPop(interp,1);",
          "1586:                 break;",
          "1587:             case OP_GREATER:",
          "1588:                 jsiVarDeref(interp,2);",
          "1590:                 jsiPop(interp,1);",
          "1591:                 break;",
          "1592:             case OP_LESSEQU:",
          "1593:                 jsiVarDeref(interp,2);",
          "1595:                 if (rc == JSI_OK)",
          "1596:                     _jsi_TOQ->d.val = !_jsi_TOQ->d.val;",
          "1597:                 jsiPop(interp,1);",
          "1598:                 break;",
          "1599:             case OP_GREATEREQU:",
          "1600:                 jsiVarDeref(interp,2);",
          "1602:                 if (rc == JSI_OK)",
          "1603:                     _jsi_TOQ->d.val = !_jsi_TOQ->d.val;",
          "1604:                 jsiPop(interp,1);",
          "",
          "[Removed Lines]",
          "1584:                 rc = jsi_logic_less(interp,2,1);",
          "1589:                 rc = jsi_logic_less(interp,1,2);",
          "1594:                 rc = jsi_logic_less(interp,1,2);",
          "1601:                 rc = jsi_logic_less(interp,2,1);",
          "",
          "[Added Lines]",
          "1483:                 rc = jsiLogicLess(interp,2,1);",
          "1488:                 rc = jsiLogicLess(interp,1,2);",
          "1493:                 rc = jsiLogicLess(interp,1,2);",
          "1500:                 rc = jsiLogicLess(interp,2,1);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1899:                         if (_jsi_TOQ->vt != JSI_VT_OBJECT) Jsi_LogWarn(\"delete non-object key, ignore\");",
          "1900:                         if (_jsi_TOQ->d.obj == currentScope->d.obj) Jsi_LogWarn(\"Delete arguments\");",
          "1901:                     }",
          "1904:                     jsiPop(interp,2);",
          "1905:                 } else Jsi_LogBug(\"delete\");",
          "",
          "[Removed Lines]",
          "1902:                     jsi_ValueObjDelete(interp, _jsi_TOQ, _jsi_TOP, 0);",
          "",
          "[Added Lines]",
          "1801:                     jsiValueObjDelete(interp, _jsi_TOQ, _jsi_TOP, 0);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1927:             }",
          "1928:             case OP_STRY: {",
          "1929:                 jsi_TryInfo *ti = (jsi_TryInfo *)ip->data;",
          "1933:                 n->d.td.tend = n->d.td.tstart + ti->trylen;",
          "",
          "[Removed Lines]",
          "1930:                 jsi_TryList *n = jsi_trylist_new(jsi_TL_TRY, scope, currentScope);",
          "",
          "[Added Lines]",
          "1829:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_TRY, scope, currentScope);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1939:                 n->inCatch=0;",
          "1940:                 n->inFinal=0;",
          "1943:                 break;",
          "1944:             }",
          "",
          "[Removed Lines]",
          "1942:                 jsi_push_try(interp, &trylist, n);",
          "",
          "[Added Lines]",
          "1841:                 jsiPushTry(interp, &trylist, n);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2060:                 jsiVarDeref(interp,1);",
          "2061:                 Jsi_ValueToObject(interp, _jsi_TOP);",
          "2065:                 n->d.wd.wstart = ip;",
          "2066:                 n->d.wd.wend = n->d.wd.wstart + (uintptr_t)ip->data;",
          "2069:                 interp->framePtr->withDepth++;",
          "",
          "[Removed Lines]",
          "2063:                 jsi_TryList *n = jsi_trylist_new(jsi_TL_WITH, scope, currentScope);",
          "2068:                 jsi_push_try(interp, &trylist, n);",
          "",
          "[Added Lines]",
          "1962:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_WITH, scope, currentScope);",
          "1967:                 jsiPushTry(interp, &trylist, n);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2159:     interp->refCount++;",
          "2160:     interp->level++;",
          "2161:     Jsi_IncrRefCount(interp, fargs);",
          "2163:     Jsi_DecrRefCount(interp, fargs);",
          "2164:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
          "2165:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
          "",
          "[Removed Lines]",
          "2162:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
          "",
          "[Added Lines]",
          "2061:     rc = jsiEvalCodeSub(ps, opcodes, scope, fargs, _this, *vret);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2180:     return rc;",
          "2181: }",
          "2184:     if (buf[0]==';' && buf[1] && buf[2]) {",
          "2186:         if (!jOpts[0]) {",
          "",
          "[Removed Lines]",
          "2183: Jsi_RC jsi_JsPreprocessLine(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "[Added Lines]",
          "2082: static Jsi_RC jsiJsPreprocessLine(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2233:     return JSI_OK;",
          "2234: }",
          "2237:     const char *jpp = interp->jsppChars;",
          "2238:     if (!jpp[0] || !jpp[1])",
          "2239:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "2236: Jsi_RC jsi_JsPreprocessLineCB(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "[Added Lines]",
          "2135: static Jsi_RC jsiJsPreprocessLineCB(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2422:                 if (jpp || interp->unitTest)",
          "2423:                     ilen = Jsi_Strlen(buf);",
          "2424:                 if (interp->unitTest && buf[0]==';' && buf[1] && buf[2]) {",
          "2426:                         goto bail;",
          "2427:                 } else if (interp->jsppCallback && interp->jsppChars) {",
          "2429:                         goto bail;",
          "2430:                 }",
          "2431: cont:",
          "",
          "[Removed Lines]",
          "2425:                     if (interp->unitTest&1 && jsi_JsPreprocessLine(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "2428:                     if (jsi_JsPreprocessLineCB(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "",
          "[Added Lines]",
          "2324:                     if (interp->unitTest&1 && jsiJsPreprocessLine(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "2327:                     if (jsiJsPreprocessLineCB(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "771:         return Jsi_LogError(\"argument must be an array\");",
          "773:     Jsi_Value *fthis = Jsi_ValueDup(interp, _this ? _this : tocall);",
          "775:     Jsi_RC rc = jsi_FuncCallSub(interp, args, tocall, ret, funcPtr, fthis, 0);",
          "818:     Jsi_DecrRefCount(interp, fthis);",
          "819:     return rc;",
          "820: }",
          "",
          "[Removed Lines]",
          "774: #if 1",
          "776: #else",
          "777:     Jsi_Func *prevActive = interp->activeFunc;",
          "778:     Jsi_RC rc = jsi_SharedArgs(interp, args, funcPtr, 1);",
          "779:     int calltrc = 0;",
          "780:     int tc = interp->traceCall | (funcPtr->pkg?funcPtr->pkg->popts.modConf.traceCall:0);",
          "781:     interp->callDepth++;",
          "782:     Jsi_IncrRefCount(interp, args);",
          "783:     if (rc == JSI_OK) {",
          "784:         jsi_InitLocalVar(interp, args, funcPtr);",
          "786:         Jsi_Value *oc = interp->callee;",
          "787:         interp->callee = tocall;",
          "788:         if (funcPtr->type == FC_NORMAL) {",
          "789:             if ((tc&jsi_callTraceFuncs) && funcPtr->name)",
          "790:                 calltrc = 1;",
          "791:         } else {",
          "792:             if ((tc&jsi_callTraceCmds) && funcPtr->name)",
          "793:                 calltrc = 1;",
          "794:         }",
          "795:         interp->activeFunc = funcPtr;",
          "796:         if (funcPtr->type == FC_NORMAL) {",
          "797:             if (calltrc)",
          "798:                 jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, args, NULL, tc);",
          "799:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, tocall->d.obj->d.fobj->scope,",
          "800:                 args, fthis, ret);",
          "801:         } else {",
          "802:             if (calltrc)",
          "803:                 jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, args, NULL, tc);",
          "804:             rc = funcPtr->callback(interp, args, fthis, ret, funcPtr);",
          "805:         }",
          "806:         interp->callee = oc;",
          "807:         funcPtr->callCnt++;",
          "808:     }",
          "809:     interp->callDepth--;",
          "810:     if (rc == JSI_OK && funcPtr->retType)",
          "811:         rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "812:     if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "813:         jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "814:     interp->activeFunc = prevActive;",
          "815:     jsi_SharedArgs(interp, args, funcPtr, 0);",
          "816:     Jsi_DecrRefCount(interp, args);",
          "817: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404: typedef Jsi_RC (*Jsi_Constructor)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1405:     Jsi_Value **ret, int flags, void *privData);",
          "1409:     Jsi_Value **ret, Jsi_Func *funcPtr, Jsi_Value *fthis, int calltrc);",
          "1410: extern Jsi_RC jsi_AssertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1411:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "",
          "[Removed Lines]",
          "1406: extern Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc);",
          "1407: extern void jsi_SetCallee(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *tocall);",
          "1408: extern Jsi_RC jsi_FuncCallSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "1406: extern Jsi_RC jsi_FuncCallSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *callee,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1428: extern const char *jsi_TypeName(Jsi_Interp *interp, Jsi_ttype otyp);",
          "1429: extern Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1430:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1433: extern Jsi_Value* jsi_ValueMakeBlobDup(Jsi_Interp *interp, Jsi_Value **vPtr, unsigned char *s, int len);",
          "1435: extern const char *jsi_GetHomeDir(Jsi_Interp *interp);",
          "",
          "[Removed Lines]",
          "1431: extern Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1432:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1503: extern Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ, Jsi_Value *arg, const char *p1, const char *p2, int index, Jsi_Func *func, bool isdefault);",
          "1504: extern void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes);",
          "1505: extern Jsi_RC jsi_RunFuncCallCheck(Jsi_Interp *interp, Jsi_Func *func, int argc, const char *name, jsi_Pline *line, Jsi_OpCodes *argCodes, bool isParse);",
          "1507: extern Jsi_ScopeStrs *jsi_ArgsOptAdd(jsi_Pstate *pstate, Jsi_ScopeStrs *a);",
          "1508: extern Jsi_ScopeStrs *jsi_argInsert(jsi_Pstate *pstate, Jsi_ScopeStrs *a, const char *name, Jsi_Value *defValue, jsi_Pline *lPtr, bool prepend);",
          "1509: extern Jsi_ScopeStrs* jsi_ParseArgStr(Jsi_Interp *interp, const char *argStr);",
          "",
          "[Removed Lines]",
          "1506: extern Jsi_RC jsi_FunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Value *tocall, int discard);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1511: extern double jsi_GetTimestamp(void);",
          "1512: extern const char *jsi_GetCurFile(Jsi_Interp *interp);",
          "1513: extern void jsi_TypeMismatch(Jsi_Interp* interp);",
          "1515: extern const char* jsi_GetDirective(Jsi_Interp *interp, Jsi_OpCodes *ops, const char *str);",
          "1516: extern Jsi_Value* jsi_CommandCreate(Jsi_Interp *interp, const char *name, Jsi_CmdProc *cmdProc, void *privData, int flags, Jsi_CmdSpec *cspec);",
          "1518: extern Jsi_RC jsi_ParseTypeCheckStr(Jsi_Interp *interp, const char *str);",
          "1519: extern Jsi_Interp *jsi_DoExit(Jsi_Interp *interp, int rc);",
          "1520: extern Jsi_RC jsi_CDataDataSetCmdSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr, int flags);",
          "",
          "[Removed Lines]",
          "1514: extern void jsi_SortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep);",
          "1517: extern int jsi_GetDefaultType(const char *cp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: }",
          "55:     if (isdigit(*cp) || *cp == '-' || *cp == '.') return JSI_TT_NUMBER;",
          "56:     if (*cp == 'f' || *cp == 't') return JSI_TT_BOOLEAN;",
          "57:     if (*cp == 'n') return JSI_TT_NULL;",
          "",
          "[Removed Lines]",
          "54: int jsi_GetDefaultType(const char *cp) {",
          "",
          "[Added Lines]",
          "54: static int jsi_GetDefaultType(const char *cp) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     return ss;",
          "107: }",
          "111: {",
          "112:     int i;",
          "113:     Jsi_RC rc = JSI_OK, nrc = JSI_OK;",
          "",
          "[Removed Lines]",
          "110: Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc)",
          "",
          "[Added Lines]",
          "109: static Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     } else {",
          "222:         if (funcPtr->f.bits.hasattr)",
          "223:         {",
          "226:             if ((funcPtr->f.bits.isobj) && callee->vt != JSI_VT_OBJECT) {",
          "227:                 rc = Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "228:             } else if ((!(funcPtr->f.bits.iscons)) && as_cons) {",
          "229:                 rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "230:             } else {",
          "231:                 int aCnt = Jsi_ValueGetLength(interp, args);",
          "232:                 if (aCnt<(cs->minArgs+adds)) {",
          "234:                 } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "236:                 }",
          "237:             }",
          "238:         }",
          "",
          "[Removed Lines]",
          "225: #define SPTR__(s) (s?s:\"\")",
          "233:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, SPTR__(cs->argStr));",
          "235:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, SPTR__(cs->argStr));",
          "",
          "[Added Lines]",
          "230:                 const char *cstr = cs->argStr;",
          "231:                 if (!cstr) cstr = \"\";",
          "233:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "235:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "271: {",
          "272:     Jsi_FuncObj *fo = funcPtr->fobj;",
          "279:     Jsi_Value *nargs = args, *fargs = fo->bindArgs;",
          "280:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "281:     int fargc = (fargs? Jsi_ValueGetLength(interp, fargs) : 0);",
          "",
          "[Removed Lines]",
          "273:     if (!fo) {",
          "274:         if (interp->callee && Jsi_ValueIsFunction(interp,  interp->callee))",
          "275:             fo = interp->callee->d.obj->d.fobj;",
          "276:         else",
          "277:             return Jsi_LogError(\"bind failure\"); // TODO: fix via \"call\" failure?",
          "278:     }",
          "",
          "[Added Lines]",
          "273:     if (!fo)",
          "274:         return Jsi_LogError(\"bind failure\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "321:     return JSI_OK;",
          "322: }",
          "325:     Jsi_Value **ret)",
          "326: {",
          "327:     if (!Jsi_ValueIsFunction(interp, _this))",
          "",
          "[Removed Lines]",
          "324: Jsi_RC Jsi_FunctionCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "321: static Jsi_RC Jsi_FunctionCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "332:         return JSI_OK;",
          "333:     Jsi_Func *funcPtr = fo->func;",
          "336:     Jsi_Value *fthis;",
          "337:     Jsi_Value *arg1 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     if (funcPtr->type == FC_BUILDIN)",
          "332:         funcPtr->fobj = fo; // Backlink for bind.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:     if (!Jsi_ValueIsFunction(interp, _this))",
          "397:         return Jsi_LogError(\"can not execute expression, expression is not a function\");",
          "400:         return JSI_OK;",
          "404:     Jsi_Func *funcPtr = _this->d.obj->d.fobj->func;",
          "409:     Jsi_Value *fthis;",
          "410:     Jsi_Value *arg1 = NULL;",
          "411:     if ((arg1 = Jsi_ValueArrayIndex(interp, args, 0)) && !Jsi_ValueIsUndef(interp, arg1)",
          "",
          "[Removed Lines]",
          "401:     }",
          "",
          "[Added Lines]",
          "398:     if (!_this->d.obj->d.fobj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "416:     Jsi_ValueToObject(interp, fthis);",
          "420:     Jsi_Value *fargs = Jsi_ValueArrayIndex(interp, args, 1);",
          "421:     if (fargs) {",
          "422:         if (fargs->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, fargs->d.obj)) {",
          "",
          "[Removed Lines]",
          "419:     Jsi_RC res = JSI_ERROR;",
          "",
          "[Added Lines]",
          "412:     Jsi_RC rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:         fargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewType(interp, JSI_OT_ARRAY));",
          "429:         Jsi_IncrRefCount(interp, fargs);",
          "430:     }",
          "434: done:",
          "435:     if (isalloc)",
          "436:         Jsi_DecrRefCount(interp, fargs);",
          "437:     Jsi_DecrRefCount(interp, fthis);",
          "439: }",
          "",
          "[Removed Lines]",
          "432:     res = jsi_FuncCallSub(interp, fargs, _this, ret, funcPtr, fthis, 0);",
          "438:     return res;",
          "",
          "[Added Lines]",
          "424:     rc = jsi_FuncCallSub(interp, fargs, _this, ret, funcPtr, fthis, 0);",
          "430:     return rc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "446:     return JSI_OK;",
          "447: }",
          "450:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "451: {",
          "452:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "449: Jsi_RC ObjectMergeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "441: static Jsi_RC ObjectMergeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "476: }",
          "478: #if (JSI_HAS___PROTO__==1)",
          "480:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "481: {",
          "482:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "479: Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "471: static Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "486:     return JSI_OK;",
          "487: }",
          "490:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "491: {",
          "492:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "489: Jsi_RC jsi_SetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "481: static Jsi_RC jsi_SetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "502: }",
          "503: #endif",
          "506:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "507: {",
          "508:     Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "505: Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "497: static Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------"
        ],
        "tests/bind.jsi||tests/bind.jsi": [
          "File: tests/bind.jsi -> tests/bind.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: var pp = puts.bind(null,'XX');",
          "38: ;pp('HI');",
          "41: =!EXPECTSTART!=",
          "42: module.getX() ==> 81",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: function h(a) { return {a: a, th: this}; }",
          "41: var i;",
          "42: ;i= h.bind({str: \"foo\"}, 2);",
          "43: ;i.call({x: 1});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: add5(10,11) ==> 21",
          "51: pp('HI') ==> XX HI",
          "52: undefined",
          "53: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: i= h.bind({str: \"foo\"}, 2) ==> \"function () { [native code] }\"",
          "59: i.call({x: 1}) ==> { a:2, th:{ str:\"foo\" } }",
          "",
          "---------------"
        ],
        "tests/prob/bind.js||tests/prob/bind.js": [
          "File: tests/prob/bind.js -> tests/prob/bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "2886c54f7f36ecfea435ae881d7866f28d5b37ff",
      "candidate_info": {
        "commit_hash": "2886c54f7f36ecfea435ae881d7866f28d5b37ff",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2886c54f7f36ecfea435ae881d7866f28d5b37ff",
        "files": [
          "lib/web/jsi.js",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiNumber.c",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "src/jsiWebSocket.c",
          "tests/badfunc.jsi",
          "tests/file2.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.9\": Add File.perms to replace File.type; Build fixes.\n\nFossilOrigin-Name: b8145ed9bd25f95a4d2fe4a47af51881e20f58036d67f09e469c81e545736187",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiNumber.c||src/jsiNumber.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/badfunc.jsi||tests/badfunc.jsi",
          "tests/file2.jsi||tests/file2.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             if (pat === match)",
          "689:                 return;",
          "690:             if (!partial)",
          "692:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "693:             for (i=0; i<ss.length; i++) {",
          "694:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "691:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "[Added Lines]",
          "691:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:             }",
          "697:             for (i in msg) {",
          "698:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "700:             }",
          "701:         }",
          "",
          "[Removed Lines]",
          "699:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "[Added Lines]",
          "699:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)",
          "32: #endif",
          "34: #ifndef MAXPATHLEN",
          "35: #define MAXPATHLEN 1024",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #ifndef S_ISUID",
          "35: #define S_ISUID 0004000",
          "36: #define S_ISGID 0002000",
          "37: #define S_ISVTX 0001000",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         || (create && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_CREATE) != JSI_OK))) \\",
          "47:         return Jsi_LogError(\"%s access denied by safe interp: %s\", writ?\"write\":\"read\", GSVal(fname));",
          "51: {",
          "52:     int rc;",
          "53:     Jsi_StatBuf st;",
          "54:     SAFEACCESS(fnam, 0, 1)",
          "55:     if (islstat)",
          "56:         rc = Jsi_Lstat(interp, fnam, &st);",
          "57:     else",
          "",
          "[Removed Lines]",
          "49: Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value *_this,",
          "50:     Jsi_Value **ret, Jsi_Func *funcPtr, int islstat)",
          "",
          "[Added Lines]",
          "55: static char* getFileTypeCh(int mode, char smode[])",
          "56: {",
          "57:     char c = '-';",
          "58:     if (S_ISREG(mode))",
          "59:         c = '-';",
          "60:     else if (S_ISDIR(mode))",
          "61:         c = 'd';",
          "62: #ifdef S_ISLNK",
          "63:     else if (S_ISLNK(mode))",
          "64:         c = 'l';",
          "65: #endif",
          "66: #ifdef S_ISCHR",
          "67:     else if (S_ISCHR(mode))",
          "68:         c = 'c';",
          "69: #endif",
          "70: #ifdef S_ISBLK",
          "71:     else if (S_ISBLK(mode))",
          "72:         c = 'b';",
          "73: #endif",
          "74: #ifdef S_ISFIFO",
          "75:     else if (S_ISFIFO(mode))",
          "76:         c = 'p';",
          "77: #endif",
          "78: #ifdef S_ISSOCK",
          "79:     else if (S_ISSOCK(mode))",
          "80:         c = 's';",
          "81: #endif",
          "82:     int i = 0;",
          "83:     smode[i++] = c;",
          "84:     smode[i++] =  ((mode & S_IRUSR)?'r':'-');",
          "85:     smode[i++] =  ((mode & S_IWUSR)?'w':'-');",
          "86:     smode[i++] =  ((mode & S_ISUID)?((mode & S_IXUSR)?'s':'S'): ((mode & S_IXUSR)?'x':'-'));",
          "87:     smode[i++] =  ((mode & S_IRGRP)?'r':'-');",
          "88:     smode[i++] =  ((mode & S_IWGRP)?'w':'-');",
          "89:     smode[i++] =  ((mode & S_ISGID)?((mode & S_IXGRP)?'s':'S'): ((mode & S_IXGRP)?'x':'-'));",
          "90:     smode[i++] =  ((mode & S_IROTH)?'r':'-');",
          "91:     smode[i++] =  ((mode & S_IWOTH)?'w':'-');",
          "92:     smode[i++] =  ((mode & S_ISVTX)?((mode & S_IXOTH)?'t':'T'): ((mode & S_IXOTH)?'x':'-'));",
          "93:     smode[i] = 0;",
          "94:     return smode;",
          "95: }",
          "97: Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value **ret, int flags)",
          "102:     int islstat = flags&1;",
          "103:     int isshort = flags&2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     nnv = Jsi_ValueMakeNumber(interp, NULL, (Jsi_Number)val); \\",
          "69:     Jsi_ObjInsert(interp, ores, nam, nnv, 0);",
          "74: #ifndef __WIN32",
          "76: #endif",
          "79:     Jsi_ValueDup2(interp, ret, vres);",
          "80:     Jsi_DecrRefCount(interp, vres);",
          "81:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "71:     MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino); MKDBL(\"mode\",st. st_mode);",
          "72:     MKDBL(\"nlink\",st.st_nlink); MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "73:     MKDBL(\"rdev\",st.st_rdev);",
          "75:     MKDBL(\"blksize\",st.st_blksize); MKDBL(\"blocks\",st.st_blocks);",
          "77:     MKDBL(\"atime\",st.st_atime); MKDBL(\"mtime\",st.st_mtime); MKDBL(\"ctime\",st.st_ctime);",
          "78:     MKDBL(\"size\",st.st_size);",
          "",
          "[Added Lines]",
          "120:     MKDBL(\"mtime\",st.st_mtime); MKDBL(\"size\",st.st_size);",
          "121:     MKDBL(\"uid\",st.st_uid); MKDBL(\"gid\",st.st_gid);",
          "122:     MKDBL(\"mode\",st.st_mode);",
          "123:     char smode[30];",
          "124:     getFileTypeCh(st.st_mode, smode);",
          "125:     Jsi_Value *nv = Jsi_ValueNewStringDup(interp, smode);",
          "126:     Jsi_ObjInsert(interp, ores, \"perms\", nv, 0);",
          "127:     if (!isshort) {",
          "128:         MKDBL(\"dev\",st.st_dev); MKDBL(\"ino\",st.st_ino);",
          "129:         MKDBL(\"nlink\",st.st_nlink); MKDBL(\"rdev\",st.st_rdev);",
          "131:         MKDBL(\"blksize\",st.st_blksize); MKDBL(\"blocks\",st.st_blocks);",
          "133:         MKDBL(\"ctime\",st.st_ctime); MKDBL(\"atime\",st.st_atime);",
          "134:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85: static Jsi_RC FileStatCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "86:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "87: {",
          "89: }",
          "91: static Jsi_RC FileLstatCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "92:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "93: {",
          "95: }",
          "134: FSS_Owned, FSS_Isdir, FSS_Isfile };",
          "136: static Jsi_RC _FileSubstat(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "88:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), _this, ret, funcPtr, 0);",
          "94:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), _this, ret, funcPtr, 1);",
          "97: static const char *getFileType(int mode, int lmode)",
          "98: {",
          "99: #ifdef S_ISLNK",
          "100:     if (S_ISLNK(mode) || S_ISLNK(lmode)) {",
          "101:         return \"link\";",
          "102:     }",
          "103: #endif",
          "104:     if (S_ISDIR(mode)) {",
          "105:         return \"directory\";",
          "106:     }",
          "107: #ifdef S_ISCHR",
          "108:     else if (S_ISCHR(mode)) {",
          "109:         return \"characterSpecial\";",
          "110:     }",
          "111: #endif",
          "112: #ifdef S_ISBLK",
          "113:     else if (S_ISBLK(mode)) {",
          "114:         return \"blockSpecial\";",
          "115:     }",
          "116: #endif",
          "117: #ifdef S_ISFIFO",
          "118:     else if (S_ISFIFO(mode)) {",
          "119:         return \"fifo\";",
          "120:     }",
          "121: #endif",
          "122: #ifdef S_ISSOCK",
          "123:     else if (S_ISSOCK(mode)) {",
          "124:         return \"socket\";",
          "125:     }",
          "126: #endif",
          "127:     else if (S_ISREG(mode)) {",
          "128:         return \"file\";",
          "129:     }",
          "130:     return \"unknown\";",
          "131: }",
          "133: enum { FSS_Exists, FSS_Atime, FSS_Mtime, FSS_Writable, FSS_Readable, FSS_Executable, FSS_Type,",
          "",
          "[Added Lines]",
          "144:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), ret, 0);",
          "150:     return jsi_FileStatCmd(interp, Jsi_ValueArrayIndex(interp, args, 0), ret, 1);",
          "153: enum { FSS_Exists, FSS_Atime, FSS_Mtime, FSS_Writable, FSS_Readable, FSS_Executable, FSS_Perms,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:     Jsi_Value *fnam = Jsi_ValueArrayIndex(interp, args, 0);",
          "140:     int rc;",
          "141:     Jsi_StatBuf st = {}, lst = {};",
          "142:     st.st_uid = -1;",
          "143:     rc = Jsi_Stat(interp, fnam, &st) | Jsi_Lstat(interp, fnam, &lst);",
          "144:     switch (sub) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     char smode[30];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:             Jsi_ValueMakeBool(interp, ret, 1);",
          "155: #endif",
          "156:             break;",
          "158:         case FSS_Owned:",
          "159: #ifndef __WIN32",
          "160:             Jsi_ValueMakeBool(interp, ret, rc == 0 && geteuid() == st.st_uid);",
          "",
          "[Removed Lines]",
          "157:         case FSS_Type: Jsi_ValueMakeStringKey(interp, ret, (char*)getFileType((int)st.st_mode, (int)lst.st_mode)); break;",
          "",
          "[Added Lines]",
          "178:         case FSS_Perms:",
          "179:             getFileTypeCh((int)st.st_mode, smode);",
          "180:             Jsi_ValueMakeStringKey(interp, ret, smode); break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:     return _FileSubstat(interp, args, _this, ret, funcPtr, FSS_##nam);\\",
          "177: }",
          "178: MAKE_FSS_SUB(Exists) MAKE_FSS_SUB(Atime) MAKE_FSS_SUB(Writable) MAKE_FSS_SUB(Readable)",
          "180: MAKE_FSS_SUB(Isdir) MAKE_FSS_SUB(Isfile) MAKE_FSS_SUB(Mtime)",
          "181: #ifndef __WIN32",
          "182: #define MKDIR_DEFAULT(PATHNAME) mkdir(PATHNAME, 0755)",
          "",
          "[Removed Lines]",
          "179: MAKE_FSS_SUB(Executable) MAKE_FSS_SUB(Type) MAKE_FSS_SUB(Owned)",
          "",
          "[Added Lines]",
          "202: MAKE_FSS_SUB(Executable) MAKE_FSS_SUB(Perms) MAKE_FSS_SUB(Owned)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "844:     int flags;",
          "845:     bool retCount;",
          "847:     int discardCnt;",
          "848:     int maxDiscard;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:     bool retInfo;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "856:     const char *prefix;",
          "857: } GlobData;",
          "860: static Jsi_OptionSpec GlobOptions[] = {",
          "861:     JSI_OPT(STRING, GlobData, dir,      .help=\"The start directory: this path will not be prepended to results\"),",
          "862:     JSI_OPT(INT,    GlobData, maxDepth, .help=\"Maximum directory depth to recurse into\"),",
          "",
          "[Removed Lines]",
          "859: const char *globRetValues[] = { \"file\", \"dir\", \"both\", \"count\" };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "868:     JSI_OPT(STRKEY, GlobData, prefix,   .help=\"String prefix to prepend to each file in result list\"),",
          "869:     JSI_OPT(BOOL,   GlobData, recurse,  .help=\"Recurse into sub-directories\"),",
          "870:     JSI_OPT(BOOL,   GlobData, retCount, .help=\"Return only the count of matches\"),",
          "871:     JSI_OPT(BOOL,   GlobData, tails,    .help=\"Returned only tail of path\"),",
          "872:     JSI_OPT(STRKEY, GlobData, types,    .help=\"Filter files to include type: one or more of chars 'fdlpsbc' for file, directory, link, etc\"),",
          "873:     JSI_OPT_END(GlobData, .help=\"Glob options\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:     JSI_OPT(BOOL,   GlobData, retInfo,  .help=\"Return file info: size, uid, gid, mode, name, and path\"),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "880:     if (cnt>interp->maxIncDepth || !path)",
          "881:         return Jsi_LogError(\"runaway File.globs\");",
          "882:     struct dirent **namelist;",
          "883:     Jsi_RC rc = JSI_OK;",
          "884:     int i, n, flags = opts->flags, slen;",
          "885:     bool bres = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "907:     char pbuf[PATH_MAX];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "960:         if (ftyp == DT_LNK) {",
          "961:             if (opts->noTypes && (!(flags&JSI_FILE_TYPE_LINK)))",
          "962:                 continue;",
          "964:             snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", spath, (spath[0]?\"/\":\"\"),  z);",
          "965:             Jsi_StatBuf stat;",
          "966:             Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "",
          "[Removed Lines]",
          "963:             char pbuf[PATH_MAX];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "971:             if (S_ISDIR(stat.st_mode))",
          "972:                 ftyp = DT_DIR;",
          "973:         }",
          "975:             if (mid) {",
          "976:                 if (zPattern != NULL && Jsi_GlobMatch(zPattern, z, 0) == 0)",
          "977:                     continue;",
          "",
          "[Removed Lines]",
          "974:         if (ftyp == DT_DIR) {",
          "",
          "[Added Lines]",
          "998:         if (ftyp != DT_DIR) {",
          "999:             if (!(flags&JSI_FILE_TYPE_FILES) || mid)",
          "1000:                 continue;",
          "1001:         } else {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "999:                     else if (bres!=0 && bres!=1)",
          "1000:                         rc = JSI_ERROR;",
          "1001:                 }",
          "1021:                 zz = Jsi_DSValue(&sStr);",
          "1022:                 rc = SubGlobsDirectory(interp, obj, reg, zPattern, zz, opts, deep+1, cnt+1);",
          "1023:                 Jsi_DSFree(&sStr);",
          "",
          "[Removed Lines]",
          "1002:                 if (opts->types && Jsi_Strchr(opts->types, 'd')) {",
          "1003:                     opts->cnt++;",
          "1004:                     if (!opts->retCount) {",
          "1005:                         Jsi_DString pStr;",
          "1006:                         Jsi_DSInit(&pStr);",
          "1007:                         if (opts->prefix)",
          "1008:                             Jsi_DSAppend(&pStr, opts->prefix, z, NULL);",
          "1009:                         if (!opts->tails && spath[0])",
          "1010:                             Jsi_DSAppend(&pStr, spath, \"/\", NULL);",
          "1011:                         Jsi_DSAppend(&pStr, z, NULL);",
          "1012:                         zz = Jsi_DSValue(&pStr);",
          "1013:                         if (opts->dirLen && Jsi_Strlen(zz)>=(uint)opts->dirLen) {",
          "1014:                             zz += opts->dirLen;",
          "1015:                             if (zz[0] == '/') zz++;",
          "1016:                         }",
          "1017:                         Jsi_ObjArrayAdd(interp, obj, Jsi_ValueNewStringDup(interp, zz));",
          "1018:                         Jsi_DSFree(&pStr);",
          "1019:                     }",
          "1020:                 }",
          "",
          "[Added Lines]",
          "1029:                 if (opts->types && Jsi_Strchr(opts->types, 'd'))",
          "1030:                     goto dumpit;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1030:             }",
          "1031:             if (opts->types==0 && opts->noTypes && (!(flags&JSI_FILE_TYPE_DIRS)))",
          "1032:                 continue;",
          "1036:         }",
          "1038:         if (opts->types) {",
          "",
          "[Removed Lines]",
          "1033:         } else {",
          "1034:             if (!(flags&JSI_FILE_TYPE_FILES) || mid)",
          "1035:                 continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1100:             } else if (bres!=0 && bres!=1)",
          "1101:                 rc = JSI_ERROR;",
          "1102:         }",
          "1103:         opts->cnt++;",
          "1104:         if (!opts->retCount) {",
          "1106:             if (opts->prefix)",
          "1107:                 Jsi_DSAppend(&tStr, opts->prefix, NULL);",
          "1108:             if (!opts->tails)",
          "",
          "[Removed Lines]",
          "1105:             Jsi_DSFree(&tStr);",
          "",
          "[Added Lines]",
          "1110: dumpit:",
          "1113:             Jsi_DSSetLength(&tStr, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1113:                 z += opts->dirLen;",
          "1114:                 if (z[0] == '/') z++;",
          "1115:             }",
          "1118:         }",
          "1119:         if (opts->limit>0 && opts->cnt >= opts->limit)",
          "1120:             break;",
          "",
          "[Removed Lines]",
          "1116:             rc = Jsi_ObjArrayAdd(interp, obj, Jsi_ValueNewStringDup(interp, z));",
          "1117:             Jsi_DSSetLength(&tStr, 0);",
          "",
          "[Added Lines]",
          "1124:             Jsi_Value *nv;",
          "1125:             if (!opts->retInfo)",
          "1126:                 nv = Jsi_ValueNewStringDup(interp, z);",
          "1127:             else {",
          "1128:                 Jsi_Value *info = Jsi_ValueNew1(interp);",
          "1129:                 snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", spath, (spath[0]?\"/\":\"\"),  z);",
          "1130:                 Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "1131:                 Jsi_IncrRefCount(interp, vpath);",
          "1132:                 rc = jsi_FileStatCmd(interp, vpath, &info, 2);",
          "1133:                 Jsi_DecrRefCount(interp, vpath);",
          "1134:                 if (rc != JSI_OK) {",
          "1135:                     Jsi_DecrRefCount(interp, info);",
          "1136:                     break;",
          "1137:                 }",
          "1138:                 nv = Jsi_ValueNewStringDup(interp, z);",
          "1139:                 Jsi_ObjInsert(interp, info->d.obj, \"name\", nv, 0);",
          "1140:                 if (opts->recurse)",
          "1141:                     Jsi_ObjInsert(interp, info->d.obj, \"path\", (spath[0]?Jsi_ValueNewStringDup(interp, pbuf):nv), 0);",
          "1142:                 nv = info;",
          "1143:             }",
          "1144:             rc = Jsi_ObjArrayAdd(interp, obj, nv);",
          "1145:             if (opts->retInfo)",
          "1146:                 Jsi_DecrRefCount(interp, nv);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1196:         }",
          "1197:         Jsi_DSAppend(&dStr, dcp, (*dcp && dcp[Jsi_Strlen(dcp)-1]!='/')?\"/\":\"\", NULL);",
          "1198:     }",
          "1200:         obj = Jsi_ObjNew(interp);",
          "1201:         Jsi_ValueMakeArrayObject(interp, ret, obj);",
          "1202:     }",
          "",
          "[Removed Lines]",
          "1199:     if (!Data.retCount) {",
          "",
          "[Added Lines]",
          "1228:     if (Data.retCount) {",
          "1229:         if (Data.retInfo) {",
          "1230:             rc = Jsi_LogError(\"Can not use both retCount and retInfo\");",
          "1231:             goto done;",
          "1232:         }",
          "1233:     } else {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1258:     { \"mknod\",      FileMknodCmd,       3,  3, \"file:string, mode:number, dev:number\", .help=\"Create unix device file using mknod\"  },",
          "1259:     { \"mtime\",      FileMtimeCmd,       1,  1, \"file:string\",  .help=\"Return file modified time\", .retType=(uint)JSI_TT_NUMBER },",
          "1260:     { \"owned\",      FileOwnedCmd,       1,  1, \"file:string\",  .help=\"Return true if file is owned by user\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1261:     { \"pwd\",        FilePwdCmd,         0,  0, \"\",  .help=\"Return current directory\", .retType=(uint)JSI_TT_STRING },",
          "1262:     { \"remove\",     FileRemoveCmd,      1,  2, \"file:string, force:boolean=false\",  .help=\"Delete a file or direcotry\" },",
          "1263:     { \"rename\",     FileRenameCmd,      2,  3, \"src:string, dest:string, force:boolean=false\",  .help=\"Rename a file, with possible overwrite\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295:     { \"perms\",      FilePermsCmd,       1,  1, \"file:string\",  .help=\"Return perms string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1271:     { \"tail\",       FileTailCmd,        1,  1, \"file:string\",  .help=\"Return file name minus dirname\", .retType=(uint)JSI_TT_STRING },",
          "1272:     { \"tempfile\",   FileTempfileCmd,    1,  1, \"file:string\",  .help=\"Create a temp file\", .retType=(uint)JSI_TT_ANY },",
          "1273:     { \"truncate\",   FileTruncateCmd,    2,  2, \"file:string, size:number\",  .help=\"Truncate file\" },",
          "1275:     { \"write\",      FileWriteCmd,       2,  3, \"file:string, str:string, mode:string='wb+'\",  .help=\"Write a file\", .retType=(uint)JSI_TT_NUMBER },",
          "1276:     { \"writable\",   FileWritableCmd,    1,  1, \"file:string\",  .help=\"Return true if file is writable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1277:     { NULL, 0,0,0,0, .help=\"Commands for accessing the filesystem\" }",
          "",
          "[Removed Lines]",
          "1274:     { \"type\",       FileTypeCmd,        1,  1, \"file:string\",  .help=\"Return type of file\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "906: {",
          "907:     UdfGet(udf, _this, funcPtr);",
          "908: #if JSI__FILESYS==1",
          "910: #else",
          "911:     return JSI_ERROR;",
          "912: #endif",
          "",
          "[Removed Lines]",
          "909:     return jsi_FileStatCmd(interp, udf->fname, _this, ret, funcPtr, 0);",
          "",
          "[Added Lines]",
          "909:     return jsi_FileStatCmd(interp, udf->fname, ret, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917: {",
          "918:     UdfGet(udf, _this, funcPtr);",
          "919: #if JSI__FILESYS==1",
          "921: #else",
          "922:     return JSI_ERROR;",
          "923: #endif",
          "",
          "[Removed Lines]",
          "920:     return jsi_FileStatCmd(interp, udf->fname, _this, ret, funcPtr, 1);",
          "",
          "[Added Lines]",
          "920:     return jsi_FileStatCmd(interp, udf->fname, ret, 1);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:     struct Jsi_Obj *constructor;",
          "532: #ifdef JSI_MEM_DEBUG",
          "533:     jsi_ValueDebug VD;",
          "534: #endif",
          "",
          "[Removed Lines]",
          "531:     int gc_refs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:         struct Jsi_Value *lval;",
          "565:         const char *lookupFail;",
          "566:     } d;",
          "568: #ifdef JSI_MEM_DEBUG",
          "569:     jsi_ValueDebug VD;",
          "570: #endif",
          "",
          "[Removed Lines]",
          "567:     struct Jsi_Value *next, *prev;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:     Jsi_InterpDebug *dbPtr;",
          "1148:     jsiCallTraceProc traceHook;",
          "1150:     int maxOpCnt;",
          "1151:     int maxUserObjs;",
          "1152:     int userObjCnt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     int memLeakCnt;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1463: extern Jsi_Value* jsi_MakeFuncValueSpec(Jsi_Interp *interp, Jsi_CmdSpec *cmdSpec, void *privData);",
          "1464: extern bool jsi_FuncArgCheck(Jsi_Interp *interp, Jsi_Func *f, const char *argStr);",
          "1465: extern bool jsi_CommandArgCheck(Jsi_Interp *interp, Jsi_CmdSpec *cmdSpec, Jsi_Func *f, const char *parent);",
          "1468: extern Jsi_RC jsi_LoadLoadCmd(Jsi_Interp *interp, Jsi_Value *args,",
          "1469:     Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1470: extern Jsi_RC jsi_LoadUnloadCmd(Jsi_Interp *interp, Jsi_Value *args,",
          "",
          "[Removed Lines]",
          "1466: extern Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value *_this,",
          "1467:     Jsi_Value **ret, Jsi_Func *funcPtr, int islstat);",
          "",
          "[Added Lines]",
          "1466: extern Jsi_RC jsi_FileStatCmd(Jsi_Interp *interp, Jsi_Value *fnam, Jsi_Value **ret, int flags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1476: extern Jsi_Value *jsi_LoadFunction(Jsi_Interp *interp, const char *str, Jsi_Value *tret);",
          "1477: extern Jsi_RC jsi_SysExecCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1478:     Jsi_Value **ret, Jsi_Func *funcPtr, bool restricted);",
          "1480: extern Jsi_FuncObj *jsi_FuncObjNew(Jsi_Interp *interp, Jsi_Func *func);",
          "1481: extern void jsi_FuncObjFree(Jsi_FuncObj *fobj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1478: extern void jsi_ObjInsertCheck(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, bool add);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1520: extern Jsi_Number jsi_VersionNormalize(Jsi_Number ver, char *obuf, size_t osiz);",
          "1521: extern const char* jsi_FuncGetCode(Jsi_Interp *interp, Jsi_Func *func, int *lenPtr);",
          "1522: extern Jsi_RC jsi_RegExpMatches(Jsi_Interp *interp, Jsi_Value *pattern, const char *str, int slen, Jsi_Value *ret, int *ofs, bool match);",
          "1525: extern Jsi_RC Jsi_CleanValue(Jsi_Interp *interp, Jsi_Interp *tointerp, Jsi_Value *val, Jsi_Value **ret); //TODO: EXPORT",
          "1526: extern void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr);",
          "",
          "[Removed Lines]",
          "1523: extern int jsi_AllObjOp(Jsi_Interp *interp, Jsi_Obj* obj, int op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1568: extern void jsi_DebugObj(Jsi_Obj* o, const char *reason, uint idx, Jsi_Interp *interp);",
          "1570: #define jsi_DebugValueCallIdx() ++interp->dbPtr->memDebugCallIdx",
          "1572: #else",
          "1573: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}  }",
          "1574: #define jsi_ValueDebugUpdate(interp, vd, v, tbl, file, line, func)",
          "",
          "[Removed Lines]",
          "1571: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}, .d={}, .next=NULL, .prev=NULL, .VD={.fname=__FILE__, .line=__LINE__,.func=__PRETTY_FUNCTION__}  }",
          "",
          "[Added Lines]",
          "1569: #define VALINIT { __VALSIG__ .refCnt=1, .vt=JSI_VT_UNDEF, .f={.flag=JSI_OM_ISSTATIC}, .d={}, .VD={.fname=__FILE__, .line=__LINE__,.func=__PRETTY_FUNCTION__}  }",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
          "107:     JSI_OPT(INT,   Jsi_Interp, maxOpCnt,    .help=\"Execution limit for op-code evaluation\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "108:     JSI_OPT(INT,   Jsi_Interp, memDebug,    .help=\"Memory debugging level: 1=summary, 2=detail\", .flags=JSI_OPT_NO_CLEAR),",
          "109:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "110:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     JSI_OPT(INT,   Jsi_Interp, memLeakCnt,  .help=\"Leak memory count due to object added to self\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1966:         Jsi_HashDelete(interp->packageHash);",
          "1967:     Jsi_HashDelete(interp->assocTbl);",
          "1968:     interp->cleanup = 1;",
          "1970: #ifdef JSI_MEM_DEBUG",
          "1971:     jsi_DebugDumpValues(interp);",
          "1972: #endif",
          "",
          "[Removed Lines]",
          "1969:     jsi_AllObjOp(interp, NULL, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2398:         oldse = se;",
          "2399:         int isExec = se->isExec;",
          "2400:         if (se->acdata) {",
          "2402:         }",
          "2403:         else if (se->acfunc) {",
          "2404:             if (JSI_OK != Jsi_FunctionInvokeJSON(interp, se->acfunc, Jsi_DSValue(&se->data), NULL))",
          "",
          "[Removed Lines]",
          "2401:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), se->acdata);",
          "",
          "[Added Lines]",
          "2402:             jsi_AliasCreateCmd(interp, Jsi_DSValue(&se->func), (AliasCmd*)se->acdata);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2726:         Jsi_LogError(\"eval failure\");",
          "2727:         interp->threadErrCnt++;",
          "2728:         if (Jsi_MutexLock(interp, interp->Mutex) != JSI_OK)",
          "2729:             return NULL;",
          "2730:         Jsi_MutexUnlock(interp, interp->Mutex);",
          "2731:     }",
          "2732:     interpObjErase(udf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2730: #ifdef __WIN32",
          "2731:             return;",
          "2732: #else",
          "2734: #endif",
          "",
          "---------------"
        ],
        "src/jsiNumber.c||src/jsiNumber.c": [
          "File: src/jsiNumber.c -> src/jsiNumber.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "15: int Jsi_NumberIsInfinity(Jsi_Number a) {",
          "17:     if (!isinf(a))",
          "18:         return 0;",
          "19:     return (a<0 ? -1 : 1);",
          "",
          "[Removed Lines]",
          "16: #if JSI__MUSL==1 || defined(__FreeBSD__) || defined(__WIN32)",
          "",
          "[Added Lines]",
          "16: #if JSI__MUSL==1 || defined(__FreeBSD__) || defined(__WIN32) || defined(__cplusplus)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     ChkStringN(_this, funcPtr, v);",
          "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
          "150:         return JSI_ERROR;",
          "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
          "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
          "154:     if (num<0)",
          "",
          "[Removed Lines]",
          "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
          "",
          "[Added Lines]",
          "151:     if (prec<=0 || (uint)prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return JSI_OK;",
          "145: }",
          "148:     if (op==2) {",
          "149:         Jsi_Obj* o = interp->allObjs;",
          "150:         while (o) {",
          "",
          "[Removed Lines]",
          "147: int jsi_AllObjOp(Jsi_Interp *interp, Jsi_Obj* obj, int op) {",
          "",
          "[Added Lines]",
          "148: void jsi_ObjInsertCheck(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, bool add)",
          "149: {",
          "150:     if (!add) return;",
          "151:     if (obj == value->d.obj && !interp->memLeakCnt++)",
          "152:         Jsi_LogWarn(\"recursive add of object will leak memory\");",
          "153: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207: #ifndef JSI_MEM_DEBUG",
          "208: Jsi_Obj * Jsi_ObjNew(Jsi_Interp *interp) {",
          "209:     Jsi_Obj *obj = jsi_ObjNew_(interp);",
          "211:     return obj;",
          "212: }",
          "213: #else",
          "214: Jsi_Obj * jsi_ObjNew(Jsi_Interp *interp, const char *fname, int line, const char *func) {",
          "215:     Jsi_Obj *obj = jsi_ObjNew_(interp);",
          "216:     jsi_ValueDebugUpdate(interp, obj, objDebugTbl, fname, line, func);",
          "218:     return obj;",
          "219: }",
          "",
          "[Removed Lines]",
          "210:     jsi_AllObjOp(interp, obj, 1);",
          "217:     jsi_AllObjOp(interp, obj, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225: #ifdef JSI_MEM_DEBUG",
          "226:     jsi_ValueDebugUpdate(interp, obj, objDebugTbl, NULL, 0, NULL);",
          "227: #endif",
          "229:     return obj;",
          "230: }",
          "231: #define Jsi_ObjNew(interp) jsi_ObjNew(interp, __FILE__, __LINE__,__PRETTY_FUNCTION__)",
          "",
          "[Removed Lines]",
          "228:     jsi_AllObjOp(interp, obj, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258: {",
          "259:     interp->dbPtr->objCnt--;",
          "262: #ifdef JSI_MEM_DEBUG",
          "263:     if (interp != obj->VD.interp)",
          "264:         printf(\"interp mismatch of objFree: %p!=%p : %p\\n\", interp, obj->VD.interp, obj);",
          "",
          "[Removed Lines]",
          "261:     jsi_AllObjOp(interp, obj, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:     if (Jsi_ObjArraySizer(interp, o, len+1) <= 0)",
          "340:         return JSI_ERROR;",
          "341:     o->arr[len] = v;",
          "342:     if (v)",
          "343:         Jsi_IncrRefCount(interp, v);",
          "344:     assert(o->arrCnt<=o->arrMaxSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     if (v && v->vt == JSI_VT_OBJECT)",
          "352:         jsi_ObjInsertCheck(interp, o, v, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "358:     obj->arr[n] = value;",
          "359:     if (value)",
          "360:         Jsi_IncrRefCount(interp, value);",
          "361:     m = Jsi_ObjGetLength(interp, obj);",
          "362:     if ((n+1) > m)",
          "363:        Jsi_ObjSetLength(interp, obj, n+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:     if (value && value->vt == JSI_VT_OBJECT)",
          "373:         jsi_ObjInsertCheck(interp, obj, value, 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "369: {",
          "370:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "371:         return NULL;",
          "372:     if (obj->arr[n])",
          "373:     {",
          "374:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:     if (value->vt == JSI_VT_OBJECT)",
          "386:         jsi_ObjInsertCheck(interp, obj, value, 1);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     return valPtr;",
          "328: }",
          "366: Jsi_Value *Jsi_ValueObjLookup(Jsi_Interp *interp, Jsi_Value *target, const char *key, int isstrkey)",
          "367: {",
          "",
          "[Removed Lines]",
          "330: #if 0",
          "331: void jsi_AllValueOp(Jsi_Interp *interp, Jsi_Value* val, int op) {",
          "332:     if (op==1) {",
          "334:         assert(interp->allValues!=val);",
          "335:         val->next = interp->allValues;",
          "336:         if (interp->allValues)",
          "337:             interp->allValues->prev = val;",
          "338:         interp->allValues = val;",
          "339:         return;",
          "340:     }",
          "341:     if (op==0) {",
          "343:         if (!val || !interp->allValues) return;",
          "344:         if (val == interp->allValues)",
          "345:             interp->allValues = val->next;",
          "346:         if (val->next)",
          "347:             val->next->prev = val->prev;",
          "348:         if (val->prev)",
          "349:             val->prev->next = val->next;",
          "350:         return;",
          "351:     }",
          "352:     if (op == -1) {",
          "353:         while (interp->allValues) {",
          "354:             printf(\"NEED CLEANUP: %p\\n\", interp->allValues);",
          "355:             Jsi_ValueFree(interp, interp->allValues);",
          "356:         }",
          "357:         return;",
          "358:     }",
          "359: #if JSI__MEMDEBUG",
          "360:     assert(0);",
          "361:     abort();",
          "362: #endif",
          "363: }",
          "364: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:     SIGASSERT(val, VALUE);",
          "1419:     hPtr = Jsi_TreeObjSetValue(obj, key, val, (flags&JSI_OM_ISSTRKEY));",
          "1420:     if ((flags&JSI_OM_DONTDEL))",
          "1421:         val->f.bits.dontdel = hPtr->f.bits.dontdel = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1384:     if (val->vt == JSI_VT_OBJECT)",
          "1385:         jsi_ObjInsertCheck(interp, obj, val, 1);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:         if (hPtr) {",
          "849:             jsi_wsFile* fPtr;",
          "850:             if (!isNew)",
          "852:             else {",
          "853:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "854:                 fPtr->fileVal = name;",
          "",
          "[Removed Lines]",
          "851:                 fPtr = Jsi_HashValueGet(hPtr);",
          "",
          "[Added Lines]",
          "851:                 fPtr = (typeof(fPtr))Jsi_HashValueGet(hPtr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "938:         Jsi_DecrRefCount(interp, fval);",
          "939:     }",
          "942:     struct {",
          "943:         int inif, inelse, matched, elide;",
          "944:     } II[11] = {};",
          "",
          "[Removed Lines]",
          "941:     char *cp, *sp, *se, pref[] = \"<!--#\", suffix[] = \"-->\", *msg = NULL;",
          "",
          "[Added Lines]",
          "941:     char *cp, *se, pref[] = \"<!--#\", suffix[] = \"-->\";",
          "942:     const char *sp, *msg = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1034:             Jsi_DSSetLength(&lStr, llen-2);",
          "1035:             cp += 2;",
          "1038:             while (*cp &&  !isalpha(*cp)) {",
          "1039:                 bool fail = 0;",
          "1040:                 switch (*cp) {",
          "",
          "[Removed Lines]",
          "1037:             bool warn = 0, req = 0, nifval = 0, not = 0, isq=0, isu=0, qfirst=0;",
          "",
          "[Added Lines]",
          "1038:             bool warn = 0, req = 0, nifval = 0, inot = 0, isq=0, isu=0, qfirst=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1043:                     case '?': isq = 1; break;",
          "1044:                     case '@': warn = !II[ii].matched; break;",
          "1045:                     case '*': req = !II[ii].matched; break;",
          "1047:                     default: fail=1; break;",
          "1048:                 }",
          "1049:                 if (fail) { msg = \"modifier must be one of: !:=?@*\"; break; }",
          "",
          "[Removed Lines]",
          "1046:                     case '!': not = 1; break;",
          "",
          "[Added Lines]",
          "1047:                     case '!': inot = 1; break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1067:                     Jsi_LogWarn(\"symbol \\\"%s\\\" should be a boolean: %s\", cp, fbuf);",
          "1068:                 }",
          "1069:             }",
          "1071:             if (!iselif) {",
          "1072:                 if (nifval)",
          "1073:                     II[ii].matched = 1;",
          "",
          "[Removed Lines]",
          "1070:             if (not) nifval = !nifval;",
          "",
          "[Added Lines]",
          "1071:             if (inot) nifval = !nifval;",
          "",
          "---------------"
        ],
        "tests/badfunc.jsi||tests/badfunc.jsi": [
          "File: tests/badfunc.jsi -> tests/badfunc.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: =!EXPECTSTART!=",
          "25: e ==> 'xx', functions are: bad big ugly.",
          "27: Info.funcs(x) ==> [ \"bad\", \"big\", \"ugly\" ]",
          "28: Info.data(x) ==> [ \"a\", \"b\" ]",
          "29: Info.data() ==> [ \"x\" ]",
          "",
          "[Removed Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime owned pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate type writable write.",
          "",
          "[Added Lines]",
          "26: e2 ==> 'xx' sub-commands are: atime chdir chmod copy dirname executable exists extension glob isdir isfile isrelative join link lstat mkdir mknod mtime owned perms pwd read readable readlink realpath remove rename rootname size stat tail tempfile truncate writable write.",
          "",
          "---------------"
        ],
        "tests/file2.jsi||tests/file2.jsi": [
          "File: tests/file2.jsi -> tests/file2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: ;File.dirname('XX1/AA');",
          "9: ;File.rootname('XX1/CC.txt');",
          "10: ;File.tail('XX1/CC.txt');",
          "12: ;File.extension('XX1/CC.txt');",
          "14: ;File.writable('XX1/CC.txt');",
          "",
          "[Removed Lines]",
          "11: ;File.type('XX1/CC.txt');",
          "",
          "[Added Lines]",
          "11: ;File.perms('XX1/CC.txt');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: File.dirname('XX1/AA') ==> XX1",
          "25: File.rootname('XX1/CC.txt') ==> XX1/CC",
          "26: File.tail('XX1/CC.txt') ==> CC.txt",
          "28: File.extension('XX1/CC.txt') ==> .txt",
          "29: File.writable('XX1/CC.txt') ==> true",
          "30: File.readable('XX1/CC.txt') ==> true",
          "",
          "[Removed Lines]",
          "27: File.type('XX1/CC.txt') ==> directory",
          "",
          "[Added Lines]",
          "27: File.perms('XX1/CC.txt') ==> drwxr-xr-x",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: File.prototype.mknod = function(file:string, mode:number, dev:number):any {};",
          "106: File.prototype.mtime = function(file:string):number {};",
          "107: File.prototype.owned = function(file:string):boolean {};",
          "108: File.prototype.pwd = function():string {};",
          "109: File.prototype.read = function(file:string, mode:string='rb'):string {};",
          "110: File.prototype.readable = function(file:string):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: File.prototype.perms = function(file:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: File.prototype.tail = function(file:string):string {};",
          "119: File.prototype.tempfile = function(file:string):any {};",
          "120: File.prototype.truncate = function(file:string, size:number):any {};",
          "122: File.prototype.writable = function(file:string):boolean {};",
          "123: File.prototype.write = function(file:string, str:string, mode:string='wb+'):number {};",
          "124: var Function = function(cmd,args) {};",
          "",
          "[Removed Lines]",
          "121: File.prototype.type = function(file:string):string {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: <tr><td>mknod</td><td>mknod(file:string, mode:number, dev:number) </td><td>Create unix device file using mknod.</td></tr>",
          "461: <tr><td>mtime</td><td>mtime(file:string):number </td><td>Return file modified time.</td></tr>",
          "462: <tr><td>owned</td><td>owned(file:string):boolean </td><td>Return true if file is owned by user.</td></tr>",
          "463: <tr><td>pwd</td><td>pwd():string </td><td>Return current directory.</td></tr>",
          "464: <tr><td>read</td><td>read(file:string, mode:string='rb'):string </td><td>Read a file.</td></tr>",
          "465: <tr><td>readable</td><td>readable(file:string):boolean </td><td>Return true if file is readable.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: <tr><td>perms</td><td>perms(file:string):string </td><td>Return perms string.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: <tr><td>tail</td><td>tail(file:string):string </td><td>Return file name minus dirname.</td></tr>",
          "474: <tr><td>tempfile</td><td>tempfile(file:string) </td><td>Create a temp file.</td></tr>",
          "475: <tr><td>truncate</td><td>truncate(file:string, size:number) </td><td>Truncate file.</td></tr>",
          "477: <tr><td>writable</td><td>writable(file:string):boolean </td><td>Return true if file is writable.</td></tr>",
          "478: <tr><td>write</td><td>write(file:string, str:string, mode:string='wb+'):number </td><td>Write a file.</td></tr>",
          "479: </table>",
          "",
          "[Removed Lines]",
          "476: <tr><td>type</td><td>type(file:string):string </td><td>Return type of file.</td></tr>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494: <tr><td>prefix</td><td><i>STRKEY</i></td><td>String prefix to prepend to each file in result list.</td><td><i></i></td></tr>",
          "495: <tr><td>recurse</td><td><i>BOOL</i></td><td>Recurse into sub-directories.</td><td><i></i></td></tr>",
          "496: <tr><td>retCount</td><td><i>BOOL</i></td><td>Return only the count of matches.</td><td><i></i></td></tr>",
          "497: <tr><td>tails</td><td><i>BOOL</i></td><td>Returned only tail of path.</td><td><i></i></td></tr>",
          "498: <tr><td>types</td><td><i>STRKEY</i></td><td>Filter files to include type: one or more of chars 'fdlpsbc' for file, directory, link, etc.</td><td><i></i></td></tr>",
          "499: </table>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: <tr><td>retInfo</td><td><i>BOOL</i></td><td>Return file info: size, uid, gid, mode, name, and path.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
          "640: <tr><td>maxOpCnt</td><td><i>INT</i></td><td>Execution limit for op-code evaluation.</td><td><i>initOnly</i></td></tr>",
          "641: <tr><td>memDebug</td><td><i>INT</i></td><td>Memory debugging level: 1=summary, 2=detail.</td><td><i></i></td></tr>",
          "642: <tr><td>name</td><td><i>STRKEY</i></td><td>Optional text name for this interp.</td><td><i></i></td></tr>",
          "643: <tr><td>noAutoLoad</td><td><i>BOOL</i></td><td>Disable autoload.</td><td><i></i></td></tr>",
          "644: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of Interp.conf to change options after create.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643: <tr><td>memLeakCnt</td><td><i>INT</i></td><td>Leak memory count due to object added to self.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
      "candidate_info": {
        "commit_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/aba08f26723780343aba70c2c1009eda1e18d39e",
        "files": [
          "Configs/make_devel.conf",
          "Makefile",
          "lws/Makefile",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.24\": switch from libwebsocket to lws.\n\nFossilOrigin-Name: 744e7806cafdf1ada5625983a525d064af31cd482cc2d69f1d08fefff027832f",
        "before_after_code_files": [
          "Configs/make_devel.conf||Configs/make_devel.conf",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "Configs/make_devel.conf||Configs/make_devel.conf": [
          "File: Configs/make_devel.conf -> Configs/make_devel.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: JSI__LOAD=1",
          "12: JSI__MATH=1",
          "13: JSI__MD5=1",
          "14: JSI__READLINE=1",
          "15: JSI__SHA1=1",
          "16: JSI__SHA256=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: JSI__MINIZ=0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: XCPREFIX=",
          "37: BUILDMODS=",
          "40: MODFLAGS=",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Devel --opt=+sanitize,memdebug",
          "",
          "[Removed Lines]",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=0 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 23",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 24",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <signal.h>",
          "58: static const int jsi_WsPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "55: #include <libwebsockets.h>",
          "",
          "[Added Lines]",
          "55: #include <liblws.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:         cmdPtr->mimeTypes = Jsi_ValueMakeObject(interp, NULL, NULL);",
          "1217:         Jsi_IncrRefCount(interp, cmdPtr->mimeTypes);",
          "1218:     }",
          "1220:     int i;",
          "1221:     for (i=0; jsi_ws_mtypes[i]; i+=2)",
          "1222:         if (!ex || !Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, jsi_ws_mtypes[i], 1))",
          "",
          "[Removed Lines]",
          "1219:     Jsi_Obj *obj = cmdPtr->mimeTypes->d.obj;",
          "",
          "[Added Lines]",
          "1219:     Jsi_Obj *obj = Jsi_ValueGetObj(interp, cmdPtr->mimeTypes);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}