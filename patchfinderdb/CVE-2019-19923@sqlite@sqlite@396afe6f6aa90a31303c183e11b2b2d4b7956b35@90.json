{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
      "candidate_info": {
        "commit_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Omit deprecated PRAGMAs when compiling with the -DSQLITE_OMIT_DEPRECATED option.\n\nFossilOrigin-Name: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1601db7adba2dccd4f90fbbe5099c801a2b0d97af087fbe82ed98d05496b38c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: #endif",
          "213: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "214:  {/* zName:     */ \"count_changes\",",
          "219: #endif",
          "220: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "221:  {/* zName:     */ \"data_store_directory\",",
          "226: #endif",
          "227: #if !defined(SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS)",
          "228:  {/* zName:     */ \"data_version\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "221: #endif",
          "223: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "230: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #endif",
          "242:  {/* zName:     */ \"default_cache_size\",",
          "247: #endif",
          "248: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "249: #if !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "250:  {/* zName:     */ \"defer_foreign_keys\",",
          "",
          "[Removed Lines]",
          "241: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "245: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "246: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "253: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255: #endif",
          "256: #endif",
          "257: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "258:  {/* zName:     */ \"empty_result_callbacks\",",
          "263: #endif",
          "264: #if !defined(SQLITE_OMIT_UTF16)",
          "265:  {/* zName:     */ \"encoding\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "271: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: #endif",
          "301: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "302:  {/* zName:     */ \"full_column_names\",",
          "307:  {/* zName:     */ \"fullfsync\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "316: #endif",
          "317: #endif",
          "318: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "531: #endif",
          "532: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "533:  {/* zName:     */ \"short_column_names\",",
          "538: #endif",
          "539:  {/* zName:     */ \"shrink_memory\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "551: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "590:  {/* zName:     */ \"temp_store_directory\",",
          "595: #endif",
          "596: #if defined(SQLITE_HAS_CODEC)",
          "597:  {/* zName:     */ \"textkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: #endif",
          "605: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "606: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "613: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   TYPE: FLAG",
          "26:   ARG:  SQLITE_FullColNames",
          "27:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "29:   NAME: short_column_names",
          "30:   TYPE: FLAG",
          "31:   ARG:  SQLITE_ShortColNames",
          "32:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "34:   NAME: count_changes",
          "35:   TYPE: FLAG",
          "36:   ARG:  SQLITE_CountRows",
          "37:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "39:   NAME: empty_result_callbacks",
          "40:   TYPE: FLAG",
          "41:   ARG:  SQLITE_NullCallback",
          "42:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "44:   NAME: legacy_file_format",
          "45:   TYPE: FLAG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "34:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "40:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "46:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:   NAME: default_cache_size",
          "153:   FLAG: NeedSchema Result0 SchemaReq NoColumns1",
          "154:   COLS: cache_size",
          "157:   NAME: page_size",
          "158:   FLAG: Result0 SchemaReq NoColumns1",
          "",
          "[Removed Lines]",
          "155:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "159:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "160:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:   NAME: temp_store_directory",
          "206:   FLAG: NoColumns1",
          "207:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "209:   NAME: data_store_directory",
          "210:   FLAG: NoColumns1",
          "211:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "213:   NAME: lock_proxy_file",
          "214:   FLAG: NoColumns1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "219:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
      "candidate_info": {
        "commit_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Ensure that columns of views and sub-queries that are expressions with no affinity are comparied without any type conversions, as required in the documentation.  Tickets [61c853857f40da49] and [d52a29a9e6bc55c5].\n\nFossilOrigin-Name: 9c8c1092a8ce80e114fcfe8ce780332a6f269b8c87df226242b582d2d825c393",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2447:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: char sqlite3CompareAffinity(Expr *pExpr, char aff2){",
          "232:   char aff1 = sqlite3ExprAffinity(pExpr);",
          "",
          "[Removed Lines]",
          "233:   if( aff1 && aff2 ){",
          "",
          "[Added Lines]",
          "233:   if( aff1>SQLITE_AFF_NONE && aff2>SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     }else{",
          "240:       return SQLITE_AFF_BLOB;",
          "241:     }",
          "247:   }else{",
          "251:   }",
          "252: }",
          "",
          "[Removed Lines]",
          "242:   }else if( !aff1 && !aff2 ){",
          "246:     return SQLITE_AFF_BLOB;",
          "249:     assert( aff1==0 || aff2==0 );",
          "250:     return (aff1 + aff2);",
          "",
          "[Added Lines]",
          "244:     assert( aff1<=SQLITE_AFF_NONE || aff2<=SQLITE_AFF_NONE );",
          "245:     return (aff1<=SQLITE_AFF_NONE ? aff2 : aff1) | SQLITE_AFF_NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){",
          "282:   char aff = comparisonAffinity(pExpr);",
          "290:   }",
          "291: }",
          "",
          "[Removed Lines]",
          "283:   switch( aff ){",
          "284:     case SQLITE_AFF_BLOB:",
          "285:       return 1;",
          "286:     case SQLITE_AFF_TEXT:",
          "287:       return idx_affinity==SQLITE_AFF_TEXT;",
          "288:     default:",
          "289:       return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "[Added Lines]",
          "278:   if( aff<SQLITE_AFF_TEXT ){",
          "279:     return 1;",
          "280:   }",
          "281:   if( aff==SQLITE_AFF_TEXT ){",
          "282:     return idx_affinity==SQLITE_AFF_TEXT;",
          "284:   return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2800:     struct ExprList_item *pItem;",
          "2801:     int r1, r2, r3;",
          "2802:     affinity = sqlite3ExprAffinity(pLeft);",
          "2804:       affinity = SQLITE_AFF_BLOB;",
          "2805:     }",
          "2806:     if( pKeyInfo ){",
          "",
          "[Removed Lines]",
          "2803:     if( !affinity ){",
          "",
          "[Added Lines]",
          "2797:     if( affinity<=SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3491:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3492:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3494:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3495:           assert( SQLITE_AFF_BLOB=='A' );",
          "3496:           assert( SQLITE_AFF_TEXT=='B' );",
          "",
          "[Removed Lines]",
          "3493:         if( aff!=SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "3487:         if( aff>SQLITE_AFF_BLOB ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3793:         assert( nFarg==1 );",
          "3794:         aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3795:         sqlite3VdbeLoadString(v, target,",
          "3797:         return target;",
          "3798:       }",
          "3799: #endif",
          "",
          "[Removed Lines]",
          "3796:                               aff ? azAff[aff-SQLITE_AFF_BLOB] : \"none\");",
          "",
          "[Added Lines]",
          "3790:                 (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     }",
          "141:     for(i=0; i<pTab->nCol; i++){",
          "142:       zColAff[i] = pTab->aCol[i].affinity;",
          "143:     }",
          "144:     do{",
          "145:       zColAff[i--] = 0;",
          "147:     pTab->zColAff = zColAff;",
          "148:   }",
          "149:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "146:     }while( i>=0 && zColAff[i]==SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "142:       assert( pTab->aCol[i].affinity!=0 );",
          "147:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity<=SQLITE_AFF_NONE ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel,",
          "5200:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1883: #define sqlite3IsNumericAffinity(X)  ((X)>=SQLITE_AFF_NUMERIC)",
          "",
          "[Removed Lines]",
          "1877: #define SQLITE_AFF_BLOB     'A'",
          "1878: #define SQLITE_AFF_TEXT     'B'",
          "1879: #define SQLITE_AFF_NUMERIC  'C'",
          "1880: #define SQLITE_AFF_INTEGER  'D'",
          "1881: #define SQLITE_AFF_REAL     'E'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3915: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3916: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:   if( !pIdx->zColAff ){",
          "1306:     if( sqlite3IndexAffinityStr(db, pIdx)==0 ) return SQLITE_AFF_BLOB;",
          "1307:   }",
          "1308:   return pIdx->zColAff[iCol];",
          "1309: }",
          "1310: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:   assert( pIdx->zColAff[iCol]!=0 );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   }",
          "334:   assert( v!=0 );",
          "340:     n--;",
          "341:     base++;",
          "342:     zAff++;",
          "343:   }",
          "345:     n--;",
          "346:   }",
          "",
          "[Removed Lines]",
          "339:   while( n>0 && zAff[0]==SQLITE_AFF_BLOB ){",
          "344:   while( n>1 && zAff[n-1]==SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "339:   assert( SQLITE_AFF_NONE<SQLITE_AFF_BLOB );",
          "340:   while( n>0 && zAff[0]<=SQLITE_AFF_BLOB ){",
          "345:   while( n>1 && zAff[n-1]<=SQLITE_AFF_BLOB ){",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
      "candidate_info": {
        "commit_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the new \"bind_fallback\" method to the \"sqlite3\" object in the TCL interface.\n\nFossilOrigin-Name: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:   if( pDb->zProfile ){",
          "550:     Tcl_Free(pDb->zProfile);",
          "551:   }",
          "552:   if( pDb->zAuth ){",
          "553:     Tcl_Free(pDb->zAuth);",
          "554:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   if( pDb->zBindFallback ){",
          "554:     Tcl_Free(pDb->zBindFallback);",
          "555:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "1389:     if( zVar!=0 && (zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ){",
          "1390:       Tcl_Obj *pVar = Tcl_GetVar2Ex(interp, &zVar[1], 0, 0);",
          "1391:       if( pVar ){",
          "1392:         int n;",
          "1393:         u8 *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1397:       if( pVar==0 && pDb->zBindFallback!=0 ){",
          "1398:         Tcl_Obj *pCmd;",
          "1399:         int rx;",
          "1400:         pCmd = Tcl_NewStringObj(pDb->zBindFallback, -1);",
          "1401:         Tcl_IncrRefCount(pCmd);",
          "1402:         Tcl_ListObjAppendElement(interp, pCmd, Tcl_NewStringObj(zVar,-1));",
          "1403:         if( needResultReset ) Tcl_ResetResult(interp);",
          "1404:         needResultReset = 1;",
          "1405:         rx = Tcl_EvalObjEx(interp, pCmd, TCL_EVAL_DIRECT);",
          "1406:         Tcl_DecrRefCount(pCmd);",
          "1407:         if( rx==TCL_OK ){",
          "1408:           pVar = Tcl_GetObjResult(interp);",
          "1409:         }else if( rx==TCL_ERROR ){",
          "1410:           rc = TCL_ERROR;",
          "1411:           break;",
          "1412:         }else{",
          "1413:           pVar = 0;",
          "1414:         }",
          "1415:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1423:       }else{",
          "1424:         sqlite3_bind_null(pStmt, i);",
          "1425:       }",
          "1426:     }",
          "1427:   }",
          "1428:   pPreStmt->nParm = iParm;",
          "1432: }",
          "",
          "[Removed Lines]",
          "1431:   return TCL_OK;",
          "",
          "[Added Lines]",
          "1451:       if( needResultReset ) Tcl_ResetResult(pDb->interp);",
          "1456:   if( needResultReset && rc==TCL_OK ) Tcl_ResetResult(pDb->interp);",
          "1458:   return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1887:   int choice;",
          "1888:   int rc = TCL_OK;",
          "1889:   static const char *DB_strs[] = {",
          "1904:   };",
          "1905:   enum DB_enum {",
          "1919:   };",
          "",
          "[Removed Lines]",
          "1890:     \"authorizer\",             \"backup\",                \"busy\",",
          "1891:     \"cache\",                  \"changes\",               \"close\",",
          "1892:     \"collate\",                \"collation_needed\",      \"commit_hook\",",
          "1893:     \"complete\",               \"copy\",                  \"deserialize\",",
          "1894:     \"enable_load_extension\",  \"errorcode\",             \"eval\",",
          "1895:     \"exists\",                 \"function\",              \"incrblob\",",
          "1896:     \"interrupt\",              \"last_insert_rowid\",     \"nullvalue\",",
          "1897:     \"onecolumn\",              \"preupdate\",             \"profile\",",
          "1898:     \"progress\",               \"rekey\",                 \"restore\",",
          "1899:     \"rollback_hook\",          \"serialize\",             \"status\",",
          "1900:     \"timeout\",                \"total_changes\",         \"trace\",",
          "1901:     \"trace_v2\",               \"transaction\",           \"unlock_notify\",",
          "1902:     \"update_hook\",            \"version\",               \"wal_hook\",",
          "1903:     0",
          "1906:     DB_AUTHORIZER,            DB_BACKUP,               DB_BUSY,",
          "1907:     DB_CACHE,                 DB_CHANGES,              DB_CLOSE,",
          "1908:     DB_COLLATE,               DB_COLLATION_NEEDED,     DB_COMMIT_HOOK,",
          "1909:     DB_COMPLETE,              DB_COPY,                 DB_DESERIALIZE,",
          "1910:     DB_ENABLE_LOAD_EXTENSION, DB_ERRORCODE,            DB_EVAL,",
          "1911:     DB_EXISTS,                DB_FUNCTION,             DB_INCRBLOB,",
          "1912:     DB_INTERRUPT,             DB_LAST_INSERT_ROWID,    DB_NULLVALUE,",
          "1913:     DB_ONECOLUMN,             DB_PREUPDATE,            DB_PROFILE,",
          "1914:     DB_PROGRESS,              DB_REKEY,                DB_RESTORE,",
          "1915:     DB_ROLLBACK_HOOK,         DB_SERIALIZE,            DB_STATUS,",
          "1916:     DB_TIMEOUT,               DB_TOTAL_CHANGES,        DB_TRACE,",
          "1917:     DB_TRACE_V2,              DB_TRANSACTION,          DB_UNLOCK_NOTIFY,",
          "1918:     DB_UPDATE_HOOK,           DB_VERSION,              DB_WAL_HOOK",
          "",
          "[Added Lines]",
          "1917:     \"authorizer\",             \"backup\",                \"bind_fallback\",",
          "1918:     \"busy\",                   \"cache\",                 \"changes\",",
          "1919:     \"close\",                  \"collate\",               \"collation_needed\",",
          "1920:     \"commit_hook\",            \"complete\",              \"copy\",",
          "1921:     \"deserialize\",            \"enable_load_extension\", \"errorcode\",",
          "1922:     \"eval\",                   \"exists\",                \"function\",",
          "1923:     \"incrblob\",               \"interrupt\",             \"last_insert_rowid\",",
          "1924:     \"nullvalue\",              \"onecolumn\",             \"preupdate\",",
          "1925:     \"profile\",                \"progress\",              \"rekey\",",
          "1926:     \"restore\",                \"rollback_hook\",         \"serialize\",",
          "1927:     \"status\",                 \"timeout\",               \"total_changes\",",
          "1928:     \"trace\",                  \"trace_v2\",              \"transaction\",",
          "1929:     \"unlock_notify\",          \"update_hook\",           \"version\",",
          "1930:     \"wal_hook\",               0",
          "1933:     DB_AUTHORIZER,            DB_BACKUP,               DB_BIND_FALLBACK,",
          "1934:     DB_BUSY,                  DB_CACHE,                DB_CHANGES,",
          "1935:     DB_CLOSE,                 DB_COLLATE,              DB_COLLATION_NEEDED,",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_COPY,",
          "1937:     DB_DESERIALIZE,           DB_ENABLE_LOAD_EXTENSION,DB_ERRORCODE,",
          "1938:     DB_EVAL,                  DB_EXISTS,               DB_FUNCTION,",
          "1939:     DB_INCRBLOB,              DB_INTERRUPT,            DB_LAST_INSERT_ROWID,",
          "1940:     DB_NULLVALUE,             DB_ONECOLUMN,            DB_PREUPDATE,",
          "1941:     DB_PROFILE,               DB_PROGRESS,             DB_REKEY,",
          "1942:     DB_RESTORE,               DB_ROLLBACK_HOOK,        DB_SERIALIZE,",
          "1943:     DB_STATUS,                DB_TIMEOUT,              DB_TOTAL_CHANGES,",
          "1944:     DB_TRACE,                 DB_TRACE_V2,             DB_TRANSACTION,",
          "1945:     DB_UNLOCK_NOTIFY,         DB_UPDATE_HOOK,          DB_VERSION,",
          "1946:     DB_WAL_HOOK",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2037:     break;",
          "2038:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2086:   case DB_BIND_FALLBACK: {",
          "2087:     if( objc>3 ){",
          "2088:       Tcl_WrongNumArgs(interp, 2, objv, \"?CALLBACK?\");",
          "2089:       return TCL_ERROR;",
          "2090:     }else if( objc==2 ){",
          "2091:       if( pDb->zBindFallback ){",
          "2092:         Tcl_AppendResult(interp, pDb->zBindFallback, (char*)0);",
          "2093:       }",
          "2094:     }else{",
          "2095:       char *zCallback;",
          "2096:       int len;",
          "2097:       if( pDb->zBindFallback ){",
          "2098:         Tcl_Free(pDb->zBindFallback);",
          "2099:       }",
          "2100:       zCallback = Tcl_GetStringFromObj(objv[2], &len);",
          "2101:       if( zCallback && len>0 ){",
          "2102:         pDb->zBindFallback = Tcl_Alloc( len + 1 );",
          "2103:         memcpy(pDb->zBindFallback, zCallback, len+1);",
          "2104:       }else{",
          "2105:         pDb->zBindFallback = 0;",
          "2106:       }",
          "2107:     }",
          "2108:     break;",
          "2109:   }",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_test tcl-1.2 {",
          "43:   set v [catch {db bogus} msg]",
          "44:   lappend v $msg",
          "46: do_test tcl-1.2.1 {",
          "47:   set v [catch {db cache bogus} msg]",
          "48:   lappend v $msg",
          "",
          "[Removed Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "[Added Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Removed Lines]",
          "794: finish_test",
          "",
          "[Added Lines]",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "796: do_test 18.100 {",
          "797:   unset -nocomplain bindings abc def ghi jkl mno e01 e02",
          "798:   set bindings(abc) [expr {1+2}]",
          "799:   set bindings(def) {hello}",
          "800:   set bindings(ghi) [expr {3.1415926*1.0}]",
          "801:   proc bind_callback {nm} {",
          "802:     global bindings",
          "803:     set n2 [string range $nm 1 end]",
          "804:     if {[info exists bindings($n2)]} {",
          "805:       return $bindings($n2)",
          "806:     }",
          "807:     if {[string match e* $n2]} {",
          "808:       error \"no such variable: $nm\"",
          "809:     }",
          "810:     return -code return {}",
          "811:   }",
          "812:   db bind_fallback bind_callback",
          "813:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "814: } {3 integer hello text 3.1415926 real}",
          "815: do_test 18.110 {",
          "816:   db eval {SELECT quote(@def), typeof(@def)}",
          "817: } {X'68656C6C6F' blob}",
          "818: do_execsql_test 18.120 {",
          "819:   SELECT typeof($mno);",
          "820: } {null}",
          "821: do_catchsql_test 18.130 {",
          "822:   SELECT $e01;",
          "823: } {1 {no such variable: $e01}}",
          "824: do_test 18.140 {",
          "825:   db bind_fallback",
          "826: } {bind_callback}",
          "827: do_test 18.200 {",
          "828:   db bind_fallback {}",
          "829:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "830: } {{} null {} null {} null}",
          "831: do_test 18.300 {",
          "832:   unset -nocomplain bindings",
          "833:   proc bind_callback {nm} {lappend ::bindings $nm}",
          "834:   db bind_fallback bind_callback",
          "835:   db eval {SELECT $abc, @def, $ghi(123), :mno}",
          "836:   set bindings",
          "837: } {{$abc} @def {$ghi(123)} :mno}",
          "838: do_test 18.900 {",
          "839:   set rc [catch {db bind_fallback a b} msg]",
          "840:   lappend rc $msg",
          "841: } {1 {wrong # args: should be \"db bind_fallback ?CALLBACK?\"}}",
          "842: do_test 18.910 {",
          "843:   db bind_fallback bind_fallback_does_not_exist",
          "844: } {}",
          "845: do_catchsql_test 19.911 {",
          "846:   SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi);",
          "847: } {1 {invalid command name \"bind_fallback_does_not_exist\"}}",
          "848: db bind_fallback {}",
          "850: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
      "candidate_info": {
        "commit_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the built-in edit() SQL function in the CLI so that it works with zero-length blobs.\n\nFossilOrigin-Name: e32490128684cfeeb8213baecc78a7942b8fb63d00e375edd965bf236faeed18",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:   fseek(f, 0, SEEK_END);",
          "1290:   sz = ftell(f);",
          "1291:   rewind(f);",
          "1293:   if( p==0 ){",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "",
          "[Removed Lines]",
          "1292:   p = sqlite3_malloc64( sz+(bBin==0) );",
          "",
          "[Added Lines]",
          "1292:   p = sqlite3_malloc64( sz+1 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
      "candidate_info": {
        "commit_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the delta_parse(DELTA) table-valued function to the fossildelta extension.\n\nFossilOrigin-Name: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   static const signed char zValue[] = {",
          "139:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "140:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "",
          "[Removed Lines]",
          "137: static unsigned int getInt(const char **pz, int *pLen){",
          "",
          "[Added Lines]",
          "137: static unsigned int deltaGetInt(const char **pz, int *pLen){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: static int delta_output_size(const char *zDelta, int lenDelta){",
          "486:   int size;",
          "488:   if( *zDelta!='\\n' ){",
          "490:     return -1;",
          "",
          "[Removed Lines]",
          "487:   size = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "487:   size = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:   char *zOrigOut = zOut;",
          "527: #endif",
          "530:   if( *zDelta!='\\n' ){",
          "532:     return -1;",
          "",
          "[Removed Lines]",
          "529:   limit = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "529:   limit = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:   zDelta++; lenDelta--;",
          "535:   while( *zDelta && lenDelta>0 ){",
          "536:     unsigned int cnt, ofst;",
          "538:     switch( zDelta[0] ){",
          "539:       case '@': {",
          "540:         zDelta++; lenDelta--;",
          "542:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "544:           return -1;",
          "",
          "[Removed Lines]",
          "537:     cnt = getInt(&zDelta, &lenDelta);",
          "541:         ofst = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "537:     cnt = deltaGetInt(&zDelta, &lenDelta);",
          "541:         ofst = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "599:   return -1;",
          "600: }",
          "",
          "[Removed Lines]",
          "607: static int delta_analyze(",
          "612: ){",
          "613:   unsigned int nInsert = 0;",
          "614:   unsigned int nCopy = 0;",
          "616:   (void)getInt(&zDelta, &lenDelta);",
          "617:   if( *zDelta!='\\n' ){",
          "619:     return -1;",
          "620:   }",
          "621:   zDelta++; lenDelta--;",
          "622:   while( *zDelta && lenDelta>0 ){",
          "623:     unsigned int cnt;",
          "624:     cnt = getInt(&zDelta, &lenDelta);",
          "625:     switch( zDelta[0] ){",
          "626:       case '@': {",
          "627:         zDelta++; lenDelta--;",
          "628:         (void)getInt(&zDelta, &lenDelta);",
          "629:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "631:           return -1;",
          "632:         }",
          "633:         zDelta++; lenDelta--;",
          "634:         nCopy += cnt;",
          "635:         break;",
          "636:       }",
          "637:       case ':': {",
          "638:         zDelta++; lenDelta--;",
          "639:         nInsert += cnt;",
          "640:         if( cnt>lenDelta ){",
          "642:           return -1;",
          "643:         }",
          "644:         zDelta += cnt;",
          "645:         lenDelta -= cnt;",
          "646:         break;",
          "647:       }",
          "648:       case ';': {",
          "651:         return 0;",
          "652:       }",
          "653:       default: {",
          "655:         return -1;",
          "656:       }",
          "657:     }",
          "658:   }",
          "660:   return -1;",
          "661: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "765:   }",
          "766: }",
          "769: #ifdef _WIN32",
          "770: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710: typedef struct deltaparsevtab_vtab deltaparsevtab_vtab;",
          "711: typedef struct deltaparsevtab_cursor deltaparsevtab_cursor;",
          "712: struct deltaparsevtab_vtab {",
          "715: };",
          "716: struct deltaparsevtab_cursor {",
          "724: };",
          "728: static const char *azOp[] = {",
          "729:   \"SIZE\", \"COPY\", \"INSERT\", \"CHECKSUM\", \"ERROR\", \"EOF\"",
          "730: };",
          "731: #define DELTAPARSE_OP_SIZE         0",
          "732: #define DELTAPARSE_OP_COPY         1",
          "733: #define DELTAPARSE_OP_INSERT       2",
          "734: #define DELTAPARSE_OP_CHECKSUM     3",
          "735: #define DELTAPARSE_OP_ERROR        4",
          "736: #define DELTAPARSE_OP_EOF          5",
          "751: static int deltaparsevtabConnect(",
          "752:   sqlite3 *db,",
          "753:   void *pAux,",
          "754:   int argc, const char *const*argv,",
          "755:   sqlite3_vtab **ppVtab,",
          "756:   char **pzErr",
          "757: ){",
          "758:   deltaparsevtab_vtab *pNew;",
          "759:   int rc;",
          "761:   rc = sqlite3_declare_vtab(db,",
          "762:            \"CREATE TABLE x(op,a1,a2,delta HIDDEN)\"",
          "763:        );",
          "765: #define DELTAPARSEVTAB_OP     0",
          "766: #define DELTAPARSEVTAB_A1     1",
          "767: #define DELTAPARSEVTAB_A2     2",
          "768: #define DELTAPARSEVTAB_DELTA  3",
          "769:   if( rc==SQLITE_OK ){",
          "770:     pNew = sqlite3_malloc64( sizeof(*pNew) );",
          "772:     if( pNew==0 ) return SQLITE_NOMEM;",
          "773:     memset(pNew, 0, sizeof(*pNew));",
          "774:   }",
          "775:   return rc;",
          "776: }",
          "781: static int deltaparsevtabDisconnect(sqlite3_vtab *pVtab){",
          "782:   deltaparsevtab_vtab *p = (deltaparsevtab_vtab*)pVtab;",
          "783:   sqlite3_free(p);",
          "784:   return SQLITE_OK;",
          "785: }",
          "790: static int deltaparsevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "791:   deltaparsevtab_cursor *pCur;",
          "792:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "793:   if( pCur==0 ) return SQLITE_NOMEM;",
          "794:   memset(pCur, 0, sizeof(*pCur));",
          "796:   return SQLITE_OK;",
          "797: }",
          "802: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "803:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "804:   sqlite3_free(pCur);",
          "805:   return SQLITE_OK;",
          "806: }",
          "812: static int deltaparsevtabNext(sqlite3_vtab_cursor *cur){",
          "813:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "814:   const char *z;",
          "815:   int i = 0;",
          "817:   pCur->iCursor = pCur->iNext;",
          "818:   z = pCur->aDelta + pCur->iCursor;",
          "819:   pCur->a1 = deltaGetInt(&z, &i);",
          "820:   switch( z[0] ){",
          "821:     case '@': {",
          "822:       z++;",
          "823:       pCur->a2 = deltaGetInt(&z, &i);",
          "824:       pCur->eOp = DELTAPARSE_OP_COPY;",
          "825:       pCur->iNext = (int)(&z[1] - pCur->aDelta);",
          "826:       break;",
          "827:     }",
          "828:     case ':': {",
          "829:       z++;",
          "830:       pCur->a2 = (unsigned int)(z - pCur->aDelta);",
          "831:       pCur->eOp = DELTAPARSE_OP_INSERT;",
          "832:       pCur->iNext = (int)(&z[pCur->a1] - pCur->aDelta);",
          "833:       break;",
          "834:     }",
          "835:     case ';': {",
          "836:       pCur->eOp = DELTAPARSE_OP_CHECKSUM;",
          "837:       pCur->iNext = pCur->nDelta;",
          "838:       break;",
          "839:     }",
          "840:     default: {",
          "841:       if( pCur->iNext==pCur->nDelta ){",
          "842:         pCur->eOp = DELTAPARSE_OP_EOF;",
          "843:       }else{",
          "844:         pCur->eOp = DELTAPARSE_OP_ERROR;",
          "845:         pCur->iNext = pCur->nDelta;",
          "846:       }",
          "847:       break;",
          "848:     }",
          "849:   }",
          "850:   return SQLITE_OK;",
          "851: }",
          "857: static int deltaparsevtabColumn(",
          "861: ){",
          "862:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "863:   switch( i ){",
          "864:     case DELTAPARSEVTAB_OP: {",
          "865:       sqlite3_result_text(ctx, azOp[pCur->eOp], -1, SQLITE_STATIC);",
          "866:       break;",
          "867:     }",
          "868:     case DELTAPARSEVTAB_A1: {",
          "869:       sqlite3_result_int(ctx, pCur->a1);",
          "870:       break;",
          "871:     }",
          "872:     case DELTAPARSEVTAB_A2: {",
          "873:       if( pCur->eOp==DELTAPARSE_OP_COPY ){",
          "874:         sqlite3_result_int(ctx, pCur->a2);",
          "875:       }else if( pCur->eOp==DELTAPARSE_OP_INSERT ){",
          "876:         sqlite3_result_blob(ctx, pCur->aDelta+pCur->a2, pCur->a1,",
          "877:                             SQLITE_TRANSIENT);",
          "878:       }",
          "879:       break;",
          "880:     }",
          "881:     case DELTAPARSEVTAB_DELTA: {",
          "882:       sqlite3_result_blob(ctx, pCur->aDelta, pCur->nDelta, SQLITE_TRANSIENT);",
          "883:       break;",
          "884:     }",
          "885:   }",
          "886:   return SQLITE_OK;",
          "887: }",
          "893: static int deltaparsevtabRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "894:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "896:   return SQLITE_OK;",
          "897: }",
          "903: static int deltaparsevtabEof(sqlite3_vtab_cursor *cur){",
          "904:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "905:   return pCur->eOp==DELTAPARSE_OP_EOF;",
          "906: }",
          "914: static int deltaparsevtabFilter(",
          "915:   sqlite3_vtab_cursor *pVtabCursor,",
          "916:   int idxNum, const char *idxStr,",
          "917:   int argc, sqlite3_value **argv",
          "918: ){",
          "919:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor *)pVtabCursor;",
          "920:   const char *a;",
          "921:   int i = 0;",
          "922:   pCur->eOp = DELTAPARSE_OP_ERROR;",
          "923:   if( idxNum!=1 ){",
          "924:     return SQLITE_OK;",
          "925:   }",
          "926:   pCur->nDelta = sqlite3_value_bytes(argv[0]);",
          "927:   a = (const char*)sqlite3_value_blob(argv[0]);",
          "928:   if( pCur->nDelta==0 || a==0 ){",
          "929:     return SQLITE_OK;",
          "930:   }",
          "931:   pCur->aDelta = sqlite3_malloc64( pCur->nDelta+1 );",
          "932:   if( pCur->aDelta==0 ){",
          "933:     pCur->nDelta = 0;",
          "934:     return SQLITE_NOMEM;",
          "935:   }",
          "936:   memcpy(pCur->aDelta, a, pCur->nDelta);",
          "937:   pCur->aDelta[pCur->nDelta] = 0;",
          "938:   a = pCur->aDelta;",
          "939:   pCur->eOp = DELTAPARSE_OP_SIZE;",
          "940:   pCur->a1 = deltaGetInt(&a, &i);",
          "941:   if( a[0]!='\\n' ){",
          "942:     pCur->eOp = DELTAPARSE_OP_ERROR;",
          "943:     pCur->a1 = pCur->a2 = 0;",
          "944:     pCur->iNext = pCur->nDelta;",
          "945:     return SQLITE_OK;",
          "946:   }",
          "947:   a++;",
          "948:   pCur->iNext = (unsigned int)(a - pCur->aDelta);",
          "949:   return SQLITE_OK;",
          "950: }",
          "958: static int deltaparsevtabBestIndex(",
          "959:   sqlite3_vtab *tab,",
          "960:   sqlite3_index_info *pIdxInfo",
          "961: ){",
          "962:   int i;",
          "963:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "964:     if( pIdxInfo->aConstraint[i].iColumn != DELTAPARSEVTAB_DELTA ) continue;",
          "965:     if( pIdxInfo->aConstraint[i].usable==0 ) continue;",
          "966:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "967:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "968:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "969:     pIdxInfo->estimatedCost = (double)1;",
          "970:     pIdxInfo->estimatedRows = 10;",
          "971:     pIdxInfo->idxNum = 1;",
          "972:     return SQLITE_OK;",
          "973:   }",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "977:   return SQLITE_OK;",
          "978: }",
          "984: static sqlite3_module deltaparsevtabModule = {",
          "1009: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "787:     rc = sqlite3_create_function(db, \"delta_output_size\", 1, SQLITE_UTF8, 0,",
          "788:                                  deltaOutputSizeFunc, 0, 0);",
          "789:   }",
          "790:   return rc;",
          "791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:   if( rc==SQLITE_OK ){",
          "1035:     rc = sqlite3_create_module(db, \"delta_parse\", &deltaparsevtabModule, 0);",
          "1036:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b80cafa6f8a5c6ff1dc9efd2f670777ab131ace2df1eb431cedc8cfa901baf18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}