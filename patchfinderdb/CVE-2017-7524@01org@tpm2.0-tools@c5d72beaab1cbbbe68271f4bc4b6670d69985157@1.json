{
  "cve_id": "CVE-2017-7524",
  "cve_desc": "tpm2-tools versions before 1.1.1 are vulnerable to a password leak due to transmitting password in plaintext from client to server when generating HMAC.",
  "repo": "01org/tpm2.0-tools",
  "patch_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
  "patch_info": {
    "commit_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "repo": "01org/tpm2.0-tools",
    "commit_url": "https://github.com/01org/tpm2.0-tools/commit/c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "files": [
      "Makefile.am",
      "configure.ac",
      "lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h",
      "lib/tpm_session.c"
    ],
    "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
      "lib/tpm_session.c||lib/tpm_session.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
      "36: LIB_COMMON := lib/libcommon.a",
      "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
      "43: sbin_PROGRAMS = \\",
      "44:     tools/tpm2_create \\",
      "",
      "[Removed Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
      "",
      "[Added Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     [AC_MSG_ERROR(",
      "70:         [no TCTIs: at least one TCTI library must be enabled],",
      "71:         [1])])",
      "73: AC_ARG_ENABLE([unit],",
      "74:             [AS_HELP_STRING([--enable-unit],",
      "75:                             [build cmocka unit tests (default is no)])],",
      "",
      "[Removed Lines]",
      "72: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
      "",
      "[Added Lines]",
      "72: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
      "73: PKG_CHECK_MODULES([CURL],[libcurl])",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.c||lib/tpm_kdfa.c": [
      "File: lib/tpm_kdfa.c -> lib/tpm_kdfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <sapi/tpm20.h>",
      "30: #include \"string-bytes.h\"",
      "31: #include \"tpm_hmac.h\"",
      "34:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,",
      "35:         TPM2B_MAX_BUFFER  *resultKey )",
      "36: {",
      "38:     TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;",
      "39:     UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];",
      "40:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
      "41:     TPM2B_DIGEST *bufferList[8];",
      "42:     UINT32 bitsSwizzled, i_Swizzled;",
      "44:     int i, j;",
      "45:     UINT16 bytes = bits / 8;",
      "",
      "[Removed Lines]",
      "33: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "37:     TPM2B_DIGEST tmpResult;",
      "43:     TPM_RC rval;",
      "",
      "[Added Lines]",
      "30:  #include <openssl/err.h>",
      "31: #include <openssl/hmac.h>",
      "35: #include \"log.h\"",
      "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
      "39:     switch(algorithm) {",
      "40:     case TPM_ALG_SHA1:",
      "41:         return EVP_sha1();",
      "42:     case ALG_SHA256_VALUE:",
      "43:         return EVP_sha256();",
      "44:     case TPM_ALG_SHA384:",
      "45:         return EVP_sha384();",
      "46:     case TPM_ALG_SHA512:",
      "47:         return EVP_sha512();",
      "48:     default:",
      "49:         return NULL;",
      "50:     }",
      "52: }",
      "54: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "63:     TPM_RC rval = TPM_RC_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     i = 1;",
      "67:     while( resultKey->t.size < bytes )",
      "68:     {",
      "71:         i_Swizzled = string_bytes_endian_convert_32( i );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
      "88:     if (!md) {",
      "89:         LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);",
      "90:         return TPM_RC_HASH;",
      "91:     }",
      "93:     HMAC_CTX ctx;",
      "94:     HMAC_CTX_init(&ctx);",
      "95:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
      "96:     if (!rc) {",
      "97:         LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));",
      "98:         return TPM_RC_MEMORY;",
      "99:     }",
      "104:         TPM2B_DIGEST tmpResult;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
      "78:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
      "79:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
      "85:         }",
      "87:         bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));",
      "88:         if (!res) {",
      "90:         }",
      "91:     }",
      "94:     resultKey->t.size = bytes;",
      "97: }",
      "",
      "[Removed Lines]",
      "80:         bufferList[j++] = (TPM2B_DIGEST *)0;",
      "81:         rval = tpm_hmac(sapi_context, hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
      "82:         if( rval != TPM_RC_SUCCESS )",
      "83:         {",
      "84:             return( rval );",
      "89:             return TSS2_SYS_RC_BAD_VALUE;",
      "96:     return TPM_RC_SUCCESS;",
      "",
      "[Added Lines]",
      "116:         bufferList[j] = (TPM2B_DIGEST *)0;",
      "118:         int c;",
      "119:         for(c=0; c < j; c++) {",
      "120:             TPM2B_DIGEST *digest = bufferList[c];",
      "121:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
      "122:             if (!rc) {",
      "123:                 LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));",
      "124:                 rval = TPM_RC_MEMORY;",
      "125:                 goto err;",
      "126:             }",
      "127:         }",
      "129:         unsigned size = sizeof(tmpResult.t.buffer);",
      "130:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
      "131:         if (!rc) {",
      "132:             LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));",
      "133:             rval = TPM_RC_MEMORY;",
      "134:             goto err;",
      "137:         tmpResult.t.size = size;",
      "141:             rval = TSS2_SYS_RC_BAD_VALUE;",
      "142:             goto err;",
      "149: err:",
      "150:     HMAC_CTX_cleanup(&ctx);",
      "152:     return rval;",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.h||lib/tpm_kdfa.h": [
      "File: lib/tpm_kdfa.h -> lib/tpm_kdfa.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV,",
      "47:         UINT16 bits, TPM2B_MAX_BUFFER *resultKey );",
      "",
      "[Removed Lines]",
      "45: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "",
      "[Added Lines]",
      "45: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "",
      "---------------"
    ],
    "lib/tpm_session.c||lib/tpm_session.c": [
      "File: lib/tpm_session.c -> lib/tpm_session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:             }",
      "199:             else",
      "200:             {",
      "202:                         &( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );",
      "203:             }",
      "",
      "[Removed Lines]",
      "201:                 rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "[Added Lines]",
      "201:                 rval = tpm_kdfa(session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "368e5a13743bb131cc15300bc156a01f11763433",
      "candidate_info": {
        "commit_hash": "368e5a13743bb131cc15300bc156a01f11763433",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/368e5a13743bb131cc15300bc156a01f11763433",
        "files": [
          ".ci/travis-build-and-run-tests.sh",
          ".travis.yml",
          "Makefile.am",
          "configure.ac"
        ],
        "message": "configure: enable code coverage\n\nThis patch adds support for code coverage calculation\nusing gcov and lcov by configures --enable-code-coverage\nand make check-code-coverage.\n\nUse this option in the travis build.\n\nFixes: #711\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          ".ci/travis-build-and-run-tests.sh||.ci/travis-build-and-run-tests.sh",
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        ".ci/travis-build-and-run-tests.sh||.ci/travis-build-and-run-tests.sh": [
          "File: .ci/travis-build-and-run-tests.sh -> .ci/travis-build-and-run-tests.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   make clean",
          "122:   # Build all device TCTIs with gcov",
          "124:   make -j$(nproc)",
          "125:   make -j$(nproc) check",
          "126: fi",
          "",
          "[Removed Lines]",
          "123:   ../configure --disable-hardening CFLAGS=\"-g -O0 --coverage\"",
          "",
          "[Added Lines]",
          "123:   ../configure --disable-hardening --enable-code-coverage",
          "",
          "---------------"
        ],
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
          "30: # THE POSSIBILITY OF SUCH DAMAGE.",
          "31: #;**********************************************************************;",
          "33: ACLOCAL_AMFLAGS = -I m4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: @CODE_COVERAGE_RULES@",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: AM_CFLAGS := \\",
          "42:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_SOCK_CFLAGS) \\",
          "47: LDADD = \\",
          "48:     $(LIB_COMMON) $(SAPI_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_TABRMD_LIBS) \\",
          "",
          "[Removed Lines]",
          "43:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS) $(LIBMARSHAL_CFLAGS)",
          "45: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "",
          "[Added Lines]",
          "44:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS) $(LIBMARSHAL_CFLAGS) \\",
          "45:     $(CODE_COVERAGE_CFLAGS)",
          "47: AM_LDFLAGS   := $(EXTRA_LDFLAGS) $(CODE_COVERAGE_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: LT_INIT",
          "6: AM_INIT_AUTOMAKE([foreign",
          "7:                   subdir-objects])",
          "8: AC_CONFIG_FILES([Makefile])",
          "9: AC_CHECK_PROG([PANDOC],[pandoc],[yes])",
          "10: AS_IF(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: AX_CODE_COVERAGE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9ee5ab6457bb7583407a42d9572756d39bff2f8",
      "candidate_info": {
        "commit_hash": "b9ee5ab6457bb7583407a42d9572756d39bff2f8",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/b9ee5ab6457bb7583407a42d9572756d39bff2f8",
        "files": [
          "Makefile.am"
        ],
        "message": "Makefile.am: Add built manpages to CLEANFILES.\n\nWithout this 'make clean' doesn't delete these files. Since they're\nbuild output they should be removed when the build directory is cleaned.\n\nSigned-off-by: Philip Tricca <flihp@twobit.us>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am"
          ],
          "candidate": [
            "Makefile.am||Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "38: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "39: TESTS = $(check_PROGRAMS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: CLEANFILES  = $(man8_MANS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b7a8752643186d108030003e7fb0742c68277c5",
      "candidate_info": {
        "commit_hash": "7b7a8752643186d108030003e7fb0742c68277c5",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/7b7a8752643186d108030003e7fb0742c68277c5",
        "files": [
          ".travis.yml",
          "Makefile.am",
          "configure.ac"
        ],
        "message": "configure: enable code coverage\n\nThis patch adds support for code coverage calculation\nusing gcov and lcov by configures --enable-code-coverage\nand make check-code-coverage.\n\nUse this option in the travis build.\n\nFixes: #711\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
          "30: # THE POSSIBILITY OF SUCH DAMAGE.",
          "31: #;**********************************************************************;",
          "33: ACLOCAL_AMFLAGS = -I m4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: @CODE_COVERAGE_RULES@",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: AM_CFLAGS := \\",
          "39:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_SOCK_CFLAGS) \\",
          "44: LDADD = \\",
          "45:     $(LIB_COMMON) $(SAPI_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_TABRMD_LIBS) \\",
          "",
          "[Removed Lines]",
          "40:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS)",
          "42: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "",
          "[Added Lines]",
          "41:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS) $(CODE_COVERAGE_CFLAGS)",
          "43: AM_LDFLAGS   := $(EXTRA_LDFLAGS) $(CODE_COVERAGE_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:                   subdir-objects])",
          "8: # enable \"silent-rules\" option by default",
          "9: m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])",
          "10: AC_CONFIG_FILES([Makefile])",
          "11: AC_CHECK_PROG([PANDOC],[pandoc],[yes])",
          "12: AS_IF(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: AX_CODE_COVERAGE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "657c72eb1bdf2b741eef99dd5439ca8a83e04a4b",
      "candidate_info": {
        "commit_hash": "657c72eb1bdf2b741eef99dd5439ca8a83e04a4b",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/657c72eb1bdf2b741eef99dd5439ca8a83e04a4b",
        "files": [
          "Makefile.am"
        ],
        "message": "Makefile.am: CFLAGS and LIBS cleanups\n\n* Remove dead package config prefixs\n* Drop lines at 80 characters\n* Add any missing package config prefix variables\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am"
          ],
          "candidate": [
            "Makefile.am||Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     tools/tpm2_create \\",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS := \\",
          "39:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_SOCK_CFLAGS) \\",
          "40:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS)",
          "44: LDADD = \\",
          "45:     $(LIB_COMMON) $(SAPI_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_TABRMD_LIBS) \\",
          "46:     $(TCTI_DEV_LIBS) $(CRYPTO_LIBS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168: test_unit_test_string_bytes_SOURCES  = test/unit/test_string_bytes.c",
          "170: test_unit_test_files_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "173: test_unit_test_files_SOURCES  = test/unit/test_files.c",
          "175: test_unit_test_tpm2_header_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "",
          "[Removed Lines]",
          "171: test_unit_test_files_LDADD    = $(LIB_COMMON) $(CMOCKA_LIBS) $(TPM20_TSS_LIBS) \\",
          "172:  $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "[Added Lines]",
          "176: test_unit_test_files_LDADD    = $(LIB_COMMON) $(CMOCKA_LIBS) $(TCTI_SOCK_LIBS) \\",
          "177:                                 $(TCTI_DEV_LIBS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08868abdb9000bfc37535f584fca2618a82df674",
      "candidate_info": {
        "commit_hash": "08868abdb9000bfc37535f584fca2618a82df674",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/08868abdb9000bfc37535f584fca2618a82df674",
        "files": [
          ".travis.yml",
          "Makefile.am",
          "configure.ac",
          "lib/default_config.site"
        ],
        "message": "configure: add options to reduce binary size if avaialble\n\nMake a best attempt effort to enable the options to reduce the\nbinary size, gently complain if it cannot be done.\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/default_config.site||lib/default_config.site"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(HARDENED_CFLAGS)",
          "39: AM_LDFLAGS   := $(HARDENED_LDFLAGS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS)",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   AC_DEFUN([add_hardened_c_flag], [",
          "78:     AX_CHECK_COMPILE_FLAG([$1],",
          "80:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "81:     )",
          "82:   ])",
          "84:   AC_DEFUN([add_hardened_ld_flag], [",
          "85:     AX_CHECK_LINK_FLAG([$1],",
          "87:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "88:     )",
          "89:   ])",
          "91:   AC_DEFUN([add_hardened_define_flag], [",
          "92:     AX_CHECK_PREPROC_FLAG([$1],",
          "94:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "95:     )",
          "96:   ])",
          "",
          "[Removed Lines]",
          "79:       [HARDENED_CFLAGS=\"$HARDENED_CFLAGS $1\"],",
          "86:       [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS $1\"],",
          "93:       [HARDENED_CFLAGS=\"$HARDENED_CFLAGS $1\"],",
          "",
          "[Added Lines]",
          "79:       [EXTRA_CFLAGS=\"$EXTRA_CFLAGS $1\"],",
          "86:       [EXTRA_LDFLAGS=\"$EXTRA_LDFLAGS $1\"],",
          "93:       [EXTRA_CFLAGS=\"$EXTRA_CFLAGS $1\"],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   add_hardened_define_flag([-D_FORTIFY_SOURCE=2])",
          "108:   add_hardened_define_flag([-U_FORTIFY_SOURCE])",
          "110:   add_hardened_c_flag([-fPIE])",
          "111:   add_hardened_ld_flag([[-pie]])",
          "113:   add_hardened_ld_flag([[-Wl,-z,relro]])",
          "114:   add_hardened_ld_flag([[-Wl,-z,now]])",
          "118: ], [",
          "119:   AC_MSG_WARN([Compiling with --disable-hardening is dangerous!",
          "120: you should consider fixing the configure script compiler flags",
          "121: and submitting patches upstream!])",
          "122: ])",
          "124: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "116:   AC_SUBST([HARDENED_CFLAGS])",
          "117:   AC_SUBST([HARDENED_LDFLAGS])",
          "",
          "[Added Lines]",
          "110:   add_hardened_c_flag([-fPIC])",
          "111:   add_hardened_ld_flag([[-shared]])",
          "125: # Best attempt, strip unused stuff from the binary to reduce size.",
          "126: # Rather than nesting these and making them ugly just use a counter.",
          "127: AX_CHECK_COMPILE_FLAG([-fdata-sections], [strip+=\"y\"])",
          "128: AX_CHECK_COMPILE_FLAG([-ffunction-sections], [strip+=\"y\"])",
          "129: AX_CHECK_LINK_FLAG([[-Wl,--gc-sections]], [strip+=\"y\"])",
          "131: AS_IF([test x\"$strip\" == x\"yyy\"], [",
          "132:   EXTRA_CFLAGS=\"$EXTRA_CFLAGS -fdata-sections -ffunction-sections\"",
          "133:   EXTRA_LDFLAGS=\"$EXTRA_LDFLAGS -Wl,--gc-sections\"",
          "134: ],",
          "135:   AC_MSG_NOTICE([Not using compiler options to reduce binary size $strip!])",
          "136: )",
          "138: AC_SUBST([EXTRA_CFLAGS])",
          "139: AC_SUBST([EXTRA_LDFLAGS])",
          "",
          "---------------"
        ],
        "lib/default_config.site||lib/default_config.site": [
          "File: lib/default_config.site -> lib/default_config.site",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}