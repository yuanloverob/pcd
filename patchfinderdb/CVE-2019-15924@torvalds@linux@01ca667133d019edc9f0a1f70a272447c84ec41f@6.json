{
  "cve_id": "CVE-2019-15924",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.11. fm10k_init_module in drivers/net/ethernet/intel/fm10k/fm10k_main.c has a NULL pointer dereference because there is no -ENOMEM upon an alloc_workqueue failure.",
  "repo": "torvalds/linux",
  "patch_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
  "patch_info": {
    "commit_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/01ca667133d019edc9f0a1f70a272447c84ec41f",
    "files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ],
    "message": "fm10k: Fix a potential NULL pointer dereference\n\nSyzkaller report this:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573\nCode: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00\nRSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080\nRBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000\nR10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001\nR13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001\nFS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211\n __mutex_lock_common kernel/locking/mutex.c:925 [inline]\n __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072\n drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934\n destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319\n __do_sys_delete_module kernel/module.c:1018 [inline]\n __se_sys_delete_module kernel/module.c:961 [inline]\n __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140\nRBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc\nR13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff\n\nIf alloc_workqueue fails, it should return -ENOMEM, otherwise may\ntrigger this NULL pointer dereference while unloading drivers.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 0a38c17a21a0 (\"fm10k: Remove create_workqueue\")\nSigned-off-by: Yue Haibing <yuehaibing@huawei.com>\nTested-by: Andrew Bowers <andrewx.bowers@intel.com>\nSigned-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>",
    "before_after_code_files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c": [
      "File: drivers/net/ethernet/intel/fm10k/fm10k_main.c -> drivers/net/ethernet/intel/fm10k/fm10k_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fm10k_workqueue = alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0,",
      "43:        fm10k_driver_name);",
      "45:  fm10k_dbg_init();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  if (!fm10k_workqueue)",
      "45:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
      "candidate_info": {
        "commit_hash": "9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9a5a90d167b0e5fe3d47af16b68fd09ce64085cd",
        "files": [
          "net/core/dev.c"
        ],
        "message": "net: core: netif_receive_skb_list: unlist skb before passing to pt->func\n\n__netif_receive_skb_list_ptype() leaves skb->next poisoned before passing\nit to pt_prev->func handler, what may produce (in certain cases, e.g. DSA\nsetup) crashes like:\n\n[ 88.606777] CPU 0 Unable to handle kernel paging request at virtual address 0000000e, epc == 80687078, ra == 8052cc7c\n[ 88.618666] Oops[#1]:\n[ 88.621196] CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc2-dlink-00206-g4192a172-dirty #1473\n[ 88.630885] $ 0 : 00000000 10000400 00000002 864d7850\n[ 88.636709] $ 4 : 87c0ddf0 864d7800 87c0ddf0 00000000\n[ 88.642526] $ 8 : 00000000 49600000 00000001 00000001\n[ 88.648342] $12 : 00000000 c288617b dadbee27 25d17c41\n[ 88.654159] $16 : 87c0ddf0 85cff080 80790000 fffffffd\n[ 88.659975] $20 : 80797b20 ffffffff 00000001 864d7800\n[ 88.665793] $24 : 00000000 8011e658\n[ 88.671609] $28 : 80790000 87c0dbc0 87cabf00 8052cc7c\n[ 88.677427] Hi : 00000003\n[ 88.680622] Lo : 7b5b4220\n[ 88.683840] epc : 80687078 vlan_dev_hard_start_xmit+0x1c/0x1a0\n[ 88.690532] ra : 8052cc7c dev_hard_start_xmit+0xac/0x188\n[ 88.696734] Status: 10000404\tIEp\n[ 88.700422] Cause : 50000008 (ExcCode 02)\n[ 88.704874] BadVA : 0000000e\n[ 88.708069] PrId : 0001a120 (MIPS interAptiv (multi))\n[ 88.713005] Modules linked in:\n[ 88.716407] Process swapper (pid: 0, threadinfo=(ptrval), task=(ptrval), tls=00000000)\n[ 88.725219] Stack : 85f61c28 00000000 0000000e 80780000 87c0ddf0 85cff080 80790000 8052cc7c\n[ 88.734529] 87cabf00 00000000 00000001 85f5fb40 807b0000 864d7850 87cabf00 807d0000\n[ 88.743839] 864d7800 8655f600 00000000 85cff080 87c1c000 0000006a 00000000 8052d96c\n[ 88.753149] 807a0000 8057adb8 87c0dcc8 87c0dc50 85cfff08 00000558 87cabf00 85f58c50\n[ 88.762460] 00000002 85f58c00 864d7800 80543308 fffffff4 00000001 85f58c00 864d7800\n[ 88.771770] ...\n[ 88.774483] Call Trace:\n[ 88.777199] [<80687078>] vlan_dev_hard_start_xmit+0x1c/0x1a0\n[ 88.783504] [<8052cc7c>] dev_hard_start_xmit+0xac/0x188\n[ 88.789326] [<8052d96c>] __dev_queue_xmit+0x6e8/0x7d4\n[ 88.794955] [<805a8640>] ip_finish_output2+0x238/0x4d0\n[ 88.800677] [<805ab6a0>] ip_output+0xc8/0x140\n[ 88.805526] [<805a68f4>] ip_forward+0x364/0x560\n[ 88.810567] [<805a4ff8>] ip_rcv+0x48/0xe4\n[ 88.815030] [<80528d44>] __netif_receive_skb_one_core+0x44/0x58\n[ 88.821635] [<8067f220>] dsa_switch_rcv+0x108/0x1ac\n[ 88.827067] [<80528f80>] __netif_receive_skb_list_core+0x228/0x26c\n[ 88.833951] [<8052ed84>] netif_receive_skb_list+0x1d4/0x394\n[ 88.840160] [<80355a88>] lunar_rx_poll+0x38c/0x828\n[ 88.845496] [<8052fa78>] net_rx_action+0x14c/0x3cc\n[ 88.850835] [<806ad300>] __do_softirq+0x178/0x338\n[ 88.856077] [<8012a2d4>] irq_exit+0xbc/0x100\n[ 88.860846] [<802f8b70>] plat_irq_dispatch+0xc0/0x144\n[ 88.866477] [<80105974>] handle_int+0x14c/0x158\n[ 88.871516] [<806acfb0>] r4k_wait+0x30/0x40\n[ 88.876462] Code: afb10014 8c8200a0 00803025 <9443000c> 94a20468 00000000 10620042 00a08025 9605046a\n[ 88.887332]\n[ 88.888982] ---[ end trace eb863d007da11cf1 ]---\n[ 88.894122] Kernel panic - not syncing: Fatal exception in interrupt\n[ 88.901202] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---\n\nFix this by pulling skb off the sublist and zeroing skb->next pointer\nbefore calling ptype callback.\n\nFixes: 88eb1944e18c (\"net: core: propagate SKB lists through packet_type lookup\")\nReviewed-by: Edward Cree <ecree@solarflare.com>\nSigned-off-by: Alexander Lobakin <alobakin@dlink.ru>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:  if (pt_prev->list_func != NULL)",
          "5015:   pt_prev->list_func(head, pt_prev, orig_dev);",
          "5016:  else",
          "5018:    pt_prev->func(skb, skb->dev, pt_prev, orig_dev);",
          "5019: }",
          "5021: static void __netif_receive_skb_list_core(struct list_head *head, bool pfmemalloc)",
          "",
          "[Removed Lines]",
          "5017:   list_for_each_entry_safe(skb, next, head, list)",
          "",
          "[Added Lines]",
          "5017:   list_for_each_entry_safe(skb, next, head, list) {",
          "5018:    skb_list_del_init(skb);",
          "5020:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}