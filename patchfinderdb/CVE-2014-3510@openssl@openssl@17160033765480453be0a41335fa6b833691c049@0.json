{
  "cve_id": "CVE-2014-3510",
  "cve_desc": "The ssl3_send_client_key_exchange function in s3_clnt.c in OpenSSL 0.9.8 before 0.9.8zb, 1.0.0 before 1.0.0n, and 1.0.1 before 1.0.1i allows remote DTLS servers to cause a denial of service (NULL pointer dereference and client application crash) via a crafted handshake message in conjunction with a (1) anonymous DH or (2) anonymous ECDH ciphersuite.",
  "repo": "openssl/openssl",
  "patch_hash": "17160033765480453be0a41335fa6b833691c049",
  "patch_info": {
    "commit_hash": "17160033765480453be0a41335fa6b833691c049",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/17160033765480453be0a41335fa6b833691c049",
    "files": [
      "ssl/s3_clnt.c"
    ],
    "message": "Fix DTLS anonymous EC(DH) denial of service\n\nCVE-2014-3510\n\nReviewed-by: Dr. Stephen Henson <steve@openssl.org>",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2385:    RSA *rsa;",
      "2386:    unsigned char tmp_buf[SSL_MAX_MASTER_KEY_LENGTH];",
      "2388:    if (s->session->sess_cert->peer_rsa_tmp != NULL)",
      "2389:     rsa=s->session->sess_cert->peer_rsa_tmp;",
      "2390:    else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2388:    if (s->session->sess_cert == NULL)",
      "2389:     {",
      "2391:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,ERR_R_INTERNAL_ERROR);",
      "2392:     goto err;",
      "2393:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "389ebcecae2575188a4ff9566389ce694352be43",
      "candidate_info": {
        "commit_hash": "389ebcecae2575188a4ff9566389ce694352be43",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/389ebcecae2575188a4ff9566389ce694352be43",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_sess.c"
        ],
        "message": "Remove SESS_CERT entirely.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:     const unsigned char *q, *p;",
          "1244:     unsigned char *d;",
          "1245:     STACK_OF(X509) *sk = NULL;",
          "1247:     EVP_PKEY *pkey = NULL;",
          "1249:     n = s->method->ssl_get_message(s,",
          "",
          "[Removed Lines]",
          "1246:     SESS_CERT *sc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1322:         goto f_err;",
          "1323:     }",
          "1332:     s->session->peer_chain = sk;",
          "",
          "[Removed Lines]",
          "1325:     sc = ssl_sess_cert_new();",
          "1326:     if (sc == NULL)",
          "1327:         goto err;",
          "1329:     ssl_sess_cert_free(s->session->sess_cert);",
          "1330:     s->session->sess_cert = sc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1448:         if (alg_k & SSL_kPSK) {",
          "1450:             OPENSSL_free(s->ctx->psk_identity_hint);",
          "1451:             s->ctx->psk_identity_hint = NULL;",
          "1452:         }",
          "",
          "[Removed Lines]",
          "1449:             s->session->sess_cert = ssl_sess_cert_new();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1470:     s->s3->peer_ecdh_tmp = NULL;",
          "1471: #endif",
          "1477:     param_len = 0;",
          "",
          "[Removed Lines]",
          "1473:     if (s->session->sess_cert == NULL)",
          "1474:         s->session->sess_cert = ssl_sess_cert_new();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2397:             if (!pms)",
          "2398:                 goto memerr;",
          "",
          "[Removed Lines]",
          "2400:             if (s->session->sess_cert == NULL) {",
          "",
          "[Added Lines]",
          "2388:             if (s->session->peer == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2452: #ifndef OPENSSL_NO_DH",
          "2453:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd)) {",
          "2454:             DH *dh_srvr, *dh_clnt;",
          "2464:             if (s->s3->peer_dh_tmp != NULL)",
          "2465:                 dh_srvr = s->s3->peer_dh_tmp;",
          "2466:             else {",
          "",
          "[Removed Lines]",
          "2455:             SESS_CERT *scert = s->session->sess_cert;",
          "2457:             if (scert == NULL) {",
          "2458:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_UNEXPECTED_MESSAGE);",
          "2459:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2460:                        SSL_R_UNEXPECTED_MESSAGE);",
          "2461:                 goto err;",
          "2462:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2543:             EC_KEY *tkey;",
          "2544:             int ecdh_clnt_cert = 0;",
          "2545:             int field_size = 0;",
          "",
          "[Removed Lines]",
          "2547:             if (s->session->sess_cert == NULL) {",
          "2548:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_UNEXPECTED_MESSAGE);",
          "2549:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2550:                        SSL_R_UNEXPECTED_MESSAGE);",
          "2551:                 goto err;",
          "2552:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3280:     long alg_k, alg_a;",
          "3281:     EVP_PKEY *pkey = NULL;",
          "3282:     int pkey_bits;",
          "3284: #ifndef OPENSSL_NO_RSA",
          "3285:     RSA *rsa;",
          "3286: #endif",
          "",
          "[Removed Lines]",
          "3283:     SESS_CERT *sc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3296:     if ((alg_a & SSL_aNULL) || (alg_k & SSL_kPSK))",
          "3297:         return (1);",
          "3304: #ifndef OPENSSL_NO_RSA",
          "3305:     rsa = s->s3->peer_rsa_tmp;",
          "3306: #endif",
          "",
          "[Removed Lines]",
          "3299:     sc = s->session->sess_cert;",
          "3300:     if (sc == NULL) {",
          "3301:         SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM, ERR_R_INTERNAL_ERROR);",
          "3302:         goto err;",
          "3303:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3437:     return (1);",
          "3438:  f_err:",
          "3439:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3441:     return (0);",
          "3442: }",
          "",
          "[Removed Lines]",
          "3440:  err:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3328:     case SSL_CTRL_GET_PEER_SIGNATURE_NID:",
          "3329:         if (SSL_USE_SIGALGS(s)) {",
          "3331:                 const EVP_MD *sig;",
          "3332:                 sig = s->s3->tmp.peer_md;",
          "3333:                 if (sig) {",
          "",
          "[Removed Lines]",
          "3330:             if (s->session && s->session->sess_cert) {",
          "",
          "[Added Lines]",
          "3330:             if (s->session) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3342:             return 0;",
          "3344:     case SSL_CTRL_GET_SERVER_TMP_KEY:",
          "3346:             return 0;",
          "3347:         else {",
          "3348:             EVP_PKEY *ptmp;",
          "",
          "[Removed Lines]",
          "3345:         if (s->server || !s->session || !s->session->sess_cert)",
          "",
          "[Added Lines]",
          "3345:         if (s->server || !s->session)",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3195:     s->session->peer = sk_X509_shift(sk);",
          "3196:     s->session->verify_result = s->verify_result;",
          "3209:     sk_X509_pop_free(s->session->peer_chain, X509_free);",
          "3210:     s->session->peer_chain = sk;",
          "",
          "[Removed Lines]",
          "3202:     if (s->session->sess_cert == NULL) {",
          "3203:         s->session->sess_cert = ssl_sess_cert_new();",
          "3204:         if (s->session->sess_cert == NULL) {",
          "3205:             SSLerr(SSL_F_SSL3_GET_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "3206:             goto done;",
          "3207:         }",
          "3208:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     c->cert_cb_arg = arg;",
          "520: }",
          "562: int ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk)",
          "563: {",
          "564:     X509 *x;",
          "",
          "[Removed Lines]",
          "522: SESS_CERT *ssl_sess_cert_new(void)",
          "523: {",
          "524:     SESS_CERT *ret;",
          "526:     ret = OPENSSL_malloc(sizeof(*ret));",
          "527:     if (ret == NULL) {",
          "528:         SSLerr(SSL_F_SSL_SESS_CERT_NEW, ERR_R_MALLOC_FAILURE);",
          "529:         return NULL;",
          "530:     }",
          "532:     memset(ret, 0, sizeof(*ret));",
          "533:     ret->references = 1;",
          "535:     return ret;",
          "536: }",
          "538: void ssl_sess_cert_free(SESS_CERT *sc)",
          "539: {",
          "540:     int i;",
          "542:     if (sc == NULL)",
          "543:         return;",
          "545:     i = CRYPTO_add(&sc->references, -1, CRYPTO_LOCK_SSL_SESS_CERT);",
          "546: #ifdef REF_PRINT",
          "547:     REF_PRINT(\"SESS_CERT\", sc);",
          "548: #endif",
          "549:     if (i > 0)",
          "550:         return;",
          "551: #ifdef REF_CHECK",
          "552:     if (i < 0) {",
          "553:         fprintf(stderr, \"ssl_sess_cert_free, bad reference count\\n\");",
          "555:     }",
          "556: #endif",
          "559:     OPENSSL_free(sc);",
          "560: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:     int not_resumable;",
          "630:     X509 *peer;",
          "631:     int peer_type;",
          "",
          "[Removed Lines]",
          "628:     struct sess_cert_st /* SESS_CERT */ *sess_cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1589: } CERT;",
          "1595: struct tls_sigalgs_st {",
          "",
          "[Removed Lines]",
          "1591: typedef struct sess_cert_st {",
          "1593: } SESS_CERT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1845: __owur CERT *ssl_cert_dup(CERT *cert);",
          "1846: void ssl_cert_clear_certs(CERT *c);",
          "1847: void ssl_cert_free(CERT *c);",
          "1850: __owur int ssl_get_new_session(SSL *s, int session);",
          "1851: __owur int ssl_get_prev_session(SSL *s, unsigned char *session, int len,",
          "1852:                          const unsigned char *limit);",
          "",
          "[Removed Lines]",
          "1848: __owur SESS_CERT *ssl_sess_cert_new(void);",
          "1849: void ssl_sess_cert_free(SESS_CERT *sc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     dest->references = 1;",
          "271:     if (src->peer != NULL)",
          "272:         CRYPTO_add(&src->peer->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Removed Lines]",
          "268:     if (src->sess_cert != NULL)",
          "269:         CRYPTO_add(&src->sess_cert->references, 1, CRYPTO_LOCK_SSL_SESS_CERT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844:     OPENSSL_cleanse(ss->master_key, sizeof ss->master_key);",
          "845:     OPENSSL_cleanse(ss->session_id, sizeof ss->session_id);",
          "847:     X509_free(ss->peer);",
          "848:     sk_X509_pop_free(ss->peer_chain, X509_free);",
          "849:     sk_SSL_CIPHER_free(ss->ciphers);",
          "",
          "[Removed Lines]",
          "846:     ssl_sess_cert_free(ss->sess_cert);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7689082b7199b91aa2df5d3e481abcca480e9d7e",
      "candidate_info": {
        "commit_hash": "7689082b7199b91aa2df5d3e481abcca480e9d7e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7689082b7199b91aa2df5d3e481abcca480e9d7e",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "Extended PSK client support.\n\nAdd support for RSAPSK, DHEPSK and ECDHEPSK client side.\n\nUpdate various checks to ensure certificate and server key exchange messages\nare only expected when required.\n\nUpdate message handling. PSK server key exchange parsing now expects an\nidentity hint prefix for all PSK server key exchange messages. PSK\nclient key exchange message requests PSK identity and key for all PSK\nkey exchange ciphersuites and includes identity in message.\n\nUpdate flags for RSA, DH and ECDH so they are also used in PSK.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:                 ret = ssl3_get_server_certificate(s);",
          "339:                 if (ret <= 0)",
          "340:                     goto end;",
          "",
          "[Removed Lines]",
          "334:             if (!",
          "335:                 (s->s3->tmp.",
          "336:                  new_cipher->algorithm_auth & (SSL_aNULL | SSL_aSRP))",
          "337:                     && !(s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)) {",
          "",
          "[Added Lines]",
          "334:             if (!(s->s3->tmp.new_cipher->algorithm_auth &",
          "335:                     (SSL_aNULL | SSL_aSRP | SSL_aPSK))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1418:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1419:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1420:             goto f_err;",
          "",
          "[Removed Lines]",
          "1417:         if (alg_k & (SSL_kDHE | SSL_kECDHE)) {",
          "",
          "[Added Lines]",
          "1415:         if (alg_k & (SSL_kDHE | SSL_kECDHE | SSL_kDHEPSK | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1447:     al = SSL_AD_DECODE_ERROR;",
          "1449: #ifndef OPENSSL_NO_PSK",
          "1453:         param_len = 2;",
          "1454:         if (param_len > n) {",
          "",
          "[Removed Lines]",
          "1450:     if (alg_k & SSL_kPSK) {",
          "1451:         char tmp_id_hint[PSK_MAX_IDENTITY_LEN + 1];",
          "",
          "[Added Lines]",
          "1449:     if (alg_k & SSL_PSK) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1475:         }",
          "1476:         param_len += i;",
          "1485:         OPENSSL_free(s->session->psk_identity_hint);",
          "1491:         }",
          "1493:         p += i;",
          "1494:         n -= param_len;",
          "1495:     } else",
          "1497: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "1483:         memcpy(tmp_id_hint, p, i);",
          "1484:         memset(tmp_id_hint + i, 0, PSK_MAX_IDENTITY_LEN + 1 - i);",
          "1486:         s->session->psk_identity_hint = BUF_strdup(tmp_id_hint);",
          "1487:         if (s->session->psk_identity_hint == NULL) {",
          "1488:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1489:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1490:             goto f_err;",
          "",
          "[Added Lines]",
          "1477:         if (i != 0) {",
          "1478:             s->session->psk_identity_hint = BUF_strndup((char *)p, i);",
          "1479:             if (s->session->psk_identity_hint == NULL) {",
          "1480:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1481:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "1482:                 goto f_err;",
          "1483:             }",
          "1484:         } else {",
          "1485:             s->session->psk_identity_hint = NULL;",
          "1490:     }",
          "1493:     if (alg_k & (SSL_kPSK | SSL_kRSAPSK)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1661:     if (0) ;",
          "1662: #endif",
          "1663: #ifndef OPENSSL_NO_DH",
          "1665:         if ((dh = DH_new()) == NULL) {",
          "1666:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_DH_LIB);",
          "1667:             goto err;",
          "",
          "[Removed Lines]",
          "1664:     else if (alg_k & SSL_kDHE) {",
          "",
          "[Added Lines]",
          "1663:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1744: #ifndef OPENSSL_NO_EC",
          "1746:         EC_GROUP *ngroup;",
          "1747:         const EC_GROUP *group;",
          "",
          "[Removed Lines]",
          "1745:     else if (alg_k & SSL_kECDHE) {",
          "",
          "[Added Lines]",
          "1744:     else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1945:             }",
          "1946:         }",
          "1947:     } else {",
          "1951:             if (ssl3_check_cert_and_algorithm(s))",
          "",
          "[Removed Lines]",
          "1949:         if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & SSL_kPSK)) {",
          "",
          "[Added Lines]",
          "1948:         if (!(alg_a & (SSL_aNULL | SSL_aSRP)) && !(alg_k & SSL_PSK)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2329: {",
          "2330:     unsigned char *p;",
          "2331:     int n;",
          "2332:     unsigned long alg_k;",
          "2333: #ifndef OPENSSL_NO_RSA",
          "2334:     unsigned char *q;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331: #ifndef OPENSSL_NO_PSK",
          "2332:     size_t pskhdrlen = 0;",
          "2333: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2344: #endif",
          "2345:     unsigned char *pms = NULL;",
          "2346:     size_t pmslen = 0;",
          "2348:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2349:         p = ssl_handshake_start(s);",
          "2354:         if (0) {",
          "2355:         }",
          "2356: #ifndef OPENSSL_NO_RSA",
          "2358:             RSA *rsa;",
          "2359:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2360:             pms = OPENSSL_malloc(pmslen);",
          "",
          "[Removed Lines]",
          "2351:         alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "2357:         else if (alg_k & SSL_kRSA) {",
          "",
          "[Added Lines]",
          "2349:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "2355: #ifndef OPENSSL_NO_PSK",
          "2356:         if (alg_k & SSL_PSK) {",
          "2357:             int psk_err = 1;",
          "2363:             char identity[PSK_MAX_IDENTITY_LEN + 1];",
          "2364:             size_t identitylen;",
          "2365:             unsigned char psk[PSK_MAX_PSK_LEN];",
          "2366:             size_t psklen;",
          "2368:             if (s->psk_client_callback == NULL) {",
          "2369:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2370:                        SSL_R_PSK_NO_CLIENT_CB);",
          "2371:                 goto err;",
          "2372:             }",
          "2374:             memset(identity, 0, sizeof(identity));",
          "2376:             psklen = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2377:                                             identity, sizeof(identity) - 1,",
          "2378:                                             psk, sizeof(psk));",
          "2380:             if (psklen > PSK_MAX_PSK_LEN) {",
          "2381:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2382:                        ERR_R_INTERNAL_ERROR);",
          "2383:                 goto psk_err;",
          "2384:             } else if (psklen == 0) {",
          "2385:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2386:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2387:                 goto psk_err;",
          "2388:             }",
          "2390:             OPENSSL_free(s->s3->tmp.psk);",
          "2391:             s->s3->tmp.psk = BUF_memdup(psk, psklen);",
          "2392:             OPENSSL_cleanse(psk, psklen);",
          "2394:             if (s->s3->tmp.psk == NULL)",
          "2395:                 goto memerr;",
          "2397:             s->s3->tmp.psklen = psklen;",
          "2399:             identitylen = strlen(identity);",
          "2400:             if (identitylen > PSK_MAX_IDENTITY_LEN) {",
          "2401:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2402:                        ERR_R_INTERNAL_ERROR);",
          "2403:                 goto psk_err;",
          "2404:             }",
          "2405:             OPENSSL_free(s->session->psk_identity);",
          "2406:             s->session->psk_identity = BUF_strdup(identity);",
          "2407:             if (s->session->psk_identity == NULL)",
          "2408:                 goto memerr;",
          "2410:             s2n(identitylen, p);",
          "2411:             memcpy(p, identity, identitylen);",
          "2412:             pskhdrlen = 2 + identitylen;",
          "2413:             p += identitylen;",
          "2414:             psk_err = 0;",
          "2415:  psk_err:",
          "2416:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2417:             if (psk_err != 0) {",
          "2418:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2419:                 goto err;",
          "2420:             }",
          "2421:         }",
          "2422:         if (alg_k & SSL_kPSK) {",
          "2423:             n = 0;",
          "2424:         } else",
          "2425: #endif",
          "2431:         else if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2414:         }",
          "2415: #endif",
          "2416: #ifndef OPENSSL_NO_DH",
          "2418:             DH *dh_srvr, *dh_clnt;",
          "2419:             if (s->s3->peer_dh_tmp != NULL)",
          "2420:                 dh_srvr = s->s3->peer_dh_tmp;",
          "",
          "[Removed Lines]",
          "2417:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd)) {",
          "",
          "[Added Lines]",
          "2491:         else if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2493: #endif",
          "2495: #ifndef OPENSSL_NO_EC",
          "2497:             const EC_GROUP *srvr_group = NULL;",
          "2498:             EC_KEY *tkey;",
          "2499:             int ecdh_clnt_cert = 0;",
          "",
          "[Removed Lines]",
          "2496:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe)) {",
          "",
          "[Added Lines]",
          "2570:         else if (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe | SSL_kECDHEPSK)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2780:                 goto err;",
          "2781:             }",
          "2782:         }",
          "2859: #endif",
          "2860:         else {",
          "2861:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "",
          "[Removed Lines]",
          "2783: #endif",
          "2784: #ifndef OPENSSL_NO_PSK",
          "2785:         else if (alg_k & SSL_kPSK) {",
          "2791:             char identity[PSK_MAX_IDENTITY_LEN + 2];",
          "2792:             size_t identity_len;",
          "2793:             unsigned char *t = NULL;",
          "2794:             unsigned int psk_len = 0;",
          "2795:             int psk_err = 1;",
          "2797:             n = 0;",
          "2798:             if (s->psk_client_callback == NULL) {",
          "2799:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2800:                        SSL_R_PSK_NO_CLIENT_CB);",
          "2801:                 goto err;",
          "2802:             }",
          "2804:             memset(identity, 0, sizeof(identity));",
          "2806:             pmslen = PSK_MAX_PSK_LEN * 2 + 4;",
          "2807:             pms = OPENSSL_malloc(pmslen);",
          "2808:             if (!pms)",
          "2809:                 goto memerr;",
          "2811:             psk_len = s->psk_client_callback(s, s->session->psk_identity_hint,",
          "2812:                                              identity, sizeof(identity) - 1,",
          "2813:                                              pms, pmslen);",
          "2814:             if (psk_len > PSK_MAX_PSK_LEN) {",
          "2815:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2816:                        ERR_R_INTERNAL_ERROR);",
          "2817:                 goto psk_err;",
          "2818:             } else if (psk_len == 0) {",
          "2819:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2820:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "2821:                 goto psk_err;",
          "2822:             }",
          "2824:             pmslen = 2 + psk_len + 2 + psk_len;",
          "2825:             identity[PSK_MAX_IDENTITY_LEN + 1] = '\\0';",
          "2826:             identity_len = strlen(identity);",
          "2827:             if (identity_len > PSK_MAX_IDENTITY_LEN) {",
          "2828:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2829:                        ERR_R_INTERNAL_ERROR);",
          "2830:                 goto psk_err;",
          "2831:             }",
          "2833:             t = pms;",
          "2834:             memmove(pms + psk_len + 4, pms, psk_len);",
          "2835:             s2n(psk_len, t);",
          "2836:             memset(t, 0, psk_len);",
          "2837:             t += psk_len;",
          "2838:             s2n(psk_len, t);",
          "2840:             OPENSSL_free(s->session->psk_identity);",
          "2841:             s->session->psk_identity = BUF_strdup(identity);",
          "2842:             if (s->session->psk_identity == NULL) {",
          "2843:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2844:                        ERR_R_MALLOC_FAILURE);",
          "2845:                 goto psk_err;",
          "2846:             }",
          "2848:             s2n(identity_len, p);",
          "2849:             memcpy(p, identity, identity_len);",
          "2850:             n = 2 + identity_len;",
          "2851:             psk_err = 0;",
          "2852:  psk_err:",
          "2853:             OPENSSL_cleanse(identity, sizeof(identity));",
          "2854:             if (psk_err != 0) {",
          "2855:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2856:                 goto err;",
          "2857:             }",
          "2858:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2863:             goto err;",
          "2864:         }",
          "2866:         if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_KEY_EXCHANGE, n)) {",
          "2867:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "2868:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2864: #ifndef OPENSSL_NO_PSK",
          "2865:         n += pskhdrlen;",
          "2866: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2876:     n = ssl_do_write(s);",
          "2877: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "2879:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "",
          "[Added Lines]",
          "2881:     if (alg_k & SSL_kSRP) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2900:             pms = s->s3->tmp.pms;",
          "2901:             pmslen = s->s3->tmp.pmslen;",
          "2902:         }",
          "2904:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "2905:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "2906:             goto err;",
          "",
          "[Removed Lines]",
          "2903:         if (pms == NULL) {",
          "",
          "[Added Lines]",
          "2905:         if (pms == NULL && !(alg_k & SSL_kPSK)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2923:     OPENSSL_free(encodedPoint);",
          "2924:     EC_KEY_free(clnt_ecdh);",
          "2925:     EVP_PKEY_free(srvr_pub_pkey);",
          "2926: #endif",
          "2927:     s->state = SSL_ST_ERR;",
          "2928:     return (-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2928: #endif",
          "2929: #ifndef OPENSSL_NO_PSK",
          "2930:     OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);",
          "2931:     s->s3->tmp.psk = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3261:     }",
          "3262: #endif",
          "3263: #ifndef OPENSSL_NO_RSA",
          "3265:         if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher) &&",
          "3266:             !has_bits(i, EVP_PK_RSA | EVP_PKT_ENC)) {",
          "3267:             SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,",
          "",
          "[Removed Lines]",
          "3264:     if (alg_k & SSL_kRSA) {",
          "",
          "[Added Lines]",
          "3270:     if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c660ec63a83090051f3e110b00bd5753f21bce51",
      "candidate_info": {
        "commit_hash": "c660ec63a83090051f3e110b00bd5753f21bce51",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c660ec63a83090051f3e110b00bd5753f21bce51",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Rewrite ssl3_send_client_key_exchange to support extms.\n\nRewrite ssl3_send_client_key_exchange to retain the premaster secret\ninstead of using it immediately.\n\nThis is needed because the premaster secret is used after the client key\nexchange message has been sent to compute the extended master secret.\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2338:     int encoded_pt_len = 0;",
          "2339:     BN_CTX *bn_ctx = NULL;",
          "2340: #endif",
          "2342:     if (s->state == SSL3_ST_CW_KEY_EXCH_A) {",
          "2343:         p = ssl_handshake_start(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2341:     unsigned char *pms = NULL;",
          "2342:     size_t pmslen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2350: #ifndef OPENSSL_NO_RSA",
          "2351:         else if (alg_k & SSL_kRSA) {",
          "2352:             RSA *rsa;",
          "2355:             if (s->session->sess_cert == NULL) {",
          "",
          "[Removed Lines]",
          "2353:             unsigned char tmp_buf[SSL_MAX_MASTER_KEY_LENGTH];",
          "",
          "[Added Lines]",
          "2355:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2356:             pms = OPENSSL_malloc(pmslen);",
          "2357:             if (!pms)",
          "2358:                 goto memerr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:                 EVP_PKEY_free(pkey);",
          "2379:             }",
          "2384:                 goto err;",
          "2388:             q = p;",
          "2390:             if (s->version > SSL3_VERSION)",
          "2391:                 p += 2;",
          "2394: # ifdef PKCS1_CHECK",
          "2395:             if (s->options & SSL_OP_PKCS1_CHECK_1)",
          "2396:                 p[1]++;",
          "",
          "[Removed Lines]",
          "2381:             tmp_buf[0] = s->client_version >> 8;",
          "2382:             tmp_buf[1] = s->client_version & 0xff;",
          "2383:             if (RAND_bytes(&(tmp_buf[2]), sizeof tmp_buf - 2) <= 0)",
          "2386:             s->session->master_key_length = sizeof tmp_buf;",
          "2392:             n = RSA_public_encrypt(sizeof tmp_buf,",
          "2393:                                    tmp_buf, p, rsa, RSA_PKCS1_PADDING);",
          "",
          "[Added Lines]",
          "2386:             pms[0] = s->client_version >> 8;",
          "2387:             pms[1] = s->client_version & 0xff;",
          "2388:             if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "2395:             n = RSA_public_encrypt(pmslen, pms, p, rsa, RSA_PKCS1_PADDING);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2408:                 s2n(n, q);",
          "2409:                 n += 2;",
          "2410:             }",
          "2419:         }",
          "2420: #endif",
          "2421: #ifndef OPENSSL_NO_KRB5",
          "",
          "[Removed Lines]",
          "2412:             s->session->master_key_length =",
          "2413:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2414:                                                             s->",
          "2415:                                                             session->master_key,",
          "2416:                                                             tmp_buf,",
          "2417:                                                             sizeof tmp_buf);",
          "2418:             OPENSSL_cleanse(tmp_buf, sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2505:                 n += 2;",
          "2506:             }",
          "2511:                 goto err;",
          "",
          "[Removed Lines]",
          "2508:             tmp_buf[0] = s->client_version >> 8;",
          "2509:             tmp_buf[1] = s->client_version & 0xff;",
          "2510:             if (RAND_bytes(&(tmp_buf[2]), sizeof tmp_buf - 2) <= 0)",
          "",
          "[Added Lines]",
          "2502:             pmslen = SSL_MAX_MASTER_KEY_LENGTH;",
          "2503:             pms = OPENSSL_malloc(pmslen);",
          "2504:             if (!pms)",
          "2505:                 goto memerr;",
          "2507:             pms[0] = s->client_version >> 8;",
          "2508:             pms[1] = s->client_version & 0xff;",
          "2509:             if (RAND_bytes(pms + 2, pmslen - 2) <= 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2522:             EVP_EncryptInit_ex(&ciph_ctx, enc, NULL, kssl_ctx->key, iv);",
          "2525:             EVP_EncryptFinal_ex(&ciph_ctx, &(epms[outl]), &padl);",
          "2526:             outl += padl;",
          "2527:             if (outl > (int)sizeof epms) {",
          "",
          "[Removed Lines]",
          "2523:             EVP_EncryptUpdate(&ciph_ctx, epms, &outl, tmp_buf,",
          "2524:                               sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "2522:             EVP_EncryptUpdate(&ciph_ctx, epms, &outl, pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2536:             memcpy(p, epms, outl);",
          "2537:             p += outl;",
          "2538:             n += outl + 2;",
          "2548:             OPENSSL_cleanse(epms, outl);",
          "2549:         }",
          "2550: #endif",
          "",
          "[Removed Lines]",
          "2540:             s->session->master_key_length =",
          "2541:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2542:                                                             s->",
          "2543:                                                             session->master_key,",
          "2544:                                                             tmp_buf,",
          "2545:                                                             sizeof tmp_buf);",
          "2547:             OPENSSL_cleanse(tmp_buf, sizeof tmp_buf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2603:                 }",
          "2604:             }",
          "2612:             if (scert->peer_dh_tmp == NULL)",
          "2613:                 DH_free(dh_srvr);",
          "",
          "[Removed Lines]",
          "2611:             n = DH_compute_key(p, dh_srvr->pub_key, dh_clnt);",
          "",
          "[Added Lines]",
          "2595:             pmslen = DH_size(dh_clnt);",
          "2596:             pms = OPENSSL_malloc(pmslen);",
          "2597:             if (!pms)",
          "2598:                 goto memerr;",
          "2605:             n = DH_compute_key(pms, dh_srvr->pub_key, dh_clnt);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2618:                 goto err;",
          "2619:             }",
          "2630:             if (s->s3->flags & TLS1_FLAGS_SKIP_CERT_VERIFY)",
          "2631:                 n = 0;",
          "2632:             else {",
          "",
          "[Removed Lines]",
          "2622:             s->session->master_key_length =",
          "2623:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2624:                                                             s->",
          "2625:                                                             session->master_key,",
          "2626:                                                             p, n);",
          "2628:             memset(p, 0, n);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2758:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2759:                 goto err;",
          "2760:             }",
          "2764:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_ECDH_LIB);",
          "2765:                 goto err;",
          "2766:             }",
          "2777:             if (ecdh_clnt_cert) {",
          "2779:                 n = 0;",
          "",
          "[Removed Lines]",
          "2761:             n = ECDH_compute_key(p, (field_size + 7) / 8, srvr_ecpoint,",
          "2762:                                  clnt_ecdh, NULL);",
          "2763:             if (n <= 0) {",
          "2769:             s->session->master_key_length =",
          "2770:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2771:                                                             s->",
          "2772:                                                             session->master_key,",
          "2773:                                                             p, n);",
          "",
          "[Added Lines]",
          "2746:             pmslen = (field_size + 7) / 8;",
          "2747:             pms = OPENSSL_malloc(pmslen);",
          "2748:             if (!pms)",
          "2749:                 goto memerr;",
          "2750:             n = ECDH_compute_key(pms, pmslen, srvr_ecpoint, clnt_ecdh, NULL);",
          "2751:             if (n <= 0 || pmslen != (size_t)n) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2828:             size_t msglen;",
          "2829:             unsigned int md_len;",
          "2830:             int keytype;",
          "2832:             EVP_MD_CTX *ukm_hash;",
          "2833:             EVP_PKEY *pub_key;",
          "",
          "[Removed Lines]",
          "2831:             unsigned char premaster_secret[32], shared_ukm[32], tmp[256];",
          "",
          "[Added Lines]",
          "2810:             unsigned char shared_ukm[32], tmp[256];",
          "2814:             pmslen = 32;",
          "2815:             pms = OPENSSL_malloc(pmslen);",
          "2816:             if (!pms)",
          "2817:                 goto memerr;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2862:             EVP_PKEY_encrypt_init(pkey_ctx);",
          "",
          "[Removed Lines]",
          "2864:             RAND_bytes(premaster_secret, 32);",
          "",
          "[Added Lines]",
          "2848:             RAND_bytes(pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2903:             msglen = 255;",
          "2906:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2907:                        SSL_R_LIBRARY_BUG);",
          "2908:                 goto err;",
          "",
          "[Removed Lines]",
          "2904:             if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, premaster_secret, 32)",
          "2905:                 < 0) {",
          "",
          "[Added Lines]",
          "2888:             if (EVP_PKEY_encrypt(pkey_ctx, tmp, &msglen, pms, pmslen) < 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2923:                 s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "2924:             }",
          "2925:             EVP_PKEY_CTX_free(pkey_ctx);",
          "2932:             EVP_PKEY_free(pub_key);",
          "2934:         }",
          "",
          "[Removed Lines]",
          "2926:             s->session->master_key_length =",
          "2927:                 s->method->ssl3_enc->generate_master_secret(s,",
          "2928:                                                             s->",
          "2929:                                                             session->master_key,",
          "2930:                                                             premaster_secret,",
          "2931:                                                             32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2953:                        ERR_R_MALLOC_FAILURE);",
          "2954:                 goto err;",
          "2955:             }",
          "2965:         }",
          "2966: #endif",
          "2967: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "2957:             if ((s->session->master_key_length =",
          "2958:                  SRP_generate_client_master_secret(s,",
          "2959:                                                    s->session->master_key)) <",
          "2960:                 0) {",
          "2961:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2962:                        ERR_R_INTERNAL_ERROR);",
          "2963:                 goto err;",
          "2964:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2974:             char identity[PSK_MAX_IDENTITY_LEN + 2];",
          "2975:             size_t identity_len;",
          "2976:             unsigned char *t = NULL;",
          "2979:             int psk_err = 1;",
          "2981:             n = 0;",
          "",
          "[Removed Lines]",
          "2977:             unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN * 2 + 4];",
          "2978:             unsigned int pre_ms_len = 0, psk_len = 0;",
          "",
          "[Added Lines]",
          "2945:             unsigned int psk_len = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2986:             }",
          "2988:             memset(identity, 0, sizeof(identity));",
          "2989:             psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,",
          "2990:                                              identity, sizeof(identity) - 1,",
          "2993:             if (psk_len > PSK_MAX_PSK_LEN) {",
          "2994:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2995:                        ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "2991:                                              psk_or_pre_ms,",
          "2992:                                              sizeof(psk_or_pre_ms));",
          "",
          "[Added Lines]",
          "2957:             pmslen = PSK_MAX_PSK_LEN * 2 + 4;",
          "2958:             pms = OPENSSL_malloc(pmslen);",
          "2959:             if (!pms)",
          "2960:                 goto memerr;",
          "2964:                                              pms, pmslen);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2999:                        SSL_R_PSK_IDENTITY_NOT_FOUND);",
          "3000:                 goto psk_err;",
          "3001:             }",
          "3002:             identity[PSK_MAX_IDENTITY_LEN + 1] = '\\0';",
          "3003:             identity_len = strlen(identity);",
          "3004:             if (identity_len > PSK_MAX_IDENTITY_LEN) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2975:             pmslen = 2 + psk_len + 2 + psk_len;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3007:                 goto psk_err;",
          "3008:             }",
          "3013:             s2n(psk_len, t);",
          "3014:             memset(t, 0, psk_len);",
          "3015:             t += psk_len;",
          "",
          "[Removed Lines]",
          "3010:             pre_ms_len = 2 + psk_len + 2 + psk_len;",
          "3011:             t = psk_or_pre_ms;",
          "3012:             memmove(psk_or_pre_ms + psk_len + 4, psk_or_pre_ms, psk_len);",
          "",
          "[Added Lines]",
          "2984:             t = pms;",
          "2985:             memmove(pms + psk_len + 4, pms, psk_len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3035:                 goto psk_err;",
          "3036:             }",
          "3044:             s2n(identity_len, p);",
          "3045:             memcpy(p, identity, identity_len);",
          "3046:             n = 2 + identity_len;",
          "3047:             psk_err = 0;",
          "3048:  psk_err:",
          "3049:             OPENSSL_cleanse(identity, sizeof(identity));",
          "3051:             if (psk_err != 0) {",
          "3052:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);",
          "3053:                 goto err;",
          "",
          "[Removed Lines]",
          "3038:             s->session->master_key_length =",
          "3039:                 s->method->ssl3_enc->generate_master_secret(s,",
          "3040:                                                             s->",
          "3041:                                                             session->master_key,",
          "3042:                                                             psk_or_pre_ms,",
          "3043:                                                             pre_ms_len);",
          "3050:             OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3065:     }",
          "3069:  err:",
          "3070: #ifndef OPENSSL_NO_ECDH",
          "3071:     BN_CTX_free(bn_ctx);",
          "3072:     if (encodedPoint != NULL)",
          "",
          "[Removed Lines]",
          "3068:     return ssl_do_write(s);",
          "",
          "[Added Lines]",
          "3034:     n = ssl_do_write(s);",
          "3035: #ifndef OPENSSL_NO_SRP",
          "3037:     if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) {",
          "3042:         if (n > 0) {",
          "3043:             if ((s->session->master_key_length =",
          "3044:                  SRP_generate_client_master_secret(s,",
          "3045:                                                    s->session->master_key)) <",
          "3046:                 0) {",
          "3047:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "3048:                        ERR_R_INTERNAL_ERROR);",
          "3049:                 goto err;",
          "3050:             }",
          "3051:         }",
          "3052:     } else",
          "3053: #endif",
          "3055:     if (n <= 0) {",
          "3056:         s->cert->pms = pms;",
          "3057:         s->cert->pmslen = pmslen;",
          "3058:     } else {",
          "3060:         if (pms == NULL) {",
          "3061:             pms = s->cert->pms;",
          "3062:             pmslen = s->cert->pmslen;",
          "3063:         }",
          "3064:         if (pms == NULL) {",
          "3065:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3066:             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "3067:             goto err;",
          "3068:         }",
          "3069:         s->session->master_key_length =",
          "3070:             s->method->ssl3_enc->generate_master_secret(s,",
          "3071:                                                         s->",
          "3072:                                                         session->master_key,",
          "3073:                                                         pms, pmslen);",
          "3074:         OPENSSL_cleanse(pms, pmslen);",
          "3075:         OPENSSL_free(pms);",
          "3076:         s->cert->pms = NULL;",
          "3077:     }",
          "3078:     return n;",
          "3079:  memerr:",
          "3080:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "3081:     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "3083:     if (pms) {",
          "3084:         OPENSSL_cleanse(pms, pmslen);",
          "3085:         OPENSSL_free(pms);",
          "3086:         s->cert->pms = NULL;",
          "3087:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     custom_exts_free(&c->cli_ext);",
          "477:     custom_exts_free(&c->srv_ext);",
          "478: #endif",
          "479:     OPENSSL_free(c);",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:     if (c->pms) {",
          "480:         OPENSSL_cleanse(c->pms, c->pmslen);",
          "481:         OPENSSL_free(c->pms);",
          "482:         c->pms = NULL;",
          "483:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1680:     unsigned char *ctypes;",
          "1681:     size_t ctype_num;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:     unsigned char *pms;",
          "1684:     size_t pmslen;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a273c6eeee6690d7061d3e647a5e648bbd3a997a",
      "candidate_info": {
        "commit_hash": "a273c6eeee6690d7061d3e647a5e648bbd3a997a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a273c6eeee6690d7061d3e647a5e648bbd3a997a",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Remove certificates from sess_cert\n\nAs numerous comments indicate the certificate and key array is not an\nappopriate structure to store the peers certificate: so remove it and\njust the s->session->peer instead.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367:                SSL_R_WRONG_CERTIFICATE_TYPE);",
          "1368:         goto f_err;",
          "1369:     }",
          "1380:     X509_free(s->session->peer);",
          "1381:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Removed Lines]",
          "1370:     sc->peer_cert_type = i;",
          "1371:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "1376:     X509_free(sc->peer_pkeys[i].x509);",
          "1377:     sc->peer_pkeys[i].x509 = x;",
          "1378:     sc->peer_key = &(sc->peer_pkeys[i]);",
          "",
          "[Added Lines]",
          "1370:     s->session->peer_type = i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1628: # ifndef OPENSSL_NO_RSA",
          "1629:         if (alg_a & SSL_aRSA)",
          "1633: # else",
          "1634:         if (0) ;",
          "1635: # endif",
          "1636: # ifndef OPENSSL_NO_DSA",
          "1637:         else if (alg_a & SSL_aDSS)",
          "1642: # endif",
          "1643:     } else",
          "",
          "[Removed Lines]",
          "1630:             pkey =",
          "1631:                 X509_get_pubkey(s->session->",
          "1632:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1638:             pkey =",
          "1639:                 X509_get_pubkey(s->session->",
          "1640:                                 sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].",
          "1641:                                 x509);",
          "",
          "[Added Lines]",
          "1622:             pkey = X509_get_pubkey(s->session->peer);",
          "1628:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1699:         if (alg_a & SSL_aRSA)",
          "1703:         else {",
          "1704:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1705:             goto err;",
          "",
          "[Removed Lines]",
          "1700:             pkey =",
          "1701:                 X509_get_pubkey(s->session->",
          "1702:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "",
          "[Added Lines]",
          "1687:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:         }",
          "1792: # ifndef OPENSSL_NO_RSA",
          "1793:         if (alg_a & SSL_aRSA)",
          "1797: # else",
          "1798:         if (0) ;",
          "1799: # endif",
          "1800: # ifndef OPENSSL_NO_DSA",
          "1801:         else if (alg_a & SSL_aDSS)",
          "1806: # endif",
          "",
          "[Removed Lines]",
          "1794:             pkey =",
          "1795:                 X509_get_pubkey(s->session->",
          "1796:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1802:             pkey =",
          "1803:                 X509_get_pubkey(s->session->",
          "1804:                                 sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].",
          "1805:                                 x509);",
          "",
          "[Added Lines]",
          "1779:             pkey = X509_get_pubkey(s->session->peer);",
          "1785:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1905:         if (0) ;",
          "1906: # ifndef OPENSSL_NO_RSA",
          "1907:         else if (alg_a & SSL_aRSA)",
          "1911: # endif",
          "1912: # ifndef OPENSSL_NO_EC",
          "1913:         else if (alg_a & SSL_aECDSA)",
          "1917: # endif",
          "1919:         EC_KEY_set_public_key(ecdh, srvr_ecpoint);",
          "",
          "[Removed Lines]",
          "1908:             pkey =",
          "1909:                 X509_get_pubkey(s->session->",
          "1910:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1914:             pkey =",
          "1915:                 X509_get_pubkey(s->session->",
          "1916:                                 sess_cert->peer_pkeys[SSL_PKEY_ECC].x509);",
          "",
          "[Added Lines]",
          "1888:             pkey = X509_get_pubkey(s->session->peer);",
          "1892:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2449:             if (s->s3->peer_rsa_tmp != NULL)",
          "2450:                 rsa = s->s3->peer_rsa_tmp;",
          "2451:             else {",
          "2456:                 if ((pkey == NULL) || (pkey->type != EVP_PKEY_RSA)",
          "2457:                     || (pkey->pkey.rsa == NULL)) {",
          "2458:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "2452:                 pkey =",
          "2453:                     X509_get_pubkey(s->session->",
          "2454:                                     sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].",
          "2455:                                     x509);",
          "",
          "[Added Lines]",
          "2428:                 pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2508:                 dh_srvr = s->s3->peer_dh_tmp;",
          "2509:             else {",
          "2512:                 EVP_PKEY *spkey = NULL;",
          "2513:                 dh_srvr = NULL;",
          "2516:                 if (spkey) {",
          "2517:                     dh_srvr = EVP_PKEY_get1_DH(spkey);",
          "2518:                     EVP_PKEY_free(spkey);",
          "",
          "[Removed Lines]",
          "2511:                 int idx = scert->peer_cert_type;",
          "2514:                 if (idx >= 0)",
          "2515:                     spkey = X509_get_pubkey(scert->peer_pkeys[idx].x509);",
          "",
          "[Added Lines]",
          "2486:                 spkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2628:                 tkey = s->s3->peer_ecdh_tmp;",
          "2629:             } else {",
          "2634:                 if ((srvr_pub_pkey == NULL)",
          "2635:                     || (srvr_pub_pkey->type != EVP_PKEY_EC)",
          "2636:                     || (srvr_pub_pkey->pkey.ec == NULL)) {",
          "",
          "[Removed Lines]",
          "2631:                 srvr_pub_pkey =",
          "2632:                     X509_get_pubkey(s->session->",
          "2633:                                     sess_cert->peer_pkeys[SSL_PKEY_ECC].x509);",
          "",
          "[Added Lines]",
          "2602:                 srvr_pub_pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2758:             X509 *peer_cert;",
          "2759:             size_t msglen;",
          "2760:             unsigned int md_len;",
          "2762:             unsigned char shared_ukm[32], tmp[256];",
          "2763:             EVP_MD_CTX *ukm_hash;",
          "2764:             EVP_PKEY *pub_key;",
          "",
          "[Removed Lines]",
          "2761:             int keytype;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2781:             if (!peer_cert) {",
          "2782:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2783:                        SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER);",
          "",
          "[Removed Lines]",
          "2774:             peer_cert =",
          "2775:                 s->session->",
          "2776:                 sess_cert->peer_pkeys[(keytype = SSL_PKEY_GOST01)].x509;",
          "2777:             if (!peer_cert)",
          "2778:                 peer_cert =",
          "2779:                     s->session->",
          "2780:                     sess_cert->peer_pkeys[(keytype = SSL_PKEY_GOST94)].x509;",
          "",
          "[Added Lines]",
          "2742:             peer_cert = s->session->peer;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3218:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "3220:     if (alg_k & (SSL_kDHr | SSL_kDHd)) {",
          "3223:         EVP_PKEY *clkey = NULL, *spkey = NULL;",
          "3224:         clkey = s->cert->key->privatekey;",
          "3226:         if (EVP_PKEY_id(clkey) != EVP_PKEY_DH)",
          "3227:             return 1;",
          "3228:         if (i >= 0)",
          "3230:         if (spkey) {",
          "3232:             i = EVP_PKEY_cmp_parameters(clkey, spkey);",
          "",
          "[Removed Lines]",
          "3221:         SESS_CERT *scert = s->session->sess_cert;",
          "3222:         int i = scert->peer_cert_type;",
          "3229:             spkey = X509_get_pubkey(scert->peer_pkeys[i].x509);",
          "",
          "[Added Lines]",
          "3183:         int i = s->session->peer_type;",
          "3190:             spkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3369: #ifndef OPENSSL_NO_EC",
          "3370:     if (idx == SSL_PKEY_ECC) {",
          "3373:             SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM, SSL_R_BAD_ECC_CERT);",
          "3374:             goto f_err;",
          "",
          "[Removed Lines]",
          "3368:     idx = sc->peer_cert_type;",
          "3371:         if (ssl_check_srvr_ecc_cert_and_alg(sc->peer_pkeys[idx].x509, s) == 0) {",
          "",
          "[Added Lines]",
          "3329:     idx = s->session->peer_type;",
          "3332:         if (ssl_check_srvr_ecc_cert_and_alg(s->session->peer, s) == 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3384:         goto f_err;",
          "3385:     }",
          "3386: #endif",
          "3388:     pkey_bits = EVP_PKEY_bits(pkey);",
          "3390:     EVP_PKEY_free(pkey);",
          "",
          "[Removed Lines]",
          "3387:     pkey = X509_get_pubkey(sc->peer_pkeys[idx].x509);",
          "3389:     i = X509_certificate_type(sc->peer_pkeys[idx].x509, pkey);",
          "",
          "[Added Lines]",
          "3348:     pkey = X509_get_pubkey(s->session->peer);",
          "3350:     i = X509_certificate_type(s->session->peer, pkey);",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     }",
          "532:     memset(ret, 0, sizeof(*ret));",
          "534:     ret->references = 1;",
          "536:     return ret;",
          "",
          "[Removed Lines]",
          "533:     ret->peer_key = &(ret->peer_pkeys[SSL_PKEY_RSA_ENC]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:     sk_X509_pop_free(sc->cert_chain, X509_free);",
          "573:     OPENSSL_free(sc);",
          "574: }",
          "582: int ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk)",
          "583: {",
          "584:     X509 *x;",
          "",
          "[Removed Lines]",
          "561:     for (i = 0; i < SSL_PKEY_NUM; i++) {",
          "562:         X509_free(sc->peer_pkeys[i].x509);",
          "563: #if 0",
          "569:         EVP_PKEY_free(sc->peer_pkeys[i].privatekey);",
          "570: #endif",
          "571:     }",
          "576: int ssl_set_peer_cert_type(SESS_CERT *sc, int type)",
          "577: {",
          "578:     sc->peer_cert_type = type;",
          "579:     return (1);",
          "580: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:     int not_resumable;",
          "628:     struct sess_cert_st /* SESS_CERT */ *sess_cert;",
          "635:     X509 *peer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:     int peer_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1593: typedef struct sess_cert_st {",
          "1605: } SESS_CERT;",
          "",
          "[Removed Lines]",
          "1596:     int peer_cert_type;",
          "1597:     CERT_PKEY *peer_key;        /* points to an element of peer_pkeys (never",
          "1599:     CERT_PKEY peer_pkeys[SSL_PKEY_NUM];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1859: void ssl_cert_free(CERT *c);",
          "1860: __owur SESS_CERT *ssl_sess_cert_new(void);",
          "1861: void ssl_sess_cert_free(SESS_CERT *sc);",
          "1863: __owur int ssl_get_new_session(SSL *s, int session);",
          "1864: __owur int ssl_get_prev_session(SSL *s, unsigned char *session, int len,",
          "1865:                          const unsigned char *limit);",
          "",
          "[Removed Lines]",
          "1862: __owur int ssl_set_peer_cert_type(SESS_CERT *c, int type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d92c1f8a381a3be7fe5b3a2c2aa9bfce22f5c72",
      "candidate_info": {
        "commit_hash": "8d92c1f8a381a3be7fe5b3a2c2aa9bfce22f5c72",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8d92c1f8a381a3be7fe5b3a2c2aa9bfce22f5c72",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Remove peer temp keys from SESS_CERT\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1464:     }",
          "1466:     param = p = (unsigned char *)s->init_msg;",
          "1468: #ifndef OPENSSL_NO_RSA",
          "1471: #endif",
          "1472: #ifndef OPENSSL_NO_DH",
          "1475: #endif",
          "1476: #ifndef OPENSSL_NO_EC",
          "1479: #endif",
          "1481:         s->session->sess_cert = ssl_sess_cert_new();",
          "1485:     param_len = 0;",
          "",
          "[Removed Lines]",
          "1467:     if (s->session->sess_cert != NULL) {",
          "1469:         RSA_free(s->session->sess_cert->peer_rsa_tmp);",
          "1470:         s->session->sess_cert->peer_rsa_tmp = NULL;",
          "1473:         DH_free(s->session->sess_cert->peer_dh_tmp);",
          "1474:         s->session->sess_cert->peer_dh_tmp = NULL;",
          "1477:         EC_KEY_free(s->session->sess_cert->peer_ecdh_tmp);",
          "1478:         s->session->sess_cert->peer_ecdh_tmp = NULL;",
          "1480:     } else {",
          "1482:     }",
          "",
          "[Added Lines]",
          "1469:     RSA_free(s->s3->peer_rsa_tmp);",
          "1470:     s->s3->peer_rsa_tmp = NULL;",
          "1473:     DH_free(s->s3->peer_dh_tmp);",
          "1474:     s->s3->peer_dh_tmp = NULL;",
          "1477:     EC_KEY_free(s->s3->peer_ecdh_tmp);",
          "1478:     s->s3->peer_ecdh_tmp = NULL;",
          "1481:     if (s->session->sess_cert == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1711:             goto f_err;",
          "1712:         }",
          "1715:         rsa = NULL;",
          "1716:     }",
          "",
          "[Removed Lines]",
          "1714:         s->session->sess_cert->peer_rsa_tmp = rsa;",
          "",
          "[Added Lines]",
          "1714:         s->s3->peer_rsa_tmp = rsa;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1806: # endif",
          "1810:         dh = NULL;",
          "1811:     }",
          "",
          "[Removed Lines]",
          "1809:         s->session->sess_cert->peer_dh_tmp = dh;",
          "",
          "[Added Lines]",
          "1809:         s->s3->peer_dh_tmp = dh;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1917: # endif",
          "1919:         EC_KEY_set_public_key(ecdh, srvr_ecpoint);",
          "1921:         ecdh = NULL;",
          "1922:         BN_CTX_free(bn_ctx);",
          "1923:         bn_ctx = NULL;",
          "",
          "[Removed Lines]",
          "1920:         s->session->sess_cert->peer_ecdh_tmp = ecdh;",
          "",
          "[Added Lines]",
          "1920:         s->s3->peer_ecdh_tmp = ecdh;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2446:                 goto err;",
          "2447:             }",
          "2451:             else {",
          "2452:                 pkey =",
          "2453:                     X509_get_pubkey(s->session->",
          "",
          "[Removed Lines]",
          "2449:             if (s->session->sess_cert->peer_rsa_tmp != NULL)",
          "2450:                 rsa = s->session->sess_cert->peer_rsa_tmp;",
          "",
          "[Added Lines]",
          "2449:             if (s->s3->peer_rsa_tmp != NULL)",
          "2450:                 rsa = s->s3->peer_rsa_tmp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2504:                 goto err;",
          "2505:             }",
          "2509:             else {",
          "2511:                 int idx = scert->peer_cert_type;",
          "",
          "[Removed Lines]",
          "2507:             if (scert->peer_dh_tmp != NULL)",
          "2508:                 dh_srvr = scert->peer_dh_tmp;",
          "",
          "[Added Lines]",
          "2507:             if (s->s3->peer_dh_tmp != NULL)",
          "2508:                 dh_srvr = s->s3->peer_dh_tmp;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2560:             n = DH_compute_key(pms, dh_srvr->pub_key, dh_clnt);",
          "2562:                 DH_free(dh_srvr);",
          "2564:             if (n <= 0) {",
          "",
          "[Removed Lines]",
          "2561:             if (scert->peer_dh_tmp == NULL)",
          "",
          "[Added Lines]",
          "2561:             if (s->s3->peer_dh_tmp == NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2625:             }",
          "2629:             } else {",
          "2631:                 srvr_pub_pkey =",
          "",
          "[Removed Lines]",
          "2627:             if (s->session->sess_cert->peer_ecdh_tmp != NULL) {",
          "2628:                 tkey = s->session->sess_cert->peer_ecdh_tmp;",
          "",
          "[Added Lines]",
          "2627:             if (s->s3->peer_ecdh_tmp != NULL) {",
          "2628:                 tkey = s->s3->peer_ecdh_tmp;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3357:         goto err;",
          "3358:     }",
          "3359: #ifndef OPENSSL_NO_RSA",
          "3361: #endif",
          "3362: #ifndef OPENSSL_NO_DH",
          "3364: #endif",
          "",
          "[Removed Lines]",
          "3360:     rsa = s->session->sess_cert->peer_rsa_tmp;",
          "3363:     dh = s->session->sess_cert->peer_dh_tmp;",
          "",
          "[Added Lines]",
          "3360:     rsa = s->s3->peer_rsa_tmp;",
          "3363:     dh = s->s3->peer_dh_tmp;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:         return;",
          "2896:     ssl3_cleanup_key_block(s);",
          "2897: #ifndef OPENSSL_NO_DH",
          "2898:     DH_free(s->s3->tmp.dh);",
          "2899: #endif",
          "2900: #ifndef OPENSSL_NO_EC",
          "2901:     EC_KEY_free(s->s3->tmp.ecdh);",
          "2902: #endif",
          "2904:     sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2898: #ifndef OPENSSL_NO_RSA",
          "2899:     RSA_free(s->s3->peer_rsa_tmp);",
          "2900: #endif",
          "2903:     DH_free(s->s3->peer_dh_tmp);",
          "2907:     EC_KEY_free(s->s3->peer_ecdh_tmp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2929:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "2930:     s->s3->tmp.peer_sigalgs = NULL;",
          "2932: #ifndef OPENSSL_NO_DH",
          "2933:     DH_free(s->s3->tmp.dh);",
          "2934:     s->s3->tmp.dh = NULL;",
          "2935: #endif",
          "2936: #ifndef OPENSSL_NO_EC",
          "2937:     EC_KEY_free(s->s3->tmp.ecdh);",
          "2938:     s->s3->tmp.ecdh = NULL;",
          "2939:     s->s3->is_probably_safari = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2938: #ifndef OPENSSL_NO_RSA",
          "2939:     RSA_free(s->s3->peer_rsa_tmp);",
          "2940:     s->s3->peer_rsa_tmp = NULL;",
          "2941: #endif",
          "2946:     DH_free(s->s3->peer_dh_tmp);",
          "2947:     s->s3->peer_dh_tmp = NULL;",
          "2952:     EC_KEY_free(s->s3->peer_ecdh_tmp);",
          "2953:     s->s3->peer_ecdh_tmp = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3330:         if (s->server || !s->session || !s->session->sess_cert)",
          "3331:             return 0;",
          "3332:         else {",
          "3334:             EVP_PKEY *ptmp;",
          "3335:             int rv = 0;",
          "3337: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DH) && !defined(OPENSSL_NO_EC)",
          "3339:                 return 0;",
          "3340: #endif",
          "3341:             ptmp = EVP_PKEY_new();",
          "3342:             if (!ptmp)",
          "3343:                 return 0;",
          "3344: #ifndef OPENSSL_NO_RSA",
          "3347: #endif",
          "3348: #ifndef OPENSSL_NO_DH",
          "3351: #endif",
          "3352: #ifndef OPENSSL_NO_EC",
          "3355: #endif",
          "3356:             if (rv) {",
          "",
          "[Removed Lines]",
          "3333:             SESS_CERT *sc;",
          "3336:             sc = s->session->sess_cert;",
          "3338:             if (!sc->peer_rsa_tmp && !sc->peer_dh_tmp && !sc->peer_ecdh_tmp)",
          "3345:             else if (sc->peer_rsa_tmp)",
          "3346:                 rv = EVP_PKEY_set1_RSA(ptmp, sc->peer_rsa_tmp);",
          "3349:             else if (sc->peer_dh_tmp)",
          "3350:                 rv = EVP_PKEY_set1_DH(ptmp, sc->peer_dh_tmp);",
          "3353:             else if (sc->peer_ecdh_tmp)",
          "3354:                 rv = EVP_PKEY_set1_EC_KEY(ptmp, sc->peer_ecdh_tmp);",
          "",
          "[Added Lines]",
          "3351:             if (!s->s3->peer_rsa_tmp && !s->s3->peer_dh_tmp && !s->s3->peer_ecdh_tmp)",
          "3358:             else if (s->s3->peer_rsa_tmp)",
          "3359:                 rv = EVP_PKEY_set1_RSA(ptmp, s->s3->peer_rsa_tmp);",
          "3362:             else if (s->s3->peer_dh_tmp)",
          "3363:                 rv = EVP_PKEY_set1_DH(ptmp, s->s3->peer_dh_tmp);",
          "3366:             else if (s->s3->peer_ecdh_tmp)",
          "3367:                 rv = EVP_PKEY_set1_EC_KEY(ptmp, s->s3->peer_ecdh_tmp);",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: #endif",
          "571:     }",
          "583:     OPENSSL_free(sc);",
          "584: }",
          "",
          "[Removed Lines]",
          "573: #ifndef OPENSSL_NO_RSA",
          "574:     RSA_free(sc->peer_rsa_tmp);",
          "575: #endif",
          "576: #ifndef OPENSSL_NO_DH",
          "577:     DH_free(sc->peer_dh_tmp);",
          "578: #endif",
          "579: #ifndef OPENSSL_NO_EC",
          "580:     EC_KEY_free(sc->peer_ecdh_tmp);",
          "581: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341:     char is_probably_safari;",
          "1343: } SSL3_STATE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1345: # ifndef OPENSSL_NO_RSA",
          "1346:     RSA *peer_rsa_tmp;",
          "1347: # endif",
          "1348: # ifndef OPENSSL_NO_DH",
          "1349:     DH *peer_dh_tmp;",
          "1350: # endif",
          "1351: # ifndef OPENSSL_NO_EC",
          "1352:     EC_KEY *peer_ecdh_tmp;",
          "1353: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1602: } SESS_CERT;",
          "",
          "[Removed Lines]",
          "1592: # ifndef OPENSSL_NO_RSA",
          "1594: # endif",
          "1595: # ifndef OPENSSL_NO_DH",
          "1597: # endif",
          "1598: # ifndef OPENSSL_NO_EC",
          "1599:     EC_KEY *peer_ecdh_tmp;",
          "1600: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}