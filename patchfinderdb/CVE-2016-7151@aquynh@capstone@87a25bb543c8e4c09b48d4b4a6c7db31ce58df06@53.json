{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0dc28bf7b236ff8b178e295f68fe0e70a8144aa7",
      "candidate_info": {
        "commit_hash": "0dc28bf7b236ff8b178e295f68fe0e70a8144aa7",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0dc28bf7b236ff8b178e295f68fe0e70a8144aa7",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "__getattr__ should raise AttributeError, not return None, on failure\n\nFix for issue #624",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:         attr = object.__getattribute__",
          "619:         if not attr(self, '_cs')._detail:",
          "621:         _dict = attr(self, '__dict__')",
          "622:         if 'operands' not in _dict:",
          "623:             self.__gen_detail()",
          "624:         if name not in _dict:",
          "626:         return _dict[name]",
          "628:     # get the last error code",
          "",
          "[Removed Lines]",
          "620:             return None",
          "625:             return None",
          "",
          "[Added Lines]",
          "620:             raise AttributeError(name)",
          "625:             raise AttributeError(name)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f39fada1322e5bd7c193381dbbb4802c0ae60229",
      "candidate_info": {
        "commit_hash": "f39fada1322e5bd7c193381dbbb4802c0ae60229",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f39fada1322e5bd7c193381dbbb4802c0ae60229",
        "files": [
          "windows/winkernel_mm.c"
        ],
        "message": "fix #748",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  NT_ASSERT(size);",
          "33:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "35:  if (!block) {",
          "36:   return NULL;",
          "37:  }",
          "",
          "[Removed Lines]",
          "34:    NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "[Added Lines]",
          "34:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7032ff28029fcfbaf3a0e5f8deabfba6e9bc07ed",
      "candidate_info": {
        "commit_hash": "7032ff28029fcfbaf3a0e5f8deabfba6e9bc07ed",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7032ff28029fcfbaf3a0e5f8deabfba6e9bc07ed",
        "files": [
          "bindings/python/setup.py"
        ],
        "message": "Fix setup.py.",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "2: import glob",
          "3: import os",
          "5: import shutil",
          "6: import stat",
          "7: import sys",
          "",
          "[Removed Lines]",
          "4: import platform",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: from distutils import log",
          "10: from distutils import dir_util",
          "11: from distutils.command.build_clib import build_clib",
          "14: from distutils.sysconfig import get_python_lib",
          "16: # prebuilt libraries for Windows - for sdist",
          "",
          "[Removed Lines]",
          "12: from distutils.command.sdist import sdist",
          "13: from distutils.core import setup",
          "",
          "[Added Lines]",
          "11: from setuptools.command.sdist import sdist",
          "12: from setuptools import setup",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     dir_util.copy_tree(\"../../arch\", \"src/arch/\")",
          "57:     dir_util.copy_tree(\"../../include\", \"src/include/\")",
          "59:     src.extend(glob.glob(\"../../*.[ch]\"))",
          "60:     src.extend(glob.glob(\"../../*.mk\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     dir_util.copy_tree(\"../../msvc/headers\", \"src/msvc/headers\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     \"\"\"Reshuffle files for distribution.\"\"\"",
          "79:     def run(self):",
          "80:         # if prebuilt libraries are existent, then do not copy source",
          "81:         if os.path.exists(PATH_LIB64) and os.path.exists(PATH_LIB32):",
          "82:             return sdist.run(self)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         for filename in glob.glob(\"capstone/*.{dll,so}\"):",
          "81:             try:",
          "82:                 os.unlink(filename)",
          "83:             except Exception:",
          "84:                 pass",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:         if SYSTEM in (\"win32\", \"cygwin\"):",
          "109:             # if Windows prebuilt library is available, then include it",
          "110:             if is_64bits and os.path.exists(PATH_LIB64):",
          "112:                 return",
          "113:             elif os.path.exists(PATH_LIB32):",
          "115:                 return",
          "117:         # build library from source if src/ is existent",
          "",
          "[Removed Lines]",
          "111:                 SETUP_DATA_FILES.append(PATH_LIB64)",
          "114:                 SETUP_DATA_FILES.append(PATH_LIB32)",
          "",
          "[Added Lines]",
          "117:                 shutil.copy(PATH_LIB64, \"capstone\")",
          "120:                 shutil.copy(PATH_LIB32, \"capstone\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:                         SETUP_DATA_FILES.append(\"src/libcapstone.so\")",
          "154:                 os.chdir(\"..\")",
          "156:             pass",
          "159: def dummy_src():",
          "160:     return []",
          "163: setup(",
          "164:     provides=['capstone'],",
          "165:     packages=['capstone'],",
          "",
          "[Removed Lines]",
          "155:         except:",
          "",
          "[Added Lines]",
          "161:         except Exception:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:             sources=dummy_src()",
          "187:         ),",
          "188:     )],",
          "191: )",
          "",
          "[Removed Lines]",
          "190:     data_files=[(SITE_PACKAGES, SETUP_DATA_FILES)],",
          "",
          "[Added Lines]",
          "194:     zip_safe=False,",
          "195:     package_data={",
          "196:         \"capstone\": [\"*.dll\"],",
          "197:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c864409f3eb7885c6d027aceb6ffbb70783e322",
      "candidate_info": {
        "commit_hash": "0c864409f3eb7885c6d027aceb6ffbb70783e322",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0c864409f3eb7885c6d027aceb6ffbb70783e322",
        "files": [
          "cs.c"
        ],
        "message": "arm: only reset IT block for ARM",
        "before_after_code_files": [
          "cs.c||cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:  handle->errnum = CS_ERR_OK;",
          "472: #ifdef CAPSTONE_USE_SYS_DYN_MEM",
          "473:  if (count > 0 && count <= INSN_CACHE_SIZE)",
          "",
          "[Removed Lines]",
          "470:  handle->ITBlock.size = 0;",
          "",
          "[Added Lines]",
          "470:  if (handle->arch == CS_ARCH_ARM)",
          "471:   handle->ITBlock.size = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45688690c3b8ccd7880f9d1babd370b3db2923fe",
      "candidate_info": {
        "commit_hash": "45688690c3b8ccd7880f9d1babd370b3db2923fe",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/45688690c3b8ccd7880f9d1babd370b3db2923fe",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: align assembly code for x86",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  uint64_t address = 0;",
          "115:  cs_insn *insn;",
          "116:  cs_err err;",
          "118:  if (argc != 3 && argc != 4) {",
          "119:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  bool x86_arch = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:  }",
          "184:  if (!strcmp(mode, \"x16\")) {",
          "185:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"x32\")) {",
          "189:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"x64\")) {",
          "193:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"x16att\")) {",
          "197:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "198:   if (!err) {",
          "199:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:   x86_arch = true;",
          "191:   x86_arch = true;",
          "196:   x86_arch = true;",
          "201:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  }",
          "203:  if (!strcmp(mode,\"x32att\")) {",
          "204:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "205:   if (!err) {",
          "206:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:  }",
          "210:  if (!strcmp(mode,\"x64att\")) {",
          "211:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "212:   if (!err) {",
          "213:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "244:  if (count > 0) {",
          "253:    }",
          "255:   }",
          "256:   cs_free(insn, count);",
          "257:  } else {",
          "",
          "[Removed Lines]",
          "245:   size_t j;",
          "246:   int i;",
          "248:   printf(\"\\n\");",
          "249:   for (j = 0; j < count; j++) {",
          "250:    printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "251:    for (i = 0; i < insn[j].size; i++) {",
          "252:     printf(\"%02x\", insn[j].bytes[i]);",
          "254:    printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "",
          "[Added Lines]",
          "252:   size_t i;",
          "254:   for (i = 0; i < count; i++) {",
          "255:    int j;",
          "256:    printf(\"%\"PRIx64\"  \", insn[i].address);",
          "257:    for (j = 0; j < insn[i].size; j++) {",
          "258:     printf(\"%02x\", insn[i].bytes[j]);",
          "259:    }",
          "262:    if (x86_arch) {",
          "263:     for (; j < 16; j++) {",
          "264:      printf(\"  \");",
          "265:     }",
          "267:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "",
          "---------------"
        ]
      }
    }
  ]
}