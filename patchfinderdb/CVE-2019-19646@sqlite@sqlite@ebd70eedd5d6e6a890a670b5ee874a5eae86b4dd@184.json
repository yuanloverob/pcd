{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
      "candidate_info": {
        "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3609:         if( aff>SQLITE_AFF_BLOB ){",
          "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3611:           assert( SQLITE_AFF_BLOB=='A' );",
          "",
          "[Removed Lines]",
          "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "",
          "[Added Lines]",
          "3608:         int aff;",
          "3609:         if( pExpr->y.pTab ){",
          "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3611:         }else{",
          "3612:           aff = pExpr->affExpr;",
          "3613:         }",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1141:   if( pExpr->op==TK_COLUMN ){",
          "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
          "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1144:       pExpr->iTable = pX->iIdxCur;",
          "1145:       pExpr->iColumn = pX->iIdxCol;",
          "1146:       pExpr->y.pTab = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1144:       assert( pExpr->y.pTab!=0 );",
          "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   UPDATE t0 SET c0 = NULL;",
          "244: } {1 {generated column loop on \"c2\"}}",
          "247: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   DROP TABLE IF EXISTS t1;",
          "250:   DROP TABLE IF EXISTS t2;",
          "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "252:   INSERT INTO t1 VALUES(17);",
          "253:   CREATE TABLE t2(cc);",
          "254:   INSERT INTO t2 VALUES(41);",
          "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
          "256: } {41 17 17}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96fb16eecdf03c1042a19bb6aaf46eededb6c75f",
      "candidate_info": {
        "commit_hash": "96fb16eecdf03c1042a19bb6aaf46eededb6c75f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/96fb16eecdf03c1042a19bb6aaf46eededb6c75f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Use 0x40 (ASCII '@') instead of 0x00 to mean \"no affinity\" so that columns with no affinity can appear in a zero-terminated string.  Use the new SQLITE_AFF_NONE macro for this new magic number.\n\nFossilOrigin-Name: e8234f6939ccff4c10f741cf66d1c537cfebcbd0d1d79a618a64c755a7f087b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e15a0977ddfad3d0f4c7654c5665ff10830c25b20ecf6ef500b1ba23fb89e31f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel, 0);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2447:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: char sqlite3CompareAffinity(Expr *pExpr, char aff2){",
          "232:   char aff1 = sqlite3ExprAffinity(pExpr);",
          "",
          "[Removed Lines]",
          "233:   if( aff1 && aff2 ){",
          "",
          "[Added Lines]",
          "233:   if( aff1>SQLITE_AFF_NONE && aff2>SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     }else{",
          "240:       return SQLITE_AFF_BLOB;",
          "241:     }",
          "246:     return SQLITE_AFF_BLOB;",
          "247:   }else{",
          "251:   }",
          "252: }",
          "",
          "[Removed Lines]",
          "242:   }else if( !aff1 && !aff2 ){",
          "249:     assert( aff1==0 || aff2==0 );",
          "250:     return (aff1 + aff2);",
          "",
          "[Added Lines]",
          "242:   }else if( aff1<=SQLITE_AFF_NONE && aff2<=SQLITE_AFF_NONE ){",
          "249:     assert( aff1<=SQLITE_AFF_NONE || aff2<=SQLITE_AFF_NONE );",
          "250:     return (aff1<=SQLITE_AFF_NONE ? aff2 : aff1) | SQLITE_AFF_NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2800:     struct ExprList_item *pItem;",
          "2801:     int r1, r2, r3;",
          "2802:     affinity = sqlite3ExprAffinity(pLeft);",
          "2804:       affinity = SQLITE_AFF_BLOB;",
          "2805:     }",
          "2806:     if( pKeyInfo ){",
          "",
          "[Removed Lines]",
          "2803:     if( !affinity ){",
          "",
          "[Added Lines]",
          "2803:     if( affinity<=SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3491:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3492:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3494:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3495:           assert( SQLITE_AFF_BLOB=='A' );",
          "3496:           assert( SQLITE_AFF_TEXT=='B' );",
          "",
          "[Removed Lines]",
          "3493:         if( aff!=SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "3493:         if( aff>SQLITE_AFF_BLOB ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3793:         assert( nFarg==1 );",
          "3794:         aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3795:         sqlite3VdbeLoadString(v, target,",
          "3797:         return target;",
          "3798:       }",
          "3799: #endif",
          "",
          "[Removed Lines]",
          "3796:                               aff ? azAff[aff-SQLITE_AFF_BLOB] : \"none\");",
          "",
          "[Added Lines]",
          "3796:                 (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "100:       }",
          "102:       pIdx->zColAff[n] = aff;",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "",
          "[Removed Lines]",
          "101:       if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     }",
          "141:     for(i=0; i<pTab->nCol; i++){",
          "142:       zColAff[i] = pTab->aCol[i].affinity;",
          "143:     }",
          "144:     do{",
          "145:       zColAff[i--] = 0;",
          "147:     pTab->zColAff = zColAff;",
          "148:   }",
          "149:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "146:     }while( i>=0 && zColAff[i]==SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "142:       assert( pTab->aCol[i].affinity!=0 );",
          "147:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2069:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2070:       }",
          "2071:     }",
          "2073:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2074:     if( pColl && pCol->zColl==0 ){",
          "2075:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2072:     if( pCol->affinity==0 ) pCol->affinity = aff;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity<=SQLITE_AFF_NONE ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5196:       Select *pSel = pFrom->pSelect;",
          "5197:       if( pSel ){",
          "5198:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5200:       }",
          "5201:     }",
          "5202:   }",
          "",
          "[Removed Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel, 0);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel,",
          "5200:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1883: #define sqlite3IsNumericAffinity(X)  ((X)>=SQLITE_AFF_NUMERIC)",
          "",
          "[Removed Lines]",
          "1877: #define SQLITE_AFF_BLOB     'A'",
          "1878: #define SQLITE_AFF_TEXT     'B'",
          "1879: #define SQLITE_AFF_NUMERIC  'C'",
          "1880: #define SQLITE_AFF_INTEGER  'D'",
          "1881: #define SQLITE_AFF_REAL     'E'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:   if( !pIdx->zColAff ){",
          "1306:     if( sqlite3IndexAffinityStr(db, pIdx)==0 ) return SQLITE_AFF_BLOB;",
          "1307:   }",
          "1308:   return pIdx->zColAff[iCol];",
          "1309: }",
          "1310: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:   assert( pIdx->zColAff[iCol]!=0 );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   }",
          "334:   assert( v!=0 );",
          "340:     n--;",
          "341:     base++;",
          "342:     zAff++;",
          "343:   }",
          "345:     n--;",
          "346:   }",
          "",
          "[Removed Lines]",
          "339:   while( n>0 && zAff[0]==SQLITE_AFF_BLOB ){",
          "344:   while( n>1 && zAff[n-1]==SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "339:   assert( SQLITE_AFF_NONE<SQLITE_AFF_BLOB );",
          "340:   while( n>0 && zAff[0]<=SQLITE_AFF_BLOB ){",
          "345:   while( n>1 && zAff[n-1]<=SQLITE_AFF_BLOB ){",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, 0);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43a6e4d3df1a30ddf953cdb438f84f1fab9499bd",
      "candidate_info": {
        "commit_hash": "43a6e4d3df1a30ddf953cdb438f84f1fab9499bd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/43a6e4d3df1a30ddf953cdb438f84f1fab9499bd",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another segfault that could occur in fts5 with a corrupted database.\n\nFossilOrigin-Name: 09e337386beb2008eba969f79601d1b8ed953951ce6e43782586e168140d78d2",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:           fts5BufferAppendVarint(&p->rc, &buf, 4);",
          "4171:           if( pSeg->iLeafPgno==pSeg->iTermLeafPgno",
          "4174:             int nDiff = pData->szLeaf - pSeg->iEndofDoclist;",
          "4175:             fts5BufferAppendVarint(&p->rc, &buf, buf.n - 1 - nDiff - 4);",
          "4176:             fts5BufferAppendBlob(&p->rc, &buf,",
          "4177:                 pData->nn - pSeg->iPgidxOff, &pData->p[pSeg->iPgidxOff]",
          "4179:           }",
          "4181:           pSeg->pSeg->pgnoFirst = pSeg->iTermLeafPgno;",
          "",
          "[Removed Lines]",
          "4172:               && pSeg->iEndofDoclist<pData->szLeaf",
          "4173:             ){",
          "4178:                 );",
          "",
          "[Added Lines]",
          "4172:            && pSeg->iEndofDoclist<pData->szLeaf",
          "4173:            && pSeg->iPgidxOff<=pData->nn",
          "4174:           ){",
          "4179:             );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7781:   ROLLBACK TO one;",
          "7782: }",
          "7785: sqlite3_fts5_may_be_corrupt 0",
          "7786: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7784: #-------------------------------------------------------------------------",
          "7785: reset_db",
          "7786: do_test 56.0 {",
          "7787:   sqlite3 db {}",
          "7788:   db deserialize [decode_hexdb {",
          "7789: .open --hexdb",
          "7790: | size 24576 pagesize 4096 filename crash-2acc487d09f033.db",
          "7791: | page 1 offset 0",
          "7792: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "7793: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "7794: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "7795: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "7796: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "7797: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "7798: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "7799: |   3600: 06 06 17 11 11 01 31 74 61 62 6c 65 62 62 62 62   ......1tablebbbb",
          "7800: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "7801: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "7802: |   3648: 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_configt1_conf",
          "7803: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "7804: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "7805: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "7806: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "7807: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 63 73   !...tablet1_docs",
          "7808: |   3744: 69 7a 65 74 31 4f 64 6f 63 73 69 7a 65 04 43 52   izet1Odocsize.CR",
          "7809: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 64   EATE TABLE 't1_d",
          "7810: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "7811: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "7812: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "7813: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "7814: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "7815: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "7816: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "7817: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "7818: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "7819: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "7820: |   3936: 65 74 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   et1_datat1_data.",
          "7821: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "7822: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "7823: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "7824: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 11 11   lock BLOB)T.....",
          "7825: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "7826: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "7827: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "7828: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 32 2c 32 2c 33   ,b,prefix=.2,2,3",
          "7829: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "7830: | page 2 offset 4096",
          "7831: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "7832: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "7833: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "7834: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "7835: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cc 0b b0   ...s.T.2........",
          "7836: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "7837: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "7838: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "7839: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "7840: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "7841: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "7842: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "7843: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "7844: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "7845: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "7846: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 03 06 01 01 04   .<.....3the.....",
          "7847: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "7848: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "7849: |   2528: 01 05 01 03 74 61 62 03 02 03 04 0a 19 8c 80 80   ....tab.........",
          "7850: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 32 77 68 03 02   .....8.....2wh..",
          "7851: |   2560: 04 00 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "7852: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "7853: |   2592: 03 02 01 68 03 06 01 01 04 04 07 1b 8c 80 80 80   ...h............",
          "7854: |   2608: 80 09 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "7855: |   2624: 01 05 01 02 6f 66 03 3b 01 01 06 04 09 19 8c 80   ....of.;........",
          "7856: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "7857: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "7858: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "7859: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "7860: |   2704: 80 80 07 03 00 3a ff 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "7861: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "7862: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "7863: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "7864: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "7865: |   2784: 06 00 f1 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "7866: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "7867: |   2816: 06 30 74 61 62 6c 65 03 02 03 07 1c 8c 80 80 80   .0table.........",
          "7868: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "7869: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "7870: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "7871: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "7872: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "7873: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "7874: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "7875: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "7876: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "7877: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "7878: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "7879: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "7880: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "7881: |   3040: 02 06 01 01 05 01 03 74 68 65 02 08 05 0a 1b 88   .......the......",
          "7882: |   3056: 80 80 80 80 0e 03 00 3c 00 00 00 16 01 01 02 04   .......<........",
          "7883: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "7884: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "7885: |   3104: 74 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   th........3and..",
          "7886: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "7887: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "7888: |   3152: 01 05 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .............6..",
          "7889: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "7890: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "7891: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "7892: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "7893: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "7894: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "7895: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "7896: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "7897: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "7898: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "7899: |   3328: 16 06 30 74 68 65 72 65 02 02 02 00 02 31 31 02   ..0there.....11.",
          "7900: |   3344: 06 01 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "7901: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "7902: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "7903: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "7904: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 00   .............<..",
          "7905: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "7906: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "7907: |   3456: 00 00 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "7908: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "7909: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "7910: |   3504: 02 02 05 04 08 08 84 80 80 80 81 12 03 00 16 00   ................",
          "7911: |   3520: 00 00 05 04 1b 84 61 80 80 80 11 03 00 3c 00 00   ......a......<..",
          "7912: |   3536: 00 16 05 34 74 61 62 6c 01 06 01 01 05 02 03 65   ...4tabl.......e",
          "7913: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "7914: |   3568: 00 00 00 16 05 34 65 61 63 68 01 02 03 01 04 70   .....4each.....p",
          "7915: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "7916: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "7917: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "7918: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "7919: |   3648: 03 74 61 62 01 06 01 01 05 14 08 1a 84 80 80 80   .tab............",
          "7920: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 02   ....:.....3for..",
          "7921: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "7922: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "7923: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "7924: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 71   .......6.....2tq",
          "7925: |   3744: 01 06 01 01 05 02 01 65 01 02 04 04 09 19 84 80   .......e........",
          "7926: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "7927: |   3776: 06 01 01 02 01 02 70 72 01 02 05 0b 89 18 84 80   ......pr........",
          "7928: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "7929: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "7930: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "7931: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "7932: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "7933: |   3872: 06 01 01 02 01 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "7934: |   3888: 80 80 06 03 00 36 00 00 00 13 02 31 65 01 02 03   .....6.....1e...",
          "7935: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "7936: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "7937: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "7938: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "7939: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "7940: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "7941: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "7942: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "7943: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "7944: |   4048: 00 00 00 15 05 30 65 61 63 f4 01 02 03 01 03 66   .....0eac......f",
          "7945: |   4064: 6f 72 01 02 02 04 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "7946: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "7947: | page 3 offset 8192",
          "7948: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "7949: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "7950: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "7951: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "7952: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "7953: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 96 0e 8e 0e 85   ................",
          "7954: |     96: 0e 7c 0e 73 0e 6a 0e 60 0e 58 0e 4f 00 00 00 00   .|.s.j.`.X.O....",
          "7955: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "7956: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "7957: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "7958: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "7959: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "7960: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 08   ....2.......1t..",
          "7961: |   3744: 04 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "7962: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "7963: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "7964: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 03 02 08 04 01   ...0n...........",
          "7965: |   3808: 10 01 02 34 72 22 07 04 01 0e 01 02 34 20 08 04   ...4r.......4 ..",
          "7966: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "7967: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 b3 02   .......2t.......",
          "7968: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "7969: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "7970: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "7971: |   3904: 0e 0b 04 01 16 01 02 30 74 68 65 72 0c 08 04 01   .......0ther....",
          "7972: |   3920: 10 01 02 30 74 0a 08 04 01 10 01 02 30 6e 08 08   ...0t.......0n..",
          "7973: |   3936: 04 01 10 01 02 30 62 06 08 04 01 10 01 02 30 61   .....0b.......0a",
          "7974: |   3952: 05 06 04 01 0c 01 02 02 07 04 09 10 01 34 74 22   .............4t.",
          "7975: |   3968: 06 04 09 0e 01 34 20 08 04 09 12 01 33 74 65 1e   .....4 .....3te.",
          "7976: |   3984: 07 04 09 10 01 33 70 1c 07 04 09 10 01 33 66 1a   .....3p......3f.",
          "7977: |   4000: 08 04 09 12 01 32 74 68 18 07 04 09 10 01 32 2d   .....2th......2-",
          "7978: |   4016: 16 07 04 09 10 01 32 69 14 07 04 09 10 01 32 66   ......2i......2f",
          "7979: |   4032: 12 07 04 09 10 01 31 74 10 07 04 09 10 01 31 69   ......1t......1i",
          "7980: |   4048: 0e 06 04 09 0e 01 31 0c 08 04 09 12 01 30 74 65   ......1......0te",
          "7981: |   4064: 0a 07 04 09 10 01 30 74 08 07 04 09 10 01 30 70   ......0t......0p",
          "7982: |   4080: 06 08 04 09 12 01 30 66 74 04 05 04 09 0c 01 02   ......0ft.......",
          "7983: | page 4 offset 12288",
          "7984: |      0: 0d 00 00 00 03 0f eb 00 0f f9 0f f2 0f eb 00 00   ................",
          "7985: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 03 03 00 10   ................",
          "7986: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 03   ................",
          "7987: | page 5 offset 16384",
          "7988: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "7989: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "7990: |   4080: 67 73 7a 18 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "7991: | page 6 offset 20480",
          "7992: |      0: 0d 00 00 00 03 0f f2 00 0f fc 0f f7 0f f2 00 00   ................",
          "7993: |   4080: 00 00 03 03 02 01 03 03 02 02 01 02 02 01 02 09   ................",
          "7994: | end crash-2acc487d09f033.db",
          "7995: }]} {}",
          "7997: do_catchsql_test 56.1 {",
          "7998:   INSERT INTO t1(b) VALUES(randomblob(250));",
          "7999:   INSERT INTO t1(b) VALUES(randomblob(250));",
          "8000: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c19e97bc927074915a3ac8307bf89d30580cf90edd75f4001bcf589b2dfefe58",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
      "candidate_info": {
        "commit_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9105fd51893062a8503c8850e5d88ad49de28495",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/nulls1.test"
        ],
        "message": "Prevent NULLS FIRST/LAST from being used in CREATE INDEX and other statements.\n\nFossilOrigin-Name: bb9767a287097a615aeb4abdba689b10e1a1c36c016c8e55905b508075e62c86",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f892066425671a8a0ac923e3ad4744677f6434a66f97b91afa8141f11f179975",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3153:   return p;",
          "3154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161: int sqlite3HasExplicitNulls(Parse *pParse, ExprList *pList){",
          "3162:   if( pList ){",
          "3163:     int i;",
          "3164:     for(i=0; i<pList->nExpr; i++){",
          "3165:       if( pList->a[i].bNulls ){",
          "3166:         u8 sf = pList->a[i].sortFlags;",
          "3167:         sqlite3ErrorMsg(pParse, \"unsupported use of NULLS %s\",",
          "3168:             (sf==0 || sf==3) ? \"FIRST\" : \"LAST\"",
          "3169:         );",
          "3170:         return 1;",
          "3171:       }",
          "3172:     }",
          "3173:   }",
          "3174:   return 0;",
          "3175: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3204:   if( SQLITE_OK!=sqlite3ReadSchema(pParse) ){",
          "3205:     goto exit_create_index;",
          "3206:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3228:   if( sqlite3HasExplicitNulls(pParse, pList) ){",
          "3229:     goto exit_create_index;",
          "3230:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1655: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1656:   if( p==0 ) return;",
          "1657:   assert( p->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1656:   struct ExprList_item *pItem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1666:        || eNulls==SQLITE_SO_DESC",
          "1667:   );",
          "1673:   }",
          "1674: }",
          "",
          "[Removed Lines]",
          "1669:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1670:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1671:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1672:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "[Added Lines]",
          "1670:   pItem = &p->a[p->nExpr-1];",
          "1671:   assert( pItem->bNulls==0 );",
          "1672:   if( iSortOrder==SQLITE_SO_UNDEFINED ){",
          "1673:     iSortOrder = SQLITE_SO_ASC;",
          "1674:   }",
          "1675:   pItem->sortFlags = (u8)iSortOrder;",
          "1677:   if( eNulls!=SQLITE_SO_UNDEFINED ){",
          "1678:     pItem->bNulls = 1;",
          "1679:     if( iSortOrder!=eNulls ){",
          "1680:       pItem->sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "1681:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:               pTab->zName);",
          "834:       goto insert_cleanup;",
          "835:     }",
          "836:     pTabList->a[0].iCursor = iDataCur;",
          "837:     pUpsert->pUpsertSrc = pTabList;",
          "838:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "837:       goto insert_cleanup;",
          "838:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4366: KeyInfo *sqlite3KeyInfoRef(KeyInfo*);",
          "4367: KeyInfo *sqlite3KeyInfoOfIndex(Parse*, Index*);",
          "4368: KeyInfo *sqlite3KeyInfoFromExprList(Parse*, ExprList*, int, int);",
          "4370: #ifdef SQLITE_DEBUG",
          "4371: int sqlite3KeyInfoIsWriteable(KeyInfo*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4370: int sqlite3HasExplicitNulls(Parse*, ExprList*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     pTriggerStep->pIdList = pColumn;",
          "464:     pTriggerStep->pUpsert = pUpsert;",
          "465:     pTriggerStep->orconf = orconf;",
          "466:   }else{",
          "467:     testcase( pColumn );",
          "468:     sqlite3IdListDelete(db, pColumn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if( pUpsert ){",
          "467:       sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget);",
          "468:     }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   1 1 1",
          "84: }",
          "87: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #-------------------------------------------------------------------------",
          "87: reset_db",
          "88: do_execsql_test 3.0 {",
          "89:   CREATE TABLE t1(a, b, c, d, UNIQUE (b));",
          "90: }",
          "91: foreach {tn sql err}  {",
          "92:   1 { CREATE INDEX i1 ON t1(a ASC NULLS LAST) }           LAST",
          "93:   2 { CREATE INDEX i1 ON t1(a ASC NULLS FIRST) }          FIRST",
          "94:   3 { CREATE INDEX i1 ON t1(a, b ASC NULLS LAST) }        LAST",
          "95:   4 { CREATE INDEX i1 ON t1(a, b ASC NULLS FIRST) }       FIRST",
          "96:   5 { CREATE INDEX i1 ON t1(a DESC NULLS LAST) }          LAST",
          "97:   6 { CREATE INDEX i1 ON t1(a DESC NULLS FIRST) }         FIRST",
          "98:   7 { CREATE INDEX i1 ON t1(a, b DESC NULLS LAST) }       LAST",
          "99:   8 { CREATE INDEX i1 ON t1(a, b DESC NULLS FIRST) }      FIRST",
          "100:   9  { CREATE TABLE t2(a, b, PRIMARY KEY(a DESC, b NULLS FIRST)) } FIRST",
          "101:   10 { CREATE TABLE t2(a, b, UNIQUE(a DESC NULLS FIRST, b)) }      FIRST",
          "102:   11 { INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "103:           ON CONFLICT (b DESC NULLS LAST) DO UPDATE SET a = a+1 } LAST",
          "104:   12 {",
          "105:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "106:       INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "107:       ON CONFLICT (b DESC NULLS FIRST) DO UPDATE SET a = a+1;",
          "108:     END",
          "109:   } FIRST",
          "110: } {",
          "111:   do_catchsql_test 3.1.$tn $sql \"1 {unsupported use of NULLS $err}\"",
          "112: }",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE first(nulls, last);",
          "116:   INSERT INTO first(last, nulls) VALUES(100,200), (300,400), (200,300);",
          "117:   SELECT * FROM first ORDER BY nulls;",
          "118: } {",
          "119:   200 100",
          "120:   300 200",
          "121:   400 300",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
      "candidate_info": {
        "commit_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/898c527eafd8bf263a3c3626ff421804558132f9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c"
        ],
        "message": "When flipping (\"commuting\") a comparison operator, set the new EP_Commuted bit rather than adding extra EP_Collate bits, to single later processing that the order of precedence for COLLATE operators is inverted. Fix for ticket [b47e3627ecaadbde]\n\nFossilOrigin-Name: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd2317d04c1c4bcf5fe63aa02a6051bdfae8f5566a098e3f45bf9ec1dd0c3ea6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   return pColl;",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "351:   if( ExprHasProperty(p, EP_Commuted) ){",
          "352:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "353:   }else{",
          "354:     return sqlite3BinaryCompareCollSeq(pParse, p->pLeft, p->pRight);",
          "355:   }",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: ){",
          "354:   int p5;",
          "355:   int addr;",
          "356:   CollSeq *p4;",
          "359:   p5 = binaryCompareP5(pLeft, pRight, jumpIfNull);",
          "360:   addr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,",
          "361:                            (void*)p4, P4_COLLSEQ);",
          "",
          "[Removed Lines]",
          "358:   p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "",
          "[Added Lines]",
          "375:   if( isCommuted ){",
          "376:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
          "377:   }else{",
          "378:     p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   int regRight = 0;",
          "567:   u8 opx = op;",
          "568:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "570:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "571:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     assert( i>=0 && i<nLeft );",
          "596:     r1 = exprVectorRegister(pParse, pLeft, i, regLeft, &pL, &regFree1);",
          "597:     r2 = exprVectorRegister(pParse, pRight, i, regRight, &pR, &regFree2);",
          "599:     testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "600:     testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "601:     testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "598:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5);",
          "",
          "[Added Lines]",
          "620:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5, isCommuted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3665:         r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);",
          "3666:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "3667:         codeCompare(pParse, pLeft, pExpr->pRight, op,",
          "3669:         assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "3670:         assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "3671:         assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "3668:             r1, r2, inReg, SQLITE_STOREP2 | p5);",
          "",
          "[Added Lines]",
          "3690:             r1, r2, inReg, SQLITE_STOREP2 | p5,",
          "3691:             ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4585:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4586:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4587:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4589:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4590:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4591:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4588:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4611:                   r1, r2, dest, jumpIfNull, ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4760:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4761:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4762:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4764:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4765:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4766:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4763:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4786:                   r1, r2, dest, jumpIfNull,ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4946:       return 2;",
          "4947:     }",
          "4948:   }",
          "4950:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "4951:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4952:     if( (combinedFlags & EP_FixedCol)==0",
          "",
          "[Removed Lines]",
          "4949:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "",
          "[Added Lines]",
          "4972:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "4973:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   if( pRight->op==TK_COLUMN",
          "4171:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4172:    && sqlite3ExprIsConstant(pLeft)",
          "4174:   ){",
          "4175:     constInsert(pConst, pRight, pLeft);",
          "4176:   }else",
          "4177:   if( pLeft->op==TK_COLUMN",
          "4178:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4179:    && sqlite3ExprIsConstant(pRight)",
          "4181:   ){",
          "4182:     constInsert(pConst, pLeft, pRight);",
          "4183:   }",
          "",
          "[Removed Lines]",
          "4173:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "4180:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "",
          "[Added Lines]",
          "4173:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4180:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4517: #endif",
          "4518: int sqlite3Reprepare(Vdbe*);",
          "4519: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4520: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "4521: int sqlite3TempInMemory(const sqlite3*);",
          "4522: const char *sqlite3JournalModename(int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4520: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 continue;",
          "280:               }",
          "281:               assert(pX->pLeft);",
          "284:               if( pColl==0 ) pColl = pParse->db->pDfltColl;",
          "285:               if( sqlite3StrICmp(pColl->zName, pScan->zCollName) ){",
          "286:                 continue;",
          "",
          "[Removed Lines]",
          "282:               pColl = sqlite3BinaryCompareCollSeq(pParse,",
          "283:                                                   pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "282:               pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:         Expr *pX = pTerm->pExpr;",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2802:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2803:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     Expr *pExpr;",
          "2806:     pExpr = pTerm->pExpr;",
          "2807:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2808:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "",
          "[Removed Lines]",
          "2805:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3265:     int iTerm = pIdxInfo->aConstraint[iCons].iTermOffset;",
          "3266:     Expr *pX = pHidden->pWC->a[iTerm].pExpr;",
          "3267:     if( pX->pLeft ){",
          "3269:     }",
          "3270:     zRet = (pC ? pC->zName : sqlite3StrBINARY);",
          "3271:   }",
          "",
          "[Removed Lines]",
          "3268:       pC = sqlite3BinaryCompareCollSeq(pHidden->pParse, pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "3266:       pC = sqlite3ExprCompareCollSeq(pHidden->pParse, pX);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "145:   }",
          "146:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "147:   if( pExpr->op>=TK_GT ){",
          "",
          "[Removed Lines]",
          "127:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "128:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "129:   u16 wtFlags = 0;",
          "130:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "131:   if( expRight==expLeft ){",
          "133:     if( expRight ){",
          "136:       pExpr->pRight->flags &= ~EP_Collate;",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "138:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "142:       pExpr->pLeft->flags |= EP_Collate;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "144:     }",
          "",
          "[Added Lines]",
          "114:   if( sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "115:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft) ){",
          "116:     pExpr->flags ^= EP_Commuted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "153:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "154:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "155:   return wtFlags;",
          "",
          "[Added Lines]",
          "127:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:   ){",
          "931:     return 0;",
          "932:   }",
          "934:   if( sqlite3IsBinary(pColl) ) return 1;",
          "935:   return sqlite3ExprCollSeqMatch(pParse, pExpr->pLeft, pExpr->pRight);",
          "936: }",
          "",
          "[Removed Lines]",
          "933:   pColl = sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight);",
          "",
          "[Added Lines]",
          "905:   pColl = sqlite3ExprCompareCollSeq(pParse, pExpr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}