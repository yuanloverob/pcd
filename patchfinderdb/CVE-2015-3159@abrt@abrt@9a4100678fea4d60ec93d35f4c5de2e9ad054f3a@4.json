{
  "cve_id": "CVE-2015-3159",
  "cve_desc": "The abrt-action-install-debuginfo-to-abrt-cache help program in Automatic Bug Reporting Tool (ABRT) does not properly handle the process environment before invoking abrt-action-install-debuginfo, which allows local users to gain privileges.",
  "repo": "abrt/abrt",
  "patch_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
  "patch_info": {
    "commit_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
    "files": [
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ],
    "message": "a-a-i-d-t-a-cache: sanitize umask\n\nWe cannot trust anything when running suided program.\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
    ]
  },
  "patch_diff": {
    "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
      "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:         if (u != 0)",
      "183:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
      "184:         putenv(path_env);",
      "185:     }",
      "187:     execvp(EXECUTABLE, (char **)args);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "187:         umask(0022);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3c2a6af3455b2882e28570e8a04f1c2d4500d5b",
      "candidate_info": {
        "commit_hash": "f3c2a6af3455b2882e28570e8a04f1c2d4500d5b",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/f3c2a6af3455b2882e28570e8a04f1c2d4500d5b",
        "files": [
          "src/dbus/abrt-dbus.c"
        ],
        "message": "dbus: report invalid element names\n\nReturn D-Bus error in case of invalid problem element name.\n\nRelated: #1214451\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c": [
          "File: src/dbus/abrt-dbus.c -> src/dbus/abrt-dbus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:         g_variant_get(parameters, \"(&s&s&s)\", &problem_id, &element, &value);",
          "603:         {",
          "604:             log_notice(\"'%s' is not a valid element name of '%s'\", element, problem_id);",
          "605:             char *error = xasprintf(_(\"'%s' is not a valid element name\"), element);",
          "",
          "[Removed Lines]",
          "602:         if (element == NULL || element[0] == '\\0' || strlen(element) > 64)",
          "",
          "[Added Lines]",
          "602:         if (!str_is_correct_filename(element))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:         g_variant_get(parameters, \"(&s&s)\", &problem_id, &element);",
          "661:         struct dump_dir *dd = open_directory_for_modification_of_element(",
          "662:                                     invocation, caller_uid, problem_id, element);",
          "663:         if (!dd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:         if (!str_is_correct_filename(element))",
          "662:         {",
          "663:             log_notice(\"'%s' is not a valid element name of '%s'\", element, problem_id);",
          "664:             char *error = xasprintf(_(\"'%s' is not a valid element name\"), element);",
          "665:             g_dbus_method_invocation_return_dbus_error(invocation,",
          "666:                                               \"org.freedesktop.problems.InvalidElement\",",
          "667:                                               error);",
          "669:             free(error);",
          "670:             return;",
          "671:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7814554e0827ece778ca88fd90832bd4d05520b1",
      "candidate_info": {
        "commit_hash": "7814554e0827ece778ca88fd90832bd4d05520b1",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/7814554e0827ece778ca88fd90832bd4d05520b1",
        "files": [
          "src/dbus/abrt-dbus.c",
          "src/lib/problem_api.c"
        ],
        "message": "dbus: avoid race-conditions in tests for dum dir availability\n\nFlorian Weimer <fweimer@redhat.com>\n\n    dump_dir_accessible_by_uid() is fundamentally insecure because it\n    opens up a classic time-of-check-time-of-use race between this\n    function and and dd_opendir().\n\nRelated: #1214745\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c",
          "src/lib/problem_api.c||src/lib/problem_api.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/dbus/abrt-dbus.c||src/dbus/abrt-dbus.c": [
          "File: src/dbus/abrt-dbus.c -> src/dbus/abrt-dbus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:         }",
          "246:     }",
          "249:     {",
          "250:         if (errno == ENOTDIR)",
          "251:         {",
          "",
          "[Removed Lines]",
          "248:     if (!dump_dir_accessible_by_uid(problem_id, caller_uid))",
          "",
          "[Added Lines]",
          "248:     int dir_fd = dd_openfd(problem_id);",
          "249:     if (dir_fd < 0)",
          "250:     {",
          "251:         perror_msg(\"can't open problem directory '%s'\", problem_id);",
          "252:         return_InvalidProblemDir_error(invocation, problem_id);",
          "253:         return NULL;",
          "254:     }",
          "256:     if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:                                 _(\"Not Authorized\"));",
          "261:         }",
          "263:         return NULL;",
          "264:     }",
          "267:     if (!dd)",
          "269:         log_notice(\"Can't access the problem '%s' for modification\", problem_id);",
          "",
          "[Removed Lines]",
          "266:     struct dump_dir *dd = dd_opendir(problem_id, /* flags : */ 0);",
          "",
          "[Added Lines]",
          "271:         close(dir_fd);",
          "275:     struct dump_dir *dd = dd_fdopendir(dir_fd, problem_id, /* flags : */ 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:             return;",
          "430:         }",
          "433:         if (ddstat < 0)",
          "434:         {",
          "435:             if (errno == ENOTDIR)",
          "",
          "[Removed Lines]",
          "432:         int ddstat = dump_dir_stat_for_uid(problem_dir, caller_uid);",
          "",
          "[Added Lines]",
          "441:         int dir_fd = dd_openfd(problem_dir);",
          "442:         if (dir_fd < 0)",
          "443:         {",
          "444:             perror_msg(\"can't open problem directory '%s'\", problem_dir);",
          "445:             return_InvalidProblemDir_error(invocation, problem_dir);",
          "446:             return;",
          "447:         }",
          "449:         int ddstat = fdump_dir_stat_for_uid(dir_fd, caller_uid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444:             return_InvalidProblemDir_error(invocation, problem_dir);",
          "446:             return;",
          "447:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:             close(dir_fd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:         {   //caller seems to be in group with access to this dir, so no action needed",
          "451:             log_notice(\"caller has access to the requested directory %s\", problem_dir);",
          "452:             g_dbus_method_invocation_return_value(invocation, NULL);",
          "453:             return;",
          "454:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:             close(dir_fd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:             g_dbus_method_invocation_return_dbus_error(invocation,",
          "461:                                               \"org.freedesktop.problems.AuthFailure\",",
          "462:                                               _(\"Not Authorized\"));",
          "463:             return;",
          "464:         }",
          "467:         if (!dd)",
          "468:         {",
          "469:             return_InvalidProblemDir_error(invocation, problem_dir);",
          "",
          "[Removed Lines]",
          "466:         struct dump_dir *dd = dd_opendir(problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);",
          "",
          "[Added Lines]",
          "482:             close(dir_fd);",
          "486:         struct dump_dir *dd = dd_fdopendir(dir_fd, problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "497:             return;",
          "498:         }",
          "501:         {",
          "502:             if (errno == ENOTDIR)",
          "503:             {",
          "504:                 log_notice(\"Requested directory does not exist '%s'\", problem_dir);",
          "505:                 return_InvalidProblemDir_error(invocation, problem_dir);",
          "506:                 return;",
          "507:             }",
          "",
          "[Removed Lines]",
          "500:         if (!dump_dir_accessible_by_uid(problem_dir, caller_uid))",
          "",
          "[Added Lines]",
          "520:         int dir_fd = dd_openfd(problem_dir);",
          "521:         if (dir_fd < 0)",
          "522:         {",
          "523:             perror_msg(\"can't open problem directory '%s'\", problem_dir);",
          "524:             return_InvalidProblemDir_error(invocation, problem_dir);",
          "525:             return;",
          "526:         }",
          "528:         if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))",
          "534:                 close(dir_fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "512:                 g_dbus_method_invocation_return_dbus_error(invocation,",
          "513:                                                   \"org.freedesktop.problems.AuthFailure\",",
          "514:                                                   _(\"Not Authorized\"));",
          "515:                 return;",
          "516:             }",
          "517:         }",
          "520:         if (!dd)",
          "521:         {",
          "522:             return_InvalidProblemDir_error(invocation, problem_dir);",
          "",
          "[Removed Lines]",
          "519:         struct dump_dir *dd = dd_opendir(problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);",
          "",
          "[Added Lines]",
          "544:                 close(dir_fd);",
          "549:         struct dump_dir *dd = dd_fdopendir(dir_fd, problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "677:         for (GList *l = problem_dirs; l; l = l->next)",
          "678:         {",
          "679:             const char *dir_name = (const char*)l->data;",
          "681:             {",
          "682:                 if (errno == ENOTDIR)",
          "683:                 {",
          "684:                     log_notice(\"Requested directory does not exist '%s'\", dir_name);",
          "685:                     continue;",
          "686:                 }",
          "688:                 if (polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") != PolkitYes)",
          "689:                 { // if user didn't provide correct credentials, just move to the next dir",
          "690:                     continue;",
          "691:                 }",
          "692:             }",
          "694:         }",
          "696:         g_dbus_method_invocation_return_value(invocation, NULL);",
          "",
          "[Removed Lines]",
          "680:             if (!dump_dir_accessible_by_uid(dir_name, caller_uid))",
          "693:             delete_dump_dir(dir_name);",
          "",
          "[Added Lines]",
          "711:             int dir_fd = dd_openfd(dir_name);",
          "712:             if (dir_fd < 0)",
          "713:             {",
          "714:                 perror_msg(\"can't open problem directory '%s'\", dir_name);",
          "715:                 return_InvalidProblemDir_error(invocation, dir_name);",
          "716:                 return;",
          "717:             }",
          "719:             if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))",
          "724:                     close(dir_fd);",
          "730:                     close(dir_fd);",
          "735:             struct dump_dir *dd = dd_fdopendir(dir_fd, dir_name, /*flags:*/ 0);",
          "736:             if (dd)",
          "737:             {",
          "738:                 if (dd_delete(dd) != 0)",
          "739:                 {",
          "740:                     error_msg(\"Failed to delete problem directory '%s'\", dir_name);",
          "741:                     dd_close(dd);",
          "742:                 }",
          "743:             }",
          "",
          "---------------"
        ],
        "src/lib/problem_api.c||src/lib/problem_api.c": [
          "File: src/lib/problem_api.c -> src/lib/problem_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         char *full_name = concat_path_file(path, dent->d_name);",
          "50:         {",
          "",
          "[Removed Lines]",
          "49:         if (caller_uid == -1 || dump_dir_accessible_by_uid(full_name, caller_uid))",
          "",
          "[Added Lines]",
          "50:         int dir_fd = dd_openfd(full_name);",
          "51:         if (dir_fd < 0)",
          "52:         {",
          "53:             VERB2 perror_msg(\"can't open problem directory '%s'\", full_name);",
          "54:             continue;",
          "55:         }",
          "57:         if (caller_uid == -1 || fdump_dir_accessible_by_uid(dir_fd, caller_uid))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             int sv_logmode = logmode;",
          "56:             logmode = 0;",
          "58:             logmode = sv_logmode;",
          "59:             if (dd)",
          "60:             {",
          "",
          "[Removed Lines]",
          "57:             struct dump_dir *dd = dd_opendir(full_name, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES | DD_DONT_WAIT_FOR_LOCK);",
          "",
          "[Added Lines]",
          "65:             struct dump_dir *dd = dd_fdopendir(dir_fd, full_name, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES | DD_DONT_WAIT_FOR_LOCK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:                 dd_close(dd);",
          "63:             }",
          "64:         }",
          "65:         free(full_name);",
          "66:         if (brk)",
          "67:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         else",
          "74:             close(dir_fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
      "candidate_info": {
        "commit_hash": "9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/9943a77bca37a0829ccd3784d1dfab37f8c24e7b",
        "files": [
          "po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: sanitize arguments\n\nParse command lines arguments and use them to create new arguments for\nexec(). No black listing algorithm would be safe enough. The only\nallowed arguments are the following:\n* v - verbose\n* y - noninteractive\n* repo - enable only repositories whose names match the pattern\n* exact - download packages for the specified files\n* ids - passed as magic proc fd path to the wrapped executable\n\nThe wrapper opens the list of needed build ids passes /proc/self/fd/[fd]\nto the wrapped process. This allows us to open the file with caller's\nUID/GID in order to avoid information disclosures.\n\nForbidden arguments:\n* cache - allows regular users to create a user writable dump directory\n* tmpdir - the same as above\n* size_mb - no need to allow users to fiddle with the cache size\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "po/POTFILES.in||po/POTFILES.in",
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ],
          "candidate": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ]
        }
      },
      "candidate_diff": {
        "po/POTFILES.in||po/POTFILES.in": [
          "File: po/POTFILES.in -> po/POTFILES.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: src/plugins/abrt-action-generate-backtrace.c",
          "32: src/plugins/abrt-action-generate-core-backtrace.c",
          "33: src/plugins/abrt-action-install-debuginfo.in",
          "34: src/plugins/abrt-action-perform-ccpp-analysis.in",
          "35: src/plugins/abrt-action-trim-files.c",
          "36: src/plugins/abrt-action-ureport",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "",
          "---------------"
        ],
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: int main(int argc, char **argv)",
          "31: {",
          "40:     {",
          "54:     }",
          "",
          "[Removed Lines]",
          "37:     char **pp = argv;",
          "38:     char *arg;",
          "39:     while ((arg = *++pp) != NULL)",
          "42:         if (strcmp(arg, \"--ids=-\") == 0)",
          "43:             continue;",
          "45:         if (strncmp(arg, \"--exact\", 7) == 0)",
          "46:             continue;",
          "48:         if (strncmp(arg, \"--cache\", 7) == 0)",
          "49:             error_msg_and_die(\"bad option %s\", arg);",
          "50:         if (strncmp(arg, \"--tmpdir\", 8) == 0)",
          "51:             error_msg_and_die(\"bad option %s\", arg);",
          "52:         if (strncmp(arg, \"--ids\", 5) == 0)",
          "53:             error_msg_and_die(\"bad option %s\", arg);",
          "",
          "[Added Lines]",
          "33:     setlocale(LC_ALL, \"\");",
          "34: #if ENABLE_NLS",
          "35:     bindtextdomain(PACKAGE, LOCALEDIR);",
          "36:     textdomain(PACKAGE);",
          "37: #endif",
          "39:     abrt_init(argv);",
          "42:     const char *program_usage_string = _(",
          "43:         \"& [-y] [-i BUILD_IDS_FILE|-i -] [-e PATH[:PATH]...]\\n\"",
          "44:         \"\\t[-r REPO]\\n\"",
          "45:         \"\\n\"",
          "46:         \"Installs debuginfo packages for all build-ids listed in BUILD_IDS_FILE to\\n\"",
          "47:         \"ABRT system cache.\"",
          "48:     );",
          "50:     enum {",
          "51:         OPT_v = 1 << 0,",
          "52:         OPT_y = 1 << 1,",
          "53:         OPT_i = 1 << 2,",
          "54:         OPT_e = 1 << 3,",
          "55:         OPT_r = 1 << 4,",
          "56:         OPT_s = 1 << 5,",
          "57:     };",
          "59:     const char *build_ids = \"build_ids\";",
          "60:     const char *exact = NULL;",
          "61:     const char *repo = NULL;",
          "62:     const char *size_mb = NULL;",
          "64:     struct options program_options[] = {",
          "65:         OPT__VERBOSE(&g_verbose),",
          "66:         OPT_BOOL  ('y', \"yes\",         NULL,                   _(\"Noninteractive, assume 'Yes' to all questions\")),",
          "67:         OPT_STRING('i', \"ids\",   &build_ids, \"BUILD_IDS_FILE\", _(\"- means STDIN, default: build_ids\")),",
          "68:         OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),",
          "69:         OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),",
          "70:         OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),",
          "71:         OPT_END()",
          "72:     };",
          "73:     const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);",
          "82:     char *build_ids_self_fd = NULL;",
          "83:     if (strcmp(\"-\", build_ids) != 0)",
          "84:     {",
          "85:         const int build_ids_fd = open(build_ids, O_RDONLY);",
          "86:         if (build_ids_fd < 0)",
          "87:             perror_msg_and_die(\"Failed to open file '%s'\", build_ids);",
          "90:         build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);",
          "91:     }",
          "94:     const char *args[11];",
          "96:         const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };",
          "97:         unsigned i = 0;",
          "98:         args[i++] = EXECUTABLE;",
          "99:         args[i++] = \"--ids\";",
          "100:         args[i++] = (build_ids_self_fd != NULL) ? build_ids_self_fd : \"-\";",
          "101:         args[i++] = verbs[g_verbose <= 3 ? g_verbose : 3];",
          "102:         if ((opts & OPT_y))",
          "103:             args[i++] = \"-y\";",
          "104:         if ((opts & OPT_e))",
          "105:         {",
          "106:             args[i++] = \"--exact\";",
          "107:             args[i++] = exact;",
          "108:         }",
          "109:         if ((opts & OPT_r))",
          "110:         {",
          "111:             args[i++] = \"--repo\";",
          "112:             args[i++] = repo;",
          "113:         }",
          "114:         args[i++] = \"--\";",
          "115:         args[i] = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         putenv(path_env);",
          "123:     }",
          "126:     error_msg_and_die(\"Can't execute %s\", EXECUTABLE);",
          "127: }",
          "",
          "[Removed Lines]",
          "125:     execvp(EXECUTABLE, argv);",
          "",
          "[Added Lines]",
          "187:     execvp(EXECUTABLE, (char **)args);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89ae091014c69a2bafa7bb6fbe8843940a08fb39",
      "candidate_info": {
        "commit_hash": "89ae091014c69a2bafa7bb6fbe8843940a08fb39",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/89ae091014c69a2bafa7bb6fbe8843940a08fb39",
        "files": [
          "abrt.spec.in"
        ],
        "message": "spec: create /vat/spool/abrt\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "abrt.spec.in||abrt.spec.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "abrt.spec.in||abrt.spec.in": [
          "File: abrt.spec.in -> abrt.spec.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "403: %build",
          "404: autoconf",
          "412: CFLAGS=\"%{optflags} -Werror\" %configure \\",
          "413: %if 0%{?suse_version}",
          "",
          "[Removed Lines]",
          "406: %if 0%{?rhel:%{rhel} < 7}%{?fedora:%{fedora} < 18}",
          "407:     %define var_base_dir spool",
          "408: %else",
          "409:     %define var_base_dir tmp",
          "410: %endif",
          "",
          "[Added Lines]",
          "406: %define var_base_dir spool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416: %if %{without bodhi}",
          "417:         --without-bodhi \\",
          "418: %endif",
          "422: %if 0%{?rhel}",
          "423:         --enable-suggest-autoreporting \\",
          "424: %endif",
          "",
          "[Removed Lines]",
          "419: %if 0%{?rhel:%{rhel} < 7}%{?fedora:%{fedora} < 18}",
          "420:         --with-defaultdumplocation=/var/%{var_base_dir}/abrt \\",
          "421: %endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bdf6305f6a8501a692e1a98f98e0be9d3922a1d",
      "candidate_info": {
        "commit_hash": "3bdf6305f6a8501a692e1a98f98e0be9d3922a1d",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/3bdf6305f6a8501a692e1a98f98e0be9d3922a1d",
        "files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: don't open the build_ids file as abrt\n\nOpening the build_ids file as abrt may lead to information disclosure.\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ],
          "candidate": [
            "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     };",
          "73:     const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     const gid_t egid = getegid();",
          "76:     const gid_t rgid = getgid();",
          "77:     const uid_t euid = geteuid();",
          "78:     const gid_t ruid = getuid();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     char *build_ids_self_fd = NULL;",
          "83:     if (strcmp(\"-\", build_ids) != 0)",
          "84:     {",
          "85:         const int build_ids_fd = open(build_ids, O_RDONLY);",
          "86:         if (build_ids_fd < 0)",
          "87:             perror_msg_and_die(\"Failed to open file '%s'\", build_ids);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         if (setregid(egid, rgid) < 0)",
          "91:             perror_msg_and_die(\"setregid(egid, rgid)\");",
          "93:         if (setreuid(euid, ruid) < 0)",
          "94:             perror_msg_and_die(\"setreuid(euid, ruid)\");",
          "98:         if (setregid(rgid, egid) < 0)",
          "99:             perror_msg_and_die(\"setregid(rgid, egid)\");",
          "101:         if (setreuid(ruid, euid) < 0 )",
          "102:             perror_msg_and_die(\"setreuid(ruid, euid)\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     {",
          "131: #if 1",
          "",
          "[Removed Lines]",
          "121:     gid_t g = getegid();",
          "123:     if (g != getgid())",
          "124:         IGNORE_RESULT(setregid(g, g));",
          "125:     uid_t u = geteuid();",
          "126:     if (u != getuid())",
          "128:         IGNORE_RESULT(setreuid(u, u));",
          "",
          "[Added Lines]",
          "140:     if (egid != rgid)",
          "141:         IGNORE_RESULT(setregid(egid, egid));",
          "142:     if (euid != ruid)",
          "144:         IGNORE_RESULT(setreuid(euid, euid));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:         char path_env[] = \"PATH=/usr/sbin:/sbin:/usr/bin:/bin:\"BIN_DIR\":\"SBIN_DIR;",
          "183:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
          "184:         putenv(path_env);",
          "",
          "[Removed Lines]",
          "182:         if (u != 0)",
          "",
          "[Added Lines]",
          "198:         if (euid != 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}