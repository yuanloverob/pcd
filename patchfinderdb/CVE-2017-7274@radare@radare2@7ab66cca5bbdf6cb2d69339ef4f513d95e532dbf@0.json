{
  "cve_id": "CVE-2017-7274",
  "cve_desc": "The r_pkcs7_parse_cms function in libr/util/r_pkcs7.c in radare2 1.3.0 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a crafted PE file.",
  "repo": "radare/radare2",
  "patch_hash": "7ab66cca5bbdf6cb2d69339ef4f513d95e532dbf",
  "patch_info": {
    "commit_hash": "7ab66cca5bbdf6cb2d69339ef4f513d95e532dbf",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/7ab66cca5bbdf6cb2d69339ef4f513d95e532dbf",
    "files": [
      "libr/util/r_pkcs7.c"
    ],
    "message": "Fix #7152 - Null deref in cms",
    "before_after_code_files": [
      "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
    ]
  },
  "patch_diff": {
    "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c": [
      "File: libr/util/r_pkcs7.c -> libr/util/r_pkcs7.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "284:   return NULL;",
      "285:  }",
      "286:  object = r_asn1_create_object (buffer, length);",
      "288:   r_asn1_free_object (object);",
      "289:   free (container);",
      "290:   return NULL;",
      "",
      "[Removed Lines]",
      "287:  if (!object || object->list.length != 2 || !object->list.objects[0] || object->list.objects[1]->list.length != 1) {",
      "",
      "[Added Lines]",
      "287:  if (!object || object->list.length != 2 || !object->list.objects ||",
      "288:   !object->list.objects[0] || !object->list.objects[1] ||",
      "289:   object->list.objects[1]->list.length != 1) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e48260b04b760dc6926f603f0cc48e6c0e7cfa7",
      "candidate_info": {
        "commit_hash": "7e48260b04b760dc6926f603f0cc48e6c0e7cfa7",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/7e48260b04b760dc6926f603f0cc48e6c0e7cfa7",
        "files": [
          "libr/include/r_util/r_asn1.h",
          "libr/util/r_asn1.c",
          "libr/util/r_pkcs7.c",
          "libr/util/r_x509.c"
        ],
        "message": "Fixed SIGSEGV, fixed heap buffer overflow and UAF in the ASN1 code",
        "before_after_code_files": [
          "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h",
          "libr/util/r_asn1.c||libr/util/r_asn1.c",
          "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c",
          "libr/util/r_x509.c||libr/util/r_x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ],
          "candidate": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h": [
          "File: libr/include/r_util/r_asn1.h -> libr/include/r_util/r_asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: R_API RASN1String *r_asn1_stringify_tag (RASN1Object *object);",
          "89: R_API RASN1String *r_asn1_stringify_object (RASN1Object *object);",
          "92: void r_asn1_free_string (RASN1String *string);",
          "",
          "[Removed Lines]",
          "91: void r_asn1_free_object (RASN1Object *object);",
          "",
          "[Added Lines]",
          "91: void r_asn1_free_object (RASN1Object **object);",
          "",
          "---------------"
        ],
        "libr/util/r_asn1.c||libr/util/r_asn1.c": [
          "File: libr/util/r_asn1.c -> libr/util/r_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_util.h>",
          "4: #include \"r_oids.h\"",
          "5: #include <stdlib.h>",
          "6: #include <stdio.h>",
          "7: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <r_types.h>",
          "6: #include <r_util.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:   return NULL;",
          "64:  }",
          "65:  memcpy (str, buffer, length);",
          "66:  str[length] = '\\0';",
          "68: }",
          "70: RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length) {",
          "",
          "[Removed Lines]",
          "67:  return r_asn1_create_string (str, true, length + 1);",
          "",
          "[Added Lines]",
          "68:  r_str_filter (str, length);",
          "70:  return r_asn1_create_string (str, true, length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:   return NULL;",
          "242:  }",
          "245:  if (!str) {",
          "246:   return NULL;",
          "247:  }",
          "251:  end = buffer + length;",
          "252:  t = str;",
          "253:  slen = 0;",
          "",
          "[Removed Lines]",
          "244:  str = (char*) malloc (ASN1_OID_LEN);",
          "249:  memset (str, 0, ASN1_OID_LEN);",
          "",
          "[Added Lines]",
          "247:  str = (char*) calloc (1, ASN1_OID_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299:  return r_asn1_create_string (str, true, ASN1_OID_LEN);",
          "300: }",
          "303:  RASN1Object *object;",
          "304:  ut8 head, length8, byte;",
          "305:  ut64 length64;",
          "",
          "[Removed Lines]",
          "302: RASN1Object *asn1_parse_header (const ut8 *buffer, ut32 length) {",
          "",
          "[Added Lines]",
          "303: static RASN1Object *asn1_parse_header (const ut8 *buffer, ut32 length) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:   return NULL;",
          "308:  }",
          "311:  if (!object) {",
          "312:   return NULL;",
          "313:  }",
          "",
          "[Removed Lines]",
          "310:  object = (RASN1Object*) malloc (sizeof (RASN1Object));",
          "",
          "[Added Lines]",
          "311:  object = R_NEW0 (RASN1Object);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:  object->klass = head & ASN1_CLASS;",
          "316:  object->form = head & ASN1_FORM;",
          "317:  object->tag = head & ASN1_TAG;",
          "322:  length8 = buffer[1];",
          "323:  if (length8 & ASN1_LENLONG) {",
          "324:   length64 = 0;",
          "",
          "[Removed Lines]",
          "318:  object->sector = NULL;",
          "319:  object->length = 0;",
          "320:  object->list.length = 0;",
          "321:  object->list.objects = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "360:   object->sector = buffer + 2;",
          "361:  }",
          "362:  if (object->tag == TAG_BITSTRING && object->sector[0] == 0) {",
          "365:    object->length--;",
          "366:  }",
          "367:  if (object->length > length) {",
          "370:   return NULL;",
          "371:  }",
          "372:  return object;",
          "",
          "[Removed Lines]",
          "363:   object->sector++; //real sector starts +1",
          "364:   if (object->length > 0)",
          "369:   free (object);",
          "",
          "[Added Lines]",
          "360:   if (object->length > 0){",
          "361:    object->sector++; //real sector starts +1",
          "363:   }",
          "367:   free(object);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386:  while (next >= buffer && next < end) {",
          "387:   object = asn1_parse_header (next, end - next);",
          "388:   if (!object || next == object->sector) {",
          "390:    break;",
          "391:   }",
          "392:   next = object->sector + object->length;",
          "393:   counter++;",
          "399:  }",
          "400:  return counter;",
          "401: }",
          "",
          "[Removed Lines]",
          "394:   free (object);",
          "395:   object = NULL;",
          "396:  }",
          "397:  if (object) {",
          "398:   free (object);",
          "",
          "[Added Lines]",
          "387:    R_FREE (object);",
          "392:   R_FREE (object);",
          "394:  R_FREE (object);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "415:   } else {",
          "416:    object->list.objects = (RASN1Object**) calloc (count, sizeof (RASN1Object*));",
          "417:    if (!object->list.objects) {",
          "419:     return NULL;",
          "420:    }",
          "422:    for (i = 0; next >= buffer && next < end && i < count; ++i) {",
          "423:     inner = r_asn1_create_object (next, end - next);",
          "424:     if (!inner || next == inner->sector) {",
          "426:      break;",
          "427:     }",
          "428:     next = inner->sector + inner->length;",
          "429:     object->list.objects[i] = inner;",
          "430:     inner = NULL;",
          "431:    }",
          "435:   }",
          "436:  }",
          "437:  return object;",
          "438: }",
          "441:  ut32 i;",
          "451:    }",
          "454:   }",
          "456:  }",
          "457: }",
          "",
          "[Removed Lines]",
          "418:     free (object);",
          "421:    memset (object->list.objects, 0, count * sizeof (RASN1Object*));",
          "432:    if (inner) {",
          "433:     free (inner);",
          "434:    }",
          "440: void r_asn1_free_object (RASN1Object *object) {",
          "442:  if (object) {",
          "444:   object->sector = 0;",
          "445:   if (object->list.objects && object->list.length) {",
          "446:    for (i = 0; i < object->list.length; ++i) {",
          "447:     if (object->list.objects[i]) {",
          "448:      r_asn1_free_object (object->list.objects[i]);",
          "449:     }",
          "450:     object->list.objects[i] = NULL;",
          "452:    free (object->list.objects);",
          "453:    object->list.objects = NULL;",
          "455:   free (object);",
          "",
          "[Added Lines]",
          "413:     r_asn1_free_object (&object);",
          "417:     object->list.objects[i] = NULL;",
          "420:      r_asn1_free_object (&inner);",
          "432: void r_asn1_free_object (RASN1Object **object) {",
          "434:  if (!object) {",
          "435:   return;",
          "436:  }",
          "437:  if (*object) {",
          "439:   (*object)->sector = 0;",
          "440:   if ((*object)->list.objects) {",
          "441:    for (i = 0; i < (*object)->list.length; ++i) {",
          "442:     r_asn1_free_object (&(*object)->list.objects[i]);",
          "444:    R_FREE ((*object)->list.objects);",
          "446:   (*object)->list.objects = NULL;",
          "447:   (*object)->list.length = 0;",
          "448:   R_FREE ((*object));",
          "",
          "---------------"
        ],
        "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c": [
          "File: libr/util/r_pkcs7.c -> libr/util/r_pkcs7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <stdlib.h>",
          "4: #include <string.h>",
          "5: #include <r_util.h>",
          "6: #include \"r_x509_internal.h\"",
          "7: #include \"r_pkcs7_internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <r_types.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:    r_x509_free_crl (crls->elements[i]);",
          "32:    crls->elements[i] = NULL;",
          "33:   }",
          "37:  }",
          "38: }",
          "",
          "[Removed Lines]",
          "34:   free (crls->elements);",
          "35:   crls->elements = NULL;",
          "",
          "[Added Lines]",
          "35:   R_FREE (crls->elements);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:   ecac->length = object->list.length;",
          "51:   for (i = 0; i < ecac->length; ++i) {",
          "52:    ecac->elements[i] = r_x509_parse_certificate (object->list.objects[i]);",
          "53:   }",
          "54:  }",
          "55:  return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:    object->list.objects[i] = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:    r_x509_free_certificate (ecac->elements[i]);",
          "63:    ecac->elements[i] = NULL;",
          "64:   }",
          "68:  }",
          "69: }",
          "",
          "[Removed Lines]",
          "65:   free (ecac->elements);",
          "66:   ecac->elements = NULL;",
          "",
          "[Added Lines]",
          "66:   R_FREE (ecac->elements);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:     r_x509_free_algorithmidentifier (dai->elements[i]);",
          "108:    }",
          "109:   }",
          "113:  }",
          "114: }",
          "116: bool r_pkcs7_parse_contentinfo (RPKCS7ContentInfo* ci, RASN1Object *object) {",
          "118:   return false;",
          "119:  }",
          "121:  ci->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "123:   ci->content = object->list.objects[1];",
          "124:   object->list.objects[1] = NULL;",
          "125:  }",
          "",
          "[Removed Lines]",
          "106:     free (dai->elements[i]);",
          "107:     dai->elements[i] = NULL;",
          "110:   free (dai->elements);",
          "111:   dai->elements = NULL;",
          "117:  if (!ci || !object || object->list.length < 1) {",
          "122:  if (object->list.length == 2) {",
          "",
          "[Added Lines]",
          "106:     R_FREE (dai->elements[i]);",
          "109:   R_FREE (dai->elements);",
          "115:  if (!ci || !object || object->list.length < 1 || !object->list.objects[0]) {",
          "120:  if (object->list.length == 2 || !object->list.objects[1]) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130: void r_pkcs7_free_contentinfo (RPKCS7ContentInfo* ci) {",
          "131:  if (ci) {",
          "133:   r_asn1_free_string (ci->contentType);",
          "135:  }",
          "",
          "[Removed Lines]",
          "132:   r_asn1_free_object (ci->content);",
          "",
          "[Added Lines]",
          "130:   r_asn1_free_object (&ci->content);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "150: void r_pkcs7_free_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu) {",
          "151:  if (iasu) {",
          "152:   r_x509_free_name (&iasu->issuer);",
          "155:  }",
          "156: }",
          "",
          "[Removed Lines]",
          "153:   r_asn1_free_object (iasu->serialNumber);",
          "",
          "[Added Lines]",
          "151:   r_asn1_free_object (&iasu->serialNumber);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "198:   r_x509_free_algorithmidentifier (&si->digestAlgorithm);",
          "199:   r_pkcs7_free_attributes (&si->authenticatedAttributes);",
          "200:   r_x509_free_algorithmidentifier (&si->digestEncryptionAlgorithm);",
          "202:   r_pkcs7_free_attributes (&si->unauthenticatedAttributes);",
          "203:   free (si);",
          "204:  }",
          "",
          "[Removed Lines]",
          "201:   r_asn1_free_object (si->encryptedDigest);",
          "",
          "[Added Lines]",
          "199:   r_asn1_free_object (&si->encryptedDigest);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218:   for (i = 0; i < ss->length; ++i) {",
          "229:   }",
          "230:  }",
          "231:  return true;",
          "",
          "[Removed Lines]",
          "221:    ss->elements[i] = (RPKCS7SignerInfo *) malloc (sizeof (RPKCS7SignerInfo));",
          "224:    if (ss->elements[i]) {",
          "226:     memset (ss->elements[i], 0, sizeof (RPKCS7SignerInfo));",
          "227:     r_pkcs7_parse_signerinfo (ss->elements[i], object->list.objects[i]);",
          "228:    }",
          "",
          "[Added Lines]",
          "219:    ss->elements[i] = R_NEW0 (RPKCS7SignerInfo);",
          "222:    r_pkcs7_parse_signerinfo (ss->elements[i], object->list.objects[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "234: void r_pkcs7_free_signerinfos (RPKCS7SignerInfos *ss) {",
          "235:  ut32 i;",
          "236:  if (ss) {",
          "238:    r_pkcs7_free_signerinfo (ss->elements[i]);",
          "241:    ss->elements[i] = NULL;",
          "242:   }",
          "246:  }",
          "247: }",
          "",
          "[Removed Lines]",
          "237:   for (i = 0; i < ss->length; ++i) {",
          "240:    free (ss->elements[i]);",
          "243:   free (ss->elements);",
          "244:   ss->elements = NULL;",
          "",
          "[Added Lines]",
          "231:   for (i = 0; i < ss->length; i++) {",
          "235:   R_FREE (ss->elements);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "255:  memset (sd, 0, sizeof (RPKCS7SignedData));",
          "256:  elems = object->list.objects;",
          "259:  r_pkcs7_parse_digestalgorithmidentifier (&sd->digestAlgorithms, elems[1]);",
          "260:  r_pkcs7_parse_contentinfo (&sd->contentInfo, elems[2]);",
          "",
          "[Removed Lines]",
          "258:  sd->version = (ut32) elems[0]->sector[0];",
          "",
          "[Added Lines]",
          "249:  sd->version = (ut32) elems[0]->sector[0];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "268:   r_pkcs7_parse_certificaterevocationlists (&sd->crls, elems[shift]);",
          "269:   shift++;",
          "270:  }",
          "272:   r_pkcs7_parse_signerinfos (&sd->signerinfos, elems[shift]);",
          "273:  return true;",
          "274: }",
          "",
          "[Removed Lines]",
          "271:  if (shift < object->list.length)",
          "",
          "[Added Lines]",
          "262:  if (shift < object->list.length) {",
          "264:  }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "279:   r_pkcs7_free_contentinfo (&sd->contentInfo);",
          "280:   r_pkcs7_free_extendedcertificatesandcertificates (&sd->certificates);",
          "281:   r_pkcs7_free_certificaterevocationlists (&sd->crls);",
          "283:  }",
          "284: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   r_pkcs7_free_signerinfos (&sd->signerinfos);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "289:  if (!buffer || !length) {",
          "290:   return NULL;",
          "291:  }",
          "293:  if (!container) {",
          "294:   return NULL;",
          "295:  }",
          "297:  object = r_asn1_create_object (buffer, length);",
          "299:   free (container);",
          "300:   return NULL;",
          "301:  }",
          "302:  container->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "303:  r_pkcs7_parse_signeddata (&container->signedData, object->list.objects[1]->list.objects[0]);",
          "305:  return container;",
          "306: }",
          "",
          "[Removed Lines]",
          "292:  container = (RCMS*) malloc (sizeof (RCMS));",
          "296:  memset (container, 0, sizeof (RCMS));",
          "298:  if (!object || object->list.length != 2 || object->list.objects[1]->list.length != 1) {",
          "304:  r_asn1_free_object (object);",
          "",
          "[Added Lines]",
          "285:  container = R_NEW0 (RCMS);",
          "290:  if (!object || object->list.length != 2 || !object->list.objects[0] || object->list.objects[1]->list.length != 1) {",
          "291:   r_asn1_free_object (&object);",
          "297:  r_asn1_free_object (&object);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "335: void r_pkcs7_free_attribute (RPKCS7Attribute* attribute) {",
          "336:  if (attribute) {",
          "338:   r_asn1_free_string (attribute->oid);",
          "339:   free (attribute);",
          "340:  }",
          "",
          "[Removed Lines]",
          "337:   r_asn1_free_object (attribute->data);",
          "",
          "[Added Lines]",
          "330:   r_asn1_free_object (&attribute->data);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "368:   for (i = 0; i < attributes->length; ++i) {",
          "369:    r_pkcs7_free_attribute (attributes->elements[i]);",
          "370:   }",
          "374:  }",
          "375: }",
          "377: char* r_pkcs7_signerinfos_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "379:  ut32 i, p;",
          "380:  int r;",
          "381:  char *tmp, *pad2, *pad3;",
          "",
          "[Removed Lines]",
          "371:   free (attributes->elements);",
          "372:   attributes->elements = NULL;",
          "378:  RASN1String *algo, *last, *next;",
          "",
          "[Added Lines]",
          "364:   R_FREE (attributes->elements);",
          "370:  RASN1String *algo = NULL, *last = NULL, *next = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "425: }",
          "427: char* r_x509_signedinfo_dump (RPKCS7SignerInfo *si, char* buffer, ut32 length, const char* pad) {",
          "430:  ut32 i, p;",
          "431:  int r;",
          "432:  char *tmp, *pad2, *pad3;",
          "",
          "[Removed Lines]",
          "428:  RASN1String *s;",
          "429:  RASN1Object *o;",
          "",
          "[Added Lines]",
          "420:  RASN1String *s = NULL;",
          "421:  RASN1Object *o = NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "437:   pad = \"\";",
          "438:  }",
          "439:  pad3 = r_str_newf (\"%s    \", pad);",
          "441:  pad2 = pad3 + 2;",
          "",
          "[Removed Lines]",
          "440:  if (!pad3) return NULL;",
          "",
          "[Added Lines]",
          "432:  if (!pad3) {",
          "433:   return NULL;",
          "434:  }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "458:  } else {",
          "459:   s = NULL;",
          "460:  }",
          "461:  r = snprintf (buffer + p, length - p, \"%sSerial Number:\\n%s%s\\n\", pad2, pad3, s ? s->string : \"Missing\");",
          "462:  p += (ut32) r;",
          "463:  r_asn1_free_string (s);",
          "465:   free (pad3);",
          "466:   return NULL;",
          "467:  }",
          "469:  s = si->digestAlgorithm.algorithm;",
          "470:  r = snprintf (buffer + p, length - p, \"%sDigest Algorithm:\\n%s%s\\n%sAuthenticated Attributes:\\n\",",
          "471:     pad2, pad3, s ? s->string : \"Missing\", pad2);",
          "472:  p += (ut32) r;",
          "474:   free (pad3);",
          "475:   return NULL;",
          "476:  }",
          "",
          "[Removed Lines]",
          "464:  if (r < 0) {",
          "473:  if (r < 0) {",
          "",
          "[Added Lines]",
          "455:  if (length <= p) {",
          "456:   free (pad3);",
          "457:   return NULL;",
          "458:  }",
          "462:  if (r < 0 || length <= p) {",
          "470:  if (r < 0 || length <= p) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "480:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "481:      pad3, attr->oid ? attr->oid->string : \"Missing\", attr->data ? attr->data->length : 0);",
          "482:   p += (ut32) r;",
          "484:    free (pad3);",
          "485:    return NULL;",
          "486:   }",
          "487:  }",
          "488:  s = si->digestEncryptionAlgorithm.algorithm;",
          "489:  r = snprintf (buffer + p, length - p, \"%sDigest Encryption Algorithm\\n%s%s\\n\",",
          "490:     pad2, pad3, s ? s->string : \"Missing\");",
          "491:  p += (ut32) r;",
          "493:   free (pad3);",
          "494:   return NULL;",
          "495:  }",
          "",
          "[Removed Lines]",
          "483:   if (r < 0) {",
          "492:  if (r < 0) {",
          "",
          "[Added Lines]",
          "480:   if (r < 0 || length <= p) {",
          "486:  if (length <= p) {",
          "487:   free (pad3);",
          "488:   return NULL;",
          "489:  }",
          "493:  if (r < 0 || length <= p) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "502:  r = snprintf (buffer + p, length - p, \"%sEncrypted Digest: %u bytes\\n\", pad2, o ? o->length : 0);",
          "504:   free (pad3);",
          "505:   return NULL;",
          "506:  }",
          "507:  r = snprintf (buffer + p, length - p, \"%sUnauthenticated Attributes:\\n\", pad2);",
          "508:  p += (ut32) r;",
          "510:   free (pad3);",
          "511:   return NULL;",
          "512:  }",
          "513:  for (i = 0; i < si->unauthenticatedAttributes.length; ++i) {",
          "514:   RPKCS7Attribute* attr = si->unauthenticatedAttributes.elements[i];",
          "516:   o = attr->data;",
          "517:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "518:      pad3, attr->oid ? attr->oid->string : \"Missing\", o ? o->length : 0);",
          "519:   p += (ut32) r;",
          "521:    free (pad3);",
          "522:    return NULL;",
          "523:   }",
          "524:  }",
          "525:  return buffer + p;",
          "526: }",
          "528: char *r_pkcs7_cms_dump (RCMS* container) {",
          "529:  RPKCS7SignedData *sd;",
          "531:  int r;",
          "533:  if (!container) {",
          "534:   return NULL;",
          "535:  }",
          "536:  sd = &container->signedData;",
          "538:  length = 2048 + (container->signedData.certificates.length * 1024);",
          "542:  r = snprintf (buffer, length, \"signedData\\n  Version: %u\\n  Digest Algorithms:\\n\", sd->version);",
          "543:  p += (ut32) r;",
          "545:   free (buffer);",
          "546:   return NULL;",
          "547:  }",
          "548:  if (container->signedData.digestAlgorithms.elements) {",
          "549:   for (i = 0; i < container->signedData.digestAlgorithms.length; ++i) {",
          "550:    if (container->signedData.digestAlgorithms.elements[i]) {",
          "552:     p += (ut32) r;",
          "553:     if (r < 0 || length <= p) {",
          "554:      free (buffer);",
          "",
          "[Removed Lines]",
          "503:  if (r < 0) {",
          "509:  if (r < 0) {",
          "515:   if (!attr) continue;",
          "520:   if (r < 0) {",
          "530:  ut32 i, length, p;",
          "532:  char *buffer, *tmp = NULL;",
          "537:  p = 0;",
          "539:  buffer = (char*) malloc (length);",
          "540:  if (!buffer) return NULL;",
          "541:  memset (buffer, 0, length);",
          "544:  if (r < 0) {",
          "551:     r = snprintf (buffer + p, length - p, \"    %s\\n\", container->signedData.digestAlgorithms.elements[i]->algorithm->string);",
          "",
          "[Added Lines]",
          "504:  if (r < 0 || length <= p) {",
          "510:  if (r < 0 || length <= p) {",
          "516:   if (!attr) {",
          "517:    continue;",
          "518:   }",
          "523:   if (r < 0 || length <= p) {",
          "528:  free (pad3);",
          "534:  ut32 i, length, p = 0;",
          "536:  char *buffer = NULL, *tmp = NULL;",
          "542:  if(!length) {",
          "543:   return NULL;",
          "544:  }",
          "545:  buffer = (char*) calloc (1, length);",
          "546:  if (!buffer) {",
          "547:   return NULL;",
          "548:  }",
          "551:  if (r < 0 || length <= p) {",
          "558:     RASN1String *s = container->signedData.digestAlgorithms.elements[i]->algorithm;",
          "559:     r = snprintf (buffer + p, length - p, \"    %s\\n\", s ? s->string : \"Missing\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "579:   p = tmp - buffer;",
          "580:  }",
          "581:  p = tmp - buffer;",
          "582:  r = snprintf (buffer + p, length - p, \"  SignerInfos:\\n\");",
          "583:  p += (ut32) r;",
          "584:  if (r < 0 || length <= p) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:  if (length <= p) {",
          "591:   free (buffer);",
          "592:   return NULL;",
          "593:  }",
          "",
          "---------------"
        ],
        "libr/util/r_x509.c||libr/util/r_x509.c": [
          "File: libr/util/r_x509.c -> libr/util/r_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_util.h>",
          "4: #include <stdlib.h>",
          "5: #include <string.h>",
          "7: #include \"r_x509_internal.h\"",
          "9: bool r_x509_parse_validity (RX509Validity *validity, RASN1Object *object) {",
          "10:  RASN1Object *o;",
          "11:  if (!validity || !object || object->list.length != 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <r_types.h>",
          "10: #define MOVE_PTR(dst, src) { ((dst) = (src)); (src) = NULL; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  r_x509_parse_algorithmidentifier (&spki->algorithm, object->list.objects[0]);",
          "55:  if (object->list.objects[1]) {",
          "56:   o = object->list.objects[1];",
          "",
          "[Removed Lines]",
          "57:   spki->subjectPublicKey = o;",
          "58:   object->list.objects[1] = NULL;",
          "",
          "[Added Lines]",
          "60:   MOVE_PTR (spki->subjectPublicKey, object->list.objects[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   if (o->list.length == 1 && o->list.objects[0]->list.length == 2) {",
          "65:    o = o->list.objects[0];",
          "66:    if (o->list.objects[0]) {",
          "",
          "[Removed Lines]",
          "67:     spki->subjectPublicKeyExponent = o->list.objects[0];",
          "68:     o->list.objects[0] = NULL;",
          "",
          "[Added Lines]",
          "71:     MOVE_PTR (spki->subjectPublicKeyExponent, o->list.objects[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:    }",
          "75:    if (o->list.objects[1]) {",
          "79:    }",
          "80:   }",
          "",
          "[Removed Lines]",
          "76:     spki->subjectPublicKeyModule = o->list.objects[1];",
          "77:     o->list.objects[1] = NULL;",
          "",
          "[Added Lines]",
          "80:     MOVE_PTR (spki->subjectPublicKeyModule, o->list.objects[1]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:   }",
          "104:   for (i = 0; i < object->list.length; ++i) {",
          "105:    RASN1Object *o = object->list.objects[i];",
          "107:      o->tag == TAG_SET &&",
          "108:      o->form == FORM_CONSTRUCTED &&",
          "109:      o->list.length == 1) {",
          "110:     o = o->list.objects[0];",
          "112:       o->tag == TAG_SEQUENCE) {",
          "113:      if (o->list.objects[0]->klass == CLASS_UNIVERSAL &&",
          "114:        o->list.objects[0]->tag == TAG_OID) {",
          "",
          "[Removed Lines]",
          "106:    if (o->klass == CLASS_UNIVERSAL &&",
          "111:     if (o->klass == CLASS_UNIVERSAL &&",
          "",
          "[Added Lines]",
          "111:    if (o && o->klass == CLASS_UNIVERSAL &&",
          "116:     if (o && o->list.length > 1 &&",
          "117:       o->klass == CLASS_UNIVERSAL &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:  return true;",
          "125: }",
          "128:  RASN1Object *o;",
          "129:  if (!ext || !object || object->list.length < 2) {",
          "130:   return false;",
          "131:  }",
          "133:  o = object->list.objects[0];",
          "134:  if (o && o->tag == TAG_OID) {",
          "136:   o = object->list.objects[1];",
          "137:   if (o->tag == TAG_BOOLEAN) {",
          "",
          "[Removed Lines]",
          "127: bool r_x509_parse_extension (RX509Extension *ext, RASN1Object * object) {",
          "132:  memset (ext, 0, sizeof (RX509Extension));",
          "135:   ext->extnID = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "",
          "[Added Lines]",
          "133: bool r_x509_parse_extension (RX509Extension *ext, RASN1Object *object) {",
          "140:   ext->extnID = r_asn1_stringify_oid (o->sector, o->length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:    ext->extnValue = o;",
          "144:    if (o == object->list.objects[1]) {",
          "145:     object->list.objects[1] = NULL;",
          "147:     object->list.objects[2] = NULL;",
          "148:    }",
          "149:   }",
          "",
          "[Removed Lines]",
          "146:    } else if (object->list.length > 2 && o == object->list.objects[2]) {",
          "",
          "[Added Lines]",
          "151:    } else if (object->list.length > 2 &&",
          "152:      o == object->list.objects[2]) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "163:  }",
          "164:  ext->length = object->list.length;",
          "165:  for (i = 0; i < object->list.length; ++i) {",
          "167:   if (!r_x509_parse_extension (ext->extensions[i], object->list.objects[i])) {",
          "169:    ext->extensions[i] = NULL;",
          "170:   }",
          "171:  }",
          "",
          "[Removed Lines]",
          "166:   ext->extensions[i] = (RX509Extension*) malloc (sizeof (RX509Extension));",
          "168:    free (ext->extensions[i]);",
          "",
          "[Added Lines]",
          "172:   ext->extensions[i] = R_NEW0 (RX509Extension);",
          "174:    r_x509_free_extension(ext->extensions[i]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "205:    if (elems[i]->klass != CLASS_CONTEXT) continue;",
          "207:    if (elems[i]->tag == 1) {",
          "210:    }",
          "212:    if (elems[i]->tag == 2) {",
          "215:    }",
          "217:    if (tbsc->version == 2 && elems[i]->tag == 3 && elems[i]->form == FORM_CONSTRUCTED) {",
          "218:     r_x509_parse_extensions (&tbsc->extensions, elems[i]);",
          "220:    }",
          "221:   }",
          "222:  }",
          "",
          "[Removed Lines]",
          "208:     tbsc->issuerUniqueID = elems[i];",
          "209:     elems[i] = NULL;",
          "213:     tbsc->subjectUniqueID = elems[i];",
          "214:     elems[i] = NULL;",
          "219:     elems[i] = NULL;",
          "",
          "[Added Lines]",
          "214:     MOVE_PTR (tbsc->issuerUniqueID, object->list.objects[i]);",
          "220:     MOVE_PTR (tbsc->subjectUniqueID, object->list.objects[i]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "238:  if (object->klass != CLASS_UNIVERSAL || object->form != FORM_CONSTRUCTED || object->list.length != 3) {",
          "242:   free (certificate);",
          "243:   return NULL;",
          "244:  }",
          "245:  tmp = object->list.objects[2];",
          "246:  if (tmp->klass != CLASS_UNIVERSAL || tmp->form != FORM_PRIMITIVE || tmp->tag != TAG_BITSTRING) {",
          "248:   free (certificate);",
          "249:   return NULL;",
          "250:  }",
          "254:  r_x509_parse_tbscertificate (&certificate->tbsCertificate, object->list.objects[0]);",
          "256:  if (!r_x509_parse_algorithmidentifier (&certificate->algorithmIdentifier, object->list.objects[1])) {",
          "258:   free (certificate);",
          "259:   return NULL;",
          "260:  }",
          "262:  return certificate;",
          "263: }",
          "",
          "[Removed Lines]",
          "241:   r_asn1_free_object (object);",
          "247:   r_asn1_free_object (object);",
          "251:  certificate->signature = object->list.objects[2];",
          "252:  object->list.objects[2] = NULL;",
          "257:   r_asn1_free_object (object);",
          "",
          "[Added Lines]",
          "248:   r_asn1_free_object (&object);",
          "254:   r_asn1_free_object (&object);",
          "258:  MOVE_PTR (certificate->signature, object->list.objects[2]);",
          "265:   r_asn1_free_object (&object);",
          "269:  r_asn1_free_object (&object);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "270:  }",
          "271:  object = r_asn1_create_object (buffer, length);",
          "272:  certificate = r_x509_parse_certificate (object);",
          "274:  return certificate;",
          "275: }",
          "",
          "[Removed Lines]",
          "273:  r_asn1_free_object (object);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "348:    r_asn1_free_string (name->oids[i]);",
          "349:    r_asn1_free_string (name->names[i]);",
          "350:   }",
          "352:  }",
          "354: }",
          "",
          "[Removed Lines]",
          "351:   free (name->names);",
          "",
          "[Added Lines]",
          "359:   R_FREE (name->names);",
          "360:   R_FREE (name->oids);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "356: void r_x509_free_extension (RX509Extension * ex) {",
          "357:  if (ex) {",
          "358:   r_asn1_free_string (ex->extnID);",
          "361:   free (ex);",
          "362:  }",
          "",
          "[Removed Lines]",
          "359:   r_asn1_free_object (ex->extnValue);",
          "",
          "[Added Lines]",
          "368:   r_asn1_free_object (&ex->extnValue);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "379: void r_x509_free_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki) {",
          "380:  if (spki) {",
          "381:   r_x509_free_algorithmidentifier (&spki->algorithm);",
          "386:  }",
          "387: }",
          "",
          "[Removed Lines]",
          "382:   r_asn1_free_object (spki->subjectPublicKey);",
          "383:   r_asn1_free_object (spki->subjectPublicKeyExponent);",
          "384:   r_asn1_free_object (spki->subjectPublicKeyModule);",
          "",
          "[Added Lines]",
          "391:   r_asn1_free_object (&spki->subjectPublicKey);",
          "392:   r_asn1_free_object (&spki->subjectPublicKeyExponent);",
          "393:   r_asn1_free_object (&spki->subjectPublicKeyModule);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "395:   r_x509_free_validity (&tbsc->validity);",
          "396:   r_x509_free_name (&tbsc->subject);",
          "397:   r_x509_free_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo);",
          "400:   r_x509_free_extensions (&tbsc->extensions);",
          "402:  }",
          "",
          "[Removed Lines]",
          "398:   r_asn1_free_object (tbsc->subjectUniqueID);",
          "399:   r_asn1_free_object (tbsc->issuerUniqueID);",
          "",
          "[Added Lines]",
          "407:   r_asn1_free_object (&tbsc->subjectUniqueID);",
          "408:   r_asn1_free_object (&tbsc->issuerUniqueID);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "405: void r_x509_free_certificate (RX509Certificate * certificate) {",
          "406:  if (certificate) {",
          "408:   r_x509_free_algorithmidentifier (&certificate->algorithmIdentifier);",
          "409:   r_x509_free_tbscertificate (&certificate->tbsCertificate);",
          "410:   free (certificate);",
          "",
          "[Removed Lines]",
          "407:   r_asn1_free_object (certificate->signature);",
          "",
          "[Added Lines]",
          "416:   r_asn1_free_object (&certificate->signature);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "414: void r_x509_free_crlentry (RX509CRLEntry *entry) {",
          "415:  if (entry) {",
          "417:   r_asn1_free_string (entry->revocationDate);",
          "418:   free (entry);",
          "419:  }",
          "",
          "[Removed Lines]",
          "416:   r_asn1_free_object (entry->userCertificate);",
          "",
          "[Added Lines]",
          "425:   r_asn1_free_object (&entry->userCertificate);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "467:   return NULL;",
          "468:  }",
          "469:  for (i = 0, p = 0; i < name->length; ++i) {",
          "471:   r = snprintf (c + p, len - p, \"%s%s: %s\\n\", pad, name->oids[i]->string, name->names[i]->string);",
          "472:   p += r;",
          "473:   if (r < 0 || len < p) {",
          "",
          "[Removed Lines]",
          "470:   if (!name->oids[i] || !name->names[i]) continue;",
          "",
          "[Added Lines]",
          "479:   if (!name->oids[i] || !name->names[i]) {",
          "480:    continue;",
          "481:   }",
          "482:   if (len <= p) {",
          "483:    return NULL;",
          "484:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "483:  if (!spki || !buffer || !length) {",
          "484:   return NULL;",
          "485:  }",
          "487:   pad = \"\";",
          "495:  r_asn1_free_string (m);",
          "497:  return r < 0 ? NULL : buffer + (ut32) r;",
          "",
          "[Removed Lines]",
          "486:  if (!pad)",
          "488:  a = spki->algorithm.algorithm->string;",
          "489:  RASN1String* m = r_asn1_stringify_integer (spki->subjectPublicKeyModule->sector, spki->subjectPublicKeyModule->length);",
          "493:  r = snprintf (buffer, length, \"%sAlgorithm: %s\\n%sModule: %s\\n%sExponent: %u bytes\\n\", pad, a, pad, m->string,",
          "494:     pad, spki->subjectPublicKeyExponent->length - 1);",
          "",
          "[Added Lines]",
          "500:  if (!pad) {",
          "502:  }",
          "503:  a = spki->algorithm.algorithm ? spki->algorithm.algorithm->string : \"Missing\";",
          "504:  RASN1String* m = NULL;",
          "505:  if (spki->subjectPublicKeyModule) {",
          "506:   m = r_asn1_stringify_integer (spki->subjectPublicKeyModule->sector, spki->subjectPublicKeyModule->length);",
          "507:  }",
          "511:  r = snprintf (buffer, length, \"%sAlgorithm: %s\\n%sModule: %s\\n%sExponent: %u bytes\\n\", pad, a, pad, m ? m->string : \"Missing\",",
          "512:     pad, spki->subjectPublicKeyExponent ? spki->subjectPublicKeyExponent->length - 1 : 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "518:   if (!e) continue;",
          "522:   p += r;",
          "524:   if (r < 0 || len <= p) {",
          "",
          "[Removed Lines]",
          "521:   r = snprintf (c + p, len - p, \"%s%s: %s\\n%s%u bytes\\n\", pad, e->extnID->string, e->critical ? \"critical\" : \"\", pad, e->extnValue->length);",
          "",
          "[Added Lines]",
          "539:   if (len < p) {",
          "540:    return NULL;",
          "541:   }",
          "542:   r = snprintf (c + p, len - p, \"%s%s: %s\\n%s%u bytes\\n\", pad,",
          "543:    e->extnID ? e->extnID->string : \"Missing\",",
          "544:    e->critical ? \"critical\" : \"\",",
          "545:    pad, e->extnValue ? e->extnValue->length : 0);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "546:     \"%sSignature Algorithm:\\n%s  %s\\n\"",
          "547:     \"%sIssuer:\\n\",",
          "548:     pad, tbsc->version + 1,",
          "551:     pad);",
          "552:  p = (ut32) r;",
          "553:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->issuer, buffer + p, length - p, pad2))) {",
          "",
          "[Removed Lines]",
          "549:     pad, pad, tbsc->serialNumber->string,",
          "550:     pad, pad, tbsc->signature.algorithm->string,",
          "",
          "[Added Lines]",
          "573:     pad, pad, tbsc->serialNumber ? tbsc->serialNumber->string : \"Missing\",",
          "574:     pad, pad, tbsc->signature.algorithm ? tbsc->signature.algorithm->string : \"Missing\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "557:  p = tmp - buffer;",
          "558:  if (length <= p) {",
          "559:   free (pad2);",
          "561:  }",
          "562:  r = snprintf (buffer + p, length - p, \"%sValidity:\\n\", pad);",
          "563:  p += r;",
          "",
          "[Removed Lines]",
          "560:   return NULL;",
          "",
          "[Added Lines]",
          "584:   return NULL;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "566:   return NULL;",
          "567:  }",
          "568:  p = tmp - buffer;",
          "570:  r = snprintf (buffer + p, length - p, \"%sSubject:\\n\", pad);",
          "571:  p += r;",
          "572:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->subject, buffer + p, length - p, pad2))) {",
          "",
          "[Removed Lines]",
          "569:  if (r < 0 || length <= p) return NULL;",
          "",
          "[Added Lines]",
          "593:  if (r < 0 || length <= p) {",
          "594:   free (pad2);",
          "595:   return NULL;",
          "596:  }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "574:   return NULL;",
          "575:  }",
          "576:  p = tmp - buffer;",
          "578:  r = snprintf (buffer + p, length - p, \"%sSubject Public Key Info:\\n\", pad);",
          "579:  p += r;",
          "580:  if (r < 0 || length <= p ||",
          "",
          "[Removed Lines]",
          "577:  if (r < 0 || length <= p) return NULL;",
          "",
          "[Added Lines]",
          "604:  if (r < 0 || length <= p) {",
          "605:   free (pad2);",
          "606:   return NULL;",
          "607:  }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "586:  if (tbsc->issuerUniqueID) {",
          "587:   iid = r_asn1_stringify_integer (tbsc->issuerUniqueID->sector, tbsc->issuerUniqueID->length);",
          "588:   if (iid) {",
          "590:    r = snprintf (buffer + p, length - p, \"%sIssuer Unique ID:\\n%s  %s\", pad, pad, iid->string);",
          "591:    p += r;",
          "592:   } else {",
          "",
          "[Removed Lines]",
          "589:    if (length <= p) return NULL;",
          "",
          "[Added Lines]",
          "619:    if (length <= p) {",
          "620:     free (pad2);",
          "621:     return NULL;",
          "622:    }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "597:  if (tbsc->subjectUniqueID) {",
          "598:   sid = r_asn1_stringify_integer (tbsc->subjectUniqueID->sector, tbsc->subjectUniqueID->length);",
          "599:   if (sid) {",
          "601:    r = snprintf (buffer + p, length - p, \"%sSubject Unique ID:\\n%s  %s\", pad, pad, sid->string);",
          "602:    p += r;",
          "603:   } else {",
          "",
          "[Removed Lines]",
          "600:    if (length <= p) return NULL;",
          "",
          "[Added Lines]",
          "633:    if (length <= p) {",
          "634:     free (pad2);",
          "635:     return NULL;",
          "636:    }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "605:    return NULL;",
          "606:   }",
          "607:  }",
          "609:  r = snprintf (buffer + p, length - p, \"%sExtensions:\\n\", pad);",
          "610:  p += r;",
          "611:  if (r < 0 || length <= p || !(tmp = r_x509_extensions_dump (&tbsc->extensions, buffer + p, length - p, pad2))) {",
          "",
          "[Removed Lines]",
          "608:  if (r < 0 || length <= p) return NULL;",
          "",
          "[Added Lines]",
          "644:  if (r < 0 || length <= p) {",
          "645:   free (pad2);",
          "646:   return NULL;",
          "647:  }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "621: char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad) {",
          "624:  ut32 p;",
          "625:  int r;",
          "626:  char *tbsc, *pad2;",
          "",
          "[Removed Lines]",
          "623:  RASN1String *algo;",
          "",
          "[Added Lines]",
          "662:  RASN1String *algo = NULL;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "631:   pad = \"\";",
          "632:  }",
          "633:  pad2 = r_str_newf (\"%s  \", pad);",
          "636:  p = (ut32) r;",
          "637:  tbsc = r_x509_tbscertificate_dump (&certificate->tbsCertificate, buffer + p, length - p, pad2);",
          "638:  p = tbsc - buffer;",
          "",
          "[Removed Lines]",
          "634:  if (!pad2) return NULL;",
          "635:  if ((r = snprintf (buffer, length, \"%sTBSCertificate:\\n\", pad)) < 0) return NULL;",
          "",
          "[Added Lines]",
          "673:  if (!pad2) {",
          "674:   return NULL;",
          "675:  }",
          "676:  if ((r = snprintf (buffer, length, \"%sTBSCertificate:\\n\", pad)) < 0) {",
          "677:   return NULL;",
          "678:  }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "658: }",
          "660: char* r_x509_crlentry_dump (RX509CRLEntry *crle, char* buffer, ut32 length, const char* pad) {",
          "662:  int r;",
          "663:  if (!crle || !buffer || !length) {",
          "664:   return NULL;",
          "",
          "[Removed Lines]",
          "661:  RASN1String *id = NULL, *utc;",
          "",
          "[Added Lines]",
          "704:  RASN1String *id = NULL, *utc = NULL;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "680: }",
          "682: char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "684:  ut32 i, p;",
          "685:  int r;",
          "686:  char *tmp, *pad2, *pad3;",
          "",
          "[Removed Lines]",
          "683:  RASN1String *algo, *last, *next;",
          "",
          "[Added Lines]",
          "726:  RASN1String *algo = NULL, *last = NULL, *next = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f64c47c0573f021112a09df433b79661357a06e",
      "candidate_info": {
        "commit_hash": "1f64c47c0573f021112a09df433b79661357a06e",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/1f64c47c0573f021112a09df433b79661357a06e",
        "files": [
          "libr/bin/format/pe/pe.c",
          "libr/bin/format/pe/pe.h",
          "libr/bin/p/bin_pe.c",
          "libr/include/r_util.h",
          "libr/include/r_util/r_asn1.h",
          "libr/include/r_util/r_pkcs7.h",
          "libr/include/r_util/r_x509.h",
          "libr/util/Makefile",
          "libr/util/r_asn1.c",
          "libr/util/r_asn1_internal.h",
          "libr/util/r_oids.h",
          "libr/util/r_pkcs7.c",
          "libr/util/r_pkcs7_internal.h",
          "libr/util/r_x509.c",
          "libr/util/r_x509_internal.h"
        ],
        "message": "Add ASN1, X.509 and PKCS parsers (+ iC for PE)",
        "before_after_code_files": [
          "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c",
          "libr/bin/format/pe/pe.h||libr/bin/format/pe/pe.h",
          "libr/bin/p/bin_pe.c||libr/bin/p/bin_pe.c",
          "libr/include/r_util.h||libr/include/r_util.h",
          "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h",
          "libr/include/r_util/r_pkcs7.h||libr/include/r_util/r_pkcs7.h",
          "libr/include/r_util/r_x509.h||libr/include/r_util/r_x509.h",
          "libr/util/r_asn1.c||libr/util/r_asn1.c",
          "libr/util/r_asn1_internal.h||libr/util/r_asn1_internal.h",
          "libr/util/r_oids.h||libr/util/r_oids.h",
          "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c",
          "libr/util/r_pkcs7_internal.h||libr/util/r_pkcs7_internal.h",
          "libr/util/r_x509.c||libr/util/r_x509.c",
          "libr/util/r_x509_internal.h||libr/util/r_x509_internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ],
          "candidate": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c": [
          "File: libr/bin/format/pe/pe.c -> libr/bin/format/pe/pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1875:  return;",
          "1876: }",
          "1878: static int bin_pe_init(struct PE_(r_bin_pe_obj_t)* bin) {",
          "1879:  bin->dos_header = NULL;",
          "1880:  bin->nt_headers = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1878: static void bin_pe_get_certificate (struct PE_ (r_bin_pe_obj_t) * bin) {",
          "1879:  RPKCS7Container *con;",
          "1880:  ut64 size, vaddr;",
          "1881:  ut8 *data = NULL;",
          "1882:  int len;",
          "1883:  if (!bin || !bin->nt_headers) {",
          "1884:   return;",
          "1885:  }",
          "1886:  size = bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_SECURITY].Size;",
          "1887:  vaddr = bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_SECURITY].VirtualAddress;",
          "1888:  data = calloc (1, size);",
          "1889:  if (!data) return;",
          "1890:  if (vaddr > bin->size || vaddr + size > bin->size) {",
          "1891:   bprintf (\"vaddr greater than the file\\n\");",
          "1892:   free (data);",
          "1893:   return;",
          "1894:  }",
          "1896:  len = r_buf_read_at (bin->b, vaddr + 8, data, size - 8);",
          "1897:  if (len < 1) {",
          "1898:   R_FREE (data);",
          "1899:   return;",
          "1900:  }",
          "1901:  con = r_pkcs7_parse_container (data, size);",
          "1902:  bin->pkcs7 = r_pkcs7_container_dump (con);",
          "1903:  r_pkcs7_free_container (con);",
          "1904:  R_FREE (data);",
          "1905: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1897:  bin_pe_init_imports (bin);",
          "1898:  bin_pe_init_exports (bin);",
          "1899:  bin_pe_init_resource (bin);",
          "1901:  bin->big_endian = PE_(r_bin_pe_is_big_endian) (bin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1929:  bin_pe_get_certificate(bin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2870:  free (bin->import_directory);",
          "2871:  free (bin->resource_directory);",
          "2872:  free (bin->delay_import_directory);",
          "2873:  r_buf_free (bin->b);",
          "2874:  bin->b = NULL;",
          "2875:  free (bin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2904:  free ((void*)bin->pkcs7);",
          "",
          "---------------"
        ],
        "libr/bin/format/pe/pe.h||libr/bin/format/pe/pe.h": [
          "File: libr/bin/format/pe/pe.h -> libr/bin/format/pe/pe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  RList* relocs;",
          "99:  const char* file;",
          "100:  struct r_buf_t* b;",
          "102: };",
          "104: #define GUIDSTR_LEN 34",
          "",
          "[Removed Lines]",
          "101:  Sdb* kv;",
          "",
          "[Added Lines]",
          "101:  Sdb *kv;",
          "102:  const char* pkcs7;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_pe.c||libr/bin/p/bin_pe.c": [
          "File: libr/bin/p/bin_pe.c -> libr/bin/p/bin_pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:  return buf;",
          "614: }",
          "616: struct r_bin_plugin_t r_bin_plugin_pe = {",
          "617:  .name = \"pe\",",
          "618:  .desc = \"PE bin plugin\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: static char *signature (RBinFile *arch) {",
          "617:  struct PE_ (r_bin_pe_obj_t) * bin;",
          "618:  if (!arch || !arch->o || !arch->o->bin_obj) {",
          "619:   return NULL;",
          "620:  }",
          "621:  bin = arch->o->bin_obj;",
          "622:  return (char *) bin->pkcs7;",
          "623: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:  .binsym = &binsym,",
          "628:  .entries = &entries,",
          "629:  .sections = &sections,",
          "630:  .symbols = &symbols,",
          "631:  .imports = &imports,",
          "632:  .info = &info,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:  .signature = &signature,",
          "",
          "---------------"
        ],
        "libr/include/r_util.h||libr/include/r_util.h": [
          "File: libr/include/r_util.h -> libr/include/r_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"r_util/r_uleb128.h\"",
          "46: #include \"r_util/r_utf8.h\"",
          "47: #include \"r_util/r_id_storage.h\"",
          "48: #if __UNIX__",
          "49: #include <signal.h>",
          "50: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include \"r_util/r_asn1.h\"",
          "49: #include \"r_util/r_x509.h\"",
          "50: #include \"r_util/r_pkcs7.h\"",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h": [
          "File: libr/include/r_util/r_asn1.h -> libr/include/r_util/r_asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_ASN1_H",
          "2: #define R_ASN1_H",
          "4: #include <stdint.h>",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "8: #endif",
          "10: #define ASN1_OID_LEN  64",
          "58: typedef struct r_asn1_string_t {",
          "59:  ut32 length;",
          "60:  const char *string;",
          "61:  bool allocated;",
          "62: } RASN1String;",
          "64: typedef struct r_asn1_object_t RASN1Object;",
          "66: typedef struct r_asn1_list_t {",
          "67:  ut32 length;",
          "68:  RASN1Object **objects;",
          "69: } ASN1List;",
          "71: typedef struct r_asn1_object_t {",
          "78: } RASN1Object;",
          "80: R_API RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length);",
          "82: R_API RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length);",
          "83: R_API RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length);",
          "84: R_API RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length);",
          "85: R_API RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length);",
          "86: R_API RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length);",
          "87: R_API RASN1String *r_asn1_stringify_bytes (const ut8 *buffer, ut32 length);",
          "88: R_API RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length);",
          "89: R_API RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length);",
          "90: R_API RASN1String *r_asn1_stringify_tag (RASN1Object *object);",
          "91: R_API RASN1String *r_asn1_stringify_object (RASN1Object *object);",
          "93: void r_asn1_free_object (RASN1Object *object);",
          "94: void r_asn1_free_string (RASN1String *string);",
          "97: #ifdef __cplusplus",
          "98: }",
          "99: #endif",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_pkcs7.h||libr/include/r_util/r_pkcs7.h": [
          "File: libr/include/r_util/r_pkcs7.h -> libr/include/r_util/r_pkcs7.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_PKCS7_H",
          "2: #define R_PKCS7_H",
          "4: typedef struct r_pkcs7_certificaterevocationlists_t {",
          "5:  ut32 length;",
          "6:  RX509CertificateRevocationList **elements;",
          "7: } RPKCS7CertificateRevocationLists;",
          "9: typedef struct r_pkcs7_extendedcertificatesandcertificates_t {",
          "10:  ut32 length;",
          "11:  RX509Certificate **elements;",
          "12: } RPKCS7ExtendedCertificatesAndCertificates;",
          "14: typedef struct r_pkcs7_digestalgorithmidentifiers_t {",
          "15:  ut32 length;",
          "16:  RX509AlgorithmIdentifier **elements;",
          "17: } RPKCS7DigestAlgorithmIdentifiers;",
          "19: typedef struct r_pkcs7_contentinfo_t {",
          "20:  RASN1String *contentType; //OID",
          "21:  RASN1Object *content; // optional. oid structure definition",
          "22: } RPKCS7ContentInfo;",
          "24: typedef struct r_pkcs7_issuerandserialnumber_t {",
          "25:  RX509Name issuer;",
          "26:  RASN1Object *serialNumber;",
          "27: } RPKCS7IssuerAndSerialNumber;",
          "29: typedef struct r_pkcs7_attribute_t {",
          "30:  RASN1String *oid; //OID",
          "31:  RASN1Object *data; // optional. oid structure definition",
          "32: } RPKCS7Attribute;",
          "34: typedef struct r_pkcs7_attributes_t {",
          "35:  ut32 length;",
          "36:  RPKCS7Attribute **elements;",
          "37: } RPKCS7Attributes;",
          "39: typedef struct r_pkcs7_signerinfo_t {",
          "40:  ut32 version;",
          "41:  RPKCS7IssuerAndSerialNumber issuerAndSerialNumber;",
          "42:  RX509AlgorithmIdentifier digestAlgorithm;",
          "43:  RPKCS7Attributes authenticatedAttributes; //Optional",
          "44:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "45:  RASN1Object *encryptedDigest;",
          "46:  RPKCS7Attributes unauthenticatedAttributes; //Optional",
          "47: } RPKCS7SignerInfo;",
          "49: typedef struct r_pkcs7_signerinfos_t {",
          "50:  ut32 length;",
          "51:  RPKCS7SignerInfo **elements;",
          "52: } RPKCS7SignerInfos;",
          "54: typedef struct r_pkcs7_signeddata_t {",
          "55:  ut32 version;",
          "56:  RPKCS7DigestAlgorithmIdentifiers digestAlgorithms;",
          "57:  RPKCS7ContentInfo contentInfo;",
          "58:  RPKCS7ExtendedCertificatesAndCertificates certificates; //Optional",
          "59:  RPKCS7CertificateRevocationLists crls; //Optional",
          "60:  RPKCS7SignerInfos signerinfos;",
          "61: } RPKCS7SignedData;",
          "63: typedef struct r_pkcs7_container_t {",
          "64:  RASN1String *contentType;",
          "65:  RPKCS7SignedData signedData;",
          "66: } RPKCS7Container;",
          "68: R_API RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length);",
          "69: R_API void r_pkcs7_free_container (RPKCS7Container* container);",
          "70: R_API char* r_pkcs7_container_dump (RPKCS7Container* container);",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_x509.h||libr/include/r_util/r_x509.h": [
          "File: libr/include/r_util/r_x509.h -> libr/include/r_util/r_x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_X509_H",
          "2: #define R_X509_H",
          "4: #ifdef __cplusplus",
          "5: extern \"C\" {",
          "6: #endif",
          "12: typedef struct r_x509_validity_t {",
          "13:  RASN1String *notBefore;",
          "14:  RASN1String *notAfter;",
          "15: } RX509Validity;",
          "17: typedef struct r_x509_name_t {",
          "18:  ut32 length;",
          "19:  RASN1String **oids;",
          "20:  RASN1String **names;",
          "21: } RX509Name;",
          "23: typedef struct r_x509_algorithmidentifier_t {",
          "24:  RASN1String *algorithm; // OBJECT IDENTIFIER",
          "25:  RASN1String *parameters; // OPTIONAL",
          "26: } RX509AlgorithmIdentifier;",
          "31: typedef struct r_x509_keyusage_t {",
          "32:  ut8 digitalSignature : 1;",
          "33:  ut8 contentCommitment : 1;",
          "34:  ut8 keyEncipherment : 1;",
          "35:  ut8 dataEncipherment : 1;",
          "36:  ut8 keyAgreement : 1;",
          "37:  ut8 keyCertSign : 1;",
          "38:  ut8 cRLSign : 1;",
          "39:  ut8 encipherOnly : 1;",
          "40:  ut8 decipherOnly : 1;",
          "41: } X509KeyUsage;",
          "44: typedef struct r_x509_authoritykeyidentifier_t {",
          "45:  RASN1Object *keyIdentifier;",
          "46:  RX509Name authorityCertIssuer;",
          "47:  RASN1Object *authorityCertSerialNumber;",
          "48: } RX509AuthorityKeyIdentifier;",
          "50: typedef struct r_x509_subjectpublickeyinfo_t {",
          "51:  RX509AlgorithmIdentifier algorithm;",
          "53:  RASN1Object *subjectPublicKey; // BIT STRING",
          "56:  RASN1Object *subjectPublicKeyExponent;",
          "57:  RASN1Object *subjectPublicKeyModule;",
          "58: } RX509SubjectPublicKeyInfo;",
          "60: typedef struct r_x509_extension_t {",
          "61:  RASN1String *extnID; // OBJECT IDENTIFIER",
          "62:  bool critical;",
          "63:  RASN1Object *extnValue; // OCTET STRING",
          "64: } RX509Extension;",
          "66: typedef struct r_x509_extensions_t {",
          "67:  ut32 length;",
          "68:  RX509Extension **extensions;",
          "69: } RX509Extensions;",
          "71: typedef struct r_x509_tbscertificate_t {",
          "72:  ut32 version; //INTEGER",
          "73:  RASN1String *serialNumber; // INTEGER",
          "74:  RX509AlgorithmIdentifier signature;",
          "75:  RX509Name issuer;",
          "76:  RX509Validity validity;",
          "77:  RX509Name subject;",
          "78:  RX509SubjectPublicKeyInfo subjectPublicKeyInfo;",
          "79:  RASN1Object *issuerUniqueID; // BIT STRING",
          "80:  RASN1Object *subjectUniqueID; // BIT STRING",
          "81:  RX509Extensions extensions;",
          "82: } RX509TBSCertificate;",
          "84: typedef struct r_x509_certificate_t {",
          "85:  RX509TBSCertificate tbsCertificate;",
          "86:  RX509AlgorithmIdentifier algorithmIdentifier;",
          "87:  RASN1Object *signature; // BIT STRING",
          "88: } RX509Certificate;",
          "93: typedef struct r_x509_crlentry {",
          "94:  RASN1Object *userCertificate; //INTEGER ?",
          "95:  RASN1String *revocationDate; //UTCTime",
          "96: } RX509CRLEntry;",
          "98: typedef struct r_x509_certificaterevocationlist {",
          "99:  RX509AlgorithmIdentifier signature;",
          "100:  RX509Name issuer;",
          "101:  RASN1String *lastUpdate; //UTCTime",
          "102:  RASN1String *nextUpdate; //UTCTime",
          "103:  ut32 length;",
          "104:  RX509CRLEntry **revokedCertificates;",
          "105: } RX509CertificateRevocationList;",
          "107: R_API RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object);",
          "108: R_API void r_x509_free_crl (RX509CertificateRevocationList *crl);",
          "109: R_API char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad);",
          "111: R_API RX509Certificate *r_x509_parse_certificate (RASN1Object *object);",
          "112: R_API RX509Certificate *r_x509_parse_certificate2 (const ut8 *buffer, ut32 length);",
          "113: R_API void r_x509_free_certificate (RX509Certificate* certificate);",
          "114: R_API char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad);",
          "117: #ifdef __cplusplus",
          "118: }",
          "119: #endif",
          "",
          "---------------"
        ],
        "libr/util/r_asn1.c||libr/util/r_asn1.c": [
          "File: libr/util/r_asn1.c -> libr/util/r_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <r_util.h>",
          "2: #include \"r_oids.h\"",
          "3: #include <stdlib.h>",
          "4: #include <stdio.h>",
          "5: #include <string.h>",
          "7: #include \"r_asn1_internal.h\"",
          "9: const char* _hex = \"0123456789abcdef\";",
          "11: RASN1String *r_asn1_create_string (const char *string, bool allocated, ut32 length) {",
          "12:  RASN1String *s;",
          "13:  if (!string || !length) {",
          "14:   return NULL;",
          "15:  }",
          "16:  s = (RASN1String*) malloc (sizeof (RASN1String));",
          "17:  if (!s) {",
          "18:   return NULL;",
          "19:  }",
          "20:  s->allocated = allocated;",
          "21:  s->length = length;",
          "22:  s->string = string;",
          "23:  return s;",
          "24: }",
          "26: RASN1String *r_asn1_create_string2 (const char *string, bool allocated) {",
          "27:  return r_asn1_create_string (string, allocated, strlen (string) + 1);",
          "28: }",
          "30: RASN1String *r_asn1_concatenate_strings (RASN1String *s0, RASN1String *s1, bool freestr) {",
          "31:  char* str;",
          "32:  ut32 len;",
          "33:  if (!s0 || !s1 || s0->length == 0 || s1->length == 0) {",
          "34:   return NULL;",
          "35:  }",
          "36:  len = s0->length + s1->length - 1;",
          "37:  str = (char*) malloc (len);",
          "38:  if (!str) {",
          "39:   if (freestr) {",
          "40:    r_asn1_free_string (s0);",
          "41:    r_asn1_free_string (s1);",
          "42:   }",
          "43:   return NULL;",
          "44:  }",
          "45:  memcpy (str, s0->string, s0->length);",
          "46:  memcpy (str + s0->length - 1, s1->string, s1->length);",
          "47:  if (freestr) {",
          "48:   r_asn1_free_string (s0);",
          "49:   r_asn1_free_string (s1);",
          "50:  }",
          "51:  return r_asn1_create_string (str, true, len);",
          "52: }",
          "54: RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length) {",
          "55:  char *str;",
          "56:  if (!buffer || !length) {",
          "57:   return NULL;",
          "58:  }",
          "59:  str = (char*) malloc (length + 1);",
          "60:  if (!str) {",
          "61:   return NULL;",
          "62:  }",
          "63:  memcpy (str, buffer, length);",
          "64:  str[length] = '\\0';",
          "65:  return r_asn1_create_string (str, true, length + 1);",
          "66: }",
          "68: RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length) {",
          "69:  char* str;",
          "70:  if (!buffer || length != 13 || buffer[12] != 'Z') {",
          "71:   return NULL;",
          "72:  }",
          "73:  str = (char*) malloc (24);",
          "74:  if (!buffer || !length) {",
          "75:   return NULL;",
          "76:  }",
          "78:  str[0] = buffer[4];",
          "79:  str[1] = buffer[5];",
          "80:  str[2] = '/';",
          "81:  str[3] = buffer[2];",
          "82:  str[4] = buffer[3];",
          "83:  str[5] = '/';",
          "84:  str[6] = buffer[0] < '5' ? '2' : '1';",
          "85:  str[7] = buffer[0] < '5' ? '0' : '9';",
          "86:  str[8] = buffer[0];",
          "87:  str[9] = buffer[1];",
          "88:  str[10] = ' ';",
          "89:  str[11] = buffer[6];",
          "90:  str[12] = buffer[7];",
          "91:  str[13] = ':';",
          "92:  str[14] = buffer[8];",
          "93:  str[15] = buffer[9];",
          "94:  str[16] = ':';",
          "95:  str[17] = buffer[10];",
          "96:  str[18] = buffer[11];",
          "97:  str[19] = ' ';",
          "98:  str[20] = 'G';",
          "99:  str[21] = 'M';",
          "100:  str[22] = 'T';",
          "101:  str[23] = '\\0';",
          "103:  return r_asn1_create_string (str, true, 24);",
          "104: }",
          "106: RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length) {",
          "108:  char* str;",
          "109:  if (!buffer || length != 15 || buffer[14] != 'Z') {",
          "110:   return NULL;",
          "111:  }",
          "112:  str = (char*) malloc (24);",
          "113:  if (!buffer || !length) {",
          "114:   return NULL;",
          "115:  }",
          "117:  str[0] = buffer[6];",
          "118:  str[1] = buffer[7];",
          "119:  str[2] = '/';",
          "120:  str[3] = buffer[4];",
          "121:  str[4] = buffer[5];",
          "122:  str[5] = '/';",
          "123:  str[6] = buffer[0];",
          "124:  str[7] = buffer[1];",
          "125:  str[8] = buffer[2];",
          "126:  str[9] = buffer[3];",
          "127:  str[10] = ' ';",
          "128:  str[11] = buffer[8];",
          "129:  str[12] = buffer[9];",
          "130:  str[13] = ':';",
          "131:  str[14] = buffer[10];",
          "132:  str[15] = buffer[11];",
          "133:  str[16] = ':';",
          "134:  str[17] = buffer[12];",
          "135:  str[18] = buffer[13];",
          "136:  str[19] = ' ';",
          "137:  str[20] = 'G';",
          "138:  str[21] = 'M';",
          "139:  str[22] = 'T';",
          "140:  str[23] = '\\0';",
          "142:  return r_asn1_create_string (str, true, 24);",
          "143: }",
          "145: RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length) {",
          "146:  ut32 i, j, k;",
          "147:  ut64 size;",
          "148:  ut8 c;",
          "149:  char *str;",
          "150:  if (!buffer || !length) {",
          "151:   return NULL;",
          "152:  }",
          "153:  size = 1 + ((length - 1)* 8) - buffer[0];",
          "154:  str = (char*) malloc (size);",
          "155:  if (!str) {",
          "156:   return NULL;",
          "157:  }",
          "158:  for (i = 1, j = 0; i < length && j < size; ++i) {",
          "159:   c = buffer[i];",
          "160:   for (k = 0; k < 8 && j < size; ++k, j++) {",
          "161:    str[size - j - 1] = c & 0x80 ? '1' : '0';",
          "162:    c <<= 1;",
          "163:   }",
          "164:  }",
          "165:  str[size - 1] = '\\0';",
          "166:  return r_asn1_create_string (str, true, size);",
          "167: }",
          "169: RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length) {",
          "170:  if (!buffer || length != 1 || (buffer[0] != 0 && buffer[0] != 0xFF)) {",
          "171:   return NULL;",
          "172:  }",
          "173:  return r_asn1_create_string2 (buffer[0] != 0 ? \"true\" : \"false\", false);",
          "174: }",
          "176: RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length) {",
          "177:  ut32 i, j;",
          "178:  ut64 size;",
          "179:  ut8 c;",
          "180:  char *str;",
          "181:  if (!buffer || !length) {",
          "182:   return NULL;",
          "183:  }",
          "184:  size = 3 * length;",
          "185:  str = (char*) malloc (size);",
          "186:  if (!str) {",
          "187:   return NULL;",
          "188:  }",
          "189:  memset (str, 0, size);",
          "190:  for (i = 0, j = 0; i < length && j < size; ++i, j += 3) {",
          "191:   c = buffer[i];",
          "192:   str[j + 0] = _hex[c >> 4];",
          "193:   str[j + 1] = _hex[c & 15];",
          "194:   str[j + 2] = ':';",
          "195:  }",
          "196:  str[size - 1] = '\\0';",
          "197:  return r_asn1_create_string (str, true, size);",
          "198: }",
          "200: RASN1String* r_asn1_stringify_bytes (const ut8 *buffer, ut32 length) {",
          "201:  ut32 i, j, k;",
          "202:  ut64 size;",
          "203:  ut8 c;",
          "204:  char *str;",
          "205:  if (!buffer || !length) {",
          "206:   return NULL;",
          "207:  }",
          "208:  size = (4 * length);",
          "209:  size += (64 - (size % 64));",
          "210:  str = (char*) malloc (size);",
          "211:  if (!str) {",
          "212:   return NULL;",
          "213:  }",
          "214:  memset (str, 0x20, size);",
          "216:  for (i = 0, j = 0, k = 48; i < length && j < size && k < size; ++i, j += 3, k++) {",
          "217:   c = buffer[i];",
          "218:   str[j + 0] = _hex[c >> 4];",
          "219:   str[j + 1] = _hex[c & 15];",
          "220:   str[j + 2] = ' ';",
          "221:   str[k] = (c >= ' ' && c <= '~') ? c : '.';",
          "222:   if (i % 16 == 15) {",
          "223:    str[j + 19] = '\\n';",
          "224:    j += 17;",
          "225:    k += 49;",
          "226:   }",
          "227:  }",
          "228:  str[size - 1] = '\\0';",
          "230:  return r_asn1_create_string (str, true, size);",
          "231: }",
          "233: RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length) {",
          "234:  const ut8 *start, *end;",
          "235:  char *str, *t;",
          "236:  ut32 i, slen, bits;",
          "237:  ut64 oid;",
          "238:  if (!buffer || !length) {",
          "239:   return NULL;",
          "240:  }",
          "242:  str = (char*) malloc (ASN1_OID_LEN);",
          "243:  if (!str) {",
          "244:   return NULL;",
          "245:  }",
          "247:  memset (str, 0, ASN1_OID_LEN);",
          "249:  end = buffer + length;",
          "250:  t = str;",
          "251:  slen = 0;",
          "252:  bits = 0;",
          "253:  oid = 0;",
          "255:  for (start = buffer; start < end && slen < ASN1_OID_LEN; start++) {",
          "256:   ut8 c = *start;",
          "257:   oid <<= 7;",
          "258:   oid |= (c & 0x7F);",
          "259:   bits += 7;",
          "260:   if (!(c & 0x80)) {",
          "261:    if (!slen) {",
          "262:     ut32 m = oid / 40;",
          "263:     ut32 n = oid % 40;",
          "264:     snprintf (t, ASN1_OID_LEN, \"%01u.%01u\", m, n);",
          "265:     slen = strlen (str);",
          "266:     t = str + slen;",
          "267:    } else {",
          "269:     if ((ASN1_OID_LEN - slen) > ASN1_OID_LEN) {",
          "270:      free (str);",
          "271:      return NULL;",
          "272:     }",
          "273:     snprintf (t, ASN1_OID_LEN - slen, \".%01u\", (ut32) oid);",
          "274:     slen = strlen (str);",
          "275:     t = str + slen;",
          "276:    }",
          "277:    oid = 0;",
          "278:    bits = 0;",
          "279:   }",
          "280:  }",
          "283:  if (bits > 0) {",
          "284:   free (str);",
          "285:   return NULL;",
          "286:  }",
          "287:  i = 0;",
          "288:  do {",
          "289:   if (X509OIDList[i].oid[0] == str[0]) {",
          "290:    if (!strncmp (str, X509OIDList[i].oid, ASN1_OID_LEN)) {",
          "291:     free (str);",
          "292:     return r_asn1_create_string2 (X509OIDList[i].name, false);",
          "293:    }",
          "294:   }",
          "295:   ++i;",
          "296:  } while (X509OIDList[i].oid && X509OIDList[i].name);",
          "297:  return r_asn1_create_string (str, true, ASN1_OID_LEN);",
          "298: }",
          "300: RASN1Object *asn1_parse_header (const ut8 *buffer, ut32 length) {",
          "301:  RASN1Object *object;",
          "302:  ut8 head, length8, byte;",
          "303:  ut64 length64;",
          "304:  if (!buffer || !length) {",
          "305:   return NULL;",
          "306:  }",
          "308:  object = (RASN1Object*) malloc (sizeof (RASN1Object));",
          "309:  if (!object) {",
          "310:   return NULL;",
          "311:  }",
          "312:  head = buffer[0];",
          "313:  object->class = head & ASN1_CLASS;",
          "314:  object->form = head & ASN1_FORM;",
          "315:  object->tag = head & ASN1_TAG;",
          "316:  object->sector = NULL;",
          "317:  object->length = 0;",
          "318:  object->list.length = 0;",
          "319:  object->list.objects = NULL;",
          "320:  length8 = buffer[1];",
          "321:  if (length8 & ASN1_LENLONG) {",
          "322:   length64 = 0;",
          "323:   length8 &= ASN1_LENSHORT;",
          "324:   if (length8) {",
          "325:    ut8 i8;",
          "327:    for (i8 = 0; i8 < length8; ++i8) {",
          "328:     byte = buffer[2 + i8];",
          "329:     length64 <<= 8;",
          "330:     length64 |= byte;",
          "331:     if (length64 > 0xffffffff) {",
          "332:      free (object);",
          "334:      return NULL;",
          "335:     }",
          "336:    }",
          "337:    object->sector = buffer + 2 + length8;",
          "338:   } else {",
          "340:    const ut8 *from = buffer + 2;",
          "341:    const ut8 *end = from + (length - 2);",
          "342:    do {",
          "343:     byte = *from;",
          "344:     length64 <<= 8;",
          "345:     length64 |= byte;",
          "346:     from++;",
          "347:    } while (from < end && length64 <= 0xffffffff && byte & 0x80);",
          "348:    if (length64 > 0xffffffff) {",
          "349:     free (object);",
          "351:     return NULL;",
          "352:    }",
          "353:    object->sector = from;",
          "354:   }",
          "355:   object->length = (ut32) length64;",
          "356:  } else {",
          "357:   object->length = (ut32) length8;",
          "358:   object->sector = buffer + 2;",
          "359:  }",
          "360:  if (object->tag == TAG_BITSTRING && object->sector[0] == 0) {",
          "361:   object->sector++; //real sector starts +1",
          "362:   if (object->length > 0)",
          "363:    object->length--;",
          "364:  }",
          "365:  if (object->length > length) {",
          "367:   free (object);",
          "368:   return NULL;",
          "369:  }",
          "370:  return object;",
          "371: }",
          "373: ut32 r_asn1_count_objects (const ut8 *buffer, ut32 length) {",
          "374:  ut32 counter;",
          "375:  RASN1Object *object;",
          "376:  const ut8 *next, *end;",
          "377:  if (!buffer || !length) {",
          "378:   return 0;",
          "379:  }",
          "380:  counter = 0;",
          "381:  object = NULL;",
          "382:  next = buffer;",
          "383:  end = buffer + length;",
          "384:  while (next >= buffer && next < end) {",
          "385:   object = asn1_parse_header (next, end - next);",
          "386:   if (!object || next == object->sector) {",
          "388:    break;",
          "389:   }",
          "390:   next = object->sector + object->length;",
          "391:   counter++;",
          "392:   free (object);",
          "393:   object = NULL;",
          "394:  }",
          "395:  if (object) {",
          "396:   free (object);",
          "397:  }",
          "398:  return counter;",
          "399: }",
          "401: RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length) {",
          "402:  RASN1Object *object = asn1_parse_header (buffer, length);",
          "403:  if (object && (object->form == FORM_CONSTRUCTED || object->tag == TAG_BITSTRING || object->tag == TAG_OCTETSTRING)) {",
          "404:   ut32 i, count;",
          "405:   RASN1Object *inner;",
          "406:   const ut8 *next = object->sector;",
          "407:   const ut8 *end = next + object->length;",
          "408:   count = r_asn1_count_objects (object->sector, object->length);",
          "409:   inner = NULL;",
          "410:   object->list.length = count;",
          "411:   if (count == 0) {",
          "412:    object->list.objects = NULL;",
          "413:   } else {",
          "414:    object->list.objects = (RASN1Object**) calloc (count, sizeof (RASN1Object*));",
          "415:    if (!object->list.objects) {",
          "416:     free (object);",
          "417:     return NULL;",
          "418:    }",
          "419:    memset (object->list.objects, 0, count * sizeof (RASN1Object*));",
          "420:    for (i = 0; next >= buffer && next < end && i < count; ++i) {",
          "421:     inner = r_asn1_create_object (next, end - next);",
          "422:     if (!inner || next == inner->sector) {",
          "424:      break;",
          "425:     }",
          "426:     next = inner->sector + inner->length;",
          "427:     object->list.objects[i] = inner;",
          "428:     inner = NULL;",
          "429:    }",
          "430:    if (inner) {",
          "431:     free (inner);",
          "432:    }",
          "433:   }",
          "434:  }",
          "435:  return object;",
          "436: }",
          "438: void r_asn1_free_object (RASN1Object *object) {",
          "439:  ut32 i;",
          "440:  if (object) {",
          "442:   object->sector = 0;",
          "443:   if (object->list.objects && object->list.length) {",
          "444:    for (i = 0; i < object->list.length; ++i) {",
          "445:     if (object->list.objects[i]) {",
          "446:      r_asn1_free_object (object->list.objects[i]);",
          "447:     }",
          "448:     object->list.objects[i] = NULL;",
          "449:    }",
          "450:    free (object->list.objects);",
          "451:    object->list.objects = NULL;",
          "452:   }",
          "453:   free (object);",
          "454:  }",
          "455: }",
          "457: void r_asn1_free_string (RASN1String* str) {",
          "458:  if (str) {",
          "459:   if (str->allocated) {",
          "460:    free ((char*) str->string);",
          "461:   }",
          "462:   free (str);",
          "463:  }",
          "464: }",
          "466: RASN1String *asn1_stringify_tag (RASN1Object *object) {",
          "467:  if (!object) {",
          "468:   return NULL;",
          "469:  }",
          "470:  switch (object->tag) {",
          "471:  case TAG_EOC:",
          "472:   return r_asn1_create_string2 (\"EOC\", false);",
          "473:  case TAG_BOOLEAN:",
          "474:   return r_asn1_create_string2 (\"BOOLEAN\", false);",
          "475:  case TAG_INTEGER:",
          "476:   return r_asn1_create_string2 (\"INTEGER\", false);",
          "477:  case TAG_BITSTRING:",
          "478:   return r_asn1_create_string2 (\"BIT STRING\", false);",
          "479:  case TAG_OCTETSTRING:",
          "480:   return r_asn1_create_string2 (\"OCTET STRING\", false);",
          "481:  case TAG_NULL:",
          "482:   return r_asn1_create_string2 (\"NULL\", false);",
          "483:  case TAG_OID:",
          "484:   return r_asn1_create_string2 (\"OBJECT IDENTIFIER\", false);",
          "485:  case TAG_OBJDESCRIPTOR:",
          "486:   return r_asn1_create_string2 (\"ObjectDescriptor\", false);",
          "487:  case TAG_EXTERNAL:",
          "488:   return r_asn1_create_string2 (\"EXTERNAL\", false);",
          "489:  case TAG_REAL:",
          "490:   return r_asn1_create_string2 (\"REAL\", false);",
          "491:  case TAG_ENUMERATED:",
          "492:   return r_asn1_create_string2 (\"ENUMERATED\", false);",
          "493:  case TAG_EMBEDDED_PDV:",
          "494:   return r_asn1_create_string2 (\"EMBEDDED PDV\", false);",
          "495:  case TAG_UTF8STRING:",
          "496:   return r_asn1_create_string2 (\"UTF8String\", false);",
          "497:  case TAG_SEQUENCE:",
          "498:   return r_asn1_create_string2 (\"SEQUENCE\", false);",
          "499:  case TAG_SET:",
          "500:   return r_asn1_create_string2 (\"SET\", false);",
          "501:  case TAG_NUMERICSTRING:",
          "502:   return r_asn1_create_string2 (\"NumericString\", false);",
          "503:  case TAG_PRINTABLESTRING:",
          "504:   return r_asn1_create_string2 (\"PrintableString\", false);",
          "505:  case TAG_T61STRING:",
          "506:   return r_asn1_create_string2 (\"TeletexString\", false);",
          "507:  case TAG_VIDEOTEXSTRING:",
          "508:   return r_asn1_create_string2 (\"VideotexString\", false);",
          "509:  case TAG_IA5STRING:",
          "510:   return r_asn1_create_string2 (\"IA5String\", false);",
          "511:  case TAG_UTCTIME:",
          "512:   return r_asn1_create_string2 (\"UTCTime\", false);",
          "513:  case TAG_GENERALIZEDTIME:",
          "514:   return r_asn1_create_string2 (\"GeneralizedTime\", false);",
          "515:  case TAG_GRAPHICSTRING:",
          "516:   return r_asn1_create_string2 (\"GraphicString\", false);",
          "517:  case TAG_VISIBLESTRING:",
          "518:   return r_asn1_create_string2 (\"VisibleString\", false);",
          "519:  case TAG_GENERALSTRING:",
          "520:   return r_asn1_create_string2 (\"GeneralString\", false);",
          "521:  case TAG_UNIVERSALSTRING:",
          "522:   return r_asn1_create_string2 (\"UniversalString\", false);",
          "523:  case TAG_BMPSTRING:",
          "524:   return r_asn1_create_string2 (\"BMPString\", false);",
          "525:  }",
          "526:  return r_asn1_create_string2 (\"Unknown tag\", false);",
          "527: }",
          "529: RASN1String *asn1_stringify_sector (RASN1Object *object) {",
          "530:  if (!object) {",
          "531:   return NULL;",
          "532:  }",
          "533:  switch (object->tag) {",
          "534:  case TAG_EOC:",
          "535:   return NULL;",
          "536:  case TAG_BOOLEAN:",
          "537:   return r_asn1_create_string2 (object->sector[0] == 0 ? \"false\" : \"true\", false);",
          "538:  case TAG_REAL:",
          "539:  case TAG_INTEGER:",
          "540:   if (object->length < 16) {",
          "541:    return r_asn1_stringify_integer (object->sector, object->length);",
          "542:   } else {",
          "543:    return r_asn1_stringify_bytes (object->sector, object->length);",
          "544:   }",
          "545:  case TAG_BITSTRING:",
          "547:   return r_asn1_stringify_bits (object->sector, object->length);",
          "551:  case TAG_OCTETSTRING:",
          "552:   return r_asn1_stringify_bytes (object->sector, object->length);",
          "553:  case TAG_NULL:",
          "554:   return NULL;",
          "555:  case TAG_OID:",
          "556:   return r_asn1_stringify_oid (object->sector, object->length);",
          "561:  case TAG_UTF8STRING:",
          "564:  case TAG_NUMERICSTRING:",
          "565:  case TAG_PRINTABLESTRING:",
          "568:  case TAG_IA5STRING:",
          "569:  case TAG_VISIBLESTRING:",
          "570:   return r_asn1_stringify_string (object->sector, object->length);",
          "571:  case TAG_UTCTIME:",
          "572:   return r_asn1_stringify_utctime (object->sector, object->length);",
          "573:  case TAG_GENERALIZEDTIME:",
          "574:   return r_asn1_stringify_time (object->sector, object->length);",
          "579:  }",
          "580:  return NULL;",
          "581: }",
          "",
          "---------------"
        ],
        "libr/util/r_asn1_internal.h||libr/util/r_asn1_internal.h": [
          "File: libr/util/r_asn1_internal.h -> libr/util/r_asn1_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_ASN1_INTERNAL_H",
          "2: #define R_ASN1_INTERNAL_H",
          "4: R_API ut32 r_asn1_count_objects (const ut8 *buffer, ut32 length);",
          "5: R_API RASN1String *r_asn1_create_string (const char *string, bool allocated, ut32 length);",
          "6: R_API RASN1String *r_asn1_create_string2 (const char *string, bool allocated);",
          "7: R_API RASN1String *r_asn1_concatenate_strings (RASN1String* s0, RASN1String* s1, bool freestr);",
          "",
          "---------------"
        ],
        "libr/util/r_oids.h||libr/util/r_oids.h": [
          "File: libr/util/r_oids.h -> libr/util/r_oids.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef OIDS_H",
          "2: #define OIDS_H",
          "4: #ifdef __cplusplus",
          "5: extern \"C\" {",
          "6: #endif",
          "8: struct r_oid_list_t {",
          "9:  const char* oid;",
          "10:  const char* name;",
          "11: } X509OIDList [2230] = {",
          "12:  {\"0.2.262.1.10\", \"Telesec\"},",
          "13:  {\"0.2.262.1.10.0\", \"extension\"},",
          "14:  {\"0.2.262.1.10.1\", \"mechanism\"},",
          "15:  {\"0.2.262.1.10.1.0\", \"authentication\"},",
          "16:  {\"0.2.262.1.10.1.0.1\", \"passwordAuthentication\"},",
          "17:  {\"0.2.262.1.10.1.0.2\", \"protectedPasswordAuthentication\"},",
          "18:  {\"0.2.262.1.10.1.0.3\", \"oneWayX509Authentication\"},",
          "19:  {\"0.2.262.1.10.1.0.4\", \"twoWayX509Authentication\"},",
          "20:  {\"0.2.262.1.10.1.0.5\", \"threeWayX509Authentication\"},",
          "21:  {\"0.2.262.1.10.1.0.6\", \"oneWayISO9798Authentication\"},",
          "22:  {\"0.2.262.1.10.1.0.7\", \"twoWayISO9798Authentication\"},",
          "23:  {\"0.2.262.1.10.1.0.8\", \"telekomAuthentication\"},",
          "24:  {\"0.2.262.1.10.1.1\", \"signature\"},",
          "25:  {\"0.2.262.1.10.1.1.1\", \"md4WithRSAAndISO9697\"},",
          "26:  {\"0.2.262.1.10.1.1.2\", \"md4WithRSAAndTelesecSignatureStandard\"},",
          "27:  {\"0.2.262.1.10.1.1.3\", \"md5WithRSAAndISO9697\"},",
          "28:  {\"0.2.262.1.10.1.1.4\", \"md5WithRSAAndTelesecSignatureStandard\"},",
          "29:  {\"0.2.262.1.10.1.1.5\", \"ripemd160WithRSAAndTelekomSignatureStandard\"},",
          "30:  {\"0.2.262.1.10.1.1.9\", \"hbciRsaSignature\"},",
          "31:  {\"0.2.262.1.10.1.2\", \"encryption\"},",
          "32:  {\"0.2.262.1.10.1.2.0\", \"none\"},",
          "33:  {\"0.2.262.1.10.1.2.1\", \"rsaTelesec\"},",
          "34:  {\"0.2.262.1.10.1.2.2\", \"des\"},",
          "35:  {\"0.2.262.1.10.1.2.2.1\", \"desECB\"},",
          "36:  {\"0.2.262.1.10.1.2.2.2\", \"desCBC\"},",
          "37:  {\"0.2.262.1.10.1.2.2.3\", \"desOFB\"},",
          "38:  {\"0.2.262.1.10.1.2.2.4\", \"desCFB8\"},",
          "39:  {\"0.2.262.1.10.1.2.2.5\", \"desCFB64\"},",
          "40:  {\"0.2.262.1.10.1.2.3\", \"des3\"},",
          "41:  {\"0.2.262.1.10.1.2.3.1\", \"des3ECB\"},",
          "42:  {\"0.2.262.1.10.1.2.3.2\", \"des3CBC\"},",
          "43:  {\"0.2.262.1.10.1.2.3.3\", \"des3OFB\"},",
          "44:  {\"0.2.262.1.10.1.2.3.4\", \"des3CFB8\"},",
          "45:  {\"0.2.262.1.10.1.2.3.5\", \"des3CFB64\"},",
          "46:  {\"0.2.262.1.10.1.2.4\", \"magenta\"},",
          "47:  {\"0.2.262.1.10.1.2.5\", \"idea\"},",
          "48:  {\"0.2.262.1.10.1.2.5.1\", \"ideaECB\"},",
          "49:  {\"0.2.262.1.10.1.2.5.2\", \"ideaCBC\"},",
          "50:  {\"0.2.262.1.10.1.2.5.3\", \"ideaOFB\"},",
          "51:  {\"0.2.262.1.10.1.2.5.4\", \"ideaCFB8\"},",
          "52:  {\"0.2.262.1.10.1.2.5.5\", \"ideaCFB64\"},",
          "53:  {\"0.2.262.1.10.1.3\", \"oneWayFunction\"},",
          "54:  {\"0.2.262.1.10.1.3.1\", \"md4\"},",
          "55:  {\"0.2.262.1.10.1.3.2\", \"md5\"},",
          "56:  {\"0.2.262.1.10.1.3.3\", \"sqModNX509\"},",
          "57:  {\"0.2.262.1.10.1.3.4\", \"sqModNISO\"},",
          "58:  {\"0.2.262.1.10.1.3.5\", \"ripemd128\"},",
          "59:  {\"0.2.262.1.10.1.3.6\", \"hashUsingBlockCipher\"},",
          "60:  {\"0.2.262.1.10.1.3.7\", \"mac\"},",
          "61:  {\"0.2.262.1.10.1.3.8\", \"ripemd160\"},",
          "62:  {\"0.2.262.1.10.1.4\", \"fecFunction\"},",
          "63:  {\"0.2.262.1.10.1.4.1\", \"reedSolomon\"},",
          "64:  {\"0.2.262.1.10.2\", \"module\"},",
          "65:  {\"0.2.262.1.10.2.0\", \"algorithms\"},",
          "66:  {\"0.2.262.1.10.2.1\", \"attributeTypes\"},",
          "67:  {\"0.2.262.1.10.2.2\", \"certificateTypes\"},",
          "68:  {\"0.2.262.1.10.2.3\", \"messageTypes\"},",
          "69:  {\"0.2.262.1.10.2.4\", \"plProtocol\"},",
          "70:  {\"0.2.262.1.10.2.5\", \"smeAndComponentsOfSme\"},",
          "71:  {\"0.2.262.1.10.2.6\", \"fec\"},",
          "72:  {\"0.2.262.1.10.2.7\", \"usefulDefinitions\"},",
          "73:  {\"0.2.262.1.10.2.8\", \"stefiles\"},",
          "74:  {\"0.2.262.1.10.2.9\", \"sadmib\"},",
          "75:  {\"0.2.262.1.10.2.10\", \"electronicOrder\"},",
          "76:  {\"0.2.262.1.10.2.11\", \"telesecTtpAsymmetricApplication\"},",
          "77:  {\"0.2.262.1.10.2.12\", \"telesecTtpBasisApplication\"},",
          "78:  {\"0.2.262.1.10.2.13\", \"telesecTtpMessages\"},",
          "79:  {\"0.2.262.1.10.2.14\", \"telesecTtpTimeStampApplication\"},",
          "80:  {\"0.2.262.1.10.3\", \"objectClass\"},",
          "81:  {\"0.2.262.1.10.3.0\", \"telesecOtherName\"},",
          "82:  {\"0.2.262.1.10.3.1\", \"directory\"},",
          "83:  {\"0.2.262.1.10.3.2\", \"directoryType\"},",
          "84:  {\"0.2.262.1.10.3.3\", \"directoryGroup\"},",
          "85:  {\"0.2.262.1.10.3.4\", \"directoryUser\"},",
          "86:  {\"0.2.262.1.10.3.5\", \"symmetricKeyEntry\"},",
          "87:  {\"0.2.262.1.10.4\", \"package\"},",
          "88:  {\"0.2.262.1.10.5\", \"parameter\"},",
          "89:  {\"0.2.262.1.10.6\", \"nameBinding\"},",
          "90:  {\"0.2.262.1.10.7\", \"attribute\"},",
          "91:  {\"0.2.262.1.10.7.0\", \"applicationGroupIdentifier\"},",
          "92:  {\"0.2.262.1.10.7.1\", \"certificateType\"},",
          "93:  {\"0.2.262.1.10.7.2\", \"telesecCertificate\"},",
          "94:  {\"0.2.262.1.10.7.3\", \"certificateNumber\"},",
          "95:  {\"0.2.262.1.10.7.4\", \"certificateRevocationList\"},",
          "96:  {\"0.2.262.1.10.7.5\", \"creationDate\"},",
          "97:  {\"0.2.262.1.10.7.6\", \"issuer\"},",
          "98:  {\"0.2.262.1.10.7.7\", \"namingAuthority\"},",
          "99:  {\"0.2.262.1.10.7.8\", \"publicKeyDirectory\"},",
          "100:  {\"0.2.262.1.10.7.9\", \"securityDomain\"},",
          "101:  {\"0.2.262.1.10.7.10\", \"subject\"},",
          "102:  {\"0.2.262.1.10.7.11\", \"timeOfRevocation\"},",
          "103:  {\"0.2.262.1.10.7.12\", \"userGroupReference\"},",
          "104:  {\"0.2.262.1.10.7.13\", \"validity\"},",
          "105:  {\"0.2.262.1.10.7.14\", \"zert93\"},",
          "106:  {\"0.2.262.1.10.7.15\", \"securityMessEnv\"},",
          "107:  {\"0.2.262.1.10.7.16\", \"anonymizedPublicKeyDirectory\"},",
          "108:  {\"0.2.262.1.10.7.17\", \"telesecGivenName\"},",
          "109:  {\"0.2.262.1.10.7.18\", \"nameAdditions\"},",
          "110:  {\"0.2.262.1.10.7.19\", \"telesecPostalCode\"},",
          "111:  {\"0.2.262.1.10.7.20\", \"nameDistinguisher\"},",
          "112:  {\"0.2.262.1.10.7.21\", \"telesecCertificateList\"},",
          "113:  {\"0.2.262.1.10.7.22\", \"teletrustCertificateList\"},",
          "114:  {\"0.2.262.1.10.7.23\", \"x509CertificateList\"},",
          "115:  {\"0.2.262.1.10.7.24\", \"timeOfIssue\"},",
          "116:  {\"0.2.262.1.10.7.25\", \"physicalCardNumber\"},",
          "117:  {\"0.2.262.1.10.7.26\", \"fileType\"},",
          "118:  {\"0.2.262.1.10.7.27\", \"ctlFileIsArchive\"},",
          "119:  {\"0.2.262.1.10.7.28\", \"emailAddress\"},",
          "120:  {\"0.2.262.1.10.7.29\", \"certificateTemplateList\"},",
          "121:  {\"0.2.262.1.10.7.30\", \"directoryName\"},",
          "122:  {\"0.2.262.1.10.7.31\", \"directoryTypeName\"},",
          "123:  {\"0.2.262.1.10.7.32\", \"directoryGroupName\"},",
          "124:  {\"0.2.262.1.10.7.33\", \"directoryUserName\"},",
          "125:  {\"0.2.262.1.10.7.34\", \"revocationFlag\"},",
          "126:  {\"0.2.262.1.10.7.35\", \"symmetricKeyEntryName\"},",
          "127:  {\"0.2.262.1.10.7.36\", \"glNumber\"},",
          "128:  {\"0.2.262.1.10.7.37\", \"goNumber\"},",
          "129:  {\"0.2.262.1.10.7.38\", \"gKeyData\"},",
          "130:  {\"0.2.262.1.10.7.39\", \"zKeyData\"},",
          "131:  {\"0.2.262.1.10.7.40\", \"ktKeyData\"},",
          "132:  {\"0.2.262.1.10.7.41\", \"ktKeyNumber\"},",
          "133:  {\"0.2.262.1.10.7.51\", \"timeOfRevocationGen\"},",
          "134:  {\"0.2.262.1.10.7.52\", \"liabilityText\"},",
          "135:  {\"0.2.262.1.10.8\", \"attributeGroup\"},",
          "136:  {\"0.2.262.1.10.9\", \"action\"},",
          "137:  {\"0.2.262.1.10.10\", \"notification\"},",
          "138:  {\"0.2.262.1.10.11\", \"snmp-mibs\"},",
          "139:  {\"0.2.262.1.10.11.1\", \"securityApplication\"},",
          "140:  {\"0.2.262.1.10.12\", \"certAndCrlExtensionDefinitions\"},",
          "141:  {\"0.2.262.1.10.12.0\", \"liabilityLimitationFlag\"},",
          "142:  {\"0.2.262.1.10.12.1\", \"telesecCertIdExt\"},",
          "143:  {\"0.2.262.1.10.12.2\", \"Telesec.policyIdentifier\"},",
          "144:  {\"0.2.262.1.10.12.3\", \"telesecPolicyQualifierID\"},",
          "145:  {\"0.2.262.1.10.12.4\", \"telesecCRLFilteredExt\"},",
          "146:  {\"0.2.262.1.10.12.5\", \"telesecCRLFilterExt\"},",
          "147:  {\"0.2.262.1.10.12.6\", \"telesecNamingAuthorityExt\"},",
          "148:  {\"0.4.0.127.0.7\", \"bsi\"},",
          "149:  {\"0.4.0.127.0.7.1\", \"bsiEcc\"},",
          "150:  {\"0.4.0.127.0.7.1.1\", \"bsifieldType\"},",
          "151:  {\"0.4.0.127.0.7.1.1.1\", \"bsiPrimeField\"},",
          "152:  {\"0.4.0.127.0.7.1.1.2\", \"bsiCharacteristicTwoField\"},",
          "153:  {\"0.4.0.127.0.7.1.1.2.2\", \"bsiECTLVKeyFormat\"},",
          "154:  {\"0.4.0.127.0.7.1.1.2.2.1\", \"bsiECTLVPublicKey\"},",
          "155:  {\"0.4.0.127.0.7.1.1.2.3\", \"bsiCharacteristicTwoBasis\"},",
          "156:  {\"0.4.0.127.0.7.1.1.2.3.1\", \"bsiGnBasis\"},",
          "157:  {\"0.4.0.127.0.7.1.1.2.3.2\", \"bsiTpBasis\"},",
          "158:  {\"0.4.0.127.0.7.1.1.2.3.3\", \"bsiPpBasis\"},",
          "159:  {\"0.4.0.127.0.7.1.1.4.1\", \"bsiEcdsaSignatures\"},",
          "160:  {\"0.4.0.127.0.7.1.1.4.1.1\", \"bsiEcdsaWithSHA1\"},",
          "161:  {\"0.4.0.127.0.7.1.1.4.1.2\", \"bsiEcdsaWithSHA224\"},",
          "162:  {\"0.4.0.127.0.7.1.1.4.1.3\", \"bsiEcdsaWithSHA256\"},",
          "163:  {\"0.4.0.127.0.7.1.1.4.1.4\", \"bsiEcdsaWithSHA384\"},",
          "164:  {\"0.4.0.127.0.7.1.1.4.1.5\", \"bsiEcdsaWithSHA512\"},",
          "165:  {\"0.4.0.127.0.7.1.1.4.1.6\", \"bsiEcdsaWithRIPEMD160\"},",
          "166:  {\"0.4.0.127.0.7.1.1.5.1.1\", \"bsiEckaEgX963KDF\"},",
          "167:  {\"0.4.0.127.0.7.1.1.5.1.1.1\", \"bsiEckaEgX963KDFWithSHA1\"},",
          "168:  {\"0.4.0.127.0.7.1.1.5.1.1.2\", \"bsiEckaEgX963KDFWithSHA224\"},",
          "169:  {\"0.4.0.127.0.7.1.1.5.1.1.3\", \"bsiEckaEgX963KDFWithSHA256\"},",
          "170:  {\"0.4.0.127.0.7.1.1.5.1.1.4\", \"bsiEckaEgX963KDFWithSHA384\"},",
          "171:  {\"0.4.0.127.0.7.1.1.5.1.1.5\", \"bsiEckaEgX963KDFWithSHA512\"},",
          "172:  {\"0.4.0.127.0.7.1.1.5.1.1.6\", \"bsiEckaEgX963KDFWithRIPEMD160\"},",
          "173:  {\"0.4.0.127.0.7.1.1.5.1.2\", \"bsiEckaEgSessionKDF\"},",
          "174:  {\"0.4.0.127.0.7.1.1.5.1.2.1\", \"bsiEckaEgSessionKDFWith3DES\"},",
          "175:  {\"0.4.0.127.0.7.1.1.5.1.2.2\", \"bsiEckaEgSessionKDFWithAES128\"},",
          "176:  {\"0.4.0.127.0.7.1.1.5.1.2.3\", \"bsiEckaEgSessionKDFWithAES192\"},",
          "177:  {\"0.4.0.127.0.7.1.1.5.1.2.4\", \"bsiEckaEgSessionKDFWithAES256\"},",
          "178:  {\"0.4.0.127.0.7.1.1.5.2\", \"bsiEckaDH\"},",
          "179:  {\"0.4.0.127.0.7.1.1.5.2.1\", \"bsiEckaDHX963KDF\"},",
          "180:  {\"0.4.0.127.0.7.1.1.5.2.1.1\", \"bsiEckaDHX963KDFWithSHA1\"},",
          "181:  {\"0.4.0.127.0.7.1.1.5.2.1.2\", \"bsiEckaDHX963KDFWithSHA224\"},",
          "182:  {\"0.4.0.127.0.7.1.1.5.2.1.3\", \"bsiEckaDHX963KDFWithSHA256\"},",
          "183:  {\"0.4.0.127.0.7.1.1.5.2.1.4\", \"bsiEckaDHX963KDFWithSHA384\"},",
          "184:  {\"0.4.0.127.0.7.1.1.5.2.1.5\", \"bsiEckaDHX963KDFWithSHA512\"},",
          "185:  {\"0.4.0.127.0.7.1.1.5.2.1.6\", \"bsiEckaDHX963KDFWithRIPEMD160\"},",
          "186:  {\"0.4.0.127.0.7.1.1.5.2.2\", \"bsiEckaDHSessionKDF\"},",
          "187:  {\"0.4.0.127.0.7.1.1.5.2.2.1\", \"bsiEckaDHSessionKDFWith3DES\"},",
          "188:  {\"0.4.0.127.0.7.1.1.5.2.2.2\", \"bsiEckaDHSessionKDFWithAES128\"},",
          "189:  {\"0.4.0.127.0.7.1.1.5.2.2.3\", \"bsiEckaDHSessionKDFWithAES192\"},",
          "190:  {\"0.4.0.127.0.7.1.1.5.2.2.4\", \"bsiEckaDHSessionKDFWithAES256\"},",
          "191:  {\"0.4.0.127.0.7.1.2\", \"bsiEcKeyType\"},",
          "192:  {\"0.4.0.127.0.7.1.2.1\", \"bsiEcPublicKey\"},",
          "193:  {\"0.4.0.127.0.7.1.5.1\", \"bsiKaeg\"},",
          "194:  {\"0.4.0.127.0.7.1.5.1.1\", \"bsiKaegWithX963KDF\"},",
          "195:  {\"0.4.0.127.0.7.1.5.1.2\", \"bsiKaegWith3DESKDF\"},",
          "196:  {\"0.4.0.127.0.7.2.2.1\", \"bsiPK\"},",
          "197:  {\"0.4.0.127.0.7.2.2.1.1\", \"bsiPK_DH\"},",
          "198:  {\"0.4.0.127.0.7.2.2.1.2\", \"bsiPK_ECDH\"},",
          "199:  {\"0.4.0.127.0.7.2.2.2\", \"bsiTA\"},",
          "200:  {\"0.4.0.127.0.7.2.2.2.1\", \"bsiTA_RSA\"},",
          "201:  {\"0.4.0.127.0.7.2.2.2.1.1\", \"bsiTA_RSAv1_5_SHA1\"},",
          "202:  {\"0.4.0.127.0.7.2.2.2.1.2\", \"bsiTA_RSAv1_5_SHA256\"},",
          "203:  {\"0.4.0.127.0.7.2.2.2.1.3\", \"bsiTA_RSAPSS_SHA1\"},",
          "204:  {\"0.4.0.127.0.7.2.2.2.1.4\", \"bsiTA_RSAPSS_SHA256\"},",
          "205:  {\"0.4.0.127.0.7.2.2.2.1.5\", \"bsiTA_RSAv1_5_SHA512\"},",
          "206:  {\"0.4.0.127.0.7.2.2.2.1.6\", \"bsiTA_RSAPSS_SHA512\"},",
          "207:  {\"0.4.0.127.0.7.2.2.2.2\", \"bsiTA_ECDSA\"},",
          "208:  {\"0.4.0.127.0.7.2.2.2.2.1\", \"bsiTA_ECDSA_SHA1\"},",
          "209:  {\"0.4.0.127.0.7.2.2.2.2.2\", \"bsiTA_ECDSA_SHA224\"},",
          "210:  {\"0.4.0.127.0.7.2.2.2.2.3\", \"bsiTA_ECDSA_SHA256\"},",
          "211:  {\"0.4.0.127.0.7.2.2.2.2.4\", \"bsiTA_ECDSA_SHA384\"},",
          "212:  {\"0.4.0.127.0.7.2.2.2.2.5\", \"bsiTA_ECDSA_SHA512\"},",
          "213:  {\"0.4.0.127.0.7.2.2.3\", \"bsiCA\"},",
          "214:  {\"0.4.0.127.0.7.2.2.3.1\", \"bsiCA_DH\"},",
          "215:  {\"0.4.0.127.0.7.2.2.3.1.1\", \"bsiCA_DH_3DES_CBC_CBC\"},",
          "216:  {\"0.4.0.127.0.7.2.2.3.1.2\", \"bsiCA_DH_AES_CBC_CMAC_128\"},",
          "217:  {\"0.4.0.127.0.7.2.2.3.1.3\", \"bsiCA_DH_AES_CBC_CMAC_192\"},",
          "218:  {\"0.4.0.127.0.7.2.2.3.1.4\", \"bsiCA_DH_AES_CBC_CMAC_256\"},",
          "219:  {\"0.4.0.127.0.7.2.2.3.2\", \"bsiCA_ECDH\"},",
          "220:  {\"0.4.0.127.0.7.2.2.3.2.1\", \"bsiCA_ECDH_3DES_CBC_CBC\"},",
          "221:  {\"0.4.0.127.0.7.2.2.3.2.2\", \"bsiCA_ECDH_AES_CBC_CMAC_128\"},",
          "222:  {\"0.4.0.127.0.7.2.2.3.2.3\", \"bsiCA_ECDH_AES_CBC_CMAC_192\"},",
          "223:  {\"0.4.0.127.0.7.2.2.3.2.4\", \"bsiCA_ECDH_AES_CBC_CMAC_256\"},",
          "224:  {\"0.4.0.127.0.7.2.2.4\", \"bsiPACE\"},",
          "225:  {\"0.4.0.127.0.7.2.2.4.1\", \"bsiPACE_DH_GM\"},",
          "226:  {\"0.4.0.127.0.7.2.2.4.1.1\", \"bsiPACE_DH_GM_3DES_CBC_CBC\"},",
          "227:  {\"0.4.0.127.0.7.2.2.4.1.2\", \"bsiPACE_DH_GM_AES_CBC_CMAC_128\"},",
          "228:  {\"0.4.0.127.0.7.2.2.4.1.3\", \"bsiPACE_DH_GM_AES_CBC_CMAC_192\"},",
          "229:  {\"0.4.0.127.0.7.2.2.4.1.4\", \"bsiPACE_DH_GM_AES_CBC_CMAC_256\"},",
          "230:  {\"0.4.0.127.0.7.2.2.4.2\", \"bsiPACE_ECDH_GM\"},",
          "231:  {\"0.4.0.127.0.7.2.2.4.2.1\", \"bsiPACE_ECDH_GM_3DES_CBC_CBC\"},",
          "232:  {\"0.4.0.127.0.7.2.2.4.2.2\", \"bsiPACE_ECDH_GM_AES_CBC_CMAC_128\"},",
          "233:  {\"0.4.0.127.0.7.2.2.4.2.3\", \"bsiPACE_ECDH_GM_AES_CBC_CMAC_192\"},",
          "234:  {\"0.4.0.127.0.7.2.2.4.2.4\", \"bsiPACE_ECDH_GM_AES_CBC_CMAC_256\"},",
          "235:  {\"0.4.0.127.0.7.2.2.4.3\", \"bsiPACE_DH_IM\"},",
          "236:  {\"0.4.0.127.0.7.2.2.4.3.1\", \"bsiPACE_DH_IM_3DES_CBC_CBC\"},",
          "237:  {\"0.4.0.127.0.7.2.2.4.3.2\", \"bsiPACE_DH_IM_AES_CBC_CMAC_128\"},",
          "238:  {\"0.4.0.127.0.7.2.2.4.3.3\", \"bsiPACE_DH_IM_AES_CBC_CMAC_192\"},",
          "239:  {\"0.4.0.127.0.7.2.2.4.3.4\", \"bsiPACE_DH_IM_AES_CBC_CMAC_256\"},",
          "240:  {\"0.4.0.127.0.7.2.2.4.4\", \"bsiPACE_ECDH_IM\"},",
          "241:  {\"0.4.0.127.0.7.2.2.4.4.1\", \"bsiPACE_ECDH_IM_3DES_CBC_CBC\"},",
          "242:  {\"0.4.0.127.0.7.2.2.4.4.2\", \"bsiPACE_ECDH_IM_AES_CBC_CMAC_128\"},",
          "243:  {\"0.4.0.127.0.7.2.2.4.4.3\", \"bsiPACE_ECDH_IM_AES_CBC_CMAC_192\"},",
          "244:  {\"0.4.0.127.0.7.2.2.4.4.4\", \"bsiPACE_ECDH_IM_AES_CBC_CMAC_256\"},",
          "245:  {\"0.4.0.127.0.7.2.2.5\", \"bsiRI\"},",
          "246:  {\"0.4.0.127.0.7.2.2.5.1\", \"bsiRI_DH\"},",
          "247:  {\"0.4.0.127.0.7.2.2.5.1.1\", \"bsiRI_DH_SHA1\"},",
          "248:  {\"0.4.0.127.0.7.2.2.5.1.2\", \"bsiRI_DH_SHA224\"},",
          "249:  {\"0.4.0.127.0.7.2.2.5.1.3\", \"bsiRI_DH_SHA256\"},",
          "250:  {\"0.4.0.127.0.7.2.2.5.1.4\", \"bsiRI_DH_SHA384\"},",
          "251:  {\"0.4.0.127.0.7.2.2.5.1.5\", \"bsiRI_DH_SHA512\"},",
          "252:  {\"0.4.0.127.0.7.2.2.5.2\", \"bsiRI_ECDH\"},",
          "253:  {\"0.4.0.127.0.7.2.2.5.2.1\", \"bsiRI_ECDH_SHA1\"},",
          "254:  {\"0.4.0.127.0.7.2.2.5.2.2\", \"bsiRI_ECDH_SHA224\"},",
          "255:  {\"0.4.0.127.0.7.2.2.5.2.3\", \"bsiRI_ECDH_SHA256\"},",
          "256:  {\"0.4.0.127.0.7.2.2.5.2.4\", \"bsiRI_ECDH_SHA384\"},",
          "257:  {\"0.4.0.127.0.7.2.2.5.2.5\", \"bsiRI_ECDH_SHA512\"},",
          "258:  {\"0.4.0.127.0.7.2.2.6\", \"bsiCardInfo\"},",
          "259:  {\"0.4.0.127.0.7.2.2.7\", \"bsiEidSecurity\"},",
          "260:  {\"0.4.0.127.0.7.2.2.8\", \"bsiPT\"},",
          "261:  {\"0.4.0.127.0.7.3.1.2\", \"bsiEACRoles\"},",
          "262:  {\"0.4.0.127.0.7.3.1.2.1\", \"bsiEACRolesIS\"},",
          "263:  {\"0.4.0.127.0.7.3.1.2.2\", \"bsiEACRolesAT\"},",
          "264:  {\"0.4.0.127.0.7.3.1.2.3\", \"bsiEACRolesST\"},",
          "265:  {\"0.4.0.127.0.7.3.1.3\", \"bsiTAv2ce\"},",
          "266:  {\"0.4.0.127.0.7.3.1.3.1\", \"bsiTAv2ceDescription\"},",
          "267:  {\"0.4.0.127.0.7.3.1.3.1.1\", \"bsiTAv2ceDescriptionPlainText\"},",
          "268:  {\"0.4.0.127.0.7.3.1.3.1.2\", \"bsiTAv2ceDescriptionIA5String\"},",
          "269:  {\"0.4.0.127.0.7.3.1.3.1.3\", \"bsiTAv2ceDescriptionOctetString\"},",
          "270:  {\"0.4.0.127.0.7.3.1.3.2\", \"bsiTAv2ceTerminalSector\"},",
          "271:  {\"0.4.0.127.0.7.3.1.4\", \"bsiAuxData\"},",
          "272:  {\"0.4.0.127.0.7.3.1.4.1\", \"bsiAuxDataBirthday\"},",
          "273:  {\"0.4.0.127.0.7.3.1.4.2\", \"bsiAuxDataExpireDate\"},",
          "274:  {\"0.4.0.127.0.7.3.1.4.3\", \"bsiAuxDataCommunityID\"},",
          "275:  {\"0.4.0.127.0.7.3.1.5\", \"bsiDefectList\"},",
          "276:  {\"0.4.0.127.0.7.3.1.5.1\", \"bsiDefectAuthDefect\"},",
          "277:  {\"0.4.0.127.0.7.3.1.5.1.1\", \"bsiDefectCertRevoked\"},",
          "278:  {\"0.4.0.127.0.7.3.1.5.1.2\", \"bsiDefectCertReplaced\"},",
          "279:  {\"0.4.0.127.0.7.3.1.5.1.3\", \"bsiDefectChipAuthKeyRevoked\"},",
          "280:  {\"0.4.0.127.0.7.3.1.5.1.4\", \"bsiDefectActiveAuthKeyRevoked\"},",
          "281:  {\"0.4.0.127.0.7.3.1.5.2\", \"bsiDefectEPassportDefect\"},",
          "282:  {\"0.4.0.127.0.7.3.1.5.2.1\", \"bsiDefectEPassportDGMalformed\"},",
          "283:  {\"0.4.0.127.0.7.3.1.5.2.2\", \"bsiDefectSODInvalid\"},",
          "284:  {\"0.4.0.127.0.7.3.1.5.3\", \"bsiDefectEIDDefect\"},",
          "285:  {\"0.4.0.127.0.7.3.1.5.3.1\", \"bsiDefectEIDDGMalformed\"},",
          "286:  {\"0.4.0.127.0.7.3.1.5.3.2\", \"bsiDefectEIDIntegrity\"},",
          "287:  {\"0.4.0.127.0.7.3.1.5.4\", \"bsiDefectDocumentDefect\"},",
          "288:  {\"0.4.0.127.0.7.3.1.5.4.1\", \"bsiDefectCardSecurityMalformed\"},",
          "289:  {\"0.4.0.127.0.7.3.1.5.4.2\", \"bsiDefectChipSecurityMalformed\"},",
          "290:  {\"0.4.0.127.0.7.3.1.5.4.3\", \"bsiDefectPowerDownReq\"},",
          "291:  {\"0.4.0.127.0.7.3.1.6\", \"bsiListContentDescription\"},",
          "292:  {\"0.4.0.127.0.7.3.2.1\", \"bsiSecurityObject\"},",
          "293:  {\"0.4.0.127.0.7.3.2.2\", \"bsiBlackList\"},",
          "294:  {\"0.4.0.1862\", \"etsiQcsProfile\"},",
          "295:  {\"0.4.0.1862.1\", \"etsiQcs\"},",
          "296:  {\"0.4.0.1862.1.1\", \"etsiQcsCompliance\"},",
          "297:  {\"0.4.0.1862.1.2\", \"etsiQcsLimitValue\"},",
          "298:  {\"0.4.0.1862.1.3\", \"etsiQcsRetentionPeriod\"},",
          "299:  {\"0.4.0.1862.1.4\", \"etsiQcsQcSSCD\"},",
          "300:  {\"0.9.2342.19200300.100.1.1\", \"userID\"},",
          "301:  {\"0.9.2342.19200300.100.1.3\", \"rfc822Mailbox\"},",
          "302:  {\"0.9.2342.19200300.100.1.25\", \"domainComponent\"},",
          "303:  {\"1.0.10118.3.0.49\", \"ripemd160\"},",
          "304:  {\"1.0.10118.3.0.50\", \"ripemd128\"},",
          "305:  {\"1.0.10118.3.0.55\", \"whirlpool\"},",
          "306:  {\"1.2.36.1.3.1.1.1\", \"qgpki\"},",
          "307:  {\"1.2.36.1.3.1.1.1.1\", \"qgpkiPolicies\"},",
          "308:  {\"1.2.36.1.3.1.1.1.1.1\", \"qgpkiMedIntermedCA\"},",
          "309:  {\"1.2.36.1.3.1.1.1.1.1.1\", \"qgpkiMedIntermedIndividual\"},",
          "310:  {\"1.2.36.1.3.1.1.1.1.1.2\", \"qgpkiMedIntermedDeviceControl\"},",
          "311:  {\"1.2.36.1.3.1.1.1.1.1.3\", \"qgpkiMedIntermedDevice\"},",
          "312:  {\"1.2.36.1.3.1.1.1.1.1.4\", \"qgpkiMedIntermedAuthorisedParty\"},",
          "313:  {\"1.2.36.1.3.1.1.1.1.1.5\", \"qgpkiMedIntermedDeviceSystem\"},",
          "314:  {\"1.2.36.1.3.1.1.1.1.2\", \"qgpkiMedIssuingCA\"},",
          "315:  {\"1.2.36.1.3.1.1.1.1.2.1\", \"qgpkiMedIssuingIndividual\"},",
          "316:  {\"1.2.36.1.3.1.1.1.1.2.2\", \"qgpkiMedIssuingDeviceControl\"},",
          "317:  {\"1.2.36.1.3.1.1.1.1.2.3\", \"qgpkiMedIssuingDevice\"},",
          "318:  {\"1.2.36.1.3.1.1.1.1.2.4\", \"qgpkiMedIssuingAuthorisedParty\"},",
          "319:  {\"1.2.36.1.3.1.1.1.1.2.5\", \"qgpkiMedIssuingClientAuth\"},",
          "320:  {\"1.2.36.1.3.1.1.1.1.2.6\", \"qgpkiMedIssuingServerAuth\"},",
          "321:  {\"1.2.36.1.3.1.1.1.1.2.7\", \"qgpkiMedIssuingDataProt\"},",
          "322:  {\"1.2.36.1.3.1.1.1.1.2.8\", \"qgpkiMedIssuingTokenAuth\"},",
          "323:  {\"1.2.36.1.3.1.1.1.1.3\", \"qgpkiBasicIntermedCA\"},",
          "324:  {\"1.2.36.1.3.1.1.1.1.3.1\", \"qgpkiBasicIntermedDeviceSystem\"},",
          "325:  {\"1.2.36.1.3.1.1.1.1.4\", \"qgpkiBasicIssuingCA\"},",
          "326:  {\"1.2.36.1.3.1.1.1.1.4.1\", \"qgpkiBasicIssuingClientAuth\"},",
          "327:  {\"1.2.36.1.3.1.1.1.1.4.2\", \"qgpkiBasicIssuingServerAuth\"},",
          "328:  {\"1.2.36.1.3.1.1.1.1.4.3\", \"qgpkiBasicIssuingDataSigning\"},",
          "329:  {\"1.2.36.1.3.1.1.1.2\", \"qgpkiAssuranceLevel\"},",
          "330:  {\"1.2.36.1.3.1.1.1.2.1\", \"qgpkiAssuranceRudimentary\"},",
          "331:  {\"1.2.36.1.3.1.1.1.2.2\", \"qgpkiAssuranceBasic\"},",
          "332:  {\"1.2.36.1.3.1.1.1.2.3\", \"qgpkiAssuranceMedium\"},",
          "333:  {\"1.2.36.1.3.1.1.1.2.4\", \"qgpkiAssuranceHigh\"},",
          "334:  {\"1.2.36.1.3.1.1.1.3\", \"qgpkiCertFunction\"},",
          "335:  {\"1.2.36.1.3.1.1.1.3.1\", \"qgpkiFunctionIndividual\"},",
          "336:  {\"1.2.36.1.3.1.1.1.3.2\", \"qgpkiFunctionDevice\"},",
          "337:  {\"1.2.36.1.3.1.1.1.3.3\", \"qgpkiFunctionAuthorisedParty\"},",
          "338:  {\"1.2.36.1.3.1.1.1.3.4\", \"qgpkiFunctionDeviceControl\"},",
          "339:  {\"1.2.36.1.3.1.2\", \"qpspki\"},",
          "340:  {\"1.2.36.1.3.1.2.1\", \"qpspkiPolicies\"},",
          "341:  {\"1.2.36.1.3.1.2.1.2\", \"qpspkiPolicyBasic\"},",
          "342:  {\"1.2.36.1.3.1.2.1.3\", \"qpspkiPolicyMedium\"},",
          "343:  {\"1.2.36.1.3.1.2.1.4\", \"qpspkiPolicyHigh\"},",
          "344:  {\"1.2.36.1.3.1.3.2\", \"qtmrpki\"},",
          "345:  {\"1.2.36.1.3.1.3.2.1\", \"qtmrpkiPolicies\"},",
          "346:  {\"1.2.36.1.3.1.3.2.2\", \"qtmrpkiPurpose\"},",
          "347:  {\"1.2.36.1.3.1.3.2.2.1\", \"qtmrpkiIndividual\"},",
          "348:  {\"1.2.36.1.3.1.3.2.2.2\", \"qtmrpkiDeviceControl\"},",
          "349:  {\"1.2.36.1.3.1.3.2.2.3\", \"qtmrpkiDevice\"},",
          "350:  {\"1.2.36.1.3.1.3.2.2.4\", \"qtmrpkiAuthorisedParty\"},",
          "351:  {\"1.2.36.1.3.1.3.2.2.5\", \"qtmrpkiDeviceSystem\"},",
          "352:  {\"1.2.36.1.3.1.3.2.3\", \"qtmrpkiDevice\"},",
          "353:  {\"1.2.36.1.3.1.3.2.3.1\", \"qtmrpkiDriverLicense\"},",
          "354:  {\"1.2.36.1.3.1.3.2.3.2\", \"qtmrpkiIndustryAuthority\"},",
          "355:  {\"1.2.36.1.3.1.3.2.3.3\", \"qtmrpkiMarineLicense\"},",
          "356:  {\"1.2.36.1.3.1.3.2.3.4\", \"qtmrpkiAdultProofOfAge\"},",
          "357:  {\"1.2.36.1.3.1.3.2.3.5\", \"qtmrpkiSam\"},",
          "358:  {\"1.2.36.1.3.1.3.2.4\", \"qtmrpkiAuthorisedParty\"},",
          "359:  {\"1.2.36.1.3.1.3.2.4.1\", \"qtmrpkiTransportInspector\"},",
          "360:  {\"1.2.36.1.3.1.3.2.4.2\", \"qtmrpkiPoliceOfficer\"},",
          "361:  {\"1.2.36.1.3.1.3.2.4.3\", \"qtmrpkiSystem\"},",
          "362:  {\"1.2.36.1.3.1.3.2.4.4\", \"qtmrpkiLiquorLicensingInspector\"},",
          "363:  {\"1.2.36.1.3.1.3.2.4.5\", \"qtmrpkiMarineEnforcementOfficer\"},",
          "364:  {\"1.2.36.1.333.1\", \"australianBusinessNumber\"},",
          "365:  {\"1.2.36.68980861.1.1.2\", \"signetPersonal\"},",
          "366:  {\"1.2.36.68980861.1.1.3\", \"signetBusiness\"},",
          "367:  {\"1.2.36.68980861.1.1.4\", \"signetLegal\"},",
          "368:  {\"1.2.36.68980861.1.1.10\", \"signetPilot\"},",
          "369:  {\"1.2.36.68980861.1.1.11\", \"signetIntraNet\"},",
          "370:  {\"1.2.36.68980861.1.1.20\", \"signetPolicy\"},",
          "371:  {\"1.2.36.75878867.1.100.1.1\", \"certificatesAustraliaPolicy\"},",
          "372:  {\"1.2.392.200011.61.1.1.1\", \"mitsubishiSecurityAlgorithm\"},",
          "373:  {\"1.2.392.200011.61.1.1.1.1\", \"misty1-cbc\"},",
          "374:  {\"1.2.410.200004.1\", \"kisaAlgorithm\"},",
          "375:  {\"1.2.410.200004.1.1\", \"kcdsa\"},",
          "376:  {\"1.2.410.200004.1.2\", \"has160\"},",
          "377:  {\"1.2.410.200004.1.3\", \"seedECB\"},",
          "378:  {\"1.2.410.200004.1.4\", \"seedCBC\"},",
          "379:  {\"1.2.410.200004.1.5\", \"seedOFB\"},",
          "380:  {\"1.2.410.200004.1.6\", \"seedCFB\"},",
          "381:  {\"1.2.410.200004.1.7\", \"seedMAC\"},",
          "382:  {\"1.2.410.200004.1.8\", \"kcdsaWithHAS160\"},",
          "383:  {\"1.2.410.200004.1.9\", \"kcdsaWithSHA1\"},",
          "384:  {\"1.2.410.200004.1.10\", \"pbeWithHAS160AndSEED-ECB\"},",
          "385:  {\"1.2.410.200004.1.11\", \"pbeWithHAS160AndSEED-CBC\"},",
          "386:  {\"1.2.410.200004.1.12\", \"pbeWithHAS160AndSEED-CFB\"},",
          "387:  {\"1.2.410.200004.1.13\", \"pbeWithHAS160AndSEED-OFB\"},",
          "388:  {\"1.2.410.200004.1.14\", \"pbeWithSHA1AndSEED-ECB\"},",
          "389:  {\"1.2.410.200004.1.15\", \"pbeWithSHA1AndSEED-CBC\"},",
          "390:  {\"1.2.410.200004.1.16\", \"pbeWithSHA1AndSEED-CFB\"},",
          "391:  {\"1.2.410.200004.1.17\", \"pbeWithSHA1AndSEED-OFB\"},",
          "392:  {\"1.2.410.200004.1.20\", \"rsaWithHAS160\"},",
          "393:  {\"1.2.410.200004.1.21\", \"kcdsa1\"},",
          "394:  {\"1.2.410.200004.2\", \"npkiCP\"},",
          "395:  {\"1.2.410.200004.2.1\", \"npkiSignaturePolicy\"},",
          "396:  {\"1.2.410.200004.3\", \"npkiKP\"},",
          "397:  {\"1.2.410.200004.4\", \"npkiAT\"},",
          "398:  {\"1.2.410.200004.5\", \"npkiLCA\"},",
          "399:  {\"1.2.410.200004.5.1\", \"npkiSignKorea\"},",
          "400:  {\"1.2.410.200004.5.2\", \"npkiSignGate\"},",
          "401:  {\"1.2.410.200004.5.3\", \"npkiNcaSign\"},",
          "402:  {\"1.2.410.200004.6\", \"npkiON\"},",
          "403:  {\"1.2.410.200004.7\", \"npkiAPP\"},",
          "404:  {\"1.2.410.200004.7.1\", \"npkiSMIME\"},",
          "405:  {\"1.2.410.200004.7.1.1\", \"npkiSMIMEAlgo\"},",
          "406:  {\"1.2.410.200004.7.1.1.1\", \"npkiCmsSEEDWrap\"},",
          "407:  {\"1.2.410.200004.10\", \"npki\"},",
          "408:  {\"1.2.410.200004.10.1\", \"npkiAttribute\"},",
          "409:  {\"1.2.410.200004.10.1.1\", \"npkiIdentifyData\"},",
          "410:  {\"1.2.410.200004.10.1.1.1\", \"npkiVID\"},",
          "411:  {\"1.2.410.200004.10.1.1.2\", \"npkiEncryptedVID\"},",
          "412:  {\"1.2.410.200004.10.1.1.3\", \"npkiRandomNum\"},",
          "413:  {\"1.2.410.200004.10.1.1.4\", \"npkiVID\"},",
          "414:  {\"1.2.410.200046.1.1\", \"aria1AlgorithmModes\"},",
          "415:  {\"1.2.410.200046.1.1.1\", \"aria128-ecb\"},",
          "416:  {\"1.2.410.200046.1.1.2\", \"aria128-cbc\"},",
          "417:  {\"1.2.410.200046.1.1.3\", \"aria128-cfb\"},",
          "418:  {\"1.2.410.200046.1.1.4\", \"aria128-ofb\"},",
          "419:  {\"1.2.410.200046.1.1.5\", \"aria128-ctr\"},",
          "420:  {\"1.2.410.200046.1.1.6\", \"aria192-ecb\"},",
          "421:  {\"1.2.410.200046.1.1.7\", \"aria192-cbc\"},",
          "422:  {\"1.2.410.200046.1.1.8\", \"aria192-cfb\"},",
          "423:  {\"1.2.410.200046.1.1.9\", \"aria192-ofb\"},",
          "424:  {\"1.2.410.200046.1.1.10\", \"aria192-ctr\"},",
          "425:  {\"1.2.410.200046.1.1.11\", \"aria256-ecb\"},",
          "426:  {\"1.2.410.200046.1.1.12\", \"aria256-cbc\"},",
          "427:  {\"1.2.410.200046.1.1.13\", \"aria256-cfb\"},",
          "428:  {\"1.2.410.200046.1.1.14\", \"aria256-ofb\"},",
          "429:  {\"1.2.410.200046.1.1.15\", \"aria256-ctr\"},",
          "430:  {\"1.2.410.200046.1.1.21\", \"aria128-cmac\"},",
          "431:  {\"1.2.410.200046.1.1.22\", \"aria192-cmac\"},",
          "432:  {\"1.2.410.200046.1.1.23\", \"aria256-cmac\"},",
          "433:  {\"1.2.410.200046.1.1.31\", \"aria128-ocb2\"},",
          "434:  {\"1.2.410.200046.1.1.32\", \"aria192-ocb2\"},",
          "435:  {\"1.2.410.200046.1.1.33\", \"aria256-ocb2\"},",
          "436:  {\"1.2.410.200046.1.1.34\", \"aria128-gcm\"},",
          "437:  {\"1.2.410.200046.1.1.35\", \"aria192-gcm\"},",
          "438:  {\"1.2.410.200046.1.1.36\", \"aria256-gcm\"},",
          "439:  {\"1.2.410.200046.1.1.37\", \"aria128-ccm\"},",
          "440:  {\"1.2.410.200046.1.1.38\", \"aria192-ccm\"},",
          "441:  {\"1.2.410.200046.1.1.39\", \"aria256-ccm\"},",
          "442:  {\"1.2.410.200046.1.1.40\", \"aria128-keywrap\"},",
          "443:  {\"1.2.410.200046.1.1.41\", \"aria192-keywrap\"},",
          "444:  {\"1.2.410.200046.1.1.42\", \"aria256-keywrap\"},",
          "445:  {\"1.2.410.200046.1.1.43\", \"aria128-keywrapWithPad\"},",
          "446:  {\"1.2.410.200046.1.1.44\", \"aria192-keywrapWithPad\"},",
          "447:  {\"1.2.410.200046.1.1.45\", \"aria256-keywrapWithPad\"},",
          "448:  {\"1.2.643.2.2.3\", \"gostSignature\"},",
          "449:  {\"1.2.643.2.2.4\", \"gost94Signature\"},",
          "450:  {\"1.2.643.2.2.19\", \"gostPublicKey\"},",
          "451:  {\"1.2.643.2.2.20\", \"gost94PublicKey\"},",
          "452:  {\"1.2.643.2.2.21\", \"gostCipher\"},",
          "453:  {\"1.2.643.2.2.31.0\", \"testCipherParams\"},",
          "454:  {\"1.2.643.2.2.31.1\", \"cryptoProCipherA\"},",
          "455:  {\"1.2.643.2.2.31.2\", \"cryptoProCipherB\"},",
          "456:  {\"1.2.643.2.2.31.3\", \"cryptoProCipherC\"},",
          "457:  {\"1.2.643.2.2.31.4\", \"cryptoProCipherD\"},",
          "458:  {\"1.2.643.2.2.31.5\", \"oscar11Cipher\"},",
          "459:  {\"1.2.643.2.2.31.6\", \"oscar10Cipher\"},",
          "460:  {\"1.2.643.2.2.31.7\", \"ric1Cipher\"},",
          "461:  {\"1.2.643.2.2.9\", \"gostDigest\"},",
          "462:  {\"1.2.643.2.2.30.0\", \"testDigestParams\"},",
          "463:  {\"1.2.643.2.2.30.1\", \"cryptoProDigestA\"},",
          "464:  {\"1.2.643.2.2.35.0\", \"testSignParams\"},",
          "465:  {\"1.2.643.2.2.35.1\", \"cryptoProSignA\"},",
          "466:  {\"1.2.643.2.2.35.2\", \"cryptoProSignB\"},",
          "467:  {\"1.2.643.2.2.35.3\", \"cryptoProSignC\"},",
          "468:  {\"1.2.643.2.2.36.0\", \"cryptoProSignXA\"},",
          "469:  {\"1.2.643.2.2.36.1\", \"cryptoProSignXB\"},",
          "470:  {\"1.2.643.2.2.14.0\", \"nullMeshing\"},",
          "471:  {\"1.2.643.2.2.14.1\", \"cryptoProMeshing\"},",
          "472:  {\"1.2.643.2.2.10\", \"hmacGost\"},",
          "473:  {\"1.2.643.2.2.13.0\", \"gostWrap\"},",
          "474:  {\"1.2.643.2.2.13.1\", \"cryptoProWrap\"},",
          "475:  {\"1.2.643.2.2.96\", \"cryptoProECDHWrap\"},",
          "476:  {\"1.2.752.34.1\", \"seis-cp\"},",
          "477:  {\"1.2.752.34.1.1\", \"SEIS.high-assurance.policyIdentifier\"},",
          "478:  {\"1.2.752.34.1.2\", \"SEIS.GAK.policyIdentifier\"},",
          "479:  {\"1.2.752.34.2\", \"SEIS.pe\"},",
          "480:  {\"1.2.752.34.3\", \"SEIS.at\"},",
          "481:  {\"1.2.752.34.3.1\", \"SEIS.at-personalIdentifier\"},",
          "482:  {\"1.2.840.10040.1\", \"module\"},",
          "483:  {\"1.2.840.10040.1.1\", \"x9f1-cert-mgmt\"},",
          "484:  {\"1.2.840.10040.2\", \"holdinstruction\"},",
          "485:  {\"1.2.840.10040.2.1\", \"holdinstruction-none\"},",
          "486:  {\"1.2.840.10040.2.2\", \"callissuer\"},",
          "487:  {\"1.2.840.10040.2.3\", \"reject\"},",
          "488:  {\"1.2.840.10040.2.4\", \"pickupToken\"},",
          "489:  {\"1.2.840.10040.3\", \"attribute\"},",
          "490:  {\"1.2.840.10040.3.1\", \"countersignature\"},",
          "491:  {\"1.2.840.10040.3.2\", \"attribute-cert\"},",
          "492:  {\"1.2.840.10040.4\", \"algorithm\"},",
          "493:  {\"1.2.840.10040.4.1\", \"dsa\"},",
          "494:  {\"1.2.840.10040.4.2\", \"dsa-match\"},",
          "495:  {\"1.2.840.10040.4.3\", \"dsaWithSha1\"},",
          "496:  {\"1.2.840.10045.1\", \"fieldType\"},",
          "497:  {\"1.2.840.10045.1.1\", \"prime-field\"},",
          "498:  {\"1.2.840.10045.1.2\", \"characteristic-two-field\"},",
          "499:  {\"1.2.840.10045.1.2.3\", \"characteristic-two-basis\"},",
          "500:  {\"1.2.840.10045.1.2.3.1\", \"onBasis\"},",
          "501:  {\"1.2.840.10045.1.2.3.2\", \"tpBasis\"},",
          "502:  {\"1.2.840.10045.1.2.3.3\", \"ppBasis\"},",
          "503:  {\"1.2.840.10045.2\", \"publicKeyType\"},",
          "504:  {\"1.2.840.10045.2.1\", \"ecPublicKey\"},",
          "505:  {\"1.2.840.10045.3.0.1\", \"c2pnb163v1\"},",
          "506:  {\"1.2.840.10045.3.0.2\", \"c2pnb163v2\"},",
          "507:  {\"1.2.840.10045.3.0.3\", \"c2pnb163v3\"},",
          "508:  {\"1.2.840.10045.3.0.5\", \"c2tnb191v1\"},",
          "509:  {\"1.2.840.10045.3.0.6\", \"c2tnb191v2\"},",
          "510:  {\"1.2.840.10045.3.0.7\", \"c2tnb191v3\"},",
          "511:  {\"1.2.840.10045.3.0.10\", \"c2pnb208w1\"},",
          "512:  {\"1.2.840.10045.3.0.11\", \"c2tnb239v1\"},",
          "513:  {\"1.2.840.10045.3.0.12\", \"c2tnb239v2\"},",
          "514:  {\"1.2.840.10045.3.0.13\", \"c2tnb239v3\"},",
          "515:  {\"1.2.840.10045.3.0.16\", \"c2pnb272w1\"},",
          "516:  {\"1.2.840.10045.3.0.18\", \"c2tnb359v1\"},",
          "517:  {\"1.2.840.10045.3.0.19\", \"c2pnb368w1\"},",
          "518:  {\"1.2.840.10045.3.0.20\", \"c2tnb431r1\"},",
          "519:  {\"1.2.840.10045.3.1.1\", \"prime192v1\"},",
          "520:  {\"1.2.840.10045.3.1.2\", \"prime192v2\"},",
          "521:  {\"1.2.840.10045.3.1.3\", \"prime192v3\"},",
          "522:  {\"1.2.840.10045.3.1.4\", \"prime239v1\"},",
          "523:  {\"1.2.840.10045.3.1.5\", \"prime239v2\"},",
          "524:  {\"1.2.840.10045.3.1.6\", \"prime239v3\"},",
          "525:  {\"1.2.840.10045.3.1.7\", \"prime256v1\"},",
          "526:  {\"1.2.840.10045.4.1\", \"ecdsaWithSHA1\"},",
          "527:  {\"1.2.840.10045.4.2\", \"ecdsaWithRecommended\"},",
          "528:  {\"1.2.840.10045.4.3\", \"ecdsaWithSpecified\"},",
          "529:  {\"1.2.840.10045.4.3.1\", \"ecdsaWithSHA224\"},",
          "530:  {\"1.2.840.10045.4.3.2\", \"ecdsaWithSHA256\"},",
          "531:  {\"1.2.840.10045.4.3.3\", \"ecdsaWithSHA384\"},",
          "532:  {\"1.2.840.10045.4.3.4\", \"ecdsaWithSHA512\"},",
          "533:  {\"1.2.840.10046.1\", \"fieldType\"},",
          "534:  {\"1.2.840.10046.1.1\", \"gf-prime\"},",
          "535:  {\"1.2.840.10046.2\", \"numberType\"},",
          "536:  {\"1.2.840.10046.2.1\", \"dhPublicKey\"},",
          "537:  {\"1.2.840.10046.3\", \"scheme\"},",
          "538:  {\"1.2.840.10046.3.1\", \"dhStatic\"},",
          "539:  {\"1.2.840.10046.3.2\", \"dhEphem\"},",
          "540:  {\"1.2.840.10046.3.3\", \"dhHybrid1\"},",
          "541:  {\"1.2.840.10046.3.4\", \"dhHybrid2\"},",
          "542:  {\"1.2.840.10046.3.5\", \"mqv2\"},",
          "543:  {\"1.2.840.10046.3.6\", \"mqv1\"},",
          "544:  {\"1.2.840.10065.2.2\", \"?\"},",
          "545:  {\"1.2.840.10065.2.3\", \"healthcareLicense\"},",
          "546:  {\"1.2.840.10065.2.3.1.1\", \"license?\"},",
          "547:  {\"1.2.840.10070.\", \"iec62351\"},",
          "548:  {\"1.2.840.10070.8\", \"iec62351_8\"},",
          "549:  {\"1.2.840.10070.8.1\", \"iecUserRoles\"},",
          "550:  {\"1.2.840.113533.7\", \"nsn\"},",
          "551:  {\"1.2.840.113533.7.65\", \"nsn-ce\"},",
          "552:  {\"1.2.840.113533.7.65.0\", \"entrustVersInfo\"},",
          "553:  {\"1.2.840.113533.7.66\", \"nsn-alg\"},",
          "554:  {\"1.2.840.113533.7.66.3\", \"cast3CBC\"},",
          "555:  {\"1.2.840.113533.7.66.10\", \"cast5CBC\"},",
          "556:  {\"1.2.840.113533.7.66.11\", \"cast5MAC\"},",
          "557:  {\"1.2.840.113533.7.66.12\", \"pbeWithMD5AndCAST5-CBC\"},",
          "558:  {\"1.2.840.113533.7.66.13\", \"passwordBasedMac\"},",
          "559:  {\"1.2.840.113533.7.67\", \"nsn-oc\"},",
          "560:  {\"1.2.840.113533.7.67.0\", \"entrustUser\"},",
          "561:  {\"1.2.840.113533.7.68\", \"nsn-at\"},",
          "562:  {\"1.2.840.113533.7.68.0\", \"entrustCAInfo\"},",
          "563:  {\"1.2.840.113533.7.68.10\", \"attributeCertificate\"},",
          "564:  {\"1.2.840.113549.1.1\", \"pkcs-1\"},",
          "565:  {\"1.2.840.113549.1.1.1\", \"rsaEncryption\"},",
          "566:  {\"1.2.840.113549.1.1.2\", \"md2WithRSAEncryption\"},",
          "567:  {\"1.2.840.113549.1.1.3\", \"md4WithRSAEncryption\"},",
          "568:  {\"1.2.840.113549.1.1.4\", \"md5WithRSAEncryption\"},",
          "569:  {\"1.2.840.113549.1.1.5\", \"sha1WithRSAEncryption\"},",
          "570:  {\"1.2.840.113549.1.1.7\", \"rsaOAEP\"},",
          "571:  {\"1.2.840.113549.1.1.8\", \"pkcs1-MGF\"},",
          "572:  {\"1.2.840.113549.1.1.9\", \"rsaOAEP-pSpecified\"},",
          "573:  {\"1.2.840.113549.1.1.10\", \"rsaPSS\"},",
          "574:  {\"1.2.840.113549.1.1.11\", \"sha256WithRSAEncryption\"},",
          "575:  {\"1.2.840.113549.1.1.12\", \"sha384WithRSAEncryption\"},",
          "576:  {\"1.2.840.113549.1.1.13\", \"sha512WithRSAEncryption\"},",
          "577:  {\"1.2.840.113549.1.1.14\", \"sha224WithRSAEncryption\"},",
          "578:  {\"1.2.840.113549.1.1.6\", \"rsaOAEPEncryptionSET\"},",
          "579:  {\"1.2.840.113549.1.2\", \"bsafeRsaEncr\"},",
          "580:  {\"1.2.840.113549.1.3\", \"pkcs-3\"},",
          "581:  {\"1.2.840.113549.1.3.1\", \"dhKeyAgreement\"},",
          "582:  {\"1.2.840.113549.1.5\", \"pkcs-5\"},",
          "583:  {\"1.2.840.113549.1.5.1\", \"pbeWithMD2AndDES-CBC\"},",
          "584:  {\"1.2.840.113549.1.5.3\", \"pbeWithMD5AndDES-CBC\"},",
          "585:  {\"1.2.840.113549.1.5.4\", \"pbeWithMD2AndRC2-CBC\"},",
          "586:  {\"1.2.840.113549.1.5.6\", \"pbeWithMD5AndRC2-CBC\"},",
          "587:  {\"1.2.840.113549.1.5.9\", \"pbeWithMD5AndXOR\"},",
          "588:  {\"1.2.840.113549.1.5.10\", \"pbeWithSHAAndDES-CBC\"},",
          "589:  {\"1.2.840.113549.1.5.12\", \"pkcs5PBKDF2\"},",
          "590:  {\"1.2.840.113549.1.5.13\", \"pkcs5PBES2\"},",
          "591:  {\"1.2.840.113549.1.5.14\", \"pkcs5PBMAC1\"},",
          "592:  {\"1.2.840.113549.1.7\", \"pkcs-7\"},",
          "593:  {\"1.2.840.113549.1.7.1\", \"data\"},",
          "594:  {\"1.2.840.113549.1.7.2\", \"signedData\"},",
          "595:  {\"1.2.840.113549.1.7.3\", \"envelopedData\"},",
          "596:  {\"1.2.840.113549.1.7.4\", \"signedAndEnvelopedData\"},",
          "597:  {\"1.2.840.113549.1.7.5\", \"digestedData\"},",
          "598:  {\"1.2.840.113549.1.7.6\", \"encryptedData\"},",
          "599:  {\"1.2.840.113549.1.7.7\", \"dataWithAttributes\"},",
          "600:  {\"1.2.840.113549.1.7.8\", \"encryptedPrivateKeyInfo\"},",
          "601:  {\"1.2.840.113549.1.9\", \"pkcs-9\"},",
          "602:  {\"1.2.840.113549.1.9.1\", \"emailAddress\"},",
          "603:  {\"1.2.840.113549.1.9.2\", \"unstructuredName\"},",
          "604:  {\"1.2.840.113549.1.9.3\", \"contentType\"},",
          "605:  {\"1.2.840.113549.1.9.4\", \"messageDigest\"},",
          "606:  {\"1.2.840.113549.1.9.5\", \"signingTime\"},",
          "607:  {\"1.2.840.113549.1.9.6\", \"countersignature\"},",
          "608:  {\"1.2.840.113549.1.9.7\", \"challengePassword\"},",
          "609:  {\"1.2.840.113549.1.9.8\", \"unstructuredAddress\"},",
          "610:  {\"1.2.840.113549.1.9.9\", \"extendedCertificateAttributes\"},",
          "611:  {\"1.2.840.113549.1.9.10\", \"issuerAndSerialNumber\"},",
          "612:  {\"1.2.840.113549.1.9.11\", \"passwordCheck\"},",
          "613:  {\"1.2.840.113549.1.9.12\", \"publicKey\"},",
          "614:  {\"1.2.840.113549.1.9.13\", \"signingDescription\"},",
          "615:  {\"1.2.840.113549.1.9.14\", \"extensionRequest\"},",
          "616:  {\"1.2.840.113549.1.9.15\", \"sMIMECapabilities\"},",
          "617:  {\"1.2.840.113549.1.9.15.1\", \"preferSignedData\"},",
          "618:  {\"1.2.840.113549.1.9.15.2\", \"canNotDecryptAny\"},",
          "619:  {\"1.2.840.113549.1.9.15.3\", \"receiptRequest\"},",
          "620:  {\"1.2.840.113549.1.9.15.4\", \"receipt\"},",
          "621:  {\"1.2.840.113549.1.9.15.5\", \"contentHints\"},",
          "622:  {\"1.2.840.113549.1.9.15.6\", \"mlExpansionHistory\"},",
          "623:  {\"1.2.840.113549.1.9.16\", \"id-sMIME\"},",
          "624:  {\"1.2.840.113549.1.9.16.0\", \"id-mod\"},",
          "625:  {\"1.2.840.113549.1.9.16.0.1\", \"id-mod-cms\"},",
          "626:  {\"1.2.840.113549.1.9.16.0.2\", \"id-mod-ess\"},",
          "627:  {\"1.2.840.113549.1.9.16.0.3\", \"id-mod-oid\"},",
          "628:  {\"1.2.840.113549.1.9.16.0.4\", \"id-mod-msg-v3\"},",
          "629:  {\"1.2.840.113549.1.9.16.0.5\", \"id-mod-ets-eSignature-88\"},",
          "630:  {\"1.2.840.113549.1.9.16.0.6\", \"id-mod-ets-eSignature-97\"},",
          "631:  {\"1.2.840.113549.1.9.16.0.7\", \"id-mod-ets-eSigPolicy-88\"},",
          "632:  {\"1.2.840.113549.1.9.16.0.8\", \"id-mod-ets-eSigPolicy-88\"},",
          "633:  {\"1.2.840.113549.1.9.16.1\", \"contentType\"},",
          "634:  {\"1.2.840.113549.1.9.16.1.1\", \"receipt\"},",
          "635:  {\"1.2.840.113549.1.9.16.1.2\", \"authData\"},",
          "636:  {\"1.2.840.113549.1.9.16.1.3\", \"publishCert\"},",
          "637:  {\"1.2.840.113549.1.9.16.1.4\", \"tSTInfo\"},",
          "638:  {\"1.2.840.113549.1.9.16.1.5\", \"tDTInfo\"},",
          "639:  {\"1.2.840.113549.1.9.16.1.6\", \"contentInfo\"},",
          "640:  {\"1.2.840.113549.1.9.16.1.7\", \"dVCSRequestData\"},",
          "641:  {\"1.2.840.113549.1.9.16.1.8\", \"dVCSResponseData\"},",
          "642:  {\"1.2.840.113549.1.9.16.1.9\", \"compressedData\"},",
          "643:  {\"1.2.840.113549.1.9.16.1.10\", \"scvpCertValRequest\"},",
          "644:  {\"1.2.840.113549.1.9.16.1.11\", \"scvpCertValResponse\"},",
          "645:  {\"1.2.840.113549.1.9.16.1.12\", \"scvpValPolRequest\"},",
          "646:  {\"1.2.840.113549.1.9.16.1.13\", \"scvpValPolResponse\"},",
          "647:  {\"1.2.840.113549.1.9.16.1.14\", \"attrCertEncAttrs\"},",
          "648:  {\"1.2.840.113549.1.9.16.1.15\", \"tSReq\"},",
          "649:  {\"1.2.840.113549.1.9.16.1.16\", \"firmwarePackage\"},",
          "650:  {\"1.2.840.113549.1.9.16.1.17\", \"firmwareLoadReceipt\"},",
          "651:  {\"1.2.840.113549.1.9.16.1.18\", \"firmwareLoadError\"},",
          "652:  {\"1.2.840.113549.1.9.16.1.19\", \"contentCollection\"},",
          "653:  {\"1.2.840.113549.1.9.16.1.20\", \"contentWithAttrs\"},",
          "654:  {\"1.2.840.113549.1.9.16.1.21\", \"encKeyWithID\"},",
          "655:  {\"1.2.840.113549.1.9.16.1.22\", \"encPEPSI\"},",
          "656:  {\"1.2.840.113549.1.9.16.1.23\", \"authEnvelopedData\"},",
          "657:  {\"1.2.840.113549.1.9.16.1.24\", \"routeOriginAttest\"},",
          "658:  {\"1.2.840.113549.1.9.16.1.25\", \"symmetricKeyPackage\"},",
          "659:  {\"1.2.840.113549.1.9.16.1.26\", \"rpkiManifest\"},",
          "660:  {\"1.2.840.113549.1.9.16.1.27\", \"asciiTextWithCRLF\"},",
          "661:  {\"1.2.840.113549.1.9.16.1.28\", \"xml\"},",
          "662:  {\"1.2.840.113549.1.9.16.1.29\", \"pdf\"},",
          "663:  {\"1.2.840.113549.1.9.16.1.30\", \"postscript\"},",
          "664:  {\"1.2.840.113549.1.9.16.1.31\", \"timestampedData\"},",
          "665:  {\"1.2.840.113549.1.9.16.1.32\", \"asAdjacencyAttest\"},",
          "666:  {\"1.2.840.113549.1.9.16.1.33\", \"rpkiTrustAnchor\"},",
          "667:  {\"1.2.840.113549.1.9.16.1.34\", \"trustAnchorList\"},",
          "668:  {\"1.2.840.113549.1.9.16.2\", \"authenticatedAttributes\"},",
          "669:  {\"1.2.840.113549.1.9.16.2.1\", \"receiptRequest\"},",
          "670:  {\"1.2.840.113549.1.9.16.2.2\", \"securityLabel\"},",
          "671:  {\"1.2.840.113549.1.9.16.2.3\", \"mlExpandHistory\"},",
          "672:  {\"1.2.840.113549.1.9.16.2.4\", \"contentHint\"},",
          "673:  {\"1.2.840.113549.1.9.16.2.5\", \"msgSigDigest\"},",
          "674:  {\"1.2.840.113549.1.9.16.2.6\", \"encapContentType\"},",
          "675:  {\"1.2.840.113549.1.9.16.2.7\", \"contentIdentifier\"},",
          "676:  {\"1.2.840.113549.1.9.16.2.8\", \"macValue\"},",
          "677:  {\"1.2.840.113549.1.9.16.2.9\", \"equivalentLabels\"},",
          "678:  {\"1.2.840.113549.1.9.16.2.10\", \"contentReference\"},",
          "679:  {\"1.2.840.113549.1.9.16.2.11\", \"encrypKeyPref\"},",
          "680:  {\"1.2.840.113549.1.9.16.2.12\", \"signingCertificate\"},",
          "681:  {\"1.2.840.113549.1.9.16.2.13\", \"smimeEncryptCerts\"},",
          "682:  {\"1.2.840.113549.1.9.16.2.14\", \"timeStampToken\"},",
          "683:  {\"1.2.840.113549.1.9.16.2.15\", \"sigPolicyId\"},",
          "684:  {\"1.2.840.113549.1.9.16.2.16\", \"commitmentType\"},",
          "685:  {\"1.2.840.113549.1.9.16.2.17\", \"signerLocation\"},",
          "686:  {\"1.2.840.113549.1.9.16.2.18\", \"signerAttr\"},",
          "687:  {\"1.2.840.113549.1.9.16.2.19\", \"otherSigCert\"},",
          "688:  {\"1.2.840.113549.1.9.16.2.20\", \"contentTimestamp\"},",
          "689:  {\"1.2.840.113549.1.9.16.2.21\", \"certificateRefs\"},",
          "690:  {\"1.2.840.113549.1.9.16.2.22\", \"revocationRefs\"},",
          "691:  {\"1.2.840.113549.1.9.16.2.23\", \"certValues\"},",
          "692:  {\"1.2.840.113549.1.9.16.2.24\", \"revocationValues\"},",
          "693:  {\"1.2.840.113549.1.9.16.2.25\", \"escTimeStamp\"},",
          "694:  {\"1.2.840.113549.1.9.16.2.26\", \"certCRLTimestamp\"},",
          "695:  {\"1.2.840.113549.1.9.16.2.27\", \"archiveTimeStamp\"},",
          "696:  {\"1.2.840.113549.1.9.16.2.28\", \"signatureType\"},",
          "697:  {\"1.2.840.113549.1.9.16.2.29\", \"dvcsDvc\"},",
          "698:  {\"1.2.840.113549.1.9.16.2.30\", \"cekReference\"},",
          "699:  {\"1.2.840.113549.1.9.16.2.31\", \"maxCEKDecrypts\"},",
          "700:  {\"1.2.840.113549.1.9.16.2.32\", \"kekDerivationAlg\"},",
          "701:  {\"1.2.840.113549.1.9.16.2.33\", \"intendedRecipients\"},",
          "702:  {\"1.2.840.113549.1.9.16.2.34\", \"cmcUnsignedData\"},",
          "703:  {\"1.2.840.113549.1.9.16.2.35\", \"fwPackageID\"},",
          "704:  {\"1.2.840.113549.1.9.16.2.36\", \"fwTargetHardwareIDs\"},",
          "705:  {\"1.2.840.113549.1.9.16.2.37\", \"fwDecryptKeyID\"},",
          "706:  {\"1.2.840.113549.1.9.16.2.38\", \"fwImplCryptAlgs\"},",
          "707:  {\"1.2.840.113549.1.9.16.2.39\", \"fwWrappedFirmwareKey\"},",
          "708:  {\"1.2.840.113549.1.9.16.2.40\", \"fwCommunityIdentifiers\"},",
          "709:  {\"1.2.840.113549.1.9.16.2.41\", \"fwPkgMessageDigest\"},",
          "710:  {\"1.2.840.113549.1.9.16.2.42\", \"fwPackageInfo\"},",
          "711:  {\"1.2.840.113549.1.9.16.2.43\", \"fwImplCompressAlgs\"},",
          "712:  {\"1.2.840.113549.1.9.16.2.44\", \"etsAttrCertificateRefs\"},",
          "713:  {\"1.2.840.113549.1.9.16.2.45\", \"etsAttrRevocationRefs\"},",
          "714:  {\"1.2.840.113549.1.9.16.2.46\", \"binarySigningTime\"},",
          "715:  {\"1.2.840.113549.1.9.16.2.47\", \"signingCertificateV2\"},",
          "716:  {\"1.2.840.113549.1.9.16.2.48\", \"etsArchiveTimeStampV2\"},",
          "717:  {\"1.2.840.113549.1.9.16.2.49\", \"erInternal\"},",
          "718:  {\"1.2.840.113549.1.9.16.2.50\", \"erExternal\"},",
          "719:  {\"1.2.840.113549.1.9.16.2.51\", \"multipleSignatures\"},",
          "720:  {\"1.2.840.113549.1.9.16.3.1\", \"esDHwith3DES\"},",
          "721:  {\"1.2.840.113549.1.9.16.3.2\", \"esDHwithRC2\"},",
          "722:  {\"1.2.840.113549.1.9.16.3.3\", \"3desWrap\"},",
          "723:  {\"1.2.840.113549.1.9.16.3.4\", \"rc2Wrap\"},",
          "724:  {\"1.2.840.113549.1.9.16.3.5\", \"esDH\"},",
          "725:  {\"1.2.840.113549.1.9.16.3.6\", \"cms3DESwrap\"},",
          "726:  {\"1.2.840.113549.1.9.16.3.7\", \"cmsRC2wrap\"},",
          "727:  {\"1.2.840.113549.1.9.16.3.8\", \"zlib\"},",
          "728:  {\"1.2.840.113549.1.9.16.3.9\", \"pwriKEK\"},",
          "729:  {\"1.2.840.113549.1.9.16.3.10\", \"ssDH\"},",
          "730:  {\"1.2.840.113549.1.9.16.3.11\", \"hmacWith3DESwrap\"},",
          "731:  {\"1.2.840.113549.1.9.16.3.12\", \"hmacWithAESwrap\"},",
          "732:  {\"1.2.840.113549.1.9.16.3.13\", \"md5XorExperiment\"},",
          "733:  {\"1.2.840.113549.1.9.16.3.14\", \"rsaKEM\"},",
          "734:  {\"1.2.840.113549.1.9.16.3.15\", \"authEnc128\"},",
          "735:  {\"1.2.840.113549.1.9.16.3.16\", \"authEnc256\"},",
          "736:  {\"1.2.840.113549.1.9.16.4.1\", \"certDist-ldap\"},",
          "737:  {\"1.2.840.113549.1.9.16.5.1\", \"sigPolicyQualifier-spuri.x\"},",
          "738:  {\"1.2.840.113549.1.9.16.5.2\", \"sigPolicyQualifier-spUserNotice\"},",
          "739:  {\"1.2.840.113549.1.9.16.6.1\", \"proofOfOrigin\"},",
          "740:  {\"1.2.840.113549.1.9.16.6.2\", \"proofOfReceipt\"},",
          "741:  {\"1.2.840.113549.1.9.16.6.3\", \"proofOfDelivery\"},",
          "742:  {\"1.2.840.113549.1.9.16.6.4\", \"proofOfSender\"},",
          "743:  {\"1.2.840.113549.1.9.16.6.5\", \"proofOfApproval\"},",
          "744:  {\"1.2.840.113549.1.9.16.6.6\", \"proofOfCreation\"},",
          "745:  {\"1.2.840.113549.1.9.16.8.1\", \"glUseKEK\"},",
          "746:  {\"1.2.840.113549.1.9.16.8.2\", \"glDelete\"},",
          "747:  {\"1.2.840.113549.1.9.16.8.3\", \"glAddMember\"},",
          "748:  {\"1.2.840.113549.1.9.16.8.4\", \"glDeleteMember\"},",
          "749:  {\"1.2.840.113549.1.9.16.8.5\", \"glRekey\"},",
          "750:  {\"1.2.840.113549.1.9.16.8.6\", \"glAddOwner\"},",
          "751:  {\"1.2.840.113549.1.9.16.8.7\", \"glRemoveOwner\"},",
          "752:  {\"1.2.840.113549.1.9.16.8.8\", \"glkCompromise\"},",
          "753:  {\"1.2.840.113549.1.9.16.8.9\", \"glkRefresh\"},",
          "754:  {\"1.2.840.113549.1.9.16.8.10\", \"glFailInfo\"},",
          "755:  {\"1.2.840.113549.1.9.16.8.11\", \"glaQueryRequest\"},",
          "756:  {\"1.2.840.113549.1.9.16.8.12\", \"glaQueryResponse\"},",
          "757:  {\"1.2.840.113549.1.9.16.8.13\", \"glProvideCert\"},",
          "758:  {\"1.2.840.113549.1.9.16.8.14\", \"glUpdateCert\"},",
          "759:  {\"1.2.840.113549.1.9.16.8.15\", \"glKey\"},",
          "760:  {\"1.2.840.113549.1.9.16.9\", \"signatureTypeIdentifier\"},",
          "761:  {\"1.2.840.113549.1.9.16.9.1\", \"originatorSig\"},",
          "762:  {\"1.2.840.113549.1.9.16.9.2\", \"domainSig\"},",
          "763:  {\"1.2.840.113549.1.9.16.9.3\", \"additionalAttributesSig\"},",
          "764:  {\"1.2.840.113549.1.9.16.9.4\", \"reviewSig\"},",
          "765:  {\"1.2.840.113549.1.9.16.11\", \"capabilities\"},",
          "766:  {\"1.2.840.113549.1.9.16.11.1\", \"preferBinaryInside\"},",
          "767:  {\"1.2.840.113549.1.9.20\", \"friendlyName.(for.PKCS.#12)\"},",
          "768:  {\"1.2.840.113549.1.9.21\", \"localKeyID.(for.PKCS.#12)\"},",
          "769:  {\"1.2.840.113549.1.9.22\", \"certTypes.(for.PKCS.#12)\"},",
          "770:  {\"1.2.840.113549.1.9.22.1\", \"x509Certificate.(for.PKCS.#12)\"},",
          "771:  {\"1.2.840.113549.1.9.22.2\", \"sdsiCertificate.(for.PKCS.#12)\"},",
          "772:  {\"1.2.840.113549.1.9.23\", \"crlTypes.(for.PKCS.#12)\"},",
          "773:  {\"1.2.840.113549.1.9.23.1\", \"x509Crl.(for.PKCS.#12)\"},",
          "774:  {\"1.2.840.113549.1.9.24\", \"pkcs9objectClass\"},",
          "775:  {\"1.2.840.113549.1.9.25\", \"pkcs9attributes\"},",
          "776:  {\"1.2.840.113549.1.9.25.1\", \"pkcs15Token\"},",
          "777:  {\"1.2.840.113549.1.9.25.2\", \"encryptedPrivateKeyInfo\"},",
          "778:  {\"1.2.840.113549.1.9.25.3\", \"randomNonce\"},",
          "779:  {\"1.2.840.113549.1.9.25.4\", \"sequenceNumber\"},",
          "780:  {\"1.2.840.113549.1.9.25.5\", \"pkcs7PDU\"},",
          "781:  {\"1.2.840.113549.1.9.26\", \"pkcs9syntax\"},",
          "782:  {\"1.2.840.113549.1.9.27\", \"pkcs9matchingRules\"},",
          "783:  {\"1.2.840.113549.1.12\", \"pkcs-12\"},",
          "784:  {\"1.2.840.113549.1.12.1\", \"pkcs-12-PbeIds\"},",
          "785:  {\"1.2.840.113549.1.12.1.1\", \"pbeWithSHAAnd128BitRC4\"},",
          "786:  {\"1.2.840.113549.1.12.1.2\", \"pbeWithSHAAnd40BitRC4\"},",
          "787:  {\"1.2.840.113549.1.12.1.3\", \"pbeWithSHAAnd3-KeyTripleDES-CBC\"},",
          "788:  {\"1.2.840.113549.1.12.1.4\", \"pbeWithSHAAnd2-KeyTripleDES-CBC\"},",
          "789:  {\"1.2.840.113549.1.12.1.5\", \"pbeWithSHAAnd128BitRC2-CBC\"},",
          "790:  {\"1.2.840.113549.1.12.1.6\", \"pbeWithSHAAnd40BitRC2-CBC\"},",
          "791:  {\"1.2.840.113549.1.12.2\", \"pkcs-12-ESPVKID\"},",
          "792:  {\"1.2.840.113549.1.12.2.1\", \"pkcs-12-PKCS8KeyShrouding\"},",
          "793:  {\"1.2.840.113549.1.12.3\", \"pkcs-12-BagIds\"},",
          "794:  {\"1.2.840.113549.1.12.3.1\", \"pkcs-12-keyBagId\"},",
          "795:  {\"1.2.840.113549.1.12.3.2\", \"pkcs-12-certAndCRLBagId\"},",
          "796:  {\"1.2.840.113549.1.12.3.3\", \"pkcs-12-secretBagId\"},",
          "797:  {\"1.2.840.113549.1.12.3.4\", \"pkcs-12-safeContentsId\"},",
          "798:  {\"1.2.840.113549.1.12.3.5\", \"pkcs-12-pkcs-8ShroudedKeyBagId\"},",
          "799:  {\"1.2.840.113549.1.12.4\", \"pkcs-12-CertBagID\"},",
          "800:  {\"1.2.840.113549.1.12.4.1\", \"pkcs-12-X509CertCRLBagID\"},",
          "801:  {\"1.2.840.113549.1.12.4.2\", \"pkcs-12-SDSICertBagID\"},",
          "802:  {\"1.2.840.113549.1.12.5\", \"pkcs-12-OID\"},",
          "803:  {\"1.2.840.113549.1.12.5.1\", \"pkcs-12-PBEID\"},",
          "804:  {\"1.2.840.113549.1.12.5.1.1\", \"pkcs-12-PBEWithSha1And128BitRC4\"},",
          "805:  {\"1.2.840.113549.1.12.5.1.2\", \"pkcs-12-PBEWithSha1And40BitRC4\"},",
          "806:  {\"1.2.840.113549.1.12.5.1.3\", \"pkcs-12-PBEWithSha1AndTripleDESCBC\"},",
          "807:  {\"1.2.840.113549.1.12.5.1.4\", \"pkcs-12-PBEWithSha1And128BitRC2CBC\"},",
          "808:  {\"1.2.840.113549.1.12.5.1.5\", \"pkcs-12-PBEWithSha1And40BitRC2CBC\"},",
          "809:  {\"1.2.840.113549.1.12.5.1.6\", \"pkcs-12-PBEWithSha1AndRC4\"},",
          "810:  {\"1.2.840.113549.1.12.5.1.7\", \"pkcs-12-PBEWithSha1AndRC2CBC\"},",
          "811:  {\"1.2.840.113549.1.12.5.2\", \"pkcs-12-EnvelopingID\"},",
          "812:  {\"1.2.840.113549.1.12.5.2.1\", \"pkcs-12-RSAEncryptionWith128BitRC4\"},",
          "813:  {\"1.2.840.113549.1.12.5.2.2\", \"pkcs-12-RSAEncryptionWith40BitRC4\"},",
          "814:  {\"1.2.840.113549.1.12.5.2.3\", \"pkcs-12-RSAEncryptionWithTripleDES\"},",
          "815:  {\"1.2.840.113549.1.12.5.3\", \"pkcs-12-SignatureID\"},",
          "816:  {\"1.2.840.113549.1.12.5.3.1\", \"pkcs-12-RSASignatureWithSHA1Digest\"},",
          "817:  {\"1.2.840.113549.1.12.10\", \"pkcs-12Version1\"},",
          "818:  {\"1.2.840.113549.1.12.10.1\", \"pkcs-12BadIds\"},",
          "819:  {\"1.2.840.113549.1.12.10.1.1\", \"pkcs-12-keyBag\"},",
          "820:  {\"1.2.840.113549.1.12.10.1.2\", \"pkcs-12-pkcs-8ShroudedKeyBag\"},",
          "821:  {\"1.2.840.113549.1.12.10.1.3\", \"pkcs-12-certBag\"},",
          "822:  {\"1.2.840.113549.1.12.10.1.4\", \"pkcs-12-crlBag\"},",
          "823:  {\"1.2.840.113549.1.12.10.1.5\", \"pkcs-12-secretBag\"},",
          "824:  {\"1.2.840.113549.1.12.10.1.6\", \"pkcs-12-safeContentsBag\"},",
          "825:  {\"1.2.840.113549.1.15.1\", \"pkcs15modules\"},",
          "826:  {\"1.2.840.113549.1.15.2\", \"pkcs15attributes\"},",
          "827:  {\"1.2.840.113549.1.15.3\", \"pkcs15contentType\"},",
          "828:  {\"1.2.840.113549.1.15.3.1\", \"pkcs15content\"},",
          "829:  {\"1.2.840.113549.2\", \"digestAlgorithm\"},",
          "830:  {\"1.2.840.113549.2.2\", \"md2\"},",
          "831:  {\"1.2.840.113549.2.4\", \"md4\"},",
          "832:  {\"1.2.840.113549.2.5\", \"md5\"},",
          "833:  {\"1.2.840.113549.2.7\", \"hmacWithSHA1\"},",
          "834:  {\"1.2.840.113549.2.8\", \"hmacWithSHA224\"},",
          "835:  {\"1.2.840.113549.2.9\", \"hmacWithSHA256\"},",
          "836:  {\"1.2.840.113549.2.10\", \"hmacWithSHA384\"},",
          "837:  {\"1.2.840.113549.2.11\", \"hmacWithSHA512\"},",
          "838:  {\"1.2.840.113549.3\", \"encryptionAlgorithm\"},",
          "839:  {\"1.2.840.113549.3.2\", \"rc2CBC\"},",
          "840:  {\"1.2.840.113549.3.3\", \"rc2ECB\"},",
          "841:  {\"1.2.840.113549.3.4\", \"rc4\"},",
          "842:  {\"1.2.840.113549.3.5\", \"rc4WithMAC\"},",
          "843:  {\"1.2.840.113549.3.6\", \"desx-CBC\"},",
          "844:  {\"1.2.840.113549.3.7\", \"des-EDE3-CBC\"},",
          "845:  {\"1.2.840.113549.3.8\", \"rc5CBC\"},",
          "846:  {\"1.2.840.113549.3.9\", \"rc5-CBCPad\"},",
          "847:  {\"1.2.840.113549.3.10\", \"desCDMF\"},",
          "848:  {\"1.2.840.114021.1.6.1\", \"Identrus.unknown.policyIdentifier\"},",
          "849:  {\"1.2.840.114021.4.1\", \"identrusOCSP\"},",
          "850:  {\"1.2.840.113556.1.2.241\", \"deliveryMechanism\"},",
          "851:  {\"1.2.840.113556.1.2.281\", \"ntSecurityDescriptor\"},",
          "852:  {\"1.2.840.113556.1.3.0\", \"site-Addressing\"},",
          "853:  {\"1.2.840.113556.1.3.13\", \"classSchema\"},",
          "854:  {\"1.2.840.113556.1.3.14\", \"attributeSchema\"},",
          "855:  {\"1.2.840.113556.1.3.17\", \"mailbox-Agent\"},",
          "856:  {\"1.2.840.113556.1.3.22\", \"mailbox\"},",
          "857:  {\"1.2.840.113556.1.3.23\", \"container\"},",
          "858:  {\"1.2.840.113556.1.3.46\", \"mailRecipient\"},",
          "859:  {\"1.2.840.113556.1.4.145\", \"revision\"},",
          "860:  {\"1.2.840.113556.1.4.1327\", \"pKIDefaultKeySpec\"},",
          "861:  {\"1.2.840.113556.1.4.1328\", \"pKIKeyUsage\"},",
          "862:  {\"1.2.840.113556.1.4.1329\", \"pKIMaxIssuingDepth\"},",
          "863:  {\"1.2.840.113556.1.4.1330\", \"pKICriticalExtensions\"},",
          "864:  {\"1.2.840.113556.1.4.1331\", \"pKIExpirationPeriod\"},",
          "865:  {\"1.2.840.113556.1.4.1332\", \"pKIOverlapPeriod\"},",
          "866:  {\"1.2.840.113556.1.4.1333\", \"pKIExtendedKeyUsage\"},",
          "867:  {\"1.2.840.113556.1.4.1334\", \"pKIDefaultCSPs\"},",
          "868:  {\"1.2.840.113556.1.4.1335\", \"pKIEnrollmentAccess\"},",
          "869:  {\"1.2.840.113556.1.4.1429\", \"msPKI-RA-Signature\"},",
          "870:  {\"1.2.840.113556.1.4.1430\", \"msPKI-Enrollment-Flag\"},",
          "871:  {\"1.2.840.113556.1.4.1431\", \"msPKI-Private-Key-Flag\"},",
          "872:  {\"1.2.840.113556.1.4.1432\", \"msPKI-Certificate-Name-Flag\"},",
          "873:  {\"1.2.840.113556.1.4.1433\", \"msPKI-Minimal-Key-Size\"},",
          "874:  {\"1.2.840.113556.1.4.1434\", \"msPKI-Template-Schema-Version\"},",
          "875:  {\"1.2.840.113556.1.4.1435\", \"msPKI-Template-Minor-Revision\"},",
          "876:  {\"1.2.840.113556.1.4.1436\", \"msPKI-Cert-Template-OID\"},",
          "877:  {\"1.2.840.113556.1.4.1437\", \"msPKI-Supersede-Templates\"},",
          "878:  {\"1.2.840.113556.1.4.1438\", \"msPKI-RA-Policies\"},",
          "879:  {\"1.2.840.113556.1.4.1439\", \"msPKI-Certificate-Policy\"},",
          "880:  {\"1.2.840.113556.1.4.1674\", \"msPKI-Certificate-Application-Policy\"},",
          "881:  {\"1.2.840.113556.1.4.1675\", \"msPKI-RA-Application-Policies\"},",
          "882:  {\"1.2.840.113556.4.3\", \"microsoftExcel\"},",
          "883:  {\"1.2.840.113556.4.4\", \"titledWithOID\"},",
          "884:  {\"1.2.840.113556.4.5\", \"microsoftPowerPoint\"},",
          "885:  {\"1.2.840.113583.1\", \"adobeAcrobat\"},",
          "886:  {\"1.2.840.113583.1.1\", \"acrobatSecurity\"},",
          "887:  {\"1.2.840.113583.1.1.1\", \"pdfPassword\"},",
          "888:  {\"1.2.840.113583.1.1.2\", \"pdfDefaultSigningCredential\"},",
          "889:  {\"1.2.840.113583.1.1.3\", \"pdfDefaultEncryptionCredential\"},",
          "890:  {\"1.2.840.113583.1.1.4\", \"pdfPasswordTimeout\"},",
          "891:  {\"1.2.840.113583.1.1.5\", \"pdfAuthenticDocumentsTrust\"},",
          "892:  {\"1.2.840.113583.1.1.6\", \"pdfDynamicContentTrust\"},",
          "893:  {\"1.2.840.113583.1.1.7\", \"pdfUbiquityTrust\"},",
          "894:  {\"1.2.840.113583.1.1.8\", \"pdfRevocationInfoArchival\"},",
          "895:  {\"1.2.840.113583.1.1.9\", \"pdfX509Extension\"},",
          "896:  {\"1.2.840.113583.1.1.9.1\", \"pdfTimeStamp\"},",
          "897:  {\"1.2.840.113583.1.1.9.2\", \"pdfArchiveRevInfo\"},",
          "898:  {\"1.2.840.113583.1.1.10\", \"pdfPPLKLiteCredential\"},",
          "899:  {\"1.2.840.113583.1.2.\", \"acrobatCPS\"},",
          "900:  {\"1.2.840.113583.1.2.1\", \"pdfAuthenticDocumentsCPS\"},",
          "901:  {\"1.2.840.113583.1.2.2\", \"pdfTestCPS\"},",
          "902:  {\"1.2.840.113583.1.2.3\", \"pdfUbiquityCPS\"},",
          "903:  {\"1.2.840.113583.1.2.4\", \"pdfAdhocCPS\"},",
          "904:  {\"1.2.840.113583.1.7\", \"acrobatUbiquity\"},",
          "905:  {\"1.2.840.113583.1.7.1\", \"pdfUbiquitySubRights\"},",
          "906:  {\"1.2.840.113583.1.9\", \"acrobatExtension\"},",
          "907:  {\"1.2.840.113628.114.1.7\", \"adobePKCS7\"},",
          "908:  {\"1.2.840.113635.100\", \"appleDataSecurity\"},",
          "909:  {\"1.2.840.113635.100.1\", \"appleTrustPolicy\"},",
          "910:  {\"1.2.840.113635.100.1.1\", \"appleISignTP\"},",
          "911:  {\"1.2.840.113635.100.1.2\", \"appleX509Basic\"},",
          "912:  {\"1.2.840.113635.100.1.3\", \"appleSSLPolicy\"},",
          "913:  {\"1.2.840.113635.100.1.4\", \"appleLocalCertGenPolicy\"},",
          "914:  {\"1.2.840.113635.100.1.5\", \"appleCSRGenPolicy\"},",
          "915:  {\"1.2.840.113635.100.1.6\", \"appleCRLPolicy\"},",
          "916:  {\"1.2.840.113635.100.1.7\", \"appleOCSPPolicy\"},",
          "917:  {\"1.2.840.113635.100.1.8\", \"appleSMIMEPolicy\"},",
          "918:  {\"1.2.840.113635.100.1.9\", \"appleEAPPolicy\"},",
          "919:  {\"1.2.840.113635.100.1.10\", \"appleSWUpdateSigningPolicy\"},",
          "920:  {\"1.2.840.113635.100.1.11\", \"appleIPSecPolicy\"},",
          "921:  {\"1.2.840.113635.100.1.12\", \"appleIChatPolicy\"},",
          "922:  {\"1.2.840.113635.100.1.13\", \"appleResourceSignPolicy\"},",
          "923:  {\"1.2.840.113635.100.1.14\", \"applePKINITClientPolicy\"},",
          "924:  {\"1.2.840.113635.100.1.15\", \"applePKINITServerPolicy\"},",
          "925:  {\"1.2.840.113635.100.1.16\", \"appleCodeSigningPolicy\"},",
          "926:  {\"1.2.840.113635.100.1.17\", \"applePackageSigningPolicy\"},",
          "927:  {\"1.2.840.113635.100.2\", \"appleSecurityAlgorithm\"},",
          "928:  {\"1.2.840.113635.100.2.1\", \"appleFEE\"},",
          "929:  {\"1.2.840.113635.100.2.2\", \"appleASC\"},",
          "930:  {\"1.2.840.113635.100.2.3\", \"appleFEE_MD5\"},",
          "931:  {\"1.2.840.113635.100.2.4\", \"appleFEE_SHA1\"},",
          "932:  {\"1.2.840.113635.100.2.5\", \"appleFEED\"},",
          "933:  {\"1.2.840.113635.100.2.6\", \"appleFEEDEXP\"},",
          "934:  {\"1.2.840.113635.100.2.7\", \"appleECDSA\"},",
          "935:  {\"1.2.840.113635.100.3\", \"appleDotMacCertificate\"},",
          "936:  {\"1.2.840.113635.100.3.1\", \"appleDotMacCertificateRequest\"},",
          "937:  {\"1.2.840.113635.100.3.2\", \"appleDotMacCertificateExtension\"},",
          "938:  {\"1.2.840.113635.100.3.3\", \"appleDotMacCertificateRequestValues\"},",
          "939:  {\"1.2.840.113635.100.4\", \"appleExtendedKeyUsage\"},",
          "940:  {\"1.2.840.113635.100.4.1\", \"appleCodeSigning\"},",
          "941:  {\"1.2.840.113635.100.4.1.1\", \"appleCodeSigningDevelopment\"},",
          "942:  {\"1.2.840.113635.100.4.1.2\", \"appleSoftwareUpdateSigning\"},",
          "943:  {\"1.2.840.113635.100.4.1.3\", \"appleCodeSigningThirdParty\"},",
          "944:  {\"1.2.840.113635.100.4.1.4\", \"appleResourceSigning\"},",
          "945:  {\"1.2.840.113635.100.4.2\", \"appleIChatSigning\"},",
          "946:  {\"1.2.840.113635.100.4.3\", \"appleIChatEncryption\"},",
          "947:  {\"1.2.840.113635.100.4.4\", \"appleSystemIdentity\"},",
          "948:  {\"1.2.840.113635.100.4.5\", \"appleCryptoEnv\"},",
          "949:  {\"1.2.840.113635.100.4.5.1\", \"appleCryptoProductionEnv\"},",
          "950:  {\"1.2.840.113635.100.4.5.2\", \"appleCryptoMaintenanceEnv\"},",
          "951:  {\"1.2.840.113635.100.4.5.3\", \"appleCryptoTestEnv\"},",
          "952:  {\"1.2.840.113635.100.4.5.4\", \"appleCryptoDevelopmentEnv\"},",
          "953:  {\"1.2.840.113635.100.4.6\", \"appleCryptoQoS\"},",
          "954:  {\"1.2.840.113635.100.4.6.1\", \"appleCryptoTier0QoS\"},",
          "955:  {\"1.2.840.113635.100.4.6.2\", \"appleCryptoTier1QoS\"},",
          "956:  {\"1.2.840.113635.100.4.6.3\", \"appleCryptoTier2QoS\"},",
          "957:  {\"1.2.840.113635.100.4.6.4\", \"appleCryptoTier3QoS\"},",
          "958:  {\"1.2.840.113635.100.5\", \"appleCertificatePolicies\"},",
          "959:  {\"1.2.840.113635.100.5.1\", \"appleCertificatePolicyID\"},",
          "960:  {\"1.2.840.113635.100.5.2\", \"appleDotMacCertificatePolicyID\"},",
          "961:  {\"1.2.840.113635.100.5.3\", \"appleADCCertificatePolicyID\"},",
          "962:  {\"1.2.840.113635.100.6\", \"appleCertificateExtensions\"},",
          "963:  {\"1.2.840.113635.100.6.1\", \"appleCertificateExtensionCodeSigning\"},",
          "964:  {\"1.2.840.113635.100.6.1.1\", \"appleCertificateExtensionAppleSigning\"},",
          "965:  {\"1.2.840.113635.100.6.1.2\", \"appleCertificateExtensionADCDeveloperSigning\"},",
          "966:  {\"1.2.840.113635.100.6.1.3\", \"appleCertificateExtensionADCAppleSigning\"},",
          "967:  {\"1.3.6.1.4.1.311.2.1.4\", \"spcIndirectDataContext\"},",
          "968:  {\"1.3.6.1.4.1.311.2.1.10\", \"spcAgencyInfo\"},",
          "969:  {\"1.3.6.1.4.1.311.2.1.11\", \"spcStatementType\"},",
          "970:  {\"1.3.6.1.4.1.311.2.1.12\", \"spcSpOpusInfo\"},",
          "971:  {\"1.3.6.1.4.1.311.2.1.14\", \"certReqExtensions\"},",
          "972:  {\"1.3.6.1.4.1.311.2.1.15\", \"spcPEImageData\"},",
          "973:  {\"1.3.6.1.4.1.311.2.1.18\", \"spcRawFileData\"},",
          "974:  {\"1.3.6.1.4.1.311.2.1.19\", \"spcStructuredStorageData\"},",
          "975:  {\"1.3.6.1.4.1.311.2.1.20\", \"spcJavaClassData.(type.1)\"},",
          "976:  {\"1.3.6.1.4.1.311.2.1.21\", \"individualCodeSigning\"},",
          "977:  {\"1.3.6.1.4.1.311.2.1.22\", \"commercialCodeSigning\"},",
          "978:  {\"1.3.6.1.4.1.311.2.1.25\", \"spcLink.(type.2)\"},",
          "979:  {\"1.3.6.1.4.1.311.2.1.26\", \"spcMinimalCriteriaInfo\"},",
          "980:  {\"1.3.6.1.4.1.311.2.1.27\", \"spcFinancialCriteriaInfo\"},",
          "981:  {\"1.3.6.1.4.1.311.2.1.28\", \"spcLink.(type.3)\"},",
          "982:  {\"1.3.6.1.4.1.311.2.1.29\", \"spcHashInfoObjID\"},",
          "983:  {\"1.3.6.1.4.1.311.2.1.30\", \"spcSipInfoObjID\"},",
          "984:  {\"1.3.6.1.4.1.311.2.2\", \"ctl\"},",
          "985:  {\"1.3.6.1.4.1.311.2.2.1\", \"ctlTrustedCodesigningCAList\"},",
          "986:  {\"1.3.6.1.4.1.311.2.2.2\", \"ctlTrustedClientAuthCAList\"},",
          "987:  {\"1.3.6.1.4.1.311.2.2.3\", \"ctlTrustedServerAuthCAList\"},",
          "988:  {\"1.3.6.1.4.1.311.3.2.1\", \"timestampRequest\"},",
          "989:  {\"1.3.6.1.4.1.311.3.3.1\", \"spcRFC3161\"},",
          "990:  {\"1.3.6.1.4.1.311.10.1\", \"certTrustList\"},",
          "991:  {\"1.3.6.1.4.1.311.10.1.1\", \"sortedCtl\"},",
          "992:  {\"1.3.6.1.4.1.311.10.2\", \"nextUpdateLocation\"},",
          "993:  {\"1.3.6.1.4.1.311.10.3.1\", \"certTrustListSigning\"},",
          "994:  {\"1.3.6.1.4.1.311.10.3.2\", \"timeStampSigning\"},",
          "995:  {\"1.3.6.1.4.1.311.10.3.3\", \"serverGatedCrypto\"},",
          "996:  {\"1.3.6.1.4.1.311.10.3.3.1\", \"serialized\"},",
          "997:  {\"1.3.6.1.4.1.311.10.3.4\", \"encryptedFileSystem\"},",
          "998:  {\"1.3.6.1.4.1.311.10.3.5\", \"whqlCrypto\"},",
          "999:  {\"1.3.6.1.4.1.311.10.3.6\", \"nt5Crypto\"},",
          "1000:  {\"1.3.6.1.4.1.311.10.3.7\", \"oemWHQLCrypto\"},",
          "1001:  {\"1.3.6.1.4.1.311.10.3.8\", \"embeddedNTCrypto\"},",
          "1002:  {\"1.3.6.1.4.1.311.10.3.9\", \"rootListSigner\"},",
          "1003:  {\"1.3.6.1.4.1.311.10.3.10\", \"qualifiedSubordination\"},",
          "1004:  {\"1.3.6.1.4.1.311.10.3.11\", \"keyRecovery\"},",
          "1005:  {\"1.3.6.1.4.1.311.10.3.12\", \"documentSigning\"},",
          "1006:  {\"1.3.6.1.4.1.311.10.3.13\", \"lifetimeSigning\"},",
          "1007:  {\"1.3.6.1.4.1.311.10.3.14\", \"mobileDeviceSoftware\"},",
          "1008:  {\"1.3.6.1.4.1.311.10.3.15\", \"smartDisplay\"},",
          "1009:  {\"1.3.6.1.4.1.311.10.3.16\", \"cspSignature\"},",
          "1010:  {\"1.3.6.1.4.1.311.10.3.4.1\", \"efsRecovery\"},",
          "1011:  {\"1.3.6.1.4.1.311.10.4.1\", \"yesnoTrustAttr\"},",
          "1012:  {\"1.3.6.1.4.1.311.10.5.1\", \"drm\"},",
          "1013:  {\"1.3.6.1.4.1.311.10.5.2\", \"drmIndividualization\"},",
          "1014:  {\"1.3.6.1.4.1.311.10.6.1\", \"licenses\"},",
          "1015:  {\"1.3.6.1.4.1.311.10.6.2\", \"licenseServer\"},",
          "1016:  {\"1.3.6.1.4.1.311.10.7.1\", \"keyidRdn\"},",
          "1017:  {\"1.3.6.1.4.1.311.10.8.1\", \"removeCertificate\"},",
          "1018:  {\"1.3.6.1.4.1.311.10.9.1\", \"crossCertDistPoints\"},",
          "1019:  {\"1.3.6.1.4.1.311.10.10.1\", \"cmcAddAttributes\"},",
          "1020:  {\"1.3.6.1.4.1.311.10.11\", \"certPropIdPrefix\"},",
          "1021:  {\"1.3.6.1.4.1.311.10.11.4\", \"certMd5HashPropId\"},",
          "1022:  {\"1.3.6.1.4.1.311.10.11.20\", \"certKeyIdentifierPropId\"},",
          "1023:  {\"1.3.6.1.4.1.311.10.11.28\", \"certIssuerSerialNumberMd5HashPropId\"},",
          "1024:  {\"1.3.6.1.4.1.311.10.11.29\", \"certSubjectNameMd5HashPropId\"},",
          "1025:  {\"1.3.6.1.4.1.311.10.12.1\", \"anyApplicationPolicy\"},",
          "1026:  {\"1.3.6.1.4.1.311.12\", \"catalog\"},",
          "1027:  {\"1.3.6.1.4.1.311.12.1.1\", \"catalogList\"},",
          "1028:  {\"1.3.6.1.4.1.311.12.1.2\", \"catalogListMember\"},",
          "1029:  {\"1.3.6.1.4.1.311.12.2.1\", \"catalogNameValueObjID\"},",
          "1030:  {\"1.3.6.1.4.1.311.12.2.2\", \"catalogMemberInfoObjID\"},",
          "1031:  {\"1.3.6.1.4.1.311.13.1\", \"renewalCertificate\"},",
          "1032:  {\"1.3.6.1.4.1.311.13.2.1\", \"enrolmentNameValuePair\"},",
          "1033:  {\"1.3.6.1.4.1.311.13.2.2\", \"enrolmentCSP\"},",
          "1034:  {\"1.3.6.1.4.1.311.13.2.3\", \"osVersion\"},",
          "1035:  {\"1.3.6.1.4.1.311.16.4\", \"microsoftRecipientInfo\"},",
          "1036:  {\"1.3.6.1.4.1.311.17.1\", \"pkcs12KeyProviderNameAttr\"},",
          "1037:  {\"1.3.6.1.4.1.311.17.2\", \"localMachineKeyset\"},",
          "1038:  {\"1.3.6.1.4.1.311.17.3\", \"pkcs12ExtendedAttributes\"},",
          "1039:  {\"1.3.6.1.4.1.311.20.1\", \"autoEnrollCtlUsage\"},",
          "1040:  {\"1.3.6.1.4.1.311.20.2\", \"enrollCerttypeExtension\"},",
          "1041:  {\"1.3.6.1.4.1.311.20.2.1\", \"enrollmentAgent\"},",
          "1042:  {\"1.3.6.1.4.1.311.20.2.2\", \"smartcardLogon\"},",
          "1043:  {\"1.3.6.1.4.1.311.20.2.3\", \"universalPrincipalName\"},",
          "1044:  {\"1.3.6.1.4.1.311.20.3\", \"certManifold\"},",
          "1045:  {\"1.3.6.1.4.1.311.21.1\", \"cAKeyCertIndexPair\"},",
          "1046:  {\"1.3.6.1.4.1.311.21.2\", \"certSrvPreviousCertHash\"},",
          "1047:  {\"1.3.6.1.4.1.311.21.3\", \"crlVirtualBase\"},",
          "1048:  {\"1.3.6.1.4.1.311.21.4\", \"crlNextPublish\"},",
          "1049:  {\"1.3.6.1.4.1.311.21.5\", \"caExchange\"},",
          "1050:  {\"1.3.6.1.4.1.311.21.6\", \"keyRecovery\"},",
          "1051:  {\"1.3.6.1.4.1.311.21.7\", \"certificateTemplate\"},",
          "1052:  {\"1.3.6.1.4.1.311.21.9\", \"rdnDummySigner\"},",
          "1053:  {\"1.3.6.1.4.1.311.21.10\", \"applicationCertPolicies\"},",
          "1054:  {\"1.3.6.1.4.1.311.21.11\", \"applicationPolicyMappings\"},",
          "1055:  {\"1.3.6.1.4.1.311.21.12\", \"applicationPolicyConstraints\"},",
          "1056:  {\"1.3.6.1.4.1.311.21.13\", \"archivedKey\"},",
          "1057:  {\"1.3.6.1.4.1.311.21.14\", \"crlSelfCDP\"},",
          "1058:  {\"1.3.6.1.4.1.311.21.15\", \"requireCertChainPolicy\"},",
          "1059:  {\"1.3.6.1.4.1.311.21.16\", \"archivedKeyCertHash\"},",
          "1060:  {\"1.3.6.1.4.1.311.21.17\", \"issuedCertHash\"},",
          "1061:  {\"1.3.6.1.4.1.311.21.19\", \"dsEmailReplication\"},",
          "1062:  {\"1.3.6.1.4.1.311.21.20\", \"requestClientInfo\"},",
          "1063:  {\"1.3.6.1.4.1.311.21.21\", \"encryptedKeyHash\"},",
          "1064:  {\"1.3.6.1.4.1.311.21.22\", \"certsrvCrossCaVersion\"},",
          "1065:  {\"1.3.6.1.4.1.311.25.1\", \"ntdsReplication\"},",
          "1066:  {\"1.3.6.1.4.1.311.31.1\", \"productUpdate\"},",
          "1067:  {\"1.3.6.1.4.1.311.47.1.1\", \"systemHealth\"},",
          "1068:  {\"1.3.6.1.4.1.311.47.1.3\", \"systemHealthLoophole\"},",
          "1069:  {\"1.3.6.1.4.1.311.60.1.1\", \"rootProgramFlags\"},",
          "1070:  {\"1.3.6.1.4.1.311.61.1.1\", \"kernelModeCodeSigning\"},",
          "1071:  {\"1.3.6.1.4.1.311.60.2.1.1\", \"jurisdictionOfIncorporationL\"},",
          "1072:  {\"1.3.6.1.4.1.311.60.2.1.2\", \"jurisdictionOfIncorporationSP\"},",
          "1073:  {\"1.3.6.1.4.1.311.60.2.1.3\", \"jurisdictionOfIncorporationC\"},",
          "1074:  {\"1.3.6.1.4.1.311.88\", \"capiCom\"},",
          "1075:  {\"1.3.6.1.4.1.311.88.1\", \"capiComVersion\"},",
          "1076:  {\"1.3.6.1.4.1.311.88.2\", \"capiComAttribute\"},",
          "1077:  {\"1.3.6.1.4.1.311.88.2.1\", \"capiComDocumentName\"},",
          "1078:  {\"1.3.6.1.4.1.311.88.2.2\", \"capiComDocumentDescription\"},",
          "1079:  {\"1.3.6.1.4.1.311.88.3\", \"capiComEncryptedData\"},",
          "1080:  {\"1.3.6.1.4.1.311.88.3.1\", \"capiComEncryptedContent\"},",
          "1081:  {\"1.3.6.1.4.1.188.7.1.1\", \"ascom\"},",
          "1082:  {\"1.3.6.1.4.1.188.7.1.1.1\", \"ideaECB\"},",
          "1083:  {\"1.3.6.1.4.1.188.7.1.1.2\", \"ideaCBC\"},",
          "1084:  {\"1.3.6.1.4.1.188.7.1.1.3\", \"ideaCFB\"},",
          "1085:  {\"1.3.6.1.4.1.188.7.1.1.4\", \"ideaOFB\"},",
          "1086:  {\"1.3.6.1.4.1.2428.10.1.1\", \"UNINETT.policyIdentifier\"},",
          "1087:  {\"1.3.6.1.4.1.2712.10\", \"ICE-TEL.policyIdentifier\"},",
          "1088:  {\"1.3.6.1.4.1.2786.1.1.1\", \"ICE-TEL.Italian.policyIdentifier\"},",
          "1089:  {\"1.3.6.1.4.1.3029.1.1.1\", \"blowfishECB\"},",
          "1090:  {\"1.3.6.1.4.1.3029.1.1.2\", \"blowfishCBC\"},",
          "1091:  {\"1.3.6.1.4.1.3029.1.1.3\", \"blowfishCFB\"},",
          "1092:  {\"1.3.6.1.4.1.3029.1.1.4\", \"blowfishOFB\"},",
          "1093:  {\"1.3.6.1.4.1.3029.1.2.1\", \"elgamal\"},",
          "1094:  {\"1.3.6.1.4.1.3029.1.2.1.1\", \"elgamalWithSHA-1\"},",
          "1095:  {\"1.3.6.1.4.1.3029.1.2.1.2\", \"elgamalWithRIPEMD-160\"},",
          "1096:  {\"1.3.6.1.4.1.3029.3.1.1\", \"cryptlibPresenceCheck\"},",
          "1097:  {\"1.3.6.1.4.1.3029.3.1.2\", \"pkiBoot\"},",
          "1098:  {\"1.3.6.1.4.1.3029.3.1.4\", \"crlExtReason\"},",
          "1099:  {\"1.3.6.1.4.1.3029.3.1.5\", \"keyFeatures\"},",
          "1100:  {\"1.3.6.1.4.1.3029.4.1\", \"cryptlibContent\"},",
          "1101:  {\"1.3.6.1.4.1.3029.4.1.1\", \"cryptlibConfigData\"},",
          "1102:  {\"1.3.6.1.4.1.3029.4.1.2\", \"cryptlibUserIndex\"},",
          "1103:  {\"1.3.6.1.4.1.3029.4.1.3\", \"cryptlibUserInfo\"},",
          "1104:  {\"1.3.6.1.4.1.3029.4.1.4\", \"rtcsRequest\"},",
          "1105:  {\"1.3.6.1.4.1.3029.4.1.5\", \"rtcsResponse\"},",
          "1106:  {\"1.3.6.1.4.1.3029.4.1.6\", \"rtcsResponseExt\"},",
          "1107:  {\"1.3.6.1.4.1.3029.42.11172.1\", \"mpeg-1\"},",
          "1108:  {\"1.3.6.1.4.1.3029.88.89.90.90.89\", \"xYZZY.policyIdentifier\"},",
          "1109:  {\"1.3.6.1.4.1.3401.8.1.1\", \"pgpExtension\"},",
          "1110:  {\"1.3.6.1.4.1.3576.7\", \"eciaAscX12Edi\"},",
          "1111:  {\"1.3.6.1.4.1.3576.7.1\", \"plainEDImessage\"},",
          "1112:  {\"1.3.6.1.4.1.3576.7.2\", \"signedEDImessage\"},",
          "1113:  {\"1.3.6.1.4.1.3576.7.5\", \"integrityEDImessage\"},",
          "1114:  {\"1.3.6.1.4.1.3576.7.65\", \"iaReceiptMessage\"},",
          "1115:  {\"1.3.6.1.4.1.3576.7.97\", \"iaStatusMessage\"},",
          "1116:  {\"1.3.6.1.4.1.3576.8\", \"eciaEdifact\"},",
          "1117:  {\"1.3.6.1.4.1.3576.9\", \"eciaNonEdi\"},",
          "1118:  {\"1.3.6.1.4.1.4146\", \"Globalsign\"},",
          "1119:  {\"1.3.6.1.4.1.4146.1\", \"globalsignPolicy\"},",
          "1120:  {\"1.3.6.1.4.1.4146.1.10\", \"globalsignDVPolicy\"},",
          "1121:  {\"1.3.6.1.4.1.4146.1.20\", \"globalsignOVPolicy\"},",
          "1122:  {\"1.3.6.1.4.1.4146.1.30\", \"globalsignTSAPolicy\"},",
          "1123:  {\"1.3.6.1.4.1.4146.1.40\", \"globalsignClientCertPolicy\"},",
          "1124:  {\"1.3.6.1.4.1.4146.1.50\", \"globalsignCodeSignPolicy\"},",
          "1125:  {\"1.3.6.1.4.1.4146.1.60\", \"globalsignRootSignPolicy\"},",
          "1126:  {\"1.3.6.1.4.1.4146.1.70\", \"globalsignTrustedRootPolicy\"},",
          "1127:  {\"1.3.6.1.4.1.4146.1.80\", \"globalsignEDIClientPolicy\"},",
          "1128:  {\"1.3.6.1.4.1.4146.1.81\", \"globalsignEDIServerPolicy\"},",
          "1129:  {\"1.3.6.1.4.1.4146.1.90\", \"globalsignTPMRootPolicy\"},",
          "1130:  {\"1.3.6.1.4.1.4146.1.95\", \"globalsignOCSPPolicy\"},",
          "1131:  {\"1.3.6.1.4.1.5309.1\", \"edelWebPolicy\"},",
          "1132:  {\"1.3.6.1.4.1.5309.1.2\", \"edelWebCustomerPolicy\"},",
          "1133:  {\"1.3.6.1.4.1.5309.1.2.1\", \"edelWebClepsydrePolicy\"},",
          "1134:  {\"1.3.6.1.4.1.5309.1.2.2\", \"edelWebExperimentalTSAPolicy\"},",
          "1135:  {\"1.3.6.1.4.1.5309.1.2.3\", \"edelWebOpenEvidenceTSAPolicy\"},",
          "1136:  {\"1.3.6.1.4.1.5472\", \"timeproof\"},",
          "1137:  {\"1.3.6.1.4.1.5472.1\", \"tss\"},",
          "1138:  {\"1.3.6.1.4.1.5472.1.1\", \"tss80\"},",
          "1139:  {\"1.3.6.1.4.1.5472.1.2\", \"tss380\"},",
          "1140:  {\"1.3.6.1.4.1.5472.1.3\", \"tss400\"},",
          "1141:  {\"1.3.6.1.4.1.5770.0.3\", \"secondaryPractices\"},",
          "1142:  {\"1.3.6.1.4.1.5770.0.4\", \"physicianIdentifiers\"},",
          "1143:  {\"1.3.6.1.4.1.6449.1.2.1.3.1\", \"comodoPolicy\"},",
          "1144:  {\"1.3.6.1.4.1.6449.1.2.2.15\", \"wotrustPolicy\"},",
          "1145:  {\"1.3.6.1.4.1.6449.1.3.5.2\", \"comodoCertifiedDeliveryService\"},",
          "1146:  {\"1.3.6.1.4.1.6449.2.1.1\", \"comodoTimestampingPolicy\"},",
          "1147:  {\"1.3.6.1.4.1.8301.3.5.1\", \"validityModelChain\"},",
          "1148:  {\"1.3.6.1.4.1.8301.3.5.2\", \"validityModelShell\"},",
          "1149:  {\"1.3.6.1.4.1.8231.1\", \"rolUnicoNacional\"},",
          "1150:  {\"1.3.6.1.4.1.11591\", \"gnu\"},",
          "1151:  {\"1.3.6.1.4.1.11591.1\", \"gnuRadius\"},",
          "1152:  {\"1.3.6.1.4.1.11591.3\", \"gnuRadar\"},",
          "1153:  {\"1.3.6.1.4.1.11591.12\", \"gnuDigestAlgorithm\"},",
          "1154:  {\"1.3.6.1.4.1.11591.12.2\", \"tiger\"},",
          "1155:  {\"1.3.6.1.4.1.11591.13\", \"gnuEncryptionAlgorithm\"},",
          "1156:  {\"1.3.6.1.4.1.11591.13.2\", \"serpent\"},",
          "1157:  {\"1.3.6.1.4.1.11591.13.2.1\", \"serpent128_ECB\"},",
          "1158:  {\"1.3.6.1.4.1.11591.13.2.2\", \"serpent128_CBC\"},",
          "1159:  {\"1.3.6.1.4.1.11591.13.2.3\", \"serpent128_OFB\"},",
          "1160:  {\"1.3.6.1.4.1.11591.13.2.4\", \"serpent128_CFB\"},",
          "1161:  {\"1.3.6.1.4.1.11591.13.2.21\", \"serpent192_ECB\"},",
          "1162:  {\"1.3.6.1.4.1.11591.13.2.22\", \"serpent192_CBC\"},",
          "1163:  {\"1.3.6.1.4.1.11591.13.2.23\", \"serpent192_OFB\"},",
          "1164:  {\"1.3.6.1.4.1.11591.13.2.24\", \"serpent192_CFB\"},",
          "1165:  {\"1.3.6.1.4.1.11591.13.2.41\", \"serpent256_ECB\"},",
          "1166:  {\"1.3.6.1.4.1.11591.13.2.42\", \"serpent256_CBC\"},",
          "1167:  {\"1.3.6.1.4.1.11591.13.2.43\", \"serpent256_OFB\"},",
          "1168:  {\"1.3.6.1.4.1.11591.13.2.44\", \"serpent256_CFB\"},",
          "1169:  {\"1.3.6.1.4.1.16334.509.1.1\", \"Northrop.Grumman.extKeyUsage?\"},",
          "1170:  {\"1.3.6.1.4.1.16334.509.2.1\", \"ngcClass1\"},",
          "1171:  {\"1.3.6.1.4.1.16334.509.2.2\", \"ngcClass2\"},",
          "1172:  {\"1.3.6.1.4.1.16334.509.2.3\", \"ngcClass3\"},",
          "1173:  {\"1.3.6.1.4.1.23629.1.4.2.1.1\", \"safenetUsageLimit\"},",
          "1174:  {\"1.3.6.1.4.1.23629.1.4.2.1.2\", \"safenetEndDate\"},",
          "1175:  {\"1.3.6.1.4.1.23629.1.4.2.1.3\", \"safenetStartDate\"},",
          "1176:  {\"1.3.6.1.4.1.23629.1.4.2.1.4\", \"safenetAdminCert\"},",
          "1177:  {\"1.3.6.1.4.1.23629.1.4.2.2.1\", \"safenetKeyDigest\"},",
          "1178:  {\"1.3.6.1.5.5.7\", \"pkix\"},",
          "1179:  {\"1.3.6.1.5.5.7.0.12\", \"attributeCert\"},",
          "1180:  {\"1.3.6.1.5.5.7.1\", \"privateExtension\"},",
          "1181:  {\"1.3.6.1.5.5.7.1.1\", \"authorityInfoAccess\"},",
          "1182:  {\"1.3.6.1.5.5.7.1.2\", \"biometricInfo\"},",
          "1183:  {\"1.3.6.1.5.5.7.1.3\", \"qcStatements\"},",
          "1184:  {\"1.3.6.1.5.5.7.1.4\", \"acAuditIdentity\"},",
          "1185:  {\"1.3.6.1.5.5.7.1.5\", \"acTargeting\"},",
          "1186:  {\"1.3.6.1.5.5.7.1.6\", \"acAaControls\"},",
          "1187:  {\"1.3.6.1.5.5.7.1.7\", \"ipAddrBlocks\"},",
          "1188:  {\"1.3.6.1.5.5.7.1.8\", \"autonomousSysIds\"},",
          "1189:  {\"1.3.6.1.5.5.7.1.9\", \"routerIdentifier\"},",
          "1190:  {\"1.3.6.1.5.5.7.1.10\", \"acProxying\"},",
          "1191:  {\"1.3.6.1.5.5.7.1.11\", \"subjectInfoAccess\"},",
          "1192:  {\"1.3.6.1.5.5.7.1.12\", \"logoType\"},",
          "1193:  {\"1.3.6.1.5.5.7.1.13\", \"wlanSSID\"},",
          "1194:  {\"1.3.6.1.5.5.7.2\", \"policyQualifierIds\"},",
          "1195:  {\"1.3.6.1.5.5.7.2.1\", \"cps\"},",
          "1196:  {\"1.3.6.1.5.5.7.2.2\", \"unotice\"},",
          "1197:  {\"1.3.6.1.5.5.7.2.3\", \"textNotice\"},",
          "1198:  {\"1.3.6.1.5.5.7.3\", \"keyPurpose\"},",
          "1199:  {\"1.3.6.1.5.5.7.3.1\", \"serverAuth\"},",
          "1200:  {\"1.3.6.1.5.5.7.3.2\", \"clientAuth\"},",
          "1201:  {\"1.3.6.1.5.5.7.3.3\", \"codeSigning\"},",
          "1202:  {\"1.3.6.1.5.5.7.3.4\", \"emailProtection\"},",
          "1203:  {\"1.3.6.1.5.5.7.3.5\", \"ipsecEndSystem\"},",
          "1204:  {\"1.3.6.1.5.5.7.3.6\", \"ipsecTunnel\"},",
          "1205:  {\"1.3.6.1.5.5.7.3.7\", \"ipsecUser\"},",
          "1206:  {\"1.3.6.1.5.5.7.3.8\", \"timeStamping\"},",
          "1207:  {\"1.3.6.1.5.5.7.3.9\", \"ocspSigning\"},",
          "1208:  {\"1.3.6.1.5.5.7.3.10\", \"dvcs\"},",
          "1209:  {\"1.3.6.1.5.5.7.3.11\", \"sbgpCertAAServerAuth\"},",
          "1210:  {\"1.3.6.1.5.5.7.3.13\", \"eapOverPPP\"},",
          "1211:  {\"1.3.6.1.5.5.7.3.14\", \"eapOverLAN\"},",
          "1212:  {\"1.3.6.1.5.5.7.4\", \"cmpInformationTypes\"},",
          "1213:  {\"1.3.6.1.5.5.7.4.1\", \"caProtEncCert\"},",
          "1214:  {\"1.3.6.1.5.5.7.4.2\", \"signKeyPairTypes\"},",
          "1215:  {\"1.3.6.1.5.5.7.4.3\", \"encKeyPairTypes\"},",
          "1216:  {\"1.3.6.1.5.5.7.4.4\", \"preferredSymmAlg\"},",
          "1217:  {\"1.3.6.1.5.5.7.4.5\", \"caKeyUpdateInfo\"},",
          "1218:  {\"1.3.6.1.5.5.7.4.6\", \"currentCRL\"},",
          "1219:  {\"1.3.6.1.5.5.7.4.7\", \"unsupportedOIDs\"},",
          "1220:  {\"1.3.6.1.5.5.7.4.10\", \"keyPairParamReq\"},",
          "1221:  {\"1.3.6.1.5.5.7.4.11\", \"keyPairParamRep\"},",
          "1222:  {\"1.3.6.1.5.5.7.4.12\", \"revPassphrase\"},",
          "1223:  {\"1.3.6.1.5.5.7.4.13\", \"implicitConfirm\"},",
          "1224:  {\"1.3.6.1.5.5.7.4.14\", \"confirmWaitTime\"},",
          "1225:  {\"1.3.6.1.5.5.7.4.15\", \"origPKIMessage\"},",
          "1226:  {\"1.3.6.1.5.5.7.4.16\", \"suppLangTags\"},",
          "1227:  {\"1.3.6.1.5.5.7.5\", \"crmfRegistration\"},",
          "1228:  {\"1.3.6.1.5.5.7.5.1\", \"regCtrl\"},",
          "1229:  {\"1.3.6.1.5.5.7.5.1.1\", \"regToken\"},",
          "1230:  {\"1.3.6.1.5.5.7.5.1.2\", \"authenticator\"},",
          "1231:  {\"1.3.6.1.5.5.7.5.1.3\", \"pkiPublicationInfo\"},",
          "1232:  {\"1.3.6.1.5.5.7.5.1.4\", \"pkiArchiveOptions\"},",
          "1233:  {\"1.3.6.1.5.5.7.5.1.5\", \"oldCertID\"},",
          "1234:  {\"1.3.6.1.5.5.7.5.1.6\", \"protocolEncrKey\"},",
          "1235:  {\"1.3.6.1.5.5.7.5.1.7\", \"altCertTemplate\"},",
          "1236:  {\"1.3.6.1.5.5.7.5.1.8\", \"wtlsTemplate\"},",
          "1237:  {\"1.3.6.1.5.5.7.5.2\", \"utf8Pairs\"},",
          "1238:  {\"1.3.6.1.5.5.7.5.2.1\", \"utf8Pairs\"},",
          "1239:  {\"1.3.6.1.5.5.7.5.2.2\", \"certReq\"},",
          "1240:  {\"1.3.6.1.5.5.7.6\", \"algorithms\"},",
          "1241:  {\"1.3.6.1.5.5.7.6.1\", \"des40\"},",
          "1242:  {\"1.3.6.1.5.5.7.6.2\", \"noSignature\"},",
          "1243:  {\"1.3.6.1.5.5.7.6.3\", \"dh-sig-hmac-sha1\"},",
          "1244:  {\"1.3.6.1.5.5.7.6.4\", \"dh-pop\"},",
          "1245:  {\"1.3.6.1.5.5.7.7\", \"cmcControls\"},",
          "1246:  {\"1.3.6.1.5.5.7.8\", \"otherNames\"},",
          "1247:  {\"1.3.6.1.5.5.7.8.1\", \"personalData\"},",
          "1248:  {\"1.3.6.1.5.5.7.8.2\", \"userGroup\"},",
          "1249:  {\"1.3.6.1.5.5.7.8.5\", \"xmppAddr\"},",
          "1250:  {\"1.3.6.1.5.5.7.9\", \"personalData\"},",
          "1251:  {\"1.3.6.1.5.5.7.9.1\", \"dateOfBirth\"},",
          "1252:  {\"1.3.6.1.5.5.7.9.2\", \"placeOfBirth\"},",
          "1253:  {\"1.3.6.1.5.5.7.9.3\", \"gender\"},",
          "1254:  {\"1.3.6.1.5.5.7.9.4\", \"countryOfCitizenship\"},",
          "1255:  {\"1.3.6.1.5.5.7.9.5\", \"countryOfResidence\"},",
          "1256:  {\"1.3.6.1.5.5.7.10\", \"attributeCertificate\"},",
          "1257:  {\"1.3.6.1.5.5.7.10.1\", \"authenticationInfo\"},",
          "1258:  {\"1.3.6.1.5.5.7.10.2\", \"accessIdentity\"},",
          "1259:  {\"1.3.6.1.5.5.7.10.3\", \"chargingIdentity\"},",
          "1260:  {\"1.3.6.1.5.5.7.10.4\", \"group\"},",
          "1261:  {\"1.3.6.1.5.5.7.10.5\", \"role\"},",
          "1262:  {\"1.3.6.1.5.5.7.10.6\", \"wlanSSID\"},",
          "1263:  {\"1.3.6.1.5.5.7.11\", \"personalData\"},",
          "1264:  {\"1.3.6.1.5.5.7.11.1\", \"pkixQCSyntax-v1\"},",
          "1265:  {\"1.3.6.1.5.5.7.14.2\", \"resourceCertificatePolicy\"},",
          "1266:  {\"1.3.6.1.5.5.7.20\", \"logo\"},",
          "1267:  {\"1.3.6.1.5.5.7.20.1\", \"logoLoyalty\"},",
          "1268:  {\"1.3.6.1.5.5.7.20.2\", \"logoBackground\"},",
          "1269:  {\"1.3.6.1.5.5.7.48.1\", \"ocsp\"},",
          "1270:  {\"1.3.6.1.5.5.7.48.1.1\", \"ocspBasic\"},",
          "1271:  {\"1.3.6.1.5.5.7.48.1.2\", \"ocspNonce\"},",
          "1272:  {\"1.3.6.1.5.5.7.48.1.3\", \"ocspCRL\"},",
          "1273:  {\"1.3.6.1.5.5.7.48.1.4\", \"ocspResponse\"},",
          "1274:  {\"1.3.6.1.5.5.7.48.1.5\", \"ocspNoCheck\"},",
          "1275:  {\"1.3.6.1.5.5.7.48.1.6\", \"ocspArchiveCutoff\"},",
          "1276:  {\"1.3.6.1.5.5.7.48.1.7\", \"ocspServiceLocator\"},",
          "1277:  {\"1.3.6.1.5.5.7.48.2\", \"caIssuers\"},",
          "1278:  {\"1.3.6.1.5.5.7.48.3\", \"timeStamping\"},",
          "1279:  {\"1.3.6.1.5.5.7.48.4\", \"dvcs\"},",
          "1280:  {\"1.3.6.1.5.5.7.48.5\", \"caRepository\"},",
          "1281:  {\"1.3.6.1.5.5.7.48.7\", \"signedObjectRepository\"},",
          "1282:  {\"1.3.6.1.5.5.7.48.10\", \"rpkiManifest\"},",
          "1283:  {\"1.3.6.1.5.5.7.48.11\", \"signedObject\"},",
          "1284:  {\"1.3.6.1.5.5.8.1.1\", \"hmacMD5\"},",
          "1285:  {\"1.3.6.1.5.5.8.1.2\", \"hmacSHA\"},",
          "1286:  {\"1.3.6.1.5.5.8.1.3\", \"hmacTiger\"},",
          "1287:  {\"1.3.6.1.5.5.8.2.2\", \"iKEIntermediate\"},",
          "1288:  {\"1.3.12.2.1011.7.1\", \"decEncryptionAlgorithm\"},",
          "1289:  {\"1.3.12.2.1011.7.1.2\", \"decDEA\"},",
          "1290:  {\"1.3.12.2.1011.7.2\", \"decHashAlgorithm\"},",
          "1291:  {\"1.3.12.2.1011.7.2.1\", \"decMD2\"},",
          "1292:  {\"1.3.12.2.1011.7.2.2\", \"decMD4\"},",
          "1293:  {\"1.3.12.2.1011.7.3\", \"decSignatureAlgorithm\"},",
          "1294:  {\"1.3.12.2.1011.7.3.1\", \"decMD2withRSA\"},",
          "1295:  {\"1.3.12.2.1011.7.3.2\", \"decMD4withRSA\"},",
          "1296:  {\"1.3.12.2.1011.7.3.3\", \"decDEAMAC\"},",
          "1297:  {\"1.3.14.2.26.5\", \"sha\"},",
          "1298:  {\"1.3.14.3.2.1.1\", \"rsa\"},",
          "1299:  {\"1.3.14.3.2.2\", \"md4WitRSA\"},",
          "1300:  {\"1.3.14.3.2.3\", \"md5WithRSA\"},",
          "1301:  {\"1.3.14.3.2.4\", \"md4WithRSAEncryption\"},",
          "1302:  {\"1.3.14.3.2.2.1\", \"sqmod-N\"},",
          "1303:  {\"1.3.14.3.2.3.1\", \"sqmod-NwithRSA\"},",
          "1304:  {\"1.3.14.3.2.6\", \"desECB\"},",
          "1305:  {\"1.3.14.3.2.7\", \"desCBC\"},",
          "1306:  {\"1.3.14.3.2.8\", \"desOFB\"},",
          "1307:  {\"1.3.14.3.2.9\", \"desCFB\"},",
          "1308:  {\"1.3.14.3.2.10\", \"desMAC\"},",
          "1309:  {\"1.3.14.3.2.11\", \"rsaSignature\"},",
          "1310:  {\"1.3.14.3.2.12\", \"dsa\"},",
          "1311:  {\"1.3.14.3.2.13\", \"dsaWithSHA\"},",
          "1312:  {\"1.3.14.3.2.14\", \"mdc2WithRSASignature\"},",
          "1313:  {\"1.3.14.3.2.15\", \"shaWithRSASignature\"},",
          "1314:  {\"1.3.14.3.2.16\", \"dhWithCommonModulus\"},",
          "1315:  {\"1.3.14.3.2.17\", \"desEDE\"},",
          "1316:  {\"1.3.14.3.2.18\", \"sha\"},",
          "1317:  {\"1.3.14.3.2.19\", \"mdc-2\"},",
          "1318:  {\"1.3.14.3.2.20\", \"dsaCommon\"},",
          "1319:  {\"1.3.14.3.2.21\", \"dsaCommonWithSHA\"},",
          "1320:  {\"1.3.14.3.2.22\", \"rsaKeyTransport\"},",
          "1321:  {\"1.3.14.3.2.23\", \"keyed-hash-seal\"},",
          "1322:  {\"1.3.14.3.2.24\", \"md2WithRSASignature\"},",
          "1323:  {\"1.3.14.3.2.25\", \"md5WithRSASignature\"},",
          "1324:  {\"1.3.14.3.2.26\", \"sha1\"},",
          "1325:  {\"1.3.14.3.2.27\", \"dsaWithSHA1\"},",
          "1326:  {\"1.3.14.3.2.28\", \"dsaWithCommonSHA1\"},",
          "1327:  {\"1.3.14.3.2.29\", \"sha-1WithRSAEncryption\"},",
          "1328:  {\"1.3.14.3.3.1\", \"simple-strong-auth-mechanism\"},",
          "1329:  {\"1.3.14.7.2.1.1\", \"ElGamal\"},",
          "1330:  {\"1.3.14.7.2.3.1\", \"md2WithRSA\"},",
          "1331:  {\"1.3.14.7.2.3.2\", \"md2WithElGamal\"},",
          "1332:  {\"1.3.36.1\", \"document\"},",
          "1333:  {\"1.3.36.1.1\", \"finalVersion\"},",
          "1334:  {\"1.3.36.1.2\", \"draft\"},",
          "1335:  {\"1.3.36.2\", \"sio\"},",
          "1336:  {\"1.3.36.2.1\", \"sedu\"},",
          "1337:  {\"1.3.36.3\", \"algorithm\"},",
          "1338:  {\"1.3.36.3.1\", \"encryptionAlgorithm\"},",
          "1339:  {\"1.3.36.3.1.1\", \"des\"},",
          "1340:  {\"1.3.36.3.1.1.1\", \"desECB_pad\"},",
          "1341:  {\"1.3.36.3.1.1.1.1\", \"desECB_ISOpad\"},",
          "1342:  {\"1.3.36.3.1.1.2.1\", \"desCBC_pad\"},",
          "1343:  {\"1.3.36.3.1.1.2.1.1\", \"desCBC_ISOpad\"},",
          "1344:  {\"1.3.36.3.1.3\", \"des_3\"},",
          "1345:  {\"1.3.36.3.1.3.1.1\", \"des_3ECB_pad\"},",
          "1346:  {\"1.3.36.3.1.3.1.1.1\", \"des_3ECB_ISOpad\"},",
          "1347:  {\"1.3.36.3.1.3.2.1\", \"des_3CBC_pad\"},",
          "1348:  {\"1.3.36.3.1.3.2.1.1\", \"des_3CBC_ISOpad\"},",
          "1349:  {\"1.3.36.3.1.2\", \"idea\"},",
          "1350:  {\"1.3.36.3.1.2.1\", \"ideaECB\"},",
          "1351:  {\"1.3.36.3.1.2.1.1\", \"ideaECB_pad\"},",
          "1352:  {\"1.3.36.3.1.2.1.1.1\", \"ideaECB_ISOpad\"},",
          "1353:  {\"1.3.36.3.1.2.2\", \"ideaCBC\"},",
          "1354:  {\"1.3.36.3.1.2.2.1\", \"ideaCBC_pad\"},",
          "1355:  {\"1.3.36.3.1.2.2.1.1\", \"ideaCBC_ISOpad\"},",
          "1356:  {\"1.3.36.3.1.2.3\", \"ideaOFB\"},",
          "1357:  {\"1.3.36.3.1.2.4\", \"ideaCFB\"},",
          "1358:  {\"1.3.36.3.1.4\", \"rsaEncryption\"},",
          "1359:  {\"1.3.36.3.1.4.512.17\", \"rsaEncryptionWithlmod512expe17\"},",
          "1360:  {\"1.3.36.3.1.5\", \"bsi-1\"},",
          "1361:  {\"1.3.36.3.1.5.1\", \"bsi_1ECB_pad\"},",
          "1362:  {\"1.3.36.3.1.5.2\", \"bsi_1CBC_pad\"},",
          "1363:  {\"1.3.36.3.1.5.2.1\", \"bsi_1CBC_PEMpad\"},",
          "1364:  {\"1.3.36.3.2\", \"hashAlgorithm\"},",
          "1365:  {\"1.3.36.3.2.1\", \"ripemd160\"},",
          "1366:  {\"1.3.36.3.2.2\", \"ripemd128\"},",
          "1367:  {\"1.3.36.3.2.3\", \"ripemd256\"},",
          "1368:  {\"1.3.36.3.2.4\", \"mdc2singleLength\"},",
          "1369:  {\"1.3.36.3.2.5\", \"mdc2doubleLength\"},",
          "1370:  {\"1.3.36.3.3\", \"signatureAlgorithm\"},",
          "1371:  {\"1.3.36.3.3.1\", \"rsaSignature\"},",
          "1372:  {\"1.3.36.3.3.1.1\", \"rsaSignatureWithsha1\"},",
          "1373:  {\"1.3.36.3.3.1.1.512.2\", \"rsaSignatureWithsha1_l512_l2\"},",
          "1374:  {\"1.3.36.3.3.1.1.640.2\", \"rsaSignatureWithsha1_l640_l2\"},",
          "1375:  {\"1.3.36.3.3.1.1.768.2\", \"rsaSignatureWithsha1_l768_l2\"},",
          "1376:  {\"1.3.36.3.3.1.1.896.2\", \"rsaSignatureWithsha1_l896_l2\"},",
          "1377:  {\"1.3.36.3.3.1.1.1024.2\", \"rsaSignatureWithsha1_l1024_l2\"},",
          "1378:  {\"1.3.36.3.3.1.1.512.3\", \"rsaSignatureWithsha1_l512_l3\"},",
          "1379:  {\"1.3.36.3.3.1.1.640.3\", \"rsaSignatureWithsha1_l640_l3\"},",
          "1380:  {\"1.3.36.3.3.1.1.768.3\", \"rsaSignatureWithsha1_l768_l3\"},",
          "1381:  {\"1.3.36.3.3.1.1.896.3\", \"rsaSignatureWithsha1_l896_l3\"},",
          "1382:  {\"1.3.36.3.3.1.1.1024.3\", \"rsaSignatureWithsha1_l1024_l3\"},",
          "1383:  {\"1.3.36.3.3.1.1.512.5\", \"rsaSignatureWithsha1_l512_l5\"},",
          "1384:  {\"1.3.36.3.3.1.1.640.5\", \"rsaSignatureWithsha1_l640_l5\"},",
          "1385:  {\"1.3.36.3.3.1.1.768.5\", \"rsaSignatureWithsha1_l768_l5\"},",
          "1386:  {\"1.3.36.3.3.1.1.896.5\", \"rsaSignatureWithsha1_l896_l5\"},",
          "1387:  {\"1.3.36.3.3.1.1.1024.5\", \"rsaSignatureWithsha1_l1024_l5\"},",
          "1388:  {\"1.3.36.3.3.1.1.512.9\", \"rsaSignatureWithsha1_l512_l9\"},",
          "1389:  {\"1.3.36.3.3.1.1.640.9\", \"rsaSignatureWithsha1_l640_l9\"},",
          "1390:  {\"1.3.36.3.3.1.1.768.9\", \"rsaSignatureWithsha1_l768_l9\"},",
          "1391:  {\"1.3.36.3.3.1.1.896.9\", \"rsaSignatureWithsha1_l896_l9\"},",
          "1392:  {\"1.3.36.3.3.1.1.1024.9\", \"rsaSignatureWithsha1_l1024_l9\"},",
          "1393:  {\"1.3.36.3.3.1.1.512.11\", \"rsaSignatureWithsha1_l512_l11\"},",
          "1394:  {\"1.3.36.3.3.1.1.640.11\", \"rsaSignatureWithsha1_l640_l11\"},",
          "1395:  {\"1.3.36.3.3.1.1.768.11\", \"rsaSignatureWithsha1_l768_l11\"},",
          "1396:  {\"1.3.36.3.3.1.1.896.11\", \"rsaSignatureWithsha1_l896_l11\"},",
          "1397:  {\"1.3.36.3.3.1.1.1024.11\", \"rsaSignatureWithsha1_l1024_l11\"},",
          "1398:  {\"1.3.36.3.3.1.2\", \"rsaSignatureWithripemd160\"},",
          "1399:  {\"1.3.36.3.3.1.2.512.2\", \"rsaSignatureWithripemd160_l512_l2\"},",
          "1400:  {\"1.3.36.3.3.1.2.640.2\", \"rsaSignatureWithripemd160_l640_l2\"},",
          "1401:  {\"1.3.36.3.3.1.2.768.2\", \"rsaSignatureWithripemd160_l768_l2\"},",
          "1402:  {\"1.3.36.3.3.1.2.896.2\", \"rsaSignatureWithripemd160_l896_l2\"},",
          "1403:  {\"1.3.36.3.3.1.2.1024.2\", \"rsaSignatureWithripemd160_l1024_l2\"},",
          "1404:  {\"1.3.36.3.3.1.2.512.3\", \"rsaSignatureWithripemd160_l512_l3\"},",
          "1405:  {\"1.3.36.3.3.1.2.640.3\", \"rsaSignatureWithripemd160_l640_l3\"},",
          "1406:  {\"1.3.36.3.3.1.2.768.3\", \"rsaSignatureWithripemd160_l768_l3\"},",
          "1407:  {\"1.3.36.3.3.1.2.896.3\", \"rsaSignatureWithripemd160_l896_l3\"},",
          "1408:  {\"1.3.36.3.3.1.2.1024.3\", \"rsaSignatureWithripemd160_l1024_l3\"},",
          "1409:  {\"1.3.36.3.3.1.2.512.5\", \"rsaSignatureWithripemd160_l512_l5\"},",
          "1410:  {\"1.3.36.3.3.1.2.640.5\", \"rsaSignatureWithripemd160_l640_l5\"},",
          "1411:  {\"1.3.36.3.3.1.2.768.5\", \"rsaSignatureWithripemd160_l768_l5\"},",
          "1412:  {\"1.3.36.3.3.1.2.896.5\", \"rsaSignatureWithripemd160_l896_l5\"},",
          "1413:  {\"1.3.36.3.3.1.2.1024.5\", \"rsaSignatureWithripemd160_l1024_l5\"},",
          "1414:  {\"1.3.36.3.3.1.2.512.9\", \"rsaSignatureWithripemd160_l512_l9\"},",
          "1415:  {\"1.3.36.3.3.1.2.640.9\", \"rsaSignatureWithripemd160_l640_l9\"},",
          "1416:  {\"1.3.36.3.3.1.2.768.9\", \"rsaSignatureWithripemd160_l768_l9\"},",
          "1417:  {\"1.3.36.3.3.1.2.896.9\", \"rsaSignatureWithripemd160_l896_l9\"},",
          "1418:  {\"1.3.36.3.3.1.2.1024.9\", \"rsaSignatureWithripemd160_l1024_l9\"},",
          "1419:  {\"1.3.36.3.3.1.2.512.11\", \"rsaSignatureWithripemd160_l512_l11\"},",
          "1420:  {\"1.3.36.3.3.1.2.640.11\", \"rsaSignatureWithripemd160_l640_l11\"},",
          "1421:  {\"1.3.36.3.3.1.2.768.11\", \"rsaSignatureWithripemd160_l768_l11\"},",
          "1422:  {\"1.3.36.3.3.1.2.896.11\", \"rsaSignatureWithripemd160_l896_l11\"},",
          "1423:  {\"1.3.36.3.3.1.2.1024.11\", \"rsaSignatureWithripemd160_l1024_l11\"},",
          "1424:  {\"1.3.36.3.3.1.3\", \"rsaSignatureWithrimpemd128\"},",
          "1425:  {\"1.3.36.3.3.1.4\", \"rsaSignatureWithrimpemd256\"},",
          "1426:  {\"1.3.36.3.3.2\", \"ecsieSign\"},",
          "1427:  {\"1.3.36.3.3.2.1\", \"ecsieSignWithsha1\"},",
          "1428:  {\"1.3.36.3.3.2.2\", \"ecsieSignWithripemd160\"},",
          "1429:  {\"1.3.36.3.3.2.3\", \"ecsieSignWithmd2\"},",
          "1430:  {\"1.3.36.3.3.2.4\", \"ecsieSignWithmd5\"},",
          "1431:  {\"1.3.36.3.3.2.8.1.1.1\", \"brainpoolP160r1\"},",
          "1432:  {\"1.3.36.3.3.2.8.1.1.2\", \"brainpoolP160t1\"},",
          "1433:  {\"1.3.36.3.3.2.8.1.1.3\", \"brainpoolP192r1\"},",
          "1434:  {\"1.3.36.3.3.2.8.1.1.4\", \"brainpoolP192t1\"},",
          "1435:  {\"1.3.36.3.3.2.8.1.1.5\", \"brainpoolP224r1\"},",
          "1436:  {\"1.3.36.3.3.2.8.1.1.6\", \"brainpoolP224t1\"},",
          "1437:  {\"1.3.36.3.3.2.8.1.1.7\", \"brainpoolP256r1\"},",
          "1438:  {\"1.3.36.3.3.2.8.1.1.8\", \"brainpoolP256t1\"},",
          "1439:  {\"1.3.36.3.3.2.8.1.1.9\", \"brainpoolP320r1\"},",
          "1440:  {\"1.3.36.3.3.2.8.1.1.10\", \"brainpoolP320t1\"},",
          "1441:  {\"1.3.36.3.3.2.8.1.1.11\", \"brainpoolP384r1\"},",
          "1442:  {\"1.3.36.3.3.2.8.1.1.12\", \"brainpoolP384t1\"},",
          "1443:  {\"1.3.36.3.3.2.8.1.1.13\", \"brainpoolP512r1\"},",
          "1444:  {\"1.3.36.3.3.2.8.1.1.14\", \"brainpoolP512t1\"},",
          "1445:  {\"1.3.36.3.4\", \"signatureScheme\"},",
          "1446:  {\"1.3.36.3.4.1\", \"sigS_ISO9796-1\"},",
          "1447:  {\"1.3.36.3.4.2\", \"sigS_ISO9796-2\"},",
          "1448:  {\"1.3.36.3.4.2.1\", \"sigS_ISO9796-2Withred\"},",
          "1449:  {\"1.3.36.3.4.2.2\", \"sigS_ISO9796-2Withrsa\"},",
          "1450:  {\"1.3.36.3.4.2.3\", \"sigS_ISO9796-2Withrnd\"},",
          "1451:  {\"1.3.36.4\", \"attribute\"},",
          "1452:  {\"1.3.36.5\", \"policy\"},",
          "1453:  {\"1.3.36.6\", \"api\"},",
          "1454:  {\"1.3.36.6.1\", \"manufacturer-specific_api\"},",
          "1455:  {\"1.3.36.6.1.1\", \"utimaco-api\"},",
          "1456:  {\"1.3.36.6.2\", \"functionality-specific_api\"},",
          "1457:  {\"1.3.36.7\", \"keymgmnt\"},",
          "1458:  {\"1.3.36.7.1\", \"keyagree\"},",
          "1459:  {\"1.3.36.7.1.1\", \"bsiPKE\"},",
          "1460:  {\"1.3.36.7.2\", \"keytrans\"},",
          "1461:  {\"1.3.36.7.2.1\", \"encISO9796-2Withrsa\"},",
          "1462:  {\"1.3.36.8.1.1\", \"Teletrust.SigGConform.policyIdentifier\"},",
          "1463:  {\"1.3.36.8.2.1\", \"directoryService\"},",
          "1464:  {\"1.3.36.8.3.1\", \"dateOfCertGen\"},",
          "1465:  {\"1.3.36.8.3.2\", \"procuration\"},",
          "1466:  {\"1.3.36.8.3.3\", \"admission\"},",
          "1467:  {\"1.3.36.8.3.4\", \"monetaryLimit\"},",
          "1468:  {\"1.3.36.8.3.5\", \"declarationOfMajority\"},",
          "1469:  {\"1.3.36.8.3.6\", \"integratedCircuitCardSerialNumber\"},",
          "1470:  {\"1.3.36.8.3.7\", \"pKReference\"},",
          "1471:  {\"1.3.36.8.3.8\", \"restriction\"},",
          "1472:  {\"1.3.36.8.3.9\", \"retrieveIfAllowed\"},",
          "1473:  {\"1.3.36.8.3.10\", \"requestedCertificate\"},",
          "1474:  {\"1.3.36.8.3.11\", \"namingAuthorities\"},",
          "1475:  {\"1.3.36.8.3.11.1\", \"rechtWirtschaftSteuern\"},",
          "1476:  {\"1.3.36.8.3.11.1.1\", \"rechtsanwaeltin\"},",
          "1477:  {\"1.3.36.8.3.11.1.2\", \"rechtsanwalt\"},",
          "1478:  {\"1.3.36.8.3.11.1.3\", \"rechtsBeistand\"},",
          "1479:  {\"1.3.36.8.3.11.1.4\", \"steuerBeraterin\"},",
          "1480:  {\"1.3.36.8.3.11.1.5\", \"steuerBerater\"},",
          "1481:  {\"1.3.36.8.3.11.1.6\", \"steuerBevollmaechtigte\"},",
          "1482:  {\"1.3.36.8.3.11.1.7\", \"steuerBevollmaechtigter\"},",
          "1483:  {\"1.3.36.8.3.11.1.8\", \"notarin\"},",
          "1484:  {\"1.3.36.8.3.11.1.9\", \"notar\"},",
          "1485:  {\"1.3.36.8.3.11.1.10\", \"notarVertreterin\"},",
          "1486:  {\"1.3.36.8.3.11.1.11\", \"notarVertreter\"},",
          "1487:  {\"1.3.36.8.3.11.1.12\", \"notariatsVerwalterin\"},",
          "1488:  {\"1.3.36.8.3.11.1.13\", \"notariatsVerwalter\"},",
          "1489:  {\"1.3.36.8.3.11.1.14\", \"wirtschaftsPrueferin\"},",
          "1490:  {\"1.3.36.8.3.11.1.15\", \"wirtschaftsPruefer\"},",
          "1491:  {\"1.3.36.8.3.11.1.16\", \"vereidigteBuchprueferin\"},",
          "1492:  {\"1.3.36.8.3.11.1.17\", \"vereidigterBuchpruefer\"},",
          "1493:  {\"1.3.36.8.3.11.1.18\", \"patentAnwaeltin\"},",
          "1494:  {\"1.3.36.8.3.11.1.19\", \"patentAnwalt\"},",
          "1495:  {\"1.3.36.8.3.12\", \"certInDirSince\"},",
          "1496:  {\"1.3.36.8.3.13\", \"certHash\"},",
          "1497:  {\"1.3.36.8.3.14\", \"nameAtBirth\"},",
          "1498:  {\"1.3.36.8.3.15\", \"additionalInformation\"},",
          "1499:  {\"1.3.36.8.4.1\", \"personalData\"},",
          "1500:  {\"1.3.36.8.4.8\", \"restriction\"},",
          "1501:  {\"1.3.36.8.5.1.1.1\", \"rsaIndicateSHA1\"},",
          "1502:  {\"1.3.36.8.5.1.1.2\", \"rsaIndicateRIPEMD160\"},",
          "1503:  {\"1.3.36.8.5.1.1.3\", \"rsaWithSHA1\"},",
          "1504:  {\"1.3.36.8.5.1.1.4\", \"rsaWithRIPEMD160\"},",
          "1505:  {\"1.3.36.8.5.1.2.1\", \"dsaExtended\"},",
          "1506:  {\"1.3.36.8.5.1.2.2\", \"dsaWithRIPEMD160\"},",
          "1507:  {\"1.3.36.8.6.1\", \"cert\"},",
          "1508:  {\"1.3.36.8.6.2\", \"certRef\"},",
          "1509:  {\"1.3.36.8.6.3\", \"attrCert\"},",
          "1510:  {\"1.3.36.8.6.4\", \"attrRef\"},",
          "1511:  {\"1.3.36.8.6.5\", \"fileName\"},",
          "1512:  {\"1.3.36.8.6.6\", \"storageTime\"},",
          "1513:  {\"1.3.36.8.6.7\", \"fileSize\"},",
          "1514:  {\"1.3.36.8.6.8\", \"location\"},",
          "1515:  {\"1.3.36.8.6.9\", \"sigNumber\"},",
          "1516:  {\"1.3.36.8.6.10\", \"autoGen\"},",
          "1517:  {\"1.3.36.8.7.1.1\", \"ptAdobeILL\"},",
          "1518:  {\"1.3.36.8.7.1.2\", \"ptAmiPro\"},",
          "1519:  {\"1.3.36.8.7.1.3\", \"ptAutoCAD\"},",
          "1520:  {\"1.3.36.8.7.1.4\", \"ptBinary\"},",
          "1521:  {\"1.3.36.8.7.1.5\", \"ptBMP\"},",
          "1522:  {\"1.3.36.8.7.1.6\", \"ptCGM\"},",
          "1523:  {\"1.3.36.8.7.1.7\", \"ptCorelCRT\"},",
          "1524:  {\"1.3.36.8.7.1.8\", \"ptCorelDRW\"},",
          "1525:  {\"1.3.36.8.7.1.9\", \"ptCorelEXC\"},",
          "1526:  {\"1.3.36.8.7.1.10\", \"ptCorelPHT\"},",
          "1527:  {\"1.3.36.8.7.1.11\", \"ptDraw\"},",
          "1528:  {\"1.3.36.8.7.1.12\", \"ptDVI\"},",
          "1529:  {\"1.3.36.8.7.1.13\", \"ptEPS\"},",
          "1530:  {\"1.3.36.8.7.1.14\", \"ptExcel\"},",
          "1531:  {\"1.3.36.8.7.1.15\", \"ptGEM\"},",
          "1532:  {\"1.3.36.8.7.1.16\", \"ptGIF\"},",
          "1533:  {\"1.3.36.8.7.1.17\", \"ptHPGL\"},",
          "1534:  {\"1.3.36.8.7.1.18\", \"ptJPEG\"},",
          "1535:  {\"1.3.36.8.7.1.19\", \"ptKodak\"},",
          "1536:  {\"1.3.36.8.7.1.20\", \"ptLaTeX\"},",
          "1537:  {\"1.3.36.8.7.1.21\", \"ptLotus\"},",
          "1538:  {\"1.3.36.8.7.1.22\", \"ptLotusPIC\"},",
          "1539:  {\"1.3.36.8.7.1.23\", \"ptMacPICT\"},",
          "1540:  {\"1.3.36.8.7.1.24\", \"ptMacWord\"},",
          "1541:  {\"1.3.36.8.7.1.25\", \"ptMSWfD\"},",
          "1542:  {\"1.3.36.8.7.1.26\", \"ptMSWord\"},",
          "1543:  {\"1.3.36.8.7.1.27\", \"ptMSWord2\"},",
          "1544:  {\"1.3.36.8.7.1.28\", \"ptMSWord6\"},",
          "1545:  {\"1.3.36.8.7.1.29\", \"ptMSWord8\"},",
          "1546:  {\"1.3.36.8.7.1.30\", \"ptPDF\"},",
          "1547:  {\"1.3.36.8.7.1.31\", \"ptPIF\"},",
          "1548:  {\"1.3.36.8.7.1.32\", \"ptPostscript\"},",
          "1549:  {\"1.3.36.8.7.1.33\", \"ptRTF\"},",
          "1550:  {\"1.3.36.8.7.1.34\", \"ptSCITEX\"},",
          "1551:  {\"1.3.36.8.7.1.35\", \"ptTAR\"},",
          "1552:  {\"1.3.36.8.7.1.36\", \"ptTarga\"},",
          "1553:  {\"1.3.36.8.7.1.37\", \"ptTeX\"},",
          "1554:  {\"1.3.36.8.7.1.38\", \"ptText\"},",
          "1555:  {\"1.3.36.8.7.1.39\", \"ptTIFF\"},",
          "1556:  {\"1.3.36.8.7.1.40\", \"ptTIFF-FC\"},",
          "1557:  {\"1.3.36.8.7.1.41\", \"ptUID\"},",
          "1558:  {\"1.3.36.8.7.1.42\", \"ptUUEncode\"},",
          "1559:  {\"1.3.36.8.7.1.43\", \"ptWMF\"},",
          "1560:  {\"1.3.36.8.7.1.44\", \"ptWordPerfect\"},",
          "1561:  {\"1.3.36.8.7.1.45\", \"ptWPGrph\"},",
          "1562:  {\"1.3.101.1.4\", \"thawte-ce\"},",
          "1563:  {\"1.3.101.1.4.1\", \"strongExtranet\"},",
          "1564:  {\"1.3.132.0.1\", \"sect163k1\"},",
          "1565:  {\"1.3.132.0.2\", \"sect163r1\"},",
          "1566:  {\"1.3.132.0.3\", \"sect239k1\"},",
          "1567:  {\"1.3.132.0.4\", \"sect113r1\"},",
          "1568:  {\"1.3.132.0.5\", \"sect113r2\"},",
          "1569:  {\"1.3.132.0.6\", \"secp112r1\"},",
          "1570:  {\"1.3.132.0.7\", \"secp112r2\"},",
          "1571:  {\"1.3.132.0.8\", \"secp160r1\"},",
          "1572:  {\"1.3.132.0.9\", \"secp160k1\"},",
          "1573:  {\"1.3.132.0.10\", \"secp256k1\"},",
          "1574:  {\"1.3.132.0.15\", \"sect163r2\"},",
          "1575:  {\"1.3.132.0.16\", \"sect283k1\"},",
          "1576:  {\"1.3.132.0.17\", \"sect283r1\"},",
          "1577:  {\"1.3.132.0.22\", \"sect131r1\"},",
          "1578:  {\"1.3.132.0.23\", \"sect131r2\"},",
          "1579:  {\"1.3.132.0.24\", \"sect193r1\"},",
          "1580:  {\"1.3.132.0.25\", \"sect193r2\"},",
          "1581:  {\"1.3.132.0.26\", \"sect233k1\"},",
          "1582:  {\"1.3.132.0.27\", \"sect233r1\"},",
          "1583:  {\"1.3.132.0.28\", \"secp128r1\"},",
          "1584:  {\"1.3.132.0.29\", \"secp128r2\"},",
          "1585:  {\"1.3.132.0.30\", \"secp160r2\"},",
          "1586:  {\"1.3.132.0.31\", \"secp192k1\"},",
          "1587:  {\"1.3.132.0.32\", \"secp224k1\"},",
          "1588:  {\"1.3.132.0.33\", \"secp224r1\"},",
          "1589:  {\"1.3.132.0.34\", \"secp384r1\"},",
          "1590:  {\"1.3.132.0.35\", \"secp521r1\"},",
          "1591:  {\"1.3.132.0.36\", \"sect409k1\"},",
          "1592:  {\"1.3.132.0.37\", \"sect409r1\"},",
          "1593:  {\"1.3.132.0.38\", \"sect571k1\"},",
          "1594:  {\"1.3.132.0.39\", \"sect571r1\"},",
          "1595:  {\"1.3.133.16.840.9.84\", \"x984\"},",
          "1596:  {\"1.3.133.16.840.9.84.0\", \"x984Module\"},",
          "1597:  {\"1.3.133.16.840.9.84.0.1\", \"x984Biometrics\"},",
          "1598:  {\"1.3.133.16.840.9.84.0.2\", \"x984CMS\"},",
          "1599:  {\"1.3.133.16.840.9.84.0.3\", \"x984Identifiers\"},",
          "1600:  {\"1.3.133.16.840.9.84.1\", \"x984Biometric\"},",
          "1601:  {\"1.3.133.16.840.9.84.1.0\", \"biometricUnknownType\"},",
          "1602:  {\"1.3.133.16.840.9.84.1.1\", \"biometricBodyOdor\"},",
          "1603:  {\"1.3.133.16.840.9.84.1.2\", \"biometricDNA\"},",
          "1604:  {\"1.3.133.16.840.9.84.1.3\", \"biometricEarShape\"},",
          "1605:  {\"1.3.133.16.840.9.84.1.4\", \"biometricFacialFeatures\"},",
          "1606:  {\"1.3.133.16.840.9.84.1.5\", \"biometricFingerImage\"},",
          "1607:  {\"1.3.133.16.840.9.84.1.6\", \"biometricFingerGeometry\"},",
          "1608:  {\"1.3.133.16.840.9.84.1.7\", \"biometricHandGeometry\"},",
          "1609:  {\"1.3.133.16.840.9.84.1.8\", \"biometricIrisFeatures\"},",
          "1610:  {\"1.3.133.16.840.9.84.1.9\", \"biometricKeystrokeDynamics\"},",
          "1611:  {\"1.3.133.16.840.9.84.1.10\", \"biometricPalm\"},",
          "1612:  {\"1.3.133.16.840.9.84.1.11\", \"biometricRetina\"},",
          "1613:  {\"1.3.133.16.840.9.84.1.12\", \"biometricSignature\"},",
          "1614:  {\"1.3.133.16.840.9.84.1.13\", \"biometricSpeechPattern\"},",
          "1615:  {\"1.3.133.16.840.9.84.1.14\", \"biometricThermalImage\"},",
          "1616:  {\"1.3.133.16.840.9.84.1.15\", \"biometricVeinPattern\"},",
          "1617:  {\"1.3.133.16.840.9.84.1.16\", \"biometricThermalFaceImage\"},",
          "1618:  {\"1.3.133.16.840.9.84.1.17\", \"biometricThermalHandImage\"},",
          "1619:  {\"1.3.133.16.840.9.84.1.18\", \"biometricLipMovement\"},",
          "1620:  {\"1.3.133.16.840.9.84.1.19\", \"biometricGait\"},",
          "1621:  {\"1.3.133.16.840.9.84.1\", \"x984ProcessingAlgorithm\"},",
          "1622:  {\"1.3.133.16.840.9.84.3\", \"x984MatchingMethod\"},",
          "1623:  {\"1.3.133.16.840.9.84.4\", \"x984FormatOwner\"},",
          "1624:  {\"1.3.133.16.840.9.84.4.0\", \"x984CbeffOwner\"},",
          "1625:  {\"1.3.133.16.840.9.84.4.1\", \"x984IbiaOwner\"},",
          "1626:  {\"1.3.133.16.840.9.84.4.1.1\", \"ibiaOwnerSAFLINK\"},",
          "1627:  {\"1.3.133.16.840.9.84.4.1.2\", \"ibiaOwnerBioscrypt\"},",
          "1628:  {\"1.3.133.16.840.9.84.4.1.3\", \"ibiaOwnerVisionics\"},",
          "1629:  {\"1.3.133.16.840.9.84.4.1.4\", \"ibiaOwnerInfineonTechnologiesAG\"},",
          "1630:  {\"1.3.133.16.840.9.84.4.1.5\", \"ibiaOwnerIridianTechnologies\"},",
          "1631:  {\"1.3.133.16.840.9.84.4.1.6\", \"ibiaOwnerVeridicom\"},",
          "1632:  {\"1.3.133.16.840.9.84.4.1.7\", \"ibiaOwnerCyberSIGN\"},",
          "1633:  {\"1.3.133.16.840.9.84.4.1.8\", \"ibiaOwnereCryp\"},",
          "1634:  {\"1.3.133.16.840.9.84.4.1.9\", \"ibiaOwnerFingerprintCardsAB\"},",
          "1635:  {\"1.3.133.16.840.9.84.4.1.10\", \"ibiaOwnerSecuGen\"},",
          "1636:  {\"1.3.133.16.840.9.84.4.1.11\", \"ibiaOwnerPreciseBiometric\"},",
          "1637:  {\"1.3.133.16.840.9.84.4.1.12\", \"ibiaOwnerIdentix\"},",
          "1638:  {\"1.3.133.16.840.9.84.4.1.13\", \"ibiaOwnerDERMALOG\"},",
          "1639:  {\"1.3.133.16.840.9.84.4.1.14\", \"ibiaOwnerLOGICO\"},",
          "1640:  {\"1.3.133.16.840.9.84.4.1.15\", \"ibiaOwnerNIST\"},",
          "1641:  {\"1.3.133.16.840.9.84.4.1.16\", \"ibiaOwnerA3Vision\"},",
          "1642:  {\"1.3.133.16.840.9.84.4.1.17\", \"ibiaOwnerNEC\"},",
          "1643:  {\"1.3.133.16.840.9.84.4.1.18\", \"ibiaOwnerSTMicroelectronics\"},",
          "1644:  {\"1.3.133.16.840.9.84.4.1\", \"x984X9Owner\"},",
          "1645:  {\"2.5.4.0\", \"objectClass\"},",
          "1646:  {\"2.5.4.1\", \"aliasedEntryName\"},",
          "1647:  {\"2.5.4.2\", \"knowledgeInformation\"},",
          "1648:  {\"2.5.4.3\", \"commonName\"},",
          "1649:  {\"2.5.4.4\", \"surname\"},",
          "1650:  {\"2.5.4.5\", \"serialNumber\"},",
          "1651:  {\"2.5.4.6\", \"countryName\"},",
          "1652:  {\"2.5.4.7\", \"localityName\"},",
          "1653:  {\"2.5.4.7.1\", \"collectiveLocalityName\"},",
          "1654:  {\"2.5.4.8\", \"stateOrProvinceName\"},",
          "1655:  {\"2.5.4.8.1\", \"collectiveStateOrProvinceName\"},",
          "1656:  {\"2.5.4.9\", \"streetAddress\"},",
          "1657:  {\"2.5.4.9.1\", \"collectiveStreetAddress\"},",
          "1658:  {\"2.5.4.10\", \"organizationName\"},",
          "1659:  {\"2.5.4.10.1\", \"collectiveOrganizationName\"},",
          "1660:  {\"2.5.4.11\", \"organizationalUnitName\"},",
          "1661:  {\"2.5.4.11.1\", \"collectiveOrganizationalUnitName\"},",
          "1662:  {\"2.5.4.12\", \"title\"},",
          "1663:  {\"2.5.4.13\", \"description\"},",
          "1664:  {\"2.5.4.14\", \"searchGuide\"},",
          "1665:  {\"2.5.4.15\", \"businessCategory\"},",
          "1666:  {\"2.5.4.16\", \"postalAddress\"},",
          "1667:  {\"2.5.4.16.1\", \"collectivePostalAddress\"},",
          "1668:  {\"2.5.4.17\", \"postalCode\"},",
          "1669:  {\"2.5.4.17.1\", \"collectivePostalCode\"},",
          "1670:  {\"2.5.4.18\", \"postOfficeBox\"},",
          "1671:  {\"2.5.4.18.1\", \"collectivePostOfficeBox\"},",
          "1672:  {\"2.5.4.19\", \"physicalDeliveryOfficeName\"},",
          "1673:  {\"2.5.4.19.1\", \"collectivePhysicalDeliveryOfficeName\"},",
          "1674:  {\"2.5.4.20\", \"telephoneNumber\"},",
          "1675:  {\"2.5.4.20.1\", \"collectiveTelephoneNumber\"},",
          "1676:  {\"2.5.4.21\", \"telexNumber\"},",
          "1677:  {\"2.5.4.21.1\", \"collectiveTelexNumber\"},",
          "1678:  {\"2.5.4.22\", \"teletexTerminalIdentifier\"},",
          "1679:  {\"2.5.4.22.1\", \"collectiveTeletexTerminalIdentifier\"},",
          "1680:  {\"2.5.4.23\", \"facsimileTelephoneNumber\"},",
          "1681:  {\"2.5.4.23.1\", \"collectiveFacsimileTelephoneNumber\"},",
          "1682:  {\"2.5.4.24\", \"x121Address\"},",
          "1683:  {\"2.5.4.25\", \"internationalISDNNumber\"},",
          "1684:  {\"2.5.4.25.1\", \"collectiveInternationalISDNNumber\"},",
          "1685:  {\"2.5.4.26\", \"registeredAddress\"},",
          "1686:  {\"2.5.4.27\", \"destinationIndicator\"},",
          "1687:  {\"2.5.4.28\", \"preferredDeliveryMehtod\"},",
          "1688:  {\"2.5.4.29\", \"presentationAddress\"},",
          "1689:  {\"2.5.4.30\", \"supportedApplicationContext\"},",
          "1690:  {\"2.5.4.31\", \"member\"},",
          "1691:  {\"2.5.4.32\", \"owner\"},",
          "1692:  {\"2.5.4.33\", \"roleOccupant\"},",
          "1693:  {\"2.5.4.34\", \"seeAlso\"},",
          "1694:  {\"2.5.4.35\", \"userPassword\"},",
          "1695:  {\"2.5.4.36\", \"userCertificate\"},",
          "1696:  {\"2.5.4.37\", \"caCertificate\"},",
          "1697:  {\"2.5.4.38\", \"authorityRevocationList\"},",
          "1698:  {\"2.5.4.39\", \"certificateRevocationList\"},",
          "1699:  {\"2.5.4.40\", \"crossCertificatePair\"},",
          "1700:  {\"2.5.4.41\", \"name\"},",
          "1701:  {\"2.5.4.42\", \"givenName\"},",
          "1702:  {\"2.5.4.43\", \"initials\"},",
          "1703:  {\"2.5.4.44\", \"generationQualifier\"},",
          "1704:  {\"2.5.4.45\", \"uniqueIdentifier\"},",
          "1705:  {\"2.5.4.46\", \"dnQualifier\"},",
          "1706:  {\"2.5.4.47\", \"enhancedSearchGuide\"},",
          "1707:  {\"2.5.4.48\", \"protocolInformation\"},",
          "1708:  {\"2.5.4.49\", \"distinguishedName\"},",
          "1709:  {\"2.5.4.50\", \"uniqueMember\"},",
          "1710:  {\"2.5.4.51\", \"houseIdentifier\"},",
          "1711:  {\"2.5.4.52\", \"supportedAlgorithms\"},",
          "1712:  {\"2.5.4.53\", \"deltaRevocationList\"},",
          "1713:  {\"2.5.4.54\", \"dmdName\"},",
          "1714:  {\"2.5.4.55\", \"clearance\"},",
          "1715:  {\"2.5.4.56\", \"defaultDirQop\"},",
          "1716:  {\"2.5.4.57\", \"attributeIntegrityInfo\"},",
          "1717:  {\"2.5.4.58\", \"attributeCertificate\"},",
          "1718:  {\"2.5.4.59\", \"attributeCertificateRevocationList\"},",
          "1719:  {\"2.5.4.60\", \"confKeyInfo\"},",
          "1720:  {\"2.5.4.61\", \"aACertificate\"},",
          "1721:  {\"2.5.4.62\", \"attributeDescriptorCertificate\"},",
          "1722:  {\"2.5.4.63\", \"attributeAuthorityRevocationList\"},",
          "1723:  {\"2.5.4.64\", \"familyInformation\"},",
          "1724:  {\"2.5.4.65\", \"pseudonym\"},",
          "1725:  {\"2.5.4.66\", \"communicationsService\"},",
          "1726:  {\"2.5.4.67\", \"communicationsNetwork\"},",
          "1727:  {\"2.5.4.68\", \"certificationPracticeStmt\"},",
          "1728:  {\"2.5.4.69\", \"certificatePolicy\"},",
          "1729:  {\"2.5.4.70\", \"pkiPath\"},",
          "1730:  {\"2.5.4.71\", \"privPolicy\"},",
          "1731:  {\"2.5.4.72\", \"role\"},",
          "1732:  {\"2.5.4.73\", \"delegationPath\"},",
          "1733:  {\"2.5.4.74\", \"protPrivPolicy\"},",
          "1734:  {\"2.5.4.75\", \"xMLPrivilegeInfo\"},",
          "1735:  {\"2.5.4.76\", \"xmlPrivPolicy\"},",
          "1736:  {\"2.5.4.82\", \"permission\"},",
          "1737:  {\"2.5.6.0\", \"top\"},",
          "1738:  {\"2.5.6.1\", \"alias\"},",
          "1739:  {\"2.5.6.2\", \"country\"},",
          "1740:  {\"2.5.6.3\", \"locality\"},",
          "1741:  {\"2.5.6.4\", \"organization\"},",
          "1742:  {\"2.5.6.5\", \"organizationalUnit\"},",
          "1743:  {\"2.5.6.6\", \"person\"},",
          "1744:  {\"2.5.6.7\", \"organizationalPerson\"},",
          "1745:  {\"2.5.6.8\", \"organizationalRole\"},",
          "1746:  {\"2.5.6.9\", \"groupOfNames\"},",
          "1747:  {\"2.5.6.10\", \"residentialPerson\"},",
          "1748:  {\"2.5.6.11\", \"applicationProcess\"},",
          "1749:  {\"2.5.6.12\", \"applicationEntity\"},",
          "1750:  {\"2.5.6.13\", \"dSA\"},",
          "1751:  {\"2.5.6.14\", \"device\"},",
          "1752:  {\"2.5.6.15\", \"strongAuthenticationUser\"},",
          "1753:  {\"2.5.6.16\", \"certificateAuthority\"},",
          "1754:  {\"2.5.6.17\", \"groupOfUniqueNames\"},",
          "1755:  {\"2.5.6.21\", \"pkiUser\"},",
          "1756:  {\"2.5.6.22\", \"pkiCA\"},",
          "1757:  {\"2.5.8.1.1\", \"rsa\"},",
          "1758:  {\"2.5.29.1\", \"authorityKeyIdentifier\"},",
          "1759:  {\"2.5.29.2\", \"keyAttributes\"},",
          "1760:  {\"2.5.29.3\", \"certificatePolicies\"},",
          "1761:  {\"2.5.29.4\", \"keyUsageRestriction\"},",
          "1762:  {\"2.5.29.5\", \"policyMapping\"},",
          "1763:  {\"2.5.29.6\", \"subtreesConstraint\"},",
          "1764:  {\"2.5.29.7\", \"subjectAltName\"},",
          "1765:  {\"2.5.29.8\", \"issuerAltName\"},",
          "1766:  {\"2.5.29.9\", \"subjectDirectoryAttributes\"},",
          "1767:  {\"2.5.29.10\", \"basicConstraints\"},",
          "1768:  {\"2.5.29.11\", \"nameConstraints\"},",
          "1769:  {\"2.5.29.12\", \"policyConstraints\"},",
          "1770:  {\"2.5.29.13\", \"basicConstraints\"},",
          "1771:  {\"2.5.29.14\", \"subjectKeyIdentifier\"},",
          "1772:  {\"2.5.29.15\", \"keyUsage\"},",
          "1773:  {\"2.5.29.16\", \"privateKeyUsagePeriod\"},",
          "1774:  {\"2.5.29.17\", \"subjectAltName\"},",
          "1775:  {\"2.5.29.18\", \"issuerAltName\"},",
          "1776:  {\"2.5.29.19\", \"basicConstraints\"},",
          "1777:  {\"2.5.29.20\", \"cRLNumber\"},",
          "1778:  {\"2.5.29.21\", \"cRLReason\"},",
          "1779:  {\"2.5.29.22\", \"expirationDate\"},",
          "1780:  {\"2.5.29.23\", \"instructionCode\"},",
          "1781:  {\"2.5.29.24\", \"invalidityDate\"},",
          "1782:  {\"2.5.29.25\", \"cRLDistributionPoints\"},",
          "1783:  {\"2.5.29.26\", \"issuingDistributionPoint\"},",
          "1784:  {\"2.5.29.27\", \"deltaCRLIndicator\"},",
          "1785:  {\"2.5.29.28\", \"issuingDistributionPoint\"},",
          "1786:  {\"2.5.29.29\", \"certificateIssuer\"},",
          "1787:  {\"2.5.29.30\", \"nameConstraints\"},",
          "1788:  {\"2.5.29.31\", \"cRLDistributionPoints\"},",
          "1789:  {\"2.5.29.32\", \"certificatePolicies\"},",
          "1790:  {\"2.5.29.32.0\", \"anyPolicy\"},",
          "1791:  {\"2.5.29.33\", \"policyMappings\"},",
          "1792:  {\"2.5.29.34\", \"policyConstraints\"},",
          "1793:  {\"2.5.29.35\", \"authorityKeyIdentifier\"},",
          "1794:  {\"2.5.29.36\", \"policyConstraints\"},",
          "1795:  {\"2.5.29.37\", \"extKeyUsage\"},",
          "1796:  {\"2.5.29.37.0\", \"anyExtendedKeyUsage\"},",
          "1797:  {\"2.5.29.38\", \"authorityAttributeIdentifier\"},",
          "1798:  {\"2.5.29.39\", \"roleSpecCertIdentifier\"},",
          "1799:  {\"2.5.29.40\", \"cRLStreamIdentifier\"},",
          "1800:  {\"2.5.29.41\", \"basicAttConstraints\"},",
          "1801:  {\"2.5.29.42\", \"delegatedNameConstraints\"},",
          "1802:  {\"2.5.29.43\", \"timeSpecification\"},",
          "1803:  {\"2.5.29.44\", \"cRLScope\"},",
          "1804:  {\"2.5.29.45\", \"statusReferrals\"},",
          "1805:  {\"2.5.29.46\", \"freshestCRL\"},",
          "1806:  {\"2.5.29.47\", \"orderedList\"},",
          "1807:  {\"2.5.29.48\", \"attributeDescriptor\"},",
          "1808:  {\"2.5.29.49\", \"userNotice\"},",
          "1809:  {\"2.5.29.50\", \"sOAIdentifier\"},",
          "1810:  {\"2.5.29.51\", \"baseUpdateTime\"},",
          "1811:  {\"2.5.29.52\", \"acceptableCertPolicies\"},",
          "1812:  {\"2.5.29.53\", \"deltaInfo\"},",
          "1813:  {\"2.5.29.54\", \"inhibitAnyPolicy\"},",
          "1814:  {\"2.5.29.55\", \"targetInformation\"},",
          "1815:  {\"2.5.29.56\", \"noRevAvail\"},",
          "1816:  {\"2.5.29.57\", \"acceptablePrivilegePolicies\"},",
          "1817:  {\"2.5.29.58\", \"toBeRevoked\"},",
          "1818:  {\"2.5.29.59\", \"revokedGroups\"},",
          "1819:  {\"2.5.29.60\", \"expiredCertsOnCRL\"},",
          "1820:  {\"2.5.29.61\", \"indirectIssuer\"},",
          "1821:  {\"2.5.29.62\", \"noAssertion\"},",
          "1822:  {\"2.5.29.63\", \"aAissuingDistributionPoint\"},",
          "1823:  {\"2.5.29.64\", \"issuedOnBehalfOf\"},",
          "1824:  {\"2.5.29.65\", \"singleUse\"},",
          "1825:  {\"2.5.29.66\", \"groupAC\"},",
          "1826:  {\"2.5.29.67\", \"allowedAttAss\"},",
          "1827:  {\"2.5.29.68\", \"attributeMappings\"},",
          "1828:  {\"2.5.29.69\", \"holderNameConstraints\"},",
          "1829:  {\"2.16.724.1.2.2.4.1\", \"personalDataInfo\"},",
          "1830:  {\"2.16.840.1.101.2.1.1.1\", \"sdnsSignatureAlgorithm\"},",
          "1831:  {\"2.16.840.1.101.2.1.1.2\", \"fortezzaSignatureAlgorithm\"},",
          "1832:  {\"2.16.840.1.101.2.1.1.3\", \"sdnsConfidentialityAlgorithm\"},",
          "1833:  {\"2.16.840.1.101.2.1.1.4\", \"fortezzaConfidentialityAlgorithm\"},",
          "1834:  {\"2.16.840.1.101.2.1.1.5\", \"sdnsIntegrityAlgorithm\"},",
          "1835:  {\"2.16.840.1.101.2.1.1.6\", \"fortezzaIntegrityAlgorithm\"},",
          "1836:  {\"2.16.840.1.101.2.1.1.7\", \"sdnsTokenProtectionAlgorithm\"},",
          "1837:  {\"2.16.840.1.101.2.1.1.8\", \"fortezzaTokenProtectionAlgorithm\"},",
          "1838:  {\"2.16.840.1.101.2.1.1.9\", \"sdnsKeyManagementAlgorithm\"},",
          "1839:  {\"2.16.840.1.101.2.1.1.10\", \"fortezzaKeyManagementAlgorithm\"},",
          "1840:  {\"2.16.840.1.101.2.1.1.11\", \"sdnsKMandSigAlgorithm\"},",
          "1841:  {\"2.16.840.1.101.2.1.1.12\", \"fortezzaKMandSigAlgorithm\"},",
          "1842:  {\"2.16.840.1.101.2.1.1.13\", \"suiteASignatureAlgorithm\"},",
          "1843:  {\"2.16.840.1.101.2.1.1.14\", \"suiteAConfidentialityAlgorithm\"},",
          "1844:  {\"2.16.840.1.101.2.1.1.15\", \"suiteAIntegrityAlgorithm\"},",
          "1845:  {\"2.16.840.1.101.2.1.1.16\", \"suiteATokenProtectionAlgorithm\"},",
          "1846:  {\"2.16.840.1.101.2.1.1.17\", \"suiteAKeyManagementAlgorithm\"},",
          "1847:  {\"2.16.840.1.101.2.1.1.18\", \"suiteAKMandSigAlgorithm\"},",
          "1848:  {\"2.16.840.1.101.2.1.1.19\", \"fortezzaUpdatedSigAlgorithm\"},",
          "1849:  {\"2.16.840.1.101.2.1.1.20\", \"fortezzaKMandUpdSigAlgorithms\"},",
          "1850:  {\"2.16.840.1.101.2.1.1.21\", \"fortezzaUpdatedIntegAlgorithm\"},",
          "1851:  {\"2.16.840.1.101.2.1.1.22\", \"keyExchangeAlgorithm\"},",
          "1852:  {\"2.16.840.1.101.2.1.1.23\", \"fortezzaWrap80Algorithm\"},",
          "1853:  {\"2.16.840.1.101.2.1.1.24\", \"kEAKeyEncryptionAlgorithm\"},",
          "1854:  {\"2.16.840.1.101.2.1.2.1\", \"rfc822MessageFormat\"},",
          "1855:  {\"2.16.840.1.101.2.1.2.2\", \"emptyContent\"},",
          "1856:  {\"2.16.840.1.101.2.1.2.3\", \"cspContentType\"},",
          "1857:  {\"2.16.840.1.101.2.1.2.42\", \"mspRev3ContentType\"},",
          "1858:  {\"2.16.840.1.101.2.1.2.48\", \"mspContentType\"},",
          "1859:  {\"2.16.840.1.101.2.1.2.49\", \"mspRekeyAgentProtocol\"},",
          "1860:  {\"2.16.840.1.101.2.1.2.50\", \"mspMMP\"},",
          "1861:  {\"2.16.840.1.101.2.1.2.66\", \"mspRev3-1ContentType\"},",
          "1862:  {\"2.16.840.1.101.2.1.2.72\", \"forwardedMSPMessageBodyPart\"},",
          "1863:  {\"2.16.840.1.101.2.1.2.73\", \"mspForwardedMessageParameters\"},",
          "1864:  {\"2.16.840.1.101.2.1.2.74\", \"forwardedCSPMsgBodyPart\"},",
          "1865:  {\"2.16.840.1.101.2.1.2.75\", \"cspForwardedMessageParameters\"},",
          "1866:  {\"2.16.840.1.101.2.1.2.76\", \"mspMMP2\"},",
          "1867:  {\"2.16.840.1.101.2.1.3.1\", \"sdnsSecurityPolicy\"},",
          "1868:  {\"2.16.840.1.101.2.1.3.2\", \"sdnsPRBAC\"},",
          "1869:  {\"2.16.840.1.101.2.1.3.3\", \"mosaicPRBAC\"},",
          "1870:  {\"2.16.840.1.101.2.1.3.10\", \"siSecurityPolicy\"},",
          "1871:  {\"2.16.840.1.101.2.1.3.10.0\", \"siNASP\"},",
          "1872:  {\"2.16.840.1.101.2.1.3.10.1\", \"siELCO\"},",
          "1873:  {\"2.16.840.1.101.2.1.3.10.2\", \"siTK\"},",
          "1874:  {\"2.16.840.1.101.2.1.3.10.3\", \"siDSAP\"},",
          "1875:  {\"2.16.840.1.101.2.1.3.10.4\", \"siSSSS\"},",
          "1876:  {\"2.16.840.1.101.2.1.3.10.5\", \"siDNASP\"},",
          "1877:  {\"2.16.840.1.101.2.1.3.10.6\", \"siBYEMAN\"},",
          "1878:  {\"2.16.840.1.101.2.1.3.10.7\", \"siREL-US\"},",
          "1879:  {\"2.16.840.1.101.2.1.3.10.8\", \"siREL-AUS\"},",
          "1880:  {\"2.16.840.1.101.2.1.3.10.9\", \"siREL-CAN\"},",
          "1881:  {\"2.16.840.1.101.2.1.3.10.10\", \"siREL_UK\"},",
          "1882:  {\"2.16.840.1.101.2.1.3.10.11\", \"siREL-NZ\"},",
          "1883:  {\"2.16.840.1.101.2.1.3.10.12\", \"siGeneric\"},",
          "1884:  {\"2.16.840.1.101.2.1.3.11\", \"genser\"},",
          "1885:  {\"2.16.840.1.101.2.1.3.11.0\", \"genserNations\"},",
          "1886:  {\"2.16.840.1.101.2.1.3.11.1\", \"genserComsec\"},",
          "1887:  {\"2.16.840.1.101.2.1.3.11.2\", \"genserAcquisition\"},",
          "1888:  {\"2.16.840.1.101.2.1.3.11.3\", \"genserSecurityCategories\"},",
          "1889:  {\"2.16.840.1.101.2.1.3.11.3.0\", \"genserTagSetName\"},",
          "1890:  {\"2.16.840.1.101.2.1.3.12\", \"defaultSecurityPolicy\"},",
          "1891:  {\"2.16.840.1.101.2.1.3.13\", \"capcoMarkings\"},",
          "1892:  {\"2.16.840.1.101.2.1.3.13.0\", \"capcoSecurityCategories\"},",
          "1893:  {\"2.16.840.1.101.2.1.3.13.0.1\", \"capcoTagSetName1\"},",
          "1894:  {\"2.16.840.1.101.2.1.3.13.0.2\", \"capcoTagSetName2\"},",
          "1895:  {\"2.16.840.1.101.2.1.3.13.0.3\", \"capcoTagSetName3\"},",
          "1896:  {\"2.16.840.1.101.2.1.3.13.0.4\", \"capcoTagSetName4\"},",
          "1897:  {\"2.16.840.1.101.2.1.5.1\", \"sdnsKeyManagementCertificate\"},",
          "1898:  {\"2.16.840.1.101.2.1.5.2\", \"sdnsUserSignatureCertificate\"},",
          "1899:  {\"2.16.840.1.101.2.1.5.3\", \"sdnsKMandSigCertificate\"},",
          "1900:  {\"2.16.840.1.101.2.1.5.4\", \"fortezzaKeyManagementCertificate\"},",
          "1901:  {\"2.16.840.1.101.2.1.5.5\", \"fortezzaKMandSigCertificate\"},",
          "1902:  {\"2.16.840.1.101.2.1.5.6\", \"fortezzaUserSignatureCertificate\"},",
          "1903:  {\"2.16.840.1.101.2.1.5.7\", \"fortezzaCASignatureCertificate\"},",
          "1904:  {\"2.16.840.1.101.2.1.5.8\", \"sdnsCASignatureCertificate\"},",
          "1905:  {\"2.16.840.1.101.2.1.5.10\", \"auxiliaryVector\"},",
          "1906:  {\"2.16.840.1.101.2.1.5.11\", \"mlReceiptPolicy\"},",
          "1907:  {\"2.16.840.1.101.2.1.5.12\", \"mlMembership\"},",
          "1908:  {\"2.16.840.1.101.2.1.5.13\", \"mlAdministrators\"},",
          "1909:  {\"2.16.840.1.101.2.1.5.14\", \"alid\"},",
          "1910:  {\"2.16.840.1.101.2.1.5.20\", \"janUKMs\"},",
          "1911:  {\"2.16.840.1.101.2.1.5.21\", \"febUKMs\"},",
          "1912:  {\"2.16.840.1.101.2.1.5.22\", \"marUKMs\"},",
          "1913:  {\"2.16.840.1.101.2.1.5.23\", \"aprUKMs\"},",
          "1914:  {\"2.16.840.1.101.2.1.5.24\", \"mayUKMs\"},",
          "1915:  {\"2.16.840.1.101.2.1.5.25\", \"junUKMs\"},",
          "1916:  {\"2.16.840.1.101.2.1.5.26\", \"julUKMs\"},",
          "1917:  {\"2.16.840.1.101.2.1.5.27\", \"augUKMs\"},",
          "1918:  {\"2.16.840.1.101.2.1.5.28\", \"sepUKMs\"},",
          "1919:  {\"2.16.840.1.101.2.1.5.29\", \"octUKMs\"},",
          "1920:  {\"2.16.840.1.101.2.1.5.30\", \"novUKMs\"},",
          "1921:  {\"2.16.840.1.101.2.1.5.31\", \"decUKMs\"},",
          "1922:  {\"2.16.840.1.101.2.1.5.40\", \"metaSDNSckl\"},",
          "1923:  {\"2.16.840.1.101.2.1.5.41\", \"sdnsCKL\"},",
          "1924:  {\"2.16.840.1.101.2.1.5.42\", \"metaSDNSsignatureCKL\"},",
          "1925:  {\"2.16.840.1.101.2.1.5.43\", \"sdnsSignatureCKL\"},",
          "1926:  {\"2.16.840.1.101.2.1.5.44\", \"sdnsCertificateRevocationList\"},",
          "1927:  {\"2.16.840.1.101.2.1.5.45\", \"fortezzaCertificateRevocationList\"},",
          "1928:  {\"2.16.840.1.101.2.1.5.46\", \"fortezzaCKL\"},",
          "1929:  {\"2.16.840.1.101.2.1.5.47\", \"alExemptedAddressProcessor\"},",
          "1930:  {\"2.16.840.1.101.2.1.5.48\", \"guard\"},",
          "1931:  {\"2.16.840.1.101.2.1.5.49\", \"algorithmsSupported\"},",
          "1932:  {\"2.16.840.1.101.2.1.5.50\", \"suiteAKeyManagementCertificate\"},",
          "1933:  {\"2.16.840.1.101.2.1.5.51\", \"suiteAKMandSigCertificate\"},",
          "1934:  {\"2.16.840.1.101.2.1.5.52\", \"suiteAUserSignatureCertificate\"},",
          "1935:  {\"2.16.840.1.101.2.1.5.53\", \"prbacInfo\"},",
          "1936:  {\"2.16.840.1.101.2.1.5.54\", \"prbacCAConstraints\"},",
          "1937:  {\"2.16.840.1.101.2.1.5.55\", \"sigOrKMPrivileges\"},",
          "1938:  {\"2.16.840.1.101.2.1.5.56\", \"commPrivileges\"},",
          "1939:  {\"2.16.840.1.101.2.1.5.57\", \"labeledAttribute\"},",
          "1940:  {\"2.16.840.1.101.2.1.5.58\", \"policyInformationFile\"},",
          "1941:  {\"2.16.840.1.101.2.1.5.59\", \"secPolicyInformationFile\"},",
          "1942:  {\"2.16.840.1.101.2.1.5.60\", \"cAClearanceConstraint\"},",
          "1943:  {\"2.16.840.1.101.2.1.7.1\", \"cspExtns\"},",
          "1944:  {\"2.16.840.1.101.2.1.7.1.0\", \"cspCsExtn\"},",
          "1945:  {\"2.16.840.1.101.2.1.8.1\", \"mISSISecurityCategories\"},",
          "1946:  {\"2.16.840.1.101.2.1.8.2\", \"standardSecurityLabelPrivileges\"},",
          "1947:  {\"2.16.840.1.101.2.1.10.1\", \"sigPrivileges\"},",
          "1948:  {\"2.16.840.1.101.2.1.10.2\", \"kmPrivileges\"},",
          "1949:  {\"2.16.840.1.101.2.1.10.3\", \"namedTagSetPrivilege\"},",
          "1950:  {\"2.16.840.1.101.2.1.11.1\", \"ukDemo\"},",
          "1951:  {\"2.16.840.1.101.2.1.11.2\", \"usDODClass2\"},",
          "1952:  {\"2.16.840.1.101.2.1.11.3\", \"usMediumPilot\"},",
          "1953:  {\"2.16.840.1.101.2.1.11.4\", \"usDODClass4\"},",
          "1954:  {\"2.16.840.1.101.2.1.11.5\", \"usDODClass3\"},",
          "1955:  {\"2.16.840.1.101.2.1.11.6\", \"usDODClass5\"},",
          "1956:  {\"2.16.840.1.101.2.1.12.0\", \"testSecurityPolicy\"},",
          "1957:  {\"2.16.840.1.101.2.1.12.0.1\", \"tsp1\"},",
          "1958:  {\"2.16.840.1.101.2.1.12.0.1.0\", \"tsp1SecurityCategories\"},",
          "1959:  {\"2.16.840.1.101.2.1.12.0.1.0.0\", \"tsp1TagSetZero\"},",
          "1960:  {\"2.16.840.1.101.2.1.12.0.1.0.1\", \"tsp1TagSetOne\"},",
          "1961:  {\"2.16.840.1.101.2.1.12.0.1.0.2\", \"tsp1TagSetTwo\"},",
          "1962:  {\"2.16.840.1.101.2.1.12.0.2\", \"tsp2\"},",
          "1963:  {\"2.16.840.1.101.2.1.12.0.2.0\", \"tsp2SecurityCategories\"},",
          "1964:  {\"2.16.840.1.101.2.1.12.0.2.0.0\", \"tsp2TagSetZero\"},",
          "1965:  {\"2.16.840.1.101.2.1.12.0.2.0.1\", \"tsp2TagSetOne\"},",
          "1966:  {\"2.16.840.1.101.2.1.12.0.2.0.2\", \"tsp2TagSetTwo\"},",
          "1967:  {\"2.16.840.1.101.2.1.12.0.3\", \"kafka\"},",
          "1968:  {\"2.16.840.1.101.2.1.12.0.3.0\", \"kafkaSecurityCategories\"},",
          "1969:  {\"2.16.840.1.101.2.1.12.0.3.0.1\", \"kafkaTagSetName1\"},",
          "1970:  {\"2.16.840.1.101.2.1.12.0.3.0.2\", \"kafkaTagSetName2\"},",
          "1971:  {\"2.16.840.1.101.2.1.12.0.3.0.3\", \"kafkaTagSetName3\"},",
          "1972:  {\"2.16.840.1.101.2.1.12.1.1\", \"tcp1\"},",
          "1973:  {\"2.16.840.1.101.3.1\", \"slabel\"},",
          "1974:  {\"2.16.840.1.101.3.2\", \"pki\"},",
          "1975:  {\"2.16.840.1.101.3.2.1\", \"NIST.policyIdentifier\"},",
          "1976:  {\"2.16.840.1.101.3.2.1.3.1\", \"fbcaRudimentaryPolicy\"},",
          "1977:  {\"2.16.840.1.101.3.2.1.3.2\", \"fbcaBasicPolicy\"},",
          "1978:  {\"2.16.840.1.101.3.2.1.3.3\", \"fbcaMediumPolicy\"},",
          "1979:  {\"2.16.840.1.101.3.2.1.3.4\", \"fbcaHighPolicy\"},",
          "1980:  {\"2.16.840.1.101.3.2.1.48.1\", \"nistTestPolicy1\"},",
          "1981:  {\"2.16.840.1.101.3.2.1.48.2\", \"nistTestPolicy2\"},",
          "1982:  {\"2.16.840.1.101.3.2.1.48.3\", \"nistTestPolicy3\"},",
          "1983:  {\"2.16.840.1.101.3.2.1.48.4\", \"nistTestPolicy4\"},",
          "1984:  {\"2.16.840.1.101.3.2.1.48.5\", \"nistTestPolicy5\"},",
          "1985:  {\"2.16.840.1.101.3.2.1.48.6\", \"nistTestPolicy6\"},",
          "1986:  {\"2.16.840.1.101.3.2.2\", \"gak\"},",
          "1987:  {\"2.16.840.1.101.3.2.2.1\", \"kRAKey\"},",
          "1988:  {\"2.16.840.1.101.3.2.3\", \"extensions\"},",
          "1989:  {\"2.16.840.1.101.3.2.3.1\", \"kRTechnique\"},",
          "1990:  {\"2.16.840.1.101.3.2.3.2\", \"kRecoveryCapable\"},",
          "1991:  {\"2.16.840.1.101.3.2.3.3\", \"kR\"},",
          "1992:  {\"2.16.840.1.101.3.2.4\", \"keyRecoverySchemes\"},",
          "1993:  {\"2.16.840.1.101.3.2.5\", \"krapola\"},",
          "1994:  {\"2.16.840.1.101.3.3\", \"arpa\"},",
          "1995:  {\"2.16.840.1.101.3.4\", \"nistAlgorithm\"},",
          "1996:  {\"2.16.840.1.101.3.4.1\", \"aes\"},",
          "1997:  {\"2.16.840.1.101.3.4.1.1\", \"aes128-ECB\"},",
          "1998:  {\"2.16.840.1.101.3.4.1.2\", \"aes128-CBC\"},",
          "1999:  {\"2.16.840.1.101.3.4.1.3\", \"aes128-OFB\"},",
          "2000:  {\"2.16.840.1.101.3.4.1.4\", \"aes128-CFB\"},",
          "2001:  {\"2.16.840.1.101.3.4.1.5\", \"aes128-wrap\"},",
          "2002:  {\"2.16.840.1.101.3.4.1.6\", \"aes128-GCM\"},",
          "2003:  {\"2.16.840.1.101.3.4.1.7\", \"aes128-CCM\"},",
          "2004:  {\"2.16.840.1.101.3.4.1.8\", \"aes128-wrap-pad\"},",
          "2005:  {\"2.16.840.1.101.3.4.1.21\", \"aes192-ECB\"},",
          "2006:  {\"2.16.840.1.101.3.4.1.22\", \"aes192-CBC\"},",
          "2007:  {\"2.16.840.1.101.3.4.1.23\", \"aes192-OFB\"},",
          "2008:  {\"2.16.840.1.101.3.4.1.24\", \"aes192-CFB\"},",
          "2009:  {\"2.16.840.1.101.3.4.1.25\", \"aes192-wrap\"},",
          "2010:  {\"2.16.840.1.101.3.4.1.26\", \"aes192-GCM\"},",
          "2011:  {\"2.16.840.1.101.3.4.1.27\", \"aes192-CCM\"},",
          "2012:  {\"2.16.840.1.101.3.4.1.28\", \"aes192-wrap-pad\"},",
          "2013:  {\"2.16.840.1.101.3.4.1.41\", \"aes256-ECB\"},",
          "2014:  {\"2.16.840.1.101.3.4.1.42\", \"aes256-CBC\"},",
          "2015:  {\"2.16.840.1.101.3.4.1.43\", \"aes256-OFB\"},",
          "2016:  {\"2.16.840.1.101.3.4.1.44\", \"aes256-CFB\"},",
          "2017:  {\"2.16.840.1.101.3.4.1.45\", \"aes256-wrap\"},",
          "2018:  {\"2.16.840.1.101.3.4.1.46\", \"aes256-GCM\"},",
          "2019:  {\"2.16.840.1.101.3.4.1.47\", \"aes256-CCM\"},",
          "2020:  {\"2.16.840.1.101.3.4.1.48\", \"aes256-wrap-pad\"},",
          "2021:  {\"2.16.840.1.101.3.4.2\", \"hashAlgos\"},",
          "2022:  {\"2.16.840.1.101.3.4.2.1\", \"sha-256\"},",
          "2023:  {\"2.16.840.1.101.3.4.2.2\", \"sha-384\"},",
          "2024:  {\"2.16.840.1.101.3.4.2.3\", \"sha-512\"},",
          "2025:  {\"2.16.840.1.101.3.4.2.4\", \"sha-224\"},",
          "2026:  {\"2.16.840.1.101.3.4.3.1\", \"dsaWithSha224\"},",
          "2027:  {\"2.16.840.1.101.3.4.3.2\", \"dsaWithSha256\"},",
          "2028:  {\"2.16.840.1.113719.1.2.8\", \"novellAlgorithm\"},",
          "2029:  {\"2.16.840.1.113719.1.2.8.22\", \"desCbcIV8\"},",
          "2030:  {\"2.16.840.1.113719.1.2.8.23\", \"desCbcPadIV8\"},",
          "2031:  {\"2.16.840.1.113719.1.2.8.24\", \"desEDE2CbcIV8\"},",
          "2032:  {\"2.16.840.1.113719.1.2.8.25\", \"desEDE2CbcPadIV8\"},",
          "2033:  {\"2.16.840.1.113719.1.2.8.26\", \"desEDE3CbcIV8\"},",
          "2034:  {\"2.16.840.1.113719.1.2.8.27\", \"desEDE3CbcPadIV8\"},",
          "2035:  {\"2.16.840.1.113719.1.2.8.28\", \"rc5CbcPad\"},",
          "2036:  {\"2.16.840.1.113719.1.2.8.29\", \"md2WithRSAEncryptionBSafe1\"},",
          "2037:  {\"2.16.840.1.113719.1.2.8.30\", \"md5WithRSAEncryptionBSafe1\"},",
          "2038:  {\"2.16.840.1.113719.1.2.8.31\", \"sha1WithRSAEncryptionBSafe1\"},",
          "2039:  {\"2.16.840.1.113719.1.2.8.32\", \"lmDigest\"},",
          "2040:  {\"2.16.840.1.113719.1.2.8.40\", \"md2\"},",
          "2041:  {\"2.16.840.1.113719.1.2.8.50\", \"md5\"},",
          "2042:  {\"2.16.840.1.113719.1.2.8.51\", \"ikeHmacWithSHA1-RSA\"},",
          "2043:  {\"2.16.840.1.113719.1.2.8.52\", \"ikeHmacWithMD5-RSA\"},",
          "2044:  {\"2.16.840.1.113719.1.2.8.69\", \"rc2CbcPad\"},",
          "2045:  {\"2.16.840.1.113719.1.2.8.82\", \"sha-1\"},",
          "2046:  {\"2.16.840.1.113719.1.2.8.92\", \"rc2BSafe1Cbc\"},",
          "2047:  {\"2.16.840.1.113719.1.2.8.95\", \"md4\"},",
          "2048:  {\"2.16.840.1.113719.1.2.8.130\", \"md4Packet\"},",
          "2049:  {\"2.16.840.1.113719.1.2.8.131\", \"rsaEncryptionBsafe1\"},",
          "2050:  {\"2.16.840.1.113719.1.2.8.132\", \"nwPassword\"},",
          "2051:  {\"2.16.840.1.113719.1.2.8.133\", \"novellObfuscate-1\"},",
          "2052:  {\"2.16.840.1.113719.1.9\", \"pki\"},",
          "2053:  {\"2.16.840.1.113719.1.9.4\", \"pkiAttributeType\"},",
          "2054:  {\"2.16.840.1.113719.1.9.4.1\", \"securityAttributes\"},",
          "2055:  {\"2.16.840.1.113719.1.9.4.2\", \"relianceLimit\"},",
          "2056:  {\"2.16.840.1.113730.1\", \"cert-extension\"},",
          "2057:  {\"2.16.840.1.113730.1.1\", \"netscape-cert-type\"},",
          "2058:  {\"2.16.840.1.113730.1.2\", \"netscape-base-url\"},",
          "2059:  {\"2.16.840.1.113730.1.3\", \"netscape-revocation-url\"},",
          "2060:  {\"2.16.840.1.113730.1.4\", \"netscape-ca-revocation-url\"},",
          "2061:  {\"2.16.840.1.113730.1.7\", \"netscape-cert-renewal-url\"},",
          "2062:  {\"2.16.840.1.113730.1.8\", \"netscape-ca-policy-url\"},",
          "2063:  {\"2.16.840.1.113730.1.9\", \"HomePage-url\"},",
          "2064:  {\"2.16.840.1.113730.1.10\", \"EntityLogo\"},",
          "2065:  {\"2.16.840.1.113730.1.11\", \"UserPicture\"},",
          "2066:  {\"2.16.840.1.113730.1.12\", \"netscape-ssl-server-name\"},",
          "2067:  {\"2.16.840.1.113730.1.13\", \"netscape-comment\"},",
          "2068:  {\"2.16.840.1.113730.2\", \"data-type\"},",
          "2069:  {\"2.16.840.1.113730.2.1\", \"dataGIF\"},",
          "2070:  {\"2.16.840.1.113730.2.2\", \"dataJPEG\"},",
          "2071:  {\"2.16.840.1.113730.2.3\", \"dataURL\"},",
          "2072:  {\"2.16.840.1.113730.2.4\", \"dataHTML\"},",
          "2073:  {\"2.16.840.1.113730.2.5\", \"certSequence\"},",
          "2074:  {\"2.16.840.1.113730.2.6\", \"certURL\"},",
          "2075:  {\"2.16.840.1.113730.3\", \"directory\"},",
          "2076:  {\"2.16.840.1.113730.3.1\", \"ldapDefinitions\"},",
          "2077:  {\"2.16.840.1.113730.3.1.1\", \"carLicense\"},",
          "2078:  {\"2.16.840.1.113730.3.1.2\", \"departmentNumber\"},",
          "2079:  {\"2.16.840.1.113730.3.1.3\", \"employeeNumber\"},",
          "2080:  {\"2.16.840.1.113730.3.1.4\", \"employeeType\"},",
          "2081:  {\"2.16.840.1.113730.3.2.2\", \"inetOrgPerson\"},",
          "2082:  {\"2.16.840.1.113730.4.1\", \"serverGatedCrypto\"},",
          "2083:  {\"2.16.840.1.113733.1\", \"pki\"},",
          "2084:  {\"2.16.840.1.113733.1.9\", \"pkcs7Attribute\"},",
          "2085:  {\"2.16.840.1.113733.1.9.2\", \"messageType\"},",
          "2086:  {\"2.16.840.1.113733.1.9.3\", \"pkiStatus\"},",
          "2087:  {\"2.16.840.1.113733.1.9.4\", \"failInfo\"},",
          "2088:  {\"2.16.840.1.113733.1.9.5\", \"senderNonce\"},",
          "2089:  {\"2.16.840.1.113733.1.9.6\", \"recipientNonce\"},",
          "2090:  {\"2.16.840.1.113733.1.9.7\", \"transID\"},",
          "2091:  {\"2.16.840.1.113733.1.9.8\", \"extensionReq\"},",
          "2092:  {\"2.16.840.1.113741.2\", \"intelCDSA\"},",
          "2093:  {\"2.16.840.1.114412.1\", \"digiCertNonEVCerts\"},",
          "2094:  {\"2.16.840.1.114412.1.1\", \"digiCertOVCert\"},",
          "2095:  {\"2.16.840.1.114412.1.2\", \"digiCertDVCert\"},",
          "2096:  {\"2.16.840.1.114412.1.11\", \"digiCertFederatedDeviceCert\"},",
          "2097:  {\"2.16.840.1.114412.1.3.0.1\", \"digiCertGlobalCAPolicy\"},",
          "2098:  {\"2.16.840.1.114412.1.3.0.2\", \"digiCertHighAssuranceEVCAPolicy\"},",
          "2099:  {\"2.16.840.1.114412.1.3.0.3\", \"digiCertGlobalRootCAPolicy\"},",
          "2100:  {\"2.16.840.1.114412.1.3.0.4\", \"digiCertAssuredIDRootCAPolicy\"},",
          "2101:  {\"2.16.840.1.114412.2.2\", \"digiCertEVCert\"},",
          "2102:  {\"2.16.840.1.114412.2.3\", \"digiCertObjectSigningCert\"},",
          "2103:  {\"2.16.840.1.114412.2.3.1\", \"digiCertCodeSigningCert\"},",
          "2104:  {\"2.16.840.1.114412.2.3.2\", \"digiCertEVCodeSigningCert\"},",
          "2105:  {\"2.16.840.1.114412.2.3.11\", \"digiCertKernelCodeSigningCert\"},",
          "2106:  {\"2.16.840.1.114412.2.3.21\", \"digiCertDocumentSigningCert\"},",
          "2107:  {\"2.16.840.1.114412.2.4\", \"digiCertClientCert\"},",
          "2108:  {\"2.16.840.1.114412.2.4.1.1\", \"digiCertLevel1PersonalClientCert\"},",
          "2109:  {\"2.16.840.1.114412.2.4.1.2\", \"digiCertLevel1EnterpriseClientCert\"},",
          "2110:  {\"2.16.840.1.114412.2.4.2\", \"digiCertLevel2ClientCert\"},",
          "2111:  {\"2.16.840.1.114412.2.4.3.1\", \"digiCertLevel3USClientCert\"},",
          "2112:  {\"2.16.840.1.114412.2.4.3.2\", \"digiCertLevel3CBPClientCert\"},",
          "2113:  {\"2.16.840.1.114412.2.4.4.1\", \"digiCertLevel4USClientCert\"},",
          "2114:  {\"2.16.840.1.114412.2.4.4.2\", \"digiCertLevel4CBPClientCert\"},",
          "2115:  {\"2.16.840.1.114412.2.4.5.1\", \"digiCertPIVHardwareCert\"},",
          "2116:  {\"2.16.840.1.114412.2.4.5.2\", \"digiCertPIVCardAuthCert\"},",
          "2117:  {\"2.16.840.1.114412.2.4.5.3\", \"digiCertPIVContentSigningCert\"},",
          "2118:  {\"2.16.840.1.114412.4.31\", \"digiCertGridClassicCert\"},",
          "2119:  {\"2.16.840.1.114412.4.31.5\", \"digiCertGridIntegratedCert\"},",
          "2120:  {\"2.16.840.1.114412.31.4.31.1\", \"digiCertGridHostCert\"},",
          "2121:  {\"2.23.42.0\", \"contentType\"},",
          "2122:  {\"2.23.42.0.0\", \"panData\"},",
          "2123:  {\"2.23.42.0.1\", \"panToken\"},",
          "2124:  {\"2.23.42.0.2\", \"panOnly\"},",
          "2125:  {\"2.23.42.1\", \"msgExt\"},",
          "2126:  {\"2.23.42.2\", \"field\"},",
          "2127:  {\"2.23.42.2.0\", \"fullName\"},",
          "2128:  {\"2.23.42.2.1\", \"givenName\"},",
          "2129:  {\"2.23.42.2.2\", \"familyName\"},",
          "2130:  {\"2.23.42.2.3\", \"birthFamilyName\"},",
          "2131:  {\"2.23.42.2.4\", \"placeName\"},",
          "2132:  {\"2.23.42.2.5\", \"identificationNumber\"},",
          "2133:  {\"2.23.42.2.6\", \"month\"},",
          "2134:  {\"2.23.42.2.7\", \"date\"},",
          "2135:  {\"2.23.42.2.8\", \"address\"},",
          "2136:  {\"2.23.42.2.9\", \"telephone\"},",
          "2137:  {\"2.23.42.2.10\", \"amount\"},",
          "2138:  {\"2.23.42.2.11\", \"accountNumber\"},",
          "2139:  {\"2.23.42.2.12\", \"passPhrase\"},",
          "2140:  {\"2.23.42.3\", \"attribute\"},",
          "2141:  {\"2.23.42.3.0\", \"cert\"},",
          "2142:  {\"2.23.42.3.0.0\", \"rootKeyThumb\"},",
          "2143:  {\"2.23.42.3.0.1\", \"additionalPolicy\"},",
          "2144:  {\"2.23.42.4\", \"algorithm\"},",
          "2145:  {\"2.23.42.5\", \"policy\"},",
          "2146:  {\"2.23.42.5.0\", \"root\"},",
          "2147:  {\"2.23.42.6\", \"module\"},",
          "2148:  {\"2.23.42.7\", \"certExt\"},",
          "2149:  {\"2.23.42.7.0\", \"hashedRootKey\"},",
          "2150:  {\"2.23.42.7.1\", \"certificateType\"},",
          "2151:  {\"2.23.42.7.2\", \"merchantData\"},",
          "2152:  {\"2.23.42.7.3\", \"cardCertRequired\"},",
          "2153:  {\"2.23.42.7.4\", \"tunneling\"},",
          "2154:  {\"2.23.42.7.5\", \"setExtensions\"},",
          "2155:  {\"2.23.42.7.6\", \"setQualifier\"},",
          "2156:  {\"2.23.42.8\", \"brand\"},",
          "2157:  {\"2.23.42.8.1\", \"IATA-ATA\"},",
          "2158:  {\"2.23.42.8.4\", \"VISA\"},",
          "2159:  {\"2.23.42.8.5\", \"MasterCard\"},",
          "2160:  {\"2.23.42.8.30\", \"Diners\"},",
          "2161:  {\"2.23.42.8.34\", \"AmericanExpress\"},",
          "2162:  {\"2.23.42.8.6011\", \"Novus\"},",
          "2163:  {\"2.23.42.9\", \"vendor\"},",
          "2164:  {\"2.23.42.9.0\", \"GlobeSet\"},",
          "2165:  {\"2.23.42.9.1\", \"IBM\"},",
          "2166:  {\"2.23.42.9.2\", \"CyberCash\"},",
          "2167:  {\"2.23.42.9.3\", \"Terisa\"},",
          "2168:  {\"2.23.42.9.4\", \"RSADSI\"},",
          "2169:  {\"2.23.42.9.5\", \"VeriFone\"},",
          "2170:  {\"2.23.42.9.6\", \"TrinTech\"},",
          "2171:  {\"2.23.42.9.7\", \"BankGate\"},",
          "2172:  {\"2.23.42.9.8\", \"GTE\"},",
          "2173:  {\"2.23.42.9.9\", \"CompuSource\"},",
          "2174:  {\"2.23.42.9.10\", \"Griffin\"},",
          "2175:  {\"2.23.42.9.11\", \"Certicom\"},",
          "2176:  {\"2.23.42.9.12\", \"OSS\"},",
          "2177:  {\"2.23.42.9.13\", \"TenthMountain\"},",
          "2178:  {\"2.23.42.9.14\", \"Antares\"},",
          "2179:  {\"2.23.42.9.15\", \"ECC\"},",
          "2180:  {\"2.23.42.9.16\", \"Maithean\"},",
          "2181:  {\"2.23.42.9.17\", \"Netscape\"},",
          "2182:  {\"2.23.42.9.18\", \"Verisign\"},",
          "2183:  {\"2.23.42.9.19\", \"BlueMoney\"},",
          "2184:  {\"2.23.42.9.20\", \"Lacerte\"},",
          "2185:  {\"2.23.42.9.21\", \"Fujitsu\"},",
          "2186:  {\"2.23.42.9.22\", \"eLab\"},",
          "2187:  {\"2.23.42.9.23\", \"Entrust\"},",
          "2188:  {\"2.23.42.9.24\", \"VIAnet\"},",
          "2189:  {\"2.23.42.9.25\", \"III\"},",
          "2190:  {\"2.23.42.9.26\", \"OpenMarket\"},",
          "2191:  {\"2.23.42.9.27\", \"Lexem\"},",
          "2192:  {\"2.23.42.9.28\", \"Intertrader\"},",
          "2193:  {\"2.23.42.9.29\", \"Persimmon\"},",
          "2194:  {\"2.23.42.9.30\", \"NABLE\"},",
          "2195:  {\"2.23.42.9.31\", \"espace-net\"},",
          "2196:  {\"2.23.42.9.32\", \"Hitachi\"},",
          "2197:  {\"2.23.42.9.33\", \"Microsoft\"},",
          "2198:  {\"2.23.42.9.34\", \"NEC\"},",
          "2199:  {\"2.23.42.9.35\", \"Mitsubishi\"},",
          "2200:  {\"2.23.42.9.36\", \"NCR\"},",
          "2201:  {\"2.23.42.9.37\", \"e-COMM\"},",
          "2202:  {\"2.23.42.9.38\", \"Gemplus\"},",
          "2203:  {\"2.23.42.10\", \"national\"},",
          "2204:  {\"2.23.42.10.392\", \"Japan\"},",
          "2205:  {\"2.23.43.1.4\", \"wTLS-ECC\"},",
          "2206:  {\"2.23.43.1.4.1\", \"wTLS-ECC-curve1\"},",
          "2207:  {\"2.23.43.1.4.6\", \"wTLS-ECC-curve6\"},",
          "2208:  {\"2.23.43.1.4.8\", \"wTLS-ECC-curve8\"},",
          "2209:  {\"2.23.43.1.4.9\", \"wTLS-ECC-curve9\"},",
          "2210:  {\"2.23.133\", \"tCPA\"},",
          "2211:  {\"2.23.133.1\", \"tcpaSpecVersion\"},",
          "2212:  {\"2.23.133.2\", \"tcpaAttribute\"},",
          "2213:  {\"2.23.133.2.1\", \"tcpaTpmManufacturer\"},",
          "2214:  {\"2.23.133.2.2\", \"tcpaTpmModel\"},",
          "2215:  {\"2.23.133.2.3\", \"tcpaTpmVersion\"},",
          "2216:  {\"2.23.133.2.4\", \"tcpaPlatformManufacturer\"},",
          "2217:  {\"2.23.133.2.5\", \"tcpaPlatformModel\"},",
          "2218:  {\"2.23.133.2.6\", \"tcpaPlatformVersion\"},",
          "2219:  {\"2.23.133.2.7\", \"tcpaComponentManufacturer\"},",
          "2220:  {\"2.23.133.2.8\", \"tcpaComponentModel\"},",
          "2221:  {\"2.23.133.2.9\", \"tcpaComponentVersion\"},",
          "2222:  {\"2.23.133.2.10\", \"tcpaSecurityQualities\"},",
          "2223:  {\"2.23.133.2.11\", \"tcpaTpmProtectionProfile\"},",
          "2224:  {\"2.23.133.2.12\", \"tcpaTpmSecurityTarget\"},",
          "2225:  {\"2.23.133.2.13\", \"tcpaFoundationProtectionProfile\"},",
          "2226:  {\"2.23.133.2.14\", \"tcpaFoundationSecurityTarget\"},",
          "2227:  {\"2.23.133.2.15\", \"tcpaTpmIdLabel\"},",
          "2228:  {\"2.23.133.3\", \"tcpaProtocol\"},",
          "2229:  {\"2.23.133.3.1\", \"tcpaPrttTpmIdProtocol\"},",
          "2230:  {\"2.23.134.1.4.2.1\", \"postSignumRootQCA..\"},",
          "2231:  {\"2.23.134.1.2.2.3\", \"postSignumPublicCA.\"},",
          "2232:  {\"2.23.134.1.2.1.8.210\", \"postSignumCommercialServerPolicy\"},",
          "2233:  {\"2.23.136.1.1.1\", \"mRTDSignatureData\"},",
          "2234:  {\"2.54.1775.2\", \"hashedRootKey\"},",
          "2235:  {\"2.54.1775.3\", \"certificateType\"},",
          "2236:  {\"2.54.1775.4\", \"merchantData\"},",
          "2237:  {\"2.54.1775.5\", \"cardCertRequired\"},",
          "2238:  {\"2.54.1775.6\", \"tunneling\"},",
          "2239:  {\"2.54.1775.7\", \"setQualifier\"},",
          "2240:  {\"2.54.1775.99\", \"setData\"},",
          "2241:  {0, 0}",
          "2242: };",
          "2244: #ifdef __cplusplus",
          "2245: }",
          "2246: #endif",
          "",
          "---------------"
        ],
        "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c": [
          "File: libr/util/r_pkcs7.c -> libr/util/r_pkcs7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdlib.h>",
          "2: #include <string.h>",
          "3: #include <r_util.h>",
          "4: #include \"r_x509_internal.h\"",
          "5: #include \"r_pkcs7_internal.h\"",
          "7: bool r_pkcs7_parse_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls, RASN1Object *object) {",
          "8:  ut32 i;",
          "9:  if (!crls && !object) {",
          "10:   return false;",
          "11:  }",
          "12:  if (object->list.length > 0) {",
          "13:   crls->elements = (RX509CertificateRevocationList **) calloc (object->list.length, sizeof (RX509CertificateRevocationList*));",
          "14:   if (!crls->elements) {",
          "15:    return false;",
          "16:   }",
          "17:   crls->length = object->list.length;",
          "18:   for (i = 0; i < crls->length; ++i) {",
          "19:    crls->elements[i] = r_x509_parse_crl (object->list.objects[i]);",
          "20:   }",
          "21:  }",
          "22:  return true;",
          "23: }",
          "25: void r_pkcs7_free_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls) {",
          "26:  ut32 i;",
          "27:  if (crls) {",
          "28:   for (i = 0; i < crls->length; ++i) {",
          "29:    r_x509_free_crl (crls->elements[i]);",
          "30:    crls->elements[i] = NULL;",
          "31:   }",
          "32:   free (crls->elements);",
          "33:   crls->elements = NULL;",
          "35:  }",
          "36: }",
          "38: bool r_pkcs7_parse_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac, RASN1Object *object) {",
          "39:  ut32 i;",
          "40:  if (!ecac && !object) {",
          "41:   return false;",
          "42:  }",
          "43:  if (object->list.length > 0) {",
          "44:   ecac->elements = (RX509Certificate **) calloc (object->list.length, sizeof (RX509Certificate*));",
          "45:   if (!ecac->elements) {",
          "46:    return false;",
          "47:   }",
          "48:   ecac->length = object->list.length;",
          "49:   for (i = 0; i < ecac->length; ++i) {",
          "50:    ecac->elements[i] = r_x509_parse_certificate (object->list.objects[i]);",
          "51:   }",
          "52:  }",
          "53:  return true;",
          "54: }",
          "56: void r_pkcs7_free_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac) {",
          "57:  ut32 i;",
          "58:  if (ecac) {",
          "59:   for (i = 0; i < ecac->length; ++i) {",
          "60:    r_x509_free_certificate (ecac->elements[i]);",
          "61:    ecac->elements[i] = NULL;",
          "62:   }",
          "63:   free (ecac->elements);",
          "64:   ecac->elements = NULL;",
          "66:  }",
          "67: }",
          "69: bool r_pkcs7_parse_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai, RASN1Object *object) {",
          "70:  ut32 i;",
          "71:  if (!dai && !object) {",
          "72:   return false;",
          "73:  }",
          "74:  if (object->list.length > 0) {",
          "75:   dai->elements = (RX509AlgorithmIdentifier **) calloc (object->list.length, sizeof (RX509AlgorithmIdentifier*));",
          "76:   if (!dai->elements) {",
          "77:    return false;",
          "78:   }",
          "79:   dai->length = object->list.length;",
          "80:   for (i = 0; i < dai->length; ++i) {",
          "83:    dai->elements[i] = (RX509AlgorithmIdentifier *) malloc (sizeof (RX509AlgorithmIdentifier));",
          "86:    if (dai->elements[i]) {",
          "88:     memset (dai->elements[i], 0, sizeof (RX509AlgorithmIdentifier));",
          "89:     r_x509_parse_algorithmidentifier (dai->elements[i], object->list.objects[i]);",
          "90:    }",
          "91:   }",
          "92:  }",
          "93:  return true;",
          "94: }",
          "96: void r_pkcs7_free_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai) {",
          "97:  ut32 i;",
          "98:  if (dai) {",
          "99:   for (i = 0; i < dai->length; ++i) {",
          "100:    if (dai->elements[i]) {",
          "101:     r_x509_free_algorithmidentifier (dai->elements[i]);",
          "104:     free (dai->elements[i]);",
          "105:     dai->elements[i] = NULL;",
          "106:    }",
          "107:   }",
          "108:   free (dai->elements);",
          "109:   dai->elements = NULL;",
          "111:  }",
          "112: }",
          "114: bool r_pkcs7_parse_contentinfo (RPKCS7ContentInfo* ci, RASN1Object *object) {",
          "115:  if (!ci || !object || object->list.length < 1) {",
          "116:   return false;",
          "117:  }",
          "119:  ci->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "120:  if (object->list.length == 2) {",
          "121:   ci->content = object->list.objects[1];",
          "122:   object->list.objects[1] = NULL;",
          "123:  }",
          "125:  return true;",
          "126: }",
          "128: void r_pkcs7_free_contentinfo (RPKCS7ContentInfo* ci) {",
          "129:  if (ci) {",
          "130:   r_asn1_free_object (ci->content);",
          "131:   r_asn1_free_string (ci->contentType);",
          "133:  }",
          "134: }",
          "136: bool r_pkcs7_parse_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu, RASN1Object *object) {",
          "137:  if (!iasu || !object || object->list.length != 2) {",
          "138:   return false;",
          "139:  }",
          "141:  r_x509_parse_name (&iasu->issuer, object->list.objects[0]);",
          "142:  iasu->serialNumber = object->list.objects[1];",
          "143:  object->list.objects[1] = NULL;",
          "145:  return true;",
          "146: }",
          "148: void r_pkcs7_free_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu) {",
          "149:  if (iasu) {",
          "150:   r_x509_free_name (&iasu->issuer);",
          "151:   r_asn1_free_object (iasu->serialNumber);",
          "153:  }",
          "154: }",
          "157:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "158:  RASN1Object *encryptedDigest;",
          "159:  RASN1Object *unauthenticatedAttributes; //Optional type ??",
          "160: } RPKCS7SignerInfo;",
          "163: bool r_pkcs7_parse_signerinfo (RPKCS7SignerInfo* si, RASN1Object *object) {",
          "164:  RASN1Object **elems;",
          "165:  ut32 shift = 3;",
          "166:  if (!si || !object || object->list.length < 5) {",
          "167:   return false;",
          "168:  }",
          "169:  elems = object->list.objects;",
          "171:  si->version = (ut32) elems[0]->sector[0];",
          "172:  r_pkcs7_parse_issuerandserialnumber (&si->issuerAndSerialNumber, elems[1]);",
          "173:  r_x509_parse_algorithmidentifier (&si->digestAlgorithm, elems[2]);",
          "174:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "175:   r_pkcs7_parse_attributes (&si->authenticatedAttributes, elems[shift]);",
          "176:   shift++;",
          "177:  }",
          "178:  if (shift < object->list.length) {",
          "179:   r_x509_parse_algorithmidentifier (&si->digestEncryptionAlgorithm, elems[shift]);",
          "180:   shift++;",
          "181:  }",
          "182:  if (shift < object->list.length) {",
          "183:   si->encryptedDigest = elems[shift];",
          "184:   elems[shift] = NULL;",
          "185:   shift++;",
          "186:  }",
          "187:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "188:   r_pkcs7_parse_attributes (&si->unauthenticatedAttributes, elems[shift]);",
          "189:  }",
          "190:  return true;",
          "191: }",
          "193: void r_pkcs7_free_signerinfo (RPKCS7SignerInfo* si) {",
          "194:  if (si) {",
          "195:   r_pkcs7_free_issuerandserialnumber (&si->issuerAndSerialNumber);",
          "196:   r_x509_free_algorithmidentifier (&si->digestAlgorithm);",
          "197:   r_pkcs7_free_attributes (&si->authenticatedAttributes);",
          "198:   r_x509_free_algorithmidentifier (&si->digestEncryptionAlgorithm);",
          "199:   r_asn1_free_object (si->encryptedDigest);",
          "200:   r_pkcs7_free_attributes (&si->unauthenticatedAttributes);",
          "201:   free (si);",
          "202:  }",
          "203: }",
          "205: bool r_pkcs7_parse_signerinfos (RPKCS7SignerInfos *ss, RASN1Object *object) {",
          "206:  ut32 i;",
          "207:  if (!ss && !object) {",
          "208:   return false;",
          "209:  }",
          "210:  if (object->list.length > 0) {",
          "211:   ss->elements = (RPKCS7SignerInfo **) calloc (object->list.length, sizeof (RPKCS7SignerInfo*));",
          "212:   if (!ss->elements) {",
          "213:    return false;",
          "214:   }",
          "215:   ss->length = object->list.length;",
          "216:   for (i = 0; i < ss->length; ++i) {",
          "219:    ss->elements[i] = (RPKCS7SignerInfo *) malloc (sizeof (RPKCS7SignerInfo));",
          "222:    if (ss->elements[i]) {",
          "224:     memset (ss->elements[i], 0, sizeof (RPKCS7SignerInfo));",
          "225:     r_pkcs7_parse_signerinfo (ss->elements[i], object->list.objects[i]);",
          "226:    }",
          "227:   }",
          "228:  }",
          "229:  return true;",
          "230: }",
          "232: void r_pkcs7_free_signerinfos (RPKCS7SignerInfos *ss) {",
          "233:  ut32 i;",
          "234:  if (ss) {",
          "235:   for (i = 0; i < ss->length; ++i) {",
          "236:    r_pkcs7_free_signerinfo (ss->elements[i]);",
          "238:    free (ss->elements[i]);",
          "239:    ss->elements[i] = NULL;",
          "240:   }",
          "241:   free (ss->elements);",
          "242:   ss->elements = NULL;",
          "244:  }",
          "245: }",
          "247: bool r_pkcs7_parse_signeddata (RPKCS7SignedData *sd, RASN1Object *object) {",
          "248:  RASN1Object **elems;",
          "249:  ut32 shift = 3;",
          "250:  if (!sd || !object || object->list.length < 4) {",
          "251:   return false;",
          "252:  }",
          "253:  memset (sd, 0, sizeof (RPKCS7SignedData));",
          "254:  elems = object->list.objects;",
          "256:  sd->version = (ut32) elems[0]->sector[0];",
          "257:  r_pkcs7_parse_digestalgorithmidentifier (&sd->digestAlgorithms, elems[1]);",
          "258:  r_pkcs7_parse_contentinfo (&sd->contentInfo, elems[2]);",
          "260:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "261:   r_pkcs7_parse_extendedcertificatesandcertificates (&sd->certificates, elems[shift]);",
          "262:   shift++;",
          "263:  }",
          "265:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "266:   r_pkcs7_parse_certificaterevocationlists (&sd->crls, elems[shift]);",
          "267:   shift++;",
          "268:  }",
          "269:  if (shift < object->list.length)",
          "270:   r_pkcs7_parse_signerinfos (&sd->signerinfos, elems[shift]);",
          "271:  return true;",
          "272: }",
          "274: void r_pkcs7_free_signeddata (RPKCS7SignedData* sd) {",
          "275:  if (sd) {",
          "276:   r_pkcs7_free_digestalgorithmidentifier (&sd->digestAlgorithms);",
          "277:   r_pkcs7_free_contentinfo (&sd->contentInfo);",
          "278:   r_pkcs7_free_extendedcertificatesandcertificates (&sd->certificates);",
          "279:   r_pkcs7_free_certificaterevocationlists (&sd->crls);",
          "281:  }",
          "282: }",
          "284: RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length) {",
          "285:  RASN1Object *object;",
          "286:  RPKCS7Container *container;",
          "287:  if (!buffer || !length) {",
          "288:   return NULL;",
          "289:  }",
          "290:  container = (RPKCS7Container*) malloc (sizeof (RPKCS7Container));",
          "291:  if (!container) {",
          "292:   return NULL;",
          "293:  }",
          "294:  memset (container, 0, sizeof (RPKCS7Container));",
          "295:  object = r_asn1_create_object (buffer, length);",
          "296:  if (!object || object->list.length != 2 || object->list.objects[1]->list.length != 1) {",
          "297:   free (container);",
          "298:   return NULL;",
          "299:  }",
          "300:  container->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "301:  r_pkcs7_parse_signeddata (&container->signedData, object->list.objects[1]->list.objects[0]);",
          "302:  r_asn1_free_object (object);",
          "303:  return container;",
          "304: }",
          "306: void r_pkcs7_free_container (RPKCS7Container* container) {",
          "307:  if (container) {",
          "308:   r_asn1_free_string (container->contentType);",
          "309:   r_pkcs7_free_signeddata (&container->signedData);",
          "310:   free (container);",
          "311:  }",
          "312: }",
          "314: RPKCS7Attribute* r_pkcs7_parse_attribute (RASN1Object *object) {",
          "315:  RPKCS7Attribute* attribute;",
          "316:  if (!object || object->list.length < 1) {",
          "317:   return NULL;",
          "318:  }",
          "319:  attribute = (RPKCS7Attribute*) malloc (sizeof (RPKCS7Attribute));",
          "320:  if (!attribute) {",
          "321:   return NULL;",
          "322:  }",
          "323:  memset (attribute, 0, sizeof (RPKCS7Attribute));",
          "324:  attribute->oid = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "325:  if (object->list.length == 2) {",
          "326:   attribute->data = object->list.objects[1];",
          "327:   object->list.objects[1] = NULL;",
          "328:  }",
          "330:  return attribute;",
          "331: }",
          "333: void r_pkcs7_free_attribute (RPKCS7Attribute* attribute) {",
          "334:  if (attribute) {",
          "335:   r_asn1_free_object (attribute->data);",
          "336:   r_asn1_free_string (attribute->oid);",
          "337:   free (attribute);",
          "338:  }",
          "339: }",
          "341: bool r_pkcs7_parse_attributes (RPKCS7Attributes* attributes, RASN1Object *object) {",
          "342:  ut32 i;",
          "343:  if (!attributes || !object || !object->list.length) {",
          "344:   return false;",
          "345:  }",
          "347:  attributes->length = object->list.length;",
          "348:  if (attributes->length > 0) {",
          "349:   attributes->elements = (RPKCS7Attribute**) calloc (attributes->length, sizeof (RPKCS7Attribute*));",
          "350:   if (!attributes->elements) {",
          "351:    attributes->length = 0;",
          "352:    return false;",
          "353:   }",
          "354:   memset (attributes->elements, 0, attributes->length * sizeof (RPKCS7Attribute*));",
          "356:   for (i = 0; i < object->list.length; ++i) {",
          "357:    attributes->elements[i] = r_pkcs7_parse_attribute (object->list.objects[i]);",
          "358:   }",
          "359:  }",
          "360:  return true;",
          "361: }",
          "363: void r_pkcs7_free_attributes (RPKCS7Attributes* attributes) {",
          "364:  ut32 i;",
          "365:  if (attributes) {",
          "366:   for (i = 0; i < attributes->length; ++i) {",
          "367:    r_pkcs7_free_attribute (attributes->elements[i]);",
          "368:   }",
          "369:   free (attributes->elements);",
          "370:   attributes->elements = NULL;",
          "372:  }",
          "373: }",
          "375: char* r_pkcs7_signerinfos_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "376:  RASN1String *algo, *last, *next;",
          "377:  ut32 i, p;",
          "378:  int r;",
          "379:  char *tmp, *pad2, *pad3;",
          "380:  if (!crl || !buffer || !length) {",
          "381:   return NULL;",
          "382:  }",
          "383:  if (!pad) {",
          "384:   pad = \"\";",
          "385:  }",
          "386:  pad3 = r_str_newf (\"%s    \", pad);",
          "387:  if (!pad3) return NULL;",
          "389:  pad2 = pad3 + 2;",
          "390:  algo = crl->signature.algorithm;",
          "391:  last = crl->lastUpdate;",
          "392:  next = crl->nextUpdate;",
          "393:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "394:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "395:  p = (unsigned) r;",
          "396:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "397:   free (pad3);",
          "398:   return NULL;",
          "399:  }",
          "400:  p = tmp - buffer;",
          "401:  if (length <= p) {",
          "402:   free (pad3);",
          "403:   return NULL;",
          "404:  }",
          "405:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "406:     pad2, last ? last->string : \"Missing\",",
          "407:     pad2, next ? next->string : \"Missing\", pad2);",
          "408:  p += (unsigned) r;",
          "409:  if (r < 0) {",
          "410:   free (pad3);",
          "411:   return NULL;",
          "412:  }",
          "413:  for (i = 0; i < crl->length; ++i) {",
          "414:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "415:    free (pad3);",
          "416:    return NULL;",
          "417:   }",
          "418:   p = tmp - buffer;",
          "419:  }",
          "421:  free (pad3);",
          "422:  return buffer + p;",
          "423: }",
          "425: char* r_x509_signedinfo_dump (RPKCS7SignerInfo *si, char* buffer, ut32 length, const char* pad) {",
          "426:  RASN1String *s;",
          "427:  RASN1Object *o;",
          "428:  ut32 i, p;",
          "429:  int r;",
          "430:  char *tmp, *pad2, *pad3;",
          "431:  if (!si || !buffer || !length) {",
          "432:   return NULL;",
          "433:  }",
          "434:  if (!pad) {",
          "435:   pad = \"\";",
          "436:  }",
          "437:  pad3 = r_str_newf (\"%s    \", pad);",
          "438:  if (!pad3) return NULL;",
          "439:  pad2 = pad3 + 2;",
          "442:  r = snprintf (buffer, length, \"%sSignerInfo:\\n%sVersion: v%u\\n%sIssuer\\n\", pad, pad2, si->version + 1, pad2);",
          "443:  p = (unsigned) r;",
          "444:  if (r < 0) {",
          "445:   free (pad3);",
          "446:   return NULL;",
          "447:  }",
          "449:  if (length <= p || !(tmp = r_x509_name_dump (&si->issuerAndSerialNumber.issuer, buffer + p, length - p, pad3))) {",
          "450:   free (pad3);",
          "451:   return NULL;",
          "452:  }",
          "453:  p = tmp - buffer;",
          "454:  if ((o = si->issuerAndSerialNumber.serialNumber)) {",
          "455:   s = r_asn1_stringify_integer (o->sector, o->length);",
          "456:  } else {",
          "457:   s = NULL;",
          "458:  }",
          "459:  r = snprintf (buffer + p, length - p, \"%sSerial Number:\\n%s%s\\n\", pad2, pad3, s ? s->string : \"Missing\");",
          "460:  p += (unsigned) r;",
          "461:  r_asn1_free_string (s);",
          "462:  if (r < 0) {",
          "463:   free (pad3);",
          "464:   return NULL;",
          "465:  }",
          "467:  s = si->digestAlgorithm.algorithm;",
          "468:  r = snprintf (buffer + p, length - p, \"%sDigest Algorithm:\\n%s%s\\n%sAuthenticated Attributes:\\n\",",
          "469:     pad2, pad3, s ? s->string : \"Missing\", pad2);",
          "470:  p += (unsigned) r;",
          "471:  if (r < 0) {",
          "472:   free (pad3);",
          "473:   return NULL;",
          "474:  }",
          "475:  for (i = 0; i < si->authenticatedAttributes.length; ++i) {",
          "476:   RPKCS7Attribute* attr = si->authenticatedAttributes.elements[i];",
          "477:   if (!attr) continue;",
          "478:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "479:      pad3, attr->oid ? attr->oid->string : \"Missing\", attr->data ? attr->data->length : 0);",
          "480:   p += (unsigned) r;",
          "481:   if (r < 0) {",
          "482:    free (pad3);",
          "483:    return NULL;",
          "484:   }",
          "485:  }",
          "486:  s = si->digestEncryptionAlgorithm.algorithm;",
          "487:  r = snprintf (buffer + p, length - p, \"%sDigest Encryption Algorithm\\n%s%s\\n\",",
          "488:     pad2, pad3, s ? s->string : \"Missing\");",
          "489:  p += (unsigned) r;",
          "490:  if (r < 0) {",
          "491:   free (pad3);",
          "492:   return NULL;",
          "493:  }",
          "495:  if ((o = si->encryptedDigest)) s = r_asn1_stringify_bytes (o->sector, o->length);",
          "496:  else s = NULL;",
          "497:  r = snprintf (buffer + p, length - p, \"%sEncrypted Digest: %u bytes\\n%s\\n\", pad2, o ? o->length : 0, s ? s->string : \"Missing\");",
          "498:  p += (unsigned) r;",
          "499:  r_asn1_free_string (s);",
          "500:  if (r < 0) {",
          "501:   free (pad3);",
          "502:   return NULL;",
          "503:  }",
          "504:  r = snprintf (buffer + p, length - p, \"%sUnauthenticated Attributes:\\n\", pad2);",
          "505:  p += (unsigned) r;",
          "506:  if (r < 0) {",
          "507:   free (pad3);",
          "508:   return NULL;",
          "509:  }",
          "510:  for (i = 0; i < si->unauthenticatedAttributes.length; ++i) {",
          "511:   RPKCS7Attribute* attr = si->unauthenticatedAttributes.elements[i];",
          "512:   if (!attr) continue;",
          "513:   o = attr->data;",
          "514:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "515:      pad3, attr->oid ? attr->oid->string : \"Missing\", o ? o->length : 0);",
          "516:   p += (unsigned) r;",
          "517:   if (r < 0) {",
          "518:    free (pad3);",
          "519:    return NULL;",
          "520:   }",
          "521:  }",
          "522:  return buffer + p;",
          "523: }",
          "525: char *r_pkcs7_container_dump (RPKCS7Container* container) {",
          "526:  RPKCS7SignedData *sd;",
          "527:  ut32 i, length, p;",
          "528:  int r;",
          "529:  char *buffer, *tmp = NULL;",
          "530:  if (!container) {",
          "531:   return NULL;",
          "532:  }",
          "533:  sd = &container->signedData;",
          "534:  p = 0;",
          "535:  length = 1024 + (container->signedData.certificates.length * 4096);",
          "536:  buffer = (char*) malloc (length);",
          "537:  if (!buffer) return NULL;",
          "538:  memset (buffer, 0, length);",
          "539:  r = snprintf (buffer, length, \"signedData\\n  Version: %u\\n  Digest Algorithms:\\n\", sd->version);",
          "540:  p += (unsigned) r;",
          "541:  if (r < 0) {",
          "542:   free (buffer);",
          "543:   return NULL;",
          "544:  }",
          "545:  if (container->signedData.digestAlgorithms.elements) {",
          "546:   for (i = 0; i < container->signedData.digestAlgorithms.length; ++i) {",
          "547:    if (container->signedData.digestAlgorithms.elements[i]) {",
          "548:     r = snprintf (buffer + p, length - p, \"    %s\\n\", container->signedData.digestAlgorithms.elements[i]->algorithm->string);",
          "549:     p += (unsigned) r;",
          "550:     if (r < 0 || length <= p) {",
          "551:      free (buffer);",
          "552:      return NULL;",
          "553:     }",
          "554:    }",
          "555:   }",
          "556:  }",
          "557:  r = snprintf (buffer + p, length - p, \"  Certificates: %u\\n\", container->signedData.certificates.length);",
          "558:  p += (unsigned) r;",
          "559:  if (r < 0 || length <= p) {",
          "560:   free (buffer);",
          "561:   return NULL;",
          "562:  }",
          "563:  for (i = 0; i < container->signedData.certificates.length; ++i) {",
          "564:   if (length <= p || !(tmp = r_x509_certificate_dump (container->signedData.certificates.elements[i], buffer + p, length - p, \"    \"))) {",
          "565:    free (buffer);",
          "566:    return NULL;",
          "567:   }",
          "568:   p = tmp - buffer;",
          "569:  }",
          "571:  for (i = 0; i < container->signedData.crls.length; ++i) {",
          "572:   if (length <= p || !(tmp = r_x509_crl_dump (container->signedData.crls.elements[i], buffer + p, length - p, \"    \"))) {",
          "573:    free (buffer);",
          "574:    return NULL;",
          "575:   }",
          "576:   p = tmp - buffer;",
          "577:  }",
          "578:  p = tmp - buffer;",
          "579:  r = snprintf (buffer + p, length - p, \"  SignerInfos:\\n\");",
          "580:  p += (unsigned) r;",
          "581:  if (r < 0 || length <= p) {",
          "582:   free (buffer);",
          "583:   return NULL;",
          "584:  }",
          "585:  if (container->signedData.signerinfos.elements) {",
          "586:   for (i = 0; i < container->signedData.signerinfos.length; ++i) {",
          "587:    if (length <= p || !(tmp = r_x509_signedinfo_dump (container->signedData.signerinfos.elements[i], buffer + p, length - p, \"    \"))) {",
          "588:     free (buffer);",
          "589:     return NULL;",
          "590:    }",
          "591:    p = tmp - buffer;",
          "592:   }",
          "593:  }",
          "594:  return buffer;",
          "595: }",
          "",
          "---------------"
        ],
        "libr/util/r_pkcs7_internal.h||libr/util/r_pkcs7_internal.h": [
          "File: libr/util/r_pkcs7_internal.h -> libr/util/r_pkcs7_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_PKCS7_INTERNAL_H",
          "2: #define R_PKCS7_INTERNAL_H",
          "5: R_API bool r_pkcs7_parse_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls, RASN1Object *object);",
          "6: R_API void r_pkcs7_free_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls);",
          "8: R_API bool r_pkcs7_parse_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac, RASN1Object *object);",
          "9: R_API void r_pkcs7_free_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac);",
          "11: R_API bool r_pkcs7_parse_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai, RASN1Object *object);",
          "12: R_API void r_pkcs7_free_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai);",
          "14: R_API bool r_pkcs7_parse_contentinfo (RPKCS7ContentInfo* ci, RASN1Object *object);",
          "15: R_API void r_pkcs7_free_contentinfo (RPKCS7ContentInfo* ci);",
          "17: R_API bool r_pkcs7_parse_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu, RASN1Object *object);",
          "18: R_API void r_pkcs7_free_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu);",
          "20: R_API RPKCS7Attribute* r_pkcs7_parse_attribute (RASN1Object *object);",
          "21: R_API void r_pkcs7_free_attribute (RPKCS7Attribute* attribute);",
          "23: R_API bool r_pkcs7_parse_attributes (RPKCS7Attributes* attribute, RASN1Object *object);",
          "24: R_API void r_pkcs7_free_attributes (RPKCS7Attributes* attribute);",
          "26: R_API bool r_pkcs7_parse_signerinfo (RPKCS7SignerInfo* si, RASN1Object *object);",
          "27: R_API void r_pkcs7_free_signerinfo (RPKCS7SignerInfo* si);",
          "29: R_API bool r_pkcs7_parse_signerinfos (RPKCS7SignerInfos* ss, RASN1Object *object);",
          "30: R_API void r_pkcs7_free_signerinfos (RPKCS7SignerInfos* ss);",
          "32: R_API bool r_pkcs7_parse_signeddata (RPKCS7SignedData *sd, RASN1Object *object);",
          "33: R_API void r_pkcs7_free_signeddata (RPKCS7SignedData* sd);",
          "35: R_API char* r_x509_signedinfo_dump (RPKCS7SignerInfo *si, char* buffer, ut32 length, const char* pad);",
          "",
          "---------------"
        ],
        "libr/util/r_x509.c||libr/util/r_x509.c": [
          "File: libr/util/r_x509.c -> libr/util/r_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <r_util.h>",
          "2: #include <stdlib.h>",
          "3: #include <string.h>",
          "5: #include \"r_x509_internal.h\"",
          "7: bool r_x509_parse_validity (RX509Validity *validity, RASN1Object *object) {",
          "8:  RASN1Object *o;",
          "9:  if (!validity || !object || object->list.length != 2) {",
          "10:   return false;",
          "11:  }",
          "12:  if (object->class == CLASS_UNIVERSAL &&",
          "13:    object->tag == TAG_SEQUENCE &&",
          "14:    object->form == FORM_CONSTRUCTED) {",
          "15:   o = object->list.objects[0];",
          "16:   if (o->class == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "17:    if (o->tag == TAG_UTCTIME) {",
          "18:     validity->notBefore = r_asn1_stringify_utctime (o->sector, o->length);",
          "19:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "20:     validity->notBefore = r_asn1_stringify_time (o->sector, o->length);",
          "21:    }",
          "22:   }",
          "23:   o = object->list.objects[1];",
          "24:   if (o->class == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "25:    if (o->tag == TAG_UTCTIME) {",
          "26:     validity->notAfter = r_asn1_stringify_utctime (o->sector, o->length);",
          "27:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "28:     validity->notAfter = r_asn1_stringify_time (o->sector, o->length);",
          "29:    }",
          "30:   }",
          "31:  }",
          "32:  return true;",
          "33: }",
          "35: bool r_x509_parse_algorithmidentifier (RX509AlgorithmIdentifier *ai, RASN1Object * object) {",
          "36:  if (!ai || !object || object->list.length < 1) {",
          "37:   return false;",
          "38:  }",
          "39:  if (object->list.objects[0]->class == CLASS_UNIVERSAL && object->list.objects[0]->tag == TAG_OID) {",
          "40:   ai->algorithm = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "41:  }",
          "42:  ai->parameters = NULL; // TODO",
          "44:  return true;",
          "45: }",
          "47: bool r_x509_parse_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki, RASN1Object *object) {",
          "48:  RASN1Object *o;",
          "49:  if (!spki || !object || object->list.length != 2) {",
          "50:   return false;",
          "51:  }",
          "52:  r_x509_parse_algorithmidentifier (&spki->algorithm, object->list.objects[0]);",
          "53:  if (object->list.objects[1]) {",
          "54:   o = object->list.objects[1];",
          "55:   spki->subjectPublicKey = o;",
          "56:   object->list.objects[1] = NULL;",
          "62:   if (o->list.length == 1 && o->list.objects[0]->list.length == 2) {",
          "63:    o = o->list.objects[0];",
          "64:    if (o->list.objects[0]) {",
          "65:     spki->subjectPublicKeyExponent = o->list.objects[0];",
          "66:     o->list.objects[0] = NULL;",
          "72:    }",
          "73:    if (o->list.objects[1]) {",
          "74:     spki->subjectPublicKeyModule = o->list.objects[1];",
          "75:     o->list.objects[1] = NULL;",
          "77:    }",
          "78:   }",
          "79:  }",
          "80:  return true;",
          "81: }",
          "83: bool r_x509_parse_name (RX509Name *name, RASN1Object * object) {",
          "84:  ut32 i;",
          "85:  if (!name || !object || !object->list.length) {",
          "86:   return false;",
          "87:  }",
          "88:  if (object->class == CLASS_UNIVERSAL && object->tag == TAG_SEQUENCE) {",
          "89:   name->length = object->list.length;",
          "90:   name->names = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "91:   if (!name->names) {",
          "92:    name->length = 0;",
          "93:    return false;",
          "94:   }",
          "95:   name->oids = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "96:   if (!name->oids) {",
          "97:    name->length = 0;",
          "98:    free (name->names);",
          "99:    name->names = NULL;",
          "100:    return false;",
          "101:   }",
          "102:   for (i = 0; i < object->list.length; ++i) {",
          "103:    RASN1Object *o = object->list.objects[i];",
          "104:    if (o->class == CLASS_UNIVERSAL &&",
          "105:      o->tag == TAG_SET &&",
          "106:      o->form == FORM_CONSTRUCTED &&",
          "107:      o->list.length == 1) {",
          "108:     o = o->list.objects[0];",
          "109:     if (o->class == CLASS_UNIVERSAL &&",
          "110:       o->tag == TAG_SEQUENCE) {",
          "111:      if (o->list.objects[0]->class == CLASS_UNIVERSAL &&",
          "112:        o->list.objects[0]->tag == TAG_OID) {",
          "113:       name->oids[i] = r_asn1_stringify_oid (o->list.objects[0]->sector, o->list.objects[0]->length);",
          "114:      }",
          "115:      if (o->list.objects[0]->class == CLASS_UNIVERSAL) {",
          "116:       name->names[i] = r_asn1_stringify_string (o->list.objects[1]->sector, o->list.objects[1]->length);",
          "117:      }",
          "118:     }",
          "119:    }",
          "120:   }",
          "121:  }",
          "122:  return true;",
          "123: }",
          "125: bool r_x509_parse_extension (RX509Extension *ext, RASN1Object * object) {",
          "126:  RASN1Object *o;",
          "127:  if (!ext || !object || object->list.length < 2) {",
          "128:   return false;",
          "129:  }",
          "130:  memset (ext, 0, sizeof (RX509Extension));",
          "131:  o = object->list.objects[0];",
          "132:  if (o && o->tag == TAG_OID) {",
          "133:   ext->extnID = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "134:   o = object->list.objects[1];",
          "135:   if (o->tag == TAG_BOOLEAN) {",
          "137:    ext->critical = o->sector[0] != 0;",
          "138:    o = object->list.objects[2];",
          "139:   }",
          "140:   if (o->tag == TAG_OCTETSTRING) {",
          "141:    ext->extnValue = o;",
          "142:    if (o == object->list.objects[1]) {",
          "143:     object->list.objects[1] = NULL;",
          "144:    } else if (object->list.length > 2 && o == object->list.objects[2]) {",
          "145:     object->list.objects[2] = NULL;",
          "146:    }",
          "147:   }",
          "148:  }",
          "149:  return true;",
          "150: }",
          "152: bool r_x509_parse_extensions (RX509Extensions *ext, RASN1Object * object) {",
          "153:  ut32 i;",
          "154:  if (!ext || !object || object->list.length != 1 || !object->list.objects[0]->length) {",
          "155:   return false;",
          "156:  }",
          "157:  object = object->list.objects[0];",
          "158:  ext->extensions = (RX509Extension**) calloc (object->list.length, sizeof (RX509Extension*));",
          "159:  if (!ext->extensions) {",
          "160:   return false;",
          "161:  }",
          "162:  ext->length = object->list.length;",
          "163:  for (i = 0; i < object->list.length; ++i) {",
          "164:   ext->extensions[i] = (RX509Extension*) malloc (sizeof (RX509Extension));",
          "165:   if (!r_x509_parse_extension (ext->extensions[i], object->list.objects[i])) {",
          "166:    free (ext->extensions[i]);",
          "167:    ext->extensions[i] = NULL;",
          "168:   }",
          "169:  }",
          "170:  return true;",
          "171: }",
          "173: bool r_x509_parse_tbscertificate (RX509TBSCertificate *tbsc, RASN1Object * object) {",
          "174:  RASN1Object **elems;",
          "175:  ut32 i;",
          "176:  ut32 shift = 0;",
          "177:  if (!tbsc || !object || object->list.length < 6) {",
          "178:   return false;",
          "179:  }",
          "180:  elems = object->list.objects;",
          "182:  if (elems[0]->list.length == 1 &&",
          "183:    elems[0]->class == CLASS_CONTEXT &&",
          "184:    elems[0]->form == FORM_CONSTRUCTED &&",
          "185:    elems[0]->list.objects[0]->tag == TAG_INTEGER &&",
          "186:    elems[0]->list.objects[0]->length == 1) {",
          "188:   tbsc->version = (ut32) elems[0]->list.objects[0]->sector[0];",
          "189:   shift = 1;",
          "190:  } else {",
          "191:   tbsc->version = 0;",
          "192:  }",
          "193:  if (shift < object->list.length && elems[shift]->class == CLASS_UNIVERSAL && elems[shift]->tag == TAG_INTEGER) {",
          "194:   tbsc->serialNumber = r_asn1_stringify_integer (elems[shift]->sector, elems[shift]->length);",
          "195:  }",
          "196:  r_x509_parse_algorithmidentifier (&tbsc->signature, elems[shift + 1]);",
          "197:  r_x509_parse_name (&tbsc->issuer, elems[shift + 2]);",
          "198:  r_x509_parse_validity (&tbsc->validity, elems[shift + 3]);",
          "199:  r_x509_parse_name (&tbsc->subject, elems[shift + 4]);",
          "200:  r_x509_parse_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo, elems[shift + 5]);",
          "201:  if (tbsc->version > 0) {",
          "202:   for (i = shift + 6; i < object->list.length; ++i) {",
          "203:    if (elems[i]->class != CLASS_CONTEXT) continue;",
          "205:    if (elems[i]->tag == 1) {",
          "206:     tbsc->issuerUniqueID = elems[i];",
          "207:     elems[i] = NULL;",
          "208:    }",
          "210:    if (elems[i]->tag == 2) {",
          "211:     tbsc->subjectUniqueID = elems[i];",
          "212:     elems[i] = NULL;",
          "213:    }",
          "215:    if (tbsc->version == 2 && elems[i]->tag == 3 && elems[i]->form == FORM_CONSTRUCTED) {",
          "216:     r_x509_parse_extensions (&tbsc->extensions, elems[i]);",
          "217:     elems[i] = NULL;",
          "218:    }",
          "219:   }",
          "220:  }",
          "221:  return true;",
          "222: }",
          "224: RX509Certificate * r_x509_parse_certificate (RASN1Object *object) {",
          "225:  RX509Certificate *certificate;",
          "226:  RASN1Object *tmp;",
          "227:  if (!object) {",
          "228:   return NULL;",
          "229:  }",
          "230:  certificate = (RX509Certificate*) malloc (sizeof (RX509Certificate));",
          "231:  if (!certificate) {",
          "232:   return NULL;",
          "233:  }",
          "234:  memset (certificate, 0, sizeof (RX509Certificate));",
          "236:  if (object->class != CLASS_UNIVERSAL || object->form != FORM_CONSTRUCTED || object->list.length != 3) {",
          "239:   r_asn1_free_object (object);",
          "240:   free (certificate);",
          "241:   return NULL;",
          "242:  }",
          "243:  tmp = object->list.objects[2];",
          "244:  if (tmp->class != CLASS_UNIVERSAL || tmp->form != FORM_PRIMITIVE || tmp->tag != TAG_BITSTRING) {",
          "245:   r_asn1_free_object (object);",
          "246:   free (certificate);",
          "247:   return NULL;",
          "248:  }",
          "249:  certificate->signature = object->list.objects[2];",
          "250:  object->list.objects[2] = NULL;",
          "252:  r_x509_parse_tbscertificate (&certificate->tbsCertificate, object->list.objects[0]);",
          "254:  if (!r_x509_parse_algorithmidentifier (&certificate->algorithmIdentifier, object->list.objects[1])) {",
          "255:   r_asn1_free_object (object);",
          "256:   free (certificate);",
          "257:   return NULL;",
          "258:  }",
          "260:  return certificate;",
          "261: }",
          "263: RX509Certificate * r_x509_parse_certificate2 (const ut8 *buffer, ut32 length) {",
          "264:  RX509Certificate *certificate;",
          "265:  RASN1Object *object;",
          "266:  if (!buffer || !length) {",
          "267:   return NULL;",
          "268:  }",
          "269:  object = r_asn1_create_object (buffer, length);",
          "270:  certificate = r_x509_parse_certificate (object);",
          "271:  r_asn1_free_object (object);",
          "272:  return certificate;",
          "273: }",
          "275: RX509CRLEntry *r_x509_parse_crlentry (RASN1Object *object) {",
          "276:  RX509CRLEntry *entry;",
          "277:  if (!object || object->list.length != 2) {",
          "278:   return NULL;",
          "279:  }",
          "280:  entry = (RX509CRLEntry *) malloc (sizeof (RX509CRLEntry));",
          "281:  if (!entry) {",
          "282:   return NULL;",
          "283:  }",
          "284:  entry->userCertificate = object->list.objects[0];",
          "285:  object->list.objects[0] = NULL;",
          "286:  entry->revocationDate = r_asn1_stringify_utctime (object->list.objects[1]->sector, object->list.objects[1]->length);",
          "287:  return entry;",
          "288: }",
          "290: RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object) {",
          "291:  RX509CertificateRevocationList *crl;",
          "292:  RASN1Object **elems;",
          "293:  if (!object && object->list.length < 4) {",
          "294:   return NULL;",
          "295:  }",
          "296:  crl = (RX509CertificateRevocationList *) malloc (sizeof (RX509CertificateRevocationList));",
          "297:  if (!crl) {",
          "298:   return NULL;",
          "299:  }",
          "300:  memset (crl, 0, sizeof (RX509CertificateRevocationList));",
          "301:  elems = object->list.objects;",
          "302:  r_x509_parse_algorithmidentifier (&crl->signature, elems[0]);",
          "303:  r_x509_parse_name (&crl->issuer, elems[1]);",
          "304:  crl->lastUpdate = r_asn1_stringify_utctime (elems[2]->sector, elems[2]->length);",
          "305:  crl->nextUpdate = r_asn1_stringify_utctime (elems[3]->sector, elems[3]->length);",
          "306:  if (object->list.length > 4) {",
          "307:   ut32 i;",
          "308:   crl->revokedCertificates = calloc (object->list.objects[4]->list.length, sizeof (RX509CRLEntry*));",
          "309:   if (!crl->revokedCertificates) {",
          "310:    free (crl);",
          "311:    return NULL;",
          "312:   }",
          "313:   crl->length = object->list.objects[4]->list.length;",
          "314:   for (i = 0; i < object->list.objects[4]->list.length; ++i) {",
          "315:    crl->revokedCertificates[i] = r_x509_parse_crlentry (object->list.objects[4]->list.objects[i]);",
          "316:   }",
          "317:  }",
          "318:  return crl;",
          "319: }",
          "321: void r_x509_free_algorithmidentifier (RX509AlgorithmIdentifier * ai) {",
          "322:  if (!ai) {",
          "323:   return;",
          "324:  }",
          "325:  r_asn1_free_string (ai->algorithm);",
          "326:  r_asn1_free_string (ai->parameters);",
          "328: }",
          "330: void r_x509_free_validity (RX509Validity * validity) {",
          "331:  if (!validity) {",
          "332:   return;",
          "333:  }",
          "334:  r_asn1_free_string (validity->notAfter);",
          "335:  r_asn1_free_string (validity->notBefore);",
          "337: }",
          "339: void r_x509_free_name (RX509Name * name) {",
          "340:  ut32 i;",
          "341:  if (!name) {",
          "342:   return;",
          "343:  }",
          "344:  if (name->names) {",
          "345:   for (i = 0; i < name->length; ++i) {",
          "346:    r_asn1_free_string (name->oids[i]);",
          "347:    r_asn1_free_string (name->names[i]);",
          "348:   }",
          "349:   free (name->names);",
          "350:  }",
          "352: }",
          "354: void r_x509_free_extension (RX509Extension * ex) {",
          "355:  if (ex) {",
          "356:   r_asn1_free_string (ex->extnID);",
          "357:   r_asn1_free_object (ex->extnValue);",
          "359:   free (ex);",
          "360:  }",
          "361: }",
          "363: void r_x509_free_extensions (RX509Extensions * ex) {",
          "364:  ut32 i;",
          "365:  if (!ex) {",
          "366:   return;",
          "367:  }",
          "368:  if (ex->extensions) {",
          "369:   for (i = 0; i < ex->length; ++i) {",
          "370:    r_x509_free_extension (ex->extensions[i]);",
          "371:   }",
          "372:   free (ex->extensions);",
          "373:  }",
          "375: }",
          "377: void r_x509_free_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki) {",
          "378:  if (spki) {",
          "379:   r_x509_free_algorithmidentifier (&spki->algorithm);",
          "380:   r_asn1_free_object (spki->subjectPublicKey);",
          "381:   r_asn1_free_object (spki->subjectPublicKeyExponent);",
          "382:   r_asn1_free_object (spki->subjectPublicKeyModule);",
          "384:  }",
          "385: }",
          "387: void r_x509_free_tbscertificate (RX509TBSCertificate * tbsc) {",
          "388:  if (tbsc) {",
          "390:   r_asn1_free_string (tbsc->serialNumber);",
          "391:   r_x509_free_algorithmidentifier (&tbsc->signature);",
          "392:   r_x509_free_name (&tbsc->issuer);",
          "393:   r_x509_free_validity (&tbsc->validity);",
          "394:   r_x509_free_name (&tbsc->subject);",
          "395:   r_x509_free_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo);",
          "396:   r_asn1_free_object (tbsc->subjectUniqueID);",
          "397:   r_asn1_free_object (tbsc->issuerUniqueID);",
          "398:   r_x509_free_extensions (&tbsc->extensions);",
          "400:  }",
          "401: }",
          "403: void r_x509_free_certificate (RX509Certificate * certificate) {",
          "404:  if (certificate) {",
          "405:   r_asn1_free_object (certificate->signature);",
          "406:   r_x509_free_algorithmidentifier (&certificate->algorithmIdentifier);",
          "407:   r_x509_free_tbscertificate (&certificate->tbsCertificate);",
          "408:   free (certificate);",
          "409:  }",
          "410: }",
          "412: void r_x509_free_crlentry (RX509CRLEntry *entry) {",
          "413:  if (entry) {",
          "414:   r_asn1_free_object (entry->userCertificate);",
          "415:   r_asn1_free_string (entry->revocationDate);",
          "416:   free (entry);",
          "417:  }",
          "418: }",
          "420: void r_x509_free_crl (RX509CertificateRevocationList *crl) {",
          "421:  ut32 i;",
          "422:  if (crl) {",
          "423:   r_x509_free_algorithmidentifier (&crl->signature);",
          "424:   r_x509_free_name (&crl->issuer);",
          "425:   r_asn1_free_string (crl->nextUpdate);",
          "426:   r_asn1_free_string (crl->lastUpdate);",
          "427:   if (crl->revokedCertificates) {",
          "428:    for (i = 0; i < crl->length; ++i) {",
          "429:     r_x509_free_crlentry (crl->revokedCertificates[i]);",
          "430:     crl->revokedCertificates[i] = NULL;",
          "431:    }",
          "432:    free (crl->revokedCertificates);",
          "433:    crl->revokedCertificates = NULL;",
          "434:   }",
          "435:   free (crl);",
          "436:  }",
          "437: }",
          "439: char* r_x509_validity_dump (RX509Validity* validity, char* buffer, ut32 length, const char* pad) {",
          "440:  int p;",
          "441:  if (!validity || !buffer || !length) {",
          "442:   return NULL;",
          "443:  }",
          "444:  if (!pad)",
          "445:   pad = \"\";",
          "446:  const char* b = validity->notBefore ? validity->notBefore->string : \"Missing\";",
          "447:  const char* a = validity->notAfter ? validity->notAfter->string : \"Missing\";",
          "448:  p = snprintf (buffer, length, \"%sNot Before: %s\\n%sNot After: %s\\n\", pad, b, pad, a);",
          "449:  return p < 0 ? NULL : buffer + (unsigned) p;",
          "450: }",
          "452: char* r_x509_name_dump (RX509Name* name, char* buffer, ut32 length, const char* pad) {",
          "453:  ut32 i, p, len;",
          "454:  int r;",
          "455:  char* c;",
          "456:  if (!name || !buffer || !length) {",
          "457:   return NULL;",
          "458:  }",
          "459:  if (!pad) {",
          "460:   pad = \"\";",
          "461:  }",
          "462:  len = length;",
          "463:  c = buffer;",
          "464:  if (!c) {",
          "465:   return NULL;",
          "466:  }",
          "467:  for (i = 0, p = 0; i < name->length; ++i) {",
          "468:   if (!name->oids[i] || !name->names[i]) continue;",
          "469:   r = snprintf (c + p, len - p, \"%s%s: %s\\n\", pad, name->oids[i]->string, name->names[i]->string);",
          "470:   p += r;",
          "471:   if (r < 0 || len < p) {",
          "472:    return NULL;",
          "473:   }",
          "474:  }",
          "475:  return c + p;",
          "476: }",
          "478: char* r_x509_subjectpublickeyinfo_dump (RX509SubjectPublicKeyInfo* spki, char* buffer, ut32 length, const char* pad) {",
          "479:  int r;",
          "480:  const char *a;",
          "481:  if (!spki || !buffer || !length) {",
          "482:   return NULL;",
          "483:  }",
          "484:  if (!pad)",
          "485:   pad = \"\";",
          "486:  a = spki->algorithm.algorithm->string;",
          "487:  RASN1String* m = r_asn1_stringify_integer (spki->subjectPublicKeyModule->sector, spki->subjectPublicKeyModule->length);",
          "488:  RASN1String* e = r_asn1_stringify_bytes (spki->subjectPublicKeyExponent->sector, spki->subjectPublicKeyExponent->length);",
          "489:  r = snprintf (buffer, length, \"%sAlgorithm: %s\\n%sModule: %s\\n%sExponent: %u bytes\\n%s\\n\", pad, a, pad, m->string,",
          "490:     pad, spki->subjectPublicKeyExponent->length - 1, e->string);",
          "491:  r_asn1_free_string (m);",
          "492:  r_asn1_free_string (e);",
          "493:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "494: }",
          "496: char* r_x509_extensions_dump (RX509Extensions* exts, char* buffer, ut32 length, const char* pad) {",
          "497:  ut32 i, p, len;",
          "498:  int r;",
          "499:  char* c;",
          "500:  if (!exts || !buffer || !length) {",
          "501:   return NULL;",
          "502:  }",
          "503:  if (!pad) {",
          "504:   pad = \"\";",
          "505:  }",
          "506:  len = length;",
          "507:  c = buffer;",
          "508:  if (!c) {",
          "509:   return NULL;",
          "510:  }",
          "511:  for (i = 0, p = 0, r = 0; i < exts->length; ++i) {",
          "513:   RX509Extension *e = exts->extensions[i];",
          "514:   if (!e) continue;",
          "517:   r = snprintf (c + p, len - p, \"%s%s: %s\\n%s%u bytes\\n\", pad, e->extnID->string, e->critical ? \"critical\" : \"\", pad, e->extnValue->length);",
          "518:   p += r;",
          "520:   if (r < 0 || len <= p) {",
          "521:    return NULL;",
          "522:   }",
          "523:  }",
          "524:  return c + p;",
          "525: }",
          "527: char* r_x509_tbscertificate_dump (RX509TBSCertificate* tbsc, char* buffer, ut32 length, const char* pad) {",
          "528:  RASN1String *sid = NULL, *iid = NULL;",
          "529:  char *pad2, *tmp;",
          "530:  ut32 p;",
          "531:  int r;",
          "532:  if (!tbsc || !buffer || !length) {",
          "533:   return NULL;",
          "534:  }",
          "535:  if (!pad) {",
          "536:   pad = \"\";",
          "537:  }",
          "538:  pad2 = r_str_newf (\"%s  \", pad);",
          "539:  if (!pad2) return NULL;",
          "540:  r = snprintf (buffer, length, \"%sVersion: v%u\\n\"",
          "541:     \"%sSerial Number:\\n%s  %s\\n\"",
          "542:     \"%sSignature Algorithm:\\n%s  %s\\n\"",
          "543:     \"%sIssuer:\\n\",",
          "544:     pad, tbsc->version + 1,",
          "545:     pad, pad, tbsc->serialNumber->string,",
          "546:     pad, pad, tbsc->signature.algorithm->string,",
          "547:     pad);",
          "548:  p = (unsigned) r;",
          "549:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->issuer, buffer + p, length - p, pad2))) {",
          "550:   free (pad2);",
          "551:   return NULL;",
          "552:  }",
          "553:  p = tmp - buffer;",
          "554:  if (length <= p) {",
          "555:   free (pad2);",
          "556:   return NULL;",
          "557:  }",
          "558:  r = snprintf (buffer + p, length - p, \"%sValidity:\\n\", pad);",
          "559:  p += r;",
          "560:  if (r < 0 || length <= p || !(tmp = r_x509_validity_dump (&tbsc->validity, buffer + p, length - p, pad2))) {",
          "561:   free (pad2);",
          "562:   return NULL;",
          "563:  }",
          "564:  p = tmp - buffer;",
          "565:  if (r < 0 || length <= p) return NULL;",
          "566:  r = snprintf (buffer + p, length - p, \"%sSubject:\\n\", pad);",
          "567:  p += r;",
          "568:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->subject, buffer + p, length - p, pad2))) {",
          "569:   free (pad2);",
          "570:   return NULL;",
          "571:  }",
          "572:  p = tmp - buffer;",
          "573:  if (r < 0 || length <= p) return NULL;",
          "574:  r = snprintf (buffer + p, length - p, \"%sSubject Public Key Info:\\n\", pad);",
          "575:  p += r;",
          "576:  if (r < 0 || length <= p ||",
          "577:    !(tmp = r_x509_subjectpublickeyinfo_dump (&tbsc->subjectPublicKeyInfo, buffer + p, length - p, pad2))) {",
          "578:   free (pad2);",
          "579:   return NULL;",
          "580:  }",
          "581:  p = tmp - buffer;",
          "582:  if (tbsc->issuerUniqueID) {",
          "583:   iid = r_asn1_stringify_integer (tbsc->issuerUniqueID->sector, tbsc->issuerUniqueID->length);",
          "584:   if (iid) {",
          "585:    if (length <= p) return NULL;",
          "586:    r = snprintf (buffer + p, length - p, \"%sIssuer Unique ID:\\n%s  %s\", pad, pad, iid->string);",
          "587:    p += r;",
          "588:   } else {",
          "589:    free (pad2);",
          "590:    return NULL;",
          "591:   }",
          "592:  }",
          "593:  if (tbsc->subjectUniqueID) {",
          "594:   sid = r_asn1_stringify_integer (tbsc->subjectUniqueID->sector, tbsc->subjectUniqueID->length);",
          "595:   if (sid) {",
          "596:    if (length <= p) return NULL;",
          "597:    r = snprintf (buffer + p, length - p, \"%sSubject Unique ID:\\n%s  %s\", pad, pad, sid->string);",
          "598:    p += r;",
          "599:   } else {",
          "600:    free (pad2);",
          "601:    return NULL;",
          "602:   }",
          "603:  }",
          "604:  if (r < 0 || length <= p) return NULL;",
          "605:  r = snprintf (buffer + p, length - p, \"%sExtensions:\\n\", pad);",
          "606:  p += r;",
          "607:  if (r < 0 || length <= p || !(tmp = r_x509_extensions_dump (&tbsc->extensions, buffer + p, length - p, pad2))) {",
          "608:   free (pad2);",
          "609:   return NULL;",
          "610:  }",
          "611:  free (pad2);",
          "612:  r_asn1_free_string (sid);",
          "613:  r_asn1_free_string (iid);",
          "614:  return buffer + p;",
          "615: }",
          "617: char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad) {",
          "618:  RASN1String *signature, *algo;",
          "619:  ut32 p;",
          "620:  int r;",
          "621:  char *tbsc, *pad2;",
          "622:  if (!certificate || !buffer || !length) {",
          "623:   return NULL;",
          "624:  }",
          "625:  if (!pad) {",
          "626:   pad = \"\";",
          "627:  }",
          "628:  pad2 = r_str_newf (\"%s  \", pad);",
          "629:  if (!pad2) return NULL;",
          "630:  if ((r = snprintf (buffer, length, \"%sTBSCertificate:\\n\", pad)) < 0) return NULL;",
          "631:  p = (unsigned) r;",
          "632:  tbsc = r_x509_tbscertificate_dump (&certificate->tbsCertificate, buffer + p, length - p, pad2);",
          "633:  p = tbsc - buffer;",
          "634:  if (length <= p) {",
          "635:   free (pad2);",
          "636:   return NULL;",
          "637:  }",
          "638:  algo = certificate->algorithmIdentifier.algorithm;",
          "639:  signature = r_asn1_stringify_bytes (certificate->signature->sector, certificate->signature->length);",
          "640:  r = snprintf (buffer + p, length - p, \"%sAlgorithm:\\n%s%s\\n%sSignature: %u bytes\\n%s\\n\",",
          "641:     pad, pad2, algo ? algo->string : \"\",",
          "642:     pad, certificate->signature->length, signature ? signature->string : \"\");",
          "643:  if (r < 0) {",
          "644:   free (pad2);",
          "645:   return NULL;",
          "646:  }",
          "647:  p += (unsigned) r;",
          "648:  free (pad2);",
          "649:  r_asn1_free_string (signature);",
          "650:  return buffer + p;",
          "651: }",
          "653: char* r_x509_crlentry_dump (RX509CRLEntry *crle, char* buffer, ut32 length, const char* pad) {",
          "654:  RASN1String *id = NULL, *utc;",
          "655:  int r;",
          "656:  if (!crle || !buffer || !length) {",
          "657:   return NULL;",
          "658:  }",
          "659:  if (!pad) {",
          "660:   pad = \"\";",
          "661:  }",
          "662:  utc = crle->revocationDate;",
          "663:  if (crle->userCertificate) {",
          "664:   id = r_asn1_stringify_integer (crle->userCertificate->sector, crle->userCertificate->length);",
          "665:  }",
          "667:  r = snprintf (buffer, length, \"%sUser Certificate:\\n%s  %s\\n\"",
          "668:     \"%sRevocation Date:\\n%s  %s\\n\",",
          "669:     pad, pad, id ? id->string : \"Missing\",",
          "670:     pad, pad, utc ? utc->string : \"Missing\");",
          "672:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "673: }",
          "675: char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "676:  RASN1String *algo, *last, *next;",
          "677:  ut32 i, p;",
          "678:  int r;",
          "679:  char *tmp, *pad2, *pad3;",
          "680:  if (!crl || !buffer || !length) {",
          "681:   return NULL;",
          "682:  }",
          "683:  if (!pad) {",
          "684:   pad = \"\";",
          "685:  }",
          "686:  pad3 = r_str_newf (\"%s    \", pad);",
          "687:  if (!pad3) return NULL;",
          "688:  pad2 = pad3 + 2;",
          "689:  algo = crl->signature.algorithm;",
          "690:  last = crl->lastUpdate;",
          "691:  next = crl->nextUpdate;",
          "692:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "693:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "694:  p = (unsigned) r;",
          "695:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "696:   free (pad3);",
          "697:   return NULL;",
          "698:  }",
          "699:  p = tmp - buffer;",
          "700:  if (length <= p) {",
          "701:   free (pad3);",
          "702:   return NULL;",
          "703:  }",
          "704:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "705:     pad2, last ? last->string : \"Missing\",",
          "706:     pad2, next ? next->string : \"Missing\", pad2);",
          "707:  p += (unsigned) r;",
          "708:  if (r < 0) {",
          "709:   free (pad3);",
          "710:   return NULL;",
          "711:  }",
          "712:  for (i = 0; i < crl->length; ++i) {",
          "713:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "714:    free (pad3);",
          "715:    return NULL;",
          "716:   }",
          "717:   p = tmp - buffer;",
          "718:  }",
          "720:  free (pad3);",
          "721:  return buffer + p;",
          "722: }",
          "",
          "---------------"
        ],
        "libr/util/r_x509_internal.h||libr/util/r_x509_internal.h": [
          "File: libr/util/r_x509_internal.h -> libr/util/r_x509_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef R_X509_INTERNAL_H",
          "2: #define R_X509_INTERNAL_H",
          "4: #include \"r_asn1_internal.h\"",
          "6: R_API bool r_x509_parse_validity (RX509Validity *validity, RASN1Object *object);",
          "7: R_API void r_x509_free_validity (RX509Validity* validity);",
          "9: R_API bool r_x509_parse_algorithmidentifier (RX509AlgorithmIdentifier *ai, RASN1Object * object);",
          "10: R_API void r_x509_free_algorithmidentifier (RX509AlgorithmIdentifier * ai);",
          "12: R_API bool r_x509_parse_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki, RASN1Object *object);",
          "13: R_API void r_x509_free_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki);",
          "15: R_API bool r_x509_parse_name (RX509Name *name, RASN1Object * object);",
          "16: R_API void r_x509_free_name (RX509Name * name);",
          "18: R_API bool r_x509_parse_extension (RX509Extension *ext, RASN1Object * object);",
          "19: R_API void r_x509_free_extension (RX509Extension * ex);",
          "21: R_API bool r_x509_parse_extensions (RX509Extensions *ext, RASN1Object * object);",
          "22: R_API void r_x509_free_extensions (RX509Extensions* ex);",
          "24: R_API bool r_x509_parse_tbscertificate (RX509TBSCertificate *tbsc, RASN1Object * object);",
          "25: R_API void r_x509_free_tbscertificate (RX509TBSCertificate * tbsc);",
          "27: R_API RX509CRLEntry *r_x509_parse_crlentry (RASN1Object *object);",
          "28: R_API void r_x509_free_crlentry (RX509CRLEntry *entry);",
          "30: R_API char* r_x509_validity_dump (RX509Validity* validity, char* buffer, ut32 length, const char* pad);",
          "31: R_API char* r_x509_name_dump (RX509Name* name, char* buffer, ut32 length, const char* pad);",
          "32: R_API char* r_x509_subjectpublickeyinfo_dump (RX509SubjectPublicKeyInfo* spki, char* buffer, ut32 length, const char* pad);",
          "33: R_API char* r_x509_extensions_dump (RX509Extensions* exts, char* buffer, ut32 length, const char* pad);",
          "34: R_API char* r_x509_tbscertificate_dump (RX509TBSCertificate* tbsc, char* buffer, ut32 length, const char* pad);",
          "35: R_API char* r_x509_crlentry_dump (RX509CRLEntry *crle, char* buffer, ut32 length, const char* pad);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1164822c0ce79df7bfda7a07a1de180de6d0ab6",
      "candidate_info": {
        "commit_hash": "a1164822c0ce79df7bfda7a07a1de180de6d0ab6",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/a1164822c0ce79df7bfda7a07a1de180de6d0ab6",
        "files": [
          "libr/include/r_util/r_asn1.h",
          "libr/include/r_util/r_pkcs7.h",
          "libr/include/r_util/r_x509.h",
          "libr/util/r_asn1.c",
          "libr/util/r_pkcs7.c",
          "libr/util/r_x509.c"
        ],
        "message": "Drop \\r in asn1|pkcs7|x509 and fix r2b",
        "before_after_code_files": [
          "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h",
          "libr/include/r_util/r_pkcs7.h||libr/include/r_util/r_pkcs7.h",
          "libr/include/r_util/r_x509.h||libr/include/r_util/r_x509.h",
          "libr/util/r_asn1.c||libr/util/r_asn1.c",
          "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c",
          "libr/util/r_x509.c||libr/util/r_x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ],
          "candidate": [
            "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/include/r_util/r_asn1.h||libr/include/r_util/r_asn1.h": [
          "File: libr/include/r_util/r_asn1.h -> libr/include/r_util/r_asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #ifndef R_ASN1_H",
          "2: #define R_ASN1_H",
          "4: #include <stdint.h>",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "8: #endif",
          "10: #define ASN1_OID_LEN  64",
          "58: typedef struct r_asn1_string_t {",
          "59:  ut32 length;",
          "60:  const char *string;",
          "61:  bool allocated;",
          "62: } RASN1String;",
          "64: typedef struct r_asn1_object_t RASN1Object;",
          "66: typedef struct r_asn1_list_t {",
          "67:  ut32 length;",
          "68:  RASN1Object **objects;",
          "69: } ASN1List;",
          "71: typedef struct r_asn1_object_t {",
          "78: } RASN1Object;",
          "80: R_API RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length);",
          "82: R_API RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length);",
          "83: R_API RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length);",
          "84: R_API RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length);",
          "85: R_API RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length);",
          "86: R_API RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length);",
          "87: R_API RASN1String *r_asn1_stringify_bytes (const ut8 *buffer, ut32 length);",
          "88: R_API RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length);",
          "89: R_API RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length);",
          "90: R_API RASN1String *r_asn1_stringify_tag (RASN1Object *object);",
          "91: R_API RASN1String *r_asn1_stringify_object (RASN1Object *object);",
          "93: void r_asn1_free_object (RASN1Object *object);",
          "94: void r_asn1_free_string (RASN1String *string);",
          "97: #ifdef __cplusplus",
          "98: }",
          "99: #endif",
          "",
          "[Added Lines]",
          "1: #ifndef R_ASN1_H",
          "2: #define R_ASN1_H",
          "4: #include <stdint.h>",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "8: #endif",
          "10: #define ASN1_OID_LEN  64",
          "58: typedef struct r_asn1_string_t {",
          "59:  ut32 length;",
          "60:  const char *string;",
          "61:  bool allocated;",
          "62: } RASN1String;",
          "64: typedef struct r_asn1_object_t RASN1Object;",
          "66: typedef struct r_asn1_list_t {",
          "67:  ut32 length;",
          "68:  RASN1Object **objects;",
          "69: } ASN1List;",
          "71: typedef struct r_asn1_object_t {",
          "78: } RASN1Object;",
          "80: R_API RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length);",
          "82: R_API RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length);",
          "83: R_API RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length);",
          "84: R_API RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length);",
          "85: R_API RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length);",
          "86: R_API RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length);",
          "87: R_API RASN1String *r_asn1_stringify_bytes (const ut8 *buffer, ut32 length);",
          "88: R_API RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length);",
          "89: R_API RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length);",
          "90: R_API RASN1String *r_asn1_stringify_tag (RASN1Object *object);",
          "91: R_API RASN1String *r_asn1_stringify_object (RASN1Object *object);",
          "93: void r_asn1_free_object (RASN1Object *object);",
          "94: void r_asn1_free_string (RASN1String *string);",
          "97: #ifdef __cplusplus",
          "98: }",
          "99: #endif",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_pkcs7.h||libr/include/r_util/r_pkcs7.h": [
          "File: libr/include/r_util/r_pkcs7.h -> libr/include/r_util/r_pkcs7.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #ifndef R_PKCS7_H",
          "2: #define R_PKCS7_H",
          "4: typedef struct r_pkcs7_certificaterevocationlists_t {",
          "5:  ut32 length;",
          "6:  RX509CertificateRevocationList **elements;",
          "7: } RPKCS7CertificateRevocationLists;",
          "9: typedef struct r_pkcs7_extendedcertificatesandcertificates_t {",
          "10:  ut32 length;",
          "11:  RX509Certificate **elements;",
          "12: } RPKCS7ExtendedCertificatesAndCertificates;",
          "14: typedef struct r_pkcs7_digestalgorithmidentifiers_t {",
          "15:  ut32 length;",
          "16:  RX509AlgorithmIdentifier **elements;",
          "17: } RPKCS7DigestAlgorithmIdentifiers;",
          "19: typedef struct r_pkcs7_contentinfo_t {",
          "20:  RASN1String *contentType; //OID",
          "21:  RASN1Object *content; // optional. oid structure definition",
          "22: } RPKCS7ContentInfo;",
          "24: typedef struct r_pkcs7_issuerandserialnumber_t {",
          "25:  RX509Name issuer;",
          "26:  RASN1Object *serialNumber;",
          "27: } RPKCS7IssuerAndSerialNumber;",
          "29: typedef struct r_pkcs7_attribute_t {",
          "30:  RASN1String *oid; //OID",
          "31:  RASN1Object *data; // optional. oid structure definition",
          "32: } RPKCS7Attribute;",
          "34: typedef struct r_pkcs7_attributes_t {",
          "35:  ut32 length;",
          "36:  RPKCS7Attribute **elements;",
          "37: } RPKCS7Attributes;",
          "39: typedef struct r_pkcs7_signerinfo_t {",
          "40:  ut32 version;",
          "41:  RPKCS7IssuerAndSerialNumber issuerAndSerialNumber;",
          "42:  RX509AlgorithmIdentifier digestAlgorithm;",
          "43:  RPKCS7Attributes authenticatedAttributes; //Optional",
          "44:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "45:  RASN1Object *encryptedDigest;",
          "46:  RPKCS7Attributes unauthenticatedAttributes; //Optional",
          "47: } RPKCS7SignerInfo;",
          "49: typedef struct r_pkcs7_signerinfos_t {",
          "50:  ut32 length;",
          "51:  RPKCS7SignerInfo **elements;",
          "52: } RPKCS7SignerInfos;",
          "54: typedef struct r_pkcs7_signeddata_t {",
          "55:  ut32 version;",
          "56:  RPKCS7DigestAlgorithmIdentifiers digestAlgorithms;",
          "57:  RPKCS7ContentInfo contentInfo;",
          "58:  RPKCS7ExtendedCertificatesAndCertificates certificates; //Optional",
          "59:  RPKCS7CertificateRevocationLists crls; //Optional",
          "60:  RPKCS7SignerInfos signerinfos;",
          "61: } RPKCS7SignedData;",
          "63: typedef struct r_pkcs7_container_t {",
          "64:  RASN1String *contentType;",
          "65:  RPKCS7SignedData signedData;",
          "66: } RPKCS7Container;",
          "68: R_API RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length);",
          "69: R_API void r_pkcs7_free_container (RPKCS7Container* container);",
          "70: R_API char* r_pkcs7_container_dump (RPKCS7Container* container);",
          "",
          "[Added Lines]",
          "1: #ifndef R_PKCS7_H",
          "2: #define R_PKCS7_H",
          "4: typedef struct r_pkcs7_certificaterevocationlists_t {",
          "5:  ut32 length;",
          "6:  RX509CertificateRevocationList **elements;",
          "7: } RPKCS7CertificateRevocationLists;",
          "9: typedef struct r_pkcs7_extendedcertificatesandcertificates_t {",
          "10:  ut32 length;",
          "11:  RX509Certificate **elements;",
          "12: } RPKCS7ExtendedCertificatesAndCertificates;",
          "14: typedef struct r_pkcs7_digestalgorithmidentifiers_t {",
          "15:  ut32 length;",
          "16:  RX509AlgorithmIdentifier **elements;",
          "17: } RPKCS7DigestAlgorithmIdentifiers;",
          "19: typedef struct r_pkcs7_contentinfo_t {",
          "20:  RASN1String *contentType; //OID",
          "21:  RASN1Object *content; // optional. oid structure definition",
          "22: } RPKCS7ContentInfo;",
          "24: typedef struct r_pkcs7_issuerandserialnumber_t {",
          "25:  RX509Name issuer;",
          "26:  RASN1Object *serialNumber;",
          "27: } RPKCS7IssuerAndSerialNumber;",
          "29: typedef struct r_pkcs7_attribute_t {",
          "30:  RASN1String *oid; //OID",
          "31:  RASN1Object *data; // optional. oid structure definition",
          "32: } RPKCS7Attribute;",
          "34: typedef struct r_pkcs7_attributes_t {",
          "35:  ut32 length;",
          "36:  RPKCS7Attribute **elements;",
          "37: } RPKCS7Attributes;",
          "39: typedef struct r_pkcs7_signerinfo_t {",
          "40:  ut32 version;",
          "41:  RPKCS7IssuerAndSerialNumber issuerAndSerialNumber;",
          "42:  RX509AlgorithmIdentifier digestAlgorithm;",
          "43:  RPKCS7Attributes authenticatedAttributes; //Optional",
          "44:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "45:  RASN1Object *encryptedDigest;",
          "46:  RPKCS7Attributes unauthenticatedAttributes; //Optional",
          "47: } RPKCS7SignerInfo;",
          "49: typedef struct r_pkcs7_signerinfos_t {",
          "50:  ut32 length;",
          "51:  RPKCS7SignerInfo **elements;",
          "52: } RPKCS7SignerInfos;",
          "54: typedef struct r_pkcs7_signeddata_t {",
          "55:  ut32 version;",
          "56:  RPKCS7DigestAlgorithmIdentifiers digestAlgorithms;",
          "57:  RPKCS7ContentInfo contentInfo;",
          "58:  RPKCS7ExtendedCertificatesAndCertificates certificates; //Optional",
          "59:  RPKCS7CertificateRevocationLists crls; //Optional",
          "60:  RPKCS7SignerInfos signerinfos;",
          "61: } RPKCS7SignedData;",
          "63: typedef struct r_pkcs7_container_t {",
          "64:  RASN1String *contentType;",
          "65:  RPKCS7SignedData signedData;",
          "66: } RPKCS7Container;",
          "68: R_API RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length);",
          "69: R_API void r_pkcs7_free_container (RPKCS7Container* container);",
          "70: R_API char* r_pkcs7_container_dump (RPKCS7Container* container);",
          "",
          "---------------"
        ],
        "libr/include/r_util/r_x509.h||libr/include/r_util/r_x509.h": [
          "File: libr/include/r_util/r_x509.h -> libr/include/r_util/r_x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #ifndef R_X509_H",
          "2: #define R_X509_H",
          "4: #ifdef __cplusplus",
          "5: extern \"C\" {",
          "6: #endif",
          "12: typedef struct r_x509_validity_t {",
          "13:  RASN1String *notBefore;",
          "14:  RASN1String *notAfter;",
          "15: } RX509Validity;",
          "17: typedef struct r_x509_name_t {",
          "18:  ut32 length;",
          "19:  RASN1String **oids;",
          "20:  RASN1String **names;",
          "21: } RX509Name;",
          "23: typedef struct r_x509_algorithmidentifier_t {",
          "24:  RASN1String *algorithm; // OBJECT IDENTIFIER",
          "25:  RASN1String *parameters; // OPTIONAL",
          "26: } RX509AlgorithmIdentifier;",
          "31: typedef struct r_x509_keyusage_t {",
          "32:  ut8 digitalSignature : 1;",
          "33:  ut8 contentCommitment : 1;",
          "34:  ut8 keyEncipherment : 1;",
          "35:  ut8 dataEncipherment : 1;",
          "36:  ut8 keyAgreement : 1;",
          "37:  ut8 keyCertSign : 1;",
          "38:  ut8 cRLSign : 1;",
          "39:  ut8 encipherOnly : 1;",
          "40:  ut8 decipherOnly : 1;",
          "41: } X509KeyUsage;",
          "44: typedef struct r_x509_authoritykeyidentifier_t {",
          "45:  RASN1Object *keyIdentifier;",
          "46:  RX509Name authorityCertIssuer;",
          "47:  RASN1Object *authorityCertSerialNumber;",
          "48: } RX509AuthorityKeyIdentifier;",
          "50: typedef struct r_x509_subjectpublickeyinfo_t {",
          "51:  RX509AlgorithmIdentifier algorithm;",
          "53:  RASN1Object *subjectPublicKey; // BIT STRING",
          "56:  RASN1Object *subjectPublicKeyExponent;",
          "57:  RASN1Object *subjectPublicKeyModule;",
          "58: } RX509SubjectPublicKeyInfo;",
          "60: typedef struct r_x509_extension_t {",
          "61:  RASN1String *extnID; // OBJECT IDENTIFIER",
          "62:  bool critical;",
          "63:  RASN1Object *extnValue; // OCTET STRING",
          "64: } RX509Extension;",
          "66: typedef struct r_x509_extensions_t {",
          "67:  ut32 length;",
          "68:  RX509Extension **extensions;",
          "69: } RX509Extensions;",
          "71: typedef struct r_x509_tbscertificate_t {",
          "72:  ut32 version; //INTEGER",
          "73:  RASN1String *serialNumber; // INTEGER",
          "74:  RX509AlgorithmIdentifier signature;",
          "75:  RX509Name issuer;",
          "76:  RX509Validity validity;",
          "77:  RX509Name subject;",
          "78:  RX509SubjectPublicKeyInfo subjectPublicKeyInfo;",
          "79:  RASN1Object *issuerUniqueID; // BIT STRING",
          "80:  RASN1Object *subjectUniqueID; // BIT STRING",
          "81:  RX509Extensions extensions;",
          "82: } RX509TBSCertificate;",
          "84: typedef struct r_x509_certificate_t {",
          "85:  RX509TBSCertificate tbsCertificate;",
          "86:  RX509AlgorithmIdentifier algorithmIdentifier;",
          "87:  RASN1Object *signature; // BIT STRING",
          "88: } RX509Certificate;",
          "93: typedef struct r_x509_crlentry {",
          "94:  RASN1Object *userCertificate; //INTEGER ?",
          "95:  RASN1String *revocationDate; //UTCTime",
          "96: } RX509CRLEntry;",
          "98: typedef struct r_x509_certificaterevocationlist {",
          "99:  RX509AlgorithmIdentifier signature;",
          "100:  RX509Name issuer;",
          "101:  RASN1String *lastUpdate; //UTCTime",
          "102:  RASN1String *nextUpdate; //UTCTime",
          "103:  ut32 length;",
          "104:  RX509CRLEntry **revokedCertificates;",
          "105: } RX509CertificateRevocationList;",
          "107: R_API RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object);",
          "108: R_API void r_x509_free_crl (RX509CertificateRevocationList *crl);",
          "109: R_API char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad);",
          "111: R_API RX509Certificate *r_x509_parse_certificate (RASN1Object *object);",
          "112: R_API RX509Certificate *r_x509_parse_certificate2 (const ut8 *buffer, ut32 length);",
          "113: R_API void r_x509_free_certificate (RX509Certificate* certificate);",
          "114: R_API char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad);",
          "117: #ifdef __cplusplus",
          "118: }",
          "119: #endif",
          "",
          "[Added Lines]",
          "1: #ifndef R_X509_H",
          "2: #define R_X509_H",
          "4: #ifdef __cplusplus",
          "5: extern \"C\" {",
          "6: #endif",
          "12: typedef struct r_x509_validity_t {",
          "13:  RASN1String *notBefore;",
          "14:  RASN1String *notAfter;",
          "15: } RX509Validity;",
          "17: typedef struct r_x509_name_t {",
          "18:  ut32 length;",
          "19:  RASN1String **oids;",
          "20:  RASN1String **names;",
          "21: } RX509Name;",
          "23: typedef struct r_x509_algorithmidentifier_t {",
          "24:  RASN1String *algorithm; // OBJECT IDENTIFIER",
          "25:  RASN1String *parameters; // OPTIONAL",
          "26: } RX509AlgorithmIdentifier;",
          "31: typedef struct r_x509_keyusage_t {",
          "32:  ut8 digitalSignature : 1;",
          "33:  ut8 contentCommitment : 1;",
          "34:  ut8 keyEncipherment : 1;",
          "35:  ut8 dataEncipherment : 1;",
          "36:  ut8 keyAgreement : 1;",
          "37:  ut8 keyCertSign : 1;",
          "38:  ut8 cRLSign : 1;",
          "39:  ut8 encipherOnly : 1;",
          "40:  ut8 decipherOnly : 1;",
          "41: } X509KeyUsage;",
          "44: typedef struct r_x509_authoritykeyidentifier_t {",
          "45:  RASN1Object *keyIdentifier;",
          "46:  RX509Name authorityCertIssuer;",
          "47:  RASN1Object *authorityCertSerialNumber;",
          "48: } RX509AuthorityKeyIdentifier;",
          "50: typedef struct r_x509_subjectpublickeyinfo_t {",
          "51:  RX509AlgorithmIdentifier algorithm;",
          "53:  RASN1Object *subjectPublicKey; // BIT STRING",
          "56:  RASN1Object *subjectPublicKeyExponent;",
          "57:  RASN1Object *subjectPublicKeyModule;",
          "58: } RX509SubjectPublicKeyInfo;",
          "60: typedef struct r_x509_extension_t {",
          "61:  RASN1String *extnID; // OBJECT IDENTIFIER",
          "62:  bool critical;",
          "63:  RASN1Object *extnValue; // OCTET STRING",
          "64: } RX509Extension;",
          "66: typedef struct r_x509_extensions_t {",
          "67:  ut32 length;",
          "68:  RX509Extension **extensions;",
          "69: } RX509Extensions;",
          "71: typedef struct r_x509_tbscertificate_t {",
          "72:  ut32 version; //INTEGER",
          "73:  RASN1String *serialNumber; // INTEGER",
          "74:  RX509AlgorithmIdentifier signature;",
          "75:  RX509Name issuer;",
          "76:  RX509Validity validity;",
          "77:  RX509Name subject;",
          "78:  RX509SubjectPublicKeyInfo subjectPublicKeyInfo;",
          "79:  RASN1Object *issuerUniqueID; // BIT STRING",
          "80:  RASN1Object *subjectUniqueID; // BIT STRING",
          "81:  RX509Extensions extensions;",
          "82: } RX509TBSCertificate;",
          "84: typedef struct r_x509_certificate_t {",
          "85:  RX509TBSCertificate tbsCertificate;",
          "86:  RX509AlgorithmIdentifier algorithmIdentifier;",
          "87:  RASN1Object *signature; // BIT STRING",
          "88: } RX509Certificate;",
          "93: typedef struct r_x509_crlentry {",
          "94:  RASN1Object *userCertificate; //INTEGER ?",
          "95:  RASN1String *revocationDate; //UTCTime",
          "96: } RX509CRLEntry;",
          "98: typedef struct r_x509_certificaterevocationlist {",
          "99:  RX509AlgorithmIdentifier signature;",
          "100:  RX509Name issuer;",
          "101:  RASN1String *lastUpdate; //UTCTime",
          "102:  RASN1String *nextUpdate; //UTCTime",
          "103:  ut32 length;",
          "104:  RX509CRLEntry **revokedCertificates;",
          "105: } RX509CertificateRevocationList;",
          "107: R_API RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object);",
          "108: R_API void r_x509_free_crl (RX509CertificateRevocationList *crl);",
          "109: R_API char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad);",
          "111: R_API RX509Certificate *r_x509_parse_certificate (RASN1Object *object);",
          "112: R_API RX509Certificate *r_x509_parse_certificate2 (const ut8 *buffer, ut32 length);",
          "113: R_API void r_x509_free_certificate (RX509Certificate* certificate);",
          "114: R_API char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad);",
          "117: #ifdef __cplusplus",
          "118: }",
          "119: #endif",
          "",
          "---------------"
        ],
        "libr/util/r_asn1.c||libr/util/r_asn1.c": [
          "File: libr/util/r_asn1.c -> libr/util/r_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #include <r_util.h>",
          "2: #include \"r_oids.h\"",
          "3: #include <stdlib.h>",
          "4: #include <stdio.h>",
          "5: #include <string.h>",
          "7: #include \"r_asn1_internal.h\"",
          "9: const char* _hex = \"0123456789abcdef\";",
          "11: RASN1String *r_asn1_create_string (const char *string, bool allocated, ut32 length) {",
          "12:  RASN1String *s;",
          "13:  if (!string || !length) {",
          "14:   return NULL;",
          "15:  }",
          "16:  s = (RASN1String*) malloc (sizeof (RASN1String));",
          "17:  if (!s) {",
          "18:   return NULL;",
          "19:  }",
          "20:  s->allocated = allocated;",
          "21:  s->length = length;",
          "22:  s->string = string;",
          "23:  return s;",
          "24: }",
          "26: RASN1String *r_asn1_create_string2 (const char *string, bool allocated) {",
          "27:  return r_asn1_create_string (string, allocated, strlen (string) + 1);",
          "28: }",
          "30: RASN1String *r_asn1_concatenate_strings (RASN1String *s0, RASN1String *s1, bool freestr) {",
          "31:  char* str;",
          "32:  ut32 len;",
          "33:  if (!s0 || !s1 || s0->length == 0 || s1->length == 0) {",
          "34:   return NULL;",
          "35:  }",
          "36:  len = s0->length + s1->length - 1;",
          "37:  str = (char*) malloc (len);",
          "38:  if (!str) {",
          "39:   if (freestr) {",
          "40:    r_asn1_free_string (s0);",
          "41:    r_asn1_free_string (s1);",
          "42:   }",
          "43:   return NULL;",
          "44:  }",
          "45:  memcpy (str, s0->string, s0->length);",
          "46:  memcpy (str + s0->length - 1, s1->string, s1->length);",
          "47:  if (freestr) {",
          "48:   r_asn1_free_string (s0);",
          "49:   r_asn1_free_string (s1);",
          "50:  }",
          "51:  return r_asn1_create_string (str, true, len);",
          "52: }",
          "54: RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length) {",
          "55:  char *str;",
          "56:  if (!buffer || !length) {",
          "57:   return NULL;",
          "58:  }",
          "59:  str = (char*) malloc (length + 1);",
          "60:  if (!str) {",
          "61:   return NULL;",
          "62:  }",
          "63:  memcpy (str, buffer, length);",
          "64:  str[length] = '\\0';",
          "65:  return r_asn1_create_string (str, true, length + 1);",
          "66: }",
          "68: RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length) {",
          "69:  char* str;",
          "70:  if (!buffer || length != 13 || buffer[12] != 'Z') {",
          "71:   return NULL;",
          "72:  }",
          "73:  str = (char*) malloc (24);",
          "74:  if (!buffer || !length) {",
          "75:   return NULL;",
          "76:  }",
          "78:  str[0] = buffer[4];",
          "79:  str[1] = buffer[5];",
          "80:  str[2] = '/';",
          "81:  str[3] = buffer[2];",
          "82:  str[4] = buffer[3];",
          "83:  str[5] = '/';",
          "84:  str[6] = buffer[0] < '5' ? '2' : '1';",
          "85:  str[7] = buffer[0] < '5' ? '0' : '9';",
          "86:  str[8] = buffer[0];",
          "87:  str[9] = buffer[1];",
          "88:  str[10] = ' ';",
          "89:  str[11] = buffer[6];",
          "90:  str[12] = buffer[7];",
          "91:  str[13] = ':';",
          "92:  str[14] = buffer[8];",
          "93:  str[15] = buffer[9];",
          "94:  str[16] = ':';",
          "95:  str[17] = buffer[10];",
          "96:  str[18] = buffer[11];",
          "97:  str[19] = ' ';",
          "98:  str[20] = 'G';",
          "99:  str[21] = 'M';",
          "100:  str[22] = 'T';",
          "101:  str[23] = '\\0';",
          "103:  return r_asn1_create_string (str, true, 24);",
          "104: }",
          "106: RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length) {",
          "108:  char* str;",
          "109:  if (!buffer || length != 15 || buffer[14] != 'Z') {",
          "110:   return NULL;",
          "111:  }",
          "112:  str = (char*) malloc (24);",
          "113:  if (!buffer || !length) {",
          "114:   return NULL;",
          "115:  }",
          "117:  str[0] = buffer[6];",
          "118:  str[1] = buffer[7];",
          "119:  str[2] = '/';",
          "120:  str[3] = buffer[4];",
          "121:  str[4] = buffer[5];",
          "122:  str[5] = '/';",
          "123:  str[6] = buffer[0];",
          "124:  str[7] = buffer[1];",
          "125:  str[8] = buffer[2];",
          "126:  str[9] = buffer[3];",
          "127:  str[10] = ' ';",
          "128:  str[11] = buffer[8];",
          "129:  str[12] = buffer[9];",
          "130:  str[13] = ':';",
          "131:  str[14] = buffer[10];",
          "132:  str[15] = buffer[11];",
          "133:  str[16] = ':';",
          "134:  str[17] = buffer[12];",
          "135:  str[18] = buffer[13];",
          "136:  str[19] = ' ';",
          "137:  str[20] = 'G';",
          "138:  str[21] = 'M';",
          "139:  str[22] = 'T';",
          "140:  str[23] = '\\0';",
          "142:  return r_asn1_create_string (str, true, 24);",
          "143: }",
          "145: RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length) {",
          "146:  ut32 i, j, k;",
          "147:  ut64 size;",
          "148:  ut8 c;",
          "149:  char *str;",
          "150:  if (!buffer || !length) {",
          "151:   return NULL;",
          "152:  }",
          "153:  size = 1 + ((length - 1)* 8) - buffer[0];",
          "154:  str = (char*) malloc (size);",
          "155:  if (!str) {",
          "156:   return NULL;",
          "157:  }",
          "158:  for (i = 1, j = 0; i < length && j < size; ++i) {",
          "159:   c = buffer[i];",
          "160:   for (k = 0; k < 8 && j < size; ++k, j++) {",
          "161:    str[size - j - 1] = c & 0x80 ? '1' : '0';",
          "162:    c <<= 1;",
          "163:   }",
          "164:  }",
          "165:  str[size - 1] = '\\0';",
          "166:  return r_asn1_create_string (str, true, size);",
          "167: }",
          "169: RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length) {",
          "170:  if (!buffer || length != 1 || (buffer[0] != 0 && buffer[0] != 0xFF)) {",
          "171:   return NULL;",
          "172:  }",
          "173:  return r_asn1_create_string2 (buffer[0] != 0 ? \"true\" : \"false\", false);",
          "174: }",
          "176: RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length) {",
          "177:  ut32 i, j;",
          "178:  ut64 size;",
          "179:  ut8 c;",
          "180:  char *str;",
          "181:  if (!buffer || !length) {",
          "182:   return NULL;",
          "183:  }",
          "184:  size = 3 * length;",
          "185:  str = (char*) malloc (size);",
          "186:  if (!str) {",
          "187:   return NULL;",
          "188:  }",
          "189:  memset (str, 0, size);",
          "190:  for (i = 0, j = 0; i < length && j < size; ++i, j += 3) {",
          "191:   c = buffer[i];",
          "192:   str[j + 0] = _hex[c >> 4];",
          "193:   str[j + 1] = _hex[c & 15];",
          "194:   str[j + 2] = ':';",
          "195:  }",
          "196:  str[size - 1] = '\\0';",
          "197:  return r_asn1_create_string (str, true, size);",
          "198: }",
          "200: RASN1String* r_asn1_stringify_bytes (const ut8 *buffer, ut32 length) {",
          "201:  ut32 i, j, k;",
          "202:  ut64 size;",
          "203:  ut8 c;",
          "204:  char *str;",
          "205:  if (!buffer || !length) {",
          "206:   return NULL;",
          "207:  }",
          "208:  size = (4 * length);",
          "209:  size += (64 - (size % 64));",
          "210:  str = (char*) malloc (size);",
          "211:  if (!str) {",
          "212:   return NULL;",
          "213:  }",
          "214:  memset (str, 0x20, size);",
          "216:  for (i = 0, j = 0, k = 48; i < length && j < size && k < size; ++i, j += 3, k++) {",
          "217:   c = buffer[i];",
          "218:   str[j + 0] = _hex[c >> 4];",
          "219:   str[j + 1] = _hex[c & 15];",
          "220:   str[j + 2] = ' ';",
          "221:   str[k] = (c >= ' ' && c <= '~') ? c : '.';",
          "222:   if (i % 16 == 15) {",
          "223:    str[j + 19] = '\\n';",
          "224:    j += 17;",
          "225:    k += 49;",
          "226:   }",
          "227:  }",
          "228:  str[size - 1] = '\\0';",
          "230:  return r_asn1_create_string (str, true, size);",
          "231: }",
          "233: RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length) {",
          "234:  const ut8 *start, *end;",
          "235:  char *str, *t;",
          "236:  ut32 i, slen, bits;",
          "237:  ut64 oid;",
          "238:  if (!buffer || !length) {",
          "239:   return NULL;",
          "240:  }",
          "242:  str = (char*) malloc (ASN1_OID_LEN);",
          "243:  if (!str) {",
          "244:   return NULL;",
          "245:  }",
          "247:  memset (str, 0, ASN1_OID_LEN);",
          "249:  end = buffer + length;",
          "250:  t = str;",
          "251:  slen = 0;",
          "252:  bits = 0;",
          "253:  oid = 0;",
          "255:  for (start = buffer; start < end && slen < ASN1_OID_LEN; start++) {",
          "256:   ut8 c = *start;",
          "257:   oid <<= 7;",
          "258:   oid |= (c & 0x7F);",
          "259:   bits += 7;",
          "260:   if (!(c & 0x80)) {",
          "261:    if (!slen) {",
          "262:     ut32 m = oid / 40;",
          "263:     ut32 n = oid % 40;",
          "264:     snprintf (t, ASN1_OID_LEN, \"%01u.%01u\", m, n);",
          "265:     slen = strlen (str);",
          "266:     t = str + slen;",
          "267:    } else {",
          "269:     if ((ASN1_OID_LEN - slen) > ASN1_OID_LEN) {",
          "270:      free (str);",
          "271:      return NULL;",
          "272:     }",
          "273:     snprintf (t, ASN1_OID_LEN - slen, \".%01u\", (ut32) oid);",
          "274:     slen = strlen (str);",
          "275:     t = str + slen;",
          "276:    }",
          "277:    oid = 0;",
          "278:    bits = 0;",
          "279:   }",
          "280:  }",
          "283:  if (bits > 0) {",
          "284:   free (str);",
          "285:   return NULL;",
          "286:  }",
          "287:  i = 0;",
          "288:  do {",
          "289:   if (X509OIDList[i].oid[0] == str[0]) {",
          "290:    if (!strncmp (str, X509OIDList[i].oid, ASN1_OID_LEN)) {",
          "291:     free (str);",
          "292:     return r_asn1_create_string2 (X509OIDList[i].name, false);",
          "293:    }",
          "294:   }",
          "295:   ++i;",
          "296:  } while (X509OIDList[i].oid && X509OIDList[i].name);",
          "297:  return r_asn1_create_string (str, true, ASN1_OID_LEN);",
          "298: }",
          "300: RASN1Object *asn1_parse_header (const ut8 *buffer, ut32 length) {",
          "301:  RASN1Object *object;",
          "302:  ut8 head, length8, byte;",
          "303:  ut64 length64;",
          "304:  if (!buffer || !length) {",
          "305:   return NULL;",
          "306:  }",
          "308:  object = (RASN1Object*) malloc (sizeof (RASN1Object));",
          "309:  if (!object) {",
          "310:   return NULL;",
          "311:  }",
          "312:  head = buffer[0];",
          "313:  object->class = head & ASN1_CLASS;",
          "314:  object->form = head & ASN1_FORM;",
          "315:  object->tag = head & ASN1_TAG;",
          "316:  object->sector = NULL;",
          "317:  object->length = 0;",
          "318:  object->list.length = 0;",
          "319:  object->list.objects = NULL;",
          "320:  length8 = buffer[1];",
          "321:  if (length8 & ASN1_LENLONG) {",
          "322:   length64 = 0;",
          "323:   length8 &= ASN1_LENSHORT;",
          "324:   if (length8) {",
          "325:    ut8 i8;",
          "327:    for (i8 = 0; i8 < length8; ++i8) {",
          "328:     byte = buffer[2 + i8];",
          "329:     length64 <<= 8;",
          "330:     length64 |= byte;",
          "331:     if (length64 > 0xffffffff) {",
          "332:      free (object);",
          "334:      return NULL;",
          "335:     }",
          "336:    }",
          "337:    object->sector = buffer + 2 + length8;",
          "338:   } else {",
          "340:    const ut8 *from = buffer + 2;",
          "341:    const ut8 *end = from + (length - 2);",
          "342:    do {",
          "343:     byte = *from;",
          "344:     length64 <<= 8;",
          "345:     length64 |= byte;",
          "346:     from++;",
          "347:    } while (from < end && length64 <= 0xffffffff && byte & 0x80);",
          "348:    if (length64 > 0xffffffff) {",
          "349:     free (object);",
          "351:     return NULL;",
          "352:    }",
          "353:    object->sector = from;",
          "354:   }",
          "355:   object->length = (ut32) length64;",
          "356:  } else {",
          "357:   object->length = (ut32) length8;",
          "358:   object->sector = buffer + 2;",
          "359:  }",
          "360:  if (object->tag == TAG_BITSTRING && object->sector[0] == 0) {",
          "361:   object->sector++; //real sector starts +1",
          "362:   if (object->length > 0)",
          "363:    object->length--;",
          "364:  }",
          "365:  if (object->length > length) {",
          "367:   free (object);",
          "368:   return NULL;",
          "369:  }",
          "370:  return object;",
          "371: }",
          "373: ut32 r_asn1_count_objects (const ut8 *buffer, ut32 length) {",
          "374:  ut32 counter;",
          "375:  RASN1Object *object;",
          "376:  const ut8 *next, *end;",
          "377:  if (!buffer || !length) {",
          "378:   return 0;",
          "379:  }",
          "380:  counter = 0;",
          "381:  object = NULL;",
          "382:  next = buffer;",
          "383:  end = buffer + length;",
          "384:  while (next >= buffer && next < end) {",
          "385:   object = asn1_parse_header (next, end - next);",
          "386:   if (!object || next == object->sector) {",
          "388:    break;",
          "389:   }",
          "390:   next = object->sector + object->length;",
          "391:   counter++;",
          "392:   free (object);",
          "393:   object = NULL;",
          "394:  }",
          "395:  if (object) {",
          "396:   free (object);",
          "397:  }",
          "398:  return counter;",
          "399: }",
          "401: RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length) {",
          "402:  RASN1Object *object = asn1_parse_header (buffer, length);",
          "403:  if (object && (object->form == FORM_CONSTRUCTED || object->tag == TAG_BITSTRING || object->tag == TAG_OCTETSTRING)) {",
          "404:   ut32 i, count;",
          "405:   RASN1Object *inner;",
          "406:   const ut8 *next = object->sector;",
          "407:   const ut8 *end = next + object->length;",
          "408:   count = r_asn1_count_objects (object->sector, object->length);",
          "409:   inner = NULL;",
          "410:   object->list.length = count;",
          "411:   if (count == 0) {",
          "412:    object->list.objects = NULL;",
          "413:   } else {",
          "414:    object->list.objects = (RASN1Object**) calloc (count, sizeof (RASN1Object*));",
          "415:    if (!object->list.objects) {",
          "416:     free (object);",
          "417:     return NULL;",
          "418:    }",
          "419:    memset (object->list.objects, 0, count * sizeof (RASN1Object*));",
          "420:    for (i = 0; next >= buffer && next < end && i < count; ++i) {",
          "421:     inner = r_asn1_create_object (next, end - next);",
          "422:     if (!inner || next == inner->sector) {",
          "424:      break;",
          "425:     }",
          "426:     next = inner->sector + inner->length;",
          "427:     object->list.objects[i] = inner;",
          "428:     inner = NULL;",
          "429:    }",
          "430:    if (inner) {",
          "431:     free (inner);",
          "432:    }",
          "433:   }",
          "434:  }",
          "435:  return object;",
          "436: }",
          "438: void r_asn1_free_object (RASN1Object *object) {",
          "439:  ut32 i;",
          "440:  if (object) {",
          "442:   object->sector = 0;",
          "443:   if (object->list.objects && object->list.length) {",
          "444:    for (i = 0; i < object->list.length; ++i) {",
          "445:     if (object->list.objects[i]) {",
          "446:      r_asn1_free_object (object->list.objects[i]);",
          "447:     }",
          "448:     object->list.objects[i] = NULL;",
          "449:    }",
          "450:    free (object->list.objects);",
          "451:    object->list.objects = NULL;",
          "452:   }",
          "453:   free (object);",
          "454:  }",
          "455: }",
          "457: void r_asn1_free_string (RASN1String* str) {",
          "458:  if (str) {",
          "459:   if (str->allocated) {",
          "460:    free ((char*) str->string);",
          "461:   }",
          "462:   free (str);",
          "463:  }",
          "464: }",
          "466: RASN1String *asn1_stringify_tag (RASN1Object *object) {",
          "467:  if (!object) {",
          "468:   return NULL;",
          "469:  }",
          "470:  switch (object->tag) {",
          "471:  case TAG_EOC:",
          "472:   return r_asn1_create_string2 (\"EOC\", false);",
          "473:  case TAG_BOOLEAN:",
          "474:   return r_asn1_create_string2 (\"BOOLEAN\", false);",
          "475:  case TAG_INTEGER:",
          "476:   return r_asn1_create_string2 (\"INTEGER\", false);",
          "477:  case TAG_BITSTRING:",
          "478:   return r_asn1_create_string2 (\"BIT STRING\", false);",
          "479:  case TAG_OCTETSTRING:",
          "480:   return r_asn1_create_string2 (\"OCTET STRING\", false);",
          "481:  case TAG_NULL:",
          "482:   return r_asn1_create_string2 (\"NULL\", false);",
          "483:  case TAG_OID:",
          "484:   return r_asn1_create_string2 (\"OBJECT IDENTIFIER\", false);",
          "485:  case TAG_OBJDESCRIPTOR:",
          "486:   return r_asn1_create_string2 (\"ObjectDescriptor\", false);",
          "487:  case TAG_EXTERNAL:",
          "488:   return r_asn1_create_string2 (\"EXTERNAL\", false);",
          "489:  case TAG_REAL:",
          "490:   return r_asn1_create_string2 (\"REAL\", false);",
          "491:  case TAG_ENUMERATED:",
          "492:   return r_asn1_create_string2 (\"ENUMERATED\", false);",
          "493:  case TAG_EMBEDDED_PDV:",
          "494:   return r_asn1_create_string2 (\"EMBEDDED PDV\", false);",
          "495:  case TAG_UTF8STRING:",
          "496:   return r_asn1_create_string2 (\"UTF8String\", false);",
          "497:  case TAG_SEQUENCE:",
          "498:   return r_asn1_create_string2 (\"SEQUENCE\", false);",
          "499:  case TAG_SET:",
          "500:   return r_asn1_create_string2 (\"SET\", false);",
          "501:  case TAG_NUMERICSTRING:",
          "502:   return r_asn1_create_string2 (\"NumericString\", false);",
          "503:  case TAG_PRINTABLESTRING:",
          "504:   return r_asn1_create_string2 (\"PrintableString\", false);",
          "505:  case TAG_T61STRING:",
          "506:   return r_asn1_create_string2 (\"TeletexString\", false);",
          "507:  case TAG_VIDEOTEXSTRING:",
          "508:   return r_asn1_create_string2 (\"VideotexString\", false);",
          "509:  case TAG_IA5STRING:",
          "510:   return r_asn1_create_string2 (\"IA5String\", false);",
          "511:  case TAG_UTCTIME:",
          "512:   return r_asn1_create_string2 (\"UTCTime\", false);",
          "513:  case TAG_GENERALIZEDTIME:",
          "514:   return r_asn1_create_string2 (\"GeneralizedTime\", false);",
          "515:  case TAG_GRAPHICSTRING:",
          "516:   return r_asn1_create_string2 (\"GraphicString\", false);",
          "517:  case TAG_VISIBLESTRING:",
          "518:   return r_asn1_create_string2 (\"VisibleString\", false);",
          "519:  case TAG_GENERALSTRING:",
          "520:   return r_asn1_create_string2 (\"GeneralString\", false);",
          "521:  case TAG_UNIVERSALSTRING:",
          "522:   return r_asn1_create_string2 (\"UniversalString\", false);",
          "523:  case TAG_BMPSTRING:",
          "524:   return r_asn1_create_string2 (\"BMPString\", false);",
          "525:  }",
          "526:  return r_asn1_create_string2 (\"Unknown tag\", false);",
          "527: }",
          "529: RASN1String *asn1_stringify_sector (RASN1Object *object) {",
          "530:  if (!object) {",
          "531:   return NULL;",
          "532:  }",
          "533:  switch (object->tag) {",
          "534:  case TAG_EOC:",
          "535:   return NULL;",
          "536:  case TAG_BOOLEAN:",
          "537:   return r_asn1_create_string2 (object->sector[0] == 0 ? \"false\" : \"true\", false);",
          "538:  case TAG_REAL:",
          "539:  case TAG_INTEGER:",
          "540:   if (object->length < 16) {",
          "541:    return r_asn1_stringify_integer (object->sector, object->length);",
          "542:   } else {",
          "543:    return r_asn1_stringify_bytes (object->sector, object->length);",
          "544:   }",
          "545:  case TAG_BITSTRING:",
          "547:   return r_asn1_stringify_bits (object->sector, object->length);",
          "551:  case TAG_OCTETSTRING:",
          "552:   return r_asn1_stringify_bytes (object->sector, object->length);",
          "553:  case TAG_NULL:",
          "554:   return NULL;",
          "555:  case TAG_OID:",
          "556:   return r_asn1_stringify_oid (object->sector, object->length);",
          "561:  case TAG_UTF8STRING:",
          "564:  case TAG_NUMERICSTRING:",
          "565:  case TAG_PRINTABLESTRING:",
          "568:  case TAG_IA5STRING:",
          "569:  case TAG_VISIBLESTRING:",
          "570:   return r_asn1_stringify_string (object->sector, object->length);",
          "571:  case TAG_UTCTIME:",
          "572:   return r_asn1_stringify_utctime (object->sector, object->length);",
          "573:  case TAG_GENERALIZEDTIME:",
          "574:   return r_asn1_stringify_time (object->sector, object->length);",
          "579:  }",
          "580:  return NULL;",
          "581: }",
          "",
          "[Added Lines]",
          "3: #include <r_util.h>",
          "4: #include \"r_oids.h\"",
          "5: #include <stdlib.h>",
          "6: #include <stdio.h>",
          "7: #include <string.h>",
          "9: #include \"r_asn1_internal.h\"",
          "11: const char* _hex = \"0123456789abcdef\";",
          "13: RASN1String *r_asn1_create_string (const char *string, bool allocated, ut32 length) {",
          "14:  RASN1String *s;",
          "15:  if (!string || !length) {",
          "16:   return NULL;",
          "17:  }",
          "18:  s = (RASN1String*) malloc (sizeof (RASN1String));",
          "19:  if (!s) {",
          "20:   return NULL;",
          "21:  }",
          "22:  s->allocated = allocated;",
          "23:  s->length = length;",
          "24:  s->string = string;",
          "25:  return s;",
          "26: }",
          "28: RASN1String *r_asn1_create_string2 (const char *string, bool allocated) {",
          "29:  return r_asn1_create_string (string, allocated, strlen (string) + 1);",
          "30: }",
          "32: RASN1String *r_asn1_concatenate_strings (RASN1String *s0, RASN1String *s1, bool freestr) {",
          "33:  char* str;",
          "34:  ut32 len;",
          "35:  if (!s0 || !s1 || s0->length == 0 || s1->length == 0) {",
          "36:   return NULL;",
          "37:  }",
          "38:  len = s0->length + s1->length - 1;",
          "39:  str = (char*) malloc (len);",
          "40:  if (!str) {",
          "41:   if (freestr) {",
          "42:    r_asn1_free_string (s0);",
          "43:    r_asn1_free_string (s1);",
          "44:   }",
          "45:   return NULL;",
          "46:  }",
          "47:  memcpy (str, s0->string, s0->length);",
          "48:  memcpy (str + s0->length - 1, s1->string, s1->length);",
          "49:  if (freestr) {",
          "50:   r_asn1_free_string (s0);",
          "51:   r_asn1_free_string (s1);",
          "52:  }",
          "53:  return r_asn1_create_string (str, true, len);",
          "54: }",
          "56: RASN1String *r_asn1_stringify_string (const ut8 *buffer, ut32 length) {",
          "57:  char *str;",
          "58:  if (!buffer || !length) {",
          "59:   return NULL;",
          "60:  }",
          "61:  str = (char*) malloc (length + 1);",
          "62:  if (!str) {",
          "63:   return NULL;",
          "64:  }",
          "65:  memcpy (str, buffer, length);",
          "66:  str[length] = '\\0';",
          "67:  return r_asn1_create_string (str, true, length + 1);",
          "68: }",
          "70: RASN1String *r_asn1_stringify_utctime (const ut8 *buffer, ut32 length) {",
          "71:  char* str;",
          "72:  if (!buffer || length != 13 || buffer[12] != 'Z') {",
          "73:   return NULL;",
          "74:  }",
          "75:  str = (char*) malloc (24);",
          "76:  if (!buffer || !length) {",
          "77:   return NULL;",
          "78:  }",
          "80:  str[0] = buffer[4];",
          "81:  str[1] = buffer[5];",
          "82:  str[2] = '/';",
          "83:  str[3] = buffer[2];",
          "84:  str[4] = buffer[3];",
          "85:  str[5] = '/';",
          "86:  str[6] = buffer[0] < '5' ? '2' : '1';",
          "87:  str[7] = buffer[0] < '5' ? '0' : '9';",
          "88:  str[8] = buffer[0];",
          "89:  str[9] = buffer[1];",
          "90:  str[10] = ' ';",
          "91:  str[11] = buffer[6];",
          "92:  str[12] = buffer[7];",
          "93:  str[13] = ':';",
          "94:  str[14] = buffer[8];",
          "95:  str[15] = buffer[9];",
          "96:  str[16] = ':';",
          "97:  str[17] = buffer[10];",
          "98:  str[18] = buffer[11];",
          "99:  str[19] = ' ';",
          "100:  str[20] = 'G';",
          "101:  str[21] = 'M';",
          "102:  str[22] = 'T';",
          "103:  str[23] = '\\0';",
          "105:  return r_asn1_create_string (str, true, 24);",
          "106: }",
          "108: RASN1String *r_asn1_stringify_time (const ut8 *buffer, ut32 length) {",
          "110:  char* str;",
          "111:  if (!buffer || length != 15 || buffer[14] != 'Z') {",
          "112:   return NULL;",
          "113:  }",
          "114:  str = (char*) malloc (24);",
          "115:  if (!buffer || !length) {",
          "116:   return NULL;",
          "117:  }",
          "119:  str[0] = buffer[6];",
          "120:  str[1] = buffer[7];",
          "121:  str[2] = '/';",
          "122:  str[3] = buffer[4];",
          "123:  str[4] = buffer[5];",
          "124:  str[5] = '/';",
          "125:  str[6] = buffer[0];",
          "126:  str[7] = buffer[1];",
          "127:  str[8] = buffer[2];",
          "128:  str[9] = buffer[3];",
          "129:  str[10] = ' ';",
          "130:  str[11] = buffer[8];",
          "131:  str[12] = buffer[9];",
          "132:  str[13] = ':';",
          "133:  str[14] = buffer[10];",
          "134:  str[15] = buffer[11];",
          "135:  str[16] = ':';",
          "136:  str[17] = buffer[12];",
          "137:  str[18] = buffer[13];",
          "138:  str[19] = ' ';",
          "139:  str[20] = 'G';",
          "140:  str[21] = 'M';",
          "141:  str[22] = 'T';",
          "142:  str[23] = '\\0';",
          "144:  return r_asn1_create_string (str, true, 24);",
          "145: }",
          "147: RASN1String *r_asn1_stringify_bits (const ut8 *buffer, ut32 length) {",
          "148:  ut32 i, j, k;",
          "149:  ut64 size;",
          "150:  ut8 c;",
          "151:  char *str;",
          "152:  if (!buffer || !length) {",
          "153:   return NULL;",
          "154:  }",
          "155:  size = 1 + ((length - 1)* 8) - buffer[0];",
          "156:  str = (char*) malloc (size);",
          "157:  if (!str) {",
          "158:   return NULL;",
          "159:  }",
          "160:  for (i = 1, j = 0; i < length && j < size; ++i) {",
          "161:   c = buffer[i];",
          "162:   for (k = 0; k < 8 && j < size; ++k, j++) {",
          "163:    str[size - j - 1] = c & 0x80 ? '1' : '0';",
          "164:    c <<= 1;",
          "165:   }",
          "166:  }",
          "167:  str[size - 1] = '\\0';",
          "168:  return r_asn1_create_string (str, true, size);",
          "169: }",
          "171: RASN1String *r_asn1_stringify_boolean (const ut8 *buffer, ut32 length) {",
          "172:  if (!buffer || length != 1 || (buffer[0] != 0 && buffer[0] != 0xFF)) {",
          "173:   return NULL;",
          "174:  }",
          "175:  return r_asn1_create_string2 (buffer[0] != 0 ? \"true\" : \"false\", false);",
          "176: }",
          "178: RASN1String *r_asn1_stringify_integer (const ut8 *buffer, ut32 length) {",
          "179:  ut32 i, j;",
          "180:  ut64 size;",
          "181:  ut8 c;",
          "182:  char *str;",
          "183:  if (!buffer || !length) {",
          "184:   return NULL;",
          "185:  }",
          "186:  size = 3 * length;",
          "187:  str = (char*) malloc (size);",
          "188:  if (!str) {",
          "189:   return NULL;",
          "190:  }",
          "191:  memset (str, 0, size);",
          "192:  for (i = 0, j = 0; i < length && j < size; ++i, j += 3) {",
          "193:   c = buffer[i];",
          "194:   str[j + 0] = _hex[c >> 4];",
          "195:   str[j + 1] = _hex[c & 15];",
          "196:   str[j + 2] = ':';",
          "197:  }",
          "198:  str[size - 1] = '\\0';",
          "199:  return r_asn1_create_string (str, true, size);",
          "200: }",
          "202: RASN1String* r_asn1_stringify_bytes (const ut8 *buffer, ut32 length) {",
          "203:  ut32 i, j, k;",
          "204:  ut64 size;",
          "205:  ut8 c;",
          "206:  char *str;",
          "207:  if (!buffer || !length) {",
          "208:   return NULL;",
          "209:  }",
          "210:  size = (4 * length);",
          "211:  size += (64 - (size % 64));",
          "212:  str = (char*) malloc (size);",
          "213:  if (!str) {",
          "214:   return NULL;",
          "215:  }",
          "216:  memset (str, 0x20, size);",
          "218:  for (i = 0, j = 0, k = 48; i < length && j < size && k < size; ++i, j += 3, k++) {",
          "219:   c = buffer[i];",
          "220:   str[j + 0] = _hex[c >> 4];",
          "221:   str[j + 1] = _hex[c & 15];",
          "222:   str[j + 2] = ' ';",
          "223:   str[k] = (c >= ' ' && c <= '~') ? c : '.';",
          "224:   if (i % 16 == 15) {",
          "225:    str[j + 19] = '\\n';",
          "226:    j += 17;",
          "227:    k += 49;",
          "228:   }",
          "229:  }",
          "230:  str[size - 1] = '\\0';",
          "232:  return r_asn1_create_string (str, true, size);",
          "233: }",
          "235: RASN1String *r_asn1_stringify_oid (const ut8* buffer, ut32 length) {",
          "236:  const ut8 *start, *end;",
          "237:  char *str, *t;",
          "238:  ut32 i, slen, bits;",
          "239:  ut64 oid;",
          "240:  if (!buffer || !length) {",
          "241:   return NULL;",
          "242:  }",
          "244:  str = (char*) malloc (ASN1_OID_LEN);",
          "245:  if (!str) {",
          "246:   return NULL;",
          "247:  }",
          "249:  memset (str, 0, ASN1_OID_LEN);",
          "251:  end = buffer + length;",
          "252:  t = str;",
          "253:  slen = 0;",
          "254:  bits = 0;",
          "255:  oid = 0;",
          "257:  for (start = buffer; start < end && slen < ASN1_OID_LEN; start++) {",
          "258:   ut8 c = *start;",
          "259:   oid <<= 7;",
          "260:   oid |= (c & 0x7F);",
          "261:   bits += 7;",
          "262:   if (!(c & 0x80)) {",
          "263:    if (!slen) {",
          "264:     ut32 m = oid / 40;",
          "265:     ut32 n = oid % 40;",
          "266:     snprintf (t, ASN1_OID_LEN, \"%01u.%01u\", m, n);",
          "267:     slen = strlen (str);",
          "268:     t = str + slen;",
          "269:    } else {",
          "271:     if ((ASN1_OID_LEN - slen) > ASN1_OID_LEN) {",
          "272:      free (str);",
          "273:      return NULL;",
          "274:     }",
          "275:     snprintf (t, ASN1_OID_LEN - slen, \".%01u\", (ut32) oid);",
          "276:     slen = strlen (str);",
          "277:     t = str + slen;",
          "278:    }",
          "279:    oid = 0;",
          "280:    bits = 0;",
          "281:   }",
          "282:  }",
          "285:  if (bits > 0) {",
          "286:   free (str);",
          "287:   return NULL;",
          "288:  }",
          "289:  i = 0;",
          "290:  do {",
          "291:   if (X509OIDList[i].oid[0] == str[0]) {",
          "292:    if (!strncmp (str, X509OIDList[i].oid, ASN1_OID_LEN)) {",
          "293:     free (str);",
          "294:     return r_asn1_create_string2 (X509OIDList[i].name, false);",
          "295:    }",
          "296:   }",
          "297:   ++i;",
          "298:  } while (X509OIDList[i].oid && X509OIDList[i].name);",
          "299:  return r_asn1_create_string (str, true, ASN1_OID_LEN);",
          "300: }",
          "302: RASN1Object *asn1_parse_header (const ut8 *buffer, ut32 length) {",
          "303:  RASN1Object *object;",
          "304:  ut8 head, length8, byte;",
          "305:  ut64 length64;",
          "306:  if (!buffer || !length) {",
          "307:   return NULL;",
          "308:  }",
          "310:  object = (RASN1Object*) malloc (sizeof (RASN1Object));",
          "311:  if (!object) {",
          "312:   return NULL;",
          "313:  }",
          "314:  head = buffer[0];",
          "315:  object->klass = head & ASN1_CLASS;",
          "316:  object->form = head & ASN1_FORM;",
          "317:  object->tag = head & ASN1_TAG;",
          "318:  object->sector = NULL;",
          "319:  object->length = 0;",
          "320:  object->list.length = 0;",
          "321:  object->list.objects = NULL;",
          "322:  length8 = buffer[1];",
          "323:  if (length8 & ASN1_LENLONG) {",
          "324:   length64 = 0;",
          "325:   length8 &= ASN1_LENSHORT;",
          "326:   if (length8) {",
          "327:    ut8 i8;",
          "329:    for (i8 = 0; i8 < length8; ++i8) {",
          "330:     byte = buffer[2 + i8];",
          "331:     length64 <<= 8;",
          "332:     length64 |= byte;",
          "333:     if (length64 > 0xffffffff) {",
          "334:      free (object);",
          "336:      return NULL;",
          "337:     }",
          "338:    }",
          "339:    object->sector = buffer + 2 + length8;",
          "340:   } else {",
          "342:    const ut8 *from = buffer + 2;",
          "343:    const ut8 *end = from + (length - 2);",
          "344:    do {",
          "345:     byte = *from;",
          "346:     length64 <<= 8;",
          "347:     length64 |= byte;",
          "348:     from++;",
          "349:    } while (from < end && length64 <= 0xffffffff && byte & 0x80);",
          "350:    if (length64 > 0xffffffff) {",
          "351:     free (object);",
          "353:     return NULL;",
          "354:    }",
          "355:    object->sector = from;",
          "356:   }",
          "357:   object->length = (ut32) length64;",
          "358:  } else {",
          "359:   object->length = (ut32) length8;",
          "360:   object->sector = buffer + 2;",
          "361:  }",
          "362:  if (object->tag == TAG_BITSTRING && object->sector[0] == 0) {",
          "363:   object->sector++; //real sector starts +1",
          "364:   if (object->length > 0)",
          "365:    object->length--;",
          "366:  }",
          "367:  if (object->length > length) {",
          "369:   free (object);",
          "370:   return NULL;",
          "371:  }",
          "372:  return object;",
          "373: }",
          "375: ut32 r_asn1_count_objects (const ut8 *buffer, ut32 length) {",
          "376:  ut32 counter;",
          "377:  RASN1Object *object;",
          "378:  const ut8 *next, *end;",
          "379:  if (!buffer || !length) {",
          "380:   return 0;",
          "381:  }",
          "382:  counter = 0;",
          "383:  object = NULL;",
          "384:  next = buffer;",
          "385:  end = buffer + length;",
          "386:  while (next >= buffer && next < end) {",
          "387:   object = asn1_parse_header (next, end - next);",
          "388:   if (!object || next == object->sector) {",
          "390:    break;",
          "391:   }",
          "392:   next = object->sector + object->length;",
          "393:   counter++;",
          "394:   free (object);",
          "395:   object = NULL;",
          "396:  }",
          "397:  if (object) {",
          "398:   free (object);",
          "399:  }",
          "400:  return counter;",
          "401: }",
          "403: RASN1Object *r_asn1_create_object (const ut8 *buffer, ut32 length) {",
          "404:  RASN1Object *object = asn1_parse_header (buffer, length);",
          "405:  if (object && (object->form == FORM_CONSTRUCTED || object->tag == TAG_BITSTRING || object->tag == TAG_OCTETSTRING)) {",
          "406:   ut32 i, count;",
          "407:   RASN1Object *inner;",
          "408:   const ut8 *next = object->sector;",
          "409:   const ut8 *end = next + object->length;",
          "410:   count = r_asn1_count_objects (object->sector, object->length);",
          "411:   inner = NULL;",
          "412:   object->list.length = count;",
          "413:   if (count == 0) {",
          "414:    object->list.objects = NULL;",
          "415:   } else {",
          "416:    object->list.objects = (RASN1Object**) calloc (count, sizeof (RASN1Object*));",
          "417:    if (!object->list.objects) {",
          "418:     free (object);",
          "419:     return NULL;",
          "420:    }",
          "421:    memset (object->list.objects, 0, count * sizeof (RASN1Object*));",
          "422:    for (i = 0; next >= buffer && next < end && i < count; ++i) {",
          "423:     inner = r_asn1_create_object (next, end - next);",
          "424:     if (!inner || next == inner->sector) {",
          "426:      break;",
          "427:     }",
          "428:     next = inner->sector + inner->length;",
          "429:     object->list.objects[i] = inner;",
          "430:     inner = NULL;",
          "431:    }",
          "432:    if (inner) {",
          "433:     free (inner);",
          "434:    }",
          "435:   }",
          "436:  }",
          "437:  return object;",
          "438: }",
          "440: void r_asn1_free_object (RASN1Object *object) {",
          "441:  ut32 i;",
          "442:  if (object) {",
          "444:   object->sector = 0;",
          "445:   if (object->list.objects && object->list.length) {",
          "446:    for (i = 0; i < object->list.length; ++i) {",
          "447:     if (object->list.objects[i]) {",
          "448:      r_asn1_free_object (object->list.objects[i]);",
          "449:     }",
          "450:     object->list.objects[i] = NULL;",
          "451:    }",
          "452:    free (object->list.objects);",
          "453:    object->list.objects = NULL;",
          "454:   }",
          "455:   free (object);",
          "456:  }",
          "457: }",
          "459: void r_asn1_free_string (RASN1String* str) {",
          "460:  if (str) {",
          "461:   if (str->allocated) {",
          "462:    free ((char*) str->string);",
          "463:   }",
          "464:   free (str);",
          "465:  }",
          "466: }",
          "468: RASN1String *asn1_stringify_tag (RASN1Object *object) {",
          "469:  if (!object) {",
          "470:   return NULL;",
          "471:  }",
          "472:  switch (object->tag) {",
          "473:  case TAG_EOC:",
          "474:   return r_asn1_create_string2 (\"EOC\", false);",
          "475:  case TAG_BOOLEAN:",
          "476:   return r_asn1_create_string2 (\"BOOLEAN\", false);",
          "477:  case TAG_INTEGER:",
          "478:   return r_asn1_create_string2 (\"INTEGER\", false);",
          "479:  case TAG_BITSTRING:",
          "480:   return r_asn1_create_string2 (\"BIT STRING\", false);",
          "481:  case TAG_OCTETSTRING:",
          "482:   return r_asn1_create_string2 (\"OCTET STRING\", false);",
          "483:  case TAG_NULL:",
          "484:   return r_asn1_create_string2 (\"NULL\", false);",
          "485:  case TAG_OID:",
          "486:   return r_asn1_create_string2 (\"OBJECT IDENTIFIER\", false);",
          "487:  case TAG_OBJDESCRIPTOR:",
          "488:   return r_asn1_create_string2 (\"ObjectDescriptor\", false);",
          "489:  case TAG_EXTERNAL:",
          "490:   return r_asn1_create_string2 (\"EXTERNAL\", false);",
          "491:  case TAG_REAL:",
          "492:   return r_asn1_create_string2 (\"REAL\", false);",
          "493:  case TAG_ENUMERATED:",
          "494:   return r_asn1_create_string2 (\"ENUMERATED\", false);",
          "495:  case TAG_EMBEDDED_PDV:",
          "496:   return r_asn1_create_string2 (\"EMBEDDED PDV\", false);",
          "497:  case TAG_UTF8STRING:",
          "498:   return r_asn1_create_string2 (\"UTF8String\", false);",
          "499:  case TAG_SEQUENCE:",
          "500:   return r_asn1_create_string2 (\"SEQUENCE\", false);",
          "501:  case TAG_SET:",
          "502:   return r_asn1_create_string2 (\"SET\", false);",
          "503:  case TAG_NUMERICSTRING:",
          "504:   return r_asn1_create_string2 (\"NumericString\", false);",
          "505:  case TAG_PRINTABLESTRING:",
          "506:   return r_asn1_create_string2 (\"PrintableString\", false);",
          "507:  case TAG_T61STRING:",
          "508:   return r_asn1_create_string2 (\"TeletexString\", false);",
          "509:  case TAG_VIDEOTEXSTRING:",
          "510:   return r_asn1_create_string2 (\"VideotexString\", false);",
          "511:  case TAG_IA5STRING:",
          "512:   return r_asn1_create_string2 (\"IA5String\", false);",
          "513:  case TAG_UTCTIME:",
          "514:   return r_asn1_create_string2 (\"UTCTime\", false);",
          "515:  case TAG_GENERALIZEDTIME:",
          "516:   return r_asn1_create_string2 (\"GeneralizedTime\", false);",
          "517:  case TAG_GRAPHICSTRING:",
          "518:   return r_asn1_create_string2 (\"GraphicString\", false);",
          "519:  case TAG_VISIBLESTRING:",
          "520:   return r_asn1_create_string2 (\"VisibleString\", false);",
          "521:  case TAG_GENERALSTRING:",
          "522:   return r_asn1_create_string2 (\"GeneralString\", false);",
          "523:  case TAG_UNIVERSALSTRING:",
          "524:   return r_asn1_create_string2 (\"UniversalString\", false);",
          "525:  case TAG_BMPSTRING:",
          "526:   return r_asn1_create_string2 (\"BMPString\", false);",
          "527:  }",
          "528:  return r_asn1_create_string2 (\"Unknown tag\", false);",
          "529: }",
          "531: RASN1String *asn1_stringify_sector (RASN1Object *object) {",
          "532:  if (!object) {",
          "533:   return NULL;",
          "534:  }",
          "535:  switch (object->tag) {",
          "536:  case TAG_EOC:",
          "537:   return NULL;",
          "538:  case TAG_BOOLEAN:",
          "539:   return r_asn1_create_string2 (object->sector[0] == 0 ? \"false\" : \"true\", false);",
          "540:  case TAG_REAL:",
          "541:  case TAG_INTEGER:",
          "542:   if (object->length < 16) {",
          "543:    return r_asn1_stringify_integer (object->sector, object->length);",
          "544:   } else {",
          "545:    return r_asn1_stringify_bytes (object->sector, object->length);",
          "546:   }",
          "547:  case TAG_BITSTRING:",
          "549:   return r_asn1_stringify_bits (object->sector, object->length);",
          "553:  case TAG_OCTETSTRING:",
          "554:   return r_asn1_stringify_bytes (object->sector, object->length);",
          "555:  case TAG_NULL:",
          "556:   return NULL;",
          "557:  case TAG_OID:",
          "558:   return r_asn1_stringify_oid (object->sector, object->length);",
          "563:  case TAG_UTF8STRING:",
          "566:  case TAG_NUMERICSTRING:",
          "567:  case TAG_PRINTABLESTRING:",
          "570:  case TAG_IA5STRING:",
          "571:  case TAG_VISIBLESTRING:",
          "572:   return r_asn1_stringify_string (object->sector, object->length);",
          "573:  case TAG_UTCTIME:",
          "574:   return r_asn1_stringify_utctime (object->sector, object->length);",
          "575:  case TAG_GENERALIZEDTIME:",
          "576:   return r_asn1_stringify_time (object->sector, object->length);",
          "581:  }",
          "582:  return NULL;",
          "583: }",
          "",
          "---------------"
        ],
        "libr/util/r_pkcs7.c||libr/util/r_pkcs7.c": [
          "File: libr/util/r_pkcs7.c -> libr/util/r_pkcs7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #include <stdlib.h>",
          "2: #include <string.h>",
          "3: #include <r_util.h>",
          "4: #include \"r_x509_internal.h\"",
          "5: #include \"r_pkcs7_internal.h\"",
          "7: bool r_pkcs7_parse_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls, RASN1Object *object) {",
          "8:  ut32 i;",
          "9:  if (!crls && !object) {",
          "10:   return false;",
          "11:  }",
          "12:  if (object->list.length > 0) {",
          "13:   crls->elements = (RX509CertificateRevocationList **) calloc (object->list.length, sizeof (RX509CertificateRevocationList*));",
          "14:   if (!crls->elements) {",
          "15:    return false;",
          "16:   }",
          "17:   crls->length = object->list.length;",
          "18:   for (i = 0; i < crls->length; ++i) {",
          "19:    crls->elements[i] = r_x509_parse_crl (object->list.objects[i]);",
          "20:   }",
          "21:  }",
          "22:  return true;",
          "23: }",
          "25: void r_pkcs7_free_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls) {",
          "26:  ut32 i;",
          "27:  if (crls) {",
          "28:   for (i = 0; i < crls->length; ++i) {",
          "29:    r_x509_free_crl (crls->elements[i]);",
          "30:    crls->elements[i] = NULL;",
          "31:   }",
          "32:   free (crls->elements);",
          "33:   crls->elements = NULL;",
          "35:  }",
          "36: }",
          "38: bool r_pkcs7_parse_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac, RASN1Object *object) {",
          "39:  ut32 i;",
          "40:  if (!ecac && !object) {",
          "41:   return false;",
          "42:  }",
          "43:  if (object->list.length > 0) {",
          "44:   ecac->elements = (RX509Certificate **) calloc (object->list.length, sizeof (RX509Certificate*));",
          "45:   if (!ecac->elements) {",
          "46:    return false;",
          "47:   }",
          "48:   ecac->length = object->list.length;",
          "49:   for (i = 0; i < ecac->length; ++i) {",
          "50:    ecac->elements[i] = r_x509_parse_certificate (object->list.objects[i]);",
          "51:   }",
          "52:  }",
          "53:  return true;",
          "54: }",
          "56: void r_pkcs7_free_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac) {",
          "57:  ut32 i;",
          "58:  if (ecac) {",
          "59:   for (i = 0; i < ecac->length; ++i) {",
          "60:    r_x509_free_certificate (ecac->elements[i]);",
          "61:    ecac->elements[i] = NULL;",
          "62:   }",
          "63:   free (ecac->elements);",
          "64:   ecac->elements = NULL;",
          "66:  }",
          "67: }",
          "69: bool r_pkcs7_parse_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai, RASN1Object *object) {",
          "70:  ut32 i;",
          "71:  if (!dai && !object) {",
          "72:   return false;",
          "73:  }",
          "74:  if (object->list.length > 0) {",
          "75:   dai->elements = (RX509AlgorithmIdentifier **) calloc (object->list.length, sizeof (RX509AlgorithmIdentifier*));",
          "76:   if (!dai->elements) {",
          "77:    return false;",
          "78:   }",
          "79:   dai->length = object->list.length;",
          "80:   for (i = 0; i < dai->length; ++i) {",
          "83:    dai->elements[i] = (RX509AlgorithmIdentifier *) malloc (sizeof (RX509AlgorithmIdentifier));",
          "86:    if (dai->elements[i]) {",
          "88:     memset (dai->elements[i], 0, sizeof (RX509AlgorithmIdentifier));",
          "89:     r_x509_parse_algorithmidentifier (dai->elements[i], object->list.objects[i]);",
          "90:    }",
          "91:   }",
          "92:  }",
          "93:  return true;",
          "94: }",
          "96: void r_pkcs7_free_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai) {",
          "97:  ut32 i;",
          "98:  if (dai) {",
          "99:   for (i = 0; i < dai->length; ++i) {",
          "100:    if (dai->elements[i]) {",
          "101:     r_x509_free_algorithmidentifier (dai->elements[i]);",
          "104:     free (dai->elements[i]);",
          "105:     dai->elements[i] = NULL;",
          "106:    }",
          "107:   }",
          "108:   free (dai->elements);",
          "109:   dai->elements = NULL;",
          "111:  }",
          "112: }",
          "114: bool r_pkcs7_parse_contentinfo (RPKCS7ContentInfo* ci, RASN1Object *object) {",
          "115:  if (!ci || !object || object->list.length < 1) {",
          "116:   return false;",
          "117:  }",
          "119:  ci->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "120:  if (object->list.length == 2) {",
          "121:   ci->content = object->list.objects[1];",
          "122:   object->list.objects[1] = NULL;",
          "123:  }",
          "125:  return true;",
          "126: }",
          "128: void r_pkcs7_free_contentinfo (RPKCS7ContentInfo* ci) {",
          "129:  if (ci) {",
          "130:   r_asn1_free_object (ci->content);",
          "131:   r_asn1_free_string (ci->contentType);",
          "133:  }",
          "134: }",
          "136: bool r_pkcs7_parse_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu, RASN1Object *object) {",
          "137:  if (!iasu || !object || object->list.length != 2) {",
          "138:   return false;",
          "139:  }",
          "141:  r_x509_parse_name (&iasu->issuer, object->list.objects[0]);",
          "142:  iasu->serialNumber = object->list.objects[1];",
          "143:  object->list.objects[1] = NULL;",
          "145:  return true;",
          "146: }",
          "148: void r_pkcs7_free_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu) {",
          "149:  if (iasu) {",
          "150:   r_x509_free_name (&iasu->issuer);",
          "151:   r_asn1_free_object (iasu->serialNumber);",
          "153:  }",
          "154: }",
          "157:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "158:  RASN1Object *encryptedDigest;",
          "159:  RASN1Object *unauthenticatedAttributes; //Optional type ??",
          "160: } RPKCS7SignerInfo;",
          "163: bool r_pkcs7_parse_signerinfo (RPKCS7SignerInfo* si, RASN1Object *object) {",
          "164:  RASN1Object **elems;",
          "165:  ut32 shift = 3;",
          "166:  if (!si || !object || object->list.length < 5) {",
          "167:   return false;",
          "168:  }",
          "169:  elems = object->list.objects;",
          "171:  si->version = (ut32) elems[0]->sector[0];",
          "172:  r_pkcs7_parse_issuerandserialnumber (&si->issuerAndSerialNumber, elems[1]);",
          "173:  r_x509_parse_algorithmidentifier (&si->digestAlgorithm, elems[2]);",
          "174:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "175:   r_pkcs7_parse_attributes (&si->authenticatedAttributes, elems[shift]);",
          "176:   shift++;",
          "177:  }",
          "178:  if (shift < object->list.length) {",
          "179:   r_x509_parse_algorithmidentifier (&si->digestEncryptionAlgorithm, elems[shift]);",
          "180:   shift++;",
          "181:  }",
          "182:  if (shift < object->list.length) {",
          "183:   si->encryptedDigest = elems[shift];",
          "184:   elems[shift] = NULL;",
          "185:   shift++;",
          "186:  }",
          "187:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "188:   r_pkcs7_parse_attributes (&si->unauthenticatedAttributes, elems[shift]);",
          "189:  }",
          "190:  return true;",
          "191: }",
          "193: void r_pkcs7_free_signerinfo (RPKCS7SignerInfo* si) {",
          "194:  if (si) {",
          "195:   r_pkcs7_free_issuerandserialnumber (&si->issuerAndSerialNumber);",
          "196:   r_x509_free_algorithmidentifier (&si->digestAlgorithm);",
          "197:   r_pkcs7_free_attributes (&si->authenticatedAttributes);",
          "198:   r_x509_free_algorithmidentifier (&si->digestEncryptionAlgorithm);",
          "199:   r_asn1_free_object (si->encryptedDigest);",
          "200:   r_pkcs7_free_attributes (&si->unauthenticatedAttributes);",
          "201:   free (si);",
          "202:  }",
          "203: }",
          "205: bool r_pkcs7_parse_signerinfos (RPKCS7SignerInfos *ss, RASN1Object *object) {",
          "206:  ut32 i;",
          "207:  if (!ss && !object) {",
          "208:   return false;",
          "209:  }",
          "210:  if (object->list.length > 0) {",
          "211:   ss->elements = (RPKCS7SignerInfo **) calloc (object->list.length, sizeof (RPKCS7SignerInfo*));",
          "212:   if (!ss->elements) {",
          "213:    return false;",
          "214:   }",
          "215:   ss->length = object->list.length;",
          "216:   for (i = 0; i < ss->length; ++i) {",
          "219:    ss->elements[i] = (RPKCS7SignerInfo *) malloc (sizeof (RPKCS7SignerInfo));",
          "222:    if (ss->elements[i]) {",
          "224:     memset (ss->elements[i], 0, sizeof (RPKCS7SignerInfo));",
          "225:     r_pkcs7_parse_signerinfo (ss->elements[i], object->list.objects[i]);",
          "226:    }",
          "227:   }",
          "228:  }",
          "229:  return true;",
          "230: }",
          "232: void r_pkcs7_free_signerinfos (RPKCS7SignerInfos *ss) {",
          "233:  ut32 i;",
          "234:  if (ss) {",
          "235:   for (i = 0; i < ss->length; ++i) {",
          "236:    r_pkcs7_free_signerinfo (ss->elements[i]);",
          "238:    free (ss->elements[i]);",
          "239:    ss->elements[i] = NULL;",
          "240:   }",
          "241:   free (ss->elements);",
          "242:   ss->elements = NULL;",
          "244:  }",
          "245: }",
          "247: bool r_pkcs7_parse_signeddata (RPKCS7SignedData *sd, RASN1Object *object) {",
          "248:  RASN1Object **elems;",
          "249:  ut32 shift = 3;",
          "250:  if (!sd || !object || object->list.length < 4) {",
          "251:   return false;",
          "252:  }",
          "253:  memset (sd, 0, sizeof (RPKCS7SignedData));",
          "254:  elems = object->list.objects;",
          "256:  sd->version = (ut32) elems[0]->sector[0];",
          "257:  r_pkcs7_parse_digestalgorithmidentifier (&sd->digestAlgorithms, elems[1]);",
          "258:  r_pkcs7_parse_contentinfo (&sd->contentInfo, elems[2]);",
          "260:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "261:   r_pkcs7_parse_extendedcertificatesandcertificates (&sd->certificates, elems[shift]);",
          "262:   shift++;",
          "263:  }",
          "265:  if (shift < object->list.length && elems[shift]->class == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "266:   r_pkcs7_parse_certificaterevocationlists (&sd->crls, elems[shift]);",
          "267:   shift++;",
          "268:  }",
          "269:  if (shift < object->list.length)",
          "270:   r_pkcs7_parse_signerinfos (&sd->signerinfos, elems[shift]);",
          "271:  return true;",
          "272: }",
          "274: void r_pkcs7_free_signeddata (RPKCS7SignedData* sd) {",
          "275:  if (sd) {",
          "276:   r_pkcs7_free_digestalgorithmidentifier (&sd->digestAlgorithms);",
          "277:   r_pkcs7_free_contentinfo (&sd->contentInfo);",
          "278:   r_pkcs7_free_extendedcertificatesandcertificates (&sd->certificates);",
          "279:   r_pkcs7_free_certificaterevocationlists (&sd->crls);",
          "281:  }",
          "282: }",
          "284: RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length) {",
          "285:  RASN1Object *object;",
          "286:  RPKCS7Container *container;",
          "287:  if (!buffer || !length) {",
          "288:   return NULL;",
          "289:  }",
          "290:  container = (RPKCS7Container*) malloc (sizeof (RPKCS7Container));",
          "291:  if (!container) {",
          "292:   return NULL;",
          "293:  }",
          "294:  memset (container, 0, sizeof (RPKCS7Container));",
          "295:  object = r_asn1_create_object (buffer, length);",
          "296:  if (!object || object->list.length != 2 || object->list.objects[1]->list.length != 1) {",
          "297:   free (container);",
          "298:   return NULL;",
          "299:  }",
          "300:  container->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "301:  r_pkcs7_parse_signeddata (&container->signedData, object->list.objects[1]->list.objects[0]);",
          "302:  r_asn1_free_object (object);",
          "303:  return container;",
          "304: }",
          "306: void r_pkcs7_free_container (RPKCS7Container* container) {",
          "307:  if (container) {",
          "308:   r_asn1_free_string (container->contentType);",
          "309:   r_pkcs7_free_signeddata (&container->signedData);",
          "310:   free (container);",
          "311:  }",
          "312: }",
          "314: RPKCS7Attribute* r_pkcs7_parse_attribute (RASN1Object *object) {",
          "315:  RPKCS7Attribute* attribute;",
          "316:  if (!object || object->list.length < 1) {",
          "317:   return NULL;",
          "318:  }",
          "319:  attribute = (RPKCS7Attribute*) malloc (sizeof (RPKCS7Attribute));",
          "320:  if (!attribute) {",
          "321:   return NULL;",
          "322:  }",
          "323:  memset (attribute, 0, sizeof (RPKCS7Attribute));",
          "324:  attribute->oid = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "325:  if (object->list.length == 2) {",
          "326:   attribute->data = object->list.objects[1];",
          "327:   object->list.objects[1] = NULL;",
          "328:  }",
          "330:  return attribute;",
          "331: }",
          "333: void r_pkcs7_free_attribute (RPKCS7Attribute* attribute) {",
          "334:  if (attribute) {",
          "335:   r_asn1_free_object (attribute->data);",
          "336:   r_asn1_free_string (attribute->oid);",
          "337:   free (attribute);",
          "338:  }",
          "339: }",
          "341: bool r_pkcs7_parse_attributes (RPKCS7Attributes* attributes, RASN1Object *object) {",
          "342:  ut32 i;",
          "343:  if (!attributes || !object || !object->list.length) {",
          "344:   return false;",
          "345:  }",
          "347:  attributes->length = object->list.length;",
          "348:  if (attributes->length > 0) {",
          "349:   attributes->elements = (RPKCS7Attribute**) calloc (attributes->length, sizeof (RPKCS7Attribute*));",
          "350:   if (!attributes->elements) {",
          "351:    attributes->length = 0;",
          "352:    return false;",
          "353:   }",
          "354:   memset (attributes->elements, 0, attributes->length * sizeof (RPKCS7Attribute*));",
          "356:   for (i = 0; i < object->list.length; ++i) {",
          "357:    attributes->elements[i] = r_pkcs7_parse_attribute (object->list.objects[i]);",
          "358:   }",
          "359:  }",
          "360:  return true;",
          "361: }",
          "363: void r_pkcs7_free_attributes (RPKCS7Attributes* attributes) {",
          "364:  ut32 i;",
          "365:  if (attributes) {",
          "366:   for (i = 0; i < attributes->length; ++i) {",
          "367:    r_pkcs7_free_attribute (attributes->elements[i]);",
          "368:   }",
          "369:   free (attributes->elements);",
          "370:   attributes->elements = NULL;",
          "372:  }",
          "373: }",
          "375: char* r_pkcs7_signerinfos_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "376:  RASN1String *algo, *last, *next;",
          "377:  ut32 i, p;",
          "378:  int r;",
          "379:  char *tmp, *pad2, *pad3;",
          "380:  if (!crl || !buffer || !length) {",
          "381:   return NULL;",
          "382:  }",
          "383:  if (!pad) {",
          "384:   pad = \"\";",
          "385:  }",
          "386:  pad3 = r_str_newf (\"%s    \", pad);",
          "387:  if (!pad3) return NULL;",
          "389:  pad2 = pad3 + 2;",
          "390:  algo = crl->signature.algorithm;",
          "391:  last = crl->lastUpdate;",
          "392:  next = crl->nextUpdate;",
          "393:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "394:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "395:  p = (unsigned) r;",
          "396:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "397:   free (pad3);",
          "398:   return NULL;",
          "399:  }",
          "400:  p = tmp - buffer;",
          "401:  if (length <= p) {",
          "402:   free (pad3);",
          "403:   return NULL;",
          "404:  }",
          "405:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "406:     pad2, last ? last->string : \"Missing\",",
          "407:     pad2, next ? next->string : \"Missing\", pad2);",
          "408:  p += (unsigned) r;",
          "409:  if (r < 0) {",
          "410:   free (pad3);",
          "411:   return NULL;",
          "412:  }",
          "413:  for (i = 0; i < crl->length; ++i) {",
          "414:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "415:    free (pad3);",
          "416:    return NULL;",
          "417:   }",
          "418:   p = tmp - buffer;",
          "419:  }",
          "421:  free (pad3);",
          "422:  return buffer + p;",
          "423: }",
          "425: char* r_x509_signedinfo_dump (RPKCS7SignerInfo *si, char* buffer, ut32 length, const char* pad) {",
          "426:  RASN1String *s;",
          "427:  RASN1Object *o;",
          "428:  ut32 i, p;",
          "429:  int r;",
          "430:  char *tmp, *pad2, *pad3;",
          "431:  if (!si || !buffer || !length) {",
          "432:   return NULL;",
          "433:  }",
          "434:  if (!pad) {",
          "435:   pad = \"\";",
          "436:  }",
          "437:  pad3 = r_str_newf (\"%s    \", pad);",
          "438:  if (!pad3) return NULL;",
          "439:  pad2 = pad3 + 2;",
          "442:  r = snprintf (buffer, length, \"%sSignerInfo:\\n%sVersion: v%u\\n%sIssuer\\n\", pad, pad2, si->version + 1, pad2);",
          "443:  p = (unsigned) r;",
          "444:  if (r < 0) {",
          "445:   free (pad3);",
          "446:   return NULL;",
          "447:  }",
          "449:  if (length <= p || !(tmp = r_x509_name_dump (&si->issuerAndSerialNumber.issuer, buffer + p, length - p, pad3))) {",
          "450:   free (pad3);",
          "451:   return NULL;",
          "452:  }",
          "453:  p = tmp - buffer;",
          "454:  if ((o = si->issuerAndSerialNumber.serialNumber)) {",
          "455:   s = r_asn1_stringify_integer (o->sector, o->length);",
          "456:  } else {",
          "457:   s = NULL;",
          "458:  }",
          "459:  r = snprintf (buffer + p, length - p, \"%sSerial Number:\\n%s%s\\n\", pad2, pad3, s ? s->string : \"Missing\");",
          "460:  p += (unsigned) r;",
          "461:  r_asn1_free_string (s);",
          "462:  if (r < 0) {",
          "463:   free (pad3);",
          "464:   return NULL;",
          "465:  }",
          "467:  s = si->digestAlgorithm.algorithm;",
          "468:  r = snprintf (buffer + p, length - p, \"%sDigest Algorithm:\\n%s%s\\n%sAuthenticated Attributes:\\n\",",
          "469:     pad2, pad3, s ? s->string : \"Missing\", pad2);",
          "470:  p += (unsigned) r;",
          "471:  if (r < 0) {",
          "472:   free (pad3);",
          "473:   return NULL;",
          "474:  }",
          "475:  for (i = 0; i < si->authenticatedAttributes.length; ++i) {",
          "476:   RPKCS7Attribute* attr = si->authenticatedAttributes.elements[i];",
          "477:   if (!attr) continue;",
          "478:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "479:      pad3, attr->oid ? attr->oid->string : \"Missing\", attr->data ? attr->data->length : 0);",
          "480:   p += (unsigned) r;",
          "481:   if (r < 0) {",
          "482:    free (pad3);",
          "483:    return NULL;",
          "484:   }",
          "485:  }",
          "486:  s = si->digestEncryptionAlgorithm.algorithm;",
          "487:  r = snprintf (buffer + p, length - p, \"%sDigest Encryption Algorithm\\n%s%s\\n\",",
          "488:     pad2, pad3, s ? s->string : \"Missing\");",
          "489:  p += (unsigned) r;",
          "490:  if (r < 0) {",
          "491:   free (pad3);",
          "492:   return NULL;",
          "493:  }",
          "495:  if ((o = si->encryptedDigest)) s = r_asn1_stringify_bytes (o->sector, o->length);",
          "496:  else s = NULL;",
          "497:  r = snprintf (buffer + p, length - p, \"%sEncrypted Digest: %u bytes\\n%s\\n\", pad2, o ? o->length : 0, s ? s->string : \"Missing\");",
          "498:  p += (unsigned) r;",
          "499:  r_asn1_free_string (s);",
          "500:  if (r < 0) {",
          "501:   free (pad3);",
          "502:   return NULL;",
          "503:  }",
          "504:  r = snprintf (buffer + p, length - p, \"%sUnauthenticated Attributes:\\n\", pad2);",
          "505:  p += (unsigned) r;",
          "506:  if (r < 0) {",
          "507:   free (pad3);",
          "508:   return NULL;",
          "509:  }",
          "510:  for (i = 0; i < si->unauthenticatedAttributes.length; ++i) {",
          "511:   RPKCS7Attribute* attr = si->unauthenticatedAttributes.elements[i];",
          "512:   if (!attr) continue;",
          "513:   o = attr->data;",
          "514:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "515:      pad3, attr->oid ? attr->oid->string : \"Missing\", o ? o->length : 0);",
          "516:   p += (unsigned) r;",
          "517:   if (r < 0) {",
          "518:    free (pad3);",
          "519:    return NULL;",
          "520:   }",
          "521:  }",
          "522:  return buffer + p;",
          "523: }",
          "525: char *r_pkcs7_container_dump (RPKCS7Container* container) {",
          "526:  RPKCS7SignedData *sd;",
          "527:  ut32 i, length, p;",
          "528:  int r;",
          "529:  char *buffer, *tmp = NULL;",
          "530:  if (!container) {",
          "531:   return NULL;",
          "532:  }",
          "533:  sd = &container->signedData;",
          "534:  p = 0;",
          "535:  length = 1024 + (container->signedData.certificates.length * 4096);",
          "536:  buffer = (char*) malloc (length);",
          "537:  if (!buffer) return NULL;",
          "538:  memset (buffer, 0, length);",
          "539:  r = snprintf (buffer, length, \"signedData\\n  Version: %u\\n  Digest Algorithms:\\n\", sd->version);",
          "540:  p += (unsigned) r;",
          "541:  if (r < 0) {",
          "542:   free (buffer);",
          "543:   return NULL;",
          "544:  }",
          "545:  if (container->signedData.digestAlgorithms.elements) {",
          "546:   for (i = 0; i < container->signedData.digestAlgorithms.length; ++i) {",
          "547:    if (container->signedData.digestAlgorithms.elements[i]) {",
          "548:     r = snprintf (buffer + p, length - p, \"    %s\\n\", container->signedData.digestAlgorithms.elements[i]->algorithm->string);",
          "549:     p += (unsigned) r;",
          "550:     if (r < 0 || length <= p) {",
          "551:      free (buffer);",
          "552:      return NULL;",
          "553:     }",
          "554:    }",
          "555:   }",
          "556:  }",
          "557:  r = snprintf (buffer + p, length - p, \"  Certificates: %u\\n\", container->signedData.certificates.length);",
          "558:  p += (unsigned) r;",
          "559:  if (r < 0 || length <= p) {",
          "560:   free (buffer);",
          "561:   return NULL;",
          "562:  }",
          "563:  for (i = 0; i < container->signedData.certificates.length; ++i) {",
          "564:   if (length <= p || !(tmp = r_x509_certificate_dump (container->signedData.certificates.elements[i], buffer + p, length - p, \"    \"))) {",
          "565:    free (buffer);",
          "566:    return NULL;",
          "567:   }",
          "568:   p = tmp - buffer;",
          "569:  }",
          "571:  for (i = 0; i < container->signedData.crls.length; ++i) {",
          "572:   if (length <= p || !(tmp = r_x509_crl_dump (container->signedData.crls.elements[i], buffer + p, length - p, \"    \"))) {",
          "573:    free (buffer);",
          "574:    return NULL;",
          "575:   }",
          "576:   p = tmp - buffer;",
          "577:  }",
          "578:  p = tmp - buffer;",
          "579:  r = snprintf (buffer + p, length - p, \"  SignerInfos:\\n\");",
          "580:  p += (unsigned) r;",
          "581:  if (r < 0 || length <= p) {",
          "582:   free (buffer);",
          "583:   return NULL;",
          "584:  }",
          "585:  if (container->signedData.signerinfos.elements) {",
          "586:   for (i = 0; i < container->signedData.signerinfos.length; ++i) {",
          "587:    if (length <= p || !(tmp = r_x509_signedinfo_dump (container->signedData.signerinfos.elements[i], buffer + p, length - p, \"    \"))) {",
          "588:     free (buffer);",
          "589:     return NULL;",
          "590:    }",
          "591:    p = tmp - buffer;",
          "592:   }",
          "593:  }",
          "594:  return buffer;",
          "595: }",
          "",
          "[Added Lines]",
          "3: #include <stdlib.h>",
          "4: #include <string.h>",
          "5: #include <r_util.h>",
          "6: #include \"r_x509_internal.h\"",
          "7: #include \"r_pkcs7_internal.h\"",
          "9: bool r_pkcs7_parse_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls, RASN1Object *object) {",
          "10:  ut32 i;",
          "11:  if (!crls && !object) {",
          "12:   return false;",
          "13:  }",
          "14:  if (object->list.length > 0) {",
          "15:   crls->elements = (RX509CertificateRevocationList **) calloc (object->list.length, sizeof (RX509CertificateRevocationList*));",
          "16:   if (!crls->elements) {",
          "17:    return false;",
          "18:   }",
          "19:   crls->length = object->list.length;",
          "20:   for (i = 0; i < crls->length; ++i) {",
          "21:    crls->elements[i] = r_x509_parse_crl (object->list.objects[i]);",
          "22:   }",
          "23:  }",
          "24:  return true;",
          "25: }",
          "27: void r_pkcs7_free_certificaterevocationlists (RPKCS7CertificateRevocationLists *crls) {",
          "28:  ut32 i;",
          "29:  if (crls) {",
          "30:   for (i = 0; i < crls->length; ++i) {",
          "31:    r_x509_free_crl (crls->elements[i]);",
          "32:    crls->elements[i] = NULL;",
          "33:   }",
          "34:   free (crls->elements);",
          "35:   crls->elements = NULL;",
          "37:  }",
          "38: }",
          "40: bool r_pkcs7_parse_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac, RASN1Object *object) {",
          "41:  ut32 i;",
          "42:  if (!ecac && !object) {",
          "43:   return false;",
          "44:  }",
          "45:  if (object->list.length > 0) {",
          "46:   ecac->elements = (RX509Certificate **) calloc (object->list.length, sizeof (RX509Certificate*));",
          "47:   if (!ecac->elements) {",
          "48:    return false;",
          "49:   }",
          "50:   ecac->length = object->list.length;",
          "51:   for (i = 0; i < ecac->length; ++i) {",
          "52:    ecac->elements[i] = r_x509_parse_certificate (object->list.objects[i]);",
          "53:   }",
          "54:  }",
          "55:  return true;",
          "56: }",
          "58: void r_pkcs7_free_extendedcertificatesandcertificates (RPKCS7ExtendedCertificatesAndCertificates *ecac) {",
          "59:  ut32 i;",
          "60:  if (ecac) {",
          "61:   for (i = 0; i < ecac->length; ++i) {",
          "62:    r_x509_free_certificate (ecac->elements[i]);",
          "63:    ecac->elements[i] = NULL;",
          "64:   }",
          "65:   free (ecac->elements);",
          "66:   ecac->elements = NULL;",
          "68:  }",
          "69: }",
          "71: bool r_pkcs7_parse_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai, RASN1Object *object) {",
          "72:  ut32 i;",
          "73:  if (!dai && !object) {",
          "74:   return false;",
          "75:  }",
          "76:  if (object->list.length > 0) {",
          "77:   dai->elements = (RX509AlgorithmIdentifier **) calloc (object->list.length, sizeof (RX509AlgorithmIdentifier*));",
          "78:   if (!dai->elements) {",
          "79:    return false;",
          "80:   }",
          "81:   dai->length = object->list.length;",
          "82:   for (i = 0; i < dai->length; ++i) {",
          "85:    dai->elements[i] = (RX509AlgorithmIdentifier *) malloc (sizeof (RX509AlgorithmIdentifier));",
          "88:    if (dai->elements[i]) {",
          "90:     memset (dai->elements[i], 0, sizeof (RX509AlgorithmIdentifier));",
          "91:     r_x509_parse_algorithmidentifier (dai->elements[i], object->list.objects[i]);",
          "92:    }",
          "93:   }",
          "94:  }",
          "95:  return true;",
          "96: }",
          "98: void r_pkcs7_free_digestalgorithmidentifier (RPKCS7DigestAlgorithmIdentifiers *dai) {",
          "99:  ut32 i;",
          "100:  if (dai) {",
          "101:   for (i = 0; i < dai->length; ++i) {",
          "102:    if (dai->elements[i]) {",
          "103:     r_x509_free_algorithmidentifier (dai->elements[i]);",
          "106:     free (dai->elements[i]);",
          "107:     dai->elements[i] = NULL;",
          "108:    }",
          "109:   }",
          "110:   free (dai->elements);",
          "111:   dai->elements = NULL;",
          "113:  }",
          "114: }",
          "116: bool r_pkcs7_parse_contentinfo (RPKCS7ContentInfo* ci, RASN1Object *object) {",
          "117:  if (!ci || !object || object->list.length < 1) {",
          "118:   return false;",
          "119:  }",
          "121:  ci->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "122:  if (object->list.length == 2) {",
          "123:   ci->content = object->list.objects[1];",
          "124:   object->list.objects[1] = NULL;",
          "125:  }",
          "127:  return true;",
          "128: }",
          "130: void r_pkcs7_free_contentinfo (RPKCS7ContentInfo* ci) {",
          "131:  if (ci) {",
          "132:   r_asn1_free_object (ci->content);",
          "133:   r_asn1_free_string (ci->contentType);",
          "135:  }",
          "136: }",
          "138: bool r_pkcs7_parse_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu, RASN1Object *object) {",
          "139:  if (!iasu || !object || object->list.length != 2) {",
          "140:   return false;",
          "141:  }",
          "143:  r_x509_parse_name (&iasu->issuer, object->list.objects[0]);",
          "144:  iasu->serialNumber = object->list.objects[1];",
          "145:  object->list.objects[1] = NULL;",
          "147:  return true;",
          "148: }",
          "150: void r_pkcs7_free_issuerandserialnumber (RPKCS7IssuerAndSerialNumber* iasu) {",
          "151:  if (iasu) {",
          "152:   r_x509_free_name (&iasu->issuer);",
          "153:   r_asn1_free_object (iasu->serialNumber);",
          "155:  }",
          "156: }",
          "159:  RX509AlgorithmIdentifier digestEncryptionAlgorithm;",
          "160:  RASN1Object *encryptedDigest;",
          "161:  RASN1Object *unauthenticatedAttributes; //Optional type ??",
          "162: } RPKCS7SignerInfo;",
          "165: bool r_pkcs7_parse_signerinfo (RPKCS7SignerInfo* si, RASN1Object *object) {",
          "166:  RASN1Object **elems;",
          "167:  ut32 shift = 3;",
          "168:  if (!si || !object || object->list.length < 5) {",
          "169:   return false;",
          "170:  }",
          "171:  elems = object->list.objects;",
          "173:  si->version = (ut32) elems[0]->sector[0];",
          "174:  r_pkcs7_parse_issuerandserialnumber (&si->issuerAndSerialNumber, elems[1]);",
          "175:  r_x509_parse_algorithmidentifier (&si->digestAlgorithm, elems[2]);",
          "176:  if (shift < object->list.length && elems[shift]->klass == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "177:   r_pkcs7_parse_attributes (&si->authenticatedAttributes, elems[shift]);",
          "178:   shift++;",
          "179:  }",
          "180:  if (shift < object->list.length) {",
          "181:   r_x509_parse_algorithmidentifier (&si->digestEncryptionAlgorithm, elems[shift]);",
          "182:   shift++;",
          "183:  }",
          "184:  if (shift < object->list.length) {",
          "185:   si->encryptedDigest = elems[shift];",
          "186:   elems[shift] = NULL;",
          "187:   shift++;",
          "188:  }",
          "189:  if (shift < object->list.length && elems[shift]->klass == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "190:   r_pkcs7_parse_attributes (&si->unauthenticatedAttributes, elems[shift]);",
          "191:  }",
          "192:  return true;",
          "193: }",
          "195: void r_pkcs7_free_signerinfo (RPKCS7SignerInfo* si) {",
          "196:  if (si) {",
          "197:   r_pkcs7_free_issuerandserialnumber (&si->issuerAndSerialNumber);",
          "198:   r_x509_free_algorithmidentifier (&si->digestAlgorithm);",
          "199:   r_pkcs7_free_attributes (&si->authenticatedAttributes);",
          "200:   r_x509_free_algorithmidentifier (&si->digestEncryptionAlgorithm);",
          "201:   r_asn1_free_object (si->encryptedDigest);",
          "202:   r_pkcs7_free_attributes (&si->unauthenticatedAttributes);",
          "203:   free (si);",
          "204:  }",
          "205: }",
          "207: bool r_pkcs7_parse_signerinfos (RPKCS7SignerInfos *ss, RASN1Object *object) {",
          "208:  ut32 i;",
          "209:  if (!ss && !object) {",
          "210:   return false;",
          "211:  }",
          "212:  if (object->list.length > 0) {",
          "213:   ss->elements = (RPKCS7SignerInfo **) calloc (object->list.length, sizeof (RPKCS7SignerInfo*));",
          "214:   if (!ss->elements) {",
          "215:    return false;",
          "216:   }",
          "217:   ss->length = object->list.length;",
          "218:   for (i = 0; i < ss->length; ++i) {",
          "221:    ss->elements[i] = (RPKCS7SignerInfo *) malloc (sizeof (RPKCS7SignerInfo));",
          "224:    if (ss->elements[i]) {",
          "226:     memset (ss->elements[i], 0, sizeof (RPKCS7SignerInfo));",
          "227:     r_pkcs7_parse_signerinfo (ss->elements[i], object->list.objects[i]);",
          "228:    }",
          "229:   }",
          "230:  }",
          "231:  return true;",
          "232: }",
          "234: void r_pkcs7_free_signerinfos (RPKCS7SignerInfos *ss) {",
          "235:  ut32 i;",
          "236:  if (ss) {",
          "237:   for (i = 0; i < ss->length; ++i) {",
          "238:    r_pkcs7_free_signerinfo (ss->elements[i]);",
          "240:    free (ss->elements[i]);",
          "241:    ss->elements[i] = NULL;",
          "242:   }",
          "243:   free (ss->elements);",
          "244:   ss->elements = NULL;",
          "246:  }",
          "247: }",
          "249: bool r_pkcs7_parse_signeddata (RPKCS7SignedData *sd, RASN1Object *object) {",
          "250:  RASN1Object **elems;",
          "251:  ut32 shift = 3;",
          "252:  if (!sd || !object || object->list.length < 4) {",
          "253:   return false;",
          "254:  }",
          "255:  memset (sd, 0, sizeof (RPKCS7SignedData));",
          "256:  elems = object->list.objects;",
          "258:  sd->version = (ut32) elems[0]->sector[0];",
          "259:  r_pkcs7_parse_digestalgorithmidentifier (&sd->digestAlgorithms, elems[1]);",
          "260:  r_pkcs7_parse_contentinfo (&sd->contentInfo, elems[2]);",
          "262:  if (shift < object->list.length && elems[shift]->klass == CLASS_CONTEXT && elems[shift]->tag == 0) {",
          "263:   r_pkcs7_parse_extendedcertificatesandcertificates (&sd->certificates, elems[shift]);",
          "264:   shift++;",
          "265:  }",
          "267:  if (shift < object->list.length && elems[shift]->klass == CLASS_CONTEXT && elems[shift]->tag == 1) {",
          "268:   r_pkcs7_parse_certificaterevocationlists (&sd->crls, elems[shift]);",
          "269:   shift++;",
          "270:  }",
          "271:  if (shift < object->list.length)",
          "272:   r_pkcs7_parse_signerinfos (&sd->signerinfos, elems[shift]);",
          "273:  return true;",
          "274: }",
          "276: void r_pkcs7_free_signeddata (RPKCS7SignedData* sd) {",
          "277:  if (sd) {",
          "278:   r_pkcs7_free_digestalgorithmidentifier (&sd->digestAlgorithms);",
          "279:   r_pkcs7_free_contentinfo (&sd->contentInfo);",
          "280:   r_pkcs7_free_extendedcertificatesandcertificates (&sd->certificates);",
          "281:   r_pkcs7_free_certificaterevocationlists (&sd->crls);",
          "283:  }",
          "284: }",
          "286: RPKCS7Container *r_pkcs7_parse_container (const ut8 *buffer, ut32 length) {",
          "287:  RASN1Object *object;",
          "288:  RPKCS7Container *container;",
          "289:  if (!buffer || !length) {",
          "290:   return NULL;",
          "291:  }",
          "292:  container = (RPKCS7Container*) malloc (sizeof (RPKCS7Container));",
          "293:  if (!container) {",
          "294:   return NULL;",
          "295:  }",
          "296:  memset (container, 0, sizeof (RPKCS7Container));",
          "297:  object = r_asn1_create_object (buffer, length);",
          "298:  if (!object || object->list.length != 2 || object->list.objects[1]->list.length != 1) {",
          "299:   free (container);",
          "300:   return NULL;",
          "301:  }",
          "302:  container->contentType = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "303:  r_pkcs7_parse_signeddata (&container->signedData, object->list.objects[1]->list.objects[0]);",
          "304:  r_asn1_free_object (object);",
          "305:  return container;",
          "306: }",
          "308: void r_pkcs7_free_container (RPKCS7Container* container) {",
          "309:  if (container) {",
          "310:   r_asn1_free_string (container->contentType);",
          "311:   r_pkcs7_free_signeddata (&container->signedData);",
          "312:   free (container);",
          "313:  }",
          "314: }",
          "316: RPKCS7Attribute* r_pkcs7_parse_attribute (RASN1Object *object) {",
          "317:  RPKCS7Attribute* attribute;",
          "318:  if (!object || object->list.length < 1) {",
          "319:   return NULL;",
          "320:  }",
          "321:  attribute = (RPKCS7Attribute*) malloc (sizeof (RPKCS7Attribute));",
          "322:  if (!attribute) {",
          "323:   return NULL;",
          "324:  }",
          "325:  memset (attribute, 0, sizeof (RPKCS7Attribute));",
          "326:  attribute->oid = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "327:  if (object->list.length == 2) {",
          "328:   attribute->data = object->list.objects[1];",
          "329:   object->list.objects[1] = NULL;",
          "330:  }",
          "332:  return attribute;",
          "333: }",
          "335: void r_pkcs7_free_attribute (RPKCS7Attribute* attribute) {",
          "336:  if (attribute) {",
          "337:   r_asn1_free_object (attribute->data);",
          "338:   r_asn1_free_string (attribute->oid);",
          "339:   free (attribute);",
          "340:  }",
          "341: }",
          "343: bool r_pkcs7_parse_attributes (RPKCS7Attributes* attributes, RASN1Object *object) {",
          "344:  ut32 i;",
          "345:  if (!attributes || !object || !object->list.length) {",
          "346:   return false;",
          "347:  }",
          "349:  attributes->length = object->list.length;",
          "350:  if (attributes->length > 0) {",
          "351:   attributes->elements = (RPKCS7Attribute**) calloc (attributes->length, sizeof (RPKCS7Attribute*));",
          "352:   if (!attributes->elements) {",
          "353:    attributes->length = 0;",
          "354:    return false;",
          "355:   }",
          "356:   memset (attributes->elements, 0, attributes->length * sizeof (RPKCS7Attribute*));",
          "358:   for (i = 0; i < object->list.length; ++i) {",
          "359:    attributes->elements[i] = r_pkcs7_parse_attribute (object->list.objects[i]);",
          "360:   }",
          "361:  }",
          "362:  return true;",
          "363: }",
          "365: void r_pkcs7_free_attributes (RPKCS7Attributes* attributes) {",
          "366:  ut32 i;",
          "367:  if (attributes) {",
          "368:   for (i = 0; i < attributes->length; ++i) {",
          "369:    r_pkcs7_free_attribute (attributes->elements[i]);",
          "370:   }",
          "371:   free (attributes->elements);",
          "372:   attributes->elements = NULL;",
          "374:  }",
          "375: }",
          "377: char* r_pkcs7_signerinfos_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "378:  RASN1String *algo, *last, *next;",
          "379:  ut32 i, p;",
          "380:  int r;",
          "381:  char *tmp, *pad2, *pad3;",
          "382:  if (!crl || !buffer || !length) {",
          "383:   return NULL;",
          "384:  }",
          "385:  if (!pad) {",
          "386:   pad = \"\";",
          "387:  }",
          "388:  pad3 = r_str_newf (\"%s    \", pad);",
          "389:  if (!pad3) return NULL;",
          "391:  pad2 = pad3 + 2;",
          "392:  algo = crl->signature.algorithm;",
          "393:  last = crl->lastUpdate;",
          "394:  next = crl->nextUpdate;",
          "395:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "396:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "397:  p = (unsigned) r;",
          "398:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "399:   free (pad3);",
          "400:   return NULL;",
          "401:  }",
          "402:  p = tmp - buffer;",
          "403:  if (length <= p) {",
          "404:   free (pad3);",
          "405:   return NULL;",
          "406:  }",
          "407:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "408:     pad2, last ? last->string : \"Missing\",",
          "409:     pad2, next ? next->string : \"Missing\", pad2);",
          "410:  p += (unsigned) r;",
          "411:  if (r < 0) {",
          "412:   free (pad3);",
          "413:   return NULL;",
          "414:  }",
          "415:  for (i = 0; i < crl->length; ++i) {",
          "416:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "417:    free (pad3);",
          "418:    return NULL;",
          "419:   }",
          "420:   p = tmp - buffer;",
          "421:  }",
          "423:  free (pad3);",
          "424:  return buffer + p;",
          "425: }",
          "427: char* r_x509_signedinfo_dump (RPKCS7SignerInfo *si, char* buffer, ut32 length, const char* pad) {",
          "428:  RASN1String *s;",
          "429:  RASN1Object *o;",
          "430:  ut32 i, p;",
          "431:  int r;",
          "432:  char *tmp, *pad2, *pad3;",
          "433:  if (!si || !buffer || !length) {",
          "434:   return NULL;",
          "435:  }",
          "436:  if (!pad) {",
          "437:   pad = \"\";",
          "438:  }",
          "439:  pad3 = r_str_newf (\"%s    \", pad);",
          "440:  if (!pad3) return NULL;",
          "441:  pad2 = pad3 + 2;",
          "444:  r = snprintf (buffer, length, \"%sSignerInfo:\\n%sVersion: v%u\\n%sIssuer\\n\", pad, pad2, si->version + 1, pad2);",
          "445:  p = (unsigned) r;",
          "446:  if (r < 0) {",
          "447:   free (pad3);",
          "448:   return NULL;",
          "449:  }",
          "451:  if (length <= p || !(tmp = r_x509_name_dump (&si->issuerAndSerialNumber.issuer, buffer + p, length - p, pad3))) {",
          "452:   free (pad3);",
          "453:   return NULL;",
          "454:  }",
          "455:  p = tmp - buffer;",
          "456:  if ((o = si->issuerAndSerialNumber.serialNumber)) {",
          "457:   s = r_asn1_stringify_integer (o->sector, o->length);",
          "458:  } else {",
          "459:   s = NULL;",
          "460:  }",
          "461:  r = snprintf (buffer + p, length - p, \"%sSerial Number:\\n%s%s\\n\", pad2, pad3, s ? s->string : \"Missing\");",
          "462:  p += (unsigned) r;",
          "463:  r_asn1_free_string (s);",
          "464:  if (r < 0) {",
          "465:   free (pad3);",
          "466:   return NULL;",
          "467:  }",
          "469:  s = si->digestAlgorithm.algorithm;",
          "470:  r = snprintf (buffer + p, length - p, \"%sDigest Algorithm:\\n%s%s\\n%sAuthenticated Attributes:\\n\",",
          "471:     pad2, pad3, s ? s->string : \"Missing\", pad2);",
          "472:  p += (unsigned) r;",
          "473:  if (r < 0) {",
          "474:   free (pad3);",
          "475:   return NULL;",
          "476:  }",
          "477:  for (i = 0; i < si->authenticatedAttributes.length; ++i) {",
          "478:   RPKCS7Attribute* attr = si->authenticatedAttributes.elements[i];",
          "479:   if (!attr) continue;",
          "480:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "481:      pad3, attr->oid ? attr->oid->string : \"Missing\", attr->data ? attr->data->length : 0);",
          "482:   p += (unsigned) r;",
          "483:   if (r < 0) {",
          "484:    free (pad3);",
          "485:    return NULL;",
          "486:   }",
          "487:  }",
          "488:  s = si->digestEncryptionAlgorithm.algorithm;",
          "489:  r = snprintf (buffer + p, length - p, \"%sDigest Encryption Algorithm\\n%s%s\\n\",",
          "490:     pad2, pad3, s ? s->string : \"Missing\");",
          "491:  p += (unsigned) r;",
          "492:  if (r < 0) {",
          "493:   free (pad3);",
          "494:   return NULL;",
          "495:  }",
          "497:  if ((o = si->encryptedDigest)) s = r_asn1_stringify_bytes (o->sector, o->length);",
          "498:  else s = NULL;",
          "499:  r = snprintf (buffer + p, length - p, \"%sEncrypted Digest: %u bytes\\n%s\\n\", pad2, o ? o->length : 0, s ? s->string : \"Missing\");",
          "500:  p += (unsigned) r;",
          "501:  r_asn1_free_string (s);",
          "502:  if (r < 0) {",
          "503:   free (pad3);",
          "504:   return NULL;",
          "505:  }",
          "506:  r = snprintf (buffer + p, length - p, \"%sUnauthenticated Attributes:\\n\", pad2);",
          "507:  p += (unsigned) r;",
          "508:  if (r < 0) {",
          "509:   free (pad3);",
          "510:   return NULL;",
          "511:  }",
          "512:  for (i = 0; i < si->unauthenticatedAttributes.length; ++i) {",
          "513:   RPKCS7Attribute* attr = si->unauthenticatedAttributes.elements[i];",
          "514:   if (!attr) continue;",
          "515:   o = attr->data;",
          "516:   r = snprintf (buffer + p, length - p, \"%s%s: %u bytes\\n\",",
          "517:      pad3, attr->oid ? attr->oid->string : \"Missing\", o ? o->length : 0);",
          "518:   p += (unsigned) r;",
          "519:   if (r < 0) {",
          "520:    free (pad3);",
          "521:    return NULL;",
          "522:   }",
          "523:  }",
          "524:  return buffer + p;",
          "525: }",
          "527: char *r_pkcs7_container_dump (RPKCS7Container* container) {",
          "528:  RPKCS7SignedData *sd;",
          "529:  ut32 i, length, p;",
          "530:  int r;",
          "531:  char *buffer, *tmp = NULL;",
          "532:  if (!container) {",
          "533:   return NULL;",
          "534:  }",
          "535:  sd = &container->signedData;",
          "536:  p = 0;",
          "537:  length = 1024 + (container->signedData.certificates.length * 4096);",
          "538:  buffer = (char*) malloc (length);",
          "539:  if (!buffer) return NULL;",
          "540:  memset (buffer, 0, length);",
          "541:  r = snprintf (buffer, length, \"signedData\\n  Version: %u\\n  Digest Algorithms:\\n\", sd->version);",
          "542:  p += (unsigned) r;",
          "543:  if (r < 0) {",
          "544:   free (buffer);",
          "545:   return NULL;",
          "546:  }",
          "547:  if (container->signedData.digestAlgorithms.elements) {",
          "548:   for (i = 0; i < container->signedData.digestAlgorithms.length; ++i) {",
          "549:    if (container->signedData.digestAlgorithms.elements[i]) {",
          "550:     r = snprintf (buffer + p, length - p, \"    %s\\n\", container->signedData.digestAlgorithms.elements[i]->algorithm->string);",
          "551:     p += (unsigned) r;",
          "552:     if (r < 0 || length <= p) {",
          "553:      free (buffer);",
          "554:      return NULL;",
          "555:     }",
          "556:    }",
          "557:   }",
          "558:  }",
          "559:  r = snprintf (buffer + p, length - p, \"  Certificates: %u\\n\", container->signedData.certificates.length);",
          "560:  p += (unsigned) r;",
          "561:  if (r < 0 || length <= p) {",
          "562:   free (buffer);",
          "563:   return NULL;",
          "564:  }",
          "565:  for (i = 0; i < container->signedData.certificates.length; ++i) {",
          "566:   if (length <= p || !(tmp = r_x509_certificate_dump (container->signedData.certificates.elements[i], buffer + p, length - p, \"    \"))) {",
          "567:    free (buffer);",
          "568:    return NULL;",
          "569:   }",
          "570:   p = tmp - buffer;",
          "571:  }",
          "573:  for (i = 0; i < container->signedData.crls.length; ++i) {",
          "574:   if (length <= p || !(tmp = r_x509_crl_dump (container->signedData.crls.elements[i], buffer + p, length - p, \"    \"))) {",
          "575:    free (buffer);",
          "576:    return NULL;",
          "577:   }",
          "578:   p = tmp - buffer;",
          "579:  }",
          "580:  p = tmp - buffer;",
          "581:  r = snprintf (buffer + p, length - p, \"  SignerInfos:\\n\");",
          "582:  p += (unsigned) r;",
          "583:  if (r < 0 || length <= p) {",
          "584:   free (buffer);",
          "585:   return NULL;",
          "586:  }",
          "587:  if (container->signedData.signerinfos.elements) {",
          "588:   for (i = 0; i < container->signedData.signerinfos.length; ++i) {",
          "589:    if (length <= p || !(tmp = r_x509_signedinfo_dump (container->signedData.signerinfos.elements[i], buffer + p, length - p, \"    \"))) {",
          "590:     free (buffer);",
          "591:     return NULL;",
          "592:    }",
          "593:    p = tmp - buffer;",
          "594:   }",
          "595:  }",
          "596:  return buffer;",
          "597: }",
          "",
          "---------------"
        ],
        "libr/util/r_x509.c||libr/util/r_x509.c": [
          "File: libr/util/r_x509.c -> libr/util/r_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #include <r_util.h>",
          "2: #include <stdlib.h>",
          "3: #include <string.h>",
          "5: #include \"r_x509_internal.h\"",
          "7: bool r_x509_parse_validity (RX509Validity *validity, RASN1Object *object) {",
          "8:  RASN1Object *o;",
          "9:  if (!validity || !object || object->list.length != 2) {",
          "10:   return false;",
          "11:  }",
          "12:  if (object->class == CLASS_UNIVERSAL &&",
          "13:    object->tag == TAG_SEQUENCE &&",
          "14:    object->form == FORM_CONSTRUCTED) {",
          "15:   o = object->list.objects[0];",
          "16:   if (o->class == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "17:    if (o->tag == TAG_UTCTIME) {",
          "18:     validity->notBefore = r_asn1_stringify_utctime (o->sector, o->length);",
          "19:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "20:     validity->notBefore = r_asn1_stringify_time (o->sector, o->length);",
          "21:    }",
          "22:   }",
          "23:   o = object->list.objects[1];",
          "24:   if (o->class == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "25:    if (o->tag == TAG_UTCTIME) {",
          "26:     validity->notAfter = r_asn1_stringify_utctime (o->sector, o->length);",
          "27:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "28:     validity->notAfter = r_asn1_stringify_time (o->sector, o->length);",
          "29:    }",
          "30:   }",
          "31:  }",
          "32:  return true;",
          "33: }",
          "35: bool r_x509_parse_algorithmidentifier (RX509AlgorithmIdentifier *ai, RASN1Object * object) {",
          "36:  if (!ai || !object || object->list.length < 1) {",
          "37:   return false;",
          "38:  }",
          "39:  if (object->list.objects[0]->class == CLASS_UNIVERSAL && object->list.objects[0]->tag == TAG_OID) {",
          "40:   ai->algorithm = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "41:  }",
          "42:  ai->parameters = NULL; // TODO",
          "44:  return true;",
          "45: }",
          "47: bool r_x509_parse_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki, RASN1Object *object) {",
          "48:  RASN1Object *o;",
          "49:  if (!spki || !object || object->list.length != 2) {",
          "50:   return false;",
          "51:  }",
          "52:  r_x509_parse_algorithmidentifier (&spki->algorithm, object->list.objects[0]);",
          "53:  if (object->list.objects[1]) {",
          "54:   o = object->list.objects[1];",
          "55:   spki->subjectPublicKey = o;",
          "56:   object->list.objects[1] = NULL;",
          "62:   if (o->list.length == 1 && o->list.objects[0]->list.length == 2) {",
          "63:    o = o->list.objects[0];",
          "64:    if (o->list.objects[0]) {",
          "65:     spki->subjectPublicKeyExponent = o->list.objects[0];",
          "66:     o->list.objects[0] = NULL;",
          "72:    }",
          "73:    if (o->list.objects[1]) {",
          "74:     spki->subjectPublicKeyModule = o->list.objects[1];",
          "75:     o->list.objects[1] = NULL;",
          "77:    }",
          "78:   }",
          "79:  }",
          "80:  return true;",
          "81: }",
          "83: bool r_x509_parse_name (RX509Name *name, RASN1Object * object) {",
          "84:  ut32 i;",
          "85:  if (!name || !object || !object->list.length) {",
          "86:   return false;",
          "87:  }",
          "88:  if (object->class == CLASS_UNIVERSAL && object->tag == TAG_SEQUENCE) {",
          "89:   name->length = object->list.length;",
          "90:   name->names = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "91:   if (!name->names) {",
          "92:    name->length = 0;",
          "93:    return false;",
          "94:   }",
          "95:   name->oids = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "96:   if (!name->oids) {",
          "97:    name->length = 0;",
          "98:    free (name->names);",
          "99:    name->names = NULL;",
          "100:    return false;",
          "101:   }",
          "102:   for (i = 0; i < object->list.length; ++i) {",
          "103:    RASN1Object *o = object->list.objects[i];",
          "104:    if (o->class == CLASS_UNIVERSAL &&",
          "105:      o->tag == TAG_SET &&",
          "106:      o->form == FORM_CONSTRUCTED &&",
          "107:      o->list.length == 1) {",
          "108:     o = o->list.objects[0];",
          "109:     if (o->class == CLASS_UNIVERSAL &&",
          "110:       o->tag == TAG_SEQUENCE) {",
          "111:      if (o->list.objects[0]->class == CLASS_UNIVERSAL &&",
          "112:        o->list.objects[0]->tag == TAG_OID) {",
          "113:       name->oids[i] = r_asn1_stringify_oid (o->list.objects[0]->sector, o->list.objects[0]->length);",
          "114:      }",
          "115:      if (o->list.objects[0]->class == CLASS_UNIVERSAL) {",
          "116:       name->names[i] = r_asn1_stringify_string (o->list.objects[1]->sector, o->list.objects[1]->length);",
          "117:      }",
          "118:     }",
          "119:    }",
          "120:   }",
          "121:  }",
          "122:  return true;",
          "123: }",
          "125: bool r_x509_parse_extension (RX509Extension *ext, RASN1Object * object) {",
          "126:  RASN1Object *o;",
          "127:  if (!ext || !object || object->list.length < 2) {",
          "128:   return false;",
          "129:  }",
          "130:  memset (ext, 0, sizeof (RX509Extension));",
          "131:  o = object->list.objects[0];",
          "132:  if (o && o->tag == TAG_OID) {",
          "133:   ext->extnID = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "134:   o = object->list.objects[1];",
          "135:   if (o->tag == TAG_BOOLEAN) {",
          "137:    ext->critical = o->sector[0] != 0;",
          "138:    o = object->list.objects[2];",
          "139:   }",
          "140:   if (o->tag == TAG_OCTETSTRING) {",
          "141:    ext->extnValue = o;",
          "142:    if (o == object->list.objects[1]) {",
          "143:     object->list.objects[1] = NULL;",
          "144:    } else if (object->list.length > 2 && o == object->list.objects[2]) {",
          "145:     object->list.objects[2] = NULL;",
          "146:    }",
          "147:   }",
          "148:  }",
          "149:  return true;",
          "150: }",
          "152: bool r_x509_parse_extensions (RX509Extensions *ext, RASN1Object * object) {",
          "153:  ut32 i;",
          "154:  if (!ext || !object || object->list.length != 1 || !object->list.objects[0]->length) {",
          "155:   return false;",
          "156:  }",
          "157:  object = object->list.objects[0];",
          "158:  ext->extensions = (RX509Extension**) calloc (object->list.length, sizeof (RX509Extension*));",
          "159:  if (!ext->extensions) {",
          "160:   return false;",
          "161:  }",
          "162:  ext->length = object->list.length;",
          "163:  for (i = 0; i < object->list.length; ++i) {",
          "164:   ext->extensions[i] = (RX509Extension*) malloc (sizeof (RX509Extension));",
          "165:   if (!r_x509_parse_extension (ext->extensions[i], object->list.objects[i])) {",
          "166:    free (ext->extensions[i]);",
          "167:    ext->extensions[i] = NULL;",
          "168:   }",
          "169:  }",
          "170:  return true;",
          "171: }",
          "173: bool r_x509_parse_tbscertificate (RX509TBSCertificate *tbsc, RASN1Object * object) {",
          "174:  RASN1Object **elems;",
          "175:  ut32 i;",
          "176:  ut32 shift = 0;",
          "177:  if (!tbsc || !object || object->list.length < 6) {",
          "178:   return false;",
          "179:  }",
          "180:  elems = object->list.objects;",
          "182:  if (elems[0]->list.length == 1 &&",
          "183:    elems[0]->class == CLASS_CONTEXT &&",
          "184:    elems[0]->form == FORM_CONSTRUCTED &&",
          "185:    elems[0]->list.objects[0]->tag == TAG_INTEGER &&",
          "186:    elems[0]->list.objects[0]->length == 1) {",
          "188:   tbsc->version = (ut32) elems[0]->list.objects[0]->sector[0];",
          "189:   shift = 1;",
          "190:  } else {",
          "191:   tbsc->version = 0;",
          "192:  }",
          "193:  if (shift < object->list.length && elems[shift]->class == CLASS_UNIVERSAL && elems[shift]->tag == TAG_INTEGER) {",
          "194:   tbsc->serialNumber = r_asn1_stringify_integer (elems[shift]->sector, elems[shift]->length);",
          "195:  }",
          "196:  r_x509_parse_algorithmidentifier (&tbsc->signature, elems[shift + 1]);",
          "197:  r_x509_parse_name (&tbsc->issuer, elems[shift + 2]);",
          "198:  r_x509_parse_validity (&tbsc->validity, elems[shift + 3]);",
          "199:  r_x509_parse_name (&tbsc->subject, elems[shift + 4]);",
          "200:  r_x509_parse_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo, elems[shift + 5]);",
          "201:  if (tbsc->version > 0) {",
          "202:   for (i = shift + 6; i < object->list.length; ++i) {",
          "203:    if (elems[i]->class != CLASS_CONTEXT) continue;",
          "205:    if (elems[i]->tag == 1) {",
          "206:     tbsc->issuerUniqueID = elems[i];",
          "207:     elems[i] = NULL;",
          "208:    }",
          "210:    if (elems[i]->tag == 2) {",
          "211:     tbsc->subjectUniqueID = elems[i];",
          "212:     elems[i] = NULL;",
          "213:    }",
          "215:    if (tbsc->version == 2 && elems[i]->tag == 3 && elems[i]->form == FORM_CONSTRUCTED) {",
          "216:     r_x509_parse_extensions (&tbsc->extensions, elems[i]);",
          "217:     elems[i] = NULL;",
          "218:    }",
          "219:   }",
          "220:  }",
          "221:  return true;",
          "222: }",
          "224: RX509Certificate * r_x509_parse_certificate (RASN1Object *object) {",
          "225:  RX509Certificate *certificate;",
          "226:  RASN1Object *tmp;",
          "227:  if (!object) {",
          "228:   return NULL;",
          "229:  }",
          "230:  certificate = (RX509Certificate*) malloc (sizeof (RX509Certificate));",
          "231:  if (!certificate) {",
          "232:   return NULL;",
          "233:  }",
          "234:  memset (certificate, 0, sizeof (RX509Certificate));",
          "236:  if (object->class != CLASS_UNIVERSAL || object->form != FORM_CONSTRUCTED || object->list.length != 3) {",
          "239:   r_asn1_free_object (object);",
          "240:   free (certificate);",
          "241:   return NULL;",
          "242:  }",
          "243:  tmp = object->list.objects[2];",
          "244:  if (tmp->class != CLASS_UNIVERSAL || tmp->form != FORM_PRIMITIVE || tmp->tag != TAG_BITSTRING) {",
          "245:   r_asn1_free_object (object);",
          "246:   free (certificate);",
          "247:   return NULL;",
          "248:  }",
          "249:  certificate->signature = object->list.objects[2];",
          "250:  object->list.objects[2] = NULL;",
          "252:  r_x509_parse_tbscertificate (&certificate->tbsCertificate, object->list.objects[0]);",
          "254:  if (!r_x509_parse_algorithmidentifier (&certificate->algorithmIdentifier, object->list.objects[1])) {",
          "255:   r_asn1_free_object (object);",
          "256:   free (certificate);",
          "257:   return NULL;",
          "258:  }",
          "260:  return certificate;",
          "261: }",
          "263: RX509Certificate * r_x509_parse_certificate2 (const ut8 *buffer, ut32 length) {",
          "264:  RX509Certificate *certificate;",
          "265:  RASN1Object *object;",
          "266:  if (!buffer || !length) {",
          "267:   return NULL;",
          "268:  }",
          "269:  object = r_asn1_create_object (buffer, length);",
          "270:  certificate = r_x509_parse_certificate (object);",
          "271:  r_asn1_free_object (object);",
          "272:  return certificate;",
          "273: }",
          "275: RX509CRLEntry *r_x509_parse_crlentry (RASN1Object *object) {",
          "276:  RX509CRLEntry *entry;",
          "277:  if (!object || object->list.length != 2) {",
          "278:   return NULL;",
          "279:  }",
          "280:  entry = (RX509CRLEntry *) malloc (sizeof (RX509CRLEntry));",
          "281:  if (!entry) {",
          "282:   return NULL;",
          "283:  }",
          "284:  entry->userCertificate = object->list.objects[0];",
          "285:  object->list.objects[0] = NULL;",
          "286:  entry->revocationDate = r_asn1_stringify_utctime (object->list.objects[1]->sector, object->list.objects[1]->length);",
          "287:  return entry;",
          "288: }",
          "290: RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object) {",
          "291:  RX509CertificateRevocationList *crl;",
          "292:  RASN1Object **elems;",
          "293:  if (!object && object->list.length < 4) {",
          "294:   return NULL;",
          "295:  }",
          "296:  crl = (RX509CertificateRevocationList *) malloc (sizeof (RX509CertificateRevocationList));",
          "297:  if (!crl) {",
          "298:   return NULL;",
          "299:  }",
          "300:  memset (crl, 0, sizeof (RX509CertificateRevocationList));",
          "301:  elems = object->list.objects;",
          "302:  r_x509_parse_algorithmidentifier (&crl->signature, elems[0]);",
          "303:  r_x509_parse_name (&crl->issuer, elems[1]);",
          "304:  crl->lastUpdate = r_asn1_stringify_utctime (elems[2]->sector, elems[2]->length);",
          "305:  crl->nextUpdate = r_asn1_stringify_utctime (elems[3]->sector, elems[3]->length);",
          "306:  if (object->list.length > 4) {",
          "307:   ut32 i;",
          "308:   crl->revokedCertificates = calloc (object->list.objects[4]->list.length, sizeof (RX509CRLEntry*));",
          "309:   if (!crl->revokedCertificates) {",
          "310:    free (crl);",
          "311:    return NULL;",
          "312:   }",
          "313:   crl->length = object->list.objects[4]->list.length;",
          "314:   for (i = 0; i < object->list.objects[4]->list.length; ++i) {",
          "315:    crl->revokedCertificates[i] = r_x509_parse_crlentry (object->list.objects[4]->list.objects[i]);",
          "316:   }",
          "317:  }",
          "318:  return crl;",
          "319: }",
          "321: void r_x509_free_algorithmidentifier (RX509AlgorithmIdentifier * ai) {",
          "322:  if (!ai) {",
          "323:   return;",
          "324:  }",
          "325:  r_asn1_free_string (ai->algorithm);",
          "326:  r_asn1_free_string (ai->parameters);",
          "328: }",
          "330: void r_x509_free_validity (RX509Validity * validity) {",
          "331:  if (!validity) {",
          "332:   return;",
          "333:  }",
          "334:  r_asn1_free_string (validity->notAfter);",
          "335:  r_asn1_free_string (validity->notBefore);",
          "337: }",
          "339: void r_x509_free_name (RX509Name * name) {",
          "340:  ut32 i;",
          "341:  if (!name) {",
          "342:   return;",
          "343:  }",
          "344:  if (name->names) {",
          "345:   for (i = 0; i < name->length; ++i) {",
          "346:    r_asn1_free_string (name->oids[i]);",
          "347:    r_asn1_free_string (name->names[i]);",
          "348:   }",
          "349:   free (name->names);",
          "350:  }",
          "352: }",
          "354: void r_x509_free_extension (RX509Extension * ex) {",
          "355:  if (ex) {",
          "356:   r_asn1_free_string (ex->extnID);",
          "357:   r_asn1_free_object (ex->extnValue);",
          "359:   free (ex);",
          "360:  }",
          "361: }",
          "363: void r_x509_free_extensions (RX509Extensions * ex) {",
          "364:  ut32 i;",
          "365:  if (!ex) {",
          "366:   return;",
          "367:  }",
          "368:  if (ex->extensions) {",
          "369:   for (i = 0; i < ex->length; ++i) {",
          "370:    r_x509_free_extension (ex->extensions[i]);",
          "371:   }",
          "372:   free (ex->extensions);",
          "373:  }",
          "375: }",
          "377: void r_x509_free_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki) {",
          "378:  if (spki) {",
          "379:   r_x509_free_algorithmidentifier (&spki->algorithm);",
          "380:   r_asn1_free_object (spki->subjectPublicKey);",
          "381:   r_asn1_free_object (spki->subjectPublicKeyExponent);",
          "382:   r_asn1_free_object (spki->subjectPublicKeyModule);",
          "384:  }",
          "385: }",
          "387: void r_x509_free_tbscertificate (RX509TBSCertificate * tbsc) {",
          "388:  if (tbsc) {",
          "390:   r_asn1_free_string (tbsc->serialNumber);",
          "391:   r_x509_free_algorithmidentifier (&tbsc->signature);",
          "392:   r_x509_free_name (&tbsc->issuer);",
          "393:   r_x509_free_validity (&tbsc->validity);",
          "394:   r_x509_free_name (&tbsc->subject);",
          "395:   r_x509_free_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo);",
          "396:   r_asn1_free_object (tbsc->subjectUniqueID);",
          "397:   r_asn1_free_object (tbsc->issuerUniqueID);",
          "398:   r_x509_free_extensions (&tbsc->extensions);",
          "400:  }",
          "401: }",
          "403: void r_x509_free_certificate (RX509Certificate * certificate) {",
          "404:  if (certificate) {",
          "405:   r_asn1_free_object (certificate->signature);",
          "406:   r_x509_free_algorithmidentifier (&certificate->algorithmIdentifier);",
          "407:   r_x509_free_tbscertificate (&certificate->tbsCertificate);",
          "408:   free (certificate);",
          "409:  }",
          "410: }",
          "412: void r_x509_free_crlentry (RX509CRLEntry *entry) {",
          "413:  if (entry) {",
          "414:   r_asn1_free_object (entry->userCertificate);",
          "415:   r_asn1_free_string (entry->revocationDate);",
          "416:   free (entry);",
          "417:  }",
          "418: }",
          "420: void r_x509_free_crl (RX509CertificateRevocationList *crl) {",
          "421:  ut32 i;",
          "422:  if (crl) {",
          "423:   r_x509_free_algorithmidentifier (&crl->signature);",
          "424:   r_x509_free_name (&crl->issuer);",
          "425:   r_asn1_free_string (crl->nextUpdate);",
          "426:   r_asn1_free_string (crl->lastUpdate);",
          "427:   if (crl->revokedCertificates) {",
          "428:    for (i = 0; i < crl->length; ++i) {",
          "429:     r_x509_free_crlentry (crl->revokedCertificates[i]);",
          "430:     crl->revokedCertificates[i] = NULL;",
          "431:    }",
          "432:    free (crl->revokedCertificates);",
          "433:    crl->revokedCertificates = NULL;",
          "434:   }",
          "435:   free (crl);",
          "436:  }",
          "437: }",
          "439: char* r_x509_validity_dump (RX509Validity* validity, char* buffer, ut32 length, const char* pad) {",
          "440:  int p;",
          "441:  if (!validity || !buffer || !length) {",
          "442:   return NULL;",
          "443:  }",
          "444:  if (!pad)",
          "445:   pad = \"\";",
          "446:  const char* b = validity->notBefore ? validity->notBefore->string : \"Missing\";",
          "447:  const char* a = validity->notAfter ? validity->notAfter->string : \"Missing\";",
          "448:  p = snprintf (buffer, length, \"%sNot Before: %s\\n%sNot After: %s\\n\", pad, b, pad, a);",
          "449:  return p < 0 ? NULL : buffer + (unsigned) p;",
          "450: }",
          "452: char* r_x509_name_dump (RX509Name* name, char* buffer, ut32 length, const char* pad) {",
          "453:  ut32 i, p, len;",
          "454:  int r;",
          "455:  char* c;",
          "456:  if (!name || !buffer || !length) {",
          "457:   return NULL;",
          "458:  }",
          "459:  if (!pad) {",
          "460:   pad = \"\";",
          "461:  }",
          "462:  len = length;",
          "463:  c = buffer;",
          "464:  if (!c) {",
          "465:   return NULL;",
          "466:  }",
          "467:  for (i = 0, p = 0; i < name->length; ++i) {",
          "468:   if (!name->oids[i] || !name->names[i]) continue;",
          "469:   r = snprintf (c + p, len - p, \"%s%s: %s\\n\", pad, name->oids[i]->string, name->names[i]->string);",
          "470:   p += r;",
          "471:   if (r < 0 || len < p) {",
          "472:    return NULL;",
          "473:   }",
          "474:  }",
          "475:  return c + p;",
          "476: }",
          "478: char* r_x509_subjectpublickeyinfo_dump (RX509SubjectPublicKeyInfo* spki, char* buffer, ut32 length, const char* pad) {",
          "479:  int r;",
          "480:  const char *a;",
          "481:  if (!spki || !buffer || !length) {",
          "482:   return NULL;",
          "483:  }",
          "484:  if (!pad)",
          "485:   pad = \"\";",
          "486:  a = spki->algorithm.algorithm->string;",
          "487:  RASN1String* m = r_asn1_stringify_integer (spki->subjectPublicKeyModule->sector, spki->subjectPublicKeyModule->length);",
          "488:  RASN1String* e = r_asn1_stringify_bytes (spki->subjectPublicKeyExponent->sector, spki->subjectPublicKeyExponent->length);",
          "489:  r = snprintf (buffer, length, \"%sAlgorithm: %s\\n%sModule: %s\\n%sExponent: %u bytes\\n%s\\n\", pad, a, pad, m->string,",
          "490:     pad, spki->subjectPublicKeyExponent->length - 1, e->string);",
          "491:  r_asn1_free_string (m);",
          "492:  r_asn1_free_string (e);",
          "493:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "494: }",
          "496: char* r_x509_extensions_dump (RX509Extensions* exts, char* buffer, ut32 length, const char* pad) {",
          "497:  ut32 i, p, len;",
          "498:  int r;",
          "499:  char* c;",
          "500:  if (!exts || !buffer || !length) {",
          "501:   return NULL;",
          "502:  }",
          "503:  if (!pad) {",
          "504:   pad = \"\";",
          "505:  }",
          "506:  len = length;",
          "507:  c = buffer;",
          "508:  if (!c) {",
          "509:   return NULL;",
          "510:  }",
          "511:  for (i = 0, p = 0, r = 0; i < exts->length; ++i) {",
          "513:   RX509Extension *e = exts->extensions[i];",
          "514:   if (!e) continue;",
          "517:   r = snprintf (c + p, len - p, \"%s%s: %s\\n%s%u bytes\\n\", pad, e->extnID->string, e->critical ? \"critical\" : \"\", pad, e->extnValue->length);",
          "518:   p += r;",
          "520:   if (r < 0 || len <= p) {",
          "521:    return NULL;",
          "522:   }",
          "523:  }",
          "524:  return c + p;",
          "525: }",
          "527: char* r_x509_tbscertificate_dump (RX509TBSCertificate* tbsc, char* buffer, ut32 length, const char* pad) {",
          "528:  RASN1String *sid = NULL, *iid = NULL;",
          "529:  char *pad2, *tmp;",
          "530:  ut32 p;",
          "531:  int r;",
          "532:  if (!tbsc || !buffer || !length) {",
          "533:   return NULL;",
          "534:  }",
          "535:  if (!pad) {",
          "536:   pad = \"\";",
          "537:  }",
          "538:  pad2 = r_str_newf (\"%s  \", pad);",
          "539:  if (!pad2) return NULL;",
          "540:  r = snprintf (buffer, length, \"%sVersion: v%u\\n\"",
          "541:     \"%sSerial Number:\\n%s  %s\\n\"",
          "542:     \"%sSignature Algorithm:\\n%s  %s\\n\"",
          "543:     \"%sIssuer:\\n\",",
          "544:     pad, tbsc->version + 1,",
          "545:     pad, pad, tbsc->serialNumber->string,",
          "546:     pad, pad, tbsc->signature.algorithm->string,",
          "547:     pad);",
          "548:  p = (unsigned) r;",
          "549:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->issuer, buffer + p, length - p, pad2))) {",
          "550:   free (pad2);",
          "551:   return NULL;",
          "552:  }",
          "553:  p = tmp - buffer;",
          "554:  if (length <= p) {",
          "555:   free (pad2);",
          "556:   return NULL;",
          "557:  }",
          "558:  r = snprintf (buffer + p, length - p, \"%sValidity:\\n\", pad);",
          "559:  p += r;",
          "560:  if (r < 0 || length <= p || !(tmp = r_x509_validity_dump (&tbsc->validity, buffer + p, length - p, pad2))) {",
          "561:   free (pad2);",
          "562:   return NULL;",
          "563:  }",
          "564:  p = tmp - buffer;",
          "565:  if (r < 0 || length <= p) return NULL;",
          "566:  r = snprintf (buffer + p, length - p, \"%sSubject:\\n\", pad);",
          "567:  p += r;",
          "568:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->subject, buffer + p, length - p, pad2))) {",
          "569:   free (pad2);",
          "570:   return NULL;",
          "571:  }",
          "572:  p = tmp - buffer;",
          "573:  if (r < 0 || length <= p) return NULL;",
          "574:  r = snprintf (buffer + p, length - p, \"%sSubject Public Key Info:\\n\", pad);",
          "575:  p += r;",
          "576:  if (r < 0 || length <= p ||",
          "577:    !(tmp = r_x509_subjectpublickeyinfo_dump (&tbsc->subjectPublicKeyInfo, buffer + p, length - p, pad2))) {",
          "578:   free (pad2);",
          "579:   return NULL;",
          "580:  }",
          "581:  p = tmp - buffer;",
          "582:  if (tbsc->issuerUniqueID) {",
          "583:   iid = r_asn1_stringify_integer (tbsc->issuerUniqueID->sector, tbsc->issuerUniqueID->length);",
          "584:   if (iid) {",
          "585:    if (length <= p) return NULL;",
          "586:    r = snprintf (buffer + p, length - p, \"%sIssuer Unique ID:\\n%s  %s\", pad, pad, iid->string);",
          "587:    p += r;",
          "588:   } else {",
          "589:    free (pad2);",
          "590:    return NULL;",
          "591:   }",
          "592:  }",
          "593:  if (tbsc->subjectUniqueID) {",
          "594:   sid = r_asn1_stringify_integer (tbsc->subjectUniqueID->sector, tbsc->subjectUniqueID->length);",
          "595:   if (sid) {",
          "596:    if (length <= p) return NULL;",
          "597:    r = snprintf (buffer + p, length - p, \"%sSubject Unique ID:\\n%s  %s\", pad, pad, sid->string);",
          "598:    p += r;",
          "599:   } else {",
          "600:    free (pad2);",
          "601:    return NULL;",
          "602:   }",
          "603:  }",
          "604:  if (r < 0 || length <= p) return NULL;",
          "605:  r = snprintf (buffer + p, length - p, \"%sExtensions:\\n\", pad);",
          "606:  p += r;",
          "607:  if (r < 0 || length <= p || !(tmp = r_x509_extensions_dump (&tbsc->extensions, buffer + p, length - p, pad2))) {",
          "608:   free (pad2);",
          "609:   return NULL;",
          "610:  }",
          "611:  free (pad2);",
          "612:  r_asn1_free_string (sid);",
          "613:  r_asn1_free_string (iid);",
          "614:  return buffer + p;",
          "615: }",
          "617: char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad) {",
          "618:  RASN1String *signature, *algo;",
          "619:  ut32 p;",
          "620:  int r;",
          "621:  char *tbsc, *pad2;",
          "622:  if (!certificate || !buffer || !length) {",
          "623:   return NULL;",
          "624:  }",
          "625:  if (!pad) {",
          "626:   pad = \"\";",
          "627:  }",
          "628:  pad2 = r_str_newf (\"%s  \", pad);",
          "629:  if (!pad2) return NULL;",
          "630:  if ((r = snprintf (buffer, length, \"%sTBSCertificate:\\n\", pad)) < 0) return NULL;",
          "631:  p = (unsigned) r;",
          "632:  tbsc = r_x509_tbscertificate_dump (&certificate->tbsCertificate, buffer + p, length - p, pad2);",
          "633:  p = tbsc - buffer;",
          "634:  if (length <= p) {",
          "635:   free (pad2);",
          "636:   return NULL;",
          "637:  }",
          "638:  algo = certificate->algorithmIdentifier.algorithm;",
          "639:  signature = r_asn1_stringify_bytes (certificate->signature->sector, certificate->signature->length);",
          "640:  r = snprintf (buffer + p, length - p, \"%sAlgorithm:\\n%s%s\\n%sSignature: %u bytes\\n%s\\n\",",
          "641:     pad, pad2, algo ? algo->string : \"\",",
          "642:     pad, certificate->signature->length, signature ? signature->string : \"\");",
          "643:  if (r < 0) {",
          "644:   free (pad2);",
          "645:   return NULL;",
          "646:  }",
          "647:  p += (unsigned) r;",
          "648:  free (pad2);",
          "649:  r_asn1_free_string (signature);",
          "650:  return buffer + p;",
          "651: }",
          "653: char* r_x509_crlentry_dump (RX509CRLEntry *crle, char* buffer, ut32 length, const char* pad) {",
          "654:  RASN1String *id = NULL, *utc;",
          "655:  int r;",
          "656:  if (!crle || !buffer || !length) {",
          "657:   return NULL;",
          "658:  }",
          "659:  if (!pad) {",
          "660:   pad = \"\";",
          "661:  }",
          "662:  utc = crle->revocationDate;",
          "663:  if (crle->userCertificate) {",
          "664:   id = r_asn1_stringify_integer (crle->userCertificate->sector, crle->userCertificate->length);",
          "665:  }",
          "667:  r = snprintf (buffer, length, \"%sUser Certificate:\\n%s  %s\\n\"",
          "668:     \"%sRevocation Date:\\n%s  %s\\n\",",
          "669:     pad, pad, id ? id->string : \"Missing\",",
          "670:     pad, pad, utc ? utc->string : \"Missing\");",
          "672:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "673: }",
          "675: char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "676:  RASN1String *algo, *last, *next;",
          "677:  ut32 i, p;",
          "678:  int r;",
          "679:  char *tmp, *pad2, *pad3;",
          "680:  if (!crl || !buffer || !length) {",
          "681:   return NULL;",
          "682:  }",
          "683:  if (!pad) {",
          "684:   pad = \"\";",
          "685:  }",
          "686:  pad3 = r_str_newf (\"%s    \", pad);",
          "687:  if (!pad3) return NULL;",
          "688:  pad2 = pad3 + 2;",
          "689:  algo = crl->signature.algorithm;",
          "690:  last = crl->lastUpdate;",
          "691:  next = crl->nextUpdate;",
          "692:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "693:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "694:  p = (unsigned) r;",
          "695:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "696:   free (pad3);",
          "697:   return NULL;",
          "698:  }",
          "699:  p = tmp - buffer;",
          "700:  if (length <= p) {",
          "701:   free (pad3);",
          "702:   return NULL;",
          "703:  }",
          "704:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "705:     pad2, last ? last->string : \"Missing\",",
          "706:     pad2, next ? next->string : \"Missing\", pad2);",
          "707:  p += (unsigned) r;",
          "708:  if (r < 0) {",
          "709:   free (pad3);",
          "710:   return NULL;",
          "711:  }",
          "712:  for (i = 0; i < crl->length; ++i) {",
          "713:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "714:    free (pad3);",
          "715:    return NULL;",
          "716:   }",
          "717:   p = tmp - buffer;",
          "718:  }",
          "720:  free (pad3);",
          "721:  return buffer + p;",
          "722: }",
          "",
          "[Added Lines]",
          "3: #include <r_util.h>",
          "4: #include <stdlib.h>",
          "5: #include <string.h>",
          "7: #include \"r_x509_internal.h\"",
          "9: bool r_x509_parse_validity (RX509Validity *validity, RASN1Object *object) {",
          "10:  RASN1Object *o;",
          "11:  if (!validity || !object || object->list.length != 2) {",
          "12:   return false;",
          "13:  }",
          "14:  if (object->klass == CLASS_UNIVERSAL &&",
          "15:    object->tag == TAG_SEQUENCE &&",
          "16:    object->form == FORM_CONSTRUCTED) {",
          "17:   o = object->list.objects[0];",
          "18:   if (o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "19:    if (o->tag == TAG_UTCTIME) {",
          "20:     validity->notBefore = r_asn1_stringify_utctime (o->sector, o->length);",
          "21:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "22:     validity->notBefore = r_asn1_stringify_time (o->sector, o->length);",
          "23:    }",
          "24:   }",
          "25:   o = object->list.objects[1];",
          "26:   if (o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "27:    if (o->tag == TAG_UTCTIME) {",
          "28:     validity->notAfter = r_asn1_stringify_utctime (o->sector, o->length);",
          "29:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "30:     validity->notAfter = r_asn1_stringify_time (o->sector, o->length);",
          "31:    }",
          "32:   }",
          "33:  }",
          "34:  return true;",
          "35: }",
          "37: bool r_x509_parse_algorithmidentifier (RX509AlgorithmIdentifier *ai, RASN1Object * object) {",
          "38:  if (!ai || !object || object->list.length < 1) {",
          "39:   return false;",
          "40:  }",
          "41:  if (object->list.objects[0]->klass == CLASS_UNIVERSAL && object->list.objects[0]->tag == TAG_OID) {",
          "42:   ai->algorithm = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "43:  }",
          "44:  ai->parameters = NULL; // TODO",
          "46:  return true;",
          "47: }",
          "49: bool r_x509_parse_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki, RASN1Object *object) {",
          "50:  RASN1Object *o;",
          "51:  if (!spki || !object || object->list.length != 2) {",
          "52:   return false;",
          "53:  }",
          "54:  r_x509_parse_algorithmidentifier (&spki->algorithm, object->list.objects[0]);",
          "55:  if (object->list.objects[1]) {",
          "56:   o = object->list.objects[1];",
          "57:   spki->subjectPublicKey = o;",
          "58:   object->list.objects[1] = NULL;",
          "64:   if (o->list.length == 1 && o->list.objects[0]->list.length == 2) {",
          "65:    o = o->list.objects[0];",
          "66:    if (o->list.objects[0]) {",
          "67:     spki->subjectPublicKeyExponent = o->list.objects[0];",
          "68:     o->list.objects[0] = NULL;",
          "74:    }",
          "75:    if (o->list.objects[1]) {",
          "76:     spki->subjectPublicKeyModule = o->list.objects[1];",
          "77:     o->list.objects[1] = NULL;",
          "79:    }",
          "80:   }",
          "81:  }",
          "82:  return true;",
          "83: }",
          "85: bool r_x509_parse_name (RX509Name *name, RASN1Object * object) {",
          "86:  ut32 i;",
          "87:  if (!name || !object || !object->list.length) {",
          "88:   return false;",
          "89:  }",
          "90:  if (object->klass == CLASS_UNIVERSAL && object->tag == TAG_SEQUENCE) {",
          "91:   name->length = object->list.length;",
          "92:   name->names = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "93:   if (!name->names) {",
          "94:    name->length = 0;",
          "95:    return false;",
          "96:   }",
          "97:   name->oids = (RASN1String**) calloc (name->length, sizeof (RASN1String*));",
          "98:   if (!name->oids) {",
          "99:    name->length = 0;",
          "100:    free (name->names);",
          "101:    name->names = NULL;",
          "102:    return false;",
          "103:   }",
          "104:   for (i = 0; i < object->list.length; ++i) {",
          "105:    RASN1Object *o = object->list.objects[i];",
          "106:    if (o->klass == CLASS_UNIVERSAL &&",
          "107:      o->tag == TAG_SET &&",
          "108:      o->form == FORM_CONSTRUCTED &&",
          "109:      o->list.length == 1) {",
          "110:     o = o->list.objects[0];",
          "111:     if (o->klass == CLASS_UNIVERSAL &&",
          "112:       o->tag == TAG_SEQUENCE) {",
          "113:      if (o->list.objects[0]->klass == CLASS_UNIVERSAL &&",
          "114:        o->list.objects[0]->tag == TAG_OID) {",
          "115:       name->oids[i] = r_asn1_stringify_oid (o->list.objects[0]->sector, o->list.objects[0]->length);",
          "116:      }",
          "117:      if (o->list.objects[0]->klass == CLASS_UNIVERSAL) {",
          "118:       name->names[i] = r_asn1_stringify_string (o->list.objects[1]->sector, o->list.objects[1]->length);",
          "119:      }",
          "120:     }",
          "121:    }",
          "122:   }",
          "123:  }",
          "124:  return true;",
          "125: }",
          "127: bool r_x509_parse_extension (RX509Extension *ext, RASN1Object * object) {",
          "128:  RASN1Object *o;",
          "129:  if (!ext || !object || object->list.length < 2) {",
          "130:   return false;",
          "131:  }",
          "132:  memset (ext, 0, sizeof (RX509Extension));",
          "133:  o = object->list.objects[0];",
          "134:  if (o && o->tag == TAG_OID) {",
          "135:   ext->extnID = r_asn1_stringify_oid (object->list.objects[0]->sector, object->list.objects[0]->length);",
          "136:   o = object->list.objects[1];",
          "137:   if (o->tag == TAG_BOOLEAN) {",
          "139:    ext->critical = o->sector[0] != 0;",
          "140:    o = object->list.objects[2];",
          "141:   }",
          "142:   if (o->tag == TAG_OCTETSTRING) {",
          "143:    ext->extnValue = o;",
          "144:    if (o == object->list.objects[1]) {",
          "145:     object->list.objects[1] = NULL;",
          "146:    } else if (object->list.length > 2 && o == object->list.objects[2]) {",
          "147:     object->list.objects[2] = NULL;",
          "148:    }",
          "149:   }",
          "150:  }",
          "151:  return true;",
          "152: }",
          "154: bool r_x509_parse_extensions (RX509Extensions *ext, RASN1Object * object) {",
          "155:  ut32 i;",
          "156:  if (!ext || !object || object->list.length != 1 || !object->list.objects[0]->length) {",
          "157:   return false;",
          "158:  }",
          "159:  object = object->list.objects[0];",
          "160:  ext->extensions = (RX509Extension**) calloc (object->list.length, sizeof (RX509Extension*));",
          "161:  if (!ext->extensions) {",
          "162:   return false;",
          "163:  }",
          "164:  ext->length = object->list.length;",
          "165:  for (i = 0; i < object->list.length; ++i) {",
          "166:   ext->extensions[i] = (RX509Extension*) malloc (sizeof (RX509Extension));",
          "167:   if (!r_x509_parse_extension (ext->extensions[i], object->list.objects[i])) {",
          "168:    free (ext->extensions[i]);",
          "169:    ext->extensions[i] = NULL;",
          "170:   }",
          "171:  }",
          "172:  return true;",
          "173: }",
          "175: bool r_x509_parse_tbscertificate (RX509TBSCertificate *tbsc, RASN1Object * object) {",
          "176:  RASN1Object **elems;",
          "177:  ut32 i;",
          "178:  ut32 shift = 0;",
          "179:  if (!tbsc || !object || object->list.length < 6) {",
          "180:   return false;",
          "181:  }",
          "182:  elems = object->list.objects;",
          "184:  if (elems[0]->list.length == 1 &&",
          "185:    elems[0]->klass == CLASS_CONTEXT &&",
          "186:    elems[0]->form == FORM_CONSTRUCTED &&",
          "187:    elems[0]->list.objects[0]->tag == TAG_INTEGER &&",
          "188:    elems[0]->list.objects[0]->length == 1) {",
          "190:   tbsc->version = (ut32) elems[0]->list.objects[0]->sector[0];",
          "191:   shift = 1;",
          "192:  } else {",
          "193:   tbsc->version = 0;",
          "194:  }",
          "195:  if (shift < object->list.length && elems[shift]->klass == CLASS_UNIVERSAL && elems[shift]->tag == TAG_INTEGER) {",
          "196:   tbsc->serialNumber = r_asn1_stringify_integer (elems[shift]->sector, elems[shift]->length);",
          "197:  }",
          "198:  r_x509_parse_algorithmidentifier (&tbsc->signature, elems[shift + 1]);",
          "199:  r_x509_parse_name (&tbsc->issuer, elems[shift + 2]);",
          "200:  r_x509_parse_validity (&tbsc->validity, elems[shift + 3]);",
          "201:  r_x509_parse_name (&tbsc->subject, elems[shift + 4]);",
          "202:  r_x509_parse_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo, elems[shift + 5]);",
          "203:  if (tbsc->version > 0) {",
          "204:   for (i = shift + 6; i < object->list.length; ++i) {",
          "205:    if (elems[i]->klass != CLASS_CONTEXT) continue;",
          "207:    if (elems[i]->tag == 1) {",
          "208:     tbsc->issuerUniqueID = elems[i];",
          "209:     elems[i] = NULL;",
          "210:    }",
          "212:    if (elems[i]->tag == 2) {",
          "213:     tbsc->subjectUniqueID = elems[i];",
          "214:     elems[i] = NULL;",
          "215:    }",
          "217:    if (tbsc->version == 2 && elems[i]->tag == 3 && elems[i]->form == FORM_CONSTRUCTED) {",
          "218:     r_x509_parse_extensions (&tbsc->extensions, elems[i]);",
          "219:     elems[i] = NULL;",
          "220:    }",
          "221:   }",
          "222:  }",
          "223:  return true;",
          "224: }",
          "226: RX509Certificate * r_x509_parse_certificate (RASN1Object *object) {",
          "227:  RX509Certificate *certificate;",
          "228:  RASN1Object *tmp;",
          "229:  if (!object) {",
          "230:   return NULL;",
          "231:  }",
          "232:  certificate = (RX509Certificate*) malloc (sizeof (RX509Certificate));",
          "233:  if (!certificate) {",
          "234:   return NULL;",
          "235:  }",
          "236:  memset (certificate, 0, sizeof (RX509Certificate));",
          "238:  if (object->klass != CLASS_UNIVERSAL || object->form != FORM_CONSTRUCTED || object->list.length != 3) {",
          "241:   r_asn1_free_object (object);",
          "242:   free (certificate);",
          "243:   return NULL;",
          "244:  }",
          "245:  tmp = object->list.objects[2];",
          "246:  if (tmp->klass != CLASS_UNIVERSAL || tmp->form != FORM_PRIMITIVE || tmp->tag != TAG_BITSTRING) {",
          "247:   r_asn1_free_object (object);",
          "248:   free (certificate);",
          "249:   return NULL;",
          "250:  }",
          "251:  certificate->signature = object->list.objects[2];",
          "252:  object->list.objects[2] = NULL;",
          "254:  r_x509_parse_tbscertificate (&certificate->tbsCertificate, object->list.objects[0]);",
          "256:  if (!r_x509_parse_algorithmidentifier (&certificate->algorithmIdentifier, object->list.objects[1])) {",
          "257:   r_asn1_free_object (object);",
          "258:   free (certificate);",
          "259:   return NULL;",
          "260:  }",
          "262:  return certificate;",
          "263: }",
          "265: RX509Certificate * r_x509_parse_certificate2 (const ut8 *buffer, ut32 length) {",
          "266:  RX509Certificate *certificate;",
          "267:  RASN1Object *object;",
          "268:  if (!buffer || !length) {",
          "269:   return NULL;",
          "270:  }",
          "271:  object = r_asn1_create_object (buffer, length);",
          "272:  certificate = r_x509_parse_certificate (object);",
          "273:  r_asn1_free_object (object);",
          "274:  return certificate;",
          "275: }",
          "277: RX509CRLEntry *r_x509_parse_crlentry (RASN1Object *object) {",
          "278:  RX509CRLEntry *entry;",
          "279:  if (!object || object->list.length != 2) {",
          "280:   return NULL;",
          "281:  }",
          "282:  entry = (RX509CRLEntry *) malloc (sizeof (RX509CRLEntry));",
          "283:  if (!entry) {",
          "284:   return NULL;",
          "285:  }",
          "286:  entry->userCertificate = object->list.objects[0];",
          "287:  object->list.objects[0] = NULL;",
          "288:  entry->revocationDate = r_asn1_stringify_utctime (object->list.objects[1]->sector, object->list.objects[1]->length);",
          "289:  return entry;",
          "290: }",
          "292: RX509CertificateRevocationList* r_x509_parse_crl (RASN1Object *object) {",
          "293:  RX509CertificateRevocationList *crl;",
          "294:  RASN1Object **elems;",
          "295:  if (!object && object->list.length < 4) {",
          "296:   return NULL;",
          "297:  }",
          "298:  crl = (RX509CertificateRevocationList *) malloc (sizeof (RX509CertificateRevocationList));",
          "299:  if (!crl) {",
          "300:   return NULL;",
          "301:  }",
          "302:  memset (crl, 0, sizeof (RX509CertificateRevocationList));",
          "303:  elems = object->list.objects;",
          "304:  r_x509_parse_algorithmidentifier (&crl->signature, elems[0]);",
          "305:  r_x509_parse_name (&crl->issuer, elems[1]);",
          "306:  crl->lastUpdate = r_asn1_stringify_utctime (elems[2]->sector, elems[2]->length);",
          "307:  crl->nextUpdate = r_asn1_stringify_utctime (elems[3]->sector, elems[3]->length);",
          "308:  if (object->list.length > 4) {",
          "309:   ut32 i;",
          "310:   crl->revokedCertificates = calloc (object->list.objects[4]->list.length, sizeof (RX509CRLEntry*));",
          "311:   if (!crl->revokedCertificates) {",
          "312:    free (crl);",
          "313:    return NULL;",
          "314:   }",
          "315:   crl->length = object->list.objects[4]->list.length;",
          "316:   for (i = 0; i < object->list.objects[4]->list.length; ++i) {",
          "317:    crl->revokedCertificates[i] = r_x509_parse_crlentry (object->list.objects[4]->list.objects[i]);",
          "318:   }",
          "319:  }",
          "320:  return crl;",
          "321: }",
          "323: void r_x509_free_algorithmidentifier (RX509AlgorithmIdentifier * ai) {",
          "324:  if (!ai) {",
          "325:   return;",
          "326:  }",
          "327:  r_asn1_free_string (ai->algorithm);",
          "328:  r_asn1_free_string (ai->parameters);",
          "330: }",
          "332: void r_x509_free_validity (RX509Validity * validity) {",
          "333:  if (!validity) {",
          "334:   return;",
          "335:  }",
          "336:  r_asn1_free_string (validity->notAfter);",
          "337:  r_asn1_free_string (validity->notBefore);",
          "339: }",
          "341: void r_x509_free_name (RX509Name * name) {",
          "342:  ut32 i;",
          "343:  if (!name) {",
          "344:   return;",
          "345:  }",
          "346:  if (name->names) {",
          "347:   for (i = 0; i < name->length; ++i) {",
          "348:    r_asn1_free_string (name->oids[i]);",
          "349:    r_asn1_free_string (name->names[i]);",
          "350:   }",
          "351:   free (name->names);",
          "352:  }",
          "354: }",
          "356: void r_x509_free_extension (RX509Extension * ex) {",
          "357:  if (ex) {",
          "358:   r_asn1_free_string (ex->extnID);",
          "359:   r_asn1_free_object (ex->extnValue);",
          "361:   free (ex);",
          "362:  }",
          "363: }",
          "365: void r_x509_free_extensions (RX509Extensions * ex) {",
          "366:  ut32 i;",
          "367:  if (!ex) {",
          "368:   return;",
          "369:  }",
          "370:  if (ex->extensions) {",
          "371:   for (i = 0; i < ex->length; ++i) {",
          "372:    r_x509_free_extension (ex->extensions[i]);",
          "373:   }",
          "374:   free (ex->extensions);",
          "375:  }",
          "377: }",
          "379: void r_x509_free_subjectpublickeyinfo (RX509SubjectPublicKeyInfo * spki) {",
          "380:  if (spki) {",
          "381:   r_x509_free_algorithmidentifier (&spki->algorithm);",
          "382:   r_asn1_free_object (spki->subjectPublicKey);",
          "383:   r_asn1_free_object (spki->subjectPublicKeyExponent);",
          "384:   r_asn1_free_object (spki->subjectPublicKeyModule);",
          "386:  }",
          "387: }",
          "389: void r_x509_free_tbscertificate (RX509TBSCertificate * tbsc) {",
          "390:  if (tbsc) {",
          "392:   r_asn1_free_string (tbsc->serialNumber);",
          "393:   r_x509_free_algorithmidentifier (&tbsc->signature);",
          "394:   r_x509_free_name (&tbsc->issuer);",
          "395:   r_x509_free_validity (&tbsc->validity);",
          "396:   r_x509_free_name (&tbsc->subject);",
          "397:   r_x509_free_subjectpublickeyinfo (&tbsc->subjectPublicKeyInfo);",
          "398:   r_asn1_free_object (tbsc->subjectUniqueID);",
          "399:   r_asn1_free_object (tbsc->issuerUniqueID);",
          "400:   r_x509_free_extensions (&tbsc->extensions);",
          "402:  }",
          "403: }",
          "405: void r_x509_free_certificate (RX509Certificate * certificate) {",
          "406:  if (certificate) {",
          "407:   r_asn1_free_object (certificate->signature);",
          "408:   r_x509_free_algorithmidentifier (&certificate->algorithmIdentifier);",
          "409:   r_x509_free_tbscertificate (&certificate->tbsCertificate);",
          "410:   free (certificate);",
          "411:  }",
          "412: }",
          "414: void r_x509_free_crlentry (RX509CRLEntry *entry) {",
          "415:  if (entry) {",
          "416:   r_asn1_free_object (entry->userCertificate);",
          "417:   r_asn1_free_string (entry->revocationDate);",
          "418:   free (entry);",
          "419:  }",
          "420: }",
          "422: void r_x509_free_crl (RX509CertificateRevocationList *crl) {",
          "423:  ut32 i;",
          "424:  if (crl) {",
          "425:   r_x509_free_algorithmidentifier (&crl->signature);",
          "426:   r_x509_free_name (&crl->issuer);",
          "427:   r_asn1_free_string (crl->nextUpdate);",
          "428:   r_asn1_free_string (crl->lastUpdate);",
          "429:   if (crl->revokedCertificates) {",
          "430:    for (i = 0; i < crl->length; ++i) {",
          "431:     r_x509_free_crlentry (crl->revokedCertificates[i]);",
          "432:     crl->revokedCertificates[i] = NULL;",
          "433:    }",
          "434:    free (crl->revokedCertificates);",
          "435:    crl->revokedCertificates = NULL;",
          "436:   }",
          "437:   free (crl);",
          "438:  }",
          "439: }",
          "441: char* r_x509_validity_dump (RX509Validity* validity, char* buffer, ut32 length, const char* pad) {",
          "442:  int p;",
          "443:  if (!validity || !buffer || !length) {",
          "444:   return NULL;",
          "445:  }",
          "446:  if (!pad)",
          "447:   pad = \"\";",
          "448:  const char* b = validity->notBefore ? validity->notBefore->string : \"Missing\";",
          "449:  const char* a = validity->notAfter ? validity->notAfter->string : \"Missing\";",
          "450:  p = snprintf (buffer, length, \"%sNot Before: %s\\n%sNot After: %s\\n\", pad, b, pad, a);",
          "451:  return p < 0 ? NULL : buffer + (unsigned) p;",
          "452: }",
          "454: char* r_x509_name_dump (RX509Name* name, char* buffer, ut32 length, const char* pad) {",
          "455:  ut32 i, p, len;",
          "456:  int r;",
          "457:  char* c;",
          "458:  if (!name || !buffer || !length) {",
          "459:   return NULL;",
          "460:  }",
          "461:  if (!pad) {",
          "462:   pad = \"\";",
          "463:  }",
          "464:  len = length;",
          "465:  c = buffer;",
          "466:  if (!c) {",
          "467:   return NULL;",
          "468:  }",
          "469:  for (i = 0, p = 0; i < name->length; ++i) {",
          "470:   if (!name->oids[i] || !name->names[i]) continue;",
          "471:   r = snprintf (c + p, len - p, \"%s%s: %s\\n\", pad, name->oids[i]->string, name->names[i]->string);",
          "472:   p += r;",
          "473:   if (r < 0 || len < p) {",
          "474:    return NULL;",
          "475:   }",
          "476:  }",
          "477:  return c + p;",
          "478: }",
          "480: char* r_x509_subjectpublickeyinfo_dump (RX509SubjectPublicKeyInfo* spki, char* buffer, ut32 length, const char* pad) {",
          "481:  int r;",
          "482:  const char *a;",
          "483:  if (!spki || !buffer || !length) {",
          "484:   return NULL;",
          "485:  }",
          "486:  if (!pad)",
          "487:   pad = \"\";",
          "488:  a = spki->algorithm.algorithm->string;",
          "489:  RASN1String* m = r_asn1_stringify_integer (spki->subjectPublicKeyModule->sector, spki->subjectPublicKeyModule->length);",
          "490:  RASN1String* e = r_asn1_stringify_bytes (spki->subjectPublicKeyExponent->sector, spki->subjectPublicKeyExponent->length);",
          "491:  r = snprintf (buffer, length, \"%sAlgorithm: %s\\n%sModule: %s\\n%sExponent: %u bytes\\n%s\\n\", pad, a, pad, m->string,",
          "492:     pad, spki->subjectPublicKeyExponent->length - 1, e->string);",
          "493:  r_asn1_free_string (m);",
          "494:  r_asn1_free_string (e);",
          "495:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "496: }",
          "498: char* r_x509_extensions_dump (RX509Extensions* exts, char* buffer, ut32 length, const char* pad) {",
          "499:  ut32 i, p, len;",
          "500:  int r;",
          "501:  char* c;",
          "502:  if (!exts || !buffer || !length) {",
          "503:   return NULL;",
          "504:  }",
          "505:  if (!pad) {",
          "506:   pad = \"\";",
          "507:  }",
          "508:  len = length;",
          "509:  c = buffer;",
          "510:  if (!c) {",
          "511:   return NULL;",
          "512:  }",
          "513:  for (i = 0, p = 0, r = 0; i < exts->length; ++i) {",
          "515:   RX509Extension *e = exts->extensions[i];",
          "516:   if (!e) continue;",
          "519:   r = snprintf (c + p, len - p, \"%s%s: %s\\n%s%u bytes\\n\", pad, e->extnID->string, e->critical ? \"critical\" : \"\", pad, e->extnValue->length);",
          "520:   p += r;",
          "522:   if (r < 0 || len <= p) {",
          "523:    return NULL;",
          "524:   }",
          "525:  }",
          "526:  return c + p;",
          "527: }",
          "529: char* r_x509_tbscertificate_dump (RX509TBSCertificate* tbsc, char* buffer, ut32 length, const char* pad) {",
          "530:  RASN1String *sid = NULL, *iid = NULL;",
          "531:  char *pad2, *tmp;",
          "532:  ut32 p;",
          "533:  int r;",
          "534:  if (!tbsc || !buffer || !length) {",
          "535:   return NULL;",
          "536:  }",
          "537:  if (!pad) {",
          "538:   pad = \"\";",
          "539:  }",
          "540:  pad2 = r_str_newf (\"%s  \", pad);",
          "541:  if (!pad2) return NULL;",
          "542:  r = snprintf (buffer, length, \"%sVersion: v%u\\n\"",
          "543:     \"%sSerial Number:\\n%s  %s\\n\"",
          "544:     \"%sSignature Algorithm:\\n%s  %s\\n\"",
          "545:     \"%sIssuer:\\n\",",
          "546:     pad, tbsc->version + 1,",
          "547:     pad, pad, tbsc->serialNumber->string,",
          "548:     pad, pad, tbsc->signature.algorithm->string,",
          "549:     pad);",
          "550:  p = (unsigned) r;",
          "551:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->issuer, buffer + p, length - p, pad2))) {",
          "552:   free (pad2);",
          "553:   return NULL;",
          "554:  }",
          "555:  p = tmp - buffer;",
          "556:  if (length <= p) {",
          "557:   free (pad2);",
          "558:   return NULL;",
          "559:  }",
          "560:  r = snprintf (buffer + p, length - p, \"%sValidity:\\n\", pad);",
          "561:  p += r;",
          "562:  if (r < 0 || length <= p || !(tmp = r_x509_validity_dump (&tbsc->validity, buffer + p, length - p, pad2))) {",
          "563:   free (pad2);",
          "564:   return NULL;",
          "565:  }",
          "566:  p = tmp - buffer;",
          "567:  if (r < 0 || length <= p) return NULL;",
          "568:  r = snprintf (buffer + p, length - p, \"%sSubject:\\n\", pad);",
          "569:  p += r;",
          "570:  if (r < 0 || length <= p || !(tmp = r_x509_name_dump (&tbsc->subject, buffer + p, length - p, pad2))) {",
          "571:   free (pad2);",
          "572:   return NULL;",
          "573:  }",
          "574:  p = tmp - buffer;",
          "575:  if (r < 0 || length <= p) return NULL;",
          "576:  r = snprintf (buffer + p, length - p, \"%sSubject Public Key Info:\\n\", pad);",
          "577:  p += r;",
          "578:  if (r < 0 || length <= p ||",
          "579:    !(tmp = r_x509_subjectpublickeyinfo_dump (&tbsc->subjectPublicKeyInfo, buffer + p, length - p, pad2))) {",
          "580:   free (pad2);",
          "581:   return NULL;",
          "582:  }",
          "583:  p = tmp - buffer;",
          "584:  if (tbsc->issuerUniqueID) {",
          "585:   iid = r_asn1_stringify_integer (tbsc->issuerUniqueID->sector, tbsc->issuerUniqueID->length);",
          "586:   if (iid) {",
          "587:    if (length <= p) return NULL;",
          "588:    r = snprintf (buffer + p, length - p, \"%sIssuer Unique ID:\\n%s  %s\", pad, pad, iid->string);",
          "589:    p += r;",
          "590:   } else {",
          "591:    free (pad2);",
          "592:    return NULL;",
          "593:   }",
          "594:  }",
          "595:  if (tbsc->subjectUniqueID) {",
          "596:   sid = r_asn1_stringify_integer (tbsc->subjectUniqueID->sector, tbsc->subjectUniqueID->length);",
          "597:   if (sid) {",
          "598:    if (length <= p) return NULL;",
          "599:    r = snprintf (buffer + p, length - p, \"%sSubject Unique ID:\\n%s  %s\", pad, pad, sid->string);",
          "600:    p += r;",
          "601:   } else {",
          "602:    free (pad2);",
          "603:    return NULL;",
          "604:   }",
          "605:  }",
          "606:  if (r < 0 || length <= p) return NULL;",
          "607:  r = snprintf (buffer + p, length - p, \"%sExtensions:\\n\", pad);",
          "608:  p += r;",
          "609:  if (r < 0 || length <= p || !(tmp = r_x509_extensions_dump (&tbsc->extensions, buffer + p, length - p, pad2))) {",
          "610:   free (pad2);",
          "611:   return NULL;",
          "612:  }",
          "613:  free (pad2);",
          "614:  r_asn1_free_string (sid);",
          "615:  r_asn1_free_string (iid);",
          "616:  return buffer + p;",
          "617: }",
          "619: char* r_x509_certificate_dump (RX509Certificate* certificate, char* buffer, ut32 length, const char* pad) {",
          "620:  RASN1String *signature, *algo;",
          "621:  ut32 p;",
          "622:  int r;",
          "623:  char *tbsc, *pad2;",
          "624:  if (!certificate || !buffer || !length) {",
          "625:   return NULL;",
          "626:  }",
          "627:  if (!pad) {",
          "628:   pad = \"\";",
          "629:  }",
          "630:  pad2 = r_str_newf (\"%s  \", pad);",
          "631:  if (!pad2) return NULL;",
          "632:  if ((r = snprintf (buffer, length, \"%sTBSCertificate:\\n\", pad)) < 0) return NULL;",
          "633:  p = (unsigned) r;",
          "634:  tbsc = r_x509_tbscertificate_dump (&certificate->tbsCertificate, buffer + p, length - p, pad2);",
          "635:  p = tbsc - buffer;",
          "636:  if (length <= p) {",
          "637:   free (pad2);",
          "638:   return NULL;",
          "639:  }",
          "640:  algo = certificate->algorithmIdentifier.algorithm;",
          "641:  signature = r_asn1_stringify_bytes (certificate->signature->sector, certificate->signature->length);",
          "642:  r = snprintf (buffer + p, length - p, \"%sAlgorithm:\\n%s%s\\n%sSignature: %u bytes\\n%s\\n\",",
          "643:     pad, pad2, algo ? algo->string : \"\",",
          "644:     pad, certificate->signature->length, signature ? signature->string : \"\");",
          "645:  if (r < 0) {",
          "646:   free (pad2);",
          "647:   return NULL;",
          "648:  }",
          "649:  p += (unsigned) r;",
          "650:  free (pad2);",
          "651:  r_asn1_free_string (signature);",
          "652:  return buffer + p;",
          "653: }",
          "655: char* r_x509_crlentry_dump (RX509CRLEntry *crle, char* buffer, ut32 length, const char* pad) {",
          "656:  RASN1String *id = NULL, *utc;",
          "657:  int r;",
          "658:  if (!crle || !buffer || !length) {",
          "659:   return NULL;",
          "660:  }",
          "661:  if (!pad) {",
          "662:   pad = \"\";",
          "663:  }",
          "664:  utc = crle->revocationDate;",
          "665:  if (crle->userCertificate) {",
          "666:   id = r_asn1_stringify_integer (crle->userCertificate->sector, crle->userCertificate->length);",
          "667:  }",
          "669:  r = snprintf (buffer, length, \"%sUser Certificate:\\n%s  %s\\n\"",
          "670:     \"%sRevocation Date:\\n%s  %s\\n\",",
          "671:     pad, pad, id ? id->string : \"Missing\",",
          "672:     pad, pad, utc ? utc->string : \"Missing\");",
          "674:  return r < 0 ? NULL : buffer + (unsigned) r;",
          "675: }",
          "677: char* r_x509_crl_dump (RX509CertificateRevocationList *crl, char* buffer, ut32 length, const char* pad) {",
          "678:  RASN1String *algo, *last, *next;",
          "679:  ut32 i, p;",
          "680:  int r;",
          "681:  char *tmp, *pad2, *pad3;",
          "682:  if (!crl || !buffer || !length) {",
          "683:   return NULL;",
          "684:  }",
          "685:  if (!pad) {",
          "686:   pad = \"\";",
          "687:  }",
          "688:  pad3 = r_str_newf (\"%s    \", pad);",
          "689:  if (!pad3) return NULL;",
          "690:  pad2 = pad3 + 2;",
          "691:  algo = crl->signature.algorithm;",
          "692:  last = crl->lastUpdate;",
          "693:  next = crl->nextUpdate;",
          "694:  r = snprintf (buffer, length, \"%sCRL:\\n%sSignature:\\n%s%s\\n%sIssuer\\n\",",
          "695:     pad, pad2, pad3, algo ? algo->string : \"\", pad2);",
          "696:  p = (unsigned) r;",
          "697:  if (r < 0 || !(tmp = r_x509_name_dump (&crl->issuer, buffer + p, length - p, pad3))) {",
          "698:   free (pad3);",
          "699:   return NULL;",
          "700:  }",
          "701:  p = tmp - buffer;",
          "702:  if (length <= p) {",
          "703:   free (pad3);",
          "704:   return NULL;",
          "705:  }",
          "706:  r = snprintf (buffer + p, length - p, \"%sLast Update: %s\\n%sNext Update: %s\\n%sRevoked Certificates:\\n\",",
          "707:     pad2, last ? last->string : \"Missing\",",
          "708:     pad2, next ? next->string : \"Missing\", pad2);",
          "709:  p += (unsigned) r;",
          "710:  if (r < 0) {",
          "711:   free (pad3);",
          "712:   return NULL;",
          "713:  }",
          "714:  for (i = 0; i < crl->length; ++i) {",
          "715:   if (length <= p || !(tmp = r_x509_crlentry_dump (crl->revokedCertificates[i], buffer + p, length - p, pad3))) {",
          "716:    free (pad3);",
          "717:    return NULL;",
          "718:   }",
          "719:   p = tmp - buffer;",
          "720:  }",
          "722:  free (pad3);",
          "723:  return buffer + p;",
          "724: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}