{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69d2b69647564657625a6118ba911490d0cedcca",
      "candidate_info": {
        "commit_hash": "69d2b69647564657625a6118ba911490d0cedcca",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/69d2b69647564657625a6118ba911490d0cedcca",
        "files": [
          "configure.ac"
        ],
        "message": "build: check if pkg-config is installed\n\nAlso, don't check for a specific pkg-config version, since libuv doesn't\nuse pkg-config itself",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: AM_CONDITIONAL([OPENBSD], [AS_CASE([$host_os], [openbsd*], [true], [false])])",
          "46: AM_CONDITIONAL([SUNOS],   [AS_CASE([$host_os], [solaris*], [true], [false])])",
          "47: AM_CONDITIONAL([WINNT],   [AS_CASE([$host_os], [mingw*],   [true], [false])])",
          "51: PANDORA_ENABLE_DTRACE",
          "54: ])",
          "55: AC_CONFIG_FILES([Makefile])",
          "56: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "48: PKG_PROG_PKG_CONFIG([0.20])",
          "49: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])",
          "50: AC_SUBST(HAVE_PKG_CONFIG)",
          "52: AS_IF([test \"x$PKG_CONFIG\" != \"x\"], [",
          "53:  AC_CONFIG_FILES([libuv.pc])",
          "",
          "[Added Lines]",
          "49: AC_CHECK_PROG(PKG_CONFIG, pkg-config, yes)",
          "50: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" = \"xyes\"])",
          "51: AS_IF([test \"x$PKG_CONFIG\" = \"xyes\"], [",
          "52:     AC_CONFIG_FILES([libuv.pc])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cc6f96f0ce64fa4cc78e9f59c220bd590eeb487",
      "candidate_info": {
        "commit_hash": "1cc6f96f0ce64fa4cc78e9f59c220bd590eeb487",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1cc6f96f0ce64fa4cc78e9f59c220bd590eeb487",
        "files": [
          "src/win/fs.c"
        ],
        "message": "windows: squelch some compiler warnings\n\nThis removes some compiler warnings caused by implicit type conversion\nfrom uint64_t to long, which would happen in the `FILETIME_TO_TIMESPEC`\nmacro.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #define FILETIME_TO_TIMESPEC(ts, filetime)                                  \\",
          "84:    do {                                                                     \\",
          "87:    } while(0)",
          "89: #define TIME_T_TO_FILETIME(time, filetime_ptr)                              \\",
          "",
          "[Removed Lines]",
          "85:      (ts).tv_sec = FILETIME_TO_TIME_T(filetime);                            \\",
          "86:      (ts).tv_nsec = FILETIME_TO_TIME_NS(filetime, (ts).tv_sec);             \\",
          "",
          "[Added Lines]",
          "85:      (ts).tv_sec = (long) FILETIME_TO_TIME_T(filetime);                     \\",
          "86:      (ts).tv_nsec = (long) FILETIME_TO_TIME_NS(filetime, (ts).tv_sec);      \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27795cfc0f3bd9382d73c1a9ce992f4de15823ca",
      "candidate_info": {
        "commit_hash": "27795cfc0f3bd9382d73c1a9ce992f4de15823ca",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/27795cfc0f3bd9382d73c1a9ce992f4de15823ca",
        "files": [
          "Makefile.am",
          "src/unix/stream.c",
          "test/test-emfile.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "unix: fix accept() EMFILE error handling\n\nFix a bug that was introduced in commit 3ee4d3f (\"unix, windows:\nreturn error codes directly\") and add a regression test for good\nmeasure.\n\nHat tip to Fedor for pointing out the issue.\n\nFixes #1007.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-emfile.c||test/test-emfile.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:                          test/test-delayed-accept.c \\",
          "127:                          test/test-dlerror.c \\",
          "128:                          test/test-embed.c \\",
          "129:                          test/test-error.c \\",
          "130:                          test/test-fail-always.c \\",
          "131:                          test/test-fs-event.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:                          test/test-emfile.c \\",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: static int uv__emfile_trick(uv_loop_t* loop, int accept_fd) {",
          "467:   if (loop->emfile_fd == -1)",
          "468:     return -EMFILE;",
          "470:   uv__close(loop->emfile_fd);",
          "486: }",
          "",
          "[Removed Lines]",
          "465:   int fd;",
          "472:   for (;;) {",
          "473:     fd = uv__accept(accept_fd);",
          "475:     if (fd != -1) {",
          "476:       uv__close(fd);",
          "477:       continue;",
          "478:     }",
          "480:     if (errno == EINTR)",
          "481:       continue;",
          "483:     SAVE_ERRNO(loop->emfile_fd = uv__open_cloexec(\"/\", O_RDONLY));",
          "484:     return -errno;",
          "485:   }",
          "",
          "[Added Lines]",
          "465:   int err;",
          "471:   loop->emfile_fd = -1;",
          "473:   do {",
          "474:     err = uv__accept(accept_fd);",
          "475:     if (err >= 0)",
          "476:       uv__close(err);",
          "477:   } while (err >= 0 || err == -EINTR);",
          "479:   SAVE_ERRNO(loop->emfile_fd = uv__open_cloexec(\"/\", O_RDONLY));",
          "480:   return err;",
          "",
          "---------------"
        ],
        "test/test-emfile.c||test/test-emfile.c": [
          "File: test/test-emfile.c -> test/test-emfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if !defined(_WIN32)",
          "24: #include \"uv.h\"",
          "25: #include \"task.h\"",
          "27: #include <errno.h>",
          "28: #include <stdio.h>",
          "29: #include <sys/resource.h>",
          "30: #include <unistd.h>",
          "32: static void connection_cb(uv_stream_t* server_handle, int status);",
          "33: static void connect_cb(uv_connect_t* req, int status);",
          "35: static const int maxfd = 31;",
          "36: static unsigned connect_cb_called;",
          "37: static uv_tcp_t server_handle;",
          "38: static uv_tcp_t client_handle;",
          "41: TEST_IMPL(emfile) {",
          "42:   struct sockaddr_in addr;",
          "43:   struct rlimit limits;",
          "44:   uv_connect_t connect_req;",
          "45:   uv_loop_t* loop;",
          "46:   int first_fd;",
          "48:   loop = uv_default_loop();",
          "49:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "50:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "51:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "52:   ASSERT(0 == uv_tcp_bind(&server_handle, (const struct sockaddr*) &addr));",
          "53:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 8, connection_cb));",
          "56:   limits.rlim_cur = limits.rlim_max = maxfd + 1;",
          "57:   if (setrlimit(RLIMIT_NOFILE, &limits)) {",
          "58:     perror(\"setrlimit(RLIMIT_NOFILE)\");",
          "59:     ASSERT(0);",
          "60:   }",
          "63:   do",
          "64:     first_fd = dup(0);",
          "65:   while (first_fd == -1 && errno == EINTR);",
          "66:   ASSERT(first_fd > 0);",
          "68:   while (dup(0) != -1 || errno == EINTR);",
          "69:   ASSERT(errno == EMFILE);",
          "70:   close(maxfd);",
          "76:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "77:                              &client_handle,",
          "78:                              (const struct sockaddr*) &addr,",
          "79:                              connect_cb));",
          "80:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "81:   ASSERT(1 == connect_cb_called);",
          "86:   while (first_fd < maxfd) {",
          "87:     close(first_fd);",
          "88:     first_fd += 1;",
          "89:   }",
          "91:   MAKE_VALGRIND_HAPPY();",
          "92:   return 0;",
          "93: }",
          "96: static void connection_cb(uv_stream_t* server_handle, int status) {",
          "97:   ASSERT(0 && \"connection_cb should not be called.\");",
          "98: }",
          "101: static void connect_cb(uv_connect_t* req, int status) {",
          "105:   ASSERT(0 == status);",
          "106:   connect_cb_called += 1;",
          "107:   uv_close((uv_handle_t*) &server_handle, NULL);",
          "108:   uv_close((uv_handle_t*) &client_handle, NULL);",
          "109: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: TEST_DECLARE   (listen_no_simultaneous_accepts)",
          "226: TEST_DECLARE   (fs_stat_root)",
          "227: #else",
          "228: TEST_DECLARE   (close_fd)",
          "229: TEST_DECLARE   (spawn_setuid_setgid)",
          "230: TEST_DECLARE   (we_get_signal)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: TEST_DECLARE   (emfile)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:   TEST_ENTRY  (listen_no_simultaneous_accepts)",
          "458:   TEST_ENTRY  (fs_stat_root)",
          "459: #else",
          "460:   TEST_ENTRY  (close_fd)",
          "461:   TEST_ENTRY  (spawn_setuid_setgid)",
          "462:   TEST_ENTRY  (we_get_signal)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:   TEST_ENTRY  (emfile)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:         'test/test-delayed-accept.c',",
          "310:         'test/test-error.c',",
          "311:         'test/test-embed.c',",
          "312:         'test/test-fail-always.c',",
          "313:         'test/test-fs.c',",
          "314:         'test/test-fs-event.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:         'test/test-emfile.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a07e0779682b11bb7e3bfe58ca82ab4d45b274c4",
      "candidate_info": {
        "commit_hash": "a07e0779682b11bb7e3bfe58ca82ab4d45b274c4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a07e0779682b11bb7e3bfe58ca82ab4d45b274c4",
        "files": [
          "uv.gyp"
        ],
        "message": "gyp: fix comment regarding version info location",
        "before_after_code_files": [
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:             ['uv_library==\"shared_library\" and OS!=\"mac\"', {",
          "190:               'link_settings': {",
          "191:                 # Must correspond with UV_VERSION_MAJOR and UV_VERSION_MINOR",
          "193:                 'libraries': [ '-Wl,-soname,libuv.so.1.0' ],",
          "194:               },",
          "195:             }],",
          "",
          "[Removed Lines]",
          "192:                 # in src/version.c",
          "",
          "[Added Lines]",
          "192:                 # in include/uv-version.h",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ce3a312aafb2c465b1a1de374d186a1efbecec1",
      "candidate_info": {
        "commit_hash": "4ce3a312aafb2c465b1a1de374d186a1efbecec1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4ce3a312aafb2c465b1a1de374d186a1efbecec1",
        "files": [
          "test/test-fs.c"
        ],
        "message": "test: fix signed/unsigned comparison warnings",
        "before_after_code_files": [
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: static char test_buf[] = \"test-buffer\\n\";",
          "108:   int r;",
          "109:   uv_fs_t req;",
          "110:   uv_stat_t* s;",
          "",
          "[Removed Lines]",
          "107: static void check_permission(const char* filename, int mode) {",
          "",
          "[Added Lines]",
          "107: static void check_permission(const char* filename, unsigned int mode) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "925:   r = fstat(file, &t);",
          "926:   ASSERT(r == 0);",
          "938: #if defined(__APPLE__)",
          "939:   ASSERT(s->st_atim.tv_sec == t.st_atimespec.tv_sec);",
          "940:   ASSERT(s->st_atim.tv_nsec == t.st_atimespec.tv_nsec);",
          "",
          "[Removed Lines]",
          "928:   ASSERT(s->st_dev == t.st_dev);",
          "929:   ASSERT(s->st_mode == t.st_mode);",
          "930:   ASSERT(s->st_nlink == t.st_nlink);",
          "931:   ASSERT(s->st_uid == t.st_uid);",
          "932:   ASSERT(s->st_gid == t.st_gid);",
          "933:   ASSERT(s->st_rdev == t.st_rdev);",
          "934:   ASSERT(s->st_ino == t.st_ino);",
          "935:   ASSERT(s->st_size == t.st_size);",
          "936:   ASSERT(s->st_blksize == t.st_blksize);",
          "937:   ASSERT(s->st_blocks == t.st_blocks);",
          "",
          "[Added Lines]",
          "928:   ASSERT(s->st_dev == (uint64_t) t.st_dev);",
          "929:   ASSERT(s->st_mode == (uint64_t) t.st_mode);",
          "930:   ASSERT(s->st_nlink == (uint64_t) t.st_nlink);",
          "931:   ASSERT(s->st_uid == (uint64_t) t.st_uid);",
          "932:   ASSERT(s->st_gid == (uint64_t) t.st_gid);",
          "933:   ASSERT(s->st_rdev == (uint64_t) t.st_rdev);",
          "934:   ASSERT(s->st_ino == (uint64_t) t.st_ino);",
          "935:   ASSERT(s->st_size == (uint64_t) t.st_size);",
          "936:   ASSERT(s->st_blksize == (uint64_t) t.st_blksize);",
          "937:   ASSERT(s->st_blocks == (uint64_t) t.st_blocks);",
          "",
          "---------------"
        ]
      }
    }
  ]
}