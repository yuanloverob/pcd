{
  "cve_id": "CVE-2015-3811",
  "cve_desc": "epan/dissectors/packet-wcp.c in the WCP dissector in Wireshark 1.10.x before 1.10.14 and 1.12.x before 1.12.5 improperly refers to previously processed bytes, which allows remote attackers to cause a denial of service (application crash) via a crafted packet, a different vulnerability than CVE-2015-2188.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a6fc6aa0b4efc1a1c3d7a2e3b5189e888fb6ccc2",
  "patch_info": {
    "commit_hash": "a6fc6aa0b4efc1a1c3d7a2e3b5189e888fb6ccc2",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a6fc6aa0b4efc1a1c3d7a2e3b5189e888fb6ccc2",
    "files": [
      "epan/dissectors/packet-wcp.c"
    ],
    "message": "wcp: add validations to decompressed_entry\n\nEnsure that a reference to past bytes refers to bytes that actually exist.\n\nBug: 10978\nChange-Id: If95d785ee15243c88edcd7115b5ff25fbaa08e6c\nReviewed-on: https://code.wireshark.org/review/7783\nPetri-Dish: Evan Huus <eapache@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Evan Huus <eapache@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c": [
      "File: epan/dissectors/packet-wcp.c -> epan/dissectors/packet-wcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:  guint8  *buf_cur;",
      "119:  guint8  buffer[MAX_WIN_BUF_LEN];",
      "121: }wcp_window_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  guint16 initialized;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171: static expert_field ei_wcp_compressed_data_exceeds = EI_INIT;",
      "172: static expert_field ei_wcp_uncompressed_data_exceeds = EI_INIT;",
      "174: static dissector_handle_t fr_uncompressed_handle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175: static expert_field ei_wcp_invalid_window_offset = EI_INIT;",
      "176: static expert_field ei_wcp_invalid_match_length = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "397: static guint8 *",
      "398: decompressed_entry(guint8 *dst, guint16 data_offset,",
      "400: {",
      "401:  const guint8 *src;",
      "",
      "[Removed Lines]",
      "399:     guint16 data_cnt, int *len, guint8 * buf_start, guint8 *buf_end)",
      "",
      "[Added Lines]",
      "403:     guint16 data_cnt, int *len, wcp_window_t *buf_ptr)",
      "406:  guint8 *buf_start, *buf_end;",
      "408:  buf_start = buf_ptr->buffer;",
      "409:  buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "412:  while( data_cnt--){",
      "414:   if ( ++(*len) >MAX_WCP_BUF_LEN){",
      "416:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:   if ( buf_ptr->initialized < MAX_WIN_BUF_LEN)",
      "423:    buf_ptr->initialized++;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "444:  if ( !wcp_circuit_data){",
      "445:   wcp_circuit_data = wmem_new(wmem_file_scope(), wcp_circuit_data_t);",
      "446:   wcp_circuit_data->recv.buf_cur = wcp_circuit_data->recv.buffer;",
      "447:   wcp_circuit_data->send.buf_cur = wcp_circuit_data->send.buffer;",
      "448:   circuit_add_proto_data(circuit, proto_wcp, wcp_circuit_data);",
      "449:  }",
      "450:  if (pinfo->pseudo_header->x25.flags & FROM_DCE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "457:   wcp_circuit_data->recv.initialized = 0;",
      "459:   wcp_circuit_data->send.initialized = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "562:      src += 2;",
      "563:      offset += 2;",
      "564:     }",
      "566:      dst = decompressed_entry(dst,",
      "567:          data_offset, data_cnt, &len,",
      "569:      if (dst == NULL){",
      "570:       expert_add_info_format(pinfo, cd_item, &ei_wcp_uncompressed_data_exceeds,",
      "571:        \"Uncompressed data exceeds maximum buffer length (%d > %d)\",",
      "",
      "[Removed Lines]",
      "568:          buf_start, buf_end);",
      "",
      "[Added Lines]",
      "577:     if (data_offset + 1 > buf_ptr->initialized) {",
      "578:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
      "579:        \"Data offset exceeds valid window size (%d > %d)\",",
      "580:        data_offset+1, buf_ptr->initialized);",
      "581:      return NULL;",
      "582:     }",
      "584:     if (data_offset + 1 < data_cnt) {",
      "585:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
      "586:        \"Data count exceeds offset (%d > %d)\",",
      "587:        data_cnt, data_offset+1);",
      "588:      return NULL;",
      "589:     }",
      "593:          buf_ptr);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "597:      if ( dst++ == buf_end)",
      "598:       dst = buf_start;",
      "599:     }",
      "600:     ++src;",
      "601:     ++offset;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "624:      if (buf_ptr->initialized < MAX_WIN_BUF_LEN)",
      "625:       buf_ptr->initialized++;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "749:  static ei_register_info ei[] = {",
      "750:   { &ei_wcp_compressed_data_exceeds, { \"wcp.compressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Compressed data exceeds maximum buffer length\", EXPFILL }},",
      "751:   { &ei_wcp_uncompressed_data_exceeds, { \"wcp.uncompressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Uncompressed data exceeds maximum buffer length\", EXPFILL }},",
      "752:  };",
      "754:  expert_module_t* expert_wcp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "779:   { &ei_wcp_invalid_window_offset, { \"wcp.off.invalid\", PI_MALFORMED, PI_ERROR, \"Offset points outside of visible window\", EXPFILL }},",
      "780:   { &ei_wcp_invalid_match_length, { \"wcp.len.invalid\", PI_MALFORMED, PI_ERROR, \"Length greater than offset\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5a9cf36b813076a74fa3ab2772bbefb2e113ea8",
      "candidate_info": {
        "commit_hash": "e5a9cf36b813076a74fa3ab2772bbefb2e113ea8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e5a9cf36b813076a74fa3ab2772bbefb2e113ea8",
        "files": [
          "epan/dissectors/packet-wcp.c"
        ],
        "message": "wcp: add validations to decompressed_entry\n\nEnsure that a reference to past bytes refers to bytes that actually exist.\n\nBug: 10978\nConflicts:\n\tepan/dissectors/packet-wcp.c\nChange-Id: I346b30c0815032e5081eeb13123839d3eb0cc8da\nReviewed-on: https://code.wireshark.org/review/7801\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c": [
          "File: epan/dissectors/packet-wcp.c -> epan/dissectors/packet-wcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  guint8  *buf_cur;",
          "118:   guint8  buffer[MAX_WIN_BUF_LEN];",
          "120: }wcp_window_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:  guint16 initialized;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "395: static guint8 *",
          "396: decompressed_entry(guint8 *dst, guint16 data_offset,",
          "398: {",
          "399:  const guint8 *src;",
          "",
          "[Removed Lines]",
          "397:     guint16 data_cnt, int *len, guint8 * buf_start, guint8 *buf_end)",
          "",
          "[Added Lines]",
          "399:     guint16 data_cnt, int *len, wcp_window_t *buf_ptr)",
          "402:  guint8 *buf_start, *buf_end;",
          "404:  buf_start = buf_ptr->buffer;",
          "405:  buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:  while( data_cnt--){",
          "412:   if ( ++(*len) >MAX_WCP_BUF_LEN){",
          "414:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   if ( buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "419:    buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "442:  if ( !wcp_circuit_data){",
          "443:   wcp_circuit_data = se_new(wcp_circuit_data_t);",
          "444:   wcp_circuit_data->recv.buf_cur = wcp_circuit_data->recv.buffer;",
          "445:   wcp_circuit_data->send.buf_cur = wcp_circuit_data->send.buffer;",
          "446:   circuit_add_proto_data(circuit, proto_wcp, wcp_circuit_data);",
          "447:  }",
          "448:  if (pinfo->pseudo_header->x25.flags & FROM_DCE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:   wcp_circuit_data->recv.initialized = 0;",
          "455:   wcp_circuit_data->send.initialized = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "560:      src += 2;",
          "561:      offset += 2;",
          "562:     }",
          "564:      dst = decompressed_entry(dst,",
          "565:          data_offset, data_cnt, &len,",
          "567:      if (dst == NULL){",
          "568:       expert_add_info_format(pinfo, cd_item, PI_MALFORMED, PI_ERROR,",
          "569:        \"Uncompressed data exceeds maximum buffer length (%d > %d)\",",
          "",
          "[Removed Lines]",
          "566:          buf_start, buf_end);",
          "",
          "[Added Lines]",
          "573:     if (data_offset + 1 > buf_ptr->initialized) {",
          "574:      expert_add_info_format(pinfo, cd_item, PI_MALFORMED, PI_ERROR,",
          "575:        \"Data offset exceeds valid window size (%d > %d)\",",
          "576:        data_offset+1, buf_ptr->initialized);",
          "577:      return NULL;",
          "578:     }",
          "580:     if (data_offset + 1 < data_cnt) {",
          "581:      expert_add_info_format(pinfo, cd_item, PI_MALFORMED, PI_ERROR,",
          "582:        \"Data count exceeds offset (%d > %d)\",",
          "583:        data_cnt, data_offset+1);",
          "584:      return NULL;",
          "585:     }",
          "589:          buf_ptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "595:      if ( dst++ == buf_end)",
          "596:       dst = buf_start;",
          "597:     }",
          "598:     ++src;",
          "599:     ++offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:      if (buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "621:       buf_ptr->initialized++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d1323de1fb2b94e9e74e98ce0d845e8e841d46d",
      "candidate_info": {
        "commit_hash": "7d1323de1fb2b94e9e74e98ce0d845e8e841d46d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7d1323de1fb2b94e9e74e98ce0d845e8e841d46d",
        "files": [
          "epan/dissectors/packet-wcp.c"
        ],
        "message": "wcp: add validations to decompressed_entry\n\nEnsure that a reference to past bytes refers to bytes that actually exist.\n\nBug: 10978\nChange-Id: I2fe8f0a9493cc237803bb761876f83b4511cfbf6\nConflicts:\n\tepan/dissectors/packet-wcp.c\nReviewed-on: https://code.wireshark.org/review/7800\nReviewed-by: Evan Huus <eapache@gmail.com>\n(cherry picked from commit 65db3786b52c5f2cf4059d53816b09d4c845588c)\nReviewed-on: https://code.wireshark.org/review/8636\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c": [
          "File: epan/dissectors/packet-wcp.c -> epan/dissectors/packet-wcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:  guint8  *buf_cur;",
          "123:  guint8  buffer[MAX_WIN_BUF_LEN];",
          "125: }wcp_window_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:  guint16 initialized;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: static expert_field ei_wcp_compressed_data_exceeds = EI_INIT;",
          "176: static expert_field ei_wcp_uncompressed_data_exceeds = EI_INIT;",
          "178: static dissector_handle_t fr_uncompressed_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static expert_field ei_wcp_invalid_window_offset = EI_INIT;",
          "180: static expert_field ei_wcp_invalid_match_length = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: static guint8 *",
          "402: decompressed_entry(guint8 *dst, guint16 data_offset,",
          "404: {",
          "405:  const guint8 *src;",
          "",
          "[Removed Lines]",
          "403:     guint16 data_cnt, int *len, guint8 * buf_start, guint8 *buf_end)",
          "",
          "[Added Lines]",
          "407:     guint16 data_cnt, int *len, wcp_window_t *buf_ptr)",
          "410:  guint8 *buf_start, *buf_end;",
          "412:  buf_start = buf_ptr->buffer;",
          "413:  buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:  while( data_cnt--){",
          "418:   if ( ++(*len) >MAX_WCP_BUF_LEN){",
          "420:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   if ( buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "427:    buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "448:  if ( !wcp_circuit_data){",
          "449:   wcp_circuit_data = wmem_new(wmem_file_scope(), wcp_circuit_data_t);",
          "450:   wcp_circuit_data->recv.buf_cur = wcp_circuit_data->recv.buffer;",
          "451:   wcp_circuit_data->send.buf_cur = wcp_circuit_data->send.buffer;",
          "452:   circuit_add_proto_data(circuit, proto_wcp, wcp_circuit_data);",
          "453:  }",
          "454:  if (pinfo->pseudo_header->x25.flags & FROM_DCE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:   wcp_circuit_data->recv.initialized = 0;",
          "463:   wcp_circuit_data->send.initialized = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "566:      src += 2;",
          "567:      offset += 2;",
          "568:     }",
          "570:      dst = decompressed_entry(dst,",
          "571:          data_offset, data_cnt, &len,",
          "573:      if (dst == NULL){",
          "574:       expert_add_info_format(pinfo, cd_item, &ei_wcp_uncompressed_data_exceeds,",
          "575:        \"Uncompressed data exceeds maximum buffer length (%d > %d)\",",
          "",
          "[Removed Lines]",
          "572:          buf_start, buf_end);",
          "",
          "[Added Lines]",
          "581:     if (data_offset + 1 > buf_ptr->initialized) {",
          "582:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
          "583:        \"Data offset exceeds valid window size (%d > %d)\",",
          "584:        data_offset+1, buf_ptr->initialized);",
          "585:      return NULL;",
          "586:     }",
          "588:     if (data_offset + 1 < data_cnt) {",
          "589:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
          "590:        \"Data count exceeds offset (%d > %d)\",",
          "591:        data_cnt, data_offset+1);",
          "592:      return NULL;",
          "593:     }",
          "597:          buf_ptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "601:      if ( dst++ == buf_end)",
          "602:       dst = buf_start;",
          "603:     }",
          "604:     ++src;",
          "605:     ++offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:      if (buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "629:       buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "753:     static ei_register_info ei[] = {",
          "754:         { &ei_wcp_compressed_data_exceeds, { \"wcp.compressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Compressed data exceeds maximum buffer length\", EXPFILL }},",
          "755:         { &ei_wcp_uncompressed_data_exceeds, { \"wcp.uncompressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Uncompressed data exceeds maximum buffer length\", EXPFILL }},",
          "756:     };",
          "758:     expert_module_t* expert_wcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:         { &ei_wcp_invalid_window_offset, { \"wcp.off.invalid\", PI_MALFORMED, PI_ERROR, \"Offset points outside of visible window\", EXPFILL }},",
          "784:         { &ei_wcp_invalid_match_length, { \"wcp.len.invalid\", PI_MALFORMED, PI_ERROR, \"Length greater than offset\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65db3786b52c5f2cf4059d53816b09d4c845588c",
      "candidate_info": {
        "commit_hash": "65db3786b52c5f2cf4059d53816b09d4c845588c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/65db3786b52c5f2cf4059d53816b09d4c845588c",
        "files": [
          "epan/dissectors/packet-wcp.c"
        ],
        "message": "wcp: add validations to decompressed_entry\n\nEnsure that a reference to past bytes refers to bytes that actually exist.\n\nBug: 10978\nChange-Id: I2fe8f0a9493cc237803bb761876f83b4511cfbf6\nConflicts:\n\tepan/dissectors/packet-wcp.c\nReviewed-on: https://code.wireshark.org/review/7800\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c": [
          "File: epan/dissectors/packet-wcp.c -> epan/dissectors/packet-wcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:  guint8  *buf_cur;",
          "123:  guint8  buffer[MAX_WIN_BUF_LEN];",
          "125: }wcp_window_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:  guint16 initialized;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: static expert_field ei_wcp_compressed_data_exceeds = EI_INIT;",
          "176: static expert_field ei_wcp_uncompressed_data_exceeds = EI_INIT;",
          "178: static dissector_handle_t fr_uncompressed_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static expert_field ei_wcp_invalid_window_offset = EI_INIT;",
          "180: static expert_field ei_wcp_invalid_match_length = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: static guint8 *",
          "402: decompressed_entry(guint8 *dst, guint16 data_offset,",
          "404: {",
          "405:  const guint8 *src;",
          "",
          "[Removed Lines]",
          "403:     guint16 data_cnt, int *len, guint8 * buf_start, guint8 *buf_end)",
          "",
          "[Added Lines]",
          "407:     guint16 data_cnt, int *len, wcp_window_t *buf_ptr)",
          "410:  guint8 *buf_start, *buf_end;",
          "412:  buf_start = buf_ptr->buffer;",
          "413:  buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:  while( data_cnt--){",
          "418:   if ( ++(*len) >MAX_WCP_BUF_LEN){",
          "420:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   if ( buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "427:    buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "448:  if ( !wcp_circuit_data){",
          "449:   wcp_circuit_data = wmem_new(wmem_file_scope(), wcp_circuit_data_t);",
          "450:   wcp_circuit_data->recv.buf_cur = wcp_circuit_data->recv.buffer;",
          "451:   wcp_circuit_data->send.buf_cur = wcp_circuit_data->send.buffer;",
          "452:   circuit_add_proto_data(circuit, proto_wcp, wcp_circuit_data);",
          "453:  }",
          "454:  if (pinfo->pseudo_header->x25.flags & FROM_DCE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:   wcp_circuit_data->recv.initialized = 0;",
          "463:   wcp_circuit_data->send.initialized = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "566:      src += 2;",
          "567:      offset += 2;",
          "568:     }",
          "570:      dst = decompressed_entry(dst,",
          "571:          data_offset, data_cnt, &len,",
          "573:      if (dst == NULL){",
          "574:       expert_add_info_format(pinfo, cd_item, &ei_wcp_uncompressed_data_exceeds,",
          "575:        \"Uncompressed data exceeds maximum buffer length (%d > %d)\",",
          "",
          "[Removed Lines]",
          "572:          buf_start, buf_end);",
          "",
          "[Added Lines]",
          "581:     if (data_offset + 1 > buf_ptr->initialized) {",
          "582:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
          "583:        \"Data offset exceeds valid window size (%d > %d)\",",
          "584:        data_offset+1, buf_ptr->initialized);",
          "585:      return NULL;",
          "586:     }",
          "588:     if (data_offset + 1 < data_cnt) {",
          "589:      expert_add_info_format(pinfo, cd_item, &ei_wcp_invalid_window_offset,",
          "590:        \"Data count exceeds offset (%d > %d)\",",
          "591:        data_cnt, data_offset+1);",
          "592:      return NULL;",
          "593:     }",
          "597:          buf_ptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "601:      if ( dst++ == buf_end)",
          "602:       dst = buf_start;",
          "603:     }",
          "604:     ++src;",
          "605:     ++offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:      if (buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "629:       buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "753:     static ei_register_info ei[] = {",
          "754:         { &ei_wcp_compressed_data_exceeds, { \"wcp.compressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Compressed data exceeds maximum buffer length\", EXPFILL }},",
          "755:         { &ei_wcp_uncompressed_data_exceeds, { \"wcp.uncompressed_data.exceeds\", PI_MALFORMED, PI_ERROR, \"Uncompressed data exceeds maximum buffer length\", EXPFILL }},",
          "756:     };",
          "758:     expert_module_t* expert_wcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:         { &ei_wcp_invalid_window_offset, { \"wcp.off.invalid\", PI_MALFORMED, PI_ERROR, \"Offset points outside of visible window\", EXPFILL }},",
          "784:         { &ei_wcp_invalid_match_length, { \"wcp.len.invalid\", PI_MALFORMED, PI_ERROR, \"Length greater than offset\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce83dcb86e7bde9ef01f6ff696b73ada3d49ec52",
      "candidate_info": {
        "commit_hash": "ce83dcb86e7bde9ef01f6ff696b73ada3d49ec52",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ce83dcb86e7bde9ef01f6ff696b73ada3d49ec52",
        "files": [
          "epan/dissectors/packet-wcp.c"
        ],
        "message": "wcp: add validations to decompressed_entry\n\nEnsure that a reference to past bytes refers to bytes that actually exist.\n\nBug: 10978\nConflicts:\n\tepan/dissectors/packet-wcp.c\nChange-Id: I346b30c0815032e5081eeb13123839d3eb0cc8da\nReviewed-on: https://code.wireshark.org/review/7801\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-on: https://code.wireshark.org/review/8624\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wcp.c||epan/dissectors/packet-wcp.c": [
          "File: epan/dissectors/packet-wcp.c -> epan/dissectors/packet-wcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  guint8  *buf_cur;",
          "125:   guint8  buffer[MAX_WIN_BUF_LEN];",
          "127: }wcp_window_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  guint16 initialized;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: static guint8 *",
          "405: decompressed_entry(guint8 *dst, guint16 data_offset,",
          "407: {",
          "408:  const guint8 *src;",
          "",
          "[Removed Lines]",
          "406:     guint16 data_cnt, int *len, guint8 * buf_start, guint8 *buf_end)",
          "",
          "[Added Lines]",
          "408:     guint16 data_cnt, int *len, wcp_window_t *buf_ptr)",
          "411:  guint8 *buf_start, *buf_end;",
          "413:  buf_start = buf_ptr->buffer;",
          "414:  buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419:  while( data_cnt--){",
          "421:   if ( ++(*len) >MAX_WCP_BUF_LEN){",
          "422:    printf(\"decomp failed, len = %d\\n\",  *len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:   if ( buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "428:    buf_ptr->initialized++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:  if ( !wcp_circuit_data){",
          "454:   wcp_circuit_data = se_alloc(sizeof(wcp_circuit_data_t));",
          "455:   wcp_circuit_data->recv.buf_cur = wcp_circuit_data->recv.buffer;",
          "456:   wcp_circuit_data->send.buf_cur = wcp_circuit_data->send.buffer;",
          "457:   circuit_add_proto_data(circuit, proto_wcp, wcp_circuit_data);",
          "458:  }",
          "459:  if (pinfo->pseudo_header->x25.flags & FROM_DCE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:   wcp_circuit_data->recv.initialized = 0;",
          "466:   wcp_circuit_data->send.initialized = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "572:      src += 2;",
          "573:      offset += 2;",
          "574:     }",
          "576:      dst = decompressed_entry(dst,",
          "577:          data_offset, data_cnt, &len,",
          "579:      if (dst == NULL){",
          "580:       return NULL;",
          "581:      }",
          "",
          "[Removed Lines]",
          "578:          buf_start, buf_end);",
          "",
          "[Added Lines]",
          "585:     if (data_offset + 1 > buf_ptr->initialized) {",
          "586:      expert_add_info_format(pinfo, cd_item, PI_MALFORMED, PI_ERROR,",
          "587:        \"Data offset exceeds valid window size (%d > %d)\",",
          "588:        data_offset+1, buf_ptr->initialized);",
          "589:      return NULL;",
          "590:     }",
          "592:     if (data_offset + 1 < data_cnt) {",
          "593:      expert_add_info_format(pinfo, cd_item, PI_MALFORMED, PI_ERROR,",
          "594:        \"Data count exceeds offset (%d > %d)\",",
          "595:        data_cnt, data_offset+1);",
          "596:      return NULL;",
          "597:     }",
          "601:          buf_ptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "601:      if ( dst++ == buf_end)",
          "602:       dst = buf_start;",
          "603:     }",
          "604:     ++src;",
          "605:     ++offset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:      if (buf_ptr->initialized < MAX_WIN_BUF_LEN)",
          "627:       buf_ptr->initialized++;",
          "",
          "---------------"
        ]
      }
    }
  ]
}