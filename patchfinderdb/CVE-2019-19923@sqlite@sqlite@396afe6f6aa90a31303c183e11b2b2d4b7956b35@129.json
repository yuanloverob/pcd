{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dfa15270c4108fedd817a99751fc73d43d7fb29d",
      "candidate_info": {
        "commit_hash": "dfa15270c4108fedd817a99751fc73d43d7fb29d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfa15270c4108fedd817a99751fc73d43d7fb29d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "test/gencol1.test"
        ],
        "message": "Change the way generated columns are computed so that no column is computed inside branch code that might not be taken.  Ticket [4fc08501f4e56692]\n\nFossilOrigin-Name: 9e07b48934e9a972dcf62e3538b3b21ffa044c553feba0441675ac0bbe13bcb2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7bc8205dd9c1657c736a9c6a1a90dd9dad442accfbb77d296eaae2c09ab46bd1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3645:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "3646: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3647:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3658:             return iSrc;",
          "3659:           }else",
          "",
          "[Removed Lines]",
          "3648:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3649:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3650:                               pCol->zName);",
          "3651:               return 0;",
          "3652:             }",
          "3653:             pCol->colFlags |= COLFLAG_BUSY;",
          "3654:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3655:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "3656:             }",
          "3657:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "",
          "[Added Lines]",
          "3648:             sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   return 0;",
          "202: }",
          "204: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: static int exprColumnFlagUnion(Walker *pWalker, Expr *pExpr){",
          "208:   if( pExpr->op==TK_COLUMN ){",
          "209:     pWalker->eCode |= pWalker->u.pTab->aCol[pExpr->iColumn].colFlags;",
          "210:   }",
          "211:   return WRC_Continue;",
          "212: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216: ){",
          "217:   int i;",
          "",
          "[Removed Lines]",
          "218:   int nv;",
          "",
          "[Added Lines]",
          "228:   Walker w;",
          "229:   Column *pRedo;",
          "230:   int eProgress;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "228:     }",
          "229:   }",
          "235:   pParse->iSelfTab = -iRegStore;",
          "249:       }",
          "251:     }",
          "253:   }",
          "254:   pParse->iSelfTab = 0;",
          "255: }",
          "",
          "[Removed Lines]",
          "236:   for(i=nv=0; i<pTab->nCol; i++){",
          "237:     u32 colFlags = pTab->aCol[i].colFlags;",
          "238:     if( (colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "239:       assert( colFlags & COLFLAG_GENERATED );",
          "240:       if( colFlags & COLFLAG_VIRTUAL ){",
          "242:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "243:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i],",
          "244:                                        iRegStore+pTab->nNVCol+nv);",
          "245:       }else{",
          "247:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "248:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i], iRegStore+i-nv);",
          "250:       pTab->aCol[i].colFlags &= ~COLFLAG_NOTAVAIL;",
          "252:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "",
          "[Added Lines]",
          "244:   w.u.pTab = pTab;",
          "245:   w.xExprCallback = exprColumnFlagUnion;",
          "246:   w.xSelectCallback = 0;",
          "247:   w.xSelectCallback2 = 0;",
          "255:   do{",
          "256:     eProgress = 0;",
          "257:     pRedo = 0;",
          "258:     for(i=0; i<pTab->nCol; i++){",
          "259:       Column *pCol = pTab->aCol + i;",
          "260:       if( (pCol->colFlags & COLFLAG_NOTAVAIL)!=0 ){",
          "261:         int x;",
          "262:         pCol->colFlags |= COLFLAG_BUSY;",
          "263:         w.eCode = 0;",
          "264:         sqlite3WalkExpr(&w, pCol->pDflt);",
          "265:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "266:         if( w.eCode & COLFLAG_NOTAVAIL ){",
          "267:           pRedo = pCol;",
          "268:           continue;",
          "269:         }",
          "270:         eProgress = 1;",
          "271:         assert( pCol->colFlags & COLFLAG_GENERATED );",
          "272:         x = sqlite3TableColumnToStorage(pTab, i) + iRegStore;",
          "273:         sqlite3ExprCodeGeneratedColumn(pParse, pCol, x);",
          "274:         pCol->colFlags &= ~COLFLAG_NOTAVAIL;",
          "277:   }while( pRedo && eProgress );",
          "278:   if( pRedo ){",
          "279:     sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\", pRedo->zName);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "225: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: # 2019-11-06 ticket 4fc08501f4e56692",
          "226: do_execsql_test gencol1-8.10 {",
          "227:   DROP TABLE IF EXISTS t0;",
          "228:   CREATE TABLE t0(",
          "229:     c0 AS (('a', 9) < ('b', c1)),",
          "230:     c1 AS (1),",
          "231:     c2 CHECK (1 = c1)",
          "232:   );",
          "233:   INSERT INTO t0 VALUES (0),(99);",
          "234:   SELECT * FROM t0;",
          "235: } {1 1 0 1 1 99}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
      "candidate_info": {
        "commit_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Fix the foreign key logic to be compatible with generated columns.\n\nFossilOrigin-Name: 3de57145a18c62ff9b556c7218d8b276000d0052e4890212fa9335235f22d03c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e04ba22dfce3998e61331ac229ff543ecccc590284c9dd5def21efbe594fba0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:     VdbeCoverage(v);",
          "350:   }",
          "351:   for(i=0; i<pFKey->nCol; i++){",
          "353:     sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iOk); VdbeCoverage(v);",
          "354:   }",
          "",
          "[Removed Lines]",
          "352:     int iReg = aiCol[i] + regData + 1;",
          "",
          "[Added Lines]",
          "352:     int iReg = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i]) + regData + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:       iMustBeInt = sqlite3VdbeAddOp2(v, OP_MustBeInt, regTemp, 0);",
          "370:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy, aiCol[0]+1+regData, regTemp);",
          "",
          "[Added Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy,",
          "369:         sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[0])+1+regData, regTemp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:       sqlite3VdbeAddOp3(v, OP_OpenRead, iCur, pIdx->tnum, iDb);",
          "393:       sqlite3VdbeSetP4KeyInfo(pParse, pIdx);",
          "394:       for(i=0; i<nCol; i++){",
          "396:       }",
          "",
          "[Removed Lines]",
          "395:         sqlite3VdbeAddOp2(v, OP_Copy, aiCol[i]+1+regData, regTemp+i);",
          "",
          "[Added Lines]",
          "396:         sqlite3VdbeAddOp2(v, OP_Copy,",
          "397:                sqlite3TableColumnToStorage(pFKey->pFrom, aiCol[i])+1+regData,",
          "398:                regTemp+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:       if( pTab==pFKey->pFrom && nIncr==1 ){",
          "409:         int iJump = sqlite3VdbeCurrentAddr(v) + nCol + 1;",
          "410:         for(i=0; i<nCol; i++){",
          "413:           assert( pIdx->aiColumn[i]>=0 );",
          "414:           assert( aiCol[i]!=pTab->iPKey );",
          "415:           if( pIdx->aiColumn[i]==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "411:           int iChild = aiCol[i]+1+regData;",
          "412:           int iParent = pIdx->aiColumn[i]+1+regData;",
          "",
          "[Added Lines]",
          "414:           int iChild = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i])",
          "415:                               +1+regData;",
          "416:           int iParent = 1+regData;",
          "417:           iParent += sqlite3TableColumnToStorage(pIdx->pTable,",
          "418:                                                  pIdx->aiColumn[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
      "candidate_info": {
        "commit_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Enhance the btree search routine so that it does early detection of impossibly large keys and thereby avoids a large malloc() call.\n\nFossilOrigin-Name: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5479:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5480:             goto moveto_finish;",
          "5481:           }",
          "",
          "[Removed Lines]",
          "5478:           if( nCell<2 ){",
          "",
          "[Added Lines]",
          "5478:           if( nCell<2 || nCell/pCur->pBt->usableSize>pCur->pBt->nPage ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a786e453a4c03c958feb30bfda4153a24bb393e6",
      "candidate_info": {
        "commit_hash": "a786e453a4c03c958feb30bfda4153a24bb393e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a786e453a4c03c958feb30bfda4153a24bb393e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Simplify the windows frame code some. Add a comment explaining some of the VM code generated by sqlite3WindowCodeStep().\n\nFossilOrigin-Name: 6bd1a07949ff3d394056bfcc813444401ef00806e3f0e0423ff6962541e84bdb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e7bced731aa071c95bc398cdecd53c939841bf0c52fbcd06e47ba68f8c5cc35a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1698:   return ret;",
          "1699: }",
          "1774: ){",
          "1775:   Window *pMWin = p->pWin;",
          "1776:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1777:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1794:   int addrShortcut = 0;",
          "1810:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1811:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "",
          "[Removed Lines]",
          "1768: static void windowCodeStep(",
          "1769:   Parse *pParse,",
          "1770:   Select *p,",
          "1771:   WhereInfo *pWInfo,",
          "1772:   int regGosub,",
          "1773:   int addrGosub",
          "1780:   int regArg;",
          "1781:   int csrWrite = pMWin->iEphCsr+1;",
          "1787:   int addrGoto;",
          "1788:   int addrIf;",
          "1789:   int addrGosubFlush;",
          "1790:   int addrInteger;",
          "1791:   int addrCacheRewind;",
          "1792:   int addrCacheNext;",
          "1795:   int addrEmpty = 0;",
          "1796:   int addrPeerJump = 0;",
          "1798:   int bCache = windowCachePartition(pMWin);",
          "1803:   int reg = pParse->nMem+1;",
          "1804:   int regRecord = reg+nSub;",
          "1805:   int regRowid = regRecord+1;",
          "1806:   int regPeer = 0;",
          "1807:   int regNewPeer = 0;",
          "1808:   WindowCodeArg s;",
          "",
          "[Added Lines]",
          "1707: Window *sqlite3WindowDup(sqlite3 *db, Expr *pOwner, Window *p){",
          "1708:   Window *pNew = 0;",
          "1709:   if( ALWAYS(p) ){",
          "1710:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "1711:     if( pNew ){",
          "1712:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "1713:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "1714:       pNew->pFunc = p->pFunc;",
          "1715:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "1716:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "1717:       pNew->eType = p->eType;",
          "1718:       pNew->eEnd = p->eEnd;",
          "1719:       pNew->eStart = p->eStart;",
          "1720:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "1721:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "1722:       pNew->pOwner = pOwner;",
          "1723:     }",
          "1724:   }",
          "1725:   return pNew;",
          "1726: }",
          "1732: Window *sqlite3WindowListDup(sqlite3 *db, Window *p){",
          "1733:   Window *pWin;",
          "1734:   Window *pRet = 0;",
          "1735:   Window **pp = &pRet;",
          "1737:   for(pWin=p; pWin; pWin=pWin->pNextWin){",
          "1739:     if( *pp==0 ) break;",
          "1740:     pp = &((*pp)->pNextWin);",
          "1741:   }",
          "1743:   return pRet;",
          "1744: }",
          "1946: void sqlite3WindowCodeStep(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1814:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1815:   );",
          "1817:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1818:   s.pParse = pParse;",
          "1819:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1989:   bCache = windowCachePartition(pMWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1821:   s.regGosub = regGosub;",
          "1822:   s.addrGosub = addrGosub;",
          "1823:   s.current.csr = pMWin->iEphCsr;",
          "1824:   s.start.csr = s.current.csr+2;",
          "1825:   s.end.csr = s.current.csr+3;",
          "1829:   regFlushPart = ++pParse->nMem;",
          "1831:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "1832:     regStart = ++pParse->nMem;",
          "1833:   }",
          "",
          "[Removed Lines]",
          "1827:   pParse->nMem += 1 + nSub + 1;",
          "",
          "[Added Lines]",
          "1999:   csrWrite = s.current.csr+1;",
          "2003:   regNew = pParse->nMem+1;",
          "2004:   pParse->nMem += nInput;",
          "2005:   regRecord = ++pParse->nMem;",
          "2006:   regRowid = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1836:   }",
          "1841:   if( pMWin->eType!=TK_ROWS ){",
          "1842:     int nPeer = (pOrderBy ? pOrderBy->nExpr : 0);",
          "1844:     if( pMWin->pPartition ) regNewPeer += pMWin->pPartition->nExpr;",
          "1846:     regPeer = pParse->nMem+1;       pParse->nMem += nPeer;",
          "1847:     s.start.reg = pParse->nMem+1;   pParse->nMem += nPeer;",
          "1848:     s.current.reg = pParse->nMem+1; pParse->nMem += nPeer;",
          "",
          "[Removed Lines]",
          "1843:     regNewPeer = reg + pMWin->nBufferCol;",
          "",
          "[Added Lines]",
          "2024:     regNewPeer = regNew + pMWin->nBufferCol;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1850:   }",
          "1857:   }",
          "1866:   if( pMWin->pPartition ){",
          "1867:     int addr;",
          "1868:     ExprList *pPart = pMWin->pPartition;",
          "1869:     int nPart = pPart->nExpr;",
          "1871:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1873:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "",
          "[Removed Lines]",
          "1855:   for(iCol=0; iCol<nSub; iCol++){",
          "1856:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, iCol, reg+iCol);",
          "1858:   sqlite3VdbeAddOp3(v, OP_MakeRecord, reg, nSub, regRecord);",
          "1870:     int regNewPart = reg + pMWin->nBufferCol;",
          "",
          "[Added Lines]",
          "2035:   for(iInput=0; iInput<nInput; iInput++){",
          "2036:     sqlite3VdbeAddOp3(v, OP_Column, csrInput, iInput, regNew+iInput);",
          "2038:   sqlite3VdbeAddOp3(v, OP_MakeRecord, regNew, nInput, regRecord);",
          "2049:     int regNewPart = regNew + pMWin->nBufferCol;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1893:     }",
          "1894:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "1895:   }else{",
          "1897:   }",
          "1902:   if( regStart ){",
          "1903:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "",
          "[Removed Lines]",
          "1896:     addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1900:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Added Lines]",
          "2075:     addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "2079:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1950:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1954:   if( bCache ){",
          "1955:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "1956:     if( pMWin->eType!=TK_ROWS ){",
          "1957:       windowReadPeerValues(&s, csrWrite, regNewPeer);",
          "1958:     }",
          "1959:   }else{",
          "1961:   }",
          "1962:   if( regPeer ){",
          "1963:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "",
          "[Removed Lines]",
          "1953:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.SECOND_ROW_CODE\"));",
          "1960:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "2132:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2139:     sqlite3VdbeJumpHere(v, addrIfNot);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2011:   if( addrPeerJump ){",
          "2012:     sqlite3VdbeJumpHere(v, addrPeerJump);",
          "2013:   }",
          "2017:   sqlite3VdbeJumpHere(v, addrGoto);",
          "",
          "[Removed Lines]",
          "2014:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "",
          "[Added Lines]",
          "2193:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2029:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2030:   }",
          "2033:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2034:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2035:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2032:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "",
          "[Added Lines]",
          "2211:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2079:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2080:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2081:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2083:   if( pMWin->pPartition ){",
          "2084:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2085:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2086:   }",
          "2087: }",
          "",
          "[Removed Lines]",
          "2082:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.FLUSH_CODE\"));",
          "2095: Window *sqlite3WindowDup(sqlite3 *db, Expr *pOwner, Window *p){",
          "2096:   Window *pNew = 0;",
          "2097:   if( ALWAYS(p) ){",
          "2098:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2099:     if( pNew ){",
          "2100:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2101:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2102:       pNew->pFunc = p->pFunc;",
          "2103:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "2104:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "2105:       pNew->eType = p->eType;",
          "2106:       pNew->eEnd = p->eEnd;",
          "2107:       pNew->eStart = p->eStart;",
          "2108:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2109:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2110:       pNew->pOwner = pOwner;",
          "2111:     }",
          "2112:   }",
          "2113:   return pNew;",
          "2114: }",
          "2120: Window *sqlite3WindowListDup(sqlite3 *db, Window *p){",
          "2121:   Window *pWin;",
          "2122:   Window *pRet = 0;",
          "2123:   Window **pp = &pRet;",
          "2125:   for(pWin=p; pWin; pWin=pWin->pNextWin){",
          "2127:     if( *pp==0 ) break;",
          "2128:     pp = &((*pp)->pNextWin);",
          "2129:   }",
          "2131:   return pRet;",
          "2132: }",
          "2141: void sqlite3WindowCodeStep(",
          "2147: ){",
          "2148:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2149:   windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2150:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2151: }",
          "",
          "[Added Lines]",
          "2261:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
      "candidate_info": {
        "commit_hash": "ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Remove a test from the index build logic which is no longer needed and is in fact unreachable.\n\nFossilOrigin-Name: 9b20ee10ff86c1f79706180310e02b6f78863e02b179062d8966573ae33a252f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3161: #ifdef SQLITE_ALLOW_SQLITE_MASTER_INDEX",
          "3162:        && sqlite3StrICmp(&pTab->zName[7],\"master\")!=0",
          "3163: #endif",
          "3165:  ){",
          "3166:     sqlite3ErrorMsg(pParse, \"table %s may not be indexed\", pTab->zName);",
          "3167:     goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3164:        && sqlite3StrNICmp(&pTab->zName[7],\"altertab_\",9)!=0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}