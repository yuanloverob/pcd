{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
      "candidate_info": {
        "commit_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Performance optimization on sqlite3GenerateConstraintChecks() - bypass the loop that checks each column for NOT NULL constraints if it is known in advance that the table has no NOT NULL constraints.\n\nFossilOrigin-Name: e3c3f4d7872f431a95627d52553101388c1e39458cc7e7f93fc81255f49a89a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         pTab->aCol[i].notNull = OE_Abort;",
          "1837:       }",
          "1838:     }",
          "1839:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:     pTab->tabFlags |= TF_HasNotNull;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:         onError = OE_Abort;",
          "1388:       }",
          "1403:       }",
          "1409:       }",
          "1410:     }",
          "1411:   }",
          "1415: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "1355:   for(i=0; i<nCol; i++){",
          "1356:     if( i==pTab->iPKey ){",
          "1358:     }",
          "1359:     if( aiChng && aiChng[i]<0 ){",
          "1361:       continue;",
          "1362:     }",
          "1363:     onError = pTab->aCol[i].notNull;",
          "1365:     if( overrideError!=OE_Default ){",
          "1366:       onError = overrideError;",
          "1367:     }else if( onError==OE_Default ){",
          "1368:       onError = OE_Abort;",
          "1369:     }",
          "1370:     if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1371:       onError = OE_Abort;",
          "1372:     }",
          "1373:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1374:         || onError==OE_Ignore || onError==OE_Replace );",
          "1375:     addr1 = 0;",
          "1376:     switch( onError ){",
          "1377:       case OE_Replace: {",
          "1378:         assert( onError==OE_Replace );",
          "1379:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1380:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1381:           VdbeCoverage(v);",
          "1382:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1383:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1384:           VdbeCoverage(v);",
          "1389:       case OE_Abort:",
          "1390:         sqlite3MayAbort(pParse);",
          "1392:       case OE_Rollback:",
          "1393:       case OE_Fail: {",
          "1394:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1395:                                     pTab->aCol[i].zName);",
          "1396:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1397:                           regNewData+1+i);",
          "1398:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1399:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1400:         VdbeCoverage(v);",
          "1401:         if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1402:         break;",
          "1404:       default: {",
          "1405:         assert( onError==OE_Ignore );",
          "1406:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1407:         VdbeCoverage(v);",
          "1408:         break;",
          "",
          "[Added Lines]",
          "1355:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1356:     for(i=0; i<nCol; i++){",
          "1357:       onError = pTab->aCol[i].notNull;",
          "1359:       assert( pTab->tabFlags & TF_HasNotNull );",
          "1360:       if( i==pTab->iPKey ){",
          "1362:       }",
          "1363:       if( aiChng && aiChng[i]<0 ){",
          "1365:         continue;",
          "1366:       }",
          "1367:       if( overrideError!=OE_Default ){",
          "1368:         onError = overrideError;",
          "1369:       }else if( onError==OE_Default ){",
          "1372:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1373:         onError = OE_Abort;",
          "1375:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1376:           || onError==OE_Ignore || onError==OE_Replace );",
          "1377:       addr1 = 0;",
          "1378:       switch( onError ){",
          "1379:         case OE_Replace: {",
          "1380:           assert( onError==OE_Replace );",
          "1381:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1382:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1383:             VdbeCoverage(v);",
          "1384:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1385:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1386:             VdbeCoverage(v);",
          "1387:           onError = OE_Abort;",
          "1390:         }",
          "1391:         case OE_Abort:",
          "1392:           sqlite3MayAbort(pParse);",
          "1394:         case OE_Rollback:",
          "1395:         case OE_Fail: {",
          "1396:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1397:                                       pTab->aCol[i].zName);",
          "1398:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1399:                             onError, regNewData+1+i);",
          "1400:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1401:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1402:           VdbeCoverage(v);",
          "1403:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1404:           break;",
          "1405:         }",
          "1406:         default: {",
          "1407:           assert( onError==OE_Ignore );",
          "1408:           sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1409:           VdbeCoverage(v);",
          "1410:           break;",
          "1411:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
      "candidate_info": {
        "commit_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0c51d1a041966bccc598d114aa17a13cf64d662",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Do not allow shadow tables to be dropped in defensive mode.\n\nFossilOrigin-Name: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2963:     }",
          "2964:   }",
          "2965: #endif",
          "2969:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2970:     goto exit_drop_table;",
          "2971:   }",
          "",
          "[Removed Lines]",
          "2966:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2967:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2968:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "[Added Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "[Removed Lines]",
          "545:   do_catchsql_test 16.1 {",
          "549:   do_catchsql_test 16.2 {",
          "553:   do_execsql_test 16.3 {",
          "557:   do_execsql_test 16.4 {",
          "",
          "[Added Lines]",
          "545:   do_catchsql_test 16.10 {",
          "549:   do_catchsql_test 16.20 {",
          "553:   do_catchsql_test 16.21 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "561:   do_execsql_test 16.40 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47df8a2c40f1362e10d0e23163452c898fe73311",
      "candidate_info": {
        "commit_hash": "47df8a2c40f1362e10d0e23163452c898fe73311",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47df8a2c40f1362e10d0e23163452c898fe73311",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Increase the number of parameters to sqlite3WhereCodeOneLoopStart() to encourage the compiler to inline that routine within sqlite3WhereBegin(). This gives a performance improvement.\n\nFossilOrigin-Name: 3c2ad0e915e835b1cb2962879beff50b2745d0cefe1cfc89ef90b7879c139ce6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7153552bac51295c56a1c42ca79d57195851e232509f9e9610375692f48c7e86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5075:         pParse, pTabList, pLevel, wctrlFlags",
          "5076:     );",
          "5077:     pLevel->addrBody = sqlite3VdbeCurrentAddr(v);",
          "5079:     pWInfo->iContinue = pLevel->addrCont;",
          "5080:     if( (wsFlags&WHERE_MULTI_OR)==0 && (wctrlFlags&WHERE_OR_SUBCLAUSE)==0 ){",
          "5081:       sqlite3WhereAddScanStatus(v, pTabList, pLevel, addrExplain);",
          "",
          "[Removed Lines]",
          "5078:     notReady = sqlite3WhereCodeOneLoopStart(pWInfo, ii, notReady);",
          "",
          "[Added Lines]",
          "5078:     notReady = sqlite3WhereCodeOneLoopStart(pParse,v,pWInfo,ii,pLevel,notReady);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:   pWC = &pWInfo->sWC;",
          "1196:   db = pParse->db;",
          "1198:   pLoop = pLevel->pWLoop;",
          "1199:   pTabItem = &pWInfo->pTabList->a[pLevel->iFrom];",
          "1200:   iCur = pTabItem->iCursor;",
          "1201:   pLevel->notReady = notReady & ~sqlite3WhereGetMask(&pWInfo->sMaskSet, iCur);",
          "1202:   bRev = (pWInfo->revMask>>iLevel)&1;",
          "1205:   VdbeModuleComment((v, \"Begin WHERE-loop%d: %s\",iLevel,pTabItem->pTab->zName));",
          "",
          "[Removed Lines]",
          "1193:   pParse = pWInfo->pParse;",
          "1194:   v = pParse->pVdbe;",
          "1197:   pLevel = &pWInfo->a[iLevel];",
          "1203:   omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1204:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342:     pTerm = pLoop->aLTerm[0];",
          "1343:     assert( pTerm!=0 );",
          "1344:     assert( pTerm->pExpr!=0 );",
          "1346:     testcase( pTerm->wtFlags & TERM_VIRTUAL );",
          "1347:     iReleaseReg = ++pParse->nMem;",
          "1348:     iRowidReg = codeEqualityTerm(pParse, pTerm, pLevel, 0, bRev, iReleaseReg);",
          "",
          "[Removed Lines]",
          "1345:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:     int memEndValue = 0;",
          "1362:     WhereTerm *pStart, *pEnd;",
          "1365:     j = 0;",
          "1366:     pStart = pEnd = 0;",
          "1367:     if( pLoop->wsFlags & WHERE_BTM_LIMIT ) pStart = pLoop->aLTerm[j++];",
          "",
          "[Removed Lines]",
          "1364:     assert( omitTable==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1726:     }",
          "1729:     if( omitTable ){",
          "1731:     }else if( HasRowid(pIdx->pTable) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1723:     omitTable = (pLoop->wsFlags & WHERE_IDX_ONLY)!=0",
          "1724:            && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
      "candidate_info": {
        "commit_hash": "fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa685947d8df2f6d4170f0c1c9894fee7ddf780d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Off-by-one error in the CAST to NUMERIC logic.\n\nFossilOrigin-Name: 25b89630206fdbb41c756e98f99baa711d35a8c226697a92339d0fe7e8b3652a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f2c8179f3c0b77f10da3f9b0771db4dec30d0bbf0b7f4751ce439bfb08da8f6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "704: }",
          "",
          "[Removed Lines]",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
      "candidate_info": {
        "commit_hash": "5710f1ad4822394087defa0cfefec9129fa8e885",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5710f1ad4822394087defa0cfefec9129fa8e885",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_expr.test",
          "test/func.test"
        ],
        "message": "Modify three test cases so that they work even with unusual versions of the library printf().\n\nFossilOrigin-Name: 8f4a3750b7d272daf96831655ffee80d457875ee121fc4537008046b9a00d0e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_expr.test||test/e_expr.test",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c35d3f67b67a53ead08b1c395e7ca8e5bf65f94a5a962a0562994a3c66c95d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "1664: do_expr_test e_expr-32.1.6 {CAST( '9.223372036e14' AS NUMERIC)} integer  922337203600000",
          "1665: do_expr_test e_expr-32.1.7 {CAST('-9.223372036e14' AS NUMERIC)} integer -922337203600000",
          "1670: # EVIDENCE-OF: R-50300-26941 Any text input that describes a value",
          "1671: # outside the range of a 64-bit signed integer yields a REAL result.",
          "",
          "[Removed Lines]",
          "1666: do_expr_test e_expr-32.1.8 {CAST( '9.223372036e15' AS NUMERIC)} real     9223372036000000.0",
          "1667: do_expr_test e_expr-32.1.9 {CAST('-9.223372036e15' AS NUMERIC)} real    -9223372036000000.0",
          "",
          "[Added Lines]",
          "1666: do_test e_expr-32.1.8 {",
          "1667:   set expr {CAST( '9.223372036e15' AS NUMERIC)}",
          "1668:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1669:   list $type $value",
          "1670: } {real 9.22337e+15}",
          "1671: do_test e_expr-32.1.9 {",
          "1672:   set expr {CAST('-9.223372036e15' AS NUMERIC)}",
          "1673:   db eval \"SELECT typeof($expr) AS type, printf('%.5e',$expr) AS value\"  break;",
          "1674:   list $type $value",
          "1675: } {real -9.22337e+15}",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   do_test func-4.38 {",
          "316:     execsql {SELECT round(9999999999999.556,2);}",
          "317:   } {9999999999999.56}",
          "321: }",
          "323: # Test the upper() and lower() functions",
          "",
          "[Removed Lines]",
          "318:   do_execsql_test func-4.39 {",
          "319:     SELECT round(1e500), round(-1e500);",
          "320:   } {Inf -Inf}",
          "",
          "[Added Lines]",
          "318:   do_test func-4.39 {",
          "319:     string tolower [db eval {SELECT round(1e500), round(-1e500);}]",
          "320:   } {inf -inf}",
          "",
          "---------------"
        ]
      }
    }
  ]
}