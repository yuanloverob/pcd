{
  "cve_id": "CVE-2017-7177",
  "cve_desc": "Suricata before 3.2.1 has an IPv4 defragmentation evasion issue caused by lack of a check for the IP protocol during fragment matching.",
  "repo": "inliniac/suricata",
  "patch_hash": "4a04f814b15762eb446a5ead4d69d021512df6f8",
  "patch_info": {
    "commit_hash": "4a04f814b15762eb446a5ead4d69d021512df6f8",
    "repo": "inliniac/suricata",
    "commit_url": "https://github.com/inliniac/suricata/commit/4a04f814b15762eb446a5ead4d69d021512df6f8",
    "files": [
      "src/defrag-hash.c",
      "src/defrag.c",
      "src/defrag.h"
    ],
    "message": "defrag - take protocol into account during re-assembly\n\nThe IP protocol was not being used to match fragments with\ntheir packets allowing a carefully constructed packet\nwith a different protocol to be matched, allowing re-assembly\nto complete, creating a packet that would not be re-assembled\nby the destination host.",
    "before_after_code_files": [
      "src/defrag-hash.c||src/defrag-hash.c",
      "src/defrag.c||src/defrag.c",
      "src/defrag.h||src/defrag.h"
    ]
  },
  "patch_diff": {
    "src/defrag-hash.c||src/defrag-hash.c": [
      "File: src/defrag-hash.c -> src/defrag-hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:         dt->id = (int32_t)IPV6_EXTHDR_GET_FH_ID(p);",
      "93:         dt->af = AF_INET6;",
      "94:     }",
      "95:     dt->vlan_id[0] = p->vlan_id[0];",
      "96:     dt->vlan_id[1] = p->vlan_id[1];",
      "97:     dt->policy = DefragGetOsPolicy(p);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "95:     dt->proto = IP_GET_IPPROTO(p);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:        CMP_ADDR(&(d1)->dst_addr, &(d2)->dst)) || \\",
      "407:       (CMP_ADDR(&(d1)->src_addr, &(d2)->dst) && \\",
      "408:        CMP_ADDR(&(d1)->dst_addr, &(d2)->src))) && \\",
      "409:      (d1)->id == (id) && \\",
      "410:      (d1)->vlan_id[0] == (d2)->vlan_id[0] && \\",
      "411:      (d1)->vlan_id[1] == (d2)->vlan_id[1])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:      (d1)->proto == IP_GET_IPPROTO(p) &&        \\",
      "",
      "---------------"
    ],
    "src/defrag.c||src/defrag.c": [
      "File: src/defrag.c -> src/defrag.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "998: static Packet *",
      "1001: {",
      "1002:     Packet *p = NULL;",
      "1003:     int hlen = 20;",
      "",
      "[Removed Lines]",
      "999: BuildTestPacket(uint16_t id, uint16_t off, int mf, const char content,",
      "1000:     int content_len)",
      "",
      "[Added Lines]",
      "999: BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
      "1000:     const char content, int content_len)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1023:     else",
      "1024:         ip4h.ip_off = htons(off);",
      "1025:     ip4h.ip_ttl = ttl;",
      "",
      "[Removed Lines]",
      "1026:     ip4h.ip_proto = IPPROTO_ICMP;",
      "",
      "[Added Lines]",
      "1026:     ip4h.ip_proto = proto;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1059:         goto error;",
      "1060:     if (IPV4_GET_IPTTL(p) != ttl)",
      "1061:         goto error;",
      "1063:         goto error;",
      "1065:     return p;",
      "",
      "[Removed Lines]",
      "1062:     if (IPV4_GET_IPPROTO(p) != IPPROTO_ICMP)",
      "",
      "[Added Lines]",
      "1062:     if (IPV4_GET_IPPROTO(p) != proto)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1074:                           uint16_t prev_hdrextlen);",
      "1076: static Packet *",
      "1079: {",
      "1080:     Packet *p = NULL;",
      "1081:     uint8_t *pcontent;",
      "",
      "[Removed Lines]",
      "1077: IPV6BuildTestPacket(uint32_t id, uint16_t off, int mf, const char content,",
      "1078:     int content_len)",
      "",
      "[Added Lines]",
      "1077: IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off, int mf,",
      "1078:     const char content, int content_len)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1109:     IPV6_SET_RAW_VER(p->ip6h, 6);",
      "1111:     IPV6FragHdr *fh = (IPV6FragHdr *)(GET_PKT_DATA(p) + sizeof(IPV6Hdr));",
      "1113:     fh->ip6fh_ident = htonl(id);",
      "1114:     fh->ip6fh_offlg = htons((off << 3) | mf);",
      "",
      "[Removed Lines]",
      "1112:     fh->ip6fh_nxt = IPPROTO_ICMP;",
      "",
      "[Added Lines]",
      "1112:     fh->ip6fh_nxt = proto;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1160:     DefragInit();",
      "1163:     if (p1 == NULL)",
      "1164:         goto end;",
      "1166:     if (p2 == NULL)",
      "1167:         goto end;",
      "1169:     if (p3 == NULL)",
      "1170:         goto end;",
      "",
      "[Removed Lines]",
      "1162:     p1 = BuildTestPacket(id, 0, 1, 'A', 8);",
      "1165:     p2 = BuildTestPacket(id, 1, 1, 'B', 8);",
      "1168:     p3 = BuildTestPacket(id, 2, 0, 'C', 3);",
      "",
      "[Added Lines]",
      "1162:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
      "1165:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
      "1168:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1237:     DefragInit();",
      "1240:     if (p1 == NULL)",
      "1241:         goto end;",
      "1243:     if (p2 == NULL)",
      "1244:         goto end;",
      "1246:     if (p3 == NULL)",
      "1247:         goto end;",
      "",
      "[Removed Lines]",
      "1239:     p1 = BuildTestPacket(id, 0, 1, 'A', 8);",
      "1242:     p2 = BuildTestPacket(id, 1, 1, 'B', 8);",
      "1245:     p3 = BuildTestPacket(id, 2, 0, 'C', 3);",
      "",
      "[Added Lines]",
      "1239:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
      "1242:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
      "1245:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1309:     DefragInit();",
      "1312:     if (p1 == NULL)",
      "1313:         goto end;",
      "1315:     if (p2 == NULL)",
      "1316:         goto end;",
      "1318:     if (p3 == NULL)",
      "1319:         goto end;",
      "",
      "[Removed Lines]",
      "1311:     p1 = IPV6BuildTestPacket(id, 0, 1, 'A', 8);",
      "1314:     p2 = IPV6BuildTestPacket(id, 1, 1, 'B', 8);",
      "1317:     p3 = IPV6BuildTestPacket(id, 2, 0, 'C', 3);",
      "",
      "[Added Lines]",
      "1311:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
      "1314:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
      "1317:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1378:     if (dc == NULL)",
      "1379:         goto end;",
      "1382:     if (p1 == NULL)",
      "1383:         goto end;",
      "1385:     if (p2 == NULL)",
      "1386:         goto end;",
      "1388:     if (p3 == NULL)",
      "1389:         goto end;",
      "",
      "[Removed Lines]",
      "1381:     p1 = IPV6BuildTestPacket(id, 0, 1, 'A', 8);",
      "1384:     p2 = IPV6BuildTestPacket(id, 1, 1, 'B', 8);",
      "1387:     p3 = IPV6BuildTestPacket(id, 2, 0, 'C', 3);",
      "",
      "[Added Lines]",
      "1381:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
      "1384:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
      "1387:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1509:     default_policy = policy;",
      "",
      "[Removed Lines]",
      "1455:     packets[0] = BuildTestPacket(id, 0, 1, 'A', 24);",
      "1458:     packets[1] = BuildTestPacket(id, 32 >> 3, 1, 'B', 16);",
      "1461:     packets[2] = BuildTestPacket(id, 48 >> 3, 1, 'C', 24);",
      "1464:     packets[3] = BuildTestPacket(id, 80 >> 3, 1, 'D', 8);",
      "1467:     packets[4] = BuildTestPacket(id, 104 >> 3, 1, 'E', 16);",
      "1470:     packets[5] = BuildTestPacket(id, 120 >> 3, 1, 'F', 24);",
      "1473:     packets[6] = BuildTestPacket(id, 144 >> 3, 1, 'G', 16);",
      "1476:     packets[7] = BuildTestPacket(id, 160 >> 3, 1, 'H', 16);",
      "1479:     packets[8] = BuildTestPacket(id, 176 >> 3, 1, 'I', 8);",
      "1486:     packets[9] = BuildTestPacket(id, 8 >> 3, 1, 'J', 32);",
      "1489:     packets[10] = BuildTestPacket(id, 48 >> 3, 1, 'K', 24);",
      "1492:     packets[11] = BuildTestPacket(id, 72 >> 3, 1, 'L', 24);",
      "1495:     packets[12] = BuildTestPacket(id, 96 >> 3, 1, 'M', 24);",
      "1498:     packets[13] = BuildTestPacket(id, 128 >> 3, 1, 'N', 8);",
      "1501:     packets[14] = BuildTestPacket(id, 152 >> 3, 1, 'O', 8);",
      "1504:     packets[15] = BuildTestPacket(id, 160 >> 3, 1, 'P', 8);",
      "1507:     packets[16] = BuildTestPacket(id, 176 >> 3, 0, 'Q', 16);",
      "",
      "[Added Lines]",
      "1455:     packets[0] = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 24);",
      "1458:     packets[1] = BuildTestPacket(IPPROTO_ICMP, id, 32 >> 3, 1, 'B', 16);",
      "1461:     packets[2] = BuildTestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'C', 24);",
      "1464:     packets[3] = BuildTestPacket(IPPROTO_ICMP, id, 80 >> 3, 1, 'D', 8);",
      "1467:     packets[4] = BuildTestPacket(IPPROTO_ICMP, id, 104 >> 3, 1, 'E', 16);",
      "1470:     packets[5] = BuildTestPacket(IPPROTO_ICMP, id, 120 >> 3, 1, 'F', 24);",
      "1473:     packets[6] = BuildTestPacket(IPPROTO_ICMP, id, 144 >> 3, 1, 'G', 16);",
      "1476:     packets[7] = BuildTestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'H', 16);",
      "1479:     packets[8] = BuildTestPacket(IPPROTO_ICMP, id, 176 >> 3, 1, 'I', 8);",
      "1486:     packets[9] = BuildTestPacket(IPPROTO_ICMP, id, 8 >> 3, 1, 'J', 32);",
      "1489:     packets[10] = BuildTestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'K', 24);",
      "1492:     packets[11] = BuildTestPacket(IPPROTO_ICMP, id, 72 >> 3, 1, 'L', 24);",
      "1495:     packets[12] = BuildTestPacket(IPPROTO_ICMP, id, 96 >> 3, 1, 'M', 24);",
      "1498:     packets[13] = BuildTestPacket(IPPROTO_ICMP, id, 128 >> 3, 1, 'N', 8);",
      "1501:     packets[14] = BuildTestPacket(IPPROTO_ICMP, id, 152 >> 3, 1, 'O', 8);",
      "1504:     packets[15] = BuildTestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'P', 8);",
      "1507:     packets[16] = BuildTestPacket(IPPROTO_ICMP, id, 176 >> 3, 0, 'Q', 16);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1644:     default_policy = policy;",
      "",
      "[Removed Lines]",
      "1590:     packets[0] = IPV6BuildTestPacket(id, 0, 1, 'A', 24);",
      "1593:     packets[1] = IPV6BuildTestPacket(id, 32 >> 3, 1, 'B', 16);",
      "1596:     packets[2] = IPV6BuildTestPacket(id, 48 >> 3, 1, 'C', 24);",
      "1599:     packets[3] = IPV6BuildTestPacket(id, 80 >> 3, 1, 'D', 8);",
      "1602:     packets[4] = IPV6BuildTestPacket(id, 104 >> 3, 1, 'E', 16);",
      "1605:     packets[5] = IPV6BuildTestPacket(id, 120 >> 3, 1, 'F', 24);",
      "1608:     packets[6] = IPV6BuildTestPacket(id, 144 >> 3, 1, 'G', 16);",
      "1611:     packets[7] = IPV6BuildTestPacket(id, 160 >> 3, 1, 'H', 16);",
      "1614:     packets[8] = IPV6BuildTestPacket(id, 176 >> 3, 1, 'I', 8);",
      "1621:     packets[9] = IPV6BuildTestPacket(id, 8 >> 3, 1, 'J', 32);",
      "1624:     packets[10] = IPV6BuildTestPacket(id, 48 >> 3, 1, 'K', 24);",
      "1627:     packets[11] = IPV6BuildTestPacket(id, 72 >> 3, 1, 'L', 24);",
      "1630:     packets[12] = IPV6BuildTestPacket(id, 96 >> 3, 1, 'M', 24);",
      "1633:     packets[13] = IPV6BuildTestPacket(id, 128 >> 3, 1, 'N', 8);",
      "1636:     packets[14] = IPV6BuildTestPacket(id, 152 >> 3, 1, 'O', 8);",
      "1639:     packets[15] = IPV6BuildTestPacket(id, 160 >> 3, 1, 'P', 8);",
      "1642:     packets[16] = IPV6BuildTestPacket(id, 176 >> 3, 0, 'Q', 16);",
      "",
      "[Added Lines]",
      "1590:     packets[0] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 24);",
      "1593:     packets[1] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 32 >> 3, 1, 'B', 16);",
      "1596:     packets[2] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 48 >> 3, 1, 'C', 24);",
      "1599:     packets[3] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 80 >> 3, 1, 'D', 8);",
      "1602:     packets[4] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 104 >> 3, 1, 'E', 16);",
      "1605:     packets[5] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 120 >> 3, 1, 'F', 24);",
      "1608:     packets[6] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 144 >> 3, 1, 'G', 16);",
      "1611:     packets[7] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 160 >> 3, 1, 'H', 16);",
      "1614:     packets[8] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 176 >> 3, 1, 'I', 8);",
      "1621:     packets[9] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 8 >> 3, 1, 'J', 32);",
      "1624:     packets[10] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 48 >> 3, 1, 'K', 24);",
      "1627:     packets[11] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 72 >> 3, 1, 'L', 24);",
      "1630:     packets[12] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 96 >> 3, 1, 'M', 24);",
      "1633:     packets[13] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 128 >> 3, 1, 'N', 8);",
      "1636:     packets[14] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 152 >> 3, 1, 'O', 8);",
      "1639:     packets[15] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 160 >> 3, 1, 'P', 8);",
      "1642:     packets[16] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 176 >> 3, 0, 'Q', 16);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2127:     for (i = 0; i < 16; i++) {",
      "2129:         if (p == NULL)",
      "2130:             goto end;",
      "",
      "[Removed Lines]",
      "2128:         Packet *p = BuildTestPacket(i, 0, 1, 'A' + i, 16);",
      "",
      "[Added Lines]",
      "2128:         Packet *p = BuildTestPacket(IPPROTO_ICMP,i, 0, 1, 'A' + i, 16);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2145:     if (p == NULL)",
      "2146:         goto end;",
      "",
      "[Removed Lines]",
      "2144:     Packet *p = BuildTestPacket(99, 0, 1, 'A' + i, 16);",
      "",
      "[Added Lines]",
      "2144:     Packet *p = BuildTestPacket(IPPROTO_ICMP, 99, 0, 1, 'A' + i, 16);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2189:         goto end;",
      "2193:     if (p == NULL)",
      "2194:         goto end;",
      "",
      "[Removed Lines]",
      "2192:     p = BuildTestPacket(id, 1, 0, 'A', 0);",
      "",
      "[Added Lines]",
      "2192:     p = BuildTestPacket(IPPROTO_ICMP, id, 1, 0, 'A', 0);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2232:     if (p == NULL)",
      "2233:         goto end;",
      "",
      "[Removed Lines]",
      "2231:     p = BuildTestPacket(1, 8183, 0, 'A', 71);",
      "",
      "[Added Lines]",
      "2231:     p = BuildTestPacket(IPPROTO_ICMP, 1, 8183, 0, 'A', 71);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2268:     DefragInit();",
      "2271:     if (p1 == NULL)",
      "2272:         goto end;",
      "2274:     if (p2 == NULL)",
      "2275:         goto end;",
      "",
      "[Removed Lines]",
      "2270:     p1 = BuildTestPacket(1, 0, 1, 'A', 8);",
      "2273:     p2 = BuildTestPacket(1, 1, 0, 'B', 8);",
      "",
      "[Added Lines]",
      "2270:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
      "2273:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2314:     DefragInit();",
      "2317:     if (p1 == NULL)",
      "2318:         goto end;",
      "2320:     if (p2 == NULL)",
      "2321:         goto end;",
      "",
      "[Removed Lines]",
      "2316:     p1 = BuildTestPacket(1, 0, 1, 'A', 8);",
      "2319:     p2 = BuildTestPacket(1, 1, 0, 'B', 8);",
      "",
      "[Added Lines]",
      "2316:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
      "2319:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2365:     if (p1 == NULL) {",
      "2366:         goto end;",
      "2367:     }",
      "",
      "[Removed Lines]",
      "2364:     p1 = BuildTestPacket(id, 0, 0, 'A', 8);",
      "",
      "[Added Lines]",
      "2364:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 0, 'A', 8);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2432:     DefragInit();",
      "2437:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
      "2438:         goto end;",
      "2439:     }",
      "",
      "[Removed Lines]",
      "2434:     Packet *p1 = BuildTestPacket(ip_id, 2, 1, 'C', 8);",
      "2435:     Packet *p2 = BuildTestPacket(ip_id, 0, 1, 'A', 8);",
      "2436:     Packet *p3 = BuildTestPacket(ip_id, 1, 0, 'B', 8);",
      "",
      "[Added Lines]",
      "2434:     Packet *p1 = BuildTestPacket(IPPROTO_ICMP, ip_id, 2, 1, 'C', 8);",
      "2435:     Packet *p2 = BuildTestPacket(IPPROTO_ICMP, ip_id, 0, 1, 'A', 8);",
      "2436:     Packet *p3 = BuildTestPacket(IPPROTO_ICMP, ip_id, 1, 0, 'B', 8);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2496:     DefragInit();",
      "2501:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
      "2502:         goto end;",
      "2503:     }",
      "",
      "[Removed Lines]",
      "2498:     Packet *p1 = IPV6BuildTestPacket(ip_id, 2, 1, 'C', 8);",
      "2499:     Packet *p2 = IPV6BuildTestPacket(ip_id, 0, 1, 'A', 8);",
      "2500:     Packet *p3 = IPV6BuildTestPacket(ip_id, 1, 0, 'B', 8);",
      "",
      "[Added Lines]",
      "2498:     Packet *p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 2, 1, 'C', 8);",
      "2499:     Packet *p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 0, 1, 'A', 8);",
      "2500:     Packet *p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 1, 0, 'B', 8);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2542:     return retval;",
      "2543: }",
      "2547: void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2549: static int DefragTestBadProto(void)",
      "2550: {",
      "2551:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
      "2552:     int id = 12;",
      "2554:     DefragInit();",
      "2556:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
      "2557:     FAIL_IF_NULL(p1);",
      "2558:     p2 = BuildTestPacket(IPPROTO_UDP, id, 1, 1, 'B', 8);",
      "2559:     FAIL_IF_NULL(p2);",
      "2560:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
      "2561:     FAIL_IF_NULL(p3);",
      "2563:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p1, NULL));",
      "2564:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p2, NULL));",
      "2565:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p3, NULL));",
      "2567:     if (p1 != NULL)",
      "2568:         SCFree(p1);",
      "2569:     if (p2 != NULL)",
      "2570:         SCFree(p2);",
      "2571:     if (p3 != NULL)",
      "2572:         SCFree(p3);",
      "2574:     DefragDestroy();",
      "2575:     PASS;",
      "2576: }",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "2583:     UtRegisterTest(\"DefragTimeoutTest\", DefragTimeoutTest);",
      "2584:     UtRegisterTest(\"DefragMfIpv4Test\", DefragMfIpv4Test);",
      "2585:     UtRegisterTest(\"DefragMfIpv6Test\", DefragMfIpv6Test);",
      "2587: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2619:     UtRegisterTest(\"DefragTestBadProto\", DefragTestBadProto);",
      "",
      "---------------"
    ],
    "src/defrag.h||src/defrag.h": [
      "File: src/defrag.h -> src/defrag.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00c6b7e44d9b6ca1fab2061f8a1241247ac93028",
      "candidate_info": {
        "commit_hash": "00c6b7e44d9b6ca1fab2061f8a1241247ac93028",
        "repo": "inliniac/suricata",
        "commit_url": "https://github.com/inliniac/suricata/commit/00c6b7e44d9b6ca1fab2061f8a1241247ac93028",
        "files": [
          "src/defrag-hash.c"
        ],
        "message": "defrag: fix argument used in macro to match signature\n\n\"p\" was being used in the macro but was not an argument to\nthe macro, but it worked due to the context of the macro.\n\nUse the actual macro argument, d2, instead of p.\n\nResults in no change to generated code.",
        "before_after_code_files": [
          "src/defrag-hash.c||src/defrag-hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag-hash.c||src/defrag-hash.c"
          ],
          "candidate": [
            "src/defrag-hash.c||src/defrag-hash.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag-hash.c||src/defrag-hash.c": [
          "File: src/defrag-hash.c -> src/defrag-hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:        CMP_ADDR(&(d1)->dst_addr, &(d2)->dst)) || \\",
          "408:       (CMP_ADDR(&(d1)->src_addr, &(d2)->dst) && \\",
          "409:        CMP_ADDR(&(d1)->dst_addr, &(d2)->src))) && \\",
          "411:      (d1)->id == (id) && \\",
          "412:      (d1)->vlan_id[0] == (d2)->vlan_id[0] && \\",
          "413:      (d1)->vlan_id[1] == (d2)->vlan_id[1])",
          "",
          "[Removed Lines]",
          "410:      (d1)->proto == IP_GET_IPPROTO(p) &&        \\",
          "",
          "[Added Lines]",
          "410:      (d1)->proto == IP_GET_IPPROTO(d2) &&   \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ca1a29bbd6cfe05f20a9d9717be7b98214a3591",
      "candidate_info": {
        "commit_hash": "3ca1a29bbd6cfe05f20a9d9717be7b98214a3591",
        "repo": "inliniac/suricata",
        "commit_url": "https://github.com/inliniac/suricata/commit/3ca1a29bbd6cfe05f20a9d9717be7b98214a3591",
        "files": [
          "src/defrag-hash.c"
        ],
        "message": "defrag: fix argument used in macro to match signature\n\n\"p\" was being used in the macro but was not an argument to\nthe macro, but it worked due to the context of the macro.\n\nUse the actual macro argument, d2, instead of p.\n\nResults in no change to generated code.",
        "before_after_code_files": [
          "src/defrag-hash.c||src/defrag-hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag-hash.c||src/defrag-hash.c"
          ],
          "candidate": [
            "src/defrag-hash.c||src/defrag-hash.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag-hash.c||src/defrag-hash.c": [
          "File: src/defrag-hash.c -> src/defrag-hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:        CMP_ADDR(&(d1)->dst_addr, &(d2)->dst)) || \\",
          "408:       (CMP_ADDR(&(d1)->src_addr, &(d2)->dst) && \\",
          "409:        CMP_ADDR(&(d1)->dst_addr, &(d2)->src))) && \\",
          "411:      (d1)->id == (id) && \\",
          "412:      (d1)->vlan_id[0] == (d2)->vlan_id[0] && \\",
          "413:      (d1)->vlan_id[1] == (d2)->vlan_id[1])",
          "",
          "[Removed Lines]",
          "410:      (d1)->proto == IP_GET_IPPROTO(p) &&        \\",
          "",
          "[Added Lines]",
          "410:      (d1)->proto == IP_GET_IPPROTO(d2) &&   \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7005a77958709d393dd150db515f116bdd30fb66",
      "candidate_info": {
        "commit_hash": "7005a77958709d393dd150db515f116bdd30fb66",
        "repo": "inliniac/suricata",
        "commit_url": "https://github.com/inliniac/suricata/commit/7005a77958709d393dd150db515f116bdd30fb66",
        "files": [
          "src/defrag.c"
        ],
        "message": "defrag: use new unit test macros\n\nAlso reformat unit test functions to Suricata style.",
        "before_after_code_files": [
          "src/defrag.c||src/defrag.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag.c||src/defrag.c"
          ],
          "candidate": [
            "src/defrag.c||src/defrag.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag.c||src/defrag.c": [
          "File: src/defrag.c -> src/defrag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001: {",
          "1002:     Packet *p = NULL;",
          "1003:     int hlen = 20;",
          "",
          "[Removed Lines]",
          "998: static Packet *",
          "999: BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
          "1000:     const char content, int content_len)",
          "",
          "[Added Lines]",
          "998: static Packet *BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
          "999:         const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1017:     ip4h.ip_verhl |= hlen >> 2;",
          "1018:     ip4h.ip_len = htons(hlen + content_len);",
          "1019:     ip4h.ip_id = htons(id);",
          "1021:     if (mf)",
          "1022:         ip4h.ip_off = htons(IP_MF | off);",
          "1023:     else",
          "",
          "[Removed Lines]",
          "1020:     ip4h.ip_off = htons(off);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1073:                           uint16_t hdrextlen, uint16_t plen,",
          "1074:                           uint16_t prev_hdrextlen);",
          "1079: {",
          "1080:     Packet *p = NULL;",
          "1081:     uint8_t *pcontent;",
          "",
          "[Removed Lines]",
          "1076: static Packet *",
          "1077: IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off, int mf,",
          "1078:     const char content, int content_len)",
          "",
          "[Added Lines]",
          "1074: static Packet *IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off,",
          "1075:         int mf, const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:     return p;",
          "1140: error:",
          "1142:     if (p != NULL)",
          "1143:         SCFree(p);",
          "1144:     return NULL;",
          "",
          "[Removed Lines]",
          "1141:     fprintf(stderr, \"Error building test packet.\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1153: {",
          "1154:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1155:     Packet *reassembled = NULL;",
          "1156:     int id = 12;",
          "1157:     int i;",
          "1160:     DefragInit();",
          "1162:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1165:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1168:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "1177:     reassembled = Defrag(NULL, NULL, p3, NULL);",
          "1190:     for (i = 20; i < 20 + 8; i++) {",
          "1194:     }",
          "1197:     for (i = 28; i < 28 + 8; i++) {",
          "1201:     }",
          "1204:     for (i = 36; i < 36 + 3; i++) {",
          "1207:     }",
          "1221:     DefragDestroy();",
          "1223: }",
          "1230: {",
          "1231:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1232:     Packet *reassembled = NULL;",
          "1233:     int id = 12;",
          "1234:     int i;",
          "1237:     DefragInit();",
          "1239:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1242:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1245:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "1254:     reassembled = Defrag(NULL, NULL, p1, NULL);",
          "1264:     for (i = 20; i < 20 + 8; i++) {",
          "1267:     }",
          "1270:     for (i = 28; i < 28 + 8; i++) {",
          "1273:     }",
          "1276:     for (i = 36; i < 36 + 3; i++) {",
          "1279:     }",
          "1292:     DefragDestroy();",
          "1294: }",
          "1302: {",
          "1303:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1304:     Packet *reassembled = NULL;",
          "1305:     int id = 12;",
          "1306:     int i;",
          "1309:     DefragInit();",
          "1311:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1314:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1317:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "1325:     reassembled = Defrag(NULL, NULL, p3, NULL);",
          "1333:     for (i = 40; i < 40 + 8; i++) {",
          "1336:     }",
          "1339:     for (i = 48; i < 48 + 8; i++) {",
          "1342:     }",
          "1345:     for (i = 56; i < 56 + 3; i++) {",
          "1348:     }",
          "1361:     DefragDestroy();",
          "1363: }",
          "1367: {",
          "1368:     DefragContext *dc = NULL;",
          "1369:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1370:     Packet *reassembled = NULL;",
          "1371:     int id = 12;",
          "1372:     int i;",
          "1375:     DefragInit();",
          "1377:     dc = DefragContextNew();",
          "1381:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1384:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1387:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "1395:     reassembled = Defrag(NULL, NULL, p1, NULL);",
          "1400:     for (i = 40; i < 40 + 8; i++) {",
          "1403:     }",
          "1406:     for (i = 48; i < 48 + 8; i++) {",
          "1409:     }",
          "1412:     for (i = 56; i < 56 + 3; i++) {",
          "1415:     }",
          "1430:     DefragDestroy();",
          "1432: }",
          "1436: {",
          "1437:     int i;",
          "1440:     DefragInit();",
          "",
          "[Removed Lines]",
          "1151: static int",
          "1152: DefragInOrderSimpleTest(void)",
          "1158:     int ret = 0;",
          "1163:     if (p1 == NULL)",
          "1164:         goto end;",
          "1166:     if (p2 == NULL)",
          "1167:         goto end;",
          "1169:     if (p3 == NULL)",
          "1170:         goto end;",
          "1172:     if (Defrag(NULL, NULL, p1, NULL) != NULL)",
          "1173:         goto end;",
          "1174:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1175:         goto end;",
          "1178:     if (reassembled == NULL) {",
          "1179:         goto end;",
          "1180:     }",
          "1182:     if (IPV4_GET_HLEN(reassembled) != 20) {",
          "1183:         goto end;",
          "1184:     }",
          "1185:     if (IPV4_GET_IPLEN(reassembled) != 39) {",
          "1186:         goto end;",
          "1187:     }",
          "1191:         if (GET_PKT_DATA(reassembled)[i] != 'A') {",
          "1192:             goto end;",
          "1193:         }",
          "1198:         if (GET_PKT_DATA(reassembled)[i] != 'B') {",
          "1199:             goto end;",
          "1200:         }",
          "1205:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1206:             goto end;",
          "1209:     ret = 1;",
          "1211: end:",
          "1212:     if (p1 != NULL)",
          "1213:         SCFree(p1);",
          "1214:     if (p2 != NULL)",
          "1215:         SCFree(p2);",
          "1216:     if (p3 != NULL)",
          "1217:         SCFree(p3);",
          "1218:     if (reassembled != NULL)",
          "1219:         SCFree(reassembled);",
          "1222:     return ret;",
          "1228: static int",
          "1229: DefragReverseSimpleTest(void)",
          "1235:     int ret = 0;",
          "1240:     if (p1 == NULL)",
          "1241:         goto end;",
          "1243:     if (p2 == NULL)",
          "1244:         goto end;",
          "1246:     if (p3 == NULL)",
          "1247:         goto end;",
          "1249:     if (Defrag(NULL, NULL, p3, NULL) != NULL)",
          "1250:         goto end;",
          "1251:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1252:         goto end;",
          "1255:     if (reassembled == NULL)",
          "1256:         goto end;",
          "1258:     if (IPV4_GET_HLEN(reassembled) != 20)",
          "1259:         goto end;",
          "1260:     if (IPV4_GET_IPLEN(reassembled) != 39)",
          "1261:         goto end;",
          "1265:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1266:             goto end;",
          "1271:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1272:             goto end;",
          "1277:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1278:             goto end;",
          "1281:     ret = 1;",
          "1282: end:",
          "1283:     if (p1 != NULL)",
          "1284:         SCFree(p1);",
          "1285:     if (p2 != NULL)",
          "1286:         SCFree(p2);",
          "1287:     if (p3 != NULL)",
          "1288:         SCFree(p3);",
          "1289:     if (reassembled != NULL)",
          "1290:         SCFree(reassembled);",
          "1293:     return ret;",
          "1300: static int",
          "1301: IPV6DefragInOrderSimpleTest(void)",
          "1307:     int ret = 0;",
          "1312:     if (p1 == NULL)",
          "1313:         goto end;",
          "1315:     if (p2 == NULL)",
          "1316:         goto end;",
          "1318:     if (p3 == NULL)",
          "1319:         goto end;",
          "1321:     if (Defrag(NULL, NULL, p1, NULL) != NULL)",
          "1322:         goto end;",
          "1323:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1324:         goto end;",
          "1326:     if (reassembled == NULL)",
          "1327:         goto end;",
          "1329:     if (IPV6_GET_PLEN(reassembled) != 19)",
          "1330:         goto end;",
          "1334:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1335:             goto end;",
          "1340:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1341:             goto end;",
          "1346:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1347:             goto end;",
          "1350:     ret = 1;",
          "1351: end:",
          "1352:     if (p1 != NULL)",
          "1353:         SCFree(p1);",
          "1354:     if (p2 != NULL)",
          "1355:         SCFree(p2);",
          "1356:     if (p3 != NULL)",
          "1357:         SCFree(p3);",
          "1358:     if (reassembled != NULL)",
          "1359:         SCFree(reassembled);",
          "1362:     return ret;",
          "1365: static int",
          "1366: IPV6DefragReverseSimpleTest(void)",
          "1373:     int ret = 0;",
          "1378:     if (dc == NULL)",
          "1379:         goto end;",
          "1382:     if (p1 == NULL)",
          "1383:         goto end;",
          "1385:     if (p2 == NULL)",
          "1386:         goto end;",
          "1388:     if (p3 == NULL)",
          "1389:         goto end;",
          "1391:     if (Defrag(NULL, NULL, p3, NULL) != NULL)",
          "1392:         goto end;",
          "1393:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1394:         goto end;",
          "1396:     if (reassembled == NULL)",
          "1397:         goto end;",
          "1401:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1402:             goto end;",
          "1407:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1408:             goto end;",
          "1413:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1414:             goto end;",
          "1417:     ret = 1;",
          "1418: end:",
          "1419:     if (dc != NULL)",
          "1420:         DefragContextDestroy(dc);",
          "1421:     if (p1 != NULL)",
          "1422:         SCFree(p1);",
          "1423:     if (p2 != NULL)",
          "1424:         SCFree(p2);",
          "1425:     if (p3 != NULL)",
          "1426:         SCFree(p3);",
          "1427:     if (reassembled != NULL)",
          "1428:         SCFree(reassembled);",
          "1431:     return ret;",
          "1434: static int",
          "1435: DefragDoSturgesNovakTest(int policy, u_char *expected, size_t expected_len)",
          "1438:     int ret = 0;",
          "",
          "[Added Lines]",
          "1147: static int DefragInOrderSimpleTest(void)",
          "1157:     FAIL_IF_NULL(p1);",
          "1159:     FAIL_IF_NULL(p2);",
          "1161:     FAIL_IF_NULL(p3);",
          "1163:     FAIL_IF(Defrag(NULL, NULL, p1, NULL) != NULL);",
          "1164:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1167:     FAIL_IF_NULL(reassembled);",
          "1169:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1170:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 39);",
          "1174:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1179:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1184:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1187:     SCFree(p1);",
          "1188:     SCFree(p2);",
          "1189:     SCFree(p3);",
          "1190:     SCFree(reassembled);",
          "1193:     PASS;",
          "1199: static int DefragReverseSimpleTest(void)",
          "1209:     FAIL_IF_NULL(p1);",
          "1211:     FAIL_IF_NULL(p2);",
          "1213:     FAIL_IF_NULL(p3);",
          "1215:     FAIL_IF(Defrag(NULL, NULL, p3, NULL) != NULL);",
          "1216:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1219:     FAIL_IF_NULL(reassembled);",
          "1221:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1222:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 39);",
          "1226:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1231:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1236:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1239:     SCFree(p1);",
          "1240:     SCFree(p2);",
          "1241:     SCFree(p3);",
          "1242:     SCFree(reassembled);",
          "1245:     PASS;",
          "1252: static int IPV6DefragInOrderSimpleTest(void)",
          "1262:     FAIL_IF_NULL(p1);",
          "1264:     FAIL_IF_NULL(p2);",
          "1266:     FAIL_IF_NULL(p3);",
          "1268:     FAIL_IF(Defrag(NULL, NULL, p1, NULL) != NULL);",
          "1269:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1271:     FAIL_IF_NULL(reassembled);",
          "1273:     FAIL_IF(IPV6_GET_PLEN(reassembled) != 19);",
          "1277:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1282:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1287:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1290:     SCFree(p1);",
          "1291:     SCFree(p2);",
          "1292:     SCFree(p3);",
          "1293:     SCFree(reassembled);",
          "1296:     PASS;",
          "1299: static int IPV6DefragReverseSimpleTest(void)",
          "1310:     FAIL_IF_NULL(dc);",
          "1313:     FAIL_IF_NULL(p1);",
          "1315:     FAIL_IF_NULL(p2);",
          "1317:     FAIL_IF_NULL(p3);",
          "1319:     FAIL_IF(Defrag(NULL, NULL, p3, NULL) != NULL);",
          "1320:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1322:     FAIL_IF_NULL(reassembled);",
          "1326:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1331:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1336:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1339:     DefragContextDestroy(dc);",
          "1340:     SCFree(p1);",
          "1341:     SCFree(p2);",
          "1342:     SCFree(p3);",
          "1343:     SCFree(reassembled);",
          "1346:     PASS;",
          "1349: static int DefragDoSturgesNovakTest(int policy, u_char *expected,",
          "1350:         size_t expected_len)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1512:     for (i = 0; i < 9; i++) {",
          "1513:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1521:     }",
          "1522:     int overlap = 0;",
          "1523:     for (; i < 16; i++) {",
          "1524:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1529:         if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {",
          "1530:             overlap++;",
          "1531:         }",
          "1532:     }",
          "1538:     Packet *reassembled = Defrag(NULL, NULL, packets[16], NULL);",
          "1553:     SCFree(reassembled);",
          "1562:     for (i = 0; i < 17; i++) {",
          "1563:         SCFree(packets[i]);",
          "1564:     }",
          "1565:     DefragDestroy();",
          "1567: }",
          "1571: {",
          "1572:     int i;",
          "1575:     DefragInit();",
          "",
          "[Removed Lines]",
          "1514:         if (tp != NULL) {",
          "1515:             SCFree(tp);",
          "1516:             goto end;",
          "1517:         }",
          "1518:         if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {",
          "1519:             goto end;",
          "1520:         }",
          "1525:         if (tp != NULL) {",
          "1526:             SCFree(tp);",
          "1527:             goto end;",
          "1528:         }",
          "1533:     if (!overlap) {",
          "1534:         goto end;",
          "1535:     }",
          "1539:     if (reassembled == NULL) {",
          "1540:         goto end;",
          "1541:     }",
          "1543:     if (IPV4_GET_HLEN(reassembled) != 20) {",
          "1544:         goto end;",
          "1545:     }",
          "1546:     if (IPV4_GET_IPLEN(reassembled) != 20 + 192) {",
          "1547:         goto end;",
          "1548:     }",
          "1550:     if (memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0) {",
          "1551:         goto end;",
          "1552:     }",
          "1556:     if (defrag_context->frag_pool->outstanding != 0) {",
          "1557:         goto end;",
          "1558:     }",
          "1560:     ret = 1;",
          "1561: end:",
          "1566:     return ret;",
          "1569: static int",
          "1570: IPV6DefragDoSturgesNovakTest(int policy, u_char *expected, size_t expected_len)",
          "1573:     int ret = 0;",
          "",
          "[Added Lines]",
          "1428:         FAIL_IF_NOT_NULL(tp);",
          "1429:         FAIL_IF(ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP));",
          "1434:         FAIL_IF_NOT_NULL(tp);",
          "1439:     FAIL_IF_NOT(overlap);",
          "1443:     FAIL_IF_NULL(reassembled);",
          "1445:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1446:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 20 + 192);",
          "1448:     FAIL_IF(memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0);",
          "1452:     FAIL_IF(defrag_context->frag_pool->outstanding != 0);",
          "1458:     PASS;",
          "1461: static int IPV6DefragDoSturgesNovakTest(int policy, u_char *expected,",
          "1462:         size_t expected_len)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1647:     for (i = 0; i < 9; i++) {",
          "1648:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1656:     }",
          "1657:     int overlap = 0;",
          "1658:     for (; i < 16; i++) {",
          "1659:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1664:         if (ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP)) {",
          "1665:             overlap++;",
          "1666:         }",
          "1667:     }",
          "1672:     Packet *reassembled = Defrag(NULL, NULL, packets[16], NULL);",
          "1681:     SCFree(reassembled);",
          "1692:     for (i = 0; i < 17; i++) {",
          "1693:         SCFree(packets[i]);",
          "1694:     }",
          "1695:     DefragDestroy();",
          "1697: }",
          "1699: static int",
          "",
          "[Removed Lines]",
          "1649:         if (tp != NULL) {",
          "1650:             SCFree(tp);",
          "1651:             goto end;",
          "1652:         }",
          "1653:         if (ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP)) {",
          "1654:             goto end;",
          "1655:         }",
          "1660:         if (tp != NULL) {",
          "1661:             SCFree(tp);",
          "1662:             goto end;",
          "1663:         }",
          "1668:     if (!overlap)",
          "1669:         goto end;",
          "1673:     if (reassembled == NULL)",
          "1674:         goto end;",
          "1675:     if (memcmp(GET_PKT_DATA(reassembled) + 40, expected, expected_len) != 0)",
          "1676:         goto end;",
          "1678:     if (IPV6_GET_PLEN(reassembled) != 192)",
          "1679:         goto end;",
          "1684:     if (defrag_context->frag_pool->outstanding != 0) {",
          "1685:         printf(\"defrag_context->frag_pool->outstanding %u: \", defrag_context->frag_pool->outstanding);",
          "1686:         goto end;",
          "1687:     }",
          "1689:     ret = 1;",
          "1691: end:",
          "1696:     return ret;",
          "",
          "[Added Lines]",
          "1540:         FAIL_IF_NOT_NULL(tp);",
          "1541:         FAIL_IF(ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP));",
          "1546:         FAIL_IF_NOT_NULL(tp);",
          "1551:     FAIL_IF_NOT(overlap);",
          "1555:     FAIL_IF_NULL(reassembled);",
          "1556:     FAIL_IF(memcmp(GET_PKT_DATA(reassembled) + 40, expected, expected_len) != 0);",
          "1558:     FAIL_IF(IPV6_GET_PLEN(reassembled) != 192);",
          "1563:     FAIL_IF(defrag_context->frag_pool->outstanding != 0);",
          "1569:     PASS;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1727:         \"QQQQQQQQ\"",
          "1728:     };",
          "1731: }",
          "1735: {",
          "1737:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1730:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected, sizeof(expected));",
          "1733: static int",
          "1734: IPV6DefragSturgesNovakBsdTest(void)",
          "",
          "[Added Lines]",
          "1603:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected,",
          "1604:                     sizeof(expected)));",
          "1605:     PASS;",
          "1608: static int IPV6DefragSturgesNovakBsdTest(void)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1761:         \"QQQQQQQQ\"",
          "1762:     };",
          "1765: }",
          "1769: {",
          "1771:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1764:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected, sizeof(expected));",
          "1767: static int",
          "1768: DefragSturgesNovakLinuxTest(void)",
          "",
          "[Added Lines]",
          "1638:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected,",
          "1639:                     sizeof(expected)));",
          "1640:     PASS;",
          "1643: static int DefragSturgesNovakLinuxTest(void)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1795:         \"QQQQQQQQ\"",
          "1796:     };",
          "1799: }",
          "1803: {",
          "1805:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1798:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected, sizeof(expected));",
          "1801: static int",
          "1802: IPV6DefragSturgesNovakLinuxTest(void)",
          "",
          "[Added Lines]",
          "1673:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1674:                     sizeof(expected)));",
          "1675:     PASS;",
          "1678: static int IPV6DefragSturgesNovakLinuxTest(void)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1829:         \"QQQQQQQQ\"",
          "1830:     };",
          "1834: }",
          "1838: {",
          "1840:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1832:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1833:         sizeof(expected));",
          "1836: static int",
          "1837: DefragSturgesNovakWindowsTest(void)",
          "",
          "[Added Lines]",
          "1708:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1709:             sizeof(expected)));",
          "1710:     PASS;",
          "1713: static int DefragSturgesNovakWindowsTest(void)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1864:         \"QQQQQQQQ\"",
          "1865:     };",
          "1868: }",
          "1872: {",
          "1874:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1867:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected, sizeof(expected));",
          "1870: static int",
          "1871: IPV6DefragSturgesNovakWindowsTest(void)",
          "",
          "[Added Lines]",
          "1743:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1744:                     sizeof(expected)));",
          "1745:     PASS;",
          "1748: static int IPV6DefragSturgesNovakWindowsTest(void)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1898:         \"QQQQQQQQ\"",
          "1899:     };",
          "1903: }",
          "1907: {",
          "1909:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1901:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1902:         sizeof(expected));",
          "1905: static int",
          "1906: DefragSturgesNovakSolarisTest(void)",
          "",
          "[Added Lines]",
          "1778:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1779:                     sizeof(expected)));",
          "1780:     PASS;",
          "1783: static int DefragSturgesNovakSolarisTest(void)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1933:         \"QQQQQQQQ\"",
          "1934:     };",
          "1937: }",
          "1941: {",
          "1943:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1936:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected, sizeof(expected));",
          "1939: static int",
          "1940: IPV6DefragSturgesNovakSolarisTest(void)",
          "",
          "[Added Lines]",
          "1813:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1814:                     sizeof(expected)));",
          "1815:     PASS;",
          "1818: static int IPV6DefragSturgesNovakSolarisTest(void)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1967:         \"QQQQQQQQ\"",
          "1968:     };",
          "1972: }",
          "1976: {",
          "1978:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1970:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1971:         sizeof(expected));",
          "1974: static int",
          "1975: DefragSturgesNovakFirstTest(void)",
          "",
          "[Added Lines]",
          "1848:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1849:                     sizeof(expected)));",
          "1850:     PASS;",
          "1853: static int DefragSturgesNovakFirstTest(void)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2002:         \"QQQQQQQQ\"",
          "2003:     };",
          "2006: }",
          "2010: {",
          "2012:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "2005:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_FIRST, expected, sizeof(expected));",
          "2008: static int",
          "2009: IPV6DefragSturgesNovakFirstTest(void)",
          "",
          "[Added Lines]",
          "1883:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_FIRST, expected,",
          "1884:                     sizeof(expected)));",
          "1885:     PASS;",
          "1888: static int IPV6DefragSturgesNovakFirstTest(void)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2071:         \"QQQQQQQQ\"",
          "2072:     };",
          "2075: }",
          "2079: {",
          "2081:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "2074:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected, sizeof(expected));",
          "2077: static int",
          "2078: IPV6DefragSturgesNovakLastTest(void)",
          "",
          "[Added Lines]",
          "1953:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "1954:                     sizeof(expected)));",
          "1955:     PASS;",
          "1958: static int IPV6DefragSturgesNovakLastTest(void)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2105:         \"QQQQQQQQ\"",
          "2106:     };",
          "2110: }",
          "2114: {",
          "2115:     int i;",
          "2124:     DefragInit();",
          "2127:     for (i = 0; i < 16; i++) {",
          "2128:         Packet *p = BuildTestPacket(IPPROTO_ICMP,i, 0, 1, 'A' + i, 16);",
          "2132:         Packet *tp = Defrag(NULL, NULL, p, NULL);",
          "2134:         SCFree(p);",
          "2140:     }",
          "2144:     Packet *p = BuildTestPacket(IPPROTO_ICMP, 99, 0, 1, 'A' + i, 16);",
          "2148:     p->ts.tv_sec += (defrag_context->timeout + 1);",
          "2149:     Packet *tp = Defrag(NULL, NULL, p, NULL);",
          "2156:     DefragTracker *tracker = DefragLookupTrackerFromHash(p);",
          "2163:     SCFree(p);",
          "2167:     DefragDestroy();",
          "2169: }",
          "",
          "[Removed Lines]",
          "2108:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "2109:         sizeof(expected));",
          "2112: static int",
          "2113: DefragTimeoutTest(void)",
          "2116:     int ret = 0;",
          "2119:     if (ConfSet(\"defrag.trackers\", \"16\") != 1) {",
          "2120:         printf(\"ConfSet failed: \");",
          "2121:         goto end;",
          "2122:     }",
          "2129:         if (p == NULL)",
          "2130:             goto end;",
          "2136:         if (tp != NULL) {",
          "2137:             SCFree(tp);",
          "2138:             goto end;",
          "2139:         }",
          "2145:     if (p == NULL)",
          "2146:         goto end;",
          "2151:     if (tp != NULL) {",
          "2152:         SCFree(tp);",
          "2153:         goto end;",
          "2154:     }",
          "2157:     if (tracker == NULL)",
          "2158:         goto end;",
          "2160:     if (tracker->id != 99)",
          "2161:         goto end;",
          "2165:     ret = 1;",
          "2166: end:",
          "2168:     return ret;",
          "",
          "[Added Lines]",
          "1988:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "1989:                     sizeof(expected)));",
          "1990:     PASS;",
          "1993: static int DefragTimeoutTest(void)",
          "1998:     FAIL_IF_NOT(ConfSet(\"defrag.trackers\", \"16\"));",
          "2005:         FAIL_IF_NULL(p);",
          "2009:         FAIL_IF_NOT_NULL(tp);",
          "2015:     FAIL_IF_NULL(p);",
          "2019:     FAIL_IF_NOT_NULL(tp);",
          "2022:     FAIL_IF_NULL(tracker);",
          "2024:     FAIL_IF(tracker->id != 99);",
          "2029:     PASS;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2179: {",
          "2180:     DefragContext *dc = NULL;",
          "2181:     Packet *p = NULL;",
          "2182:     int id = 12;",
          "2185:     DefragInit();",
          "2187:     dc = DefragContextNew();",
          "2192:     p = BuildTestPacket(IPPROTO_ICMP, id, 1, 0, 'A', 0);",
          "2212:     DefragDestroy();",
          "2214: }",
          "2218: {",
          "2219:     DefragContext *dc = NULL;",
          "2220:     Packet *p = NULL;",
          "2223:     DefragInit();",
          "2225:     dc = DefragContextNew();",
          "2231:     p = BuildTestPacket(IPPROTO_ICMP, 1, 8183, 0, 'A', 71);",
          "2253:     DefragDestroy();",
          "2255: }",
          "",
          "[Removed Lines]",
          "2177: static int",
          "2178: DefragIPv4NoDataTest(void)",
          "2183:     int ret = 0;",
          "2188:     if (dc == NULL)",
          "2189:         goto end;",
          "2193:     if (p == NULL)",
          "2194:         goto end;",
          "2197:     if (Defrag(NULL, NULL, p, NULL) != NULL)",
          "2198:         goto end;",
          "2202:     if (dc->frag_pool->outstanding != 0)",
          "2203:         return 0;",
          "2205:     ret = 1;",
          "2206: end:",
          "2207:     if (dc != NULL)",
          "2208:         DefragContextDestroy(dc);",
          "2209:     if (p != NULL)",
          "2210:         SCFree(p);",
          "2213:     return ret;",
          "2216: static int",
          "2217: DefragIPv4TooLargeTest(void)",
          "2221:     int ret = 0;",
          "2226:     if (dc == NULL)",
          "2227:         goto end;",
          "2232:     if (p == NULL)",
          "2233:         goto end;",
          "2236:     if (Defrag(NULL, NULL, p, NULL) != NULL)",
          "2237:         goto end;",
          "2238:     if (!ENGINE_ISSET_EVENT(p, IPV4_FRAG_PKT_TOO_LARGE))",
          "2239:         goto end;",
          "2243:     if (dc->frag_pool->outstanding != 0)",
          "2244:         return 0;",
          "2246:     ret = 1;",
          "2247: end:",
          "2248:     if (dc != NULL)",
          "2249:         DefragContextDestroy(dc);",
          "2250:     if (p != NULL)",
          "2251:         SCFree(p);",
          "2254:     return ret;",
          "",
          "[Added Lines]",
          "2038: static int DefragIPv4NoDataTest(void)",
          "2047:     FAIL_IF_NULL(dc);",
          "2051:     FAIL_IF_NULL(p);",
          "2054:     FAIL_IF(Defrag(NULL, NULL, p, NULL) != NULL);",
          "2058:     FAIL_IF(dc->frag_pool->outstanding != 0);",
          "2060:     DefragContextDestroy(dc);",
          "2061:     SCFree(p);",
          "2064:     PASS;",
          "2067: static int DefragIPv4TooLargeTest(void)",
          "2075:     FAIL_IF_NULL(dc);",
          "2080:     FAIL_IF_NULL(p);",
          "2083:     FAIL_IF(Defrag(NULL, NULL, p, NULL) != NULL);",
          "2086:     FAIL_IF_NOT(ENGINE_ISSET_EVENT(p, IPV4_FRAG_PKT_TOO_LARGE));",
          "2090:     FAIL_IF(dc->frag_pool->outstanding != 0);",
          "2092:     DefragContextDestroy(dc);",
          "2093:     SCFree(p);",
          "2096:     PASS;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2264: {",
          "2265:     Packet *p1 = NULL, *p2 = NULL, *r = NULL;",
          "2268:     DefragInit();",
          "2270:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2273:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "2282:     SCFree(r);",
          "2285:     p1->vlan_id[0] = 1;",
          "2286:     p2->vlan_id[0] = 2;",
          "2300:     DefragDestroy();",
          "2303: }",
          "2310: {",
          "2311:     Packet *p1 = NULL, *p2 = NULL, *r = NULL;",
          "2314:     DefragInit();",
          "2316:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2319:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "2328:     SCFree(r);",
          "",
          "[Removed Lines]",
          "2262: static int",
          "2263: DefragVlanTest(void)",
          "2266:     int ret = 0;",
          "2271:     if (p1 == NULL)",
          "2272:         goto end;",
          "2274:     if (p2 == NULL)",
          "2275:         goto end;",
          "2278:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2279:         goto end;",
          "2280:     if ((r = Defrag(NULL, NULL, p2, NULL)) == NULL)",
          "2281:         goto end;",
          "2287:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2288:         goto end;",
          "2289:     if ((r = Defrag(NULL, NULL, p2, NULL)) != NULL)",
          "2290:         goto end;",
          "2293:     ret = 1;",
          "2295: end:",
          "2296:     if (p1 != NULL)",
          "2297:         SCFree(p1);",
          "2298:     if (p2 != NULL)",
          "2299:         SCFree(p2);",
          "2302:     return ret;",
          "2308: static int",
          "2309: DefragVlanQinQTest(void)",
          "2312:     int ret = 0;",
          "2317:     if (p1 == NULL)",
          "2318:         goto end;",
          "2320:     if (p2 == NULL)",
          "2321:         goto end;",
          "2324:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2325:         goto end;",
          "2326:     if ((r = Defrag(NULL, NULL, p2, NULL)) == NULL)",
          "2327:         goto end;",
          "",
          "[Added Lines]",
          "2104: static int DefragVlanTest(void)",
          "2111:     FAIL_IF_NULL(p1);",
          "2113:     FAIL_IF_NULL(p2);",
          "2116:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2117:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) == NULL);",
          "2123:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2124:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) != NULL);",
          "2126:     SCFree(p1);",
          "2127:     SCFree(p2);",
          "2130:     PASS;",
          "2136: static int DefragVlanQinQTest(void)",
          "2143:     FAIL_IF_NULL(p1);",
          "2145:     FAIL_IF_NULL(p2);",
          "2148:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2149:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) == NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2332:     p2->vlan_id[0] = 1;",
          "2333:     p1->vlan_id[1] = 1;",
          "2334:     p2->vlan_id[1] = 2;",
          "2348:     DefragDestroy();",
          "2351: }",
          "2353: static int DefragTrackerReuseTest(void)",
          "2354: {",
          "2356:     int id = 1;",
          "2357:     Packet *p1 = NULL;",
          "2358:     DefragTracker *tracker1 = NULL, *tracker2 = NULL;",
          "",
          "[Removed Lines]",
          "2335:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2336:         goto end;",
          "2337:     if ((r = Defrag(NULL, NULL, p2, NULL)) != NULL)",
          "2338:         goto end;",
          "2341:     ret = 1;",
          "2343: end:",
          "2344:     if (p1 != NULL)",
          "2345:         SCFree(p1);",
          "2346:     if (p2 != NULL)",
          "2347:         SCFree(p2);",
          "2350:     return ret;",
          "2355:     int ret = 0;",
          "",
          "[Added Lines]",
          "2157:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2158:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) != NULL);",
          "2160:     SCFree(p1);",
          "2161:     SCFree(p2);",
          "2164:     PASS;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2364:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 0, 'A', 8);",
          "2370:     tracker1 = DefragGetTracker(NULL, NULL, p1);",
          "2380:     DefragTrackerRelease(tracker1);",
          "2383:     tracker2 = DefragGetTracker(NULL, NULL, p1);",
          "2390:     DefragTrackerRelease(tracker1);",
          "",
          "[Removed Lines]",
          "2365:     if (p1 == NULL) {",
          "2366:         goto end;",
          "2367:     }",
          "2371:     if (tracker1 == NULL) {",
          "2372:         goto end;",
          "2373:     }",
          "2374:     if (tracker1->seen_last) {",
          "2375:         goto end;",
          "2376:     }",
          "2377:     if (tracker1->remove) {",
          "2378:         goto end;",
          "2379:     }",
          "2384:     if (tracker2 == NULL) {",
          "2385:         goto end;",
          "2386:     }",
          "2387:     if (tracker2 != tracker1) {",
          "2388:         goto end;",
          "2389:     }",
          "",
          "[Added Lines]",
          "2178:     FAIL_IF_NULL(p1);",
          "2182:     FAIL_IF_NULL(tracker1);",
          "2183:     FAIL_IF(tracker1->seen_last);",
          "2184:     FAIL_IF(tracker1->remove);",
          "2189:     FAIL_IF_NULL(tracker2);",
          "2190:     FAIL_IF(tracker2 != tracker1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2395:     tracker1->remove = 1;",
          "2397:     tracker2 = DefragGetTracker(NULL, NULL, p1);",
          "2413:     DefragDestroy();",
          "2415: }",
          "",
          "[Removed Lines]",
          "2398:     if (tracker2 == NULL) {",
          "2399:         goto end;",
          "2400:     }",
          "2401:     if (tracker2 == tracker1) {",
          "2402:         goto end;",
          "2403:     }",
          "2404:     if (tracker2->remove) {",
          "2405:         goto end;",
          "2406:     }",
          "2408:     ret = 1;",
          "2409: end:",
          "2410:     if (p1 != NULL) {",
          "2411:         SCFree(p1);",
          "2412:     }",
          "2414:     return ret;",
          "",
          "[Added Lines]",
          "2199:     FAIL_IF_NULL(tracker2);",
          "2200:     FAIL_IF(tracker2 == tracker1);",
          "2201:     FAIL_IF(tracker2->remove);",
          "2203:     SCFree(p1);",
          "2205:     PASS;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2426: static int DefragMfIpv4Test(void)",
          "2427: {",
          "2429:     int ip_id = 9;",
          "2430:     Packet *p = NULL;",
          "",
          "[Removed Lines]",
          "2428:     int retval = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2434:     Packet *p1 = BuildTestPacket(IPPROTO_ICMP, ip_id, 2, 1, 'C', 8);",
          "2435:     Packet *p2 = BuildTestPacket(IPPROTO_ICMP, ip_id, 0, 1, 'A', 8);",
          "2436:     Packet *p3 = BuildTestPacket(IPPROTO_ICMP, ip_id, 1, 0, 'B', 8);",
          "2441:     p = Defrag(NULL, NULL, p1, NULL);",
          "2446:     p = Defrag(NULL, NULL, p2, NULL);",
          "2452:     p = Defrag(NULL, NULL, p3, NULL);",
          "2477:     DefragDestroy();",
          "2479: }",
          "",
          "[Removed Lines]",
          "2437:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2438:         goto end;",
          "2439:     }",
          "2442:     if (p != NULL) {",
          "2443:         goto end;",
          "2444:     }",
          "2447:     if (p != NULL) {",
          "2448:         goto end;",
          "2449:     }",
          "2453:     if (p == NULL) {",
          "2454:         goto end;",
          "2455:     }",
          "2459:     if (IPV4_GET_IPLEN(p) != 36) {",
          "2460:         goto end;",
          "2461:     }",
          "2463:     retval = 1;",
          "2464: end:",
          "2465:     if (p1 != NULL) {",
          "2466:         SCFree(p1);",
          "2467:     }",
          "2468:     if (p2 != NULL) {",
          "2469:         SCFree(p2);",
          "2470:     }",
          "2471:     if (p3 != NULL) {",
          "2472:         SCFree(p3);",
          "2473:     }",
          "2474:     if (p != NULL) {",
          "2475:         SCFree(p);",
          "2476:     }",
          "2478:     return retval;",
          "",
          "[Added Lines]",
          "2227:     FAIL_IF(p1 == NULL || p2 == NULL || p3 == NULL);",
          "2230:     FAIL_IF_NOT_NULL(p);",
          "2233:     FAIL_IF_NOT_NULL(p);",
          "2237:     FAIL_IF_NULL(p);",
          "2241:     FAIL_IF(IPV4_GET_IPLEN(p) != 36);",
          "2243:     SCFree(p1);",
          "2244:     SCFree(p2);",
          "2245:     SCFree(p3);",
          "2246:     SCFree(p);",
          "2248:     PASS;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2490: static int DefragMfIpv6Test(void)",
          "2491: {",
          "2493:     int ip_id = 9;",
          "2494:     Packet *p = NULL;",
          "",
          "[Removed Lines]",
          "2492:     int retval = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2498:     Packet *p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 2, 1, 'C', 8);",
          "2499:     Packet *p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 0, 1, 'A', 8);",
          "2500:     Packet *p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 1, 0, 'B', 8);",
          "2505:     p = Defrag(NULL, NULL, p1, NULL);",
          "2510:     p = Defrag(NULL, NULL, p2, NULL);",
          "2516:     p = Defrag(NULL, NULL, p3, NULL);",
          "2541:     DefragDestroy();",
          "2543: }",
          "",
          "[Removed Lines]",
          "2501:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2502:         goto end;",
          "2503:     }",
          "2506:     if (p != NULL) {",
          "2507:         goto end;",
          "2508:     }",
          "2511:     if (p != NULL) {",
          "2512:         goto end;",
          "2513:     }",
          "2517:     if (p == NULL) {",
          "2518:         goto end;",
          "2519:     }",
          "2523:     if (IPV6_GET_PLEN(p) != 16) {",
          "2524:         goto end;",
          "2525:     }",
          "2527:     retval = 1;",
          "2528: end:",
          "2529:     if (p1 != NULL) {",
          "2530:         SCFree(p1);",
          "2531:     }",
          "2532:     if (p2 != NULL) {",
          "2533:         SCFree(p2);",
          "2534:     }",
          "2535:     if (p3 != NULL) {",
          "2536:         SCFree(p3);",
          "2537:     }",
          "2538:     if (p != NULL) {",
          "2539:         SCFree(p);",
          "2540:     }",
          "2542:     return retval;",
          "",
          "[Added Lines]",
          "2270:     FAIL_IF(p1 == NULL || p2 == NULL || p3 == NULL);",
          "2273:     FAIL_IF_NOT_NULL(p);",
          "2276:     FAIL_IF_NOT_NULL(p);",
          "2280:     FAIL_IF_NULL(p);",
          "2284:     FAIL_IF(IPV6_GET_PLEN(p) != 16);",
          "2286:     SCFree(p1);",
          "2287:     SCFree(p2);",
          "2288:     SCFree(p3);",
          "2289:     SCFree(p);",
          "2291:     PASS;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2564:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p2, NULL));",
          "2565:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p3, NULL));",
          "2574:     DefragDestroy();",
          "2575:     PASS;",
          "",
          "[Removed Lines]",
          "2567:     if (p1 != NULL)",
          "2568:         SCFree(p1);",
          "2569:     if (p2 != NULL)",
          "2570:         SCFree(p2);",
          "2571:     if (p3 != NULL)",
          "2572:         SCFree(p3);",
          "",
          "[Added Lines]",
          "2316:     SCFree(p1);",
          "2317:     SCFree(p2);",
          "2318:     SCFree(p3);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2582: {",
          "2583: #ifdef UNITTESTS",
          "2584:     UtRegisterTest(\"DefragInOrderSimpleTest\", DefragInOrderSimpleTest);",
          "",
          "[Removed Lines]",
          "2580: void",
          "2581: DefragRegisterTests(void)",
          "",
          "[Added Lines]",
          "2326: void DefragRegisterTests(void)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca92be896eb51634d1165be30de5e7b6aa5ef4ff",
      "candidate_info": {
        "commit_hash": "ca92be896eb51634d1165be30de5e7b6aa5ef4ff",
        "repo": "inliniac/suricata",
        "commit_url": "https://github.com/inliniac/suricata/commit/ca92be896eb51634d1165be30de5e7b6aa5ef4ff",
        "files": [
          "src/defrag.c"
        ],
        "message": "defrag: use new unit test macros\n\nAlso reformat unit test functions to Suricata style.",
        "before_after_code_files": [
          "src/defrag.c||src/defrag.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag.c||src/defrag.c"
          ],
          "candidate": [
            "src/defrag.c||src/defrag.c"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag.c||src/defrag.c": [
          "File: src/defrag.c -> src/defrag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001: {",
          "1002:     Packet *p = NULL;",
          "1003:     int hlen = 20;",
          "",
          "[Removed Lines]",
          "998: static Packet *",
          "999: BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
          "1000:     const char content, int content_len)",
          "",
          "[Added Lines]",
          "998: static Packet *BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
          "999:         const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1017:     ip4h.ip_verhl |= hlen >> 2;",
          "1018:     ip4h.ip_len = htons(hlen + content_len);",
          "1019:     ip4h.ip_id = htons(id);",
          "1021:     if (mf)",
          "1022:         ip4h.ip_off = htons(IP_MF | off);",
          "1023:     else",
          "",
          "[Removed Lines]",
          "1020:     ip4h.ip_off = htons(off);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1073:                           uint16_t hdrextlen, uint16_t plen,",
          "1074:                           uint16_t prev_hdrextlen);",
          "1079: {",
          "1080:     Packet *p = NULL;",
          "1081:     uint8_t *pcontent;",
          "",
          "[Removed Lines]",
          "1076: static Packet *",
          "1077: IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off, int mf,",
          "1078:     const char content, int content_len)",
          "",
          "[Added Lines]",
          "1074: static Packet *IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off,",
          "1075:         int mf, const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:     return p;",
          "1140: error:",
          "1142:     if (p != NULL)",
          "1143:         SCFree(p);",
          "1144:     return NULL;",
          "",
          "[Removed Lines]",
          "1141:     fprintf(stderr, \"Error building test packet.\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1153: {",
          "1154:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1155:     Packet *reassembled = NULL;",
          "1156:     int id = 12;",
          "1157:     int i;",
          "1160:     DefragInit();",
          "1162:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1165:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1168:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "1177:     reassembled = Defrag(NULL, NULL, p3, NULL);",
          "1190:     for (i = 20; i < 20 + 8; i++) {",
          "1194:     }",
          "1197:     for (i = 28; i < 28 + 8; i++) {",
          "1201:     }",
          "1204:     for (i = 36; i < 36 + 3; i++) {",
          "1207:     }",
          "1221:     DefragDestroy();",
          "1223: }",
          "1230: {",
          "1231:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1232:     Packet *reassembled = NULL;",
          "1233:     int id = 12;",
          "1234:     int i;",
          "1237:     DefragInit();",
          "1239:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1242:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1245:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "1254:     reassembled = Defrag(NULL, NULL, p1, NULL);",
          "1264:     for (i = 20; i < 20 + 8; i++) {",
          "1267:     }",
          "1270:     for (i = 28; i < 28 + 8; i++) {",
          "1273:     }",
          "1276:     for (i = 36; i < 36 + 3; i++) {",
          "1279:     }",
          "1292:     DefragDestroy();",
          "1294: }",
          "1302: {",
          "1303:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1304:     Packet *reassembled = NULL;",
          "1305:     int id = 12;",
          "1306:     int i;",
          "1309:     DefragInit();",
          "1311:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1314:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1317:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "1325:     reassembled = Defrag(NULL, NULL, p3, NULL);",
          "1333:     for (i = 40; i < 40 + 8; i++) {",
          "1336:     }",
          "1339:     for (i = 48; i < 48 + 8; i++) {",
          "1342:     }",
          "1345:     for (i = 56; i < 56 + 3; i++) {",
          "1348:     }",
          "1361:     DefragDestroy();",
          "1363: }",
          "1367: {",
          "1368:     DefragContext *dc = NULL;",
          "1369:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "1370:     Packet *reassembled = NULL;",
          "1371:     int id = 12;",
          "1372:     int i;",
          "1375:     DefragInit();",
          "1377:     dc = DefragContextNew();",
          "1381:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1384:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1387:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "1395:     reassembled = Defrag(NULL, NULL, p1, NULL);",
          "1400:     for (i = 40; i < 40 + 8; i++) {",
          "1403:     }",
          "1406:     for (i = 48; i < 48 + 8; i++) {",
          "1409:     }",
          "1412:     for (i = 56; i < 56 + 3; i++) {",
          "1415:     }",
          "1430:     DefragDestroy();",
          "1432: }",
          "1436: {",
          "1437:     int i;",
          "1440:     DefragInit();",
          "",
          "[Removed Lines]",
          "1151: static int",
          "1152: DefragInOrderSimpleTest(void)",
          "1158:     int ret = 0;",
          "1163:     if (p1 == NULL)",
          "1164:         goto end;",
          "1166:     if (p2 == NULL)",
          "1167:         goto end;",
          "1169:     if (p3 == NULL)",
          "1170:         goto end;",
          "1172:     if (Defrag(NULL, NULL, p1, NULL) != NULL)",
          "1173:         goto end;",
          "1174:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1175:         goto end;",
          "1178:     if (reassembled == NULL) {",
          "1179:         goto end;",
          "1180:     }",
          "1182:     if (IPV4_GET_HLEN(reassembled) != 20) {",
          "1183:         goto end;",
          "1184:     }",
          "1185:     if (IPV4_GET_IPLEN(reassembled) != 39) {",
          "1186:         goto end;",
          "1187:     }",
          "1191:         if (GET_PKT_DATA(reassembled)[i] != 'A') {",
          "1192:             goto end;",
          "1193:         }",
          "1198:         if (GET_PKT_DATA(reassembled)[i] != 'B') {",
          "1199:             goto end;",
          "1200:         }",
          "1205:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1206:             goto end;",
          "1209:     ret = 1;",
          "1211: end:",
          "1212:     if (p1 != NULL)",
          "1213:         SCFree(p1);",
          "1214:     if (p2 != NULL)",
          "1215:         SCFree(p2);",
          "1216:     if (p3 != NULL)",
          "1217:         SCFree(p3);",
          "1218:     if (reassembled != NULL)",
          "1219:         SCFree(reassembled);",
          "1222:     return ret;",
          "1228: static int",
          "1229: DefragReverseSimpleTest(void)",
          "1235:     int ret = 0;",
          "1240:     if (p1 == NULL)",
          "1241:         goto end;",
          "1243:     if (p2 == NULL)",
          "1244:         goto end;",
          "1246:     if (p3 == NULL)",
          "1247:         goto end;",
          "1249:     if (Defrag(NULL, NULL, p3, NULL) != NULL)",
          "1250:         goto end;",
          "1251:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1252:         goto end;",
          "1255:     if (reassembled == NULL)",
          "1256:         goto end;",
          "1258:     if (IPV4_GET_HLEN(reassembled) != 20)",
          "1259:         goto end;",
          "1260:     if (IPV4_GET_IPLEN(reassembled) != 39)",
          "1261:         goto end;",
          "1265:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1266:             goto end;",
          "1271:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1272:             goto end;",
          "1277:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1278:             goto end;",
          "1281:     ret = 1;",
          "1282: end:",
          "1283:     if (p1 != NULL)",
          "1284:         SCFree(p1);",
          "1285:     if (p2 != NULL)",
          "1286:         SCFree(p2);",
          "1287:     if (p3 != NULL)",
          "1288:         SCFree(p3);",
          "1289:     if (reassembled != NULL)",
          "1290:         SCFree(reassembled);",
          "1293:     return ret;",
          "1300: static int",
          "1301: IPV6DefragInOrderSimpleTest(void)",
          "1307:     int ret = 0;",
          "1312:     if (p1 == NULL)",
          "1313:         goto end;",
          "1315:     if (p2 == NULL)",
          "1316:         goto end;",
          "1318:     if (p3 == NULL)",
          "1319:         goto end;",
          "1321:     if (Defrag(NULL, NULL, p1, NULL) != NULL)",
          "1322:         goto end;",
          "1323:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1324:         goto end;",
          "1326:     if (reassembled == NULL)",
          "1327:         goto end;",
          "1329:     if (IPV6_GET_PLEN(reassembled) != 19)",
          "1330:         goto end;",
          "1334:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1335:             goto end;",
          "1340:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1341:             goto end;",
          "1346:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1347:             goto end;",
          "1350:     ret = 1;",
          "1351: end:",
          "1352:     if (p1 != NULL)",
          "1353:         SCFree(p1);",
          "1354:     if (p2 != NULL)",
          "1355:         SCFree(p2);",
          "1356:     if (p3 != NULL)",
          "1357:         SCFree(p3);",
          "1358:     if (reassembled != NULL)",
          "1359:         SCFree(reassembled);",
          "1362:     return ret;",
          "1365: static int",
          "1366: IPV6DefragReverseSimpleTest(void)",
          "1373:     int ret = 0;",
          "1378:     if (dc == NULL)",
          "1379:         goto end;",
          "1382:     if (p1 == NULL)",
          "1383:         goto end;",
          "1385:     if (p2 == NULL)",
          "1386:         goto end;",
          "1388:     if (p3 == NULL)",
          "1389:         goto end;",
          "1391:     if (Defrag(NULL, NULL, p3, NULL) != NULL)",
          "1392:         goto end;",
          "1393:     if (Defrag(NULL, NULL, p2, NULL) != NULL)",
          "1394:         goto end;",
          "1396:     if (reassembled == NULL)",
          "1397:         goto end;",
          "1401:         if (GET_PKT_DATA(reassembled)[i] != 'A')",
          "1402:             goto end;",
          "1407:         if (GET_PKT_DATA(reassembled)[i] != 'B')",
          "1408:             goto end;",
          "1413:         if (GET_PKT_DATA(reassembled)[i] != 'C')",
          "1414:             goto end;",
          "1417:     ret = 1;",
          "1418: end:",
          "1419:     if (dc != NULL)",
          "1420:         DefragContextDestroy(dc);",
          "1421:     if (p1 != NULL)",
          "1422:         SCFree(p1);",
          "1423:     if (p2 != NULL)",
          "1424:         SCFree(p2);",
          "1425:     if (p3 != NULL)",
          "1426:         SCFree(p3);",
          "1427:     if (reassembled != NULL)",
          "1428:         SCFree(reassembled);",
          "1431:     return ret;",
          "1434: static int",
          "1435: DefragDoSturgesNovakTest(int policy, u_char *expected, size_t expected_len)",
          "1438:     int ret = 0;",
          "",
          "[Added Lines]",
          "1147: static int DefragInOrderSimpleTest(void)",
          "1157:     FAIL_IF_NULL(p1);",
          "1159:     FAIL_IF_NULL(p2);",
          "1161:     FAIL_IF_NULL(p3);",
          "1163:     FAIL_IF(Defrag(NULL, NULL, p1, NULL) != NULL);",
          "1164:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1167:     FAIL_IF_NULL(reassembled);",
          "1169:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1170:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 39);",
          "1174:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1179:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1184:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1187:     SCFree(p1);",
          "1188:     SCFree(p2);",
          "1189:     SCFree(p3);",
          "1190:     SCFree(reassembled);",
          "1193:     PASS;",
          "1199: static int DefragReverseSimpleTest(void)",
          "1209:     FAIL_IF_NULL(p1);",
          "1211:     FAIL_IF_NULL(p2);",
          "1213:     FAIL_IF_NULL(p3);",
          "1215:     FAIL_IF(Defrag(NULL, NULL, p3, NULL) != NULL);",
          "1216:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1219:     FAIL_IF_NULL(reassembled);",
          "1221:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1222:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 39);",
          "1226:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1231:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1236:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1239:     SCFree(p1);",
          "1240:     SCFree(p2);",
          "1241:     SCFree(p3);",
          "1242:     SCFree(reassembled);",
          "1245:     PASS;",
          "1252: static int IPV6DefragInOrderSimpleTest(void)",
          "1262:     FAIL_IF_NULL(p1);",
          "1264:     FAIL_IF_NULL(p2);",
          "1266:     FAIL_IF_NULL(p3);",
          "1268:     FAIL_IF(Defrag(NULL, NULL, p1, NULL) != NULL);",
          "1269:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1271:     FAIL_IF_NULL(reassembled);",
          "1273:     FAIL_IF(IPV6_GET_PLEN(reassembled) != 19);",
          "1277:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1282:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1287:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1290:     SCFree(p1);",
          "1291:     SCFree(p2);",
          "1292:     SCFree(p3);",
          "1293:     SCFree(reassembled);",
          "1296:     PASS;",
          "1299: static int IPV6DefragReverseSimpleTest(void)",
          "1310:     FAIL_IF_NULL(dc);",
          "1313:     FAIL_IF_NULL(p1);",
          "1315:     FAIL_IF_NULL(p2);",
          "1317:     FAIL_IF_NULL(p3);",
          "1319:     FAIL_IF(Defrag(NULL, NULL, p3, NULL) != NULL);",
          "1320:     FAIL_IF(Defrag(NULL, NULL, p2, NULL) != NULL);",
          "1322:     FAIL_IF_NULL(reassembled);",
          "1326:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'A');",
          "1331:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'B');",
          "1336:         FAIL_IF(GET_PKT_DATA(reassembled)[i] != 'C');",
          "1339:     DefragContextDestroy(dc);",
          "1340:     SCFree(p1);",
          "1341:     SCFree(p2);",
          "1342:     SCFree(p3);",
          "1343:     SCFree(reassembled);",
          "1346:     PASS;",
          "1349: static int DefragDoSturgesNovakTest(int policy, u_char *expected,",
          "1350:         size_t expected_len)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1512:     for (i = 0; i < 9; i++) {",
          "1513:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1521:     }",
          "1522:     int overlap = 0;",
          "1523:     for (; i < 16; i++) {",
          "1524:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1529:         if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {",
          "1530:             overlap++;",
          "1531:         }",
          "1532:     }",
          "1538:     Packet *reassembled = Defrag(NULL, NULL, packets[16], NULL);",
          "1553:     SCFree(reassembled);",
          "1562:     for (i = 0; i < 17; i++) {",
          "1563:         SCFree(packets[i]);",
          "1564:     }",
          "1565:     DefragDestroy();",
          "1567: }",
          "1571: {",
          "1572:     int i;",
          "1575:     DefragInit();",
          "",
          "[Removed Lines]",
          "1514:         if (tp != NULL) {",
          "1515:             SCFree(tp);",
          "1516:             goto end;",
          "1517:         }",
          "1518:         if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {",
          "1519:             goto end;",
          "1520:         }",
          "1525:         if (tp != NULL) {",
          "1526:             SCFree(tp);",
          "1527:             goto end;",
          "1528:         }",
          "1533:     if (!overlap) {",
          "1534:         goto end;",
          "1535:     }",
          "1539:     if (reassembled == NULL) {",
          "1540:         goto end;",
          "1541:     }",
          "1543:     if (IPV4_GET_HLEN(reassembled) != 20) {",
          "1544:         goto end;",
          "1545:     }",
          "1546:     if (IPV4_GET_IPLEN(reassembled) != 20 + 192) {",
          "1547:         goto end;",
          "1548:     }",
          "1550:     if (memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0) {",
          "1551:         goto end;",
          "1552:     }",
          "1556:     if (defrag_context->frag_pool->outstanding != 0) {",
          "1557:         goto end;",
          "1558:     }",
          "1560:     ret = 1;",
          "1561: end:",
          "1566:     return ret;",
          "1569: static int",
          "1570: IPV6DefragDoSturgesNovakTest(int policy, u_char *expected, size_t expected_len)",
          "1573:     int ret = 0;",
          "",
          "[Added Lines]",
          "1428:         FAIL_IF_NOT_NULL(tp);",
          "1429:         FAIL_IF(ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP));",
          "1434:         FAIL_IF_NOT_NULL(tp);",
          "1439:     FAIL_IF_NOT(overlap);",
          "1443:     FAIL_IF_NULL(reassembled);",
          "1445:     FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);",
          "1446:     FAIL_IF(IPV4_GET_IPLEN(reassembled) != 20 + 192);",
          "1448:     FAIL_IF(memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0);",
          "1452:     FAIL_IF(defrag_context->frag_pool->outstanding != 0);",
          "1458:     PASS;",
          "1461: static int IPV6DefragDoSturgesNovakTest(int policy, u_char *expected,",
          "1462:         size_t expected_len)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1647:     for (i = 0; i < 9; i++) {",
          "1648:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1656:     }",
          "1657:     int overlap = 0;",
          "1658:     for (; i < 16; i++) {",
          "1659:         Packet *tp = Defrag(NULL, NULL, packets[i], NULL);",
          "1664:         if (ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP)) {",
          "1665:             overlap++;",
          "1666:         }",
          "1667:     }",
          "1672:     Packet *reassembled = Defrag(NULL, NULL, packets[16], NULL);",
          "1681:     SCFree(reassembled);",
          "1692:     for (i = 0; i < 17; i++) {",
          "1693:         SCFree(packets[i]);",
          "1694:     }",
          "1695:     DefragDestroy();",
          "1697: }",
          "1699: static int",
          "",
          "[Removed Lines]",
          "1649:         if (tp != NULL) {",
          "1650:             SCFree(tp);",
          "1651:             goto end;",
          "1652:         }",
          "1653:         if (ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP)) {",
          "1654:             goto end;",
          "1655:         }",
          "1660:         if (tp != NULL) {",
          "1661:             SCFree(tp);",
          "1662:             goto end;",
          "1663:         }",
          "1668:     if (!overlap)",
          "1669:         goto end;",
          "1673:     if (reassembled == NULL)",
          "1674:         goto end;",
          "1675:     if (memcmp(GET_PKT_DATA(reassembled) + 40, expected, expected_len) != 0)",
          "1676:         goto end;",
          "1678:     if (IPV6_GET_PLEN(reassembled) != 192)",
          "1679:         goto end;",
          "1684:     if (defrag_context->frag_pool->outstanding != 0) {",
          "1685:         printf(\"defrag_context->frag_pool->outstanding %u: \", defrag_context->frag_pool->outstanding);",
          "1686:         goto end;",
          "1687:     }",
          "1689:     ret = 1;",
          "1691: end:",
          "1696:     return ret;",
          "",
          "[Added Lines]",
          "1540:         FAIL_IF_NOT_NULL(tp);",
          "1541:         FAIL_IF(ENGINE_ISSET_EVENT(packets[i], IPV6_FRAG_OVERLAP));",
          "1546:         FAIL_IF_NOT_NULL(tp);",
          "1551:     FAIL_IF_NOT(overlap);",
          "1555:     FAIL_IF_NULL(reassembled);",
          "1556:     FAIL_IF(memcmp(GET_PKT_DATA(reassembled) + 40, expected, expected_len) != 0);",
          "1558:     FAIL_IF(IPV6_GET_PLEN(reassembled) != 192);",
          "1563:     FAIL_IF(defrag_context->frag_pool->outstanding != 0);",
          "1569:     PASS;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1727:         \"QQQQQQQQ\"",
          "1728:     };",
          "1731: }",
          "1735: {",
          "1737:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1730:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected, sizeof(expected));",
          "1733: static int",
          "1734: IPV6DefragSturgesNovakBsdTest(void)",
          "",
          "[Added Lines]",
          "1603:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected,",
          "1604:                     sizeof(expected)));",
          "1605:     PASS;",
          "1608: static int IPV6DefragSturgesNovakBsdTest(void)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1761:         \"QQQQQQQQ\"",
          "1762:     };",
          "1765: }",
          "1769: {",
          "1771:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1764:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected, sizeof(expected));",
          "1767: static int",
          "1768: DefragSturgesNovakLinuxTest(void)",
          "",
          "[Added Lines]",
          "1638:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_BSD, expected,",
          "1639:                     sizeof(expected)));",
          "1640:     PASS;",
          "1643: static int DefragSturgesNovakLinuxTest(void)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1795:         \"QQQQQQQQ\"",
          "1796:     };",
          "1799: }",
          "1803: {",
          "1805:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1798:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected, sizeof(expected));",
          "1801: static int",
          "1802: IPV6DefragSturgesNovakLinuxTest(void)",
          "",
          "[Added Lines]",
          "1673:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1674:                     sizeof(expected)));",
          "1675:     PASS;",
          "1678: static int IPV6DefragSturgesNovakLinuxTest(void)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1829:         \"QQQQQQQQ\"",
          "1830:     };",
          "1834: }",
          "1838: {",
          "1840:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1832:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1833:         sizeof(expected));",
          "1836: static int",
          "1837: DefragSturgesNovakWindowsTest(void)",
          "",
          "[Added Lines]",
          "1708:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LINUX, expected,",
          "1709:             sizeof(expected)));",
          "1710:     PASS;",
          "1713: static int DefragSturgesNovakWindowsTest(void)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1864:         \"QQQQQQQQ\"",
          "1865:     };",
          "1868: }",
          "1872: {",
          "1874:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1867:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected, sizeof(expected));",
          "1870: static int",
          "1871: IPV6DefragSturgesNovakWindowsTest(void)",
          "",
          "[Added Lines]",
          "1743:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1744:                     sizeof(expected)));",
          "1745:     PASS;",
          "1748: static int IPV6DefragSturgesNovakWindowsTest(void)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1898:         \"QQQQQQQQ\"",
          "1899:     };",
          "1903: }",
          "1907: {",
          "1909:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1901:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1902:         sizeof(expected));",
          "1905: static int",
          "1906: DefragSturgesNovakSolarisTest(void)",
          "",
          "[Added Lines]",
          "1778:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_WINDOWS, expected,",
          "1779:                     sizeof(expected)));",
          "1780:     PASS;",
          "1783: static int DefragSturgesNovakSolarisTest(void)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1933:         \"QQQQQQQQ\"",
          "1934:     };",
          "1937: }",
          "1941: {",
          "1943:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1936:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected, sizeof(expected));",
          "1939: static int",
          "1940: IPV6DefragSturgesNovakSolarisTest(void)",
          "",
          "[Added Lines]",
          "1813:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1814:                     sizeof(expected)));",
          "1815:     PASS;",
          "1818: static int IPV6DefragSturgesNovakSolarisTest(void)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1967:         \"QQQQQQQQ\"",
          "1968:     };",
          "1972: }",
          "1976: {",
          "1978:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "1970:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1971:         sizeof(expected));",
          "1974: static int",
          "1975: DefragSturgesNovakFirstTest(void)",
          "",
          "[Added Lines]",
          "1848:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_SOLARIS, expected,",
          "1849:                     sizeof(expected)));",
          "1850:     PASS;",
          "1853: static int DefragSturgesNovakFirstTest(void)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2002:         \"QQQQQQQQ\"",
          "2003:     };",
          "2006: }",
          "2010: {",
          "2012:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "2005:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_FIRST, expected, sizeof(expected));",
          "2008: static int",
          "2009: IPV6DefragSturgesNovakFirstTest(void)",
          "",
          "[Added Lines]",
          "1883:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_FIRST, expected,",
          "1884:                     sizeof(expected)));",
          "1885:     PASS;",
          "1888: static int IPV6DefragSturgesNovakFirstTest(void)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2071:         \"QQQQQQQQ\"",
          "2072:     };",
          "2075: }",
          "2079: {",
          "2081:     u_char expected[] = {",
          "",
          "[Removed Lines]",
          "2074:     return DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected, sizeof(expected));",
          "2077: static int",
          "2078: IPV6DefragSturgesNovakLastTest(void)",
          "",
          "[Added Lines]",
          "1953:     FAIL_IF_NOT(DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "1954:                     sizeof(expected)));",
          "1955:     PASS;",
          "1958: static int IPV6DefragSturgesNovakLastTest(void)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2105:         \"QQQQQQQQ\"",
          "2106:     };",
          "2110: }",
          "2114: {",
          "2115:     int i;",
          "2124:     DefragInit();",
          "2127:     for (i = 0; i < 16; i++) {",
          "2128:         Packet *p = BuildTestPacket(IPPROTO_ICMP,i, 0, 1, 'A' + i, 16);",
          "2132:         Packet *tp = Defrag(NULL, NULL, p, NULL);",
          "2134:         SCFree(p);",
          "2140:     }",
          "2144:     Packet *p = BuildTestPacket(IPPROTO_ICMP, 99, 0, 1, 'A' + i, 16);",
          "2148:     p->ts.tv_sec += (defrag_context->timeout + 1);",
          "2149:     Packet *tp = Defrag(NULL, NULL, p, NULL);",
          "2156:     DefragTracker *tracker = DefragLookupTrackerFromHash(p);",
          "2163:     SCFree(p);",
          "2167:     DefragDestroy();",
          "2169: }",
          "",
          "[Removed Lines]",
          "2108:     return IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "2109:         sizeof(expected));",
          "2112: static int",
          "2113: DefragTimeoutTest(void)",
          "2116:     int ret = 0;",
          "2119:     if (ConfSet(\"defrag.trackers\", \"16\") != 1) {",
          "2120:         printf(\"ConfSet failed: \");",
          "2121:         goto end;",
          "2122:     }",
          "2129:         if (p == NULL)",
          "2130:             goto end;",
          "2136:         if (tp != NULL) {",
          "2137:             SCFree(tp);",
          "2138:             goto end;",
          "2139:         }",
          "2145:     if (p == NULL)",
          "2146:         goto end;",
          "2151:     if (tp != NULL) {",
          "2152:         SCFree(tp);",
          "2153:         goto end;",
          "2154:     }",
          "2157:     if (tracker == NULL)",
          "2158:         goto end;",
          "2160:     if (tracker->id != 99)",
          "2161:         goto end;",
          "2165:     ret = 1;",
          "2166: end:",
          "2168:     return ret;",
          "",
          "[Added Lines]",
          "1988:     FAIL_IF_NOT(IPV6DefragDoSturgesNovakTest(DEFRAG_POLICY_LAST, expected,",
          "1989:                     sizeof(expected)));",
          "1990:     PASS;",
          "1993: static int DefragTimeoutTest(void)",
          "1998:     FAIL_IF_NOT(ConfSet(\"defrag.trackers\", \"16\"));",
          "2005:         FAIL_IF_NULL(p);",
          "2009:         FAIL_IF_NOT_NULL(tp);",
          "2015:     FAIL_IF_NULL(p);",
          "2019:     FAIL_IF_NOT_NULL(tp);",
          "2022:     FAIL_IF_NULL(tracker);",
          "2024:     FAIL_IF(tracker->id != 99);",
          "2029:     PASS;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2179: {",
          "2180:     DefragContext *dc = NULL;",
          "2181:     Packet *p = NULL;",
          "2182:     int id = 12;",
          "2185:     DefragInit();",
          "2187:     dc = DefragContextNew();",
          "2192:     p = BuildTestPacket(IPPROTO_ICMP, id, 1, 0, 'A', 0);",
          "2212:     DefragDestroy();",
          "2214: }",
          "2218: {",
          "2219:     DefragContext *dc = NULL;",
          "2220:     Packet *p = NULL;",
          "2223:     DefragInit();",
          "2225:     dc = DefragContextNew();",
          "2231:     p = BuildTestPacket(IPPROTO_ICMP, 1, 8183, 0, 'A', 71);",
          "2253:     DefragDestroy();",
          "2255: }",
          "",
          "[Removed Lines]",
          "2177: static int",
          "2178: DefragIPv4NoDataTest(void)",
          "2183:     int ret = 0;",
          "2188:     if (dc == NULL)",
          "2189:         goto end;",
          "2193:     if (p == NULL)",
          "2194:         goto end;",
          "2197:     if (Defrag(NULL, NULL, p, NULL) != NULL)",
          "2198:         goto end;",
          "2202:     if (dc->frag_pool->outstanding != 0)",
          "2203:         return 0;",
          "2205:     ret = 1;",
          "2206: end:",
          "2207:     if (dc != NULL)",
          "2208:         DefragContextDestroy(dc);",
          "2209:     if (p != NULL)",
          "2210:         SCFree(p);",
          "2213:     return ret;",
          "2216: static int",
          "2217: DefragIPv4TooLargeTest(void)",
          "2221:     int ret = 0;",
          "2226:     if (dc == NULL)",
          "2227:         goto end;",
          "2232:     if (p == NULL)",
          "2233:         goto end;",
          "2236:     if (Defrag(NULL, NULL, p, NULL) != NULL)",
          "2237:         goto end;",
          "2238:     if (!ENGINE_ISSET_EVENT(p, IPV4_FRAG_PKT_TOO_LARGE))",
          "2239:         goto end;",
          "2243:     if (dc->frag_pool->outstanding != 0)",
          "2244:         return 0;",
          "2246:     ret = 1;",
          "2247: end:",
          "2248:     if (dc != NULL)",
          "2249:         DefragContextDestroy(dc);",
          "2250:     if (p != NULL)",
          "2251:         SCFree(p);",
          "2254:     return ret;",
          "",
          "[Added Lines]",
          "2038: static int DefragIPv4NoDataTest(void)",
          "2047:     FAIL_IF_NULL(dc);",
          "2051:     FAIL_IF_NULL(p);",
          "2054:     FAIL_IF(Defrag(NULL, NULL, p, NULL) != NULL);",
          "2058:     FAIL_IF(dc->frag_pool->outstanding != 0);",
          "2060:     DefragContextDestroy(dc);",
          "2061:     SCFree(p);",
          "2064:     PASS;",
          "2067: static int DefragIPv4TooLargeTest(void)",
          "2075:     FAIL_IF_NULL(dc);",
          "2080:     FAIL_IF_NULL(p);",
          "2083:     FAIL_IF(Defrag(NULL, NULL, p, NULL) != NULL);",
          "2086:     FAIL_IF_NOT(ENGINE_ISSET_EVENT(p, IPV4_FRAG_PKT_TOO_LARGE));",
          "2090:     FAIL_IF(dc->frag_pool->outstanding != 0);",
          "2092:     DefragContextDestroy(dc);",
          "2093:     SCFree(p);",
          "2096:     PASS;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2264: {",
          "2265:     Packet *p1 = NULL, *p2 = NULL, *r = NULL;",
          "2268:     DefragInit();",
          "2270:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2273:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "2282:     SCFree(r);",
          "2285:     p1->vlan_id[0] = 1;",
          "2286:     p2->vlan_id[0] = 2;",
          "2300:     DefragDestroy();",
          "2303: }",
          "2310: {",
          "2311:     Packet *p1 = NULL, *p2 = NULL, *r = NULL;",
          "2314:     DefragInit();",
          "2316:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2319:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "2328:     SCFree(r);",
          "",
          "[Removed Lines]",
          "2262: static int",
          "2263: DefragVlanTest(void)",
          "2266:     int ret = 0;",
          "2271:     if (p1 == NULL)",
          "2272:         goto end;",
          "2274:     if (p2 == NULL)",
          "2275:         goto end;",
          "2278:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2279:         goto end;",
          "2280:     if ((r = Defrag(NULL, NULL, p2, NULL)) == NULL)",
          "2281:         goto end;",
          "2287:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2288:         goto end;",
          "2289:     if ((r = Defrag(NULL, NULL, p2, NULL)) != NULL)",
          "2290:         goto end;",
          "2293:     ret = 1;",
          "2295: end:",
          "2296:     if (p1 != NULL)",
          "2297:         SCFree(p1);",
          "2298:     if (p2 != NULL)",
          "2299:         SCFree(p2);",
          "2302:     return ret;",
          "2308: static int",
          "2309: DefragVlanQinQTest(void)",
          "2312:     int ret = 0;",
          "2317:     if (p1 == NULL)",
          "2318:         goto end;",
          "2320:     if (p2 == NULL)",
          "2321:         goto end;",
          "2324:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2325:         goto end;",
          "2326:     if ((r = Defrag(NULL, NULL, p2, NULL)) == NULL)",
          "2327:         goto end;",
          "",
          "[Added Lines]",
          "2104: static int DefragVlanTest(void)",
          "2111:     FAIL_IF_NULL(p1);",
          "2113:     FAIL_IF_NULL(p2);",
          "2116:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2117:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) == NULL);",
          "2123:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2124:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) != NULL);",
          "2126:     SCFree(p1);",
          "2127:     SCFree(p2);",
          "2130:     PASS;",
          "2136: static int DefragVlanQinQTest(void)",
          "2143:     FAIL_IF_NULL(p1);",
          "2145:     FAIL_IF_NULL(p2);",
          "2148:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2149:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) == NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2332:     p2->vlan_id[0] = 1;",
          "2333:     p1->vlan_id[1] = 1;",
          "2334:     p2->vlan_id[1] = 2;",
          "2348:     DefragDestroy();",
          "2351: }",
          "2353: static int DefragTrackerReuseTest(void)",
          "2354: {",
          "2356:     int id = 1;",
          "2357:     Packet *p1 = NULL;",
          "2358:     DefragTracker *tracker1 = NULL, *tracker2 = NULL;",
          "",
          "[Removed Lines]",
          "2335:     if ((r = Defrag(NULL, NULL, p1, NULL)) != NULL)",
          "2336:         goto end;",
          "2337:     if ((r = Defrag(NULL, NULL, p2, NULL)) != NULL)",
          "2338:         goto end;",
          "2341:     ret = 1;",
          "2343: end:",
          "2344:     if (p1 != NULL)",
          "2345:         SCFree(p1);",
          "2346:     if (p2 != NULL)",
          "2347:         SCFree(p2);",
          "2350:     return ret;",
          "2355:     int ret = 0;",
          "",
          "[Added Lines]",
          "2157:     FAIL_IF((r = Defrag(NULL, NULL, p1, NULL)) != NULL);",
          "2158:     FAIL_IF((r = Defrag(NULL, NULL, p2, NULL)) != NULL);",
          "2160:     SCFree(p1);",
          "2161:     SCFree(p2);",
          "2164:     PASS;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2364:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 0, 'A', 8);",
          "2370:     tracker1 = DefragGetTracker(NULL, NULL, p1);",
          "2380:     DefragTrackerRelease(tracker1);",
          "2383:     tracker2 = DefragGetTracker(NULL, NULL, p1);",
          "2390:     DefragTrackerRelease(tracker1);",
          "",
          "[Removed Lines]",
          "2365:     if (p1 == NULL) {",
          "2366:         goto end;",
          "2367:     }",
          "2371:     if (tracker1 == NULL) {",
          "2372:         goto end;",
          "2373:     }",
          "2374:     if (tracker1->seen_last) {",
          "2375:         goto end;",
          "2376:     }",
          "2377:     if (tracker1->remove) {",
          "2378:         goto end;",
          "2379:     }",
          "2384:     if (tracker2 == NULL) {",
          "2385:         goto end;",
          "2386:     }",
          "2387:     if (tracker2 != tracker1) {",
          "2388:         goto end;",
          "2389:     }",
          "",
          "[Added Lines]",
          "2178:     FAIL_IF_NULL(p1);",
          "2182:     FAIL_IF_NULL(tracker1);",
          "2183:     FAIL_IF(tracker1->seen_last);",
          "2184:     FAIL_IF(tracker1->remove);",
          "2189:     FAIL_IF_NULL(tracker2);",
          "2190:     FAIL_IF(tracker2 != tracker1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2395:     tracker1->remove = 1;",
          "2397:     tracker2 = DefragGetTracker(NULL, NULL, p1);",
          "2413:     DefragDestroy();",
          "2415: }",
          "",
          "[Removed Lines]",
          "2398:     if (tracker2 == NULL) {",
          "2399:         goto end;",
          "2400:     }",
          "2401:     if (tracker2 == tracker1) {",
          "2402:         goto end;",
          "2403:     }",
          "2404:     if (tracker2->remove) {",
          "2405:         goto end;",
          "2406:     }",
          "2408:     ret = 1;",
          "2409: end:",
          "2410:     if (p1 != NULL) {",
          "2411:         SCFree(p1);",
          "2412:     }",
          "2414:     return ret;",
          "",
          "[Added Lines]",
          "2199:     FAIL_IF_NULL(tracker2);",
          "2200:     FAIL_IF(tracker2 == tracker1);",
          "2201:     FAIL_IF(tracker2->remove);",
          "2203:     SCFree(p1);",
          "2205:     PASS;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2426: static int DefragMfIpv4Test(void)",
          "2427: {",
          "2429:     int ip_id = 9;",
          "2430:     Packet *p = NULL;",
          "",
          "[Removed Lines]",
          "2428:     int retval = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2434:     Packet *p1 = BuildTestPacket(IPPROTO_ICMP, ip_id, 2, 1, 'C', 8);",
          "2435:     Packet *p2 = BuildTestPacket(IPPROTO_ICMP, ip_id, 0, 1, 'A', 8);",
          "2436:     Packet *p3 = BuildTestPacket(IPPROTO_ICMP, ip_id, 1, 0, 'B', 8);",
          "2441:     p = Defrag(NULL, NULL, p1, NULL);",
          "2446:     p = Defrag(NULL, NULL, p2, NULL);",
          "2452:     p = Defrag(NULL, NULL, p3, NULL);",
          "2477:     DefragDestroy();",
          "2479: }",
          "",
          "[Removed Lines]",
          "2437:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2438:         goto end;",
          "2439:     }",
          "2442:     if (p != NULL) {",
          "2443:         goto end;",
          "2444:     }",
          "2447:     if (p != NULL) {",
          "2448:         goto end;",
          "2449:     }",
          "2453:     if (p == NULL) {",
          "2454:         goto end;",
          "2455:     }",
          "2459:     if (IPV4_GET_IPLEN(p) != 36) {",
          "2460:         goto end;",
          "2461:     }",
          "2463:     retval = 1;",
          "2464: end:",
          "2465:     if (p1 != NULL) {",
          "2466:         SCFree(p1);",
          "2467:     }",
          "2468:     if (p2 != NULL) {",
          "2469:         SCFree(p2);",
          "2470:     }",
          "2471:     if (p3 != NULL) {",
          "2472:         SCFree(p3);",
          "2473:     }",
          "2474:     if (p != NULL) {",
          "2475:         SCFree(p);",
          "2476:     }",
          "2478:     return retval;",
          "",
          "[Added Lines]",
          "2227:     FAIL_IF(p1 == NULL || p2 == NULL || p3 == NULL);",
          "2230:     FAIL_IF_NOT_NULL(p);",
          "2233:     FAIL_IF_NOT_NULL(p);",
          "2237:     FAIL_IF_NULL(p);",
          "2241:     FAIL_IF(IPV4_GET_IPLEN(p) != 36);",
          "2243:     SCFree(p1);",
          "2244:     SCFree(p2);",
          "2245:     SCFree(p3);",
          "2246:     SCFree(p);",
          "2248:     PASS;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2490: static int DefragMfIpv6Test(void)",
          "2491: {",
          "2493:     int ip_id = 9;",
          "2494:     Packet *p = NULL;",
          "",
          "[Removed Lines]",
          "2492:     int retval = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2498:     Packet *p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 2, 1, 'C', 8);",
          "2499:     Packet *p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 0, 1, 'A', 8);",
          "2500:     Packet *p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 1, 0, 'B', 8);",
          "2505:     p = Defrag(NULL, NULL, p1, NULL);",
          "2510:     p = Defrag(NULL, NULL, p2, NULL);",
          "2516:     p = Defrag(NULL, NULL, p3, NULL);",
          "2541:     DefragDestroy();",
          "2543: }",
          "",
          "[Removed Lines]",
          "2501:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2502:         goto end;",
          "2503:     }",
          "2506:     if (p != NULL) {",
          "2507:         goto end;",
          "2508:     }",
          "2511:     if (p != NULL) {",
          "2512:         goto end;",
          "2513:     }",
          "2517:     if (p == NULL) {",
          "2518:         goto end;",
          "2519:     }",
          "2523:     if (IPV6_GET_PLEN(p) != 16) {",
          "2524:         goto end;",
          "2525:     }",
          "2527:     retval = 1;",
          "2528: end:",
          "2529:     if (p1 != NULL) {",
          "2530:         SCFree(p1);",
          "2531:     }",
          "2532:     if (p2 != NULL) {",
          "2533:         SCFree(p2);",
          "2534:     }",
          "2535:     if (p3 != NULL) {",
          "2536:         SCFree(p3);",
          "2537:     }",
          "2538:     if (p != NULL) {",
          "2539:         SCFree(p);",
          "2540:     }",
          "2542:     return retval;",
          "",
          "[Added Lines]",
          "2270:     FAIL_IF(p1 == NULL || p2 == NULL || p3 == NULL);",
          "2273:     FAIL_IF_NOT_NULL(p);",
          "2276:     FAIL_IF_NOT_NULL(p);",
          "2280:     FAIL_IF_NULL(p);",
          "2284:     FAIL_IF(IPV6_GET_PLEN(p) != 16);",
          "2286:     SCFree(p1);",
          "2287:     SCFree(p2);",
          "2288:     SCFree(p3);",
          "2289:     SCFree(p);",
          "2291:     PASS;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2564:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p2, NULL));",
          "2565:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p3, NULL));",
          "2574:     DefragDestroy();",
          "2575:     PASS;",
          "",
          "[Removed Lines]",
          "2567:     if (p1 != NULL)",
          "2568:         SCFree(p1);",
          "2569:     if (p2 != NULL)",
          "2570:         SCFree(p2);",
          "2571:     if (p3 != NULL)",
          "2572:         SCFree(p3);",
          "",
          "[Added Lines]",
          "2316:     SCFree(p1);",
          "2317:     SCFree(p2);",
          "2318:     SCFree(p3);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2582: {",
          "2583: #ifdef UNITTESTS",
          "2584:     UtRegisterTest(\"DefragInOrderSimpleTest\", DefragInOrderSimpleTest);",
          "",
          "[Removed Lines]",
          "2580: void",
          "2581: DefragRegisterTests(void)",
          "",
          "[Added Lines]",
          "2326: void DefragRegisterTests(void)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c34a87b47663112e4d90ba1ac00f360e2bfc9db",
      "candidate_info": {
        "commit_hash": "5c34a87b47663112e4d90ba1ac00f360e2bfc9db",
        "repo": "inliniac/suricata",
        "commit_url": "https://github.com/inliniac/suricata/commit/5c34a87b47663112e4d90ba1ac00f360e2bfc9db",
        "files": [
          "src/defrag-hash.c",
          "src/defrag.c",
          "src/defrag.h"
        ],
        "message": "defrag - take protocol into account during re-assembly\n\nThe IP protocol was not being used to match fragments with\ntheir packets allowing a carefully constructed packet\nwith a different protocol to be matched, allowing re-assembly\nto complete, creating a packet that would not be re-assembled\nby the destination host.",
        "before_after_code_files": [
          "src/defrag-hash.c||src/defrag-hash.c",
          "src/defrag.c||src/defrag.c",
          "src/defrag.h||src/defrag.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/defrag-hash.c||src/defrag-hash.c",
            "src/defrag.c||src/defrag.c",
            "src/defrag.h||src/defrag.h"
          ],
          "candidate": [
            "src/defrag-hash.c||src/defrag-hash.c",
            "src/defrag.c||src/defrag.c",
            "src/defrag.h||src/defrag.h"
          ]
        }
      },
      "candidate_diff": {
        "src/defrag-hash.c||src/defrag-hash.c": [
          "File: src/defrag-hash.c -> src/defrag-hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         dt->id = (int32_t)IPV6_EXTHDR_GET_FH_ID(p);",
          "93:         dt->af = AF_INET6;",
          "94:     }",
          "95:     dt->vlan_id[0] = p->vlan_id[0];",
          "96:     dt->vlan_id[1] = p->vlan_id[1];",
          "97:     dt->policy = DefragGetOsPolicy(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     dt->proto = IP_GET_IPPROTO(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:        CMP_ADDR(&(d1)->dst_addr, &(d2)->dst)) || \\",
          "407:       (CMP_ADDR(&(d1)->src_addr, &(d2)->dst) && \\",
          "408:        CMP_ADDR(&(d1)->dst_addr, &(d2)->src))) && \\",
          "409:      (d1)->id == (id) && \\",
          "410:      (d1)->vlan_id[0] == (d2)->vlan_id[0] && \\",
          "411:      (d1)->vlan_id[1] == (d2)->vlan_id[1])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:      (d1)->proto == IP_GET_IPPROTO(p) &&        \\",
          "",
          "---------------"
        ],
        "src/defrag.c||src/defrag.c": [
          "File: src/defrag.c -> src/defrag.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995: static Packet *",
          "998: {",
          "999:     Packet *p = NULL;",
          "1000:     int hlen = 20;",
          "",
          "[Removed Lines]",
          "996: BuildTestPacket(uint16_t id, uint16_t off, int mf, const char content,",
          "997:     int content_len)",
          "",
          "[Added Lines]",
          "996: BuildTestPacket(uint8_t proto, uint16_t id, uint16_t off, int mf,",
          "997:     const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1020:     else",
          "1021:         ip4h.ip_off = htons(off);",
          "1022:     ip4h.ip_ttl = ttl;",
          "",
          "[Removed Lines]",
          "1023:     ip4h.ip_proto = IPPROTO_ICMP;",
          "",
          "[Added Lines]",
          "1023:     ip4h.ip_proto = proto;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1056:         goto error;",
          "1057:     if (IPV4_GET_IPTTL(p) != ttl)",
          "1058:         goto error;",
          "1060:         goto error;",
          "1062:     return p;",
          "",
          "[Removed Lines]",
          "1059:     if (IPV4_GET_IPPROTO(p) != IPPROTO_ICMP)",
          "",
          "[Added Lines]",
          "1059:     if (IPV4_GET_IPPROTO(p) != proto)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1071:                           uint16_t prev_hdrextlen);",
          "1073: static Packet *",
          "1076: {",
          "1077:     Packet *p = NULL;",
          "1078:     uint8_t *pcontent;",
          "",
          "[Removed Lines]",
          "1074: IPV6BuildTestPacket(uint32_t id, uint16_t off, int mf, const char content,",
          "1075:     int content_len)",
          "",
          "[Added Lines]",
          "1074: IPV6BuildTestPacket(uint8_t proto, uint32_t id, uint16_t off, int mf,",
          "1075:     const char content, int content_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1106:     IPV6_SET_RAW_VER(p->ip6h, 6);",
          "1108:     IPV6FragHdr *fh = (IPV6FragHdr *)(GET_PKT_DATA(p) + sizeof(IPV6Hdr));",
          "1110:     fh->ip6fh_ident = htonl(id);",
          "1111:     fh->ip6fh_offlg = htons((off << 3) | mf);",
          "",
          "[Removed Lines]",
          "1109:     fh->ip6fh_nxt = IPPROTO_ICMP;",
          "",
          "[Added Lines]",
          "1109:     fh->ip6fh_nxt = proto;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1157:     DefragInit();",
          "1160:     if (p1 == NULL)",
          "1161:         goto end;",
          "1163:     if (p2 == NULL)",
          "1164:         goto end;",
          "1166:     if (p3 == NULL)",
          "1167:         goto end;",
          "",
          "[Removed Lines]",
          "1159:     p1 = BuildTestPacket(id, 0, 1, 'A', 8);",
          "1162:     p2 = BuildTestPacket(id, 1, 1, 'B', 8);",
          "1165:     p3 = BuildTestPacket(id, 2, 0, 'C', 3);",
          "",
          "[Added Lines]",
          "1159:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1162:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1165:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1234:     DefragInit();",
          "1237:     if (p1 == NULL)",
          "1238:         goto end;",
          "1240:     if (p2 == NULL)",
          "1241:         goto end;",
          "1243:     if (p3 == NULL)",
          "1244:         goto end;",
          "",
          "[Removed Lines]",
          "1236:     p1 = BuildTestPacket(id, 0, 1, 'A', 8);",
          "1239:     p2 = BuildTestPacket(id, 1, 1, 'B', 8);",
          "1242:     p3 = BuildTestPacket(id, 2, 0, 'C', 3);",
          "",
          "[Added Lines]",
          "1236:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "1239:     p2 = BuildTestPacket(IPPROTO_ICMP, id, 1, 1, 'B', 8);",
          "1242:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1306:     DefragInit();",
          "1309:     if (p1 == NULL)",
          "1310:         goto end;",
          "1312:     if (p2 == NULL)",
          "1313:         goto end;",
          "1315:     if (p3 == NULL)",
          "1316:         goto end;",
          "",
          "[Removed Lines]",
          "1308:     p1 = IPV6BuildTestPacket(id, 0, 1, 'A', 8);",
          "1311:     p2 = IPV6BuildTestPacket(id, 1, 1, 'B', 8);",
          "1314:     p3 = IPV6BuildTestPacket(id, 2, 0, 'C', 3);",
          "",
          "[Added Lines]",
          "1308:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1311:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1314:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1375:     if (dc == NULL)",
          "1376:         goto end;",
          "1379:     if (p1 == NULL)",
          "1380:         goto end;",
          "1382:     if (p2 == NULL)",
          "1383:         goto end;",
          "1385:     if (p3 == NULL)",
          "1386:         goto end;",
          "",
          "[Removed Lines]",
          "1378:     p1 = IPV6BuildTestPacket(id, 0, 1, 'A', 8);",
          "1381:     p2 = IPV6BuildTestPacket(id, 1, 1, 'B', 8);",
          "1384:     p3 = IPV6BuildTestPacket(id, 2, 0, 'C', 3);",
          "",
          "[Added Lines]",
          "1378:     p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 8);",
          "1381:     p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 1, 1, 'B', 8);",
          "1384:     p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 2, 0, 'C', 3);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1506:     default_policy = policy;",
          "",
          "[Removed Lines]",
          "1452:     packets[0] = BuildTestPacket(id, 0, 1, 'A', 24);",
          "1455:     packets[1] = BuildTestPacket(id, 32 >> 3, 1, 'B', 16);",
          "1458:     packets[2] = BuildTestPacket(id, 48 >> 3, 1, 'C', 24);",
          "1461:     packets[3] = BuildTestPacket(id, 80 >> 3, 1, 'D', 8);",
          "1464:     packets[4] = BuildTestPacket(id, 104 >> 3, 1, 'E', 16);",
          "1467:     packets[5] = BuildTestPacket(id, 120 >> 3, 1, 'F', 24);",
          "1470:     packets[6] = BuildTestPacket(id, 144 >> 3, 1, 'G', 16);",
          "1473:     packets[7] = BuildTestPacket(id, 160 >> 3, 1, 'H', 16);",
          "1476:     packets[8] = BuildTestPacket(id, 176 >> 3, 1, 'I', 8);",
          "1483:     packets[9] = BuildTestPacket(id, 8 >> 3, 1, 'J', 32);",
          "1486:     packets[10] = BuildTestPacket(id, 48 >> 3, 1, 'K', 24);",
          "1489:     packets[11] = BuildTestPacket(id, 72 >> 3, 1, 'L', 24);",
          "1492:     packets[12] = BuildTestPacket(id, 96 >> 3, 1, 'M', 24);",
          "1495:     packets[13] = BuildTestPacket(id, 128 >> 3, 1, 'N', 8);",
          "1498:     packets[14] = BuildTestPacket(id, 152 >> 3, 1, 'O', 8);",
          "1501:     packets[15] = BuildTestPacket(id, 160 >> 3, 1, 'P', 8);",
          "1504:     packets[16] = BuildTestPacket(id, 176 >> 3, 0, 'Q', 16);",
          "",
          "[Added Lines]",
          "1452:     packets[0] = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 24);",
          "1455:     packets[1] = BuildTestPacket(IPPROTO_ICMP, id, 32 >> 3, 1, 'B', 16);",
          "1458:     packets[2] = BuildTestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'C', 24);",
          "1461:     packets[3] = BuildTestPacket(IPPROTO_ICMP, id, 80 >> 3, 1, 'D', 8);",
          "1464:     packets[4] = BuildTestPacket(IPPROTO_ICMP, id, 104 >> 3, 1, 'E', 16);",
          "1467:     packets[5] = BuildTestPacket(IPPROTO_ICMP, id, 120 >> 3, 1, 'F', 24);",
          "1470:     packets[6] = BuildTestPacket(IPPROTO_ICMP, id, 144 >> 3, 1, 'G', 16);",
          "1473:     packets[7] = BuildTestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'H', 16);",
          "1476:     packets[8] = BuildTestPacket(IPPROTO_ICMP, id, 176 >> 3, 1, 'I', 8);",
          "1483:     packets[9] = BuildTestPacket(IPPROTO_ICMP, id, 8 >> 3, 1, 'J', 32);",
          "1486:     packets[10] = BuildTestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'K', 24);",
          "1489:     packets[11] = BuildTestPacket(IPPROTO_ICMP, id, 72 >> 3, 1, 'L', 24);",
          "1492:     packets[12] = BuildTestPacket(IPPROTO_ICMP, id, 96 >> 3, 1, 'M', 24);",
          "1495:     packets[13] = BuildTestPacket(IPPROTO_ICMP, id, 128 >> 3, 1, 'N', 8);",
          "1498:     packets[14] = BuildTestPacket(IPPROTO_ICMP, id, 152 >> 3, 1, 'O', 8);",
          "1501:     packets[15] = BuildTestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'P', 8);",
          "1504:     packets[16] = BuildTestPacket(IPPROTO_ICMP, id, 176 >> 3, 0, 'Q', 16);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1641:     default_policy = policy;",
          "",
          "[Removed Lines]",
          "1587:     packets[0] = IPV6BuildTestPacket(id, 0, 1, 'A', 24);",
          "1590:     packets[1] = IPV6BuildTestPacket(id, 32 >> 3, 1, 'B', 16);",
          "1593:     packets[2] = IPV6BuildTestPacket(id, 48 >> 3, 1, 'C', 24);",
          "1596:     packets[3] = IPV6BuildTestPacket(id, 80 >> 3, 1, 'D', 8);",
          "1599:     packets[4] = IPV6BuildTestPacket(id, 104 >> 3, 1, 'E', 16);",
          "1602:     packets[5] = IPV6BuildTestPacket(id, 120 >> 3, 1, 'F', 24);",
          "1605:     packets[6] = IPV6BuildTestPacket(id, 144 >> 3, 1, 'G', 16);",
          "1608:     packets[7] = IPV6BuildTestPacket(id, 160 >> 3, 1, 'H', 16);",
          "1611:     packets[8] = IPV6BuildTestPacket(id, 176 >> 3, 1, 'I', 8);",
          "1618:     packets[9] = IPV6BuildTestPacket(id, 8 >> 3, 1, 'J', 32);",
          "1621:     packets[10] = IPV6BuildTestPacket(id, 48 >> 3, 1, 'K', 24);",
          "1624:     packets[11] = IPV6BuildTestPacket(id, 72 >> 3, 1, 'L', 24);",
          "1627:     packets[12] = IPV6BuildTestPacket(id, 96 >> 3, 1, 'M', 24);",
          "1630:     packets[13] = IPV6BuildTestPacket(id, 128 >> 3, 1, 'N', 8);",
          "1633:     packets[14] = IPV6BuildTestPacket(id, 152 >> 3, 1, 'O', 8);",
          "1636:     packets[15] = IPV6BuildTestPacket(id, 160 >> 3, 1, 'P', 8);",
          "1639:     packets[16] = IPV6BuildTestPacket(id, 176 >> 3, 0, 'Q', 16);",
          "",
          "[Added Lines]",
          "1587:     packets[0] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 0, 1, 'A', 24);",
          "1590:     packets[1] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 32 >> 3, 1, 'B', 16);",
          "1593:     packets[2] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 48 >> 3, 1, 'C', 24);",
          "1596:     packets[3] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 80 >> 3, 1, 'D', 8);",
          "1599:     packets[4] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 104 >> 3, 1, 'E', 16);",
          "1602:     packets[5] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 120 >> 3, 1, 'F', 24);",
          "1605:     packets[6] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 144 >> 3, 1, 'G', 16);",
          "1608:     packets[7] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 160 >> 3, 1, 'H', 16);",
          "1611:     packets[8] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 176 >> 3, 1, 'I', 8);",
          "1618:     packets[9] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 8 >> 3, 1, 'J', 32);",
          "1621:     packets[10] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 48 >> 3, 1, 'K', 24);",
          "1624:     packets[11] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 72 >> 3, 1, 'L', 24);",
          "1627:     packets[12] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 96 >> 3, 1, 'M', 24);",
          "1630:     packets[13] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 128 >> 3, 1, 'N', 8);",
          "1633:     packets[14] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 152 >> 3, 1, 'O', 8);",
          "1636:     packets[15] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 160 >> 3, 1, 'P', 8);",
          "1639:     packets[16] = IPV6BuildTestPacket(IPPROTO_ICMPV6, id, 176 >> 3, 0, 'Q', 16);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124:     for (i = 0; i < 16; i++) {",
          "2126:         if (p == NULL)",
          "2127:             goto end;",
          "",
          "[Removed Lines]",
          "2125:         Packet *p = BuildTestPacket(i, 0, 1, 'A' + i, 16);",
          "",
          "[Added Lines]",
          "2125:         Packet *p = BuildTestPacket(IPPROTO_ICMP,i, 0, 1, 'A' + i, 16);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2142:     if (p == NULL)",
          "2143:         goto end;",
          "",
          "[Removed Lines]",
          "2141:     Packet *p = BuildTestPacket(99, 0, 1, 'A' + i, 16);",
          "",
          "[Added Lines]",
          "2141:     Packet *p = BuildTestPacket(IPPROTO_ICMP, 99, 0, 1, 'A' + i, 16);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2186:         goto end;",
          "2190:     if (p == NULL)",
          "2191:         goto end;",
          "",
          "[Removed Lines]",
          "2189:     p = BuildTestPacket(id, 1, 0, 'A', 0);",
          "",
          "[Added Lines]",
          "2189:     p = BuildTestPacket(IPPROTO_ICMP, id, 1, 0, 'A', 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2229:     if (p == NULL)",
          "2230:         goto end;",
          "",
          "[Removed Lines]",
          "2228:     p = BuildTestPacket(1, 8183, 0, 'A', 71);",
          "",
          "[Added Lines]",
          "2228:     p = BuildTestPacket(IPPROTO_ICMP, 1, 8183, 0, 'A', 71);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2265:     DefragInit();",
          "2268:     if (p1 == NULL)",
          "2269:         goto end;",
          "2271:     if (p2 == NULL)",
          "2272:         goto end;",
          "",
          "[Removed Lines]",
          "2267:     p1 = BuildTestPacket(1, 0, 1, 'A', 8);",
          "2270:     p2 = BuildTestPacket(1, 1, 0, 'B', 8);",
          "",
          "[Added Lines]",
          "2267:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2270:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2311:     DefragInit();",
          "2314:     if (p1 == NULL)",
          "2315:         goto end;",
          "2317:     if (p2 == NULL)",
          "2318:         goto end;",
          "",
          "[Removed Lines]",
          "2313:     p1 = BuildTestPacket(1, 0, 1, 'A', 8);",
          "2316:     p2 = BuildTestPacket(1, 1, 0, 'B', 8);",
          "",
          "[Added Lines]",
          "2313:     p1 = BuildTestPacket(IPPROTO_ICMP, 1, 0, 1, 'A', 8);",
          "2316:     p2 = BuildTestPacket(IPPROTO_ICMP, 1, 1, 0, 'B', 8);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2362:     if (p1 == NULL) {",
          "2363:         goto end;",
          "2364:     }",
          "",
          "[Removed Lines]",
          "2361:     p1 = BuildTestPacket(id, 0, 0, 'A', 8);",
          "",
          "[Added Lines]",
          "2361:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 0, 'A', 8);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2429:     DefragInit();",
          "2434:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2435:         goto end;",
          "2436:     }",
          "",
          "[Removed Lines]",
          "2431:     Packet *p1 = BuildTestPacket(ip_id, 2, 1, 'C', 8);",
          "2432:     Packet *p2 = BuildTestPacket(ip_id, 0, 1, 'A', 8);",
          "2433:     Packet *p3 = BuildTestPacket(ip_id, 1, 0, 'B', 8);",
          "",
          "[Added Lines]",
          "2431:     Packet *p1 = BuildTestPacket(IPPROTO_ICMP, ip_id, 2, 1, 'C', 8);",
          "2432:     Packet *p2 = BuildTestPacket(IPPROTO_ICMP, ip_id, 0, 1, 'A', 8);",
          "2433:     Packet *p3 = BuildTestPacket(IPPROTO_ICMP, ip_id, 1, 0, 'B', 8);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2493:     DefragInit();",
          "2498:     if (p1 == NULL || p2 == NULL || p3 == NULL) {",
          "2499:         goto end;",
          "2500:     }",
          "",
          "[Removed Lines]",
          "2495:     Packet *p1 = IPV6BuildTestPacket(ip_id, 2, 1, 'C', 8);",
          "2496:     Packet *p2 = IPV6BuildTestPacket(ip_id, 0, 1, 'A', 8);",
          "2497:     Packet *p3 = IPV6BuildTestPacket(ip_id, 1, 0, 'B', 8);",
          "",
          "[Added Lines]",
          "2495:     Packet *p1 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 2, 1, 'C', 8);",
          "2496:     Packet *p2 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 0, 1, 'A', 8);",
          "2497:     Packet *p3 = IPV6BuildTestPacket(IPPROTO_ICMPV6, ip_id, 1, 0, 'B', 8);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2539:     return retval;",
          "2540: }",
          "2544: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2546: static int DefragTestBadProto(void)",
          "2547: {",
          "2548:     Packet *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "2549:     int id = 12;",
          "2551:     DefragInit();",
          "2553:     p1 = BuildTestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 8);",
          "2554:     FAIL_IF_NULL(p1);",
          "2555:     p2 = BuildTestPacket(IPPROTO_UDP, id, 1, 1, 'B', 8);",
          "2556:     FAIL_IF_NULL(p2);",
          "2557:     p3 = BuildTestPacket(IPPROTO_ICMP, id, 2, 0, 'C', 3);",
          "2558:     FAIL_IF_NULL(p3);",
          "2560:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p1, NULL));",
          "2561:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p2, NULL));",
          "2562:     FAIL_IF_NOT_NULL(Defrag(NULL, NULL, p3, NULL));",
          "2564:     if (p1 != NULL)",
          "2565:         SCFree(p1);",
          "2566:     if (p2 != NULL)",
          "2567:         SCFree(p2);",
          "2568:     if (p3 != NULL)",
          "2569:         SCFree(p3);",
          "2571:     DefragDestroy();",
          "2572:     PASS;",
          "2573: }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2580:     UtRegisterTest(\"DefragTimeoutTest\", DefragTimeoutTest);",
          "2581:     UtRegisterTest(\"DefragMfIpv4Test\", DefragMfIpv4Test);",
          "2582:     UtRegisterTest(\"DefragMfIpv6Test\", DefragMfIpv6Test);",
          "2584: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2616:     UtRegisterTest(\"DefragTestBadProto\", DefragTestBadProto);",
          "",
          "---------------"
        ],
        "src/defrag.h||src/defrag.h": [
          "File: src/defrag.h -> src/defrag.h"
        ]
      }
    }
  ]
}