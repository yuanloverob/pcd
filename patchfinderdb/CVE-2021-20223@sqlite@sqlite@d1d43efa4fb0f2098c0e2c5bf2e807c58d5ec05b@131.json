{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91a23dc2999ebbdd8041f41a11dc81c63484f39a",
      "candidate_info": {
        "commit_hash": "91a23dc2999ebbdd8041f41a11dc81c63484f39a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91a23dc2999ebbdd8041f41a11dc81c63484f39a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a typo in a comment.  No changes to code.\n\nFossilOrigin-Name: 3a51919ac23ae7312d78905334dc97742b517a7476052a85aa07945d9c77697b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 38e3dd389d142e520c71139ec84aa3c7722992af28a5f93a7f16e0ea176b74bb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c"
        ]
      }
    },
    {
      "candidate_hash": "f2e151aeab6944f057a6a96a3d59cbcc85dc6f50",
      "candidate_info": {
        "commit_hash": "f2e151aeab6944f057a6a96a3d59cbcc85dc6f50",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2e151aeab6944f057a6a96a3d59cbcc85dc6f50",
        "files": [
          "ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5hash.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem in fts5 causing the in-memory hash table to be flushed more often than necessary.\n\nFossilOrigin-Name: 9a55601d072bcd1ac0f6f1633216c7c8b3ff3e037451e2cfd285cbe19b60b9fc",
        "before_after_code_files": [
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5hash.test||ext/fts5/test/fts5hash.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:       p->iCol = (pHash->eDetail==FTS5_DETAIL_FULL ? 0 : -1);",
          "307:     }",
          "310:   }else{",
          "",
          "[Removed Lines]",
          "309:     nIncr += p->nData;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5hash.test||ext/fts5/test/fts5hash.test": [
          "File: ext/fts5/test/fts5hash.test -> ext/fts5/test/fts5hash.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   # Add a small and very large token with the same hash value to an",
          "113:   # empty table. At one point this would provoke an asan error.",
          "114:   #",
          "116:     set big [string repeat 12345 40]",
          "117:     set hash [sqlite3_fts5_token_hash 1024 $big]",
          "118:     while {1} {",
          "",
          "[Removed Lines]",
          "115:   do_test 2.0 {",
          "",
          "[Added Lines]",
          "115:   do_test 1.5 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129: } ;# foreach_detail_mode",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #-------------------------------------------------------------------------",
          "132: reset_db",
          "133: do_execsql_test 2.1 {",
          "134:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "135:   INSERT INTO t1(t1, rank) VALUES('hashsize', 1024);",
          "136:   INSERT INTO t1(t1, rank) VALUES('automerge', 0);",
          "137:   INSERT INTO t1(t1, rank) VALUES('crisismerge', 1000);",
          "138: }",
          "140: do_execsql_test 2.2 {",
          "141:   BEGIN;",
          "142:     INSERT INTO t1 VALUES('abc def ghi');",
          "143:     SELECT count(*) FROM t1_data;",
          "144: } {2}",
          "146: do_execsql_test 2.3 {",
          "147:   WITH s(i) AS (",
          "148:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<1024",
          "149:   )",
          "150:   INSERT INTO t1 SELECT 'abc def ghi' FROM s;",
          "151:   SELECT (SELECT count(*) FROM t1_data) > 10;",
          "152: } {1}",
          "154: do_execsql_test 2.4 {",
          "155:   COMMIT;",
          "156:   DROP TABLE t1;",
          "157:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "158:   INSERT INTO t1(t1, rank) VALUES('hashsize', 1024);",
          "159:   INSERT INTO t1(t1, rank) VALUES('automerge', 0);",
          "160:   INSERT INTO t1(t1, rank) VALUES('crisismerge', 1000);",
          "161:   WITH s(i) AS (",
          "162:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<1024",
          "163:   )",
          "164:   INSERT INTO t1 SELECT 'abc' || i || ' def' || i || ' ghi' || i FROM s;",
          "165:   SELECT (SELECT count(*) FROM t1_data) > 100;",
          "166: } {1}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 66f94d623c16b4527e42f0519e32ec78eaf9ee6fd61ee7d0eb657cc59a8f7d68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25a78fdfa23008b2a97a99ccba71c964523eeb03",
      "candidate_info": {
        "commit_hash": "25a78fdfa23008b2a97a99ccba71c964523eeb03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25a78fdfa23008b2a97a99ccba71c964523eeb03",
        "files": [
          "ext/misc/appendvfs.c",
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/memdb.c",
          "src/memjournal.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/test_multiplex.c",
          "test/sessionfuzz.c"
        ],
        "message": "Merge recent changes from trunk.\n\nFossilOrigin-Name: 22e8e6901a119698de831ede6d8b03c4fd6576eaa8686a97a0b8aeea7593688a",
        "before_after_code_files": [
          "ext/misc/appendvfs.c||ext/misc/appendvfs.c",
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/memdb.c||src/memdb.c",
          "src/memjournal.c||src/memjournal.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/test_multiplex.c||src/test_multiplex.c",
          "test/sessionfuzz.c||test/sessionfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/appendvfs.c||ext/misc/appendvfs.c": [
          "File: ext/misc/appendvfs.c -> ext/misc/appendvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:   p = (ApndFile*)pFile;",
          "440:   memset(p, 0, sizeof(*p));",
          "441:   pSubFile = ORIGFILE(pFile);",
          "443:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);",
          "444:   if( rc ) goto apnd_open_done;",
          "445:   rc = pSubFile->pMethods->xFileSize(pSubFile, &sz);",
          "",
          "[Removed Lines]",
          "442:   p->base.pMethods = &apnd_io_methods;",
          "",
          "[Added Lines]",
          "442:   pFile->pMethods = &apnd_io_methods;",
          "",
          "---------------"
        ],
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:   p = (CksmFile*)pFile;",
          "635:   memset(p, 0, sizeof(*p));",
          "636:   pSubFile = ORIGFILE(pFile);",
          "638:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);",
          "639:   if( rc ) goto cksm_open_done;",
          "640:   if( flags & SQLITE_OPEN_WAL ){",
          "",
          "[Removed Lines]",
          "637:   p->base.pMethods = &cksm_io_methods;",
          "",
          "[Added Lines]",
          "637:   pFile->pMethods = &cksm_io_methods;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 849b03d8de62251707ee0d31c9f1cd98cbd296c70c1a2c8d7c1658840a930fe4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   p->mFlags = SQLITE_DESERIALIZE_RESIZEABLE | SQLITE_DESERIALIZE_FREEONCLOSE;",
          "343:   p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "344:   return SQLITE_OK;",
          "345: }",
          "",
          "[Removed Lines]",
          "342:   p->base.pMethods = &memdb_io_methods;",
          "",
          "[Added Lines]",
          "342:   pFile->pMethods = &memdb_io_methods;",
          "",
          "---------------"
        ],
        "src/memjournal.c||src/memjournal.c": [
          "File: src/memjournal.c -> src/memjournal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     assert( MEMJOURNAL_DFLT_FILECHUNKSIZE==fileChunkSize(p->nChunkSize) );",
          "367:   }",
          "370:   p->nSpill = nSpill;",
          "371:   p->flags = flags;",
          "372:   p->zJournal = zName;",
          "",
          "[Removed Lines]",
          "369:   p->pMethod = (const sqlite3_io_methods*)&MemJournalMethods;",
          "",
          "[Added Lines]",
          "369:   pJfd->pMethods = (const sqlite3_io_methods*)&MemJournalMethods;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: int sqlite3JournalCreate(sqlite3_file *pJfd){",
          "393:   int rc = SQLITE_OK;",
          "394:   MemJournal *p = (MemJournal*)pJfd;",
          "396: #ifdef SQLITE_ENABLE_ATOMIC_WRITE",
          "397:      p->nSpill>0",
          "398: #else",
          "",
          "[Removed Lines]",
          "395:   if( p->pMethod==&MemJournalMethods && (",
          "",
          "[Added Lines]",
          "395:   if( pJfd->pMethods==&MemJournalMethods && (",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5692:   if( rc!=SQLITE_OK ){",
          "5693:     if( h>=0 ) robust_close(pNew, h, __LINE__);",
          "5694:   }else{",
          "5696:     OpenCounter(+1);",
          "5697:     verifyDbFile(pNew);",
          "5698:   }",
          "",
          "[Removed Lines]",
          "5695:     pNew->pMethod = pLockingStyle;",
          "",
          "[Added Lines]",
          "5695:     pId->pMethods = pLockingStyle;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5266:   }",
          "5268:   sqlite3_free(zTmpname);",
          "5270:   pFile->pVfs = pVfs;",
          "5271:   pFile->h = h;",
          "5272:   if( isReadonly ){",
          "",
          "[Removed Lines]",
          "5269:   pFile->pMethod = pAppData ? pAppData->pMethod : &winIoMethod;",
          "",
          "[Added Lines]",
          "5269:   id->pMethods = pAppData ? pAppData->pMethod : &winIoMethod;",
          "",
          "---------------"
        ],
        "src/test_multiplex.c||src/test_multiplex.c": [
          "File: src/test_multiplex.c -> src/test_multiplex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:     if( rc==SQLITE_OK ){",
          "593:       if( pSubOpen->pMethods->iVersion==1 ){",
          "595:       }else{",
          "597:       }",
          "598:     }else{",
          "599:       multiplexFreeComponents(pGroup);",
          "",
          "[Removed Lines]",
          "594:         pMultiplexOpen->base.pMethods = &gMultiplex.sIoMethodsV1;",
          "596:         pMultiplexOpen->base.pMethods = &gMultiplex.sIoMethodsV2;",
          "",
          "[Added Lines]",
          "594:         pConn->pMethods = &gMultiplex.sIoMethodsV1;",
          "596:         pConn->pMethods = &gMultiplex.sIoMethodsV2;",
          "",
          "---------------"
        ],
        "test/sessionfuzz.c||test/sessionfuzz.c": [
          "File: test/sessionfuzz.c -> test/sessionfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698: #include <stdio.h>",
          "699: #include <string.h>",
          "700: #include <assert.h>",
          "701: #include \"zlib.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: #ifndef OMIT_ZLIB",
          "703: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "715:   int argc,",
          "716:   sqlite3_value **argv",
          "717: ){",
          "718:   uLong nData;",
          "719:   uLongf sz;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: #ifdef OMIT_ZLIB",
          "721:   sqlite3_result_value(context, argv[0]);",
          "722: #else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "733:     }",
          "734:     sqlite3_free(pOut);",
          "735:   }",
          "736: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abc38158605809fd4e0652c8728def646f4019e2",
      "candidate_info": {
        "commit_hash": "abc38158605809fd4e0652c8728def646f4019e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/abc38158605809fd4e0652c8728def646f4019e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/build.c",
          "src/pager.c",
          "src/prepare.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/wherecode.c"
        ],
        "message": "Continuing work toward supporting unsigned 32-bit page numbers.\n\nFossilOrigin-Name: 9ce1710aad43cebe5ad50859c7685fb83e40cdd4a60913bd2b7e659bc59942fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/build.c||src/build.c",
          "src/pager.c||src/pager.c",
          "src/prepare.c||src/prepare.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a8200327d4e8e78abef09c64345e0036f730fbbb20ae88935ef6c9972e6c7d5e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   sqlite3 *db = pParse->db;",
          "187:   Db *pDb;",
          "188:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "190:   u8 aCreateTbl[ArraySize(aTable)];",
          "191: #ifdef SQLITE_ENABLE_STAT4",
          "192:   const int nToOpen = OptimizationEnabled(db,SQLITE_Stat4) ? 2 : 1;",
          "",
          "[Removed Lines]",
          "189:   int aRoot[ArraySize(aTable)];",
          "",
          "[Added Lines]",
          "189:   u32 aRoot[ArraySize(aTable)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         sqlite3NestedParse(pParse,",
          "216:             \"CREATE TABLE %Q.%s(%s)\", pDb->zDbSName, zTab, aTable[i].zCols",
          "217:         );",
          "219:         aCreateTbl[i] = OPFLAG_P2ISREG;",
          "220:       }",
          "221:     }else{",
          "",
          "[Removed Lines]",
          "218:         aRoot[i] = pParse->regRoot;",
          "",
          "[Added Lines]",
          "218:         aRoot[i] = (u32)pParse->regRoot;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235: #endif",
          "236:       }else{",
          "239:       }",
          "240:     }",
          "241:   }",
          "",
          "[Removed Lines]",
          "238:         sqlite3VdbeAddOp2(v, OP_Clear, aRoot[i], iDb);",
          "",
          "[Added Lines]",
          "238:         sqlite3VdbeAddOp2(v, OP_Clear, (int)aRoot[i], iDb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:   for(i=0; i<nToOpen; i++){",
          "245:     assert( i<ArraySize(aTable) );",
          "247:     sqlite3VdbeChangeP5(v, aCreateTbl[i]);",
          "248:     VdbeComment((v, aTable[i].zName));",
          "249:   }",
          "",
          "[Removed Lines]",
          "246:     sqlite3VdbeAddOp4Int(v, OP_OpenWrite, iStatCur+i, aRoot[i], iDb, 3);",
          "",
          "[Added Lines]",
          "246:     sqlite3VdbeAddOp4Int(v, OP_OpenWrite, iStatCur+i, (int)aRoot[i], iDb, 3);",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4419:   pCur->iPage = -1;",
          "4420:   pCur->pKeyInfo = pKeyInfo;",
          "4421:   pCur->pBtree = p;",
          "",
          "[Removed Lines]",
          "4418:   pCur->pgnoRoot = (Pgno)iTable;",
          "",
          "[Added Lines]",
          "4418:   pCur->pgnoRoot = iTable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4427:   for(pX=pBt->pCursor; pX; pX=pX->pNext){",
          "4429:       pX->curFlags |= BTCF_Multiple;",
          "4430:       pCur->curFlags |= BTCF_Multiple;",
          "4431:     }",
          "",
          "[Removed Lines]",
          "4428:     if( pX->pgnoRoot==(Pgno)iTable ){",
          "",
          "[Added Lines]",
          "4428:     if( pX->pgnoRoot==iTable ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9098:   BtShared *pBt = p->pBt;",
          "9099:   MemPage *pRoot;",
          "9100:   Pgno pgnoRoot;",
          "",
          "[Removed Lines]",
          "9097: static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){",
          "",
          "[Added Lines]",
          "9097: static int btreeCreateTable(Btree *p, Pgno *piTable, int createTabFlags){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9234:   zeroPage(pRoot, ptfFlags);",
          "9235:   sqlite3PagerUnref(pRoot->pDbPage);",
          "9236:   assert( (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 );",
          "9238:   return SQLITE_OK;",
          "9239: }",
          "9241:   int rc;",
          "9242:   sqlite3BtreeEnter(p);",
          "9243:   rc = btreeCreateTable(p, piTable, flags);",
          "",
          "[Removed Lines]",
          "9240: int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){",
          "",
          "[Added Lines]",
          "9240: int sqlite3BtreeCreateTable(Btree *p, Pgno *piTable, int flags){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9889:   usableSize = pBt->usableSize;",
          "9890:   if( iPage==0 ) return 0;",
          "9891:   if( checkRef(pCheck, iPage) ) return 0;",
          "9893:   pCheck->v1 = iPage;",
          "9895:     checkAppendMsg(pCheck,",
          "9896:        \"unable to get the page. error code=%d\", rc);",
          "9897:     goto end_of_check;",
          "",
          "[Removed Lines]",
          "9892:   pCheck->zPfx = \"Page %d: \";",
          "9894:   if( (rc = btreeGetPage(pBt, (Pgno)iPage, &pPage, 0))!=0 ){",
          "",
          "[Added Lines]",
          "9892:   pCheck->zPfx = \"Page %u: \";",
          "9894:   if( (rc = btreeGetPage(pBt, iPage, &pPage, 0))!=0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9916:   hdr = pPage->hdrOffset;",
          "9920:   contentOffset = get2byteNotZero(&data[hdr+5]);",
          "",
          "[Removed Lines]",
          "9919:   pCheck->zPfx = \"On tree page %d cell %d: \";",
          "",
          "[Added Lines]",
          "9919:   pCheck->zPfx = \"On tree page %u cell %d: \";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9936:     pgno = get4byte(&data[hdr+8]);",
          "9937: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "9938:     if( pBt->autoVacuum ){",
          "9940:       checkPtrmap(pCheck, pgno, PTRMAP_BTREE, iPage);",
          "9941:     }",
          "9942: #endif",
          "",
          "[Removed Lines]",
          "9939:       pCheck->zPfx = \"On page %d at right child: \";",
          "",
          "[Added Lines]",
          "9939:       pCheck->zPfx = \"On page %u at right child: \";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10077:     while( btreeHeapPull(heap,&x) ){",
          "10078:       if( (prev&0xffff)>=(x>>16) ){",
          "10079:         checkAppendMsg(pCheck,",
          "10081:         break;",
          "10082:       }else{",
          "10083:         nFrag += (x>>16) - (prev&0xffff) - 1;",
          "",
          "[Removed Lines]",
          "10080:           \"Multiple uses for byte %u of page %d\", x>>16, iPage);",
          "",
          "[Added Lines]",
          "10080:           \"Multiple uses for byte %u of page %u\", x>>16, iPage);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10093:     if( heap[0]==0 && nFrag!=data[hdr+7] ){",
          "10094:       checkAppendMsg(pCheck,",
          "10096:           nFrag, data[hdr+7], iPage);",
          "10097:     }",
          "10098:   }",
          "",
          "[Removed Lines]",
          "10095:           \"Fragmentation of %d bytes reported as %d on page %d\",",
          "",
          "[Added Lines]",
          "10095:           \"Fragmentation of %d bytes reported as %d on page %u\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10184: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "10185:   if( pBt->autoVacuum ){",
          "10187:     int mxInHdr;",
          "10188:     for(i=0; (int)i<nRoot; i++) if( mx<aRoot[i] ) mx = aRoot[i];",
          "10189:     mxInHdr = get4byte(&pBt->pPage1->aData[52]);",
          "",
          "[Removed Lines]",
          "10186:     int mx = 0;",
          "",
          "[Added Lines]",
          "10186:     Pgno mx = 0;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: int sqlite3BtreeCommit(Btree*);",
          "85: int sqlite3BtreeRollback(Btree*,int,int);",
          "86: int sqlite3BtreeBeginStmt(Btree*,int);",
          "88: int sqlite3BtreeIsInTrans(Btree*);",
          "89: int sqlite3BtreeIsInReadTrans(Btree*);",
          "90: int sqlite3BtreeIsInBackup(Btree*);",
          "",
          "[Removed Lines]",
          "87: int sqlite3BtreeCreateTable(Btree*, int*, int flags);",
          "",
          "[Added Lines]",
          "87: int sqlite3BtreeCreateTable(Btree*, Pgno*, int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "317: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "320: struct Pager *sqlite3BtreePager(Btree*);",
          "321: i64 sqlite3BtreeRowCountEst(BtCursor*);",
          "",
          "[Removed Lines]",
          "319: char *sqlite3BtreeIntegrityCheck(sqlite3*,Btree*,int*aRoot,int nRoot,int,int*);",
          "",
          "[Added Lines]",
          "319: char *sqlite3BtreeIntegrityCheck(sqlite3*,Btree*,Pgno*aRoot,int nRoot,int,int*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:   if( v && pPk->tnum>0 ){",
          "2116:     assert( db->init.busy==0 );",
          "2118:   }",
          "",
          "[Removed Lines]",
          "2117:     sqlite3VdbeChangeOpcode(v, pPk->tnum, OP_Goto);",
          "",
          "[Added Lines]",
          "2117:     sqlite3VdbeChangeOpcode(v, (int)pPk->tnum, OP_Goto);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2812: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "2814:   HashElem *pElem;",
          "2815:   Hash *pHash;",
          "2816:   Db *pDb;",
          "",
          "[Removed Lines]",
          "2813: void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){",
          "",
          "[Added Lines]",
          "2813: void sqlite3RootPageMoved(sqlite3 *db, int iDb, Pgno iFrom, Pgno iTo){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2891:   int iDestroyed = 0;",
          "2893:   while( 1 ){",
          "",
          "[Removed Lines]",
          "2890:   int iTab = pTab->tnum;",
          "",
          "[Added Lines]",
          "2890:   Pgno iTab = pTab->tnum;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2898:       iLargest = iTab;",
          "2899:     }",
          "2900:     for(pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext){",
          "2902:       assert( pIdx->pSchema==pTab->pSchema );",
          "2903:       if( (iDestroyed==0 || (iIdx<iDestroyed)) && iIdx>iLargest ){",
          "2904:         iLargest = iIdx;",
          "",
          "[Removed Lines]",
          "2901:       int iIdx = pIdx->tnum;",
          "",
          "[Added Lines]",
          "2901:       Pgno iIdx = pIdx->tnum;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3342:   v = sqlite3GetVdbe(pParse);",
          "3343:   if( v==0 ) return;",
          "3344:   if( memRootPage>=0 ){",
          "3346:   }else{",
          "3347:     tnum = pIndex->tnum;",
          "3348:   }",
          "",
          "[Removed Lines]",
          "3345:     tnum = memRootPage;",
          "",
          "[Added Lines]",
          "3345:     tnum = (Pgno)memRootPage;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3367:   sqlite3VdbeAddOp2(v, OP_Next, iTab, addr1+1); VdbeCoverage(v);",
          "3368:   sqlite3VdbeJumpHere(v, addr1);",
          "3369:   if( memRootPage<0 ) sqlite3VdbeAddOp2(v, OP_Clear, tnum, iDb);",
          "3371:                     (char *)pKey, P4_KEYINFO);",
          "3372:   sqlite3VdbeChangeP5(v, OPFLAG_BULKCSR|((memRootPage>=0)?OPFLAG_P2ISREG:0));",
          "",
          "[Removed Lines]",
          "3370:   sqlite3VdbeAddOp4(v, OP_OpenWrite, iIdx, tnum, iDb,",
          "",
          "[Added Lines]",
          "3370:   sqlite3VdbeAddOp4(v, OP_OpenWrite, iIdx, (int)tnum, iDb,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3980:       sqlite3VdbeAddOp3(v, OP_CreateBtree, iDb, iMem, BTREE_BLOBKEY);",
          "",
          "[Removed Lines]",
          "3979:       pIndex->tnum = sqlite3VdbeAddOp0(v, OP_Noop);",
          "",
          "[Added Lines]",
          "3979:       pIndex->tnum = (Pgno)sqlite3VdbeAddOp0(v, OP_Noop);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4018:         sqlite3VdbeAddOp2(v, OP_Expire, 0, 1);",
          "4019:       }",
          "4022:     }",
          "4023:   }",
          "4024:   if( db->init.busy || pTblName==0 ){",
          "",
          "[Removed Lines]",
          "4021:       sqlite3VdbeJumpHere(v, pIndex->tnum);",
          "",
          "[Added Lines]",
          "4021:       sqlite3VdbeJumpHere(v, (int)pIndex->tnum);",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "786: # define USEFETCH(x) 0",
          "787: #endif",
          "",
          "[Removed Lines]",
          "792: #define PAGER_MAX_PGNO 2147483647",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5490:   if( pPg->pPager && !noContent ){",
          "5494:     pPager->aStat[PAGER_STAT_HIT]++;",
          "5495:     return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "5493:     assert( pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) );",
          "",
          "[Added Lines]",
          "5488:     assert( pgno!=PAGER_MJ_PGNO(pPager) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5505:       rc = SQLITE_CORRUPT_BKPT;",
          "5506:       goto pager_acquire_err;",
          "5507:     }",
          "",
          "[Removed Lines]",
          "5504:     if( pgno>PAGER_MAX_PGNO || pgno==PAGER_MJ_PGNO(pPager) ){",
          "",
          "[Added Lines]",
          "5499:     if( pgno==PAGER_MJ_PGNO(pPager) ){",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     Index *pIndex;",
          "150:     pIndex = sqlite3FindIndex(db, argv[1], db->aDb[iDb].zDbSName);",
          "151:     if( pIndex==0",
          "153:      || pIndex->tnum<2",
          "154:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "155:     ){",
          "",
          "[Removed Lines]",
          "152:      || sqlite3GetInt32(argv[3],&pIndex->tnum)==0",
          "",
          "[Added Lines]",
          "152:      || sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3239:   if( aPermute ){",
          "3240:     struct ExprList_item *pItem;",
          "3241:     aPermute[0] = nOrderBy;",
          "",
          "[Removed Lines]",
          "3238:   aPermute = sqlite3DbMallocRawNN(db, sizeof(int)*(nOrderBy + 1));",
          "",
          "[Added Lines]",
          "3238:   aPermute = sqlite3DbMallocRawNN(db, sizeof(u32)*(nOrderBy + 1));",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4465: void sqlite3Int64ToText(i64,char*);",
          "4466: int sqlite3AtoF(const char *z, double*, int, u8);",
          "4467: int sqlite3GetInt32(const char *, int*);",
          "4468: int sqlite3Atoi(const char*);",
          "4469: #ifndef SQLITE_OMIT_UTF16",
          "4470: int sqlite3Utf16ByteLen(const void *pData, int nChar);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4468: int sqlite3GetUInt32(const char*, u32*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4592: #ifdef VDBE_PROFILE",
          "4593: extern sqlite3_uint64 sqlite3NProfileCnt;",
          "4594: #endif",
          "4596: void sqlite3Reindex(Parse*, Token*, Token*);",
          "4597: void sqlite3AlterFunctions(void);",
          "4598: void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);",
          "",
          "[Removed Lines]",
          "4595: void sqlite3RootPageMoved(sqlite3*, int, int, int);",
          "",
          "[Added Lines]",
          "4596: void sqlite3RootPageMoved(sqlite3*, int, Pgno, Pgno);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4706: #endif",
          "4708: #ifndef SQLITE_OMIT_SHARED_CACHE",
          "4710: #else",
          "4711:   #define sqlite3TableLock(v,w,x,y,z)",
          "4712: #endif",
          "",
          "[Removed Lines]",
          "4709:   void sqlite3TableLock(Parse *, int, int, u8, const char *);",
          "",
          "[Added Lines]",
          "4710:   void sqlite3TableLock(Parse *, int, Pgno, u8, const char *);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "863:   return x;",
          "864: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872: int sqlite3GetUInt32(const char *z, u32 *pI){",
          "873:   u64 v = 0;",
          "874:   int i;",
          "875:   for(i=0; sqlite3Isdigit(z[i]); i++){",
          "876:     v = v*10 + z[i] - '0';",
          "877:     if( v>4294967296LL ) return 0;",
          "878:   }",
          "879:   if( i==0 || z[i]!=0 ) return 0;",
          "881:   return 1;",
          "882: }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2250:   int p1;",
          "2251:   int p2;",
          "2252:   const KeyInfo *pKeyInfo;",
          "2258:   if( (pOp->p5 & OPFLAG_PERMUTE)==0 ){",
          "2259:     aPermute = 0;",
          "",
          "[Removed Lines]",
          "2253:   int idx;",
          "",
          "[Added Lines]",
          "2253:   u32 idx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2611:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "2612:   pC = p->apCsr[pOp->p1];",
          "2613:   assert( pC!=0 );",
          "",
          "[Removed Lines]",
          "2614:   p2 = pOp->p2;",
          "",
          "[Added Lines]",
          "2614:   p2 = (u32)pOp->p2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3762: case OP_ReopenIdx: {",
          "3763:   int nField;",
          "3764:   KeyInfo *pKeyInfo;",
          "3766:   int iDb;",
          "3767:   int wrFlag;",
          "3768:   Btree *pX;",
          "",
          "[Removed Lines]",
          "3765:   int p2;",
          "",
          "[Added Lines]",
          "3765:   u32 p2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3794:   nField = 0;",
          "3795:   pKeyInfo = 0;",
          "3797:   iDb = pOp->p3;",
          "3798:   assert( iDb>=0 && iDb<db->nDb );",
          "3799:   assert( DbMaskTest(p->btreeMask, iDb) );",
          "",
          "[Removed Lines]",
          "3796:   p2 = pOp->p2;",
          "",
          "[Added Lines]",
          "3796:   p2 = (u32)pOp->p2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3966:       if( (pCx->pKeyInfo = pKeyInfo = pOp->p4.pKeyInfo)!=0 ){",
          "3967:         assert( pOp->p4type==P4_KEYINFO );",
          "3969:                                      BTREE_BLOBKEY | pOp->p5);",
          "3970:         if( rc==SQLITE_OK ){",
          "3971:           assert( pCx->pgnoRoot==SCHEMA_ROOT+1 );",
          "",
          "[Removed Lines]",
          "3968:         rc = sqlite3BtreeCreateTable(pCx->pBtx, (int*)&pCx->pgnoRoot,",
          "",
          "[Added Lines]",
          "3968:         rc = sqlite3BtreeCreateTable(pCx->pBtx, &pCx->pgnoRoot,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5230:   assert( pC->deferredMoveto==0 );",
          "5231:   assert( sqlite3BtreeCursorIsValid(pCrsr) );",
          "5237:   n = sqlite3BtreePayloadSize(pCrsr);",
          "5238:   if( n>(u32)db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "",
          "[Removed Lines]",
          "5233:   rc = sqlite3VdbeCursorMoveto(pC);",
          "5234:   if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "5235: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6002:   assert( p->readOnly==0 );",
          "6003:   assert( DbMaskTest(p->btreeMask, pOp->p2) );",
          "6004:   rc = sqlite3BtreeClearTable(",
          "6006:   );",
          "6007:   if( pOp->p3 ){",
          "6008:     p->nChange += nChange;",
          "",
          "[Removed Lines]",
          "6005:       db->aDb[pOp->p2].pBt, pOp->p1, (pOp->p3 ? &nChange : 0)",
          "",
          "[Added Lines]",
          "6001:       db->aDb[pOp->p2].pBt, (u32)pOp->p1, (pOp->p3 ? &nChange : 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6055:   Db *pDb;",
          "6057:   sqlite3VdbeIncrWriteCounter(p, 0);",
          "",
          "[Removed Lines]",
          "6054:   int pgno;",
          "",
          "[Added Lines]",
          "6050:   Pgno pgno;",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: void sqlite3VdbeFreeCursor(Vdbe *, VdbeCursor*);",
          "486: void sqliteVdbePopStack(Vdbe*,int);",
          "487: int SQLITE_NOINLINE sqlite3VdbeFinishMoveto(VdbeCursor*);",
          "489: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "490: u32 sqlite3VdbeSerialTypeLen(u32);",
          "491: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "",
          "[Removed Lines]",
          "488: int sqlite3VdbeCursorMoveto(VdbeCursor**, int*);",
          "",
          "[Added Lines]",
          "488: int sqlite3VdbeCursorMoveto(VdbeCursor**, u32*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1712:     }",
          "1713: #endif",
          "1714:     case P4_INTARRAY: {",
          "1719:       for(i=1; i<=n; i++){",
          "1721:       }",
          "1722:       sqlite3_str_append(&x, \"]\", 1);",
          "1723:       break;",
          "",
          "[Removed Lines]",
          "1715:       int i;",
          "1716:       int *ai = pOp->p4.ai;",
          "1717:       int n = ai[0];   /* The first element of an INTARRAY is always the",
          "1720:         sqlite3_str_appendf(&x, \"%c%d\", (i==1 ? '[' : ','), ai[i]);",
          "",
          "[Added Lines]",
          "1715:       u32 i;",
          "1716:       u32 *ai = pOp->p4.ai;",
          "1717:       u32 n = ai[0];   /* The first element of an INTARRAY is always the",
          "1720:         sqlite3_str_appendf(&x, \"%c%u\", (i==1 ? '[' : ','), ai[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3565:   VdbeCursor *p = *pp;",
          "3566:   assert( p->eCurType==CURTYPE_BTREE || p->eCurType==CURTYPE_PSEUDO );",
          "3567:   if( p->deferredMoveto ){",
          "3569:     if( p->aAltMap && (iMap = p->aAltMap[1+*piCol])>0 && !p->nullRow ){",
          "",
          "[Removed Lines]",
          "3564: int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){",
          "3568:     int iMap;",
          "",
          "[Added Lines]",
          "3564: int sqlite3VdbeCursorMoveto(VdbeCursor **pp, u32 *piCol){",
          "3568:     u32 iMap;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:   ){",
          "1053:     int i;",
          "1054:     Table *pTab = pIdx->pTable;",
          "1056:     if( ai ){",
          "1057:       ai[0] = pTab->nCol;",
          "1058:       for(i=0; i<pIdx->nColumn-1; i++){",
          "",
          "[Removed Lines]",
          "1055:     int *ai = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*(pTab->nCol+1));",
          "",
          "[Added Lines]",
          "1055:     u32 *ai = (u32*)sqlite3DbMallocZero(pParse->db, sizeof(u32)*(pTab->nCol+1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "465c2b89646c60aebf2ebf7ce0deb92d812f7178",
      "candidate_info": {
        "commit_hash": "465c2b89646c60aebf2ebf7ce0deb92d812f7178",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/465c2b89646c60aebf2ebf7ce0deb92d812f7178",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/build.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/trigger.c"
        ],
        "message": "Consolidate some code on this branch.\n\nFossilOrigin-Name: a85c63daa640e02fdfd891a05a1a09e848c9621a5dd6e112338451008623ecbb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/build.c||src/build.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75c85ca32f9ae4a28fd8f8ff2f7639599413d22af706e9799a0e76cc560d14eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   return rc;",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: int sqlite3DbIsNamed(sqlite3 *db, int iDb, const char *zName){",
          "53:   return (",
          "54:       sqlite3StrICmp(db->aDb[iDb].zDbSName, zName)==0",
          "55:    || (iDb==0 && sqlite3StrICmp(\"main\", zName)==0)",
          "56:   );",
          "57: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:       goto attach_error;",
          "118:     }",
          "119:     for(i=0; i<db->nDb; i++){",
          "123:         zErrDyn = sqlite3MPrintf(db, \"database %s is already in use\", zName);",
          "124:         goto attach_error;",
          "125:       }",
          "",
          "[Removed Lines]",
          "120:       char *z = db->aDb[i].zDbSName;",
          "121:       assert( z && zName );",
          "122:       if( sqlite3StrICmp(z, zName)==0 || sqlite3StrICmp(\"main\", zName)==0 ){",
          "",
          "[Added Lines]",
          "131:       assert( zName );",
          "132:       if( sqlite3DbIsNamed(db, i, zName) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   for(i=0; i<db->nDb; i++){",
          "273:     pDb = &db->aDb[i];",
          "274:     if( pDb->pBt==0 ) continue;",
          "280:   }",
          "282:   if( i>=db->nDb ){",
          "",
          "[Removed Lines]",
          "275:     if( sqlite3StrICmp(pDb->zDbSName, zName)==0",
          "276:      || (i==0 && sqlite3StrICmp(\"main\", zName)==0)",
          "277:     ){",
          "278:       break;",
          "279:     }",
          "",
          "[Added Lines]",
          "285:     if( sqlite3DbIsNamed(db, i, zName) ) break;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   while(1){",
          "316:     for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "322:         assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "323:         p = sqlite3HashFind(&db->aDb[j].pSchema->tblHash, zName);",
          "324:         if( p ) return p;",
          "",
          "[Removed Lines]",
          "318:       if( zDatabase==0",
          "319:        || sqlite3StrICmp(zDatabase, db->aDb[j].zDbSName)==0",
          "320:        || (j==0 && sqlite3StrICmp(zDatabase, \"main\")==0)",
          "321:       ){",
          "",
          "[Added Lines]",
          "318:       if( zDatabase==0 || sqlite3DbIsNamed(db, j, zDatabase) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:     Schema *pSchema = db->aDb[j].pSchema;",
          "442:     assert( pSchema );",
          "449:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "450:     p = sqlite3HashFind(&pSchema->idxHash, zName);",
          "451:     if( p ) break;",
          "",
          "[Removed Lines]",
          "443:     if( zDb",
          "444:      && sqlite3StrICmp(zDb, db->aDb[j].zDbSName)",
          "445:      && (j!=0 || sqlite3StrICmp(zDb, \"main\"))",
          "446:     ){",
          "447:       continue;",
          "448:     }",
          "",
          "[Added Lines]",
          "440:     if( zDb && sqlite3DbIsNamed(db, j, zDb)==0 ) continue;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:   assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );",
          "234:   pExpr->iTable = -1;",
          "235:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "",
          "[Removed Lines]",
          "230: static int nCall = 0;",
          "231: nCall++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2952: ){",
          "2953:   assert( pState->expert.pExpert );",
          "2954:   assert( pzErr==0 || *pzErr==0 );",
          "2956: }",
          "",
          "[Removed Lines]",
          "2955:     return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);",
          "",
          "[Added Lines]",
          "2955:   return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4394: # define sqlite3AuthContextPush(a,b,c)",
          "4395: # define sqlite3AuthContextPop(a)  ((void)(a))",
          "4396: #endif",
          "4397: void sqlite3Attach(Parse*, Expr*, Expr*, Expr*);",
          "4398: void sqlite3Detach(Parse*, Expr*);",
          "4399: void sqlite3FixInit(DbFixer*, Parse*, int, const char*, const Token*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4397: int sqlite3DbIsNamed(sqlite3 *db, int iDb, const char *zName);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:   assert( zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) );",
          "581:   for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "587:     assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "588:     pTrigger = sqlite3HashFind(&(db->aDb[j].pSchema->trigHash), zName);",
          "589:     if( pTrigger ) break;",
          "",
          "[Removed Lines]",
          "583:     if( zDb",
          "584:       && sqlite3StrICmp(db->aDb[j].zDbSName, zDb)",
          "585:       && (j!=0 || sqlite3StrICmp(\"main\", zDb))",
          "586:     ) continue;",
          "",
          "[Added Lines]",
          "583:     if( zDb && sqlite3DbIsNamed(db, j, zDb)==0 ) continue;",
          "",
          "---------------"
        ]
      }
    }
  ]
}