{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
      "candidate_info": {
        "commit_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Test for an OOM condition in resolveAlias().\n\nFossilOrigin-Name: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "101:     }",
          "102:     sqlite3DbFree(db, pDup);",
          "103:   }",
          "",
          "[Removed Lines]",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "",
          "[Added Lines]",
          "100:       if( pExpr->y.pWin!=0 ){",
          "101:         pExpr->y.pWin->pOwner = pExpr;",
          "102:       }else{",
          "103:         assert( db->mallocFailed );",
          "104:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
      "candidate_info": {
        "commit_hash": "276d7f78470002e09ede5bd96556cddbc23cd678",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/276d7f78470002e09ede5bd96556cddbc23cd678",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Try to fix a harmless compiler warning reported by ICC.\n\nFossilOrigin-Name: 7f41b44ca2ecb907ea0fd09a974ac9dbdf911463a94f0f77c826cf1b1d9c3e8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   return yyFallback[iToken];",
          "1069: #else",
          "1070:   (void)iToken;",
          "1072:   return 0;",
          "1073: }",
          "",
          "[Removed Lines]",
          "1071: #endif",
          "",
          "[Added Lines]",
          "1072: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
      "candidate_info": {
        "commit_hash": "a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a2b6806b3e4dd2d39b2d776e7eaecff17bc2d086",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "If the string formatter in sqlite3NestedParse() fails due to an over-length string, make sure this error is recorded by the parser so that it knows to fail.\n\nFossilOrigin-Name: 85e53ff13300132250221de769a2aa7d92d81bb48d60f6e99000bc69a5b1e6fb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bbdbaf84a52937ccf877072a8b01b07f7b9c037c59ba54df72ca888d5404cbad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     if( !db->mallocFailed ) pParse->rc = SQLITE_TOOBIG;",
          "267:     return;",
          "268:   }",
          "269:   pParse->nested++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     pParse->nErr++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
      "candidate_info": {
        "commit_hash": "0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8d06a93f308e2ad450a62b961a09d43c15bba6",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Add test cases to this branch.\n\nFossilOrigin-Name: f37317d81cc2864ed57c76a7347351310d61c8056a2a0179218530ba60a44986",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7480db307c39b86bce269583e5917f5e1a3990500552fd98400ef3e7088c0b2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "427b96aedf422b1a8e906e47e8852033c70939c4",
      "candidate_info": {
        "commit_hash": "427b96aedf422b1a8e906e47e8852033c70939c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/427b96aedf422b1a8e906e47e8852033c70939c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/update.c"
        ],
        "message": "New testcase() macros.  Fix a problem with INSERT when the IPK is to the right of generated columns.\n\nFossilOrigin-Name: 412799fc5527aaca987e4e04b8a4f774dcdb70fb80e3a126dc3a26d48a66935c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ba123b8c201053d8f9387de38f3513b06f7721b28d79fab8489f96d336105117",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2207:   }",
          "2209: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2211:     int ii;",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2215:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2216:                                     p->aCol[ii].pDflt, 0);",
          "2217:       }",
          "",
          "[Removed Lines]",
          "2210:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Added Lines]",
          "2210:   if( p->tabFlags & TF_HasGenerated ){",
          "2212:     testcase( p->tabFlags & TF_HasVirtual );",
          "2213:     testcase( p->tabFlags & TF_HasStored );",
          "2216:       if( (colFlags & COLFLAG_GENERATED)!=0 ){",
          "2217:         testcase( colFlags & COLFLAG_VIRTUAL );",
          "2218:         testcase( colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:   for(i=0; i<pTab->nCol; i++){",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "225:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "226:     }",
          "227:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:       testcase( pTab->aCol[i].colflags & COLFLAG_VIRTUAL );",
          "226:       testcase( pTab->aCol[i].colflags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "855:   if( pColumn==0 && nColumn>0 ){",
          "856:     ipkColumn = pTab->iPKey;",
          "857:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "860:     if( pTab->tabFlags & TF_HasGenerated ){",
          "861:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "862:       testcase( pTab->tabFlags & TF_HasGenerated );",
          "863:       for(i=ipkColumn-1; i>=0; i--){",
          "864:         if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "865:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "867:           ipkColumn--;",
          "868:         }",
          "869:       }",
          "870:     }",
          "871: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1074:       sqlite3ComputeGeneratedColumns(pParse, regCols+1, pTab);",
          "1075:     }",
          "1076: #endif",
          "",
          "[Removed Lines]",
          "1073:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "",
          "[Added Lines]",
          "1088:     if( pTab->tabFlags & TF_HasGenerated ){",
          "1089:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "1090:       testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1143:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1144:     }",
          "1145: #endif",
          "",
          "[Removed Lines]",
          "1142:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "",
          "[Added Lines]",
          "1159:     if( pTab->tabFlags & TF_HasGenerated ){",
          "1160:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "1161:       testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1486:     testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1487:     testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1488:     testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1490:     iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1491:     switch( onError ){",
          "1492:       case OE_Replace: {",
          "",
          "[Removed Lines]",
          "1489:     testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2423:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2424:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2426:       }",
          "2427:     }",
          "2428:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2443:         testcase( pDestCol->colflags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colflags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:           chngPk = 1;",
          "314:         }",
          "315: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "317:           sqlite3ErrorMsg(pParse,",
          "318:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "319:              pTab->aCol[j].zName);",
          "",
          "[Removed Lines]",
          "316:         else if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "",
          "[Added Lines]",
          "316:         else if( pTab->aCol[j].colFlags & COLFLAG_GENERATED ){",
          "317:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:     }",
          "694:   }",
          "695: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "697:     sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "698:   }",
          "699: #endif",
          "",
          "[Removed Lines]",
          "696:   if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "",
          "[Added Lines]",
          "698:   if( pTab->tabFlags & TF_HasGenerated ){",
          "699:     testcase( pTab->tabFlags & TF_HasVirtual );",
          "700:     testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:       }",
          "738:     }",
          "739: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "741:       sqlite3ComputeGeneratedColumns(pParse, regNew, pTab);",
          "742:     }",
          "743: #endif",
          "",
          "[Removed Lines]",
          "740:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "",
          "[Added Lines]",
          "744:     if( pTab->tabFlags & TF_HasGenerated ){",
          "745:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "746:       testcase( pTab->tabFlags & TF_HasStored );",
          "",
          "---------------"
        ]
      }
    }
  ]
}