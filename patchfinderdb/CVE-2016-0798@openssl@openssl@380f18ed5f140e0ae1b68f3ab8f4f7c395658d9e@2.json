{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e56a79784c49b2b197d08a31b449152e96d5b395",
      "candidate_info": {
        "commit_hash": "e56a79784c49b2b197d08a31b449152e96d5b395",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e56a79784c49b2b197d08a31b449152e96d5b395",
        "files": [
          "util/libeay.num"
        ],
        "message": "Two changes at ones lead to a confused libeay.num.  Fix\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4593: X509_REQ_get_subject_name               4952 EXIST::FUNCTION:",
          "4594: X509_CRL_up_ref                         4953 EXIST::FUNCTION:",
          "4595: CRYPTO_zalloc                           4954 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4596: X509_get_extension_flags                4954 EXIST::FUNCTION:",
          "4597: X509_get_extended_key_usage             4955 EXIST::FUNCTION:",
          "4598: X509_get_key_usage                      4956 EXIST::FUNCTION:",
          "4599: X509_CRL_get_issuer                     4957 EXIST::FUNCTION:",
          "4600: X509_CRL_get_nextUpdate                 4958 EXIST::FUNCTION:",
          "4601: X509_CRL_get0_signature                 4959 EXIST::FUNCTION:",
          "4602: X509_CRL_get_REVOKED                    4960 EXIST::FUNCTION:",
          "4603: X509_CRL_get_version                    4961 EXIST::FUNCTION:",
          "4604: X509_CRL_get_lastUpdate                 4962 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4596: X509_get_extension_flags                4955 EXIST::FUNCTION:",
          "4597: X509_get_extended_key_usage             4956 EXIST::FUNCTION:",
          "4598: X509_get_key_usage                      4957 EXIST::FUNCTION:",
          "4599: X509_CRL_get_issuer                     4958 EXIST::FUNCTION:",
          "4600: X509_CRL_get_nextUpdate                 4959 EXIST::FUNCTION:",
          "4601: X509_CRL_get0_signature                 4960 EXIST::FUNCTION:",
          "4602: X509_CRL_get_REVOKED                    4961 EXIST::FUNCTION:",
          "4603: X509_CRL_get_version                    4962 EXIST::FUNCTION:",
          "4604: X509_CRL_get_lastUpdate                 4963 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bc2f365558ed5980ce87d6b2704ca8649ca2a4a",
      "candidate_info": {
        "commit_hash": "0bc2f365558ed5980ce87d6b2704ca8649ca2a4a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0bc2f365558ed5980ce87d6b2704ca8649ca2a4a",
        "files": [
          "apps/apps.c",
          "apps/apps.h",
          "apps/opt.c",
          "apps/rsa.c",
          "apps/x509.c",
          "crypto/asn1/Makefile",
          "crypto/asn1/asn1_err.c",
          "crypto/asn1/n_pkey.c",
          "crypto/asn1/x_nx509.c",
          "crypto/crypto-lib.com",
          "doc/apps/x509v3_config.pod",
          "include/openssl/asn1.h",
          "include/openssl/rsa.h",
          "test/tx509",
          "util/libeay.num"
        ],
        "message": "Remove obsolete key formats.\n\nRemove support for RSA_NET and Netscape key format (-keyform n).\n\nAlso removed documentation of SGC.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "apps/apps.c||apps/apps.c",
          "apps/apps.h||apps/apps.h",
          "apps/opt.c||apps/opt.c",
          "apps/rsa.c||apps/rsa.c",
          "apps/x509.c||apps/x509.c",
          "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
          "crypto/asn1/n_pkey.c||crypto/asn1/n_pkey.c",
          "crypto/asn1/x_nx509.c||crypto/asn1/x_nx509.c",
          "crypto/crypto-lib.com||crypto/crypto-lib.com",
          "include/openssl/asn1.h||include/openssl/asn1.h",
          "include/openssl/rsa.h||include/openssl/rsa.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/apps.c||apps/apps.c": [
          "File: apps/apps.c -> apps/apps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: static int set_multi_opts(unsigned long *flags, const char *arg,",
          "164:                           const NAME_EX_TBL * in_tbl);",
          "172: int app_init(long mesgwin);",
          "174: int chopup_args(ARGS *arg, char *buf)",
          "",
          "[Removed Lines]",
          "166: #if !defined(OPENSSL_NO_RC4) && !defined(OPENSSL_NO_RSA)",
          "168: static EVP_PKEY *load_netscape_key(BIO *key, const char *file,",
          "169:                                    const char *key_descrip, int format);",
          "170: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:     if (format == FORMAT_ASN1)",
          "697:         x = d2i_X509_bio(cert, NULL);",
          "714:         x = PEM_read_bio_X509_AUX(cert, NULL,",
          "715:                                   (pem_password_cb *)password_callback, NULL);",
          "716:     else if (format == FORMAT_PKCS12) {",
          "",
          "[Removed Lines]",
          "698:     else if (format == FORMAT_NETSCAPE) {",
          "699:         NETSCAPE_X509 *nx;",
          "700:         nx = ASN1_item_d2i_bio(ASN1_ITEM_rptr(NETSCAPE_X509), cert, NULL);",
          "701:         if (nx == NULL)",
          "702:             goto end;",
          "704:         if ((strncmp(NETSCAPE_CERT_HDR, (char *)nx->header->data,",
          "705:                      nx->header->length) != 0)) {",
          "706:             NETSCAPE_X509_free(nx);",
          "707:             BIO_printf(bio_err, \"Error reading header on certificate\\n\");",
          "708:             goto end;",
          "709:         }",
          "710:         x = nx->cert;",
          "711:         nx->cert = NULL;",
          "712:         NETSCAPE_X509_free(nx);",
          "713:     } else if (format == FORMAT_PEM)",
          "",
          "[Added Lines]",
          "692:     else if (format == FORMAT_PEM)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "803:                                        (pem_password_cb *)password_callback,",
          "804:                                        &cb_data);",
          "805:     }",
          "810:     else if (format == FORMAT_PKCS12) {",
          "811:         if (!load_pkcs12(key, key_descrip,",
          "812:                          (pem_password_cb *)password_callback, &cb_data,",
          "",
          "[Removed Lines]",
          "806: #if !defined(OPENSSL_NO_RC4) && !defined(OPENSSL_NO_RSA)",
          "807:     else if (format == FORMAT_NETSCAPE)",
          "808:         pkey = load_netscape_key(key, file, key_descrip, format);",
          "809: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "903:                                    (pem_password_cb *)password_callback,",
          "904:                                    &cb_data);",
          "905:     }",
          "910: #if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_DSA)",
          "911:     else if (format == FORMAT_MSBLOB)",
          "912:         pkey = b2i_PublicKey_bio(key);",
          "",
          "[Removed Lines]",
          "906: #if !defined(OPENSSL_NO_RC4) && !defined(OPENSSL_NO_RSA)",
          "907:     else if (format == FORMAT_NETSCAPE)",
          "908:         pkey = load_netscape_key(key, file, key_descrip, format);",
          "909: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "918:     return (pkey);",
          "919: }",
          "962: static int load_certs_crls(const char *file, int format,",
          "963:                            const char *pass, ENGINE *e, const char *desc,",
          "964:                            STACK_OF(X509) **pcerts,",
          "",
          "[Removed Lines]",
          "921: #if !defined(OPENSSL_NO_RC4) && !defined(OPENSSL_NO_RSA)",
          "922: static EVP_PKEY *load_netscape_key(BIO *key, const char *file,",
          "923:                                    const char *key_descrip, int format)",
          "924: {",
          "925:     EVP_PKEY *pkey;",
          "926:     BUF_MEM *buf;",
          "927:     RSA *rsa;",
          "928:     const unsigned char *p;",
          "929:     int size, i;",
          "931:     buf = BUF_MEM_new();",
          "932:     pkey = EVP_PKEY_new();",
          "933:     size = 0;",
          "934:     if (buf == NULL || pkey == NULL)",
          "935:         goto error;",
          "936:     for (;;) {",
          "937:         if (!BUF_MEM_grow_clean(buf, size + 1024 * 10))",
          "938:             goto error;",
          "939:         i = BIO_read(key, &(buf->data[size]), 1024 * 10);",
          "940:         size += i;",
          "941:         if (i == 0)",
          "942:             break;",
          "943:         if (i < 0) {",
          "944:             BIO_printf(bio_err, \"Error reading %s %s\", key_descrip, file);",
          "945:             goto error;",
          "946:         }",
          "947:     }",
          "948:     p = (unsigned char *)buf->data;",
          "949:     rsa = d2i_RSA_NET(NULL, &p, (long)size, NULL, 0);",
          "950:     if (rsa == NULL)",
          "951:         goto error;",
          "952:     BUF_MEM_free(buf);",
          "953:     EVP_PKEY_set1_RSA(pkey, rsa);",
          "954:     return pkey;",
          "955:  error:",
          "956:     BUF_MEM_free(buf);",
          "957:     EVP_PKEY_free(pkey);",
          "958:     return NULL;",
          "959: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/apps.h||apps/apps.h": [
          "File: apps/apps.h -> apps/apps.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "532: # define FORMAT_ASN1     1",
          "533: # define FORMAT_TEXT     2",
          "534: # define FORMAT_PEM      3",
          "536: # define FORMAT_PKCS12   5",
          "537: # define FORMAT_SMIME    6",
          "538: # define FORMAT_ENGINE   7",
          "",
          "[Removed Lines]",
          "535: # define FORMAT_NETSCAPE 4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/opt.c||apps/opt.c": [
          "File: apps/opt.c -> apps/opt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         break;",
          "257:     case 'N':",
          "258:     case 'n':",
          "268:         break;",
          "269:     case 'S':",
          "270:     case 's':",
          "",
          "[Removed Lines]",
          "259:         if (strcmp(s, \"NSS\") == 0 || strcmp(s, \"nss\") == 0) {",
          "260:             if ((flags & OPT_FMT_NSS) == 0)",
          "261:                 return opt_format_error(s, flags);",
          "263:         } else {",
          "264:             if ((flags & OPT_FMT_NETSCAPE) == 0)",
          "265:                 return opt_format_error(s, flags);",
          "267:         }",
          "",
          "[Added Lines]",
          "259:         if ((flags & OPT_FMT_NSS) == 0)",
          "260:             return opt_format_error(s, flags);",
          "261:         if (strcmp(s, \"NSS\") != 0 && strcmp(s, \"nss\") != 0)",
          "262:             return opt_format_error(s, flags);",
          "",
          "---------------"
        ],
        "apps/rsa.c||apps/rsa.c": [
          "File: apps/rsa.c -> apps/rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:             i = i2d_RSAPrivateKey_bio(out, rsa);",
          "353:         }",
          "354:     }",
          "368:     else if (outformat == FORMAT_PEM) {",
          "369:         if (pubout || pubin) {",
          "370:             if (pubout == 2)",
          "",
          "[Removed Lines]",
          "355: # ifndef OPENSSL_NO_RC4",
          "356:     else if (outformat == FORMAT_NETSCAPE) {",
          "357:         unsigned char *p, *save;",
          "358:         int size = i2d_RSA_NET(rsa, NULL, NULL, 0);",
          "360:         save = p = app_malloc(size, \"RSA i2d buffer\");",
          "361:         assert(private);",
          "362:         i2d_RSA_NET(rsa, &p, NULL, 0);",
          "363:         BIO_write(out, (char *)save, size);",
          "364:         OPENSSL_free(save);",
          "365:         i = 1;",
          "366:     }",
          "367: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/x509.c||apps/x509.c": [
          "File: apps/x509.c -> apps/x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:             i = PEM_write_bio_X509_AUX(out, x);",
          "914:         else",
          "915:             i = PEM_write_bio_X509(out, x);",
          "926:     } else {",
          "927:         BIO_printf(bio_err, \"bad output format specified for outfile\\n\");",
          "928:         goto end;",
          "",
          "[Removed Lines]",
          "916:     } else if (outformat == FORMAT_NETSCAPE) {",
          "917:         NETSCAPE_X509 nx;",
          "918:         ASN1_OCTET_STRING hdr;",
          "920:         hdr.data = (unsigned char *)NETSCAPE_CERT_HDR;",
          "921:         hdr.length = strlen(NETSCAPE_CERT_HDR);",
          "922:         nx.header = &hdr;",
          "923:         nx.cert = x;",
          "925:         i = ASN1_item_i2d_bio(ASN1_ITEM_rptr(NETSCAPE_X509), out, &nx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c": [
          "File: crypto/asn1/asn1_err.c -> crypto/asn1/asn1_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:     {ERR_FUNC(ASN1_F_D2I_NETSCAPE_RSA_2), \"D2I_NETSCAPE_RSA_2\"},",
          "170:     {ERR_FUNC(ASN1_F_D2I_PRIVATEKEY), \"d2i_PrivateKey\"},",
          "171:     {ERR_FUNC(ASN1_F_D2I_PUBLICKEY), \"d2i_PublicKey\"},",
          "174:     {ERR_FUNC(ASN1_F_D2I_X509), \"D2I_X509\"},",
          "175:     {ERR_FUNC(ASN1_F_D2I_X509_CINF), \"D2I_X509_CINF\"},",
          "176:     {ERR_FUNC(ASN1_F_D2I_X509_PKEY), \"d2i_X509_PKEY\"},",
          "",
          "[Removed Lines]",
          "172:     {ERR_FUNC(ASN1_F_D2I_RSA_NET), \"d2i_RSA_NET\"},",
          "173:     {ERR_FUNC(ASN1_F_D2I_RSA_NET_2), \"D2I_RSA_NET_2\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     {ERR_FUNC(ASN1_F_I2D_EC_PUBKEY), \"i2d_EC_PUBKEY\"},",
          "183:     {ERR_FUNC(ASN1_F_I2D_PRIVATEKEY), \"i2d_PrivateKey\"},",
          "184:     {ERR_FUNC(ASN1_F_I2D_PUBLICKEY), \"i2d_PublicKey\"},",
          "186:     {ERR_FUNC(ASN1_F_I2D_RSA_PUBKEY), \"i2d_RSA_PUBKEY\"},",
          "187:     {ERR_FUNC(ASN1_F_LONG_C2I), \"LONG_C2I\"},",
          "188:     {ERR_FUNC(ASN1_F_OID_MODULE_INIT), \"OID_MODULE_INIT\"},",
          "",
          "[Removed Lines]",
          "185:     {ERR_FUNC(ASN1_F_I2D_RSA_NET), \"i2d_RSA_NET\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/n_pkey.c||crypto/asn1/n_pkey.c": [
          "File: crypto/asn1/n_pkey.c -> crypto/asn1/n_pkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: DECLARE_ASN1_ENCODE_FUNCTIONS_const(NETSCAPE_PKEY,NETSCAPE_PKEY)",
          "103: IMPLEMENT_ASN1_FUNCTIONS_const(NETSCAPE_PKEY)",
          "",
          "[Removed Lines]",
          "105: static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,",
          "106:                           int (*cb) (char *buf, int len, const char *prompt,",
          "107:                                      int verify), int sgckey);",
          "109: int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,",
          "110:                      int (*cb) (char *buf, int len, const char *prompt,",
          "111:                                 int verify))",
          "112: {",
          "113:     return i2d_RSA_NET(a, pp, cb, 0);",
          "114: }",
          "116: int i2d_RSA_NET(const RSA *a, unsigned char **pp,",
          "117:                 int (*cb) (char *buf, int len, const char *prompt,",
          "118:                            int verify), int sgckey)",
          "119: {",
          "120:     int i, j, ret = 0;",
          "121:     int rsalen, pkeylen, olen;",
          "122:     NETSCAPE_PKEY *pkey = NULL;",
          "123:     NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;",
          "124:     unsigned char buf[256], *zz;",
          "125:     unsigned char key[EVP_MAX_KEY_LENGTH];",
          "126:     EVP_CIPHER_CTX ctx;",
          "127:     EVP_CIPHER_CTX_init(&ctx);",
          "129:     if (a == NULL)",
          "130:         return (0);",
          "132:     if ((pkey = NETSCAPE_PKEY_new()) == NULL)",
          "133:         goto err;",
          "134:     if ((enckey = NETSCAPE_ENCRYPTED_PKEY_new()) == NULL)",
          "135:         goto err;",
          "136:     pkey->version = 0;",
          "138:     pkey->algor->algorithm = OBJ_nid2obj(NID_rsaEncryption);",
          "139:     if ((pkey->algor->parameter = ASN1_TYPE_new()) == NULL)",
          "140:         goto err;",
          "141:     pkey->algor->parameter->type = V_ASN1_NULL;",
          "143:     rsalen = i2d_RSAPrivateKey(a, NULL);",
          "149:     pkey->private_key->length = rsalen;",
          "151:     pkeylen = i2d_NETSCAPE_PKEY(pkey, NULL);",
          "153:     enckey->enckey->digest->length = pkeylen;",
          "157:     enckey->enckey->algor->algorithm = OBJ_nid2obj(NID_rc4);",
          "158:     if ((enckey->enckey->algor->parameter = ASN1_TYPE_new()) == NULL)",
          "159:         goto err;",
          "160:     enckey->enckey->algor->parameter->type = V_ASN1_NULL;",
          "162:     if (pp == NULL) {",
          "163:         olen = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, NULL);",
          "164:         NETSCAPE_PKEY_free(pkey);",
          "165:         NETSCAPE_ENCRYPTED_PKEY_free(enckey);",
          "166:         return olen;",
          "167:     }",
          "170:     if ((zz = OPENSSL_malloc(rsalen)) == NULL) {",
          "171:         ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);",
          "172:         goto err;",
          "173:     }",
          "175:     pkey->private_key->data = zz;",
          "177:     i2d_RSAPrivateKey(a, &zz);",
          "179:     if ((zz = OPENSSL_malloc(pkeylen)) == NULL) {",
          "180:         ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);",
          "181:         goto err;",
          "182:     }",
          "184:     if (!ASN1_STRING_set(enckey->os, \"private-key\", -1)) {",
          "185:         ASN1err(ASN1_F_I2D_RSA_NET, ERR_R_MALLOC_FAILURE);",
          "186:         goto err;",
          "187:     }",
          "188:     enckey->enckey->digest->data = zz;",
          "189:     i2d_NETSCAPE_PKEY(pkey, &zz);",
          "192:     OPENSSL_cleanse(pkey->private_key->data, rsalen);",
          "194:     if (cb == NULL)",
          "195:         cb = EVP_read_pw_string;",
          "196:     i = cb((char *)buf, 256, \"Enter Private Key password:\", 1);",
          "197:     if (i != 0) {",
          "198:         ASN1err(ASN1_F_I2D_RSA_NET, ASN1_R_BAD_PASSWORD_READ);",
          "199:         goto err;",
          "200:     }",
          "201:     i = strlen((char *)buf);",
          "203:     if (sgckey) {",
          "204:         if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))",
          "205:             goto err;",
          "206:         memcpy(buf + 16, \"SGCKEYSALT\", 10);",
          "207:         i = 26;",
          "208:     }",
          "210:     if (!EVP_BytesToKey(EVP_rc4(), EVP_md5(), NULL, buf, i, 1, key, NULL))",
          "211:         goto err;",
          "212:     OPENSSL_cleanse(buf, 256);",
          "215:     zz = enckey->enckey->digest->data;",
          "216:     if (!EVP_EncryptInit_ex(&ctx, EVP_rc4(), NULL, key, NULL))",
          "217:         goto err;",
          "218:     if (!EVP_EncryptUpdate(&ctx, zz, &i, zz, pkeylen))",
          "219:         goto err;",
          "220:     if (!EVP_EncryptFinal_ex(&ctx, zz + i, &j))",
          "221:         goto err;",
          "223:     ret = i2d_NETSCAPE_ENCRYPTED_PKEY(enckey, pp);",
          "224:  err:",
          "225:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "226:     NETSCAPE_ENCRYPTED_PKEY_free(enckey);",
          "227:     NETSCAPE_PKEY_free(pkey);",
          "228:     return (ret);",
          "229: }",
          "231: RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,",
          "232:                       int (*cb) (char *buf, int len, const char *prompt,",
          "233:                                  int verify))",
          "234: {",
          "235:     return d2i_RSA_NET(a, pp, length, cb, 0);",
          "236: }",
          "238: RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,",
          "239:                  int (*cb) (char *buf, int len, const char *prompt,",
          "240:                             int verify), int sgckey)",
          "241: {",
          "242:     RSA *ret = NULL;",
          "243:     const unsigned char *p;",
          "244:     NETSCAPE_ENCRYPTED_PKEY *enckey = NULL;",
          "246:     p = *pp;",
          "248:     enckey = d2i_NETSCAPE_ENCRYPTED_PKEY(NULL, &p, length);",
          "249:     if (!enckey) {",
          "250:         ASN1err(ASN1_F_D2I_RSA_NET, ASN1_R_DECODING_ERROR);",
          "251:         return NULL;",
          "252:     }",
          "254:     if ((enckey->os->length != 11) || (strncmp(\"private-key\",",
          "255:                                                (char *)enckey->os->data,",
          "256:                                                11) != 0)) {",
          "257:         ASN1err(ASN1_F_D2I_RSA_NET, ASN1_R_PRIVATE_KEY_HEADER_MISSING);",
          "258:         NETSCAPE_ENCRYPTED_PKEY_free(enckey);",
          "259:         return NULL;",
          "260:     }",
          "261:     if (OBJ_obj2nid(enckey->enckey->algor->algorithm) != NID_rc4) {",
          "262:         ASN1err(ASN1_F_D2I_RSA_NET, ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM);",
          "263:         goto err;",
          "264:     }",
          "265:     if (cb == NULL)",
          "266:         cb = EVP_read_pw_string;",
          "267:     if ((ret = d2i_RSA_NET_2(a, enckey->enckey->digest, cb, sgckey)) == NULL)",
          "268:         goto err;",
          "272:  err:",
          "273:     NETSCAPE_ENCRYPTED_PKEY_free(enckey);",
          "274:     return ret;",
          "276: }",
          "278: static RSA *d2i_RSA_NET_2(RSA **a, ASN1_OCTET_STRING *os,",
          "279:                           int (*cb) (char *buf, int len, const char *prompt,",
          "280:                                      int verify), int sgckey)",
          "281: {",
          "282:     NETSCAPE_PKEY *pkey = NULL;",
          "283:     RSA *ret = NULL;",
          "284:     int i, j;",
          "285:     unsigned char buf[256];",
          "286:     const unsigned char *zz;",
          "287:     unsigned char key[EVP_MAX_KEY_LENGTH];",
          "288:     EVP_CIPHER_CTX ctx;",
          "289:     EVP_CIPHER_CTX_init(&ctx);",
          "291:     i = cb((char *)buf, 256, \"Enter Private Key password:\", 0);",
          "292:     if (i != 0) {",
          "293:         ASN1err(ASN1_F_D2I_RSA_NET_2, ASN1_R_BAD_PASSWORD_READ);",
          "294:         goto err;",
          "295:     }",
          "297:     i = strlen((char *)buf);",
          "298:     if (sgckey) {",
          "299:         if (!EVP_Digest(buf, i, buf, NULL, EVP_md5(), NULL))",
          "300:             goto err;",
          "301:         memcpy(buf + 16, \"SGCKEYSALT\", 10);",
          "302:         i = 26;",
          "303:     }",
          "305:     if (!EVP_BytesToKey(EVP_rc4(), EVP_md5(), NULL, buf, i, 1, key, NULL))",
          "306:         goto err;",
          "307:     OPENSSL_cleanse(buf, 256);",
          "309:     if (!EVP_DecryptInit_ex(&ctx, EVP_rc4(), NULL, key, NULL))",
          "310:         goto err;",
          "311:     if (!EVP_DecryptUpdate(&ctx, os->data, &i, os->data, os->length))",
          "312:         goto err;",
          "313:     if (!EVP_DecryptFinal_ex(&ctx, &(os->data[i]), &j))",
          "314:         goto err;",
          "315:     os->length = i + j;",
          "317:     zz = os->data;",
          "319:     if ((pkey = d2i_NETSCAPE_PKEY(NULL, &zz, os->length)) == NULL) {",
          "320:         ASN1err(ASN1_F_D2I_RSA_NET_2,",
          "321:                 ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY);",
          "322:         goto err;",
          "323:     }",
          "325:     zz = pkey->private_key->data;",
          "326:     if ((ret = d2i_RSAPrivateKey(a, &zz, pkey->private_key->length)) == NULL) {",
          "327:         ASN1err(ASN1_F_D2I_RSA_NET_2, ASN1_R_UNABLE_TO_DECODE_RSA_KEY);",
          "328:         goto err;",
          "329:     }",
          "330:  err:",
          "331:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "332:     NETSCAPE_PKEY_free(pkey);",
          "333:     return (ret);",
          "334: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/x_nx509.c||crypto/asn1/x_nx509.c": [
          "File: crypto/asn1/x_nx509.c -> crypto/asn1/x_nx509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/crypto-lib.com||crypto/crypto-lib.com": [
          "File: crypto/crypto-lib.com -> crypto/crypto-lib.com",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:  \"a_enum,a_utf8,a_sign,a_digest,a_verify,a_mbstr,a_strex,\"+ -",
          "309:  \"x_algor,x_val,x_pubkey,x_sig,x_req,x_attrib,x_bignum,\"+ -",
          "310:  \"x_long,x_name,x_x509,x_x509a,x_crl,x_info,x_spki,nsseq,\"+ -",
          "312: $ LIB_ASN1_2 = \"t_req,t_x509,t_x509a,t_crl,t_pkey,t_spki,t_bitst,\"+ -",
          "313:  \"tasn_new,tasn_fre,tasn_enc,tasn_dec,tasn_utl,tasn_typ,\"+ -",
          "314:  \"tasn_prn,tasn_scn,ameth_lib,\"+ -",
          "",
          "[Removed Lines]",
          "311:  \"x_nx509,d2i_pu,d2i_pr,i2d_pu,i2d_pr\"",
          "",
          "[Added Lines]",
          "311:  \"d2i_pu,d2i_pr,i2d_pu,i2d_pr\"",
          "",
          "---------------"
        ],
        "include/openssl/asn1.h||include/openssl/asn1.h": [
          "File: include/openssl/asn1.h -> include/openssl/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "509: DECLARE_ASN1_ENCODE_FUNCTIONS_const(ASN1_SEQUENCE_ANY, ASN1_SEQUENCE_ANY)",
          "510: DECLARE_ASN1_ENCODE_FUNCTIONS_const(ASN1_SEQUENCE_ANY, ASN1_SET_ANY)",
          "518: typedef struct BIT_STRING_BITNAME_st {",
          "519:     int bitnum;",
          "",
          "[Removed Lines]",
          "512: typedef struct NETSCAPE_X509_st {",
          "513:     ASN1_OCTET_STRING *header;",
          "514:     X509 *cert;",
          "515: } NETSCAPE_X509;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "802: int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);",
          "804: int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);",
          "",
          "[Removed Lines]",
          "800: DECLARE_ASN1_FUNCTIONS(NETSCAPE_X509)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1014: # define ASN1_F_D2I_NETSCAPE_RSA_2                        153",
          "1015: # define ASN1_F_D2I_PRIVATEKEY                            154",
          "1016: # define ASN1_F_D2I_PUBLICKEY                             155",
          "1019: # define ASN1_F_D2I_X509                                  156",
          "1020: # define ASN1_F_D2I_X509_CINF                             157",
          "1021: # define ASN1_F_D2I_X509_PKEY                             159",
          "",
          "[Removed Lines]",
          "1017: # define ASN1_F_D2I_RSA_NET                               200",
          "1018: # define ASN1_F_D2I_RSA_NET_2                             201",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1027: # define ASN1_F_I2D_EC_PUBKEY                             181",
          "1028: # define ASN1_F_I2D_PRIVATEKEY                            163",
          "1029: # define ASN1_F_I2D_PUBLICKEY                             164",
          "1031: # define ASN1_F_I2D_RSA_PUBKEY                            165",
          "1032: # define ASN1_F_LONG_C2I                                  166",
          "1033: # define ASN1_F_OID_MODULE_INIT                           174",
          "",
          "[Removed Lines]",
          "1030: # define ASN1_F_I2D_RSA_NET                               162",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/rsa.h||include/openssl/rsa.h": [
          "File: include/openssl/rsa.h -> include/openssl/rsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "397: int RSA_print(BIO *bp, const RSA *r, int offset);",
          "",
          "[Removed Lines]",
          "399: # ifndef OPENSSL_NO_RC4",
          "400: int i2d_RSA_NET(const RSA *a, unsigned char **pp,",
          "401:                 int (*cb) (char *buf, int len, const char *prompt,",
          "402:                            int verify), int sgckey);",
          "403: RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,",
          "404:                  int (*cb) (char *buf, int len, const char *prompt,",
          "405:                             int verify), int sgckey);",
          "407: int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,",
          "408:                      int (*cb) (char *buf, int len, const char *prompt,",
          "409:                                 int verify));",
          "410: RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,",
          "411:                       int (*cb) (char *buf, int len, const char *prompt,",
          "412:                                  int verify));",
          "413: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "725: d2i_DSAparams                           732 EXIST::FUNCTION:DSA",
          "726: d2i_NETSCAPE_SPKAC                      733 EXIST::FUNCTION:",
          "727: d2i_NETSCAPE_SPKI                       734 EXIST::FUNCTION:",
          "729: d2i_PKCS7                               736 EXIST::FUNCTION:",
          "730: d2i_PKCS7_DIGEST                        737 EXIST::FUNCTION:",
          "731: d2i_PKCS7_ENCRYPT                       738 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "728: d2i_Netscape_RSA                        735 EXIST::FUNCTION:RC4,RSA",
          "",
          "[Added Lines]",
          "728: d2i_Netscape_RSA                        735 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827: i2d_DSAparams                           835 EXIST::FUNCTION:DSA",
          "828: i2d_NETSCAPE_SPKAC                      836 EXIST::FUNCTION:",
          "829: i2d_NETSCAPE_SPKI                       837 EXIST::FUNCTION:",
          "831: i2d_PKCS7                               839 EXIST::FUNCTION:",
          "832: i2d_PKCS7_DIGEST                        840 EXIST::FUNCTION:",
          "833: i2d_PKCS7_ENCRYPT                       841 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "830: i2d_Netscape_RSA                        838 EXIST::FUNCTION:RC4,RSA",
          "",
          "[Added Lines]",
          "830: i2d_Netscape_RSA                        838 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1816: X509_REQ_get1_email                     2403 EXIST::FUNCTION:",
          "1817: X509_get1_email                         2404 EXIST::FUNCTION:",
          "1818: X509_email_free                         2405 EXIST::FUNCTION:",
          "1820: d2i_RSA_NET_2                           2407 NOEXIST::FUNCTION:",
          "1822: DSO_bind_func                           2409 EXIST::FUNCTION:",
          "1823: CRYPTO_get_new_dynlockid                2410 EXIST::FUNCTION:",
          "1824: sk_new_null                             2411 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1819: i2d_RSA_NET                             2406 EXIST::FUNCTION:RC4,RSA",
          "1821: d2i_RSA_NET                             2408 EXIST::FUNCTION:RC4,RSA",
          "",
          "[Added Lines]",
          "1819: i2d_RSA_NET                             2406 NOEXIST::FUNCTION:",
          "1821: d2i_RSA_NET                             2408 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3796: TS_REQ_ext_free                         4177 EXIST::FUNCTION:",
          "3797: EVP_PKEY_asn1_set_free                  4178 EXIST::FUNCTION:",
          "3798: EVP_PKEY_get0_asn1                      4179 EXIST::FUNCTION:",
          "3800: EVP_PKEY_verify_recover_init            4181 EXIST::FUNCTION:",
          "3801: EVP_PKEY_CTX_set_data                   4182 EXIST::FUNCTION:",
          "3802: EVP_PKEY_keygen_init                    4183 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3799: d2i_NETSCAPE_X509                       4180 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3799: d2i_NETSCAPE_X509                       4180 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3864: EVP_PKEY_meth_set_sign                  4243 EXIST::FUNCTION:",
          "3865: CRYPTO_THREADID_current                 4244 EXIST::FUNCTION:",
          "3866: EVP_PKEY_decrypt_init                   4245 EXIST::FUNCTION:",
          "3868: i2b_PVK_bio                             4247 EXIST::FUNCTION:RC4",
          "3869: EVP_PKEY_print_private                  4248 EXIST::FUNCTION:",
          "3870: GENERAL_NAME_get0_value                 4249 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3867: NETSCAPE_X509_free                      4246 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3867: NETSCAPE_X509_free                      4246 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3994: X509_CRL_METHOD_new                     4371 EXIST::FUNCTION:",
          "3995: EVP_DigestSignFinal                     4372 EXIST::FUNCTION:",
          "3996: TS_RESP_CTX_set_def_policy              4373 EXIST::FUNCTION:",
          "3999: TS_RESP_create_response                 4375 EXIST::FUNCTION:",
          "4000: PKCS7_SIGNER_INFO_get0_algs             4376 EXIST::FUNCTION:",
          "4001: TS_TST_INFO_get_nonce                   4377 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3997: NETSCAPE_X509_it                        4374 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3998: NETSCAPE_X509_it                        4374 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Added Lines]",
          "3997: NETSCAPE_X509_it                        4374 NOEXIST::FUNCTION:",
          "3998: NETSCAPE_X509_it                        4374 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4046: GENERAL_NAME_set0_othername             4421 EXIST::FUNCTION:",
          "4047: TS_TST_INFO_get_ext_count               4422 EXIST::FUNCTION:",
          "4048: TS_RESP_CTX_get_request                 4423 EXIST::FUNCTION:",
          "4050: ENGINE_get_pkey_meth_engine             4425 EXIST::FUNCTION:ENGINE",
          "4051: EVP_PKEY_meth_set_signctx               4426 EXIST::FUNCTION:",
          "4052: EVP_PKEY_asn1_copy                      4427 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4049: i2d_NETSCAPE_X509                       4424 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4049: i2d_NETSCAPE_X509                       4424 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4109: TS_RESP_CTX_set_certs                   4482 EXIST::FUNCTION:",
          "4110: TS_CONF_set_def_policy                  4483 EXIST::FUNCTION:",
          "4111: ASN1_GENERALIZEDTIME_adj                4484 EXIST::FUNCTION:",
          "4113: TS_ACCURACY_free                        4486 EXIST::FUNCTION:",
          "4114: TS_RESP_get_tst_info                    4487 EXIST::FUNCTION:",
          "4115: EVP_PKEY_derive_set_peer                4488 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4112: NETSCAPE_X509_new                       4485 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4112: NETSCAPE_X509_new                       4485 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22f5bd3dd2a660f6f50ef86de78985b995c63a85",
      "candidate_info": {
        "commit_hash": "22f5bd3dd2a660f6f50ef86de78985b995c63a85",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/22f5bd3dd2a660f6f50ef86de78985b995c63a85",
        "files": [
          "crypto/asn1/a_type.c",
          "crypto/asn1/asn1.h",
          "doc/crypto/ASN1_TYPE_get.pod",
          "util/libeay.num"
        ],
        "message": "New ASN1_TYPE SEQUENCE functions.\n\nAdd new functions ASN1_TYPE_pack_sequence and ASN1_TYPE_unpack_sequence:\nthese encode and decode ASN.1 SEQUENCE using an ASN1_TYPE structure.\n\nUpdate ordinals.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_type.c||crypto/asn1/a_type.c",
          "crypto/asn1/asn1.h||crypto/asn1/asn1.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_type.c||crypto/asn1/a_type.c": [
          "File: crypto/asn1/a_type.c -> crypto/asn1/a_type.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     return result;",
          "154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)",
          "157: {",
          "158:     ASN1_OCTET_STRING *oct;",
          "159:     ASN1_TYPE *rt;",
          "161:     oct = ASN1_item_pack(s, it, NULL);",
          "162:     if (oct == NULL)",
          "163:         return NULL;",
          "165:     if (t && *t) {",
          "166:         rt = *t;",
          "167:     } else {",
          "168:         rt = ASN1_TYPE_new();",
          "169:         if (rt == NULL) {",
          "170:             ASN1_OCTET_STRING_free(oct);",
          "171:             return NULL;",
          "172:         }",
          "173:         if (t)",
          "175:     }",
          "176:     ASN1_TYPE_set(rt, V_ASN1_SEQUENCE, oct);",
          "177:     return rt;",
          "178: }",
          "180: void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)",
          "181: {",
          "182:     if (t->type != V_ASN1_SEQUENCE || t->value.sequence == NULL)",
          "183:         return NULL;",
          "184:     return ASN1_item_unpack(t->value.sequence, it);",
          "185: }",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1.h||crypto/asn1/asn1.h": [
          "File: crypto/asn1/asn1.h -> crypto/asn1/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "592: int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);",
          "593: int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);",
          "595: ASN1_OBJECT *ASN1_OBJECT_new(void);",
          "596: void ASN1_OBJECT_free(ASN1_OBJECT *a);",
          "597: int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595: ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);",
          "596: void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4553: OBJ_length                              4912 EXIST::FUNCTION:",
          "4554: OBJ_get0_data                           4913 EXIST::FUNCTION:",
          "4555: X509_NAME_ENTRY_set                     4914 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4556: ASN1_TYPE_pack_sequence                 4915 EXIST::FUNCTION:",
          "4557: ASN1_TYPE_unpack_sequence               4916 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0809bc8ffb34bf89de9e68d8caeb4d8c2aa08f9",
      "candidate_info": {
        "commit_hash": "b0809bc8ffb34bf89de9e68d8caeb4d8c2aa08f9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b0809bc8ffb34bf89de9e68d8caeb4d8c2aa08f9",
        "files": [
          "apps/pkcs8.c",
          "crypto/asn1/p5_scrypt.c",
          "crypto/evp/evp_pbe.c",
          "crypto/evp/scrypt.c",
          "include/openssl/evp.h",
          "include/openssl/x509.h",
          "makevms.com",
          "test/evp_test.c",
          "util/libeay.num",
          "util/mkdef.pl"
        ],
        "message": "RT3998: Allow scrypt to be disabled\n\nThis does 64-bit division and multiplication, and on 32-bit platforms\npulls in libgcc symbols (and MSVC does similar) which may not be\navailable.  Mostly done by David Woodhouse.\n\nReviewed-by: Dr. Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "apps/pkcs8.c||apps/pkcs8.c",
          "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c",
          "crypto/evp/evp_pbe.c||crypto/evp/evp_pbe.c",
          "crypto/evp/scrypt.c||crypto/evp/scrypt.c",
          "include/openssl/evp.h||include/openssl/evp.h",
          "include/openssl/x509.h||include/openssl/x509.h",
          "makevms.com||makevms.com",
          "test/evp_test.c||test/evp_test.c",
          "util/libeay.num||util/libeay.num",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "apps/pkcs8.c||apps/pkcs8.c": [
          "File: apps/pkcs8.c -> apps/pkcs8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,",
          "69:     OPT_INFORM, OPT_OUTFORM, OPT_ENGINE, OPT_IN, OPT_OUT,",
          "70:     OPT_TOPK8, OPT_NOITER, OPT_NOCRYPT, OPT_NOOCT, OPT_NSDB, OPT_EMBED,",
          "73: } OPTION_CHOICE;",
          "75: OPTIONS pkcs8_options[] = {",
          "",
          "[Removed Lines]",
          "71:     OPT_V2, OPT_V1, OPT_V2PRF, OPT_ITER, OPT_PASSIN, OPT_PASSOUT,",
          "72:     OPT_SCRYPT, OPT_SCRYPT_N, OPT_SCRYPT_R, OPT_SCRYPT_P",
          "",
          "[Added Lines]",
          "71: #ifndef OPENSSL_NO_SCRYPT",
          "72:     OPT_SCRYPT, OPT_SCRYPT_N, OPT_SCRYPT_R, OPT_SCRYPT_P,",
          "73: #endif",
          "74:     OPT_V2, OPT_V1, OPT_V2PRF, OPT_ITER, OPT_PASSIN, OPT_PASSOUT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: #ifndef OPENSSL_NO_ENGINE",
          "95:     {\"engine\", OPT_ENGINE, 's', \"Use engine, possibly a hardware device\"},",
          "96: #endif",
          "97:     {\"scrypt\", OPT_SCRYPT, '-', \"Use scrypt algorithm\"},",
          "98:     {\"scrypt_N\", OPT_SCRYPT_N, 's', \"Set scrypt N parameter\"},",
          "99:     {\"scrypt_r\", OPT_SCRYPT_R, 's', \"Set scrypt r parameter\"},",
          "100:     {\"scrypt_p\", OPT_SCRYPT_P, 's', \"Set scrypt p parameter\"},",
          "101:     {NULL}",
          "102: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: #ifndef OPENSSL_NO_SCRYPT",
          "104: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     int nocrypt = 0, ret = 1, iter = PKCS12_DEFAULT_ITER, p8_broken = PKCS8_OK;",
          "117:     int informat = FORMAT_PEM, outformat = FORMAT_PEM, topk8 = 0, pbe_nid = -1;",
          "118:     int private = 0;",
          "119:     unsigned long scrypt_N = 0, scrypt_r = 0, scrypt_p = 0;",
          "121:     prog = opt_init(argc, argv, pkcs8_options);",
          "122:     while ((o = opt_next()) != OPT_EOF) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: #ifndef OPENSSL_NO_SCRYPT",
          "125: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:         case OPT_ENGINE:",
          "196:             e = setup_engine(opt_arg(), 0);",
          "197:             break;",
          "198:         case OPT_SCRYPT:",
          "199:             scrypt_N = 1024;",
          "200:             scrypt_r = 8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:             if (!opt_ulong(opt_arg(), &scrypt_p))",
          "215:                 goto opthelp;",
          "216:             break;",
          "217:         }",
          "218:     }",
          "219:     argc = opt_num_rest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:         } else {",
          "261:             X509_ALGOR *pbe;",
          "262:             if (cipher) {",
          "263:                 if (scrypt_N && scrypt_r && scrypt_p)",
          "264:                     pbe = PKCS5_pbe2_set_scrypt(cipher, NULL, 0, NULL,",
          "265:                                                 scrypt_N, scrypt_r, scrypt_p);",
          "266:                 else",
          "267:                     pbe = PKCS5_pbe2_set_iv(cipher, iter, NULL, 0, NULL,",
          "268:                                             pbe_nid);",
          "269:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #ifndef OPENSSL_NO_SCRYPT",
          "276: #endif",
          "",
          "---------------"
        ],
        "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c": [
          "File: crypto/asn1/p5_scrypt.c -> crypto/asn1/p5_scrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #include <openssl/x509.h>",
          "66: #include <openssl/rand.h>",
          "70: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------"
        ],
        "crypto/evp/evp_pbe.c||crypto/evp/evp_pbe.c": [
          "File: crypto/evp/evp_pbe.c -> crypto/evp/evp_pbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     {EVP_PBE_TYPE_PRF, NID_hmacWithSHA512, -1, NID_sha512, 0},",
          "120:     {EVP_PBE_TYPE_PRF, NID_id_HMACGostR3411_94, -1, NID_id_GostR3411_94, 0},",
          "121:     {EVP_PBE_TYPE_KDF, NID_id_pbkdf2, -1, -1, PKCS5_v2_PBKDF2_keyivgen},",
          "122:     {EVP_PBE_TYPE_KDF, NID_id_scrypt, -1, -1, PKCS5_v2_scrypt_keyivgen}",
          "123: };",
          "125: int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #ifndef OPENSSL_NO_SCRYPT",
          "124: #endif",
          "",
          "---------------"
        ],
        "crypto/evp/scrypt.c||crypto/evp/scrypt.c": [
          "File: crypto/evp/scrypt.c -> crypto/evp/scrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #include <openssl/err.h>",
          "65: #include <internal/numbers.h>",
          "67: #define R(a,b) (((a) << (b)) | ((a) >> (32 - (b))))",
          "68: static void salsa208_word_specification(uint32_t inout[16])",
          "69: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     OPENSSL_clear_free(B, Blen + Vlen);",
          "297:     return rv;",
          "298: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: #endif",
          "",
          "---------------"
        ],
        "include/openssl/evp.h||include/openssl/evp.h": [
          "File: include/openssl/evp.h -> include/openssl/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:                           ASN1_TYPE *param, const EVP_CIPHER *cipher,",
          "1076:                           const EVP_MD *md, int en_de);",
          "1078: int EVP_PBE_scrypt(const char *pass, size_t passlen,",
          "1079:                    const unsigned char *salt, size_t saltlen,",
          "1080:                    uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1083: int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,",
          "1084:                              int passlen, ASN1_TYPE *param,",
          "1085:                              const EVP_CIPHER *c, const EVP_MD *md, int en_de);",
          "1087: void PKCS5_PBE_add(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087: #endif",
          "",
          "---------------"
        ],
        "include/openssl/x509.h||include/openssl/x509.h": [
          "File: include/openssl/x509.h -> include/openssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:                               unsigned char *salt, int saltlen,",
          "1053:                               unsigned char *aiv, int prf_nid);",
          "1055: X509_ALGOR *PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher,",
          "1056:                                   const unsigned char *salt, int saltlen,",
          "1057:                                   unsigned char *aiv, uint64_t N, uint64_t r,",
          "1058:                                   uint64_t p);",
          "1060: X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,",
          "1061:                              int prf_nid, int keylen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1055: #ifndef OPENSSL_NO_SCRYPT",
          "1060: #endif",
          "",
          "---------------"
        ],
        "makevms.com||makevms.com": [
          "File: makevms.com -> makevms.com",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:        RFC3779,-",
          "296:        RMD160,-",
          "297:        RSA,-",
          "298:        SCTP,-",
          "299:        SEED,-",
          "300:        SOCK,-",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:                      SCRYPT,-",
          "",
          "---------------"
        ],
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     size_t key_len;",
          "1312: };",
          "1314: static int scrypt_test_parse(struct evp_test *t,",
          "1315:                              const char *keyword, const char *value)",
          "1316: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1326:         return test_uint64(value, &pdata->maxmem);",
          "1327:     return 0;",
          "1328: }",
          "1330: static int pbkdf2_test_parse(struct evp_test *t,",
          "1331:                              const char *keyword, const char *value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1330: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1366:     struct pbe_data *pdat;",
          "1367:     int pbe_type = 0;",
          "1369:     if (strcmp(alg, \"scrypt\") == 0)",
          "1370:         pbe_type = PBE_TYPE_SCRYPT;",
          "1371:     else if (strcmp(alg, \"pbkdf2\") == 0)",
          "1372:         pbe_type = PBE_TYPE_PBKDF2;",
          "1373:     else if (strcmp(alg, \"pkcs12\") == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1371: #ifndef OPENSSL_NO_SCRYPT",
          "1374: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1408:         return test_bin(value, &pdata->salt, &pdata->salt_len);",
          "1409:     if (strcmp(keyword, \"Key\") == 0)",
          "1410:         return test_bin(value, &pdata->key, &pdata->key_len);",
          "1414:         return pbkdf2_test_parse(t, keyword, value);",
          "1415:     else if (pdata->pbe_type == PBE_TYPE_PKCS12)",
          "1416:         return pkcs12_test_parse(t, keyword, value);",
          "1417:     return 0;",
          "1418: }",
          "",
          "[Removed Lines]",
          "1411:     if (pdata->pbe_type == PBE_TYPE_SCRYPT)",
          "1412:         return scrypt_test_parse(t, keyword, value);",
          "1413:     else if (pdata->pbe_type == PBE_TYPE_PBKDF2)",
          "",
          "[Added Lines]",
          "1415:     if (pdata->pbe_type == PBE_TYPE_PBKDF2)",
          "1419: #ifndef OPENSSL_NO_SCRYPT",
          "1420:     else if (pdata->pbe_type == PBE_TYPE_SCRYPT)",
          "1421:         return scrypt_test_parse(t, keyword, value);",
          "1422: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1433:                               pdata->iter, pdata->md,",
          "1434:                               pdata->key_len, key) == 0)",
          "1435:             goto err;",
          "1436:     } else if (pdata->pbe_type == PBE_TYPE_SCRYPT) {",
          "1437:         err = \"SCRYPT_ERROR\";",
          "1438:         if (EVP_PBE_scrypt((const char *)pdata->pass, pdata->pass_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1442: #ifndef OPENSSL_NO_SCRYPT",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1440:                            pdata->N, pdata->r, pdata->p, pdata->maxmem,",
          "1441:                            key, pdata->key_len) == 0)",
          "1442:             goto err;",
          "1443:     } else if (pdata->pbe_type == PBE_TYPE_PKCS12) {",
          "1444:         err = \"PKCS12_ERROR\";",
          "1445:         if (PKCS12_key_gen_uni(pdata->pass, pdata->pass_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450: #endif",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4563: COMP_get_type                           4922 EXIST::FUNCTION:",
          "4564: ASN1_INTEGER_get_int64                  4923 EXIST::FUNCTION:",
          "4565: ASN1_ENUMERATED_set_int64               4924 EXIST::FUNCTION:",
          "4567: ASN1_INTEGER_set_int64                  4926 EXIST::FUNCTION:",
          "4568: ASN1_ENUMERATED_get_int64               4927 EXIST::FUNCTION:",
          "4570: ASN1_INTEGER_get_uint64                 4929 EXIST::FUNCTION:",
          "4571: ASN1_INTEGER_set_uint64                 4930 EXIST::FUNCTION:",
          "4573: PKCS8_set0_pbe                          4932 EXIST::FUNCTION:",
          "4574: DH_bits                                 4933 EXIST::FUNCTION:DH",
          "4575: RSA_bits                                4934 EXIST::FUNCTION:RSA",
          "",
          "[Removed Lines]",
          "4566: EVP_PBE_scrypt                          4925 EXIST::FUNCTION:",
          "4569: PKCS5_v2_scrypt_keyivgen                4928 EXIST::FUNCTION:",
          "4572: PKCS5_pbe2_set_scrypt                   4931 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4566: EVP_PBE_scrypt                          4925 EXIST::FUNCTION:SCRYPT",
          "4569: PKCS5_v2_scrypt_keyivgen                4928 EXIST::FUNCTION:SCRYPT",
          "4572: PKCS5_pbe2_set_scrypt                   4931 EXIST::FUNCTION:SCRYPT",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     \"SHA256\", \"SHA512\", \"RMD160\",",
          "70:     \"MDC2\", \"WHIRLPOOL\", \"RSA\", \"DSA\", \"DH\", \"EC\", \"ECDH\", \"ECDSA\", \"EC2M\",",
          "71:     \"HMAC\", \"AES\", \"CAMELLIA\", \"SEED\", \"GOST\",",
          "72:     # EC_NISTP_64_GCC_128",
          "73:     \"EC_NISTP_64_GCC_128\",",
          "74:     # Envelope \"algorithms\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:                          \"SCRYPT\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: my $no_rc2; my $no_rc4; my $no_rc5; my $no_idea; my $no_des; my $no_bf;",
          "124: my $no_cast; my $no_whirlpool; my $no_camellia; my $no_seed;",
          "125: my $no_md2; my $no_md4; my $no_md5; my $no_sha; my $no_ripemd; my $no_mdc2;",
          "127: my $no_ec; my $no_ecdsa; my $no_ecdh; my $no_engine; my $no_hw;",
          "128: my $no_fp_api; my $no_static_engine=1; my $no_gmp; my $no_deprecated;",
          "129: my $no_rfc3779; my $no_psk; my $no_cms; my $no_capieng;",
          "",
          "[Removed Lines]",
          "126: my $no_rsa; my $no_dsa; my $no_dh; my $no_aes;",
          "",
          "[Added Lines]",
          "127: my $no_rsa; my $no_dsa; my $no_dh; my $no_aes; my $no_scrypt;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:  elsif (/^no-aes$/) { $no_aes=1; }",
          "204:  elsif (/^no-camellia$/) { $no_camellia=1; }",
          "205:  elsif (/^no-seed$/)     { $no_seed=1; }",
          "206:  elsif (/^no-evp$/) { $no_evp=1; }",
          "207:  elsif (/^no-lhash$/) { $no_lhash=1; }",
          "208:  elsif (/^no-stack$/) { $no_stack=1; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:  elsif (/^no-scrypt$/)   { $no_scrypt=1; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1187:    if ($keyword eq \"AES\" && $no_aes) { return 0; }",
          "1188:    if ($keyword eq \"CAMELLIA\" && $no_camellia) { return 0; }",
          "1189:    if ($keyword eq \"SEED\" && $no_seed) { return 0; }",
          "1190:    if ($keyword eq \"EVP\" && $no_evp) { return 0; }",
          "1191:    if ($keyword eq \"LHASH\" && $no_lhash) { return 0; }",
          "1192:    if ($keyword eq \"STACK\" && $no_stack) { return 0; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:    if ($keyword eq \"SCRYPT\" && $no_scrypt) { return 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1300705a47b9c9498b15a384c6c5348adc342e2c",
      "candidate_info": {
        "commit_hash": "1300705a47b9c9498b15a384c6c5348adc342e2c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1300705a47b9c9498b15a384c6c5348adc342e2c",
        "files": [
          "util/libeay.num"
        ],
        "message": "update ordinals\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4550: EVP_camellia_256_ctr                    4909 EXIST::FUNCTION:CAMELLIA",
          "4551: EVP_camellia_192_ctr                    4910 EXIST::FUNCTION:CAMELLIA",
          "4552: OCSP_resp_get0_signature                4911 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4553: OBJ_length                              4912 EXIST::FUNCTION:",
          "4554: OBJ_get0_data                           4913 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}