{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
      "candidate_info": {
        "commit_hash": "e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e5166e070a6590c40ca99ca66d0d97ea37e0b1cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Revert the OP_MustBeInt opcode implementation on this branch so that it again matches trunk. The extra functionality is no longer required.\n\nFossilOrigin-Name: c02f77b1b4d025d4243f883d6f3a2b3abcaf4944e0209f641b62c576415343dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98cc26598718e5557ee00aa77336024c91e483ec6de650e172ad1b44a6f0a77b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:   break;",
          "1724: }",
          "1740:   pIn1 = &aMem[pOp->p1];",
          "1742:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1745:       if( pOp->p2==0 ){",
          "1746:         rc = SQLITE_MISMATCH;",
          "1747:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1738:   u8 f;",
          "1739:   f = (pOp->p5 ? (MEM_Int|MEM_Real) : MEM_Int);",
          "1741:   if( (pIn1->flags & f)==0 ){",
          "1743:     VdbeBranchTaken((pIn1->flags&f)==0, 2);",
          "1744:     if( (pIn1->flags & f)==0 ){",
          "",
          "[Added Lines]",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1750:       }",
          "1751:     }",
          "1752:   }",
          "1754:   break;",
          "1755: }",
          "",
          "[Removed Lines]",
          "1753:   if( f==MEM_Int ) MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "[Added Lines]",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:   int regZero = sqlite3GetTempReg(pParse);",
          "1303:   assert( eCond>=0 && eCond<ArraySize(azErr) );",
          "1304:   sqlite3VdbeAddOp2(v, OP_Integer, 0, regZero);",
          "1307:   VdbeCoverageIf(v, eCond==0);",
          "1308:   VdbeCoverageIf(v, eCond==1);",
          "1309:   VdbeCoverageIf(v, eCond==2);",
          "",
          "[Removed Lines]",
          "1305:   sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1306:   if( eCond>=WINDOW_STARTING_NUM ) sqlite3VdbeChangeP5(v, 1);",
          "",
          "[Added Lines]",
          "1305:   if( eCond>=WINDOW_STARTING_NUM ){",
          "1306:     int regString = sqlite3GetTempReg(pParse);",
          "1307:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1308:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1309:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1310:   }else{",
          "1311:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1312:   }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:   FROM keyword_tab",
          "939: }",
          "941: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941: #-------------------------------------------------------------------------",
          "942: foreach {tn expr err} {",
          "943:   1   4.5      0",
          "944:   2   NULL     1",
          "945:   3   0.0      0",
          "946:   4   0.1      0",
          "947:   5  -0.1      1",
          "948:   6  ''        1",
          "949:   7  '2.0'     0",
          "950:   8  '2.0x'    1",
          "951:   9  x'1234'   1",
          "952:  10  '1.2'     0",
          "953: } {",
          "954:   set res {0 1}",
          "955:   if {$err} {set res {1 {frame starting offset must be a non-negative number}} }",
          "956:   do_catchsql_test 22.$tn.1 \"",
          "957:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "958:     SELECT sum(x) OVER (",
          "959:       ORDER BY y RANGE BETWEEN $expr PRECEDING AND UNBOUNDED FOLLOWING",
          "960:     ) FROM a",
          "961:   \" $res",
          "963:   set res {0 1}",
          "964:   if {$err} {set res {1 {frame ending offset must be a non-negative number}} }",
          "965:   do_catchsql_test 22.$tn.2 \"",
          "966:     WITH a(x, y) AS ( VALUES(1, 2) )",
          "967:     SELECT sum(x) OVER (",
          "968:       ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND $expr FOLLOWING",
          "969:     ) FROM a",
          "970:   \" $res",
          "971: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
      "candidate_info": {
        "commit_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c"
        ],
        "message": "Move the sqlite3LocateCollSeq(), sqlite3FindCollSeq(), and sqlite3GetCollSeq() routines so that they are all beside one another in the callback.c source file.  No logic changes.\n\nFossilOrigin-Name: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "1543: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1544:   sqlite3 *db = pParse->db;",
          "1545:   u8 enc = ENC(db);",
          "1546:   u8 initbusy = db->init.busy;",
          "1547:   CollSeq *pColl;",
          "1549:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1550:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1551:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1552:   }",
          "1554:   return pColl;",
          "1555: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc1be957c11718c28a107e5c9c6df2d72d55b57c",
      "candidate_info": {
        "commit_hash": "bc1be957c11718c28a107e5c9c6df2d72d55b57c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc1be957c11718c28a107e5c9c6df2d72d55b57c",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the Makefile so that it honors CFLAGS when building sessionfuzz.\n\nFossilOrigin-Name: 54231ac4ca506e6c34c31bc02bb8d3db22f14e1b01679bc70529b165d7dabb83",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:              $(TOP)/test/ossfuzz.c sqlite3.c $(TLIBS)",
          "671: sessionfuzz$(TEXE): $(TOP)/test/sessionfuzz.c sqlite3.c sqlite3.h",
          "674: dbfuzz$(TEXE): $(TOP)/test/dbfuzz.c sqlite3.c sqlite3.h",
          "675:  $(LTLINK) -o $@ $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c $(TLIBS)",
          "",
          "[Removed Lines]",
          "672:  $(CC) $(CFLAGS) -I. -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "[Added Lines]",
          "672:  $(LTLINK) -o $@ $(TOP)/test/sessionfuzz.c $(TLIBS)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b690dbdffe144bd69ca0aa291c230faf3d9d73f7a2985d50f016fe54003f9a9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91f473b5cc179b8bfa6521ff339665754a15462a",
      "candidate_info": {
        "commit_hash": "91f473b5cc179b8bfa6521ff339665754a15462a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91f473b5cc179b8bfa6521ff339665754a15462a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Do not attempt the LIKE optimization for non-text columns and a pattern prefix of \"-\".  Ticket [0f0428096f17252a]\n\nFossilOrigin-Name: 6fe0367f9a337b7c62886b7771f3ce0642faa13f4e4f3d9a0c848abbab514cd0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f06ef3d75d85545dd58c6dda10f7ad04fafbb7ae8706b3821be21f86a94795f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:           double rDummy;",
          "294:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "295:           if( isNum<=0 ){",
          "299:           }",
          "300:           if( isNum>0 ){",
          "301:             sqlite3ExprDelete(db, pPrefix);",
          "",
          "[Removed Lines]",
          "296:             zNew[iTo-1]++;",
          "297:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "298:             zNew[iTo-1]--;",
          "",
          "[Added Lines]",
          "297:             if( iTo==1 && zNew[0]=='-' ){",
          "298:               isNum = +1;",
          "299:             }else{",
          "300:               zNew[iTo-1]++;",
          "301:               isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "302:               zNew[iTo-1]--;",
          "303:             }",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "211: # 2019-02-27",
          "212: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: # 2019-09-03",
          "211: # Ticket https://www.sqlite.org/src/info/0f0428096f",
          "212: do_execsql_test like3-5.420 {",
          "213:   DROP TABLE IF EXISTS t0;",
          "214:   CREATE TABLE t0(c0 UNIQUE);",
          "215:   INSERT INTO t0(c0) VALUES(-1);",
          "216:   SELECT * FROM t0 WHERE t0.c0 GLOB '-*';",
          "217: } {-1}",
          "218: do_execsql_test like3-5.421 {",
          "219:   SELECT t0.c0 GLOB '-*' FROM t0;",
          "220: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd80dc366795c347f2f65a34208538ebc66a2cb0",
      "candidate_info": {
        "commit_hash": "cd80dc366795c347f2f65a34208538ebc66a2cb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd80dc366795c347f2f65a34208538ebc66a2cb0",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a null-pointer dereference that could occur in fts5 with a corrupt database.\n\nFossilOrigin-Name: b0a49d5e6df116bb5eacb60a0bb0f482760aec38bd417d4250d9e57d43bdbb13",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:       if( rc==SQLITE_OK ){",
          "893:         pLvl->nSeg = nTotal;",
          "894:         for(iSeg=0; iSeg<nTotal; iSeg++){",
          "895:           if( i>=nData ){",
          "896:             rc = FTS5_CORRUPT;",
          "897:             break;",
          "898:           }",
          "902:         }",
          "903:       }",
          "904:     }",
          "",
          "[Removed Lines]",
          "899:           i += fts5GetVarint32(&pData[i], pLvl->aSeg[iSeg].iSegid);",
          "900:           i += fts5GetVarint32(&pData[i], pLvl->aSeg[iSeg].pgnoFirst);",
          "901:           i += fts5GetVarint32(&pData[i], pLvl->aSeg[iSeg].pgnoLast);",
          "",
          "[Added Lines]",
          "895:           Fts5StructureSegment *pSeg = &pLvl->aSeg[iSeg];",
          "900:           i += fts5GetVarint32(&pData[i], pSeg->iSegid);",
          "901:           i += fts5GetVarint32(&pData[i], pSeg->pgnoFirst);",
          "902:           i += fts5GetVarint32(&pData[i], pSeg->pgnoLast);",
          "903:           if( pSeg->pgnoLast<pSeg->pgnoFirst ){",
          "904:             rc = FTS5_CORRUPT;",
          "905:             break;",
          "906:           }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   }",
          "36: }",
          "40: # Create a simple FTS5 table containing 100 documents. Each document",
          "41: # contains 10 terms, each of which start with the character \"x\".",
          "",
          "[Removed Lines]",
          "38: if 1 {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:   }",
          "381: } {}",
          "385: #------------------------------------------------------------------------",
          "386: # Corruption within the structure record.",
          "387: #",
          "",
          "[Removed Lines]",
          "383: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "963:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "964: } {1 {database disk image is malformed}}",
          "966: sqlite3_fts5_may_be_corrupt 0",
          "967: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963: #---------------------------------------------------------------------------",
          "964: #",
          "965: reset_db",
          "966: do_test 16.0 {",
          "967:   sqlite3 db {}",
          "968:   db deserialize [decode_hexdb {",
          "969: | size 28672 pagesize 4096 filename c17.db",
          "970: | page 1 offset 0",
          "971: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "972: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "973: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "974: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "975: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "976: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "977: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "978: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "979: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "980: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "981: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "982: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "983: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "984: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "985: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "986: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "987: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "988: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "989: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "990: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "991: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "992: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "993: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "994: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "995: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "996: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "997: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "998: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "999: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "1000: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "1001: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "1002: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "1003: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "1004: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "1005: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "1006: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1007: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "1008: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "1009: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "1010: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "1011: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "1012: | page 2 offset 4096",
          "1013: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "1014: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "1015: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "1016: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "1017: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "1018: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 41 01   ...$..........A.",
          "1019: | page 3 offset 8192",
          "1020: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "1021: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "1022: | page 4 offset 12288",
          "1023: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "1024: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "1025: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "1026: | page 5 offset 16384",
          "1027: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "1028: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "1029: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "1030: | page 6 offset 20480",
          "1031: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "1032: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "1033: | page 7 offset 24576",
          "1034: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "1035: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "1036: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "1037: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "1038: | end c17.db",
          "1039: }]} {}",
          "1041: do_catchsql_test 16.1 {",
          "1042: INSERT INTO t1(t1) VALUES('integrity-check');",
          "1043: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 202dd033019dd27428e3cc5f6e164c95b37efe39e2753515112b201ddefca67b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}