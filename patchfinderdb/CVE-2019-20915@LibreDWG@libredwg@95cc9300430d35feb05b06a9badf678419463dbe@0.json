{
  "cve_id": "CVE-2019-20915",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to a heap-based buffer over-read in bit_write_TF in bits.c.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "95cc9300430d35feb05b06a9badf678419463dbe",
  "patch_info": {
    "commit_hash": "95cc9300430d35feb05b06a9badf678419463dbe",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/95cc9300430d35feb05b06a9badf678419463dbe",
    "files": [
      "src/bits.c"
    ],
    "message": "encode: protect from stack under-flow\n\nFrom GH #178 fuzzing",
    "before_after_code_files": [
      "src/bits.c||src/bits.c"
    ]
  },
  "patch_diff": {
    "src/bits.c||src/bits.c": [
      "File: src/bits.c -> src/bits.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "883:     if (byte[i] & 0x7f)",
      "884:       break;",
      "887:     i--;",
      "888:   byte[i] &= 0x7f;",
      "889:   if (negative)",
      "",
      "[Removed Lines]",
      "886:   if (byte[i] & 0x40)",
      "",
      "[Added Lines]",
      "886:   if (byte[i] & 0x40 && i > 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953:     if (byte[i] & 0x7f)",
      "954:       break;",
      "957:     i--;",
      "958:   byte[i] &= 0x7f;",
      "959:   for (j = 4; j >= i; j--)",
      "",
      "[Removed Lines]",
      "956:   if (byte[i] & 0x40)",
      "",
      "[Added Lines]",
      "956:   if (byte[i] & 0x40 && i > 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abab1bdf55f4606946d0ed604b58823f98add9d2",
      "candidate_info": {
        "commit_hash": "abab1bdf55f4606946d0ed604b58823f98add9d2",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/abab1bdf55f4606946d0ed604b58823f98add9d2",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: protect some NULL pointers\n\nFixes some GH #178 fuzzing",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:     }                                                                         \\",
          "628:   SINCE (R_13)                                                                \\",
          "629:   {                                                                           \\",
          "630:     for (vcount = 0; vcount < _obj->num_reactors; vcount++)                   \\",
          "631:       {                                                                       \\",
          "632:         FIELD_HANDLE_N (reactors[vcount], vcount, code, 330);                 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:     if (_obj->num_reactors && !_obj->reactors)                                \\",
          "631:       {                                                                       \\",
          "632:         LOG_ERROR (\"NULL entity.reactors\");                                   \\",
          "633:         return DWG_ERR_VALUEOUTOFBOUNDS;                                      \\",
          "634:       }                                                                       \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2447:           {",
          "2448:             bit_write_RS (dat, rbuf->value.str.size);",
          "2449:             bit_write_RC (dat, rbuf->value.str.codepage);",
          "2451:             LOG_TRACE (\"xdata[%d]: \\\"%s\\\" [TF %d %d]\\n\", j,",
          "2452:                        rbuf->value.str.u.data, rbuf->value.str.size,",
          "2453:                        rbuf->type);",
          "",
          "[Removed Lines]",
          "2450:             bit_write_TF (dat, rbuf->value.str.u.data, rbuf->value.str.size);",
          "",
          "[Added Lines]",
          "2455:             if (rbuf->value.str.u.data)",
          "2456:               bit_write_TF (dat, rbuf->value.str.u.data, rbuf->value.str.size);",
          "2457:             else",
          "2458:               bit_write_TF (dat, (char*)\"\", 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6deea06760022108a4b78cc0cb4a0dddc5b99603",
      "candidate_info": {
        "commit_hash": "6deea06760022108a4b78cc0cb4a0dddc5b99603",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/6deea06760022108a4b78cc0cb4a0dddc5b99603",
        "files": [
          "programs/dwgrewrite.c",
          "src/encode.c"
        ],
        "message": "free: protect freeing obj->dxfname\n\ndont set INDXF when HANDSEED is missing.\ne.g. GH #178 null_pointer2 testcase",
        "before_after_code_files": [
          "programs/dwgrewrite.c||programs/dwgrewrite.c",
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "programs/dwgrewrite.c||programs/dwgrewrite.c": [
          "File: programs/dwgrewrite.c -> programs/dwgrewrite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   i = optind;",
          "199:   memset (&dwg, 0, sizeof (Dwg_Data));",
          "202:   filename_in = argv[i];",
          "203:   if (!filename_in)",
          "",
          "[Removed Lines]",
          "200:   dwg.opts = opts;",
          "",
          "[Added Lines]",
          "200:   dwg.opts = opts & 0xf;",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2421:   if (!_obj->HANDSEED) // minimal or broken DXF",
          "2422:     {",
          "2424:       dat->from_version = dat->version - 1;",
          "2425:       LOG_TRACE (\"encode from minimal DXF\\n\");",
          "2426:       _obj->HANDSEED = calloc(1, sizeof(Dwg_Object_Ref));",
          "",
          "[Removed Lines]",
          "2423:       dwg->opts |= (DWG_OPTS_MINIMAL | DWG_OPTS_INDXF);",
          "",
          "[Added Lines]",
          "2423:       dwg->opts |= DWG_OPTS_MINIMAL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
      "candidate_info": {
        "commit_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/3f503dd294efc63a59608d8a16058c41d44ba13a",
        "files": [
          "src/classes.inc",
          "src/dec_macros.h"
        ],
        "message": "add DEBUGGING_CLASS_CPP\n\nand use it for TABLECONTENT.\nThis is more stable than CLASS_DXF in cases when\nTABLE is mixed up with TABLECONTENT. See e.g.\nGH #178, where it fixes the heap_overflow2 case.",
        "before_after_code_files": [
          "src/classes.inc||src/classes.inc",
          "src/dec_macros.h||src/dec_macros.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/classes.inc||src/classes.inc": [
          "File: src/classes.inc -> src/classes.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: # define DEBUGGING_DXF(action, name)                 ALLOW_DXF(action, name)",
          "54: # define DEBUGGING_CLASS(action, name)               UNSTABLE_CLASS(action, name)",
          "55: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNSTABLE_CLASS_DXF(action, name, _dxfname)",
          "56: #else",
          "57: # define DEBUGGING_DXF(action, name)                 DISALLOW_DXF(action, name)",
          "58: # define DEBUGGING_CLASS(action, name)               UNHANDLED_CLASS(action, name)",
          "59: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNHANDLED_CLASS_DXF(action, name, _dxfname)",
          "60: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNSTABLE_CLASS_CPP(action, name, _cppname)",
          "61: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNHANDLED_CLASS_CPP(action, name, _cppname)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:         obj->dxfname = (char*) #_name; \\",
          "124:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "125:       } \\",
          "127:     }",
          "128: #define UNHANDLED_CLASS(action, _name) \\",
          "129:   if (klass->dxfname && strEQc (klass->dxfname, #_name)) \\",
          "",
          "[Removed Lines]",
          "126:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
          "",
          "[Added Lines]",
          "128:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name) (dat, obj); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
          "145:         obj->name = (char*) #_name; \\",
          "146:         obj->dxfname = (char*) #_dxfname; \\",
          "148:       } \\",
          "150:       return DWG_ERR_UNHANDLEDCLASS; \\",
          "151:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:       return DWG_ERR_UNHANDLEDCLASS; \\",
          "149:     }",
          "150: #define UNHANDLED_CLASS_CPP(action, _name, _cppname) \\",
          "151:   if (klass->cppname && strEQc (klass->cppname, #_cppname)) \\",
          "152:     { \\",
          "153:       WARN_UNHANDLED_CLASS; \\",
          "154:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
          "155:         obj->name = (char*) #_name; \\",
          "156:         obj->dxfname = (char*) #_name; \\",
          "157:       } \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:   STABLE_CLASS    (ACTION, IMAGEDEF)",
          "171:   STABLE_CLASS    (ACTION, IMAGEDEF_REACTOR)",
          "172:   STABLE_CLASS    (ACTION, LAYER_INDEX)",
          "174:   STABLE_CLASS    (ACTION, LWPOLYLINE)",
          "176:   STABLE_CLASS    (ACTION, OBJECTCONTEXTDATA)",
          "177:   STABLE_CLASS_CPP(ACTION, OBJECTCONTEXTDATA, AcDbObjectContextData)",
          "178:   STABLE_CLASS_DXF(ACTION, PLACEHOLDER, ACDBPLACEHOLDER)",
          "",
          "[Removed Lines]",
          "173:   STABLE_CLASS    (ACTION, LAYOUT)",
          "175:   STABLE_CLASS    (ACTION, MLEADERSTYLE)",
          "",
          "[Added Lines]",
          "181:   STABLE_CLASS    (ACTION, LAYOUT) // TODO bottom_margin nan",
          "183:   STABLE_CLASS    (ACTION, MLEADERSTYLE) // TODO block_rotation nan",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:   DEBUGGING_CLASS     (ACTION, TABLEGEOMETRY) //wrong geom_data",
          "225:   DEBUGGING_CLASS     (ACTION, CELLSTYLEMAP) //broken",
          "226:   DEBUGGING_CLASS     (ACTION, MATERIAL)     //working on",
          "",
          "[Removed Lines]",
          "222:   DEBUGGING_CLASS     (ACTION, ARC_DIMENSION) //ent",
          "223:   DEBUGGING_CLASS     (ACTION, TABLECONTENT) //wrong values",
          "",
          "[Added Lines]",
          "231:   DEBUGGING_CLASS_CPP (ACTION, TABLECONTENT, AcDbTableContent)",
          "",
          "---------------"
        ],
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236:       obj_dat = *dat;                                                         \\",
          "1237:       hdl_dat = *dat;                                                         \\",
          "1238:       str_dat = *dat;                                                         \\",
          "1241:     }                                                                         \\",
          "1242:     else { error = dwg_decode_##token##_private (dat, dat, dat, obj); }       \\",
          "1243:     return error;                                                             \\",
          "",
          "[Removed Lines]",
          "1239:       error                                                                   \\",
          "1240:           = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat, obj); \\",
          "",
          "[Added Lines]",
          "1239:       error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,     \\",
          "1240:                                             obj);                             \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
      "candidate_info": {
        "commit_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
        "files": [
          "include/dwg.h",
          "src/decode.c",
          "src/encode.c",
          "src/free.c"
        ],
        "message": "cleanup tio.unknown\n\nnot needed anymore, we only have UNKNOWN_OBJ or UNKNOWN_ENT with full common\nentity_data.\nFixes GH #178 heap_overflow2",
        "before_after_code_files": [
          "include/dwg.h||include/dwg.h",
          "src/decode.c||src/decode.c",
          "src/encode.c||src/encode.c",
          "src/free.c||src/free.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/dwg.h||include/dwg.h": [
          "File: include/dwg.h -> include/dwg.h"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5013:           bit_set_position (dat, restartpos);",
          "5019:           if (i >= 0 && i < (int)dwg->num_classes)",
          "5020:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5014:           obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5032:                   LOG_ERROR (\"Invalid class index %d >%d\", i,",
          "5033:                              (int)dwg->num_classes);",
          "5034:                 }",
          "5036:               obj->type = 0;",
          "5038:               return error | DWG_ERR_VALUEOUTOFBOUNDS;",
          "5039:             }",
          "5096:         }",
          "5097:     }",
          "",
          "[Removed Lines]",
          "5035:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "5041:           if (klass && !is_entity)",
          "5042:             {",
          "5043:               int err = dwg_decode_UNKNOWN_OBJ (dat, obj);",
          "5044:               error |= err;",
          "5045:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "5046:               if (!dat)",
          "5047:                 return error;",
          "5048:               if (err >= DWG_ERR_CRITICAL)",
          "5050:             }",
          "5051:           else if (klass) // is_entity",
          "5052:             {",
          "5053:               int err;",
          "5054: #if 0 && !defined(IS_RELEASE)",
          "5055:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
          "5056:                 char *mleader = bit_read_TF(dat, obj->size);",
          "5057:                 LOG_INSANE_TF(mleader, (int)obj->size)",
          "5058:                 bit_set_position(dat, restartpos);",
          "5059:                 free (mleader);",
          "5060:               }",
          "5061: #endif",
          "5062:               err = dwg_decode_UNKNOWN_ENT (dat, obj);",
          "5063:               error |= err;",
          "5064:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "5065:               if (!dat)",
          "5066:                 return error;",
          "5067:               if (err >= DWG_ERR_CRITICAL)",
          "5069:             }",
          "5070:           else // not a class",
          "5071:             {",
          "5072:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "5073:               SINCE (R_2000)",
          "5074:               {",
          "5075:                 obj->bitsize = bit_read_RL (dat);",
          "5076:                 LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",",
          "5077:                            obj->bitsize, dat->byte-2, dat->bit);",
          "5078:                 if (obj->bitsize > obj->size * 8)",
          "5079:                   {",
          "5080:                     LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,",
          "5081:                                obj->bitsize, obj->size * 8);",
          "5082:                     obj->bitsize = obj->size * 8;",
          "5083:                     error |= DWG_ERR_VALUEOUTOFBOUNDS;",
          "5084:                   }",
          "5085:               }",
          "5086:               if (!bit_read_H (dat, &obj->handle))",
          "5087:                 {",
          "5088:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
          "5089:                              ARGS_H (obj->handle));",
          "5090:                 }",
          "5091:               restartpos = dat->byte;",
          "5092:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "5093:               obj->tio.unknown = bit_read_TF (dat, obj->size);",
          "5094:               dat->byte = restartpos;",
          "5095:             }",
          "",
          "[Added Lines]",
          "5037:           if (is_entity)",
          "5038:               error |= dwg_decode_UNKNOWN_ENT (dat, obj);",
          "5039:           else",
          "5040:               error |= dwg_decode_UNKNOWN_OBJ (dat, obj);",
          "5042:           if (!dat)",
          "5043:             return error;",
          "5044:           if (error >= DWG_ERR_CRITICAL)",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1970:           else",
          "1971:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
          "1976:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "1993:         }",
          "1994:     }",
          "",
          "[Removed Lines]",
          "1973:           if (klass && !is_entity)",
          "1974:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "1975:           else if (klass)",
          "1977:           else // not a class",
          "1978:             {",
          "1979:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "1980:               error = DWG_ERR_UNHANDLEDCLASS;",
          "1981:               SINCE (R_2000)",
          "1982:               {",
          "1983:                 bit_write_RL (dat, obj->bitsize);",
          "1984:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
          "1985:                           dat->byte - 4, dat->bit);",
          "1986:               }",
          "1987:               bit_write_H (dat, &obj->handle);",
          "1988:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));",
          "1991:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
          "1992:             }",
          "",
          "[Added Lines]",
          "1973:           if (is_entity)",
          "1975:           else",
          "1976:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "",
          "---------------"
        ],
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "731:       else if ((error = dwg_free_variable_type (obj->parent, obj))",
          "732:                & DWG_ERR_UNHANDLEDCLASS)",
          "733:         {",
          "738:         unhandled:",
          "753:               dwg_free_UNKNOWN_ENT (dat, obj);",
          "761:               dwg_free_UNKNOWN_OBJ (dat, obj);",
          "771:         }",
          "772:     }",
          "",
          "[Removed Lines]",
          "734:           int is_entity;",
          "735:           int i;",
          "736:           Dwg_Class *klass;",
          "739:           is_entity = 0;",
          "740:           i = obj->type - 500;",
          "741:           klass = NULL;",
          "743:           dwg = obj->parent;",
          "744:           if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)",
          "745:             {",
          "746:               klass = &dwg->dwg_class[i];",
          "747:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
          "748:             }",
          "750:           if (obj->fixedtype == DWG_TYPE_TABLE)",
          "751:             {",
          "754:             }",
          "755:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
          "756:             {",
          "757:               dwg_free_UNKNOWN_OBJ (dat, obj);",
          "758:             }",
          "759:           else if (klass && !is_entity)",
          "760:             {",
          "762:             }",
          "763:           else if (klass && is_entity)",
          "764:             {",
          "765:               dwg_free_UNKNOWN_ENT (dat, obj);",
          "766:             }",
          "767:           else // not a class",
          "768:             {",
          "769:               FREE_IF (obj->tio.unknown);",
          "770:             }",
          "",
          "[Added Lines]",
          "735:           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
          "737:           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6875ad84d2c77e14b74a98a3abc051ccad1711c9",
      "candidate_info": {
        "commit_hash": "6875ad84d2c77e14b74a98a3abc051ccad1711c9",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/6875ad84d2c77e14b74a98a3abc051ccad1711c9",
        "files": [
          "src/in_json.c"
        ],
        "message": "in_json: fatal error if OBJECTS handle is missing\n\nFixes GH #178 fuzzing crashes",
        "before_after_code_files": [
          "src/in_json.c||src/in_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/in_json.c||src/in_json.c": [
          "File: src/in_json.c -> src/in_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:                    && t->type == JSMN_PRIMITIVE)",
          "1731:             {",
          "1732:               obj->size = json_long (dat, tokens);",
          "1733:               LOG_TRACE (\"size: %d\\n\", obj->size)",
          "1734:             }",
          "1735:           else if (strEQc (key, \"bitsize\") && !obj->bitsize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1733:               if (!obj->handle.value)",
          "1734:                 {",
          "1735:                   LOG_ERROR (\"Required %s.handle missing\", name)",
          "1736:                   return DWG_ERR_INVALIDDWG;",
          "1737:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}