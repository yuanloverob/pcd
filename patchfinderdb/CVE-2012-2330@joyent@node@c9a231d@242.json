{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ce013dd4bbe660c12ce11c338b788163305cd2b",
      "candidate_info": {
        "commit_hash": "6ce013dd4bbe660c12ce11c338b788163305cd2b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6ce013dd4bbe660c12ce11c338b788163305cd2b",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-readfile-zero-byte-liar.js"
        ],
        "message": "fix fs.readFile with lying size=0 stat results",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-readfile-zero-byte-liar.js||test/simple/test-fs-readfile-zero-byte-liar.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   var size;",
          "112:   var pos = 0;",
          "113:   var fd;",
          "",
          "[Removed Lines]",
          "111:   var buffer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:       if (er) return callback(er);",
          "121:       size = st.size;",
          "122:       if (size === 0) {",
          "125:       }",
          "127:       buffer = new Buffer(size);",
          "",
          "[Removed Lines]",
          "123:         buffer = new Buffer(0);",
          "124:         return afterRead(null, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   });",
          "132:   function read() {",
          "134:   }",
          "136:   function afterRead(er, bytesRead) {",
          "",
          "[Removed Lines]",
          "133:     fs.read(fd, buffer, pos, size - pos, pos, afterRead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     }",
          "143:     pos += bytesRead;",
          "146:   }",
          "148:   function close() {",
          "149:     fs.close(fd, function(er) {",
          "150:       if (encoding) buffer = buffer.toString(encoding);",
          "151:       return callback(er, buffer);",
          "152:     });",
          "",
          "[Removed Lines]",
          "144:     if (pos === size) close();",
          "145:     else read();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     if (threw) fs.closeSync(fd);",
          "166:   }",
          "168:   if (size === 0) {",
          "171:   }",
          "177:     var threw = true;",
          "178:     try {",
          "180:       threw = false;",
          "181:     } finally {",
          "182:       if (threw) fs.closeSync(fd);",
          "183:     }",
          "185:     pos += bytesRead;",
          "186:   }",
          "188:   fs.closeSync(fd);",
          "190:   if (encoding) buffer = buffer.toString(encoding);",
          "191:   return buffer;",
          "192: };",
          "",
          "[Removed Lines]",
          "169:     fs.closeSync(fd);",
          "170:     return encoding ? '' : new Buffer(0);",
          "173:   var buffer = new Buffer(size);",
          "174:   var pos = 0;",
          "176:   while (pos < size) {",
          "179:       var bytesRead = fs.readSync(fd, buffer, pos, size - pos, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-readfile-zero-byte-liar.js||test/simple/test-fs-readfile-zero-byte-liar.js": [
          "File: test/simple/test-fs-readfile-zero-byte-liar.js -> test/simple/test-fs-readfile-zero-byte-liar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var fs = require('fs');",
          "26: var dataExpected = fs.readFileSync(__filename, 'utf8');",
          "29: fs._fstat = fs.fstat;",
          "30: fs._fstatSync = fs.fstatSync;",
          "32: fs.fstat = function(fd, cb) {",
          "33:   fs._fstat(fd, function(er, st) {",
          "34:     if (er) return cb(er);",
          "35:     st.size = 0;",
          "36:     return cb(er, st);",
          "37:   });",
          "38: };",
          "40: fs.fstatSync = function(fd) {",
          "41:   var st = fs._fstatSync;",
          "42:   st.size = 0;",
          "43:   return st;",
          "44: };",
          "46: var d = fs.readFileSync(__filename, 'utf8');",
          "47: assert.equal(d, dataExpected);",
          "49: var called = false;",
          "50: fs.readFile(__filename, 'utf8', function (er, d) {",
          "51:   assert.equal(d, dataExpected);",
          "52:   called = true;",
          "53: });",
          "55: process.on('exit', function() {",
          "56:   assert(called);",
          "57:   console.log(\"ok\");",
          "58: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68f63fe9ec2b8a7308cefa4a1ae1261cd6d1675f",
      "candidate_info": {
        "commit_hash": "68f63fe9ec2b8a7308cefa4a1ae1261cd6d1675f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/68f63fe9ec2b8a7308cefa4a1ae1261cd6d1675f",
        "files": [
          "lib/child_process.js"
        ],
        "message": "child_process: make copy of options arg\n\nMake a copy of the options object that the user passes in, we modify it.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   var options, args, execArgv;",
          "173:   if (Array.isArray(arguments[1])) {",
          "174:     args = arguments[1];",
          "176:   } else {",
          "177:     args = [];",
          "179:   }",
          "",
          "[Removed Lines]",
          "175:     options = arguments[2] || {};",
          "178:     options = arguments[1] || {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:   if (Array.isArray(arguments[1])) {",
          "266:     args = arguments[1];",
          "268:   } else {",
          "269:     args = [];",
          "271:   }",
          "276:   var child = spawn(file, args, {",
          "277:     cwd: options.cwd,",
          "278:     env: options.env,",
          "",
          "[Removed Lines]",
          "267:     if (typeof arguments[2] === 'object') optionArg = arguments[2];",
          "270:     if (typeof arguments[1] === 'object') optionArg = arguments[1];",
          "274:   util._extend(options, optionArg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7584225873cd27b53f3fdfb6af5c12c6514acdfa",
      "candidate_info": {
        "commit_hash": "7584225873cd27b53f3fdfb6af5c12c6514acdfa",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7584225873cd27b53f3fdfb6af5c12c6514acdfa",
        "files": [
          "deps/uv/include/uv-private/ev.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/udp.c",
          "deps/uv/src/win/core.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h",
          "deps/uv/src/win/util.c",
          "deps/uv/test/echo-server.c",
          "deps/uv/test/task.h",
          "deps/uv/test/test-eio-overflow.c",
          "deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-ref.c",
          "deps/uv/test/test-tcp-close.c",
          "deps/uv/test/test-timer.c"
        ],
        "message": "Upgrade libuv to joyent/libuv@f5bd21f",
        "before_after_code_files": [
          "deps/uv/include/uv-private/ev.h||deps/uv/include/uv-private/ev.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c",
          "deps/uv/src/win/core.c||deps/uv/src/win/core.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h",
          "deps/uv/src/win/util.c||deps/uv/src/win/util.c",
          "deps/uv/test/echo-server.c||deps/uv/test/echo-server.c",
          "deps/uv/test/task.h||deps/uv/test/task.h",
          "deps/uv/test/test-eio-overflow.c||deps/uv/test/test-eio-overflow.c",
          "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c",
          "deps/uv/test/test-tcp-close.c||deps/uv/test/test-tcp-close.c",
          "deps/uv/test/test-timer.c||deps/uv/test/test-timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/ev.h||deps/uv/include/uv-private/ev.h": [
          "File: deps/uv/include/uv-private/ev.h -> deps/uv/include/uv-private/ev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "563: struct ev_loop *ev_loop_new (unsigned int flags EV_CPP (= 0));",
          "567: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565: int ev_loop_refcount (EV_P);",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: UV_EXTERN uv_loop_t* uv_loop_new(void);",
          "203: UV_EXTERN void uv_loop_delete(uv_loop_t*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: UV_EXTERN int uv_loop_refcount(const uv_loop_t*);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void uv__finish_close(uv_handle_t* handle);",
          "72: void uv_close(uv_handle_t* handle, uv_close_cb close_cb) {",
          "73:   uv_udp_t* udp;",
          "74:   uv_async_t* async;",
          "",
          "[Removed Lines]",
          "67: #ifndef __GNUC__",
          "68: #define __attribute__(a)",
          "69: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: }",
          "205: uv_loop_t* uv_default_loop(void) {",
          "206:   if (default_loop_ptr)",
          "207:     return default_loop_ptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: int uv_loop_refcount(const uv_loop_t* loop) {",
          "200:   return ev_loop_refcount(loop->ev);",
          "201: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1961: #if EV_VERIFY",
          "1962: static void noinline",
          "1963: verify_watcher (EV_P_ W w)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1961: int",
          "1962: ev_loop_refcount (EV_P)",
          "1963: {",
          "1964:   return activecnt;",
          "1965: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/udp.c||deps/uv/src/unix/udp.c": [
          "File: deps/uv/src/unix/udp.c -> deps/uv/src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static void uv__udp_watcher_start(uv_udp_t* handle, ev_io* w) {",
          "43:   int flags;",
          "45:   assert(w == &handle->read_watcher",
          "46:       || w == &handle->write_watcher);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   if (ev_is_active(w)) {",
          "46:     return;",
          "47:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   ev_set_cb(w, uv__udp_io);",
          "52:   ev_io_set(w, handle->fd, flags);",
          "53:   ev_io_start(handle->loop->ev, w);",
          "54: }",
          "57: void uv__udp_watcher_stop(uv_udp_t* handle, ev_io* w) {",
          "58:   int flags;",
          "60:   assert(w == &handle->read_watcher",
          "61:       || w == &handle->write_watcher);",
          "63:   flags = (w == &handle->read_watcher ? EV_READ : EV_WRITE);",
          "65:   ev_io_stop(handle->loop->ev, w);",
          "66:   ev_io_set(w, -1, flags);",
          "67:   ev_set_cb(w, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   ev_unref(handle->loop->ev);",
          "65:   if (!ev_is_active(w)) {",
          "66:     return;",
          "67:   }",
          "74:   ev_ref(handle->loop->ev);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:       goto out;",
          "333:     }",
          "334: #else",
          "336:     goto out;",
          "337: #endif",
          "338:   }",
          "",
          "[Removed Lines]",
          "335:     uv__set_sys_error((uv_handle_t*)handle, ENOTSUP);",
          "",
          "[Added Lines]",
          "345:     uv__set_sys_error(handle->loop, ENOTSUP);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/core.c||deps/uv/src/win/core.c": [
          "File: deps/uv/src/win/core.c -> deps/uv/src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "119: void uv_ref(uv_loop_t* loop) {",
          "120:   loop->refs++;",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119: int uv_loop_refcount(const uv_loop_t* loop) {",
          "120:   return loop->refs;",
          "121: }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492: void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "493:   int result;",
          "498:     return;",
          "499:   }",
          "517:     }",
          "520:   }",
          "525: }",
          "",
          "[Removed Lines]",
          "494:   unsigned short mode;",
          "496:   fs__open(req, path, _O_RDONLY, 0);",
          "497:   if (req->result == -1) {",
          "501:   result = _fstati64(req->result, &req->stat);",
          "502:   if (result == -1) {",
          "503:     req->ptr = NULL;",
          "504:   } else {",
          "510:     if (GetFileAttributesW(path) & FILE_ATTRIBUTE_DIRECTORY) {",
          "511:       mode = req->stat.st_mode;",
          "512:       mode &= ~_S_IFMT;",
          "513:       mode |= _S_IFDIR;",
          "515:       req->stat.st_mode = mode;",
          "516:       assert((req->stat.st_mode & _S_IFMT) == _S_IFDIR);",
          "519:     req->ptr = &req->stat;",
          "522:   _close(req->result);",
          "524:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "493:   HANDLE file;",
          "494:   WIN32_FIND_DATAW ent;",
          "497:   req->ptr = NULL;",
          "499:   file = FindFirstFileExW(path, FindExInfoStandard, &ent,",
          "500:     FindExSearchNameMatch, NULL, 0);",
          "502:   if (file == INVALID_HANDLE_VALUE) {",
          "503:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "507:   FindClose(file);",
          "509:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT &&",
          "510:       ent.dwReserved0 == IO_REPARSE_TAG_SYMLINK) {",
          "511:     fs__open(req, path, _O_RDONLY, 0);",
          "512:     if (req->result != -1) {",
          "513:       result = _fstati64(req->result, &req->stat);",
          "514:       _close(req->result);",
          "516:       if (result != -1) {",
          "517:         req->ptr = &req->stat;",
          "518:       }",
          "520:       SET_REQ_RESULT(req, result);",
          "523:     return;",
          "526:   req->stat.st_ino = 0;",
          "527:   req->stat.st_uid = 0;",
          "528:   req->stat.st_gid = 0;",
          "529:   req->stat.st_mode = 0;",
          "530:   req->stat.st_rdev = 0;",
          "531:   req->stat.st_dev = 0;",
          "532:   req->stat.st_nlink = 1;",
          "534:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_READONLY ) {",
          "535:     req->stat.st_mode |= (_S_IREAD + (_S_IREAD >> 3) + (_S_IREAD >> 6));",
          "536:   } else {",
          "537:     req->stat.st_mode |= ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "538:       ((_S_IREAD|_S_IWRITE) >> 6));",
          "539:   }",
          "541:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "542:     req->stat.st_mode |= _S_IFDIR;",
          "543:   } else {",
          "544:     req->stat.st_mode |= _S_IFREG;",
          "545:   }",
          "547:   uv_filetime_to_time_t(&ent.ftLastWriteTime, &(req->stat.st_mtime));",
          "548:   uv_filetime_to_time_t(&ent.ftLastAccessTime, &(req->stat.st_atime));",
          "549:   uv_filetime_to_time_t(&ent.ftCreationTime, &(req->stat.st_ctime));",
          "551:   req->stat.st_size = ((int64_t)ent.nFileSizeHigh << 32) +",
          "552:     (int64_t)ent.nFileSizeLow;",
          "554:   req->ptr = &req->stat;",
          "555:   req->result = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h": [
          "File: deps/uv/src/win/internal.h -> deps/uv/src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: int uv_parent_pid();",
          "289: void uv_fatal_error(const int errorno, const char* syscall);",
          "291: uv_err_code uv_translate_sys_error(int sys_errno);",
          "293: #define SET_REQ_STATUS(req, status)                                     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: void uv_filetime_to_time_t(FILETIME* file_time,  time_t* stat_time);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/util.c||deps/uv/src/win/util.c": [
          "File: deps/uv/src/win/util.c -> deps/uv/src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <malloc.h>",
          "25: #include <stdio.h>",
          "26: #include <string.h>",
          "28: #include \"uv.h\"",
          "29: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <time.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "580:   free(addresses);",
          "581: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585: void uv_filetime_to_time_t(FILETIME* file_time, time_t* stat_time) {",
          "586:   FILETIME local_time;",
          "587:   SYSTEMTIME system_time;",
          "588:   struct tm time;",
          "590:   if ((file_time->dwLowDateTime || file_time->dwHighDateTime) &&",
          "591:       FileTimeToLocalFileTime(file_time, &local_time)         &&",
          "592:       FileTimeToSystemTime(&local_time, &system_time)) {",
          "593:     time.tm_year = system_time.wYear - 1900;",
          "594:     time.tm_mon = system_time.wMonth - 1;",
          "595:     time.tm_mday = system_time.wDay;",
          "596:     time.tm_hour = system_time.wHour;",
          "597:     time.tm_min = system_time.wMinute;",
          "598:     time.tm_sec = system_time.wSecond;",
          "601:   } else {",
          "603:   }",
          "604: }",
          "",
          "---------------"
        ],
        "deps/uv/test/echo-server.c||deps/uv/test/echo-server.c": [
          "File: deps/uv/test/echo-server.c -> deps/uv/test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: static int server_closed;",
          "35: static stream_type serverType;",
          "36: static uv_tcp_t tcpServer;",
          "37: static uv_pipe_t pipeServer;",
          "38: static uv_handle_t* server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: static uv_udp_t udpServer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: }",
          "179: static int tcp4_echo_start(int port) {",
          "180:   struct sockaddr_in addr = uv_ip4_addr(\"0.0.0.0\", port);",
          "181:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: static void on_send(uv_udp_send_t* req, int status);",
          "183: static void on_recv(uv_udp_t* handle,",
          "184:                     ssize_t nread,",
          "185:                     uv_buf_t buf,",
          "186:                     struct sockaddr* addr,",
          "187:                     unsigned flags) {",
          "188:   uv_udp_send_t* req;",
          "189:   int r;",
          "191:   ASSERT(nread > 0);",
          "192:   ASSERT(addr->sa_family == AF_INET);",
          "194:   req = malloc(sizeof(*req));",
          "195:   ASSERT(req != NULL);",
          "197:   r = uv_udp_send(req, handle, &buf, 1, *(struct sockaddr_in*)addr, on_send);",
          "198:   ASSERT(r == 0);",
          "199: }",
          "202: static void on_send(uv_udp_send_t* req, int status) {",
          "203:   ASSERT(status == 0);",
          "204:   free(req);",
          "205: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242: }",
          "245: static int pipe_echo_start(char* pipeName) {",
          "246:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: static int udp4_echo_start(int port) {",
          "275:   int r;",
          "277:   server = (uv_handle_t*)&udpServer;",
          "278:   serverType = UDP;",
          "280:   r = uv_udp_init(loop, &udpServer);",
          "281:   if (r) {",
          "282:     fprintf(stderr, \"uv_udp_init: %s\\n\",",
          "283:         uv_strerror(uv_last_error(loop)));",
          "284:     return 1;",
          "285:   }",
          "287:   r = uv_udp_recv_start(&udpServer, echo_alloc, on_recv);",
          "288:   if (r) {",
          "289:     fprintf(stderr, \"uv_udp_recv_start: %s\\n\",",
          "290:         uv_strerror(uv_last_error(loop)));",
          "291:     return 1;",
          "292:   }",
          "294:   return 0;",
          "295: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:   uv_run(loop);",
          "305:   return 0;",
          "306: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362: HELPER_IMPL(udp4_echo_server) {",
          "363:   loop = uv_default_loop();",
          "365:   if (udp4_echo_start(TEST_PORT))",
          "366:     return 1;",
          "368:   uv_run(loop);",
          "369:   return 0;",
          "370: }",
          "",
          "---------------"
        ],
        "deps/uv/test/task.h||deps/uv/test/task.h": [
          "File: deps/uv/test/task.h -> deps/uv/test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: typedef enum {",
          "44:   TCP = 0,",
          "45:   PIPE",
          "46: } stream_type;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   UDP,",
          "",
          "---------------"
        ],
        "deps/uv/test/test-eio-overflow.c||deps/uv/test/test-eio-overflow.c": [
          "File: deps/uv/test/test-eio-overflow.c -> deps/uv/test/test-eio-overflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: void make_eio_req(void) {",
          "49:   opened++;",
          "52:   ASSERT(w != NULL);",
          "54:   uv_queue_work(uv_default_loop(), w, work_cb, after_work_cb);",
          "",
          "[Removed Lines]",
          "51:   uv_work_t* w = (uv_work_t*) malloc(sizeof(*w));",
          "",
          "[Added Lines]",
          "49:   uv_work_t* w;",
          "53:   w = (uv_work_t*) malloc(sizeof(*w));",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c": [
          "File: deps/uv/test/test-fs-event.c -> deps/uv/test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:   return 0;",
          "330: }",
          "",
          "[Removed Lines]",
          "333: TEST_IMPL(fs_event_unref) {",
          "334:   uv_loop_t* loop;",
          "335:   int r;",
          "337:   loop = uv_default_loop();",
          "339:   r = uv_fs_event_init(loop, &fs_event, \".\", fs_event_fail, 0);",
          "340:   ASSERT(r == 0);",
          "342:   uv_unref(loop);",
          "344:   r = uv_run(loop);",
          "345:   ASSERT(r == 0);",
          "347:   return 0;",
          "348: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: TEST_DECLARE   (ipc_listen_after_write)",
          "27: TEST_DECLARE   (tcp_ping_pong)",
          "28: TEST_DECLARE   (tcp_ping_pong_v6)",
          "31: TEST_DECLARE   (pipe_ping_pong)",
          "32: TEST_DECLARE   (delayed_accept)",
          "33: TEST_DECLARE   (multiple_listen)",
          "",
          "[Removed Lines]",
          "29: TEST_DECLARE   (tcp_ref)",
          "30: TEST_DECLARE   (tcp_ref2)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: TEST_DECLARE   (callback_stack)",
          "65: TEST_DECLARE   (error_message)",
          "66: TEST_DECLARE   (timer)",
          "69: TEST_DECLARE   (timer_again)",
          "70: TEST_DECLARE   (idle_starvation)",
          "71: TEST_DECLARE   (loop_handles)",
          "72: TEST_DECLARE   (ref)",
          "73: TEST_DECLARE   (idle_ref)",
          "75: TEST_DECLARE   (async_ref)",
          "76: TEST_DECLARE   (prepare_ref)",
          "77: TEST_DECLARE   (check_ref)",
          "78: TEST_DECLARE   (unref_in_prepare_cb)",
          "79: TEST_DECLARE   (async)",
          "80: TEST_DECLARE   (get_currentexe)",
          "81: TEST_DECLARE   (process_title)",
          "",
          "[Removed Lines]",
          "67: TEST_DECLARE   (timer_ref)",
          "68: TEST_DECLARE   (timer_ref2)",
          "74: TEST_DECLARE   (get_loadavg)",
          "",
          "[Added Lines]",
          "68: TEST_DECLARE   (get_loadavg)",
          "75: TEST_DECLARE   (timer_ref)",
          "76: TEST_DECLARE   (timer_ref2)",
          "77: TEST_DECLARE   (fs_event_ref)",
          "78: TEST_DECLARE   (tcp_ref)",
          "79: TEST_DECLARE   (tcp_ref2)",
          "80: TEST_DECLARE   (tcp_ref3)",
          "81: TEST_DECLARE   (udp_ref)",
          "82: TEST_DECLARE   (udp_ref2)",
          "83: TEST_DECLARE   (udp_ref3)",
          "84: TEST_DECLARE   (pipe_ref)",
          "85: TEST_DECLARE   (pipe_ref2)",
          "86: TEST_DECLARE   (pipe_ref3)",
          "87: TEST_DECLARE   (process_ref)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115: TEST_DECLARE   (fs_event_watch_file_current_dir)",
          "116: TEST_DECLARE   (fs_event_no_callback_on_close)",
          "117: TEST_DECLARE   (fs_event_immediate_close)",
          "119: TEST_DECLARE   (fs_readdir_empty_dir)",
          "120: TEST_DECLARE   (fs_readdir_file)",
          "121: TEST_DECLARE   (fs_open_dir)",
          "",
          "[Removed Lines]",
          "118: TEST_DECLARE   (fs_event_unref)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: #endif",
          "139: HELPER_DECLARE (tcp4_echo_server)",
          "140: HELPER_DECLARE (tcp6_echo_server)",
          "141: HELPER_DECLARE (pipe_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: HELPER_DECLARE (udp4_echo_server)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:   TEST_ENTRY  (ipc_listen_before_write)",
          "152:   TEST_ENTRY  (ipc_listen_after_write)",
          "159:   TEST_ENTRY  (tcp_ping_pong)",
          "160:   TEST_HELPER (tcp_ping_pong, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "154:   TEST_ENTRY  (tcp_ref)",
          "156:   TEST_ENTRY  (tcp_ref2)",
          "157:   TEST_HELPER (tcp_ref2, tcp4_echo_server)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "212:   TEST_ENTRY  (error_message)",
          "214:   TEST_ENTRY  (timer)",
          "218:   TEST_ENTRY  (timer_again)",
          "220:   TEST_ENTRY  (idle_starvation)",
          "",
          "[Removed Lines]",
          "215:   TEST_ENTRY  (timer_ref)",
          "216:   TEST_ENTRY  (timer_ref2)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "225:   TEST_ENTRY  (prepare_ref)",
          "226:   TEST_ENTRY  (check_ref)",
          "227:   TEST_ENTRY  (unref_in_prepare_cb)",
          "229:   TEST_ENTRY  (loop_handles)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   TEST_ENTRY  (timer_ref)",
          "230:   TEST_ENTRY  (timer_ref2)",
          "231:   TEST_ENTRY  (fs_event_ref)",
          "232:   TEST_ENTRY  (tcp_ref)",
          "233:   TEST_ENTRY  (tcp_ref2)",
          "234:   TEST_ENTRY  (tcp_ref3)",
          "235:   TEST_HELPER (tcp_ref3, tcp4_echo_server)",
          "236:   TEST_ENTRY  (udp_ref)",
          "237:   TEST_ENTRY  (udp_ref2)",
          "238:   TEST_ENTRY  (udp_ref3)",
          "239:   TEST_HELPER (udp_ref3, udp4_echo_server)",
          "240:   TEST_ENTRY  (pipe_ref)",
          "241:   TEST_ENTRY  (pipe_ref2)",
          "242:   TEST_ENTRY  (pipe_ref3)",
          "243:   TEST_HELPER (pipe_ref3, pipe_echo_server)",
          "244:   TEST_ENTRY  (process_ref)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:   TEST_ENTRY  (fs_event_watch_file_current_dir)",
          "285:   TEST_ENTRY  (fs_event_no_callback_on_close)",
          "286:   TEST_ENTRY  (fs_event_immediate_close)",
          "288:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "289:   TEST_ENTRY  (fs_readdir_file)",
          "290:   TEST_ENTRY  (fs_open_dir)",
          "",
          "[Removed Lines]",
          "287:   TEST_ENTRY  (fs_event_unref)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-ref.c||deps/uv/test/test-ref.c": [
          "File: deps/uv/test/test-ref.c -> deps/uv/test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "26: TEST_IMPL(ref) {",
          "27:   uv_run(uv_default_loop());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdlib.h>",
          "26: #include <string.h>",
          "29: static void fail_cb(void) {",
          "30:   FATAL(\"fail_cb should not have been called\");",
          "31: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   uv_run(uv_default_loop());",
          "84:   return 0;",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: TEST_IMPL(timer_ref) {",
          "97:   uv_timer_t h;",
          "98:   uv_timer_init(uv_default_loop(), &h);",
          "99:   uv_unref(uv_default_loop());",
          "100:   uv_run(uv_default_loop());",
          "101:   return 0;",
          "102: }",
          "105: TEST_IMPL(timer_ref2) {",
          "106:   uv_timer_t h;",
          "107:   uv_timer_init(uv_default_loop(), &h);",
          "108:   uv_timer_start(&h, (uv_timer_cb) fail_cb, 42, 42);",
          "109:   uv_unref(uv_default_loop());",
          "110:   uv_run(uv_default_loop());",
          "111:   return 0;",
          "112: }",
          "115: TEST_IMPL(fs_event_ref) {",
          "116:   uv_fs_event_t h;",
          "117:   uv_fs_event_init(uv_default_loop(), &h, \".\", (uv_fs_event_cb) fail_cb, 0);",
          "118:   uv_unref(uv_default_loop());",
          "119:   uv_run(uv_default_loop());",
          "120:   return 0;",
          "121: }",
          "124: TEST_IMPL(tcp_ref) {",
          "125:   uv_tcp_t h;",
          "126:   uv_tcp_init(uv_default_loop(), &h);",
          "127:   uv_unref(uv_default_loop());",
          "128:   uv_run(uv_default_loop());",
          "129:   return 0;",
          "130: }",
          "133: TEST_IMPL(tcp_ref2) {",
          "134:   uv_tcp_t h;",
          "135:   uv_tcp_init(uv_default_loop(), &h);",
          "136:   uv_listen((uv_stream_t*)&h, 128, (uv_connection_cb)fail_cb);",
          "137:   uv_unref(uv_default_loop());",
          "138:   uv_run(uv_default_loop());",
          "139:   return 0;",
          "140: }",
          "143: TEST_IMPL(tcp_ref3) {",
          "144:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "145:   uv_connect_t req;",
          "146:   uv_tcp_t h;",
          "147:   uv_tcp_init(uv_default_loop(), &h);",
          "148:   uv_tcp_connect(&req, &h, addr, (uv_connect_cb)fail_cb);",
          "149:   uv_unref(uv_default_loop());",
          "151:   uv_run(uv_default_loop());",
          "152:   return 0;",
          "153: }",
          "156: TEST_IMPL(udp_ref) {",
          "157:   uv_udp_t h;",
          "158:   uv_udp_init(uv_default_loop(), &h);",
          "159:   uv_unref(uv_default_loop());",
          "160:   uv_run(uv_default_loop());",
          "161:   return 0;",
          "162: }",
          "165: TEST_IMPL(udp_ref2) {",
          "166:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "167:   uv_udp_t h;",
          "168:   uv_udp_init(uv_default_loop(), &h);",
          "169:   uv_udp_bind(&h, addr, 0);",
          "170:   uv_udp_recv_start(&h, (uv_alloc_cb)fail_cb, (uv_udp_recv_cb)fail_cb);",
          "171:   uv_unref(uv_default_loop());",
          "172:   uv_run(uv_default_loop());",
          "173:   return 0;",
          "174: }",
          "177: TEST_IMPL(udp_ref3) {",
          "178:   struct sockaddr_in addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "179:   uv_buf_t buf = uv_buf_init(\"PING\", 4);",
          "180:   uv_udp_send_t req;",
          "181:   uv_udp_t h;",
          "183:   uv_udp_init(uv_default_loop(), &h);",
          "184:   uv_udp_send(&req, &h, &buf, 1, addr, (uv_udp_send_cb)fail_cb);",
          "185:   uv_unref(uv_default_loop());",
          "187:   uv_run(uv_default_loop());",
          "189:   return 0;",
          "190: }",
          "193: TEST_IMPL(pipe_ref) {",
          "194:   uv_pipe_t h;",
          "195:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "196:   uv_unref(uv_default_loop());",
          "197:   uv_run(uv_default_loop());",
          "198:   return 0;",
          "199: }",
          "202: TEST_IMPL(pipe_ref2) {",
          "203:   uv_pipe_t h;",
          "204:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "205:   uv_listen((uv_stream_t*)&h, 128, (uv_connection_cb)fail_cb);",
          "206:   uv_unref(uv_default_loop());",
          "207:   uv_run(uv_default_loop());",
          "208:   return 0;",
          "209: }",
          "212: TEST_IMPL(pipe_ref3) {",
          "213:   uv_connect_t req;",
          "214:   uv_pipe_t h;",
          "215:   uv_pipe_init(uv_default_loop(), &h, 0);",
          "216:   uv_pipe_connect(&req, &h, TEST_PIPENAME, (uv_connect_cb)fail_cb);",
          "217:   uv_unref(uv_default_loop());",
          "219:   uv_run(uv_default_loop());",
          "220:   return 0;",
          "221: }",
          "224: TEST_IMPL(process_ref) {",
          "226:   char *argv[] = { NULL, \"spawn_helper4\", NULL };",
          "227:   uv_process_options_t options;",
          "228:   size_t exepath_size;",
          "229:   char exepath[256];",
          "230:   uv_process_t h;",
          "231:   int r;",
          "233:   memset(&options, 0, sizeof(options));",
          "234:   exepath_size = sizeof(exepath);",
          "236:   r = uv_exepath(exepath, &exepath_size);",
          "237:   ASSERT(r == 0);",
          "239:   argv[0] = exepath;",
          "240:   options.file = exepath;",
          "241:   options.args = argv;",
          "242:   options.exit_cb = NULL;",
          "244:   r = uv_spawn(uv_default_loop(), &h, options);",
          "245:   ASSERT(r == 0);",
          "247:   uv_unref(uv_default_loop());",
          "248:   uv_run(uv_default_loop());",
          "250:   r = uv_process_kill(&h, /* SIGTERM */ 15);",
          "251:   ASSERT(r == 0);",
          "253:   return 0;",
          "254: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tcp-close.c||deps/uv/test/test-tcp-close.c": [
          "File: deps/uv/test/test-tcp-close.c -> deps/uv/test/test-tcp-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   return 0;",
          "129: }",
          "",
          "[Removed Lines]",
          "132: TEST_IMPL(tcp_ref) {",
          "133:   uv_tcp_t never;",
          "134:   int r;",
          "137:   r = uv_tcp_init(uv_default_loop(), &never);",
          "138:   ASSERT(r == 0);",
          "141:   uv_unref(uv_default_loop());",
          "144:   uv_run(uv_default_loop());",
          "146:   return 0;",
          "147: }",
          "150: static void never_cb(uv_connect_t* conn_req, int status) {",
          "151:   FATAL(\"never_cb should never be called\");",
          "152: }",
          "155: TEST_IMPL(tcp_ref2) {",
          "156:   uv_tcp_t never;",
          "157:   int r;",
          "160:   r = uv_tcp_init(uv_default_loop(), &never);",
          "161:   ASSERT(r == 0);",
          "163:   r = uv_tcp_connect(&connect_req,",
          "164:                      &never,",
          "165:                      uv_ip4_addr(\"127.0.0.1\", TEST_PORT),",
          "166:                      never_cb);",
          "167:   ASSERT(r == 0);",
          "170:   uv_unref(uv_default_loop());",
          "173:   uv_run(uv_default_loop());",
          "175:   return 0;",
          "176: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-timer.c||deps/uv/test/test-timer.c": [
          "File: deps/uv/test/test-timer.c -> deps/uv/test/test-timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   return 0;",
          "132: }",
          "",
          "[Removed Lines]",
          "135: TEST_IMPL(timer_ref) {",
          "136:   uv_timer_t never;",
          "137:   int r;",
          "140:   r = uv_timer_init(uv_default_loop(), &never);",
          "141:   ASSERT(r == 0);",
          "144:   uv_unref(uv_default_loop());",
          "147:   uv_run(uv_default_loop());",
          "149:   return 0;",
          "150: }",
          "153: TEST_IMPL(timer_ref2) {",
          "154:   uv_timer_t never;",
          "155:   int r;",
          "158:   r = uv_timer_init(uv_default_loop(), &never);",
          "159:   ASSERT(r == 0);",
          "162:   r = uv_timer_start(&never, never_cb, 1000, 1000);",
          "163:   ASSERT(r == 0);",
          "166:   uv_unref(uv_default_loop());",
          "169:   uv_run(uv_default_loop());",
          "171:   return 0;",
          "172: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0a603a4993e995080a8926fcddbbde752a2136e",
      "candidate_info": {
        "commit_hash": "e0a603a4993e995080a8926fcddbbde752a2136e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e0a603a4993e995080a8926fcddbbde752a2136e",
        "files": [
          "deps/uv/LICENSE",
          "deps/uv/README.md",
          "deps/uv/config-mingw.mk",
          "deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/inet.c",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/thread.c",
          "deps/uv/src/uv-common.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/test/benchmark-udp-packet-storm.c",
          "deps/uv/test/test-hrtime.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-process-title.c",
          "deps/uv/test/test-shutdown-close.c",
          "deps/uv/test/test-tcp-close-while-connecting.c",
          "deps/uv/test/test-tcp-unexpected-read.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: upgrade to 3a8bb3b",
        "before_after_code_files": [
          "deps/uv/config-mingw.mk||deps/uv/config-mingw.mk",
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/inet.c||deps/uv/src/inet.c",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c",
          "deps/uv/src/unix/thread.c||deps/uv/src/unix/thread.c",
          "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/test/benchmark-udp-packet-storm.c||deps/uv/test/benchmark-udp-packet-storm.c",
          "deps/uv/test/test-hrtime.c||deps/uv/test/test-hrtime.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-process-title.c||deps/uv/test/test-process-title.c",
          "deps/uv/test/test-shutdown-close.c||deps/uv/test/test-shutdown-close.c",
          "deps/uv/test/test-tcp-close-while-connecting.c||deps/uv/test/test-tcp-close-while-connecting.c",
          "deps/uv/test/test-tcp-unexpected-read.c||deps/uv/test/test-tcp-unexpected-read.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-mingw.mk||deps/uv/config-mingw.mk": [
          "File: deps/uv/config-mingw.mk -> deps/uv/config-mingw.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: RUNNER_LIBS=-lws2_32 -lpsapi -liphlpapi",
          "38: RUNNER_SRC=test/runner-win.c",
          "41:  $(AR) rcs uv.a $^",
          "43: src/%.o: src/%.c include/uv.h include/uv-private/uv-win.h",
          "",
          "[Removed Lines]",
          "40: uv.a: $(WIN_OBJS) src/cares.o src/fs-poll.o src/uv-common.o $(CARES_OBJS)",
          "",
          "[Added Lines]",
          "40: uv.a: $(WIN_OBJS) src/cares.o src/fs-poll.o src/inet.o src/uv-common.o $(CARES_OBJS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: src/win/%.o: src/win/%.c include/uv.h include/uv-private/uv-win.h src/win/internal.h",
          "47:  $(CC) $(CFLAGS) -o $@ -c $<",
          "53: clean-platform:",
          "54:  -rm -f src/ares/*.o",
          "56:  -rm -f src/win/*.o",
          "58: distclean-platform:",
          "59:  -rm -f src/ares/*.o",
          "61:  -rm -f src/win/*.o",
          "",
          "[Removed Lines]",
          "49: EIO_CPPFLAGS += $(CPPFLAGS)",
          "50: EIO_CPPFLAGS += -DEIO_STACKSIZE=65536",
          "51: EIO_CPPFLAGS += -D_GNU_SOURCE",
          "55:  -rm -f src/eio/*.o",
          "60:  -rm -f src/eio/*.o",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: RUNNER_LIBS=",
          "132: RUNNER_SRC=test/runner-unix.c",
          "135:  $(AR) rcs uv.a $^",
          "137: src/%.o: src/%.c include/uv.h include/uv-private/uv-unix.h",
          "",
          "[Removed Lines]",
          "134: uv.a: $(OBJS) src/cares.o src/fs-poll.o src/uv-common.o src/unix/ev/ev.o src/unix/uv-eio.o src/unix/eio/eio.o $(CARES_OBJS)",
          "",
          "[Added Lines]",
          "134: uv.a: $(OBJS) src/cares.o src/fs-poll.o src/inet.o src/uv-common.o src/unix/ev/ev.o src/unix/uv-eio.o src/unix/eio/eio.o $(CARES_OBJS)",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <termios.h>",
          "41: #include <pwd.h>",
          "44: #include <pthread.h>",
          "45: #include <signal.h>",
          "47: #if __sun",
          "48: # include <sys/port.h>",
          "49: # include <port.h>",
          "",
          "[Removed Lines]",
          "43: #include <semaphore.h>",
          "",
          "[Added Lines]",
          "46: #if defined(__APPLE__) && defined(__MACH__)",
          "47: # include <mach/mach.h>",
          "48: # include <mach/task.h>",
          "49: # include <mach/semaphore.h>",
          "50: #else",
          "51: # include <semaphore.h>",
          "52: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: typedef pthread_t uv_thread_t;",
          "68: typedef pthread_mutex_t uv_mutex_t;",
          "69: typedef pthread_rwlock_t uv_rwlock_t;",
          "70: typedef sem_t uv_sem_t;",
          "73: typedef gid_t uv_gid_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #if defined(__APPLE__) && defined(__MACH__)",
          "78: typedef semaphore_t uv_sem_t;",
          "79: #else",
          "81: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:   int fd; \\",
          "",
          "[Removed Lines]",
          "177: #define UV_TCP_PRIVATE_FIELDS",
          "",
          "[Added Lines]",
          "188: #define UV_TCP_PRIVATE_FIELDS         \\",
          "189:   uv_idle_t* idle_handle;             \\",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   XX( 54, ENOSPC, \"no space left on device\") \\",
          "122:   XX( 55, EIO, \"i/o error\") \\",
          "123:   XX( 56, EROFS, \"read-only file system\" ) \\",
          "127: #define UV_ERRNO_GEN(val, name, s) UV_##name = val,",
          "",
          "[Removed Lines]",
          "124:   XX( 57, ENODEV, \"no such device\" )",
          "",
          "[Added Lines]",
          "124:   XX( 57, ENODEV, \"no such device\" ) \\",
          "125:   XX( 58, ECANCELED, \"operation canceled\" )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1614: UV_EXTERN int uv_ip4_name(struct sockaddr_in* src, char* dst, size_t size);",
          "1615: UV_EXTERN int uv_ip6_name(struct sockaddr_in6* src, char* dst, size_t size);",
          "1618: UV_EXTERN int uv_exepath(char* buffer, size_t* size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1628: uv_err_t uv_inet_ntop(int af, const void* src, char* dst, size_t size);",
          "1629: uv_err_t uv_inet_pton(int af, const char* src, void* dst);",
          "",
          "---------------"
        ],
        "deps/uv/src/inet.c||deps/uv/src/inet.c": [
          "File: deps/uv/src/inet.c -> deps/uv/src/inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <stdio.h>",
          "19: #include <stdint.h>",
          "20: #include <string.h>",
          "22: #include \"uv.h\"",
          "23: #include \"uv-common.h\"",
          "26: static const uv_err_t uv_eafnosupport_ = { UV_EAFNOSUPPORT, 0 };",
          "27: static const uv_err_t uv_enospc_ = { UV_ENOSPC, 0 };",
          "28: static const uv_err_t uv_einval_ = { UV_EINVAL, 0 };",
          "30: static uv_err_t inet_ntop4(const unsigned char *src, char *dst, size_t size);",
          "31: static uv_err_t inet_ntop6(const unsigned char *src, char *dst, size_t size);",
          "32: static uv_err_t inet_pton4(const char *src, unsigned char *dst);",
          "33: static uv_err_t inet_pton6(const char *src, unsigned char *dst);",
          "36: uv_err_t uv_inet_ntop(int af, const void* src, char* dst, size_t size) {",
          "37:   switch (af) {",
          "38:   case AF_INET:",
          "39:     return (inet_ntop4(src, dst, size));",
          "40:   case AF_INET6:",
          "41:     return (inet_ntop6(src, dst, size));",
          "42:   default:",
          "43:     return uv_eafnosupport_;",
          "44:   }",
          "46: }",
          "49: static uv_err_t inet_ntop4(const unsigned char *src, char *dst, size_t size) {",
          "50:   static const char fmt[] = \"%u.%u.%u.%u\";",
          "51:   char tmp[sizeof \"255.255.255.255\"];",
          "52:   size_t l;",
          "54: #ifndef _WIN32",
          "55:   l = snprintf(tmp, sizeof(tmp), fmt, src[0], src[1], src[2], src[3]);",
          "56: #else",
          "57:   l = _snprintf(tmp, sizeof(tmp), fmt, src[0], src[1], src[2], src[3]);",
          "58: #endif",
          "59:   if (l <= 0 || l >= size) {",
          "60:     return uv_enospc_;",
          "61:   }",
          "62:   strncpy(dst, tmp, size);",
          "63:   dst[size - 1] = '\\0';",
          "64:   return uv_ok_;",
          "65: }",
          "68: static uv_err_t inet_ntop6(const unsigned char *src, char *dst, size_t size) {",
          "76:   char tmp[sizeof \"ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255\"], *tp;",
          "77:   struct { int base, len; } best, cur;",
          "78:   unsigned int words[sizeof(struct in6_addr) / sizeof(uint16_t)];",
          "79:   int i;",
          "86:   memset(words, '\\0', sizeof words);",
          "87:   for (i = 0; i < (int) sizeof(struct in6_addr); i++)",
          "88:     words[i / 2] |= (src[i] << ((1 - (i % 2)) << 3));",
          "89:   best.base = -1;",
          "90:   best.len = 0;",
          "91:   cur.base = -1;",
          "92:   cur.len = 0;",
          "93:   for (i = 0; i < (int) ARRAY_SIZE(words); i++) {",
          "94:     if (words[i] == 0) {",
          "95:       if (cur.base == -1)",
          "96:         cur.base = i, cur.len = 1;",
          "97:       else",
          "98:         cur.len++;",
          "99:     } else {",
          "100:       if (cur.base != -1) {",
          "101:         if (best.base == -1 || cur.len > best.len)",
          "102:           best = cur;",
          "103:         cur.base = -1;",
          "104:       }",
          "105:     }",
          "106:   }",
          "107:   if (cur.base != -1) {",
          "108:     if (best.base == -1 || cur.len > best.len)",
          "109:       best = cur;",
          "110:   }",
          "111:   if (best.base != -1 && best.len < 2)",
          "112:     best.base = -1;",
          "117:   tp = tmp;",
          "118:   for (i = 0; i < (int) ARRAY_SIZE(words); i++) {",
          "120:     if (best.base != -1 && i >= best.base &&",
          "121:         i < (best.base + best.len)) {",
          "122:       if (i == best.base)",
          "124:       continue;",
          "125:     }",
          "127:     if (i != 0)",
          "130:     if (i == 6 && best.base == 0 && (best.len == 6 ||",
          "131:         (best.len == 7 && words[7] != 0x0001) ||",
          "132:         (best.len == 5 && words[5] == 0xffff))) {",
          "133:       uv_err_t err = inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp));",
          "134:       if (err.code != UV_OK)",
          "135:         return err;",
          "136:       tp += strlen(tp);",
          "137:       break;",
          "138:     }",
          "139:     tp += sprintf(tp, \"%x\", words[i]);",
          "140:   }",
          "142:   if (best.base != -1 && (best.base + best.len) == ARRAY_SIZE(words))",
          "149:   if ((size_t)(tp - tmp) > size) {",
          "150:     return uv_enospc_;",
          "151:   }",
          "152:   strcpy(dst, tmp);",
          "153:   return uv_ok_;",
          "154: }",
          "157: uv_err_t uv_inet_pton(int af, const char* src, void* dst) {",
          "158:   switch (af) {",
          "159:   case AF_INET:",
          "160:     return (inet_pton4(src, dst));",
          "161:   case AF_INET6:",
          "162:     return (inet_pton6(src, dst));",
          "163:   default:",
          "164:     return uv_eafnosupport_;",
          "165:   }",
          "167: }",
          "170: static uv_err_t inet_pton4(const char *src, unsigned char *dst) {",
          "171:   static const char digits[] = \"0123456789\";",
          "172:   int saw_digit, octets, ch;",
          "173:   unsigned char tmp[sizeof(struct in_addr)], *tp;",
          "175:   saw_digit = 0;",
          "176:   octets = 0;",
          "178:   while ((ch = *src++) != '\\0') {",
          "179:     const char *pch;",
          "181:     if ((pch = strchr(digits, ch)) != NULL) {",
          "182:       unsigned int nw = *tp * 10 + (pch - digits);",
          "184:       if (saw_digit && *tp == 0)",
          "185:         return uv_einval_;",
          "186:       if (nw > 255)",
          "187:         return uv_einval_;",
          "189:       if (!saw_digit) {",
          "190:         if (++octets > 4)",
          "191:           return uv_einval_;",
          "192:         saw_digit = 1;",
          "193:       }",
          "194:     } else if (ch == '.' && saw_digit) {",
          "195:       if (octets == 4)",
          "196:         return uv_einval_;",
          "198:       saw_digit = 0;",
          "199:     } else",
          "200:       return uv_einval_;",
          "201:   }",
          "202:   if (octets < 4)",
          "203:     return uv_einval_;",
          "204:   memcpy(dst, tmp, sizeof(struct in_addr));",
          "205:   return uv_ok_;",
          "206: }",
          "209: static uv_err_t inet_pton6(const char *src, unsigned char *dst) {",
          "210:   static const char xdigits_l[] = \"0123456789abcdef\",",
          "211:                     xdigits_u[] = \"0123456789ABCDEF\";",
          "212:   unsigned char tmp[sizeof(struct in6_addr)], *tp, *endp, *colonp;",
          "213:   const char *xdigits, *curtok;",
          "214:   int ch, seen_xdigits;",
          "215:   unsigned int val;",
          "217:   memset((tp = tmp), '\\0', sizeof tmp);",
          "218:   endp = tp + sizeof tmp;",
          "219:   colonp = NULL;",
          "221:   if (*src == ':')",
          "222:     if (*++src != ':')",
          "223:       return uv_einval_;",
          "224:   curtok = src;",
          "225:   seen_xdigits = 0;",
          "226:   val = 0;",
          "227:   while ((ch = *src++) != '\\0') {",
          "228:     const char *pch;",
          "230:     if ((pch = strchr((xdigits = xdigits_l), ch)) == NULL)",
          "231:       pch = strchr((xdigits = xdigits_u), ch);",
          "232:     if (pch != NULL) {",
          "233:       val <<= 4;",
          "234:       val |= (pch - xdigits);",
          "235:       if (++seen_xdigits > 4)",
          "236:         return uv_einval_;",
          "237:       continue;",
          "238:     }",
          "239:     if (ch == ':') {",
          "240:       curtok = src;",
          "241:       if (!seen_xdigits) {",
          "242:         if (colonp)",
          "243:           return uv_einval_;",
          "244:         colonp = tp;",
          "245:         continue;",
          "246:       } else if (*src == '\\0') {",
          "247:         return uv_einval_;",
          "248:       }",
          "249:       if (tp + sizeof(uint16_t) > endp)",
          "250:         return uv_einval_;",
          "253:       seen_xdigits = 0;",
          "254:       val = 0;",
          "255:       continue;",
          "256:     }",
          "257:     if (ch == '.' && ((tp + sizeof(struct in_addr)) <= endp)) {",
          "258:       uv_err_t err = inet_pton4(curtok, tp);",
          "259:       if (err.code == 0) {",
          "260:         tp += sizeof(struct in_addr);",
          "261:         seen_xdigits = 0;",
          "263:       }",
          "264:     }",
          "265:     return uv_einval_;",
          "266:   }",
          "267:   if (seen_xdigits) {",
          "268:     if (tp + sizeof(uint16_t) > endp)",
          "269:       return uv_einval_;",
          "272:   }",
          "273:   if (colonp != NULL) {",
          "278:     const int n = tp - colonp;",
          "279:     int i;",
          "281:     if (tp == endp)",
          "282:       return uv_einval_;",
          "283:     for (i = 1; i <= n; i++) {",
          "284:       endp[- i] = colonp[n - i];",
          "285:       colonp[n - i] = 0;",
          "286:     }",
          "287:     tp = endp;",
          "288:   }",
          "289:   if (tp != endp)",
          "290:     return uv_einval_;",
          "291:   memcpy(dst, tmp, sizeof tmp);",
          "292:   return uv_ok_;",
          "293: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     break;",
          "71:   case UV_TTY:",
          "73:     uv__stream_close((uv_stream_t*)handle);",
          "74:     break;",
          "76:   case UV_UDP:",
          "77:     uv__udp_close((uv_udp_t*)handle);",
          "78:     break;",
          "",
          "[Removed Lines]",
          "72:   case UV_TCP:",
          "",
          "[Added Lines]",
          "75:   case UV_TCP:",
          "76:     uv__tcp_close((uv_tcp_t*)handle);",
          "77:     break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: static unsigned int uv__poll_timeout(uv_loop_t* loop) {",
          "232:     return 0;",
          "234:   if (!ngx_queue_empty(&loop->idle_handles))",
          "",
          "[Removed Lines]",
          "231:   if (!uv__has_active_handles(loop))",
          "",
          "[Added Lines]",
          "234:   if (!uv__has_active_handles(loop) && !uv__has_active_reqs(loop))",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: uv_err_t uv_set_process_title(const char* title) {",
          "142:   if (process_title) free(process_title);",
          "143:   process_title = strdup(title);",
          "145:   return uv_ok_;",
          "146: }",
          "",
          "[Removed Lines]",
          "144:   setproctitle(title);",
          "",
          "[Added Lines]",
          "142:   int oid[4];",
          "147:   oid[0] = CTL_KERN;",
          "148:   oid[1] = KERN_PROC;",
          "149:   oid[2] = KERN_PROC_ARGS;",
          "150:   oid[3] = getpid();",
          "152:   sysctl(oid,",
          "153:          ARRAY_SIZE(oid),",
          "154:          NULL,",
          "155:          NULL,",
          "156:          process_title,",
          "157:          strlen(process_title) + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     return uv__new_sys_error(ENOMEM);",
          "262:   }",
          "265:     free(cp_times);",
          "266:     free(*cpu_infos);",
          "267:     return uv__new_sys_error(errno);",
          "",
          "[Removed Lines]",
          "264:   if (sysctlbyname(\"kern.cp_times\", &cp_times, &size, NULL, 0) < 0) {",
          "",
          "[Added Lines]",
          "278:   if (sysctlbyname(\"kern.cp_times\", cp_times, &size, NULL, 0) < 0) {",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: void uv__stream_destroy(uv_stream_t* stream);",
          "140: void uv__server_io(uv_loop_t* loop, uv__io_t* watcher, int events);",
          "141: int uv__accept(int sockfd);",
          "146: int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb);",
          "",
          "[Removed Lines]",
          "142: int uv__connect(uv_connect_t* req, uv_stream_t* stream, struct sockaddr* addr,",
          "143:     socklen_t addrlen, uv_connect_cb cb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: void uv__prepare_close(uv_prepare_t* handle);",
          "165: void uv__process_close(uv_process_t* handle);",
          "166: void uv__stream_close(uv_stream_t* handle);",
          "167: void uv__timer_close(uv_timer_t* handle);",
          "168: void uv__udp_close(uv_udp_t* handle);",
          "169: void uv__udp_finish_close(uv_udp_t* handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: void uv__tcp_close(uv_tcp_t* handle);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:                     uv_connect_cb cb) {",
          "171:   struct sockaddr_un saddr;",
          "172:   int saved_errno;",
          "175:   int r;",
          "177:   saved_errno = errno;",
          "186:   memset(&saddr, 0, sizeof saddr);",
          "187:   uv_strlcpy(saddr.sun_path, name, sizeof(saddr.sun_path));",
          "",
          "[Removed Lines]",
          "173:   int sockfd;",
          "174:   int status;",
          "178:   sockfd = -1;",
          "179:   status = -1;",
          "181:   if ((sockfd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {",
          "182:     uv__set_sys_error(handle->loop, errno);",
          "183:     goto out;",
          "184:   }",
          "",
          "[Added Lines]",
          "173:   int new_sock;",
          "174:   int err;",
          "178:   new_sock = (handle->fd == -1);",
          "179:   err = -1;",
          "181:   if (new_sock)",
          "182:     if ((handle->fd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1)",
          "183:       goto out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:   do {",
          "195:   }",
          "196:   while (r == -1 && errno == EINTR);",
          "201:     goto out;",
          "207:   uv__io_start(handle->loop, &handle->read_watcher);",
          "208:   uv__io_start(handle->loop, &handle->write_watcher);",
          "211: out:",
          "213:   handle->connect_req = req;",
          "215:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "",
          "[Removed Lines]",
          "194:     r = connect(sockfd, (struct sockaddr*)&saddr, sizeof saddr);",
          "198:   if (r == -1) {",
          "199:     status = errno;",
          "200:     close(sockfd);",
          "202:   }",
          "204:   uv__stream_open((uv_stream_t*)handle,",
          "205:                   sockfd,",
          "206:                   UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "209:   status = 0;",
          "",
          "[Added Lines]",
          "193:     r = connect(handle->fd, (struct sockaddr*)&saddr, sizeof saddr);",
          "197:   if (r == -1)",
          "200:   if (new_sock)",
          "201:     if (uv__stream_open((uv_stream_t*)handle,",
          "202:                         handle->fd,",
          "203:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE))",
          "204:       goto out;",
          "208:   err = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c": [
          "File: deps/uv/src/unix/stream.c -> deps/uv/src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   if (stream->connect_req) {",
          "122:     uv__req_unregister(stream->loop, stream->connect_req);",
          "124:     stream->connect_req->cb(stream->connect_req, -1);",
          "125:     stream->connect_req = NULL;",
          "126:   }",
          "",
          "[Removed Lines]",
          "123:     uv__set_artificial_error(stream->loop, UV_EINTR);",
          "",
          "[Added Lines]",
          "123:     uv__set_artificial_error(stream->loop, UV_ECANCELED);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:       free(req->bufs);",
          "138:     if (req->cb) {",
          "140:       req->cb(req, -1);",
          "141:     }",
          "142:   }",
          "",
          "[Removed Lines]",
          "139:       uv__set_artificial_error(req->handle->loop, UV_EINTR);",
          "",
          "[Added Lines]",
          "139:       uv__set_artificial_error(req->handle->loop, UV_ECANCELED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:   if (stream->shutdown_req) {",
          "158:     uv__req_unregister(stream->loop, stream->shutdown_req);",
          "160:     stream->shutdown_req->cb(stream->shutdown_req, -1);",
          "161:     stream->shutdown_req = NULL;",
          "162:   }",
          "163: }",
          "166: void uv__server_io(uv_loop_t* loop, uv__io_t* w, int events) {",
          "167:   int fd;",
          "168:   uv_stream_t* stream = container_of(w, uv_stream_t, read_watcher);",
          "",
          "[Removed Lines]",
          "159:     uv__set_artificial_error(stream->loop, UV_EINTR);",
          "",
          "[Added Lines]",
          "159:     uv__set_artificial_error(stream->loop, UV_ECANCELED);",
          "166: static void uv__next_accept(uv_idle_t* idle, int status) {",
          "167:   uv_stream_t* stream = idle->data;",
          "169:   uv_idle_stop(idle);",
          "171:   if (stream->accepted_fd == -1)",
          "172:     uv__io_start(stream->loop, &stream->read_watcher);",
          "173: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:       }",
          "199:     } else {",
          "200:       stream->accepted_fd = fd;",
          "204:         uv__io_stop(stream->loop, &stream->read_watcher);",
          "206:       }",
          "207:     }",
          "208:   }",
          "209: }",
          "",
          "[Removed Lines]",
          "201:       stream->connection_cb((uv_stream_t*)stream, 0);",
          "202:       if (stream->accepted_fd >= 0) {",
          "205:         return;",
          "",
          "[Added Lines]",
          "211:       stream->connection_cb(stream, 0);",
          "213:       if (stream->accepted_fd != -1 ||",
          "214:           (stream->type == UV_TCP && stream->flags == UV_TCP_SINGLE_ACCEPT)) {",
          "217:         break;",
          "222:   if (stream->fd != -1 &&",
          "223:       stream->accepted_fd == -1 &&",
          "224:       (stream->type == UV_TCP && stream->flags == UV_TCP_SINGLE_ACCEPT))",
          "225:   {",
          "246:     uv_tcp_t* tcp = (uv_tcp_t*) stream;",
          "247:     uv_idle_start(tcp->idle_handle, uv__next_accept);",
          "248:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "784:   if (error == EINPROGRESS)",
          "785:     return;",
          "790:   stream->connect_req = NULL;",
          "791:   uv__req_unregister(stream->loop, req);",
          "",
          "[Removed Lines]",
          "787:   if (error == 0)",
          "788:     uv__io_start(stream->loop, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "797: }",
          "859: int uv_write2(uv_write_t* req, uv_stream_t* stream, uv_buf_t bufs[], int bufcnt,",
          "860:     uv_stream_t* send_handle, uv_write_cb cb) {",
          "861:   int empty_queue;",
          "",
          "[Removed Lines]",
          "800: int uv__connect(uv_connect_t* req, uv_stream_t* stream, struct sockaddr* addr,",
          "801:     socklen_t addrlen, uv_connect_cb cb) {",
          "802:   int sockfd;",
          "803:   int r;",
          "805:   if (stream->type != UV_TCP)",
          "806:     return uv__set_sys_error(stream->loop, ENOTSOCK);",
          "808:   if (stream->connect_req)",
          "809:     return uv__set_sys_error(stream->loop, EALREADY);",
          "811:   if (stream->fd <= 0) {",
          "812:     sockfd = uv__socket(addr->sa_family, SOCK_STREAM, 0);",
          "814:     if (sockfd == -1)",
          "815:       return uv__set_sys_error(stream->loop, errno);",
          "817:     if (uv__stream_open(stream,",
          "818:                         sockfd,",
          "819:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE)) {",
          "820:       close(sockfd);",
          "821:       return -1;",
          "822:     }",
          "823:   }",
          "825:   stream->delayed_error = 0;",
          "827:   do",
          "828:     r = connect(stream->fd, addr, addrlen);",
          "829:   while (r == -1 && errno == EINTR);",
          "831:   if (r == -1) {",
          "832:     if (errno == EINPROGRESS)",
          "834:     else if (errno == ECONNREFUSED)",
          "839:       stream->delayed_error = errno;",
          "840:     else",
          "841:       return uv__set_sys_error(stream->loop, errno);",
          "842:   }",
          "844:   uv__req_init(stream->loop, req, UV_CONNECT);",
          "845:   req->cb = cb;",
          "846:   req->handle = stream;",
          "847:   ngx_queue_init(&req->queue);",
          "848:   stream->connect_req = req;",
          "850:   uv__io_start(stream->loop, &stream->write_watcher);",
          "852:   if (stream->delayed_error)",
          "853:     uv__io_feed(stream->loop, &stream->write_watcher, UV__IO_WRITE);",
          "855:   return 0;",
          "856: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: static void uv__fs_event_read(uv_loop_t* loop, uv__io_t* w, int revents) {",
          "131:   timespec_t timeout;",
          "132:   port_event_t pe;",
          "133:   int events;",
          "",
          "[Removed Lines]",
          "130:   uv_fs_event_t *handle;",
          "",
          "[Added Lines]",
          "130:   uv_fs_event_t *handle = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   (void) revents;",
          "139:   do {",
          "141:     do {",
          "142:       memset(&timeout, 0, sizeof timeout);",
          "144:     }",
          "145:     while (r == -1 && errno == EINTR);",
          "148:       break;",
          "150:     handle = (uv_fs_event_t *)pe.portev_user;",
          "",
          "[Removed Lines]",
          "143:       r = port_get(loop->fs_fd, &pe, &timeout);",
          "147:     if (r == -1 && errno == ETIME)",
          "",
          "[Added Lines]",
          "140:     uint_t n = 1;",
          "152:       r = port_getn(loop->fs_fd, &pe, 1, &n, &timeout);",
          "156:     if ((r == -1 && errno == ETIME) || n == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   }",
          "162:   while (handle->fd != PORT_DELETED);",
          "165:     uv__fs_event_rearm(handle);",
          "166: }",
          "",
          "[Removed Lines]",
          "164:   if (handle->fd != PORT_DELETED)",
          "",
          "[Added Lines]",
          "173:   if (handle != NULL && handle->fd != PORT_DELETED)",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c": [
          "File: deps/uv/src/unix/tcp.c -> deps/uv/src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"internal.h\"",
          "25: #include <unistd.h>",
          "26: #include <assert.h>",
          "27: #include <errno.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: int uv_tcp_init(uv_loop_t* loop, uv_tcp_t* tcp) {",
          "31:   uv__stream_init(loop, (uv_stream_t*)tcp, UV_TCP);",
          "32:   loop->counters.tcp_init++;",
          "33:   return 0;",
          "34: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   tcp->idle_handle = NULL;",
          "35:   return 0;",
          "36: }",
          "39: static int maybe_new_socket(uv_tcp_t* handle, int domain, int flags) {",
          "40:   int sockfd;",
          "42:   if (handle->fd != -1)",
          "43:     return 0;",
          "45:   sockfd = uv__socket(domain, SOCK_STREAM, 0);",
          "47:   if (sockfd == -1)",
          "48:     return uv__set_sys_error(handle->loop, errno);",
          "50:   if (uv__stream_open((uv_stream_t*)handle, sockfd, flags)) {",
          "51:     close(sockfd);",
          "52:     return -1;",
          "53:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   saved_errno = errno;",
          "45:   status = -1;",
          "65:   tcp->delayed_error = 0;",
          "66:   if (bind(tcp->fd, addr, addrsize) == -1) {",
          "",
          "[Removed Lines]",
          "47:   if (tcp->fd < 0) {",
          "48:     if ((tcp->fd = uv__socket(domain, SOCK_STREAM, 0)) == -1) {",
          "49:       uv__set_sys_error(tcp->loop, errno);",
          "50:       goto out;",
          "51:     }",
          "53:     if (uv__stream_open((uv_stream_t*)tcp,",
          "54:                         tcp->fd,",
          "55:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE)) {",
          "56:       close(tcp->fd);",
          "57:       tcp->fd = -1;",
          "58:       status = -2;",
          "59:       goto out;",
          "60:     }",
          "61:   }",
          "63:   assert(tcp->fd >= 0);",
          "",
          "[Added Lines]",
          "69:   if (maybe_new_socket(tcp, domain, UV_STREAM_READABLE|UV_STREAM_WRITABLE))",
          "70:     return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79: }",
          "82: int uv__tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr) {",
          "83:   return uv__bind(handle,",
          "84:                   AF_INET,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: static int uv__connect(uv_connect_t* req,",
          "90:                        uv_tcp_t* handle,",
          "91:                        struct sockaddr* addr,",
          "92:                        socklen_t addrlen,",
          "93:                        uv_connect_cb cb) {",
          "94:   int r;",
          "96:   assert(handle->type == UV_TCP);",
          "98:   if (handle->connect_req)",
          "99:     return uv__set_sys_error(handle->loop, EALREADY);",
          "101:   if (maybe_new_socket(handle,",
          "102:                        addr->sa_family,",
          "103:                        UV_STREAM_READABLE|UV_STREAM_WRITABLE)) {",
          "104:     return -1;",
          "105:   }",
          "107:   handle->delayed_error = 0;",
          "109:   do",
          "110:     r = connect(handle->fd, addr, addrlen);",
          "111:   while (r == -1 && errno == EINTR);",
          "113:   if (r == -1) {",
          "114:     if (errno == EINPROGRESS)",
          "116:     else if (errno == ECONNREFUSED)",
          "121:       handle->delayed_error = errno;",
          "122:     else",
          "123:       return uv__set_sys_error(handle->loop, errno);",
          "124:   }",
          "126:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "127:   req->cb = cb;",
          "128:   req->handle = (uv_stream_t*) handle;",
          "129:   ngx_queue_init(&req->queue);",
          "130:   handle->connect_req = req;",
          "132:   uv__io_start(handle->loop, &handle->write_watcher);",
          "134:   if (handle->delayed_error)",
          "135:     uv__io_feed(handle->loop, &handle->write_watcher, UV__IO_WRITE);",
          "137:   return 0;",
          "138: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172: int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb) {",
          "178:   }",
          "198:     return -1;",
          "201:   tcp->connection_cb = cb;",
          "",
          "[Removed Lines]",
          "173:   int r;",
          "175:   if (tcp->delayed_error) {",
          "176:     uv__set_sys_error(tcp->loop, tcp->delayed_error);",
          "177:     return -1;",
          "180:   if (tcp->fd < 0) {",
          "181:     if ((tcp->fd = uv__socket(AF_INET, SOCK_STREAM, 0)) == -1) {",
          "182:       uv__set_sys_error(tcp->loop, errno);",
          "183:       return -1;",
          "184:     }",
          "186:     if (uv__stream_open((uv_stream_t*)tcp, tcp->fd, UV_STREAM_READABLE)) {",
          "187:       close(tcp->fd);",
          "188:       tcp->fd = -1;",
          "189:       return -1;",
          "190:     }",
          "191:   }",
          "193:   assert(tcp->fd >= 0);",
          "195:   r = listen(tcp->fd, backlog);",
          "196:   if (r < 0) {",
          "197:     uv__set_sys_error(tcp->loop, errno);",
          "199:   }",
          "",
          "[Added Lines]",
          "232:   static int single_accept = -1;",
          "234:   if (tcp->delayed_error)",
          "235:     return uv__set_sys_error(tcp->loop, tcp->delayed_error);",
          "237:   if (single_accept == -1) {",
          "238:     const char* val = getenv(\"UV_TCP_SINGLE_ACCEPT\");",
          "242:   if (!single_accept)",
          "243:     goto no_single_accept;",
          "245:   tcp->idle_handle = malloc(sizeof(*tcp->idle_handle));",
          "246:   if (tcp->idle_handle == NULL)",
          "247:     return uv__set_sys_error(tcp->loop, ENOMEM);",
          "249:   if (uv_idle_init(tcp->loop, tcp->idle_handle))",
          "250:     abort();",
          "252:   tcp->flags |= UV_TCP_SINGLE_ACCEPT;",
          "254: no_single_accept:",
          "255:   if (maybe_new_socket(tcp, AF_INET, UV_STREAM_READABLE))",
          "258:   if (listen(tcp->fd, backlog))",
          "259:     return uv__set_sys_error(tcp->loop, errno);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211: int uv__tcp_connect(uv_connect_t* req,",
          "216:   int status;",
          "224:   errno = saved_errno;",
          "225:   return status;",
          "226: }",
          "229: int uv__tcp_connect6(uv_connect_t* req,",
          "234:   int status;",
          "242:   errno = saved_errno;",
          "243:   return status;",
          "244: }",
          "",
          "[Removed Lines]",
          "212:                    uv_tcp_t* handle,",
          "213:                    struct sockaddr_in address,",
          "214:                    uv_connect_cb cb) {",
          "215:   int saved_errno = errno;",
          "218:   status = uv__connect(req,",
          "219:                        (uv_stream_t*)handle,",
          "220:                        (struct sockaddr*)&address,",
          "221:                        sizeof address,",
          "222:                        cb);",
          "230:                     uv_tcp_t* handle,",
          "231:                     struct sockaddr_in6 address,",
          "232:                     uv_connect_cb cb) {",
          "233:   int saved_errno = errno;",
          "236:   status = uv__connect(req,",
          "237:                        (uv_stream_t*)handle,",
          "238:                        (struct sockaddr*)&address,",
          "239:                        sizeof address,",
          "240:                        cb);",
          "",
          "[Added Lines]",
          "272:                     uv_tcp_t* handle,",
          "273:                     struct sockaddr_in addr,",
          "274:                     uv_connect_cb cb) {",
          "275:   int saved_errno;",
          "278:   saved_errno = errno;",
          "279:   status = uv__connect(req, handle, (struct sockaddr*)&addr, sizeof addr, cb);",
          "287:                      uv_tcp_t* handle,",
          "288:                      struct sockaddr_in6 addr,",
          "289:                      uv_connect_cb cb) {",
          "290:   int saved_errno;",
          "293:   saved_errno = errno;",
          "294:   status = uv__connect(req, handle, (struct sockaddr*)&addr, sizeof addr, cb);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326: int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable) {",
          "327:   return 0;",
          "328: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   if (enable)",
          "382:     handle->flags |= UV_TCP_SINGLE_ACCEPT;",
          "383:   else",
          "384:     handle->flags &= ~UV_TCP_SINGLE_ACCEPT;",
          "389: void uv__tcp_close(uv_tcp_t* handle) {",
          "390:   if (handle->idle_handle)",
          "391:     uv_close((uv_handle_t*)handle->idle_handle, (uv_close_cb)free);",
          "393:   uv__stream_close((uv_stream_t*)handle);",
          "394: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/thread.c||deps/uv/src/unix/thread.c": [
          "File: deps/uv/src/unix/thread.c -> deps/uv/src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     abort();",
          "168: }",
          "171: int uv_sem_init(uv_sem_t* sem, unsigned int value) {",
          "172:   return sem_init(sem, 0, value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: #if defined(__APPLE__) && defined(__MACH__)",
          "172: int uv_sem_init(uv_sem_t* sem, unsigned int value) {",
          "173:   return semaphore_create(mach_task_self(), sem, SYNC_POLICY_FIFO, value);",
          "174: }",
          "177: void uv_sem_destroy(uv_sem_t* sem) {",
          "178:   if (semaphore_destroy(mach_task_self(), *sem))",
          "179:     abort();",
          "180: }",
          "183: void uv_sem_post(uv_sem_t* sem) {",
          "184:   if (semaphore_signal(*sem))",
          "185:     abort();",
          "186: }",
          "189: void uv_sem_wait(uv_sem_t* sem) {",
          "190:   if (semaphore_wait(*sem))",
          "191:     abort();",
          "192: }",
          "195: int uv_sem_trywait(uv_sem_t* sem) {",
          "196:   mach_timespec_t interval;",
          "198:   interval.tv_sec = 0;",
          "199:   interval.tv_nsec = 0;",
          "201:   if (semaphore_timedwait(*sem, interval) == KERN_SUCCESS)",
          "202:     return 0;",
          "203:   else",
          "204:     return -1;",
          "205: }",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c": [
          "File: deps/uv/src/uv-common.c -> deps/uv/src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define XX(uc, lc) case UV_##uc: return sizeof(uv_##lc##_t);",
          "",
          "[Removed Lines]",
          "32: #include \"ares_config.h\"",
          "33: #include \"ares/inet_net_pton.h\"",
          "34: #include \"ares/inet_ntop.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   addr.sin6_family = AF_INET6;",
          "184:   addr.sin6_port = htons(port);",
          "187:   return addr;",
          "188: }",
          "191: int uv_ip4_name(struct sockaddr_in* src, char* dst, size_t size) {",
          "194: }",
          "197: int uv_ip6_name(struct sockaddr_in6* src, char* dst, size_t size) {",
          "200: }",
          "",
          "[Removed Lines]",
          "185:   ares_inet_pton(AF_INET6, ip, &addr.sin6_addr);",
          "192:   const char* d = ares_inet_ntop(AF_INET, &src->sin_addr, dst, size);",
          "193:   return d != dst;",
          "198:   const char* d = ares_inet_ntop(AF_INET6, &src->sin6_addr, dst, size);",
          "199:   return d != dst;",
          "",
          "[Added Lines]",
          "181:   uv_inet_pton(AF_INET6, ip, &addr.sin6_addr);",
          "188:   uv_err_t err = uv_inet_ntop(AF_INET, &src->sin_addr, dst, size);",
          "189:   return err.code != UV_OK;",
          "194:   uv_err_t err = uv_inet_ntop(AF_INET6, &src->sin6_addr, dst, size);",
          "195:   return err.code != UV_OK;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     case ERROR_INVALID_REPARSE_DATA:        return UV_ENOENT;",
          "87:     case ERROR_MOD_NOT_FOUND:               return UV_ENOENT;",
          "88:     case ERROR_PATH_NOT_FOUND:              return UV_ENOENT;",
          "89:     case ERROR_ACCESS_DENIED:               return UV_EPERM;",
          "90:     case ERROR_PRIVILEGE_NOT_HELD:          return UV_EPERM;",
          "91:     case ERROR_NOACCESS:                    return UV_EACCES;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     case WSANO_DATA:                        return UV_ENOENT;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:       if (req->cb) {",
          "304:         req->cb(req, -1);",
          "305:       }",
          "",
          "[Removed Lines]",
          "303:         uv__set_sys_error(loop, WSAEINTR);",
          "",
          "[Added Lines]",
          "303:         uv__set_artificial_error(loop, UV_ECANCELED);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: void uv_tcp_endgame(uv_loop_t* loop, uv_tcp_t* handle) {",
          "159:   int status;",
          "161:   unsigned int i;",
          "162:   uv_tcp_accept_t* req;",
          "",
          "[Removed Lines]",
          "160:   int sys_error;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     if (handle->flags & UV_HANDLE_CLOSING) {",
          "171:       status = -1;",
          "173:     } else if (shutdown(handle->socket, SD_SEND) != SOCKET_ERROR) {",
          "174:       status = 0;",
          "175:       handle->flags |= UV_HANDLE_SHUT;",
          "176:     } else {",
          "177:       status = -1;",
          "179:     }",
          "181:     if (handle->shutdown_req->cb) {",
          "185:       handle->shutdown_req->cb(handle->shutdown_req, status);",
          "186:     }",
          "",
          "[Removed Lines]",
          "172:       sys_error = WSAEINTR;",
          "178:       sys_error = WSAGetLastError();",
          "182:       if (status == -1) {",
          "183:         uv__set_sys_error(loop, sys_error);",
          "184:       }",
          "",
          "[Added Lines]",
          "171:       uv__set_artificial_error(loop, UV_ECANCELED);",
          "177:       uv__set_sys_error(loop, WSAGetLastError());",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1752:     if (handle->shutdown_req->cb) {",
          "1753:       if (handle->flags & UV_HANDLE_CLOSING) {",
          "1755:         handle->shutdown_req->cb(handle->shutdown_req, -1);",
          "1756:       } else {",
          "1757:         handle->shutdown_req->cb(handle->shutdown_req, 0);",
          "",
          "[Removed Lines]",
          "1754:         uv__set_sys_error(loop, WSAEINTR);",
          "",
          "[Added Lines]",
          "1754:         uv__set_artificial_error(loop, UV_ECANCELED);",
          "",
          "---------------"
        ],
        "deps/uv/test/benchmark-udp-packet-storm.c||deps/uv/test/benchmark-udp-packet-storm.c": [
          "File: deps/uv/test/benchmark-udp-packet-storm.c -> deps/uv/test/benchmark-udp-packet-storm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return;",
          "93:   if (nread == -1) {",
          "95:     return;",
          "96:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     ASSERT(uv_last_error(loop).code == UV_ECANCELED);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-hrtime.c||deps/uv/test/test-hrtime.c": [
          "File: deps/uv/test/test-hrtime.c -> deps/uv/test/test-hrtime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     ASSERT(diff > (uint64_t) 25 * NANOSEC / MILLISEC);",
          "51:     --i;",
          "52:   }",
          "53:   return 0;",
          "",
          "[Removed Lines]",
          "50:     ASSERT(diff < (uint64_t) 60 * NANOSEC / MILLISEC);",
          "",
          "[Added Lines]",
          "50:     ASSERT(diff < (uint64_t) 80 * NANOSEC / MILLISEC);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: TEST_DECLARE   (tcp_flags)",
          "57: TEST_DECLARE   (tcp_write_error)",
          "58: TEST_DECLARE   (tcp_write_to_half_open_connection)",
          "59: TEST_DECLARE   (tcp_bind6_error_addrinuse)",
          "60: TEST_DECLARE   (tcp_bind6_error_addrnotavail)",
          "61: TEST_DECLARE   (tcp_bind6_error_fault)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: TEST_DECLARE   (tcp_unexpected_read)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:   TEST_ENTRY  (tcp_flags)",
          "253:   TEST_ENTRY  (tcp_write_error)",
          "254:   TEST_ENTRY  (tcp_write_to_half_open_connection)",
          "256:   TEST_ENTRY  (tcp_bind6_error_addrinuse)",
          "257:   TEST_ENTRY  (tcp_bind6_error_addrnotavail)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:   TEST_ENTRY  (tcp_unexpected_read)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-process-title.c||deps/uv/test/test-process-title.c": [
          "File: deps/uv/test/test-process-title.c -> deps/uv/test/test-process-title.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "24: #include <string.h>",
          "27:   char buffer[512];",
          "28:   uv_err_t err;",
          "30:   err = uv_get_process_title(buffer, sizeof(buffer));",
          "31:   ASSERT(UV_OK == err.code);",
          "34:   ASSERT(UV_OK == err.code);",
          "36:   err = uv_get_process_title(buffer, sizeof(buffer));",
          "37:   ASSERT(UV_OK == err.code);",
          "41:   return 0;",
          "42: }",
          "",
          "[Removed Lines]",
          "26: TEST_IMPL(process_title) {",
          "33:   err = uv_set_process_title(\"new title\");",
          "39:   ASSERT(strcmp(buffer, \"new title\") == 0);",
          "",
          "[Added Lines]",
          "27: static void set_title(const char* title) {",
          "34:   err = uv_set_process_title(title);",
          "40:   ASSERT(strcmp(buffer, title) == 0);",
          "41: }",
          "44: TEST_IMPL(process_title) {",
          "46:   set_title(\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\");",
          "47:   set_title(\"new title\");",
          "",
          "---------------"
        ],
        "deps/uv/test/test-shutdown-close.c||deps/uv/test/test-shutdown-close.c": [
          "File: deps/uv/test/test-shutdown-close.c -> deps/uv/test/test-shutdown-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: static void shutdown_cb(uv_shutdown_t* req, int status) {",
          "40:   ASSERT(req == &shutdown_req);",
          "43:   shutdown_cb_called++;",
          "44: }",
          "",
          "[Removed Lines]",
          "41:   ASSERT(status == 0 ||",
          "42:          (status == -1 && uv_last_error(uv_default_loop()).code == UV_EINTR));",
          "",
          "[Added Lines]",
          "40:   int err = uv_last_error(uv_default_loop()).code;",
          "42:   ASSERT(status == 0 || (status == -1 && err == UV_ECANCELED));",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tcp-close-while-connecting.c||deps/uv/test/test-tcp-close-while-connecting.c": [
          "File: deps/uv/test/test-tcp-close-while-connecting.c -> deps/uv/test/test-tcp-close-while-connecting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: static void connect_cb(uv_connect_t* req, int status) {",
          "40:   ASSERT(status == -1);",
          "42:   uv_timer_stop(&timer2_handle);",
          "43:   connect_cb_called++;",
          "44: }",
          "",
          "[Removed Lines]",
          "41:   ASSERT(uv_last_error(req->handle->loop).code == UV_EINTR);",
          "",
          "[Added Lines]",
          "41:   ASSERT(uv_last_error(req->handle->loop).code == UV_ECANCELED);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tcp-unexpected-read.c||deps/uv/test/test-tcp-unexpected-read.c": [
          "File: deps/uv/test/test-tcp-unexpected-read.c -> deps/uv/test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: static uv_buf_t alloc_cb(uv_handle_t* handle, size_t suggested_size) {",
          "51:   ASSERT(0 && \"alloc_cb should not have been called\");",
          "52: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   return uv_buf_init(NULL, 0);",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         'include/uv-private/tree.h',",
          "53:         'src/cares.c',",
          "54:         'src/fs-poll.c',",
          "55:         'src/uv-common.c',",
          "56:         'src/uv-common.h',",
          "57:         'src/ares/ares_cancel.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         'src/inet.c',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:         'test/test-tcp-write-error.c',",
          "359:         'test/test-tcp-write-to-half-open-connection.c',",
          "360:         'test/test-tcp-writealot.c',",
          "361:         'test/test-threadpool.c',",
          "362:         'test/test-mutexes.c',",
          "363:         'test/test-thread.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:         'test/test-tcp-unexpected-read.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23f09d7e024f326ea0466af10b97ad46e76ac5e6",
      "candidate_info": {
        "commit_hash": "23f09d7e024f326ea0466af10b97ad46e76ac5e6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/23f09d7e024f326ea0466af10b97ad46e76ac5e6",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: fix readFileSync(\"/proc/cpuinfo\") regression\n\nDon't use positional reads. Not all proc files support pread(), especially on\nolder linux kernels.\n\nFixes #3808.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     var threw = true;",
          "206:     try {",
          "207:       if (size !== 0) {",
          "209:       } else {",
          "212:         buffer = new Buffer(8192);",
          "214:         if (bytesRead) {",
          "215:           buffers.push(buffer.slice(0, bytesRead));",
          "216:         }",
          "",
          "[Removed Lines]",
          "208:         var bytesRead = fs.readSync(fd, buffer, pos, size - pos, pos);",
          "213:         var bytesRead = fs.readSync(fd, buffer, 0, 8192, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}