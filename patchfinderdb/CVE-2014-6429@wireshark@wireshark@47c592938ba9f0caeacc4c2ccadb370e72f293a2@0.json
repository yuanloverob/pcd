{
  "cve_id": "CVE-2014-6429",
  "cve_desc": "The SnifferDecompress function in wiretap/ngsniffer.c in the DOS Sniffer file parser in Wireshark 1.10.x before 1.10.10 and 1.12.x before 1.12.1 does not properly handle empty input data, which allows remote attackers to cause a denial of service (application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "47c592938ba9f0caeacc4c2ccadb370e72f293a2",
  "patch_info": {
    "commit_hash": "47c592938ba9f0caeacc4c2ccadb370e72f293a2",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/47c592938ba9f0caeacc4c2ccadb370e72f293a2",
    "files": [
      "wiretap/ngsniffer.c"
    ],
    "message": "Add some additional checks in SnifferDecompress().\n\nCheck the input pointer in the while clause of the loop, so that we\nhandle an empty input buffer.\n\nWhen reading a bit mask, check before fetching the bit mask that we have\ntwo bytes of bit mask and the byte after it.\n\nBefore putting an uncompressed input byte into the output, make sure we\nwouldn't run past the end of the output buffer.\n\nBefore copying an earlier string from the output buffer, make sure it\ndoesn't run past the end of the data we've decompressed so far.\n\nBug: 10461\nChange-Id: I8bb8d0d291368ae8bf0ac26970ff54d3262a7e6e\nReviewed-on: https://code.wireshark.org/review/4083\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
    ]
  },
  "patch_diff": {
    "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
      "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2242:  }",
      "2246:  {",
      "2248:   bit_mask = bit_mask >> 1;",
      "",
      "[Removed Lines]",
      "2245:  while (1)",
      "",
      "[Added Lines]",
      "2246:  while (pin < pin_end)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2251:   if ( 0 == bit_mask )",
      "2252:   {",
      "2257:    {",
      "2259:     return ( -1 );",
      "2260:    }",
      "2261:   }",
      "2264:   if ( !(bit_mask & bit_value) )",
      "2265:   {",
      "2268:   }",
      "2269:   else",
      "",
      "[Removed Lines]",
      "2256:    if ( pin >= pin_end )",
      "",
      "[Added Lines]",
      "2255:       available - the two bytes of the bit value,",
      "2257:    if ( pin + 2 >= pin_end )",
      "2273:    if ( pout + 1 > pout_end )",
      "2274:    {",
      "2276:     return ( -1 );",
      "2277:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2359:      return ( -1 );",
      "2360:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2373:     if ( pout - offset + length > pout )",
      "2374:     {",
      "2376:      return ( -1 );",
      "2377:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2388:      return ( -1 );",
      "2389:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2408:     if ( pout - offset + length > pout )",
      "2409:     {",
      "2411:      return ( -1 );",
      "2412:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2395:     break;",
      "2396:    }",
      "2397:   }",
      "2402:  }",
      "",
      "[Removed Lines]",
      "2400:   if ( pin >= pin_end )",
      "2401:    break;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c15f686838866b736b807d0dd5902d07952e58d5",
      "candidate_info": {
        "commit_hash": "c15f686838866b736b807d0dd5902d07952e58d5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c15f686838866b736b807d0dd5902d07952e58d5",
        "files": [
          "wiretap/ngsniffer.c"
        ],
        "message": "Add some additional checks in SnifferDecompress().\n\nCheck the input pointer in the while clause of the loop, so that we\nhandle an empty input buffer.\n\nWhen reading a bit mask, check before fetching the bit mask that we have\ntwo bytes of bit mask and the byte after it.\n\nBefore putting an uncompressed input byte into the output, make sure we\nwouldn't run past the end of the output buffer.\n\nBefore copying an earlier string from the output buffer, make sure it\ndoesn't run past the end of the data we've decompressed so far.\n\nConflicts:\n\twiretap/ngsniffer.c\n\nBug: 10461\nChange-Id: I8bb8d0d291368ae8bf0ac26970ff54d3262a7e6e\nReviewed-on: https://code.wireshark.org/review/4083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 47c592938ba9f0caeacc4c2ccadb370e72f293a2)\nReviewed-on: https://code.wireshark.org/review/4085\nReviewed-on: https://code.wireshark.org/review/4438\nReviewed-by: Evan Huus <eapache@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ],
          "candidate": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
          "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2225:    }",
          "2229:    {",
          "2231:       bit_mask = bit_mask >> 1;",
          "",
          "[Removed Lines]",
          "2228:    while (1)",
          "",
          "[Added Lines]",
          "2229:    while (pin < pin_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2234:       if ( 0 == bit_mask )",
          "2235:       {",
          "2240:          {",
          "2242:             return ( -1 );",
          "2243:          }",
          "2244:       }",
          "2247:       if ( !(bit_mask & bit_value) )",
          "2248:       {",
          "2251:       }",
          "2252:       else",
          "",
          "[Removed Lines]",
          "2239:          if ( pin >= pin_end )",
          "",
          "[Added Lines]",
          "2238:             available - the two bytes of the bit value,",
          "2240:          if ( pin + 2 >= pin_end )",
          "2256:             if ( pout + 1 > pout_end )",
          "2257:             {",
          "2259:                 return ( -1 );",
          "2260:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2342:                     return ( -1 );",
          "2343:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2356:                 if ( pout - offset + length > pout )",
          "2357:                 {",
          "2359:                     return ( -1 );",
          "2360:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2371:                     return ( -1 );",
          "2372:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2391:                 if ( pout - offset + length > pout )",
          "2392:                 {",
          "2394:                     return ( -1 );",
          "2395:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2378:                 break;",
          "2379:          }",
          "2380:       }",
          "2385:    }",
          "",
          "[Removed Lines]",
          "2383:       if ( pin >= pin_end )",
          "2384:          break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdff35463796eef5965cfbb47d8f005b042ca24",
      "candidate_info": {
        "commit_hash": "dbdff35463796eef5965cfbb47d8f005b042ca24",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/dbdff35463796eef5965cfbb47d8f005b042ca24",
        "files": [
          "wiretap/ngsniffer.c"
        ],
        "message": "Add some additional checks in SnifferDecompress().\n\nCheck the input pointer in the while clause of the loop, so that we\nhandle an empty input buffer.\n\nWhen reading a bit mask, check before fetching the bit mask that we have\ntwo bytes of bit mask and the byte after it.\n\nBefore putting an uncompressed input byte into the output, make sure we\nwouldn't run past the end of the output buffer.\n\nBefore copying an earlier string from the output buffer, make sure it\ndoesn't run past the end of the data we've decompressed so far.\n\nBug: 10461\nChange-Id: I8bb8d0d291368ae8bf0ac26970ff54d3262a7e6e\nReviewed-on: https://code.wireshark.org/review/4083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 47c592938ba9f0caeacc4c2ccadb370e72f293a2)\nReviewed-on: https://code.wireshark.org/review/4085\nReviewed-on: https://code.wireshark.org/review/4427\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ],
          "candidate": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
          "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2270:  }",
          "2274:  {",
          "2276:   bit_mask = bit_mask >> 1;",
          "",
          "[Removed Lines]",
          "2273:  while (1)",
          "",
          "[Added Lines]",
          "2274:  while (pin < pin_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2279:   if ( 0 == bit_mask )",
          "2280:   {",
          "2285:    {",
          "2287:     return ( -1 );",
          "2288:    }",
          "2289:   }",
          "2292:   if ( !(bit_mask & bit_value) )",
          "2293:   {",
          "2296:   }",
          "2297:   else",
          "",
          "[Removed Lines]",
          "2284:    if ( pin >= pin_end )",
          "",
          "[Added Lines]",
          "2283:       available - the two bytes of the bit value,",
          "2285:    if ( pin + 2 >= pin_end )",
          "2301:    if ( pout + 1 > pout_end )",
          "2302:    {",
          "2304:     return ( -1 );",
          "2305:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2387:      return ( -1 );",
          "2388:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2401:     if ( pout - offset + length > pout )",
          "2402:     {",
          "2404:      return ( -1 );",
          "2405:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2416:      return ( -1 );",
          "2417:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2436:     if ( pout - offset + length > pout )",
          "2437:     {",
          "2439:      return ( -1 );",
          "2440:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2423:     break;",
          "2424:    }",
          "2425:   }",
          "2430:  }",
          "",
          "[Removed Lines]",
          "2428:   if ( pin >= pin_end )",
          "2429:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a7abcc0f18a9a66c131ff62004ec3e674997531",
      "candidate_info": {
        "commit_hash": "9a7abcc0f18a9a66c131ff62004ec3e674997531",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9a7abcc0f18a9a66c131ff62004ec3e674997531",
        "files": [
          "wiretap/ngsniffer.c"
        ],
        "message": "Add some additional checks in SnifferDecompress().\n\nCheck the input pointer in the while clause of the loop, so that we\nhandle an empty input buffer.\n\nWhen reading a bit mask, check before fetching the bit mask that we have\ntwo bytes of bit mask and the byte after it.\n\nBefore putting an uncompressed input byte into the output, make sure we\nwouldn't run past the end of the output buffer.\n\nBefore copying an earlier string from the output buffer, make sure it\ndoesn't run past the end of the data we've decompressed so far.\n\nBug: 10461\nChange-Id: I8bb8d0d291368ae8bf0ac26970ff54d3262a7e6e\nReviewed-on: https://code.wireshark.org/review/4083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 47c592938ba9f0caeacc4c2ccadb370e72f293a2)\nReviewed-on: https://code.wireshark.org/review/4085",
        "before_after_code_files": [
          "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ],
          "candidate": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
          "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2288:  }",
          "2292:  {",
          "2294:   bit_mask = bit_mask >> 1;",
          "",
          "[Removed Lines]",
          "2291:  while (1)",
          "",
          "[Added Lines]",
          "2292:  while (pin < pin_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2297:   if ( 0 == bit_mask )",
          "2298:   {",
          "2303:    {",
          "2305:     return ( -1 );",
          "2306:    }",
          "2307:   }",
          "2310:   if ( !(bit_mask & bit_value) )",
          "2311:   {",
          "2314:   }",
          "2315:   else",
          "",
          "[Removed Lines]",
          "2302:    if ( pin >= pin_end )",
          "",
          "[Added Lines]",
          "2301:       available - the two bytes of the bit value,",
          "2303:    if ( pin + 2 >= pin_end )",
          "2319:    if ( pout + 1 > pout_end )",
          "2320:    {",
          "2322:     return ( -1 );",
          "2323:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2405:      return ( -1 );",
          "2406:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2419:     if ( pout - offset + length > pout )",
          "2420:     {",
          "2422:      return ( -1 );",
          "2423:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2434:      return ( -1 );",
          "2435:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2454:     if ( pout - offset + length > pout )",
          "2455:     {",
          "2457:      return ( -1 );",
          "2458:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2441:     break;",
          "2442:    }",
          "2443:   }",
          "2448:  }",
          "",
          "[Removed Lines]",
          "2446:   if ( pin >= pin_end )",
          "2447:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4413725c05bccc9ff3425e4910f4ed85b3a1ac31",
      "candidate_info": {
        "commit_hash": "4413725c05bccc9ff3425e4910f4ed85b3a1ac31",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4413725c05bccc9ff3425e4910f4ed85b3a1ac31",
        "files": [
          "wiretap/ngsniffer.c"
        ],
        "message": "Add some additional checks in SnifferDecompress().\n\nCheck the input pointer in the while clause of the loop, so that we\nhandle an empty input buffer.\n\nWhen reading a bit mask, check before fetching the bit mask that we have\ntwo bytes of bit mask and the byte after it.\n\nBefore putting an uncompressed input byte into the output, make sure we\nwouldn't run past the end of the output buffer.\n\nBefore copying an earlier string from the output buffer, make sure it\ndoesn't run past the end of the data we've decompressed so far.\n\nBug: 10461\nChange-Id: I8bb8d0d291368ae8bf0ac26970ff54d3262a7e6e\nReviewed-on: https://code.wireshark.org/review/4083\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 47c592938ba9f0caeacc4c2ccadb370e72f293a2)\nReviewed-on: https://code.wireshark.org/review/4084",
        "before_after_code_files": [
          "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ],
          "candidate": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
          "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2242:  }",
          "2246:  {",
          "2248:   bit_mask = bit_mask >> 1;",
          "",
          "[Removed Lines]",
          "2245:  while (1)",
          "",
          "[Added Lines]",
          "2246:  while (pin < pin_end)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2251:   if ( 0 == bit_mask )",
          "2252:   {",
          "2257:    {",
          "2259:     return ( -1 );",
          "2260:    }",
          "2261:   }",
          "2264:   if ( !(bit_mask & bit_value) )",
          "2265:   {",
          "2268:   }",
          "2269:   else",
          "",
          "[Removed Lines]",
          "2256:    if ( pin >= pin_end )",
          "",
          "[Added Lines]",
          "2255:       available - the two bytes of the bit value,",
          "2257:    if ( pin + 2 >= pin_end )",
          "2273:    if ( pout + 1 > pout_end )",
          "2274:    {",
          "2276:     return ( -1 );",
          "2277:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2359:      return ( -1 );",
          "2360:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2373:     if ( pout - offset + length > pout )",
          "2374:     {",
          "2376:      return ( -1 );",
          "2377:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2388:      return ( -1 );",
          "2389:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2408:     if ( pout - offset + length > pout )",
          "2409:     {",
          "2411:      return ( -1 );",
          "2412:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2395:     break;",
          "2396:    }",
          "2397:   }",
          "2402:  }",
          "",
          "[Removed Lines]",
          "2400:   if ( pin >= pin_end )",
          "2401:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7d6321d2d2662c702327750c2a02a65e9fec5eb",
      "candidate_info": {
        "commit_hash": "a7d6321d2d2662c702327750c2a02a65e9fec5eb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a7d6321d2d2662c702327750c2a02a65e9fec5eb",
        "files": [
          "wiretap/ngsniffer.c"
        ],
        "message": "Use some macros to clean up the Snifer decompression code.\n\nFor code that's used in more than one place, use macros.  This combines\na bunch of checks into the output macros.\n\nChange-Id: Ic32dce75e1c531fd28bfed180856e230277bfe58\nReviewed-on: https://code.wireshark.org/review/4451\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ],
          "candidate": [
            "wiretap/ngsniffer.c||wiretap/ngsniffer.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ngsniffer.c||wiretap/ngsniffer.c": [
          "File: wiretap/ngsniffer.c -> wiretap/ngsniffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2222:    Return value is the number of bytes in outbuf on return.",
          "2224: static int",
          "2225: SnifferDecompress(unsigned char *inbuf, size_t inlen, unsigned char *outbuf,",
          "2226:     size_t outlen, int *err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2229: #define CHECK_INPUT_POINTER( length ) \\",
          "2230:  if ( pin + (length - 1) >= pin_end ) \\",
          "2231:  { \\",
          "2233:   return ( -1 ); \\",
          "2234:  }",
          "2242: #define FETCH_OFFSET_HIGH \\",
          "2243:  CHECK_INPUT_POINTER( 1 ); \\",
          "2244:  offset = code_low + ((unsigned int)(*pin++) << 4) + 3;",
          "2250: #define CHECK_OUTPUT_LENGTH( length ) \\",
          "2251:  if ( pout + length > pout_end ) \\",
          "2252:  { \\",
          "2254:   return ( -1 ); \\",
          "2255:  }",
          "2261: #define APPEND_RLE_BYTE( length ) \\",
          "2263:  CHECK_OUTPUT_LENGTH( length ); \\",
          "2264:  CHECK_INPUT_POINTER( 1 ); \\",
          "2265:  memset( pout, *pin++, length ); \\",
          "2266:  pout += length;",
          "2276: #define APPEND_LZW_STRING( offset, length ) \\",
          "2278:  CHECK_OUTPUT_LENGTH( length ); \\",
          "2280:  if ( pout - offset < outbuf ) \\",
          "2281:  { \\",
          "2283:   return ( -1 ); \\",
          "2284:  } \\",
          "2286:  if ( pout - offset + length > pout ) \\",
          "2287:  { \\",
          "2289:   return ( -1 ); \\",
          "2290:  } \\",
          "2292:     advance output pointer */ \\",
          "2293:  memcpy( pout, pout - offset, length ); \\",
          "2294:  pout += length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2254:       available - the two bytes of the bit value,",
          "",
          "[Removed Lines]",
          "2256:    if ( pin + 2 >= pin_end )",
          "2257:    {",
          "2259:     return ( -1 );",
          "2260:    }",
          "",
          "[Added Lines]",
          "2328:    CHECK_INPUT_POINTER( 3 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2278:   }",
          "2279:   else",
          "",
          "[Removed Lines]",
          "2272:    if ( pout + 1 > pout_end )",
          "2273:    {",
          "2275:     return ( -1 );",
          "2276:    }",
          "",
          "[Added Lines]",
          "2340:    CHECK_OUTPUT_LENGTH( 1 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2284:    code_type = (unsigned int) ((*pin) >> 4 ) & 0xF;",
          "2285:    code_low  = (unsigned int) ((*pin) & 0xF );",
          "2294:    switch ( code_type )",
          "",
          "[Removed Lines]",
          "2287:    if ( pin >= pin_end )",
          "2288:    {",
          "2290:     return ( -1 );",
          "2291:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2300:       Total code size: 2 bytes.",
          "2302:     length = code_low + 3;",
          "2313:     break;",
          "",
          "[Removed Lines]",
          "2304:     if ( pout + length > pout_end )",
          "2305:     {",
          "2307:      return ( -1 );",
          "2308:     }",
          "2311:     memset( pout, *pin++, length );",
          "2312:     pout += length;",
          "",
          "[Added Lines]",
          "2365:     APPEND_RLE_BYTE( length );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2319:       Byte to repeat immediately follows.",
          "2320:       Total code size: 3 bytes.",
          "2322:     length = code_low + ((unsigned int)(*pin++) << 4) + 19;",
          "2340:     break;",
          "",
          "[Removed Lines]",
          "2325:     if ( pin >= pin_end )",
          "2326:     {",
          "2328:      return ( -1 );",
          "2329:     }",
          "2331:     if ( pout + length > pout_end )",
          "2332:     {",
          "2334:      return ( -1 );",
          "2335:     }",
          "2338:     memset( pout, *pin++, length );",
          "2339:     pout += length;",
          "",
          "[Added Lines]",
          "2375:     CHECK_INPUT_POINTER( 1 );",
          "2380:     APPEND_RLE_BYTE( length );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2346:       Length of string immediately follows.",
          "2347:       Total code size: 3 bytes.",
          "2365:     length = (unsigned int)(*pin++) + 16;",
          "2382:     break;",
          "",
          "[Removed Lines]",
          "2349:     offset = code_low + ((unsigned int)(*pin++) << 4) + 3;",
          "2352:     if ( pin >= pin_end )",
          "2353:     {",
          "2355:      return ( -1 );",
          "2356:     }",
          "2358:     if ( pout - offset < outbuf )",
          "2359:     {",
          "2361:      return ( -1 );",
          "2362:     }",
          "2366:     if ( pout + length > pout_end )",
          "2367:     {",
          "2369:      return ( -1 );",
          "2370:     }",
          "2372:     if ( pout - offset + length > pout )",
          "2373:     {",
          "2375:      return ( -1 );",
          "2376:     }",
          "2380:     memcpy( pout, pout - offset, length );",
          "2381:     pout += length;",
          "",
          "[Added Lines]",
          "2390:     FETCH_OFFSET_HIGH;",
          "2393:     CHECK_INPUT_POINTER( 1 );",
          "2398:     APPEND_LZW_STRING( offset, length );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2388:       Length of string to repeat is overloaded into code_type.",
          "2389:       Total code size: 2 bytes.",
          "2400:     length = code_type;",
          "2417:     break;",
          "2418:    }",
          "2419:   }",
          "",
          "[Removed Lines]",
          "2391:     offset = code_low + ((unsigned int)(*pin++) << 4) + 3;",
          "2393:     if ( pout - offset < outbuf )",
          "2394:     {",
          "2396:      return ( -1 );",
          "2397:     }",
          "2401:     if ( pout + length > pout_end )",
          "2402:     {",
          "2404:      return ( -1 );",
          "2405:     }",
          "2407:     if ( pout - offset + length > pout )",
          "2408:     {",
          "2410:      return ( -1 );",
          "2411:     }",
          "2415:     memcpy( pout, pout - offset, length );",
          "2416:     pout += length;",
          "",
          "[Added Lines]",
          "2408:     FETCH_OFFSET_HIGH;",
          "2415:     APPEND_LZW_STRING( offset, length );",
          "",
          "---------------"
        ]
      }
    }
  ]
}