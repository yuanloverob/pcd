{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
      "candidate_info": {
        "commit_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiProto.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.41\": provide/require option changes\n\nFossilOrigin-Name: af2c94530bd223b842b50e10e2d6cfc3ba05fd90318caf44fd5e7177ba9063b6",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         name        :null,  // Name of group",
          "20:         noline      :false, // Do not add #line to c output file",
          "21:         O           :'',    // Output file, or '-' to return string. Default is FILE.c.",
          "22:         unkType     :true,  // Warn of unknown struct fields self will be ignored.",
          "23:         varSuffix   :'_Data'// Suffix to add to data used for object config.",
          "24:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:         prod        :false, // Set production mode: masks out --I log=debug,trace,test,assert",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1655:         vr.spec = Demo__Specs;",
          "1656:         vr.data = ddPtr;",
          "1657:         vr.cmdSpec = DemoCmds;",
          "1658:         if (Demo_PkgInfo) {",
          "1661:         }",
          "1662:         if (rc == JSI_OK)",
          "1663:             rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, &vr);",
          "1666: #else",
          "1667:         rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, NULL);",
          "1668: #endif",
          "",
          "[Removed Lines]",
          "1659:             vr.info = Jsi_ValueNew1(interp);",
          "1660:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.info, 0);",
          "1664:         if (vr.info)",
          "1665:             Jsi_DecrRefCount(interp, vr.info);",
          "",
          "[Added Lines]",
          "1659:         if (self.prod)",
          "1660:             vr.conf.logmask = Jsi_LogProdMask;",
          "1662:             vr.conf.info = Jsi_ValueNew1(interp);",
          "1663:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.conf.info, 0);",
          "1667:         if (vr.conf.info)",
          "1668:             Jsi_DecrRefCount(interp, vr.conf.info);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 40",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: } Jsi_CmdSpec;",
          "394: typedef struct {",
          "396:     int traceCall;",
          "397:     bool coverage;",
          "398:     bool profile;",
          "399: } Jsi_ModuleConf;",
          "401: typedef struct {",
          "402:     struct Jsi_OptionSpec *spec;",
          "403:     void *data; // \"status\" output in Info.package",
          "404:     Jsi_CmdSpec *cmdSpec;",
          "409: } Jsi_PkgOpts;",
          "411: typedef struct {",
          "412:     char *str;",
          "413:     int32_t len;",
          "",
          "[Removed Lines]",
          "395:     uint log, logmask;",
          "405:     Jsi_Value *info;",
          "406:     void *reserved[3]; // Reserved for future use.",
          "407:     Jsi_ModuleConf modConf;",
          "408:     void *reserved2[3]; // Reserved for future use.",
          "",
          "[Added Lines]",
          "395:     Jsi_Value *info;",
          "396:     uint logmask; // Mask out interp->log. In production C sets to Jsi_LogProdMask and Js sets via self.Debug=false...",
          "397:     uint log;",
          "401:     Jsi_Value *udata;",
          "408:     Jsi_ModuleConf conf;",
          "409:     void *reserved[5]; // Reserved for future use.",
          "412: #define Jsi_LogProdMask (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "413: #define Jsi_LogDefVal ~Jsi_LogProdMask",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1247: #ifndef JSI_EXT_OPTS_OMIT",
          "1249: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1256: #else",
          "1257: #define Jsi_LogBugExt(fmt,...)",
          "1258: #define Jsi_LogErrorExt(fmt,...)",
          "",
          "[Removed Lines]",
          "1238: #define Jsi_LogBug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogWarn(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogInfo(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogTest(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogBugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1251: #define Jsi_LogWarnExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogInfoExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogTestExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "1242: #define Jsi_LogBug(fmt,...)   Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTest(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "859:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "860:     JSI_OPT_END(Jsi_ModuleConf, .help=\"Options for require command\")",
          "861: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "861:     JSI_OPT(OBJ,   Jsi_ModuleConf, udata,   .help=\"User data settable by require\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "874:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
          "875:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
          "876:         Jsi_ObjInsert(interp, nobj, \"loadFile\", Jsi_ValueNewStringDup(interp, cp), 0);",
          "878:         if (!fval || !Jsi_ValueIsFunction(interp, fval))",
          "879:             fval = Jsi_ValueNewNull(interp);",
          "880:         Jsi_ObjInsert(interp, nobj, \"func\", fval, 0);",
          "893:         fval = interp->NullValue;",
          "894:         if (ptr->popts.spec && ptr->popts.data) {",
          "895:             fval = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "877:         Jsi_Value *fval2, *fval = Jsi_NameLookup(interp, name);",
          "881:         fval = ptr->popts.info;",
          "882:         if (!fval) fval = interp->NullValue;",
          "883:         if (!Jsi_ValueIsObjType(interp, fval, JSI_OT_FUNCTION))",
          "884:             Jsi_ObjInsert(interp, nobj, \"info\", fval, 0);",
          "885:         else {",
          "886:             fval2 = Jsi_ValueNew1(interp);",
          "887:             Jsi_RC rc = Jsi_FunctionInvoke(interp, fval, NULL, &fval2, NULL);",
          "888:             if (rc != JSI_OK)",
          "889:                 Jsi_LogWarn(\"status call failed\");",
          "890:             Jsi_ObjInsert(interp, nobj, \"info\", fval2, 0);",
          "891:             Jsi_DecrRefCount(interp, fval2);",
          "892:         }",
          "",
          "[Added Lines]",
          "879:         Jsi_Value *fval = Jsi_NameLookup(interp, name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "900:             Jsi_DecrRefCount(interp, fval);",
          "902:         fval = Jsi_ValueNew1(interp);",
          "905:         Jsi_DecrRefCount(interp, fval);",
          "907:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "903:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.modConf, NULL, &fval, 0);",
          "904:         Jsi_ObjInsert(interp, nobj, \"moduleOpts\", fval, 0);",
          "",
          "[Added Lines]",
          "893:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.conf, NULL, &fval, 0);",
          "894:         Jsi_ObjInsert(interp, nobj, \"conf\", fval, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:         return JSI_ERROR;",
          "956:     Jsi_RC rc = JSI_OK;",
          "957:     if (argc==2) {",
          "959:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "960:         if (rc != JSI_OK)",
          "961:             return rc;",
          "",
          "[Removed Lines]",
          "958:         if (ver < n)",
          "",
          "[Added Lines]",
          "948:         if (ver < n)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "966:     if (opts != NULL) {",
          "967:         jsi_PkgInfo *pkg = jsi_PkgGet(interp, name);",
          "968:         if (!pkg) return JSI_ERROR;",
          "971:             return JSI_ERROR;",
          "972:     }",
          "",
          "[Removed Lines]",
          "969:         Jsi_ModuleConf *mptr = &pkg->popts.modConf;",
          "970:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, 0) < 0)",
          "",
          "[Added Lines]",
          "959:         Jsi_ModuleConf *mptr = &pkg->popts.conf;",
          "960:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, JSI_OPTS_IS_UPDATE) < 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "980: {",
          "981:     jsi_PkgInfo *ptr;",
          "982:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "984:     jsi_Frame *fp = interp->framePtr;",
          "985:     if (version<0) {",
          "986:         if (hPtr) {",
          "",
          "[Removed Lines]",
          "983:     Jsi_Value *opts = (popts?popts->info:NULL);",
          "",
          "[Added Lines]",
          "973:     Jsi_Value *opts = (popts?popts->conf.info:NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1008:         ptr->initProc = initProc;",
          "1009:         if (popts) {",
          "1010:             ptr->popts = *popts;",
          "1013:         }",
          "1014:         if (!initProc && fp->filePtr && fp->filePtr->fileName && fp->filePtr->fileName[0]) {",
          "1015:             ptr->filePtr = fp->filePtr;",
          "",
          "[Removed Lines]",
          "1011:             if (popts->info)",
          "1012:                 Jsi_IncrRefCount(interp, popts->info);",
          "",
          "[Added Lines]",
          "1001:             if (popts->conf.info)",
          "1002:                 Jsi_IncrRefCount(interp, popts->conf.info);",
          "1003:             if (popts->conf.udata)",
          "1004:                 Jsi_IncrRefCount(interp, popts->conf.udata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1028:                 if (opts) {",
          "1029:                     nopts = Jsi_ValueNew1(interp->topInterp);",
          "1030:                     Jsi_CleanValue(interp, interp->topInterp, opts, &nopts);",
          "1032:                 }",
          "1033:                 Jsi_RC rc = Jsi_PkgProvideEx(interp->topInterp, name, version, initProc, &po);",
          "1034:                 if (nopts)",
          "",
          "[Removed Lines]",
          "1031:                     po.info = nopts;",
          "",
          "[Added Lines]",
          "1023:                     po.conf.info = nopts;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1093:             return JSI_ERROR;",
          "1094:         if (rc == JSI_OK) {",
          "1095:             Jsi_PkgOpts po = {};",
          "1098:         }",
          "1099:     }",
          "1100:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "1096:             po.info = Jsi_ValueArrayIndex(interp, args, 2);",
          "1097:             rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "",
          "[Added Lines]",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "1091:             else",
          "1092:                 rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "1093:             if (po.conf.info)",
          "1094:                 Jsi_DecrRefCount(interp, po.conf.info);",
          "1095:             if (po.conf.udata)",
          "1096:                 Jsi_DecrRefCount(interp, po.conf.udata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1785:     return cp;",
          "1786: }",
          "1804: #define FN_assert JSI_INFO(\"\\",
          "1805: Assertions.  Enable with jsish --I Assert or using the -Assert module option.\")",
          "1806: Jsi_RC jsi_AssertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1807:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1808: {",
          "1810:         return JSI_OK;",
          "1811:     int rc = 0;",
          "1812:     Jsi_RC rv = JSI_OK;",
          "",
          "[Removed Lines]",
          "1788: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx) {",
          "1789:     uint logflag = interp->log, logmask = 0;",
          "1790:     jsi_Frame* fp = interp->framePtr;",
          "1791:      if (fp->filePtr) {",
          "1792:         logflag |= fp->filePtr->log;",
          "1793:         if (fp->filePtr->pkg) {",
          "1794:             logflag |= fp->filePtr->pkg->log;",
          "1795:             logmask |= fp->filePtr->pkg->logmask;",
          "1796:         }",
          "1797:      }",
          "1798:     logflag &= ~logmask;",
          "1799:     if (maskidx)",
          "1800:         logflag = logflag&(1<<maskidx);",
          "1801:     return logflag;",
          "1802: }",
          "1809:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT))",
          "",
          "[Added Lines]",
          "1792:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT, NULL))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3990:         }",
          "3991: mismatch:",
          "3992:         ok = 0;",
          "3994:             rc = Jsi_LogError(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "3995:         else",
          "3996:             Jsi_LogWarn(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "",
          "[Removed Lines]",
          "3993:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && !noerror)",
          "",
          "[Added Lines]",
          "3976:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && !noerror)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4778:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4779:         Jsi_ModuleConf *mo = NULL;",
          "4780:         if (pf && pf->pkg) {",
          "4782:             pf->pkg->logmask = mo->logmask;",
          "4783:             pf->pkg->log = mo->log;",
          "4784:         }",
          "",
          "[Removed Lines]",
          "4781:             mo = &pf->pkg->popts.modConf;",
          "",
          "[Added Lines]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:         jsi_NoOpCmd(interp, NULL, NULL, NULL, NULL);",
          "750:         goto empty_func;",
          "751:     }",
          "753:         goto empty_func;",
          "754:     const char *onam = funcPtr->name;",
          "",
          "[Removed Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "[Added Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1068:             interp->curIp = ip;",
          "1069:             if (!logflag2) {",
          "1070:                 ip++;",
          "",
          "[Removed Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx);",
          "",
          "[Added Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     if (--func->refCnt > 0)",
          "954:         return;",
          "955:     jsi_PkgInfo *pkg = func->pkg;",
          "958:     if (profile || cover) {",
          "959:         Jsi_DString dStr;",
          "960:         Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.modConf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.modConf.coverage:0));",
          "",
          "[Added Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.conf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.conf.coverage:0));",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: } jsi_Sig;",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "264: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "267: struct jsi_OpCode;",
          "",
          "[Removed Lines]",
          "263: #define jsi_LogDefVal (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "265: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask);",
          "",
          "[Added Lines]",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:     const char *loadFile;  // Full path of file name loaded.",
          "902:     Jsi_InitProc *initProc; // For C-extensions.",
          "903:     bool needInit;  // If a C-extension and _Init func needs calling in this interp.",
          "905:     Jsi_PkgOpts popts;",
          "906:     jsi_FileInfo* filePtr;",
          "907:     int log, logmask; // Runtime values set by moduleOps.",
          "",
          "[Removed Lines]",
          "904:     Jsi_Value *info;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574: static Jsi_RC packageHashFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *ptr) {",
          "575:     jsi_PkgInfo *p = (jsi_PkgInfo*)ptr;",
          "577:     Jsi_Free(p);",
          "578:     return JSI_OK;",
          "579: }",
          "",
          "[Removed Lines]",
          "576:     if (p->popts.info) Jsi_DecrRefCount(interp, p->popts.info);",
          "",
          "[Added Lines]",
          "576:     if (p->popts.conf.info) Jsi_DecrRefCount(interp, p->popts.conf.info);",
          "577:     if (p->popts.conf.udata) Jsi_DecrRefCount(interp, p->popts.conf.udata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:     interp->logOpts.func = 1;",
          "1111:     interp->logOpts.before = 1;",
          "1112:     interp->typeCheck.strict = 1;",
          "1114:     int argc = interp->opts.argc;",
          "1115:     char **argv = interp->opts.argv;",
          "1116:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1113:     interp->log = ~jsi_LogDefVal;",
          "",
          "[Added Lines]",
          "1114:     interp->log = Jsi_LogDefVal;",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "2503:     Jsi_JSONParseFmt(interp, &info, \"{pkgVer:%d}\", MYSQL_VERSION_ID);",
          "2505:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"MySql\", 1.1, Jsi_InitMySql, &dbPkgOpts);",
          "2506:     Jsi_DecrRefCount(interp, info);",
          "2507:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2504:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds, .info=info};",
          "",
          "[Added Lines]",
          "2504:     Jsi_ModuleConf modConf = {  .info=info, .logmask=Jsi_LogProdMask};",
          "2505:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds,.conf=modConf};",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         double timStart = 0;",
          "188:         jsi_PkgInfo *pkg = funcPtr->pkg;",
          "189:         if (pkg) {",
          "193:         }",
          "195:         interp->callDepth++;",
          "",
          "[Removed Lines]",
          "190:             tc |= pkg->popts.modConf.traceCall;",
          "191:             profile |= pkg->popts.modConf.profile;",
          "192:             coverage |= pkg->popts.modConf.coverage;",
          "",
          "[Added Lines]",
          "190:             tc |= pkg->popts.conf.traceCall;",
          "191:             profile |= pkg->popts.conf.profile;",
          "192:             coverage |= pkg->popts.conf.coverage;",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4653:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4654:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4655:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4657:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4658:     Jsi_DecrRefCount(interp, info);",
          "4659:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4656:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "[Added Lines]",
          "4656:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "4657:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     }",
          "107: }",
          "109: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx, Jsi_PkgOpts* popts) {",
          "110:     uint log = 0, mask = 0, ilog = interp->log;",
          "111:     jsi_Frame* fp = interp->framePtr;",
          "112:      if (popts) {",
          "113:         mask = popts->conf.logmask;",
          "114:         log = popts->conf.log;",
          "115:      } else if (fp->filePtr) {",
          "116:         log = fp->filePtr->log;",
          "117:         if (fp->filePtr->pkg) {",
          "118:             log |= fp->filePtr->pkg->log;",
          "119:             mask |= fp->filePtr->pkg->logmask;",
          "120:         }",
          "121:      }",
          "122:      log |= (ilog&~mask);",
          "123:      if (maskidx)",
          "124:         log &= (1<<maskidx);",
          "125:     return log;",
          "126: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     if (!interp || Jsi_InterpGone(interp))",
          "114:         return JSI_ERROR;",
          "115:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "120:         mask = popts->modConf.logmask;",
          "123:         isExt = 1;",
          "124:         ftail = 1;",
          "125:     }",
          "",
          "[Removed Lines]",
          "116:     uint log = 0, mask, cshift = (1<<code);",
          "117:     if (!popts)",
          "118:         log = jsi_GetLogFlag(interp, code);",
          "119:     else {",
          "121:         log = popts->modConf.log;",
          "122:         log = ((~mask|log)&cshift);",
          "",
          "[Added Lines]",
          "136:     uint log = jsi_GetLogFlag(interp, code, popts);",
          "139:         log = popts->modConf.log|interp->log;",
          "141:     if (popts) {",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3347: #endif",
          "3348:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3349:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "3351:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3352:     Jsi_DecrRefCount(interp, info);",
          "3353:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "3350:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .info=info };",
          "",
          "[Added Lines]",
          "3350:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "3351:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1433: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1434: </table>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1435: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04ca1fb949cf22b327cc8ae884c043be90bb4282",
      "candidate_info": {
        "commit_hash": "04ca1fb949cf22b327cc8ae884c043be90bb4282",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/04ca1fb949cf22b327cc8ae884c043be90bb4282",
        "files": [
          "Makefile",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiProto.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.19\": cleanup.\n\nFossilOrigin-Name: d58047c797d5a81413eece9f55632c64e87cd0ceaa0e32d3710a37fd269a177e",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiProto.c||src/jsiProto.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiArray.c||src/jsiArray.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 18",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 19",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
          "78:         return Jsi_LogError(\"expected array object\");",
          "79:     const char *jstr = \"\";",
          "81:     Jsi_DString dStr = {};",
          "89:         Jsi_Value *sc = Jsi_ValueArrayIndex(interp, args, 0);",
          "90:         if (sc != NULL)",
          "91:             jstr = Jsi_ValueToString(interp, sc, NULL);",
          "92:     }",
          "98:     for (i = 0; i < argc; ++i) {",
          "99:         const char *cp;",
          "100:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, _this, i);",
          "",
          "[Removed Lines]",
          "80:     int argc, curlen;",
          "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
          "84:     if (curlen == 0) {",
          "85:         goto bail;",
          "86:     }",
          "88:     if (Jsi_ValueGetLength(interp, args) >= 1) {",
          "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
          "95:         goto bail;",
          "96:     }",
          "97:     int i;",
          "",
          "[Added Lines]",
          "81:     int i, argc = jsi_SizeOfArray(interp, _this->d.obj);",
          "83:     if (argc>0 && Jsi_ValueGetLength(interp, args) >= 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:             Jsi_DSAppend(&dStr, jstr, NULL);",
          "109:         Jsi_DSAppend(&dStr, cp, NULL);",
          "110:     }",
          "118: }",
          "121: Jsi_Value* Jsi_ValueArrayConcat(Jsi_Interp *interp, Jsi_Value *arg1, Jsi_Value *arg2) {",
          "123:     Jsi_Obj *obj;",
          "124:     if (arg1->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, arg1->d.obj)) {",
          "125:         return NULL;",
          "",
          "[Removed Lines]",
          "112:     Jsi_ValueMakeStringDup(interp, ret, Jsi_DSValue(&dStr));",
          "113:     Jsi_DSFree(&dStr);",
          "114:     return JSI_OK;",
          "115: bail:",
          "116:     Jsi_ValueMakeStringDup(interp, ret, \"\");",
          "117:     return JSI_OK;",
          "122:     Jsi_Value *va;",
          "",
          "[Added Lines]",
          "103:     Jsi_ValueFromDS(interp, &dStr, ret);",
          "104:     return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:         Jsi_ValueDup2(interp, nobj->arr+j, obj->arr[i]);",
          "149:     }",
          "150:     Jsi_ObjSetLength(interp, nobj, len1+len2);",
          "153: }",
          "155: Jsi_RC Jsi_ValueArrayPush(Jsi_Interp *interp, Jsi_Value *arg1, Jsi_Value *arg2) {",
          "",
          "[Removed Lines]",
          "151:     va = Jsi_ValueMakeArrayObject(interp, NULL, nobj);",
          "152:     return va;",
          "",
          "[Added Lines]",
          "137:     return Jsi_ValueMakeArrayObject(interp, NULL, nobj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:         else if (!Jsi_ValueIsUndef(interp, t))",
          "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
          "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
          "272:     }",
          "273:     return rc;",
          "274: }",
          "",
          "[Removed Lines]",
          "271:             return Jsi_LogError(\"array size exceeded\");",
          "",
          "[Added Lines]",
          "256:             rc = Jsi_LogError(\"array size exceeded\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "311:     nsiz = obj->arrMaxSize;",
          "312:     if (nsiz<=0) nsiz = 100;",
          "318:     int i, j, m;",
          "319:     for (i = 0; i<curlen; i++)",
          "",
          "[Removed Lines]",
          "313:     if (Jsi_ObjArraySizer(interp, nobj, nsiz+1) <= 0) {",
          "314:         rc = Jsi_LogError(\"index too large: %d\", nsiz+1);",
          "315:         goto bail;",
          "316:     }",
          "",
          "[Added Lines]",
          "298:     if (Jsi_ObjArraySizer(interp, nobj, nsiz+1) <= 0)",
          "299:         return Jsi_LogError(\"index too large: %d\", nsiz+1);;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:             Jsi_ValueDup2(interp, nobj->arr+m++, va);",
          "349:        }",
          "350:     }",
          "351:     Jsi_ObjSetLength(interp, nobj, curlen);",
          "352:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "355:     return rc;",
          "356: }",
          "",
          "[Removed Lines]",
          "354: bail:",
          "",
          "[Added Lines]",
          "334: bail:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "389:     maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "390:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "391:         maa = 3;",
          "393:         if (!obj->arr[i]) continue;",
          "394:         vobjs[0] = obj->arr[i];",
          "395:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "[Removed Lines]",
          "392:     for (i = 0; i < curlen; i++) {",
          "",
          "[Added Lines]",
          "375:     for (i = 0; i < curlen && rc == JSI_OK; i++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:         nobj->arr[i] = Jsi_ValueNew1(interp);",
          "400:         rc = Jsi_FunctionInvoke(interp, func, vpargs, nobj->arr+i, sthis);",
          "401:         Jsi_DecrRefCount(interp, vpargs);",
          "405:     }",
          "408: bail:",
          "409:     if (nthis)",
          "",
          "[Removed Lines]",
          "402:         if( JSI_OK!=rc ) {",
          "403:             goto bail;",
          "404:         }",
          "406:     Jsi_ObjSetLength(interp, nobj, curlen);",
          "",
          "[Added Lines]",
          "386:     Jsi_ObjSetLength(interp, nobj, i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "848:             obj->arr[i] = Jsi_ValueDup(interp, value);",
          "849:     }",
          "850: bail:",
          "852:         Jsi_ValueMove(interp, *ret, _this);",
          "858:     return rc;",
          "859: }",
          "",
          "[Removed Lines]",
          "851:     if (_this != *ret) {",
          "854:             Jsi_DecrRefCount(interp, *ret);",
          "857:     }",
          "",
          "[Added Lines]",
          "831:     if (_this != *ret)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "866:     Jsi_RC rc = JSI_OK;",
          "867:     int istart = 0, iend, n, nsiz;",
          "868:     Jsi_Number nstart;",
          "870:     Jsi_Value *start = Jsi_ValueArrayIndex(interp, args, 0),",
          "875:     obj = _this->d.obj;",
          "876:     n = jsi_SizeOfArray(interp, obj);",
          "877:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
          "878:         istart = (int)nstart;",
          "879:         if (istart > n)",
          "881:         if (istart < 0)",
          "882:             istart = (n+istart);",
          "883:         if (istart<0)",
          "885:     }",
          "892:     Jsi_Number nend;",
          "893:     iend = n-1;",
          "894:     if (end && Jsi_GetNumberFromValue(interp,end, &nend) == JSI_OK) {",
          "",
          "[Removed Lines]",
          "869:     Jsi_Obj *nobj, *obj;",
          "872:     if (!start) {",
          "873:         goto done;",
          "874:     }",
          "880:             goto done;",
          "884:             goto done;",
          "887:     if (n == 0) {",
          "888: done:",
          "889:         Jsi_ValueMakeArrayObject(interp, ret, Jsi_ObjNewType(interp, JSI_OT_ARRAY));",
          "890:         return JSI_OK;",
          "891:     }",
          "",
          "[Added Lines]",
          "846:     Jsi_Obj *obj, *nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "847:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "849:     if (!start)",
          "850:         return rc;",
          "857:             return rc;",
          "861:             return rc;",
          "864:     if (n == 0)",
          "865:         return rc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "898:         if (iend < 0)",
          "899:             iend = (n+iend);",
          "900:         if (iend<0)",
          "902:     }",
          "903:     nsiz = iend-istart+1;",
          "904:     if (nsiz<=0)",
          "906:     Jsi_ObjListifyArray(interp, obj);",
          "915:     int i, m;",
          "916:     for (m = 0, i = istart; i <= iend; i++, m++)",
          "",
          "[Removed Lines]",
          "901:             goto done;",
          "905:         goto done;",
          "908:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "910:     if (Jsi_ObjArraySizer(interp, nobj, nsiz) <= 0) {",
          "911:         rc = Jsi_LogError(\"index too large: %d\", nsiz);",
          "912:         goto bail;",
          "913:     }",
          "",
          "[Added Lines]",
          "875:             return rc;",
          "879:         return rc;",
          "882:     if (Jsi_ObjArraySizer(interp, nobj, nsiz) <= 0)",
          "883:         return Jsi_LogError(\"index too large: %d\", nsiz);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "920:         Jsi_ValueDup2(interp, nobj->arr+m, obj->arr[i]);",
          "921:     }",
          "922:     Jsi_ObjSetLength(interp, nobj, nsiz);",
          "925:     return rc;",
          "926: }",
          "",
          "[Removed Lines]",
          "923:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "924: bail:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1134:     n = jsi_SizeOfArray(interp, obj);",
          "1135:     curlen = n;",
          "1141:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "1142:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "",
          "[Removed Lines]",
          "1137:     if (!start) {",
          "1138:         goto bail;",
          "1139:     }",
          "",
          "[Added Lines]",
          "1105:     if (!start)",
          "1106:         return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1147:     if (Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
          "1148:         istart = (int)nstart;",
          "1149:         if (istart > n)",
          "1151:         if (istart < 0)",
          "1152:             istart = (n+istart);",
          "1153:         if (istart<0)",
          "",
          "[Removed Lines]",
          "1150:             goto bail;",
          "",
          "[Added Lines]",
          "1117:             return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1163:         if (rhowmany < 0)",
          "1164:             rhowmany = (n-istart);",
          "1165:         if (rhowmany<0)",
          "1167:     }",
          "1169:     if (curlen < 0) {",
          "",
          "[Removed Lines]",
          "1166:             goto bail;",
          "",
          "[Added Lines]",
          "1133:             return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1194:     newlen = curlen + argc - (argc>=2?2:1);",
          "1195:     if (Jsi_ObjArraySizer(interp, obj, newlen+3) <= 0) {",
          "1197:         Jsi_ValueMakeUndef(interp, ret);",
          "1199:     }",
          "1200:     if (ilen>0) {",
          "1201:         for (i = curlen-1; i>=istart; i--) {",
          "",
          "[Removed Lines]",
          "1196:         Jsi_LogError(\"too long\");",
          "1198:         return JSI_ERROR;",
          "",
          "[Added Lines]",
          "1164:         return Jsi_LogError(\"too long\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1210:         }",
          "1211:     }",
          "1212:     Jsi_ObjSetLength(interp, obj, newlen);",
          "1214:     return JSI_OK;",
          "1215: }",
          "",
          "[Removed Lines]",
          "1213: bail:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1282:     { \"slice\",      jsi_ArraySliceCmd,      1, 2, \"start:number, end:number=void\", .help=\"Return sub-array\", .retType=(uint)JSI_TT_ARRAY },",
          "1283:     { \"some\",       jsi_ArraySomeCmd,       1, 2, \"callback:function, this:object=void\", .help=\"Return true if function returns true some element\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1284:     { \"sort\",       jsi_ArraySortCmd,       0, 1, \"options:function|object=void\", .help=\"Sort an array\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=0, .opts=jsi_ArraySortOptions },",
          "1286:     { \"reverse\",    jsi_ArrayReverseCmd,    0, 0, \"\", .help=\"Reverse order of all elements in an array\", .retType=(uint)JSI_TT_ARRAY },",
          "1287:     { \"unshift\",    jsi_ArrayUnshiftCmd,    0,-1, \"...\", .help=\"Add new elements to start of array and return size\", .retType=(uint)JSI_TT_NUMBER },",
          "1288:     { NULL, 0,0,0,0, .help=\"Provide access to array objects\" }",
          "",
          "[Removed Lines]",
          "1285:     { \"splice\",     jsi_ArraySpliceCmd,     1,-1, \"start:number, howmany:number=void, ...\", .help=\"Change the content of an array, adding new elements while removing old elements\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_NULL },",
          "",
          "[Added Lines]",
          "1250:     { \"splice\",     jsi_ArraySpliceCmd,     1,-1, \"start:number, howmany:number=void, ...\", .help=\"Change the content of an array, adding new elements while removing old elements\", .retType=(uint)JSI_TT_ARRAY },",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     interp->activeFunc = funcPtr;",
          "176:     Jsi_IncrRefCount(interp, args);",
          "177:     Jsi_RC rc = jsi_SharedArgs(interp, args, funcPtr, 1);",
          "236:                 }",
          "237:             }",
          "238:         }",
          "242:         }",
          "243:     }",
          "263:     jsi_SharedArgs(interp, args, funcPtr, 0);",
          "264:     interp->activeFunc = prevActive;",
          "265:     Jsi_DecrRefCount(interp, args);",
          "",
          "[Removed Lines]",
          "178:     if (rc != JSI_OK)",
          "179:         goto bail;",
          "181:     int profile = interp->profile, coverage = interp->coverage;",
          "182:     int tc = interp->traceCall;",
          "183:     double timStart = 0;",
          "184:     jsi_PkgInfo *pkg = funcPtr->pkg;",
          "185:     if (pkg) {",
          "186:         tc |= pkg->popts.modConf.traceCall;",
          "187:         profile |= pkg->popts.modConf.profile;",
          "188:         coverage |= pkg->popts.modConf.coverage;",
          "189:     }",
          "191:     interp->callDepth++;",
          "192:     int adds = funcPtr->callflags.bits.addargs;",
          "193:     Jsi_CmdSpec *cs  = funcPtr->cmdSpec;",
          "194:     if (adds && cs && (cs->flags&JSI_CMDSPEC_NONTHIS))",
          "195:         adds = 0;",
          "196:     funcPtr->callflags.bits.addargs = 0;",
          "197:     jsi_InitLocalVar(interp, args, funcPtr);",
          "199:     if (!calltrc) {",
          "200:         if (funcPtr->type == FC_NORMAL)",
          "201:             calltrc = (tc&jsi_callTraceFuncs);",
          "202:         else",
          "203:             calltrc = (tc&jsi_callTraceCmds);",
          "204:     }",
          "205:     if (calltrc && funcPtr->name)",
          "206:         jsi_TraceFuncCall(interp, funcPtr, interp->curIp, callee, args, 0, tc);",
          "208:     Jsi_Value *oc = interp->callee;",
          "209:     interp->callee = callee;",
          "210:     if (profile || coverage) {",
          "211:         interp->profileCnt++;",
          "212:         timStart = jsi_GetTimestamp();",
          "213:     }",
          "214:     int as_cons = funcPtr->callflags.bits.iscons;",
          "215:     if (funcPtr->type == FC_NORMAL) {",
          "216:         rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, callee->d.obj->d.fobj->scope,",
          "217:                    args, fthis, ret);",
          "218:         interp->funcCallCnt++;",
          "219:     } else if (!funcPtr->callback) {",
          "220:         rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "221:     } else {",
          "222:         if (funcPtr->f.bits.hasattr)",
          "223:         {",
          "224:             if ((funcPtr->f.bits.isobj) && callee->vt != JSI_VT_OBJECT) {",
          "225:                 rc = Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "226:             } else if ((!(funcPtr->f.bits.iscons)) && as_cons) {",
          "227:                 rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "228:             } else {",
          "229:                 int aCnt = Jsi_ValueGetLength(interp, args);",
          "230:                 const char *cstr = cs->argStr;",
          "231:                 if (!cstr) cstr = \"\";",
          "232:                 if (aCnt<(cs->minArgs+adds)) {",
          "233:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "234:                 } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "235:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "239:         if (rc == JSI_OK) {",
          "240:             rc = funcPtr->callback(interp, args, fthis, ret, funcPtr);",
          "241:             interp->cmdCallCnt++;",
          "244:     interp->callee = oc;",
          "245:     funcPtr->callCnt++;",
          "246:     if (profile || coverage) {",
          "247:         double timEnd = jsi_GetTimestamp(), timUsed = (timEnd - timStart);;",
          "248:         assert(timUsed>=0);",
          "249:         funcPtr->allTime += timUsed;",
          "250:         if (interp->framePtr->evalFuncPtr)",
          "251:             interp->framePtr->evalFuncPtr->subTime += timUsed;",
          "252:         else",
          "253:             interp->subTime += timUsed;",
          "254:     }",
          "256:     if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "257:         jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "258:     if (rc == JSI_OK && !as_cons && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "259:         rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "260:     interp->callDepth--;",
          "262: bail:",
          "",
          "[Added Lines]",
          "178:     if (rc == JSI_OK) {",
          "180:         int profile = interp->profile, coverage = interp->coverage;",
          "181:         int tc = interp->traceCall;",
          "182:         double timStart = 0;",
          "183:         jsi_PkgInfo *pkg = funcPtr->pkg;",
          "184:         if (pkg) {",
          "185:             tc |= pkg->popts.modConf.traceCall;",
          "186:             profile |= pkg->popts.modConf.profile;",
          "187:             coverage |= pkg->popts.modConf.coverage;",
          "188:         }",
          "190:         interp->callDepth++;",
          "191:         int adds = funcPtr->callflags.bits.addargs;",
          "192:         Jsi_CmdSpec *cs  = funcPtr->cmdSpec;",
          "193:         if (adds && cs && (cs->flags&JSI_CMDSPEC_NONTHIS))",
          "194:             adds = 0;",
          "195:         funcPtr->callflags.bits.addargs = 0;",
          "196:         jsi_InitLocalVar(interp, args, funcPtr);",
          "198:         if (!calltrc) {",
          "199:             if (funcPtr->type == FC_NORMAL)",
          "200:                 calltrc = (tc&jsi_callTraceFuncs);",
          "201:             else",
          "202:                 calltrc = (tc&jsi_callTraceCmds);",
          "203:         }",
          "204:         if (calltrc && funcPtr->name)",
          "205:             jsi_TraceFuncCall(interp, funcPtr, interp->curIp, callee, args, 0, tc);",
          "207:         Jsi_Value *oc = interp->callee;",
          "208:         interp->callee = callee;",
          "209:         if (profile || coverage) {",
          "210:             interp->profileCnt++;",
          "211:             timStart = jsi_GetTimestamp();",
          "212:         }",
          "213:         int as_cons = funcPtr->callflags.bits.iscons;",
          "214:         if (funcPtr->type == FC_NORMAL) {",
          "215:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, callee->d.obj->d.fobj->scope,",
          "216:                        args, fthis, ret);",
          "217:             interp->funcCallCnt++;",
          "218:         } else if (!funcPtr->callback) {",
          "219:             rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "220:         } else {",
          "221:             if (funcPtr->f.bits.hasattr)",
          "222:             {",
          "223:                 if ((funcPtr->f.bits.isobj) && callee->vt != JSI_VT_OBJECT) {",
          "224:                     rc = Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "225:                 } else if ((!(funcPtr->f.bits.iscons)) && as_cons) {",
          "226:                     rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "227:                 } else {",
          "228:                     int aCnt = Jsi_ValueGetLength(interp, args);",
          "229:                     const char *cstr = cs->argStr;",
          "230:                     if (!cstr) cstr = \"\";",
          "231:                     if (aCnt<(cs->minArgs+adds)) {",
          "232:                         rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "233:                     } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "234:                         rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "235:                     }",
          "238:             if (rc == JSI_OK) {",
          "239:                 rc = funcPtr->callback(interp, args, fthis, ret, funcPtr);",
          "240:                 interp->cmdCallCnt++;",
          "241:             }",
          "243:         interp->callee = oc;",
          "244:         funcPtr->callCnt++;",
          "245:         if (profile || coverage) {",
          "246:             double timEnd = jsi_GetTimestamp(), timUsed = (timEnd - timStart);;",
          "247:             assert(timUsed>=0);",
          "248:             funcPtr->allTime += timUsed;",
          "249:             if (interp->framePtr->evalFuncPtr)",
          "250:                 interp->framePtr->evalFuncPtr->subTime += timUsed;",
          "251:             else",
          "252:                 interp->subTime += timUsed;",
          "255:         if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "256:             jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "257:         if (rc == JSI_OK && !as_cons && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "258:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "259:         interp->callDepth--;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "10bc0978b53d160d969d803d31023b34a3538506",
      "candidate_info": {
        "commit_hash": "10bc0978b53d160d969d803d31023b34a3538506",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/10bc0978b53d160d969d803d31023b34a3538506",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/web/docs/app.css",
          "lib/web/docs/app.js",
          "lib/web/docs/index.html",
          "lib/web/md/Builds.md",
          "lib/web/md/Makefile",
          "lib/web/md/Modules.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Using.md",
          "lib/web/md/index.json",
          "lib/web/md/index.txt",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "src/jsiZvfs.c",
          "tools/mdanal.jsi",
          "tools/mkdocs.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.2.2\": WebSocket fix for dir listing, docs\n\nFossilOrigin-Name: 59522103aa03502d06751dac518cfec72b56ea56ed2b109323f30f068e2dab1a",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tools/mdanal.jsi||tools/mdanal.jsi",
          "tools/mkdocs.jsi||tools/mkdocs.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         useridPass  :'',        // USER:PASS for web GUI.",
          "53:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "54:         wsdebug     :0,         // Debug option for websockets.",
          "55:         wsOpts      :{},        // Websocket options.",
          "56:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "57:         zipVer      :'',        // Version to mount in fossil.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         wsinc       :'',        // Name of file to include.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             File.write(to, out);",
          "384:         }",
          "385:     }",
          "447:         }",
          "452:         }",
          "487:         }",
          "489:             self.timeout = 0;",
          "512:         }",
          "540:     }",
          "547: }",
          "",
          "[Removed Lines]",
          "387:     function main() {",
          "388:         var pal=null, urlarg, urlOrig = self.url;",
          "389:         if (typeof args === 'string')",
          "390:             args = [args];",
          "391:         if (self.vueConvert) {",
          "392:             return vueConvAll(args);",
          "393:         }",
          "394:         urlarg = args[0];",
          "395:         args.shift();",
          "396:         if (urlarg) {",
          "397:             var fext = File.extension(urlarg);",
          "398:             var zexts = ['.zip', '.sqlar', '.fossil'];",
          "399:             if (zexts.indexOf(fext)>=0) {",
          "400:                 self.zip = urlarg;",
          "401:                 urlarg = args[0];",
          "402:                 args.shift();",
          "403:             }",
          "404:         }",
          "405:         if (urlarg) {",
          "406:             if (self.url)",
          "407:                 throw('can not have args and specify -url');",
          "408:             var iiq;",
          "409:             if (self.query === '' && (iiq=urlarg.indexOf('?'))>0) {",
          "410:                 self.query = urlarg.substr(iiq+1);",
          "411:                 urlarg = urlarg.substr(0, iiq);",
          "412:             }",
          "413:             self.url = urlarg;",
          "414:         }",
          "415:         if (self.app) {",
          "416:             pal = {app:self.app};",
          "417:             self.url = self.app+'/index.html';",
          "418:             self.rootdir = '/zvfs/lib/web';",
          "419:             if (self.timeout != options.timeout)",
          "420:                 self.timeout = 0;",
          "421:         } if (self.docs) {",
          "422:             if (self.rootdir || self.zip)",
          "423:                 throw('can not use rootdir/zip with docs');",
          "424:             self.rootdir = '/zvfs/lib/web';",
          "425:             self.url = 'docs/index.html';",
          "426:             if (self.timeout != options.timeout)",
          "427:                 self.timeout = 0;",
          "430:         } else if (self.zip) {",
          "431:             self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "432:             if (!self.rootdir)",
          "433:                 self.rootdir = self.mnt;",
          "434:             else",
          "435:                 self.rootdir = self.mnt + '/' + self.rootdir;",
          "436:             if (!self.url)",
          "437:                 self.url = getUrlInDir(self.mnt);",
          "439:         } else if (!self.rootdir) {",
          "440:             if (!self.url.length)",
          "441:                 self.rootdir = Info.scriptDir();",
          "442:             else",
          "443:                 self.rootdir = File.dirname(self.url);",
          "444:             var rlen = self.rootdir.length;",
          "445:             if (self.url.substr(0, rlen) === self.rootdir)",
          "446:                 self.url = self.url.substr(rlen);",
          "448:         if (self.sslDir) {",
          "449:             if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "450:             if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "451:             self.ssl = true;",
          "453:         if (!self.rootdir)",
          "454:             self.rootdir = '.';",
          "456:         var wo = self.wsopts = {",
          "457:             pathAlias:pal,",
          "458:             local:self.local,",
          "459:             debug:self.wsdebug,",
          "460:             extHandlers:true,",
          "461:             onOpen:WsOpen,",
          "462:             onClose:WsClose,",
          "463:             onCloseLast:WsCloseLast,",
          "464:             onRecv:WsRecv,",
          "465:             onUpload:WsUpload,",
          "466:             onFilter:WsFilter,",
          "467:             port:self.port,",
          "468:             rootdir:self.rootdir,",
          "469:             urlPrefix:self.urlPrefix,",
          "470:             urlUnknown:self.urlUnknown,",
          "471:             sslCert:self.sslcert,",
          "472:             sslKey:self.sslkey,",
          "473:             ssl:self.ssl,",
          "474:             mimeLookupFunc:mimeLookup,",
          "475:         };",
          "476:         switch (self.mode) {",
          "477:             case 'admin':",
          "478:                 self.url = '/admin';",
          "479:                 wo.getRegexp=/^\\/admin/;",
          "480:                 wo.onGet=WebAdmin;",
          "481:                 break;",
          "482:             case 'menu':",
          "483:                 self.url = '/jsi/web/Websrv.htmli';",
          "484:                 break;",
          "485:             case '': break;",
          "486:             default: throw('mode \"'+self.mode+'\" not one of: admin, menu');",
          "488:         if (urlOrig!=='' && self.timeout === 60000)",
          "490:         if (!self.docs && !self.server && !self.pageStr && self.mode === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "491:             throw(\"url file empty or not found: \"+self.url);",
          "492:         if (self.urlPrefix.length && self.urlPrefix[0] != '/')",
          "493:             throw('urlPrefix must start with a slash');",
          "495:         if (self.local)",
          "496:             wo.noCompress = true;",
          "497:         if (self.server) {",
          "498:             self.noGui = true;",
          "499:             if (self.timeout !== options.timeout)",
          "500:                 self.timeout = 0;",
          "501:         } else if (!self.noReload)",
          "502:             wo.onModify = onModify;",
          "503:         if (self.pageStr !== '') {",
          "504:             wo.getRegexp=/^\\/page/;",
          "505:             self.url = '/page';",
          "506:             wo.onGet=WebGetString;",
          "507:         }",
          "508:         if (self.useridPass != '') {",
          "509:             wo.useridPass = self.useridPass;",
          "510:             if (self.useridPass === ':') // Exercise onAuth callback.",
          "511:                 wo.onAuth = WsAuth;",
          "513:         if (typeof self.wsOpts === 'string')",
          "514:             self.wsOpts = JSON.parse(self.wsOpts, false);",
          "515:         if (typeof self.udata === 'string')",
          "516:             self.udata = JSON.parse(self.udata, false);",
          "517:         if (self.udata && self.udata.length)",
          "518:             self.wsOpts.udata = self.udata;",
          "519:         for (var i in self.wsOpts)",
          "520:             wo[i] = self.wsOpts[i];",
          "522:         OpenWebsock();",
          "525:         LogTrace(\"Listening on port:\",self.port);",
          "527:         if (!self.noGui && self.url && self.url.length) {",
          "528:             OpenBrowser(self.url, self.anchor, self.query);",
          "529:         }",
          "531:         if (self.noWait) {",
          "532:             self.openWebsock = OpenWebsock;",
          "533:             return self;",
          "534:         }",
          "536:         if (self.timeout)",
          "537:             setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);",
          "538:         while (self.done == 0 && Event.update(100) ) ;",
          "542:     if (self.srcFile !== '')",
          "543:         source(self.srcFile);",
          "545:     main();",
          "",
          "[Added Lines]",
          "388:     if (self.srcFile !== '')",
          "389:         source(self.srcFile);",
          "391:     var pal=null, urlarg, urlOrig = self.url;",
          "392:     if (typeof args === 'string')",
          "393:         args = [args];",
          "394:     if (self.vueConvert) {",
          "395:         return vueConvAll(args);",
          "396:     }",
          "397:     urlarg = args[0];",
          "398:     args.shift();",
          "399:     if (urlarg) {",
          "400:         var fext = File.extension(urlarg);",
          "401:         var zexts = ['.zip', '.sqlar', '.fossil'];",
          "402:         if (zexts.indexOf(fext)>=0) {",
          "403:             self.zip = urlarg;",
          "404:             urlarg = args[0];",
          "405:             args.shift();",
          "407:     }",
          "408:     if (urlarg) {",
          "409:         if (self.url)",
          "410:             throw('can not have args and specify -url');",
          "411:         var iiq;",
          "412:         if (self.query === '' && (iiq=urlarg.indexOf('?'))>0) {",
          "413:             self.query = urlarg.substr(iiq+1);",
          "414:             urlarg = urlarg.substr(0, iiq);",
          "416:         self.url = urlarg;",
          "417:     }",
          "418:     if (self.app) {",
          "419:         pal = {app:self.app};",
          "420:         self.url = self.app+'/index.html';",
          "421:         self.rootdir = '/zvfs/lib/web';",
          "422:         if (!self.wsinc) {",
          "423:             self.wsinc = self.app+'/wsinc.jsi';",
          "424:             if (!File.exists(self.wsinc))",
          "425:                 self.wsinc = '';",
          "427:         if (self.timeout != options.timeout)",
          "429:     } if (self.docs) {",
          "430:         if (self.rootdir || self.zip)",
          "431:             throw('can not use rootdir/zip with docs');",
          "432:         var surl = self.url = 'docs/index.html', sd = self.docs;",
          "433:         if (sd == '/')",
          "434:             self.rootdir = '/zvfs/lib/web';",
          "435:         else if (File.isdir(sd) && File.exists(sd+'/'+surl))",
          "436:             self.rootdir = self.docs;",
          "437:         else",
          "438:             throw('-docs must be a docs dir or \"/\"'+self.docs);",
          "439:         if (!self.wsinc) {",
          "440:             self.wsinc = self.rootdir+'/docs/wsinc.jsi';",
          "441:             if (!File.exists(self.wsinc))",
          "442:                 self.wsinc = '';",
          "444:         if (self.timeout != options.timeout)",
          "445:             self.timeout = 0;",
          "448:     } else if (self.zip) {",
          "449:         self.mnt = Jsi_Archive([self.zip], {noRun:true, version:self.zipVer});",
          "450:         if (!self.rootdir)",
          "451:             self.rootdir = self.mnt;",
          "452:         else",
          "453:             self.rootdir = self.mnt + '/' + self.rootdir;",
          "454:         if (!self.url)",
          "455:             self.url = getUrlInDir(self.mnt);",
          "457:     } else if (!self.rootdir) {",
          "458:         if (!self.url.length)",
          "459:             self.rootdir = Info.scriptDir();",
          "460:         else",
          "461:             self.rootdir = File.dirname(self.url);",
          "462:         var rlen = self.rootdir.length;",
          "463:         if (self.url.substr(0, rlen) === self.rootdir)",
          "464:             self.url = self.url.substr(rlen);",
          "465:     }",
          "466:     if (self.sslDir) {",
          "467:         if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "468:         if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "469:         self.ssl = true;",
          "470:     }",
          "471:     if (!self.rootdir)",
          "472:         self.rootdir = '.';",
          "475:     var wo = self.wsopts = {",
          "476:         pathAlias:pal,",
          "477:         local:self.local,",
          "478:         debug:self.wsdebug,",
          "479:         extHandlers:true,",
          "480:         onOpen:WsOpen,",
          "481:         onClose:WsClose,",
          "482:         onCloseLast:WsCloseLast,",
          "483:         onRecv:WsRecv,",
          "484:         onUpload:WsUpload,",
          "485:         onFilter:WsFilter,",
          "486:         port:self.port,",
          "487:         rootdir:self.rootdir,",
          "488:         urlPrefix:self.urlPrefix,",
          "489:         urlUnknown:self.urlUnknown,",
          "490:         sslCert:self.sslcert,",
          "491:         sslKey:self.sslkey,",
          "492:         ssl:self.ssl,",
          "493:         mimeLookupFunc:mimeLookup,",
          "494:     };",
          "495:     if (self.wsinc)",
          "496:         source(self.wsinc);",
          "497:     switch (self.mode) {",
          "498:         case 'admin':",
          "499:             self.url = '/admin';",
          "500:             wo.getRegexp=/^\\/admin/;",
          "501:             wo.onGet=WebAdmin;",
          "502:             break;",
          "503:         case 'menu':",
          "504:             self.url = '/jsi/web/Websrv.htmli';",
          "505:             break;",
          "506:         case '': break;",
          "507:         default: throw('mode \"'+self.mode+'\" not one of: admin, menu');",
          "509:     if (urlOrig!=='' && self.timeout === 60000)",
          "510:         self.timeout = 0;",
          "511:     if (!self.docs && !self.server && !self.pageStr && self.mode === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))",
          "512:         throw(\"url file empty or not found: \"+self.url);",
          "513:     if (self.urlPrefix.length && self.urlPrefix[0] != '/')",
          "514:         throw('urlPrefix must start with a slash');",
          "516:     if (self.local)",
          "517:         wo.noCompress = true;",
          "518:     if (self.server) {",
          "519:         self.noGui = true;",
          "520:         if (self.timeout !== options.timeout)",
          "521:             self.timeout = 0;",
          "522:     } else if (!self.noReload)",
          "523:         wo.onModify = onModify;",
          "524:     if (self.pageStr !== '') {",
          "525:         wo.getRegexp=/^\\/page/;",
          "526:         self.url = '/page';",
          "527:         wo.onGet=WebGetString;",
          "528:     }",
          "529:     if (self.useridPass != '') {",
          "530:         wo.useridPass = self.useridPass;",
          "531:         if (self.useridPass === ':') // Exercise onAuth callback.",
          "532:             wo.onAuth = WsAuth;",
          "533:     }",
          "534:     if (typeof self.wsOpts === 'string')",
          "535:         self.wsOpts = JSON.parse(self.wsOpts, false);",
          "536:     if (typeof self.udata === 'string')",
          "537:         self.udata = JSON.parse(self.udata, false);",
          "538:     if (self.udata && self.udata.length)",
          "539:         self.wsOpts.udata = self.udata;",
          "540:     for (var i in self.wsOpts)",
          "541:         wo[i] = self.wsOpts[i];",
          "543:     OpenWebsock();",
          "546:     LogTrace(\"Listening on port:\",self.port);",
          "548:     if (!self.noGui && self.url && self.url.length) {",
          "549:         OpenBrowser(self.url, self.anchor, self.query);",
          "550:     }",
          "552:     if (self.noWait) {",
          "553:         self.openWebsock = OpenWebsock;",
          "554:         return self;",
          "555:     }",
          "557:     if (self.timeout)",
          "558:         setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);",
          "559:     while (self.done == 0 && Event.update(100) ) ;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   2",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     const char *fname;",
          "252:     Jsi_Value *fileVal;",
          "253:     time_t loadLast, loadFirst;",
          "254:     int flags;",
          "255: } jsi_wsFile;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:     bool native;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:     }",
          "603:     const char *fnb = Jsi_ValueToString(interp, fname, NULL);",
          "604:     Jsi_DString dStr = {}, tStr = {};",
          "606:     bool isroot = (fn[0]=='/'&&!fn[1]);",
          "608:     if (jsonp)",
          "609:         Jsi_DSAppend(&dStr, \"/* callback */\\n\", callback, \"([\", NULL);",
          "610:     else if (json)",
          "",
          "[Removed Lines]",
          "605:     int fnlen = Jsi_Strlen(fn);",
          "607:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\");",
          "",
          "[Added Lines]",
          "606:     int fnlen = Jsi_Strlen(fn), fblen = Jsi_Strlen(fnb);",
          "608:     const char fne = (fnlen>=1?fn[fnlen-1]:0), *fns = (fne=='/' || isroot?\"\":\"/\"),",
          "609:         fbe = (fblen>=1?fnb[fblen-1]:0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "637: #endif",
          "638:         uint sz = 0;",
          "639:         char pbuf[PATH_MAX];",
          "641:         Jsi_StatBuf stat = {};",
          "642:         Jsi_Value *vpath = Jsi_ValueNewStringConst(interp, pbuf, -1);",
          "643:         Jsi_IncrRefCount(interp, vpath);",
          "",
          "[Removed Lines]",
          "640:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fne!='/' && fnb[0]?\"/\":\"\"),  z);",
          "",
          "[Added Lines]",
          "642:         snprintf(pbuf, sizeof(pbuf), \"%s%s%s\", fnb, (fbe!='/' && fnb[0]?\"/\":\"\"),  z);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "982:     return true;",
          "983: }",
          "986:     const char *sname = Jsi_ValueString(interp, name, NULL);",
          "987:     if (cmdPtr->onModify && sname) {",
          "988:         bool isNew = 0;",
          "",
          "[Removed Lines]",
          "985: static Jsi_RC jsi_wsFileAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, Jsi_Value *name) {",
          "",
          "[Added Lines]",
          "987: static Jsi_RC jsi_wsFileAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, Jsi_Value *name, int native) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "992:             if (!isNew)",
          "993:                 fPtr = (typeof(fPtr))Jsi_HashValueGet(hPtr);",
          "994:             else {",
          "995:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "996:                 fPtr->fileVal = name;",
          "997:                 fPtr->fname = sname;",
          "998:                 fPtr->loadFirst = time(NULL);",
          "999:                 Jsi_IncrRefCount(interp, name);",
          "1000:                 fPtr->flags = 0;",
          "1001:                 Jsi_HashValueSet(hPtr, fPtr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:                 if (native<0)",
          "998:                     native = Jsi_FSNative(interp, name);",
          "1003:                 fPtr->native = native;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1014:     if (!n && sb.st_size>0) {",
          "1015:         char fdir[PATH_MAX];",
          "1016:         const char* cr = cmdPtr->curRoot, *fpath=NULL;",
          "1018:             && cr && !Jsi_Strncmp(fpath, cr, Jsi_Strlen(cr)))) {",
          "1019:             rc = Jsi_FileRead(interp, name, dStr);",
          "1020:             if (rc == JSI_OK && cmdPtr->onModify && Jsi_FSNative(interp, name))",
          "1022:         } else",
          "1023:             fprintf(stderr, \"Skip read file %s in %s\\n\", Jsi_ValueString(interp, name, NULL), (cr?cr:\"\"));",
          "1024:     }",
          "",
          "[Removed Lines]",
          "1017:         if (!Jsi_FSNative(interp, name) || ((fpath= Jsi_Realpath(interp, name, fdir))",
          "1021:                 jsi_wsFileAdd(interp, cmdPtr, name);",
          "",
          "[Added Lines]",
          "1022:         bool native = Jsi_FSNative(interp, name);",
          "1023:         if (!native || ((fpath= Jsi_Realpath(interp, name, fdir))",
          "1027:                 jsi_wsFileAdd(interp, cmdPtr, name, native);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1278:     return cmdPtr->jsishPathCache;",
          "1279: }",
          "1282:     const char *ce, *cp = NULL;",
          "1283:     char *lcp;",
          "1284:     Jsi_Value *val;",
          "",
          "[Removed Lines]",
          "1281: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char **inPtr, Jsi_DString *dStr) {",
          "",
          "[Added Lines]",
          "1287: static void jsi_wsPathAlias(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, char **inPtr, Jsi_DString *dStr) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1447: static int jsi_wsHttp(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, struct lws *wsi, void *user,",
          "1449: {",
          "1450:     const char *ext = NULL;",
          "1451:     unsigned char buffer[JSI_BUFSIZ];",
          "1452:     const char *mime = NULL;",
          "1453:     time_t now = time(NULL);",
          "1455:     int rc = 0;",
          "1456:     buf[0] = 0;",
          "1457:     uchar *p = buffer, *end = &buffer[sizeof(buffer)-1];",
          "",
          "[Removed Lines]",
          "1448:     struct lws_context *context, const char* inPtr, Jsi_DString *tStr, jsi_wsPss *pss)",
          "1454:     char buf[JSI_BUFSIZ];",
          "",
          "[Added Lines]",
          "1454:     struct lws_context *context, char* inPtr, Jsi_DString *iStr, Jsi_DString *tStr, jsi_wsPss *pss)",
          "1460:     char buf[JSI_BUFSIZ], *bufp;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1460:     bool isJsiWeb = 0, isSSI = 0;",
          "1461:     cmdPtr->stats.httpLast = now;",
          "1464:     if (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI))",
          "1465:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:     if (inPtr[0] != '~')",
          "1470:         inPtr = Jsi_NormalPath(interp, inPtr, iStr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1479:     }",
          "1481:     if ((cmdPtr->urlRedirect && (inPtr == 0 || *inPtr == 0 || !Jsi_Strcmp(inPtr, \"/\")) && !cmdPtr->redirDisable)",
          "1483:         cmdPtr->stats.redirCnt++;",
          "1485:         if (cmdPtr->redirMax>0 && !cmdPtr->redirDisable && cmdPtr->redirMax>0 && cmdPtr->stats.redirLast",
          "",
          "[Removed Lines]",
          "1482:         && (inPtr = cmdPtr->urlRedirect) && inPtr[0]) {",
          "",
          "[Added Lines]",
          "1490:         && (inPtr = (char*)cmdPtr->urlRedirect) && inPtr[0])",
          "1491:     {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1489:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "1490:         return (rc == 100 ? 0 : 1);",
          "1491:     }",
          "1495:     if (cmdPtr->useridPass || cmdPtr->onAuth) {",
          "1496:         int ok = 0;",
          "1497:         int alen;",
          "",
          "[Removed Lines]",
          "1492:     if (!inPtr || !*inPtr)",
          "1493:         inPtr = \"/\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1577:     Jsi_DString sStr;",
          "1578:     Jsi_DSInit(&sStr);",
          "1579:     jsi_wsPathAlias(interp, cmdPtr, &inPtr, &sStr);",
          "1581:     snprintf(buf, sizeof(buf), \"%s/%s\", cmdPtr->curRoot, inPtr);",
          "1582:     Jsi_DSFree(&sStr);",
          "1583:     if (cmdPtr->debug>1)",
          "1584:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1588:     Jsi_DSSetLength(&sStr, 0);",
          "1589:     bufp = Jsi_NormalPath(interp, buf, &sStr);",
          "1590:     Jsi_Strcpy(buf, bufp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1669:                     hrc = -1;",
          "1670:                 else {",
          "1671:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1673:                 }",
          "1674:                 Jsi_DecrRefCount(interp, fname);",
          "1675:                 return hrc;",
          "",
          "[Removed Lines]",
          "1672:                     jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1681:                     jsi_wsFileAdd(interp, cmdPtr, fname, -1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1762:             if (cmdPtr->onModify) {",
          "1763:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1764:                 Jsi_IncrRefCount(interp, fname);",
          "1766:                 Jsi_DecrRefCount(interp, fname);",
          "1767:             }",
          "1768:             return 1;",
          "",
          "[Removed Lines]",
          "1765:                 jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1774:                 jsi_wsFileAdd(interp, cmdPtr, fname, -1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1780:     Jsi_StatBuf jsb;",
          "1781:     bool native = Jsi_FSNative(interp, fname);",
          "1782:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1784: nofile:",
          "1785:         if (cmdPtr->urlUnknown && cmdPtr->urlUnknown[0]) {",
          "1786:             rc = lws_http_redirect(wsi, 301, (uchar*)cmdPtr->urlUnknown, Jsi_Strlen(cmdPtr->urlUnknown), &p, end);",
          "",
          "[Removed Lines]",
          "1783:         (Jsi_Stat(interp, fname, &jsb) || jsb.st_size<=0)) {",
          "",
          "[Added Lines]",
          "1792:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1881:         }",
          "1882:         int hrc = lws_serve_http_file(wsi, buf, mime, Jsi_DSValue(&hStr), Jsi_DSLength(&hStr));",
          "1883:         if (hrc >= 0 && cmdPtr->onModify)",
          "1885:         Jsi_DecrRefCount(interp, fname);",
          "1886:         if (hrc<0) {",
          "1887:             if (cmdPtr->noWarn==0)",
          "",
          "[Removed Lines]",
          "1884:             jsi_wsFileAdd(interp, cmdPtr, fname);",
          "",
          "[Added Lines]",
          "1891:             jsi_wsFileAdd(interp, cmdPtr, fname, native);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2269:     case LWS_CALLBACK_HTTP:",
          "2270:     {",
          "2272:         Jsi_DSInit(&dStr);",
          "2273:         if (cmdPtr->debug)",
          "2274:             fprintf(stderr, \"HTTP GET: %s\\n\", inPtr);",
          "2276:         Jsi_DSFree(&dStr);",
          "2277:         if (rc<0)",
          "2278:             return -1;",
          "2279:         if (rc==1) {",
          "",
          "[Removed Lines]",
          "2271:         Jsi_DString dStr;",
          "2275:         rc = jsi_wsHttp(interp, cmdPtr, wsi, user, context, inPtr, &dStr, pss);",
          "",
          "[Added Lines]",
          "2278:         Jsi_DString dStr, iStr, pStr;",
          "2280:         Jsi_DSInit(&iStr);",
          "2281:         Jsi_DSInit(&pStr);",
          "2284:         Jsi_DSAppend(&pStr, !inPtr||!inPtr[0]?\"/\":inPtr, NULL);",
          "2285:         rc = jsi_wsHttp(interp, cmdPtr, wsi, user, context, Jsi_DSValue(&pStr), &iStr, &dStr, pss);",
          "2287:         Jsi_DSFree(&iStr);",
          "2288:         Jsi_DSFree(&pStr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2987:     for (hPtr = Jsi_HashSearchFirst(cmdPtr->fileHash, &cursor);",
          "2988:         hPtr != NULL; hPtr = Jsi_HashSearchNext(&cursor)) {",
          "2989:         jsi_wsFile* fPtr = (jsi_wsFile*)Jsi_HashValueGet(hPtr);",
          "2991:             Jsi_StatBuf sb;",
          "2992:             int n = Jsi_Stat(interp, fPtr->fileVal, &sb);",
          "2993:             if (!n && sb.st_mtime > ll) {",
          "",
          "[Removed Lines]",
          "2990:         if (fPtr && fPtr->fileVal) {",
          "",
          "[Added Lines]",
          "3002:         if (fPtr && fPtr->fileVal) {  //TODO: only native files need to be checked.",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3215:         return Jsi_LogError(\"Apply to non-websock object\");",
          "3216:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "3217:     if (val)",
          "3219:     if (cmdPtr->fileHash)",
          "3220:         return Jsi_HashKeysDump(interp, cmdPtr->fileHash, ret, 0);",
          "3221:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "3218:         return jsi_wsFileAdd(interp, cmdPtr, val);",
          "",
          "[Added Lines]",
          "3230:         return jsi_wsFileAdd(interp, cmdPtr, val, -1);",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:         return -1;",
          "1303:     }",
          "1304:     memset(buf, 0, sizeof(*buf));",
          "1309:     buf->st_ino = 0;",
          "1310:     buf->st_size = pFile->nByte;",
          "1311:     buf->st_mtime = pFile->timestamp;",
          "1312:     buf->st_ctime = pFile->timestamp;",
          "1313:     buf->st_atime = pFile->timestamp;",
          "1314:     return 0;",
          "1315: }",
          "",
          "[Removed Lines]",
          "1305:     if (pFile->isdir)",
          "1306:         buf->st_mode = 040555;",
          "1307:     else",
          "1308:         buf->st_mode = (0100000|pFile->permissions);",
          "",
          "[Added Lines]",
          "1310:     if (pFile->isdir) {",
          "1311:         buf->st_mode = 040555;",
          "1312:         if (!buf->st_size)",
          "1313:             buf->st_size = 1;",
          "1314:     } else",
          "1315:         buf->st_mode = (0100000|pFile->permissions);",
          "",
          "---------------"
        ],
        "tools/mdanal.jsi||tools/mdanal.jsi": [
          "File: tools/mdanal.jsi -> tools/mdanal.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/mkdocs.jsi||tools/mkdocs.jsi": [
          "File: tools/mkdocs.jsi -> tools/mkdocs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "3: function mkdocs(args, opts) {",
          "5:     var options = { // Analyse markdown",
          "6:         O   :'stdout',  // Output index file",
          "7:     };",
          "8:     var self = {",
          "9:         fall:{},",
          "10:         fdata:{},",
          "11:         flabels:{},",
          "12:         flinks:{},",
          "13:         fblocks:{},",
          "14:         aflist:[],",
          "15:         result:{},",
          "16:     };",
          "17:     moduleOpts(options, self);",
          "21:     function slugify(s) {",
          "22:         s = s.toLowerCase().trim();",
          "23:         s = s.replace(/`~!@#$%^&*()_\\-+=\\[\\]\\{\\};:'\"\\\\|\\/,.<>?\\s]/g, ' ');",
          "24:         s = s.map(['\\\"', '', '    ', ' ', '   ', ' ', '  ', ' ', ' ', '-']);",
          "26:         return s;",
          "27:     }",
          "29:     var fdir, fn = (typeof(args) === 'array'? args[0]: args);",
          "30:     var tr, j, r, t, d, f, i, th, tt;",
          "31:     var lst;",
          "32:     if (File.isdir(fn)) {",
          "33:         fdir = fn;",
          "34:         if (fn[fn.length-1]!='/') fn+='/';",
          "35:         lst = File.glob('*.md', {dir:fn, prefix:fn, tails:true});",
          "36:         fdir = fn;",
          "37:     } else {",
          "38:         lst = [fn];",
          "39:         fdir = File.dirname(fn);",
          "40:     }",
          "41:     var re = /^#+ [^#]+$/gm,",
          "42:         rel = /\\[[^]]+\\]\\([^)]+\\)/gm,",
          "43:         reb = /```.*```/g;",
          "44:     var aflist = [];",
          "45:     for (i of lst) {",
          "46:         f = File.tail(i);",
          "47:         aflist.push(f);",
          "48:     }",
          "49:     for (i of lst) {",
          "50:         f = File.tail(i);",
          "51:         LogDebug(\"DO HEADERS\", i);",
          "52:         d = self.fdata[f] = File.read(i);",
          "53:         r = d.match(re);",
          "54:         t = [], tt = [];",
          "55:         if (r) {",
          "56:             for (j of r) {",
          "57:                 tr = j.match(/ [^#]+/);",
          "58:                 if (tr) {",
          "59:                     var strl = slugify(tr[0].trim());",
          "60:                     t.push(strl);",
          "61:                     tt.push(strl, j);",
          "62:                 }",
          "63:             }",
          "64:         }",
          "65:         LogDebug('R', t);",
          "66:         self.flabels[f] = t;",
          "67:         self.fall[f] = tt;",
          "69:         r = d.match(rel);",
          "70:         LogDebug('DO LINKS', r);",
          "71:         t = [];",
          "72:         if (r) {",
          "73:             for (j of r) {",
          "74:                 tr = j.match(/\\(.*\\)+/);",
          "75:                 if (tr) {",
          "76:                     var ta;",
          "77:                     tr = tr[0];",
          "78:                     tr = tr.substr(1,tr.length-2).split('\"')[0];",
          "79:                     if (tr[0] == '#') {",
          "80:                         var tr0a = slugify(tr.substr(1));",
          "81:                         if (self.flabels[f].indexOf(tr0a)<0)",
          "82:                             puts(\"IN\", f, \"LOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "83:                         continue;",
          "85:                     } else {",
          "86:                         if (tr.indexOf('://')>0) continue;",
          "87:                         th = tr.trim().split('#');",
          "88:                         var t0 = th[0].trim();",
          "89:                         if (aflist.indexOf(t0)<0) {",
          "90:                             puts('IN',f,'FILE NOT FOUND:\"'+t0+'\" FROM \"'+tr+'\"');",
          "91:                             continue;",
          "92:                         }",
          "93:                         if (th.length!=2)",
          "95:                             continue;",
          "96:                         else",
          "97:                             ta = th[0] + '#' + th[1];",
          "98:                     }",
          "99:                     t.push(ta.trim());",
          "100:                 }",
          "101:             }",
          "102:         }",
          "103:         self.flinks[f] = t;",
          "104:         LogDebug('L', t);",
          "105:         r = d.match(reb);",
          "106:         LogDebug('DO BLOCKS', r);",
          "107:         self.fblocks[f] = r;",
          "108:     }",
          "109:     for (f in self.flinks) {",
          "110:         var fl = self.flinks[f];",
          "111:         if (!fl) {log('no links',f); continue; }",
          "112:         LogDebug(f,'fl',fl);",
          "113:         for (tr of fl) {",
          "114:             th = tr.trim().split('#');",
          "115:             if (th.length!=2) {",
          "117:                 continue;",
          "118:             } else {",
          "119:                 var x0 = th[0].trim();",
          "120:                 ta = x0 + '#' + th[1];",
          "121:                 var xx = self.flabels[x0];",
          "122:                 if (!xx || xx.indexOf(th[1].toLowerCase())<0)",
          "123:                     puts(\"IN\", f, \"NONLOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "124:             }",
          "125:         }",
          "126:     }",
          "127:     self.result = {",
          "128:         sections: self.fall,",
          "129:         files:Object.keys(self.fall).sort(),",
          "130:     };",
          "131:     var fdirt = fdir+'/index.txt';",
          "132:     if (File.exists(fdirt))",
          "133:         self.result.files = File.read(fdirt).trim().split(' ');",
          "134:     if (self.O)",
          "135:         File.write(self.O, JSON.stringify(self.result));",
          "136:     else",
          "137:         return self.result;",
          "138: }",
          "140: moduleRun(mkdocs);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "2761f649f584e3eb4bea3139952ac64f2a714361",
      "candidate_info": {
        "commit_hash": "2761f649f584e3eb4bea3139952ac64f2a714361",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2761f649f584e3eb4bea3139952ac64f2a714361",
        "files": [
          "Makefile",
          "README.md",
          "js-demos/warndemo.jsi",
          "lib/Debug.jsi",
          "lib/DebugUI/DebugUI.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "lib/Wget.jsi",
          "lib/web/VuePrismEditor.umd.min.js",
          "lib/web/bootstrap-vue.min.js",
          "lib/web/bootstrap.min.js",
          "lib/web/highcharts-vue.js",
          "lib/web/httpVueLoader.js",
          "lib/web/js/VuePrismEditor.umd.min.js",
          "lib/web/js/bootstrap-vue.min.js",
          "lib/web/js/bootstrap.min.js",
          "lib/web/js/highcharts-vue.js",
          "lib/web/js/httpVueLoader.js",
          "lib/web/js/prism.js",
          "lib/web/js/vue-markdown-pdq.min.js",
          "lib/web/js/vue-router.js",
          "lib/web/js/vue-router.min.js",
          "lib/web/js/vue.js",
          "lib/web/js/vue.min.js",
          "lib/web/js/vuex.js",
          "lib/web/md/Builds.md",
          "lib/web/md/Builtins.md",
          "lib/web/md/DBQuery.md",
          "lib/web/md/Debug.md",
          "lib/web/md/Deploy.md",
          "lib/web/md/Extensions.md",
          "lib/web/md/Index.md",
          "lib/web/md/Interp.md",
          "lib/web/md/Logging.md",
          "lib/web/md/Makefile",
          "lib/web/md/Misc.md",
          "lib/web/md/Modules.md",
          "lib/web/md/MySql.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Sqlite.md",
          "lib/web/md/Testing.md",
          "lib/web/md/Types.md",
          "lib/web/md/Using.md",
          "lib/web/md/WebSocket.md",
          "lib/web/md/dev/Ledger.md",
          "lib/web/md/dev/jsi.js.md",
          "lib/web/md/index.json",
          "lib/web/md/index.txt",
          "lib/web/prism.js",
          "lib/web/vue-markdown-pdq.min.js",
          "lib/web/vue-router.js",
          "lib/web/vue-router.min.js",
          "lib/web/vue.js",
          "lib/web/vue.min.js",
          "lib/web/vuex.js",
          "md",
          "md/Build.md",
          "md/Builtins.md",
          "md/C-API.md",
          "md/CData.md",
          "md/Coding.md",
          "md/DBQuery.md",
          "md/Debug.md",
          "md/Demos.md",
          "md/Deploy.md",
          "md/Interp.md",
          "md/Ledger.md",
          "md/Logging.md",
          "md/Makefile",
          "md/Misc.md",
          "md/MySql.md",
          "md/Reference.md",
          "md/Sqlite.md",
          "md/Testing.md",
          "md/Types.md",
          "md/Web.md",
          "md/index.md",
          "md/jsi.js.md",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFunc.c",
          "src/jsiInterp.c",
          "src/jsiOptions.c",
          "tests/strict.jsi",
          "tools/mdanal.jsi",
          "tools/mkref.jsi",
          "tools/mktoc.jsi",
          "www/reference.wiki"
        ],
        "message": "Doc cleanup\n\nFossilOrigin-Name: eaa494494160ff2765bfe81c3ec8a03bc12fcd3e628f19974e0bfea89ec2fe49",
        "before_after_code_files": [
          "js-demos/warndemo.jsi||js-demos/warndemo.jsi",
          "lib/Debug.jsi||liDebug.jsi",
          "lib/DebugUI/DebugUI.jsi||liDebugUI/DebugUI.jsi",
          "lib/SqliteUI/SqliteUI.jsi||liSqliteUI/SqliteUI.jsi",
          "lib/Wget.jsi||liWget.jsi",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "tests/strict.jsi||tests/strict.jsi",
          "tools/mdanal.jsi||tools/mdanal.jsi",
          "tools/mkref.jsi||tools/mkref.jsi",
          "tools/mktoc.jsi||tools/mktoc.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/warndemo.jsi||js-demos/warndemo.jsi": [
          "File: js-demos/warndemo.jsi -> js-demos/warndemo.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: =!EXPECTSTART!=",
          "17: warndemo2.jsi:6: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "18: warndemo2.jsi:7: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "19: warndemo2.jsi:9: warn: got 0 args, expected 1, calling function warndemoB(n:number)",
          "20: warndemo2.jsi:10: warn: got 3 args, expected 1, calling function warndemoB(n:number)",
          "21: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: warndemo2.jsi:8: warn: got 3 args, expected 0, calling function warndemoA()",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||liDebug.jsi": [
          "File: lib/Debug.jsi -> liDebug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:                 rc = 'null';",
          "79:             puts(\"RESULT= \" + rc.toString());",
          "80:         } catch(e) {",
          "82:         }",
          "83:     }",
          "",
          "[Removed Lines]",
          "81:             eputs(\"ERROR: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:             var b = self.interp.eval('Util.dbgAdd(\"'+bp+'\", '+(temp?\"true\":\"false\")+')');",
          "252:             puts((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "253:         } catch(e) {",
          "255:         }",
          "256:     }",
          "",
          "[Removed Lines]",
          "254:             puts(\"add failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:             return;",
          "266:         }",
          "267:         if (val === undefined || (num=parseIntN(val))<=0) {",
          "269:             return;",
          "270:         }",
          "271:         try {",
          "272:             self.interp.eval('Util.dbgRemove('+num+')');",
          "273:         } catch(e) {",
          "275:         }",
          "276:     }",
          "",
          "[Removed Lines]",
          "268:             eputs(\"bad index: \"+val);",
          "274:             eputs(\"remove failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:             return;",
          "286:         }",
          "287:         if (val === undefined || (num=parseIntN(val))<=0)",
          "289:         try {",
          "290:             self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "291:         } catch(e) {",
          "293:         }",
          "294:     }",
          "",
          "[Removed Lines]",
          "288:             return eputs(\"bad index: \"+val);",
          "292:             eputs(\"enable failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "390:         else if (opstr.substr(0,3) === 'SIG')",
          "391:             puts(\"Stopped by signal: \"+opstr);",
          "392:         else if (emsg && emsg !== '')",
          "394:         addFile(file);",
          "395:         if (self.minLevel>0)",
          "396:             self.interp.conf({debugOpts:{minLevel:0}});",
          "",
          "[Removed Lines]",
          "393:             puts(\"MSG: \"+emsg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/DebugUI/DebugUI.jsi||liDebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> liDebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:                 rc = 'null';",
          "246:             wputs(val + \" = \" + JSON.stringify(rc));",
          "247:         } catch(e) {",
          "249:         }",
          "250:     }",
          "",
          "[Removed Lines]",
          "248:             eputs(\"ERROR: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:             try {",
          "266:                 rc = self.interp.uplevel(val, self.curlev);",
          "267:             } catch(e) {",
          "269:                 err=true;",
          "270:             }",
          "271:         }",
          "",
          "[Removed Lines]",
          "268:                 eputs(\"ERROR: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:             wputs((temp?\"temporary \":\"\") +\"breakpoint #\"+b+\" set: \"+bp);",
          "446:             done = true;",
          "447:         } catch(e) {",
          "449:         }",
          "450:         if (done) {",
          "451:             LogDebug(\"DONE BP\");",
          "",
          "[Removed Lines]",
          "448:             eputs(\"add failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463:             }",
          "464:         } else {",
          "465:             if (val === undefined || (num=parseIntN(val))<=0) {",
          "467:                 return;",
          "468:             }",
          "469:             try {",
          "470:                 self.interp.eval('Util.dbgRemove('+num+')');",
          "471:             } catch(e) {",
          "473:             }",
          "474:         }",
          "475:         webBPUpdate();",
          "",
          "[Removed Lines]",
          "466:                 eputs(\"bad index: \"+val);",
          "472:                 eputs(\"remove failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:             try {",
          "489:                 self.interp.eval('Util.dbgEnable('+num+','+on+')');",
          "490:             } catch(e) {",
          "492:             }",
          "493:         }",
          "494:         webBPUpdate();",
          "",
          "[Removed Lines]",
          "491:                 return eputs(\"enable failed: \"+e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||liSqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> liSqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     var options = { // Provide an sqlite user interface via a browser.",
          "11:         closeTimeout:5000,              // Time til exit after close of final client websocket (ms).",
          "12:         browser     :'',                // Browser program to use.",
          "13:         dump        :false,             // Dump database.",
          "14:         foreignkey  :true,              // Enable foreign key constraints.",
          "15:         integrity   :true,              // Do integrity check on startup.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:             self.dbfile = files;",
          "578:         else",
          "579:             self.dbfile = files[0];",
          "581:             throw(\"db file not found\");",
          "582:         if (self.dump)",
          "583:             return DumpSql(self.dbfile);",
          "",
          "[Removed Lines]",
          "580:         if (!File.exists(self.dbfile))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||liWget.jsi": [
          "File: lib/Wget.jsi -> liWget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         sslDir      :null,          // Enable ssl and use certs in this dir",
          "12:         sslFnCert   :'cert.pem',    // File name in sslDir of cert.",
          "13:         sslFnKey    :'privkey.pem', // File name in sslDir of key.",
          "14:         wsOpts      : {},           // Websocket options.",
          "15:         wsdebug     : 0,            // WebSockets debug level.",
          "16:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:             update(200);",
          "137:             LogTrace(\"UPDATE\");",
          "138:         }",
          "140:         if (self.response !== '')",
          "141:             return self.response;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1597:             }",
          "1598:             case OP_NEXT: {",
          "1599:                 Jsi_Value *toq = _jsi_TOQ, *top = _jsi_TOP;",
          "1601:                 if (top->vt != JSI_VT_VARIABLE) {",
          "1602:                     rc = Jsi_LogError (\"invalid for/in left hand-side\");",
          "1603:                     break;",
          "",
          "[Removed Lines]",
          "1600:                 if (toq->vt != JSI_VT_OBJECT || toq->d.obj->ot != JSI_OT_ITER) Jsi_LogBug(\"next: toq not a iter\\n\");",
          "",
          "[Added Lines]",
          "1600:                 if (toq->vt != JSI_VT_OBJECT || toq->d.obj->ot != JSI_OT_ITER)",
          "1601:                     Jsi_LogBug(\"next: toq not a iter\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1613:                 }",
          "1615:                 Jsi_IterObj *io = toq->d.obj->d.iobj;",
          "1617:                     io->iterCmd(io, top, _jsi_STACKIDX(fp->Sp-3), io->iter++);",
          "1618:                 } else {",
          "1619:                     while (io->iter < io->count) {",
          "1620:                         if (!io->isArrayList) {",
          "1622:                                 break;",
          "1623:                         } else {",
          "1624:                             while (io->cur < io->obj->arrCnt) {",
          "",
          "[Removed Lines]",
          "1616:                 if (io->iterCmd) {",
          "1621:                             if (io->isgetter || Jsi_ValueKeyPresent(interp, _jsi_STACKIDX(fp->Sp-3), io->keys[io->iter],1))",
          "",
          "[Added Lines]",
          "1617:                 if (io->iterCmd) { // TODO: not implemented yet",
          "1622:                             if (io->isgetter)",
          "1623:                                 break;",
          "1624:                             if (Jsi_ValueKeyPresent(interp, _jsi_STACKIDX(fp->Sp-3), io->keys[io->iter],1))",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "881: } GlobData;",
          "883: static Jsi_OptionSpec GlobOptions[] = {",
          "885:     JSI_OPT(INT,    GlobData, maxDepth, .help=\"Maximum directory depth to recurse into\"),",
          "886:     JSI_OPT(INT,    GlobData, maxDiscard,.help=\"Maximum number of items to discard before giving up\"),",
          "887:     JSI_OPT(FUNC,   GlobData, dirFilter,.help=\"Filter function for directories, returning false to discard\", .flags=0, .custom=0, .data=(void*)\"dir:string\"),",
          "",
          "[Removed Lines]",
          "884:     JSI_OPT(STRING, GlobData, dir,      .help=\"The start directory: this path will not be prepended to results\"),",
          "",
          "[Added Lines]",
          "884:     JSI_OPT(STRING, GlobData, dir,      .help=\"The start directory: set in \\\"prefix\\\" to have this prepended to result\"),",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:         varargs = ss->varargs;",
          "350:         minArgs = (ss->firstDef>0 ? ss->firstDef-1 : ss->count);",
          "351:         maxArgs = ss->count;",
          "353:         if (func->retType == 0 && ss && ss->typeCnt == 0)",
          "355:     }",
          "356:     if (varargs) {",
          "357:         if (argc >= minArgs)",
          "",
          "[Removed Lines]",
          "352:         mis = (argc != ss->count);",
          "354:             return JSI_OK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "422: {",
          "423:     Jsi_Interp *interp = p->interp;",
          "425:         return;",
          "426:     if (name && isdigit(name[0]))",
          "427:         return;",
          "",
          "[Removed Lines]",
          "424:     if (interp->noCheck || name == NULL || !interp->typeCheck.funcdecl)",
          "",
          "[Added Lines]",
          "424:     if (interp->noCheck || name == NULL || (!interp->typeCheck.funcdecl && interp->inParse))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "556:             }",
          "572:                 }",
          "574:             }",
          "575:         }",
          "576:     }",
          "577:     return f;",
          "",
          "[Removed Lines]",
          "558:             if (interp->typeCheck.funcdecl) {",
          "559:                 Jsi_Func *fo = (Jsi_Func*)Jsi_HashGet(interp->staticFuncsTbl, (void*)name, 0);",
          "562:                 if (interp->typeCheck.funcdecl && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "563:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "564:                         if (line)",
          "565:                             interp->parseLine = line;",
          "566:                         Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->filePtr->fileName, fo->bodyline.first_line);",
          "567:                         if (line)",
          "568:                             interp->parseLine = NULL;",
          "569:                         jsi_TypeMismatch(interp);",
          "570:                     }",
          "573:                 Jsi_HashSet(interp->staticFuncsTbl, name, f);",
          "",
          "[Added Lines]",
          "558:             Jsi_Func *fo = (Jsi_Func*)Jsi_HashGet(interp->staticFuncsTbl, (void*)name, 0);",
          "561:             if (interp->typeCheck.funcdecl && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "562:                 if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "563:                     if (line)",
          "564:                         interp->parseLine = line;",
          "565:                     Jsi_LogWarn(\"possible signature mismatch for function '%s' at %.120s:%d\", name, fo->filePtr->fileName, fo->bodyline.first_line);",
          "566:                     if (line)",
          "567:                         interp->parseLine = NULL;",
          "568:                     jsi_TypeMismatch(interp);",
          "572:             Jsi_HashSet(interp->staticFuncsTbl, name, f);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "796:     }",
          "797:     if (!Jsi_Strcmp(ai1, \"-version\"))",
          "798:         ai1 = \"-v\";",
          "800:         switch (ai1[1]) {",
          "801:             case 'a':",
          "802:                 rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "",
          "[Removed Lines]",
          "799:     if (ai1[0] == '-') {",
          "",
          "[Added Lines]",
          "799:     if (ai1[0] == '-' && ai1[1] && !ai1[2]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1270:                             Jsi_ValueMakeStringKey(interp, &argValue, argVal);",
          "1271:                         }",
          "1272:                         if (JSI_OK != Jsi_OptionsSet(interp, InterpOptions, interp, argNam, argValue, 0)) {",
          "1273:                             Jsi_InterpDelete(interp);",
          "1274:                             return NULL;",
          "1275:                         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1273:                             Jsi_ValueReset(interp, &argValue);",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:     if (specPtr->custom  && specPtr->id == JSI_OPTION_CUSTOM) {",
          "246:         cust = Jsi_OptionCustomBuiltin(specPtr->custom);",
          "247:         if (cust && cust->parseProc) {",
          "249:             Jsi_OptionSpec *oep = interp->parseMsgSpec;",
          "250:             interp->parseMsgSpec = specPtr;",
          "251:             Jsi_RC rc = (*cust->parseProc)(interp, specPtr, argValue, NULL, record, flags);",
          "252:             if (rc != JSI_OK) {",
          "255:                 interp->parseMsgSpec = oep;",
          "256:                 return JSI_ERROR;",
          "257:             }",
          "",
          "[Removed Lines]",
          "248:             int lastErrCnt = interp->logErrorCnt;",
          "253:                 if (!interp->csc || lastErrCnt == interp->logErrorCnt)",
          "254:                     Jsi_LogError(\"invalid value\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/strict.jsi||tests/strict.jsi": [
          "File: tests/strict.jsi -> tests/strict.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "208: bar2() ==> e ==> function created global: \"j\"",
          "209: bar3() ==> e ==> function created global: \"k\"",
          "210: bar4() ==> e ==> function created global: \"l\"",
          "214: foo3() ==> e ==> got 0 args, expected 1, calling function foo3(n:string)",
          "215: foo3(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo3' declared at strict.jsi:78.2 <1>.",
          "216: foo4(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo4' declared at strict.jsi:91.2 <1>.",
          "",
          "[Removed Lines]",
          "211: foo1(1) ==> undefined",
          "212: foo2() ==> undefined",
          "213: foo2(1,2) ==> undefined",
          "",
          "[Added Lines]",
          "211: foo1(1) ==> e ==> got 1 args, expected 0, calling function foo1()",
          "212: foo2() ==> e ==> got 0 args, expected 1, calling function foo2(n)",
          "213: foo2(1,2) ==> e ==> got 2 args, expected 1, calling function foo2(n)",
          "",
          "---------------"
        ],
        "tools/mdanal.jsi||tools/mdanal.jsi": [
          "File: tools/mdanal.jsi -> tools/mdanal.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "3: function mdanal(args:string|array, opts) {",
          "5:     var options = { // Analyse markdown",
          "6:     };",
          "7:     var self = {",
          "8:         fdata:{},",
          "9:         flabels:{},",
          "10:         flinks:{},",
          "11:         fblocks:{},",
          "12:         aflist:[],",
          "13:     };",
          "14:     moduleOpts(options);",
          "16:     function dputs(...) {}",
          "18:     function slugify(s) {",
          "19:         s = s.toLowerCase().trim();",
          "20:         s = s.replace(/`~!@#$%^&*()_\\-+=\\[\\]\\{\\};:'\"\\\\|\\/,.<>?\\s]/g, ' ');",
          "21:         s = s.map(['\\\"', '', '    ', ' ', '   ', ' ', '  ', ' ', ' ', '-']);",
          "23:         return s;",
          "24:     }",
          "26:     function analOne(fn:string) {",
          "27:         var tr, j, r, t, d, f, i, th;",
          "28:         var lst = [fn];",
          "29:         if (File.isdir(fn)) {",
          "30:             if (fn[fn.length-1]!='/') fn+='/';",
          "31:             lst = File.glob('*.md', {dir:fn, prefix:fn, tails:true});",
          "32:         }",
          "33:         dputs('LST', lst);",
          "34:         var re = /^#+ [^#]+$/gm,",
          "36:             rel = /\\[[^]]+\\]\\([^)]+\\)/gm,",
          "37:             reb = /```.*```/g;",
          "38:         var aflist = [];",
          "39:         for (i of lst) {",
          "40:             f = File.tail(i);",
          "41:             aflist.push(f);",
          "42:         }",
          "43:         for (i of lst) {",
          "44:             f = File.tail(i);",
          "45:             dputs(\"DO HEADERS\", i);",
          "46:             d = self.fdata[f] = File.read(i);",
          "47:             r = d.match(re);",
          "48:             t = [];",
          "49:             if (r) {",
          "50:                 for (j of r) {",
          "51:                     tr = j.match(/ [^#]+/);",
          "52:                     if (tr)",
          "53:                         t.push(slugify(tr[0].trim()));",
          "54:                 }",
          "55:             }",
          "56:             dputs('R', t);",
          "57:             self.flabels[f] = t;",
          "59:             r = d.match(rel);",
          "60:             dputs('DO LINKS', r);",
          "61:             t = [];",
          "62:             if (r) {",
          "63:                 for (j of r) {",
          "64:                     tr = j.match(/\\(.*\\)+/);",
          "65:                     if (tr) {",
          "66:                         var ta;",
          "67:                         tr = tr[0];",
          "68:                         tr = tr.substr(1,tr.length-2).split('\"')[0];",
          "69:                         if (tr[0] == '#') {",
          "70:                             var tr0a = slugify(tr.substr(1));",
          "71:                             if (self.flabels[f].indexOf(tr0a)<0)",
          "72:                                 puts(\"IN\", f, \"LOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "73:                             continue;",
          "75:                         } else {",
          "76:                             if (tr.indexOf('://')>0) continue;",
          "77:                             th = tr.trim().split('#');",
          "78:                             var t0 = th[0].trim();",
          "79:                             if (aflist.indexOf(t0)<0) {",
          "80:                                 puts('IN',f,'FILE NOT FOUND:\"'+t0+'\" FROM \"'+tr+'\"');",
          "81:                                 continue;",
          "82:                             }",
          "83:                             if (th.length!=2)",
          "85:                                 continue;",
          "86:                             else",
          "87:                                 ta = th[0] + '#' + th[1];",
          "88:                         }",
          "89:                         t.push(ta.trim());",
          "90:                     }",
          "91:                 }",
          "92:             }",
          "93:             self.flinks[f] = t;",
          "94:             dputs('L', t);",
          "95:             r = d.match(reb);",
          "96:             dputs('DO BLOCKS', r);",
          "97:             self.fblocks[f] = r;",
          "98:         }",
          "99:         for (f in self.flinks) {",
          "100:             var fl = self.flinks[f];",
          "101:             if (!fl) {log('no links',f); continue; }",
          "102:             dputs(f,'fl',fl);",
          "103:             for (tr of fl) {",
          "104:                 th = tr.trim().split('#');",
          "105:                 if (th.length!=2) {",
          "107:                     continue;",
          "108:                 } else {",
          "109:                     var x0 = th[0].trim();",
          "110:                     ta = x0 + '#' + th[1];",
          "111:                     var xx = self.flabels[x0];",
          "112:                     if (!xx || xx.indexOf(th[1].toLowerCase())<0)",
          "113:                         puts(\"IN\", f, \"NONLOCAL-LINK TO UNKNOWN SECTION:\", tr);",
          "114:                 }",
          "115:             }",
          "116:         }",
          "118:     }",
          "120:     if (typeof(args) !== 'array')",
          "121:         args = [args];",
          "122:     for (var i of args)",
          "123:         analOne(i);",
          "126: }",
          "128: moduleRun(mdanal);",
          "",
          "---------------"
        ],
        "tools/mkref.jsi||tools/mkref.jsi": [
          "File: tools/mkref.jsi -> tools/mkref.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: function mkref(args:array|string, opts:object) {",
          "5:     var options = { // Generate documentation for Jsi builtin cmd.",
          "7:     };",
          "8:     var self = moduleOpts(options);",
          "",
          "[Removed Lines]",
          "6:         md       :true         // Generate for markdown",
          "",
          "[Added Lines]",
          "6:         O        :'',       // Output file",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:     function DumpOpts(opts:array, hlp:string, nam:string, nam2:string=void) {",
          "17:         var rv = '', ci, srv = '', cnt = 0, help, flags, type, nsrv, o;",
          "53:                     }",
          "54:                 }",
          "100:                 }",
          "104:             }",
          "107:         }",
          "108:         if (srv !== '') {",
          "109:             if (optsDumped.indexOf(srv)>=0)",
          "110:                 srv = '';",
          "",
          "[Removed Lines]",
          "18:         if (self.md) {",
          "19:             rv += '### Options \"'+nam+'\"\\n';",
          "20:             rv += \"|Option|Type|Description|Flags|\\n\";",
          "21:             rv += \"|---|---|---|---|\\n\";",
          "23:             for (o in opts) {",
          "24:                 ci = opts[o];",
          "25:                 if (isconf && ci.initOnly) continue;",
          "26:                 cnt++;",
          "27:                 help = (ci.help?ci.help+'.':'');",
          "28:                 flags = '';",
          "29:                 if (ci.readOnly)",
          "30:                     flags += 'readOnly';",
          "31:                 if (ci.initOnly)",
          "32:                     flags += (flags===''?'':'|')+'initOnly';",
          "33:                 if (ci.required)",
          "34:                     flags += (flags===''?'':'|')+'required';",
          "35:                 if (ci.noCase)",
          "36:                     flags += (flags===''?'':'|')+'noCase';",
          "37:                 type = ci.type;",
          "38:                 if (ci.customArg) {",
          "39:                     if (ci.customArg.subSpec) {",
          "40:                         nsrv = DumpOpts(ci.customArg.subSpec, ci.customArgHelp, ci.name);",
          "41:                         if (nsrv !== '') {",
          "42:                             type='[Options](#options-'+ci.name+')';",
          "43:                             srv += nsrv;",
          "44:                         }",
          "45:                     }",
          "46:                     else if (ci.customArg.enumList) {",
          "47:                         help += \" (one of: **\"+ci.customArg.enumList.join(\"**, **\")+\"**)\";",
          "48:                         type=\"STRKEY\";",
          "49:                     }",
          "50:                     else if (ci.customArg.bitSet) {",
          "51:                         help += \" (zero or more of: **\"+ci.customArg.bitSet.join(\"**, **\")+\"**)\";",
          "52:                         type=\"ARRAY\";",
          "55:                 if (ci.args !== undefined && ci.type === 'FUNC')",
          "56:                 help += \" @`function(\"+ci.args+\")`\";",
          "57:                 rv += \"|\"+ci.name+\"|*\"+type+\"*|\"+ help +\"|\"+tblEsc(flags)+\"|\\n\";",
          "58:             }",
          "59:             if (!cnt) return '';",
          "60:         } else {",
          "61:             rv += '\\n\\n<a name=\"'+nam+'Options\"></a>\\n';",
          "62:             if (nam2)",
          "63:                 rv += '<a name=\"'+nam2+'Options\"></a>\\n';",
          "64:             rv += '<h2>Options for \"'+nam+'\"</h2>\\n'; //+hlp;",
          "65:             rv += '<table border=\"1\" class=\"optstbl table\">\\n';",
          "66:             rv += \"<tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>\\n\";",
          "68:             srv = '', cnt = 0;",
          "69:             for (o in opts) {",
          "70:                 ci = opts[o];",
          "71:                 if (isconf && ci.initOnly) continue;",
          "72:                 cnt++;",
          "73:                 help = (ci.help?ci.help+'.':'');",
          "74:                 flags = '';",
          "75:                 if (ci.readOnly)",
          "76:                     flags += 'readOnly';",
          "77:                 if (ci.initOnly)",
          "78:                     flags += (flags===''?'':'|')+'initOnly';",
          "79:                 if (ci.required)",
          "80:                     flags += (flags===''?'':'|')+'required';",
          "81:                 if (ci.noCase)",
          "82:                     flags += (flags===''?'':'|')+'noCase';",
          "83:                 type = ci.type;",
          "84:                 if (ci.customArg) {",
          "85:                     if (ci.customArg.subSpec) {",
          "86:                         nsrv = DumpOpts(ci.customArg.subSpec, ci.customArgHelp, ci.name);",
          "87:                         if (nsrv !== '') {",
          "88:                             type=\"<a href='#\"+ci.name+\"Options'>options</a>\";",
          "89:                             srv += nsrv;",
          "90:                         }",
          "91:                     }",
          "92:                     else if (ci.customArg.enumList) {",
          "93:                         help += \" (one of: <b>\"+ci.customArg.enumList.join(\"</b>, <b>\")+\"</b>)\";",
          "94:                         type=\"STRKEY\";",
          "95:                     }",
          "96:                     else if (ci.customArg.bitSet) {",
          "97:                         help += \" (zero or more of: <b>\"+ci.customArg.bitSet.join(\"</b>, <b>\")+\"</b>)\";",
          "98:                         type=\"ARRAY\";",
          "99:                     }",
          "101:                 if (ci.args !== undefined && ci.type === 'FUNC')",
          "102:                     help += \" @function(\"+ci.args+\")\";",
          "103:                 rv += \"<tr><td>\"+ci.name+\"</td><td><i>\"+type+\"</i></td><td>\"+ help +\"</td><td><i>\"+flags+\"</i></td></tr>\\n\";",
          "105:             if (!cnt) return '';",
          "106:             rv += \"</table>\\n\";",
          "",
          "[Added Lines]",
          "18:         let nnam = nam;",
          "19:         if (nam2)",
          "20:             nnam += ' '+nam2;",
          "21:         let lnnam = nnam.map([' ', '-']);",
          "22:         rv += '### '+nnam+'\\n';",
          "23:         rv += \"|Option|Type|Description|Flags|\\n\";",
          "24:         rv += \"|---|---|---|---|\\n\";",
          "26:         for (o in opts) {",
          "27:             ci = opts[o];",
          "28:             if (isconf && ci.initOnly) continue;",
          "29:             cnt++;",
          "30:             help = (ci.help?ci.help+'.':'');",
          "31:             flags = '';",
          "32:             if (ci.readOnly)",
          "33:                 flags += 'readOnly';",
          "34:             if (ci.initOnly)",
          "35:                 flags += (flags===''?'':'|')+'initOnly';",
          "36:             if (ci.required)",
          "37:                 flags += (flags===''?'':'|')+'required';",
          "38:             if (ci.noCase)",
          "39:                 flags += (flags===''?'':'|')+'noCase';",
          "40:             type = ci.type;",
          "41:             if (ci.customArg) {",
          "42:                 if (ci.customArg.subSpec) {",
          "43:                     nsrv = DumpOpts(ci.customArg.subSpec, ci.customArgHelp, nam, ci.name);",
          "44:                     if (nsrv !== '') {",
          "45:                         type='[Options](#'+nam+'-'+ci.name+')';",
          "46:                         srv += nsrv;",
          "49:                 else if (ci.customArg.enumList) {",
          "50:                     help += \" (one of: **\"+ci.customArg.enumList.join(\"**, **\")+\"**)\";",
          "51:                     type=\"STRKEY\";",
          "52:                 }",
          "53:                 else if (ci.customArg.bitSet) {",
          "54:                     help += \" (zero or more of: **\"+ci.customArg.bitSet.join(\"**, **\")+\"**)\";",
          "55:                     type=\"ARRAY\";",
          "58:             if (ci.args !== undefined && ci.type === 'FUNC')",
          "59:             help += \" @`function(\"+ci.args+\")`\";",
          "60:             rv += \"|\"+ci.name+\"|*\"+type+\"*|\"+ help +\"|\"+tblEsc(flags)+\"|\\n\";",
          "62:         if (!cnt) return '';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         if (cinf.retType != \"any\")",
          "119:             ret = ':'+cinf.retType;",
          "120:         var cnam = format(\"%s(%s)%s\", cinf.name, cinf.args, ret);",
          "135:         if (cinf.help)",
          "136:             rv += cinf.help+\".\\n\\n\";",
          "137:         if (cinf.info)",
          "",
          "[Removed Lines]",
          "121:         if (self.md) {",
          "122:             rv += '\\n---\\n';",
          "123:             rv += '\\n\\n## '+cinf.name+'\\n\\n';",
          "124:             casb = tblEsc(cinf.args); //.replace('|','&verbar;');",
          "125:             rv += format(\"- `function %s(%s)%s`\\n\\n\", cinf.name, casb, tblEsc(ret.trim()));",
          "126:         } else {",
          "127:             if (cinf.name.indexOf('.')<0)",
          "128:                 index += \"<a href='#\"+cinf.name+\"'>\"+cinf.name+\"</a>\\n\";",
          "129:             rv += '<a name=\"'+cinf.name+'\"></a>\\n';",
          "130:             rv += '\\n<hr>\\n';",
          "131:             rv += '\\n\\n<h1>'+cinf.name+'</h1>\\n\\n';",
          "132:             casb = tblEsc(cinf.args); //.replace('|','&verbar;');",
          "133:             rv += format(\"<font color=red>Synopsis: %s(%s)%s</font><p>\\n\\n\", cinf.name, casb, ret);",
          "134:         }",
          "",
          "[Added Lines]",
          "76:         rv += '\\n---\\n';",
          "77:         rv += '\\n\\n## '+cinf.name+'\\n\\n';",
          "78:         casb = tblEsc(cinf.args); //.replace('|','&verbar;');",
          "79:         rv += format(\"- `function %s(%s)%s`\\n\\n\", cinf.name, casb, tblEsc(ret.trim()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:         var ss = '';",
          "152:         if (ii>0)",
          "153:             ss += astr.slice(0, ii);",
          "159:         ss += astr.slice(ii+7);",
          "160:         return ss;",
          "161:     }",
          "",
          "[Removed Lines]",
          "154:         if (self.md)",
          "156:             ss='[options](#options-'+name.toLowerCase()+')';",
          "157:         else",
          "158:             ss += \"<a href='#\"+name+\"Options'>options</a>\";",
          "",
          "[Added Lines]",
          "100:         ss='[options](#'+name.toLowerCase()+')';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:         var hasconf, ro = '', rv = '', ci, cnam = tinf.name, subs=[], ret = '', cmds, casb,xsep = '.';",
          "165:         var re1 = new RegExp('^'+cnam+'.[_a-zA-Z0-9]+$');",
          "166:         cmds = Info.cmds(re1,{constructor:true,full:true});",
          "187:         } else {",
          "210:         }",
          "212:         var clnknam = null;",
          "213:         if (tinf.constructor) {",
          "",
          "[Removed Lines]",
          "167:         if (self.md) {",
          "168:             xsep = '';",
          "169:             rv += '\\n\\n## '+cnam+'\\n\\n';",
          "171:             if (tinf.constructor) {",
          "172:                 if (tinf.retType != \"any\")",
          "173:                     ret = ':'+tinf.retType;",
          "174:                 casb = tblEsc(tinf.args); //.replace('|','&verbar;');",
          "176:             } else {",
          "178:             }",
          "179:             rv += \"\\n\\n\";",
          "180:             if (tinf.help)",
          "181:                 rv += tinf.help+\".\\n\\n\";",
          "182:             if (tinf.info)",
          "183:                 rv += tinf.info+'\\n\\n';",
          "184:             rv += \"\\n### Methods\\n\";",
          "185:             rv += '|Method|Function Argument Types|Description|\\n';",
          "186:             rv += '|---|---|---|\\n';",
          "188:             if (tinf.name.indexOf('.')<0)",
          "189:                 index += \"<a href='#\"+tinf.name+\"'>\"+cnam+\"</a>\\n\";",
          "190:             rv += '<a name=\"'+tinf.name+'\"></a>\\n';",
          "191:             rv += '\\n<hr>\\n';",
          "192:             rv += '\\n\\n<h1>'+cnam+'</h1>\\n\\n';",
          "193:             rv += \"<font color=red>Synopsis:\";",
          "194:             if (tinf.constructor) {",
          "195:                 if (tinf.retType != \"any\")",
          "196:                     ret = ':'+tinf.retType;",
          "197:                 casb = tblEsc(tinf.args); //.replace('|','&verbar;');",
          "198:                 rv += 'new '+cnam+\"(\"+casb+\")\"+tblEsc(ret)+\"\\n\\n\";",
          "199:             } else {",
          "200:                 rv += cnam+\".method(...)\\n\\n\";",
          "201:             }",
          "202:             rv += \"</font><p>\";",
          "203:             if (tinf.help)",
          "204:                 rv += tinf.help+\".\\n\\n\";",
          "205:             if (tinf.info)",
          "206:                 rv += tinf.info+'\\n\\n';",
          "207:             rv += \"\\n<h2>Methods for \\\"\"+cnam+\"\\\"</h2>\\n\";",
          "208:             rv += '<table border=\"1\"class=\"cmdstbl table\">\\n';",
          "209:             rv += '<tr><th>Method</th><th>Prototype</th><th>Description</th></tr>\\n';",
          "",
          "[Added Lines]",
          "109:         xsep = '';",
          "110:         rv += '\\n\\n## '+cnam+'\\n\\n';",
          "112:         if (tinf.constructor) {",
          "113:             if (tinf.retType != \"any\")",
          "114:                 ret = ':'+tinf.retType;",
          "115:             casb = tblEsc(tinf.args); //.replace('|','&verbar;');",
          "120:         rv += \"\\n\\n\";",
          "121:         if (tinf.help)",
          "122:             rv += tinf.help+\".\\n\\n\";",
          "123:         if (tinf.info)",
          "124:             rv += tinf.info+'\\n\\n';",
          "126:         rv += '|Method|Function Argument Types|Description|\\n';",
          "127:         rv += '|---|---|---|\\n';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218:             if (ci.info) conhelp += ci.info;",
          "219:             aastr = tinf.args;",
          "220:             if (tinf.options)",
          "226:         }",
          "227:         if (cmds !== undefined) {",
          "228:             for (var cmd of cmds) {",
          "",
          "[Removed Lines]",
          "221:                 aastr = LinkOpts(aastr, \"new\"+cnam);",
          "222:             if (self.md)",
          "223:                 rv += \"|\"+cnam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "224:             else",
          "225:                 rv += \"<tr><td>\"+cnam+\"</td><td>new \"+cnam+\"(\"+aastr+\")\"+tret+\" </td><td>\"+conhelp+'</td></tr>\\n';",
          "",
          "[Added Lines]",
          "138:                 aastr = LinkOpts(aastr, cnam+\"-new\");",
          "139:             rv += \"|\"+cnam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:                 if (ci.info) conhelp += ' '+ci.info;",
          "238:                 if (ci.options) {",
          "239:                     if (!clnknam) clnknam=nam;",
          "243:                 } else {",
          "244:                     aastr = ci.args;",
          "245:                 }",
          "252:                 if (ci.flags && ci.flags&8)",
          "253:                     subs.push(ci);",
          "254:             }",
          "255:         }",
          "268:         for (ci of subs)",
          "269:             rv += DumpObj(ci);",
          "270:         return rv;",
          "",
          "[Removed Lines]",
          "240:                     if (!tinf.constructor || nam !== 'conf')",
          "241:                         ro += DumpOpts(ci.options, ci.optHelp, cnam+'.'+nam, cnam+'.conf');",
          "242:                     aastr = LinkOpts(ci.args, cnam+xsep+nam);",
          "248:                 if (self.md)",
          "249:                     rv += \"|\"+nam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "250:                 else",
          "251:                     rv += \"<tr><td>\"+nam+\"</td><td>\"+nam+\"(\"+aastr+\")\"+tret+\" </td><td>\"+conhelp+'</td></tr>\\n';",
          "256:         if (self.md) {",
          "257:             if (tinf.options && nam !== 'conf')",
          "258:                 rv += DumpOpts(tinf.options, tinf.optHelp, 'new', cnam+'.'+'conf');",
          "259:             rv += ro;",
          "260:         } else {",
          "261:             rv += \"</table>\\n\";",
          "262:             if (tinf.options && nam !== 'conf')",
          "263:                 rv += DumpOpts(tinf.options, tinf.optHelp, 'new '+cnam, cnam+'.'+'conf');",
          "264:             rv += ro;",
          "265:             rv += '<a name=\"'+tinf.name+'end\"></a>\\n';",
          "266:             rv += '<p><a href=\"#TOC\">Return to top</a>\\n';",
          "267:         }",
          "",
          "[Added Lines]",
          "154:                     if (!tinf.constructor || nam !== 'conf') {",
          "155:                         ro += DumpOpts(ci.options, ci.optHelp, cnam+' '+nam);",
          "156:                     }",
          "157:                     var xcnam = cnam+'-'+(nam!='conf'||!tinf.constructor?nam:'new');",
          "158:                     aastr = LinkOpts(ci.args, xcnam);",
          "162:                 rv += \"|\"+nam+\"|(\"+tblEsc(aastr)+\")\"+tblEsc(tret)+\" |\"+conhelp.map(['\\n',' '])+'|\\n';",
          "167:         if (tinf.options && nam !== 'conf')",
          "168:             rv += DumpOpts(tinf.options, tinf.optHelp, cnam, 'new');",
          "169:         rv += ro;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "276:     for (var i in extlst) {",
          "277:         try { require(extlst[i]); } catch(e) { }",
          "278:     }",
          "280:     var vv = Info.version(true);",
          "281:     var ver = vv.major+'.'+vv.minor+'.'+vv.release;",
          "289:     for (i in lst) {",
          "290:         tinf = Info.cmds(lst[i]);",
          "291:         switch (tinf.type) {",
          "",
          "[Removed Lines]",
          "279:     var rv = '', tinf, lst = Info.cmds();",
          "283:     if (self.md)",
          "284:         puts(\"# Reference\\nThe generated reference for Jsi builtin commands.\\n\");",
          "285:     else",
          "286:         puts(\"<title>Reference</title>\\n<p>\");",
          "287:     var index = \"\";",
          "",
          "[Added Lines]",
          "181:     var tinf, lst = Info.cmds();",
          "185:     var rv = \"# Reference\\n[Back to Index](Index.md \\\"Goto Jsi Documentation Index\\\")\\n\\nThe generated reference for Jsi builtin commands.\\n\";",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "300:             continue;",
          "301:         }",
          "302:     }",
          "324: }",
          "326: runModule(mkref);",
          "",
          "[Removed Lines]",
          "303:     if (self.md) {",
          "304:     } else {",
          "305:         index + \"\\n\";",
          "306:         var rlnks = '', resfx = '', repre = '<div id=\"sectmenu\" data-opts=\"closed:false\"></div><B>JSI REFERENCE</B>: <a href=\"#System\">System</a> contains global methods\\n';",
          "307:         if (self.md) {",
          "310:             index = '';",
          "315:         } else {",
          "316:             rlnks = '(Related: [./functions.wiki|Functions], [./language.wiki|Syntax]).\\n'",
          "317:                 + '<p>\\n<a name=\"TOC\"></a>\\n';",
          "318:             index += '<nowiki>\\n';",
          "319:             rv += \"</nowiki>\";",
          "320:         }",
          "321:         return repre + rlnks + index + rv + \"<p>\" + resfx;",
          "322:     }",
          "323:     puts(rv);",
          "",
          "[Added Lines]",
          "201:     if (self.O != '')",
          "202:         File.write(self.O, rv);",
          "203:     else",
          "204:         puts(rv);",
          "",
          "---------------"
        ],
        "tools/mktoc.jsi||tools/mktoc.jsi": [
          "File: tools/mktoc.jsi -> tools/mktoc.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: function mktoc(args:array, conf:object) {",
          "6:     var options = {// Generate documentation table of contents from headers <h1> <h2>...",
          "8:         numberHdrs:false,   // Add section numbers to headers",
          "9:         update:false        // Update file in place.",
          "10:     };",
          "",
          "[Removed Lines]",
          "7:         debug:true,         // Enable debugging",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: ';",
          "92:             rc = idxtoc + rc;",
          "93:             if (oldtoc === rc) {",
          "96:                 return;",
          "97:             }",
          "98:             var ndat = tpre + '<div id=wikitoc>\\n' + rc + '</div>\\n' + tpost;",
          "",
          "[Removed Lines]",
          "95:                     console.log(\"nothing to do\");",
          "",
          "[Added Lines]",
          "93:                 console.log(\"nothing to do\");",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Reference",
          "2: The generated reference for Jsi builtin commands.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: [Back to Index](Index.md \"Goto Jsi Documentation Index\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: Provide access to array objects.",
          "14: |Method|Function Argument Types|Description|",
          "15: |---|---|---|",
          "16: |Array|(...):array |jsi_Array constructor.|",
          "",
          "[Removed Lines]",
          "13: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: |sizeOf|():number |Return size of array.|",
          "38: |slice|(start:number, end:number=void):array |Return sub-array.|",
          "39: |some|(callback:function, thisArg:object=void):boolean |Return true if function returns true some element.|",
          "41: |splice|(start:number, howmany:number=void, ...):array |Change the content of an array, adding new elements while removing old elements.|",
          "42: |unshift|(...):number |Add new elements to start of array and return size.|",
          "44: |Option|Type|Description|Flags|",
          "45: |---|---|---|---|",
          "46: |mode|*STRKEY*|Mode to sort by. (one of: **default**, **desc**, **dict**, **nocase**)||",
          "",
          "[Removed Lines]",
          "40: |sort|([options](#options-arraysort):function&#124;object=void):array |Sort an array.|",
          "43: ### Options \"Array.sort\"",
          "",
          "[Added Lines]",
          "40: |sort|([options](#array-sort):function&#124;object=void):array |Sort an array.|",
          "43: ### Array sort",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55: A Boolean object.",
          "59: |Method|Function Argument Types|Description|",
          "60: |---|---|---|",
          "61: |Boolean|(bool:boolean=false):boolean |Boolean constructor.|",
          "",
          "[Removed Lines]",
          "58: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68: Commands for accessing Channel objects for file IO.",
          "72: |Method|Function Argument Types|Description|",
          "73: |---|---|---|",
          "74: |Channel|(file:string, mode:string='r'):userobj |A file input/output object. The mode string is r or w and an optional +.|",
          "",
          "[Removed Lines]",
          "71: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96: Event management.",
          "100: |Method|Function Argument Types|Description|",
          "101: |---|---|---|",
          "102: |clearInterval|(id:number):void |Delete an event (created with setInterval/setTimeout).|",
          "",
          "[Removed Lines]",
          "99: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "104: |names|():array |Return list event ids (created with setTimeout/setInterval).|",
          "105: |setInterval|(callback:function, millisecs:number):number |Setup recurring function to run every given millisecs.|",
          "106: |setTimeout|(callback:function, millisecs:number):number |Setup function to run after given millisecs.|",
          "109: |Option|Type|Description|Flags|",
          "110: |---|---|---|---|",
          "111: |maxEvents|*INT*|Maximum number of events to process (or -1 for all).||",
          "",
          "[Removed Lines]",
          "107: |update|([options](#options-eventupdate):number&#124;object=void):number |Service all events, eg. setInterval/setTimeout. Returns the number of events processed. Events are processed until minTime (in milliseconds) is exceeded, or forever if -1. The default minTime is 0, meaning return as soon as no events can be processed. A positive mintime will result in sleeps between event checks.|",
          "108: ### Options \"Event.update\"",
          "",
          "[Added Lines]",
          "101: |update|([options](#event-update):number&#124;object=void):number |Service all events, eg. setInterval/setTimeout. Returns the number of events processed. Events are processed until minTime (in milliseconds) is exceeded, or forever if -1. The default minTime is 0, meaning return as soon as no events can be processed. A positive mintime will result in sleeps between event checks.|",
          "102: ### Event update",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "121: Commands for accessing the filesystem.",
          "125: |Method|Function Argument Types|Description|",
          "126: |---|---|---|",
          "127: |atime|(file:string):number |Return file Jsi_Access time.|",
          "",
          "[Removed Lines]",
          "124: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "132: |executable|(file:string):boolean |Return true if file is executable.|",
          "133: |exists|(file:string):boolean |Return true if file exists.|",
          "134: |extension|(file:string):string |Return file extension.|",
          "136: |isdir|(file:string):boolean |Return true if file is a directory.|",
          "137: |isfile|(file:string):boolean |Return true if file is a normal file.|",
          "138: |isrelative|(file:string):boolean |Return true if file path is relative.|",
          "",
          "[Removed Lines]",
          "135: |glob|([options](#options-fileglob):function&#124;object&#124;null=void):array |Return list of files in dir with optional pattern match. With no arguments (or null) returns all files/directories in current directory. The first argument can be a pattern (either a glob or regexp) of the files to return. When the second argument is a function, it is called with each path, and filter on false. Otherwise second argument must be a set of options.|",
          "",
          "[Added Lines]",
          "127: |glob|([options](#file-glob):function&#124;object&#124;null=void):array |Return list of files in dir with optional pattern match. With no arguments (or null) returns all files/directories in current directory. The first argument can be a pattern (either a glob or regexp) of the files to return. When the second argument is a function, it is called with each path, and filter on false. Otherwise second argument must be a set of options.|",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "159: |truncate|(file:string, size:number) |Truncate file.|",
          "160: |writable|(file:string):boolean |Return true if file is writable.|",
          "161: |write|(file:string, str:string, mode:string='wb+'):number |Write a file.|",
          "163: |Option|Type|Description|Flags|",
          "164: |---|---|---|---|",
          "166: |maxDepth|*INT*|Maximum directory depth to recurse into.||",
          "167: |maxDiscard|*INT*|Maximum number of items to discard before giving up.||",
          "168: |dirFilter|*FUNC*|Filter function for directories, returning false to discard. @`function(dir:string)`||",
          "",
          "[Removed Lines]",
          "162: ### Options \"File.glob\"",
          "165: |dir|*STRING*|The start directory: this path will not be prepended to results.||",
          "",
          "[Added Lines]",
          "154: ### File glob",
          "157: |dir|*STRING*|The start directory: set in \"prefix\" to have this prepended to result.||",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "184: Commands for accessing functions.",
          "188: |Method|Function Argument Types|Description|",
          "189: |---|---|---|",
          "190: |Function|():function |Function constructor (unimplemented).|",
          "",
          "[Removed Lines]",
          "187: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "200: Commands for inspecting internal state information in JSI.",
          "204: |Method|Function Argument Types|Description|",
          "205: |---|---|---|",
          "206: |argv0|():string&#124;void |Return initial start script file name.|",
          "208: |completions|(str:string, start:number=0, end:number=void):array |Return command completions on portion of string from start to end.|",
          "209: |data|(val:string&#124;regexp&#124;object=void):array&#124;object |Return list of matching data (non-functions). Like info.vars(), but does not return function values.|",
          "210: |error|():object |Return file and line number of error (used inside catch).|",
          "",
          "[Removed Lines]",
          "203: ### Methods",
          "207: |cmds|([options](#options-infocmds):object=void):array&#124;object |Return details or list of matching commands.|",
          "",
          "[Added Lines]",
          "195: |cmds|([options](#info-cmds):object=void):array&#124;object |Return details or list of matching commands.|",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "229: |scriptDir|():string&#124;void |Get directory of current script.|",
          "230: |vars|(val:string&#124;regexp&#124;object=void):array&#124;object |Return details or list of matching variables. Returns all values, data or function.|",
          "231: |version|(full:boolean=false):number&#124;object |JSI version: returns object when full=true.|",
          "233: |Option|Type|Description|Flags|",
          "234: |---|---|---|---|",
          "235: |full|*BOOL*|Return full path.||",
          "",
          "[Removed Lines]",
          "232: ### Options \"Info.cmds\"",
          "",
          "[Added Lines]",
          "220: ### Info cmds",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "243: Commands for accessing interps.",
          "247: |Method|Function Argument Types|Description|",
          "248: |---|---|---|",
          "250: |alias|(name:string=void, func:function&#124;null=void, args:array&#124;null=void, async=false) |Set/get global alias bindings for command in an interp. With 0 args, returns list of all aliases in interp. With 1 arg returns func for given alias name. With 2 args where arg2 == null, returns args for given alias name . With 3 args, create/update an alias for func and args.  Delete an alias by creating it with null for both func and args.|",
          "251: |call|(funcName:string, args:array, wait:boolean=false) |Call named function in subinterp. Invoke function in sub-interp with arguments. Since interps are not allowed to share objects, data is automatically cleansed by encoding/decoding to/from JSON if required. Unless an 'async' parameter is true call is acyncronous. Otherwise waits until the sub-interp is idle, to make call and return result.|",
          "253: |eval|(js:string, async:boolean=false) |Interpret script within sub-interp. When the 'async' option is used on a threaded interp, the script is queued as an Event.|",
          "254: |info|():object |Returns internal statistics about interp.|",
          "255: |source|(file:string, async:boolean=false) |Interpret file within sub-interp. When the 'async' option is used on a threaded interp, the script is queued as an Event.|",
          "256: |uplevel|(js:string, level:number=0) |Interpret code at the given stack level. The level argument is as returned by Info.level().  Not supported with threads.|",
          "257: |value|(varName:string, level:number=0) |Lookup value of variable at stack level.|",
          "259: |Option|Type|Description|Flags|",
          "260: |---|---|---|---|",
          "261: |args|*ARRAY*|The console.arguments for interp.|initOnly|",
          "",
          "[Removed Lines]",
          "246: ### Methods",
          "249: |Interp|([options](#options-newinterp):object=void):userobj |Create a new interp.|",
          "252: |conf|([options](#options-interpconf):string&#124;object=void) |Configure option(s).|",
          "258: ### Options \"new\"",
          "",
          "[Added Lines]",
          "235: |Interp|([options](#interp-new):object=void):userobj |Create a new interp.|",
          "238: |conf|([options](#interp-new):string&#124;object=void) |Configure option(s).|",
          "244: ### Interp new",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "265: |busyInterval|*INT*|Call busyCallback command after this many op-code evals (100000).||",
          "266: |confFile|*STRKEY*|Config file of options in JSON non-strict format.|initOnly|",
          "267: |coverage|*BOOL*|On exit generate detailed code coverage for function calls (with profile).||",
          "269: |interactive|*BOOL*|Force interactive mode. ie. ignore no_interactive flag.|initOnly|",
          "270: |hasOpenSSL|*BOOL*|WebSocket compiled with SSL is available.|initOnly|",
          "271: |historyFile|*STRKEY*|For readline, file to use for history (~/.jsish_history).||",
          "",
          "[Removed Lines]",
          "268: |debugOpts|*[Options](#options-debugOpts)*|Options for debugging.||",
          "",
          "[Added Lines]",
          "254: |debugOpts|*[Options](#Interp-debugOpts)*|Options for debugging.||",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "274: |jsppCallback|*FUNC*|Command to preprocess lines that match jsppChars. Call func(interpName:string, opCnt:number).||",
          "275: |lockTimeout|*INT*|Thread time-out for mutex lock acquires (milliseconds).||",
          "276: |lockDown|*STRKEY*|Directory to Safe-lockdown interpreter to.||",
          "278: |log|*ARRAY*|Logging flags. (zero or more of: **bug**, **assert**, **debug**, **trace**, **test**, **info**, **warn**, **error**, **parse**)|noCase|",
          "279: |maxDepth|*INT*|Depth limit of recursive function calls (1000).||",
          "280: |maxDumpStack|*UINT*|Maximum stack dump length (100).||",
          "",
          "[Removed Lines]",
          "277: |logOpts|*[Options](#options-logOpts)*|Options for log output to add file/line/time.||",
          "",
          "[Added Lines]",
          "263: |logOpts|*[Options](#Interp-logOpts)*|Options for log output to add file/line/time.||",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "311: |scriptFile|*STRING*|Interp init script file.||",
          "312: |stdinStr|*STRING*|String to use as stdin for console.input().||",
          "313: |stdoutStr|*STRING*|String to collect stdout for puts().||",
          "315: |subthread|*BOOL*|Create a threaded Interp.|initOnly|",
          "316: |traceCall|*ARRAY*|Trace commands. (zero or more of: **funcs**, **cmds**, **new**, **return**, **args**, **notrunc**, **noparent**, **full**, **before**)||",
          "317: |traceOp|*INT*|Set debugging level for OPCODE execution.||",
          "",
          "[Removed Lines]",
          "314: |subOpts|*[Options](#options-subOpts)*|Infrequently used sub-options.||",
          "",
          "[Added Lines]",
          "300: |subOpts|*[Options](#Interp-subOpts)*|Infrequently used sub-options.||",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "320: |typeWarnMax|*INT*|Type checking is silently disabled after this many warnings (50).||",
          "321: |udata|*OBJ*|User data.||",
          "322: |testMode|*UINT*|Unit test control bits: 1=subst, 2=Puts with file:line prefix.||",
          "324: |Option|Type|Description|Flags|",
          "325: |---|---|---|---|",
          "326: |debugCallback|*CUSTOM*|Command in parent interp for handling debugging.||",
          "",
          "[Removed Lines]",
          "323: ### Options \"debugOpts\"",
          "",
          "[Added Lines]",
          "309: ### Interp debugOpts",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "334: |putsCallback|*CUSTOM*|Comand in parent interp to handle puts output.||",
          "335: |traceCallback|*CUSTOM*|Comand in parent interp to handle traceCall.||",
          "336: |testFmtCallback|*CUSTOM*|Comand in parent interp to format testing strings.||",
          "338: |Option|Type|Description|Flags|",
          "339: |---|---|---|---|",
          "340: |time|*BOOL*|Prefix with time.||",
          "",
          "[Removed Lines]",
          "337: ### Options \"logOpts\"",
          "",
          "[Added Lines]",
          "323: ### Interp logOpts",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "347: |isUTC|*BOOL*|Time is to be UTC.||",
          "348: |timeFmt|*STRKEY*|A format string to use with strftime.||",
          "349: |chan|*USEROBJ*|Channel to send output to.||",
          "351: |Option|Type|Description|Flags|",
          "352: |---|---|---|---|",
          "353: |blacklist|*STRKEY*|Comma separated modules to disable loading for.|initOnly|",
          "",
          "[Removed Lines]",
          "350: ### Options \"subOpts\"",
          "",
          "[Added Lines]",
          "336: ### Interp subOpts",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "375: Commands for handling JSON data.",
          "379: |Method|Function Argument Types|Description|",
          "380: |---|---|---|",
          "381: |check|(str:string, strict:boolean=true):boolean |Return true if str is JSON.|",
          "",
          "[Removed Lines]",
          "378: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "390: Commands performing math operations on numbers.",
          "394: |Method|Function Argument Types|Description|",
          "395: |---|---|---|",
          "396: |abs|(num:number):number |Returns the absolute value of x.|",
          "",
          "[Removed Lines]",
          "393: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "421: Commands for accessing mysql databases.",
          "425: |Method|Function Argument Types|Description|",
          "426: |---|---|---|",
          "428: |affectedRows|():number |Return affected rows.|",
          "429: |complete|(sql:string):boolean |Return true if sql is complete.|",
          "431: |errorNo|():number |Return error code returned by most recent call to mysql3_exec().|",
          "432: |errorState|():string |Return the mysql error state str.|",
          "433: |eval|(sql:string):number |Run sql commands without input/output.|",
          "",
          "[Removed Lines]",
          "424: ### Methods",
          "427: |MySql|([options](#options-newmysql):object=void):userobj |Create a new db connection to a MySql database:.|",
          "430: |conf|([options](#options-mysqlconf):string&#124;object=void) |Configure options.|",
          "",
          "[Added Lines]",
          "407: |MySql|([options](#mysql-new):object=void):userobj |Create a new db connection to a MySql database:.|",
          "410: |conf|([options](#mysql-new):string&#124;object=void) |Configure options.|",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "437: |lastRowid|():number |Return rowid of last insert.|",
          "438: |onecolumn|(sql:string) |Execute sql, and return a single value.|",
          "439: |ping|(noError:boolean=false):number |Ping connection.|",
          "441: |reconnect|():void |Reconnect with current settings.|",
          "442: |reset|():number |Reset connection.|",
          "444: |Option|Type|Description|Flags|",
          "445: |---|---|---|---|",
          "446: |bindWarn|*BOOL*|Treat failed variable binds as a warning.|initOnly|",
          "",
          "[Removed Lines]",
          "440: |query|([options](#options-mysqlquery):function&#124;string&#124;array&#124;object=void) |Run sql query with input and/or outputs..|",
          "443: ### Options \"new\"",
          "",
          "[Added Lines]",
          "420: |query|([options](#mysql-query):function&#124;string&#124;array&#124;object=void) |Run sql query with input and/or outputs..|",
          "423: ### MySql new",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "448: |debug|*ARRAY*|Enable debug trace for various operations. (zero or more of: **eval**, **delete**, **prepare**, **step**)||",
          "449: |enableMulti|*BOOL*|Accept muiltiple semi-colon separated statements in eval().|initOnly|",
          "450: |errorCnt|*INT*|Count of errors.|readOnly|",
          "452: |forceInt|*BOOL*|Bind float as int if possible.||",
          "453: |host|*STRING*|IP address or host name for mysqld (default is 127.0.0.1).||",
          "454: |maxStmts|*INT*|Max cache size for compiled statements.||",
          "",
          "[Removed Lines]",
          "451: |queryOpts|*[Options](#options-queryOpts)*|Default options for exec.||",
          "",
          "[Added Lines]",
          "431: |queryOpts|*[Options](#MySql-queryOpts)*|Default options for exec.||",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "465: |udata|*OBJ*|User data..||",
          "466: |user|*STRKEY*|Database user name. Default is current user-name..|initOnly|",
          "467: |version|*DOUBLE*|Mysql version number.|readOnly|",
          "469: |Option|Type|Description|Flags|",
          "470: |---|---|---|---|",
          "471: |callback|*FUNC*|Function to call with each row result. @`function(values:object)`||",
          "",
          "[Removed Lines]",
          "468: ### Options \"queryOpts\"",
          "",
          "[Added Lines]",
          "448: ### MySql queryOpts",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "477: |nocache|*BOOL*|Disable query cache.||",
          "478: |noNamedParams|*BOOL*|Disable translating sql to support named params.||",
          "479: |nullvalue|*STRKEY*|Null string output (for non-json mode).||",
          "481: |paramVar|*ARRAY*|Array var to use for parameters.||",
          "482: |prefetch|*BOOL*|Let client library cache entire results.||",
          "483: |separator|*STRKEY*|Separator string (for csv and text mode).||",
          "",
          "[Removed Lines]",
          "480: |obj|*[Options](#options-obj)*|Options for object.||",
          "",
          "[Added Lines]",
          "460: |obj|*[Options](#MySql-obj)*|Options for object.||",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "485: |typeCheck|*STRKEY*|Type check mode (error). (one of: **convert**, **error**, **warn**, **disable**)||",
          "486: |values|*ARRAY*|Values for ? bind parameters.||",
          "487: |width|*CUSTOM*|In column mode, set column widths.||",
          "489: |Option|Type|Description|Flags|",
          "490: |---|---|---|---|",
          "491: |callback|*FUNC*|Function to call with each row result. @`function(values:object)`||",
          "",
          "[Removed Lines]",
          "488: ### Options \"MySql.query\"",
          "",
          "[Added Lines]",
          "468: ### MySql obj",
          "469: |Option|Type|Description|Flags|",
          "470: |---|---|---|---|",
          "471: |name|*STRKEY*|Name of object var data source for %s.||",
          "472: |skip|*ARRAY*|Object members to ignore.||",
          "473: |getSql|*BOOL*|Return expanded SQL without evaluating.||",
          "474: |defaultNull|*BOOL*|Create with DEFAULT NULL.||",
          "475: |noChecks|*BOOL*|Create with no CHECK constraints.||",
          "476: |noDefaults|*BOOL*|Create with no defaults.||",
          "477: |noTypes|*BOOL*|Create with no types.||",
          "478: ### MySql query",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "497: |nocache|*BOOL*|Disable query cache.||",
          "498: |noNamedParams|*BOOL*|Disable translating sql to support named params.||",
          "499: |nullvalue|*STRKEY*|Null string output (for non-json mode).||",
          "501: |paramVar|*ARRAY*|Array var to use for parameters.||",
          "502: |prefetch|*BOOL*|Let client library cache entire results.||",
          "503: |separator|*STRKEY*|Separator string (for csv and text mode).||",
          "",
          "[Removed Lines]",
          "500: |obj|*[Options](#options-obj)*|Options for object.||",
          "",
          "[Added Lines]",
          "490: |obj|*[Options](#MySql query-obj)*|Options for object.||",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "505: |typeCheck|*STRKEY*|Type check mode (error). (one of: **convert**, **error**, **warn**, **disable**)||",
          "506: |values|*ARRAY*|Values for ? bind parameters.||",
          "507: |width|*CUSTOM*|In column mode, set column widths.||",
          "509: |Option|Type|Description|Flags|",
          "510: |---|---|---|---|",
          "511: |name|*STRKEY*|Name of object var data source for %s.||",
          "",
          "[Removed Lines]",
          "508: ### Options \"obj\"",
          "",
          "[Added Lines]",
          "498: ### MySql query obj",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "524: Commands for accessing number objects.",
          "528: |Method|Function Argument Types|Description|",
          "529: |---|---|---|",
          "530: |Number|(num:string=0):number |Number constructor.|",
          "",
          "[Removed Lines]",
          "527: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "545: Commands for accessing Objects.",
          "549: |Method|Function Argument Types|Description|",
          "550: |---|---|---|",
          "551: |Object|(val:object&#124;function&#124;null=void):object |Object constructor.|",
          "",
          "[Removed Lines]",
          "548: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "573: Commands for managing reqular expression objects.",
          "577: |Method|Function Argument Types|Description|",
          "578: |---|---|---|",
          "579: |RegExp|(val:regexp&#124;string, flags:string):regexp |Create a regexp object.|",
          "",
          "[Removed Lines]",
          "576: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "588: Commands for handling unix signals.",
          "592: |Method|Function Argument Types|Description|",
          "593: |---|---|---|",
          "594: |alarm|(secs):number |Setup alarm in seconds.|",
          "",
          "[Removed Lines]",
          "591: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "607: Commands for managing Socket server/client connections.",
          "611: |Method|Function Argument Types|Description|",
          "612: |---|---|---|",
          "614: |close|():void |Close socket(s).|",
          "617: |names|():array |Return list of active ids on server.|",
          "618: |recv|(id:number=void):string |Recieve data.|",
          "620: |update|():void |Service events for just this socket.|",
          "622: |Option|Type|Description|Flags|",
          "623: |---|---|---|---|",
          "624: |address|*STRING*|Client destination address (127.0.0.0).|initOnly|",
          "",
          "[Removed Lines]",
          "610: ### Methods",
          "613: |Socket|([options](#options-newsocket):object=void):userobj |Create socket server/client object.Create a socket server or client object.|",
          "615: |conf|([options](#options-socketconf):string&#124;object=void) |Configure options.|",
          "616: |idconf|([options](#options-socketidconf):string&#124;object=void) |Configure options for a connection id, or return list of ids.|",
          "619: |send|([options](#options-socketsend):object=void):void |Send a socket message to id. Send a message to a (or all if -1) connection.|",
          "621: ### Options \"new\"",
          "",
          "[Added Lines]",
          "593: |Socket|([options](#socket-new):object=void):userobj |Create socket server/client object.Create a socket server or client object.|",
          "595: |conf|([options](#socket-new):string&#124;object=void) |Configure options.|",
          "596: |idconf|([options](#socket-idconf):string&#124;object=void) |Configure options for a connection id, or return list of ids.|",
          "599: |send|([options](#socket-send):object=void):void |Send a socket message to id. Send a message to a (or all if -1) connection.|",
          "601: ### Socket new",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "649: |srcAddress|*STRING*|Client source address.|initOnly|",
          "650: |srcPort|*INT*|Client source port.|initOnly|",
          "651: |startTime|*TIME_T*|Time of start.|readOnly|",
          "653: |timeout|*NUMBER*|Timeout value in seconds (0.5).|initOnly|",
          "654: |tos|*INT8*|Type-Of-Service value.|initOnly|",
          "655: |ttl|*INT*|Time-To-Live value.|initOnly|",
          "656: |udata|*OBJ*|User data.||",
          "657: |udp|*BOOL*|Protocol is udp.|initOnly|",
          "659: |Option|Type|Description|Flags|",
          "660: |---|---|---|---|",
          "661: |echo|*BOOL*|LogInfo outputs all socket Send/Recv messages.||",
          "",
          "[Removed Lines]",
          "652: |stats|*[Options](#options-stats)*|Statistical data.|readOnly|",
          "658: ### Options \"stats\"",
          "",
          "[Added Lines]",
          "632: |stats|*[Options](#Socket-stats)*|Statistical data.|readOnly|",
          "638: ### Socket stats",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "669: |sentErrCnt|*INT*|Number of sends.||",
          "670: |sentErrLast|*TIME_T*|Time of last sendErr.||",
          "671: |udata|*OBJ*|User data.||",
          "673: |Option|Type|Description|Flags|",
          "674: |---|---|---|---|",
          "675: |echo|*BOOL*|LogInfo outputs all socket Send/Recv messages.||",
          "",
          "[Removed Lines]",
          "672: ### Options \"Socket.idconf\"",
          "",
          "[Added Lines]",
          "652: ### Socket idconf",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "683: |sentErrCnt|*INT*|Number of sends.||",
          "684: |sentErrLast|*TIME_T*|Time of last sendErr.||",
          "685: |udata|*OBJ*|User data.||",
          "687: |Option|Type|Description|Flags|",
          "688: |---|---|---|---|",
          "689: |noAsync|*BOOL*|Send is not async.||",
          "",
          "[Removed Lines]",
          "686: ### Options \"Socket.send\"",
          "",
          "[Added Lines]",
          "666: ### Socket send",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "696: Commands for accessing sqlite databases.",
          "700: |Method|Function Argument Types|Description|",
          "701: |---|---|---|",
          "703: |backup|(file:string, dbname:string='main'):void |Backup db to file. Open or create a database file named FILENAME. Transfer the content of local database DATABASE (default: 'main') into the FILENAME database.|",
          "704: |collate|(name:string, callback:function):void |Create new SQL collation command.|",
          "705: |complete|(sql:string):boolean |Return true if sql is complete.|",
          "707: |eval|(sql:string):number |Run sql commands without input/output. Supports multiple semicolon seperated commands. Variable binding is NOT performed, results are discarded, and  returns sqlite3_changes()|",
          "708: |exists|(sql:string):boolean |Execute sql, and return true if there is at least one result value.|",
          "709: |filename|(name:string='main'):string |Return filename for named or all attached databases.|",
          "710: |func|(name:string, callback:function, numArgs:number=void):void |Register a new function with database.|",
          "712: |interrupt|():void |Interrupt in progress statement.|",
          "713: |onecolumn|(sql:string) |Execute sql, and return a single value.|",
          "715: |restore|(file:string, dbname:string):void |Restore db from file (default db is 'main').    db.restore(FILENAME, ?,DATABASE? )  Open a database file named FILENAME.  Transfer the content of FILENAME into the local database DATABASE (default: 'main').|",
          "716: |transaction|(callback:function, type:string=void):void |Call function inside db tranasaction. Type is: 'deferred', 'exclusive', 'immediate'. Start a new transaction (if we are not already in the midst of a transaction) and execute the JS function FUNC. After FUNC completes, either commit the transaction or roll it back if FUNC throws an exception. Or if no new transation was started, do nothing. pass the exception on up the stack.|",
          "718: |Option|Type|Description|Flags|",
          "719: |---|---|---|---|",
          "720: |bindWarn|*BOOL*|Treat failed variable binds as a warning.|initOnly|",
          "",
          "[Removed Lines]",
          "699: ### Methods",
          "702: |Sqlite|([options](#options-newsqlite):object=void):userobj |Create a new db connection to the named file or :memory:.|",
          "706: |conf|([options](#options-sqliteconf):string&#124;object=void) |Configure options.|",
          "711: |import|([options](#options-sqliteimport):object=void):number |Import data from file into table . Import data from a file into table. SqlOptions include the 'separator' to use, which defaults to commas for csv, or tabs otherwise. If a column contains a null string, or the value of 'nullvalue', a null is inserted for the column. A 'conflict' is one of the sqlite conflict algorithms:    rollback, abort, fail, ignore, replace On success, return the number of lines processed, not necessarily same as 'changeCnt' due to the conflict algorithm selected. |",
          "714: |query|([options](#options-sqlitequery):function&#124;string&#124;array&#124;object=void) |Evaluate an sql query with bindings. Return values in formatted as JSON, HTML, etc. , optionally calling function with a result object|",
          "717: ### Options \"new\"",
          "",
          "[Added Lines]",
          "680: |Sqlite|([options](#sqlite-new):object=void):userobj |Create a new db connection to the named file or :memory:.|",
          "684: |conf|([options](#sqlite-new):string&#124;object=void) |Configure options.|",
          "689: |import|([options](#sqlite-import):object=void):number |Import data from file into table . Import data from a file into table. SqlOptions include the 'separator' to use, which defaults to commas for csv, or tabs otherwise. If a column contains a null string, or the value of 'nullvalue', a null is inserted for the column. A 'conflict' is one of the sqlite conflict algorithms:    rollback, abort, fail, ignore, replace On success, return the number of lines processed, not necessarily same as 'changeCnt' due to the conflict algorithm selected. |",
          "692: |query|([options](#sqlite-query):function&#124;string&#124;array&#124;object=void) |Evaluate an sql query with bindings. Return values in formatted as JSON, HTML, etc. , optionally calling function with a result object|",
          "695: ### Sqlite new",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "744: |onUpdate|*FUNC*|Function to call for update. @`function(db:userobj, op:string, dbname:string, table:string, rowid:number)`||",
          "745: |onWalHook|*FUNC*|Function to call for WAL. @`function(db:userobj, dbname:string, entry:number)`||",
          "746: |progressSteps|*UINT*|Number of steps between calling onProgress: 0 is disabled.||",
          "748: |readonly|*BOOL*|Database opened in readonly mode.|initOnly|",
          "749: |sortCnt|*INT*|Number of sorts in most recent operation.|readOnly|",
          "750: |stepCnt|*INT*|Number of steps in most recent operation.|readOnly|",
          "",
          "[Removed Lines]",
          "747: |queryOpts|*[Options](#options-queryOpts)*|Default options for to use with query().||",
          "",
          "[Added Lines]",
          "725: |queryOpts|*[Options](#Sqlite-queryOpts)*|Default options for to use with query().||",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "755: |version|*OBJ*|Sqlite version info.|readOnly|",
          "756: |timeout|*INT*|Amount of time to wait when file is locked, in ms.||",
          "757: |vfs|*STRING*|VFS to use.|initOnly|",
          "759: |Option|Type|Description|Flags|",
          "760: |---|---|---|---|",
          "761: |callback|*FUNC*|Function to call with each row result. @`function(values:object)`||",
          "",
          "[Removed Lines]",
          "758: ### Options \"queryOpts\"",
          "",
          "[Added Lines]",
          "736: ### Sqlite queryOpts",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "767: |mode|*STRKEY*|Set output mode of returned data. (one of: **rows**, **arrays**, **array1d**, **list**, **column**, **json**, **json2**, **html**, **csv**, **insert**, **line**, **tabs**, **none**)||",
          "768: |nocache|*BOOL*|Disable query cache.||",
          "769: |nullvalue|*STRKEY*|Null string output (for non js/json mode).||",
          "771: |retChanged|*BOOL*|Query returns value of sqlite3_changed().||",
          "772: |separator|*STRKEY*|Separator string (for csv and text mode).||",
          "773: |typeCheck|*STRKEY*|Type check mode (warn). (one of: **convert**, **warn**, **error**, **disable**)||",
          "774: |table|*STRKEY*|Table name for mode=insert.||",
          "775: |values|*ARRAY*|Values for ? bind parameters.||",
          "776: |width|*CUSTOM*|In column mode, set column widths.||",
          "778: |Option|Type|Description|Flags|",
          "779: |---|---|---|---|",
          "780: |headers|*BOOL*|First row contains column labels.||",
          "",
          "[Removed Lines]",
          "770: |obj|*[Options](#options-obj)*|Options for object.||",
          "777: ### Options \"Sqlite.import\"",
          "",
          "[Added Lines]",
          "748: |obj|*[Options](#Sqlite-obj)*|Options for object.||",
          "755: ### Sqlite obj",
          "756: |Option|Type|Description|Flags|",
          "757: |---|---|---|---|",
          "758: |name|*STRKEY*|Name of object var data source for %s.||",
          "759: |skip|*ARRAY*|Object members to ignore.||",
          "760: |getSql|*BOOL*|Return expanded SQL without evaluating.||",
          "761: |defaultNull|*BOOL*|Create with DEFAULT NULL.||",
          "762: |noChecks|*BOOL*|Create with no CHECK constraints.||",
          "763: |noDefaults|*BOOL*|Create with no defaults.||",
          "764: |noTypes|*BOOL*|Create with no types.||",
          "765: ### Sqlite import",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "783: |limit|*INT*|Maximum number of lines to load.||",
          "784: |nullvalue|*STRKEY*|Null string.||",
          "785: |separator|*STRKEY*|Separator string; default is comma if csv, else tabs.||",
          "787: |Option|Type|Description|Flags|",
          "788: |---|---|---|---|",
          "789: |callback|*FUNC*|Function to call with each row result. @`function(values:object)`||",
          "",
          "[Removed Lines]",
          "786: ### Options \"Sqlite.query\"",
          "",
          "[Added Lines]",
          "774: ### Sqlite query",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "795: |mode|*STRKEY*|Set output mode of returned data. (one of: **rows**, **arrays**, **array1d**, **list**, **column**, **json**, **json2**, **html**, **csv**, **insert**, **line**, **tabs**, **none**)||",
          "796: |nocache|*BOOL*|Disable query cache.||",
          "797: |nullvalue|*STRKEY*|Null string output (for non js/json mode).||",
          "799: |retChanged|*BOOL*|Query returns value of sqlite3_changed().||",
          "800: |separator|*STRKEY*|Separator string (for csv and text mode).||",
          "801: |typeCheck|*STRKEY*|Type check mode (warn). (one of: **convert**, **warn**, **error**, **disable**)||",
          "802: |table|*STRKEY*|Table name for mode=insert.||",
          "803: |values|*ARRAY*|Values for ? bind parameters.||",
          "804: |width|*CUSTOM*|In column mode, set column widths.||",
          "807: ## String",
          "",
          "[Removed Lines]",
          "798: |obj|*[Options](#options-obj)*|Options for object.||",
          "",
          "[Added Lines]",
          "786: |obj|*[Options](#Sqlite query-obj)*|Options for object.||",
          "793: ### Sqlite query obj",
          "794: |Option|Type|Description|Flags|",
          "795: |---|---|---|---|",
          "796: |name|*STRKEY*|Name of object var data source for %s.||",
          "797: |skip|*ARRAY*|Object members to ignore.||",
          "798: |getSql|*BOOL*|Return expanded SQL without evaluating.||",
          "799: |defaultNull|*BOOL*|Create with DEFAULT NULL.||",
          "800: |noChecks|*BOOL*|Create with no CHECK constraints.||",
          "801: |noDefaults|*BOOL*|Create with no defaults.||",
          "802: |noTypes|*BOOL*|Create with no types.||",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "811: Commands for accessing string objects..",
          "815: |Method|Function Argument Types|Description|",
          "816: |---|---|---|",
          "817: |String|(str):string |String constructor.|",
          "",
          "[Removed Lines]",
          "814: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "847: Builtin system commands. All methods are exported as global.",
          "851: |Method|Function Argument Types|Description|",
          "852: |---|---|---|",
          "853: |LogDebug|(str:string&#124;boolean,...):void |Debug logging command.|",
          "",
          "[Removed Lines]",
          "850: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "856: |LogTest|(str:string&#124;boolean,...):void |Debug logging command.|",
          "857: |LogTrace|(str:string&#124;boolean,...):void |Debug logging command.|",
          "858: |LogWarn|(str:string&#124;boolean,...):void |Debug logging command.|",
          "860: |clearInterval|(id:number):void |Delete event id returned from setInterval/setTimeout/info.events().|",
          "861: |decodeURI|(val:string):string |Decode an HTTP URL.|",
          "862: |encodeURI|(val:string):string |Encode an HTTP URL.|",
          "864: |exit|(code:number=0):void |Exit the current interpreter.|",
          "865: |format|(format:string, ...):string |Printf style formatting: adds %q and %S.|",
          "867: |isFinite|(val):boolean |Return true if is a finite number.|",
          "868: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "869: |isNaN|(val):boolean |Return true if not a number.|",
          "",
          "[Removed Lines]",
          "859: |assert|([options](#options-systemassert):object=void):void |Throw or output msg if expr is false. Assertions.  Enable with jsish --I Assert or using the -Assert module option.|",
          "863: |exec|([options](#options-systemexec):string&#124;object=void) |Execute an OS command. If the command ends with '&', set the 'bg' option to true. The second argument can be a string, which is the same as setting the 'inputStr' option. By default, returns the string output, unless the 'bg', 'inputStr', 'retCode' or 'retAll' options are used|",
          "866: |import|([options](#options-systemimport):object=void) |Same as source with {import:true}.|",
          "",
          "[Added Lines]",
          "853: |assert|([options](#system-assert):object=void):void |Throw or output msg if expr is false. Assertions.  Enable with jsish --I Assert or using the -Assert module option.|",
          "857: |exec|([options](#system-exec):string&#124;object=void) |Execute an OS command. If the command ends with '&', set the 'bg' option to true. The second argument can be a string, which is the same as setting the 'inputStr' option. By default, returns the string output, unless the 'bg', 'inputStr', 'retCode' or 'retAll' options are used|",
          "860: |import|([options](#system-import):object=void) |Same as source with {import:true}.|",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "877: |parseInt|(val:any, base:number=10):number |Convert string to an integer.|",
          "878: |parseOpts|(self:object&#124;userobj, options:object, conf:object&#124;null&#124;undefined):object |Parse module options: similar to moduleOpts but arg order different and no freeze.|",
          "879: |printf|(format:string, ...):void |Formatted output to stdout.|",
          "881: |puts|(val:any, ...):void |Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.|",
          "882: |quote|(val:string):string |Return quoted string.|",
          "884: |runModule|(cmd:string&#124;null&#124;function=void, conf:array=undefined) |Invoke named module. If name is empty, uses file basename. If isMain invokes function with same name as file. With no args will invoke provide.|",
          "885: |setInterval|(callback:function, ms:number):number |Setup recurring function to run every given millisecs.|",
          "886: |setTimeout|(callback:function, ms:number):number |Setup function to run after given millisecs.|",
          "887: |sleep|(secs:number=1.0):void |sleep for N milliseconds, minimum .001.|",
          "891: |times|(callback:function&#124;boolean, count:number=1):number |Call function count times and return execution time in microseconds.|",
          "892: |unload|(shlib:string):void |Unload a shared executable and invoke its _Done call.|",
          "895: |Option|Type|Description|Flags|",
          "896: |---|---|---|---|",
          "897: |mode|*STRKEY*|Action when assertion fails. Default from Interp.assertMode. (one of: **throw**, **log**, **puts**)||",
          "898: |noStderr|*BOOL*|Logged msg to stdout. Default from Interp.noStderr.||",
          "900: |Option|Type|Description|Flags|",
          "901: |---|---|---|---|",
          "902: |bg|*BOOL*|Run command in background using system() and return OS code.||",
          "",
          "[Removed Lines]",
          "880: |provide|([options](#options-systemprovide):object=void):void |Provide a package for use with require.. Default is the file tail-rootname|",
          "883: |require|([options](#options-systemrequire):object=void):number&#124;array&#124;object |Load/query packages. With no arguments, returns the list of all loaded packages. With one argument, loads the package (if necessary) and returns its version. With two arguments, returns object containing: version, loadFile, func. A third argument sets options for package or module. Note an error is thrown if requested version is greater than actual version.|",
          "888: |source|([options](#options-systemsource):object=void) |Load and evaluate source files: trailing '/' appends PARENTDIR.jsi.|",
          "889: |strftime|([options](#options-systemstrftime):string&#124;object=void):string |Format numeric time (in ms) to a string. Null or no value will use current time.|",
          "890: |strptime|([options](#options-systemstrptime):string&#124;object=void):number |Parse time from string and return ms time since 1970-01-01 in UTC, or NaN.|",
          "893: |update|([options](#options-systemupdate):number&#124;object=void):number |Service all events, eg. setInterval/setTimeout. Returns the number of events processed. Events are processed until minTime (in milliseconds) is exceeded, or forever if -1. The default minTime is 0, meaning return as soon as no events can be processed. A positive mintime will result in sleeps between event checks.|",
          "894: ### Options \"System.assert\"",
          "899: ### Options \"System.exec\"",
          "",
          "[Added Lines]",
          "874: |provide|([options](#system-provide):object=void):void |Provide a package for use with require.. Default is the file tail-rootname|",
          "877: |require|([options](#system-require):object=void):number&#124;array&#124;object |Load/query packages. With no arguments, returns the list of all loaded packages. With one argument, loads the package (if necessary) and returns its version. With two arguments, returns object containing: version, loadFile, func. A third argument sets options for package or module. Note an error is thrown if requested version is greater than actual version.|",
          "882: |source|([options](#system-source):object=void) |Load and evaluate source files: trailing '/' appends PARENTDIR.jsi.|",
          "883: |strftime|([options](#system-strftime):string&#124;object=void):string |Format numeric time (in ms) to a string. Null or no value will use current time.|",
          "884: |strptime|([options](#system-strptime):string&#124;object=void):number |Parse time from string and return ms time since 1970-01-01 in UTC, or NaN.|",
          "887: |update|([options](#system-update):number&#124;object=void):number |Service all events, eg. setInterval/setTimeout. Returns the number of events processed. Events are processed until minTime (in milliseconds) is exceeded, or forever if -1. The default minTime is 0, meaning return as soon as no events can be processed. A positive mintime will result in sleeps between event checks.|",
          "888: ### System assert",
          "893: ### System exec",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "908: |trim|*BOOL*|Trim trailing whitespace from output.||",
          "909: |retAll|*BOOL*|Return the OS return code and data as an object.||",
          "910: |retCode|*BOOL*|Return only the OS return code.||",
          "912: |Option|Type|Description|Flags|",
          "913: |---|---|---|---|",
          "914: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "",
          "[Removed Lines]",
          "911: ### Options \"System.import\"",
          "",
          "[Added Lines]",
          "905: ### System import",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "921: |noError|*BOOL*|Ignore errors in sourced file.||",
          "922: |once|*BOOL*|Source file only if not already sourced (Default: Interp.debugOpts.includeOnce).||",
          "923: |trace|*BOOL*|Trace include statements (Default: Interp.debugOpts.includeTrace).||",
          "925: |Option|Type|Description|Flags|",
          "926: |---|---|---|---|",
          "927: |log|*ARRAY*|Logging flags. (zero or more of: **bug**, **assert**, **debug**, **trace**, **test**, **info**, **warn**, **error**, **parse**)|noCase|",
          "",
          "[Removed Lines]",
          "924: ### Options \"System.provide\"",
          "",
          "[Added Lines]",
          "918: ### System provide",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "932: |profile|*BOOL*|On exit generate profile of function calls.||",
          "933: |traceCall|*ARRAY*|Trace commands. (zero or more of: **funcs**, **cmds**, **new**, **return**, **args**, **notrunc**, **noparent**, **full**, **before**)||",
          "934: |udata|*OBJ*|User data settable by require.||",
          "936: |Option|Type|Description|Flags|",
          "937: |---|---|---|---|",
          "938: |log|*ARRAY*|Logging flags. (zero or more of: **bug**, **assert**, **debug**, **trace**, **test**, **info**, **warn**, **error**, **parse**)|noCase|",
          "",
          "[Removed Lines]",
          "935: ### Options \"System.require\"",
          "",
          "[Added Lines]",
          "929: ### System require",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "943: |profile|*BOOL*|On exit generate profile of function calls.||",
          "944: |traceCall|*ARRAY*|Trace commands. (zero or more of: **funcs**, **cmds**, **new**, **return**, **args**, **notrunc**, **noparent**, **full**, **before**)||",
          "945: |udata|*OBJ*|User data settable by require.||",
          "947: |Option|Type|Description|Flags|",
          "948: |---|---|---|---|",
          "949: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "",
          "[Removed Lines]",
          "946: ### Options \"System.source\"",
          "",
          "[Added Lines]",
          "940: ### System source",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "956: |noError|*BOOL*|Ignore errors in sourced file.||",
          "957: |once|*BOOL*|Source file only if not already sourced (Default: Interp.debugOpts.includeOnce).||",
          "958: |trace|*BOOL*|Trace include statements (Default: Interp.debugOpts.includeTrace).||",
          "960: |Option|Type|Description|Flags|",
          "961: |---|---|---|---|",
          "962: |secs|*BOOL*|Time is seconds (out for parse, in for format).||",
          "963: |fmt|*STRKEY*|Format string for time.||",
          "964: |iso|*BOOL*|ISO fmt plus milliseconds ie: %FT%T.%f.||",
          "965: |utc|*BOOL*|Time is utc (in for parse, out for format).||",
          "967: |Option|Type|Description|Flags|",
          "968: |---|---|---|---|",
          "969: |secs|*BOOL*|Time is seconds (out for parse, in for format).||",
          "970: |fmt|*STRKEY*|Format string for time.||",
          "971: |iso|*BOOL*|ISO fmt plus milliseconds ie: %FT%T.%f.||",
          "972: |utc|*BOOL*|Time is utc (in for parse, out for format).||",
          "974: |Option|Type|Description|Flags|",
          "975: |---|---|---|---|",
          "976: |maxEvents|*INT*|Maximum number of events to process (or -1 for all).||",
          "",
          "[Removed Lines]",
          "959: ### Options \"System.strftime\"",
          "966: ### Options \"System.strptime\"",
          "973: ### Options \"System.update\"",
          "",
          "[Added Lines]",
          "953: ### System strftime",
          "960: ### System strptime",
          "967: ### System update",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "986: Utilities commands.",
          "990: |Method|Function Argument Types|Description|",
          "991: |---|---|---|",
          "992: |argArray|(arg:any&#124;undefined):array&#124;null |Coerces non-null to an array, if necessary.|",
          "",
          "[Removed Lines]",
          "989: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1003: |getenv|(name:string=void):string&#124;object&#124;void |Get one or all environment.|",
          "1004: |getpid|(parent:boolean=false):number |Get process/parent id.|",
          "1005: |getuser|():object |Get userid info.|",
          "1007: |hexStr|(val:string, decode:boolean=false):string |Hex encode/decode a string.|",
          "1008: |setenv|(name:string, value:string=void) |Set/get an environment var.|",
          "1009: |sqlValues|(name:string, obj:object=void) |Get object values for SQL.|",
          "1010: |times|(callback:function&#124;boolean, count:number=1):number |Call function count times and return execution time in microseconds.|",
          "1011: |verConvert|(ver:string&#124;number, zeroTrim:number=0):number&#124;string&#124;null |Convert a version to/from a string/number, or return null if not a version. For string output zeroTrim says how many trailing .0 to trim (0-2).|",
          "1013: |Option|Type|Description|Flags|",
          "1014: |---|---|---|---|",
          "1015: |file|*STRING*|Read data from file and append to str.||",
          "",
          "[Removed Lines]",
          "1006: |hash|([options](#options-utilhash):object=void):string |Return hash (default SHA256) of string/file.|",
          "1012: ### Options \"Util.hash\"",
          "",
          "[Added Lines]",
          "998: |hash|([options](#util-hash):object=void):string |Return hash (default SHA256) of string/file.|",
          "1004: ### Util hash",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1025: Commands for creating in memory readonly Virtual file-systems.",
          "1029: |Method|Function Argument Types|Description|",
          "1030: |---|---|---|",
          "1032: |exec|(cmd:string) |Safe mode exec for VFS support cmds eg. fossil info/ls/cat.|",
          "1034: |list|():array |Return list of all vfs mounts.|",
          "1035: |mount|(type:string, file:string, param:object=void):string |Mount fossil file as given VFS type name, returning the mount point: frontend for vmount.|",
          "1037: |unmount|(mount:string):void |Unmount a VFS.|",
          "1040: |Option|Type|Description|Flags|",
          "1041: |---|---|---|---|",
          "1042: |callback|*FUNC*|Function implementing VFS. @`function(op:string, mount:string, arg:string|object|null)`||",
          "",
          "[Removed Lines]",
          "1028: ### Methods",
          "1031: |conf|([options](#options-vfsconf):string&#124;object&#124;string=void) |Configure mount.|",
          "1033: |fileconf|([options](#options-vfsfileconf):string&#124;object=void) |Configure file info which is same info as in fileList.|",
          "1036: |type|([options](#options-vfstype):object&#124;null=void) |Set/get/delete VFS type name.|",
          "1038: |vmount|([options](#options-vfsvmount):object=void):string |Create and mount a VFS, returning the mount point.|",
          "1039: ### Options \"Vfs.conf\"",
          "",
          "[Added Lines]",
          "1021: |conf|([options](#vfs-conf):string&#124;object&#124;string=void) |Configure mount.|",
          "1023: |fileconf|([options](#vfs-fileconf):string&#124;object=void) |Configure file info which is same info as in fileList.|",
          "1026: |type|([options](#vfs-type):object&#124;null=void) |Set/get/delete VFS type name.|",
          "1028: |vmount|([options](#vfs-vmount):object=void):string |Create and mount a VFS, returning the mount point.|",
          "1029: ### Vfs conf",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1051: |type|*STRKEY*|Type for predefined VFS.||",
          "1052: |user|*OBJ*|User data.||",
          "1053: |version|*STRKEY*|Version to mount.||",
          "1055: |Option|Type|Description|Flags|",
          "1056: |---|---|---|---|",
          "1057: |data|*STRING*|Data for file.||",
          "",
          "[Removed Lines]",
          "1054: ### Options \"Vfs.exec\"",
          "",
          "[Added Lines]",
          "1044: ### Vfs exec",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1059: |perms|*UINT32*|Permissions for file.||",
          "1060: |size|*SSIZE_T*|Size of file.||",
          "1061: |timestamp|*TIME_T*|Timestamp of file.||",
          "1063: |Option|Type|Description|Flags|",
          "1064: |---|---|---|---|",
          "1065: |data|*STRING*|Data for file.||",
          "",
          "[Removed Lines]",
          "1062: ### Options \"Vfs.fileconf\"",
          "",
          "[Added Lines]",
          "1052: ### Vfs fileconf",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1067: |perms|*UINT32*|Permissions for file.||",
          "1068: |size|*SSIZE_T*|Size of file.||",
          "1069: |timestamp|*TIME_T*|Timestamp of file.||",
          "1071: |Option|Type|Description|Flags|",
          "1072: |---|---|---|---|",
          "1073: |callback|*FUNC*|Function implementing VFS. @`function(op:string, mount:string, arg:string|object|null)`|required|",
          "1074: |extra|*OBJ*|Extra info, typically used by predefined VFS type.||",
          "1075: |noAddDirs|*BOOL*|Disable auto-adding of directories; needed by File.glob.||",
          "1077: |Option|Type|Description|Flags|",
          "1078: |---|---|---|---|",
          "1079: |callback|*FUNC*|Function implementing VFS. @`function(op:string, mount:string, arg:string|object|null)`||",
          "",
          "[Removed Lines]",
          "1070: ### Options \"Vfs.type\"",
          "1076: ### Options \"Vfs.vmount\"",
          "",
          "[Added Lines]",
          "1060: ### Vfs type",
          "1066: ### Vfs vmount",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1097: Commands for managing WebSocket server/client connections.",
          "1101: |Method|Function Argument Types|Description|",
          "1102: |---|---|---|",
          "1105: |file|(name:string=void):array&#124;void |Add file to hash, or with no args return file hash.|",
          "1106: |handler|(extension:string=void, cmd:string&#124;function=void, flags:number=0):string&#124;array&#124;function&#124;void |Get/Set handler command for an extension. With no args, returns list of handlers.  With one arg, returns value for that handler. Otherwise, sets the handler. When cmd is a string, the call is via moduleRun([cmd], arg). If a cmd is a function, it is called with a single arg: the file name.|",
          "1107: |header|(id:number, name:string=void):string&#124;array&#124;void |Get one or all input headers for connect id.|",
          "1109: |ids|(name:string=void):array |Return list of ids, or lookup one id.|",
          "1110: |query|(id:number, name:string=void):string&#124;object&#124;void |Get one or all query values for connect id.|",
          "1111: |send|(id:number, data:any):void |Send a websocket message to id. Send a message to one (or all connections if -1). If not already a string, msg is formatted as JSON prior to the send.|",
          "",
          "[Removed Lines]",
          "1100: ### Methods",
          "1103: |WebSocket|([options](#options-newwebsocket):object=void):userobj |Create websocket server/client object.Create a websocket server/client object.  The server serves out pages to a web browser, which can use javascript to upgrade connection to a bidirectional websocket.|",
          "1104: |conf|([options](#options-websocketconf):string&#124;object=void) |Configure options.|",
          "1108: |idconf|([options](#options-websocketidconf):string&#124;object=void) |Configure options for connect id.|",
          "",
          "[Added Lines]",
          "1091: |WebSocket|([options](#websocket-new):object=void):userobj |Create websocket server/client object.Create a websocket server/client object.  The server serves out pages to a web browser, which can use javascript to upgrade connection to a bidirectional websocket.|",
          "1092: |conf|([options](#websocket-new):string&#124;object=void) |Configure options.|",
          "1096: |idconf|([options](#websocket-idconf):string&#124;object=void) |Configure options for connect id.|",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1113: |unalias|(path:string):string&#124;void |Return alias reverse lookup.|",
          "1114: |update|():void |Service events for just this websocket.|",
          "1115: |version|():string |Runtime library version string.|",
          "1117: |Option|Type|Description|Flags|",
          "1118: |---|---|---|---|",
          "1119: |address|*STRING*|In client-mode the address to connect to (127.0.0.1).||",
          "",
          "[Removed Lines]",
          "1116: ### Options \"new\"",
          "",
          "[Added Lines]",
          "1104: ### WebSocket new",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1168: |ssl|*BOOL*|Use https.|initOnly|",
          "1169: |sslCert|*STRKEY*|SSL certificate file.||",
          "1170: |sslKey|*STRKEY*|SSL key file.||",
          "1172: |startTime|*TIME_T*|Time of websocket start.|readOnly|",
          "1173: |includeFile|*STRKEY*|Default file when no extension given (include.shtml).||",
          "1174: |udata|*OBJ*|User data.||",
          "",
          "[Removed Lines]",
          "1171: |stats|*[Options](#options-stats)*|Statistical data.|readOnly|",
          "",
          "[Added Lines]",
          "1159: |stats|*[Options](#WebSocket-stats)*|Statistical data.|readOnly|",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1177: |urlUnknown|*STRKEY*|Redirect for unknown page or 404..||",
          "1178: |useridPass|*STRKEY*|The USERID:PASSWORD to use for basic authentication.||",
          "1179: |version|*OBJ*|WebSocket version info.|readOnly|",
          "1181: |Option|Type|Description|Flags|",
          "1182: |---|---|---|---|",
          "1183: |clientIP|*STRKEY*|Client IP Address.|readOnly|",
          "",
          "[Removed Lines]",
          "1180: ### Options \"WebSocket.idconf\"",
          "",
          "[Added Lines]",
          "1168: ### WebSocket stats",
          "1169: |Option|Type|Description|Flags|",
          "1170: |---|---|---|---|",
          "1171: |connectCnt|*INT*|Number of active connections.|readOnly|",
          "1172: |createTime|*TIME_T*|Time created.||",
          "1173: |eventCnt|*INT*|Number of events of any type.||",
          "1174: |eventLast|*TIME_T*|Time of last event of any type.||",
          "1175: |httpCnt|*INT*|Number of http reqs.||",
          "1176: |httpLast|*TIME_T*|Time of last http reqs.||",
          "1177: |isBinary|*BOOL*|Connection recv data is binary.|readOnly|",
          "1178: |isFinal|*BOOL*|Final data for current message was recieved.|readOnly|",
          "1179: |msgQLen|*INT*|Number of messages in input queue.|readOnly|",
          "1180: |recvCnt|*INT*|Number of recieves.|readOnly|",
          "1181: |recvLast|*TIME_T*|Time of last recv.|readOnly|",
          "1182: |redirLast|*TIME_T*|Time of last redirect.|readOnly|",
          "1183: |redirCnt|*INT*|Count of redirects.|readOnly|",
          "1184: |sentCnt|*INT*|Number of sends.|readOnly|",
          "1185: |sentLast|*TIME_T*|Time of last send.|readOnly|",
          "1186: |sentErrCnt|*INT*|Number of sends.|readOnly|",
          "1187: |sentErrLast|*TIME_T*|Time of last sendErr.|readOnly|",
          "1188: |sentErrLast|*TIME_T*|Time of last sendErr.|readOnly|",
          "1189: |uploadCnt|*INT*|Number of uploads.|readOnly|",
          "1190: |uploadEnd|*TIME_T*|Time of upload end.|readOnly|",
          "1191: |uploadLast|*TIME_T*|Time of last upload input.|readOnly|",
          "1192: |uploadStart|*TIME_T*|Time of upload start.|readOnly|",
          "1193: ### WebSocket idconf",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1192: |onRecv|*FUNC*|Function to call when websock data recieved. @`function(ws:userobj, id:number, data:string)`||",
          "1193: |onUpload|*FUNC*|Function to call handle http-post. @`function(ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean)`||",
          "1194: |rootdir|*STRING*|Directory to serve html from (\".\").||",
          "1196: |query|*ARRAY*|Uri arg values for connection.||",
          "1197: |queryObj|*OBJ*|Uri arg values for connection as an object.||",
          "1198: |udata|*OBJ*|User data.||",
          "1199: |url|*DSTRING*|Url for connection.||",
          "1200: |username|*STRING*|The login userid for this connection.||",
          "1202: |Option|Type|Description|Flags|",
          "1203: |---|---|---|---|",
          "1204: |connectCnt|*INT*|Number of active connections.|readOnly|",
          "",
          "[Removed Lines]",
          "1195: |stats|*[Options](#options-stats)*|Statistics for connection.|readOnly|",
          "1201: ### Options \"stats\"",
          "",
          "[Added Lines]",
          "1208: |stats|*[Options](#WebSocket idconf-stats)*|Statistics for connection.|readOnly|",
          "1214: ### WebSocket idconf stats",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1232: Commands for mounting and accessing .zip files as a filesystem.",
          "1236: |Method|Function Argument Types|Description|",
          "1237: |---|---|---|",
          "1238: |append|(archive:string, filelist:array, path:string&#124;null=void, filelist2:array=void, path2:string&#124;null=void, ...):void |Like 'create()', but appends to an existing archive (with no dup checking).|",
          "",
          "[Removed Lines]",
          "1235: ### Methods",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1255: Console input and output to stderr.",
          "1259: |Method|Function Argument Types|Description|",
          "1260: |---|---|---|",
          "1262: |error|(val, ...):void |Same as log but adding prefix ERROR:.|",
          "1263: |input|(prompt:null&#124;string=''):string&#124;void |Read input from the console: if prompt uses linenoise line editing.|",
          "1264: |log|(val, ...):void |Like System.puts, but goes to stderr and includes file:line..|",
          "",
          "[Removed Lines]",
          "1258: ### Methods",
          "1261: |assert|([options](#options-consoleassert):object=void):void |Same as System.assert().|",
          "",
          "[Added Lines]",
          "1270: |assert|([options](#console-assert):object=void):void |Same as System.assert().|",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1266: |printf|(format:string, ...):void |Same as System.printf but goes to stderr.|",
          "1267: |puts|(val:any, ...):void |Same as System.puts, but goes to stderr.|",
          "1268: |warn|(val, ...):void |Same as log.|",
          "1270: |Option|Type|Description|Flags|",
          "1271: |---|---|---|---|",
          "1272: |mode|*STRKEY*|Action when assertion fails. Default from Interp.assertMode. (one of: **throw**, **log**, **puts**)||",
          "",
          "[Removed Lines]",
          "1269: ### Options \"console.assert\"",
          "",
          "[Added Lines]",
          "1278: ### console assert",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b49584fc5836a03a65af1440b552b016ff31a6ac",
      "candidate_info": {
        "commit_hash": "b49584fc5836a03a65af1440b552b016ff31a6ac",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/b49584fc5836a03a65af1440b552b016ff31a6ac",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lws/Makefile",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiInterp.c",
          "src/jsiWebSocket.c",
          "tools/makeopenssl.sh",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.25\": add openssl\n\nFossilOrigin-Name: 7add7e21ad881efd10061ca40445ff364a076c4a70fc2171bacf954192d5cdb4",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/makeopenssl.sh||tools/makeopenssl.sh",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         query       :'',        // Query to append to url.",
          "31:         rootdir     :null,      // Base directory.",
          "32:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "33:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "34:         uploadDir   :'/tmp',    // Upload files go here",
          "35:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:         ssl         :false,     // Enable ssl",
          "34:         sslCert     :null,      // Used for https",
          "35:         sslKey      :null,      // Used for https",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:             port:self.port,",
          "404:             rootdir:self.rootdir,",
          "405:             urlPrefix:self.urlPrefix,",
          "406:             mimeLookupFunc:mimeLookup,",
          "407:         };",
          "408:         switch (self.mode) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:             sslCert:self.sslCert,",
          "410:             sslKey:self.sslKey,",
          "411:             ssl:self.ssl,",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         nowait      : false,        // Just return object: caller will call update.",
          "10:         onDone      : null,         // Callback when done.",
          "11:         O           : '',           // Output file name, or - for stdout, . for response: default is url tail.",
          "13:         wsdebug     : 0             // WebSockets debug level.",
          "14:     };",
          "",
          "[Removed Lines]",
          "12:         wsOpts      :{},            // Websocket options.",
          "",
          "[Added Lines]",
          "12:         sslCert     : null,         // Used for https",
          "13:         sslKey      : null,         // Used for https",
          "14:         wsOpts      : {},           // Websocket options.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:             port:self.port,",
          "99:             address:self.address,",
          "100:             protocol:self.protocol,",
          "102:         };",
          "103:         for (var i in self.wsOpts)",
          "104:             wsopts[i] = self.wsOpts[i];",
          "",
          "[Removed Lines]",
          "101:             clientHost:self.address",
          "",
          "[Added Lines]",
          "103:             clientHost:self.address,",
          "104:             sslCert:self.sslCert,",
          "105:             sslKey:self.sslKey,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:             else {",
          "113:                 if (self.port === 80)",
          "114:                     wsopts.port = 443;",
          "116:             }",
          "117:         }",
          "118:         LogTrace(\"Starting:\", conf, wsopts);",
          "",
          "[Removed Lines]",
          "115:                 wsopts.use_ssl = true;",
          "",
          "[Added Lines]",
          "119:                 wsopts.ssl = true;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 24",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 25",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     JSI_OPT(BOOL,  Jsi_Interp, coverage,    .help=\"On exit generate detailed code coverage for function calls (with profile)\"),",
          "93:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "96:     JSI_OPT(STRKEY,Jsi_Interp, historyFile, .help=\"In interactive mode, file to use for history (~/.jsish_history)\", jsi_IIOF),",
          "97:     JSI_OPT(BOOL,  Jsi_Interp, isSafe,      .help=\"Is this a safe interp (ie. with limited or no file access)\", jsi_IIOF),",
          "98:     JSI_OPT(STRKEY,Jsi_Interp, jsppChars,   .help=\"Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string\"),",
          "",
          "[Removed Lines]",
          "95:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"Is SSL available in WebSocket\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "95:     JSI_OPT(BOOL,  Jsi_Interp, hasOpenSSL,  .help=\"WebSocket compiled with SSL is available\", jsi_IIOF),",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "125:     Jsi_Value* version;",
          "126:     int idx;",
          "127:     int port;",
          "",
          "[Removed Lines]",
          "124:     bool client, noUpdate, noWebsock, noWarn, use_ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "",
          "[Added Lines]",
          "124:     bool client, noUpdate, noWebsock, noWarn, ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     const char *protocol;",
          "171:     struct lws_protocols protocols[JWS_PROTOCOL__MAX+1];",
          "172:     int ietf_version;",
          "175:     int ws_uid;",
          "176:     int ws_gid;",
          "177:     const char *clientHost;",
          "",
          "[Removed Lines]",
          "173:     char *ssl_cert_filepath;",
          "174:     char *ssl_private_key_filepath;",
          "",
          "[Added Lines]",
          "173:     const char *sslCert;",
          "174:     const char *sslKey;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:     JSI_OPT(BOOL,   jsi_wsCmdObj, client,     .help=\"Run in client mode\", jsi_IIOF),",
          "304:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientHost, .help=\"Override host name for client\"),",
          "305:     JSI_OPT(STRKEY, jsi_wsCmdObj, clientOrigin,.help=\"Override client origin (origin)\"),",
          "307:     JSI_OPT(BOOL,   jsi_wsCmdObj, echo,       .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "308:     JSI_OPT(STRKEY, jsi_wsCmdObj, formParams, .help=\"Comma seperated list of upload form param names ('text,send,file,upload')\", jsi_IIRO),",
          "309:     JSI_OPT(BOOL,   jsi_wsCmdObj, extHandlers,.help=\"Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "306:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max libwebsocket log levels\"),",
          "",
          "[Added Lines]",
          "306:     JSI_OPT(INT,    jsi_wsCmdObj, debug,      .help=\"Set debug level. Setting this to 512 will turn on max liblws log levels\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     JSI_OPT(STRING, jsi_wsCmdObj, rootdir,    .help=\"Directory to serve html from (\\\".\\\")\"),",
          "348:     JSI_OPT(STRKEY, jsi_wsCmdObj, server,     .help=\"String to send out int the header SERVER (jsiWebSocket)\"),",
          "349:     JSI_OPT(OBJ,    jsi_wsCmdObj, ssiExts,    .help=\"Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} \", jsi_IIOF),",
          "350:     JSI_OPT(CUSTOM, jsi_wsCmdObj, stats,      .help=\"Statistical data\", jsi_IIRO, .custom=Jsi_Opt_SwitchSuboption, .data=WPSStats),",
          "351:     JSI_OPT(TIME_T, jsi_wsCmdObj, startTime,  .help=\"Time of websocket start\", jsi_IIRO),",
          "352:     JSI_OPT(STRKEY, jsi_wsCmdObj, includeFile,.help=\"Default file when no extension given (include.shtml)\"),",
          "353:     JSI_OPT(OBJ,    jsi_wsCmdObj, udata,      .help=\"User data\"),",
          "354:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlPrefix,  .help=\"Prefix in url to strip from path; for reverse proxy\"),",
          "355:     JSI_OPT(STRKEY, jsi_wsCmdObj, urlRedirect,.help=\"Redirect when no url or / is given. Must match urlPrefix, if given\"),",
          "357:     JSI_OPT(STRKEY, jsi_wsCmdObj, useridPass, .help=\"The USERID:PASSWORD to use for basic authentication\"),",
          "358:     JSI_OPT(OBJ,    jsi_wsCmdObj, version,    .help=\"WebSocket version info\", jsi_IIRO),",
          "359:     JSI_OPT_END(jsi_wsCmdObj, .help=\"Websocket options\")",
          "",
          "[Removed Lines]",
          "356:     JSI_OPT(BOOL,   jsi_wsCmdObj, use_ssl,    .help=\"Use https (for client)\", jsi_IIOF),",
          "",
          "[Added Lines]",
          "350:     JSI_OPT(BOOL,   jsi_wsCmdObj, ssl,        .help=\"Use https\", jsi_IIOF),",
          "351:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslCert,    .help=\"SSL certificate file\"),",
          "352:     JSI_OPT(STRKEY, jsi_wsCmdObj, sslKey,     .help=\"SSL key file\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2988:     { \"file\",       WebSocketFileCmd,     0,  1, \"name:string=void\",.help=\"Add file to hash, or with no args return file hash\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_VOID },",
          "2989:     { \"query\",      WebSocketQueryCmd,    1,  2, \"id:number, name:string=void\",.help=\"Get one or all query values for connect id\", .retType=(uint)JSI_TT_STRING|JSI_TT_OBJECT|JSI_TT_VOID },",
          "2990:     { \"send\",       WebSocketSendCmd,     2,  2, \"id:number, data:any\", .help=\"Send a websocket message to id\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_wssend },",
          "2992:     { \"unalias\",    WebSocketUnaliasCmd,  1,  1, \"path:string\", .help=\"Return alias reverse lookup\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID},",
          "2993:     { \"update\",     WebSocketUpdateCmd,   0,  0, \"\", .help=\"Service events for just this websocket\", .retType=(uint)JSI_TT_VOID },",
          "2994:     { \"version\",    WebSocketVersionCmd,  0,  0, \"\", .help=\"Runtime library version string\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "2991:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return libwebsocket server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "",
          "[Added Lines]",
          "2993:     { \"status\",     WebSocketStatusCmd,   0,  0, \"\", .help=\"Return liblws server status\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_VOID},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3104:     if (!cmdPtr->noCompress)",
          "3105:         cmdPtr->info.extensions = jsi_lws_exts;",
          "3109:     cmdPtr->info.gid = cmdPtr->ws_gid;",
          "3110:     cmdPtr->info.uid = cmdPtr->ws_uid;",
          "3111:     cmdPtr->opts = LWS_SERVER_OPTION_SKIP_SERVER_CANONICAL_NAME|LWS_SERVER_OPTION_VALIDATE_UTF8;",
          "3112:     cmdPtr->info.options = cmdPtr->opts;",
          "3113:     cmdPtr->info.max_http_header_pool = 16;",
          "3114:     cmdPtr->info.timeout_secs = 5;",
          "3115:     cmdPtr->info.ssl_cipher_list = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"",
          "3116:                    \"ECDHE-RSA-AES256-GCM-SHA384:\"",
          "3117:                    \"DHE-RSA-AES256-GCM-SHA384:\"",
          "",
          "[Removed Lines]",
          "3107:     cmdPtr->info.ssl_cert_filepath = cmdPtr->ssl_cert_filepath;",
          "3108:     cmdPtr->info.ssl_private_key_filepath = cmdPtr->ssl_private_key_filepath;",
          "",
          "[Added Lines]",
          "3115:     cmdPtr->info.ssl_cert_filepath = cmdPtr->sslCert;",
          "3116:     cmdPtr->info.ssl_private_key_filepath = cmdPtr->sslKey;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3127:                    \"!AES256-SHA256\";",
          "3129:     lws_set_log_level(cmdPtr->debug>255?cmdPtr->debug/256:0, NULL);",
          "3132:         cmdPtr->info.options |= LWS_SERVER_OPTION_EXPLICIT_VHOSTS;",
          "3133:     cmdPtr->context = lws_create_context(&cmdPtr->info);",
          "3134:     if (cmdPtr->context == NULL) {",
          "3135: fail:",
          "3137:         goto bail;",
          "3138:     }",
          "3139:     if (cmdPtr->info.options & LWS_SERVER_OPTION_EXPLICIT_VHOSTS) {",
          "",
          "[Removed Lines]",
          "3131:     if (!cmdPtr->client)",
          "3136:         Jsi_LogError(\"libwebsocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "[Added Lines]",
          "3132:     if (!cmdPtr->client) {",
          "3134: #ifdef LWS_OPENSSL_SUPPORT",
          "3135:         cmdPtr->info.client_ssl_cert_filepath = cmdPtr->sslCert;",
          "3136:         cmdPtr->info.client_ssl_private_key_filepath = cmdPtr->sslKey;",
          "3137: #endif",
          "3138:     }",
          "3139:     if (cmdPtr->ssl) {",
          "3140: #ifndef LWS_OPENSSL_SUPPORT",
          "3141:         Jsi_LogError(\"WebSocket not compiled with SSL\");",
          "3142:         goto bail;",
          "3143: #endif",
          "3144:         cmdPtr->info.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;",
          "3145:     }",
          "3149:         Jsi_LogError(\"WebSocket init failed on port %d (try another port?)\", cmdPtr->info.port);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3147:         lci.context = cmdPtr->context;",
          "3148:         lci.address = cmdPtr->address ? Jsi_ValueString(cmdPtr->interp, cmdPtr->address, NULL) : \"127.0.0.1\";",
          "3149:         lci.port = cmdPtr->port;",
          "3151:         lci.path = Jsi_ValueString(cmdPtr->interp, cmdPtr->rootdir, NULL);",
          "3152:         lci.host = cmdPtr->clientHost?cmdPtr->clientHost:lws_canonical_hostname( cmdPtr->context );",
          "3153:         lci.origin = cmdPtr->clientOrigin?cmdPtr->clientOrigin:\"origin\";",
          "3154:         lci.protocol = cmdPtr->protocols[JWS_PROTOCOL_WEBSOCK].name;",
          "3155:         lci.ietf_version_or_minus_one = cmdPtr->ietf_version;",
          "3156: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
          "3157:         if (cmdPtr->post)",
          "3158:             lci.method = \"POST\";",
          "",
          "[Removed Lines]",
          "3150:         lci.ssl_connection = cmdPtr->use_ssl;",
          "",
          "[Added Lines]",
          "3163:         lci.ssl_connection = cmdPtr->ssl;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3231:     return JSI_ERROR;",
          "3232: #endif",
          "3233:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "3236:     Jsi_PkgOpts wsPkgOpts = { wsObjCmd_Specs, &wsObjCmd, websockCmds, info };",
          "3237:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3238:     Jsi_DecrRefCount(interp, info);",
          "",
          "[Removed Lines]",
          "3234:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d}\",",
          "3235:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion);",
          "",
          "[Added Lines]",
          "3248:     bool hasSSL = 0;",
          "3249:     const char *sslVerStr = \"\";",
          "3250:     long sslCompat = 0;",
          "3251:     long sslVer = 0;",
          "3252: #ifdef LWS_OPENSSL_SUPPORT",
          "3253:     hasSSL = 1;",
          "3254:     sslVer = OPENSSL_VERSION_NUMBER;",
          "3255:     sslVerStr = OPENSSL_VERSION_TEXT;",
          "3256:     sslCompat = OPENSSL_API_COMPAT;",
          "3257: #endif",
          "3258:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3259:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "",
          "---------------"
        ],
        "tools/makeopenssl.sh||tools/makeopenssl.sh": [
          "File: tools/makeopenssl.sh -> tools/makeopenssl.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: cd openssl &&",
          "2: CC=\"musl-gcc -static -idirafter /usr/include/ -idirafter /usr/include/x86_64-linux-gnu/\" ./Configure  no-shared linux-x86_64 &&",
          "3: make build_libs",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: Math.prototype.sqrt = function(num:number):number {};",
          "185: Math.prototype.srand = function(seed:number):number {};",
          "186: Math.prototype.tan = function(num:number):number {};",
          "203: var Number = function(cmd,args) {};",
          "204: Number.prototype.isFinite = function():boolean {};",
          "205: Number.prototype.isInteger = function():boolean {};",
          "",
          "[Removed Lines]",
          "187: var MySql = function(cmd,args) {};",
          "188: MySql.prototype.affectedRows = function():number {};",
          "189: MySql.prototype.complete = function(sql:string):boolean {};",
          "190: MySql.prototype.conf = function(options:string|object=void):any {};",
          "191: MySql.prototype.errorNo = function():number {};",
          "192: MySql.prototype.errorState = function():string {};",
          "193: MySql.prototype.eval = function(sql:string):number {};",
          "194: MySql.prototype.exists = function(sql:string):boolean {};",
          "195: MySql.prototype.info = function():object {};",
          "196: MySql.prototype.lastQuery = function():string {};",
          "197: MySql.prototype.lastRowid = function():number {};",
          "198: MySql.prototype.onecolumn = function(sql:string):any {};",
          "199: MySql.prototype.ping = function(noError:boolean=false):number {};",
          "200: MySql.prototype.query = function(sql:string, options:function|string|array|object=void):any {};",
          "201: MySql.prototype.reconnect = function():void {};",
          "202: MySql.prototype.reset = function():number {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: <a href='#Interp'>Interp</a>",
          "20: <a href='#JSON'>JSON</a>",
          "21: <a href='#Math'>Math</a>",
          "23: <a href='#Number'>Number</a>",
          "24: <a href='#Object'>Object</a>",
          "25: <a href='#RegExp'>RegExp</a>",
          "",
          "[Removed Lines]",
          "22: <a href='#MySql'>MySql</a>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "626: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "627: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "628: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "630: <tr><td>historyFile</td><td><i>STRKEY</i></td><td>In interactive mode, file to use for history (~/.jsish_history).</td><td><i>initOnly</i></td></tr>",
          "631: <tr><td>isSafe</td><td><i>BOOL</i></td><td>Is this a safe interp (ie. with limited or no file access).</td><td><i>initOnly</i></td></tr>",
          "632: <tr><td>jsppChars</td><td><i>STRKEY</i></td><td>Line preprocessor when sourcing files. Line starts with first char, and either ends with it, or matches string.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "629: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>Is SSL available in WebSocket.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "628: <tr><td>hasOpenSSL</td><td><i>BOOL</i></td><td>WebSocket compiled with SSL is available.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: </table>",
          "797: <a name=\"Mathend\"></a>",
          "798: <p><a href=\"#TOC\">Return to top</a>",
          "926: <a name=\"Number\"></a>",
          "928: <hr>",
          "",
          "[Removed Lines]",
          "799: <a name=\"MySql\"></a>",
          "801: <hr>",
          "804: <h1>MySql</h1>",
          "806: <font color=red>Synopsis:new MySql(options:object=void):userobj",
          "808: </font><p>Commands for accessing mysql databases.",
          "811: <h2>Methods for \"MySql\"</h2>",
          "812: <table border=\"1\"class=\"cmdstbl table\">",
          "813: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "814: <tr><td>MySql</td><td>new MySql(<a href='#new MySqlOptions'>options</a>:object=void):userobj </td><td>Create a new db connection to a MySql database:.</td></tr>",
          "815: <tr><td>affectedRows</td><td>affectedRows():number </td><td>Return affected rows.</td></tr>",
          "816: <tr><td>complete</td><td>complete(sql:string):boolean </td><td>Return true if sql is complete.</td></tr>",
          "817: <tr><td>conf</td><td>conf(<a href='#MySql.confOptions'>options</a>:string|object=void) </td><td>Configure options.</td></tr>",
          "818: <tr><td>errorNo</td><td>errorNo():number </td><td>Return error code returned by most recent call to mysql3_exec().</td></tr>",
          "819: <tr><td>errorState</td><td>errorState():string </td><td>Return the mysql error state str.</td></tr>",
          "820: <tr><td>eval</td><td>eval(sql:string):number </td><td>Run sql commands without input/output.</td></tr>",
          "821: <tr><td>exists</td><td>exists(sql:string):boolean </td><td>Execute sql, and return true if there is at least one result value.</td></tr>",
          "822: <tr><td>info</td><td>info():object </td><td>Return info about last query.</td></tr>",
          "823: <tr><td>lastQuery</td><td>lastQuery():string </td><td>Return info string about most recently executed statement.</td></tr>",
          "824: <tr><td>lastRowid</td><td>lastRowid():number </td><td>Return rowid of last insert.</td></tr>",
          "825: <tr><td>onecolumn</td><td>onecolumn(sql:string) </td><td>Execute sql, and return a single value.</td></tr>",
          "826: <tr><td>ping</td><td>ping(noError:boolean=false):number </td><td>Ping connection.</td></tr>",
          "827: <tr><td>query</td><td>query(sql:string, <a href='#MySql.queryOptions'>options</a>:function|string|array|object=void) </td><td>Run sql query with input and/or outputs..</td></tr>",
          "828: <tr><td>reconnect</td><td>reconnect():void </td><td>Reconnect with current settings.</td></tr>",
          "829: <tr><td>reset</td><td>reset():number </td><td>Reset connection.</td></tr>",
          "830: </table>",
          "833: <a name=\"new MySqlOptions\"></a>",
          "834: <a name=\"MySql.confOptions\"></a>",
          "835: <h2>Options for \"new MySql\"</h2>",
          "836: <table border=\"1\" class=\"optstbl table\">",
          "837: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "838: <tr><td>bindWarn</td><td><i>BOOL</i></td><td>Treat failed variable binds as a warning.</td><td><i>initOnly</i></td></tr>",
          "839: <tr><td>database</td><td><i>STRKEY</i></td><td>Database to use.</td><td><i>initOnly</i></td></tr>",
          "840: <tr><td>debug</td><td><i>ARRAY</i></td><td>Enable debug trace for various operations. (zero or more of: <b>eval</b>, <b>delete</b>, <b>prepare</b>, <b>step</b>)</td><td><i></i></td></tr>",
          "841: <tr><td>enableMulti</td><td><i>BOOL</i></td><td>Accept muiltiple semi-colon separated statements in eval().</td><td><i>initOnly</i></td></tr>",
          "842: <tr><td>errorCnt</td><td><i>INT</i></td><td>Count of errors.</td><td><i>readOnly</i></td></tr>",
          "843: <tr><td>queryOpts</td><td><i><a href='#queryOptsOptions'>options</a></i></td><td>Default options for exec.</td><td><i></i></td></tr>",
          "844: <tr><td>forceInt</td><td><i>BOOL</i></td><td>Bind float as int if possible.</td><td><i></i></td></tr>",
          "845: <tr><td>host</td><td><i>STRING</i></td><td>IP address or host name for mysqld (default is 127.0.0.1).</td><td><i></i></td></tr>",
          "846: <tr><td>maxStmts</td><td><i>INT</i></td><td>Max cache size for compiled statements.</td><td><i></i></td></tr>",
          "847: <tr><td>name</td><td><i>DSTRING</i></td><td>Name for this db handle.</td><td><i></i></td></tr>",
          "848: <tr><td>numStmts</td><td><i>INT</i></td><td>Current size of compiled statement cache.</td><td><i>readOnly</i></td></tr>",
          "849: <tr><td>password</td><td><i>STRKEY</i></td><td>Database password..</td><td><i>initOnly</i></td></tr>",
          "850: <tr><td>port</td><td><i>INT</i></td><td>IP port for mysqld.</td><td><i>initOnly</i></td></tr>",
          "851: <tr><td>reconnect</td><td><i>BOOL</i></td><td>Reconnect.</td><td><i></i></td></tr>",
          "852: <tr><td>sslKey</td><td><i>STRING</i></td><td>SSL key.</td><td><i></i></td></tr>",
          "853: <tr><td>sslCert</td><td><i>STRING</i></td><td>SSL Cert.</td><td><i></i></td></tr>",
          "854: <tr><td>sslCA</td><td><i>STRING</i></td><td>SSL CA.</td><td><i></i></td></tr>",
          "855: <tr><td>sslCAPath</td><td><i>STRING</i></td><td>SSL CA path.</td><td><i></i></td></tr>",
          "856: <tr><td>sslCipher</td><td><i>STRING</i></td><td>SSL Cipher.</td><td><i></i></td></tr>",
          "857: <tr><td>udata</td><td><i>OBJ</i></td><td>User data..</td><td><i></i></td></tr>",
          "858: <tr><td>user</td><td><i>STRKEY</i></td><td>Database user name. Default is current user-name..</td><td><i>initOnly</i></td></tr>",
          "859: <tr><td>version</td><td><i>DOUBLE</i></td><td>Mysql version number.</td><td><i>readOnly</i></td></tr>",
          "860: </table>",
          "863: <a name=\"queryOptsOptions\"></a>",
          "864: <h2>Options for \"queryOpts\"</h2>",
          "865: <table border=\"1\" class=\"optstbl table\">",
          "866: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "867: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "868: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "869: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "870: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "871: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "872: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "873: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "874: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "875: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "876: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "877: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "878: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "879: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "880: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "881: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "882: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "883: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "884: </table>",
          "887: <a name=\"MySql.queryOptions\"></a>",
          "888: <a name=\"MySql.confOptions\"></a>",
          "889: <h2>Options for \"MySql.query\"</h2>",
          "890: <table border=\"1\" class=\"optstbl table\">",
          "891: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "892: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "893: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "894: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "895: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "896: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "897: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "898: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "899: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "900: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "901: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "902: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "903: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "904: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "905: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "906: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "907: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "908: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "909: </table>",
          "912: <a name=\"objOptions\"></a>",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "917: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "922: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "923: </table>",
          "924: <a name=\"MySqlend\"></a>",
          "925: <p><a href=\"#TOC\">Return to top</a>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1287: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "1288: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "1289: </table>",
          "1290: <a name=\"Sqliteend\"></a>",
          "1291: <p><a href=\"#TOC\">Return to top</a>",
          "1292: <a name=\"String\"></a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1164: <a name=\"objOptions\"></a>",
          "1165: <h2>Options for \"obj\"</h2>",
          "1166: <table border=\"1\" class=\"optstbl table\">",
          "1167: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1168: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "1169: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "1170: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "1171: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "1172: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "1173: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "1174: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "1175: </table>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1658: <tr><td>ids</td><td>ids(name:string=void):array </td><td>Return list of ids, or lookup one id.</td></tr>",
          "1659: <tr><td>query</td><td>query(id:number, name:string=void):string|object|void </td><td>Get one or all query values for connect id.</td></tr>",
          "1660: <tr><td>send</td><td>send(id:number, data:any):void </td><td>Send a websocket message to id. Send a message to one (or all connections if -1). If not already a string, msg is formatted as JSON prior to the send.</td></tr>",
          "1662: <tr><td>unalias</td><td>unalias(path:string):string|void </td><td>Return alias reverse lookup.</td></tr>",
          "1663: <tr><td>update</td><td>update():void </td><td>Service events for just this websocket.</td></tr>",
          "1664: <tr><td>version</td><td>version():string </td><td>Runtime library version string.</td></tr>",
          "",
          "[Removed Lines]",
          "1661: <tr><td>status</td><td>status():object|void </td><td>Return libwebsocket server status.</td></tr>",
          "",
          "[Added Lines]",
          "1547: <tr><td>status</td><td>status():object|void </td><td>Return liblws server status.</td></tr>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1675: <tr><td>client</td><td><i>BOOL</i></td><td>Run in client mode.</td><td><i>initOnly</i></td></tr>",
          "1676: <tr><td>clientHost</td><td><i>STRKEY</i></td><td>Override host name for client.</td><td><i></i></td></tr>",
          "1677: <tr><td>clientOrigin</td><td><i>STRKEY</i></td><td>Override client origin (origin).</td><td><i></i></td></tr>",
          "1679: <tr><td>echo</td><td><i>BOOL</i></td><td>LogInfo outputs all websock Send/Recv messages.</td><td><i></i></td></tr>",
          "1680: <tr><td>formParams</td><td><i>STRKEY</i></td><td>Comma seperated list of upload form param names ('text,send,file,upload').</td><td><i>readOnly</i></td></tr>",
          "1681: <tr><td>extHandlers</td><td><i>BOOL</i></td><td>Setup builtin extension-handlers, ie: .htmli, .cssi, .jsi, .mdi.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "1678: <tr><td>debug</td><td><i>INT</i></td><td>Set debug level. Setting this to 512 will turn on max libwebsocket log levels.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1564: <tr><td>debug</td><td><i>INT</i></td><td>Set debug level. Setting this to 512 will turn on max liblws log levels.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1718: <tr><td>rootdir</td><td><i>STRING</i></td><td>Directory to serve html from (\".\").</td><td><i></i></td></tr>",
          "1719: <tr><td>server</td><td><i>STRKEY</i></td><td>String to send out int the header SERVER (jsiWebSocket).</td><td><i></i></td></tr>",
          "1720: <tr><td>ssiExts</td><td><i>OBJ</i></td><td>Object map of file extensions to apply SSI.  eg. {myext:true, shtml:false} .</td><td><i>initOnly</i></td></tr>",
          "1721: <tr><td>stats</td><td><i><a href='#statsOptions'>options</a></i></td><td>Statistical data.</td><td><i>readOnly</i></td></tr>",
          "1722: <tr><td>startTime</td><td><i>TIME_T</i></td><td>Time of websocket start.</td><td><i>readOnly</i></td></tr>",
          "1723: <tr><td>includeFile</td><td><i>STRKEY</i></td><td>Default file when no extension given (include.shtml).</td><td><i></i></td></tr>",
          "1724: <tr><td>udata</td><td><i>OBJ</i></td><td>User data.</td><td><i></i></td></tr>",
          "1725: <tr><td>urlPrefix</td><td><i>STRKEY</i></td><td>Prefix in url to strip from path; for reverse proxy.</td><td><i></i></td></tr>",
          "1726: <tr><td>urlRedirect</td><td><i>STRKEY</i></td><td>Redirect when no url or / is given. Must match urlPrefix, if given.</td><td><i></i></td></tr>",
          "1728: <tr><td>useridPass</td><td><i>STRKEY</i></td><td>The USERID:PASSWORD to use for basic authentication.</td><td><i></i></td></tr>",
          "1729: <tr><td>version</td><td><i>OBJ</i></td><td>WebSocket version info.</td><td><i>readOnly</i></td></tr>",
          "1730: </table>",
          "",
          "[Removed Lines]",
          "1727: <tr><td>use_ssl</td><td><i>BOOL</i></td><td>Use https (for client).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "1607: <tr><td>ssl</td><td><i>BOOL</i></td><td>Use https.</td><td><i>initOnly</i></td></tr>",
          "1608: <tr><td>sslCert</td><td><i>STRKEY</i></td><td>SSL certificate file.</td><td><i></i></td></tr>",
          "1609: <tr><td>sslKey</td><td><i>STRKEY</i></td><td>SSL key file.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}