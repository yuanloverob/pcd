{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "baa3458920680941e93f9e9a382e9539fba44642",
      "candidate_info": {
        "commit_hash": "baa3458920680941e93f9e9a382e9539fba44642",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/baa3458920680941e93f9e9a382e9539fba44642",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/journal3.test"
        ],
        "message": "Modify journal3.test so that it can handle Tcl command \"file attr <file> -perm\" returning octal values in either \"00755\" or \"0o755\" format.\n\nFossilOrigin-Name: b0b655625cf491c832a259d29a67660b8d5943c201617900a83d0660b2673377",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/journal3.test||test/journal3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75e31b1d56781fc4d28aea6c7f1393a18fd34870a5beb92df81c088d61351b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/journal3.test||test/journal3.test": [
          "File: test/journal3.test -> test/journal3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   } {",
          "39:     db close",
          "40:     #set effective [format %.5o [expr $permissions & ~$umask]]",
          "41:     if {$tcl_version>=8.7} {",
          "42:        regsub {^00} $permissions {0o} permissions",
          "43:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     set res \"/[regsub {^00} $permissions {0.}]/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:       catch { forcedelete test.db-journal }",
          "47:       file attributes test.db -permissions $permissions",
          "48:       file attributes test.db -permissions",
          "50:     do_test journal3-1.2.$tn.2 { file exists test.db-journal } {0}",
          "51:     do_test journal3-1.2.$tn.3 {",
          "52:       sqlite3 db test.db",
          "",
          "[Removed Lines]",
          "49:     } $permissions",
          "",
          "[Added Lines]",
          "50:     } $res",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     } {1}",
          "59:     do_test journal3-1.2.$tn.4 {",
          "60:       file attr test.db-journal -perm",
          "62:     do_execsql_test journal3-1.2.$tn.5 { ROLLBACK } {}",
          "63:   }",
          "",
          "[Removed Lines]",
          "61:     } $effective",
          "",
          "[Added Lines]",
          "62:     } $res",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
      "candidate_info": {
        "commit_hash": "d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "Recover a some of the performance lost by window function alias fix two check-ins back.\n\nFossilOrigin-Name: 965cbcea117835d2c6d2ec58c8025b227f491c35805e282cb31228436bc6bec1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f908cd40b275a5753d5167ebb25871300381687adcb3a7fcb1f14b57a20ee3d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1673: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1674:   w.pParse->nHeight -= pExpr->nHeight;",
          "1675: #endif",
          "1682:   pNC->ncFlags |= savedHasAgg;",
          "1683:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1684: }",
          "",
          "[Removed Lines]",
          "1676:   if( pNC->ncFlags & NC_HasAgg ){",
          "1677:     ExprSetProperty(pExpr, EP_Agg);",
          "1678:   }",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "[Added Lines]",
          "1676:   assert( EP_Agg==NC_HasAgg );",
          "1677:   assert( EP_Win==NC_HasWin );",
          "1678:   testcase( pNC->ncFlags & NC_HasAgg );",
          "1679:   testcase( pNC->ncFlags & NC_HasWin );",
          "1680:   ExprSetProperty(pExpr, pNC->ncFlags & (NC_HasAgg|NC_HasWin) );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
      "candidate_info": {
        "commit_hash": "7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Minor simplification of NULL value handling for STAT4.\n\nFossilOrigin-Name: 5718a9d5fc3fdfc89db869501c81fda39b3ec5c7e11fa0038fc258e316f5d8a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 03f2e78899fad99b0a0951b3a408268276954d4cd785389ed9a0192c9217f6fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1511:   }else if( op==TK_NULL ){",
          "1512:     pVal = valueNew(db, pCtx);",
          "1513:     if( pVal==0 ) goto no_mem;",
          "1515:   }",
          "1516: #ifndef SQLITE_OMIT_BLOB_LITERAL",
          "1517:   else if( op==TK_BLOB ){",
          "",
          "[Removed Lines]",
          "1514:     sqlite3VdbeMemNumerify(pVal);",
          "",
          "[Added Lines]",
          "1514:     sqlite3VdbeMemSetNull(pVal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9546c766567d11937cf1bccd98c80bc969fb9ae8",
      "candidate_info": {
        "commit_hash": "9546c766567d11937cf1bccd98c80bc969fb9ae8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9546c766567d11937cf1bccd98c80bc969fb9ae8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix harmless compiler warnings in the CLI.\n\nFossilOrigin-Name: 2846bc0429c0956473bfe99dde135f2c206720f0be4c2800118b280e446ce325",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6d5fee8cdbdce8515957e8288e4d1e7b06f417fd3f9deeeb636fbf5b995af51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3955:   const unsigned char *pBlob;",
          "3956:   int nBlob;",
          "3957:   int iInt;",
          "3959:   nBlob = sqlite3_value_bytes(argv[0]);",
          "3960:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);",
          "3961:   iInt = sqlite3_value_int(argv[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3959:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3989:   sqlite3_value **argv",
          "3990: ){",
          "3991:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3992:   if( zText[0]=='\\'' ){",
          "3993:     int nText = sqlite3_value_bytes(argv[0]);",
          "3994:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3993:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5417:   }",
          "5418: }",
          "5421:   sqlite3 *db,",
          "5422:   int *pRc,",
          "5423:   sqlite3_stmt **ppStmt,",
          "",
          "[Removed Lines]",
          "5420: static void shellPreparePrintf(",
          "",
          "[Added Lines]",
          "5429: void shellPreparePrintf(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5440:   }",
          "5441: }",
          "5444:   int *pRc,",
          "5445:   sqlite3_stmt *pStmt",
          "5446: ){",
          "",
          "[Removed Lines]",
          "5443: static void shellFinalize(",
          "",
          "[Added Lines]",
          "5458: void shellFinalize(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:   }",
          "5457: }",
          "5460:   int *pRc,",
          "5461:   sqlite3_stmt *pStmt",
          "5462: ){",
          "",
          "[Removed Lines]",
          "5459: static void shellReset(",
          "",
          "[Added Lines]",
          "5480: void shellReset(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80f6bfc064eac13c408aa7e46e2e154d1d40f297",
      "candidate_info": {
        "commit_hash": "80f6bfc064eac13c408aa7e46e2e154d1d40f297",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/80f6bfc064eac13c408aa7e46e2e154d1d40f297",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/aggnested.test"
        ],
        "message": "Improvements to the algorithm that determines which SELECT in a sequence of nested SELECT statements that an aggregate function belongs to.  This resolves an issue identified by dbsqlfuzz.\n\nFossilOrigin-Name: d768007473f4ed40abbdf2c7e501b580b1cc37c1620c7cb90af1f208a8c35145",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/aggnested.test||test/aggnested.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4145b3e05051ba6729105157a876793ad14a05d895fc10fe704f437eab16ea93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5297:     }",
          "5298:     if( i<nSrc ){",
          "5299:       p->nThis++;",
          "5301:       p->nOther++;",
          "5302:     }",
          "5303:   }",
          "",
          "[Removed Lines]",
          "5300:     }else{",
          "",
          "[Added Lines]",
          "5300:     }else if( nSrc==0 || pExpr->iTable<pSrc->a[0].iCursor ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5314:   Walker w;",
          "5315:   struct SrcCount cnt;",
          "5316:   assert( pExpr->op==TK_AGG_FUNCTION );",
          "5317:   w.xExprCallback = exprSrcCount;",
          "5319:   w.u.pSrcCount = &cnt;",
          "5320:   cnt.pSrc = pSrcList;",
          "5321:   cnt.nThis = 0;",
          "",
          "[Removed Lines]",
          "5318:   w.xSelectCallback = 0;",
          "",
          "[Added Lines]",
          "5320:   memset(&w, 0, sizeof(w));",
          "5322:   w.xSelectCallback = sqlite3SelectWalkNoop;",
          "",
          "---------------"
        ],
        "test/aggnested.test||test/aggnested.test": [
          "File: test/aggnested.test -> test/aggnested.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2012 August 23",
          "",
          "[Added Lines]",
          "1: # 2012-08-23",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:      GROUP BY id1;",
          "233:   }",
          "234: } {12 2 34 4}",
          "237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: # 2019-08-31",
          "237: # Problem found by dbsqlfuzz",
          "238: #",
          "239: do_execsql_test aggnested-4.1 {",
          "240:   DROP TABLE IF EXISTS aa;",
          "241:   DROP TABLE IF EXISTS bb;",
          "242:   CREATE TABLE aa(x INT);  INSERT INTO aa(x) VALUES(123);",
          "243:   CREATE TABLE bb(y INT);  INSERT INTO bb(y) VALUES(456);",
          "244:   SELECT (SELECT sum(x+(SELECT y)) FROM bb) FROM aa;",
          "245: } {579}",
          "246: do_execsql_test aggnested-4.2 {",
          "247:   SELECT (SELECT sum(x+y) FROM bb) FROM aa;",
          "248: } {579}",
          "249: do_execsql_test aggnested-4.3 {",
          "250:   DROP TABLE IF EXISTS tx;",
          "251:   DROP TABLE IF EXISTS ty;",
          "252:   CREATE TABLE tx(x INT);",
          "253:   INSERT INTO tx VALUES(1),(2),(3),(4),(5);",
          "254:   CREATE TABLE ty(y INT);",
          "255:   INSERT INTO ty VALUES(91),(92),(93);",
          "256:   SELECT min((SELECT count(y) FROM ty)) FROM tx;",
          "257: } {3}",
          "258: do_execsql_test aggnested-4.4 {",
          "259:   SELECT max((SELECT a FROM (SELECT count(*) AS a FROM ty) AS s)) FROM tx;",
          "260: } {3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}