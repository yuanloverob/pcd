{
  "cve_id": "CVE-2017-18200",
  "cve_desc": "The f2fs implementation in the Linux kernel before 4.14 mishandles reference counts associated with f2fs_wait_discard_bios calls, which allows local users to cause a denial of service (BUG), as demonstrated by fstrim.",
  "repo": "torvalds/linux",
  "patch_hash": "638164a2718f337ea224b747cf5977ef143166a4",
  "patch_info": {
    "commit_hash": "638164a2718f337ea224b747cf5977ef143166a4",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/638164a2718f337ea224b747cf5977ef143166a4",
    "files": [
      "fs/f2fs/f2fs.h",
      "fs/f2fs/segment.c",
      "fs/f2fs/super.c"
    ],
    "message": "f2fs: fix potential panic during fstrim\n\nAs Ju Hyung Park reported:\n\n\"When 'fstrim' is called for manual trim, a BUG() can be triggered\nrandomly with this patch.\n\nI'm seeing this issue on both x86 Desktop and arm64 Android phone.\n\nOn x86 Desktop, this was caused during Ubuntu boot-up. I have a\ncronjob installed which calls 'fstrim -v /' during boot. On arm64\nAndroid, this was caused during GC looping with 1ms gc_min_sleep_time\n& gc_max_sleep_time.\"\n\nRoot cause of this issue is that f2fs_wait_discard_bios can only be\nused by f2fs_put_super, because during put_super there must be no\nother referrers, so it can ignore discard entry's reference count\nwhen removing the entry, otherwise in other caller we will hit bug_on\nin __remove_discard_cmd as there may be other issuer added reference\ncount in discard entry.\n\nThread A\t\t\t\tThread B\n\t\t\t\t\t- issue_discard_thread\n- f2fs_ioc_fitrim\n - f2fs_trim_fs\n  - f2fs_wait_discard_bios\n   - __issue_discard_cmd\n    - __submit_discard_cmd\n\t\t\t\t\t - __wait_discard_cmd\n\t\t\t\t\t  - dc->ref++\n\t\t\t\t\t  - __wait_one_discard_bio\n   - __wait_discard_cmd\n    - __remove_discard_cmd\n     - f2fs_bug_on(sbi, dc->ref)\n\nFixes: 969d1b180d987c2be02de890d0fff0f66a0e80de\nReported-by: Ju Hyung Park <qkrwngud825@gmail.com>\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
    "before_after_code_files": [
      "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h",
      "fs/f2fs/segment.c||fs/f2fs/segment.c",
      "fs/f2fs/super.c||fs/f2fs/super.c"
    ]
  },
  "patch_diff": {
    "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h": [
      "File: fs/f2fs/f2fs.h -> fs/f2fs/f2fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2525: bool is_checkpointed_data(struct f2fs_sb_info *sbi, block_t blkaddr);",
      "2526: void refresh_sit_entry(struct f2fs_sb_info *sbi, block_t old, block_t new);",
      "2527: void stop_discard_thread(struct f2fs_sb_info *sbi);",
      "2529: void clear_prefree_segments(struct f2fs_sb_info *sbi, struct cp_control *cpc);",
      "2530: void release_discard_addrs(struct f2fs_sb_info *sbi);",
      "2531: int npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra);",
      "",
      "[Removed Lines]",
      "2528: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi);",
      "",
      "[Added Lines]",
      "2528: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi, bool umount);",
      "",
      "---------------"
    ],
    "fs/f2fs/segment.c||fs/f2fs/segment.c": [
      "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1210: }",
      "1214: {",
      "1215:  __issue_discard_cmd(sbi, false);",
      "1216:  __drop_discard_cmd(sbi);",
      "1218: }",
      "1220: static void mark_discard_range_all(struct f2fs_sb_info *sbi)",
      "",
      "[Removed Lines]",
      "1213: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)",
      "1217:  __wait_discard_cmd(sbi, false);",
      "",
      "[Added Lines]",
      "1213: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi, bool umount)",
      "1217:  __wait_discard_cmd(sbi, !umount);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2244:  }",
      "2246:  mark_discard_range_all(sbi);",
      "2248: out:",
      "2249:  range->len = F2FS_BLK_TO_BYTES(cpc.trimmed);",
      "2250:  return err;",
      "",
      "[Removed Lines]",
      "2247:  f2fs_wait_discard_bios(sbi);",
      "",
      "[Added Lines]",
      "2247:  f2fs_wait_discard_bios(sbi, false);",
      "",
      "---------------"
    ],
    "fs/f2fs/super.c||fs/f2fs/super.c": [
      "File: fs/f2fs/super.c -> fs/f2fs/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "801:  }",
      "806:  if (f2fs_discard_en(sbi) && !sbi->discard_blks) {",
      "807:   struct cp_control cpc = {",
      "",
      "[Removed Lines]",
      "804:  f2fs_wait_discard_bios(sbi);",
      "",
      "[Added Lines]",
      "804:  f2fs_wait_discard_bios(sbi, true);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01f9cf6db70f97d92d5e601ad397921014a999ca",
      "candidate_info": {
        "commit_hash": "01f9cf6db70f97d92d5e601ad397921014a999ca",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/01f9cf6db70f97d92d5e601ad397921014a999ca",
        "files": [
          "fs/f2fs/segment.c"
        ],
        "message": "f2fs: fix to correct return value of f2fs_trim_fs\n\nWe should account trimmed block number from __wait_all_discard_cmd\nin __issue_discard_cmd_range, otherwise trimmed blocks returned\nby f2fs_trim_fs will be wrong, this patch fixes it.\n\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/segment.c||fs/f2fs/segment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ],
          "candidate": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/f2fs/segment.c||fs/f2fs/segment.c": [
          "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1320:  return trimmed;",
          "1321: }",
          "1324:       struct discard_policy *dpolicy)",
          "1325: {",
          "1326:  struct discard_policy dp;",
          "1334:  __init_discard_policy(sbi, &dp, DPOLICY_FSTRIM, 1);",
          "1336:  __init_discard_policy(sbi, &dp, DPOLICY_UMOUNT, 1);",
          "1338: }",
          "",
          "[Removed Lines]",
          "1323: static void __wait_all_discard_cmd(struct f2fs_sb_info *sbi,",
          "1328:  if (dpolicy) {",
          "1329:   __wait_discard_cmd_range(sbi, dpolicy, 0, UINT_MAX);",
          "1330:   return;",
          "1331:  }",
          "1335:  __wait_discard_cmd_range(sbi, &dp, 0, UINT_MAX);",
          "1337:  __wait_discard_cmd_range(sbi, &dp, 0, UINT_MAX);",
          "",
          "[Added Lines]",
          "1323: static unsigned int __wait_all_discard_cmd(struct f2fs_sb_info *sbi,",
          "1327:  unsigned int discard_blks;",
          "1329:  if (dpolicy)",
          "1330:   return __wait_discard_cmd_range(sbi, dpolicy, 0, UINT_MAX);",
          "1334:  discard_blks = __wait_discard_cmd_range(sbi, &dp, 0, UINT_MAX);",
          "1336:  discard_blks += __wait_discard_cmd_range(sbi, &dp, 0, UINT_MAX);",
          "1338:  return discard_blks;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2368:  return has_candidate;",
          "2369: }",
          "2372:      struct discard_policy *dpolicy,",
          "2373:      unsigned int start, unsigned int end)",
          "2374: {",
          "",
          "[Removed Lines]",
          "2371: static void __issue_discard_cmd_range(struct f2fs_sb_info *sbi,",
          "",
          "[Added Lines]",
          "2372: static unsigned int __issue_discard_cmd_range(struct f2fs_sb_info *sbi,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:  struct discard_cmd *dc;",
          "2379:  struct blk_plug plug;",
          "2380:  int issued;",
          "2382: next:",
          "2383:  issued = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2382:  unsigned int trimmed = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2416:    blk_finish_plug(&plug);",
          "2417:    mutex_unlock(&dcc->cmd_lock);",
          "2419:    congestion_wait(BLK_RW_ASYNC, HZ/50);",
          "2420:    goto next;",
          "2421:   }",
          "",
          "[Removed Lines]",
          "2418:    __wait_all_discard_cmd(sbi, NULL);",
          "",
          "[Added Lines]",
          "2420:    trimmed += __wait_all_discard_cmd(sbi, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2430:  blk_finish_plug(&plug);",
          "2431:  mutex_unlock(&dcc->cmd_lock);",
          "2432: }",
          "2434: int f2fs_trim_fs(struct f2fs_sb_info *sbi, struct fstrim_range *range)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2435:  return trimmed;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2486:  end_block = START_BLOCK(sbi, end_segno + 1);",
          "2488:  __init_discard_policy(sbi, &dpolicy, DPOLICY_FSTRIM, cpc.trim_minlen);",
          "2492:      start_block, end_block);",
          "2493:  range->len = F2FS_BLK_TO_BYTES(trimmed);",
          "2494: out:",
          "",
          "[Removed Lines]",
          "2489:  __issue_discard_cmd_range(sbi, &dpolicy, start_block, end_block);",
          "2491:  trimmed = __wait_discard_cmd_range(sbi, &dpolicy,",
          "",
          "[Added Lines]",
          "2493:  trimmed = __issue_discard_cmd_range(sbi, &dpolicy,",
          "2494:      start_block, end_block);",
          "2496:  trimmed += __wait_discard_cmd_range(sbi, &dpolicy,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1eb1ef4a8e9f6a4d9c2c7a645aba21d2f8719728",
      "candidate_info": {
        "commit_hash": "1eb1ef4a8e9f6a4d9c2c7a645aba21d2f8719728",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1eb1ef4a8e9f6a4d9c2c7a645aba21d2f8719728",
        "files": [
          "fs/f2fs/segment.c"
        ],
        "message": "f2fs: better to wait for fstrim completion\n\nIn android, we'd better wait for fstrim completion instead of issuing the\ndiscard commands asynchronous.\n\nReviewed-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/segment.c||fs/f2fs/segment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ],
          "candidate": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/f2fs/segment.c||fs/f2fs/segment.c": [
          "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <linux/swap.h>",
          "18: #include <linux/timer.h>",
          "19: #include <linux/freezer.h>",
          "21: #include \"f2fs.h\"",
          "22: #include \"segment.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <linux/sched/signal.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1061:    if (dcc->pend_list_tag[i] & P_TRIM) {",
          "1062:     __submit_discard_cmd(sbi, dc);",
          "1063:     issued++;",
          "1064:     continue;",
          "1065:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:     if (fatal_signal_pending(current))",
          "1067:      break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2212:  }",
          "2214:  mark_discard_range_all(sbi);",
          "2215: out:",
          "2216:  range->len = F2FS_BLK_TO_BYTES(cpc.trimmed);",
          "2217:  return err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2219:  f2fs_wait_discard_bios(sbi);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf5c759f927dc92452fa214691be0c8a3e7c115d",
      "candidate_info": {
        "commit_hash": "cf5c759f927dc92452fa214691be0c8a3e7c115d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cf5c759f927dc92452fa214691be0c8a3e7c115d",
        "files": [
          "fs/f2fs/f2fs.h",
          "fs/f2fs/segment.c",
          "fs/f2fs/super.c"
        ],
        "message": "f2fs: give up CP_TRIMMED_FLAG if it drops discards\n\nIn ->umount, once we drop remained discard entries, we should not\nset CP_TRIMMED_FLAG with another checkpoint.\n\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h",
          "fs/f2fs/segment.c||fs/f2fs/segment.c",
          "fs/f2fs/super.c||fs/f2fs/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h",
            "fs/f2fs/segment.c||fs/f2fs/segment.c",
            "fs/f2fs/super.c||fs/f2fs/super.c"
          ],
          "candidate": [
            "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h",
            "fs/f2fs/segment.c||fs/f2fs/segment.c",
            "fs/f2fs/super.c||fs/f2fs/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/f2fs/f2fs.h||fs/f2fs/f2fs.h": [
          "File: fs/f2fs/f2fs.h -> fs/f2fs/f2fs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2553:       unsigned int granularity);",
          "2554: void refresh_sit_entry(struct f2fs_sb_info *sbi, block_t old, block_t new);",
          "2555: void stop_discard_thread(struct f2fs_sb_info *sbi);",
          "2557: void clear_prefree_segments(struct f2fs_sb_info *sbi, struct cp_control *cpc);",
          "2558: void release_discard_addrs(struct f2fs_sb_info *sbi);",
          "2559: int npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra);",
          "",
          "[Removed Lines]",
          "2556: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi);",
          "",
          "[Added Lines]",
          "2556: bool f2fs_wait_discard_bios(struct f2fs_sb_info *sbi);",
          "",
          "---------------"
        ],
        "fs/f2fs/segment.c||fs/f2fs/segment.c": [
          "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196:  return issued;",
          "1197: }",
          "1200: {",
          "1201:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "1202:  struct list_head *pend_list;",
          "1203:  struct discard_cmd *dc, *tmp;",
          "1204:  int i;",
          "1206:  mutex_lock(&dcc->cmd_lock);",
          "1207:  for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {",
          "",
          "[Removed Lines]",
          "1199: static void __drop_discard_cmd(struct f2fs_sb_info *sbi)",
          "",
          "[Added Lines]",
          "1199: static bool __drop_discard_cmd(struct f2fs_sb_info *sbi)",
          "1205:  bool dropped = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1209:   list_for_each_entry_safe(dc, tmp, pend_list, list) {",
          "1210:    f2fs_bug_on(sbi, dc->state != D_PREP);",
          "1211:    __remove_discard_cmd(sbi, dc);",
          "1212:   }",
          "1213:  }",
          "1214:  mutex_unlock(&dcc->cmd_lock);",
          "1215: }",
          "1217: static void __wait_one_discard_bio(struct f2fs_sb_info *sbi,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213:    dropped = true;",
          "1218:  return dropped;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1306: }",
          "1310: {",
          "1311:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "1312:  struct discard_policy dpolicy;",
          "1314:  init_discard_policy(&dpolicy, DPOLICY_UMOUNT, dcc->discard_granularity);",
          "1315:  __issue_discard_cmd(sbi, &dpolicy);",
          "1317:  __wait_all_discard_cmd(sbi, &dpolicy);",
          "1318: }",
          "1320: static int issue_discard_thread(void *data)",
          "",
          "[Removed Lines]",
          "1309: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)",
          "1316:  __drop_discard_cmd(sbi);",
          "",
          "[Added Lines]",
          "1313: bool f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)",
          "1317:  bool dropped;",
          "1321:  dropped = __drop_discard_cmd(sbi);",
          "1324:  return dropped;",
          "",
          "---------------"
        ],
        "fs/f2fs/super.c||fs/f2fs/super.c": [
          "File: fs/f2fs/super.c -> fs/f2fs/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "781: {",
          "782:  struct f2fs_sb_info *sbi = F2FS_SB(sb);",
          "783:  int i;",
          "785:  f2fs_quota_off_umount(sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "784:  bool dropped;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:  }",
          "807:   struct cp_control cpc = {",
          "808:    .reason = CP_UMOUNT | CP_TRIMMED,",
          "809:   };",
          "",
          "[Removed Lines]",
          "804:  f2fs_wait_discard_bios(sbi);",
          "806:  if (f2fs_discard_en(sbi) && !sbi->discard_blks) {",
          "",
          "[Added Lines]",
          "805:  dropped = f2fs_wait_discard_bios(sbi);",
          "807:  if (f2fs_discard_en(sbi) && !sbi->discard_blks && !dropped) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd5b07383a9057f9b6aefad6c784af95ffde8a67",
      "candidate_info": {
        "commit_hash": "bd5b07383a9057f9b6aefad6c784af95ffde8a67",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bd5b07383a9057f9b6aefad6c784af95ffde8a67",
        "files": [
          "fs/f2fs/segment.c"
        ],
        "message": "f2fs: introduce __issue_discard_cmd\n\nJust cleanup, no logic change.\n\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/segment.c||fs/f2fs/segment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ],
          "candidate": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/f2fs/segment.c||fs/f2fs/segment.c": [
          "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "971:  return 0;",
          "972: }",
          "975: void f2fs_wait_discard_bio(struct f2fs_sb_info *sbi, block_t blkaddr)",
          "976: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974: static void __issue_discard_cmd(struct f2fs_sb_info *sbi, bool issue_cond)",
          "975: {",
          "976:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "977:  struct list_head *pend_list;",
          "978:  struct discard_cmd *dc, *tmp;",
          "979:  struct blk_plug plug;",
          "980:  int i, iter = 0;",
          "982:  mutex_lock(&dcc->cmd_lock);",
          "983:  blk_start_plug(&plug);",
          "984:  for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {",
          "985:   pend_list = &dcc->pend_list[i];",
          "986:   list_for_each_entry_safe(dc, tmp, pend_list, list) {",
          "987:    f2fs_bug_on(sbi, dc->state != D_PREP);",
          "989:    if (!issue_cond || is_idle(sbi))",
          "990:     __submit_discard_cmd(sbi, dc);",
          "991:    if (issue_cond && iter++ > DISCARD_ISSUE_RATE)",
          "992:     goto out;",
          "993:   }",
          "994:  }",
          "995: out:",
          "996:  blk_finish_plug(&plug);",
          "997:  mutex_unlock(&dcc->cmd_lock);",
          "998: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993: void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)",
          "994: {",
          "995:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "997:  struct list_head *wait_list = &(dcc->wait_list);",
          "998:  struct discard_cmd *dc, *tmp;",
          "1012:  list_for_each_entry_safe(dc, tmp, wait_list, list) {",
          "1013:   wait_for_completion_io(&dc->wait);",
          "1014:   __remove_discard_cmd(sbi, dc);",
          "1015:  }",
          "1017:  mutex_unlock(&dcc->cmd_lock);",
          "1018: }",
          "",
          "[Removed Lines]",
          "996:  struct list_head *pend_list;",
          "999:  struct blk_plug plug;",
          "1000:  int i;",
          "1002:  mutex_lock(&dcc->cmd_lock);",
          "1004:  blk_start_plug(&plug);",
          "1005:  for (i = 0; i < MAX_PLIST_NUM; i++) {",
          "1006:   pend_list = &dcc->pend_list[i];",
          "1007:   list_for_each_entry_safe(dc, tmp, pend_list, list)",
          "1008:    __submit_discard_cmd(sbi, dc);",
          "1009:  }",
          "1010:  blk_finish_plug(&plug);",
          "",
          "[Added Lines]",
          "1025:  __issue_discard_cmd(sbi, false);",
          "1027:  mutex_lock(&dcc->cmd_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1022:  struct f2fs_sb_info *sbi = data;",
          "1023:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "1024:  wait_queue_head_t *q = &dcc->discard_wait_queue;",
          "1026:  struct list_head *wait_list = &dcc->wait_list;",
          "1027:  struct discard_cmd *dc, *tmp;",
          "1030: repeat:",
          "1031:  if (kthread_should_stop())",
          "1032:   return 0;",
          "1051:  list_for_each_entry_safe(dc, tmp, wait_list, list) {",
          "1052:   if (dc->state == D_DONE) {",
          "1053:    wait_for_completion_io(&dc->wait);",
          "",
          "[Removed Lines]",
          "1025:  struct list_head *pend_list;",
          "1028:  struct blk_plug plug;",
          "1029:  int iter = 0, i;",
          "1034:  mutex_lock(&dcc->cmd_lock);",
          "1035:  blk_start_plug(&plug);",
          "1036:  for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {",
          "1037:   pend_list = &dcc->pend_list[i];",
          "1038:   list_for_each_entry_safe(dc, tmp, pend_list, list) {",
          "1039:    f2fs_bug_on(sbi, dc->state != D_PREP);",
          "1041:    if (is_idle(sbi))",
          "1042:     __submit_discard_cmd(sbi, dc);",
          "1044:    if (iter++ > DISCARD_ISSUE_RATE)",
          "1045:     goto next_step;",
          "1046:   }",
          "1047:  }",
          "1048: next_step:",
          "1049:  blk_finish_plug(&plug);",
          "",
          "[Added Lines]",
          "1046:  __issue_discard_cmd(sbi, true);",
          "1048:  mutex_lock(&dcc->cmd_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1056:  }",
          "1057:  mutex_unlock(&dcc->cmd_lock);",
          "1060:  congestion_wait(BLK_RW_SYNC, HZ/50);",
          "1062:  wait_event_interruptible(*q, kthread_should_stop() ||",
          "",
          "[Removed Lines]",
          "1059:  iter = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40465257ac4159e9ebfba10ee502e795b917da76",
      "candidate_info": {
        "commit_hash": "40465257ac4159e9ebfba10ee502e795b917da76",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/40465257ac4159e9ebfba10ee502e795b917da76",
        "files": [
          "fs/f2fs/segment.c"
        ],
        "message": "f2fs: wait for discard completion after submission\n\nWe don't need to wait for each discard commands when unmounting the image.\n\nReviewed-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/segment.c||fs/f2fs/segment.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ],
          "candidate": [
            "fs/f2fs/segment.c||fs/f2fs/segment.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/f2fs/segment.c||fs/f2fs/segment.c": [
          "File: fs/f2fs/segment.c -> fs/f2fs/segment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "676:  struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;",
          "677:  struct list_head *wait_list = &(dcc->discard_cmd_list);",
          "678:  struct discard_cmd *dc, *tmp;",
          "680:  mutex_lock(&dcc->cmd_lock);",
          "681:  list_for_each_entry_safe(dc, tmp, wait_list, list) {",
          "683:   if (blkaddr == NULL_ADDR) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  struct blk_plug plug;",
          "683:  blk_start_plug(&plug);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "686:     submit_bio(dc->bio);",
          "687:     atomic_inc(&dcc->submit_discard);",
          "688:    }",
          "692:    continue;",
          "693:   }",
          "",
          "[Removed Lines]",
          "689:    wait_for_completion_io(&dc->wait);",
          "691:    __remove_discard_cmd(sbi, dc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     __remove_discard_cmd(sbi, dc);",
          "700:   }",
          "701:  }",
          "702:  mutex_unlock(&dcc->cmd_lock);",
          "703: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:  blk_finish_plug(&plug);",
          "706:  if (blkaddr == NULL_ADDR) {",
          "707:   list_for_each_entry_safe(dc, tmp, wait_list, list) {",
          "708:    wait_for_completion_io(&dc->wait);",
          "709:    __remove_discard_cmd(sbi, dc);",
          "710:   }",
          "711:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}