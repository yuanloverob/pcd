{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e26ac852a13e8ba1182f6c3d90a750e5a658118",
      "candidate_info": {
        "commit_hash": "9e26ac852a13e8ba1182f6c3d90a750e5a658118",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e26ac852a13e8ba1182f6c3d90a750e5a658118",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/sqllimits1.test"
        ],
        "message": "New test case for SQLITE_TOOBIG errors.\n\nFossilOrigin-Name: 4c77fbbe5d54248821161d708d0631fab65659bef31f95a61af681d4639f5918",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/sqllimits1.test||test/sqllimits1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea2d4b65e20e44e19219c821bf68e97ff3af1760b3b4762250d020ba2a5a6343",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/sqllimits1.test||test/sqllimits1.test": [
          "File: test/sqllimits1.test -> test/sqllimits1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: foreach {key value} [array get saved] {",
          "890:   catch {set $key $value}",
          "891: }",
          "892: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893: #-------------------------------------------------------------------------",
          "894: # At one point the following caused an assert() to fail.",
          "895: #",
          "896: sqlite3_limit db SQLITE_LIMIT_LENGTH 10000",
          "897: set nm [string repeat x 10000]",
          "898: do_catchsql_test sqllimits1-17.1 \"",
          "899:   CREATE TABLE $nm (x PRIMARY KEY)",
          "900: \" {1 {string or blob too big}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "731dd6ebdaa4463286ed5843cd6d3bc6d506e117",
      "candidate_info": {
        "commit_hash": "731dd6ebdaa4463286ed5843cd6d3bc6d506e117",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/731dd6ebdaa4463286ed5843cd6d3bc6d506e117",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Add the \"index_usage\" utility program.\n\nFossilOrigin-Name: df95455213c9d1db7229e94217e78edc05cbf9e40f39528105494ea6ac52be94",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1306: showshm$(TEXE): $(TOP)/tool/showshm.c",
          "1307:  $(LTLINK) -o $@ $(TOP)/tool/showshm.c",
          "1309: changeset$(TEXE): $(TOP)/ext/session/changeset.c sqlite3.lo",
          "1310:  $(LTLINK) -o $@ $(TOP)/ext/session/changeset.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309: index_usage$(TEXE): $(TOP)/tool/index_usage.c sqlite3.lo",
          "1310:  $(LTLINK) -o $@ $(TOP)/tool/index_usage.c sqlite3.lo $(TLIBS)",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2444: showshm.exe: $(TOP)\\tool\\showshm.c",
          "2445:  $(LTLINK) $(NO_WARN) $(TOP)\\tool\\showshm.c /link $(LDFLAGS) $(LTLINKOPTS)",
          "2447: changeset.exe: $(TOP)\\ext\\session\\changeset.c $(SQLITE3C) $(SQLITE3H)",
          "2448:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2449:   -DSQLITE_ENABLE_SESSION=1 -DSQLITE_ENABLE_PREUPDATE_HOOK=1 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2447: index_usage.exe: $(TOP)\\tool\\index_usage.c $(SQLITE3C) $(SQLITE3H)",
          "2448:  $(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "2449:   $(TOP)\\tool\\index_usage.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "995: showshm$(EXE): $(TOP)/tool/showshm.c",
          "996:  $(TCC) -o showshm$(EXE) $(TOP)/tool/showshm.c",
          "998: changeset$(EXE): $(TOP)/ext/session/changeset.c sqlite3.o",
          "999:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION -o changeset$(EXE) \\",
          "1000:   $(TOP)/ext/session/changeset.c sqlite3.o $(THREADLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998: index_usage$(EXE): $(TOP)/tool/index_usage.c sqlite3.o",
          "999:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_DEPRECATED -o index_usage$(EXE) \\",
          "1000:   $(TOP)/tool/index_usage.c sqlite3.o $(THREADLIB)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e28584e8bc7b7405380064b60523fa6191f827f74075f6d117eb7732d752ba5e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"sqlite3.h\"",
          "18: #include <stdio.h>",
          "19: #include <stdlib.h>",
          "20: #include <assert.h>",
          "21: #include <string.h>",
          "23: static void usage(const char *argv0){",
          "24:   printf(\"Usage: %s DATABASE LOG\\n\\n\", argv0);",
          "25:   printf(",
          "26:     \"DATABASE is an SQLite database against which various statements\\n\"",
          "27:     \"have been run.  The SQL text is stored in LOG.  LOG is an SQLite\\n\"",
          "28:     \"database with this schema:\\n\"",
          "29:     \"\\n\"",
          "30:     \"    CREATE TABLE sqllog(sql TEXT);\\n\"",
          "31:     \"\\n\"",
          "32:     \"This utility program analyzes statements contained in LOG and prints\\n\"",
          "33:     \"a report showing how many times each index in DATABASE is used by the\\n\"",
          "34:     \"statements in LOG.\\n\"",
          "35:     \"\\n\"",
          "36:     \"DATABASE only needs to contain the schema used by the statements in\\n\"",
          "37:     \"LOG. The content can be removed from DATABASE.\\n\"",
          "38:   );",
          "39:   printf(\"\\nAnalysis will be done by SQLite version %s dated %.20s\\n\"",
          "40:          \"checkin number %.40s. Different versions\\n\"",
          "41:          \"of SQLite might use different indexes.\\n\",",
          "42:          sqlite3_libversion(), sqlite3_sourceid(), sqlite3_sourceid()+21);",
          "43:   exit(1);",
          "44: }",
          "46: int main(int argc, char **argv){",
          "49:   char *zSql;",
          "50:   int nErr = 0;",
          "51:   int rc;",
          "53:   if( argc!=3 ) usage(argv[0]);",
          "54:   rc = sqlite3_open_v2(argv[1], &db, SQLITE_OPEN_READONLY, 0);",
          "55:   if( rc ){",
          "56:     printf(\"Cannot open \\\"%s\\\" for reading: %s\\n\", argv[1], sqlite3_errmsg(db));",
          "57:     goto errorOut;",
          "58:   }",
          "59:   rc = sqlite3_prepare_v2(db, \"SELECT * FROM sqlite_master\", -1, &pStmt, 0);",
          "60:   if( rc ){",
          "61:     printf(\"Cannot read the schema from \\\"%s\\\" - %s\\n\", argv[1],",
          "62:            sqlite3_errmsg(db));",
          "63:     goto errorOut;",
          "64:   }",
          "65:   sqlite3_finalize(pStmt);",
          "66:   pStmt = 0;",
          "67:   rc = sqlite3_exec(db,",
          "68:      \"CREATE TABLE temp.idxu(\\n\"",
          "69:      \"  tbl TEXT,\\n\"",
          "70:      \"  idx TEXT,\\n\"",
          "71:      \"  cnt INT,\\n\"",
          "72:      \"  PRIMARY KEY(idx)\\n\"",
          "73:      \") WITHOUT ROWID;\", 0, 0, 0);",
          "74:   if( rc ){",
          "75:     printf(\"Cannot create the result table - %s\\n\",",
          "76:            sqlite3_errmsg(db));",
          "77:     goto errorOut;",
          "78:   }",
          "79:   rc = sqlite3_exec(db,",
          "80:      \"INSERT INTO temp.idxu(tbl,idx,cnt)\"",
          "81:      \" SELECT tbl_name, name, 0 FROM sqlite_master\"",
          "82:      \" WHERE type='index' AND sql IS NOT NULL\", 0, 0, 0);",
          "85:   zSql = sqlite3_mprintf(\"ATTACH %Q AS log\", argv[2]);",
          "86:   rc = sqlite3_exec(db, zSql, 0, 0, 0);",
          "87:   sqlite3_free(zSql);",
          "88:   if( rc ){",
          "89:     printf(\"Cannot open the LOG database \\\"%s\\\" - %s\\n\",",
          "90:            argv[2], sqlite3_errmsg(db));",
          "91:     goto errorOut;",
          "92:   }",
          "93:   rc = sqlite3_prepare_v2(db, \"SELECT sql, rowid FROM log.sqllog\",",
          "94:                           -1, &pStmt, 0);",
          "95:   if( rc ){",
          "96:     printf(\"Cannot read the SQLLOG table in the LOG database \\\"%s\\\" - %s\\n\",",
          "97:            argv[2], sqlite3_errmsg(db));",
          "98:     goto errorOut;",
          "99:   }",
          "102:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "103:     const char *zLog = (const char*)sqlite3_column_text(pStmt, 0);",
          "104:     sqlite3_stmt *pS2;",
          "105:     if( zLog==0 ) continue;",
          "106:     zSql = sqlite3_mprintf(\"EXPLAIN QUERY PLAN %s\", zLog);",
          "107:     rc = sqlite3_prepare_v2(db, zSql, -1, &pS2, 0);",
          "108:     sqlite3_free(zSql);",
          "109:     if( rc ){",
          "110:       printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "111:              sqlite3_column_int(pStmt, 1), zLog, sqlite3_errmsg(db));",
          "112:       nErr++;",
          "113:     }else{",
          "114:       while( sqlite3_step(pS2)==SQLITE_ROW ){",
          "115:         const char *zExplain = (const char*)sqlite3_column_text(pS2,3);",
          "116:         const char *z1, *z2;",
          "117:         int n;",
          "119:         z1 = strstr(zExplain, \" USING INDEX \");",
          "120:         if( z1==0 ) continue;",
          "121:         z1 += 13;",
          "122:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "123:         n = z2 - z1;",
          "124:         zSql = sqlite3_mprintf(",
          "125:           \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx='%.*q'\", n, z1",
          "126:         );",
          "128:         sqlite3_exec(db, zSql, 0, 0, 0);",
          "129:         sqlite3_free(zSql);",
          "130:       }",
          "131:     }",
          "132:     sqlite3_finalize(pS2);",
          "133:   }",
          "134:   sqlite3_finalize(pStmt);",
          "137:   rc = sqlite3_prepare_v2(db,",
          "138:      \"SELECT tbl, idx, cnt, \"",
          "139:      \"   (SELECT group_concat(name,',') FROM pragma_index_info(idx))\"",
          "140:      \" FROM temp.idxu, main.sqlite_master\"",
          "141:      \" WHERE temp.idxu.tbl=main.sqlite_master.tbl_name\"",
          "142:      \"   AND temp.idxu.idx=main.sqlite_master.name\"",
          "143:      \" ORDER BY cnt DESC, tbl, idx\",",
          "144:      -1, &pStmt, 0);",
          "145:   if( rc ){",
          "146:     printf(\"Cannot query the result table - %s\\n\",",
          "147:            sqlite3_errmsg(db));",
          "148:     goto errorOut;",
          "149:   }",
          "150:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "151:     printf(\"%10d %s on %s(%s)\\n\",",
          "152:        sqlite3_column_int(pStmt, 2),",
          "153:        sqlite3_column_text(pStmt, 1),",
          "154:        sqlite3_column_text(pStmt, 0),",
          "155:        sqlite3_column_text(pStmt, 3));",
          "156:   }",
          "157:   sqlite3_finalize(pStmt);",
          "158:   pStmt = 0;",
          "160: errorOut:",
          "161:   sqlite3_finalize(pStmt);",
          "162:   sqlite3_close(db);",
          "163:   return nErr;",
          "164: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
      "candidate_info": {
        "commit_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725a9c7f6c0d406cac38d41d286c023dd5896417",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "In fuzzcheck, activate vdbe_debug for dbsqlfuzz cases when using the -vvvvv verbosity level or above.\n\nFossilOrigin-Name: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ef24e89c9630fd383ba32f5aefcf9c27907f27f5072f3537a1cfd75a093a8d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "798:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:   return (int)(isNeg? -v : v);",
          "1243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1421:         fatalError(\"timeout is not available on non-unix systems\");",
          "1422: #endif",
          "1423:       }else",
          "1425:         quietFlag = 0;",
          "1426:         verboseFlag++;",
          "1427:         eVerbosity++;",
          "1428:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1429:       }else",
          "1430:       if( strcmp(z,\"version\")==0 ){",
          "1431:         int ii;",
          "1432:         const char *z;",
          "",
          "[Removed Lines]",
          "1424:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1453:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1454:       }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cd382e3500588126a91692377254bb807276d83",
      "candidate_info": {
        "commit_hash": "1cd382e3500588126a91692377254bb807276d83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cd382e3500588126a91692377254bb807276d83",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/indexexpr2.test"
        ],
        "message": "Avoid assuming that for \"~ (? OR TRUE)\" to be true, \"?\" must not be NULL, just as we do for \"NOT (? OR TRUE)\". Fix for ticket [c0390363].\n\nFossilOrigin-Name: 84ae41fd2f50cb7c0c3f6522d0f94817e1bbf96eae5316279e3e32cee4e46e91",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c465d0eb478e42045e08efe8b6fa64d4bd4d747cdf743beae4608562b014169e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5027:     }",
          "5028:     case TK_SPAN:",
          "5029:     case TK_COLLATE:",
          "5031:     case TK_UPLUS:",
          "5032:     case TK_UMINUS: {",
          "5033:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Removed Lines]",
          "5030:     case TK_BITNOT:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5037:       if( p->op2!=TK_IS ) return 0;",
          "5038:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "5039:     }",
          "5040:     case TK_NOT: {",
          "5041:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "5042:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5039:     case TK_BITNOT:",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   REINDEX;",
          "296: } {}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: #-------------------------------------------------------------------------",
          "299: reset_db",
          "300: do_execsql_test 8.0 {",
          "301:   CREATE TABLE t0(c0);",
          "302:   CREATE INDEX i0 ON t0(c0) WHERE c0 NOT NULL;",
          "303:   INSERT INTO t0(c0) VALUES (NULL);",
          "304: }",
          "306: breakpoint",
          "307: do_execsql_test 8.1 {",
          "308:   SELECT * FROM t0 WHERE ~('' BETWEEN t0.c0 AND TRUE);",
          "309: } {{}}",
          "311: do_execsql_test 8.2 {",
          "312:   SELECT ~('' BETWEEN t0.c0 AND TRUE) FROM t0;",
          "313: } {-1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
      "candidate_info": {
        "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altertab.test"
        ],
        "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:       }",
          "857:     }",
          "858:   }else{",
          "861:     ){",
          "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "863:                       zName);",
          "864:       return SQLITE_ERROR;",
          "865:     }",
          "866:   }",
          "867:   return SQLITE_OK;",
          "868: }",
          "",
          "[Removed Lines]",
          "859:     if( pParse->nested==0",
          "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "",
          "[Added Lines]",
          "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
          "",
          "[Added Lines]",
          "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2148:   return pMod->pModule->xShadowName(zTail+1);",
          "2149: }",
          "",
          "[Removed Lines]",
          "2150: #else",
          "2151: # define isShadowTableName(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2190:   p = pParse->pNewTable;",
          "2191:   if( p==0 ) return;",
          "2194:     p->tabFlags |= TF_Shadow;",
          "2195:   }",
          "",
          "[Removed Lines]",
          "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "",
          "[Added Lines]",
          "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4553: #else",
          "4554: # define sqlite3ShadowTableName(A,B) 0",
          "4555: #endif",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.20 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "558:     ALTER TABLE y1 RENAME TO z1;",
          "559:   }",
          "",
          "[Removed Lines]",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_catchsql_test 16.21 {",
          "",
          "[Added Lines]",
          "553:   do_catchsql_test 16.20 {",
          "554:     ALTER TABLE y1_segments RENAME TO abc;",
          "555:   } {1 {table y1_segments may not be altered}}",
          "556:   sqlite3_db_config db DEFENSIVE 0",
          "557:   do_catchsql_test 16.22 {",
          "558:     ALTER TABLE y1_segments RENAME TO abc;",
          "559:   } {0 {}}",
          "560:   sqlite3_db_config db DEFENSIVE 1",
          "561:   do_catchsql_test 16.23 {",
          "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
          "563:   } {1 {object name reserved for internal use: y1_segments}}",
          "564:   do_catchsql_test 16.24 {",
          "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
          "566:   } {1 {object name reserved for internal use: y1_segments}}",
          "567:   sqlite3_db_config db DEFENSIVE 0",
          "568:   do_catchsql_test 16.25 {",
          "569:     ALTER TABLE abc RENAME TO y1_segments;",
          "570:   } {0 {}}",
          "571:   sqlite3_db_config db DEFENSIVE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}