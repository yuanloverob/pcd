{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
      "candidate_info": {
        "commit_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fixes to the PRNG_SEED pragma idea.\n\nFossilOrigin-Name: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ac5723164ae801e209ce525a5d94692767136f9d06be2a84883dcea677d02da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "6398:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "6395:   if( Tcl_GetIntFromObj(objv[0],&i) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "217: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
      "candidate_info": {
        "commit_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/resolve.c",
          "src/update.c",
          "src/vdbe.c"
        ],
        "message": "Minor adjustments for clarity and test coverage.\n\nFossilOrigin-Name: 30065716878d4058e75eb510b0b27b68e5193d04625eb173210de8061f20f499",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/resolve.c||src/resolve.c",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 812467fbf04ce00228a8381a5eee471e4e35cc63184a4538129fcd70b7cec979",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:   u8 eType = COLFLAG_VIRTUAL;",
          "1629:   Table *pTab = pParse->pNewTable;",
          "1630:   Column *pCol;",
          "1632:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1633:   if( IN_DECLARE_VTAB ){",
          "1634:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "",
          "[Removed Lines]",
          "1631:   if( pTab==0 ) goto generated_done;",
          "",
          "[Added Lines]",
          "1631:   if( NEVER(pTab==0) ) goto generated_done;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:   if( pColumn==0 && nColumn>0 ){",
          "858:     ipkColumn = pTab->iPKey;",
          "859: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "861:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "863:       for(i=ipkColumn-1; i>=0; i--){",
          "864:         if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "865:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "867:           ipkColumn--;",
          "868:         }",
          "869:       }",
          "",
          "[Removed Lines]",
          "860:     if( pTab->tabFlags & TF_HasGenerated ){",
          "862:       testcase( pTab->tabFlags & TF_HasGenerated );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "",
          "[Added Lines]",
          "860:     if( ipkColumn>=0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "862:       testcase( pTab->tabFlags & TF_HasStored );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2414:     }",
          "2415: #endif",
          "2416:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2417:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2419:     }",
          "2420:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2422:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2416: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "2448: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2438:       }",
          "2439:     }",
          "2448:   }",
          "2449:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2450:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "637: #endif",
          "638:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "639:   }",
          "",
          "[Removed Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "[Added Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         }",
          "315: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "316:         else if( pTab->aCol[j].colFlags & COLFLAG_GENERATED ){",
          "319:           sqlite3ErrorMsg(pParse,",
          "320:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "321:              pTab->aCol[j].zName);",
          "",
          "[Removed Lines]",
          "317:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "317:           testcase( pTab->aCol[j].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[j].colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3375:       p->rc = rc = SQLITE_BUSY;",
          "3376:       goto vdbe_return;",
          "3377:     }",
          "3379:     sqlite3CloseSavepoints(db);",
          "3380:     if( p->rc==SQLITE_OK ){",
          "3381:       rc = SQLITE_DONE;",
          "",
          "[Removed Lines]",
          "3378:     assert( db->nStatement==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "269d322de2df4adb550acb17086e0e61596feffb",
      "candidate_info": {
        "commit_hash": "269d322de2df4adb550acb17086e0e61596feffb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/269d322de2df4adb550acb17086e0e61596feffb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/treeview.c",
          "test/rowvalue.test"
        ],
        "message": "When a vector comparison appears in the WHERE clause and the constraint side has a COLLATE clause on the first term of the vector, be sure to honor that COLLATE clause.  Ticket [135c9da7513e5a97].\n\nFossilOrigin-Name: 978b2d20cf95d0b7143e3104ce1e9d5c85002867b554dc6b21deb528b730bbc7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c118617cf08e17a6edfdfba86e3fc49132a780990b68b52724c2aaeac85f506",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1072:   if( A ){",
          "1073:     A->x.pList = pList;",
          "1074:   }else{",
          "1075:     sqlite3ExprListDelete(pParse->db, pList);",
          "1076:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:     if( pList->nExpr ){",
          "1075:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1076:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
      "candidate_info": {
        "commit_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "The previous check-in was not quite correct, and introduced a new problem with the USING clause.  Use this version instead.\n\nFossilOrigin-Name: ed28aaa4851202111a502f883ca06359d89b25bba4055c29d7bce2b501cfcc68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "568:     Table *pTab;",
          "573:     pTab = pExpr->y.pTab;",
          "574:     assert( pTab!=0 );",
          "575:     assert( pMatch->iCursor==pExpr->iTable );",
          "587:     }",
          "589:   }",
          "",
          "[Removed Lines]",
          "569:     testcase( n==BMS-1 );",
          "570:     if( n>=BMS ){",
          "571:       n = BMS-1;",
          "572:     }",
          "576:     if( pTab->tabFlags & TF_HasGenerated ){",
          "577:       Column *pColumn = pTab->aCol + pExpr->iColumn;",
          "578:       if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "579:         testcase( pTab->nCol==63 );",
          "580:         testcase( pTab->nCol==64 );",
          "581:         if( pTab->nCol>=64 ){",
          "582:           pMatch->colUsed = ALLBITS;",
          "583:         }else{",
          "584:           pMatch->colUsed = MASKBIT(pTab->nCol)-1;",
          "585:         }",
          "586:       }",
          "588:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "[Added Lines]",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:     ){",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "581:       if( n>=BMS ) n = BMS-1;",
          "582:       pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:       p->iColumn = -1;",
          "631:     }else{",
          "632:       p->iColumn = (ynVar)iCol;",
          "644:       }else{",
          "645:         testcase( iCol==BMS );",
          "646:         testcase( iCol==BMS-1 );",
          "",
          "[Removed Lines]",
          "633:       if( pTab->tabFlags & TF_HasGenerated ){",
          "634:         Column *pColumn = pTab->aCol + iCol;",
          "635:         if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "636:           testcase( pTab->nCol==63 );",
          "637:           testcase( pTab->nCol==64 );",
          "638:           if( pTab->nCol>=64 ){",
          "639:             pItem->colUsed = ALLBITS;",
          "640:           }else{",
          "641:             pItem->colUsed = MASKBIT(pTab->nCol)-1;",
          "642:           }",
          "643:         }",
          "",
          "[Added Lines]",
          "628:       if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "629:        && (pTab->aCol[iCol].colFlags & COLFLAG_GENERATED)!=0",
          "630:       ){",
          "631:         testcase( pTab->nCol==63 );",
          "632:         testcase( pTab->nCol==64 );",
          "633:         pItem->colUsed = pTab->nCol>=64 ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "353: } {11}",
          "354: do_execsql_test gencol1-13.11 {",
          "355:   CREATE INDEX t1y ON t1(y);",
          "356:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "357: } {11}",
          "360: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "356: } {123}",
          "357: do_execsql_test gencol1-13.11 {",
          "358:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "359: } {456}",
          "360: do_execsql_test gencol1-13.20 {",
          "364: do_execsql_test gencol1-13.21 {",
          "365:   CREATE INDEX t1x ON t1(x);",
          "366:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "367: } {123}",
          "368: do_execsql_test gencol1-13.22 {",
          "369:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "370: } {456}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
      "candidate_info": {
        "commit_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35a38e0836e64f9df6ab487a6844724e94fadce3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 63c67a54b4d3e501f3059dcdfc6bb50c6b8dad63a34eb773e4408d9e4e780d7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    }
  ]
}