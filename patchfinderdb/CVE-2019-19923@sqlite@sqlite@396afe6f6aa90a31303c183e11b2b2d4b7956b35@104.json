{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
      "candidate_info": {
        "commit_hash": "91f34eab2d08ef03e4454664458960f746ba580e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91f34eab2d08ef03e4454664458960f746ba580e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/shell.c.in"
        ],
        "message": "Allow DROP TABLE to work on tables name \"sqlite_parameters\" just as it does with tables named \"sqlite_stat%\".  Fix for the \".parameter clear\" command in the shell.\n\nFossilOrigin-Name: e768179baacb2423205a774cc8149fe58ed86a9320102aff4844b1d8933aa1db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ceab26f15c4c7039647cbccf8939dd5c36a60b70ffeefcd3b415c8d4d8351cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2816:   }",
          "2817: #endif",
          "2818:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2820:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2821:     goto exit_drop_table;",
          "2822:   }",
          "",
          "[Removed Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName, \"sqlite_stat\", 11)!=0 ){",
          "",
          "[Added Lines]",
          "2819:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2820:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8150:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "8154:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.sqlite_parameters;\",",
          "8155:                    0, 0, 0);",
          "8157:     }else",
          "",
          "[Removed Lines]",
          "8151:       int wrSchema = 0;",
          "8152:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "8153:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "8156:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
      "candidate_info": {
        "commit_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/781b7ac3f6c61eb756740549ab10a14322210ad7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with a window function in a correlated sub-query where at least one reference to the outer SELECT appears in a FROM clause sub-select.\n\nFossilOrigin-Name: 9aca86f98388ff66b2bccb3fbfc486a3931398d2a8da139f905826ae2cdbb205",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7b336181aac6785a515f275c0f50ad4bf2dee20abde959b56d968a7fdce3e5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:     for(i=0; i<p->pSrc->nSrc; i++){",
          "1426:       struct SrcList_item *pItem = &p->pSrc->a[i];",
          "1430:         const char *zSavedContext = pParse->zAuthContext;",
          "",
          "[Removed Lines]",
          "1427:       if( pItem->pSelect ){",
          "",
          "[Added Lines]",
          "1427:       if( pItem->pSelect && (pItem->pSelect->selFlags & SF_Resolved)==0 ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "750: #-------------------------------------------------------------------------",
          "751: # Test error cases from chaining window definitions.",
          "",
          "[Removed Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:   SELECT lead(44) OVER ()",
          "1036: } {{}}",
          "1039: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012: #-------------------------------------------------------------------------",
          "1013: #",
          "1014: reset_db",
          "1015: do_execsql_test 25.0 {",
          "1016:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "1017:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "1018:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "1020:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "1021:   INSERT INTO t2 VALUES      (3), (5);",
          "1022:   INSERT INTO t3 VALUES(10), (11), (12);",
          "1023: }",
          "1025: do_execsql_test 25.1 {",
          "1026:   SELECT t1.* FROM t1, t2 WHERE",
          "1027:     t1_id=t2_id AND t1_id IN (",
          "1028:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1029:     )",
          "1030: }",
          "1032: do_execsql_test 25.2 {",
          "1033:   SELECT t1.* FROM t1, t2 WHERE",
          "1034:     t1_id=t2_id AND t1_id IN (",
          "1035:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1036:     )",
          "1037: } {3}",
          "1039: #-------------------------------------------------------------------------",
          "1040: reset_db",
          "1041: do_execsql_test 26.0 {",
          "1042:   CREATE TABLE t1(x);",
          "1043:   CREATE TABLE t2(c);",
          "1044: }",
          "1046: do_execsql_test 26.1 {",
          "1047:   SELECT ( SELECT row_number() OVER () FROM ( SELECT c FROM t1 ) ) FROM t2",
          "1048: } {}",
          "1050: do_execsql_test 26.2 {",
          "1051:   INSERT INTO t1 VALUES(1), (2), (3), (4);",
          "1052:   INSERT INTO t2 VALUES(2), (6), (8), (4);",
          "1053:   SELECT c, c IN (",
          "1054:     SELECT row_number() OVER () FROM ( SELECT c FROM t1 )",
          "1055:   ) FROM t2",
          "1056: } {2 1  6 0  8 0  4 1}",
          "1058: do_execsql_test 26.3 {",
          "1059:   DELETE FROM t1;",
          "1060:   DELETE FROM t2;",
          "1062:   INSERT INTO t2 VALUES(1), (2), (3), (4);",
          "1063:   INSERT INTO t1 VALUES(1), (1), (2), (3), (3), (3), (3), (4), (4);",
          "1065:   SELECT c, c IN (",
          "1066:     SELECT row_number() OVER () FROM ( SELECT 1 FROM t1 WHERE x=c )",
          "1067:   ) FROM t2",
          "1068: } {1 1  2 0  3 1  4 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af97c3f35a095166ee5406ed73a1790dae025db6",
      "candidate_info": {
        "commit_hash": "af97c3f35a095166ee5406ed73a1790dae025db6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/af97c3f35a095166ee5406ed73a1790dae025db6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix a case of the Expr.affinity to Expr.affExpr refactor that was missed in the [a29f2a7d07beff64] check-in.\n\nFossilOrigin-Name: 83450d10707e2c7c075f3930a8c231c49c593b9cdf0e6097b0187eb877755d2d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30e6ee27a9fb78291c324ac9b80db4579280140430804ecd4692e312f9938525",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:       pExpr->y.pTab = pItem->pTab;",
          "690:       pExpr->iTable = pItem->iCursor;",
          "691:       pExpr->iColumn = -1;",
          "693:       break;",
          "694:     }",
          "695: #endif /* defined(SQLITE_ENABLE_UPDATE_DELETE_LIMIT)",
          "",
          "[Removed Lines]",
          "692:       pExpr->affinity = SQLITE_AFF_INTEGER;",
          "",
          "[Added Lines]",
          "692:       pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
      "candidate_info": {
        "commit_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Additional small performance increase and size reduction to the sqlite3VdbeMakeLabel() mechanism.\n\nFossilOrigin-Name: 1bdee199a71e0a6c247b85e72de9e3a3099b7179c33288735721facef3b96459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #endif",
          "",
          "[Removed Lines]",
          "164: #define ADDR(X)  (-1-(X))",
          "",
          "[Added Lines]",
          "163: #define ADDR(X)  (~(X))",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "453: }",
          "",
          "[Removed Lines]",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "[Added Lines]",
          "463:   return --pParse->nLabel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "",
          "[Removed Lines]",
          "461:   int nNewSize = p->nLabel+10;",
          "",
          "[Added Lines]",
          "472:   int nNewSize = 10 - p->nLabel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:   Parse *p = v->pParse;",
          "477:   int j = ADDR(x);",
          "478:   assert( v->magic==VDBE_MAGIC_INIT );",
          "480:   assert( j>=0 );",
          "481: #ifdef SQLITE_DEBUG",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "485: #endif",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "[Removed Lines]",
          "479:   assert( j<p->nLabel );",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "",
          "[Added Lines]",
          "490:   assert( j<-p->nLabel );",
          "497:   if( p->nLabelAlloc + p->nLabel < 0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "763:             assert( (sqlite3OpcodeProperty[pOp->opcode] & OPFLG_JUMP)!=0 );",
          "765:             pOp->p2 = aLabel[ADDR(pOp->p2)];",
          "766:           }",
          "767:           break;",
          "",
          "[Removed Lines]",
          "764:             assert( ADDR(pOp->p2)<pParse->nLabel );",
          "",
          "[Added Lines]",
          "775:             assert( ADDR(pOp->p2)<-pParse->nLabel );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
      "candidate_info": {
        "commit_hash": "3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cbd2b7245ad0b262d5e0810ac3200e9797db1eb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "New assert() to verify the TF_HasprimaryKey flag.\n\nFossilOrigin-Name: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1991:     if( p->tnum==1 ) p->tabFlags |= TF_Readonly;",
          "1992:   }",
          "1995:   if( tabOpts & TF_WithoutRowid ){",
          "1996:     if( (p->tabFlags & TF_Autoincrement) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1994:   assert( (p->tabFlags & TF_HasPrimaryKey)==0",
          "1995:        || p->iPKey>=0 || sqlite3PrimaryKeyIndex(p)!=0 );",
          "1996:   assert( (p->tabFlags & TF_HasPrimaryKey)!=0",
          "1997:        || (p->iPKey<0 && sqlite3PrimaryKeyIndex(p)==0) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}