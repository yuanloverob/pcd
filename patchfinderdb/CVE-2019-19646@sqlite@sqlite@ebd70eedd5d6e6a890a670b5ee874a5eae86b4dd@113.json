{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
      "candidate_info": {
        "commit_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Minor performance improvement in vdbeRecordCompareString().\n\nFossilOrigin-Name: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be01b801fbc258f0ab9542130cec12a5ea5e2d0bf087684a9eda909ad459c211",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4600:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4601:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4604:       res = nStr - pPKey2->aMem[0].n;",
          "4605:       if( res==0 ){",
          "4606:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4603:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4603:     if( res>0 ){",
          "4604:       res = pPKey2->r2;",
          "4605:     }else if( res<0 ){",
          "4606:       res = pPKey2->r1;",
          "4607:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4614:       }else{",
          "4615:         res = pPKey2->r1;",
          "4616:       }",
          "4621:     }",
          "4622:   }",
          "",
          "[Removed Lines]",
          "4617:     }else if( res>0 ){",
          "4618:       res = pPKey2->r2;",
          "4619:     }else{",
          "4620:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8061ad8abd3811c5918d1308e4c8816869509806",
      "candidate_info": {
        "commit_hash": "8061ad8abd3811c5918d1308e4c8816869509806",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8061ad8abd3811c5918d1308e4c8816869509806",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Add extra tests for database corruption inside the defragmentPage() routine, as dbfuzz2 has found ways for corruption to leak into that point.  Add test cases in fuzzdata7.db.\n\nFossilOrigin-Name: 997b65117f8c12dba5fb85434fde9765cdb0d2a49cc3e31979abba3e21350086",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 682053d1e603c21b8085c39db618a39b23ec8d2c4d822fd19634db0e03038ea2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1413:   if( (int)data[hdr+7]<=nMaxFrag ){",
          "1414:     int iFree = get2byte(&data[hdr+1]);",
          "1415:     if( iFree ){",
          "1416:       int iFree2 = get2byte(&data[iFree]);",
          "1428:       if( 0==iFree2 || (data[iFree2]==0 && data[iFree2+1]==0) ){",
          "1429:         u8 *pEnd = &data[cellOffset + nCell*2];",
          "1430:         u8 *pAddr;",
          "",
          "[Removed Lines]",
          "1424:       assert( iFree2==0 || iFree2>iFree );",
          "1425:       assert( iFree+get2byte(&data[iFree+2]) <= usableSize );",
          "1426:       assert( iFree2==0 || iFree2+get2byte(&data[iFree2+2]) <= usableSize );",
          "",
          "[Added Lines]",
          "1419:     assert( iFree<=usableSize-4 );",
          "1422:       if( iFree2>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1435:           return SQLITE_CORRUPT_PAGE(pPage);",
          "1436:         }",
          "1437:         if( iFree2 ){",
          "1439:           sz2 = get2byte(&data[iFree2+2]);",
          "1441:           memmove(&data[iFree+sz+sz2], &data[iFree+sz], iFree2-(iFree+sz));",
          "1442:           sz += sz2;",
          "1443:         }",
          "",
          "[Removed Lines]",
          "1440:           assert( iFree+sz+sz2+iFree2-(iFree+sz) <= usableSize );",
          "",
          "[Added Lines]",
          "1433:           if( iFree+sz>iFree2 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "1435:           if( iFree2+sz2 > usableSize ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
      "candidate_info": {
        "commit_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a0c16f27653982880ab76714b5aaae65db43315",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/nulls1.test"
        ],
        "message": "Add tests for sort-by-index cases that use IN() and non-default NULL handling.\n\nFossilOrigin-Name: 09d660ecde723fb30f3bb3684bbb7f95825d78da6a6f33ddf57846054cd563e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9a82ee88d2d12209a674bd19167277aa91a6912e7a8bbf3714f90d559307fee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: }",
          "121: #-------------------------------------------------------------------------",
          "122: ifcapable vtab {",
          "123:   register_echo_module db",
          "124:   do_execsql_test 4.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "148: }",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #-------------------------------------------------------------------------",
          "152: #",
          "153: do_execsql_test 5.0 {",
          "154:   CREATE TABLE t4(a, b, c);",
          "155:   INSERT INTO t4 VALUES(1, 1, 11);",
          "156:   INSERT INTO t4 VALUES(1, 2, 12);",
          "157:   INSERT INTO t4 VALUES(1, NULL, 1);",
          "159:   INSERT INTO t4 VALUES(2, NULL, 1);",
          "160:   INSERT INTO t4 VALUES(2, 2, 12);",
          "161:   INSERT INTO t4 VALUES(2, 1, 11);",
          "163:   INSERT INTO t4 VALUES(3, NULL, 1);",
          "164:   INSERT INTO t4 VALUES(3, 2, 12);",
          "165:   INSERT INTO t4 VALUES(3, NULL, 3);",
          "166: }",
          "168: do_execsql_test 5.1 {",
          "169:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "170: } {",
          "171:   1 1 11   1 2 12   1 {} 1",
          "172:   2 1 11   2 2 12   2 {} 1",
          "173:   3 2 12   3 {} 1   3 {} 3",
          "174: }",
          "175: do_execsql_test 5.2 {",
          "176:   CREATE INDEX t4ab ON t4(a, b);",
          "177:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "178: } {",
          "179:   1 1 11   1 2 12   1 {} 1",
          "180:   2 1 11   2 2 12   2 {} 1",
          "181:   3 2 12   3 {} 1   3 {} 3",
          "182: }",
          "183: do_eqp_test 5.3 {",
          "184:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "185: } {",
          "186:   QUERY PLAN",
          "187:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "188: }",
          "190: do_execsql_test 5.4 {",
          "191:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "192: } {",
          "193:   3 {} 3   3 {} 1   3 2 12",
          "194:   2 {} 1   2 2 12   2 1 11",
          "195:   1 {} 1   1 2 12   1 1 11",
          "196: }",
          "197: do_eqp_test 5.5 {",
          "198:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "199: } {",
          "200:   QUERY PLAN",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
      "candidate_info": {
        "commit_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
      "candidate_info": {
        "commit_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4baa75b32f61727693ff2468ab927124e85c0e36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/without_rowid1.test"
        ],
        "message": "Do not de-duplicate columns index columns associated with a WITHOUT ROWID table if the columns have different collating sequences.  This is the fix for ticket [3182d3879020ef3b2].  There is one test case added, but most of the tests are done in TH3.\n\nFossilOrigin-Name: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1757:   int i, j;",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1766:   for(i=0; i<nKey; i++){",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "1770:     ){",
          "1771:       return 1;",
          "1772:     }",
          "1773:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1879:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1882:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1912:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1913:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1914:         n++;",
          "1915:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1924:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1925:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3441:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3444:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "395: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: # 2019-04-29 ticket https://www.sqlite.org/src/info/3182d3879020ef3",
          "395: do_execsql_test 11.1 {",
          "396:   CREATE TABLE t11(a TEXT PRIMARY KEY, b INT) WITHOUT ROWID;",
          "397:   CREATE INDEX t11a ON t11(a COLLATE NOCASE);",
          "398:   INSERT INTO t11(a,b) VALUES ('A',1),('a',2);",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "",
          "---------------"
        ]
      }
    }
  ]
}