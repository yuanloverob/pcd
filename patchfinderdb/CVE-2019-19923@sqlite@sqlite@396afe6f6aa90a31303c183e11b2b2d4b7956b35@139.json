{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
      "candidate_info": {
        "commit_hash": "01d1801cab06d9ea35f07a530868cb79391a49a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01d1801cab06d9ea35f07a530868cb79391a49a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to fuzzdata8.db.\n\nFossilOrigin-Name: 5baffcda7d5a42a99fa905faa834f14b94b1e2a26b5221f15d8ae8f1f5e3236a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
      "candidate_info": {
        "commit_hash": "d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d46b6f57c95198de8d2af1161feb516adbdb9bea",
        "files": [
          "ext/misc/memtrace.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless compiler warning in the memtrace.c extension.\n\nFossilOrigin-Name: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
        "before_after_code_files": [
          "ext/misc/memtrace.c||ext/misc/memtrace.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/memtrace.c||ext/misc/memtrace.c": [
          "File: ext/misc/memtrace.c -> ext/misc/memtrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   memtraceSize,",
          "78:   memtraceRoundup,",
          "79:   memtraceInit,",
          "81: };",
          "",
          "[Removed Lines]",
          "80:   memtraceShutdown",
          "",
          "[Added Lines]",
          "80:   memtraceShutdown,",
          "81:   0",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4978ee8b5405f958723b4ebbd4288bd08bff2b453da2d1c032d1ae904c2a3821",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
      "candidate_info": {
        "commit_hash": "d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "test/conflict.test"
        ],
        "message": "Ensure that all ON CONFLICT REPLACE indexes are sorted to the end of the list of indexes for a table, even for weird cases where the same UNIQUE constraint occurs twice with the ON CONFLICT REPLACE clause only on the second one.  This avoids an out-of-order contraint processing problem that can arise due to the optimization of check-in [469a62ca33081854].\n\nFossilOrigin-Name: 1e3918ca2f2c1cfcfa44249b1d7b847d52cbb8d302a8d4a335c090cfdf22d7a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "test/conflict.test||test/conflict.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 672e749aef7351de3c69b365c1f80c756fda4e261b5d2ac1faa01d3a7d5a4c49",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3921:       sqlite3VdbeJumpHere(v, pIndex->tnum);",
          "3922:     }",
          "3923:   }",
          "3931:   if( db->init.busy || pTblName==0 ){",
          "3944:     pIndex = 0;",
          "3945:   }",
          "3946:   else if( IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "3932:     if( onError!=OE_Replace || pTab->pIndex==0",
          "3933:          || pTab->pIndex->onError==OE_Replace){",
          "3934:       pIndex->pNext = pTab->pIndex;",
          "3935:       pTab->pIndex = pIndex;",
          "3936:     }else{",
          "3937:       Index *pOther = pTab->pIndex;",
          "3938:       while( pOther->pNext && pOther->pNext->onError!=OE_Replace ){",
          "3939:         pOther = pOther->pNext;",
          "3940:       }",
          "3941:       pIndex->pNext = pOther->pNext;",
          "3942:       pOther->pNext = pIndex;",
          "3943:     }",
          "",
          "[Added Lines]",
          "3925:     pIndex->pNext = pTab->pIndex;",
          "3926:     pTab->pIndex = pIndex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3953: exit_create_index:",
          "3954:   if( pIndex ) sqlite3FreeIndex(db, pIndex);",
          "3955:   sqlite3ExprDelete(db, pPIWhere);",
          "3956:   sqlite3ExprListDelete(db, pList);",
          "3957:   sqlite3SrcListDelete(db, pTblName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3939:     Index **ppFrom = &pTab->pIndex;",
          "3940:     Index *pThis;",
          "3941:     for(ppFrom=&pTab->pIndex; (pThis = *ppFrom)!=0; ppFrom=&pThis->pNext){",
          "3942:       Index *pNext;",
          "3943:       if( pThis->onError!=OE_Replace ) continue;",
          "3944:       while( (pNext = pThis->pNext)!=0 && pNext->onError!=OE_Replace ){",
          "3946:         pThis->pNext = pNext->pNext;",
          "3947:         pNext->pNext = pThis;",
          "3948:         ppFrom = &pNext->pNext;",
          "3949:       }",
          "3950:       break;",
          "3951:     }",
          "3952:   }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2250:   assert( v!=0 );",
          "2252:   for(i=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, i++){",
          "2253:     if( aRegIdx[i]==0 ) continue;",
          "2254:     if( pIdx->pPartIdxWhere ){",
          "2255:       sqlite3VdbeAddOp2(v, OP_IsNull, aRegIdx[i], sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2254:     assert( pIdx->onError!=OE_Replace",
          "2255:          || pIdx->pNext==0",
          "2256:          || pIdx->pNext->onError==OE_Replace );",
          "",
          "---------------"
        ],
        "test/conflict.test||test/conflict.test": [
          "File: test/conflict.test -> test/conflict.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:   REPLACE INTO t1 DEFAULT VALUES;",
          "835: } {1 {NOT NULL constraint failed: t1.x}}",
          "838: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837: # 2019-12-15 gramfuzz1 find",
          "838: # Three UNIQUE constraints, where the third would is a duplicate except",
          "839: # that it adds ON CONFLICT REPLACE.  Verify that the indexes end up",
          "840: # sorted in the correct order (REPLACE last) so that constraint processing",
          "841: # works correctly.",
          "842: #",
          "843: reset_db",
          "844: do_execsql_test conflict-15.10 {",
          "845:   CREATE TABLE t1(",
          "846:     x PRIMARY KEY,",
          "847:     UNIQUE(x,x),",
          "848:     UNIQUE(x,x) ON CONFLICT REPLACE",
          "849:   );",
          "850:   INSERT INTO t1(x) VALUES(1);",
          "851:   SELECT * FROM t1;",
          "852: } {1}",
          "853: do_catchsql_test conflict-15.20 {",
          "854:   INSERT INTO t1(x) VALUES(1);",
          "855: } {1 {UNIQUE constraint failed: t1.x}}",
          "856: do_execsql_test conflict-15.30 {",
          "857:   SELECT * FROM t1;",
          "858: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51a75aaa76c300b3826e434013ddaf73c49e57c1",
      "candidate_info": {
        "commit_hash": "51a75aaa76c300b3826e434013ddaf73c49e57c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51a75aaa76c300b3826e434013ddaf73c49e57c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with using json1 window functions with an EXCLUDE clause.\n\nFossilOrigin-Name: 4a1978814da41608a16f6953bd575c97d587a34bd80b7ac0e619d62bfdc903d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 807975c76b36347f02aa0ce9661d608adbffe1f7e77c15f8da677e47e1187153",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1481:       int addrIf = 0;",
          "1482:       if( pWin->pFilter ){",
          "1483:         int regTmp;",
          "1486:         regTmp = sqlite3GetTempReg(pParse);",
          "1487:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1488:         addrIf = sqlite3VdbeAddOp3(v, OP_IfNot, regTmp, 0, 1);",
          "",
          "[Removed Lines]",
          "1484:         assert( nArg==0 || nArg==pWin->pOwner->x.pList->nExpr );",
          "1485:         assert( nArg || pWin->pOwner->x.pList==0 );",
          "",
          "[Added Lines]",
          "1484:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "1485:         assert( pWin->bExprArgs || nArg  ||pWin->pOwner->x.pList==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1490:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1491:       }",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1494:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1495:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1496:       }",
          "1497:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1498:         CollSeq *pColl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1493:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1494:         VdbeOp *pOp, *pEnd;",
          "1500:         pEnd = sqlite3VdbeGetOp(v, -1);",
          "1501:         for(pOp=sqlite3VdbeGetOp(v, iStart); pOp<=pEnd; pOp++){",
          "1502:           if( pOp->opcode==OP_Column && pOp->p1==pWin->iEphCsr ){",
          "1503:             pOp->p1 = csr;",
          "1504:           }",
          "1505:         }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "90: ifcapable json1 {",
          "91:   do_execsql_test 3.1 {",
          "92:     SELECT json_group_array(json(j)) FROM testjson;",
          "93:   } {",
          "95:   }",
          "97:   do_execsql_test 3.2 {",
          "98:     SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99:   } {",
          "100:     {[{\"a\":1}]}",
          "101:     {[{\"a\":1},{\"b\":2}]}",
          "102:   }",
          "103: }",
          "",
          "[Removed Lines]",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "94:     {[{\"a\":1},{\"b\":2}]}",
          "",
          "[Added Lines]",
          "84:   reset_db",
          "85:   do_execsql_test 3.0 {",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}');",
          "91:   }",
          "96:     {[{\"a\":1},{\"b\":2},{\"c\":3},{\"d\":4}]}",
          "104:     {[{\"a\":1},{\"b\":2},{\"c\":3}]}",
          "105:     {[{\"a\":1},{\"b\":2},{\"c\":3},{\"d\":4}]}",
          "106:   }",
          "108:   do_execsql_test 3.3 {",
          "109:     SELECT json_group_array(json(j)) OVER (",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES",
          "111:     ) FROM testjson;",
          "112:   } {",
          "113:     {[{\"a\":1}]}",
          "114:     {[{\"a\":1},{\"b\":2}]}",
          "115:     {[{\"a\":1},{\"b\":2},{\"c\":3}]}",
          "116:     {[{\"a\":1},{\"b\":2},{\"c\":3},{\"d\":4}]}",
          "117:   }",
          "119:   do_execsql_test 3.4 {",
          "120:     SELECT json_group_array(json(j)) OVER (",
          "121:       ORDER BY id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "122:     ) FROM testjson;",
          "123:   } {",
          "124:     {[{\"a\":1},{\"b\":2}]}",
          "125:     {[{\"a\":1},{\"b\":2},{\"c\":3}]}",
          "126:     {[{\"b\":2},{\"c\":3},{\"d\":4}]}",
          "127:     {[{\"c\":3},{\"d\":4}]}",
          "128:   }",
          "130:   do_execsql_test 3.5 {",
          "131:     SELECT json_group_array(json(j)) OVER (",
          "132:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "133:     ) FROM testjson;",
          "134:   } {",
          "135:     {[]}",
          "136:     {[{\"a\":1}]}",
          "137:     {[{\"a\":1},{\"b\":2}]}",
          "138:     {[{\"b\":2},{\"c\":3}]}",
          "139:   }",
          "141:   if 0 {",
          "143:   do_execsql_test 3.5 {",
          "144:     SELECT json_group_array(json(j)) OVER (",
          "145:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "146:     ) FROM testjson;",
          "147:   } {",
          "148:     {[]}",
          "149:     {[{\"a\":1}]}",
          "150:     {[{\"a\":1},{\"b\":2}]}",
          "151:     {[{\"b\":2},{\"c\":3}]}",
          "152:   }",
          "154:   explain_i {",
          "155:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "156:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "157:     ) FROM testjson;",
          "158:   }",
          "159:   do_execsql_test 3.7 {",
          "160:   PRAGMA vdbe_trace = 1;",
          "161:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "162:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "163:     ) FROM testjson;",
          "164:   } {",
          "165:     {[]}",
          "166:     {[{\"a\":1}]}",
          "167:     {[{\"a\":1}]}",
          "168:     {[{\"c\":3}]}",
          "169:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2dcc42e1f5bbbd3388ac824627116d0d6583996",
      "candidate_info": {
        "commit_hash": "e2dcc42e1f5bbbd3388ac824627116d0d6583996",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2dcc42e1f5bbbd3388ac824627116d0d6583996",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix a harmless memory leak in the Lemon parser generator utility program.\n\nFossilOrigin-Name: 1caff0fb0b2051e205e7a8cfd5dadf92680c52a88a441ded95b1ea6542db5f83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ecf5caa7e9825a8b03d15ee525ec68be78c55926ddfaca27a040a7614caf0e85",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4675:   tplt_print(out,lemp,lemp->extracode,&lineno);",
          "4677:   fclose(in);",
          "4678:   fclose(out);",
          "4679:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4677:   acttab_free(pActtab);",
          "",
          "---------------"
        ]
      }
    }
  ]
}