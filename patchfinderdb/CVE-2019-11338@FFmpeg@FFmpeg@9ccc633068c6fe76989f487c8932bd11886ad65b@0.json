{
  "cve_id": "CVE-2019-11338",
  "cve_desc": "libavcodec/hevcdec.c in FFmpeg 3.4 and 4.1.2 mishandles detection of duplicate first slices, which allows remote attackers to cause a denial of service (NULL pointer dereference and out-of-array access) or possibly have unspecified other impact via crafted HEVC data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "9ccc633068c6fe76989f487c8932bd11886ad65b",
  "patch_info": {
    "commit_hash": "9ccc633068c6fe76989f487c8932bd11886ad65b",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/9ccc633068c6fe76989f487c8932bd11886ad65b",
    "files": [
      "libavcodec/hevcdec.c"
    ],
    "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 54655623a82632e7624714d7b2a3e039dc5faa7e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/hevcdec.c||libavcodec/hevcdec.c": [
      "File: libavcodec/hevcdec.c -> libavcodec/hevcdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "474:     sh->first_slice_in_pic_flag = get_bits1(gb);",
      "475:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
      "476:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
      "477:         s->max_ra     = INT_MAX;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "475:     if (s->ref && sh->first_slice_in_pic_flag) {",
      "476:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
      "477:         return 1; // This slice will be skiped later, do not corrupt state",
      "478:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2862:         ret = hls_slice_header(s);",
      "2863:         if (ret < 0)",
      "2864:             return ret;",
      "2866:         if (s->sh.first_slice_in_pic_flag) {",
      "2871:             if (s->max_ra == INT_MAX) {",
      "2872:                 if (s->nal_unit_type == HEVC_NAL_CRA_NUT || IS_BLA(s)) {",
      "2873:                     s->max_ra = s->poc;",
      "",
      "[Removed Lines]",
      "2867:             if (s->ref) {",
      "2868:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
      "2869:                 goto fail;",
      "2870:             }",
      "",
      "[Added Lines]",
      "2870:         if (ret == 1) {",
      "2871:             ret = AVERROR_INVALIDDATA;",
      "2872:             goto fail;",
      "2873:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4bc3382780541ac0ccbb27bcb0a92c3887495040",
      "candidate_info": {
        "commit_hash": "4bc3382780541ac0ccbb27bcb0a92c3887495040",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4bc3382780541ac0ccbb27bcb0a92c3887495040",
        "files": [
          "libavcodec/hevc.c"
        ],
        "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 54655623a82632e7624714d7b2a3e039dc5faa7e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/hevc.c||libavcodec/hevc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libavcodec/hevc.c||libavcodec/hevc.c": [
          "File: libavcodec/hevc.c -> libavcodec/hevc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:     sh->first_slice_in_pic_flag = get_bits1(gb);",
          "426:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
          "427:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
          "428:         s->max_ra     = INT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     if (s->ref && sh->first_slice_in_pic_flag) {",
          "427:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "428:         return 1; // This slice will be skiped later, do not corrupt state",
          "429:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2695:         ret = hls_slice_header(s);",
          "2696:         if (ret < 0)",
          "2697:             return ret;",
          "2699:         if (s->max_ra == INT_MAX) {",
          "2700:             if (s->nal_unit_type == NAL_CRA_NUT || IS_BLA(s)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2703:         if (ret == 1) {",
          "2704:             ret = AVERROR_INVALIDDATA;",
          "2705:             goto fail;",
          "2706:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2715:         }",
          "2717:         if (s->sh.first_slice_in_pic_flag) {",
          "2722:             ret = hevc_frame_start(s);",
          "2723:             if (ret < 0)",
          "2724:                 return ret;",
          "",
          "[Removed Lines]",
          "2718:             if (s->ref) {",
          "2719:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "2720:                 goto fail;",
          "2721:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "494ce3da24b6d6d4a9c39017a95470cb75b5ba8d",
      "candidate_info": {
        "commit_hash": "494ce3da24b6d6d4a9c39017a95470cb75b5ba8d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/494ce3da24b6d6d4a9c39017a95470cb75b5ba8d",
        "files": [
          "libavcodec/hevcdec.c"
        ],
        "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 54655623a82632e7624714d7b2a3e039dc5faa7e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ],
          "candidate": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/hevcdec.c||libavcodec/hevcdec.c": [
          "File: libavcodec/hevcdec.c -> libavcodec/hevcdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     sh->first_slice_in_pic_flag = get_bits1(gb);",
          "488:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
          "489:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
          "490:         s->max_ra     = INT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:     if (s->ref && sh->first_slice_in_pic_flag) {",
          "489:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "490:         return 1; // This slice will be skiped later, do not corrupt state",
          "491:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2915:         ret = hls_slice_header(s);",
          "2916:         if (ret < 0)",
          "2917:             return ret;",
          "2919:         if (",
          "2920:             (s->avctx->skip_frame >= AVDISCARD_BIDIR && s->sh.slice_type == HEVC_SLICE_B) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2923:         if (ret == 1) {",
          "2924:             ret = AVERROR_INVALIDDATA;",
          "2925:             goto fail;",
          "2926:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2924:         }",
          "2926:         if (s->sh.first_slice_in_pic_flag) {",
          "2931:             if (s->max_ra == INT_MAX) {",
          "2932:                 if (s->nal_unit_type == HEVC_NAL_CRA_NUT || IS_BLA(s)) {",
          "2933:                     s->max_ra = s->poc;",
          "",
          "[Removed Lines]",
          "2927:             if (s->ref) {",
          "2928:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "2929:                 goto fail;",
          "2930:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbfd062d1667291ba16c94cd611d37b1aff7fbe2",
      "candidate_info": {
        "commit_hash": "cbfd062d1667291ba16c94cd611d37b1aff7fbe2",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/cbfd062d1667291ba16c94cd611d37b1aff7fbe2",
        "files": [
          "libavcodec/hevc.c"
        ],
        "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 54655623a82632e7624714d7b2a3e039dc5faa7e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/hevc.c||libavcodec/hevc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libavcodec/hevc.c||libavcodec/hevc.c": [
          "File: libavcodec/hevc.c -> libavcodec/hevc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     sh->first_slice_in_pic_flag = get_bits1(gb);",
          "442:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
          "443:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
          "444:         s->max_ra     = INT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:     if (s->ref && sh->first_slice_in_pic_flag) {",
          "443:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "444:         return 1; // This slice will be skiped later, do not corrupt state",
          "445:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2775:         ret = hls_slice_header(s);",
          "2776:         if (ret < 0)",
          "2777:             return ret;",
          "2779:         if (s->max_ra == INT_MAX) {",
          "2780:             if (s->nal_unit_type == NAL_CRA_NUT || IS_BLA(s)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2783:         if (ret == 1) {",
          "2784:             ret = AVERROR_INVALIDDATA;",
          "2785:             goto fail;",
          "2786:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2795:         }",
          "2797:         if (s->sh.first_slice_in_pic_flag) {",
          "2802:             ret = hevc_frame_start(s);",
          "2803:             if (ret < 0)",
          "2804:                 return ret;",
          "",
          "[Removed Lines]",
          "2798:             if (s->ref) {",
          "2799:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "2800:                 goto fail;",
          "2801:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1ecebcdb72b5928b585ec8f07c3847927b4bf1d",
      "candidate_info": {
        "commit_hash": "f1ecebcdb72b5928b585ec8f07c3847927b4bf1d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f1ecebcdb72b5928b585ec8f07c3847927b4bf1d",
        "files": [
          "libavcodec/hevcdec.c"
        ],
        "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 54655623a82632e7624714d7b2a3e039dc5faa7e)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ],
          "candidate": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/hevcdec.c||libavcodec/hevcdec.c": [
          "File: libavcodec/hevcdec.c -> libavcodec/hevcdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:     sh->first_slice_in_pic_flag = get_bits1(gb);",
          "488:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
          "489:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
          "490:         s->max_ra     = INT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:     if (s->ref && sh->first_slice_in_pic_flag) {",
          "489:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "490:         return 1; // This slice will be skiped later, do not corrupt state",
          "491:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2915:         ret = hls_slice_header(s);",
          "2916:         if (ret < 0)",
          "2917:             return ret;",
          "2919:         if (",
          "2920:             (s->avctx->skip_frame >= AVDISCARD_BIDIR && s->sh.slice_type == HEVC_SLICE_B) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2923:         if (ret == 1) {",
          "2924:             ret = AVERROR_INVALIDDATA;",
          "2925:             goto fail;",
          "2926:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2924:         }",
          "2926:         if (s->sh.first_slice_in_pic_flag) {",
          "2931:             if (s->max_ra == INT_MAX) {",
          "2932:                 if (s->nal_unit_type == HEVC_NAL_CRA_NUT || IS_BLA(s)) {",
          "2933:                     s->max_ra = s->poc;",
          "",
          "[Removed Lines]",
          "2927:             if (s->ref) {",
          "2928:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "2929:                 goto fail;",
          "2930:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54655623a82632e7624714d7b2a3e039dc5faa7e",
      "candidate_info": {
        "commit_hash": "54655623a82632e7624714d7b2a3e039dc5faa7e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/54655623a82632e7624714d7b2a3e039dc5faa7e",
        "files": [
          "libavcodec/hevcdec.c"
        ],
        "message": "avcodec/hevcdec: Avoid only partly skiping duplicate first slices\n\nFixes: NULL pointer dereference and out of array access\nFixes: 13871/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5746167087890432\nFixes: 13845/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5650370728034304\n\nThis also fixes the return code for explode mode\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: James Almer <jamrial@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ],
          "candidate": [
            "libavcodec/hevcdec.c||libavcodec/hevcdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/hevcdec.c||libavcodec/hevcdec.c": [
          "File: libavcodec/hevcdec.c -> libavcodec/hevcdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:     sh->first_slice_in_pic_flag = get_bits1(gb);",
          "491:     if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {",
          "492:         s->seq_decode = (s->seq_decode + 1) & 0xff;",
          "493:         s->max_ra     = INT_MAX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     if (s->ref && sh->first_slice_in_pic_flag) {",
          "492:         av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "493:         return 1; // This slice will be skiped later, do not corrupt state",
          "494:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2918:         ret = hls_slice_header(s);",
          "2919:         if (ret < 0)",
          "2920:             return ret;",
          "2922:         if (",
          "2923:             (s->avctx->skip_frame >= AVDISCARD_BIDIR && s->sh.slice_type == HEVC_SLICE_B) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2926:         if (ret == 1) {",
          "2927:             ret = AVERROR_INVALIDDATA;",
          "2928:             goto fail;",
          "2929:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2927:         }",
          "2929:         if (s->sh.first_slice_in_pic_flag) {",
          "2934:             if (s->max_ra == INT_MAX) {",
          "2935:                 if (s->nal_unit_type == HEVC_NAL_CRA_NUT || IS_BLA(s)) {",
          "2936:                     s->max_ra = s->poc;",
          "",
          "[Removed Lines]",
          "2930:             if (s->ref) {",
          "2931:                 av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");",
          "2932:                 goto fail;",
          "2933:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}