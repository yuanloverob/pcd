{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
      "candidate_info": {
        "commit_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/autoindex1.test",
          "test/eqp.test",
          "test/rowvalue4.test"
        ],
        "message": "Do not generate subroutines for non-static SELECT and EXISTS expressions. Fix up some test cases to account for the minor changes in EXPLAIN QUERY PLAN output.\n\nFossilOrigin-Name: 06de44ec9e173992ca9afb89dd2b4e40d2a7e35512c7959603cdceb606f5dfbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/autoindex1.test||test/autoindex1.test",
          "test/eqp.test||test/eqp.test",
          "test/rowvalue4.test||test/rowvalue4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2866:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2891:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "2893:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2882:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2883:                         pExpr->y.sub.iAddr);",
          "2884:       return pExpr->iTable;",
          "2885:     }",
          "2888:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2889:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2890:     pExpr->y.sub.iAddr =",
          "2891:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2892:     VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2939:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2948:   return rReg;",
          "2949: }",
          "",
          "[Removed Lines]",
          "2942:   }",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "[Added Lines]",
          "2946:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2947:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2948:   }",
          "",
          "---------------"
        ],
        "test/autoindex1.test||test/autoindex1.test": [
          "File: test/autoindex1.test -> test/autoindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: } {",
          "185:   QUERY PLAN",
          "186:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "188:      `--SCAN TABLE t502",
          "189: }",
          "190: do_eqp_test autoindex1-501 {",
          "",
          "[Removed Lines]",
          "187:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "187:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {",
          "194:   QUERY PLAN",
          "195:   |--SCAN TABLE t501",
          "197:      `--SEARCH TABLE t502 USING AUTOMATIC COVERING INDEX (y=?)",
          "198: }",
          "199: do_eqp_test autoindex1-502 {",
          "",
          "[Removed Lines]",
          "196:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "196:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: } {",
          "204:   QUERY PLAN",
          "205:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "207:      `--SCAN TABLE t502",
          "208: }",
          "",
          "[Removed Lines]",
          "206:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "206:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/eqp.test||test/eqp.test": [
          "File: test/eqp.test -> test/eqp.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: } {",
          "287:   QUERY PLAN",
          "288:   |--SCAN TABLE t1",
          "290:      `--SCAN TABLE t2",
          "291: }",
          "292: det 3.3.2 {",
          "",
          "[Removed Lines]",
          "289:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "289:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: } {",
          "295:   QUERY PLAN",
          "296:   |--SCAN TABLE t1",
          "298:      `--SCAN TABLE t2",
          "299: }",
          "300: det 3.3.3 {",
          "",
          "[Removed Lines]",
          "297:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "297:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/rowvalue4.test||test/rowvalue4.test": [
          "File: test/rowvalue4.test -> test/rowvalue4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: } {",
          "236:   QUERY PLAN",
          "237:   |--SEARCH TABLE d2 USING INDEX d2ab (a=? AND b=?)",
          "239:   |  `--SCAN TABLE d1",
          "241:      `--SCAN TABLE d1",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   |--LIST SUBQUERY",
          "240:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "238:   |--LIST SUBQUERY xxxxxx",
          "240:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de0ab82074f1898fe1b7374683aeea6afae0675",
      "candidate_info": {
        "commit_hash": "0de0ab82074f1898fe1b7374683aeea6afae0675",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0de0ab82074f1898fe1b7374683aeea6afae0675",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a case in wapptest.tcl where a failed test might report 0 errors.\n\nFossilOrigin-Name: 2be1ed70df605663822d1afdde757f426ccf2ee38add8dc6b6bb4fc4d90a31dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713caa382cf7ddef872e510a76a5fca40be1a8d8876ce2f91b632bb0810a6630",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:       sqlite3 sqlite3.exe",
          "223:       test.log test-out.txt",
          "224:       core",
          "225:     }",
          "226:     foreach f [glob -nocomplain [file join $G(test.$name.dir) *]] {",
          "227:       set t [file tail $f]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:       wapptest_make.sh",
          "226:       wapptest_configure.sh",
          "227:       wapptest_run.tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:       set rc [catch { exec {*}$cfg >& test.log } msg]",
          "278:       if {$rc==0} {",
          "279:         set make [readfile wapptest_make.sh]",
          "281:       }",
          "282:     }",
          "283:   } else {",
          "284:     append res {",
          "285:       set make [readfile wapptest_make.sh]",
          "287:     }",
          "288:   }",
          "290:   set res",
          "291: }",
          "",
          "[Removed Lines]",
          "280:         catch { exec {*}$make >>& test.log }",
          "286:       catch { exec {*}$make >>& test.log }",
          "",
          "[Added Lines]",
          "283:         set rc [catch { exec {*}$make >>& test.log }]",
          "289:       set rc [catch { exec {*}$make >>& test.log }]",
          "293:   append res { exit $rc }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60ce5d313526cbed2d88f8891895ac4fec650dc5",
      "candidate_info": {
        "commit_hash": "60ce5d313526cbed2d88f8891895ac4fec650dc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/60ce5d313526cbed2d88f8891895ac4fec650dc5",
        "files": [
          "doc/lemon.html",
          "manifest",
          "manifest.uuid",
          "test/lemon-test01.y",
          "tool/lempar.c"
        ],
        "message": "Add a simple test case for Lemon.  Always include assert.h in the Lemon-generated parser.\n\nFossilOrigin-Name: 9c9c46dcbe92aeabe3d5675bb69681b6dfd53798bc67e6a2ceba67ed3c4fb0af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/lemon-test01.y||test/lemon-test01.y",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c6dfc59eb12a02d35b708b5d94239377c79f688fa572f72bad51a157b1bf599c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/lemon-test01.y||test/lemon-test01.y": [
          "File: test/lemon-test01.y -> test/lemon-test01.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: %token_prefix TK_",
          "6: %token_type   int",
          "7: %default_type int",
          "8: %include {",
          "9:   static int nSyntaxError = 0;",
          "10:   static int nAccept = 0;",
          "11:   static int nFailure = 0;",
          "12: }",
          "14: all ::=  A B.",
          "15: all ::=  error B.",
          "17: %syntax_error {",
          "18:   nSyntaxError++;",
          "19: }",
          "20: %parse_accept {",
          "21:   nAccept++;",
          "22: }",
          "23: %parse_failure {",
          "24:   nFailure++;",
          "25: }",
          "26: %code {",
          "27:   #include <assert.h>",
          "28:   #include \"lemon-test01.h\"",
          "29:   static int nTest = 0;",
          "30:   static int nErr = 0;",
          "31:   static int testCase(int testId, int shouldBe, int actual){",
          "32:     nTest++;",
          "33:     if( shouldBe==actual ){",
          "34:       printf(\"test %d: ok\\n\", testId);",
          "35:     }else{",
          "36:       printf(\"test %d: got %d, expected %d\\n\", testId, actual, shouldBe);",
          "37:       nErr++;",
          "38:     }",
          "39:   }",
          "40:   int main(int argc, char **argv){",
          "41:     yyParser xp;",
          "42:     ParseInit(&xp);",
          "43:     Parse(&xp, TK_A, 0);",
          "44:     Parse(&xp, TK_B, 0);",
          "45:     Parse(&xp, 0, 0);",
          "46:     ParseFinalize(&xp);",
          "47:     testCase(100, 0, nSyntaxError);",
          "48:     testCase(110, 1, nAccept);",
          "49:     testCase(120, 0, nFailure);",
          "50:     nSyntaxError = nAccept = nFailure = 0;",
          "51:     ParseInit(&xp);",
          "52:     Parse(&xp, TK_B, 0);",
          "53:     Parse(&xp, TK_B, 0);",
          "54:     Parse(&xp, 0, 0);",
          "55:     ParseFinalize(&xp);",
          "56:     testCase(200, 1, nSyntaxError);",
          "57:     testCase(210, 1, nAccept);",
          "58:     testCase(220, 0, nFailure);",
          "59:     nSyntaxError = nAccept = nFailure = 0;",
          "60:     ParseInit(&xp);",
          "61:     Parse(&xp, TK_A, 0);",
          "62:     Parse(&xp, TK_A, 0);",
          "63:     Parse(&xp, 0, 0);",
          "64:     ParseFinalize(&xp);",
          "65:     testCase(200, 1, nSyntaxError);",
          "66:     testCase(210, 0, nAccept);",
          "67:     testCase(220, 0, nFailure);",
          "68:     if( nErr==0 ){",
          "69:       printf(\"%d tests pass\\n\", nTest);",
          "70:     }else{",
          "71:       printf(\"%d errors out %d tests\\n\", nErr, nTest);",
          "72:     }",
          "73:     return nErr;",
          "74:   }",
          "75: }",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <stdio.h>",
          "27: %%",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <assert.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
      "candidate_info": {
        "commit_hash": "8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8bcc6866143ce2570c57e44f4868e0f8f6e1c4ed",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts4umlaut.test"
        ],
        "message": "The fts4umlaut.test module requires FTS5, so do not try to run it without that module.\n\nFossilOrigin-Name: dee3ae900129d39d69aff3ec6187376be100803ee6170bbf39529f37b4253260",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts4umlaut.test||test/fts4umlaut.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0bf4c70a6849da74797e8616a4f3730492ad02882ae67a0fe0f3b3cc3f1043b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4umlaut.test||test/fts4umlaut.test": [
          "File: test/fts4umlaut.test -> test/fts4umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4umlaut",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "",
          "[Removed Lines]",
          "19: ifcapable !fts3 {",
          "",
          "[Added Lines]",
          "19: ifcapable !fts3||!fts5 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef14abbf8d7dac12bb3f54f61621194750bb6aed",
      "candidate_info": {
        "commit_hash": "ef14abbf8d7dac12bb3f54f61621194750bb6aed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef14abbf8d7dac12bb3f54f61621194750bb6aed",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/vdbeaux.c",
          "test/indexexpr2.test"
        ],
        "message": "Use a statement journal for all CREATE INDEX statements in case an indexed exprsesion throws an exception when it is evaluated. Fix for [b5ca442a].\n\nFossilOrigin-Name: b8071d10cba8f6c19fb8d5df3877f72567dc6d6a94744a39cbc1f58b2e2f343b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aee73fd28f031a2568ac723de0826be7f1dca6be3b049e4a04fb47af75dcf4bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3050:     sqlite3UniqueConstraint(pParse, OE_Abort, pIndex);",
          "3051:     sqlite3VdbeJumpHere(v, j2);",
          "3052:   }else{",
          "3053:     addr2 = sqlite3VdbeCurrentAddr(v);",
          "3054:   }",
          "3055:   sqlite3VdbeAddOp3(v, OP_SorterData, iSorter, regRecord, iIdx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3060:     sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:   int hasAbort = 0;",
          "630:   int hasFkCounter = 0;",
          "631:   int hasCreateTable = 0;",
          "632:   int hasInitCoroutine = 0;",
          "633:   Op *pOp;",
          "634:   VdbeOpIter sIter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632:   int hasCreateIndex = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647:       break;",
          "648:     }",
          "649:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_INTKEY ) hasCreateTable = 1;",
          "650:     if( opcode==OP_InitCoroutine ) hasInitCoroutine = 1;",
          "651: #ifndef SQLITE_OMIT_FOREIGN_KEY",
          "652:     if( opcode==OP_FkCounter && pOp->p1==0 && pOp->p2==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     if( opcode==OP_CreateBtree && pOp->p3==BTREE_BLOBKEY ) hasCreateIndex = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:   return ( v->db->mallocFailed || hasAbort==mayAbort || hasFkCounter",
          "666: }",
          "",
          "[Removed Lines]",
          "665:               || (hasCreateTable && hasInitCoroutine) );",
          "",
          "[Added Lines]",
          "667:         || (hasCreateTable && hasInitCoroutine) || hasCreateIndex",
          "668:   );",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   SELECT a, b FROM x1 WHERE CAST(b AS TEXT) = 123;",
          "279: } {SEARCH TABLE x1 USING INDEX x1i2 (<expr>=?)}",
          "282: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: do_execsql_test 7.0 {",
          "282:   CREATE TABLE IF NOT EXISTS t0(c0);",
          "283:   INSERT INTO t0(c0) VALUES (-9223372036854775808);",
          "284:   BEGIN;",
          "285: }",
          "286: do_catchsql_test 7.1 {",
          "287:   CREATE INDEX i0 ON t0(ABS(c0));",
          "288: } {1 {integer overflow}}",
          "289: do_execsql_test 7.2 {",
          "290:   COMMIT;",
          "291:   SELECT sql FROM sqlite_master WHERE tbl_name = 't0';",
          "292:   CREATE INDEX i0 ON t0(c0);",
          "293: } {{CREATE TABLE t0(c0)}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}