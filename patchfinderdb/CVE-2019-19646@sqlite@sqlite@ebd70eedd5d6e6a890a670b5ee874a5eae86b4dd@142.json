{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
      "candidate_info": {
        "commit_hash": "f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f135cb7d7f123a42940ddbb4dadc91e86f84cb35",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix an error message in the Lemon parser generator.\n\nFossilOrigin-Name: b6d7d42b7426622a26b67809cd1f21285fea120aa1897377b9946840463b41f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f97626f921dafe596b615a168ef31987f4a1c0b52956443e1a5c1148b49cab74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3848:           ErrorMsg(lemp->filename,rp->ruleline,",
          "3849:             \"%s(%s) has the same label as the LHS but is not the left-most \"",
          "3850:             \"symbol on the RHS.\",",
          "3852:           lemp->errorcnt++;",
          "3853:         }",
          "3854:         for(j=0; j<i; j++){",
          "",
          "[Removed Lines]",
          "3851:             rp->rhs[i]->name, rp->rhsalias);",
          "",
          "[Added Lines]",
          "3851:             rp->rhs[i]->name, rp->rhsalias[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c1f9ce9a33d745205d21261cb44124dde057bc",
      "candidate_info": {
        "commit_hash": "68c1f9ce9a33d745205d21261cb44124dde057bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68c1f9ce9a33d745205d21261cb44124dde057bc",
        "files": [
          "ext/fts3/fts3_expr.c",
          "manifest",
          "manifest.uuid",
          "test/fts3expr5.test"
        ],
        "message": "Have fts3 ignore empty sets of parenthesis if built with SQLITE_ENABLE_FTS3_PARENTHESIS.\n\nFossilOrigin-Name: c93c6b45a317c40eb5c0abb6620d21f5821a601632c791e11e5ce62e039eccda",
        "before_after_code_files": [
          "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3expr5.test||test/fts3expr5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c": [
          "File: ext/fts3/fts3_expr.c -> ext/fts3/fts3_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:       int nConsumed = 0;",
          "498:       pParse->nNest++;",
          "499:       rc = fts3ExprParse(pParse, zInput+1, nInput-1, ppExpr, &nConsumed);",
          "502:       return rc;",
          "503:     }else if( *zInput==')' ){",
          "",
          "[Removed Lines]",
          "500:       if( rc==SQLITE_OK && !*ppExpr ){ rc = SQLITE_DONE; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3expr5.test||test/fts3expr5.test": [
          "File: test/fts3expr5.test -> test/fts3expr5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   return",
          "23: }",
          "25: #-------------------------------------------------------------------------",
          "26: # Various forms of empty phrase expressions.",
          "27: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: proc test_fts3expr {expr} {",
          "26:   db one {SELECT fts3_exprtest('simple', $expr, 'a', 'b', 'c')}",
          "27: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   SELECT rowid FROM t0 WHERE x MATCH '\"\"\"\"';",
          "46: } {}",
          "48: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #-------------------------------------------------------------------------",
          "53: # Various forms of empty phrase expressions.",
          "54: #",
          "55: set sqlite_fts3_enable_parentheses 1",
          "56: do_test 2.0 {",
          "57:   test_fts3expr {(a:123)(b:234)()(c:456)}",
          "58: } {AND {AND {PHRASE 0 0 123} {PHRASE 1 0 234}} {PHRASE 2 0 456}}",
          "59: do_test 2.1 {",
          "60:   test_fts3expr {(a:123)(b:234)(c:456)}",
          "61: } {AND {AND {PHRASE 0 0 123} {PHRASE 1 0 234}} {PHRASE 2 0 456}}",
          "62: do_test 2.2 {",
          "63:   list [catch { test_fts3expr {\"123\" AND ( )} } msg] $msg",
          "64: } {1 {Error parsing expression}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39593e4f0932dd09dca6820888fc725d12262272",
      "candidate_info": {
        "commit_hash": "39593e4f0932dd09dca6820888fc725d12262272",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39593e4f0932dd09dca6820888fc725d12262272",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The check-in [b7810062ec2489e1] was not quite right in that it allowed an oversized shift operation (which is UB in C) on some obscure inputs.  OSSFuzz found the problem for us overnight.\n\nFossilOrigin-Name: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32772dfd50b602c049d8c30bc28cde60a18b7495a997d728081f689ff417c956",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3203:       if( iTerm>mxTerm ) mxTerm = iTerm;",
          "3204:       testcase( iTerm==15 );",
          "3205:       testcase( iTerm==16 );",
          "3208:           testcase( i!=iTerm );",
          "3209:           pNew->u.vtab.omitMask |= 1<<iTerm;",
          "3210:         }else{",
          "",
          "[Removed Lines]",
          "3206:       if( iTerm<16 && pUsage[i].omit ){",
          "3207:         if( ((1<<i)&mNoOmit)==0 ){",
          "",
          "[Added Lines]",
          "3206:       if( pUsage[i].omit ){",
          "3207:         if( i<16 && ((1<<i)&mNoOmit)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
      "candidate_info": {
        "commit_hash": "4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/shell1.test"
        ],
        "message": "Fix the shell1.test test for the new format of the .backup command.\n\nFossilOrigin-Name: 9748d7995bc1dd632d66d2d326048d50e29c6f5e6993d5a6294d14421d2cb72f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab1e58fac9e3f9d7d90cefb39f8f145d211d38ec0cb393208c4531cc646056c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_test shell1-3.1.4 {",
          "257:   # too many arguments",
          "258:   catchcmd \"test.db\" \".backup FOO BAR BAD\"",
          "261: # .bail ON|OFF           Stop after hitting an error.  Default OFF",
          "262: do_test shell1-3.2.1 {",
          "",
          "[Removed Lines]",
          "259: } {1 {Usage: .backup ?DB? ?--append? FILENAME}}",
          "",
          "[Added Lines]",
          "259: } {1 {Usage: .backup ?DB? ?OPTIONS? FILENAME}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
      "candidate_info": {
        "commit_hash": "f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f25cc4f3c5d983b2d2f4986550c10cb9c2267351",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "If the \".open\" command fails in the CLI, reopen to :memory: so that at least some database is available for subsequent commands.\n\nFossilOrigin-Name: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26275fc7e89eb2542a65d01fd271cef016a4a1815bc3845c599cf2f4fbf7513d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871:     if( p->db==0 || SQLITE_OK!=sqlite3_errcode(p->db) ){",
          "3872:       utf8_printf(stderr,\"Error: unable to open database \\\"%s\\\": %s\\n\",",
          "3873:           p->zDbFilename, sqlite3_errmsg(p->db));",
          "3875:       exit(1);",
          "3876:     }",
          "3877: #ifndef SQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ) return;",
          "",
          "[Added Lines]",
          "3874:       if( openFlags & OPEN_DB_KEEPALIVE ){",
          "3875:         sqlite3_open(\":memory:\", &p->db);",
          "3876:         return;",
          "3877:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}