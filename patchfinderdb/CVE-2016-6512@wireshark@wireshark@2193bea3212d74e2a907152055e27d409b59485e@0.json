{
  "cve_id": "CVE-2016-6512",
  "cve_desc": "epan/dissectors/packet-wap.c in Wireshark 2.x before 2.0.5 omits an overflow check in the tvb_get_guintvar function, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet, related to the MMSE, WAP, WBXML, and WSP dissectors.",
  "repo": "wireshark/wireshark",
  "patch_hash": "2193bea3212d74e2a907152055e27d409b59485e",
  "patch_info": {
    "commit_hash": "2193bea3212d74e2a907152055e27d409b59485e",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/2193bea3212d74e2a907152055e27d409b59485e",
    "files": [
      "epan/dissectors/packet-mmse.c",
      "epan/dissectors/packet-wap.c",
      "epan/dissectors/packet-wap.h",
      "epan/dissectors/packet-wbxml.c",
      "epan/dissectors/packet-wsp.c"
    ],
    "message": "WAP: check that tvb_get_guintvar does not overflow\n\nBug: 12661\nChange-Id: I2ef857d6be6595fd89f3dbb8d41c1c70d550ad93\nReviewed-on: https://code.wireshark.org/review/16665\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
      "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
      "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
      "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
      "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c": [
      "File: epan/dissectors/packet-mmse.c -> epan/dissectors/packet-mmse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include <epan/packet.h>",
      "38: #include <epan/to_str.h>",
      "39: #include <epan/strutil.h>",
      "40: #include \"packet-wap.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "248: static gint ett_mmse                    = -1;",
      "249: static gint ett_mmse_hdr_details        = -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252: static expert_field ei_mmse_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "486: static guint",
      "488: {",
      "489:     guint        field;",
      "",
      "[Removed Lines]",
      "487: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count)",
      "",
      "[Added Lines]",
      "491: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count, packet_info *pinfo)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "492:     if (field < 31)",
      "496:         (*byte_count)++;",
      "497:     }",
      "498:     return field;",
      "",
      "[Removed Lines]",
      "495:         field = tvb_get_guintvar(tvb, offset, byte_count);",
      "",
      "[Added Lines]",
      "499:         field = tvb_get_guintvar(tvb, offset, byte_count, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "513: static guint",
      "515: {",
      "516:     guint        field;",
      "517:     guint        length;",
      "",
      "[Removed Lines]",
      "514: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval)",
      "",
      "[Added Lines]",
      "518: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval, packet_info *pinfo)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "520:     field = tvb_get_guint8(tvb, offset);",
      "522:     if (field < 32) {",
      "524:         if (length < 2) {",
      "526:         } else {",
      "",
      "[Removed Lines]",
      "523:         length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "527:         length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "774:                     }",
      "775:                     break;",
      "778:                     if (tree) {",
      "779:                         proto_tree_add_string(mmse_tree, hf_mmse_bcc, tvb,",
      "780:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "777:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "781:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "782:                     offset += length;",
      "783:                     break;",
      "786:                     if (tree) {",
      "787:                         proto_tree_add_string(mmse_tree, hf_mmse_cc, tvb,",
      "788:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "785:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "789:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "796:                         if (length == 0x1F) {",
      "797:                             guint length_len = 0;",
      "798:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "800:                             length += 1 + length_len;",
      "801:                         } else {",
      "802:                             length += 1;",
      "",
      "[Removed Lines]",
      "799:                                     &length_len);",
      "",
      "[Added Lines]",
      "803:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "845:                     field = tvb_get_guint8(tvb, offset + count);",
      "846:                     if (tree) {",
      "847:                         guint            tval;",
      "",
      "[Removed Lines]",
      "844:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "848:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "874:                     field = tvb_get_guint8(tvb, offset + count);",
      "875:                     if (tree) {",
      "876:                         guint            tval;",
      "",
      "[Removed Lines]",
      "873:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "877:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "901:                     if (tree) {",
      "902:                         field = tvb_get_guint8(tvb, offset + count);",
      "903:                         if (field == 0x81) {",
      "",
      "[Removed Lines]",
      "900:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "904:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "906:                                     \"<insert address>\");",
      "907:                         } else {",
      "908:                             (void) get_encoded_strval(tvb, offset + count + 1,",
      "910:                             proto_tree_add_string(mmse_tree, hf_mmse_from, tvb,",
      "911:                                     offset-1, length + count + 1, strval);",
      "912:                         }",
      "",
      "[Removed Lines]",
      "909:                                                       &strval);",
      "",
      "[Added Lines]",
      "913:                                                       &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "992:                         if (length == 0x1F) {",
      "993:                             guint length_len = 0;",
      "994:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "996:                             length += 1 + length_len;",
      "997:                         } else {",
      "998:                             length += 1;",
      "",
      "[Removed Lines]",
      "995:                                     &length_len);",
      "",
      "[Added Lines]",
      "999:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1004:                                     \"<Undecoded value for m-mbox-delete-conf>\");",
      "1005:                         }",
      "1006:                     } else {",
      "1008:                         if (tree) {",
      "1009:                             proto_tree_add_string(mmse_tree,",
      "1010:                                     hf_mmse_response_text, tvb, offset - 1,",
      "",
      "[Removed Lines]",
      "1007:                         length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1011:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1028:                     }",
      "1029:                     break;",
      "1032:                     if (tree) {",
      "1033:                         proto_tree_add_string(mmse_tree, hf_mmse_subject, tvb,",
      "1034:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "1031:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1035:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1036:                     offset += length;",
      "1037:                     break;",
      "1040:                     if (tree) {",
      "1041:                         proto_tree_add_string(mmse_tree, hf_mmse_to, tvb,",
      "1042:                                 offset - 1, length + 1, strval);",
      "",
      "[Removed Lines]",
      "1039:                     length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1043:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1061:                         if (length == 0x1F) {",
      "1062:                             guint length_len = 0;",
      "1063:                             length = tvb_get_guintvar(tvb, offset + 1,",
      "1065:                             length += 1 + length_len;",
      "1066:                         } else {",
      "1067:                             length += 1;",
      "",
      "[Removed Lines]",
      "1064:                                     &length_len);",
      "",
      "[Added Lines]",
      "1068:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1074:                         }",
      "1075:                     } else {",
      "1078:                         if (tree) {",
      "1079:                             proto_tree_add_string(mmse_tree,",
      "1080:                                     hf_mmse_retrieve_text, tvb, offset - 1,",
      "",
      "[Removed Lines]",
      "1077:                         length = get_encoded_strval(tvb, offset, &strval);",
      "",
      "[Added Lines]",
      "1081:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1106:                     field = tvb_get_guint8(tvb, offset + count);",
      "1107:                     if (tree) {",
      "1108:                         guint            tval;",
      "",
      "[Removed Lines]",
      "1105:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1109:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1144:                     break;",
      "1145:                 case MM_PREV_SENT_BY_HDR:",
      "1148:                     if (tree) {",
      "1149:                         guint32 fwd_count, count1, count2;",
      "1150:                         proto_tree *subtree = NULL;",
      "",
      "[Removed Lines]",
      "1147:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1151:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1154:                             &count1);",
      "1156:                         count2 = get_encoded_strval(tvb,",
      "1159:                         tii = proto_tree_add_string_format(mmse_tree,",
      "1160:                                 hf_mmse_prev_sent_by,",
      "",
      "[Removed Lines]",
      "1157:                                 offset + count + count1, &strval);",
      "",
      "[Added Lines]",
      "1161:                                 offset + count + count1, &strval, pinfo);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1175:                     break;",
      "1176:                 case MM_PREV_SENT_DATE_HDR:",
      "1179:                     if (tree) {",
      "1180:                         guint32 fwd_count, count1, count2;",
      "1181:                         guint            tval;",
      "",
      "[Removed Lines]",
      "1178:                     length = get_value_length(tvb, offset, &count);",
      "",
      "[Added Lines]",
      "1182:                     length = get_value_length(tvb, offset, &count, pinfo);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1243:                                 guint length_len = 0;",
      "1244:                                 length = 1 + tvb_get_guintvar(tvb, offset + 1,",
      "1246:                                 length += length_len;",
      "1248:                                 length = 1 + tvb_get_guint8(tvb, offset);",
      "",
      "[Removed Lines]",
      "1245:                                         &length_len);",
      "",
      "[Added Lines]",
      "1249:                                         &length_len, pinfo, &ei_mmse_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1647:         &ett_mmse_hdr_details,",
      "1648:     };",
      "1651:     proto_mmse = proto_register_protocol(\"MMS Message Encapsulation\",",
      "1652:                                          \"MMSE\", \"mmse\");",
      "1655:     proto_register_field_array(proto_mmse, hf, array_length(hf));",
      "1656:     proto_register_subtree_array(ett, array_length(ett));",
      "1657: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1654:     static ei_register_info ei[] = {",
      "1655:         { &ei_mmse_oversized_uintvar, { \"mmse.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "1656:     };",
      "1658:     expert_module_t* expert_mmse;",
      "1668:     expert_mmse = expert_register_protocol(proto_mmse);",
      "1669:     expert_register_field_array(expert_mmse, ei, array_length(ei));",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c": [
      "File: epan/dissectors/packet-wap.c -> epan/dissectors/packet-wap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: guint",
      "42: {",
      "43:     guint value   = 0;",
      "44:     guint octet;",
      "",
      "[Removed Lines]",
      "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount)",
      "",
      "[Added Lines]",
      "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount, packet_info *pinfo, expert_field *ei)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70: #endif",
      "71:     }",
      "73:     if (octetCount != NULL)",
      "74:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:     if (counter > 5) {",
      "74:         proto_tree_add_expert(NULL, pinfo, ei, tvb, offset, counter);",
      "75:         value = 0;",
      "76:     }",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h": [
      "File: epan/dissectors/packet-wap.h -> epan/dissectors/packet-wap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include <glib.h>",
      "32: #include <epan/packet.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <epan/expert.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "72: guint tvb_get_guintvar (tvbuff_t *, guint , guint *);",
      "",
      "[Added Lines]",
      "73: guint tvb_get_guintvar (tvbuff_t *, guint , guint *, packet_info *, expert_field *);",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
      "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
      "178: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
      "179: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
      "182: static gboolean skip_wbxml_token_mapping = FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "180: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "272: static char *",
      "273: default_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "275: {",
      "277:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "279:  return str;",
      "",
      "[Removed Lines]",
      "269: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *);",
      "270: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *);",
      "274:      guint8 token _U_, guint8 codepage _U_, guint32 *length)",
      "276:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "270: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *, packet_info *);",
      "271: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *, packet_info *);",
      "275:      guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "277:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "282: static char *",
      "283: default_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "285: {",
      "287:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "289:  return str;",
      "",
      "[Removed Lines]",
      "284:       const char *token _U_, guint8 codepage _U_, guint32 *length)",
      "286:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "285:       const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "287:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "292: static char *",
      "293: default_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "295: {",
      "297:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "299:  return str;",
      "",
      "[Removed Lines]",
      "294:       guint8 token _U_, guint8 codepage _U_, guint32 *length)",
      "296:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "295:       guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "297:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "302: static char *",
      "303: default_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "305: {",
      "307:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
      "309:  return str;",
      "",
      "[Removed Lines]",
      "304:        const char *token _U_, guint8 codepage _U_, guint32 *length)",
      "306:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "305:        const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "307:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "445: static char *",
      "446: wv_csp10_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "448: {",
      "450:  char *str = NULL;",
      "452:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "447:       guint8 token, guint8 codepage, guint32 *length)",
      "449:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "448:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "450:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "508: static char *",
      "509: wv_csp10_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "511: {",
      "513:  char *str = NULL;",
      "515:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "510:        const char *token, guint8 codepage _U_, guint32 *length)",
      "512:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "511:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "513:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "543: static char *",
      "544: wv_csp11_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "546: {",
      "548:  char *str = NULL;",
      "550:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "545:       guint8 token, guint8 codepage, guint32 *length)",
      "547:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "546:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "548:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "615: static char *",
      "616: wv_csp11_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "618: {",
      "620:  char *str = NULL;",
      "622:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "617:        const char *token, guint8 codepage _U_, guint32 *length)",
      "619:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "618:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "620:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "652: static char *",
      "653: wv_csp12_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "655: {",
      "657:  char *str = NULL;",
      "659:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "654:       guint8 token, guint8 codepage, guint32 *length)",
      "656:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "655:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "657:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "735: static char *",
      "736: wv_csp12_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "738: {",
      "740:  char *str = NULL;",
      "742:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "737:        const char *token, guint8 codepage _U_, guint32 *length)",
      "739:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "738:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "740:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "773: static char *",
      "774: wv_csp13_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
      "776: {",
      "778:  char *str = NULL;",
      "780:  switch (codepage)",
      "",
      "[Removed Lines]",
      "775:       guint8 token, guint8 codepage, guint32 *length)",
      "777:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "776:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "778:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "912: static char *",
      "913: wv_csp13_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
      "915: {",
      "917:  char *str = NULL;",
      "919:  if ( token && ( (strcmp(token, \"Code\") == 0)",
      "",
      "[Removed Lines]",
      "914:        const char *token, guint8 codepage _U_, guint32 *length)",
      "916:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "915:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "917:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "970: static char *",
      "971: sic10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "973: {",
      "975:  char *str = NULL;",
      "977:  if ( token && ( (strcmp(token, \"created\") == 0)",
      "",
      "[Removed Lines]",
      "972:      const char *token, guint8 codepage _U_, guint32 *length)",
      "974:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "973:      const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "975:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "990: static char *",
      "991: sic10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "993: {",
      "995:  char *str = NULL;",
      "997:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "992:     guint8 token, guint8 codepage, guint32 *length)",
      "994:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "993:     guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "995:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1020: static char *",
      "1021: emnc10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
      "1023: {",
      "1025:  char *str = NULL;",
      "1027:  if ( token && (strcmp(token, \"timestamp\") == 0) )",
      "",
      "[Removed Lines]",
      "1022:       const char *token, guint8 codepage _U_, guint32 *length)",
      "1024:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "1023:       const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
      "1025:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1039: static char *",
      "1040: emnc10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
      "1042: {",
      "1044:  char *str = NULL;",
      "1046:  switch (codepage) {",
      "",
      "[Removed Lines]",
      "1041:      guint8 token, guint8 codepage, guint32 *length)",
      "1043:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
      "",
      "[Added Lines]",
      "1042:      guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
      "1044:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "7052: static guint32",
      "7054:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
      "7055:         const wbxml_decoding *map)",
      "7056: {",
      "",
      "[Removed Lines]",
      "7053: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
      "",
      "[Added Lines]",
      "7054: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "7091:       level, off - offset));",
      "7092:    return (off - offset);",
      "7095:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
      "7096:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
      "7097:           level, *codepage_attr, Indent (level), ent);",
      "",
      "[Removed Lines]",
      "7094:    ent = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7095:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "7113:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7114:    attr_save_known = 0;",
      "7115:    attr_save_literal = tvb_format_text (tvb,",
      "",
      "[Removed Lines]",
      "7112:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7113:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "7141:    {",
      "7142:     char *s;",
      "7143:     if (map != NULL) {",
      "",
      "[Removed Lines]",
      "7140:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7141:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "7158:    off += 1+len;",
      "7159:    break;",
      "7162:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7163:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
      "7164:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
      "",
      "[Removed Lines]",
      "7161:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7162:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "7185:       if (map->opaque_binary_attr) {",
      "7186:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
      "7188:       } else {",
      "7189:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
      "7191:       }",
      "7193:       if (map->opaque_literal_tag) {",
      "7194:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
      "7196:       } else {",
      "7197:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
      "7199:       }",
      "7200:      }",
      "7201:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
      "",
      "[Removed Lines]",
      "7187:                attr_save_known, *codepage_attr, &len);",
      "7190:            attr_save_known, *codepage_attr, &len);",
      "7195:                 attr_save_literal, *codepage_attr, &len);",
      "7198:             attr_save_literal, *codepage_attr, &len);",
      "",
      "[Added Lines]",
      "7188:                attr_save_known, *codepage_attr, &len, pinfo);",
      "7191:            attr_save_known, *codepage_attr, &len, pinfo);",
      "7196:                 attr_save_literal, *codepage_attr, &len, pinfo);",
      "7199:             attr_save_literal, *codepage_attr, &len, pinfo);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "7203:             level, *codepage_attr, Indent (level), tmp_str);",
      "7204:      off += 1 + len;",
      "7205:     } else {",
      "7207:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7208:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
      "7209:             level, *codepage_attr, Indent (level), idx);",
      "",
      "[Removed Lines]",
      "7206:      idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7207:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "7287: static guint32",
      "7289:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
      "7290:     const wbxml_decoding *map)",
      "7291: {",
      "",
      "[Removed Lines]",
      "7288: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
      "",
      "[Added Lines]",
      "7289: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "7339:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
      "7340:    return (off - offset);",
      "7343:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
      "7344:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
      "",
      "[Removed Lines]",
      "7342:    ent = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7343:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "7372:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
      "7373:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
      "7376:           str_tbl, *level, codepage_attr, map);",
      "7378:    off += len;",
      "",
      "[Removed Lines]",
      "7375:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
      "",
      "[Added Lines]",
      "7376:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "7395:    {",
      "7396:     char *s;",
      "7397:     if (map)",
      "",
      "[Removed Lines]",
      "7394:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7395:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "7413:    off += 1+len;",
      "7414:    break;",
      "7417:    str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7418:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
      "7419:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
      "",
      "[Removed Lines]",
      "7416:    idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7417:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "7440:       if (map->opaque_binary_tag) {",
      "7441:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
      "7443:       } else {",
      "7444:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
      "7446:       }",
      "7448:       if (map->opaque_literal_tag) {",
      "7449:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
      "7451:       } else {",
      "7452:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
      "7454:       }",
      "7455:      }",
      "7456:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
      "",
      "[Removed Lines]",
      "7442:                tag_save_known, *codepage_stag, &len);",
      "7445:            tag_save_known, *codepage_stag, &len);",
      "7450:                 tag_save_literal, *codepage_stag, &len);",
      "7453:             tag_save_literal, *codepage_stag, &len);",
      "",
      "[Added Lines]",
      "7443:                tag_save_known, *codepage_stag, &len, pinfo);",
      "7446:            tag_save_known, *codepage_stag, &len, pinfo);",
      "7451:                 tag_save_literal, *codepage_stag, &len, pinfo);",
      "7454:             tag_save_literal, *codepage_stag, &len, pinfo);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "7459:      off += 1 + len;",
      "7460:     } else {",
      "7462:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
      "7463:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
      "",
      "[Removed Lines]",
      "7461:      idx = tvb_get_guintvar (tvb, off+1, &len);",
      "",
      "[Added Lines]",
      "7462:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "7494:    tag_len = 0;",
      "7496:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));",
      "7498:     str_len = tvb_strsize (tvb, str_tbl+idx);",
      "7499:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
      "",
      "[Removed Lines]",
      "7497:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
      "",
      "[Added Lines]",
      "7498:     idx = tvb_get_guintvar (tvb, off+1, &tag_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "7524:      (*level)++;",
      "7526:                level, codepage_stag, codepage_attr, map);",
      "7527:      off += len;",
      "",
      "[Removed Lines]",
      "7525:      len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,",
      "",
      "[Added Lines]",
      "7526:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "7551:        off += 1 + tag_len;",
      "7552:       }",
      "7554:              off, str_tbl, *level, codepage_attr, map);",
      "7556:       off += len;",
      "",
      "[Removed Lines]",
      "7553:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7554:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "7599:              Indent (*level), tag_new_literal);",
      "7601:       off++;",
      "7603:              off, str_tbl, *level, codepage_attr, map);",
      "7605:       off += len;",
      "",
      "[Removed Lines]",
      "7602:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7603:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "7618:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
      "7620:       off += 1 + tag_len;",
      "7622:              off, str_tbl, *level, codepage_attr, map);",
      "7624:       off += len;",
      "",
      "[Removed Lines]",
      "7621:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
      "",
      "[Added Lines]",
      "7622:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "7725:  if (! publicid) {",
      "7728:   publicid_len += len;",
      "7729:  }",
      "7730:  offset = 1 + publicid_len;",
      "",
      "[Removed Lines]",
      "7724:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
      "7727:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
      "",
      "[Added Lines]",
      "7725:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "7728:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "7743:   offset += charset_len;",
      "7744:   break;",
      "",
      "[Removed Lines]",
      "7742:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
      "",
      "[Added Lines]",
      "7743:   charset = tvb_get_guintvar (tvb, offset, &charset_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "7749:  }",
      "",
      "[Removed Lines]",
      "7752:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
      "",
      "[Added Lines]",
      "7753:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "7797:   offset += charset_len;",
      "7798:  }",
      "",
      "[Removed Lines]",
      "7800:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
      "",
      "[Added Lines]",
      "7801:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len, pinfo, &ei_wbxml_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "7858:  len = parse_wbxml_tag_defined (tag_tree,",
      "7860:        &codepage_attr, content_map);",
      "7861: }",
      "",
      "[Removed Lines]",
      "7859:        tvb, offset, str_tbl, &level, &codepage_stag,",
      "",
      "[Added Lines]",
      "7860:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "8105:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
      "8106:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
      "8107:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
      "8108:  };",
      "8110:  expert_module_t* expert_wbxml;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8109:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
      "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "380: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
      "381: static expert_field ei_wsp_trailing_quote = EI_INIT;",
      "382: static expert_field ei_wsp_header_invalid = EI_INIT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383: static expert_field ei_wsp_oversized_uintvar = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1291: #define is_uri_value(x)             is_text_string(x)",
      "1293: #define get_uintvar_integer(val,tvb,start,len,ok) \\",
      "1295:     if (len>5) ok = FALSE; else ok = TRUE;",
      "1296: #define get_short_integer(val,tvb,start,len,ok) \\",
      "1297:     val = tvb_get_guint8(tvb,start); \\",
      "",
      "[Removed Lines]",
      "1294:     val = tvb_get_guintvar(tvb,start,&len); \\",
      "",
      "[Added Lines]",
      "1295:     val = tvb_get_guintvar(tvb,start,&len, pinfo, &ei_wsp_oversized_uintvar); \\",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1439:     } else { /* val_start points to 1st byte of length field */ \\",
      "1440:         if (val_id == 0x1F) { /* Value Length = guintvar */ \\",
      "1442:             val_len_len++; /* 0x1F length indicator byte */ \\",
      "1443:         } else { /* Short length followed by Len data octets */ \\",
      "1444:             val_len = tvb_get_guint8(tvb, offset); \\",
      "",
      "[Removed Lines]",
      "1441:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len); \\",
      "",
      "[Added Lines]",
      "1442:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len, pinfo, &ei_wsp_oversized_uintvar); \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4529:             tvb, 0, 1, version);",
      "4533:     proto_tree_add_uint(subtree, hf_sir_app_id_list_len,",
      "4534:             tvb, 1, len, val_len);",
      "4535:     offset = 1 + len;",
      "",
      "[Removed Lines]",
      "4532:     val_len = tvb_get_guintvar(tvb, 1, &len);",
      "",
      "[Added Lines]",
      "4533:     val_len = tvb_get_guintvar(tvb, 1, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4539:     offset += val_len;",
      "4543:     proto_tree_add_uint(subtree, hf_sir_wsp_contact_points_len,",
      "4544:             tvb, offset, len, val_len);",
      "4545:     offset += len;",
      "",
      "[Removed Lines]",
      "4542:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4543:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4554:     offset += val_len;",
      "4558:     proto_tree_add_uint(subtree, hf_sir_contact_points_len,",
      "4559:             tvb, offset, len, val_len);",
      "4560:     offset += len;",
      "",
      "[Removed Lines]",
      "4557:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4558:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4565:     offset += val_len;",
      "4569:     proto_tree_add_uint(subtree, hf_sir_protocol_options_len,",
      "4570:             tvb, offset, len, val_len);",
      "4571:     offset += len;",
      "",
      "[Removed Lines]",
      "4568:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4569:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4575:     val_len_save = val_len;",
      "4576:     for (i = 0; i < val_len_save; i++) {",
      "4578:         proto_tree_add_uint(subtree, hf_sir_protocol_options,",
      "4579:                 tvb, offset, len, val_len);",
      "4580:         offset += len;",
      "4581:     }",
      "4585:     proto_tree_add_uint(subtree, hf_sir_prov_url_len,",
      "4586:             tvb, offset, len, val_len);",
      "4587:     offset += len;",
      "",
      "[Removed Lines]",
      "4577:         val_len = tvb_get_guintvar(tvb, offset, &len);",
      "4584:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4578:         val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "4585:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4591:     offset += val_len;",
      "4595:     proto_tree_add_uint(subtree, hf_sir_cpi_tag_len,",
      "4596:             tvb, offset, len, val_len);",
      "4597:     offset += len;",
      "",
      "[Removed Lines]",
      "4594:     val_len = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "4595:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4706:                 offset++;",
      "4707:             } else {",
      "4710:                 proto_tree_add_uint (wsp_tree,",
      "4711:                         hf_wsp_server_session_id,",
      "4712:                         tvb, offset, count, value);",
      "",
      "[Removed Lines]",
      "4709:                 value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4710:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4714:                 offset += count;",
      "4715:             }",
      "4718:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
      "4719:                     tvb, offset, count, capabilityLength);",
      "4720:             offset += count;",
      "",
      "[Removed Lines]",
      "4717:             capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4718:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4722:             if (pdut != WSP_PDU_RESUME)",
      "4723:             {",
      "4726:                 proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
      "4727:                         tvb, offset, count, headerLength);",
      "4728:                 offset += count;",
      "",
      "[Removed Lines]",
      "4725:                 headerLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4726:                 headerLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4759:         case WSP_PDU_SUSPEND:",
      "4760:             if (tree) {",
      "4763:                 proto_tree_add_uint (wsp_tree,",
      "4764:                         hf_wsp_server_session_id,",
      "4765:                         tvb, offset, count, value);",
      "",
      "[Removed Lines]",
      "4762:                 value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4763:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4774:         case WSP_PDU_TRACE:",
      "4778:             nextOffset = offset + count;",
      "4779:             add_uri (wsp_tree, pinfo, tvb, offset, nextOffset, proto_ti);",
      "4780:             if (tree) {",
      "",
      "[Removed Lines]",
      "4777:             value = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4778:             value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "4788:         case WSP_PDU_PUT:",
      "4789:             uriStart = offset;",
      "4792:             headerStart = uriStart+count;",
      "4795:             offset = headerStart + count;",
      "4797:             add_uri (wsp_tree, pinfo, tvb, uriStart, offset, proto_ti);",
      "",
      "[Removed Lines]",
      "4791:             uriLength = tvb_get_guintvar (tvb, offset, &count);",
      "4794:             headersLength = tvb_get_guintvar (tvb, headerStart, &count);",
      "",
      "[Added Lines]",
      "4792:             uriLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "4795:             headersLength = tvb_get_guintvar (tvb, headerStart, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "4870:         case WSP_PDU_REPLY:",
      "4873:             headerStart = offset + count + 1;",
      "4874:             {",
      "4875:                 guint8 reply_status = tvb_get_guint8(tvb, offset);",
      "",
      "[Removed Lines]",
      "4872:             headersLength = tvb_get_guintvar (tvb, offset+1, &count);",
      "",
      "[Added Lines]",
      "4873:             headersLength = tvb_get_guintvar (tvb, offset+1, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "4960:         case WSP_PDU_PUSH:",
      "4961:         case WSP_PDU_CONFIRMEDPUSH:",
      "4964:             headerStart = offset + count;",
      "4966:             proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
      "",
      "[Removed Lines]",
      "4963:             headersLength = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "4964:             headersLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5095:         guint URILenOffset, guint URIOffset, proto_item *proto_ti)",
      "5096: {",
      "5097:     guint  count  = 0;",
      "5099:     gchar *str;",
      "5101:     proto_tree_add_uint (tree, hf_wsp_header_uri_len,",
      "",
      "[Removed Lines]",
      "5098:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count);",
      "",
      "[Added Lines]",
      "5099:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5187:         capaLen = capaValueLen + len;",
      "5189:         cap_subtree = proto_tree_add_subtree(wsp_capabilities, tvb, offset, capaLen, ett_capabilities_entry, &cap_item, \"Capability\");",
      "",
      "[Removed Lines]",
      "5186:         capaValueLen = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5187:         capaValueLen = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5245:         switch (peek) {",
      "5246:             case WSP_CAPA_CLIENT_SDU_SIZE:",
      "5248:                 proto_tree_add_uint(cap_subtree, hf_capa_client_sdu_size,",
      "5249:                         tvb, offset, len, value);",
      "5250:                 break;",
      "5251:             case WSP_CAPA_SERVER_SDU_SIZE:",
      "5253:                 proto_tree_add_uint(cap_subtree, hf_capa_server_sdu_size,",
      "5254:                         tvb, offset, len, value);",
      "5255:                 break;",
      "",
      "[Removed Lines]",
      "5247:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "5252:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5248:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "5253:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "5352:                         tvb, capaStart, capaLen, ENC_NA);",
      "5353:                 break;",
      "5354:             case WSP_CAPA_CLIENT_MESSAGE_SIZE:",
      "5356:                 proto_tree_add_uint(cap_subtree, hf_capa_client_message_size,",
      "5357:                         tvb, offset, len, value);",
      "5358:                 break;",
      "5359:             case WSP_CAPA_SERVER_MESSAGE_SIZE:",
      "5361:                 proto_tree_add_uint(cap_subtree, hf_capa_server_message_size,",
      "5362:                         tvb, offset, len, value);",
      "5363:                 break;",
      "",
      "[Removed Lines]",
      "5355:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "5360:                 value = tvb_get_guintvar(tvb, offset, &len);",
      "",
      "[Added Lines]",
      "5356:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "5361:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "5490:     heur_dtbl_entry_t       *hdtbl_entry;",
      "5493:     offset += count;",
      "5494:     if (nEntries)",
      "5495:     {",
      "",
      "[Removed Lines]",
      "5492:     nEntries = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "5493:     nEntries = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "5499:     while (nEntries--)",
      "5500:     {",
      "5501:         part_start = offset;",
      "5503:         offset += count;",
      "5505:         offset += count;",
      "5507:         ti = proto_tree_add_uint(sub_tree, hf_wsp_mpart, tvb, part_start,",
      "",
      "[Removed Lines]",
      "5502:         HeadersLen = tvb_get_guintvar (tvb, offset, &count);",
      "5504:         DataLen = tvb_get_guintvar (tvb, offset, &count);",
      "",
      "[Added Lines]",
      "5503:         HeadersLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "5505:         DataLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "7157:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
      "7158:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
      "7159:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
      "7160:     };",
      "7162:     expert_module_t* expert_wsp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7161:       { &ei_wsp_oversized_uintvar, { \"wsp.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
      "candidate_info": {
        "commit_hash": "f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
        "files": [
          "epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "WAP: check that tvb_get_guintvar does not overflow\n\nBug: 12661\nChange-Id: I2ef857d6be6595fd89f3dbb8d41c1c70d550ad93\nReviewed-on: https://code.wireshark.org/review/16665\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 2193bea3212d74e2a907152055e27d409b59485e)\nReviewed-on: https://code.wireshark.org/review/16684\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
            "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
            "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
            "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
            "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c": [
          "File: epan/dissectors/packet-mmse.c -> epan/dissectors/packet-mmse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <epan/packet.h>",
          "38: #include <epan/to_str.h>",
          "39: #include <epan/strutil.h>",
          "40: #include \"packet-wap.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: static gint ett_mmse                    = -1;",
          "249: static gint ett_mmse_hdr_details        = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: static expert_field ei_mmse_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486: static guint",
          "488: {",
          "489:     guint        field;",
          "",
          "[Removed Lines]",
          "487: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count)",
          "",
          "[Added Lines]",
          "491: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492:     if (field < 31)",
          "496:         (*byte_count)++;",
          "497:     }",
          "498:     return field;",
          "",
          "[Removed Lines]",
          "495:         field = tvb_get_guintvar(tvb, offset, byte_count);",
          "",
          "[Added Lines]",
          "499:         field = tvb_get_guintvar(tvb, offset, byte_count, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513: static guint",
          "515: {",
          "516:     guint        field;",
          "517:     guint        length;",
          "",
          "[Removed Lines]",
          "514: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval)",
          "",
          "[Added Lines]",
          "518: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:     field = tvb_get_guint8(tvb, offset);",
          "522:     if (field < 32) {",
          "524:         if (length < 2) {",
          "526:         } else {",
          "",
          "[Removed Lines]",
          "523:         length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "527:         length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "772:                     }",
          "773:                     break;",
          "776:                     if (tree) {",
          "777:                         proto_tree_add_string(mmse_tree, hf_mmse_bcc, tvb,",
          "778:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "775:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "779:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "780:                     offset += length;",
          "781:                     break;",
          "784:                     if (tree) {",
          "785:                         proto_tree_add_string(mmse_tree, hf_mmse_cc, tvb,",
          "786:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "783:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "787:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "794:                         if (length == 0x1F) {",
          "795:                             guint length_len = 0;",
          "796:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "798:                             length += 1 + length_len;",
          "799:                         } else {",
          "800:                             length += 1;",
          "",
          "[Removed Lines]",
          "797:                                     &length_len);",
          "",
          "[Added Lines]",
          "801:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "843:                     field = tvb_get_guint8(tvb, offset + count);",
          "844:                     if (tree) {",
          "845:                         guint            tval;",
          "",
          "[Removed Lines]",
          "842:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "846:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "872:                     field = tvb_get_guint8(tvb, offset + count);",
          "873:                     if (tree) {",
          "874:                         guint            tval;",
          "",
          "[Removed Lines]",
          "871:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "875:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "899:                     if (tree) {",
          "900:                         field = tvb_get_guint8(tvb, offset + count);",
          "901:                         if (field == 0x81) {",
          "",
          "[Removed Lines]",
          "898:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "902:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "904:                                     \"<insert address>\");",
          "905:                         } else {",
          "906:                             (void) get_encoded_strval(tvb, offset + count + 1,",
          "908:                             proto_tree_add_string(mmse_tree, hf_mmse_from, tvb,",
          "909:                                     offset-1, length + count + 1, strval);",
          "910:                         }",
          "",
          "[Removed Lines]",
          "907:                                                       &strval);",
          "",
          "[Added Lines]",
          "911:                                                       &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "990:                         if (length == 0x1F) {",
          "991:                             guint length_len = 0;",
          "992:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "994:                             length += 1 + length_len;",
          "995:                         } else {",
          "996:                             length += 1;",
          "",
          "[Removed Lines]",
          "993:                                     &length_len);",
          "",
          "[Added Lines]",
          "997:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1002:                                     \"<Undecoded value for m-mbox-delete-conf>\");",
          "1003:                         }",
          "1004:                     } else {",
          "1006:                         if (tree) {",
          "1007:                             proto_tree_add_string(mmse_tree,",
          "1008:                                     hf_mmse_response_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1005:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1009:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1026:                     }",
          "1027:                     break;",
          "1030:                     if (tree) {",
          "1031:                         proto_tree_add_string(mmse_tree, hf_mmse_subject, tvb,",
          "1032:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1029:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1033:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1034:                     offset += length;",
          "1035:                     break;",
          "1038:                     if (tree) {",
          "1039:                         proto_tree_add_string(mmse_tree, hf_mmse_to, tvb,",
          "1040:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1037:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1041:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1059:                         if (length == 0x1F) {",
          "1060:                             guint length_len = 0;",
          "1061:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "1063:                             length += 1 + length_len;",
          "1064:                         } else {",
          "1065:                             length += 1;",
          "",
          "[Removed Lines]",
          "1062:                                     &length_len);",
          "",
          "[Added Lines]",
          "1066:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1072:                         }",
          "1073:                     } else {",
          "1076:                         if (tree) {",
          "1077:                             proto_tree_add_string(mmse_tree,",
          "1078:                                     hf_mmse_retrieve_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1075:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1079:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1104:                     field = tvb_get_guint8(tvb, offset + count);",
          "1105:                     if (tree) {",
          "1106:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1103:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1107:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1142:                     break;",
          "1143:                 case MM_PREV_SENT_BY_HDR:",
          "1146:                     if (tree) {",
          "1147:                         guint32 fwd_count, count1, count2;",
          "1148:                         proto_tree *subtree = NULL;",
          "",
          "[Removed Lines]",
          "1145:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1149:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1152:                             &count1);",
          "1154:                         count2 = get_encoded_strval(tvb,",
          "1157:                         tii = proto_tree_add_string_format(mmse_tree,",
          "1158:                                 hf_mmse_prev_sent_by,",
          "",
          "[Removed Lines]",
          "1155:                                 offset + count + count1, &strval);",
          "",
          "[Added Lines]",
          "1159:                                 offset + count + count1, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1173:                     break;",
          "1174:                 case MM_PREV_SENT_DATE_HDR:",
          "1177:                     if (tree) {",
          "1178:                         guint32 fwd_count, count1, count2;",
          "1179:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1176:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1180:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1241:                                 guint length_len = 0;",
          "1242:                                 length = 1 + tvb_get_guintvar(tvb, offset + 1,",
          "1244:                                 length += length_len;",
          "1246:                                 length = 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "1243:                                         &length_len);",
          "",
          "[Added Lines]",
          "1247:                                         &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1645:         &ett_mmse_hdr_details,",
          "1646:     };",
          "1649:     proto_mmse = proto_register_protocol(\"MMS Message Encapsulation\",",
          "1650:                                          \"MMSE\", \"mmse\");",
          "1653:     proto_register_field_array(proto_mmse, hf, array_length(hf));",
          "1654:     proto_register_subtree_array(ett, array_length(ett));",
          "1655: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1652:     static ei_register_info ei[] = {",
          "1653:         { &ei_mmse_oversized_uintvar, { \"mmse.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "1654:     };",
          "1656:     expert_module_t* expert_mmse;",
          "1666:     expert_mmse = expert_register_protocol(proto_mmse);",
          "1667:     expert_register_field_array(expert_mmse, ei, array_length(ei));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c": [
          "File: epan/dissectors/packet-wap.c -> epan/dissectors/packet-wap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: guint",
          "42: {",
          "43:     guint value   = 0;",
          "44:     guint octet;",
          "",
          "[Removed Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount)",
          "",
          "[Added Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount, packet_info *pinfo, expert_field *ei)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #endif",
          "71:     }",
          "73:     if (octetCount != NULL)",
          "74:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     if (counter > 5) {",
          "74:         proto_tree_add_expert(NULL, pinfo, ei, tvb, offset, counter);",
          "75:         value = 0;",
          "76:     }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h": [
          "File: epan/dissectors/packet-wap.h -> epan/dissectors/packet-wap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <glib.h>",
          "32: #include <epan/packet.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: extern value_string_ext wap_mib_enum_vals_character_sets_ext;",
          "",
          "[Removed Lines]",
          "72: guint tvb_get_guintvar (tvbuff_t *, guint , guint *);",
          "",
          "[Added Lines]",
          "73: guint tvb_get_guintvar (tvbuff_t *, guint , guint *, packet_info *, expert_field *);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
          "176: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "177: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "180: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270: static char *",
          "271: default_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "273: {",
          "275:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "277:  return str;",
          "",
          "[Removed Lines]",
          "267: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *);",
          "268: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *);",
          "272:      guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "274:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "268: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *, packet_info *);",
          "269: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *, packet_info *);",
          "273:      guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "275:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280: static char *",
          "281: default_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "283: {",
          "285:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "287:  return str;",
          "",
          "[Removed Lines]",
          "282:       const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "284:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "283:       const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "285:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290: static char *",
          "291: default_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "293: {",
          "295:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "297:  return str;",
          "",
          "[Removed Lines]",
          "292:       guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "294:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "293:       guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "295:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300: static char *",
          "301: default_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "303: {",
          "305:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "307:  return str;",
          "",
          "[Removed Lines]",
          "302:        const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "304:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "303:        const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "305:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443: static char *",
          "444: wv_csp10_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "446: {",
          "448:  char *str = NULL;",
          "450:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "445:       guint8 token, guint8 codepage, guint32 *length)",
          "447:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "446:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "448:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506: static char *",
          "507: wv_csp10_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "509: {",
          "511:  char *str = NULL;",
          "513:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "508:        const char *token, guint8 codepage _U_, guint32 *length)",
          "510:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "509:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "511:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "541: static char *",
          "542: wv_csp11_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "544: {",
          "546:  char *str = NULL;",
          "548:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "543:       guint8 token, guint8 codepage, guint32 *length)",
          "545:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "544:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "546:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "613: static char *",
          "614: wv_csp11_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "616: {",
          "618:  char *str = NULL;",
          "620:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "615:        const char *token, guint8 codepage _U_, guint32 *length)",
          "617:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "616:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "618:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "650: static char *",
          "651: wv_csp12_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "653: {",
          "655:  char *str = NULL;",
          "657:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "652:       guint8 token, guint8 codepage, guint32 *length)",
          "654:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "653:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "655:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "733: static char *",
          "734: wv_csp12_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "736: {",
          "738:  char *str = NULL;",
          "740:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "735:        const char *token, guint8 codepage _U_, guint32 *length)",
          "737:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "736:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "738:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "771: static char *",
          "772: wv_csp13_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "774: {",
          "776:  char *str = NULL;",
          "778:  switch (codepage)",
          "",
          "[Removed Lines]",
          "773:       guint8 token, guint8 codepage, guint32 *length)",
          "775:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "774:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "776:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "910: static char *",
          "911: wv_csp13_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "913: {",
          "915:  char *str = NULL;",
          "917:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "912:        const char *token, guint8 codepage _U_, guint32 *length)",
          "914:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "913:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "915:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "968: static char *",
          "969: sic10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "971: {",
          "973:  char *str = NULL;",
          "975:  if ( token && ( (strcmp(token, \"created\") == 0)",
          "",
          "[Removed Lines]",
          "970:      const char *token, guint8 codepage _U_, guint32 *length)",
          "972:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "971:      const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "973:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "988: static char *",
          "989: sic10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "991: {",
          "993:  char *str = NULL;",
          "995:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "990:     guint8 token, guint8 codepage, guint32 *length)",
          "992:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "991:     guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "993:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1018: static char *",
          "1019: emnc10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "1021: {",
          "1023:  char *str = NULL;",
          "1025:  if ( token && (strcmp(token, \"timestamp\") == 0) )",
          "",
          "[Removed Lines]",
          "1020:       const char *token, guint8 codepage _U_, guint32 *length)",
          "1022:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1021:       const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "1023:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1037: static char *",
          "1038: emnc10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "1040: {",
          "1042:  char *str = NULL;",
          "1044:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "1039:      guint8 token, guint8 codepage, guint32 *length)",
          "1041:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1040:      guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "1042:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7049: static guint32",
          "7051:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "7052:         const wbxml_decoding *map)",
          "7053: {",
          "",
          "[Removed Lines]",
          "7050: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "",
          "[Added Lines]",
          "7051: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7088:       level, off - offset));",
          "7089:    return (off - offset);",
          "7092:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7093:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7094:           level, *codepage_attr, Indent (level), ent);",
          "",
          "[Removed Lines]",
          "7091:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7092:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7110:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7111:    attr_save_known = 0;",
          "7112:    attr_save_literal = tvb_format_text (tvb,",
          "",
          "[Removed Lines]",
          "7109:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7110:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7138:    {",
          "7139:     char *s;",
          "7140:     if (map != NULL) {",
          "",
          "[Removed Lines]",
          "7137:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7138:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7155:    off += 1+len;",
          "7156:    break;",
          "7159:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7160:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7161:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7158:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7159:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7182:       if (map->opaque_binary_attr) {",
          "7183:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
          "7185:       } else {",
          "7186:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
          "7188:       }",
          "7190:       if (map->opaque_literal_tag) {",
          "7191:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
          "7193:       } else {",
          "7194:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
          "7196:       }",
          "7197:      }",
          "7198:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7184:                attr_save_known, *codepage_attr, &len);",
          "7187:            attr_save_known, *codepage_attr, &len);",
          "7192:                 attr_save_literal, *codepage_attr, &len);",
          "7195:             attr_save_literal, *codepage_attr, &len);",
          "",
          "[Added Lines]",
          "7185:                attr_save_known, *codepage_attr, &len, pinfo);",
          "7188:            attr_save_known, *codepage_attr, &len, pinfo);",
          "7193:                 attr_save_literal, *codepage_attr, &len, pinfo);",
          "7196:             attr_save_literal, *codepage_attr, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7200:             level, *codepage_attr, Indent (level), tmp_str);",
          "7201:      off += 1 + len;",
          "7202:     } else {",
          "7204:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7205:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7206:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7203:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7204:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7284: static guint32",
          "7286:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "7287:     const wbxml_decoding *map)",
          "7288: {",
          "",
          "[Removed Lines]",
          "7285: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "",
          "[Added Lines]",
          "7286: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7336:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
          "7337:    return (off - offset);",
          "7340:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7341:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
          "",
          "[Removed Lines]",
          "7339:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7340:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7369:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
          "7370:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
          "7373:           str_tbl, *level, codepage_attr, map);",
          "7375:    off += len;",
          "",
          "[Removed Lines]",
          "7372:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
          "",
          "[Added Lines]",
          "7373:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7392:    {",
          "7393:     char *s;",
          "7394:     if (map)",
          "",
          "[Removed Lines]",
          "7391:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7392:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7410:    off += 1+len;",
          "7411:    break;",
          "7414:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7415:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7416:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7413:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7414:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7437:       if (map->opaque_binary_tag) {",
          "7438:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
          "7440:       } else {",
          "7441:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
          "7443:       }",
          "7445:       if (map->opaque_literal_tag) {",
          "7446:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
          "7448:       } else {",
          "7449:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
          "7451:       }",
          "7452:      }",
          "7453:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7439:                tag_save_known, *codepage_stag, &len);",
          "7442:            tag_save_known, *codepage_stag, &len);",
          "7447:                 tag_save_literal, *codepage_stag, &len);",
          "7450:             tag_save_literal, *codepage_stag, &len);",
          "",
          "[Added Lines]",
          "7440:                tag_save_known, *codepage_stag, &len, pinfo);",
          "7443:            tag_save_known, *codepage_stag, &len, pinfo);",
          "7448:                 tag_save_literal, *codepage_stag, &len, pinfo);",
          "7451:             tag_save_literal, *codepage_stag, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7456:      off += 1 + len;",
          "7457:     } else {",
          "7459:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7460:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "",
          "[Removed Lines]",
          "7458:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7459:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7491:    tag_len = 0;",
          "7493:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));",
          "7495:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7496:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
          "",
          "[Removed Lines]",
          "7494:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
          "",
          "[Added Lines]",
          "7495:     idx = tvb_get_guintvar (tvb, off+1, &tag_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7521:      (*level)++;",
          "7523:                level, codepage_stag, codepage_attr, map);",
          "7524:      off += len;",
          "",
          "[Removed Lines]",
          "7522:      len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,",
          "",
          "[Added Lines]",
          "7523:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7548:        off += 1 + tag_len;",
          "7549:       }",
          "7551:              off, str_tbl, *level, codepage_attr, map);",
          "7553:       off += len;",
          "",
          "[Removed Lines]",
          "7550:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7551:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "7596:              Indent (*level), tag_new_literal);",
          "7598:       off++;",
          "7600:              off, str_tbl, *level, codepage_attr, map);",
          "7602:       off += len;",
          "",
          "[Removed Lines]",
          "7599:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7600:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "7615:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
          "7617:       off += 1 + tag_len;",
          "7619:              off, str_tbl, *level, codepage_attr, map);",
          "7621:       off += len;",
          "",
          "[Removed Lines]",
          "7618:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7619:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "7722:  if (! publicid) {",
          "7725:   publicid_len += len;",
          "7726:  }",
          "7727:  offset = 1 + publicid_len;",
          "",
          "[Removed Lines]",
          "7721:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
          "7724:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
          "",
          "[Added Lines]",
          "7722:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7725:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7740:   offset += charset_len;",
          "7741:   break;",
          "",
          "[Removed Lines]",
          "7739:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
          "",
          "[Added Lines]",
          "7740:   charset = tvb_get_guintvar (tvb, offset, &charset_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7746:  }",
          "",
          "[Removed Lines]",
          "7749:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
          "",
          "[Added Lines]",
          "7750:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7794:   offset += charset_len;",
          "7795:  }",
          "",
          "[Removed Lines]",
          "7797:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
          "",
          "[Added Lines]",
          "7798:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7854:  len = parse_wbxml_tag_defined (tag_tree,",
          "7856:        &codepage_attr, content_map);",
          "7857: }",
          "",
          "[Removed Lines]",
          "7855:        tvb, offset, str_tbl, &level, &codepage_stag,",
          "",
          "[Added Lines]",
          "7856:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "8099:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8100:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8101:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8102:  };",
          "8104:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8103:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
          "378: static expert_field ei_wsp_trailing_quote = EI_INIT;",
          "379: static expert_field ei_wsp_header_invalid = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: static expert_field ei_wsp_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288: #define is_uri_value(x)             is_text_string(x)",
          "1290: #define get_uintvar_integer(val,tvb,start,len,ok) \\",
          "1292:     if (len>5) ok = FALSE; else ok = TRUE;",
          "1293: #define get_short_integer(val,tvb,start,len,ok) \\",
          "1294:     val = tvb_get_guint8(tvb,start); \\",
          "",
          "[Removed Lines]",
          "1291:     val = tvb_get_guintvar(tvb,start,&len); \\",
          "",
          "[Added Lines]",
          "1292:     val = tvb_get_guintvar(tvb,start,&len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1436:     } else { /* val_start points to 1st byte of length field */ \\",
          "1437:         if (val_id == 0x1F) { /* Value Length = guintvar */ \\",
          "1439:             val_len_len++; /* 0x1F length indicator byte */ \\",
          "1440:         } else { /* Short length followed by Len data octets */ \\",
          "1441:             val_len = tvb_get_guint8(tvb, offset); \\",
          "",
          "[Removed Lines]",
          "1438:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len); \\",
          "",
          "[Added Lines]",
          "1439:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4521:             tvb, 0, 1, version);",
          "4525:     proto_tree_add_uint(subtree, hf_sir_app_id_list_len,",
          "4526:             tvb, 1, len, val_len);",
          "4527:     offset = 1 + len;",
          "",
          "[Removed Lines]",
          "4524:     val_len = tvb_get_guintvar(tvb, 1, &len);",
          "",
          "[Added Lines]",
          "4525:     val_len = tvb_get_guintvar(tvb, 1, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4531:     offset += val_len;",
          "4535:     proto_tree_add_uint(subtree, hf_sir_wsp_contact_points_len,",
          "4536:             tvb, offset, len, val_len);",
          "4537:     offset += len;",
          "",
          "[Removed Lines]",
          "4534:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4535:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4546:     offset += val_len;",
          "4550:     proto_tree_add_uint(subtree, hf_sir_contact_points_len,",
          "4551:             tvb, offset, len, val_len);",
          "4552:     offset += len;",
          "",
          "[Removed Lines]",
          "4549:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4550:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4557:     offset += val_len;",
          "4561:     proto_tree_add_uint(subtree, hf_sir_protocol_options_len,",
          "4562:             tvb, offset, len, val_len);",
          "4563:     offset += len;",
          "",
          "[Removed Lines]",
          "4560:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4561:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4567:     val_len_save = val_len;",
          "4568:     for (i = 0; i < val_len_save; i++) {",
          "4570:         proto_tree_add_uint(subtree, hf_sir_protocol_options,",
          "4571:                 tvb, offset, len, val_len);",
          "4572:         offset += len;",
          "4573:     }",
          "4577:     proto_tree_add_uint(subtree, hf_sir_prov_url_len,",
          "4578:             tvb, offset, len, val_len);",
          "4579:     offset += len;",
          "",
          "[Removed Lines]",
          "4569:         val_len = tvb_get_guintvar(tvb, offset, &len);",
          "4576:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4570:         val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "4577:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4583:     offset += val_len;",
          "4587:     proto_tree_add_uint(subtree, hf_sir_cpi_tag_len,",
          "4588:             tvb, offset, len, val_len);",
          "4589:     offset += len;",
          "",
          "[Removed Lines]",
          "4586:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4587:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4697:                 offset++;",
          "4698:             } else {",
          "4701:                 proto_tree_add_uint (wsp_tree,",
          "4702:                         hf_wsp_server_session_id,",
          "4703:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4700:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4701:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4705:                 offset += count;",
          "4706:             }",
          "4709:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "4710:                     tvb, offset, count, capabilityLength);",
          "4711:             offset += count;",
          "",
          "[Removed Lines]",
          "4708:             capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4709:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4713:             if (pdut != WSP_PDU_RESUME)",
          "4714:             {",
          "4717:                 proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "4718:                         tvb, offset, count, headerLength);",
          "4719:                 offset += count;",
          "",
          "[Removed Lines]",
          "4716:                 headerLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4717:                 headerLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4750:         case WSP_PDU_SUSPEND:",
          "4751:             if (tree) {",
          "4754:                 proto_tree_add_uint (wsp_tree,",
          "4755:                         hf_wsp_server_session_id,",
          "4756:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4753:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4754:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4765:         case WSP_PDU_TRACE:",
          "4769:             nextOffset = offset + count;",
          "4770:             add_uri (wsp_tree, pinfo, tvb, offset, nextOffset, proto_ti);",
          "4771:             if (tree) {",
          "",
          "[Removed Lines]",
          "4768:             value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4769:             value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4779:         case WSP_PDU_PUT:",
          "4780:             uriStart = offset;",
          "4783:             headerStart = uriStart+count;",
          "4786:             offset = headerStart + count;",
          "4788:             add_uri (wsp_tree, pinfo, tvb, uriStart, offset, proto_ti);",
          "",
          "[Removed Lines]",
          "4782:             uriLength = tvb_get_guintvar (tvb, offset, &count);",
          "4785:             headersLength = tvb_get_guintvar (tvb, headerStart, &count);",
          "",
          "[Added Lines]",
          "4783:             uriLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "4786:             headersLength = tvb_get_guintvar (tvb, headerStart, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4861:         case WSP_PDU_REPLY:",
          "4864:             headerStart = offset + count + 1;",
          "4865:             {",
          "4866:                 guint8 reply_status = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "4863:             headersLength = tvb_get_guintvar (tvb, offset+1, &count);",
          "",
          "[Added Lines]",
          "4864:             headersLength = tvb_get_guintvar (tvb, offset+1, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4951:         case WSP_PDU_PUSH:",
          "4952:         case WSP_PDU_CONFIRMEDPUSH:",
          "4955:             headerStart = offset + count;",
          "4957:             proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "",
          "[Removed Lines]",
          "4954:             headersLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4955:             headersLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5083:         guint URILenOffset, guint URIOffset, proto_item *proto_ti)",
          "5084: {",
          "5085:     guint  count  = 0;",
          "5087:     gchar *str;",
          "5089:     proto_tree_add_uint (tree, hf_wsp_header_uri_len,",
          "",
          "[Removed Lines]",
          "5086:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count);",
          "",
          "[Added Lines]",
          "5087:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5175:         capaLen = capaValueLen + len;",
          "5177:         cap_subtree = proto_tree_add_subtree(wsp_capabilities, tvb, offset, capaLen, ett_capabilities_entry, &cap_item, \"Capability\");",
          "",
          "[Removed Lines]",
          "5174:         capaValueLen = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5175:         capaValueLen = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5233:         switch (peek) {",
          "5234:             case WSP_CAPA_CLIENT_SDU_SIZE:",
          "5236:                 proto_tree_add_uint(cap_subtree, hf_capa_client_sdu_size,",
          "5237:                         tvb, offset, len, value);",
          "5238:                 break;",
          "5239:             case WSP_CAPA_SERVER_SDU_SIZE:",
          "5241:                 proto_tree_add_uint(cap_subtree, hf_capa_server_sdu_size,",
          "5242:                         tvb, offset, len, value);",
          "5243:                 break;",
          "",
          "[Removed Lines]",
          "5235:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5240:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5236:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5241:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5340:                         tvb, capaStart, capaLen, ENC_NA);",
          "5341:                 break;",
          "5342:             case WSP_CAPA_CLIENT_MESSAGE_SIZE:",
          "5344:                 proto_tree_add_uint(cap_subtree, hf_capa_client_message_size,",
          "5345:                         tvb, offset, len, value);",
          "5346:                 break;",
          "5347:             case WSP_CAPA_SERVER_MESSAGE_SIZE:",
          "5349:                 proto_tree_add_uint(cap_subtree, hf_capa_server_message_size,",
          "5350:                         tvb, offset, len, value);",
          "5351:                 break;",
          "",
          "[Removed Lines]",
          "5343:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5348:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5344:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5349:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5478:     heur_dtbl_entry_t       *hdtbl_entry;",
          "5481:     offset += count;",
          "5482:     if (nEntries)",
          "5483:     {",
          "",
          "[Removed Lines]",
          "5480:     nEntries = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5481:     nEntries = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5487:     while (nEntries--)",
          "5488:     {",
          "5489:         part_start = offset;",
          "5491:         offset += count;",
          "5493:         offset += count;",
          "5495:         ti = proto_tree_add_uint(sub_tree, hf_wsp_mpart, tvb, part_start,",
          "",
          "[Removed Lines]",
          "5490:         HeadersLen = tvb_get_guintvar (tvb, offset, &count);",
          "5492:         DataLen = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5491:         HeadersLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "5493:         DataLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7145:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "7146:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
          "7147:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
          "7148:     };",
          "7150:     expert_module_t* expert_wsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7149:       { &ei_wsp_oversized_uintvar, { \"wsp.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a55b2daa7cde40b2c6c94255e1fd7c2a6e239ce",
      "candidate_info": {
        "commit_hash": "8a55b2daa7cde40b2c6c94255e1fd7c2a6e239ce",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8a55b2daa7cde40b2c6c94255e1fd7c2a6e239ce",
        "files": [
          "epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "WAP: check that tvb_get_guintvar does not overflow\n\nBug: 12661\nChange-Id: I2ef857d6be6595fd89f3dbb8d41c1c70d550ad93\nReviewed-on: https://code.wireshark.org/review/16665\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 2193bea3212d74e2a907152055e27d409b59485e)\nReviewed-on: https://code.wireshark.org/review/16683\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
            "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
            "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
            "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
            "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c": [
          "File: epan/dissectors/packet-mmse.c -> epan/dissectors/packet-mmse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <epan/packet.h>",
          "38: #include <epan/to_str.h>",
          "39: #include <epan/strutil.h>",
          "40: #include \"packet-wap.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: static gint ett_mmse                    = -1;",
          "249: static gint ett_mmse_hdr_details        = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: static expert_field ei_mmse_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486: static guint",
          "488: {",
          "489:     guint        field;",
          "",
          "[Removed Lines]",
          "487: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count)",
          "",
          "[Added Lines]",
          "491: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492:     if (field < 31)",
          "496:         (*byte_count)++;",
          "497:     }",
          "498:     return field;",
          "",
          "[Removed Lines]",
          "495:         field = tvb_get_guintvar(tvb, offset, byte_count);",
          "",
          "[Added Lines]",
          "499:         field = tvb_get_guintvar(tvb, offset, byte_count, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513: static guint",
          "515: {",
          "516:     guint        field;",
          "517:     guint        length;",
          "",
          "[Removed Lines]",
          "514: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval)",
          "",
          "[Added Lines]",
          "518: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:     field = tvb_get_guint8(tvb, offset);",
          "522:     if (field < 32) {",
          "524:         if (length < 2) {",
          "526:         } else {",
          "",
          "[Removed Lines]",
          "523:         length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "527:         length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "774:                     }",
          "775:                     break;",
          "778:                     if (tree) {",
          "779:                         proto_tree_add_string(mmse_tree, hf_mmse_bcc, tvb,",
          "780:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "777:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "781:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "782:                     offset += length;",
          "783:                     break;",
          "786:                     if (tree) {",
          "787:                         proto_tree_add_string(mmse_tree, hf_mmse_cc, tvb,",
          "788:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "785:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "789:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "796:                         if (length == 0x1F) {",
          "797:                             guint length_len = 0;",
          "798:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "800:                             length += 1 + length_len;",
          "801:                         } else {",
          "802:                             length += 1;",
          "",
          "[Removed Lines]",
          "799:                                     &length_len);",
          "",
          "[Added Lines]",
          "803:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "845:                     field = tvb_get_guint8(tvb, offset + count);",
          "846:                     if (tree) {",
          "847:                         guint            tval;",
          "",
          "[Removed Lines]",
          "844:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "848:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "874:                     field = tvb_get_guint8(tvb, offset + count);",
          "875:                     if (tree) {",
          "876:                         guint            tval;",
          "",
          "[Removed Lines]",
          "873:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "877:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "901:                     if (tree) {",
          "902:                         field = tvb_get_guint8(tvb, offset + count);",
          "903:                         if (field == 0x81) {",
          "",
          "[Removed Lines]",
          "900:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "904:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "906:                                     \"<insert address>\");",
          "907:                         } else {",
          "908:                             (void) get_encoded_strval(tvb, offset + count + 1,",
          "910:                             proto_tree_add_string(mmse_tree, hf_mmse_from, tvb,",
          "911:                                     offset-1, length + count + 1, strval);",
          "912:                         }",
          "",
          "[Removed Lines]",
          "909:                                                       &strval);",
          "",
          "[Added Lines]",
          "913:                                                       &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "992:                         if (length == 0x1F) {",
          "993:                             guint length_len = 0;",
          "994:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "996:                             length += 1 + length_len;",
          "997:                         } else {",
          "998:                             length += 1;",
          "",
          "[Removed Lines]",
          "995:                                     &length_len);",
          "",
          "[Added Lines]",
          "999:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1004:                                     \"<Undecoded value for m-mbox-delete-conf>\");",
          "1005:                         }",
          "1006:                     } else {",
          "1008:                         if (tree) {",
          "1009:                             proto_tree_add_string(mmse_tree,",
          "1010:                                     hf_mmse_response_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1007:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1011:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1028:                     }",
          "1029:                     break;",
          "1032:                     if (tree) {",
          "1033:                         proto_tree_add_string(mmse_tree, hf_mmse_subject, tvb,",
          "1034:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1031:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1035:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1036:                     offset += length;",
          "1037:                     break;",
          "1040:                     if (tree) {",
          "1041:                         proto_tree_add_string(mmse_tree, hf_mmse_to, tvb,",
          "1042:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1039:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1043:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1061:                         if (length == 0x1F) {",
          "1062:                             guint length_len = 0;",
          "1063:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "1065:                             length += 1 + length_len;",
          "1066:                         } else {",
          "1067:                             length += 1;",
          "",
          "[Removed Lines]",
          "1064:                                     &length_len);",
          "",
          "[Added Lines]",
          "1068:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1074:                         }",
          "1075:                     } else {",
          "1078:                         if (tree) {",
          "1079:                             proto_tree_add_string(mmse_tree,",
          "1080:                                     hf_mmse_retrieve_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1077:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1081:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1106:                     field = tvb_get_guint8(tvb, offset + count);",
          "1107:                     if (tree) {",
          "1108:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1105:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1109:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1144:                     break;",
          "1145:                 case MM_PREV_SENT_BY_HDR:",
          "1148:                     if (tree) {",
          "1149:                         guint32 fwd_count, count1, count2;",
          "1150:                         proto_tree *subtree = NULL;",
          "",
          "[Removed Lines]",
          "1147:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1151:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1154:                             &count1);",
          "1156:                         count2 = get_encoded_strval(tvb,",
          "1159:                         tii = proto_tree_add_string_format(mmse_tree,",
          "1160:                                 hf_mmse_prev_sent_by,",
          "",
          "[Removed Lines]",
          "1157:                                 offset + count + count1, &strval);",
          "",
          "[Added Lines]",
          "1161:                                 offset + count + count1, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1175:                     break;",
          "1176:                 case MM_PREV_SENT_DATE_HDR:",
          "1179:                     if (tree) {",
          "1180:                         guint32 fwd_count, count1, count2;",
          "1181:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1178:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1182:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1243:                                 guint length_len = 0;",
          "1244:                                 length = 1 + tvb_get_guintvar(tvb, offset + 1,",
          "1246:                                 length += length_len;",
          "1248:                                 length = 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "1245:                                         &length_len);",
          "",
          "[Added Lines]",
          "1249:                                         &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1647:         &ett_mmse_hdr_details,",
          "1648:     };",
          "1651:     proto_mmse = proto_register_protocol(\"MMS Message Encapsulation\",",
          "1652:                                          \"MMSE\", \"mmse\");",
          "1655:     proto_register_field_array(proto_mmse, hf, array_length(hf));",
          "1656:     proto_register_subtree_array(ett, array_length(ett));",
          "1657: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1654:     static ei_register_info ei[] = {",
          "1655:         { &ei_mmse_oversized_uintvar, { \"mmse.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "1656:     };",
          "1658:     expert_module_t* expert_mmse;",
          "1668:     expert_mmse = expert_register_protocol(proto_mmse);",
          "1669:     expert_register_field_array(expert_mmse, ei, array_length(ei));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c": [
          "File: epan/dissectors/packet-wap.c -> epan/dissectors/packet-wap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: guint",
          "42: {",
          "43:     guint value   = 0;",
          "44:     guint octet;",
          "",
          "[Removed Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount)",
          "",
          "[Added Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount, packet_info *pinfo, expert_field *ei)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #endif",
          "71:     }",
          "73:     if (octetCount != NULL)",
          "74:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     if (counter > 5) {",
          "74:         proto_tree_add_expert(NULL, pinfo, ei, tvb, offset, counter);",
          "75:         value = 0;",
          "76:     }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h": [
          "File: epan/dissectors/packet-wap.h -> epan/dissectors/packet-wap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <glib.h>",
          "32: #include <epan/packet.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "72: guint tvb_get_guintvar (tvbuff_t *, guint , guint *);",
          "",
          "[Added Lines]",
          "73: guint tvb_get_guintvar (tvbuff_t *, guint , guint *, packet_info *, expert_field *);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
          "178: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "179: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "182: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272: static char *",
          "273: default_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "275: {",
          "277:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "279:  return str;",
          "",
          "[Removed Lines]",
          "269: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *);",
          "270: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *);",
          "274:      guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "276:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "270: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *, packet_info *);",
          "271: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *, packet_info *);",
          "275:      guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "277:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282: static char *",
          "283: default_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "285: {",
          "287:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "289:  return str;",
          "",
          "[Removed Lines]",
          "284:       const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "286:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "285:       const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "287:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292: static char *",
          "293: default_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "295: {",
          "297:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "299:  return str;",
          "",
          "[Removed Lines]",
          "294:       guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "296:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "295:       guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "297:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302: static char *",
          "303: default_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "305: {",
          "307:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "309:  return str;",
          "",
          "[Removed Lines]",
          "304:        const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "306:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "305:        const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "307:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "445: static char *",
          "446: wv_csp10_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "448: {",
          "450:  char *str = NULL;",
          "452:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "447:       guint8 token, guint8 codepage, guint32 *length)",
          "449:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "448:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "450:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "508: static char *",
          "509: wv_csp10_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "511: {",
          "513:  char *str = NULL;",
          "515:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "510:        const char *token, guint8 codepage _U_, guint32 *length)",
          "512:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "511:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "513:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "543: static char *",
          "544: wv_csp11_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "546: {",
          "548:  char *str = NULL;",
          "550:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "545:       guint8 token, guint8 codepage, guint32 *length)",
          "547:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "546:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "548:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "615: static char *",
          "616: wv_csp11_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "618: {",
          "620:  char *str = NULL;",
          "622:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "617:        const char *token, guint8 codepage _U_, guint32 *length)",
          "619:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "618:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "620:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652: static char *",
          "653: wv_csp12_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "655: {",
          "657:  char *str = NULL;",
          "659:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "654:       guint8 token, guint8 codepage, guint32 *length)",
          "656:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "655:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "657:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "735: static char *",
          "736: wv_csp12_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "738: {",
          "740:  char *str = NULL;",
          "742:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "737:        const char *token, guint8 codepage _U_, guint32 *length)",
          "739:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "738:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "740:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "773: static char *",
          "774: wv_csp13_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "776: {",
          "778:  char *str = NULL;",
          "780:  switch (codepage)",
          "",
          "[Removed Lines]",
          "775:       guint8 token, guint8 codepage, guint32 *length)",
          "777:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "776:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "778:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "912: static char *",
          "913: wv_csp13_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "915: {",
          "917:  char *str = NULL;",
          "919:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "914:        const char *token, guint8 codepage _U_, guint32 *length)",
          "916:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "915:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "917:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "970: static char *",
          "971: sic10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "973: {",
          "975:  char *str = NULL;",
          "977:  if ( token && ( (strcmp(token, \"created\") == 0)",
          "",
          "[Removed Lines]",
          "972:      const char *token, guint8 codepage _U_, guint32 *length)",
          "974:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "973:      const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "975:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "990: static char *",
          "991: sic10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "993: {",
          "995:  char *str = NULL;",
          "997:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "992:     guint8 token, guint8 codepage, guint32 *length)",
          "994:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "993:     guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "995:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1020: static char *",
          "1021: emnc10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "1023: {",
          "1025:  char *str = NULL;",
          "1027:  if ( token && (strcmp(token, \"timestamp\") == 0) )",
          "",
          "[Removed Lines]",
          "1022:       const char *token, guint8 codepage _U_, guint32 *length)",
          "1024:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1023:       const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "1025:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1039: static char *",
          "1040: emnc10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "1042: {",
          "1044:  char *str = NULL;",
          "1046:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "1041:      guint8 token, guint8 codepage, guint32 *length)",
          "1043:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1042:      guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "1044:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7052: static guint32",
          "7054:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "7055:         const wbxml_decoding *map)",
          "7056: {",
          "",
          "[Removed Lines]",
          "7053: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "",
          "[Added Lines]",
          "7054: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7091:       level, off - offset));",
          "7092:    return (off - offset);",
          "7095:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7096:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7097:           level, *codepage_attr, Indent (level), ent);",
          "",
          "[Removed Lines]",
          "7094:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7095:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7113:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7114:    attr_save_known = 0;",
          "7115:    attr_save_literal = tvb_format_text (tvb,",
          "",
          "[Removed Lines]",
          "7112:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7113:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7141:    {",
          "7142:     char *s;",
          "7143:     if (map != NULL) {",
          "",
          "[Removed Lines]",
          "7140:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7141:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7158:    off += 1+len;",
          "7159:    break;",
          "7162:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7163:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7164:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7161:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7162:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7185:       if (map->opaque_binary_attr) {",
          "7186:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
          "7188:       } else {",
          "7189:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
          "7191:       }",
          "7193:       if (map->opaque_literal_tag) {",
          "7194:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
          "7196:       } else {",
          "7197:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
          "7199:       }",
          "7200:      }",
          "7201:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7187:                attr_save_known, *codepage_attr, &len);",
          "7190:            attr_save_known, *codepage_attr, &len);",
          "7195:                 attr_save_literal, *codepage_attr, &len);",
          "7198:             attr_save_literal, *codepage_attr, &len);",
          "",
          "[Added Lines]",
          "7188:                attr_save_known, *codepage_attr, &len, pinfo);",
          "7191:            attr_save_known, *codepage_attr, &len, pinfo);",
          "7196:                 attr_save_literal, *codepage_attr, &len, pinfo);",
          "7199:             attr_save_literal, *codepage_attr, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7203:             level, *codepage_attr, Indent (level), tmp_str);",
          "7204:      off += 1 + len;",
          "7205:     } else {",
          "7207:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7208:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7209:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7206:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7207:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7287: static guint32",
          "7289:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "7290:     const wbxml_decoding *map)",
          "7291: {",
          "",
          "[Removed Lines]",
          "7288: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "",
          "[Added Lines]",
          "7289: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7339:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
          "7340:    return (off - offset);",
          "7343:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7344:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
          "",
          "[Removed Lines]",
          "7342:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7343:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7372:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
          "7373:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
          "7376:           str_tbl, *level, codepage_attr, map);",
          "7378:    off += len;",
          "",
          "[Removed Lines]",
          "7375:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
          "",
          "[Added Lines]",
          "7376:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7395:    {",
          "7396:     char *s;",
          "7397:     if (map)",
          "",
          "[Removed Lines]",
          "7394:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7395:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7413:    off += 1+len;",
          "7414:    break;",
          "7417:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7418:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7419:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7416:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7417:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7440:       if (map->opaque_binary_tag) {",
          "7441:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
          "7443:       } else {",
          "7444:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
          "7446:       }",
          "7448:       if (map->opaque_literal_tag) {",
          "7449:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
          "7451:       } else {",
          "7452:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
          "7454:       }",
          "7455:      }",
          "7456:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7442:                tag_save_known, *codepage_stag, &len);",
          "7445:            tag_save_known, *codepage_stag, &len);",
          "7450:                 tag_save_literal, *codepage_stag, &len);",
          "7453:             tag_save_literal, *codepage_stag, &len);",
          "",
          "[Added Lines]",
          "7443:                tag_save_known, *codepage_stag, &len, pinfo);",
          "7446:            tag_save_known, *codepage_stag, &len, pinfo);",
          "7451:                 tag_save_literal, *codepage_stag, &len, pinfo);",
          "7454:             tag_save_literal, *codepage_stag, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7459:      off += 1 + len;",
          "7460:     } else {",
          "7462:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7463:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "",
          "[Removed Lines]",
          "7461:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7462:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7494:    tag_len = 0;",
          "7496:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));",
          "7498:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7499:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
          "",
          "[Removed Lines]",
          "7497:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
          "",
          "[Added Lines]",
          "7498:     idx = tvb_get_guintvar (tvb, off+1, &tag_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7524:      (*level)++;",
          "7526:                level, codepage_stag, codepage_attr, map);",
          "7527:      off += len;",
          "",
          "[Removed Lines]",
          "7525:      len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,",
          "",
          "[Added Lines]",
          "7526:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7551:        off += 1 + tag_len;",
          "7552:       }",
          "7554:              off, str_tbl, *level, codepage_attr, map);",
          "7556:       off += len;",
          "",
          "[Removed Lines]",
          "7553:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7554:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "7599:              Indent (*level), tag_new_literal);",
          "7601:       off++;",
          "7603:              off, str_tbl, *level, codepage_attr, map);",
          "7605:       off += len;",
          "",
          "[Removed Lines]",
          "7602:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7603:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "7618:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
          "7620:       off += 1 + tag_len;",
          "7622:              off, str_tbl, *level, codepage_attr, map);",
          "7624:       off += len;",
          "",
          "[Removed Lines]",
          "7621:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7622:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "7725:  if (! publicid) {",
          "7728:   publicid_len += len;",
          "7729:  }",
          "7730:  offset = 1 + publicid_len;",
          "",
          "[Removed Lines]",
          "7724:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
          "7727:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
          "",
          "[Added Lines]",
          "7725:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7728:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7743:   offset += charset_len;",
          "7744:   break;",
          "",
          "[Removed Lines]",
          "7742:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
          "",
          "[Added Lines]",
          "7743:   charset = tvb_get_guintvar (tvb, offset, &charset_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7749:  }",
          "",
          "[Removed Lines]",
          "7752:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
          "",
          "[Added Lines]",
          "7753:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7797:   offset += charset_len;",
          "7798:  }",
          "",
          "[Removed Lines]",
          "7800:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
          "",
          "[Added Lines]",
          "7801:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7858:  len = parse_wbxml_tag_defined (tag_tree,",
          "7860:        &codepage_attr, content_map);",
          "7861: }",
          "",
          "[Removed Lines]",
          "7859:        tvb, offset, str_tbl, &level, &codepage_stag,",
          "",
          "[Added Lines]",
          "7860:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "8105:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8106:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8107:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8108:  };",
          "8110:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8109:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
          "381: static expert_field ei_wsp_trailing_quote = EI_INIT;",
          "382: static expert_field ei_wsp_header_invalid = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: static expert_field ei_wsp_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291: #define is_uri_value(x)             is_text_string(x)",
          "1293: #define get_uintvar_integer(val,tvb,start,len,ok) \\",
          "1295:     if (len>5) ok = FALSE; else ok = TRUE;",
          "1296: #define get_short_integer(val,tvb,start,len,ok) \\",
          "1297:     val = tvb_get_guint8(tvb,start); \\",
          "",
          "[Removed Lines]",
          "1294:     val = tvb_get_guintvar(tvb,start,&len); \\",
          "",
          "[Added Lines]",
          "1295:     val = tvb_get_guintvar(tvb,start,&len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1439:     } else { /* val_start points to 1st byte of length field */ \\",
          "1440:         if (val_id == 0x1F) { /* Value Length = guintvar */ \\",
          "1442:             val_len_len++; /* 0x1F length indicator byte */ \\",
          "1443:         } else { /* Short length followed by Len data octets */ \\",
          "1444:             val_len = tvb_get_guint8(tvb, offset); \\",
          "",
          "[Removed Lines]",
          "1441:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len); \\",
          "",
          "[Added Lines]",
          "1442:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4529:             tvb, 0, 1, version);",
          "4533:     proto_tree_add_uint(subtree, hf_sir_app_id_list_len,",
          "4534:             tvb, 1, len, val_len);",
          "4535:     offset = 1 + len;",
          "",
          "[Removed Lines]",
          "4532:     val_len = tvb_get_guintvar(tvb, 1, &len);",
          "",
          "[Added Lines]",
          "4533:     val_len = tvb_get_guintvar(tvb, 1, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4539:     offset += val_len;",
          "4543:     proto_tree_add_uint(subtree, hf_sir_wsp_contact_points_len,",
          "4544:             tvb, offset, len, val_len);",
          "4545:     offset += len;",
          "",
          "[Removed Lines]",
          "4542:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4543:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4554:     offset += val_len;",
          "4558:     proto_tree_add_uint(subtree, hf_sir_contact_points_len,",
          "4559:             tvb, offset, len, val_len);",
          "4560:     offset += len;",
          "",
          "[Removed Lines]",
          "4557:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4558:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4565:     offset += val_len;",
          "4569:     proto_tree_add_uint(subtree, hf_sir_protocol_options_len,",
          "4570:             tvb, offset, len, val_len);",
          "4571:     offset += len;",
          "",
          "[Removed Lines]",
          "4568:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4569:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4575:     val_len_save = val_len;",
          "4576:     for (i = 0; i < val_len_save; i++) {",
          "4578:         proto_tree_add_uint(subtree, hf_sir_protocol_options,",
          "4579:                 tvb, offset, len, val_len);",
          "4580:         offset += len;",
          "4581:     }",
          "4585:     proto_tree_add_uint(subtree, hf_sir_prov_url_len,",
          "4586:             tvb, offset, len, val_len);",
          "4587:     offset += len;",
          "",
          "[Removed Lines]",
          "4577:         val_len = tvb_get_guintvar(tvb, offset, &len);",
          "4584:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4578:         val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "4585:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4591:     offset += val_len;",
          "4595:     proto_tree_add_uint(subtree, hf_sir_cpi_tag_len,",
          "4596:             tvb, offset, len, val_len);",
          "4597:     offset += len;",
          "",
          "[Removed Lines]",
          "4594:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4595:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4706:                 offset++;",
          "4707:             } else {",
          "4710:                 proto_tree_add_uint (wsp_tree,",
          "4711:                         hf_wsp_server_session_id,",
          "4712:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4709:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4710:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4714:                 offset += count;",
          "4715:             }",
          "4718:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "4719:                     tvb, offset, count, capabilityLength);",
          "4720:             offset += count;",
          "",
          "[Removed Lines]",
          "4717:             capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4718:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4722:             if (pdut != WSP_PDU_RESUME)",
          "4723:             {",
          "4726:                 proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "4727:                         tvb, offset, count, headerLength);",
          "4728:                 offset += count;",
          "",
          "[Removed Lines]",
          "4725:                 headerLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4726:                 headerLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4759:         case WSP_PDU_SUSPEND:",
          "4760:             if (tree) {",
          "4763:                 proto_tree_add_uint (wsp_tree,",
          "4764:                         hf_wsp_server_session_id,",
          "4765:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4762:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4763:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4774:         case WSP_PDU_TRACE:",
          "4778:             nextOffset = offset + count;",
          "4779:             add_uri (wsp_tree, pinfo, tvb, offset, nextOffset, proto_ti);",
          "4780:             if (tree) {",
          "",
          "[Removed Lines]",
          "4777:             value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4778:             value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4788:         case WSP_PDU_PUT:",
          "4789:             uriStart = offset;",
          "4792:             headerStart = uriStart+count;",
          "4795:             offset = headerStart + count;",
          "4797:             add_uri (wsp_tree, pinfo, tvb, uriStart, offset, proto_ti);",
          "",
          "[Removed Lines]",
          "4791:             uriLength = tvb_get_guintvar (tvb, offset, &count);",
          "4794:             headersLength = tvb_get_guintvar (tvb, headerStart, &count);",
          "",
          "[Added Lines]",
          "4792:             uriLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "4795:             headersLength = tvb_get_guintvar (tvb, headerStart, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4870:         case WSP_PDU_REPLY:",
          "4873:             headerStart = offset + count + 1;",
          "4874:             {",
          "4875:                 guint8 reply_status = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "4872:             headersLength = tvb_get_guintvar (tvb, offset+1, &count);",
          "",
          "[Added Lines]",
          "4873:             headersLength = tvb_get_guintvar (tvb, offset+1, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4960:         case WSP_PDU_PUSH:",
          "4961:         case WSP_PDU_CONFIRMEDPUSH:",
          "4964:             headerStart = offset + count;",
          "4966:             proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "",
          "[Removed Lines]",
          "4963:             headersLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4964:             headersLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5095:         guint URILenOffset, guint URIOffset, proto_item *proto_ti)",
          "5096: {",
          "5097:     guint  count  = 0;",
          "5099:     gchar *str;",
          "5101:     proto_tree_add_uint (tree, hf_wsp_header_uri_len,",
          "",
          "[Removed Lines]",
          "5098:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count);",
          "",
          "[Added Lines]",
          "5099:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5187:         capaLen = capaValueLen + len;",
          "5189:         cap_subtree = proto_tree_add_subtree(wsp_capabilities, tvb, offset, capaLen, ett_capabilities_entry, &cap_item, \"Capability\");",
          "",
          "[Removed Lines]",
          "5186:         capaValueLen = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5187:         capaValueLen = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5245:         switch (peek) {",
          "5246:             case WSP_CAPA_CLIENT_SDU_SIZE:",
          "5248:                 proto_tree_add_uint(cap_subtree, hf_capa_client_sdu_size,",
          "5249:                         tvb, offset, len, value);",
          "5250:                 break;",
          "5251:             case WSP_CAPA_SERVER_SDU_SIZE:",
          "5253:                 proto_tree_add_uint(cap_subtree, hf_capa_server_sdu_size,",
          "5254:                         tvb, offset, len, value);",
          "5255:                 break;",
          "",
          "[Removed Lines]",
          "5247:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5252:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5248:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5253:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5352:                         tvb, capaStart, capaLen, ENC_NA);",
          "5353:                 break;",
          "5354:             case WSP_CAPA_CLIENT_MESSAGE_SIZE:",
          "5356:                 proto_tree_add_uint(cap_subtree, hf_capa_client_message_size,",
          "5357:                         tvb, offset, len, value);",
          "5358:                 break;",
          "5359:             case WSP_CAPA_SERVER_MESSAGE_SIZE:",
          "5361:                 proto_tree_add_uint(cap_subtree, hf_capa_server_message_size,",
          "5362:                         tvb, offset, len, value);",
          "5363:                 break;",
          "",
          "[Removed Lines]",
          "5355:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5360:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5356:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5361:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5490:     heur_dtbl_entry_t       *hdtbl_entry;",
          "5493:     offset += count;",
          "5494:     if (nEntries)",
          "5495:     {",
          "",
          "[Removed Lines]",
          "5492:     nEntries = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5493:     nEntries = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5499:     while (nEntries--)",
          "5500:     {",
          "5501:         part_start = offset;",
          "5503:         offset += count;",
          "5505:         offset += count;",
          "5507:         ti = proto_tree_add_uint(sub_tree, hf_wsp_mpart, tvb, part_start,",
          "",
          "[Removed Lines]",
          "5502:         HeadersLen = tvb_get_guintvar (tvb, offset, &count);",
          "5504:         DataLen = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5503:         HeadersLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "5505:         DataLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7157:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "7158:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
          "7159:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
          "7160:     };",
          "7162:     expert_module_t* expert_wsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7161:       { &ei_wsp_oversized_uintvar, { \"wsp.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "347f071f1b9180563c28b0f3d0627b91eb456c72",
      "candidate_info": {
        "commit_hash": "347f071f1b9180563c28b0f3d0627b91eb456c72",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/347f071f1b9180563c28b0f3d0627b91eb456c72",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "WBXML: limit the recursion level\n\nBug: 12663\nChange-Id: Ibbab2f20f4eda9f42ea0ea5e88dcf553cce1b55c\nReviewed-on: https://code.wireshark.org/review/16670\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "179: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "180: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "183: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: static expert_field ei_wbxml_too_much_recursion = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7309:            The initial state is FALSE.",
          "7312:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));",
          "7313:  while (off < tvb_len) {",
          "7314:   peek = tvb_get_guint8 (tvb, off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7313:  if (*level == 255) {",
          "7314:   proto_tree_add_expert(tree, pinfo, &ei_wbxml_too_much_recursion, tvb, offset, tvb_captured_length_remaining(tvb, offset));",
          "7315:   return tvb_len;",
          "7316:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8106:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8107:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8108:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8110:  };",
          "8112:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "8109:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "[Added Lines]",
          "8114:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }},",
          "8115:   { &ei_wbxml_too_much_recursion, { \"wbxml.too_much_recursion\", PI_UNDECODED, PI_WARN, \"Too much recursion\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c462f1b54ed4459c0c93dabbf5fe30f224e796a6",
      "candidate_info": {
        "commit_hash": "c462f1b54ed4459c0c93dabbf5fe30f224e796a6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c462f1b54ed4459c0c93dabbf5fe30f224e796a6",
        "files": [
          "epan/dissectors/packet-wbxml.c"
        ],
        "message": "Eliminate proto_tree_add_text from packet-wbxml.c\n\nWhile I was at it, some (mostly) duplicate functionality allowed rearranging of functions to eliminate most forward declarations.\n\nChange-Id: I2d7027d336c391d81dfe81c7a1ebf0d56c0826b2\nReviewed-on: https://code.wireshark.org/review/9951\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include <epan/packet.h>",
          "49: #include <epan/exceptions.h>",
          "50: #include <epan/prefs.h>",
          "52: #include \"packet-wap.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133: typedef struct _value_valuestring {",
          "134:  guint32 value;",
          "135:  const value_string *valstrptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: static int proto_wbxml = -1;",
          "140: static int hf_wbxml_version = -1;",
          "141: static int hf_wbxml_public_id_known = -1;",
          "142: static int hf_wbxml_public_id_literal = -1;",
          "143: static int hf_wbxml_charset = -1;",
          "144: static int hf_wbxml_string_table_item = -1;",
          "145: static int hf_wbxml_switch_page = -1;",
          "146: static int hf_wbxml_known_tag = -1;",
          "147: static int hf_wbxml_end_known_tag = -1;",
          "148: static int hf_wbxml_end_known_tag_uint = -1;",
          "149: static int hf_wbxml_str_i = -1;",
          "150: static int hf_wbxml_str_t = -1;",
          "151: static int hf_wbxml_opaque_data = -1;",
          "152: static int hf_wbxml_entity = -1;",
          "153: static int hf_wbxml_literal = -1;",
          "154: static int hf_wbxml_ext_i = -1;",
          "155: static int hf_wbxml_ext_t = -1;",
          "156: static int hf_wbxml_extension_token = -1;",
          "157: static int hf_wbxml_reserved_2 = -1;",
          "158: static int hf_wbxml_invalid_token = -1;",
          "159: static int hf_wbxml_known_attrvalue = -1;",
          "160: static int hf_wbxml_known_attrstart = -1;",
          "161: static int hf_wbxml_end_literal_tag = -1;",
          "162: static int hf_wbxml_literal_a = -1;",
          "163: static int hf_wbxml_literal_c = -1;",
          "164: static int hf_wbxml_literal_ac = -1;",
          "165: static int hf_wbxml_end_pi = -1;",
          "166: static int hf_wbxml_end_attribute_list = -1;",
          "167: static int hf_wbxml_pi_xml = -1;",
          "170: static gint ett_wbxml = -1;",
          "171: static gint ett_wbxml_str_tbl = -1;",
          "172: static gint ett_wbxml_content = -1;",
          "173: static gint ett_wbxml_tags = -1;",
          "175: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
          "176: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "177: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "180: static gboolean skip_wbxml_token_mapping = FALSE;",
          "181: static gboolean disable_wbxml_token_parsing = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1044:  const wbxml_decoding *map;",
          "1045: } wbxml_literal_list;",
          "",
          "[Removed Lines]",
          "1051: static int proto_wbxml = -1;",
          "1052: static int hf_wbxml_version = -1;",
          "1053: static int hf_wbxml_public_id_known = -1;",
          "1054: static int hf_wbxml_public_id_literal = -1;",
          "1055: static int hf_wbxml_charset = -1;",
          "1058: static gint ett_wbxml = -1;",
          "1059: static gint ett_wbxml_str_tbl = -1;",
          "1060: static gint ett_wbxml_content = -1;",
          "1063: static gboolean skip_wbxml_token_mapping = FALSE;",
          "1064: static gboolean disable_wbxml_token_parsing = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6920: static void",
          "6921: dissect_wbxml(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);",
          "6923: static void",
          "6924: dissect_uaprof(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);",
          "6926: static void",
          "6927: dissect_wbxml_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "6928:        const wbxml_decoding *override_content_map);",
          "6931: static void",
          "6932: show_wbxml_string_table (proto_tree *tree, tvbuff_t *tvb, guint32 str_tbl,",
          "6933:     guint32 str_tbl_len);",
          "6936: static guint32",
          "6937: parse_wbxml_tag (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "6938:    guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr);",
          "6942: static guint32",
          "6943: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "6944:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "6945:     const wbxml_decoding *map);",
          "6948: static guint32",
          "6949: parse_wbxml_attribute_list (proto_tree *tree, tvbuff_t *tvb,",
          "6950:        guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr);",
          "6954: static guint32",
          "6955: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "6956:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "6957:         const wbxml_decoding *map);",
          "6963: static void",
          "6964: dissect_wbxml(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "6965: {",
          "6966:  dissect_wbxml_common(tvb, pinfo, tree, NULL);",
          "6967: }",
          "6969: static void",
          "6970: dissect_uaprof(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "6971: {",
          "6972:  dissect_wbxml_common(tvb, pinfo, tree, &decode_uaprof_wap_248);",
          "6973: }",
          "6976: static void",
          "6977: dissect_wbxml_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "6978:        const wbxml_decoding *override_content_map)",
          "6979: {",
          "6981:  proto_item           *ti;",
          "6985:  guint8                version;",
          "6986:  guint                 offset          = 0;",
          "6987:  guint32               len;",
          "6988:  guint32               charset         = 0;",
          "6989:  guint32               charset_len     = 0;",
          "6990:  guint32               publicid;",
          "6991:  guint32               publicid_index  = 0;",
          "6992:  guint32               publicid_len;",
          "6993:  guint32               str_tbl;",
          "6994:  guint32               str_tbl_len;",
          "6995:  guint32               str_tbl_len_len = 0;",
          "6997:  const wbxml_decoding *content_map     = NULL;",
          "6998:  gchar                *summary         = NULL;",
          "6999:  guint8                codepage_stag   = 0;",
          "7000:  guint8                codepage_attr   = 0;",
          "7002:  DebugLog((\"dissect_wbxml: Dissecting packet %u\\n\", pinfo->fd->num));",
          "7010:  switch ( version = tvb_get_guint8 (tvb, 0) ) {",
          "7012:   break;",
          "7017:   break;",
          "7019:  default:",
          "7023:   col_append_fstr(pinfo->cinfo, COL_INFO, \" (Unknown WBXML version 0x%02x)\", version);",
          "7024:   ti = proto_tree_add_item (tree, proto_wbxml, tvb, 0, -1, ENC_NA);",
          "7025:   proto_item_append_text(ti, \", Unknown version 0x%02x\", version);",
          "7026:   return;",
          "7027:  }",
          "7035:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
          "7036:  if (! publicid) {",
          "7038:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
          "7039:   publicid_len += len;",
          "7040:  }",
          "7041:  offset = 1 + publicid_len;",
          "7044:  switch ( version ) {",
          "7047:   break;",
          "7053:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
          "7054:   offset += charset_len;",
          "7055:   break;",
          "7058:   DISSECTOR_ASSERT_NOT_REACHED();",
          "7059:   break;",
          "7060:  }",
          "7063:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
          "7067:  if ( publicid ) {",
          "7068:   summary = wmem_strdup_printf(wmem_packet_scope(), \"%s, Public ID: \\\"%s\\\"\",",
          "7069:        val_to_str_ext (version, &vals_wbxml_versions_ext, \"(unknown 0x%x)\"),",
          "7070:        val_to_str_ext (publicid, &vals_wbxml_public_ids_ext, \"(unknown 0x%x)\"));",
          "7071:  } else {",
          "7073:   len = tvb_strsize (tvb, str_tbl + publicid_index);",
          "7074:   summary = wmem_strdup_printf(wmem_packet_scope(), \"%s, Public ID: \\\"%s\\\"\",",
          "7075:        val_to_str_ext (version, &vals_wbxml_versions_ext, \"(unknown 0x%x)\"),",
          "7076:        tvb_format_text (tvb, str_tbl + publicid_index, len - 1));",
          "7077:  }",
          "7080:  col_append_fstr(pinfo->cinfo, COL_INFO, \" (WBXML %s)\", summary);",
          "7083:  ti = proto_tree_add_item (tree, proto_wbxml, tvb, 0, -1, ENC_NA);",
          "7084:  proto_item_append_text(ti, \", Version: %s\", summary);",
          "7089:  if ( tree ) {",
          "7090:   wbxml_tree = proto_item_add_subtree(ti, ett_wbxml);",
          "7093:   proto_tree_add_uint (wbxml_tree, hf_wbxml_version,",
          "7094:          tvb, 0, 1, version);",
          "7098:    proto_tree_add_uint(wbxml_tree, hf_wbxml_public_id_known,",
          "7099:          tvb, 1, publicid_len, publicid);",
          "7101:    proto_tree_add_item (wbxml_tree, hf_wbxml_public_id_literal,",
          "7102:           tvb, 1, publicid_len, ENC_ASCII|ENC_NA);",
          "7103:   }",
          "7104:   offset = 1 + publicid_len;",
          "7107:    proto_tree_add_uint (wbxml_tree, hf_wbxml_charset,",
          "7108:           tvb, 1 + publicid_len, charset_len, charset);",
          "7109:    offset += charset_len;",
          "7110:   }",
          "7112:   str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
          "7116:   ti = proto_tree_add_text(wbxml_tree,",
          "7117:       tvb, offset, len + str_tbl_len, \"String table: %u bytes\",",
          "7118:       str_tbl_len);",
          "7121:    wbxml_str_tbl_tree = proto_item_add_subtree (ti,",
          "7122:              ett_wbxml_str_tbl);",
          "7123:    show_wbxml_string_table (wbxml_str_tbl_tree, tvb,",
          "7124:        str_tbl, str_tbl_len);",
          "7125:   }",
          "7128:   offset += len + str_tbl_len;",
          "7131:   if (disable_wbxml_token_parsing) {",
          "7132:    proto_tree_add_text (wbxml_tree, tvb, offset, -1,",
          "7133:         \"Data representation not shown \"",
          "7134:         \"(edit WBXML preferences to show)\");",
          "7135:    return;",
          "7137:   wbxml_content_tree = proto_tree_add_subtree(wbxml_tree, tvb, offset, -1,",
          "7138:        ett_wbxml_content, &ti, \"Data representation\");",
          "7145:    if (override_content_map != NULL) {",
          "7146:     content_map = override_content_map;",
          "7147:     proto_item_append_text(ti,",
          "7148:              \" is based on: %s\",",
          "7149:              content_map->name);",
          "7150:    } else {",
          "7152:     content_map = get_wbxml_decoding_from_public_id (publicid);",
          "7153:     if (! content_map) {",
          "7154:      content_map = get_wbxml_decoding_from_content_type(",
          "7155:               pinfo->match_string, tvb, offset);",
          "7156:      if (! content_map) {",
          "7157:       proto_tree_add_text (wbxml_content_tree,",
          "7158:              tvb, offset, -1,",
          "7159:              \"[Rendering of this content type\"",
          "7160:              \" not (yet) supported]\");",
          "7161:      } else {",
          "7162:       proto_item_append_text(ti,",
          "7163:                \" is based on Content-Type: %s \"",
          "7164:                \"(chosen decoding: %s)\",",
          "7165:                pinfo->match_string, content_map->name);",
          "7166:      }",
          "7167:     }",
          "7168:    }",
          "7169:    if (content_map && skip_wbxml_token_mapping) {",
          "7170:     proto_tree_add_text (wbxml_content_tree,",
          "7171:            tvb, offset, -1,",
          "7172:            \"[Rendering of this content type\"",
          "7173:            \" has been disabled \"",
          "7174:            \"(edit WBXML preferences to enable)]\");",
          "7175:     content_map = NULL;",
          "7176:    }",
          "7177:    proto_tree_add_text (wbxml_content_tree, tvb,",
          "7178:           offset, -1,",
          "7179:           \"Level | State | Codepage \"",
          "7180:           \"| WBXML Token Description         \"",
          "7181:           \"| Rendering\");",
          "7182:    if (content_map) {",
          "7183:     len = parse_wbxml_tag_defined (wbxml_content_tree,",
          "7184:               tvb, offset, str_tbl, &level, &codepage_stag,",
          "7185:               &codepage_attr, content_map);",
          "7186:    } else {",
          "7188:     len = parse_wbxml_tag (wbxml_content_tree, tvb, offset,",
          "7189:              str_tbl, &level, &codepage_stag, &codepage_attr);",
          "7190:    }",
          "7191:   }",
          "7192:   return;",
          "7193:  }",
          "7194: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7207:  guint32 off = str_tbl;",
          "7208:  guint32 len = 0;",
          "7209:  guint32 end = str_tbl + str_tbl_len;",
          "7213:  while (off < end) {",
          "7214:   len = tvb_strsize (tvb, off);",
          "7219:   off += len;",
          "7220:  }",
          "7221: }",
          "",
          "[Removed Lines]",
          "7211:  proto_tree_add_text (tree, tvb, off, end,",
          "7212:         \"Start  | Length | String\");",
          "7215:   proto_tree_add_text (tree, tvb, off, len,",
          "7216:          \"%6d | %6d | '%s'\",",
          "7217:          off - str_tbl, len,",
          "7218:          tvb_format_text (tvb, off, len-1));",
          "",
          "[Added Lines]",
          "6959:  gchar* str;",
          "6963:   str = tvb_format_text (tvb, off, len-1);",
          "6964:   proto_tree_add_string_format(tree, hf_wbxml_string_table_item, tvb, off, len, str, \"%s\", str);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7295: static guint32",
          "7299: {",
          "7302:  guint32     len;",
          "7303:  guint       str_len;",
          "7304:  guint32     ent;",
          "",
          "[Removed Lines]",
          "7296: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "7297:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "7298:     const wbxml_decoding *map)",
          "7300:  guint32     tvb_len  = tvb_reported_length (tvb);",
          "7301:  guint32     off      = offset;",
          "",
          "[Added Lines]",
          "7040: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "7041:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "7042:         const wbxml_decoding *map)",
          "7044:  guint32     tvb_len = tvb_reported_length (tvb);",
          "7045:  guint32     off     = offset;",
          "7046:  guint32     len;",
          "7047:  guint       str_len;",
          "7048:  guint32     ent;",
          "7049:  guint32     idx;",
          "7050:  guint8      peek;",
          "7053:  gchar      *str;",
          "7055:  DebugLog((\"parse_wbxml_attr_defined (level = %u, offset = %u)\\n\", level, offset));",
          "7057:  while (off < tvb_len) {",
          "7058:   peek = tvb_get_guint8 (tvb, off);",
          "7059:   DebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"",
          "7060:      \"off = %u, tvb_len = %u\\n\", level, peek, off, tvb_len));",
          "7061:   if ((peek & 0x3F) < 5) switch (peek) { /* Global tokens",
          "7065:    proto_tree_add_uint_format(tree, hf_wbxml_switch_page, tvb, off, 2, *codepage_attr,",
          "7066:                          \"      |  Attr | A -->%3d | SWITCH_PAGE (Attr code page)    |\",",
          "7068:    off += 2;",
          "7069:    break;",
          "7076:    off++;",
          "7077:    DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "7078:       level, off - offset));",
          "7079:    return (off - offset);",
          "7081:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "7082:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7083:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7084:           level, *codepage_attr, Indent (level), ent);",
          "7085:    off += 1+len;",
          "7086:    break;",
          "7088:    len = tvb_strsize (tvb, off+1);",
          "7089:    str = tvb_format_text (tvb, off+1, len-1);",
          "7090:    proto_tree_add_string_format(tree, hf_wbxml_str_i, tvb, off, 1+len, str,",
          "7091:           \"  %3d |  Attr | A %3d    | STR_I (Inline string)           |     %s\\'%s\\'\",",
          "7092:           level, *codepage_attr, Indent (level), str);",
          "7093:    off += 1+len;",
          "7094:    break;",
          "7099:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7100:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7101:    attr_save_known = 0;",
          "7102:    attr_save_literal = tvb_format_text (tvb,",
          "7103:             str_tbl+idx, str_len-1);",
          "7104:    proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1+len, attr_save_literal,",
          "7105:           \"  %3d |  Attr | A %3d    | LITERAL (Literal Attribute)     |   %s<%s />\",",
          "7106:           level, *codepage_attr, Indent (level), attr_save_literal);",
          "7107:    off += 1+len;",
          "7108:    break;",
          "7113:    len = tvb_strsize (tvb, off+1);",
          "7114:    str = tvb_format_text (tvb, off+1, len-1);",
          "7115:    proto_tree_add_string_format(tree, hf_wbxml_ext_i, tvb, off, 1+len, str,",
          "7116:           \"  %3d |  Attr | A %3d    | EXT_I_%1x    (Extension Token)    |     %s(%s: \\'%s\\')\",",
          "7117:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "7118:           ((map != NULL) ? map_token (map->global, 0, peek) : \"Inline string extension\"), str);",
          "7119:    off += 1+len;",
          "7120:    break;",
          "7127:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7128:    {",
          "7129:     char *s;",
          "7130:     if (map != NULL) {",
          "7132:      if (map->ext_t[peek & 0x03])",
          "7133:       s = (map->ext_t[peek & 0x03])(tvb, idx, str_tbl);",
          "7134:      else",
          "7135:       s = wmem_strdup_printf(wmem_packet_scope(), \"EXT_T_%1x (%s)\", peek & 0x03,",
          "7136:             map_token (map->global, 0, peek));",
          "7137:     } else {",
          "7138:      s = wmem_strdup_printf(wmem_packet_scope(), \"Extension Token, integer value: (%u\", idx);",
          "7139:     }",
          "7140:     proto_tree_add_string_format(tree, hf_wbxml_ext_t, tvb, off, 1+len, s,",
          "7141:            \"  %3d | Tag   | T %3d    | EXT_T_%1x    (Extension Token)    | %s%s)\",",
          "7142:            level, *codepage_attr, peek & 0x0f, Indent (level),",
          "7143:            s);",
          "7144:    }",
          "7145:    off += 1+len;",
          "7146:    break;",
          "7148:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7149:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7150:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7151:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7152:           \"  %3d |  Attr | A %3d    | STR_T (Tableref string)         |     %s\\'%s\\'\",",
          "7153:           level, *codepage_attr, Indent (level), str);",
          "7154:    off += 1+len;",
          "7155:    break;",
          "7161:    str = (char*)((map != NULL) ? map_token (map->global, 0, peek) : \"Single-byte extension\");",
          "7162:    proto_tree_add_string_format(tree, hf_wbxml_extension_token, tvb, off, 1, str,",
          "7163:           \"  %3d |  Attr | A %3d    | EXT_%1x      (Extension Token)    |     %s(%s)\",",
          "7164:           level, *codepage_attr, peek & 0x0f, Indent (level), str);",
          "7165:    off++;",
          "7166:    break;",
          "7169:     if (map != NULL) {",
          "7170:      char *tmp_str;",
          "7172:       if (map->opaque_binary_attr) {",
          "7173:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
          "7174:                attr_save_known, *codepage_attr, &len);",
          "7175:       } else {",
          "7176:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
          "7177:            attr_save_known, *codepage_attr, &len);",
          "7178:       }",
          "7180:       if (map->opaque_literal_tag) {",
          "7181:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
          "7182:                 attr_save_literal, *codepage_attr, &len);",
          "7183:       } else {",
          "7184:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
          "7185:             attr_save_literal, *codepage_attr, &len);",
          "7186:       }",
          "7187:      }",
          "7188:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7189:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s%s\",",
          "7190:             level, *codepage_attr, Indent (level), tmp_str);",
          "7191:      off += 1 + len;",
          "7192:     } else {",
          "7193:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7194:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7195:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%d bytes of opaque data)\",",
          "7196:             level, *codepage_attr, Indent (level), idx);",
          "7197:      off += 1+len+idx;",
          "7198:     }",
          "7200:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "7201:             \"  %3d |  Attr | A %3d    | RESERVED_2     (Invalid Token!) | WBXML 1.0 parsing stops here.\",",
          "7202:             level, *codepage_attr);",
          "7204:     off = tvb_len;",
          "7205:     DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "7206:        level, off - offset));",
          "7207:     return (off - offset);",
          "7208:    }",
          "7209:    break;",
          "7211:   default:",
          "7212:    proto_tree_add_none_format(tree, hf_wbxml_invalid_token, tvb, off, 1,",
          "7213:           \"  %3d |  Attr | A %3d    | %-10s     (Invalid Token!) | WBXML parsing stops here.\",",
          "7214:           level, *codepage_attr, val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));",
          "7216:    off = tvb_len;",
          "7217:    break;",
          "7219:    char* s;",
          "7221:     if (map != NULL) {",
          "7222:      s = (char*)map_token (map->attrValue, *codepage_attr, peek);",
          "7223:     } else {",
          "7224:      s = wmem_strdup_printf(wmem_packet_scope(), \"attrValue_0x%02X\", peek);",
          "7225:     }",
          "7226:     proto_tree_add_string_format(tree, hf_wbxml_known_attrvalue, tvb, off, 1, s,",
          "7227:            \"  %3d |  Attr | A %3d    |   Known attrValue 0x%02X          |       %s%s\",",
          "7228:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "7229:            s);",
          "7230:     off++;",
          "7232:     if (map != NULL) {",
          "7233:      s = (char*)map_token (map->attrStart, *codepage_attr, peek);",
          "7234:     } else {",
          "7235:      s = wmem_strdup_printf(wmem_packet_scope(), \"attrStart_0x%02X\", peek);",
          "7236:     }",
          "7237:     proto_tree_add_string_format(tree, hf_wbxml_known_attrstart, tvb, off, 1, s,",
          "7238:            \"  %3d |  Attr | A %3d    |   Known attrStart 0x%02X          |   %s%s\",",
          "7239:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "7240:            s);",
          "7241:     off++;",
          "7242:    }",
          "7243:   }",
          "7245:  DebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",",
          "7246:     level, off - offset));",
          "7247:  return (off - offset);",
          "7248: }",
          "7274: static guint32",
          "7275: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "7276:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "7277:     const wbxml_decoding *map)",
          "7278: {",
          "7279:  guint32     tvb_len  = tvb_reported_length (tvb);",
          "7280:  guint32     off      = offset;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7312:  guint8      parsing_tag_content = FALSE; /* Are we parsing content from a",
          "7313:                  tag with content: <x>Content</x>",
          "7315:                  The initial state is FALSE.",
          "7319:  DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));",
          "7320:  while (off < tvb_len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7291:  gchar      *str;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7332:    off += 2;",
          "7333:    break;",
          "7341:            tag_save_known, Indent (*level),",
          "7350:    }",
          "7351:    (*level)--;",
          "7352:    off++;",
          "",
          "[Removed Lines]",
          "7327:    proto_tree_add_text (tree, tvb, off, 2,",
          "7328:           \"      | Tag   | T -->%3d \"",
          "7329:           \"| SWITCH_PAGE (Tag code page)     \"",
          "7330:           \"|\",",
          "7336:     proto_tree_add_text (tree, tvb, off, 1,",
          "7337:            \"  %3d | Tag   | T %3d    \"",
          "7338:            \"| END (Known Tag 0x%02X)            \"",
          "7339:            \"| %s</%s>\",",
          "7344:     proto_tree_add_text (tree, tvb, off, 1,",
          "7345:            \"  %3d | Tag   | T %3d    \"",
          "7346:            \"| END (Literal Tag)               \"",
          "7347:            \"| %s</%s>\",",
          "7349:            tag_save_literal ? tag_save_literal : \"\");",
          "",
          "[Added Lines]",
          "7306:    proto_tree_add_uint_format(tree, hf_wbxml_switch_page, tvb, off, 2, *codepage_stag,",
          "7307:           \"      | Tag   | T -->%3d | SWITCH_PAGE (Tag code page)     |\",",
          "7313:     proto_tree_add_string_format(tree, hf_wbxml_end_known_tag, tvb, off, 1, tag_save_literal,",
          "7314:            \"  %3d | Tag   | T %3d    | END (Known Tag 0x%02X)            | %s</%s>\",",
          "7319:     proto_tree_add_string_format(tree, hf_wbxml_end_literal_tag, tvb, off, 1, tag_save_literal ? tag_save_literal : \"\",",
          "7320:            \"  %3d | Tag   | T %3d    | END (Literal Tag)               | %s</%s>\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7355:    return (off - offset);",
          "7357:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "7363:    off += 1+len;",
          "7364:    break;",
          "7366:    len = tvb_strsize (tvb, off+1);",
          "7373:    off += 1+len;",
          "7374:    break;",
          "",
          "[Removed Lines]",
          "7358:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7359:           \"  %3d | Tag   | T %3d    \"",
          "7360:           \"| ENTITY                          \"",
          "7361:           \"| %s'&#%u;'\",",
          "7367:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7368:           \"  %3d | Tag   | T %3d    \"",
          "7369:           \"| STR_I (Inline string)           \"",
          "7370:           \"| %s\\'%s\\'\",",
          "7372:           tvb_format_text (tvb, off+1, len-1));",
          "",
          "[Added Lines]",
          "7330:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7331:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
          "7337:    str = tvb_format_text (tvb, off+1, len-1);",
          "7338:    proto_tree_add_string_format(tree, hf_wbxml_str_i, tvb, off, 1+len, str,",
          "7339:           \"  %3d | Tag   | T %3d    | STR_I (Inline string)           | %s\\'%s\\'\",",
          "7341:           str);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7379:    len = tvb_strsize (tvb, off+1);",
          "7385:           peek & 0x0f, Indent (*level),",
          "7388:    off += 1+len;",
          "7389:    break;",
          "7396:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
          "7397:           str_tbl, *level, codepage_attr, map);",
          "",
          "[Removed Lines]",
          "7380:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7381:           \"  %3d | Tag   | T %3d    \"",
          "7382:           \"| EXT_I_%1x    (Extension Token)    \"",
          "7383:           \"| %s(%s: \\'%s\\')\",",
          "7386:           map_token (map->global, 0, peek),",
          "7387:           tvb_format_text (tvb, off+1, len-1));",
          "7391:    proto_tree_add_text (tree, tvb, off, 1,",
          "7392:           \"  %3d | Tag   | T %3d    \"",
          "7393:           \"| PI (XML Processing Instruction) \"",
          "7394:           \"| %s<?xml\",",
          "",
          "[Added Lines]",
          "7349:    str = tvb_format_text (tvb, off+1, len-1);",
          "7350:    proto_tree_add_string_format(tree, hf_wbxml_ext_i, tvb, off, 1+len, str,",
          "7351:           \"  %3d | Tag   | T %3d    | EXT_I_%1x    (Extension Token)    | %s(%s: \\'%s\\')\",",
          "7354:           ((map != NULL) ? map_token (map->global, 0, peek) : \"Inline string extension\"),",
          "7355:           str);",
          "7359:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
          "7360:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7405:     THROW(ReportedBoundsError);",
          "7406:    }",
          "7412:    break;",
          "",
          "[Removed Lines]",
          "7407:    proto_tree_add_text (tree, tvb, off-1, 1,",
          "7408:           \"  %3d | Tag   | T %3d    \"",
          "7409:           \"| END (PI)                        \"",
          "7410:           \"| %s?>\",",
          "",
          "[Added Lines]",
          "7373:    proto_tree_add_none_format(tree, hf_wbxml_end_pi, tvb, off-1, 1,",
          "7374:           \"  %3d | Tag   | T %3d    | END (PI)                        | %s?>\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7417:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7421:     else",
          "7430:    }",
          "7431:    off += 1+len;",
          "7432:    break;",
          "7434:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7435:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7442:    off += 1+len;",
          "7443:    break;",
          "7454:    off++;",
          "7455:    break;",
          "7474:      }",
          "7475:     }",
          "7489:     off = tvb_len;",
          "",
          "[Removed Lines]",
          "7418:    {   char *s;",
          "7419:     if (map->ext_t[peek & 0x03])",
          "7420:      s = (map->ext_t[peek & 0x03])(tvb, idx, str_tbl);",
          "7422:      s = wmem_strdup_printf(wmem_packet_scope(), \"EXT_T_%1x (%s)\", peek & 0x03,",
          "7423:            map_token (map->global, 0, peek));",
          "7424:     proto_tree_add_text (tree, tvb, off, 1+len,",
          "7425:            \"  %3d | Tag   | T %3d    \"",
          "7426:            \"| EXT_T_%1x    (Extension Token)    \"",
          "7427:            \"| %s%s\",",
          "7429:            s);",
          "7436:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7437:           \"  %3d | Tag   | T %3d    \"",
          "7438:           \"| STR_T (Tableref string)         \"",
          "7439:           \"| %s\\'%s\\'\",",
          "7441:           tvb_format_text (tvb, str_tbl+idx, str_len-1));",
          "7448:    proto_tree_add_text (tree, tvb, off, 1,",
          "7449:           \"  %3d | Tag   | T %3d    \"",
          "7450:           \"| EXT_%1x      (Extension Token)    \"",
          "7451:           \"| %s(%s)\",",
          "7453:           map_token (map->global, 0, peek));",
          "7458:     char *str;",
          "7460:      if (map->opaque_binary_tag) {",
          "7461:       str = map->opaque_binary_tag(tvb, off + 1,",
          "7462:               tag_save_known, *codepage_stag, &len);",
          "7463:      } else {",
          "7464:       str = default_opaque_binary_tag(tvb, off + 1,",
          "7465:           tag_save_known, *codepage_stag, &len);",
          "7466:      }",
          "7468:      if (map->opaque_literal_tag) {",
          "7469:       str = map->opaque_literal_tag(tvb, off + 1,",
          "7470:                tag_save_literal, *codepage_stag, &len);",
          "7471:      } else {",
          "7472:       str = default_opaque_literal_tag(tvb, off + 1,",
          "7473:            tag_save_literal, *codepage_stag, &len);",
          "7476:     proto_tree_add_text (tree, tvb, off, 1 + len,",
          "7477:            \"  %3d | Tag   | T %3d    \"",
          "7478:            \"| OPAQUE (Opaque data)            \"",
          "7479:            \"| %s%s\",",
          "7481:     off += 1 + len;",
          "7483:     proto_tree_add_text (tree, tvb, off, 1,",
          "7484:            \"  %3d | Tag   | T %3d    \"",
          "7485:            \"| RESERVED_2     (Invalid Token!) \"",
          "7486:            \"| WBXML 1.0 parsing stops here.\",",
          "",
          "[Added Lines]",
          "7382:    {",
          "7383:     char *s;",
          "7384:     if (map)",
          "7385:     {",
          "7386:      if (map->ext_t[peek & 0x03])",
          "7387:       s = (map->ext_t[peek & 0x03])(tvb, idx, str_tbl);",
          "7388:      else",
          "7389:       s = wmem_strdup_printf(wmem_packet_scope(), \"EXT_T_%1x (%s)\", peek & 0x03,",
          "7390:                map_token (map->global, 0, peek));",
          "7391:     }",
          "7393:     {",
          "7394:      s = wmem_strdup_printf(wmem_packet_scope(), \"(Extension Token, integer value: %u)\", idx);",
          "7395:     }",
          "7396:     proto_tree_add_string_format(tree, hf_wbxml_ext_t, tvb, off, 1+len, s,",
          "7397:            \"  %3d | Tag   | T %3d    | EXT_T_%1x    (Extension Token)    | %s%s\",",
          "7405:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7406:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "7407:           \"  %3d | Tag   | T %3d    | STR_T (Tableref string)         | %s\\'%s\\'\",",
          "7415:    str = (char*)((map != NULL) ? map_token (map->global, 0, peek) : \"Single-byte extension\");",
          "7416:    proto_tree_add_string_format(tree, hf_wbxml_extension_token, tvb, off, 1, str,",
          "7417:           \"  %3d | Tag   | T %3d    | EXT_%1x      (Extension Token)    | %s(%s)\",",
          "7423:     if (map != NULL)",
          "7424:     {",
          "7425:      char *tmp_str;",
          "7427:       if (map->opaque_binary_tag) {",
          "7428:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
          "7429:                tag_save_known, *codepage_stag, &len);",
          "7430:       } else {",
          "7431:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
          "7432:            tag_save_known, *codepage_stag, &len);",
          "7433:       }",
          "7435:       if (map->opaque_literal_tag) {",
          "7436:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
          "7437:                 tag_save_literal, *codepage_stag, &len);",
          "7438:       } else {",
          "7439:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
          "7440:             tag_save_literal, *codepage_stag, &len);",
          "7441:       }",
          "7443:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "7444:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s%s\",",
          "7446:      off += 1 + len;",
          "7447:     } else {",
          "7448:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7449:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7450:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%d bytes of opaque data)\",",
          "7452:      off += 1+len+idx;",
          "7455:     proto_tree_add_none_format(tree, hf_wbxml_reserved_2, tvb, off, 1,",
          "7456:            \"  %3d | Tag   | T %3d    | RESERVED_2     (Invalid Token!) | WBXML 1.0 parsing stops here.\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7519:     tag_new_known = peek & 0x3F;",
          "7521:             tag_new_known);",
          "7523:    }",
          "",
          "[Removed Lines]",
          "7520:     tag_new_literal = map_token (map->tags, *codepage_stag,",
          "",
          "[Added Lines]",
          "7490:     if (map != NULL) {",
          "7491:      tag_new_literal = map_token (map->tags, *codepage_stag,",
          "7493:     } else {",
          "7494:      tag_new_literal = wmem_strdup_printf(wmem_packet_scope(), \"Tag_0x%02X\",",
          "7495:        tag_new_known);",
          "7496:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7558:               Indent (*level), tag_new_literal);",
          "7560:        off++;",
          "7567:        off += 1 + tag_len;",
          "7568:       }",
          "",
          "[Removed Lines]",
          "7553:        proto_tree_add_text (tree, tvb, off, 1,",
          "7554:               \"  %3d | Tag   | T %3d    \"",
          "7555:               \"|   Known Tag 0x%02X           (AC) \"",
          "7556:               \"| %s<%s\",",
          "7562:        proto_tree_add_text (tree, tvb, off, 1,",
          "7563:               \"  %3d | Tag   | T %3d    \"",
          "7564:               \"| LITERAL_AC (Literal tag)   (AC) \"",
          "7565:               \"| %s<%s\",",
          "",
          "[Added Lines]",
          "7528:        proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7529:               \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (AC) | %s<%s\",",
          "7535:        proto_tree_add_string_format(tree, hf_wbxml_literal_ac, tvb, off, 1, tag_new_literal,",
          "7536:               \"  %3d | Tag   | T %3d    | LITERAL_AC (Literal tag)   (AC) | %s<%s\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7579:        THROW(ReportedBoundsError);",
          "7580:       }",
          "7593:               Indent (*level), tag_new_literal);",
          "7595:        off++;",
          "7603:        off += 1 + tag_len;",
          "7604:       }",
          "7605:      }",
          "",
          "[Removed Lines]",
          "7581:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "7582:              \"  %3d | Tag   | T %3d    \"",
          "7583:              \"| END (attribute list)            \"",
          "7584:              \"| %s>\",",
          "7588:        proto_tree_add_text (tree, tvb, off, 1,",
          "7589:               \"  %3d | Tag   | T %3d    \"",
          "7590:               \"|   Known Tag 0x%02X           (.C) \"",
          "7591:               \"| %s<%s>\",",
          "7597:        proto_tree_add_text (tree, tvb, off, 1,",
          "7598:               \"  %3d | Tag   | T %3d    \"",
          "7599:               \"| LITERAL_C  (Literal Tag)   (.C) \"",
          "7600:               \"| %s<%s>\",",
          "7602:               tag_new_literal);",
          "",
          "[Added Lines]",
          "7552:       proto_tree_add_none_format(tree, hf_wbxml_end_attribute_list, tvb, off-1, 1,",
          "7553:              \"  %3d | Tag   | T %3d    | END (attribute list)            | %s>\",",
          "7557:        proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7558:               \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (.C) | %s<%s>\",",
          "7564:        proto_tree_add_string_format(tree, hf_wbxml_literal_c, tvb, off, 1, tag_new_literal,",
          "7565:               \"  %3d | Tag   | T %3d    | LITERAL_C  (Literal Tag)   (.C) | %s<%s>\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7616:     (*level)++;",
          "7624:              Indent (*level), tag_new_literal);",
          "",
          "[Removed Lines]",
          "7619:       proto_tree_add_text (tree, tvb, off, 1,",
          "7620:              \"  %3d | Tag   | T %3d    \"",
          "7621:              \"|   Known Tag 0x%02X           (A.) \"",
          "7622:              \"| %s<%s\",",
          "",
          "[Added Lines]",
          "7583:       proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7584:              \"  %3d | Tag   | T %3d    |   Known Tag 0x%02X           (A.) | %s<%s\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "7636:        THROW(ReportedBoundsError);",
          "7637:       }",
          "7649:       off += 1 + tag_len;",
          "7650:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Removed Lines]",
          "7638:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "7639:              \"  %3d | Tag   | T %3d    \"",
          "7640:              \"| END (Known Tag)                 \"",
          "7641:              \"| %s/>\",",
          "7644:       proto_tree_add_text (tree, tvb, off, 1,",
          "7645:              \"  %3d | Tag   | T %3d    \"",
          "7646:              \"| LITERAL_A  (Literal Tag)   (A.) \"",
          "7647:              \"| %s<%s\",",
          "",
          "[Added Lines]",
          "7600:       proto_tree_add_uint_format(tree, hf_wbxml_end_known_tag_uint, tvb, off-1, 1, *codepage_stag,",
          "7601:              \"  %3d | Tag   | T %3d    | END (Known Tag)                 | %s/>\",",
          "7604:       proto_tree_add_string_format(tree, hf_wbxml_literal_a, tvb, off, 1, tag_new_literal,",
          "7605:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7659:        THROW(ReportedBoundsError);",
          "7660:       }",
          "7666:      }",
          "7674:              Indent (*level), tag_new_literal);",
          "7676:       off++;",
          "7683:              tag_new_literal);",
          "7684:       off += 1 + tag_len;",
          "",
          "[Removed Lines]",
          "7661:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "7662:              \"  %3d | Tag   | T %3d    \"",
          "7663:              \"| END (Literal Tag)               \"",
          "7664:              \"| %s/>\",",
          "7669:       proto_tree_add_text (tree, tvb, off, 1,",
          "7670:              \"  %3d | Tag   | T %3d    \"",
          "7671:              \"|   Known Tag 0x%02x           (..) \"",
          "7672:              \"| %s<%s />\",",
          "7678:       proto_tree_add_text (tree, tvb, off, 1,",
          "7679:              \"  %3d | Tag   | T %3d    \"",
          "7680:              \"| LITERAL    (Literal Tag)   (..) \"",
          "7681:              \"| %s<%s />\",",
          "",
          "[Added Lines]",
          "7619:       proto_tree_add_string_format(tree, hf_wbxml_end_literal_tag, tvb, off-1, 1, \"\",",
          "7620:              \"  %3d | Tag   | T %3d    | END (Literal Tag)               | %s/>\",",
          "7625:       proto_tree_add_string_format(tree, hf_wbxml_known_tag, tvb, off, 1, tag_new_literal,",
          "7626:              \"  %3d | Tag   | T %3d    |   Known Tag 0x%02x           (..) | %s<%s />\",",
          "7632:       proto_tree_add_string_format(tree, hf_wbxml_literal, tvb, off, 1, tag_new_literal,",
          "7633:              \"  %3d | Tag   | T %3d    | LITERAL    (Literal Tag)   (..) | %s<%s />\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7693:  return (off - offset);",
          "7694: }",
          "7706: {",
          "8325:    }",
          "8326:   }",
          "8345: {",
          "8517: }",
          "",
          "[Removed Lines]",
          "7702: static guint32",
          "7703: parse_wbxml_tag (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "7704:    guint32 str_tbl, guint8 *level,",
          "7705:    guint8 *codepage_stag, guint8 *codepage_attr)",
          "7707:  guint32     tvb_len             = tvb_reported_length (tvb);",
          "7708:  guint32     off                 = offset;",
          "7709:  guint32     len;",
          "7710:  guint       str_len;",
          "7711:  guint32     ent;",
          "7712:  guint32     idx;",
          "7713:  guint8      peek;",
          "7721:  guint8      parsing_tag_content = FALSE; /* Are we parsing content from a",
          "7722:                  tag with content: <x>Content</x>",
          "7724:                  The initial state is FALSE.",
          "7728:  DebugLog((\"parse_wbxml_tag (level = %u, offset = %u)\\n\", *level, offset));",
          "7729:  while (off < tvb_len) {",
          "7730:   peek = tvb_get_guint8 (tvb, off);",
          "7731:   DebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));",
          "7732:   if ((peek & 0x3F) < 4) switch (peek) { /* Global tokens in state = STAG",
          "7736:    proto_tree_add_text (tree, tvb, off, 2,",
          "7737:           \"      | Tag   | T -->%3d \"",
          "7738:           \"| SWITCH_PAGE (Tag code page)     \"",
          "7739:           \"|\",",
          "7741:    off += 2;",
          "7742:    break;",
          "7745:     proto_tree_add_text (tree, tvb, off, 1,",
          "7746:            \"  %3d | Tag   | T %3d    \"",
          "7747:            \"| END (Known Tag 0x%02X)            \"",
          "7748:            \"| %s</%s>\",",
          "7750:            Indent (*level),",
          "7753:     proto_tree_add_text (tree, tvb, off, 1,",
          "7754:            \"  %3d | Tag   | T %3d    \"",
          "7755:            \"| END (Literal Tag)               \"",
          "7756:            \"| %s</%s>\",",
          "7758:            tag_save_literal ? tag_save_literal : \"\");",
          "7759:    }",
          "7760:    (*level)--;",
          "7761:    off++;",
          "7763:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\",",
          "7765:    return (off - offset);",
          "7767:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "7768:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7769:           \"  %3d | Tag   | T %3d    \"",
          "7770:           \"| ENTITY                          \"",
          "7771:           \"| %s'&#%u;'\",",
          "7773:    off += 1+len;",
          "7774:    break;",
          "7776:    len = tvb_strsize (tvb, off+1);",
          "7777:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7778:           \"  %3d | Tag   | T %3d    \"",
          "7779:           \"| STR_I (Inline string)           \"",
          "7780:           \"| %s\\'%s\\'\",",
          "7782:           tvb_format_text (tvb, off+1, len-1));",
          "7783:    off += 1+len;",
          "7784:    break;",
          "7789:    len = tvb_strsize (tvb, off+1);",
          "7790:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7791:           \"  %3d | Tag   | T %3d    \"",
          "7792:           \"| EXT_I_%1x    (Extension Token)    \"",
          "7793:           \"| %s(Inline string extension: \\'%s\\')\",",
          "7795:           tvb_format_text (tvb, off+1, len-1));",
          "7796:    off += 1+len;",
          "7797:    break;",
          "7799:    proto_tree_add_text (tree, tvb, off, 1,",
          "7800:           \"  %3d | Tag   | T %3d    \"",
          "7801:           \"| PI (XML Processing Instruction) \"",
          "7802:           \"| %s<?xml\",",
          "7804:    len = parse_wbxml_attribute_list (tree, tvb, off, str_tbl,",
          "7807:    off += len;",
          "7808:    if (off >= tvb_len) {",
          "7809:     DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\",",
          "7814:     THROW(ReportedBoundsError);",
          "7815:    }",
          "7816:    proto_tree_add_text (tree, tvb, off-1, 1,",
          "7817:           \"  %3d | Tag   | T %3d    \"",
          "7818:           \"| END (PI)                        \"",
          "7819:           \"| %s?>\",",
          "7821:    break;",
          "7826:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7827:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7828:           \"  %3d | Tag   | T %3d    \"",
          "7829:           \"| EXT_T_%1x    (Extension Token)    \"",
          "7830:           \"| %s(Extension Token, integer value: %u)\",",
          "7832:           idx);",
          "7833:    off += 1+len;",
          "7834:    break;",
          "7836:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7837:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7838:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "7839:           \"  %3d | Tag   | T %3d    \"",
          "7840:           \"| STR_T (Tableref string)         \"",
          "7841:           \"| %s\\'%s\\'\",",
          "7843:           tvb_format_text (tvb, str_tbl+idx, str_len-1));",
          "7844:    off += 1+len;",
          "7845:    break;",
          "7850:    proto_tree_add_text (tree, tvb, off, 1,",
          "7851:           \"  %3d | Tag   | T %3d    \"",
          "7852:           \"| EXT_%1x      (Extension Token)    \"",
          "7853:           \"| %s(Single-byte extension)\",",
          "7855:    off++;",
          "7856:    break;",
          "7859:     idx = tvb_get_guintvar (tvb, off+1, &len);",
          "7860:     proto_tree_add_text (tree, tvb, off, 1 + len + idx,",
          "7861:            \"  %3d | Tag   | T %3d    \"",
          "7862:            \"| OPAQUE (Opaque data)            \"",
          "7863:            \"| %s(%d bytes of opaque data)\",",
          "7865:     off += 1+len+idx;",
          "7867:     proto_tree_add_text (tree, tvb, off, 1,",
          "7868:            \"  %3d | Tag   | T %3d    \"",
          "7869:            \"| RESERVED_2     (Invalid Token!) \"",
          "7870:            \"| WBXML 1.0 parsing stops here.\",",
          "7873:     off = tvb_len;",
          "7874:     DebugLog((\"STAG: level = %u, Return: len = %u\\n\",",
          "7876:     return (off - offset);",
          "7877:    }",
          "7878:    break;",
          "7896:    tag_len = 0;",
          "7898:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u)\"",
          "7899:        \" - TableRef follows!\\n\", peek, off));",
          "7900:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
          "7901:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7902:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
          "7905:     tag_new_known = peek & 0x3F;",
          "7906:     tag_new_buf=wmem_strdup_printf(wmem_packet_scope(), \"Tag_0x%02X\",",
          "7907:          tag_new_known);",
          "7908:     tag_new_literal = tag_new_buf;",
          "7910:    }",
          "7920:      DebugLog((\"STAG: Tag in Tag - RECURSE! (off = %u)\\n\", off));",
          "7923:      (*level)++;",
          "7924:      len = parse_wbxml_tag (tree, tvb, off, str_tbl, level,",
          "7925:               codepage_stag, codepage_attr);",
          "7926:      off += len;",
          "7930:       tag_save_literal = tag_new_literal;",
          "7931:       tag_save_known = 0;",
          "7933:       tag_save_known = tag_new_known;",
          "7934:       tag_save_buf=wmem_strdup_printf(wmem_packet_scope(), \"Tag_0x%02X\",",
          "7935:            tag_new_known);",
          "7936:       tag_save_literal = tag_save_buf;",
          "7938:      }",
          "7942:        proto_tree_add_text (tree, tvb, off, 1,",
          "7943:               \"  %3d | Tag   | T %3d    \"",
          "7944:               \"|   Known Tag 0x%02X           (AC) \"",
          "7945:               \"| %s<%s\",",
          "7947:               Indent (*level), tag_new_literal);",
          "7949:        off++;",
          "7951:        proto_tree_add_text (tree, tvb, off, 1,",
          "7952:               \"  %3d | Tag   | T %3d    \"",
          "7953:               \"| LITERAL_AC (Literal tag)   (AC) \"",
          "7954:               \"| %s<%s\",",
          "7956:               tag_new_literal);",
          "7957:        off += 1 + tag_len;",
          "7958:       }",
          "7959:       len = parse_wbxml_attribute_list (tree, tvb,",
          "7960:             off, str_tbl, *level, codepage_attr);",
          "7962:       off += len;",
          "7963:       if (off >= tvb_len) {",
          "7964:        DebugLog((\"STAG: level = %u, ThrowException: \"",
          "7965:           \"len = %u (short frame)\\n\",",
          "7970:        THROW(ReportedBoundsError);",
          "7971:       }",
          "7972:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "7973:              \"  %3d | Tag   | T %3d    \"",
          "7974:              \"| END (attribute list)            \"",
          "7975:              \"| %s>\",",
          "7979:        proto_tree_add_text (tree, tvb, off, 1,",
          "7980:               \"  %3d | Tag   | T %3d    \"",
          "7981:               \"|   Known Tag 0x%02X           (.C) \"",
          "7982:               \"| %s<%s>\",",
          "7984:               Indent (*level), tag_new_literal);",
          "7986:        off++;",
          "7988:        proto_tree_add_text (tree, tvb, off, 1,",
          "7989:               \"  %3d | Tag   | T %3d    \"",
          "7990:               \"| LITERAL_C  (Literal Tag)   (.C) \"",
          "7991:               \"| %s<%s>\",",
          "7993:               tag_new_literal);",
          "7994:        off += 1 + tag_len;",
          "7995:       }",
          "7996:      }",
          "8002:      parsing_tag_content = TRUE;",
          "8003:      DebugLog((\"Tag in Tag - No recursion this time! \"",
          "8004:         \"(off = %u)\\n\", off));",
          "8005:     }",
          "8007:     DebugLog((\"<Tag/> in Tag - No recursion! (off = %u)\\n\", off));",
          "8008:     (*level)++;",
          "8011:       proto_tree_add_text (tree, tvb, off, 1,",
          "8012:              \"  %3d | Tag   | T %3d    \"",
          "8013:              \"|   Known Tag 0x%02X           (A.) \"",
          "8014:              \"| %s<%s\",",
          "8016:              Indent (*level), tag_new_literal);",
          "8018:       off++;",
          "8019:       len = parse_wbxml_attribute_list (tree, tvb,",
          "8020:             off, str_tbl, *level, codepage_attr);",
          "8022:       off += len;",
          "8023:       if (off >= tvb_len) {",
          "8024:        DebugLog((\"STAG: level = %u, ThrowException: \"",
          "8025:           \"len = %u (short frame)\\n\",",
          "8030:        THROW(ReportedBoundsError);",
          "8031:       }",
          "8032:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "8033:              \"  %3d | Tag   | T %3d    \"",
          "8034:              \"| END (Known Tag)                 \"",
          "8035:              \"| %s/>\",",
          "8038:       proto_tree_add_text (tree, tvb, off, 1,",
          "8039:              \"  %3d | Tag   | T %3d    \"",
          "8040:              \"| LITERAL_A  (Literal Tag)   (A.) \"",
          "8041:              \"| %s<%s\",",
          "8043:              tag_new_literal);",
          "8044:       off += 1 + tag_len;",
          "8045:       len = parse_wbxml_attribute_list (tree, tvb,",
          "8046:             off, str_tbl, *level, codepage_attr);",
          "8048:       off += len;",
          "8049:       if (off >= tvb_len) {",
          "8050:        DebugLog((\"STAG: level = %u, ThrowException: \"",
          "8051:           \"len = %u (short frame)\\n\",",
          "8056:        THROW(ReportedBoundsError);",
          "8057:       }",
          "8058:       proto_tree_add_text (tree, tvb, off-1, 1,",
          "8059:              \"  %3d | Tag   | T %3d    \"",
          "8060:              \"| END (Literal Tag)               \"",
          "8061:              \"| %s/>\",",
          "8063:      }",
          "8066:       proto_tree_add_text (tree, tvb, off, 1,",
          "8067:              \"  %3d | Tag   | T %3d    \"",
          "8068:              \"|   Known Tag 0x%02x           (..) \"",
          "8069:              \"| %s<%s />\",",
          "8071:              Indent (*level), tag_new_literal);",
          "8073:       off++;",
          "8075:       proto_tree_add_text (tree, tvb, off, 1,",
          "8076:              \"  %3d | Tag   | T %3d    \"",
          "8077:              \"| LITERAL    (Literal Tag)   (..) \"",
          "8078:              \"| %s<%s />\",",
          "8080:              tag_new_literal);",
          "8081:       off += 1 + tag_len;",
          "8082:      }",
          "8083:     }",
          "8084:     (*level)--;",
          "8086:    }",
          "8089:  DebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\",",
          "8091:  return (off - offset);",
          "8092: }",
          "8117: static guint32",
          "8118: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "8119:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "8120:         const wbxml_decoding *map)",
          "8121: {",
          "8122:  guint32     tvb_len = tvb_reported_length (tvb);",
          "8123:  guint32     off     = offset;",
          "8124:  guint32     len;",
          "8125:  guint       str_len;",
          "8126:  guint32     ent;",
          "8127:  guint32     idx;",
          "8128:  guint8      peek;",
          "8132:  DebugLog((\"parse_wbxml_attr_defined (level = %u, offset = %u)\\n\",",
          "8133:     level, offset));",
          "8135:  while (off < tvb_len) {",
          "8136:   peek = tvb_get_guint8 (tvb, off);",
          "8137:   DebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"",
          "8138:      \"off = %u, tvb_len = %u\\n\", level, peek, off, tvb_len));",
          "8139:   if ((peek & 0x3F) < 5) switch (peek) { /* Global tokens",
          "8143:    proto_tree_add_text (tree, tvb, off, 2,",
          "8144:           \"      |  Attr | A -->%3d \"",
          "8145:           \"| SWITCH_PAGE (Attr code page)    |\",",
          "8147:    off += 2;",
          "8148:    break;",
          "8155:    off++;",
          "8156:    DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "8157:       level, off - offset));",
          "8158:    return (off - offset);",
          "8160:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "8161:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8162:           \"  %3d |  Attr | A %3d    \"",
          "8163:           \"| ENTITY                          \"",
          "8164:           \"|     %s'&#%u;'\",",
          "8165:           level, *codepage_attr, Indent (level), ent);",
          "8166:    off += 1+len;",
          "8167:    break;",
          "8169:    len = tvb_strsize (tvb, off+1);",
          "8170:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8171:           \"  %3d |  Attr | A %3d    \"",
          "8172:           \"| STR_I (Inline string)           \"",
          "8173:           \"|     %s\\'%s\\'\",",
          "8174:           level, *codepage_attr, Indent (level),",
          "8175:           tvb_format_text (tvb, off+1, len-1));",
          "8176:    off += 1+len;",
          "8177:    break;",
          "8182:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8183:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "8184:    attr_save_known = 0;",
          "8185:    attr_save_literal = tvb_format_text (tvb,",
          "8186:             str_tbl+idx, str_len-1);",
          "8187:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8188:           \"  %3d |  Attr | A %3d    \"",
          "8189:           \"| LITERAL (Literal Attribute)     \"",
          "8190:           \"|   %s<%s />\",",
          "8191:           level, *codepage_attr, Indent (level),",
          "8192:           attr_save_literal);",
          "8193:    off += 1+len;",
          "8194:    break;",
          "8199:    len = tvb_strsize (tvb, off+1);",
          "8200:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8201:           \"  %3d |  Attr | A %3d    \"",
          "8202:           \"| EXT_I_%1x    (Extension Token)    \"",
          "8203:           \"|     %s(%s: \\'%s\\')\",",
          "8204:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "8205:           map_token (map->global, 0, peek),",
          "8206:           tvb_format_text (tvb, off+1, len-1));",
          "8207:    off += 1+len;",
          "8208:    break;",
          "8215:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8216:    {   char *s;",
          "8218:     if (map->ext_t[peek & 0x03])",
          "8219:      s = (map->ext_t[peek & 0x03])(tvb, idx, str_tbl);",
          "8220:     else",
          "8221:      s = wmem_strdup_printf(wmem_packet_scope(), \"EXT_T_%1x (%s)\", peek & 0x03,",
          "8222:            map_token (map->global, 0, peek));",
          "8224:     proto_tree_add_text (tree, tvb, off, 1+len,",
          "8225:            \"  %3d | Tag   | T %3d    \"",
          "8226:            \"| EXT_T_%1x    (Extension Token)    \"",
          "8227:            \"| %s%s)\",",
          "8228:            level, *codepage_attr, peek & 0x0f, Indent (level),",
          "8229:            s);",
          "8230:    }",
          "8231:    off += 1+len;",
          "8232:    break;",
          "8234:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8235:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "8236:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8237:           \"  %3d |  Attr | A %3d    \"",
          "8238:           \"| STR_T (Tableref string)         \"",
          "8239:           \"|     %s\\'%s\\'\",",
          "8240:           level, *codepage_attr, Indent (level),",
          "8241:           tvb_format_text (tvb, str_tbl+idx, str_len-1));",
          "8242:    off += 1+len;",
          "8243:    break;",
          "8249:    proto_tree_add_text (tree, tvb, off, 1,",
          "8250:           \"  %3d |  Attr | A %3d    \"",
          "8251:           \"| EXT_%1x      (Extension Token)    \"",
          "8252:           \"|     %s(%s)\",",
          "8253:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "8254:           map_token (map->global, 0, peek));",
          "8255:    off++;",
          "8256:    break;",
          "8259:     char *str;",
          "8261:      if (map->opaque_binary_attr) {",
          "8262:       str = map->opaque_binary_attr(tvb, off + 1,",
          "8263:                attr_save_known, *codepage_attr, &len);",
          "8264:      } else {",
          "8265:       str = default_opaque_binary_attr(tvb, off + 1,",
          "8266:            attr_save_known, *codepage_attr, &len);",
          "8267:      }",
          "8269:      if (map->opaque_literal_tag) {",
          "8270:       str = map->opaque_literal_attr(tvb, off + 1,",
          "8271:                 attr_save_literal, *codepage_attr, &len);",
          "8272:      } else {",
          "8273:       str = default_opaque_literal_attr(tvb, off + 1,",
          "8274:             attr_save_literal, *codepage_attr, &len);",
          "8275:      }",
          "8276:     }",
          "8277:     proto_tree_add_text (tree, tvb, off, 1 + len,",
          "8278:            \"  %3d |  Attr | A %3d    \"",
          "8279:            \"| OPAQUE (Opaque data)            \"",
          "8280:            \"|       %s%s\",",
          "8281:            level, *codepage_attr, Indent (level), str);",
          "8282:     off += 1 + len;",
          "8284:     proto_tree_add_text (tree, tvb, off, 1,",
          "8285:            \"  %3d |  Attr | A %3d    \"",
          "8286:            \"| RESERVED_2     (Invalid Token!) \"",
          "8287:            \"| WBXML 1.0 parsing stops here.\",",
          "8288:            level, *codepage_attr);",
          "8290:     off = tvb_len;",
          "8291:     DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "8292:        level, off - offset));",
          "8293:     return (off - offset);",
          "8294:    }",
          "8295:    break;",
          "8297:   default:",
          "8298:    proto_tree_add_text (tree, tvb, off, 1,",
          "8299:           \"  %3d |  Attr | A %3d    \"",
          "8300:           \"| %-10s     (Invalid Token!) \"",
          "8301:           \"| WBXML parsing stops here.\",",
          "8302:           level, *codepage_attr,",
          "8303:           val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));",
          "8305:    off = tvb_len;",
          "8306:    break;",
          "8309:     proto_tree_add_text (tree, tvb, off, 1,",
          "8310:            \"  %3d |  Attr | A %3d    \"",
          "8311:            \"|   Known attrValue 0x%02X          \"",
          "8312:            \"|       %s%s\",",
          "8313:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "8314:            map_token (map->attrValue, *codepage_attr, peek));",
          "8315:     off++;",
          "8317:     attr_save_known = peek & 0x7f;",
          "8318:     proto_tree_add_text (tree, tvb, off, 1,",
          "8319:            \"  %3d |  Attr | A %3d    \"",
          "8320:            \"|   Known attrStart 0x%02X          \"",
          "8321:            \"|   %s%s\",",
          "8322:            level, *codepage_attr, attr_save_known, Indent (level),",
          "8323:            map_token (map->attrStart, *codepage_attr, peek));",
          "8324:     off++;",
          "8328:  DebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",",
          "8329:     level, off - offset));",
          "8330:  return (off - offset);",
          "8331: }",
          "8342: static guint32",
          "8343: parse_wbxml_attribute_list (proto_tree *tree, tvbuff_t *tvb,",
          "8344:        guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr)",
          "8346:  guint32 tvb_len = tvb_reported_length (tvb);",
          "8347:  guint32 off     = offset;",
          "8348:  guint32 len;",
          "8349:  guint   str_len;",
          "8350:  guint32 ent;",
          "8351:  guint32 idx;",
          "8352:  guint8  peek;",
          "8354:  DebugLog((\"parse_wbxml_attr (level = %u, offset = %u)\\n\", level, offset));",
          "8356:  while (off < tvb_len) {",
          "8357:   peek = tvb_get_guint8 (tvb, off);",
          "8358:   DebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"",
          "8359:      \"off = %u, tvb_len = %u\\n\", level, peek, off, tvb_len));",
          "8360:   if ((peek & 0x3F) < 5) switch (peek) { /* Global tokens",
          "8364:    proto_tree_add_text (tree, tvb, off, 2,",
          "8365:           \"      |  Attr | A -->%3d \"",
          "8366:           \"| SWITCH_PAGE (Attr code page)    |\",",
          "8368:    off += 2;",
          "8369:    break;",
          "8376:    off++;",
          "8377:    DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "8378:       level, off - offset));",
          "8379:    return (off - offset);",
          "8381:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "8382:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8383:           \"  %3d |  Attr | A %3d    \"",
          "8384:           \"| ENTITY                          \"",
          "8385:           \"|     %s'&#%u;'\",",
          "8386:           level, *codepage_attr, Indent (level), ent);",
          "8387:    off += 1+len;",
          "8388:    break;",
          "8390:    len = tvb_strsize (tvb, off+1);",
          "8391:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8392:           \"  %3d |  Attr | A %3d    \"",
          "8393:           \"| STR_I (Inline string)           \"",
          "8394:           \"|     %s\\'%s\\'\",",
          "8395:           level, *codepage_attr, Indent (level),",
          "8396:           tvb_format_text (tvb, off+1, len-1));",
          "8397:    off += 1+len;",
          "8398:    break;",
          "8400:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8401:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "8402:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8403:           \"  %3d |  Attr | A %3d    \"",
          "8404:           \"| LITERAL (Literal Attribute)     \"",
          "8405:           \"|   %s<%s />\",",
          "8406:           level, *codepage_attr, Indent (level),",
          "8407:           tvb_format_text (tvb, str_tbl+idx, str_len-1));",
          "8408:    off += 1+len;",
          "8409:    break;",
          "8414:    len = tvb_strsize (tvb, off+1);",
          "8415:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8416:           \"  %3d |  Attr | A %3d    \"",
          "8417:           \"| EXT_I_%1x    (Extension Token)    \"",
          "8418:           \"|     %s(Inline string extension: \\'%s\\')\",",
          "8419:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "8420:           tvb_format_text (tvb, off+1, len-1));",
          "8421:    off += 1+len;",
          "8422:    break;",
          "8429:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8430:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8431:           \"  %3d |  Attr | A %3d    \"",
          "8432:           \"| EXT_T_%1x    (Extension Token)    \"",
          "8433:           \"|     %s(Extension Token, integer value: %u)\",",
          "8434:           level, *codepage_attr, peek & 0x0f, Indent (level),",
          "8435:           idx);",
          "8436:    off += 1+len;",
          "8437:    break;",
          "8439:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8440:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "8441:    proto_tree_add_text (tree, tvb, off, 1+len,",
          "8442:           \"  %3d |  Attr | A %3d    \"",
          "8443:           \"| STR_T (Tableref string)         \"",
          "8444:           \"|     %s\\'%s\\'\",",
          "8445:           level, *codepage_attr, Indent (level),",
          "8446:           tvb_format_text (tvb, str_tbl+idx, str_len-1));",
          "8447:    off += 1+len;",
          "8448:    break;",
          "8454:    proto_tree_add_text (tree, tvb, off, 1,",
          "8455:           \"  %3d |  Attr | A %3d    \"",
          "8456:           \"| EXT_%1x      (Extension Token)    \"",
          "8457:           \"|     %s(Single-byte extension)\",",
          "8458:           level, *codepage_attr, peek & 0x0f, Indent (level));",
          "8459:    off++;",
          "8460:    break;",
          "8463:     idx = tvb_get_guintvar (tvb, off+1, &len);",
          "8464:     proto_tree_add_text (tree, tvb, off, 1 + len + idx,",
          "8465:            \"  %3d |  Attr | A %3d    \"",
          "8466:            \"| OPAQUE (Opaque data)            \"",
          "8467:            \"|       %s(%d bytes of opaque data)\",",
          "8468:            level, *codepage_attr, Indent (level), idx);",
          "8469:     off += 1+len+idx;",
          "8471:     proto_tree_add_text (tree, tvb, off, 1,",
          "8472:            \"  %3d |  Attr | A %3d    \"",
          "8473:            \"| RESERVED_2     (Invalid Token!) \"",
          "8474:            \"| WBXML 1.0 parsing stops here.\",",
          "8475:            level, *codepage_attr);",
          "8477:     off = tvb_len;",
          "8478:     DebugLog((\"ATTR: level = %u, Return: len = %u\\n\",",
          "8479:        level, off - offset));",
          "8480:     return (off - offset);",
          "8481:    }",
          "8482:    break;",
          "8484:   default:",
          "8485:    proto_tree_add_text (tree, tvb, off, 1,",
          "8486:           \"  %3d |  Attr | A %3d    \"",
          "8487:           \"| %-10s     (Invalid Token!) \"",
          "8488:           \"| WBXML parsing stops here.\",",
          "8489:           level, *codepage_attr,",
          "8490:           val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));",
          "8492:    off = tvb_len;",
          "8493:    break;",
          "8496:     proto_tree_add_text (tree, tvb, off, 1,",
          "8497:            \"  %3d |  Attr | A %3d    \"",
          "8498:            \"|   Known attrValue 0x%02X          \"",
          "8499:            \"|       %sattrValue_0x%02X\",",
          "8500:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "8501:            peek);",
          "8502:     off++;",
          "8504:     proto_tree_add_text (tree, tvb, off, 1,",
          "8505:            \"  %3d |  Attr | A %3d    \"",
          "8506:            \"|   Known attrStart 0x%02X          \"",
          "8507:            \"|   %sattrStart_0x%02X\",",
          "8508:            level, *codepage_attr, peek & 0x7f, Indent (level),",
          "8509:            peek);",
          "8510:     off++;",
          "8511:    }",
          "8512:   }",
          "8514:  DebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",",
          "8515:     level, off - offset));",
          "8516:  return (off - offset);",
          "",
          "[Added Lines]",
          "7651: static void",
          "7652: dissect_wbxml_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7653:        const wbxml_decoding *override_content_map)",
          "7656:  proto_item           *ti;",
          "7660:  proto_tree           *tag_tree;",
          "7661:  guint8                version;",
          "7662:  guint                 offset          = 0;",
          "7663:  guint32               len;",
          "7664:  guint32               charset         = 0;",
          "7665:  guint32               charset_len     = 0;",
          "7666:  guint32               publicid;",
          "7667:  guint32               publicid_index  = 0;",
          "7668:  guint32               publicid_len;",
          "7669:  guint32               str_tbl;",
          "7670:  guint32               str_tbl_len;",
          "7671:  guint32               str_tbl_len_len = 0;",
          "7673:  const wbxml_decoding *content_map     = NULL;",
          "7674:  gchar                *summary         = NULL;",
          "7675:  guint8                codepage_stag   = 0;",
          "7676:  guint8                codepage_attr   = 0;",
          "7678:  DebugLog((\"dissect_wbxml: Dissecting packet %u\\n\", pinfo->fd->num));",
          "7686:  switch ( version = tvb_get_guint8 (tvb, 0) ) {",
          "7688:   break;",
          "7693:   break;",
          "7695:  default:",
          "7699:   col_append_fstr(pinfo->cinfo, COL_INFO, \" (Unknown WBXML version 0x%02x)\", version);",
          "7700:   ti = proto_tree_add_item (tree, proto_wbxml, tvb, 0, -1, ENC_NA);",
          "7701:   proto_item_append_text(ti, \", Unknown version 0x%02x\", version);",
          "7702:   return;",
          "7703:  }",
          "7711:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
          "7712:  if (! publicid) {",
          "7714:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
          "7715:   publicid_len += len;",
          "7716:  }",
          "7717:  offset = 1 + publicid_len;",
          "7720:  switch ( version ) {",
          "7723:   break;",
          "7729:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
          "7730:   offset += charset_len;",
          "7731:   break;",
          "7734:   DISSECTOR_ASSERT_NOT_REACHED();",
          "7735:   break;",
          "7736:  }",
          "7739:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
          "7743:  if ( publicid ) {",
          "7744:   summary = wmem_strdup_printf(wmem_packet_scope(), \"%s, Public ID: \\\"%s\\\"\",",
          "7745:        val_to_str_ext (version, &vals_wbxml_versions_ext, \"(unknown 0x%x)\"),",
          "7746:        val_to_str_ext (publicid, &vals_wbxml_public_ids_ext, \"(unknown 0x%x)\"));",
          "7747:  } else {",
          "7749:   len = tvb_strsize (tvb, str_tbl + publicid_index);",
          "7750:   summary = wmem_strdup_printf(wmem_packet_scope(), \"%s, Public ID: \\\"%s\\\"\",",
          "7751:        val_to_str_ext (version, &vals_wbxml_versions_ext, \"(unknown 0x%x)\"),",
          "7752:        tvb_format_text (tvb, str_tbl + publicid_index, len - 1));",
          "7753:  }",
          "7756:  col_append_fstr(pinfo->cinfo, COL_INFO, \" (WBXML %s)\", summary);",
          "7759:  ti = proto_tree_add_item (tree, proto_wbxml, tvb, 0, -1, ENC_NA);",
          "7760:  proto_item_append_text(ti, \", Version: %s\", summary);",
          "7765:  wbxml_tree = proto_item_add_subtree(ti, ett_wbxml);",
          "7768:  proto_tree_add_uint (wbxml_tree, hf_wbxml_version,",
          "7769:         tvb, 0, 1, version);",
          "7773:   proto_tree_add_uint(wbxml_tree, hf_wbxml_public_id_known,",
          "7774:      tvb, 1, publicid_len, publicid);",
          "7776:   proto_tree_add_item (wbxml_tree, hf_wbxml_public_id_literal,",
          "7777:          tvb, 1, publicid_len, ENC_ASCII|ENC_NA);",
          "7778:  }",
          "7779:  offset = 1 + publicid_len;",
          "7782:   proto_tree_add_uint (wbxml_tree, hf_wbxml_charset,",
          "7783:          tvb, 1 + publicid_len, charset_len, charset);",
          "7784:   offset += charset_len;",
          "7785:  }",
          "7787:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
          "7791:  wbxml_str_tbl_tree = proto_tree_add_subtree_format(wbxml_tree,",
          "7792:      tvb, offset, len + str_tbl_len, ett_wbxml_str_tbl, NULL, \"String table: %u bytes\",",
          "7793:      str_tbl_len);",
          "7796:   show_wbxml_string_table (wbxml_str_tbl_tree, tvb,",
          "7797:       str_tbl, str_tbl_len);",
          "7798:  }",
          "7801:  offset += len + str_tbl_len;",
          "7803:  wbxml_content_tree = proto_tree_add_subtree(wbxml_tree, tvb, offset, -1,",
          "7804:      ett_wbxml_content, &ti, \"Data representation\");",
          "7806:  if (disable_wbxml_token_parsing) {",
          "7807:   expert_add_info(pinfo, ti, &ei_wbxml_data_not_shown);",
          "7808:   return;",
          "7809:  }",
          "7815:  if (override_content_map != NULL) {",
          "7816:   content_map = override_content_map;",
          "7817:   proto_item_append_text(ti,",
          "7818:       \" is based on: %s\",",
          "7819:       content_map->name);",
          "7820:  } else {",
          "7822:   content_map = get_wbxml_decoding_from_public_id (publicid);",
          "7823:   if (! content_map) {",
          "7824:    content_map = get_wbxml_decoding_from_content_type(",
          "7825:           pinfo->match_string, tvb, offset);",
          "7826:    if (! content_map) {",
          "7827:     expert_add_info(pinfo, ti, &ei_wbxml_content_type_not_supported);",
          "7828:    } else {",
          "7829:     proto_item_append_text(ti,",
          "7830:         \" is based on Content-Type: %s \"",
          "7831:         \"(chosen decoding: %s)\",",
          "7832:         pinfo->match_string, content_map->name);",
          "7835:  }",
          "7836:  if (content_map && skip_wbxml_token_mapping) {",
          "7837:   expert_add_info(pinfo, ti, &ei_wbxml_content_type_disabled);",
          "7838:   content_map = NULL;",
          "7839:  }",
          "7840:  tag_tree = proto_tree_add_subtree(wbxml_content_tree, tvb, offset, -1, ett_wbxml_tags, NULL,",
          "7841:      \"Level | State | Codepage | WBXML Token Description         | Rendering\");",
          "7844:  len = parse_wbxml_tag_defined (tag_tree,",
          "7845:        tvb, offset, str_tbl, &level, &codepage_stag,",
          "7846:        &codepage_attr, content_map);",
          "7847: }",
          "7849: static void",
          "7850: dissect_wbxml(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "7852:  dissect_wbxml_common(tvb, pinfo, tree, NULL);",
          "7855: static void",
          "7856: dissect_uaprof(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "7857: {",
          "7858:  dissect_wbxml_common(tvb, pinfo, tree, &decode_uaprof_wap_248);",
          "7859: }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8558:       &wap_mib_enum_vals_character_sets_ext, 0x00,",
          "8559:       \"WBXML Character Set\", HFILL }",
          "8560:   },",
          "8561:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7902:   { &hf_wbxml_string_table_item,",
          "7903:     { \"String table item\",",
          "7904:       \"wbxml.string_table_item\",",
          "7905:       FT_STRING, BASE_NONE,",
          "7906:       NULL, 0x00,",
          "7907:       NULL, HFILL }",
          "7908:   },",
          "7909:   { &hf_wbxml_switch_page,",
          "7910:     { \"SWITCH_PAGE\",",
          "7911:       \"wbxml.switch_page\",",
          "7912:       FT_UINT32, BASE_DEC,",
          "7913:       NULL, 0x00,",
          "7914:       NULL, HFILL }",
          "7915:   },",
          "7916:   { &hf_wbxml_known_tag,",
          "7917:     { \"Known Tag\",",
          "7918:       \"wbxml.known_tag\",",
          "7919:       FT_STRING, BASE_NONE,",
          "7920:       NULL, 0x00,",
          "7921:       NULL, HFILL }",
          "7922:   },",
          "7923:   { &hf_wbxml_end_known_tag,",
          "7924:     { \"END Known Tag\",",
          "7925:       \"wbxml.end_known_tag\",",
          "7926:       FT_STRING, BASE_NONE,",
          "7927:       NULL, 0x00,",
          "7928:       NULL, HFILL }",
          "7929:   },",
          "7930:   { &hf_wbxml_end_known_tag_uint,",
          "7931:     { \"END Known Tag\",",
          "7932:       \"wbxml.end_known_tag.uint\",",
          "7933:       FT_UINT32, BASE_DEC,",
          "7934:       NULL, 0x00,",
          "7935:       NULL, HFILL }",
          "7936:   },",
          "7937:   { &hf_wbxml_str_i,",
          "7938:     { \"STR_I\",",
          "7939:       \"wbxml.str_i\",",
          "7940:       FT_STRING, BASE_NONE,",
          "7941:       NULL, 0x00,",
          "7942:       NULL, HFILL }",
          "7943:   },",
          "7944:   { &hf_wbxml_str_t,",
          "7945:     { \"STR_T\",",
          "7946:       \"wbxml.str_t\",",
          "7947:       FT_STRING, BASE_NONE,",
          "7948:       NULL, 0x00,",
          "7949:       NULL, HFILL }",
          "7950:   },",
          "7951:   { &hf_wbxml_opaque_data,",
          "7952:     { \"Opaque Data\",",
          "7953:       \"wbxml.opaque_data\",",
          "7954:       FT_BYTES, BASE_NONE,",
          "7955:       NULL, 0x00,",
          "7956:       NULL, HFILL }",
          "7957:   },",
          "7958:   { &hf_wbxml_entity,",
          "7959:     { \"ENTITY\",",
          "7960:       \"wbxml.entity\",",
          "7961:       FT_UINT32, BASE_DEC,",
          "7962:       NULL, 0x00,",
          "7963:       NULL, HFILL }",
          "7964:   },",
          "7965:   { &hf_wbxml_literal,",
          "7966:     { \"LITERAL\",",
          "7967:       \"wbxml.literal\",",
          "7968:       FT_STRING, BASE_NONE,",
          "7969:       NULL, 0x00,",
          "7970:       NULL, HFILL }",
          "7971:   },",
          "7972:   { &hf_wbxml_ext_i,",
          "7973:     { \"EXT_I\",",
          "7974:       \"wbxml.ext_i\",",
          "7975:       FT_STRING, BASE_NONE,",
          "7976:       NULL, 0x00,",
          "7977:       NULL, HFILL }",
          "7978:   },",
          "7979:   { &hf_wbxml_ext_t,",
          "7980:     { \"EXT_T\",",
          "7981:       \"wbxml.ext_t\",",
          "7982:       FT_STRING, BASE_NONE,",
          "7983:       NULL, 0x00,",
          "7984:       NULL, HFILL }",
          "7985:   },",
          "7986:   { &hf_wbxml_extension_token,",
          "7987:     { \"Extension Token\",",
          "7988:       \"wbxml.extension_token\",",
          "7989:       FT_STRING, BASE_NONE,",
          "7990:       NULL, 0x00,",
          "7991:       NULL, HFILL }",
          "7992:   },",
          "7993:   { &hf_wbxml_reserved_2,",
          "7994:     { \"RESERVED_2\",",
          "7995:       \"wbxml.reserved_2\",",
          "7996:       FT_NONE, BASE_NONE,",
          "7997:       NULL, 0x00,",
          "7998:       NULL, HFILL }",
          "7999:   },",
          "8000:   { &hf_wbxml_invalid_token,",
          "8001:     { \"Invalid token\",",
          "8002:       \"wbxml.invalid_token\",",
          "8003:       FT_UINT32, BASE_DEC,",
          "8004:       NULL, 0x00,",
          "8005:       NULL, HFILL }",
          "8006:   },",
          "8007:   { &hf_wbxml_known_attrvalue,",
          "8008:     { \"Known attrValue\",",
          "8009:       \"wbxml.known_attrvalue\",",
          "8010:       FT_STRING, BASE_NONE,",
          "8011:       NULL, 0x00,",
          "8012:       NULL, HFILL }",
          "8013:   },",
          "8014:   { &hf_wbxml_known_attrstart,",
          "8015:     { \"Known attrStart\",",
          "8016:       \"wbxml.known_attrstart\",",
          "8017:       FT_STRING, BASE_NONE,",
          "8018:       NULL, 0x00,",
          "8019:       NULL, HFILL }",
          "8020:   },",
          "8021:   { &hf_wbxml_end_literal_tag,",
          "8022:     { \"END (Literal Tag)\",",
          "8023:       \"wbxml.end_literal_tag\",",
          "8024:       FT_STRING, BASE_NONE,",
          "8025:       NULL, 0x00,",
          "8026:       NULL, HFILL }",
          "8027:   },",
          "8028:   { &hf_wbxml_literal_a,",
          "8029:     { \"LITERAL_A\",",
          "8030:       \"wbxml.literal_a\",",
          "8031:       FT_STRING, BASE_NONE,",
          "8032:       NULL, 0x00,",
          "8033:       NULL, HFILL }",
          "8034:   },",
          "8035:   { &hf_wbxml_literal_c,",
          "8036:     { \"LITERAL_C\",",
          "8037:       \"wbxml.literal_c\",",
          "8038:       FT_STRING, BASE_NONE,",
          "8039:       NULL, 0x00,",
          "8040:       NULL, HFILL }",
          "8041:   },",
          "8042:   { &hf_wbxml_literal_ac,",
          "8043:     { \"LITERAL_AC\",",
          "8044:       \"wbxml.literal_ac\",",
          "8045:       FT_STRING, BASE_NONE,",
          "8046:       NULL, 0x00,",
          "8047:       NULL, HFILL }",
          "8048:   },",
          "8049:   { &hf_wbxml_end_pi,",
          "8050:     { \"END (PI)\",",
          "8051:       \"wbxml.end_pi\",",
          "8052:       FT_NONE, BASE_NONE,",
          "8053:       NULL, 0x00,",
          "8054:       NULL, HFILL }",
          "8055:   },",
          "8056:   { &hf_wbxml_end_attribute_list,",
          "8057:     { \"END (attribute list)\",",
          "8058:       \"wbxml.end_attribute_list\",",
          "8059:       FT_NONE, BASE_NONE,",
          "8060:       NULL, 0x00,",
          "8061:       NULL, HFILL }",
          "8062:   },",
          "8063:   { &hf_wbxml_pi_xml,",
          "8064:     { \"PI (XML Processing Instruction)\",",
          "8065:       \"wbxml.pi_xml\",",
          "8066:       FT_NONE, BASE_NONE,",
          "8067:       NULL, 0x00,",
          "8068:       NULL, HFILL }",
          "8069:   },",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8565:   &ett_wbxml,",
          "8566:   &ett_wbxml_str_tbl,",
          "8567:   &ett_wbxml_content,",
          "8568:  };",
          "8571:  proto_wbxml = proto_register_protocol(",
          "8572:            \"WAP Binary XML\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8077:   &ett_wbxml_tags,",
          "8078:  };",
          "8080:  static ei_register_info ei[] = {",
          "8081:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8082:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8083:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8086:  expert_module_t* expert_wbxml;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "8579:  proto_register_field_array(proto_wbxml, hf, array_length(hf));",
          "8580:  proto_register_subtree_array(ett, array_length(ett));",
          "8583:  wbxml_module = prefs_register_protocol(proto_wbxml, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8099:  expert_wbxml = expert_register_protocol(proto_wbxml);",
          "8100:  expert_register_field_array(expert_wbxml, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eca19ca7f8f186932dbc7ff91747186e2247667b",
      "candidate_info": {
        "commit_hash": "eca19ca7f8f186932dbc7ff91747186e2247667b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/eca19ca7f8f186932dbc7ff91747186e2247667b",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "packet-wsp.c: Fix infinite loop in add_headers\n\nBug: 12594\nChange-Id: Id86d1e5f2db12871bc1b345721e79e57192f01e1\nReviewed-on: https://code.wireshark.org/review/16355\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit a9d5256890c9189c7461bfce6ed6edce5d861499)\nReviewed-on: https://code.wireshark.org/review/16358\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: static expert_field ei_wsp_undecoded_parameter = EI_INIT;",
          "377: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
          "378: static expert_field ei_wsp_trailing_quote = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: static expert_field ei_wsp_header_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4370:     guint8      hdr_id, val_id, codepage = 1;",
          "4371:     gint32      tvb_len                  = tvb_reported_length(tvb);",
          "4372:     gint32      offset                   = 0;",
          "4373:     gint32      hdr_len, hdr_start;",
          "4374:     gint32      val_len, val_start;",
          "4375:     gchar      *hdr_str, *val_str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4374:     gint32      save_offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4393:             hdr_len = 1;",
          "4396:                 offset = WellKnownHeader[hdr_id & 0x7F](wsp_headers, tvb,",
          "4397:                                                         hdr_start, pinfo);",
          "4401:                 offset = WellKnownOpenwaveHeader[hdr_id & 0x7F](wsp_headers,",
          "4402:                                                                 tvb, hdr_start, pinfo);",
          "4403:             }",
          "4405:             codepage = tvb_get_guint8(tvb, offset+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4398:                 save_offset = offset;",
          "4402:                 if (save_offset <= offset) {",
          "4403:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
          "4404:                     break;",
          "4405:                 }",
          "4409:                 save_offset = offset;",
          "4413:                 if (save_offset <= offset) {",
          "4414:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
          "4415:                     break;",
          "4416:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7130:       { &ei_hdr_x_wap_tod, { \"wsp.header.x_wap_tod.not_text\", PI_PROTOCOL, PI_WARN, \"Should be encoded as a textual value\", EXPFILL }},",
          "7131:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "7132:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
          "7133:     };",
          "7135:     expert_module_t* expert_wsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7147:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}