{
  "cve_id": "CVE-2015-7830",
  "cve_desc": "The pcapng_read_if_descr_block function in wiretap/pcapng.c in the pcapng parser in Wireshark 1.12.x before 1.12.8 uses too many levels of pointer indirection, which allows remote attackers to cause a denial of service (incorrect free and application crash) via a crafted packet that triggers interface-filter copying.",
  "repo": "wireshark/wireshark",
  "patch_hash": "72497918b16b706c3ba75e1f731f58b802ca14d1",
  "patch_info": {
    "commit_hash": "72497918b16b706c3ba75e1f731f58b802ca14d1",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/72497918b16b706c3ba75e1f731f58b802ca14d1",
    "files": [
      "wiretap/pcapng.c"
    ],
    "message": "pcapng: Fixed copying if_filter_bpf_bytes\n\nBug: 11455\nChange-Id: Ic99ff1bcd7dad65b3ade5a9f46ce0f64573cb059\nReviewed-on: https://code.wireshark.org/review/10147\nPetri-Dish: Stig Bj\u00f8rlykke <stig@bjorlykke.org>\nReviewed-by: Evan Huus <eapache@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Dario Lombardo <lomato@gmail.com>\nReviewed-by: Hadriel Kaplan <hadrielk@yahoo.com>",
    "before_after_code_files": [
      "wiretap/pcapng.c||wiretap/pcapng.c"
    ]
  },
  "patch_diff": {
    "wiretap/pcapng.c||wiretap/pcapng.c": [
      "File: wiretap/pcapng.c -> wiretap/pcapng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "950:                     } else if (option_content[0] == 1) {",
      "951:                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
      "952:                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
      "954:                     }",
      "955:                 } else {",
      "956:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
      "",
      "[Removed Lines]",
      "953:                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
      "",
      "[Added Lines]",
      "953:                         memcpy(wblock->data.if_descr.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb89e7724220098e7b7fba5d31daf0d916b2d553",
      "candidate_info": {
        "commit_hash": "bb89e7724220098e7b7fba5d31daf0d916b2d553",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bb89e7724220098e7b7fba5d31daf0d916b2d553",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "Make option_content a guint8 *.\n\nIt points to an array of bytes, not a character string.\n\nAdd some casts to squelch other Sun/Oracle C warnings.\n\nClean up some comments while we're at it.\n\nChange-Id: Id0908178cb00d537e95569b9ce6f745c8fd6d716\nReviewed-on: https://code.wireshark.org/review/8369\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "515: static int",
          "516: pcapng_read_option(FILE_T fh, pcapng_t *pn, pcapng_option_header_t *oh,",
          "518:                    int *err, gchar **err_info)",
          "519: {",
          "520:     int     block_read;",
          "",
          "[Removed Lines]",
          "517:                    char *content, guint len, guint to_read,",
          "",
          "[Added Lines]",
          "517:                    guint8 *content, guint len, guint to_read,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:     opt_cont_buf_len = to_read;",
          "713:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "715:         return PCAPNG_BLOCK_ERROR;",
          "",
          "[Removed Lines]",
          "712:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "",
          "[Added Lines]",
          "712:     option_content = (guint8 *)g_try_malloc(opt_cont_buf_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:             case(OPT_COMMENT):",
          "738:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "739:                     g_free(wblock->data.section.opt_comment);",
          "741:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "742:                 } else {",
          "743:                     pcapng_debug1(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "740:                     wblock->data.section.opt_comment = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "740:                     wblock->data.section.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:             case(OPT_SHB_HARDWARE):",
          "747:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "748:                     g_free(wblock->data.section.shb_hardware);",
          "750:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "751:                 } else {",
          "752:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "749:                     wblock->data.section.shb_hardware = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "749:                     wblock->data.section.shb_hardware = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "755:             case(OPT_SHB_OS):",
          "756:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "757:                     g_free(wblock->data.section.shb_os);",
          "759:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "760:                 } else {",
          "761:                     pcapng_debug2(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "",
          "[Removed Lines]",
          "758:                     wblock->data.section.shb_os = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "758:                     wblock->data.section.shb_os = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "764:             case(OPT_SHB_USERAPPL):",
          "765:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "766:                     g_free(wblock->data.section.shb_user_appl);",
          "768:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "769:                 } else {",
          "770:                     pcapng_debug1(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "767:                     wblock->data.section.shb_user_appl = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "767:                     wblock->data.section.shb_user_appl = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "882:     opt_cont_buf_len = to_read;",
          "884:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "886:         return FALSE;",
          "",
          "[Removed Lines]",
          "883:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "",
          "[Added Lines]",
          "883:     option_content = (guint8 *)g_try_malloc(opt_cont_buf_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "906:                 break;",
          "908:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "910:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "911:                 } else {",
          "912:                     pcapng_debug1(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "909:                     wblock->data.if_descr.opt_comment = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "909:                     wblock->data.if_descr.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "914:                 break;",
          "916:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "918:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "919:                 } else {",
          "920:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "917:                     wblock->data.if_descr.if_name = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "917:                     wblock->data.if_descr.if_name = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "922:                 break;",
          "924:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "926:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "927:                 } else {",
          "928:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "925:                     wblock->data.if_descr.if_description = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "925:                     wblock->data.if_descr.if_description = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1003:                     if (option_content[0] == 0) {",
          "1005:                         pcapng_debug2(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "1006:                     } else if (option_content[0] == 1) {",
          "1007:                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "1008:                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "1010:                     }",
          "1011:                 } else {",
          "1012:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "1004:                         wblock->data.if_descr.if_filter_str = g_strndup(option_content+1, oh.option_length-1);",
          "1009:                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "",
          "[Added Lines]",
          "1005:                         wblock->data.if_descr.if_filter_str = g_strndup((char *)option_content+1, oh.option_length-1);",
          "1010:                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1021:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1023:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "1024:                 } else {",
          "1025:                     pcapng_debug1(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "1022:                     wblock->data.if_descr.if_os = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "1023:                     wblock->data.if_descr.if_os = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1356:             case(OPT_COMMENT):",
          "1357:                 if (oh->option_length > 0 && oh->option_length < opt_cont_buf_len) {",
          "1358:                     wblock->packet_header->presence_flags |= WTAP_HAS_COMMENTS;",
          "1360:                     pcapng_debug2(\"pcapng_read_packet_block: length %u opt_comment '%s'\", oh->option_length, wblock->packet_header->opt_comment);",
          "1361:                 } else {",
          "1362:                     pcapng_debug1(\"pcapng_read_packet_block: opt_comment length %u seems strange\", oh->option_length);",
          "",
          "[Removed Lines]",
          "1359:                     wblock->packet_header->opt_comment = g_strndup(option_content, oh->option_length);",
          "",
          "[Added Lines]",
          "1360:                     wblock->packet_header->opt_comment = g_strndup((char *)option_content, oh->option_length);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1940:     opt_cont_buf_len = to_read;",
          "1942:     if (opt_cont_buf_len != 0 && option_content == NULL) {",
          "1944:         return FALSE;",
          "",
          "[Removed Lines]",
          "1941:     option_content = (char *)g_try_malloc(opt_cont_buf_len);",
          "",
          "[Added Lines]",
          "1944:     option_content = (guint8 *)g_try_malloc(opt_cont_buf_len);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1964:                 break;",
          "1966:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1968:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "1969:                 } else {",
          "1970:                     pcapng_debug1(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "1967:                     wblock->data.if_stats.opt_comment = g_strndup(option_content, oh.option_length);",
          "",
          "[Added Lines]",
          "1970:                     wblock->data.if_stats.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "996dcc038dea197924285a6717b522a57f95fd65",
      "candidate_info": {
        "commit_hash": "996dcc038dea197924285a6717b522a57f95fd65",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/996dcc038dea197924285a6717b522a57f95fd65",
        "files": [
          "wiretap/erf.c",
          "wiretap/pcapng.c",
          "wiretap/wtap.h",
          "wiretap/wtap_opttypes.c"
        ],
        "message": "Do a deep copy in wtap_block_add_custom_option().\n\nThat way, we don't have to worry about multiple instances of an option\npointing to the same data. and having to worry about freeing data that's\npointed to by another instance.\n\nChange-Id: I3470a9eebf346023713fd0d6ff2451d727c25089\nReviewed-on: https://code.wireshark.org/review/16471\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/erf.c||wiretap/erf.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/wtap.h||wiretap/wtap.h",
          "wiretap/wtap_opttypes.c||wiretap/wtap_opttypes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/erf.c||wiretap/erf.c": [
          "File: wiretap/erf.c -> wiretap/erf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1561:       case ERF_META_TAG_filter:",
          "1562:         if_filter.if_filter_str = g_strndup((gchar*) tag.value, tag.length);",
          "1563:  wtap_block_add_custom_option(int_data, OPT_IDB_FILTER, &if_filter, sizeof if_filter);",
          "1564:         if_info->set_flags.filter = 1;",
          "1565:         break;",
          "1566:       default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1564:  g_free(if_filter.if_filter_str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1584:   if (state->if_map->module_filter_str && !if_info->set_flags.filter) {",
          "1587:     wtap_block_add_custom_option(int_data, OPT_IDB_FILTER, &if_filter, sizeof if_filter);",
          "",
          "[Removed Lines]",
          "1586:     if_filter.if_filter_str = g_strdup(state->if_map->module_filter_str);",
          "",
          "[Added Lines]",
          "1587:     if_filter.if_filter_str = state->if_map->module_filter_str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1727:           if (!if_info->set_flags.filter) {",
          "1728:             if_filter.if_filter_str = g_strndup((gchar*) tag.value, tag.length);",
          "1729:             wtap_block_add_custom_option(int_data, OPT_IDB_FILTER, &if_filter, sizeof if_filter);",
          "1730:             if_info->set_flags.filter = 1;",
          "1731:           }",
          "1732:           break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1731:             g_free(if_filter.if_filter_str);",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:                         pcapng_debug(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", if_filter.if_filter_str, oh.option_length);",
          "886:                     } else if (option_content[0] == 1) {",
          "887:                         if_filter.bpf_filter_len = oh.option_length-1;",
          "890:                     }",
          "892:                     wtap_block_add_custom_option(wblock->block, OPT_IDB_FILTER, &if_filter, sizeof if_filter);",
          "893:                 } else {",
          "894:                     pcapng_debug(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "895:                 }",
          "",
          "[Removed Lines]",
          "888:                         if_filter.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "889:                         memcpy(if_filter.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
          "",
          "[Added Lines]",
          "888:                         if_filter.if_filter_bpf_bytes = (guint8 *)option_content+1;",
          "892:                     g_free(if_filter.if_filter_str);",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h"
        ],
        "wiretap/wtap_opttypes.c||wiretap/wtap_opttypes.c": [
          "File: wiretap/wtap_opttypes.c -> wiretap/wtap_opttypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: } wtap_blocktype_t;",
          "51: typedef void (*wtap_opttype_free_custom_func)(void* data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: typedef void *(*wtap_opttype_dup_custom_func)(void* src);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         \"Comment\",",
          "87:         WTAP_OPTTYPE_STRING,",
          "88:         WTAP_OPTTYPE_FLAG_MULTIPLE_ALLOWED,",
          "89:         NULL",
          "90:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         NULL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "788: {",
          "789:     wtap_opttype_return_val ret;",
          "790:     wtap_option_t *opt;",
          "792:     ret = wtap_block_add_option_common(block, option_id, WTAP_OPTTYPE_CUSTOM, &opt);",
          "793:     if (ret != WTAP_OPTTYPE_SUCCESS)",
          "794:         return ret;",
          "795:     opt->value.customval.size = (guint)value_size;",
          "797:     return WTAP_OPTTYPE_SUCCESS;",
          "798: }",
          "",
          "[Removed Lines]",
          "796:     opt->value.customval.data = g_memdup(value, (guint)value_size);",
          "",
          "[Added Lines]",
          "794:     wtap_opttype_t *opttype;",
          "799:     opttype = &g_array_index(block->info->options, wtap_opttype_t, opt->option_id);",
          "801:     opt->value.customval.data = opttype->dup_func(value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "861:     memcpy(dest_block->mandatory_data, src_block->mandatory_data, sizeof(wtapng_if_stats_mandatory_t));",
          "862: }",
          "864: static void idb_filter_free(void* data)",
          "865: {",
          "866:     wtapng_if_descr_filter_t* filter = (wtapng_if_descr_filter_t*)data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869: static void *idb_filter_dup(void* src)",
          "870: {",
          "871:     wtapng_if_descr_filter_t* filter_src = (wtapng_if_descr_filter_t*)src;",
          "872:     wtapng_if_descr_filter_t* filter_dest;",
          "875:     filter_dest = g_malloc(sizeof (wtapng_if_descr_filter_t));",
          "876:     filter_dest->if_filter_str = g_strdup(filter_src->if_filter_str);",
          "877:     filter_dest->bpf_filter_len = filter_src->bpf_filter_len;",
          "878:     filter_dest->if_filter_bpf_bytes = g_memdup(filter_src->if_filter_bpf_bytes, filter_src->bpf_filter_len);",
          "879:     return (void *)filter_dest;",
          "880: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "929:         \"SHB Hardware\",",
          "930:         WTAP_OPTTYPE_STRING,",
          "931:         0,",
          "932:         NULL",
          "933:     };",
          "934:     static wtap_opttype_t shb_os = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:         NULL,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "936:         \"SHB Operating System\",",
          "937:         WTAP_OPTTYPE_STRING,",
          "938:         0,",
          "939:         NULL",
          "940:     };",
          "941:     static wtap_opttype_t shb_userappl = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "958:         NULL,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "943:         \"SHB User Application\",",
          "944:         WTAP_OPTTYPE_STRING,",
          "945:         0,",
          "946:         NULL",
          "947:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966:         NULL,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "960:         \"IDB Name\",",
          "961:         WTAP_OPTTYPE_STRING,",
          "962:         0,",
          "963:         NULL",
          "964:     };",
          "965:     static wtap_opttype_t if_description = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:         NULL,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "967:         \"IDB Description\",",
          "968:         WTAP_OPTTYPE_STRING,",
          "969:         0,",
          "970:         NULL",
          "971:     };",
          "972:     static wtap_opttype_t if_speed = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "992:         NULL,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "974:         \"IDB Speed\",",
          "975:         WTAP_OPTTYPE_UINT64,",
          "976:         0,",
          "977:         NULL",
          "978:     };",
          "979:     static wtap_opttype_t if_tsresol = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000:         NULL,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "981:         \"IDB Time Stamp Resolution\",",
          "983:         0,",
          "984:         NULL",
          "985:     };",
          "986:     static wtap_opttype_t if_filter = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:         NULL,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "988:         \"IDB Filter\",",
          "989:         WTAP_OPTTYPE_CUSTOM,",
          "990:         0,",
          "991:         idb_filter_free",
          "992:     };",
          "993:     static wtap_opttype_t if_os = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:         idb_filter_dup,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "995:         \"IDB Operating System\",",
          "996:         WTAP_OPTTYPE_STRING,",
          "997:         0,",
          "998:         NULL",
          "999:     };",
          "1000:     static wtap_opttype_t if_fcslen = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1024:         NULL,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1002:         \"IDB FCS Length\",",
          "1003:         WTAP_OPTTYPE_UINT8,",
          "1004:         0,",
          "1005:         NULL",
          "1006:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:         NULL,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1019:         \"NRB DNS server name\",",
          "1020:         WTAP_OPTTYPE_STRING,",
          "1021:         0,",
          "1022:         NULL",
          "1023:     };",
          "1024:     static wtap_opttype_t ns_dnsIP4addr = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:         NULL,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1026:         \"NRB DNS server IPv4 address\",",
          "1027:         WTAP_OPTTYPE_IPv4,",
          "1028:         0,",
          "1029:         NULL",
          "1030:     };",
          "1031:     static wtap_opttype_t ns_dnsIP6addr = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:         NULL,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1033:         \"NRB DNS server IPv6 address\",",
          "1034:         WTAP_OPTTYPE_IPv6,",
          "1035:         0,",
          "1036:         NULL",
          "1037:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:         NULL,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1050:         \"ISB Start Time\",",
          "1051:         WTAP_OPTTYPE_UINT64,",
          "1052:         0,",
          "1053:         NULL",
          "1054:     };",
          "1055:     static wtap_opttype_t isb_endtime = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:         NULL,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1057:         \"ISB End Time\",",
          "1058:         WTAP_OPTTYPE_UINT64,",
          "1059:         0,",
          "1060:         NULL",
          "1061:     };",
          "1062:     static wtap_opttype_t isb_ifrecv = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:         NULL,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1064:         \"ISB Received Packets\",",
          "1065:         WTAP_OPTTYPE_UINT64,",
          "1066:         0,",
          "1067:         NULL",
          "1068:     };",
          "1069:     static wtap_opttype_t isb_ifdrop = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1100:         NULL,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1071:         \"ISB Dropped Packets\",",
          "1072:         WTAP_OPTTYPE_UINT64,",
          "1073:         0,",
          "1074:         NULL",
          "1075:     };",
          "1076:     static wtap_opttype_t isb_filteraccept = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:         NULL,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1078:         \"ISB Packets Accepted By Filter\",",
          "1079:         WTAP_OPTTYPE_UINT64,",
          "1080:         0,",
          "1081:         NULL",
          "1082:     };",
          "1083:     static wtap_opttype_t isb_osdrop = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116:         NULL,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1085:         \"ISB Packets Dropped By The OS\",",
          "1086:         WTAP_OPTTYPE_UINT64,",
          "1087:         0,",
          "1088:         NULL",
          "1089:     };",
          "1090:     static wtap_opttype_t isb_usrdeliv = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1124:         NULL,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1092:         \"ISB Packets Delivered To The User\",",
          "1093:         WTAP_OPTTYPE_UINT64,",
          "1094:         0,",
          "1095:         NULL",
          "1096:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132:         NULL,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08d49ff2e06cb35dc9084735aa60c83686afdd9c",
      "candidate_info": {
        "commit_hash": "08d49ff2e06cb35dc9084735aa60c83686afdd9c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/08d49ff2e06cb35dc9084735aa60c83686afdd9c",
        "files": [
          "capinfos.c",
          "cfile.c",
          "debian/libwiretap0.symbols",
          "editcap.c",
          "epan/wslua/wslua.h",
          "epan/wslua/wslua_capture_info.c",
          "file.c",
          "reordercap.c",
          "summary.c",
          "tshark.c",
          "ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c",
          "wiretap/CMakeLists.txt",
          "wiretap/Makefile.common",
          "wiretap/erf.c",
          "wiretap/file_access.c",
          "wiretap/lanalyzer.c",
          "wiretap/merge.c",
          "wiretap/nettrace_3gpp_32_423.c",
          "wiretap/pcapng.c",
          "wiretap/pcapng.h",
          "wiretap/wtap-int.h",
          "wiretap/wtap.c",
          "wiretap/wtap.h",
          "wiretap/wtap_opttypes.c",
          "wiretap/wtap_opttypes.h"
        ],
        "message": "Making wiretap option blocks more generic.\n\nThis was inspired by https://code.wireshark.org/review/9729/, but takes it in a different direction where all options are put into an array, regardless of whether they are \"standard\" or \"custom\".  It should be easier to add \"custom\" options in this design. Some, but not all blocks have been converted.\nDescriptions of some of the block options have been moved from wtap.h to pcapng.h as it seems to be the one that implements the description of the blocks.\n\nAlso what could be added/refactored is registering block behavior.\n\nChange-Id: I3dffa38f0bb088f98749a4f97a3b7655baa4aa6a\nReviewed-on: https://code.wireshark.org/review/13667\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "capinfos.c||capinfos.c",
          "cfile.c||cfile.c",
          "debian/libwiretap0.symbols||debian/libwiretap0.symbols",
          "editcap.c||editcap.c",
          "epan/wsluwslua.h||epan/wslua/wslua.h",
          "epan/wsluwslua_capture_info.c||epan/wslua/wslua_capture_info.c",
          "file.c||file.c",
          "reordercap.c||reordercap.c",
          "summary.c||summary.c",
          "tshark.c||tshark.c",
          "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c",
          "ui/tap_export_pdu.c||ui/tap_export_pdu.c",
          "wiretap/Makefile.common||wiretap/Makefile.common",
          "wiretap/erf.c||wiretap/erf.c",
          "wiretap/file_access.c||wiretap/file_access.c",
          "wiretap/lanalyzer.c||wiretap/lanalyzer.c",
          "wiretap/merge.c||wiretap/merge.c",
          "wiretap/nettrace_3gpp_32_423.c||wiretap/nettrace_3gpp_32_423.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/pcapng.h||wiretap/pcapng.h",
          "wiretap/wtap-int.h||wiretap/wtap-int.h",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h",
          "wiretap/wtap_opttypes.c||wiretap/wtap_opttypes.c",
          "wiretap/wtap_opttypes.h||wiretap/wtap_opttypes.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "capinfos.c||capinfos.c": [
          "File: capinfos.c -> capinfos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #include <wsutil/privileges.h>",
          "81: #include <wsutil/ws_diag_control.h>",
          "82: #include <wsutil/ws_version_info.h>",
          "84: #ifdef HAVE_PLUGINS",
          "85: #include <wsutil/plugins.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <wiretap/wtap_opttypes.h>",
          "84: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1039:   nstime_t              prev_time;",
          "1040:   gboolean              know_order = FALSE;",
          "1041:   order_t               order = IN_ORDER;",
          "1043:   guint                 i;",
          "1044:   wtapng_iface_descriptions_t *idb_info;",
          "1046:   g_assert(wth != NULL);",
          "1047:   g_assert(filename != NULL);",
          "",
          "[Removed Lines]",
          "1042:   const wtapng_section_t *shb_inf;",
          "",
          "[Added Lines]",
          "1044:   wtap_optionblock_t    shb_inf;",
          "1047:   char                  *shb_str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1074:   for (i = 0; i < cf_info.num_interfaces; i++) {",
          "1076:     gchar *s = wtap_get_debug_if_descr(if_descr, 21, \"\\n\");",
          "1077:     g_array_append_val(cf_info.idb_info_strings, s);",
          "1078:   }",
          "",
          "[Removed Lines]",
          "1075:     const wtapng_if_descr_t *if_descr = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, i);",
          "",
          "[Added Lines]",
          "1078:     const wtap_optionblock_t if_descr = g_array_index(idb_info->interface_data, wtap_optionblock_t, i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:   shb_inf = wtap_file_get_shb(wth);",
          "1247:   if (shb_inf) {",
          "1253:   }",
          "1255:   string_replace_newlines(cf_info.comment);",
          "",
          "[Removed Lines]",
          "1249:     cf_info.comment  = g_strdup(shb_inf->opt_comment);",
          "1250:     cf_info.hardware = g_strdup(shb_inf->shb_hardware);",
          "1251:     cf_info.os       = g_strdup(shb_inf->shb_os);",
          "1252:     cf_info.usr_appl = g_strdup(shb_inf->shb_user_appl);",
          "",
          "[Added Lines]",
          "1252:     wtap_optionblock_get_option_string(shb_inf, OPT_COMMENT, &shb_str);",
          "1253:     cf_info.comment  = g_strdup(shb_str);",
          "1254:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_HARDWARE, &shb_str);",
          "1255:     cf_info.hardware = g_strdup(shb_str);",
          "1256:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_OS, &shb_str);",
          "1257:     cf_info.os       = g_strdup(shb_str);",
          "1258:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_USERAPPL, &shb_str);",
          "1259:     cf_info.usr_appl = g_strdup(shb_str);",
          "",
          "---------------"
        ],
        "cfile.c||cfile.c": [
          "File: cfile.c -> cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <glib.h>",
          "28: #include <epan/packet.h>",
          "30: #include \"cfile.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: {",
          "35:   capture_file *cf = (capture_file *) data;",
          "36:   wtapng_iface_descriptions_t *idb_info;",
          "39:   idb_info = wtap_file_get_idb_info(cf->wth);",
          "41:   if (interface_id < idb_info->interface_data->len)",
          "44:   g_free(idb_info);",
          "46:   if (wtapng_if_descr) {",
          "51:   }",
          "52:   return \"unknown\";",
          "53: }",
          "",
          "[Removed Lines]",
          "37:   const wtapng_if_descr_t *wtapng_if_descr = NULL;",
          "42:     wtapng_if_descr = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, interface_id);",
          "47:     if (wtapng_if_descr->if_name)",
          "48:       return wtapng_if_descr->if_name;",
          "49:     else if (wtapng_if_descr->if_description)",
          "50:       return wtapng_if_descr->if_description;",
          "",
          "[Added Lines]",
          "38:   wtap_optionblock_t wtapng_if_descr = NULL;",
          "39:   char* interface_name;",
          "44:     wtapng_if_descr = g_array_index(idb_info->interface_data, wtap_optionblock_t, interface_id);",
          "49:     wtap_optionblock_get_option_string(wtapng_if_descr, OPT_IDB_NAME, &interface_name);",
          "50:     if (interface_name)",
          "51:       return interface_name;",
          "52:     wtap_optionblock_get_option_string(wtapng_if_descr, OPT_IDB_DESCR, &interface_name);",
          "53:     if (interface_name)",
          "54:       return interface_name;",
          "",
          "---------------"
        ],
        "debian/libwiretap0.symbols||debian/libwiretap0.symbols": [
          "File: debian/libwiretap0.symbols -> debian/libwiretap0.symbols",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  wtap_file_type_subtype_string@Base 1.12.0~rc1",
          "63:  wtap_free_extensions_list@Base 1.9.1",
          "64:  wtap_free_idb_info@Base 1.99.9",
          "67:  wtap_fstat@Base 1.9.1",
          "68:  wtap_get_all_file_extensions_list@Base 1.12.0~rc1",
          "69:  wtap_get_bytes_dumped@Base 1.9.1",
          "",
          "[Removed Lines]",
          "65:  wtap_free_nrb@Base 1.99.9",
          "66:  wtap_free_shb@Base 1.99.9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  wtap_has_open_info@Base 1.12.0~rc1",
          "80:  wtap_iscompressed@Base 1.9.1",
          "81:  wtap_open_offline@Base 1.9.1",
          "82:  wtap_pcap_encap_to_wtap_encap@Base 1.9.1",
          "83:  wtap_phdr@Base 1.9.1",
          "84:  wtap_phdr_cleanup@Base 1.99.2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:  wtap_optionblock_create@Base 2.1.0",
          "81:  wtap_optionblock_free@Base 2.1.0",
          "82:  wtap_optionblock_get_mandatory_data@Base 2.1.0",
          "83:  wtap_optionblock_get_option_custom@Base 2.1.0",
          "84:  wtap_optionblock_get_option_string@Base 2.1.0",
          "85:  wtap_optionblock_get_option_uint8@Base 2.1.0",
          "86:  wtap_optionblock_get_option_uint64@Base 2.1.0",
          "87:  wtap_optionblock_set_option_custom@Base 2.1.0",
          "88:  wtap_optionblock_set_option_string@Base 2.1.0",
          "89:  wtap_optionblock_set_option_uint8@Base 2.1.0",
          "90:  wtap_optionblock_set_option_uint64@Base 2.1.0",
          "",
          "---------------"
        ],
        "editcap.c||editcap.c": [
          "File: editcap.c -> editcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #include <wsutil/str_util.h>",
          "90: #include <wsutil/ws_diag_control.h>",
          "91: #include <wsutil/ws_version_info.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #include <wiretap/wtap_opttypes.h>",
          "93: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "937: static wtap_dumper *",
          "938: editcap_dump_open(const char *filename, guint32 snaplen,",
          "940:                   wtapng_iface_descriptions_t *idb_inf,",
          "942: {",
          "943:   wtap_dumper *pdh;",
          "",
          "[Removed Lines]",
          "939:                   wtapng_section_t *shb_hdr,",
          "941:                   wtapng_name_res_t *nrb_hdr, int *write_err)",
          "",
          "[Added Lines]",
          "941:                   wtap_optionblock_t shb_hdr,",
          "943:                   wtap_optionblock_t nrb_hdr, int *write_err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "998:     const struct wtap_pkthdr    *phdr;",
          "999:     struct wtap_pkthdr           temp_phdr;",
          "1000:     wtapng_iface_descriptions_t *idb_inf = NULL;",
          "1004: #ifdef HAVE_PLUGINS",
          "1005:     char* init_progfile_dir_error;",
          "",
          "[Removed Lines]",
          "1001:     wtapng_section_t            *shb_hdr = NULL;",
          "1002:     wtapng_name_res_t           *nrb_hdr = NULL;",
          "",
          "[Added Lines]",
          "1003:     wtap_optionblock_t           shb_hdr = NULL;",
          "1004:     wtap_optionblock_t           nrb_hdr = NULL;",
          "1005:     char                        *shb_user_appl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1410:                 g_assert(filename);",
          "1415:                 }",
          "1417:                 pdh = editcap_dump_open(filename,",
          "",
          "[Removed Lines]",
          "1413:                 if (shb_hdr->shb_user_appl == NULL) {",
          "1414:                     shb_hdr->shb_user_appl = g_strdup(\"Editcap \" VERSION);",
          "",
          "[Added Lines]",
          "1416:                 wtap_optionblock_get_option_string(shb_hdr, OPT_SHB_USERAPPL, &shb_user_appl);",
          "1417:                 if (shb_user_appl == NULL) {",
          "1418:                     shb_user_appl = g_strdup(\"Editcap \" VERSION);",
          "1419:                     wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_USERAPPL, shb_user_appl);",
          "1420:                     g_free(shb_user_appl);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1873:                     wtap_strerror(write_err));",
          "1874:             goto error_on_exit;",
          "1875:         }",
          "1877:         shb_hdr = NULL;",
          "1879:         nrb_hdr = NULL;",
          "1880:         g_free(filename);",
          "",
          "[Removed Lines]",
          "1876:         wtap_free_shb(shb_hdr);",
          "1878:         wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "1882:         wtap_optionblock_free(shb_hdr);",
          "1884:         wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1899:     return 0;",
          "1901: error_on_exit:",
          "1904:     g_free(idb_inf);",
          "1905:     exit(2);",
          "1906: }",
          "",
          "[Removed Lines]",
          "1902:     wtap_free_shb(shb_hdr);",
          "1903:     wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "1908:     wtap_optionblock_free(shb_hdr);",
          "1909:     wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------"
        ],
        "epan/wsluwslua.h||epan/wslua/wslua.h": [
          "File: epan/wsluwslua.h -> epan/wslua/wslua.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557: #define WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(C,name,member,option) \\",
          "558:     WSLUA_ATTRIBUTE_GET(C,name, { \\",
          "559:         char* str;  \\",
          "560:         wtap_optionblock_get_option_string(obj->member, option, &str); \\",
          "561:         lua_pushstring(L,str); /* this pushes nil if obj->member is null */ \\",
          "562:     })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612: #define WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_SETTER(C,field,member,option) \\",
          "613:     static int C##_set_##field (lua_State* L) { \\",
          "614:         C obj = check##C (L,1); \\",
          "615:         gchar* s = NULL; \\",
          "616:         if (lua_isstring(L,-1) || lua_isnil(L,-1)) { \\",
          "617:             s = g_strdup(lua_tostring(L,-1)); \\",
          "618:         } else { \\",
          "619:             return luaL_error(L, \"%s's attribute `%s' must be a string or nil\", #C , #field ); \\",
          "620:         } \\",
          "621:         wtap_optionblock_set_option_string(obj->member, option, s); \\",
          "622:         return 0; \\",
          "623:     } \\",
          "625:     typedef void __dummy##C##_set_##field",
          "",
          "---------------"
        ],
        "epan/wsluwslua_capture_info.c||epan/wslua/wslua_capture_info.c": [
          "File: epan/wsluwslua_capture_info.c -> epan/wslua/wslua_capture_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfo,comment,wth->shb_hdr,OPT_COMMENT);",
          "116: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_SETTER(CaptureInfo,comment,wth->shb_hdr,OPT_COMMENT);",
          "120: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfo,hardware,wth->shb_hdr,OPT_SHB_HARDWARE);",
          "121: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_SETTER(CaptureInfo,hardware,wth->shb_hdr,OPT_SHB_HARDWARE);",
          "125: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfo,os,wth->shb_hdr,OPT_SHB_OS);",
          "126: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_SETTER(CaptureInfo,os,wth->shb_hdr,OPT_SHB_OS);",
          "130: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfo,user_app,wth->shb_hdr,OPT_SHB_USERAPPL);",
          "131: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_SETTER(CaptureInfo,user_app,wth->shb_hdr,OPT_SHB_USERAPPL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfoConst,comment,wth->shb_hdr,OPT_COMMENT);",
          "362: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfoConst,hardware,wth->shb_hdr,OPT_SHB_HARDWARE);",
          "366: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfoConst,os,wth->shb_hdr,OPT_SHB_OS);",
          "370: WSLUA_ATTRIBUTE_NAMED_OPT_BLOCK_STRING_GETTER(CaptureInfoConst,user_app,wth->shb_hdr,OPT_SHB_USERAPPL);",
          "",
          "---------------"
        ],
        "file.c||file.c": [
          "File: file.c -> file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4475:        or moving the capture file, we have to do it by writing the packets",
          "4479:     wtapng_iface_descriptions_t *idb_inf = NULL;",
          "4481:     int encap;",
          "",
          "[Removed Lines]",
          "4478:     wtapng_section_t            *shb_hdr = NULL;",
          "4480:     wtapng_name_res_t           *nrb_hdr = NULL;",
          "",
          "[Added Lines]",
          "4478:     wtap_optionblock_t           shb_hdr = NULL;",
          "4480:     wtap_optionblock_t           nrb_hdr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4698:   int                          err;",
          "4699:   wtap_dumper                 *pdh;",
          "4700:   save_callback_args_t         callback_args;",
          "4702:   wtapng_iface_descriptions_t *idb_inf = NULL;",
          "4704:   int                          encap;",
          "4706:   cf_callback_invoke(cf_cb_file_export_specified_packets_started, (gpointer)fname);",
          "",
          "[Removed Lines]",
          "4701:   wtapng_section_t            *shb_hdr = NULL;",
          "4703:   wtapng_name_res_t           *nrb_hdr = NULL;",
          "",
          "[Added Lines]",
          "4701:   wtap_optionblock_t           shb_hdr = NULL;",
          "4703:   wtap_optionblock_t           nrb_hdr = NULL;",
          "",
          "---------------"
        ],
        "reordercap.c||reordercap.c": [
          "File: reordercap.c -> reordercap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include <wsutil/file_util.h>",
          "47: #include <wsutil/ws_diag_control.h>",
          "48: #include <wsutil/ws_version_info.h>",
          "51: static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include <wiretap/wtap_opttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     guint wrong_order_count = 0;",
          "188:     gboolean write_output_regardless = TRUE;",
          "189:     guint i;",
          "191:     wtapng_iface_descriptions_t *idb_inf = NULL;",
          "194:     GPtrArray *frames;",
          "195:     FrameRecord_t *prevFrame = NULL;",
          "",
          "[Removed Lines]",
          "190:     wtapng_section_t            *shb_hdr = NULL;",
          "192:     wtapng_name_res_t           *nrb_hdr = NULL;",
          "",
          "[Added Lines]",
          "191:     wtap_optionblock_t           shb_hdr = NULL;",
          "193:     wtap_optionblock_t           nrb_hdr = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:     if (pdh == NULL) {",
          "288:         fprintf(stderr, \"reordercap: Failed to open output file: (%s) - error %s\\n\",",
          "289:                 outfile, wtap_strerror(err));",
          "292:         exit(1);",
          "293:     }",
          "",
          "[Removed Lines]",
          "290:         wtap_free_shb(shb_hdr);",
          "291:         wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "291:         wtap_optionblock_free(shb_hdr);",
          "292:         wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "361:     if (!wtap_dump_close(pdh, &err)) {",
          "362:         fprintf(stderr, \"reordercap: Error closing %s: %s\\n\", outfile,",
          "363:                 wtap_strerror(err));",
          "366:         exit(1);",
          "367:     }",
          "372:     wtap_fdclose(wth);",
          "",
          "[Removed Lines]",
          "364:         wtap_free_shb(shb_hdr);",
          "365:         wtap_free_nrb(nrb_hdr);",
          "368:     wtap_free_shb(shb_hdr);",
          "369:     wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "365:         wtap_optionblock_free(shb_hdr);",
          "366:         wtap_optionblock_free(nrb_hdr);",
          "369:     wtap_optionblock_free(shb_hdr);",
          "370:     wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------"
        ],
        "summary.c||summary.c": [
          "File: summary.c -> summary.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <config.h>",
          "25: #include <wiretap/pcap-encap.h>",
          "27: #include <epan/packet.h>",
          "28: #include \"cfile.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <wiretap/wtap_opttypes.h>",
          "27: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: {",
          "106:   frame_data    *first_frame, *cur_frame;",
          "107:   guint32        framenum;",
          "109:   iface_options iface;",
          "110:   guint i;",
          "111:   wtapng_iface_descriptions_t* idb_info;",
          "115:   st->packet_count_ts = 0;",
          "116:   st->start_time = 0;",
          "",
          "[Removed Lines]",
          "108:   const wtapng_section_t* shb_inf;",
          "112:   wtapng_if_descr_t wtapng_if_descr;",
          "113:   wtapng_if_stats_t *if_stats;",
          "",
          "[Added Lines]",
          "110:   wtap_optionblock_t shb_inf;",
          "114:   wtap_optionblock_t wtapng_if_descr;",
          "115:   wtapng_if_descr_mandatory_t *wtapng_if_descr_mand;",
          "116:   wtap_optionblock_t if_stats;",
          "117:   guint64 isb_ifdrop;",
          "118:   char* if_string;",
          "119:   wtapng_if_descr_filter_t* if_filter;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:     st->shb_os         = NULL;",
          "164:     st->shb_user_appl  = NULL;",
          "165:   }else{",
          "170:   }",
          "172:   st->ifaces  = g_array_new(FALSE, FALSE, sizeof(iface_options));",
          "173:   idb_info = wtap_file_get_idb_info(cf->wth);",
          "174:   for (i = 0; i < idb_info->interface_data->len; i++) {",
          "179:     iface.drops_known = FALSE;",
          "180:     iface.drops = 0;",
          "182:     iface.has_snap = (iface.snap != 65535);",
          "184:     iface.isb_comment = NULL;",
          "189:         iface.drops_known = TRUE;",
          "191:       }",
          "194:     }",
          "195:     g_array_append_val(st->ifaces, iface);",
          "196:   }",
          "",
          "[Removed Lines]",
          "166:     st->opt_comment    = shb_inf->opt_comment;",
          "167:     st->shb_hardware   = shb_inf->shb_hardware;",
          "168:     st->shb_os         = shb_inf->shb_os;",
          "169:     st->shb_user_appl  = shb_inf->shb_user_appl;",
          "175:     wtapng_if_descr = g_array_index(idb_info->interface_data, wtapng_if_descr_t, i);",
          "176:     iface.cfilter = g_strdup(wtapng_if_descr.if_filter_str);",
          "177:     iface.name = g_strdup(wtapng_if_descr.if_name);",
          "178:     iface.descr = g_strdup(wtapng_if_descr.if_description);",
          "181:     iface.snap = wtapng_if_descr.snap_len;",
          "183:     iface.encap_type = wtapng_if_descr.wtap_encap;",
          "185:     if(wtapng_if_descr.num_stat_entries == 1){",
          "187:       if_stats = &g_array_index(wtapng_if_descr.interface_statistics, wtapng_if_stats_t, 0);",
          "188:       if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "190:         iface.drops = if_stats->isb_ifdrop;",
          "193:       iface.isb_comment = if_stats->opt_comment;",
          "",
          "[Added Lines]",
          "172:     wtap_optionblock_get_option_string(shb_inf, OPT_COMMENT, &st->opt_comment);",
          "173:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_HARDWARE, &st->shb_hardware);",
          "174:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_OS, &st->shb_os);",
          "175:     wtap_optionblock_get_option_string(shb_inf, OPT_SHB_USERAPPL, (char**)&st->shb_user_appl);",
          "181:     wtapng_if_descr = g_array_index(idb_info->interface_data, wtap_optionblock_t, i);",
          "182:     wtapng_if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(wtapng_if_descr);",
          "183:     wtap_optionblock_get_option_custom(wtapng_if_descr, OPT_IDB_FILTER, (void**)&if_filter);",
          "184:     iface.cfilter = g_strdup(if_filter->if_filter_str);",
          "185:     wtap_optionblock_get_option_string(wtapng_if_descr, OPT_IDB_NAME, &if_string);",
          "186:     iface.name = g_strdup(if_string);",
          "187:     wtap_optionblock_get_option_string(wtapng_if_descr, OPT_IDB_DESCR, &if_string);",
          "188:     iface.descr = g_strdup(if_string);",
          "191:     iface.snap = wtapng_if_descr_mand->snap_len;",
          "193:     iface.encap_type = wtapng_if_descr_mand->wtap_encap;",
          "195:     if(wtapng_if_descr_mand->num_stat_entries == 1){",
          "197:       if_stats = g_array_index(wtapng_if_descr_mand->interface_statistics, wtap_optionblock_t, 0);",
          "198:       wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_IFDROP, &isb_ifdrop);",
          "199:       if (isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "201:         iface.drops = isb_ifdrop;",
          "204:       wtap_optionblock_get_option_string(if_stats, OPT_COMMENT, &iface.isb_comment);",
          "",
          "---------------"
        ],
        "tshark.c||tshark.c": [
          "File: tshark.c -> tshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include <wsutil/report_err.h>",
          "68: #include <wsutil/ws_diag_control.h>",
          "69: #include <wsutil/ws_version_info.h>",
          "71: #include \"globals.h\"",
          "72: #include <epan/timestamp.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: #include <wiretap/wtap_opttypes.h>",
          "71: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3170:   char        *save_file_string = NULL;",
          "3171:   gboolean     filtering_tap_listeners;",
          "3172:   guint        tap_flags;",
          "3174:   wtapng_iface_descriptions_t *idb_inf = NULL;",
          "3176:   struct wtap_pkthdr phdr;",
          "3177:   Buffer       buf;",
          "3178:   epan_dissect_t *edt = NULL;",
          "3180:   wtap_phdr_init(&phdr);",
          "",
          "[Removed Lines]",
          "3173:   wtapng_section_t            *shb_hdr = NULL;",
          "3175:   wtapng_name_res_t           *nrb_hdr = NULL;",
          "",
          "[Added Lines]",
          "3175:   wtap_optionblock_t           shb_hdr = NULL;",
          "3177:   wtap_optionblock_t           nrb_hdr = NULL;",
          "3181:   char                        *shb_user_appl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3205:     nrb_hdr = wtap_file_get_nrb_for_new_file(cf->wth);",
          "3211:     }",
          "3213:     if (linktype != WTAP_ENCAP_PER_PACKET &&",
          "",
          "[Removed Lines]",
          "3208:     if (shb_hdr->shb_user_appl == NULL) {",
          "3210:         shb_hdr->shb_user_appl = g_strdup_printf(\"TShark (Wireshark) %s\", get_ws_vcs_version_info());",
          "",
          "[Added Lines]",
          "3211:     wtap_optionblock_get_option_string(shb_hdr, OPT_SHB_USERAPPL, &shb_user_appl);",
          "3212:     if (shb_user_appl == NULL) {",
          "3214:         shb_user_appl = g_strdup_printf(\"TShark (Wireshark) %s\", get_ws_vcs_version_info());",
          "3215:         wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_USERAPPL, shb_user_appl);",
          "3216:         g_free(shb_user_appl);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3448:                 break;",
          "3449:               }",
          "3450:               wtap_dump_close(pdh, &err);",
          "3453:               exit(2);",
          "3454:             }",
          "3455:           }",
          "",
          "[Removed Lines]",
          "3451:               wtap_free_shb(shb_hdr);",
          "3452:               wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "3457:               wtap_optionblock_free(shb_hdr);",
          "3458:               wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3563:               break;",
          "3564:             }",
          "3565:             wtap_dump_close(pdh, &err);",
          "3568:             exit(2);",
          "3569:           }",
          "3570:         }",
          "",
          "[Removed Lines]",
          "3566:             wtap_free_shb(shb_hdr);",
          "3567:             wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "3572:             wtap_optionblock_free(shb_hdr);",
          "3573:             wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3680:   cf->wth = NULL;",
          "3682:   g_free(save_file_string);",
          "3686:   return err;",
          "3687: }",
          "",
          "[Removed Lines]",
          "3683:   wtap_free_shb(shb_hdr);",
          "3684:   wtap_free_nrb(nrb_hdr);",
          "",
          "[Added Lines]",
          "3689:   wtap_optionblock_free(shb_hdr);",
          "3690:   wtap_optionblock_free(nrb_hdr);",
          "",
          "---------------"
        ],
        "ui/gtk/file_import_dlg.c||ui/gtk/file_import_dlg.c": [
          "File: ui/gtk/file_import_dlg.c -> ui/gtk/file_import_dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"wsutil/tempfile.h\"",
          "49: #include \"wsutil/os_version_info.h\"",
          "50: #include \"wsutil/ws_version_info.h\"",
          "52: #define INPUT_FRM_KEY                   \"input_frame\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #include \"wiretap/wtap_opttypes.h\"",
          "52: #include \"wiretap/pcapng.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:     int   err;",
          "460:     wtapng_iface_descriptions_t *idb_inf;",
          "462:     GString                     *os_info_str;",
          "465:     os_info_str = g_string_new(\"\");",
          "466:     get_os_version_info(os_info_str);",
          "490:     idb_inf = g_new(wtapng_iface_descriptions_t,1);",
          "511:     g_array_append_val(idb_inf->interface_data, int_data);",
          "",
          "[Removed Lines]",
          "459:     wtapng_section_t            *shb_hdr;",
          "461:     wtapng_if_descr_t            int_data;",
          "468:     shb_hdr = g_new(wtapng_section_t,1);",
          "469:     shb_hdr->section_length = -1;",
          "471:     shb_hdr->opt_comment    = g_strdup_printf(\"File created by File->Import of file %s\", info->import_text_filename);",
          "476:     shb_hdr->shb_hardware   = NULL;",
          "481:     shb_hdr->shb_os         = g_string_free(os_info_str, FALSE);",
          "486:     shb_hdr->shb_user_appl  = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "491:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "494:     int_data.wtap_encap            = info->encapsulation;",
          "496:     int_data.link_type             = wtap_wtap_encap_to_pcap_encap(info->encapsulation);",
          "497:     int_data.snap_len              = WTAP_MAX_PACKET_SIZE;",
          "498:     int_data.if_name               = g_strdup(\"Fake IF File->Import\");",
          "499:     int_data.opt_comment           = NULL;",
          "500:     int_data.if_description        = NULL;",
          "501:     int_data.if_speed              = 0;",
          "502:     int_data.if_tsresol            = 6;",
          "503:     int_data.if_filter_str         = NULL;",
          "504:     int_data.bpf_filter_len        = 0;",
          "505:     int_data.if_filter_bpf_bytes   = NULL;",
          "506:     int_data.if_os                 = NULL;",
          "507:     int_data.if_fcslen             = -1;",
          "509:     int_data.interface_statistics  = NULL;",
          "",
          "[Added Lines]",
          "461:     wtap_optionblock_t           shb_hdr;",
          "463:     wtap_optionblock_t           int_data;",
          "464:     wtapng_if_descr_mandatory_t *int_data_mand;",
          "466:     gchar                       *opt_comment, *wireshark_ver;",
          "472:     shb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "475:     opt_comment = g_strdup_printf(\"File created by File->Import of file %s\", info->import_text_filename);",
          "476:     wtap_optionblock_set_option_string(shb_hdr, OPT_COMMENT, opt_comment);",
          "477:     g_free(opt_comment);",
          "483:     wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_OS, g_string_free(os_info_str, TRUE));",
          "488:     wireshark_ver = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "489:     wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_USERAPPL, wireshark_ver);",
          "490:     g_free(wireshark_ver);",
          "494:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "497:     int_data = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "498:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "499:     int_data_mand->wtap_encap            = info->encapsulation;",
          "501:     int_data_mand->link_type             = wtap_wtap_encap_to_pcap_encap(info->encapsulation);",
          "502:     int_data_mand->snap_len              = WTAP_MAX_PACKET_SIZE;",
          "503:     wtap_optionblock_set_option_string(int_data, OPT_IDB_NAME, \"Fake IF File->Import\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "565:     g_free(info->date_timestamp_format);",
          "566:     g_free(info);",
          "567:     g_free(capfile_name);",
          "569:     wtap_free_idb_info(idb_inf);",
          "570:     window_destroy(file_import_dlg_w);",
          "571: }",
          "",
          "[Removed Lines]",
          "568:     wtap_free_shb(shb_hdr);",
          "",
          "[Added Lines]",
          "562:     wtap_optionblock_free(shb_hdr);",
          "",
          "---------------"
        ],
        "ui/tap_export_pdu.c||ui/tap_export_pdu.c": [
          "File: ui/tap_export_pdu.c -> ui/tap_export_pdu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <epan/tap.h>",
          "33: #include <epan/exported_pdu.h>",
          "34: #include <epan/epan_dissect.h>",
          "36: #include \"ui/alert_box.h\"",
          "37: #include \"ui/simple_dialog.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <wiretap/wtap_opttypes.h>",
          "36: #include <wiretap/pcapng.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     int   err;",
          "106:     wtapng_iface_descriptions_t *idb_inf;",
          "108:     GString                     *os_info_str;",
          "111:     os_info_str = g_string_new(\"\");",
          "112:     get_os_version_info(os_info_str);",
          "135:     idb_inf = g_new(wtapng_iface_descriptions_t,1);",
          "156:     g_array_append_val(idb_inf->interface_data, int_data);",
          "",
          "[Removed Lines]",
          "105:     wtapng_section_t            *shb_hdr;",
          "107:     wtapng_if_descr_t            int_data;",
          "114:     shb_hdr = g_new0(wtapng_section_t,1);",
          "115:     shb_hdr->section_length = -1;",
          "117:     shb_hdr->opt_comment    = g_strdup_printf(\"Dump of PDUs from %s\", cfile.filename);",
          "122:     shb_hdr->shb_hardware   = NULL;",
          "127:     shb_hdr->shb_os         = g_string_free(os_info_str, FALSE);",
          "132:     shb_hdr->shb_user_appl  = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "136:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "139:     int_data.wtap_encap            = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "141:     int_data.link_type             = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "142:     int_data.snap_len              = WTAP_MAX_PACKET_SIZE;",
          "143:     int_data.if_name               = g_strdup(\"Fake IF, PDU->Export\");",
          "144:     int_data.opt_comment           = NULL;",
          "145:     int_data.if_description        = NULL;",
          "146:     int_data.if_speed              = 0;",
          "147:     int_data.if_tsresol            = 9;",
          "148:     int_data.if_filter_str         = NULL;",
          "149:     int_data.bpf_filter_len        = 0;",
          "150:     int_data.if_filter_bpf_bytes   = NULL;",
          "151:     int_data.if_os                 = NULL;",
          "152:     int_data.if_fcslen             = -1;",
          "154:     int_data.interface_statistics  = NULL;",
          "",
          "[Added Lines]",
          "107:     wtap_optionblock_t           shb_hdr;",
          "109:     wtap_optionblock_t           int_data;",
          "110:     wtapng_if_descr_mandatory_t *int_data_mand;",
          "112:     gchar                       *opt_comment, *wireshark_ver;",
          "118:     shb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "121:     opt_comment = g_strdup_printf(\"Dump of PDUs from %s\", cfile.filename);",
          "122:     wtap_optionblock_set_option_string(shb_hdr, OPT_COMMENT, opt_comment);",
          "123:     g_free(opt_comment);",
          "129:     wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_OS, g_string_free(os_info_str, TRUE));",
          "134:     wireshark_ver = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "135:     wtap_optionblock_set_option_string(shb_hdr, OPT_SHB_USERAPPL, wireshark_ver);",
          "136:     g_free(wireshark_ver);",
          "140:     idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "143:     int_data = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "144:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "145:     int_data_mand->wtap_encap      = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "147:     int_data_mand->link_type       = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "148:     int_data_mand->snap_len        = WTAP_MAX_PACKET_SIZE;",
          "150:     wtap_optionblock_set_option_string(int_data, OPT_IDB_NAME, \"Fake IF, PDU->Export\");",
          "151:     wtap_optionblock_set_option_uint8(int_data, OPT_IDB_TSRESOL, 9);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201: end:",
          "202:     g_free(capfile_name);",
          "204:     wtap_free_idb_info(idb_inf);",
          "205: }",
          "",
          "[Removed Lines]",
          "203:     wtap_free_shb(shb_hdr);",
          "",
          "[Added Lines]",
          "200:     wtap_optionblock_free(shb_hdr);",
          "",
          "---------------"
        ],
        "wiretap/Makefile.common||wiretap/Makefile.common": [
          "File: wiretap/Makefile.common -> wiretap/Makefile.common",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  visual.c  \\",
          "84:  vms.c   \\",
          "85:  vwr.c           \\",
          "88: # Header files that are not generated from other files",
          "89: NONGENERATED_HEADER_FILES = \\",
          "",
          "[Removed Lines]",
          "86:  wtap.c",
          "",
          "[Added Lines]",
          "86:  wtap.c   \\",
          "87:  wtap_opttypes.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  vms.h   \\",
          "148:  vwr.h           \\",
          "149:  wtap.h   \\",
          "150:  wtap-int.h",
          "152: # Files that generate compileable files",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  wtap_opttypes.h \\",
          "",
          "---------------"
        ],
        "wiretap/erf.c||wiretap/erf.c": [
          "File: wiretap/erf.c -> wiretap/erf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include \"wtap-int.h\"",
          "54: #include \"file_wrappers.h\"",
          "55: #include \"pcap-encap.h\"",
          "56: #include \"erf.h\"",
          "58: static gboolean erf_read_header(FILE_T fh,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #include \"pcapng.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "752: int erf_populate_interfaces(wtap *wth)",
          "753: {",
          "755:   int i;",
          "757:   if (!wth)",
          "758:     return -1;",
          "787:   for (i=0; i<4; i++) {",
          "791:     g_array_append_val(wth->interface_data, int_data);",
          "792:   }",
          "",
          "[Removed Lines]",
          "754:   wtapng_if_descr_t int_data;",
          "762:   int_data.wtap_encap = WTAP_ENCAP_ERF;",
          "765:   int_data.link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_ERF);",
          "767:   int_data.opt_comment = NULL;",
          "776:   int_data.if_filter_str = NULL;",
          "777:   int_data.bpf_filter_len = 0;",
          "778:   int_data.if_filter_bpf_bytes = NULL;",
          "779:   int_data.if_os = NULL;",
          "783:   int_data.num_stat_entries = 0;",
          "784:   int_data.interface_statistics = NULL;",
          "788:     int_data.if_name = g_strdup_printf(\"Port %c\", 'A'+i);",
          "789:     int_data.if_description = g_strdup_printf(\"ERF Interface Id %d (Port %c)\", i, 'A'+i);",
          "",
          "[Added Lines]",
          "755:   wtap_optionblock_t int_data;",
          "756:   wtapng_if_descr_mandatory_t* int_data_mand;",
          "758:   char* tmp;",
          "766:     int_data = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "767:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "769:     int_data_mand->wtap_encap = WTAP_ENCAP_ERF;",
          "772:     int_data_mand->link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_ERF);",
          "787:     int_data_mand->num_stat_entries = 0;",
          "788:     int_data_mand->interface_statistics = NULL;",
          "790:     tmp = g_strdup_printf(\"Port %c\", 'A'+i);",
          "791:     wtap_optionblock_set_option_string(int_data, OPT_IDB_NAME, tmp);",
          "792:     g_free(tmp);",
          "793:     tmp = g_strdup_printf(\"ERF Interface Id %d (Port %c)\", i, 'A'+i);",
          "794:     wtap_optionblock_set_option_string(int_data, OPT_IDB_DESCR, tmp);",
          "795:     g_free(tmp);",
          "",
          "---------------"
        ],
        "wiretap/file_access.c||wiretap/file_access.c": [
          "File: wiretap/file_access.c -> wiretap/file_access.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "818:  wth->file_tsprec = WTAP_TSPREC_USEC;",
          "819:  wth->priv = NULL;",
          "820:  wth->wslua_data = NULL;",
          "827:  if (wth->random_fh) {",
          "828:   wth->fast_seek = g_ptr_array_new();",
          "",
          "[Removed Lines]",
          "825:  wth->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Added Lines]",
          "821:  wth->shb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "826:  wth->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1083:  if ((wth->file_type_subtype == WTAP_FILE_TYPE_SUBTYPE_PCAP) ||",
          "1084:   (wth->file_type_subtype == WTAP_FILE_TYPE_SUBTYPE_PCAP_NSEC)) {",
          "1089:   if (wth->file_type_subtype == WTAP_FILE_TYPE_SUBTYPE_PCAP_NSEC) {",
          "1093:   } else {",
          "1097:   }",
          "1111:   g_array_append_val(wth->interface_data, descr);",
          "1113:  }",
          "",
          "[Removed Lines]",
          "1086:   wtapng_if_descr_t descr;",
          "1088:   descr.wtap_encap = wth->file_encap;",
          "1091:    descr.if_tsresol = 9;",
          "1092:    descr.tsprecision = WTAP_TSPREC_NSEC;",
          "1095:    descr.if_tsresol = 6;",
          "1096:    descr.tsprecision = WTAP_TSPREC_USEC;",
          "1098:   descr.link_type = wtap_wtap_encap_to_pcap_encap(wth->file_encap);",
          "1099:   descr.snap_len = wth->snapshot_length;",
          "1100:   descr.opt_comment = NULL;",
          "1101:   descr.if_name = NULL;",
          "1102:   descr.if_description = NULL;",
          "1103:   descr.if_speed = 0;",
          "1104:   descr.if_filter_str= NULL;",
          "1105:   descr.bpf_filter_len= 0;",
          "1106:   descr.if_filter_bpf_bytes= NULL;",
          "1107:   descr.if_os = NULL;",
          "1108:   descr.if_fcslen = -1;",
          "1110:   descr.interface_statistics = NULL;",
          "",
          "[Added Lines]",
          "1087:   wtap_optionblock_t descr = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "1088:   wtapng_if_descr_mandatory_t* descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(descr);",
          "1090:   descr_mand->wtap_encap = wth->file_encap;",
          "1093:    wtap_optionblock_set_option_uint8(descr, OPT_IDB_TSRESOL, 9);",
          "1094:    descr_mand->tsprecision = WTAP_TSPREC_NSEC;",
          "1097:    wtap_optionblock_set_option_uint8(descr, OPT_IDB_TSRESOL, 6);",
          "1098:    descr_mand->tsprecision = WTAP_TSPREC_USEC;",
          "1100:   descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(wth->file_encap);",
          "1101:   descr_mand->snap_len = wth->snapshot_length;",
          "1104:   descr_mand->interface_statistics = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2145: static wtap_dumper *",
          "2146: wtap_dump_init_dumper(int file_type_subtype, int encap, int snaplen, gboolean compressed,",
          "2149: {",
          "2150:  wtap_dumper *wdh;",
          "",
          "[Removed Lines]",
          "2147:                       wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2148:                       wtapng_name_res_t *nrb_hdr, int *err)",
          "2151:  wtapng_if_descr_t descr, *file_int_data;",
          "",
          "[Added Lines]",
          "2141:                       wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2142:                       wtap_optionblock_t nrb_hdr, int *err)",
          "2145:  wtap_optionblock_t descr, file_int_data;",
          "2146:  wtapng_if_descr_mandatory_t *descr_mand, *file_int_data_mand;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2169:   guint itf_count;",
          "2173:   for (itf_count = 0; itf_count < idb_inf->interface_data->len; itf_count++) {",
          "2183:    }",
          "2184:   }",
          "2185:  } else {",
          "2203:   g_array_append_val(wdh->interface_data, descr);",
          "2204:  }",
          "2205:  return wdh;",
          "",
          "[Removed Lines]",
          "2172:   wdh->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "2174:    file_int_data = &g_array_index(idb_inf->interface_data, wtapng_if_descr_t, itf_count);",
          "2175:    if ((encap != WTAP_ENCAP_PER_PACKET) && (encap != file_int_data->wtap_encap)) {",
          "2177:     memcpy(&descr, file_int_data, sizeof(wtapng_if_descr_t));",
          "2178:     descr.wtap_encap = encap;",
          "2179:     descr.link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "2180:     g_array_append_val(wdh->interface_data, descr);",
          "2181:    } else {",
          "2182:     g_array_append_val(wdh->interface_data, *file_int_data);",
          "2186:   descr.wtap_encap = encap;",
          "2188:   descr.link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "2189:   descr.snap_len = snaplen;",
          "2190:   descr.opt_comment = NULL;",
          "2191:   descr.if_name = g_strdup(\"Unknown/not available in original file format(libpcap)\");",
          "2192:   descr.if_description = NULL;",
          "2193:   descr.if_speed = 0;",
          "2194:   descr.if_tsresol = 6;",
          "2195:   descr.if_filter_str= NULL;",
          "2196:   descr.bpf_filter_len= 0;",
          "2197:   descr.if_filter_bpf_bytes= NULL;",
          "2198:   descr.if_os = NULL;",
          "2199:   descr.if_fcslen = -1;",
          "2201:   descr.interface_statistics = NULL;",
          "2202:   wdh->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Added Lines]",
          "2167:   wdh->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "2169:    file_int_data = g_array_index(idb_inf->interface_data, wtap_optionblock_t, itf_count);",
          "2170:    file_int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(file_int_data);",
          "2171:    descr = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "2172:    wtap_optionblock_copy_options(descr, file_int_data);",
          "2173:    if ((encap != WTAP_ENCAP_PER_PACKET) && (encap != file_int_data_mand->wtap_encap)) {",
          "2174:     descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(descr);",
          "2175:     descr_mand->wtap_encap = encap;",
          "2176:     descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "2178:    g_array_append_val(wdh->interface_data, descr);",
          "2181:   descr = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "2182:   descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(descr);",
          "2183:   descr_mand->wtap_encap = encap;",
          "2185:   descr_mand->link_type = wtap_wtap_encap_to_pcap_encap(encap);",
          "2186:   descr_mand->snap_len = snaplen;",
          "2187:   wtap_optionblock_set_option_string(descr, OPT_IDB_NAME, \"Unknown/not available in original file format(libpcap)\");",
          "2190:   descr_mand->interface_statistics = NULL;",
          "2191:   wdh->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2215: wtap_dumper *",
          "2216: wtap_dump_open_ng(const char *filename, int file_type_subtype, int encap,",
          "2219: {",
          "2220:  wtap_dumper *wdh;",
          "2221:  WFILE_T fh;",
          "",
          "[Removed Lines]",
          "2217:     int snaplen, gboolean compressed, wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2218:     wtapng_name_res_t *nrb_hdr, int *err)",
          "",
          "[Added Lines]",
          "2206:     int snaplen, gboolean compressed, wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2207:     wtap_optionblock_t nrb_hdr, int *err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2260: wtap_dump_open_tempfile_ng(char **filenamep, const char *pfx,",
          "2261:       int file_type_subtype, int encap,",
          "2262:       int snaplen, gboolean compressed,",
          "2264:       wtapng_iface_descriptions_t *idb_inf,",
          "2266: {",
          "2267:  int fd;",
          "2268:  char *tmpname;",
          "",
          "[Removed Lines]",
          "2263:       wtapng_section_t *shb_hdr,",
          "2265:       wtapng_name_res_t *nrb_hdr, int *err)",
          "",
          "[Added Lines]",
          "2252:       wtap_optionblock_t shb_hdr,",
          "2254:       wtap_optionblock_t nrb_hdr, int *err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2320: wtap_dumper *",
          "2321: wtap_dump_fdopen_ng(int fd, int file_type_subtype, int encap, int snaplen,",
          "2324: {",
          "2325:  wtap_dumper *wdh;",
          "2326:  WFILE_T fh;",
          "",
          "[Removed Lines]",
          "2322:       gboolean compressed, wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2323:       wtapng_name_res_t *nrb_hdr, int *err)",
          "",
          "[Added Lines]",
          "2311:       gboolean compressed, wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2312:       wtap_optionblock_t nrb_hdr, int *err)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2360: wtap_dumper *",
          "2361: wtap_dump_open_stdout_ng(int file_type_subtype, int encap, int snaplen,",
          "2363:     wtapng_iface_descriptions_t *idb_inf,",
          "2365: {",
          "2366:  wtap_dumper *wdh;",
          "2367:  WFILE_T fh;",
          "",
          "[Removed Lines]",
          "2362:     gboolean compressed, wtapng_section_t *shb_hdr,",
          "2364:     wtapng_name_res_t *nrb_hdr, int *err)",
          "",
          "[Added Lines]",
          "2351:     gboolean compressed, wtap_optionblock_t shb_hdr,",
          "2353:     wtap_optionblock_t nrb_hdr, int *err)",
          "",
          "---------------"
        ],
        "wiretap/lanalyzer.c||wiretap/lanalyzer.c": [
          "File: wiretap/lanalyzer.c -> wiretap/lanalyzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"wtap-int.h\"",
          "25: #include \"file_wrappers.h\"",
          "26: #include \"lanalyzer.h\"",
          "29:    TID022037, which can be found at, among other places:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"pcapng.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:                   return WTAP_OPEN_NOT_MINE;",
          "328:             }",
          "329:             comment[record_length] = '\\0';",
          "331:       }",
          "",
          "[Removed Lines]",
          "330:             wth->shb_hdr.opt_comment = comment;",
          "",
          "[Added Lines]",
          "331:             wtap_optionblock_set_option_string(wth->shb_hdr, OPT_COMMENT, comment);",
          "",
          "---------------"
        ],
        "wiretap/merge.c||wiretap/merge.c": [
          "File: wiretap/merge.c -> wiretap/merge.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <string.h>",
          "37: #include \"merge.h\"",
          "39: #include <wsutil/filesystem.h>",
          "40: #include \"wsutil/os_version_info.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include \"wtap_opttypes.h\"",
          "39: #include \"pcapng.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362: create_shb_header(const merge_in_file_t *in_files, const guint in_file_count,",
          "363:                   const gchar *app_name)",
          "364: {",
          "366:     GString *comment_gstr;",
          "367:     GString *os_info_str;",
          "368:     guint i;",
          "370:     shb_hdr = wtap_file_get_shb_for_new_file(in_files[0].wth);",
          "",
          "[Removed Lines]",
          "361: static wtapng_section_t*",
          "365:     wtapng_section_t *shb_hdr = NULL;",
          "",
          "[Added Lines]",
          "363: static wtap_optionblock_t",
          "367:     wtap_optionblock_t shb_hdr;",
          "371:     char* shb_comment = NULL;",
          "372:     wtapng_mandatory_section_t* shb_data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:     }",
          "383:     g_string_append_printf(comment_gstr, \"File created by merging: \\n\");",
          "",
          "[Removed Lines]",
          "377:     if (shb_hdr->opt_comment && strlen(shb_hdr->opt_comment) > 0) {",
          "378:         g_string_append_printf(comment_gstr, \"%s \\n\",shb_hdr->opt_comment);",
          "380:     g_free(shb_hdr->opt_comment);",
          "381:     shb_hdr->opt_comment = NULL;",
          "",
          "[Added Lines]",
          "380:     wtap_optionblock_get_option_string(shb_hdr, OPT_COMMENT, &shb_comment);",
          "383:     if (shb_comment && strlen(shb_comment) > 0) {",
          "384:         g_string_append_printf(comment_gstr, \"%s \\n\",shb_comment);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:     os_info_str = g_string_new(\"\");",
          "390:     get_os_version_info(os_info_str);",
          "402:     return shb_hdr;",
          "403: }",
          "405: static gboolean",
          "407: {",
          "408:     g_assert(idb1 && idb2);",
          "410:     merge_debug(\"merge::is_duplicate_idb() called\");",
          "435:     merge_debug(\"merge::is_duplicate_idb() returning\");",
          "451: }",
          "",
          "[Removed Lines]",
          "392:     shb_hdr->section_length = -1;",
          "406: is_duplicate_idb(const wtapng_if_descr_t *idb1, const wtapng_if_descr_t *idb2)",
          "411:     merge_debug(\"idb1->wtap_encap == idb2->wtap_encap: %s\",",
          "412:                  (idb1->wtap_encap == idb2->wtap_encap) ? \"TRUE\":\"FALSE\");",
          "413:     merge_debug(\"idb1->time_units_per_second == idb2->time_units_per_second: %s\",",
          "414:                  (idb1->time_units_per_second == idb2->time_units_per_second) ? \"TRUE\":\"FALSE\");",
          "415:     merge_debug(\"idb1->tsprecision == idb2->tsprecision: %s\",",
          "416:                  (idb1->tsprecision == idb2->tsprecision) ? \"TRUE\":\"FALSE\");",
          "417:     merge_debug(\"idb1->link_type == idb2->link_type: %s\",",
          "418:                  (idb1->link_type == idb2->link_type) ? \"TRUE\":\"FALSE\");",
          "419:     merge_debug(\"idb1->snap_len == idb2->snap_len: %s\",",
          "420:                  (idb1->snap_len == idb2->snap_len) ? \"TRUE\":\"FALSE\");",
          "421:     merge_debug(\"idb1->if_speed == idb2->if_speed: %s\",",
          "422:                  (idb1->if_speed == idb2->if_speed) ? \"TRUE\":\"FALSE\");",
          "423:     merge_debug(\"idb1->if_tsresol == idb2->if_tsresol: %s\",",
          "424:                  (idb1->if_tsresol == idb2->if_tsresol) ? \"TRUE\":\"FALSE\");",
          "425:     merge_debug(\"idb1->if_fcslen == idb2->if_fcslen: %s\",",
          "426:                  (idb1->if_fcslen == idb2->if_fcslen) ? \"TRUE\":\"FALSE\");",
          "427:     merge_debug(\"g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0: %s\",",
          "428:                  (g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0) ? \"TRUE\":\"FALSE\");",
          "429:     merge_debug(\"g_strcmp0(idb1->if_name, idb2->if_name) == 0: %s\",",
          "430:                  (g_strcmp0(idb1->if_name, idb2->if_name) == 0) ? \"TRUE\":\"FALSE\");",
          "431:     merge_debug(\"g_strcmp0(idb1->if_description, idb2->if_description) == 0: %s\",",
          "432:                  (g_strcmp0(idb1->if_description, idb2->if_description) == 0) ? \"TRUE\":\"FALSE\");",
          "433:     merge_debug(\"g_strcmp0(idb1->if_os, idb2->if_os) == 0: %s\",",
          "434:                  (g_strcmp0(idb1->if_os, idb2->if_os) == 0) ? \"TRUE\":\"FALSE\");",
          "438:     return (idb1->wtap_encap == idb2->wtap_encap &&",
          "439:             idb1->time_units_per_second == idb2->time_units_per_second &&",
          "440:             idb1->tsprecision == idb2->tsprecision &&",
          "441:             idb1->link_type == idb2->link_type &&",
          "443:             idb1->snap_len == idb2->snap_len &&",
          "444:             idb1->if_speed == idb2->if_speed &&",
          "445:             idb1->if_tsresol == idb2->if_tsresol &&",
          "446:             idb1->if_fcslen == idb2->if_fcslen &&",
          "447:             g_strcmp0(idb1->opt_comment, idb2->opt_comment) == 0 &&",
          "448:             g_strcmp0(idb1->if_name, idb2->if_name) == 0 &&",
          "449:             g_strcmp0(idb1->if_description, idb2->if_description) == 0 &&",
          "450:             g_strcmp0(idb1->if_os, idb2->if_os) == 0);",
          "",
          "[Added Lines]",
          "396:     shb_data = (wtapng_mandatory_section_t*)wtap_optionblock_get_mandatory_data(shb_hdr);",
          "397:     shb_data->section_length = -1;",
          "412: is_duplicate_idb(const wtap_optionblock_t idb1, const wtap_optionblock_t idb2)",
          "414:     wtapng_if_descr_mandatory_t *idb1_mand, *idb2_mand;",
          "415:     guint64 idb1_if_speed, idb2_if_speed;",
          "416:     guint8 idb1_if_tsresol, idb2_if_tsresol;",
          "417:     guint8 idb1_if_fcslen, idb2_if_fcslen;",
          "418:     char *idb1_opt_comment, *idb2_opt_comment, *idb1_if_name, *idb2_if_name,",
          "422:     idb1_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(idb1);",
          "423:     idb2_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(idb2);",
          "426:     merge_debug(\"idb1_mand->wtap_encap == idb2_mand->wtap_encap: %s\",",
          "427:                  (idb1_mand->wtap_encap == idb2_mand->wtap_encap) ? \"TRUE\":\"FALSE\");",
          "428:     merge_debug(\"idb1_mand->time_units_per_second == idb2_mand->time_units_per_second: %s\",",
          "429:                  (idb1_mand->time_units_per_second == idb2_mand->time_units_per_second) ? \"TRUE\":\"FALSE\");",
          "430:     merge_debug(\"idb1_mand->tsprecision == idb2_mand->tsprecision: %s\",",
          "431:                  (idb1_mand->tsprecision == idb2_mand->tsprecision) ? \"TRUE\":\"FALSE\");",
          "432:     merge_debug(\"idb1_mand->link_type == idb2_mand->link_type: %s\",",
          "433:                  (idb1_mand->link_type == idb2_mand->link_type) ? \"TRUE\":\"FALSE\");",
          "434:     merge_debug(\"idb1_mand->snap_len == idb2_mand->snap_len: %s\",",
          "435:                  (idb1_mand->snap_len == idb2_mand->snap_len) ? \"TRUE\":\"FALSE\");",
          "437:     wtap_optionblock_get_option_uint64(idb1, OPT_IDB_SPEED, &idb1_if_speed);",
          "438:     wtap_optionblock_get_option_uint64(idb2, OPT_IDB_SPEED, &idb2_if_speed);",
          "439:     merge_debug(\"idb1_if_speed == idb2_if_speed: %s\",",
          "440:                  (idb1_if_speed == idb2_if_speed) ? \"TRUE\":\"FALSE\");",
          "442:     wtap_optionblock_get_option_uint8(idb1, OPT_IDB_TSRESOL, &idb1_if_tsresol);",
          "443:     wtap_optionblock_get_option_uint8(idb2, OPT_IDB_TSRESOL, &idb2_if_tsresol);",
          "444:     merge_debug(\"idb1_if_tsresol == idb2_if_tsresol: %s\",",
          "445:                  (idb1_if_tsresol == idb2_if_tsresol) ? \"TRUE\":\"FALSE\");",
          "447:     wtap_optionblock_get_option_uint8(idb1, OPT_IDB_FCSLEN, &idb1_if_fcslen);",
          "448:     wtap_optionblock_get_option_uint8(idb2, OPT_IDB_FCSLEN, &idb2_if_fcslen);",
          "449:     merge_debug(\"idb1_if_fcslen == idb2_if_fcslen: %s\",",
          "450:                  (idb1_if_fcslen == idb2_if_fcslen) ? \"TRUE\":\"FALSE\");",
          "452:     wtap_optionblock_get_option_string(idb1, OPT_COMMENT, &idb1_opt_comment);",
          "453:     wtap_optionblock_get_option_string(idb2, OPT_COMMENT, &idb2_opt_comment);",
          "454:     merge_debug(\"g_strcmp0(idb1_opt_comment, idb2_opt_comment) == 0: %s\",",
          "455:                  (g_strcmp0(idb1_opt_comment, idb2_opt_comment) == 0) ? \"TRUE\":\"FALSE\");",
          "457:     wtap_optionblock_get_option_string(idb1, OPT_IDB_NAME, &idb1_if_name);",
          "458:     wtap_optionblock_get_option_string(idb2, OPT_IDB_NAME, &idb2_if_name);",
          "459:     merge_debug(\"g_strcmp0(idb1_if_name, idb2_if_name) == 0: %s\",",
          "460:                  (g_strcmp0(idb1_if_name, idb2_if_name) == 0) ? \"TRUE\":\"FALSE\");",
          "462:     wtap_optionblock_get_option_string(idb1, OPT_IDB_DESCR, &idb1_if_description);",
          "463:     wtap_optionblock_get_option_string(idb2, OPT_IDB_DESCR, &idb2_if_description);",
          "464:     merge_debug(\"g_strcmp0(idb1_if_description, idb2_if_description) == 0: %s\",",
          "465:                  (g_strcmp0(idb1_if_description, idb2_if_description) == 0) ? \"TRUE\":\"FALSE\");",
          "467:     wtap_optionblock_get_option_string(idb1, OPT_IDB_OS, &idb1_if_os);",
          "468:     wtap_optionblock_get_option_string(idb2, OPT_IDB_OS, &idb2_if_os);",
          "469:     merge_debug(\"g_strcmp0(idb1_if_os, idb2_if_os) == 0: %s\",",
          "470:                  (g_strcmp0(idb1_if_os, idb2_if_os) == 0) ? \"TRUE\":\"FALSE\");",
          "474:     return (idb1_mand->wtap_encap == idb2_mand->wtap_encap &&",
          "475:             idb1_mand->time_units_per_second == idb2_mand->time_units_per_second &&",
          "476:             idb1_mand->tsprecision == idb2_mand->tsprecision &&",
          "477:             idb1_mand->link_type == idb2_mand->link_type &&",
          "479:             idb1_mand->snap_len == idb2_mand->snap_len &&",
          "480:             idb1_if_speed == idb2_if_speed &&",
          "481:             idb1_if_tsresol == idb2_if_tsresol &&",
          "482:             idb1_if_fcslen == idb2_if_fcslen &&",
          "483:             g_strcmp0(idb1_opt_comment, idb2_opt_comment) == 0 &&",
          "484:             g_strcmp0(idb1_if_name, idb2_if_name) == 0 &&",
          "485:             g_strcmp0(idb1_if_description, idb2_if_description) == 0 &&",
          "486:             g_strcmp0(idb1_if_os, idb2_if_os) == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "459:     wtapng_iface_descriptions_t *first_idb_list = NULL;",
          "460:     wtapng_iface_descriptions_t *other_idb_list = NULL;",
          "461:     guint first_idb_list_size, other_idb_list_size;",
          "463:     guint i, j;",
          "465:     g_assert(in_files != NULL);",
          "",
          "[Removed Lines]",
          "462:     const wtapng_if_descr_t *first_file_idb, *other_file_idb;",
          "",
          "[Added Lines]",
          "498:     wtap_optionblock_t first_file_idb, other_file_idb;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "485:         }",
          "487:         for (j = 0; j < other_idb_list_size; j++) {",
          "491:             if (!is_duplicate_idb(first_file_idb, other_file_idb)) {",
          "492:                 merge_debug(\"merge::all_idbs_are_duplicates: IDBs at index %d do not match, returning FALSE\", j);",
          "",
          "[Removed Lines]",
          "488:             first_file_idb = &g_array_index(first_idb_list->interface_data, wtapng_if_descr_t, j);",
          "489:             other_file_idb = &g_array_index(other_idb_list->interface_data, wtapng_if_descr_t, j);",
          "",
          "[Added Lines]",
          "524:             first_file_idb = g_array_index(first_idb_list->interface_data, wtap_optionblock_t, j);",
          "525:             other_file_idb = g_array_index(other_idb_list->interface_data, wtap_optionblock_t, j);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "517: static gboolean",
          "519:                const wtapng_iface_descriptions_t *merged_idb_list,",
          "520:                guint *found_index)",
          "521: {",
          "523:     guint i;",
          "525:     g_assert(input_file_idb != NULL);",
          "",
          "[Removed Lines]",
          "518: find_duplicate_idb(const wtapng_if_descr_t *input_file_idb,",
          "522:     const wtapng_if_descr_t *merged_idb;",
          "",
          "[Added Lines]",
          "554: find_duplicate_idb(const wtap_optionblock_t input_file_idb,",
          "558:     wtap_optionblock_t merged_idb;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "528:     g_assert(found_index != NULL);",
          "530:     for (i = 0; i < merged_idb_list->interface_data->len; i++) {",
          "533:         if (is_duplicate_idb(input_file_idb, merged_idb)) {",
          "",
          "[Removed Lines]",
          "531:         merged_idb = &g_array_index(merged_idb_list->interface_data, wtapng_if_descr_t, i);",
          "",
          "[Added Lines]",
          "567:         merged_idb = g_array_index(merged_idb_list->interface_data, wtap_optionblock_t, i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "543: static guint",
          "544: add_idb_to_merged_file(wtapng_iface_descriptions_t *merged_idb_list,",
          "546: {",
          "549:     g_assert(merged_idb_list != NULL);",
          "550:     g_assert(merged_idb_list->interface_data != NULL);",
          "551:     g_assert(input_file_idb != NULL);",
          "571:     g_array_append_val(merged_idb_list->interface_data, idb);",
          "",
          "[Removed Lines]",
          "545:                        const wtapng_if_descr_t *input_file_idb)",
          "547:     wtapng_if_descr_t idb;",
          "553:     idb.wtap_encap            = input_file_idb->wtap_encap;",
          "554:     idb.time_units_per_second = input_file_idb->time_units_per_second;",
          "555:     idb.tsprecision           = input_file_idb->tsprecision;",
          "556:     idb.link_type             = input_file_idb->link_type;",
          "557:     idb.snap_len              = input_file_idb->snap_len;",
          "558:     idb.if_name               = g_strdup(input_file_idb->if_name);",
          "559:     idb.opt_comment           = g_strdup(input_file_idb->opt_comment);;",
          "560:     idb.if_description        = g_strdup(input_file_idb->if_description);",
          "561:     idb.if_speed              = input_file_idb->if_speed;",
          "562:     idb.if_tsresol            = input_file_idb->if_tsresol;",
          "563:     idb.if_filter_str         = NULL;",
          "564:     idb.bpf_filter_len        = 0;",
          "565:     idb.if_filter_bpf_bytes   = NULL;",
          "566:     idb.if_os                 = g_strdup(input_file_idb->if_os);",
          "567:     idb.if_fcslen             = input_file_idb->if_fcslen;",
          "569:     idb.interface_statistics  = NULL;",
          "",
          "[Added Lines]",
          "581:                        const wtap_optionblock_t input_file_idb)",
          "583:     wtap_optionblock_t idb = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "584:     wtapng_if_descr_mandatory_t* idb_mand;",
          "585:     wtapng_if_descr_filter_t if_filter;",
          "592:     wtap_optionblock_copy_options(idb, input_file_idb);",
          "593:     idb_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(idb);",
          "596:     memset(&if_filter, 0, sizeof(if_filter));",
          "597:     wtap_optionblock_set_option_custom(idb, OPT_IDB_FILTER, &if_filter);",
          "600:     idb_mand->interface_statistics  = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "581: {",
          "582:     wtapng_iface_descriptions_t *merged_idb_list = NULL;",
          "583:     wtapng_iface_descriptions_t *input_file_idb_list = NULL;",
          "585:     guint                        itf_count, merged_index;",
          "586:     guint                        i;",
          "589:     merged_idb_list = g_new(wtapng_iface_descriptions_t,1);",
          "592:     if (mode == IDB_MERGE_MODE_ALL_SAME && all_idbs_are_duplicates(in_files, in_file_count)) {",
          "593:         guint num_idbs;",
          "",
          "[Removed Lines]",
          "584:     const wtapng_if_descr_t     *input_file_idb = NULL;",
          "590:     merged_idb_list->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "",
          "[Added Lines]",
          "615:     wtap_optionblock_t           input_file_idb;",
          "621:     merged_idb_list->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "603:         for (itf_count = 0; itf_count < num_idbs; itf_count++) {",
          "606:             merged_index = add_idb_to_merged_file(merged_idb_list, input_file_idb);",
          "607:             add_idb_index_map(&in_files[0], itf_count, merged_index);",
          "608:         }",
          "",
          "[Removed Lines]",
          "604:             input_file_idb = &g_array_index(input_file_idb_list->interface_data,",
          "605:                                             wtapng_if_descr_t, itf_count);",
          "",
          "[Added Lines]",
          "635:             input_file_idb = g_array_index(input_file_idb_list->interface_data,",
          "636:                                             wtap_optionblock_t, itf_count);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "621:             input_file_idb_list = wtap_file_get_idb_info(in_files[i].wth);",
          "623:             for (itf_count = 0; itf_count < input_file_idb_list->interface_data->len; itf_count++) {",
          "627:                 if (mode == IDB_MERGE_MODE_ANY_SAME &&",
          "628:                     find_duplicate_idb(input_file_idb, merged_idb_list, &merged_index))",
          "",
          "[Removed Lines]",
          "624:                 input_file_idb = &g_array_index(input_file_idb_list->interface_data,",
          "625:                                                 wtapng_if_descr_t, itf_count);",
          "",
          "[Added Lines]",
          "655:                 input_file_idb = g_array_index(input_file_idb_list->interface_data,",
          "656:                                                 wtap_optionblock_t, itf_count);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "851:     struct wtap_pkthdr *phdr, snap_phdr;",
          "852:     int                 count = 0;",
          "853:     gboolean            stop_flag = FALSE;",
          "855:     wtapng_iface_descriptions_t *idb_inf = NULL;",
          "857:     g_assert(out_fd > 0);",
          "",
          "[Removed Lines]",
          "854:     wtapng_section_t            *shb_hdr = NULL;",
          "",
          "[Added Lines]",
          "885:     wtap_optionblock_t          shb_hdr = NULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "913:     if (pdh == NULL) {",
          "914:         merge_close_in_files(in_file_count, in_files);",
          "915:         g_free(in_files);",
          "917:         wtap_free_idb_info(idb_inf);",
          "918:         return MERGE_ERR_CANT_OPEN_OUTFILE;",
          "919:     }",
          "",
          "[Removed Lines]",
          "916:         wtap_free_shb(shb_hdr);",
          "",
          "[Added Lines]",
          "947:         wtap_optionblock_free(shb_hdr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1035:     }",
          "1037:     g_free(in_files);",
          "1039:     wtap_free_idb_info(idb_inf);",
          "1041:     return status;",
          "",
          "[Removed Lines]",
          "1038:     wtap_free_shb(shb_hdr);",
          "",
          "[Added Lines]",
          "1069:     wtap_optionblock_free(shb_hdr);",
          "",
          "---------------"
        ],
        "wiretap/nettrace_3gpp_32_423.c||wiretap/nettrace_3gpp_32_423.c": [
          "File: wiretap/nettrace_3gpp_32_423.c -> wiretap/nettrace_3gpp_32_423.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  wtap_close(file_info->wth_tmp_file);",
          "196:  ws_unlink(file_info->tmpname);",
          "",
          "[Removed Lines]",
          "190:  wth->shb_hdr.opt_comment = NULL;",
          "191:  wth->shb_hdr.shb_hardware = NULL;",
          "192:  wth->shb_hdr.shb_os = NULL;",
          "193:  wth->shb_hdr.shb_user_appl = NULL;",
          "",
          "[Added Lines]",
          "190:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_COMMENT, NULL);",
          "191:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_SHB_HARDWARE, NULL);",
          "192:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_SHB_OS, NULL);",
          "193:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_SHB_USERAPPL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:  wtap_open_return_val result = WTAP_OPEN_MINE;",
          "613:  wtapng_iface_descriptions_t *idb_inf = NULL;",
          "615:  GString                     *os_info_str;",
          "616:  gint64 file_size;",
          "617:  int packet_size;",
          "",
          "[Removed Lines]",
          "612:  wtapng_section_t            *shb_hdr = NULL;",
          "614:  wtapng_if_descr_t            int_data;",
          "",
          "[Added Lines]",
          "612:  wtap_optionblock_t           shb_hdr = NULL;",
          "614:  wtap_optionblock_t           int_data;",
          "615:  wtapng_if_descr_mandatory_t *int_data_mand;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:  int scan_found;",
          "624:  unsigned second, ms;",
          "625:  gboolean do_random = FALSE;",
          "626:  char *curr_pos, *next_msg_pos, *next_pos, *prev_pos;",
          "628:  exported_pdu_info_t  exported_pdu_info;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:  gchar* wireshark_ver;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "647:  os_info_str = g_string_new(\"\");",
          "648:  get_os_version_info(os_info_str);",
          "671:  idb_inf = g_new(wtapng_iface_descriptions_t, 1);",
          "692:  g_array_append_val(idb_inf->interface_data, int_data);",
          "",
          "[Removed Lines]",
          "650:  shb_hdr = g_new(wtapng_section_t, 1);",
          "651:  shb_hdr->section_length = -1;",
          "653:  shb_hdr->opt_comment = g_strdup_printf(\"File converted to Exported PDU format during opening\");",
          "658:  shb_hdr->shb_hardware = NULL;",
          "663:  shb_hdr->shb_os = g_string_free(os_info_str, FALSE);",
          "668:  shb_hdr->shb_user_appl = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "672:  idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtapng_if_descr_t));",
          "675:  int_data.wtap_encap = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "677:  int_data.link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "678:  int_data.snap_len = WTAP_MAX_PACKET_SIZE;",
          "679:  int_data.if_name = g_strdup(\"Fake IF\");",
          "680:  int_data.opt_comment = NULL;",
          "681:  int_data.if_description = NULL;",
          "682:  int_data.if_speed = 0;",
          "683:  int_data.if_tsresol = 6;",
          "684:  int_data.if_filter_str = NULL;",
          "685:  int_data.bpf_filter_len = 0;",
          "686:  int_data.if_filter_bpf_bytes = NULL;",
          "687:  int_data.if_os = NULL;",
          "688:  int_data.if_fcslen = -1;",
          "690:  int_data.interface_statistics = NULL;",
          "",
          "[Added Lines]",
          "652:  shb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "654:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_COMMENT, \"File converted to Exported PDU format during opening\");",
          "659:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_SHB_OS, g_string_free(os_info_str, TRUE));",
          "665:  wireshark_ver = g_strdup_printf(\"Wireshark %s\", get_ws_vcs_version_info());",
          "666:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_SHB_USERAPPL, wireshark_ver);",
          "667:  g_free(wireshark_ver);",
          "671:  idb_inf->interface_data = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "674:  int_data = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "675:  int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "676:  int_data_mand->wtap_encap = WTAP_ENCAP_WIRESHARK_UPPER_PDU;",
          "678:  int_data_mand->link_type = wtap_wtap_encap_to_pcap_encap(WTAP_ENCAP_WIRESHARK_UPPER_PDU);",
          "679:  int_data_mand->snap_len = WTAP_MAX_PACKET_SIZE;",
          "680:  wtap_optionblock_set_option_string(int_data, OPT_IDB_NAME, \"Fake IF\");",
          "682:  int_data_mand->interface_statistics = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "953: end:",
          "954:  g_free(wrt_err_info);",
          "955:  g_free(packet_buf);",
          "957:  wtap_free_idb_info(idb_inf);",
          "959:  return result;",
          "",
          "[Removed Lines]",
          "956:  wtap_free_shb(shb_hdr);",
          "",
          "[Added Lines]",
          "948:  wtap_optionblock_free(shb_hdr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1012:   return WTAP_OPEN_ERROR;",
          "1020:  wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_NETTRACE_3GPP_32_423;",
          "1021:  wth->file_encap = file_info->wth_tmp_file->file_encap;",
          "",
          "[Removed Lines]",
          "1015:  wth->shb_hdr.opt_comment = file_info->wth_tmp_file->shb_hdr.opt_comment;",
          "1016:  wth->shb_hdr.shb_hardware = file_info->wth_tmp_file->shb_hdr.shb_hardware;",
          "1017:  wth->shb_hdr.shb_os = file_info->wth_tmp_file->shb_hdr.shb_os;",
          "1018:  wth->shb_hdr.shb_user_appl = file_info->wth_tmp_file->shb_hdr.shb_user_appl;",
          "",
          "[Added Lines]",
          "1007:  wtap_optionblock_copy_options(wth->shb_hdr, file_info->wth_tmp_file->shb_hdr);",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: };",
          "212: #define OPT_EPB_FLAGS        0x0002",
          "213: #define OPT_EPB_HASH         0x0003",
          "214: #define OPT_EPB_DROPCOUNT    0x0004",
          "238: #define OPT_NRB_DNSNAME      0x0002",
          "239: #define OPT_NRB_DNSV4ADDR    0x0003",
          "240: #define OPT_NRB_DNSV6ADDR    0x0004",
          "",
          "[Removed Lines]",
          "205: #define OPT_EOFOPT           0x0000",
          "206: #define OPT_COMMENT          0x0001",
          "208: #define OPT_SHB_HARDWARE     0x0002",
          "209: #define OPT_SHB_OS           0x0003",
          "210: #define OPT_SHB_USERAPPL     0x0004",
          "216: #define OPT_IDB_NAME         0x0002",
          "217: #define OPT_IDB_DESCR        0x0003",
          "218: #define OPT_IDB_IP4ADDR      0x0004",
          "219: #define OPT_IDB_IP6ADDR      0x0005",
          "220: #define OPT_IDB_MACADDR      0x0006",
          "221: #define OPT_IDB_EUIADDR      0x0007",
          "222: #define OPT_IDB_SPEED        0x0008",
          "223: #define OPT_IDB_TSRESOL      0x0009",
          "224: #define OPT_IDB_TZONE        0x000A",
          "225: #define OPT_IDB_FILTER       0x000B",
          "226: #define OPT_IDB_OS           0x000C",
          "227: #define OPT_IDB_FCSLEN       0x000D",
          "228: #define OPT_IDB_TSOFFSET     0x000E",
          "230: #define OPT_ISB_STARTTIME    0x0002",
          "231: #define OPT_ISB_ENDTIME      0x0003",
          "232: #define OPT_ISB_IFRECV       0x0004",
          "233: #define OPT_ISB_IFDROP       0x0005",
          "234: #define OPT_ISB_FILTERACCEPT 0x0006",
          "235: #define OPT_ISB_OSDROP       0x0007",
          "236: #define OPT_ISB_USRDELIV     0x0008",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270: typedef struct wtapng_block_s {",
          "",
          "[Removed Lines]",
          "272:     union {",
          "273:         wtapng_section_t        section;",
          "274:         wtapng_if_descr_t       if_descr;",
          "275:         wtapng_name_res_t       name_res;",
          "276:         wtapng_if_stats_t       if_stats;",
          "277:     } data;",
          "",
          "[Added Lines]",
          "243:     wtap_optionblock_t          block;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:     return block_read;",
          "529: }",
          "545: typedef enum {",
          "546:     PCAPNG_BLOCK_OK,",
          "547:     PCAPNG_BLOCK_NOT_SHB,",
          "",
          "[Removed Lines]",
          "532: static void",
          "533: pcapng_free_wtapng_block_data(wtapng_block_t *wblock)",
          "534: {",
          "535:     switch (wblock->type) {",
          "536:         case(BLOCK_TYPE_SHB):",
          "537:             g_free(wblock->data.section.opt_comment);",
          "538:             g_free(wblock->data.section.shb_hardware);",
          "539:             g_free(wblock->data.section.shb_os);",
          "540:             g_free(wblock->data.section.shb_user_appl);",
          "541:             break;",
          "542:     }",
          "543: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "557:     guint to_read, opt_cont_buf_len;",
          "558:     pcapng_section_header_block_t shb;",
          "559:     pcapng_option_header_t oh;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:     wtapng_mandatory_section_t* section_data;",
          "513:     gchar* tmp_content;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "656:         return PCAPNG_BLOCK_ERROR;",
          "657:     }",
          "661:     if (pn->byte_swapped) {",
          "663:     } else {",
          "665:     }",
          "",
          "[Removed Lines]",
          "662:         wblock->data.section.section_length = GUINT64_SWAP_LE_BE(shb.section_length);",
          "664:         wblock->data.section.section_length = shb.section_length;",
          "",
          "[Added Lines]",
          "614:     wblock->block = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "615:     section_data = (wtapng_mandatory_section_t*)wtap_optionblock_get_mandatory_data(wblock->block);",
          "618:         section_data->section_length = GUINT64_SWAP_LE_BE(shb.section_length);",
          "620:         section_data->section_length = shb.section_length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "696:                 break;",
          "697:             case(OPT_COMMENT):",
          "698:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "702:                 } else {",
          "703:                     pcapng_debug(\"pcapng_read_section_header_block: opt_comment length %u seems strange\", oh.option_length);",
          "704:                 }",
          "705:                 break;",
          "706:             case(OPT_SHB_HARDWARE):",
          "707:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "711:                 } else {",
          "712:                     pcapng_debug(\"pcapng_read_section_header_block: shb_hardware length %u seems strange\", oh.option_length);",
          "713:                 }",
          "714:                 break;",
          "715:             case(OPT_SHB_OS):",
          "716:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "720:                 } else {",
          "721:                     pcapng_debug(\"pcapng_read_section_header_block: shb_os length %u seems strange, opt buffsize %u\", oh.option_length,to_read);",
          "722:                 }",
          "723:                 break;",
          "724:             case(OPT_SHB_USERAPPL):",
          "725:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "729:                 } else {",
          "730:                     pcapng_debug(\"pcapng_read_section_header_block: shb_user_appl length %u seems strange\", oh.option_length);",
          "731:                 }",
          "",
          "[Removed Lines]",
          "699:                     g_free(wblock->data.section.opt_comment);",
          "700:                     wblock->data.section.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "701:                     pcapng_debug(\"pcapng_read_section_header_block: opt_comment %s\", wblock->data.section.opt_comment);",
          "708:                     g_free(wblock->data.section.shb_hardware);",
          "709:                     wblock->data.section.shb_hardware = g_strndup((char *)option_content, oh.option_length);",
          "710:                     pcapng_debug(\"pcapng_read_section_header_block: shb_hardware %s\", wblock->data.section.shb_hardware);",
          "717:                     g_free(wblock->data.section.shb_os);",
          "718:                     wblock->data.section.shb_os = g_strndup((char *)option_content, oh.option_length);",
          "719:                     pcapng_debug(\"pcapng_read_section_header_block: shb_os %s\", wblock->data.section.shb_os);",
          "726:                     g_free(wblock->data.section.shb_user_appl);",
          "727:                     wblock->data.section.shb_user_appl = g_strndup((char *)option_content, oh.option_length);",
          "728:                     pcapng_debug(\"pcapng_read_section_header_block: shb_user_appl %s\", wblock->data.section.shb_user_appl);",
          "",
          "[Added Lines]",
          "655:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "656:                     wtap_optionblock_set_option_string(wblock->block, OPT_COMMENT, tmp_content);",
          "657:                     pcapng_debug(\"pcapng_read_section_header_block: opt_comment %s\", tmp_content);",
          "658:                     g_free(tmp_content);",
          "665:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "666:                     wtap_optionblock_set_option_string(wblock->block, OPT_SHB_HARDWARE, tmp_content);",
          "667:                     pcapng_debug(\"pcapng_read_section_header_block: shb_hardware %s\", tmp_content);",
          "668:                     g_free(tmp_content);",
          "675:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "676:                     wtap_optionblock_set_option_string(wblock->block, OPT_SHB_OS, tmp_content);",
          "677:                     pcapng_debug(\"pcapng_read_section_header_block: shb_os %s\", tmp_content);",
          "678:                     g_free(tmp_content);",
          "685:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "686:                     wtap_optionblock_set_option_string(wblock->block, OPT_SHB_USERAPPL, tmp_content);",
          "687:                     pcapng_debug(\"pcapng_read_section_header_block: shb_user_appl %s\", tmp_content);",
          "688:                     g_free(tmp_content);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "752:     int     bytes_read;",
          "753:     guint to_read, opt_cont_buf_len;",
          "754:     pcapng_interface_description_block_t idb;",
          "755:     pcapng_option_header_t oh;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:     wtapng_if_descr_mandatory_t* if_descr_mand;",
          "718:     gchar* tmp_content;",
          "719:     guint64 tmp64;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "790:     }",
          "793:     if (pn->byte_swapped) {",
          "796:     } else {",
          "799:     }",
          "805:     pcapng_debug(\"pcapng_read_if_descr_block: IDB link_type %u (%s), snap %u\",",
          "815:         pcapng_debug(\"pcapng_read_if_descr_block: snapshot length %u unrealistic.\",",
          "818:     }",
          "839:     to_read = bh->block_total_length - MIN_IDB_SIZE;",
          "",
          "[Removed Lines]",
          "794:         wblock->data.if_descr.link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "795:         wblock->data.if_descr.snap_len  = GUINT32_SWAP_LE_BE(idb.snaplen);",
          "797:         wblock->data.if_descr.link_type = idb.linktype;",
          "798:         wblock->data.if_descr.snap_len  = idb.snaplen;",
          "801:     wblock->data.if_descr.wtap_encap = wtap_pcap_encap_to_wtap_encap(wblock->data.if_descr.link_type);",
          "802:     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "803:     wblock->data.if_descr.tsprecision = tsprecision;",
          "806:                   wblock->data.if_descr.link_type,",
          "807:                   wtap_encap_string(wblock->data.if_descr.wtap_encap),",
          "808:                   wblock->data.if_descr.snap_len);",
          "810:     if (wblock->data.if_descr.snap_len > WTAP_MAX_PACKET_SIZE) {",
          "816:                       wblock->data.if_descr.snap_len);",
          "821:     wblock->data.if_descr.opt_comment = NULL;",
          "822:     wblock->data.if_descr.if_name = NULL;",
          "823:     wblock->data.if_descr.if_description = NULL;",
          "830:     wblock->data.if_descr.if_filter_str = NULL;",
          "831:     wblock->data.if_descr.bpf_filter_len = 0;",
          "832:     wblock->data.if_descr.if_filter_bpf_bytes = NULL;",
          "833:     wblock->data.if_descr.if_os = NULL;",
          "",
          "[Added Lines]",
          "756:     wblock->block = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "757:     if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(wblock->block);",
          "759:         if_descr_mand->link_type = GUINT16_SWAP_LE_BE(idb.linktype);",
          "760:         if_descr_mand->snap_len  = GUINT32_SWAP_LE_BE(idb.snaplen);",
          "762:         if_descr_mand->link_type = idb.linktype;",
          "763:         if_descr_mand->snap_len  = idb.snaplen;",
          "766:     if_descr_mand->wtap_encap = wtap_pcap_encap_to_wtap_encap(if_descr_mand->link_type);",
          "767:     if_descr_mand->time_units_per_second = time_units_per_second;",
          "768:     if_descr_mand->tsprecision = tsprecision;",
          "771:                   if_descr_mand->link_type,",
          "772:                   wtap_encap_string(if_descr_mand->wtap_encap),",
          "773:                   if_descr_mand->snap_len);",
          "775:     if (if_descr_mand->snap_len > WTAP_MAX_PACKET_SIZE) {",
          "781:                       if_descr_mand->snap_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "866:                 break;",
          "868:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "871:                 } else {",
          "872:                     pcapng_debug(\"pcapng_read_if_descr_block: opt_comment length %u seems strange\", oh.option_length);",
          "873:                 }",
          "874:                 break;",
          "876:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "879:                 } else {",
          "880:                     pcapng_debug(\"pcapng_read_if_descr_block: if_name length %u seems strange\", oh.option_length);",
          "881:                 }",
          "882:                 break;",
          "884:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "887:                 } else {",
          "888:                     pcapng_debug(\"pcapng_read_if_descr_block: if_description length %u seems strange\", oh.option_length);",
          "889:                 }",
          "",
          "[Removed Lines]",
          "869:                     wblock->data.if_descr.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "870:                     pcapng_debug(\"pcapng_read_if_descr_block: opt_comment %s\", wblock->data.if_descr.opt_comment);",
          "877:                     wblock->data.if_descr.if_name = g_strndup((char *)option_content, oh.option_length);",
          "878:                     pcapng_debug(\"pcapng_read_if_descr_block: if_name %s\", wblock->data.if_descr.if_name);",
          "885:                     wblock->data.if_descr.if_description = g_strndup((char *)option_content, oh.option_length);",
          "886:                     pcapng_debug(\"pcapng_read_if_descr_block: if_description %s\", wblock->data.if_descr.if_description);",
          "",
          "[Added Lines]",
          "816:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "817:                     wtap_optionblock_set_option_string(wblock->block, OPT_COMMENT, tmp_content);",
          "818:                     pcapng_debug(\"pcapng_read_if_descr_block: opt_comment %s\", tmp_content);",
          "819:                     g_free(tmp_content);",
          "826:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "827:                     wtap_optionblock_set_option_string(wblock->block, OPT_IDB_NAME, tmp_content);",
          "828:                     pcapng_debug(\"pcapng_read_if_descr_block: if_name %s\", tmp_content);",
          "829:                     g_free(tmp_content);",
          "836:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "837:                     wtap_optionblock_set_option_string(wblock->block, OPT_IDB_DESCR, tmp_content);",
          "838:                     pcapng_debug(\"pcapng_read_if_descr_block: if_description %s\", tmp_content);",
          "839:                     g_free(tmp_content);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "898:                     if (pn->byte_swapped)",
          "901:                 } else {",
          "902:                     pcapng_debug(\"pcapng_read_if_descr_block: if_speed length %u not 8 as expected\", oh.option_length);",
          "903:                 }",
          "",
          "[Removed Lines]",
          "897:                     memcpy(&wblock->data.if_descr.if_speed, option_content, sizeof(guint64));",
          "899:                         wblock->data.if_descr.if_speed = GUINT64_SWAP_LE_BE(wblock->data.if_descr.if_speed);",
          "900:                     pcapng_debug(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", wblock->data.if_descr.if_speed);",
          "",
          "[Added Lines]",
          "850:                     memcpy(&tmp64, option_content, sizeof(guint64));",
          "852:                         tmp64 = GUINT64_SWAP_LE_BE(tmp64);",
          "853:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_IDB_SPEED, tmp64);",
          "854:                     pcapng_debug(\"pcapng_read_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", tmp64);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "927:                     if (time_units_per_second > (((guint64)1) << 32)) {",
          "928:                         pcapng_debug(\"pcapng_open: time conversion might be inaccurate\");",
          "929:                     }",
          "932:                     if (time_units_per_second >= 1000000000)",
          "933:                         tsprecision = WTAP_TSPREC_NSEC;",
          "934:                     else if (time_units_per_second >= 1000000)",
          "",
          "[Removed Lines]",
          "930:                     wblock->data.if_descr.time_units_per_second = time_units_per_second;",
          "931:                     wblock->data.if_descr.if_tsresol = if_tsresol;",
          "",
          "[Added Lines]",
          "884:                     if_descr_mand->time_units_per_second = time_units_per_second;",
          "885:                     wtap_optionblock_set_option_uint8(wblock->block, OPT_IDB_TSRESOL, if_tsresol);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "941:                         tsprecision = WTAP_TSPREC_DSEC;",
          "942:                     else",
          "943:                         tsprecision = WTAP_TSPREC_SEC;",
          "946:                 } else {",
          "947:                     pcapng_debug(\"pcapng_read_if_descr_block: if_tsresol length %u not 1 as expected\", oh.option_length);",
          "948:                 }",
          "",
          "[Removed Lines]",
          "944:                     wblock->data.if_descr.tsprecision = tsprecision;",
          "945:                     pcapng_debug(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u, tsprecision %d\", wblock->data.if_descr.if_tsresol, wblock->data.if_descr.time_units_per_second, tsprecision);",
          "",
          "[Added Lines]",
          "898:                     if_descr_mand->tsprecision = tsprecision;",
          "899:                     pcapng_debug(\"pcapng_read_if_descr_block: if_tsresol %u, units/s %\" G_GINT64_MODIFIER \"u, tsprecision %d\", if_tsresol, if_descr_mand->time_units_per_second, tsprecision);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "954:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "958:                     if (option_content[0] == 0) {",
          "961:                     } else if (option_content[0] == 1) {",
          "965:                     }",
          "966:                 } else {",
          "967:                     pcapng_debug(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "968:                 }",
          "",
          "[Removed Lines]",
          "959:                         wblock->data.if_descr.if_filter_str = g_strndup((char *)option_content+1, oh.option_length-1);",
          "960:                         pcapng_debug(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", wblock->data.if_descr.if_filter_str, oh.option_length);",
          "962:                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "963:                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "964:                         memcpy(wblock->data.if_descr.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
          "",
          "[Added Lines]",
          "909:                     wtapng_if_descr_filter_t if_filter;",
          "910:                     memset(&if_filter, 0, sizeof(if_filter));",
          "916:                         if_filter.if_filter_str = g_strndup((char *)option_content+1, oh.option_length-1);",
          "917:                         pcapng_debug(\"pcapng_read_if_descr_block: if_filter_str %s oh.option_length %u\", if_filter.if_filter_str, oh.option_length);",
          "919:                         if_filter.bpf_filter_len = oh.option_length-1;",
          "920:                         if_filter.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "921:                         memcpy(if_filter.if_filter_bpf_bytes, (char *)option_content+1, oh.option_length-1);",
          "923:                     wtap_optionblock_set_option_custom(wblock->block, OPT_IDB_FILTER, &if_filter);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "976:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "979:                 } else {",
          "980:                     pcapng_debug(\"pcapng_read_if_descr_block: if_os length %u seems strange\", oh.option_length);",
          "981:                 }",
          "982:                 break;",
          "984:                 if (oh.option_length == 1) {",
          "989:                 } else {",
          "990:                     pcapng_debug(\"pcapng_read_if_descr_block: if_fcslen length %u not 1 as expected\", oh.option_length);",
          "",
          "[Removed Lines]",
          "977:                     wblock->data.if_descr.if_os = g_strndup((char *)option_content, oh.option_length);",
          "978:                     pcapng_debug(\"pcapng_read_if_descr_block: if_os %s\", wblock->data.if_descr.if_os);",
          "985:                     wblock->data.if_descr.if_fcslen = option_content[0];",
          "986:                     pn->if_fcslen = wblock->data.if_descr.if_fcslen;",
          "987:                     pcapng_debug(\"pcapng_read_if_descr_block: if_fcslen %u\", wblock->data.if_descr.if_fcslen);",
          "",
          "[Added Lines]",
          "935:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "936:                     wtap_optionblock_set_option_string(wblock->block, OPT_IDB_OS, tmp_content);",
          "937:                     pcapng_debug(\"pcapng_read_if_descr_block: if_os %s\", tmp_content);",
          "938:                     g_free(tmp_content);",
          "945:                     wtap_optionblock_set_option_uint8(wblock->block, OPT_IDB_TSRESOL, option_content[0]);",
          "946:                     pn->if_fcslen = option_content[0];",
          "947:                     pcapng_debug(\"pcapng_read_if_descr_block: if_fcslen %u\", pn->if_fcslen);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1056:     if (wth->file_encap == WTAP_ENCAP_UNKNOWN) {",
          "1058:     } else {",
          "1060:             wth->file_encap = WTAP_ENCAP_PER_PACKET;",
          "1061:         }",
          "1062:     }",
          "",
          "[Removed Lines]",
          "1057:         wth->file_encap = wblock->data.if_descr.wtap_encap;",
          "1059:         if (wth->file_encap != wblock->data.if_descr.wtap_encap) {",
          "",
          "[Added Lines]",
          "1017:         wth->file_encap = if_descr_mand->wtap_encap;",
          "1019:         if (wth->file_encap != if_descr_mand->wtap_encap) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1067:     if (wth->file_tsprec == WTAP_TSPREC_UNKNOWN) {",
          "1069:     } else {",
          "1071:             wth->file_tsprec = WTAP_TSPREC_PER_PACKET;",
          "1072:         }",
          "1073:     }",
          "",
          "[Removed Lines]",
          "1068:         wth->file_tsprec = wblock->data.if_descr.tsprecision;",
          "1070:         if (wth->file_tsprec != wblock->data.if_descr.tsprecision) {",
          "",
          "[Added Lines]",
          "1028:         wth->file_tsprec = if_descr_mand->tsprecision;",
          "1030:         if (wth->file_tsprec != if_descr_mand->tsprecision) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1658: #ifdef HAVE_PLUGINS",
          "1659:     option_handler *handler;",
          "1660: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1621:     gchar* tmp_content;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1913:                 break;",
          "1914:             case(OPT_COMMENT):",
          "1915:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "1918:                 } else {",
          "1919:                     pcapng_debug(\"pcapng_read_name_resolution_block: opt_comment length %u seems strange\", oh.option_length);",
          "1920:                 }",
          "",
          "[Removed Lines]",
          "1916:                     wblock->data.name_res.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "1917:                     pcapng_debug(\"pcapng_read_name_resolution_block: length %u opt_comment '%s'\", oh.option_length, wblock->data.name_res.opt_comment);",
          "",
          "[Added Lines]",
          "1877:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "1878:                     wtap_optionblock_set_option_string(wblock->block, OPT_COMMENT, tmp_content);",
          "1879:                     pcapng_debug(\"pcapng_read_name_resolution_block: length %u opt_comment '%s'\", oh.option_length, tmp_content);",
          "1880:                     g_free(tmp_content);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1957:     pcapng_interface_statistics_block_t isb;",
          "1958:     pcapng_option_header_t oh;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1923:     wtapng_if_stats_mandatory_t* if_stats_mand;",
          "1924:     char* tmp_content;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1992:         return FALSE;",
          "1993:     }",
          "1995:     if (pn->byte_swapped) {",
          "1999:     } else {",
          "2003:     }",
          "2015:     to_read = bh->block_total_length -",
          "",
          "[Removed Lines]",
          "1996:         wblock->data.if_stats.interface_id = GUINT32_SWAP_LE_BE(isb.interface_id);",
          "1997:         wblock->data.if_stats.ts_high      = GUINT32_SWAP_LE_BE(isb.timestamp_high);",
          "1998:         wblock->data.if_stats.ts_low       = GUINT32_SWAP_LE_BE(isb.timestamp_low);",
          "2000:         wblock->data.if_stats.interface_id = isb.interface_id;",
          "2001:         wblock->data.if_stats.ts_high      = isb.timestamp_high;",
          "2002:         wblock->data.if_stats.ts_low       = isb.timestamp_low;",
          "2004:     pcapng_debug(\"pcapng_read_interface_statistics_block: interface_id %u\", wblock->data.if_stats.interface_id);",
          "2007:     wblock->data.if_stats.opt_comment          = NULL;",
          "2008:     wblock->data.if_stats.isb_ifrecv           = -1;",
          "2009:     wblock->data.if_stats.isb_ifdrop           = -1;",
          "2010:     wblock->data.if_stats.isb_filteraccept     = -1;",
          "2011:     wblock->data.if_stats.isb_osdrop           = -1;",
          "2012:     wblock->data.if_stats.isb_usrdeliv         = -1;",
          "",
          "[Added Lines]",
          "1960:     wblock->block = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_STATS);",
          "1961:     if_stats_mand = (wtapng_if_stats_mandatory_t*)wtap_optionblock_get_mandatory_data(wblock->block);",
          "1963:         if_stats_mand->interface_id = GUINT32_SWAP_LE_BE(isb.interface_id);",
          "1964:         if_stats_mand->ts_high      = GUINT32_SWAP_LE_BE(isb.timestamp_high);",
          "1965:         if_stats_mand->ts_low       = GUINT32_SWAP_LE_BE(isb.timestamp_low);",
          "1967:         if_stats_mand->interface_id = isb.interface_id;",
          "1968:         if_stats_mand->ts_high      = isb.timestamp_high;",
          "1969:         if_stats_mand->ts_low       = isb.timestamp_low;",
          "1971:     pcapng_debug(\"pcapng_read_interface_statistics_block: interface_id %u\", if_stats_mand->interface_id);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2043:                 break;",
          "2045:                 if (oh.option_length > 0 && oh.option_length < opt_cont_buf_len) {",
          "2048:                 } else {",
          "2049:                     pcapng_debug(\"pcapng_read_interface_statistics_block: opt_comment length %u seems strange\", oh.option_length);",
          "2050:                 }",
          "",
          "[Removed Lines]",
          "2046:                     wblock->data.if_stats.opt_comment = g_strndup((char *)option_content, oh.option_length);",
          "2047:                     pcapng_debug(\"pcapng_read_interface_statistics_block: opt_comment %s\", wblock->data.if_stats.opt_comment);",
          "",
          "[Added Lines]",
          "2005:                     tmp_content = g_strndup((char *)option_content, oh.option_length);",
          "2006:                     wtap_optionblock_set_option_string(wblock->block, OPT_COMMENT, tmp_content);",
          "2007:                     g_free(tmp_content);",
          "2008:                     pcapng_debug(\"pcapng_read_interface_statistics_block: opt_comment %s\", tmp_content);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2053:                 if (oh.option_length == 8) {",
          "2054:                     guint32 high, low;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2016:                     guint64 starttime;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2063:                         high = GUINT32_SWAP_LE_BE(high);",
          "2064:                         low = GUINT32_SWAP_LE_BE(low);",
          "2065:                     }",
          "2070:                 } else {",
          "2071:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "2072:                 }",
          "",
          "[Removed Lines]",
          "2066:                     wblock->data.if_stats.isb_starttime = (guint64)high;",
          "2067:                     wblock->data.if_stats.isb_starttime <<= 32;",
          "2068:                     wblock->data.if_stats.isb_starttime += (guint64)low;",
          "2069:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_starttime);",
          "",
          "[Added Lines]",
          "2028:                     starttime = (guint64)high;",
          "2029:                     starttime <<= 32;",
          "2030:                     starttime += (guint64)low;",
          "2031:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_STARTTIME, starttime);",
          "2032:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime %\" G_GINT64_MODIFIER \"u\", starttime);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2075:                 if (oh.option_length == 8) {",
          "2076:                     guint32 high, low;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2040:                     guint64 endtime;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2085:                         high = GUINT32_SWAP_LE_BE(high);",
          "2086:                         low = GUINT32_SWAP_LE_BE(low);",
          "2087:                     }",
          "2092:                 } else {",
          "2093:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_starttime length %u not 8 as expected\", oh.option_length);",
          "2094:                 }",
          "2095:                 break;",
          "2097:                 if (oh.option_length == 8) {",
          "2103:                     if (pn->byte_swapped)",
          "2106:                 } else {",
          "2107:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifrecv length %u not 8 as expected\", oh.option_length);",
          "2108:                 }",
          "2109:                 break;",
          "2111:                 if (oh.option_length == 8) {",
          "2117:                     if (pn->byte_swapped)",
          "2120:                 } else {",
          "2121:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifdrop length %u not 8 as expected\", oh.option_length);",
          "2122:                 }",
          "2123:                 break;",
          "2125:                 if (oh.option_length == 8) {",
          "2131:                     if (pn->byte_swapped)",
          "2134:                 } else {",
          "2135:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_filteraccept length %u not 8 as expected\", oh.option_length);",
          "2136:                 }",
          "2137:                 break;",
          "2139:                 if (oh.option_length == 8) {",
          "2145:                     if (pn->byte_swapped)",
          "2148:                 } else {",
          "2149:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_osdrop length %u not 8 as expected\", oh.option_length);",
          "2150:                 }",
          "2151:                 break;",
          "2153:                 if (oh.option_length == 8) {",
          "2159:                     if (pn->byte_swapped)",
          "2162:                 } else {",
          "2163:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_usrdeliv length %u not 8 as expected\", oh.option_length);",
          "2164:                 }",
          "",
          "[Removed Lines]",
          "2088:                     wblock->data.if_stats.isb_endtime = (guint64)high;",
          "2089:                     wblock->data.if_stats.isb_endtime <<= 32;",
          "2090:                     wblock->data.if_stats.isb_endtime += (guint64)low;",
          "2091:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_endtime);",
          "2102:                     memcpy(&wblock->data.if_stats.isb_ifrecv, option_content, sizeof(guint64));",
          "2104:                         wblock->data.if_stats.isb_ifrecv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifrecv);",
          "2105:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifrecv);",
          "2116:                     memcpy(&wblock->data.if_stats.isb_ifdrop, option_content, sizeof(guint64));",
          "2118:                         wblock->data.if_stats.isb_ifdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_ifdrop);",
          "2119:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_ifdrop);",
          "2130:                     memcpy(&wblock->data.if_stats.isb_filteraccept, option_content, sizeof(guint64));",
          "2132:                         wblock->data.if_stats.isb_filteraccept = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_filteraccept);",
          "2133:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_filteraccept);",
          "2144:                     memcpy(&wblock->data.if_stats.isb_osdrop, option_content, sizeof(guint64));",
          "2146:                         wblock->data.if_stats.isb_osdrop = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_osdrop);",
          "2147:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_osdrop);",
          "2158:                     memcpy(&wblock->data.if_stats.isb_usrdeliv, option_content, sizeof(guint64));",
          "2160:                         wblock->data.if_stats.isb_usrdeliv = GUINT64_SWAP_LE_BE(wblock->data.if_stats.isb_usrdeliv);",
          "2161:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", wblock->data.if_stats.isb_usrdeliv);",
          "",
          "[Added Lines]",
          "2052:                     endtime = (guint64)high;",
          "2053:                     endtime <<= 32;",
          "2054:                     endtime += (guint64)low;",
          "2055:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_ENDTIME, endtime);",
          "2056:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_endtime %\" G_GINT64_MODIFIER \"u\", endtime);",
          "2063:                     guint64 ifrecv;",
          "2068:                     memcpy(&ifrecv, option_content, sizeof(guint64));",
          "2070:                         ifrecv = GUINT64_SWAP_LE_BE(ifrecv);",
          "2071:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_IFRECV, ifrecv);",
          "2072:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifrecv %\" G_GINT64_MODIFIER \"u\", ifrecv);",
          "2079:                     guint64 ifdrop;",
          "2084:                     memcpy(&ifdrop, option_content, sizeof(guint64));",
          "2086:                         ifdrop = GUINT64_SWAP_LE_BE(ifdrop);",
          "2087:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_IFDROP, ifdrop);",
          "2088:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_ifdrop %\" G_GINT64_MODIFIER \"u\", ifdrop);",
          "2095:                     guint64 filteraccept;",
          "2100:                     memcpy(&filteraccept, option_content, sizeof(guint64));",
          "2102:                         filteraccept = GUINT64_SWAP_LE_BE(filteraccept);",
          "2103:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_FILTERACCEPT, filteraccept);",
          "2104:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_filteraccept %\" G_GINT64_MODIFIER \"u\", filteraccept);",
          "2111:                     guint64 osdrop;",
          "2116:                     memcpy(&osdrop, option_content, sizeof(guint64));",
          "2118:                         osdrop = GUINT64_SWAP_LE_BE(osdrop);",
          "2119:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_OSDROP, osdrop);",
          "2120:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_osdrop %\" G_GINT64_MODIFIER \"u\", osdrop);",
          "2127:                     guint64 usrdeliv;",
          "2132:                     memcpy(&usrdeliv, option_content, sizeof(guint64));",
          "2134:                         usrdeliv = GUINT64_SWAP_LE_BE(usrdeliv);",
          "2135:                     wtap_optionblock_set_option_uint64(wblock->block, OPT_ISB_USRDELIV, usrdeliv);",
          "2136:                     pcapng_debug(\"pcapng_read_interface_statistics_block: isb_usrdeliv %\" G_GINT64_MODIFIER \"u\", usrdeliv);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2323:     pcapng_block_header_t bh;",
          "2324:     guint32 block_total_length;",
          "2329:     if (!wtap_read_bytes_or_eof(fh, &bh, sizeof bh, err, err_info)) {",
          "",
          "[Removed Lines]",
          "2326:     memset(&(wblock->data), 0, sizeof(wblock->data));",
          "",
          "[Added Lines]",
          "2301:     wblock->block = NULL;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2435: static void",
          "2436: pcapng_process_idb(wtap *wth, pcapng_t *pcapng, wtapng_block_t *wblock)",
          "2437: {",
          "2439:     interface_info_t iface_info;",
          "2467:     g_array_append_val(wth->interface_data, int_data);",
          "2474:     g_array_append_val(pcapng->interfaces, iface_info);",
          "2475: }",
          "",
          "[Removed Lines]",
          "2438:     wtapng_if_descr_t int_data;",
          "2441:     int_data.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2442:     int_data.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2443:     int_data.tsprecision = wblock->data.if_descr.tsprecision;",
          "2444:     int_data.link_type = wblock->data.if_descr.link_type;",
          "2445:     int_data.snap_len = wblock->data.if_descr.snap_len;",
          "2447:     int_data.opt_comment = wblock->data.if_descr.opt_comment;",
          "2448:     int_data.if_name = wblock->data.if_descr.if_name;",
          "2449:     int_data.if_description = wblock->data.if_descr.if_description;",
          "2454:     int_data.if_speed = wblock->data.if_descr.if_speed;",
          "2455:     int_data.if_tsresol = wblock->data.if_descr.if_tsresol;",
          "2457:     int_data.if_filter_str = wblock->data.if_descr.if_filter_str;",
          "2458:     int_data.bpf_filter_len = wblock->data.if_descr.bpf_filter_len;",
          "2459:     int_data.if_filter_bpf_bytes = wblock->data.if_descr.if_filter_bpf_bytes;",
          "2460:     int_data.if_os = wblock->data.if_descr.if_os;",
          "2461:     int_data.if_fcslen = wblock->data.if_descr.if_fcslen;",
          "2464:     int_data.num_stat_entries = 0;",
          "2465:     int_data.interface_statistics = NULL;",
          "2469:     iface_info.wtap_encap = wblock->data.if_descr.wtap_encap;",
          "2470:     iface_info.snap_len = wblock->data.if_descr.snap_len;",
          "2471:     iface_info.time_units_per_second = wblock->data.if_descr.time_units_per_second;",
          "2472:     iface_info.tsprecision = wblock->data.if_descr.tsprecision;",
          "",
          "[Added Lines]",
          "2413:     wtap_optionblock_t int_data = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "2415:     wtapng_if_descr_mandatory_t *if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data),",
          "2418:     wtap_optionblock_copy_options(int_data, wblock->block);",
          "2422:     if_descr_mand->num_stat_entries = 0;",
          "2423:     if_descr_mand->interface_statistics = NULL;",
          "2427:     iface_info.wtap_encap = wblock_if_descr_mand->wtap_encap;",
          "2428:     iface_info.snap_len = wblock_if_descr_mand->snap_len;",
          "2429:     iface_info.time_units_per_second = wblock_if_descr_mand->time_units_per_second;",
          "2430:     iface_info.tsprecision = wblock_if_descr_mand->tsprecision;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2507:     case PCAPNG_BLOCK_NOT_SHB:",
          "2512:         return WTAP_OPEN_NOT_MINE;",
          "2514:     case PCAPNG_BLOCK_ERROR:",
          "2517:         return WTAP_OPEN_ERROR;",
          "2518:     }",
          "",
          "[Removed Lines]",
          "2509:         pcapng_free_wtapng_block_data(&wblock);",
          "2516:         pcapng_free_wtapng_block_data(&wblock);",
          "",
          "[Added Lines]",
          "2467:         wtap_optionblock_free(wblock.block);",
          "2474:         wtap_optionblock_free(wblock.block);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2527:         pcapng_debug(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "2529:         return WTAP_OPEN_NOT_MINE;",
          "2530:     }",
          "2531:     pn.shb_read = TRUE;",
          "",
          "[Removed Lines]",
          "2528:         pcapng_free_wtapng_block_data(&wblock);",
          "",
          "[Added Lines]",
          "2486:         wtap_optionblock_free(wblock.block);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2543:     wth->file_encap = WTAP_ENCAP_UNKNOWN;",
          "2544:     wth->snapshot_length = 0;",
          "",
          "[Removed Lines]",
          "2538:     wth->shb_hdr.opt_comment = wblock.data.section.opt_comment;",
          "2539:     wth->shb_hdr.shb_hardware = wblock.data.section.shb_hardware;",
          "2540:     wth->shb_hdr.shb_os = wblock.data.section.shb_os;",
          "2541:     wth->shb_hdr.shb_user_appl = wblock.data.section.shb_user_appl;",
          "",
          "[Added Lines]",
          "2496:     wtap_optionblock_copy_options(wth->shb_hdr, wblock.block);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2583:         if (pcapng_read_block(wth, wth->fh, &pn, &wblock, err, err_info) != PCAPNG_BLOCK_OK) {",
          "2584:             if (*err == 0) {",
          "2585:                 pcapng_debug(\"No more IDBs available...\");",
          "2587:                 break;",
          "2588:             } else {",
          "2589:                 pcapng_debug(\"pcapng_open: couldn't read IDB\");",
          "2591:                 return WTAP_OPEN_ERROR;",
          "2592:             }",
          "2593:         }",
          "",
          "[Removed Lines]",
          "2586:                 pcapng_free_wtapng_block_data(&wblock);",
          "2590:                 pcapng_free_wtapng_block_data(&wblock);",
          "",
          "[Added Lines]",
          "2541:                 wtap_optionblock_free(wblock.block);",
          "2545:                 wtap_optionblock_free(wblock.block);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2605: {",
          "2606:     pcapng_t *pcapng = (pcapng_t *)wth->priv;",
          "2607:     wtapng_block_t wblock;",
          "2611:     wblock.frame_buffer  = wth->frame_buffer;",
          "2612:     wblock.packet_header = &wth->phdr;",
          "",
          "[Removed Lines]",
          "2608:     wtapng_if_descr_t *wtapng_if_descr;",
          "2609:     wtapng_if_stats_t if_stats;",
          "",
          "[Added Lines]",
          "2563:     wtap_optionblock_t wtapng_if_descr = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_DESCR);",
          "2564:     wtap_optionblock_t if_stats = wtap_optionblock_create(WTAP_OPTION_BLOCK_IF_STATS);",
          "2565:     wtapng_if_stats_mandatory_t *if_stats_mand_block, *if_stats_mand;",
          "2566:     wtapng_if_descr_mandatory_t *wtapng_if_descr_mand;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2656:             case(BLOCK_TYPE_ISB):",
          "2658:                 pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2661:                 } else {",
          "2666:                         pcapng_debug(\"pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry\");",
          "2668:                     }",
          "2685:                 }",
          "2686:                 break;",
          "",
          "[Removed Lines]",
          "2659:                 if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
          "2660:                     pcapng_debug(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2663:                     wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
          "2664:                     if (wtapng_if_descr->num_stat_entries == 0) {",
          "2667:                         wtapng_if_descr->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtapng_if_stats_t));",
          "2670:                     if_stats.interface_id       = wblock.data.if_stats.interface_id;",
          "2671:                     if_stats.ts_high            = wblock.data.if_stats.ts_high;",
          "2672:                     if_stats.ts_low             = wblock.data.if_stats.ts_low;",
          "2675:                     if_stats.isb_starttime      = wblock.data.if_stats.isb_starttime;",
          "2676:                     if_stats.isb_endtime        = wblock.data.if_stats.isb_endtime;",
          "2677:                     if_stats.isb_ifrecv         = wblock.data.if_stats.isb_ifrecv;",
          "2678:                     if_stats.isb_ifdrop         = wblock.data.if_stats.isb_ifdrop;",
          "2679:                     if_stats.isb_filteraccept   = wblock.data.if_stats.isb_filteraccept;",
          "2680:                     if_stats.isb_osdrop         = wblock.data.if_stats.isb_osdrop;",
          "2681:                     if_stats.isb_usrdeliv       = wblock.data.if_stats.isb_usrdeliv;",
          "2683:                     g_array_append_val(wtapng_if_descr->interface_statistics, if_stats);",
          "2684:                     wtapng_if_descr->num_stat_entries++;",
          "",
          "[Added Lines]",
          "2616:                 if_stats_mand_block = (wtapng_if_stats_mandatory_t*)wtap_optionblock_get_mandatory_data(wblock.block);",
          "2617:                 if (wth->interface_data->len <= if_stats_mand_block->interface_id) {",
          "2618:                     pcapng_debug(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", if_stats_mand_block->interface_id);",
          "2621:                     wtapng_if_descr = g_array_index(wth->interface_data, wtap_optionblock_t, if_stats_mand_block->interface_id);",
          "2622:                     wtapng_if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(wtapng_if_descr);",
          "2623:                     if (wtapng_if_descr_mand->num_stat_entries == 0) {",
          "2626:                         wtapng_if_descr_mand->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtap_optionblock_t));",
          "2629:                     if_stats_mand = (wtapng_if_stats_mandatory_t*)wtap_optionblock_get_mandatory_data(if_stats);",
          "2630:                     if_stats_mand->interface_id  = if_stats_mand_block->interface_id;",
          "2631:                     if_stats_mand->ts_high       = if_stats_mand_block->ts_high;",
          "2632:                     if_stats_mand->ts_low        = if_stats_mand_block->ts_low;",
          "2634:                     wtap_optionblock_copy_options(if_stats, wblock.block);",
          "2635:                     g_array_append_val(wtapng_if_descr_mand->interface_statistics, if_stats);",
          "2636:                     wtapng_if_descr_mand->num_stat_entries++;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2725:     ret = pcapng_read_block(wth, wth->random_fh, pcapng, &wblock, err, err_info);",
          "2727:     if (ret != PCAPNG_BLOCK_OK) {",
          "2728:         pcapng_debug(\"pcapng_seek_read: couldn't read packet block (err=%d).\",",
          "",
          "[Removed Lines]",
          "2726:     pcapng_free_wtapng_block_data(&wblock);",
          "",
          "[Added Lines]",
          "2678:     wtap_optionblock_free(wblock.block);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2765:     guint32 options_total_length = 0;",
          "2766:     guint32 comment_len = 0, shb_hardware_len = 0, shb_os_len = 0, shb_user_appl_len = 0;",
          "2767:     guint32 comment_pad_len = 0, shb_hardware_pad_len = 0, shb_os_pad_len = 0, shb_user_appl_pad_len = 0;",
          "2769:     if (wdh->shb_hdr) {",
          "2770:         pcapng_debug(\"pcapng_write_section_header_block: Have shb_hdr\");",
          "2773:             have_options = TRUE;",
          "2775:             if ((comment_len % 4)) {",
          "2776:                 comment_pad_len = 4 - (comment_len % 4);",
          "2777:             } else {",
          "",
          "[Removed Lines]",
          "2772:         if (wdh->shb_hdr->opt_comment) {",
          "2774:             comment_len = (guint32)strlen(wdh->shb_hdr->opt_comment) & 0xffff;",
          "",
          "[Added Lines]",
          "2720:     char *opt_comment, *shb_hardware, *shb_os, *shb_user_appl;",
          "2725:         wtap_optionblock_get_option_string(wdh->shb_hdr, OPT_COMMENT, &opt_comment);",
          "2726:         if (opt_comment) {",
          "2728:             comment_len = (guint32)strlen(opt_comment) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2781:         }",
          "2785:             have_options = TRUE;",
          "2787:             if ((shb_hardware_len % 4)) {",
          "2788:                 shb_hardware_pad_len = 4 - (shb_hardware_len % 4);",
          "2789:             } else {",
          "",
          "[Removed Lines]",
          "2784:         if (wdh->shb_hdr->shb_hardware) {",
          "2786:             shb_hardware_len = (guint32)strlen(wdh->shb_hdr->shb_hardware) & 0xffff;",
          "",
          "[Added Lines]",
          "2738:         wtap_optionblock_get_option_string(wdh->shb_hdr, OPT_SHB_HARDWARE, &shb_hardware);",
          "2739:         if (shb_hardware) {",
          "2741:             shb_hardware_len = (guint32)strlen(shb_hardware) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2793:         }",
          "2797:             have_options = TRUE;",
          "2799:             if ((shb_os_len % 4)) {",
          "2800:                 shb_os_pad_len = 4 - (shb_os_len % 4);",
          "2801:             } else {",
          "",
          "[Removed Lines]",
          "2796:         if (wdh->shb_hdr->shb_os) {",
          "2798:             shb_os_len = (guint32)strlen(wdh->shb_hdr->shb_os) & 0xffff;",
          "",
          "[Added Lines]",
          "2751:         wtap_optionblock_get_option_string(wdh->shb_hdr, OPT_SHB_OS, &shb_os);",
          "2752:         if (shb_os) {",
          "2754:             shb_os_len = (guint32)strlen(shb_os) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2805:         }",
          "2809:             have_options = TRUE;",
          "2811:             if ((shb_user_appl_len % 4)) {",
          "2812:                 shb_user_appl_pad_len = 4 - (shb_user_appl_len % 4);",
          "2813:             } else {",
          "",
          "[Removed Lines]",
          "2808:         if (wdh->shb_hdr->shb_user_appl) {",
          "2810:             shb_user_appl_len = (guint32)strlen(wdh->shb_hdr->shb_user_appl) & 0xffff;",
          "",
          "[Added Lines]",
          "2764:         wtap_optionblock_get_option_string(wdh->shb_hdr, OPT_SHB_USERAPPL, &shb_user_appl);",
          "2765:         if (shb_user_appl) {",
          "2767:             shb_user_appl_len = (guint32)strlen(shb_user_appl) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2857:         wdh->bytes_dumped += 4;",
          "2862:             return FALSE;",
          "2863:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "2860:         pcapng_debug(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , wdh->shb_hdr->opt_comment, comment_len, comment_pad_len);",
          "2861:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->opt_comment, comment_len, err))",
          "",
          "[Added Lines]",
          "2817:         pcapng_debug(\"pcapng_write_section_header_block, comment:'%s' comment_len %u comment_pad_len %u\" , opt_comment, comment_len, comment_pad_len);",
          "2818:         if (!wtap_dump_file_write(wdh, opt_comment, comment_len, err))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2878:         wdh->bytes_dumped += 4;",
          "2883:             return FALSE;",
          "2884:         wdh->bytes_dumped += shb_hardware_len;",
          "",
          "[Removed Lines]",
          "2881:         pcapng_debug(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , wdh->shb_hdr->shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "2882:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_hardware, shb_hardware_len, err))",
          "",
          "[Added Lines]",
          "2838:         pcapng_debug(\"pcapng_write_section_header_block, shb_hardware:'%s' shb_hardware_len %u shb_hardware_pad_len %u\" , shb_hardware, shb_hardware_len, shb_hardware_pad_len);",
          "2839:         if (!wtap_dump_file_write(wdh, shb_hardware, shb_hardware_len, err))",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2899:         wdh->bytes_dumped += 4;",
          "2904:             return FALSE;",
          "2905:         wdh->bytes_dumped += shb_os_len;",
          "",
          "[Removed Lines]",
          "2902:         pcapng_debug(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , wdh->shb_hdr->shb_os, shb_os_len, shb_os_pad_len);",
          "2903:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_os, shb_os_len, err))",
          "",
          "[Added Lines]",
          "2859:         pcapng_debug(\"pcapng_write_section_header_block, shb_os:'%s' shb_os_len %u shb_os_pad_len %u\" , shb_os, shb_os_len, shb_os_pad_len);",
          "2860:         if (!wtap_dump_file_write(wdh, shb_os, shb_os_len, err))",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2920:         wdh->bytes_dumped += 4;",
          "2925:             return FALSE;",
          "2926:         wdh->bytes_dumped += shb_user_appl_len;",
          "",
          "[Removed Lines]",
          "2923:         pcapng_debug(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , wdh->shb_hdr->shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "2924:         if (!wtap_dump_file_write(wdh, wdh->shb_hdr->shb_user_appl, shb_user_appl_len, err))",
          "",
          "[Added Lines]",
          "2880:         pcapng_debug(\"pcapng_write_section_header_block, shb_user_appl:'%s' shb_user_appl_len %u shb_user_appl_pad_len %u\" , shb_user_appl, shb_user_appl_len, shb_user_appl_pad_len);",
          "2881:         if (!wtap_dump_file_write(wdh, shb_user_appl, shb_user_appl_len, err))",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2955: static gboolean",
          "2957: {",
          "2958:     pcapng_block_header_t bh;",
          "2959:     pcapng_interface_description_block_t idb;",
          "",
          "[Removed Lines]",
          "2956: pcapng_write_if_descr_block(wtap_dumper *wdh, wtapng_if_descr_t *int_data, int *err)",
          "",
          "[Added Lines]",
          "2913: pcapng_write_if_descr_block(wtap_dumper *wdh, wtap_optionblock_t int_data, int *err)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2963:     guint32 options_total_length = 0;",
          "2964:     guint32 comment_len = 0, if_name_len = 0, if_description_len = 0 , if_os_len = 0, if_filter_str_len = 0;",
          "2965:     guint32 comment_pad_len = 0, if_name_pad_len = 0, if_description_pad_len = 0, if_os_pad_len = 0, if_filter_str_pad_len = 0;",
          "2968:     pcapng_debug(\"pcapng_write_if_descr_block: encap = %d (%s), snaplen = %d\",",
          "2975:         return FALSE;",
          "2976:     }",
          "2980:         have_options = TRUE;",
          "2982:         if ((comment_len % 4)) {",
          "2983:             comment_pad_len = 4 - (comment_len % 4);",
          "2984:         } else {",
          "",
          "[Removed Lines]",
          "2969:                   int_data->link_type,",
          "2970:                   wtap_encap_string(wtap_pcap_encap_to_wtap_encap(int_data->link_type)),",
          "2971:                   int_data->snap_len);",
          "2973:     if (int_data->link_type == (guint16)-1) {",
          "2979:     if (int_data->opt_comment) {",
          "2981:         comment_len = (guint32)strlen(int_data->opt_comment) & 0xffff;",
          "",
          "[Added Lines]",
          "2923:     wtapng_if_descr_mandatory_t* int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "2924:     char *opt_comment, *if_name, *if_description, *if_os;",
          "2925:     guint64 if_speed;",
          "2926:     guint8 if_tsresol, if_fcslen;",
          "2927:     wtapng_if_descr_filter_t* if_filter;",
          "2930:                   int_data_mand->link_type,",
          "2931:                   wtap_encap_string(wtap_pcap_encap_to_wtap_encap(int_data_mand->link_type)),",
          "2932:                   int_data_mand->snap_len);",
          "2934:     if (int_data_mand->link_type == (guint16)-1) {",
          "2940:     wtap_optionblock_get_option_string(int_data, OPT_COMMENT, &opt_comment);",
          "2941:     if (opt_comment) {",
          "2943:         comment_len = (guint32)strlen(opt_comment) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2994:         have_options = TRUE;",
          "2996:         if ((if_name_len % 4)) {",
          "2997:             if_name_pad_len = 4 - (if_name_len % 4);",
          "2998:         } else {",
          "",
          "[Removed Lines]",
          "2993:     if (int_data->if_name) {",
          "2995:         if_name_len = (guint32)strlen(int_data->if_name) & 0xffff;",
          "",
          "[Added Lines]",
          "2955:     wtap_optionblock_get_option_string(int_data, OPT_IDB_NAME, &if_name);",
          "2956:     if (if_name) {",
          "2958:         if_name_len = (guint32)strlen(if_name) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3008:         have_options = TRUE;",
          "3010:         if ((if_description_len % 4)) {",
          "3011:             if_description_pad_len = 4 - (if_description_len % 4);",
          "3012:         } else {",
          "",
          "[Removed Lines]",
          "3007:     if (int_data->if_description) {",
          "3009:         if_description_len = (guint32)strlen(int_data->if_description) & 0xffff;",
          "",
          "[Added Lines]",
          "2970:     wtap_optionblock_get_option_string(int_data, OPT_IDB_DESCR, &if_description);",
          "2971:     if (if_description) {",
          "2973:         if_description_len = (guint32)strlen(if_description) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3027:         have_options = TRUE;",
          "3028:         options_total_length = options_total_length + 8 + 4;",
          "3029:     }",
          "3034:         have_options = TRUE;",
          "3035:         options_total_length = options_total_length + 4 + 4;",
          "3036:     }",
          "",
          "[Removed Lines]",
          "3026:     if (int_data->if_speed != 0) {",
          "3033:     if (int_data->if_tsresol != 0) {",
          "",
          "[Added Lines]",
          "2990:     wtap_optionblock_get_option_uint64(int_data, OPT_IDB_SPEED, &if_speed);",
          "2991:     if (if_speed != 0) {",
          "2998:     wtap_optionblock_get_option_uint8(int_data, OPT_IDB_TSRESOL, &if_tsresol);",
          "2999:     if (if_tsresol != 0) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3045:         have_options = TRUE;",
          "3047:         if ((if_filter_str_len % 4)) {",
          "3048:             if_filter_str_pad_len = 4 - (if_filter_str_len % 4);",
          "3049:         } else {",
          "",
          "[Removed Lines]",
          "3044:     if (int_data->if_filter_str) {",
          "3046:         if_filter_str_len = (guint32)(strlen(int_data->if_filter_str) + 1) & 0xffff;",
          "",
          "[Added Lines]",
          "3010:     wtap_optionblock_get_option_custom(int_data, OPT_IDB_FILTER, (void**)&if_filter);",
          "3011:     if (if_filter->if_filter_str) {",
          "3013:         if_filter_str_len = (guint32)(strlen(if_filter->if_filter_str) + 1) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3058:         have_options = TRUE;",
          "3060:         if ((if_os_len % 4)) {",
          "3061:             if_os_pad_len = 4 - (if_os_len % 4);",
          "3062:         } else {",
          "",
          "[Removed Lines]",
          "3057:     if (int_data->if_os) {",
          "3059:         if_os_len = (guint32)strlen(int_data->if_os) & 0xffff;",
          "",
          "[Added Lines]",
          "3024:     wtap_optionblock_get_option_string(int_data, OPT_IDB_OS, &if_os);",
          "3025:     if (if_os) {",
          "3027:         if_os_len = (guint32)strlen(if_os) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3072:     }",
          "",
          "[Removed Lines]",
          "3071:     if (int_data->if_fcslen != 0) {",
          "",
          "[Added Lines]",
          "3039:     wtap_optionblock_get_option_uint8(int_data, OPT_IDB_FCSLEN, &if_fcslen);",
          "3040:     if (if_fcslen != 0) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3089:     wdh->bytes_dumped += sizeof bh;",
          "3093:     idb.reserved    = 0;",
          "3096:     if (!wtap_dump_file_write(wdh, &idb, sizeof idb, err))",
          "3097:         return FALSE;",
          "",
          "[Removed Lines]",
          "3092:     idb.linktype    = int_data->link_type;",
          "3094:     idb.snaplen     = int_data->snap_len;",
          "",
          "[Added Lines]",
          "3061:     idb.linktype    = int_data_mand->link_type;",
          "3063:     idb.snaplen     = int_data_mand->snap_len;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3106:         wdh->bytes_dumped += 4;",
          "3111:             return FALSE;",
          "3112:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "3109:         pcapng_debug(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , int_data->opt_comment, comment_len, comment_pad_len);",
          "3110:         if (!wtap_dump_file_write(wdh, int_data->opt_comment, comment_len, err))",
          "",
          "[Added Lines]",
          "3078:         pcapng_debug(\"pcapng_write_if_descr_block, comment:'%s' comment_len %u comment_pad_len %u\" , opt_comment, comment_len, comment_pad_len);",
          "3079:         if (!wtap_dump_file_write(wdh, opt_comment, comment_len, err))",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3129:         wdh->bytes_dumped += 4;",
          "3134:             return FALSE;",
          "3135:         wdh->bytes_dumped += if_name_len;",
          "",
          "[Removed Lines]",
          "3132:         pcapng_debug(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , int_data->if_name, if_name_len, if_name_pad_len);",
          "3133:         if (!wtap_dump_file_write(wdh, int_data->if_name, if_name_len, err))",
          "",
          "[Added Lines]",
          "3101:         pcapng_debug(\"pcapng_write_if_descr_block, if_name:'%s' if_name_len %u if_name_pad_len %u\" , if_name, if_name_len, if_name_pad_len);",
          "3102:         if (!wtap_dump_file_write(wdh, if_name, if_name_len, err))",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3152:         wdh->bytes_dumped += 4;",
          "3157:             return FALSE;",
          "3158:         wdh->bytes_dumped += if_description_len;",
          "",
          "[Removed Lines]",
          "3155:         pcapng_debug(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , int_data->if_description, if_description_len, if_description_pad_len);",
          "3156:         if (!wtap_dump_file_write(wdh, int_data->if_description, if_description_len, err))",
          "",
          "[Added Lines]",
          "3124:         pcapng_debug(\"pcapng_write_if_descr_block, if_description:'%s' if_description_len %u if_description_pad_len %u\" , if_description, if_description_len, if_description_pad_len);",
          "3125:         if (!wtap_dump_file_write(wdh, if_description, if_description_len, err))",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3177:         option_hdr.type          = OPT_IDB_SPEED;",
          "3178:         option_hdr.value_length = 8;",
          "3179:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3176:     if (int_data->if_speed != 0) {",
          "",
          "[Added Lines]",
          "3145:     if (if_speed != 0) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3181:         wdh->bytes_dumped += 4;",
          "3186:             return FALSE;",
          "3187:         wdh->bytes_dumped += 8;",
          "3188:     }",
          "",
          "[Removed Lines]",
          "3184:         pcapng_debug(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", int_data->if_speed);",
          "3185:         if (!wtap_dump_file_write(wdh, &int_data->if_speed, sizeof(guint64), err))",
          "",
          "[Added Lines]",
          "3153:         pcapng_debug(\"pcapng_write_if_descr_block: if_speed %\" G_GINT64_MODIFIER \"u (bps)\", if_speed);",
          "3154:         if (!wtap_dump_file_write(wdh, &if_speed, sizeof(guint64), err))",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3196:         option_hdr.type          = OPT_IDB_TSRESOL;",
          "3197:         option_hdr.value_length = 1;",
          "3198:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3195:     if (int_data->if_tsresol != 0) {",
          "",
          "[Added Lines]",
          "3164:     if (if_tsresol != 0) {",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3200:         wdh->bytes_dumped += 4;",
          "3205:             return FALSE;",
          "3206:         wdh->bytes_dumped += 1;",
          "3207:         if (!wtap_dump_file_write(wdh, &zero_pad, 3, err))",
          "",
          "[Removed Lines]",
          "3203:         pcapng_debug(\"pcapng_write_if_descr_block: if_tsresol %u\", int_data->if_tsresol);",
          "3204:         if (!wtap_dump_file_write(wdh, &int_data->if_tsresol, 1, err))",
          "",
          "[Added Lines]",
          "3172:         pcapng_debug(\"pcapng_write_if_descr_block: if_tsresol %u\", if_tsresol);",
          "3173:         if (!wtap_dump_file_write(wdh, &if_tsresol, 1, err))",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3229:         wdh->bytes_dumped += 1;",
          "3235:             return FALSE;",
          "3236:         wdh->bytes_dumped += if_filter_str_len - 1;",
          "",
          "[Removed Lines]",
          "3232:         pcapng_debug(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , int_data->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "3234:         if (!wtap_dump_file_write(wdh, int_data->if_filter_str, if_filter_str_len-1, err))",
          "",
          "[Added Lines]",
          "3201:         pcapng_debug(\"pcapng_write_if_descr_block, if_filter_str:'%s' if_filter_str_len %u if_filter_str_pad_len %u\" , if_filter->if_filter_str, if_filter_str_len, if_filter_str_pad_len);",
          "3203:         if (!wtap_dump_file_write(wdh, if_filter->if_filter_str, if_filter_str_len-1, err))",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3253:         wdh->bytes_dumped += 4;",
          "3258:             return FALSE;",
          "3259:         wdh->bytes_dumped += if_os_len;",
          "",
          "[Removed Lines]",
          "3256:         pcapng_debug(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , int_data->if_os, if_os_len, if_os_pad_len);",
          "3257:         if (!wtap_dump_file_write(wdh, int_data->if_os, if_os_len, err))",
          "",
          "[Added Lines]",
          "3225:         pcapng_debug(\"pcapng_write_if_descr_block, if_os:'%s' if_os_len %u if_os_pad_len %u\" , if_os, if_os_len, if_os_pad_len);",
          "3226:         if (!wtap_dump_file_write(wdh, if_os, if_os_len, err))",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3292: }",
          "3294: static gboolean",
          "3296: {",
          "3298:     pcapng_block_header_t bh;",
          "",
          "[Removed Lines]",
          "3295: pcapng_write_interface_statistics_block(wtap_dumper *wdh, wtapng_if_stats_t *if_stats, int *err)",
          "",
          "[Added Lines]",
          "3264: pcapng_write_interface_statistics_block(wtap_dumper *wdh, wtap_optionblock_t if_stats, int *err)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3303:     guint32 options_total_length = 0;",
          "3304:     guint32 comment_len = 0;",
          "3305:     guint32 comment_pad_len = 0;",
          "3307:     pcapng_debug(\"pcapng_write_interface_statistics_block\");",
          "3312:         have_options = TRUE;",
          "3314:         if ((comment_len % 4)) {",
          "3315:             comment_pad_len = 4 - (comment_len % 4);",
          "3316:         } else {",
          "",
          "[Removed Lines]",
          "3311:     if (if_stats->opt_comment) {",
          "3313:         comment_len = (guint32)strlen(if_stats->opt_comment) & 0xffff;",
          "",
          "[Added Lines]",
          "3275:     char *opt_comment;",
          "3276:     guint64 isb_starttime, isb_endtime, isb_ifrecv, isb_ifdrop, isb_filteraccept, isb_osdrop, isb_usrdeliv;",
          "3277:     wtapng_if_stats_mandatory_t* if_stats_mand;",
          "3281:     wtap_optionblock_get_option_string(if_stats, OPT_COMMENT, &opt_comment);",
          "3283:     if (opt_comment) {",
          "3285:         comment_len = (guint32)strlen(opt_comment) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3318:         }",
          "3319:         options_total_length = options_total_length + comment_len + comment_pad_len + 4 /* comment options tag */ ;",
          "3320:     }",
          "3323:         have_options = TRUE;",
          "3324:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3325:     }",
          "3328:         have_options = TRUE;",
          "3329:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3330:     }",
          "3333:         have_options = TRUE;",
          "3334:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3335:     }",
          "3338:         have_options = TRUE;",
          "3339:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3340:     }",
          "3343:         have_options = TRUE;",
          "3344:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3345:     }",
          "3348:         have_options = TRUE;",
          "3349:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3350:     }",
          "3353:         have_options = TRUE;",
          "3354:         options_total_length = options_total_length + 8 + 4 /* options tag */ ;",
          "3355:     }",
          "",
          "[Removed Lines]",
          "3322:     if (if_stats->isb_starttime != 0) {",
          "3327:     if (if_stats->isb_endtime != 0) {",
          "3332:     if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3337:     if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3342:     if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3347:     if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3352:     if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3294:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_STARTTIME, &isb_starttime);",
          "3295:     if (isb_starttime != 0) {",
          "3299:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_ENDTIME, &isb_endtime);",
          "3300:     if (isb_endtime != 0) {",
          "3304:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_IFRECV, &isb_ifrecv);",
          "3305:     if (isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3309:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_IFDROP, &isb_ifdrop);",
          "3310:     if (isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3314:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_FILTERACCEPT, &isb_filteraccept);",
          "3315:     if (isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3319:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_OSDROP, &isb_osdrop);",
          "3320:     if (isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "3324:     wtap_optionblock_get_option_uint64(if_stats, OPT_ISB_USRDELIV, &isb_usrdeliv);",
          "3325:     if (isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3369:     wdh->bytes_dumped += sizeof bh;",
          "3377:     if (!wtap_dump_file_write(wdh, &isb, sizeof isb, err))",
          "3378:         return FALSE;",
          "",
          "[Removed Lines]",
          "3372:     isb.interface_id                = if_stats->interface_id;",
          "3373:     isb.timestamp_high              = if_stats->ts_high;",
          "3374:     isb.timestamp_low               = if_stats->ts_low;",
          "",
          "[Added Lines]",
          "3345:     if_stats_mand = (wtapng_if_stats_mandatory_t*)wtap_optionblock_get_mandatory_data(if_stats);",
          "3347:     isb.interface_id                = if_stats_mand->interface_id;",
          "3348:     isb.timestamp_high              = if_stats_mand->ts_high;",
          "3349:     isb.timestamp_low               = if_stats_mand->ts_low;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3387:         wdh->bytes_dumped += 4;",
          "3392:             return FALSE;",
          "3393:         wdh->bytes_dumped += comment_len;",
          "",
          "[Removed Lines]",
          "3390:         pcapng_debug(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , if_stats->opt_comment, comment_len, comment_pad_len);",
          "3391:         if (!wtap_dump_file_write(wdh, if_stats->opt_comment, comment_len, err))",
          "",
          "[Added Lines]",
          "3364:         pcapng_debug(\"pcapng_write_interface_statistics_block, comment:'%s' comment_len %u comment_pad_len %u\" , opt_comment, comment_len, comment_pad_len);",
          "3365:         if (!wtap_dump_file_write(wdh, opt_comment, comment_len, err))",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3400:         }",
          "3401:     }",
          "3404:         guint32 high, low;",
          "3406:         option_hdr.type = OPT_ISB_STARTTIME;",
          "3407:         option_hdr.value_length = 8;",
          "3410:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3411:             return FALSE;",
          "3412:         wdh->bytes_dumped += 4;",
          "3416:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3417:             return FALSE;",
          "3418:         wdh->bytes_dumped += 4;",
          "",
          "[Removed Lines]",
          "3403:     if (if_stats->isb_starttime != 0) {",
          "3408:         high = (guint32)((if_stats->isb_starttime>>32) & 0xffffffff);",
          "3409:         low = (guint32)(if_stats->isb_starttime & 0xffffffff);",
          "3415:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_starttime);",
          "",
          "[Added Lines]",
          "3377:     if (isb_starttime != 0) {",
          "3382:         high = (guint32)((isb_starttime>>32) & 0xffffffff);",
          "3383:         low = (guint32)(isb_starttime & 0xffffffff);",
          "3389:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , isb_starttime);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3421:         wdh->bytes_dumped += 4;",
          "3422:     }",
          "3425:         guint32 high, low;",
          "3427:         option_hdr.type = OPT_ISB_ENDTIME;",
          "3428:         option_hdr.value_length = 8;",
          "3431:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "3432:             return FALSE;",
          "3433:         wdh->bytes_dumped += 4;",
          "3437:         if (!wtap_dump_file_write(wdh, &high, 4, err))",
          "3438:             return FALSE;",
          "3439:         wdh->bytes_dumped += 4;",
          "",
          "[Removed Lines]",
          "3424:     if (if_stats->isb_endtime != 0) {",
          "3429:         high = (guint32)((if_stats->isb_endtime>>32) & 0xffffffff);",
          "3430:         low = (guint32)(if_stats->isb_endtime & 0xffffffff);",
          "3436:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_endtime);",
          "",
          "[Added Lines]",
          "3398:     if (isb_endtime != 0) {",
          "3403:         high = (guint32)((isb_endtime>>32) & 0xffffffff);",
          "3404:         low = (guint32)(isb_endtime & 0xffffffff);",
          "3410:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_starttime: %\" G_GINT64_MODIFIER \"u\" , isb_endtime);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3442:         wdh->bytes_dumped += 4;",
          "3443:     }",
          "3446:         option_hdr.type          = OPT_ISB_IFRECV;",
          "3447:         option_hdr.value_length  = 8;",
          "3448:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3445:     if (if_stats->isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3419:     if (isb_ifrecv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3450:         wdh->bytes_dumped += 4;",
          "3455:             return FALSE;",
          "3456:         wdh->bytes_dumped += 8;",
          "3457:     }",
          "3460:         option_hdr.type          = OPT_ISB_IFDROP;",
          "3461:         option_hdr.value_length  = 8;",
          "3462:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3453:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifrecv);",
          "3454:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifrecv, 8, err))",
          "3459:     if (if_stats->isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3427:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifrecv: %\" G_GINT64_MODIFIER \"u\" , isb_ifrecv);",
          "3428:         if (!wtap_dump_file_write(wdh, &isb_ifrecv, 8, err))",
          "3433:     if (isb_ifdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3464:         wdh->bytes_dumped += 4;",
          "3469:             return FALSE;",
          "3470:         wdh->bytes_dumped += 8;",
          "3471:     }",
          "3474:         option_hdr.type          = OPT_ISB_FILTERACCEPT;",
          "3475:         option_hdr.value_length  = 8;",
          "3476:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3467:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_ifdrop);",
          "3468:         if (!wtap_dump_file_write(wdh, &if_stats->isb_ifdrop, 8, err))",
          "3473:     if (if_stats->isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3441:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_ifdrop: %\" G_GINT64_MODIFIER \"u\" , isb_ifdrop);",
          "3442:         if (!wtap_dump_file_write(wdh, &isb_ifdrop, 8, err))",
          "3447:     if (isb_filteraccept != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3478:         wdh->bytes_dumped += 4;",
          "3483:             return FALSE;",
          "3484:         wdh->bytes_dumped += 8;",
          "3485:     }",
          "3488:         option_hdr.type          = OPT_ISB_OSDROP;",
          "3489:         option_hdr.value_length  = 8;",
          "3490:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3481:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_filteraccept);",
          "3482:         if (!wtap_dump_file_write(wdh, &if_stats->isb_filteraccept, 8, err))",
          "3487:     if (if_stats->isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3455:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_filteraccept: %\" G_GINT64_MODIFIER \"u\" , isb_filteraccept);",
          "3456:         if (!wtap_dump_file_write(wdh, &isb_filteraccept, 8, err))",
          "3461:     if (isb_osdrop != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3492:         wdh->bytes_dumped += 4;",
          "3497:             return FALSE;",
          "3498:         wdh->bytes_dumped += 8;",
          "3499:     }",
          "3502:         option_hdr.type          = OPT_ISB_USRDELIV;",
          "3503:         option_hdr.value_length  = 8;",
          "3504:         if (!wtap_dump_file_write(wdh, &option_hdr, 4, err))",
          "",
          "[Removed Lines]",
          "3495:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_osdrop);",
          "3496:         if (!wtap_dump_file_write(wdh, &if_stats->isb_osdrop, 8, err))",
          "3501:     if (if_stats->isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "[Added Lines]",
          "3469:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_osdrop: %\" G_GINT64_MODIFIER \"u\" , isb_osdrop);",
          "3470:         if (!wtap_dump_file_write(wdh, &isb_osdrop, 8, err))",
          "3475:     if (isb_usrdeliv != G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF)) {",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3506:         wdh->bytes_dumped += 4;",
          "3511:             return FALSE;",
          "3512:         wdh->bytes_dumped += 8;",
          "3513:     }",
          "",
          "[Removed Lines]",
          "3509:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , if_stats->isb_usrdeliv);",
          "3510:         if (!wtap_dump_file_write(wdh, &if_stats->isb_usrdeliv, 8, err))",
          "",
          "[Added Lines]",
          "3483:         pcapng_debug(\"pcapng_write_interface_statistics_block, isb_usrdeliv: %\" G_GINT64_MODIFIER \"u\" , isb_usrdeliv);",
          "3484:         if (!wtap_dump_file_write(wdh, &isb_usrdeliv, 8, err))",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3546:     guint32 options_total_length = 0;",
          "3547:     struct option option_hdr;",
          "3548:     guint32 comment_len = 0, comment_pad_len = 0;",
          "3552:     if (phdr->caplen > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "3549:     wtapng_if_descr_t int_data;",
          "",
          "[Added Lines]",
          "3523:     wtap_optionblock_t int_data;",
          "3524:     wtapng_if_descr_mandatory_t *int_data_mand;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3612:         return FALSE;",
          "3613:     }",
          "3615:                              epb.interface_id);",
          "3618:     epb.timestamp_high      = (guint32)(ts >> 32);",
          "3619:     epb.timestamp_low       = (guint32)ts;",
          "3620:     epb.captured_len        = phdr->caplen + phdr_len;",
          "",
          "[Removed Lines]",
          "3614:     int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t,",
          "3616:     ts = ((guint64)phdr->ts.secs) * int_data.time_units_per_second +",
          "3617:         (((guint64)phdr->ts.nsecs) * int_data.time_units_per_second) / 1000000000;",
          "",
          "[Added Lines]",
          "3589:     int_data = g_array_index(wdh->interface_data, wtap_optionblock_t,",
          "3591:     int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "3592:     ts = ((guint64)phdr->ts.secs) * int_data_mand->time_units_per_second +",
          "3593:         (((guint64)phdr->ts.nsecs) * int_data_mand->time_units_per_second) / 1000000000;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3876:         guint32 options_total_length = 0;",
          "3877:         struct option option_hdr;",
          "3878:         guint32 comment_len = 0, comment_pad_len = 0;",
          "3880:         guint32 prev_rec_off = rec_off;",
          "3884:             have_options = TRUE;",
          "3886:             if ((comment_len % 4)) {",
          "3887:                 comment_pad_len = 4 - (comment_len % 4);",
          "3888:             } else {",
          "",
          "[Removed Lines]",
          "3879:         wtapng_name_res_t *nrb_hdr = wdh->nrb_hdr;",
          "3883:         if (nrb_hdr->opt_comment) {",
          "3885:             comment_len = (guint32)strlen(nrb_hdr->opt_comment) & 0xffff;",
          "",
          "[Added Lines]",
          "3855:         wtap_optionblock_t nrb_hdr = wdh->nrb_hdr;",
          "3857:         char* opt_comment;",
          "3860:         wtap_optionblock_get_option_string(nrb_hdr, OPT_COMMENT, &opt_comment);",
          "3861:         if (opt_comment) {",
          "3863:             comment_len = (guint32)strlen(opt_comment) & 0xffff;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3935:                 rec_off += (guint32)sizeof(option_hdr);",
          "3939:                 rec_off += comment_len;",
          "3940:                 memset(rec_data + rec_off, 0, comment_pad_len);",
          "3941:                 rec_off += comment_pad_len;",
          "",
          "[Removed Lines]",
          "3938:                 memcpy(rec_data + rec_off, nrb_hdr->opt_comment, comment_len);",
          "",
          "[Added Lines]",
          "3916:                 memcpy(rec_data + rec_off, opt_comment, comment_len);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4039:     for (i = 0; i < wdh->interface_data->len; i++) {",
          "4051:                 return FALSE;",
          "4052:             }",
          "4053:         }",
          "",
          "[Removed Lines]",
          "4042:         wtapng_if_descr_t int_data;",
          "4044:         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "4045:         for (j = 0; j < int_data.num_stat_entries; j++) {",
          "4046:             wtapng_if_stats_t if_stats;",
          "4048:             if_stats = g_array_index(int_data.interface_statistics, wtapng_if_stats_t, j);",
          "4049:             pcapng_debug(\"pcapng_dump_finish: write ISB for interface %u\",if_stats.interface_id);",
          "4050:             if (!pcapng_write_interface_statistics_block(wdh, &if_stats, err)) {",
          "",
          "[Added Lines]",
          "4020:         wtap_optionblock_t int_data;",
          "4021:         wtapng_if_descr_mandatory_t *int_data_mand;",
          "4023:         int_data = g_array_index(wdh->interface_data, wtap_optionblock_t, i);",
          "4024:         int_data_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(int_data);",
          "4026:         for (j = 0; j < int_data_mand->num_stat_entries; j++) {",
          "4027:             wtap_optionblock_t if_stats;",
          "4029:             if_stats = g_array_index(int_data_mand->interface_statistics, wtap_optionblock_t, j);",
          "4030:             pcapng_debug(\"pcapng_dump_finish: write ISB for interface %u\", ((wtapng_if_stats_mandatory_t*)wtap_optionblock_get_mandatory_data(if_stats))->interface_id);",
          "4031:             if (!pcapng_write_interface_statistics_block(wdh, if_stats, err)) {",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4089:     for (i = 0; i < wdh->interface_data->len; i++) {",
          "4097:             return FALSE;",
          "4098:         }",
          "",
          "[Removed Lines]",
          "4092:         wtapng_if_descr_t int_data;",
          "4094:         int_data = g_array_index(wdh->interface_data, wtapng_if_descr_t, i);",
          "4096:         if (!pcapng_write_if_descr_block(wdh, &int_data, err)) {",
          "",
          "[Added Lines]",
          "4073:         wtap_optionblock_t int_data;",
          "4075:         int_data = g_array_index(wdh->interface_data, wtap_optionblock_t, i);",
          "4077:         if (!pcapng_write_if_descr_block(wdh, int_data, err)) {",
          "",
          "---------------"
        ],
        "wiretap/pcapng.h||wiretap/pcapng.h": [
          "File: wiretap/pcapng.h -> wiretap/pcapng.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #define __W_PCAPNG_H__",
          "24: #include <glib.h>",
          "26: #include \"ws_symbol_export.h\"",
          "28: wtap_open_return_val pcapng_open(wtap *wth, int *err, gchar **err_info);",
          "29: gboolean pcapng_dump_open(wtap_dumper *wdh, int *err);",
          "30: int pcapng_dump_can_write_encap(int encap);",
          "",
          "[Removed Lines]",
          "25: #include <wtap.h>",
          "",
          "[Added Lines]",
          "25: #include \"wtap.h\"",
          "29: #define OPT_EOFOPT           0x0000",
          "33: #define OPT_SHB_HARDWARE     0x0002 /**< NULL if not available",
          "37: #define OPT_SHB_OS           0x0003 /**< NULL if not available, UTF-8 string containing the",
          "40: #define OPT_SHB_USERAPPL     0x0004 /**< NULL if not available, UTF-8 string containing the",
          "45: #define OPT_IDB_NAME         0x0002 /**< NULL if not available, A UTF-8 string containing the name",
          "49: #define OPT_IDB_DESCR        0x0003 /**< NULL if not available, A UTF-8 string containing the description",
          "53: #define OPT_IDB_IP4ADDR      0x0004 /**< XXX: if_IPv4addr Interface network address and netmask.",
          "58: #define OPT_IDB_IP6ADDR      0x0005 /* XXX: if_IPv6addr Interface network address and prefix length (stored in the last byte).",
          "65: #define OPT_IDB_SPEED        0x0008 /**< 0xFFFFFFFF if unknown",
          "68: #define OPT_IDB_TSRESOL      0x0009 /**< Resolution of timestamps. If the Most Significant Bit is equal to zero,",
          "78: #define OPT_IDB_FILTER       0x000B /**< The filter (e.g. \"capture only TCP traffic\") used to capture traffic.",
          "85: #define OPT_IDB_OS           0x000C /**< NULL if not available, A UTF-8 string containing the name of the operating system of the",
          "93: #define OPT_IDB_FCSLEN       0x000D /**< An integer value that specified the length of the",
          "98: #define OPT_IDB_TSOFFSET     0x000E /**< XXX: A 64 bits integer value that specifies an offset (in seconds)",
          "107: #define OPT_ISB_STARTTIME    0x0002",
          "108: #define OPT_ISB_ENDTIME      0x0003",
          "109: #define OPT_ISB_IFRECV       0x0004",
          "110: #define OPT_ISB_IFDROP       0x0005",
          "111: #define OPT_ISB_FILTERACCEPT 0x0006",
          "112: #define OPT_ISB_OSDROP       0x0007",
          "113: #define OPT_ISB_USRDELIV     0x0008",
          "",
          "---------------"
        ],
        "wiretap/wtap-int.h||wiretap/wtap-int.h": [
          "File: wiretap/wtap-int.h -> wiretap/wtap-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <wsutil/file_util.h>",
          "33: #include \"wtap.h\"",
          "35: WS_DLL_PUBLIC",
          "36: int wtap_fstat(wtap *wth, ws_statb64 *statb, int *err);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"wtap_opttypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     guint                       snapshot_length;",
          "50:     struct Buffer               *frame_buffer;",
          "51:     struct wtap_pkthdr          phdr;",
          "",
          "[Removed Lines]",
          "52:     struct wtapng_section_s     shb_hdr;",
          "",
          "[Added Lines]",
          "54:     wtap_optionblock_t          shb_hdr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118: };",
          "",
          "[Removed Lines]",
          "115:     wtapng_section_t        *shb_hdr;",
          "",
          "[Added Lines]",
          "117:     wtap_optionblock_t       shb_hdr;",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #endif",
          "30: #include \"wtap-int.h\"",
          "32: #include \"file_wrappers.h\"",
          "33: #include <wsutil/file_util.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"wtap_opttypes.h\"",
          "32: #include \"pcapng.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: void",
          "80: wtap_register_plugin_types(void)",
          "81: {",
          "82:  add_plugin_type(\"libwiretap\", check_for_wtap_plugin);",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  wtap_opttypes_initialize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: const gchar *",
          "161: wtap_file_get_shb_comment(wtap *wth)",
          "162: {",
          "164: }",
          "167: wtap_file_get_shb(wtap *wth)",
          "168: {",
          "170: }",
          "173: wtap_file_get_shb_for_new_file(wtap *wth)",
          "174: {",
          "177:  if (wth == NULL)",
          "187:  return shb_hdr;",
          "188: }",
          "",
          "[Removed Lines]",
          "163:  return wth ? wth->shb_hdr.opt_comment : NULL;",
          "166: const wtapng_section_t *",
          "169:  return wth ? &(wth->shb_hdr) : NULL;",
          "172: wtapng_section_t *",
          "175:  wtapng_section_t *shb_hdr;",
          "178:      return NULL;",
          "180:  shb_hdr = g_new0(wtapng_section_t,1);",
          "182:  shb_hdr->section_length = -1;",
          "184:  shb_hdr->opt_comment = g_strdup(wth->shb_hdr.opt_comment);",
          "",
          "[Added Lines]",
          "168:  char* opt_comment;",
          "169:  if (wth == NULL)",
          "170:   return NULL;",
          "172:  wtap_optionblock_get_option_string(wth->shb_hdr, OPT_COMMENT, &opt_comment);",
          "173:  return opt_comment;",
          "176: wtap_optionblock_t",
          "179:  return wth ? wth->shb_hdr : NULL;",
          "182: wtap_optionblock_t",
          "185:  wtap_optionblock_t shb_hdr;",
          "186:  char* opt_comment;",
          "189:   return NULL;",
          "191:  shb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_SECTION);",
          "194:  wtap_optionblock_get_option_string(wth->shb_hdr, OPT_COMMENT, &opt_comment);",
          "195:  wtap_optionblock_set_option_string(shb_hdr, OPT_COMMENT, opt_comment);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190: const gchar*",
          "191: wtap_get_nrb_comment(wtap *wth)",
          "192: {",
          "193:  g_assert(wth);",
          "196:   return NULL;",
          "199: }",
          "201: void",
          "",
          "[Removed Lines]",
          "195:  if (wth == NULL)",
          "198:  return wth->nrb_hdr ? wth->nrb_hdr->opt_comment : NULL;",
          "",
          "[Added Lines]",
          "203:  char* opt_comment;",
          "206:  if ((wth == NULL) || (wth->nrb_hdr == NULL))",
          "209:  wtap_optionblock_get_option_string(wth->nrb_hdr, OPT_COMMENT, &opt_comment);",
          "210:  return opt_comment;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:   return;",
          "209:  if (wth->nrb_hdr == NULL) {",
          "213:  }",
          "234: }",
          "236: void",
          "237: wtap_write_shb_comment(wtap *wth, gchar *comment)",
          "238: {",
          "242: }",
          "244: wtapng_iface_descriptions_t *",
          "",
          "[Removed Lines]",
          "210:   wth->nrb_hdr = g_new0(wtapng_name_res_t,1);",
          "211:  } else {",
          "212:   g_free(wth->nrb_hdr->opt_comment);",
          "220:  wth->nrb_hdr->opt_comment = comment;",
          "221: }",
          "223: void",
          "224: wtap_free_shb(wtapng_section_t *shb_hdr)",
          "225: {",
          "226:  if (shb_hdr == NULL)",
          "227:      return;",
          "229:  g_free(shb_hdr->opt_comment);",
          "230:  g_free(shb_hdr->shb_hardware);",
          "231:  g_free(shb_hdr->shb_os);",
          "232:  g_free(shb_hdr->shb_user_appl);",
          "233:  g_free(shb_hdr);",
          "239:  g_free(wth->shb_hdr.opt_comment);",
          "240:  wth->shb_hdr.opt_comment = comment;",
          "",
          "[Added Lines]",
          "222:   wth->nrb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_NRB);",
          "225:  wtap_optionblock_set_option_string(wth->nrb_hdr, OPT_COMMENT, comment);",
          "231:  wtap_optionblock_set_option_string(wth->shb_hdr, OPT_COMMENT, comment);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:  return idb_info;",
          "254: }",
          "286: void",
          "287: wtap_free_idb_info(wtapng_iface_descriptions_t *idb_info)",
          "288: {",
          "289:  if (idb_info == NULL)",
          "292:  if (idb_info->interface_data) {",
          "293:   guint i;",
          "294:   for (i = 0; i < idb_info->interface_data->len; i++) {",
          "297:   }",
          "298:   g_array_free(idb_info->interface_data, TRUE);",
          "299:  }",
          "",
          "[Removed Lines]",
          "256: static void",
          "257: wtap_free_isb_members(wtapng_if_stats_t *isb)",
          "258: {",
          "259:  if (isb) {",
          "260:   g_free(isb->opt_comment);",
          "261:  }",
          "262: }",
          "264: static void",
          "265: wtap_free_idb_members(wtapng_if_descr_t* idb)",
          "266: {",
          "267:  if (idb) {",
          "268:   g_free(idb->opt_comment);",
          "269:   g_free(idb->if_os);",
          "270:   g_free(idb->if_name);",
          "271:   g_free(idb->if_description);",
          "272:   g_free(idb->if_filter_str);",
          "273:   g_free(idb->if_filter_bpf_bytes);",
          "274:   if (idb->interface_statistics) {",
          "275:    wtapng_if_stats_t *isb;",
          "276:    guint i;",
          "277:    for (i = 0; i < idb->interface_statistics->len; i++) {",
          "278:     isb = &g_array_index(idb->interface_statistics, wtapng_if_stats_t, i);",
          "279:     wtap_free_isb_members(isb);",
          "280:    }",
          "281:    g_array_free(idb->interface_statistics, TRUE);",
          "282:   }",
          "283:  }",
          "284: }",
          "290:      return;",
          "295:    wtapng_if_descr_t* idb = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, i);",
          "296:    wtap_free_idb_members(idb);",
          "",
          "[Added Lines]",
          "251:   return;",
          "256:    wtap_optionblock_t idb = g_array_index(idb_info->interface_data, wtap_optionblock_t, i);",
          "257:    wtap_optionblock_free(idb);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302: }",
          "304: gchar *",
          "306:                         const int indent,",
          "307:                         const char* line_end)",
          "308: {",
          "309:  GString *info = g_string_new(\"\");",
          "311:  g_assert(if_descr);",
          "313:  g_string_printf(info,",
          "314:    \"%*cName = %s%s\", indent, ' ',",
          "316:    line_end);",
          "318:  g_string_append_printf(info,",
          "319:    \"%*cDescription = %s%s\", indent, ' ',",
          "321:    line_end);",
          "323:  g_string_append_printf(info,",
          "324:    \"%*cEncapsulation = %s (%d/%u - %s)%s\", indent, ' ',",
          "329:    line_end);",
          "331:  g_string_append_printf(info,",
          "332:    \"%*cSpeed = %\" G_GINT64_MODIFIER \"u%s\", indent, ' ',",
          "334:    line_end);",
          "336:  g_string_append_printf(info,",
          "337:    \"%*cCapture length = %u%s\", indent, ' ',",
          "339:    line_end);",
          "341:  g_string_append_printf(info,",
          "342:    \"%*cFCS length = %d%s\", indent, ' ',",
          "344:    line_end);",
          "346:  g_string_append_printf(info,",
          "347:    \"%*cTime precision = %s (%d)%s\", indent, ' ',",
          "350:    line_end);",
          "352:  g_string_append_printf(info,",
          "353:    \"%*cTime ticks per second = %\" G_GINT64_MODIFIER \"u%s\", indent, ' ',",
          "355:    line_end);",
          "357:  g_string_append_printf(info,",
          "358:    \"%*cTime resolution = 0x%.2x%s\", indent, ' ',",
          "360:    line_end);",
          "362:  g_string_append_printf(info,",
          "363:    \"%*cFilter string = %s%s\", indent, ' ',",
          "365:    line_end);",
          "367:  g_string_append_printf(info,",
          "368:    \"%*cOperating system = %s%s\", indent, ' ',",
          "370:    line_end);",
          "372:  g_string_append_printf(info,",
          "373:    \"%*cComment = %s%s\", indent, ' ',",
          "375:    line_end);",
          "377:  g_string_append_printf(info,",
          "378:    \"%*cBPF filter length = %u%s\", indent, ' ',",
          "380:    line_end);",
          "382:  g_string_append_printf(info,",
          "383:    \"%*cNumber of stat entries = %u%s\", indent, ' ',",
          "385:    line_end);",
          "387:  return g_string_free(info, FALSE);",
          "388: }",
          "391: wtap_file_get_nrb_for_new_file(wtap *wth)",
          "392: {",
          "395:  if (wth == NULL || wth->nrb_hdr == NULL)",
          "402:  return nrb_hdr;",
          "403: }",
          "417: struct encap_type_info {",
          "418:  const char *name;",
          "",
          "[Removed Lines]",
          "305: wtap_get_debug_if_descr(const wtapng_if_descr_t *if_descr,",
          "315:    if_descr->if_name ? if_descr->if_name : \"UNKNOWN\",",
          "320:    if_descr->if_description ? if_descr->if_description : \"NONE\",",
          "325:    wtap_encap_string(if_descr->wtap_encap),",
          "326:    if_descr->wtap_encap,",
          "327:    if_descr->link_type,",
          "328:    wtap_encap_short_string(if_descr->wtap_encap),",
          "333:    if_descr->if_speed,",
          "338:    if_descr->snap_len,",
          "343:    if_descr->if_fcslen,",
          "348:    wtap_tsprec_string(if_descr->tsprecision),",
          "349:    if_descr->tsprecision,",
          "354:    if_descr->time_units_per_second,",
          "359:    if_descr->if_tsresol,",
          "364:    if_descr->if_filter_str ? if_descr->if_filter_str : \"NONE\",",
          "369:    if_descr->if_os ? if_descr->if_os : \"UNKNOWN\",",
          "374:    if_descr->opt_comment ? if_descr->opt_comment : \"NONE\",",
          "379:    if_descr->bpf_filter_len,",
          "384:    if_descr->num_stat_entries,",
          "390: wtapng_name_res_t *",
          "393:  wtapng_name_res_t *nrb_hdr;",
          "396:      return NULL;",
          "398:  nrb_hdr = g_new0(wtapng_name_res_t,1);",
          "400:  nrb_hdr->opt_comment = g_strdup(wth->nrb_hdr->opt_comment);",
          "405: void",
          "406: wtap_free_nrb(wtapng_name_res_t *nrb_hdr)",
          "407: {",
          "408:  if (nrb_hdr == NULL)",
          "409:      return;",
          "411:  g_free(nrb_hdr->opt_comment);",
          "412:  g_free(nrb_hdr);",
          "413: }",
          "",
          "[Added Lines]",
          "266: wtap_get_debug_if_descr(const wtap_optionblock_t if_descr,",
          "270:  char* tmp_content;",
          "271:  wtapng_if_descr_mandatory_t* if_descr_mand;",
          "273:  guint64 tmp64;",
          "274:  gint8 itmp8;",
          "275:  guint8 tmp8;",
          "276:  wtapng_if_descr_filter_t* if_filter;",
          "280:  if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(if_descr);",
          "281:  wtap_optionblock_get_option_string(if_descr, OPT_IDB_NAME, &tmp_content);",
          "284:    tmp_content ? tmp_content : \"UNKNOWN\",",
          "287:  wtap_optionblock_get_option_string(if_descr, OPT_IDB_DESCR, &tmp_content);",
          "290:    tmp_content ? tmp_content : \"NONE\",",
          "295:    wtap_encap_string(if_descr_mand->wtap_encap),",
          "296:    if_descr_mand->wtap_encap,",
          "297:    if_descr_mand->link_type,",
          "298:    wtap_encap_short_string(if_descr_mand->wtap_encap),",
          "301:  wtap_optionblock_get_option_uint64(if_descr, OPT_IDB_SPEED, &tmp64);",
          "304:    tmp64,",
          "309:    if_descr_mand->snap_len,",
          "312:  wtap_optionblock_get_option_uint8(if_descr, OPT_IDB_FCSLEN, &itmp8);",
          "315:    itmp8,",
          "320:    wtap_tsprec_string(if_descr_mand->tsprecision),",
          "321:    if_descr_mand->tsprecision,",
          "326:    if_descr_mand->time_units_per_second,",
          "329:  wtap_optionblock_get_option_uint8(if_descr, OPT_IDB_TSRESOL, &tmp8);",
          "332:    tmp8,",
          "335:  wtap_optionblock_get_option_custom(if_descr, OPT_IDB_FILTER, (void**)&if_filter);",
          "338:    if_filter->if_filter_str ? if_filter->if_filter_str : \"NONE\",",
          "341:  wtap_optionblock_get_option_string(if_descr, OPT_IDB_OS, &tmp_content);",
          "344:    tmp_content ? tmp_content : \"UNKNOWN\",",
          "347:  wtap_optionblock_get_option_string(if_descr, OPT_COMMENT, &tmp_content);",
          "350:    tmp_content ? tmp_content : \"NONE\",",
          "355:    if_filter->bpf_filter_len,",
          "360:    if_descr_mand->num_stat_entries,",
          "366: wtap_optionblock_t",
          "369:  wtap_optionblock_t nrb_hdr;",
          "372:   return NULL;",
          "374:  nrb_hdr = wtap_optionblock_create(WTAP_OPTION_BLOCK_NG_NRB);",
          "376:  wtap_optionblock_copy_options(nrb_hdr, wth->nrb_hdr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1217: wtap_close(wtap *wth)",
          "1218: {",
          "1219:  guint i, j;",
          "1223:  wtap_sequential_close(wth);",
          "",
          "[Removed Lines]",
          "1220:  wtapng_if_descr_t *wtapng_if_descr;",
          "1221:  wtapng_if_stats_t *if_stats;",
          "",
          "[Added Lines]",
          "1184:  wtap_optionblock_t wtapng_if_descr;",
          "1185:  wtap_optionblock_t if_stats;",
          "1186:  wtapng_if_descr_mandatory_t* wtapng_if_descr_mand;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1236:   g_ptr_array_free(wth->fast_seek, TRUE);",
          "1237:  }",
          "1244:  for(i = 0; i < wth->interface_data->len; i++) {",
          "1272:   }",
          "1273:  }",
          "1274:  g_array_free(wth->interface_data, TRUE);",
          "1275:  g_free(wth);",
          "",
          "[Removed Lines]",
          "1239:  g_free(wth->shb_hdr.opt_comment);",
          "1240:  g_free(wth->shb_hdr.shb_hardware);",
          "1241:  g_free(wth->shb_hdr.shb_os);",
          "1242:  g_free(wth->shb_hdr.shb_user_appl);",
          "1245:   wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, i);",
          "1246:   if(wtapng_if_descr->opt_comment != NULL){",
          "1247:    g_free(wtapng_if_descr->opt_comment);",
          "1248:   }",
          "1249:   if(wtapng_if_descr->if_name != NULL){",
          "1250:    g_free(wtapng_if_descr->if_name);",
          "1251:   }",
          "1252:   if(wtapng_if_descr->if_description != NULL){",
          "1253:    g_free(wtapng_if_descr->if_description);",
          "1254:   }",
          "1255:   if(wtapng_if_descr->if_filter_str != NULL){",
          "1256:    g_free(wtapng_if_descr->if_filter_str);",
          "1257:   }",
          "1258:   if(wtapng_if_descr->if_filter_bpf_bytes != NULL){",
          "1259:    g_free(wtapng_if_descr->if_filter_bpf_bytes);",
          "1260:   }",
          "1261:   if(wtapng_if_descr->if_os != NULL){",
          "1262:    g_free(wtapng_if_descr->if_os);",
          "1263:   }",
          "1264:   for(j = 0; j < wtapng_if_descr->num_stat_entries; j++) {",
          "1265:    if_stats = &g_array_index(wtapng_if_descr->interface_statistics, wtapng_if_stats_t, j);",
          "1266:    if(if_stats->opt_comment != NULL){",
          "1267:     g_free(if_stats->opt_comment);",
          "1268:    }",
          "1269:   }",
          "1270:   if(wtapng_if_descr->num_stat_entries != 0){",
          "1271:    g_array_free(wtapng_if_descr->interface_statistics, TRUE);",
          "",
          "[Added Lines]",
          "1204:  wtap_optionblock_free(wth->shb_hdr);",
          "1207:   wtapng_if_descr = g_array_index(wth->interface_data, wtap_optionblock_t, i);",
          "1208:   wtapng_if_descr_mand = (wtapng_if_descr_mandatory_t*)wtap_optionblock_get_mandatory_data(wtapng_if_descr);",
          "1209:   for(j = 0; j < wtapng_if_descr_mand->num_stat_entries; j++) {",
          "1210:    if_stats = g_array_index(wtapng_if_descr_mand->interface_statistics, wtap_optionblock_t, j);",
          "1211:    wtap_optionblock_free(if_stats);",
          "1213:   wtap_optionblock_free(wtapng_if_descr);",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <time.h>",
          "26: #include <wsutil/buffer.h>",
          "27: #include <wsutil/nstime.h>",
          "28: #include \"ws_symbol_export.h\"",
          "30: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"wtap_opttypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1256:     guint64             section_length; /**< 64-bit value specifying the length in bytes of the",
          "",
          "[Removed Lines]",
          "1254: typedef struct wtapng_section_s {",
          "",
          "[Added Lines]",
          "1255: typedef struct wtapng_section_mandatory_s {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1283: typedef struct wtapng_iface_descriptions_s {",
          "1284:     GArray *interface_data;",
          "1285: } wtapng_iface_descriptions_t;",
          "1357:     guint64                time_units_per_second;",
          "1361:     guint16                link_type;",
          "1362:     guint32                snap_len;",
          "1411:     guint8                 num_stat_entries;",
          "1412:     GArray                *interface_statistics;  /**< An array holding the interface statistics from",
          "1422:     guint32  interface_id;",
          "1423:     guint32  ts_high;",
          "1424:     guint32  ts_low;",
          "1444: #ifndef MAXNAMELEN",
          "",
          "[Removed Lines]",
          "1266:     gchar               *shb_hardware;  /**< NULL if not available",
          "1270:     gchar               *shb_os;        /**< NULL if not available, UTF-8 string containing the",
          "1273:     gchar               *shb_user_appl; /**< NULL if not available, UTF-8 string containing the",
          "1276: } wtapng_section_t;",
          "1355: typedef struct wtapng_if_descr_s {",
          "1366:     gchar                 *if_name;               /**< NULL if not available",
          "1371:     gchar                 *if_description;        /**< NULL if not available",
          "1382:     guint64                if_speed;              /**< 0xFFFFFFFF if unknown",
          "1386:     guint8                 if_tsresol;            /**< default is 6 for microsecond resolution",
          "1396:     gchar                 *if_filter_str;         /**< NULL if not available",
          "1401:     gchar                 *if_os;                 /**< NULL if not available",
          "1406:     gint8                  if_fcslen;             /**< -1 if unknown or changes between packets,",
          "1414: } wtapng_if_descr_t;",
          "1420: typedef struct wtapng_if_stats_s {",
          "1427:     guint64  isb_starttime;",
          "1428:     guint64  isb_endtime;",
          "1429:     guint64  isb_ifrecv;",
          "1430:     guint64  isb_ifdrop;",
          "1431:     guint64  isb_filteraccept;",
          "1432:     guint64  isb_osdrop;",
          "1433:     guint64  isb_usrdeliv;",
          "1434: } wtapng_if_stats_t;",
          "1438: typedef struct wtapng_name_res_s {",
          "1442: } wtapng_name_res_t;",
          "",
          "[Added Lines]",
          "1264: } wtapng_mandatory_section_t;",
          "1277: typedef struct wtapng_if_descr_mandatory_s {",
          "1288: } wtapng_if_descr_mandatory_t;",
          "1291: typedef struct wtapng_if_descr_filter_s {",
          "1292:     gchar                 *if_filter_str;         /**< NULL if not available",
          "1297: } wtapng_if_descr_filter_t;",
          "1302: typedef struct wtapng_if_stats_mandatory_s {",
          "1306: } wtapng_if_stats_mandatory_t;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1728: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "1729: const wtapng_section_t* wtap_file_get_shb(wtap *wth);",
          "",
          "[Added Lines]",
          "1593: wtap_optionblock_t wtap_file_get_shb(wtap *wth);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1744: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "1745: wtapng_section_t* wtap_file_get_shb_for_new_file(wtap *wth);",
          "1750: WS_DLL_PUBLIC",
          "1751: void wtap_free_shb(wtapng_section_t *shb_hdr);",
          "",
          "[Added Lines]",
          "1609: wtap_optionblock_t wtap_file_get_shb_for_new_file(wtap *wth);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1815: WS_DLL_PUBLIC",
          "1817:                                const int indent,",
          "1818:                                const char* line_end);",
          "1836: WS_DLL_PUBLIC",
          "",
          "[Removed Lines]",
          "1816: gchar *wtap_get_debug_if_descr(const wtapng_if_descr_t *if_descr,",
          "1830: WS_DLL_PUBLIC",
          "1831: wtapng_name_res_t* wtap_file_get_nrb_for_new_file(wtap *wth);",
          "1837: void wtap_free_nrb(wtapng_name_res_t *nrb_hdr);",
          "",
          "[Added Lines]",
          "1674: gchar *wtap_get_debug_if_descr(const wtap_optionblock_t if_descr,",
          "1689: wtap_optionblock_t wtap_file_get_nrb_for_new_file(wtap *wth);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1931: WS_DLL_PUBLIC",
          "1932: wtap_dumper* wtap_dump_open_ng(const char *filename, int file_type_subtype, int encap,",
          "1936: WS_DLL_PUBLIC",
          "1937: wtap_dumper* wtap_dump_open_tempfile(char **filenamep, const char *pfx,",
          "",
          "[Removed Lines]",
          "1933:     int snaplen, gboolean compressed, wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1934:     wtapng_name_res_t *nrb_hdr, int *err);",
          "",
          "[Added Lines]",
          "1785:     int snaplen, gboolean compressed, wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1786:     wtap_optionblock_t nrb_hdr, int *err);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1961: WS_DLL_PUBLIC",
          "1962: wtap_dumper* wtap_dump_open_tempfile_ng(char **filenamep, const char *pfx,",
          "1963:     int file_type_subtype, int encap, int snaplen, gboolean compressed,",
          "1967: WS_DLL_PUBLIC",
          "1968: wtap_dumper* wtap_dump_fdopen(int fd, int file_type_subtype, int encap, int snaplen,",
          "",
          "[Removed Lines]",
          "1964:     wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1965:     wtapng_name_res_t *nrb_hdr, int *err);",
          "",
          "[Added Lines]",
          "1816:     wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1817:     wtap_optionblock_t nrb_hdr, int *err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1989: WS_DLL_PUBLIC",
          "1990: wtap_dumper* wtap_dump_fdopen_ng(int fd, int file_type_subtype, int encap, int snaplen,",
          "1994: WS_DLL_PUBLIC",
          "1995: wtap_dumper* wtap_dump_open_stdout(int file_type_subtype, int encap, int snaplen,",
          "",
          "[Removed Lines]",
          "1991:                 gboolean compressed, wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1992:                 wtapng_name_res_t *nrb_hdr, int *err);",
          "",
          "[Added Lines]",
          "1843:                 gboolean compressed, wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1844:                 wtap_optionblock_t nrb_hdr, int *err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2015: WS_DLL_PUBLIC",
          "2016: wtap_dumper* wtap_dump_open_stdout_ng(int file_type_subtype, int encap, int snaplen,",
          "2020: WS_DLL_PUBLIC",
          "2021: gboolean wtap_dump(wtap_dumper *, const struct wtap_pkthdr *, const guint8 *,",
          "",
          "[Removed Lines]",
          "2017:                 gboolean compressed, wtapng_section_t *shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "2018:                 wtapng_name_res_t *nrb_hdr, int *err);",
          "",
          "[Added Lines]",
          "1869:                 gboolean compressed, wtap_optionblock_t shb_hdr, wtapng_iface_descriptions_t *idb_inf,",
          "1870:                 wtap_optionblock_t nrb_hdr, int *err);",
          "",
          "---------------"
        ],
        "wiretap/wtap_opttypes.c||wiretap/wtap_opttypes.c": [
          "File: wiretap/wtap_opttypes.c -> wiretap/wtap_opttypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"config.h\"",
          "23: #include <glib.h>",
          "24: #include <string.h>",
          "26: #include \"wtap.h\"",
          "27: #include \"wtap_opttypes.h\"",
          "28: #include \"wtap-int.h\"",
          "29: #include \"pcapng.h\"",
          "31: struct wtap_optionblock",
          "32: {",
          "35:     wtap_optionblock_type_t type;",
          "36:     void* mandatory_data;",
          "37:     GArray* options;",
          "38: };",
          "40: void wtap_opttypes_initialize(void)",
          "41: {",
          "42: }",
          "44: static void wtap_if_descr_filter_free(void* data)",
          "45: {",
          "46:     wtapng_if_descr_filter_t* filter = (wtapng_if_descr_filter_t*)data;",
          "47:     g_free(filter->if_filter_str);",
          "48:     g_free(filter->if_filter_bpf_bytes);",
          "49: }",
          "51: wtap_optionblock_t wtap_optionblock_create(wtap_optionblock_type_t block_type)",
          "52: {",
          "53:     wtap_optionblock_t block = NULL;",
          "55:     switch(block_type)",
          "56:     {",
          "57:     case WTAP_OPTION_BLOCK_NG_SECTION:",
          "58:         {",
          "59:         wtapng_mandatory_section_t* section_mand;",
          "61:         block = g_new(struct wtap_optionblock, 1);",
          "62:         block->name = \"SHB\";",
          "63:         block->description = \"Section Header block\";",
          "64:         block->type = WTAP_OPTION_BLOCK_NG_SECTION;",
          "65:         block->mandatory_data = g_new(wtapng_mandatory_section_t, 1);",
          "66:         section_mand = (wtapng_mandatory_section_t*)block->mandatory_data;",
          "67:         section_mand->section_length = -1;",
          "68:         block->options = g_array_new(FALSE, FALSE, sizeof(wtap_opttype_t*));",
          "70:         wtap_optionblock_add_option_string(block, OPT_COMMENT, \"opt_comment\", \"Optional comment\", NULL, NULL);",
          "71:         wtap_optionblock_add_option_string(block, OPT_SHB_HARDWARE, \"hardware\", \"SBH Hardware\", NULL, NULL);",
          "72:         wtap_optionblock_add_option_string(block, OPT_SHB_OS, \"os\", \"SBH Operating System\", NULL, NULL);",
          "73:         wtap_optionblock_add_option_string(block, OPT_SHB_USERAPPL, \"user_appl\", \"SBH User Application\", NULL, NULL);",
          "74:         }",
          "75:         break;",
          "76:     case WTAP_OPTION_BLOCK_NG_NRB:",
          "77:         block = g_new(struct wtap_optionblock, 1);",
          "78:         block->name = \"NRB\";",
          "79:         block->description = \"Name Resolution Block\";",
          "80:         block->type = WTAP_OPTION_BLOCK_NG_NRB;",
          "81:         block->mandatory_data = NULL;",
          "82:         block->options = g_array_new(FALSE, FALSE, sizeof(wtap_opttype_t*));",
          "84:         wtap_optionblock_add_option_string(block, OPT_COMMENT, \"opt_comment\", \"Optional comment\", NULL, NULL);",
          "85:         break;",
          "87:     case WTAP_OPTION_BLOCK_IF_STATS:",
          "88:         block = g_new(struct wtap_optionblock, 1);",
          "89:         block->name = \"ISB\";",
          "90:         block->description = \"Interface Statistics Block\";",
          "91:         block->type = WTAP_OPTION_BLOCK_IF_STATS;",
          "92:         block->mandatory_data = g_new0(wtapng_if_stats_mandatory_t, 1);",
          "93:         block->options = g_array_new(FALSE, FALSE, sizeof(wtap_opttype_t*));",
          "95:         wtap_optionblock_add_option_string(block, OPT_COMMENT, \"opt_comment\", \"Optional comment\", NULL, NULL);",
          "96:         wtap_optionblock_add_option_uint64(block, OPT_ISB_STARTTIME, \"start_time\", \"Start Time\", 0, 0);",
          "97:         wtap_optionblock_add_option_uint64(block, OPT_ISB_ENDTIME, \"end_time\", \"End Time\", 0, 0);",
          "98:         wtap_optionblock_add_option_uint64(block, OPT_ISB_IFRECV, \"recv\", \"Receive Packets\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "99:         wtap_optionblock_add_option_uint64(block, OPT_ISB_IFDROP, \"drop\", \"Dropped Packets\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "100:         wtap_optionblock_add_option_uint64(block, OPT_ISB_FILTERACCEPT, \"filter_accept\", \"Filter Accept\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "101:         wtap_optionblock_add_option_uint64(block, OPT_ISB_OSDROP, \"os_drop\", \"OS Dropped Packets\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "102:         wtap_optionblock_add_option_uint64(block, OPT_ISB_USRDELIV, \"user_deliv\", \"User Delivery\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "103:         break;",
          "104:     case WTAP_OPTION_BLOCK_IF_DESCR:",
          "105:         {",
          "106:         wtapng_if_descr_filter_t default_filter;",
          "107:         memset(&default_filter, 0, sizeof(default_filter));",
          "109:         block = g_new(struct wtap_optionblock, 1);",
          "110:         block->name = \"IDB\";",
          "111:         block->description = \"Interface Description Block\";",
          "112:         block->type = WTAP_OPTION_BLOCK_IF_DESCR;",
          "113:         block->mandatory_data = g_new0(wtapng_if_descr_mandatory_t, 1);",
          "114:         block->options = g_array_new(FALSE, FALSE, sizeof(wtap_opttype_t*));",
          "116:         wtap_optionblock_add_option_string(block, OPT_COMMENT, \"opt_comment\", \"Optional comment\", NULL, NULL);",
          "117:         wtap_optionblock_add_option_string(block, OPT_IDB_NAME, \"name\", \"Device name\", NULL, NULL);",
          "118:         wtap_optionblock_add_option_string(block, OPT_IDB_DESCR, \"description\", \"Device description\", NULL, NULL);",
          "119:         wtap_optionblock_add_option_uint64(block, OPT_IDB_SPEED, \"speed\", \"Interface speed (in bps)\", G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF), G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFFFF));",
          "120:         wtap_optionblock_add_option_uint8(block, OPT_IDB_TSRESOL, \"ts_resolution\", \"Resolution of timestamps\", 6, 6);",
          "121:         wtap_optionblock_add_option_custom(block, OPT_IDB_FILTER, \"filter\", \"Filter string\", &default_filter, &default_filter, sizeof(wtapng_if_descr_filter_t), wtap_if_descr_filter_free);",
          "122:         wtap_optionblock_add_option_string(block, OPT_IDB_OS, \"os\", \"Operating System\", NULL, NULL);",
          "123:         wtap_optionblock_add_option_uint8(block, OPT_IDB_FCSLEN, \"fcslen\", \"FCS Length\", -1, -1);",
          "124:         }",
          "125:         break;",
          "126:     }",
          "128:     return block;",
          "129: }",
          "131: static void wtap_optionblock_free_options(wtap_optionblock_t block)",
          "132: {",
          "133:     guint i;",
          "134:     wtap_opttype_t* opttype = NULL;",
          "136:     for (i = 0; i < block->options->len; i++) {",
          "137:         opttype = g_array_index(block->options, wtap_opttype_t*, i);",
          "138:         switch(opttype->type)",
          "139:         {",
          "140:         case WTAP_OPTTYPE_STRING:",
          "141:             g_free(opttype->option.stringval);",
          "142:             break;",
          "143:         case WTAP_OPTTYPE_CUSTOM:",
          "144:             opttype->option.customval.free_func(opttype->option.customval.data);",
          "145:             g_free(opttype->option.customval.data);",
          "146:             opttype->default_val.customval.free_func(opttype->default_val.customval.data);",
          "147:             g_free(opttype->default_val.customval.data);",
          "148:             break;",
          "149:         default:",
          "150:             break;",
          "151:         }",
          "152:         g_free(opttype);",
          "153:     }",
          "154: }",
          "156: void wtap_optionblock_free(wtap_optionblock_t block)",
          "157: {",
          "158:     if (block != NULL)",
          "159:     {",
          "161:         if (block->type == WTAP_OPTION_BLOCK_IF_DESCR)",
          "162:         {",
          "163:             wtapng_if_descr_mandatory_t* mand = (wtapng_if_descr_mandatory_t*)block->mandatory_data;",
          "164:             if (mand->num_stat_entries != 0)",
          "165:             {",
          "166:                 g_array_free(mand->interface_statistics, TRUE);",
          "167:             }",
          "168:         }",
          "170:         g_free(block->mandatory_data);",
          "171:         wtap_optionblock_free_options(block);",
          "172:         g_array_free(block->options, FALSE);",
          "173:         g_free(block);",
          "174:     }",
          "175: }",
          "177: void* wtap_optionblock_get_mandatory_data(wtap_optionblock_t block)",
          "178: {",
          "179:     return block->mandatory_data;",
          "180: }",
          "182: static wtap_opttype_t* wtap_optionblock_get_option(wtap_optionblock_t block, guint option_id)",
          "183: {",
          "184:     guint i;",
          "185:     wtap_opttype_t* opttype = NULL;",
          "187:     for (i = 0; i < block->options->len; i++)",
          "188:     {",
          "189:         opttype = g_array_index(block->options, wtap_opttype_t*, i);",
          "190:         if (opttype->number == option_id)",
          "191:             return opttype;",
          "192:     }",
          "194:     return NULL;",
          "195: }",
          "197: int wtap_optionblock_add_option_string(wtap_optionblock_t block, guint option_id,",
          "198:                                        const char *name, const char *description, char* opt_value, char* default_value)",
          "199: {",
          "200:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "203:     if (opttype != NULL)",
          "204:         return WTAP_OPTTYPE_ALREADY_EXISTS;",
          "206:     opttype = g_new(wtap_opttype_t, 1);",
          "208:     opttype->name = name;",
          "209:     opttype->description = description;",
          "210:     opttype->number = option_id;",
          "211:     opttype->type = WTAP_OPTTYPE_STRING;",
          "212:     opttype->option.stringval = g_strdup(opt_value);",
          "213:     opttype->default_val.stringval = default_value;",
          "215:     g_array_append_val(block->options, opttype);",
          "216:     return WTAP_OPTTYPE_SUCCESS;",
          "217: }",
          "219: int wtap_optionblock_set_option_string(wtap_optionblock_t block, guint option_id, char* opt_value)",
          "220: {",
          "221:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "224:     if (opttype == NULL)",
          "225:         return WTAP_OPTTYPE_NOT_FOUND;",
          "227:     if (opttype->type != WTAP_OPTTYPE_STRING)",
          "228:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "230:     g_free(opttype->option.stringval);",
          "231:     opttype->option.stringval = g_strdup(opt_value);",
          "232:     return WTAP_OPTTYPE_SUCCESS;",
          "233: }",
          "235: int wtap_optionblock_get_option_string(wtap_optionblock_t block, guint option_id, char** opt_value)",
          "236: {",
          "237:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "240:     if (opttype == NULL)",
          "241:         return WTAP_OPTTYPE_NOT_FOUND;",
          "243:     if (opttype->type != WTAP_OPTTYPE_STRING)",
          "244:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "247:     return WTAP_OPTTYPE_SUCCESS;",
          "248: }",
          "250: int wtap_optionblock_add_option_uint64(wtap_optionblock_t block, guint option_id,",
          "251:                                        const char *name, const char *description, guint64 opt_value, guint64 default_value)",
          "252: {",
          "253:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "256:     if (opttype != NULL)",
          "257:         return WTAP_OPTTYPE_ALREADY_EXISTS;",
          "259:     opttype = g_new(wtap_opttype_t, 1);",
          "261:     opttype->name = name;",
          "262:     opttype->description = description;",
          "263:     opttype->number = option_id;",
          "264:     opttype->type = WTAP_OPTTYPE_UINT64;",
          "265:     opttype->option.uint64val = opt_value;",
          "266:     opttype->default_val.uint64val = default_value;",
          "268:     g_array_append_val(block->options, opttype);",
          "269:     return WTAP_OPTTYPE_SUCCESS;",
          "270: }",
          "272: int wtap_optionblock_set_option_uint64(wtap_optionblock_t block, guint option_id, guint64 opt_value)",
          "273: {",
          "274:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "277:     if (opttype == NULL)",
          "278:         return WTAP_OPTTYPE_NOT_FOUND;",
          "280:     if (opttype->type != WTAP_OPTTYPE_UINT64)",
          "281:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "283:     opttype->option.uint64val = opt_value;",
          "284:     return WTAP_OPTTYPE_SUCCESS;",
          "285: }",
          "287: int wtap_optionblock_get_option_uint64(wtap_optionblock_t block, guint option_id, guint64* opt_value)",
          "288: {",
          "289:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "292:     if (opttype == NULL)",
          "293:         return WTAP_OPTTYPE_NOT_FOUND;",
          "295:     if (opttype->type != WTAP_OPTTYPE_UINT64)",
          "296:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "299:     return WTAP_OPTTYPE_SUCCESS;",
          "300: }",
          "302: int wtap_optionblock_add_option_uint8(wtap_optionblock_t block, guint option_id,",
          "303:                                        const char *name, const char *description, guint8 opt_value, guint8 default_value)",
          "304: {",
          "305:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "308:     if (opttype != NULL)",
          "309:         return WTAP_OPTTYPE_ALREADY_EXISTS;",
          "311:     opttype = g_new(wtap_opttype_t, 1);",
          "313:     opttype->name = name;",
          "314:     opttype->description = description;",
          "315:     opttype->number = option_id;",
          "316:     opttype->type = WTAP_OPTTYPE_UINT8;",
          "317:     opttype->option.uint8val = opt_value;",
          "318:     opttype->default_val.uint8val = default_value;",
          "320:     g_array_append_val(block->options, opttype);",
          "321:     return WTAP_OPTTYPE_SUCCESS;",
          "322: }",
          "324: int wtap_optionblock_set_option_uint8(wtap_optionblock_t block, guint option_id, guint8 opt_value)",
          "325: {",
          "326:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "329:     if (opttype == NULL)",
          "330:         return WTAP_OPTTYPE_NOT_FOUND;",
          "332:     if (opttype->type != WTAP_OPTTYPE_UINT8)",
          "333:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "335:     opttype->option.uint8val = opt_value;",
          "336:     return WTAP_OPTTYPE_SUCCESS;",
          "337: }",
          "339: int wtap_optionblock_get_option_uint8(wtap_optionblock_t block, guint option_id, guint8* opt_value)",
          "340: {",
          "341:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "344:     if (opttype == NULL)",
          "345:         return WTAP_OPTTYPE_NOT_FOUND;",
          "347:     if (opttype->type != WTAP_OPTTYPE_UINT8)",
          "348:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "351:     return WTAP_OPTTYPE_SUCCESS;",
          "352: }",
          "354: int wtap_optionblock_add_option_custom(wtap_optionblock_t block, guint option_id,",
          "355:                                        const char *name, const char *description, void* opt_value, void* default_value,",
          "356:                                        guint size, wtap_opttype_free_custom_func free_func)",
          "357: {",
          "358:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "361:     if (opttype != NULL)",
          "362:         return WTAP_OPTTYPE_ALREADY_EXISTS;",
          "364:     opttype = g_new(wtap_opttype_t, 1);",
          "366:     opttype->name = name;",
          "367:     opttype->description = description;",
          "368:     opttype->number = option_id;",
          "369:     opttype->type = WTAP_OPTTYPE_CUSTOM;",
          "370:     opttype->option.customval.size = size;",
          "371:     opttype->option.customval.data = g_memdup(opt_value, size);",
          "372:     opttype->option.customval.free_func = free_func;",
          "373:     opttype->default_val.customval.size = size;",
          "374:     opttype->default_val.customval.data = g_memdup(default_value, size);",
          "375:     opttype->default_val.customval.free_func = free_func;",
          "377:     g_array_append_val(block->options, opttype);",
          "378:     return WTAP_OPTTYPE_SUCCESS;",
          "379: }",
          "381: int wtap_optionblock_set_option_custom(wtap_optionblock_t block, guint option_id, void* opt_value)",
          "382: {",
          "383:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "384:     void* prev_value;",
          "387:     if (opttype == NULL)",
          "388:         return WTAP_OPTTYPE_NOT_FOUND;",
          "390:     if (opttype->type != WTAP_OPTTYPE_CUSTOM)",
          "391:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "393:     prev_value = opttype->option.customval.data;",
          "394:     opttype->option.customval.data = g_memdup(opt_value, opttype->option.customval.size);",
          "396:     g_free(prev_value);",
          "397:     return WTAP_OPTTYPE_SUCCESS;",
          "398: }",
          "400: int wtap_optionblock_get_option_custom(wtap_optionblock_t block, guint option_id, void** opt_value)",
          "401: {",
          "402:     wtap_opttype_t* opttype = wtap_optionblock_get_option(block, option_id);",
          "405:     if (opttype == NULL)",
          "406:         return WTAP_OPTTYPE_NOT_FOUND;",
          "408:     if (opttype->type != WTAP_OPTTYPE_CUSTOM)",
          "409:         return WTAP_OPTTYPE_TYPE_MISMATCH;",
          "412:     return WTAP_OPTTYPE_SUCCESS;",
          "413: }",
          "415: void wtap_optionblock_copy_options(wtap_optionblock_t dest_block, wtap_optionblock_t src_block)",
          "416: {",
          "417:     guint i;",
          "418:     wtap_opttype_t *dest_opttype, *src_opttype;",
          "420:     switch(src_block->type)",
          "421:     {",
          "422:     case WTAP_OPTION_BLOCK_NG_SECTION:",
          "423:         memcpy(dest_block->mandatory_data, src_block->mandatory_data, sizeof(wtapng_mandatory_section_t));",
          "424:         break;",
          "425:     case WTAP_OPTION_BLOCK_NG_NRB:",
          "427:         break;",
          "428:     case WTAP_OPTION_BLOCK_IF_STATS:",
          "429:         memcpy(dest_block->mandatory_data, src_block->mandatory_data, sizeof(wtapng_if_stats_mandatory_t));",
          "430:         break;",
          "431:     case WTAP_OPTION_BLOCK_IF_DESCR:",
          "432:         {",
          "433:         wtapng_if_descr_mandatory_t *src_mand = (wtapng_if_descr_mandatory_t*)src_block->mandatory_data,",
          "436:         if (dest_mand->num_stat_entries != 0)",
          "437:         {",
          "438:             g_array_free(dest_mand->interface_statistics, TRUE);",
          "439:         }",
          "441:         memcpy(dest_mand, src_mand, sizeof(wtapng_if_descr_mandatory_t));",
          "442:         if (src_mand->num_stat_entries != 0)",
          "443:         {",
          "444:             dest_mand->interface_statistics = NULL;",
          "445:             dest_mand->interface_statistics = g_array_append_vals(dest_mand->interface_statistics, src_mand->interface_statistics->data, src_mand->interface_statistics->len);",
          "446:         }",
          "447:         }",
          "448:         break;",
          "449:     }",
          "454:     for (i = 0; i < src_block->options->len; i++)",
          "455:     {",
          "456:         src_opttype = g_array_index(src_block->options, wtap_opttype_t*, i);",
          "457:         dest_opttype = wtap_optionblock_get_option(dest_block, src_opttype->number);",
          "458:         if (dest_opttype == NULL)",
          "459:         {",
          "461:             switch(src_opttype->type)",
          "462:             {",
          "463:             case WTAP_OPTTYPE_UINT8:",
          "464:                 wtap_optionblock_add_option_uint8(dest_block, src_opttype->number, src_opttype->name, src_opttype->description,",
          "465:                                                   src_opttype->option.uint8val, src_opttype->default_val.uint8val);",
          "466:                 break;",
          "467:             case WTAP_OPTTYPE_UINT64:",
          "468:                 wtap_optionblock_add_option_uint64(dest_block, src_opttype->number, src_opttype->name, src_opttype->description,",
          "469:                                                   src_opttype->option.uint64val, src_opttype->default_val.uint64val);",
          "470:                 break;",
          "471:             case WTAP_OPTTYPE_STRING:",
          "472:                 wtap_optionblock_add_option_string(dest_block, src_opttype->number, src_opttype->name, src_opttype->description,",
          "473:                                                   src_opttype->option.stringval, src_opttype->default_val.stringval);",
          "474:                 break;",
          "475:             case WTAP_OPTTYPE_CUSTOM:",
          "476:                 wtap_optionblock_add_option_custom(dest_block, src_opttype->number, src_opttype->name, src_opttype->description,",
          "477:                                                  src_opttype->option.customval.data, src_opttype->default_val.customval.data,",
          "478:                                                  src_opttype->option.customval.size, src_opttype->option.customval.free_func);",
          "479:                 break;",
          "480:             }",
          "481:         }",
          "482:         else",
          "483:         {",
          "485:             switch(src_opttype->type)",
          "486:             {",
          "487:             case WTAP_OPTTYPE_UINT8:",
          "488:                 dest_opttype->option.uint8val = src_opttype->option.uint8val;",
          "489:                 break;",
          "490:             case WTAP_OPTTYPE_UINT64:",
          "491:                 dest_opttype->option.uint64val = src_opttype->option.uint64val;",
          "492:                 break;",
          "493:             case WTAP_OPTTYPE_STRING:",
          "494:                 g_free(dest_opttype->option.stringval);",
          "495:                 dest_opttype->option.stringval = g_strdup(src_opttype->option.stringval);",
          "496:                 break;",
          "497:             case WTAP_OPTTYPE_CUSTOM:",
          "498:                 dest_opttype->option.customval.free_func(dest_opttype->option.customval.data);",
          "499:                 g_free(dest_opttype->option.customval.data);",
          "500:                 dest_opttype->option.customval.data = g_memdup(src_opttype->option.customval.data, src_opttype->option.customval.size);",
          "501:                 break;",
          "502:             }",
          "503:         }",
          "504:     }",
          "505: }",
          "",
          "---------------"
        ],
        "wiretap/wtap_opttypes.h||wiretap/wtap_opttypes.h": [
          "File: wiretap/wtap_opttypes.h -> wiretap/wtap_opttypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef WTAP_OPT_TYPES_H",
          "23: #define WTAP_OPT_TYPES_H",
          "25: #include \"ws_symbol_export.h\"",
          "28: typedef enum {",
          "29:     WTAP_OPTION_BLOCK_IF_DESCR = 0,",
          "30:     WTAP_OPTION_BLOCK_IF_STATS,",
          "31:     WTAP_OPTION_BLOCK_NG_SECTION,",
          "32:     WTAP_OPTION_BLOCK_NG_NRB",
          "33: } wtap_optionblock_type_t;",
          "36: typedef enum {",
          "37:     WTAP_OPTTYPE_UINT8,",
          "38:     WTAP_OPTTYPE_UINT64,",
          "39:     WTAP_OPTTYPE_STRING,",
          "40:     WTAP_OPTTYPE_CUSTOM",
          "41: } wtap_opttype_e;",
          "43: typedef enum {",
          "44:     WTAP_OPTTYPE_SUCCESS = 0,",
          "45:     WTAP_OPTTYPE_NOT_FOUND = -1,",
          "46:     WTAP_OPTTYPE_TYPE_MISMATCH = -2,",
          "47:     WTAP_OPTTYPE_ALREADY_EXISTS = -3",
          "48: } wtap_opttype_return_val;",
          "50: typedef void (*wtap_opttype_free_custom_func)(void* data);",
          "52: struct wtap_opttype_custom",
          "53: {",
          "54:     void* data;",
          "55:     guint size;",
          "56:     wtap_opttype_free_custom_func free_func;",
          "57: };",
          "59: typedef struct wtap_opttype {",
          "64:     union {",
          "65:         guint8 uint8val;",
          "66:         guint64 uint64val;",
          "67:         char *stringval;",
          "68:         struct wtap_opttype_custom customval;",
          "70:     union {",
          "71:         guint8 uint8val;",
          "72:         guint64 uint64val;",
          "73:         char *stringval;",
          "74:         struct wtap_opttype_custom customval;",
          "76: } wtap_opttype_t;",
          "78: struct wtap_optionblock;",
          "79: typedef struct wtap_optionblock *wtap_optionblock_t;",
          "87: void wtap_opttypes_initialize(void);",
          "96: WS_DLL_PUBLIC wtap_optionblock_t wtap_optionblock_create(wtap_optionblock_type_t block_type);",
          "104: WS_DLL_PUBLIC void wtap_optionblock_free(wtap_optionblock_t block);",
          "111: WS_DLL_PUBLIC void* wtap_optionblock_get_mandatory_data(wtap_optionblock_t block);",
          "123: int wtap_optionblock_add_option_string(wtap_optionblock_t block, guint option_id,",
          "124:                                        const char *name, const char *description, char* opt_value, char* default_value);",
          "133: WS_DLL_PUBLIC int wtap_optionblock_set_option_string(wtap_optionblock_t block, guint option_id, char* opt_value);",
          "142: WS_DLL_PUBLIC int wtap_optionblock_get_option_string(wtap_optionblock_t block, guint option_id, char** opt_value);",
          "154: int wtap_optionblock_add_option_uint64(wtap_optionblock_t block, guint option_id,",
          "155:                                        const char *name, const char *description, guint64 opt_value, guint64 default_value);",
          "164: WS_DLL_PUBLIC int wtap_optionblock_set_option_uint64(wtap_optionblock_t block, guint option_id, guint64 opt_value);",
          "173: WS_DLL_PUBLIC int wtap_optionblock_get_option_uint64(wtap_optionblock_t block, guint option_id, guint64* opt_value);",
          "185: int wtap_optionblock_add_option_uint8(wtap_optionblock_t block, guint option_id,",
          "186:                                        const char *name, const char *description, guint8 opt_value, guint8 default_value);",
          "195: WS_DLL_PUBLIC int wtap_optionblock_set_option_uint8(wtap_optionblock_t block, guint option_id, guint8 opt_value);",
          "204: WS_DLL_PUBLIC int wtap_optionblock_get_option_uint8(wtap_optionblock_t block, guint option_id, guint8* opt_value);",
          "218: int wtap_optionblock_add_option_custom(wtap_optionblock_t block, guint option_id,",
          "219:                                        const char *name, const char *description, void* opt_value, void* default_value,",
          "220:                                        guint size, wtap_opttype_free_custom_func free_func);",
          "229: WS_DLL_PUBLIC int wtap_optionblock_set_option_custom(wtap_optionblock_t block, guint option_id, void* opt_value);",
          "238: WS_DLL_PUBLIC int wtap_optionblock_get_option_custom(wtap_optionblock_t block, guint option_id, void** opt_value);",
          "248: void wtap_optionblock_copy_options(wtap_optionblock_t dest_block, wtap_optionblock_t src_block);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21ec6668d69743153c48adac036f6a22fbf36992",
      "candidate_info": {
        "commit_hash": "21ec6668d69743153c48adac036f6a22fbf36992",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/21ec6668d69743153c48adac036f6a22fbf36992",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "pcapng: Fixed copying if_filter_bpf_bytes\n\nBug: 11455\nChange-Id: I230ae26ef32ffc9d748b9f3da9011da952b6e175\nReviewed-on: https://code.wireshark.org/review/10155\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:                                 } else if (option_content[0] == 1) {",
          "924:                                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "925:                                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "927:                                 }",
          "928:                         } else {",
          "929:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "926:                                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "",
          "[Added Lines]",
          "926:                                         memcpy(wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04ae697234127a8a11d94113a28ee58fdb5e5801",
      "candidate_info": {
        "commit_hash": "04ae697234127a8a11d94113a28ee58fdb5e5801",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/04ae697234127a8a11d94113a28ee58fdb5e5801",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "pcapng: Fixed copying if_filter_bpf_bytes\n\nBug: 11455\nChange-Id: I230ae26ef32ffc9d748b9f3da9011da952b6e175\nReviewed-on: https://code.wireshark.org/review/10155\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 21ec6668d69743153c48adac036f6a22fbf36992)\nReviewed-on: https://code.wireshark.org/review/11092\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:                                 } else if (option_content[0] == 1) {",
          "924:                                         wblock->data.if_descr.bpf_filter_len = oh.option_length-1;",
          "925:                                         wblock->data.if_descr.if_filter_bpf_bytes = (gchar *)g_malloc(oh.option_length-1);",
          "927:                                 }",
          "928:                         } else {",
          "929:                                 pcapng_debug1(\"pcapng_read_if_descr_block: if_filter length %u seems strange\", oh.option_length);",
          "",
          "[Removed Lines]",
          "926:                                         memcpy(&wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "",
          "[Added Lines]",
          "926:                                         memcpy(wblock->data.if_descr.if_filter_bpf_bytes, option_content+1, oh.option_length-1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}