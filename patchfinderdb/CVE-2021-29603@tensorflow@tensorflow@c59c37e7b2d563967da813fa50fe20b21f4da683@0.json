{
  "cve_id": "CVE-2021-29603",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. A specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of `ArgMin`/`ArgMax`(https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59). If `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c59c37e7b2d563967da813fa50fe20b21f4da683",
  "patch_info": {
    "commit_hash": "c59c37e7b2d563967da813fa50fe20b21f4da683",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683",
    "files": [
      "tensorflow/lite/kernels/arg_min_max.cc"
    ],
    "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
    "before_after_code_files": [
      "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
      "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:     axis_value += NumDimensions(input);",
      "49:   }",
      "52:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
      "53:   int j = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:   TF_LITE_ENSURE(context, axis_value >= 0);",
      "52:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d8411dedb303943779f8ec7d909fe6e68b16df2",
      "candidate_info": {
        "commit_hash": "5d8411dedb303943779f8ec7d909fe6e68b16df2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5d8411dedb303943779f8ec7d909fe6e68b16df2",
        "files": [
          "tensorflow/lite/kernels/arg_min_max.cc"
        ],
        "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
        "before_after_code_files": [
          "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
          "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     axis_value += NumDimensions(input);",
          "43:   }",
          "46:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
          "47:   int j = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   TF_LITE_ENSURE(context, axis_value >= 0);",
          "46:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a61b528458f52801f20b0a9a5fe78297b95e1c3c",
      "candidate_info": {
        "commit_hash": "a61b528458f52801f20b0a9a5fe78297b95e1c3c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a61b528458f52801f20b0a9a5fe78297b95e1c3c",
        "files": [
          "tensorflow/lite/kernels/arg_min_max.cc"
        ],
        "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
        "before_after_code_files": [
          "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
          "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     axis_value += NumDimensions(input);",
          "37:   }",
          "40:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
          "41:   int j = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   TF_LITE_ENSURE(context, axis_value >= 0);",
          "40:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03ccc8b3914cb7ec6e3cfc103ec888152ecb8e5d",
      "candidate_info": {
        "commit_hash": "03ccc8b3914cb7ec6e3cfc103ec888152ecb8e5d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/03ccc8b3914cb7ec6e3cfc103ec888152ecb8e5d",
        "files": [
          "tensorflow/lite/kernels/arg_min_max.cc"
        ],
        "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
        "before_after_code_files": [
          "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
          "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     axis_value += NumDimensions(input);",
          "49:   }",
          "52:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
          "53:   int j = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   TF_LITE_ENSURE(context, axis_value >= 0);",
          "52:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "904178c9692ed0b5e930ecf09b20a4d758a64c06",
      "candidate_info": {
        "commit_hash": "904178c9692ed0b5e930ecf09b20a4d758a64c06",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/904178c9692ed0b5e930ecf09b20a4d758a64c06",
        "files": [
          "tensorflow/lite/kernels/arg_min_max.cc"
        ],
        "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
        "before_after_code_files": [
          "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
          "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     axis_value += NumDimensions(input);",
          "37:   }",
          "40:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
          "41:   int j = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   TF_LITE_ENSURE(context, axis_value >= 0);",
          "40:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "038c7b035dfad1860fdfc5f5a2aec13a1e2e4203",
      "candidate_info": {
        "commit_hash": "038c7b035dfad1860fdfc5f5a2aec13a1e2e4203",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/038c7b035dfad1860fdfc5f5a2aec13a1e2e4203",
        "files": [
          "tensorflow/lite/kernels/arg_min_max.cc"
        ],
        "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
        "before_after_code_files": [
          "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/arg_min_max.cc||tensorflow/lite/kernels/arg_min_max.cc": [
          "File: tensorflow/lite/kernels/arg_min_max.cc -> tensorflow/lite/kernels/arg_min_max.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     axis_value += NumDimensions(input);",
          "43:   }",
          "46:   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);",
          "47:   int j = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   TF_LITE_ENSURE(context, axis_value >= 0);",
          "46:   TF_LITE_ENSURE(context, axis_value < NumDimensions(input));",
          "",
          "---------------"
        ]
      }
    }
  ]
}