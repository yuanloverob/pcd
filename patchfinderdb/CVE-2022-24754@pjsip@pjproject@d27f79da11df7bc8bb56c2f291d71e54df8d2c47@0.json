{
  "cve_id": "CVE-2022-24754",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C language. In versions prior to and including 2.12 PJSIP there is a stack-buffer overflow vulnerability which only impacts PJSIP users who accept hashed digest credentials (credentials with data_type `PJSIP_CRED_DATA_DIGEST`). This issue has been patched in the master branch of the PJSIP repository and will be included with the next release. Users unable to upgrade need to check that the hashed digest data length must be equal to `PJSIP_MD5STRLEN` before passing to PJSIP.",
  "repo": "pjsip/pjproject",
  "patch_hash": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
  "patch_info": {
    "commit_hash": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
    "files": [
      "pjsip/include/pjsip/sip_auth.h",
      "pjsip/src/pjsip/sip_auth_aka.c",
      "pjsip/src/pjsip/sip_auth_client.c",
      "pjsip/src/pjsip/sip_auth_server.c",
      "pjsip/src/pjsua-lib/pjsua_core.c"
    ],
    "message": "Use PJ_ASSERT_RETURN() on pjsip_auth_create_digest() and pjsua_init_tpselector() (#3009)\n\n* Use PJ_ASSERT_RETURN on pjsip_auth_create_digest\n\n* Use PJ_ASSERT_RETURN on pjsua_init_tpselector()\n\n* Fix incorrect check.\n\n* Add return value to pjsip_auth_create_digest() and pjsip_auth_create_digestSHA256()\n\n* Modification based on comments.",
    "before_after_code_files": [
      "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
      "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c",
      "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c",
      "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c",
      "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c"
    ]
  },
  "patch_diff": {
    "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h": [
      "File: pjsip/include/pjsip/sip_auth.h -> pjsip/include/pjsip/sip_auth.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "588: PJ_DECL(void) pjsip_auth_create_digest(pj_str_t *result,",
      "589:            const pj_str_t *nonce,",
      "590:            const pj_str_t *nc,",
      "591:            const pj_str_t *cnonce,",
      "592:            const pj_str_t *qop,",
      "593:            const pj_str_t *uri,",
      "594:            const pj_str_t *realm,",
      "595:            const pjsip_cred_info *cred_info,",
      "596:            const pj_str_t *method);",
      "",
      "[Added Lines]",
      "590: PJ_DECL(pj_status_t) pjsip_auth_create_digest(pj_str_t *result,",
      "591:            const pj_str_t *nonce,",
      "592:            const pj_str_t *nc,",
      "593:            const pj_str_t *cnonce,",
      "594:            const pj_str_t *qop,",
      "595:            const pj_str_t *uri,",
      "596:            const pj_str_t *realm,",
      "597:            const pjsip_cred_info *cred_info,",
      "598:            const pj_str_t *method);",
      "618: PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t* result,",
      "619:          const pj_str_t* nonce,",
      "620:          const pj_str_t* nc,",
      "621:          const pj_str_t* cnonce,",
      "622:          const pj_str_t* qop,",
      "623:          const pj_str_t* uri,",
      "624:          const pj_str_t* realm,",
      "625:          const pjsip_cred_info* cred_info,",
      "626:          const pj_str_t* method);",
      "",
      "---------------"
    ],
    "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c": [
      "File: pjsip/src/pjsip/sip_auth_aka.c -> pjsip/src/pjsip/sip_auth_aka.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     pj_uint8_t xmac[PJSIP_AKA_MACLEN];",
      "58:     pjsip_cred_info aka_cred;",
      "59:     int i, len;",
      "63:     if (chal->algorithm.slen==0 || pj_stricmp2(&chal->algorithm, \"md5\") == 0) {",
      "73:     } else if (pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5) == 0) {",
      "",
      "[Removed Lines]",
      "60:     pj_status_t status;",
      "68:  pjsip_auth_create_digest(&auth->response, &auth->nonce, &auth->nc,",
      "69:      &auth->cnonce, &auth->qop, &auth->uri,",
      "70:      &auth->realm, cred, method);",
      "71:  return PJ_SUCCESS;",
      "",
      "[Added Lines]",
      "60:     pj_status_t status = PJ_SUCCESS;",
      "68:  status = pjsip_auth_create_digest(&auth->response, &auth->nonce,",
      "69:             &auth->nc, &auth->cnonce, &auth->qop,",
      "70:             &auth->uri, &auth->realm, cred, method);",
      "72:  return status;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:  aka_cred.data.ptr = (char*)res;",
      "148:  aka_cred.data.slen = PJSIP_AKA_RESLEN;",
      "151:      &auth->nc, &auth->cnonce, &auth->qop,",
      "154:     } else if (aka_version == 2) {",
      "",
      "[Removed Lines]",
      "150:  pjsip_auth_create_digest(&auth->response, &chal->nonce,",
      "152:      &auth->uri, &chal->realm, &aka_cred, method);",
      "",
      "[Added Lines]",
      "151:  status = pjsip_auth_create_digest(&auth->response, &chal->nonce,",
      "153:      &auth->uri, &chal->realm, &aka_cred, method);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "186:                   aka_cred.data.ptr, &len);",
      "187:  aka_cred.data.slen = hmac64_len;",
      "190:      &auth->nc, &auth->cnonce, &auth->qop,",
      "191:      &auth->uri, &chal->realm, &aka_cred, method);",
      "",
      "[Removed Lines]",
      "189:  pjsip_auth_create_digest(&auth->response, &chal->nonce,",
      "",
      "[Added Lines]",
      "190:  status = pjsip_auth_create_digest(&auth->response, &chal->nonce,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "196:     }",
      "200: }",
      "",
      "[Removed Lines]",
      "199:     return PJ_SUCCESS;",
      "",
      "[Added Lines]",
      "200:     return status;",
      "",
      "---------------"
    ],
    "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c": [
      "File: pjsip/src/pjsip/sip_auth_client.c -> pjsip/src/pjsip/sip_auth_client.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172: {",
      "173:     char ha1[PJSIP_MD5STRLEN];",
      "174:     char ha2[PJSIP_MD5STRLEN];",
      "",
      "[Removed Lines]",
      "163: PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,",
      "164:            const pj_str_t *nonce,",
      "165:            const pj_str_t *nc,",
      "166:            const pj_str_t *cnonce,",
      "167:            const pj_str_t *qop,",
      "168:            const pj_str_t *uri,",
      "169:            const pj_str_t *realm,",
      "170:            const pjsip_cred_info *cred_info,",
      "171:            const pj_str_t *method)",
      "",
      "[Added Lines]",
      "163: PJ_DEF(pj_status_t) pjsip_auth_create_digest( pj_str_t *result,",
      "164:            const pj_str_t *nonce,",
      "165:            const pj_str_t *nc,",
      "166:            const pj_str_t *cnonce,",
      "167:            const pj_str_t *qop,",
      "168:            const pj_str_t *uri,",
      "169:            const pj_str_t *realm,",
      "170:            const pjsip_cred_info *cred_info,",
      "171:            const pj_str_t *method)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "194:  digestNtoStr(digest, 16, ha1);",
      "196:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST) {",
      "198:  pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );",
      "199:     } else {",
      "200:  pj_assert(!\"Invalid data_type\");",
      "201:     }",
      "203:     AUTH_TRACE_((THIS_FILE, \"  ha1=%.32s\", ha1));",
      "",
      "[Removed Lines]",
      "197:  pj_assert(cred_info->data.slen == 32);",
      "",
      "[Added Lines]",
      "197:  if (cred_info->data.slen != 32) {",
      "198:      pj_assert(!\"Invalid cred_info data length\");",
      "199:      pj_bzero(result->ptr, result->slen);",
      "200:      result->slen = 0;",
      "201:      return PJ_EINVAL;",
      "202:  }",
      "206:  pj_bzero(result->ptr, result->slen);",
      "207:  result->slen = 0;",
      "208:  return PJ_EINVAL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "246:     AUTH_TRACE_((THIS_FILE, \"  digest=%.32s\", result->ptr));",
      "247:     AUTH_TRACE_((THIS_FILE, \"Digest created\"));",
      "248: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     return PJ_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "256:          const pj_str_t *nonce,",
      "257:          const pj_str_t *nc,",
      "258:          const pj_str_t *cnonce,",
      "",
      "[Removed Lines]",
      "255: PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,",
      "",
      "[Added Lines]",
      "264: PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t *result,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "292:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST)",
      "293:     {",
      "295:  pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );",
      "296:     } else {",
      "297:  pj_assert(!\"Invalid data_type\");",
      "298:     }",
      "300:     AUTH_TRACE_((THIS_FILE, \" ha1=%.64s\", ha1));",
      "",
      "[Removed Lines]",
      "294:  pj_assert(cred_info->data.slen == 32);",
      "",
      "[Added Lines]",
      "303:  if (cred_info->data.slen != 64) {",
      "304:      pj_assert(!\"Invalid cred_info data length\");",
      "305:      pj_bzero(result->ptr, result->slen);",
      "306:      result->slen = 0;",
      "307:      return PJ_EINVAL;",
      "308:  }",
      "312:  pj_bzero(result->ptr, result->slen);",
      "313:  result->slen = 0;",
      "314:  return PJ_EINVAL;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "354:     PJ_UNUSED_ARG(cred_info);",
      "355:     PJ_UNUSED_ARG(method);",
      "356: #endif",
      "357: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "374:     return PJ_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "408: {",
      "409:     const pj_str_t pjsip_AKAv1_MD5_STR = { \"AKAv1-MD5\", 9 };",
      "410:     pj_bool_t algo_sha256 = PJ_FALSE;",
      "413: #if PJSIP_AUTH_HAS_DIGEST_SHA256",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "429:     pj_status_t status = PJ_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "452:  else {",
      "454:      if (algo_sha256) {",
      "456:        &cred->response, &cred->nonce, NULL,",
      "457:        NULL,  NULL, uri, &chal->realm,",
      "458:        cred_info, method);",
      "459:      } else {",
      "463:      }",
      "464:  }",
      "",
      "[Removed Lines]",
      "455:   pjsip_auth_create_digestSHA256(",
      "460:   pjsip_auth_create_digest( &cred->response, &cred->nonce, NULL,",
      "461:        NULL,  NULL, uri, &chal->realm,",
      "462:        cred_info, method);",
      "",
      "[Added Lines]",
      "474:   status = pjsip_auth_create_digestSHA256(",
      "479:   status = pjsip_auth_create_digest( &cred->response,",
      "480:        &cred->nonce, NULL, NULL, NULL, uri,",
      "481:        &chal->realm, cred_info, method);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "486:  else {",
      "488:      if (algo_sha256) {",
      "490:        &cred->response, &cred->nonce,",
      "491:        &cred->nc, &cred->cnonce,",
      "492:        &pjsip_AUTH_STR, uri,",
      "493:        &chal->realm, cred_info,",
      "494:        method);",
      "495:      } else {",
      "501:      }",
      "502:  }",
      "",
      "[Removed Lines]",
      "489:   pjsip_auth_create_digestSHA256(",
      "496:   pjsip_auth_create_digest( &cred->response, &cred->nonce,",
      "497:        &cred->nc, &cred->cnonce,",
      "498:        &pjsip_AUTH_STR, uri,",
      "499:        &chal->realm, cred_info,",
      "500:        method);",
      "",
      "[Added Lines]",
      "508:   status = pjsip_auth_create_digestSHA256(",
      "515:   status = pjsip_auth_create_digest( &cred->response,",
      "516:        &cred->nonce, &cred->nc,",
      "517:               &cred->cnonce, &pjsip_AUTH_STR,",
      "518:        uri, &chal->realm,",
      "519:        cred_info, method);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "508:  return PJSIP_EINVALIDQOP;",
      "509:     }",
      "512: }",
      "514: #if defined(PJSIP_AUTH_QOP_SUPPORT) && PJSIP_AUTH_QOP_SUPPORT!=0",
      "",
      "[Removed Lines]",
      "511:     return PJ_SUCCESS;",
      "",
      "[Added Lines]",
      "530:     return status;",
      "",
      "---------------"
    ],
    "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c": [
      "File: pjsip/src/pjsip/sip_auth_server.c -> pjsip/src/pjsip/sip_auth_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {",
      "80:  char digest_buf[PJSIP_MD5STRLEN];",
      "81:  pj_str_t digest;",
      "82:  const pjsip_digest_credential *dig = &hdr->credential.digest;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:  pj_status_t status;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:  digest.slen = PJSIP_MD5STRLEN;",
      "99:      &hdr->credential.digest.nonce,",
      "100:      &hdr->credential.digest.nc,",
      "101:      &hdr->credential.digest.cnonce,",
      "",
      "[Removed Lines]",
      "98:  pjsip_auth_create_digest(&digest,",
      "",
      "[Added Lines]",
      "99:  status = pjsip_auth_create_digest(&digest,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "105:      cred_info,",
      "106:      method );",
      "109:  return (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?",
      "110:         PJ_SUCCESS : PJSIP_EAUTHINVALIDDIGEST;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "109:  if (status != PJ_SUCCESS)",
      "110:      return status;",
      "",
      "---------------"
    ],
    "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c": [
      "File: pjsip/src/pjsua-lib/pjsua_core.c -> pjsip/src/pjsua-lib/pjsua_core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3126:     if (tp_id == PJSUA_INVALID_ID)",
      "3127:  return;",
      "3130:     tpdata = &pjsua_var.tpdata[tp_id];",
      "3132:     flag = pjsip_transport_get_flag_from_type(tpdata->type);",
      "",
      "[Removed Lines]",
      "3129:     pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));",
      "",
      "[Added Lines]",
      "3129:     PJ_ASSERT_RETURN(tp_id >= 0 &&",
      "3130:        tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abf2b4c54f22cb20912a01a6f59775554af0c408",
      "candidate_info": {
        "commit_hash": "abf2b4c54f22cb20912a01a6f59775554af0c408",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/abf2b4c54f22cb20912a01a6f59775554af0c408",
        "files": [
          "pjsip/include/pjsip/sip_auth.h",
          "pjsip/include/pjsip/sip_auth_parser.h",
          "pjsip/src/pjsip/sip_auth_client.c",
          "pjsip/src/pjsip/sip_auth_parser.c"
        ],
        "message": "Support for SHA-256 algorithm in SIP Digest Authentication (#2753)",
        "before_after_code_files": [
          "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
          "pjsip/include/pjsip/sip_auth_parser.h||pjsip/include/pjsip/sip_auth_parser.h",
          "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c",
          "pjsip/src/pjsip/sip_auth_parser.c||pjsip/src/pjsip/sip_auth_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
            "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c"
          ],
          "candidate": [
            "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
            "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c"
          ]
        }
      },
      "candidate_diff": {
        "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h": [
          "File: pjsip/include/pjsip/sip_auth.h -> pjsip/include/pjsip/sip_auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "47: #define PJSIP_MD5STRLEN 32",
          "",
          "[Added Lines]",
          "47: #define PJSIP_MD5STRLEN  32",
          "50: #define PJSIP_SHA256STRLEN 64",
          "",
          "---------------"
        ],
        "pjsip/include/pjsip/sip_auth_parser.h||pjsip/include/pjsip/sip_auth_parser.h": [
          "File: pjsip/include/pjsip/sip_auth_parser.h -> pjsip/include/pjsip/sip_auth_parser.h"
        ],
        "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c": [
          "File: pjsip/src/pjsip/sip_auth_client.c -> pjsip/src/pjsip/sip_auth_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <pj/ctype.h>",
          "39: #define MD5_APPEND(pms,buf,len) pj_md5_update(pms, (const pj_uint8_t*)buf, \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #if PJ_HAS_SSL_SOCK && PJ_SSL_SOCK_IMP==PJ_SSL_SOCK_IMP_OPENSSL",
          "38: #  if !defined(PJSIP_AUTH_HAS_DIGEST_SHA256)",
          "39: #    define PJSIP_AUTH_HAS_DIGEST_SHA256    1",
          "40: #  endif",
          "41: #else",
          "42: #  undef  PJSIP_AUTH_HAS_DIGEST_SHA256",
          "43: #  define PJSIP_AUTH_HAS_DIGEST_SHA256     0",
          "44: #endif",
          "46: #if PJSIP_AUTH_HAS_DIGEST_SHA256",
          "47: #  include <openssl/sha.h>",
          "48: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129: {",
          "130:     int i;",
          "134:     }",
          "135: }",
          "",
          "[Removed Lines]",
          "128: static void digest2str(const unsigned char digest[], char *output)",
          "131:     for (i = 0; i<16; ++i) {",
          "132:  pj_val_to_hex_digit(digest[i], output);",
          "133:  output += 2;",
          "",
          "[Added Lines]",
          "140: static void digestNtoStr(const unsigned char digest[], int n, char *output)",
          "143:     for (i = 0; i<n; ++i) {",
          "144:         pj_val_to_hex_digit(digest[i], output);",
          "145:         output += 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:  MD5_APPEND( &pms, cred_info->data.ptr, cred_info->data.slen);",
          "171:  pj_md5_final(&pms, digest);",
          "175:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST) {",
          "176:  pj_assert(cred_info->data.slen == 32);",
          "",
          "[Removed Lines]",
          "173:  digest2str(digest, ha1);",
          "",
          "[Added Lines]",
          "185:  digestNtoStr(digest, 16, ha1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:     MD5_APPEND( &pms, \":\", 1);",
          "190:     MD5_APPEND( &pms, uri->ptr, uri->slen);",
          "191:     pj_md5_final(&pms, digest);",
          "194:     AUTH_TRACE_((THIS_FILE, \"  ha2=%.32s\", ha2));",
          "",
          "[Removed Lines]",
          "192:     digest2str(digest, ha2);",
          "",
          "[Added Lines]",
          "204:     digestNtoStr(digest, 16, ha2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:     result->slen = PJSIP_MD5STRLEN;",
          "225:     AUTH_TRACE_((THIS_FILE, \"  digest=%.32s\", result->ptr));",
          "226:     AUTH_TRACE_((THIS_FILE, \"Digest created\"));",
          "227: }",
          "",
          "[Removed Lines]",
          "223:     digest2str(digest, result->ptr);",
          "",
          "[Added Lines]",
          "235:     digestNtoStr(digest, 16, result->ptr);",
          "246: PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,",
          "247:          const pj_str_t *nonce,",
          "248:          const pj_str_t *nc,",
          "249:          const pj_str_t *cnonce,",
          "250:          const pj_str_t *qop,",
          "251:          const pj_str_t *uri,",
          "252:          const pj_str_t *realm,",
          "253:          const pjsip_cred_info *cred_info,",
          "254:          const pj_str_t *method)",
          "255: {",
          "256: #if PJSIP_AUTH_HAS_DIGEST_SHA256",
          "258:     char ha1[PJSIP_SHA256STRLEN];",
          "259:     char ha2[PJSIP_SHA256STRLEN];",
          "260:     unsigned char digest[32];",
          "261:     SHA256_CTX pms;",
          "263:     pj_assert(result->slen >= PJSIP_SHA256STRLEN);",
          "265:     AUTH_TRACE_((THIS_FILE, \"Begin creating digest\"));",
          "267:     if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_PLAIN_PASSWD)",
          "268:     {",
          "272:  SHA256_Init(&pms);",
          "273:  SHA256_Update( &pms, cred_info->username.ptr,",
          "274:          cred_info->username.slen);",
          "275:  SHA256_Update( &pms, \":\", 1);",
          "276:  SHA256_Update( &pms, realm->ptr, realm->slen);",
          "277:  SHA256_Update( &pms, \":\", 1);",
          "278:  SHA256_Update( &pms, cred_info->data.ptr, cred_info->data.slen);",
          "279:  SHA256_Final(digest, &pms);",
          "281:  digestNtoStr(digest, 32, ha1);",
          "283:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST)",
          "284:     {",
          "285:  pj_assert(cred_info->data.slen == 32);",
          "286:  pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );",
          "287:     } else {",
          "288:  pj_assert(!\"Invalid data_type\");",
          "289:     }",
          "291:     AUTH_TRACE_((THIS_FILE, \" ha1=%.64s\", ha1));",
          "296:     SHA256_Init(&pms);",
          "297:     SHA256_Update( &pms, method->ptr, method->slen);",
          "298:     SHA256_Update( &pms, \":\", 1);",
          "299:     SHA256_Update( &pms, uri->ptr, uri->slen);",
          "300:     SHA256_Final( digest, &pms);",
          "301:     digestNtoStr(digest, 32, ha2);",
          "303:     AUTH_TRACE_((THIS_FILE, \" ha2=%.64s\", ha2));",
          "312:     SHA256_Init(&pms);",
          "313:     SHA256_Update( &pms, ha1, PJSIP_SHA256STRLEN);",
          "314:     SHA256_Update( &pms, \":\", 1);",
          "315:     SHA256_Update( &pms, nonce->ptr, nonce->slen);",
          "316:     if (qop && qop->slen != 0) {",
          "317:  SHA256_Update( &pms, \":\", 1);",
          "318:  SHA256_Update( &pms, nc->ptr, nc->slen);",
          "319:  SHA256_Update( &pms, \":\", 1);",
          "320:  SHA256_Update( &pms, cnonce->ptr, cnonce->slen);",
          "321:  SHA256_Update( &pms, \":\", 1);",
          "322:  SHA256_Update( &pms, qop->ptr, qop->slen);",
          "323:     }",
          "324:     SHA256_Update( &pms, \":\", 1);",
          "325:     SHA256_Update( &pms, ha2, PJSIP_SHA256STRLEN);",
          "328:     SHA256_Final(digest, &pms);",
          "331:     result->slen = PJSIP_SHA256STRLEN;",
          "332:     digestNtoStr(digest, 32, result->ptr);",
          "334:     AUTH_TRACE_((THIS_FILE, \" digest=%.64s\", result->ptr));",
          "335:     AUTH_TRACE_((THIS_FILE, \"Digest created\"));",
          "337: #else",
          "338:     PJ_UNUSED_ARG(result)",
          "339:     PJ_UNUSED_ARG(nonce)",
          "340:     PJ_UNUSED_ARG(nc)",
          "341:     PJ_UNUSED_ARG(cnonce)",
          "342:     PJ_UNUSED_ARG(qop)",
          "343:     PJ_UNUSED_ARG(uri)",
          "344:     PJ_UNUSED_ARG(realm)",
          "345:     PJ_UNUSED_ARG(cred_info)",
          "346:     PJ_UNUSED_ARG(method)",
          "347: #endif",
          "348: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:        const pj_str_t *method)",
          "277: {",
          "278:     const pj_str_t pjsip_AKAv1_MD5_STR = { \"AKAv1-MD5\", 9 };",
          "281:     if (chal->algorithm.slen==0 ||",
          "284:     {",
          "286:     }",
          "287:     else {",
          "288:  PJ_LOG(4,(THIS_FILE, \"Unsupported digest algorithm \\\"%.*s\\\"\",",
          "",
          "[Removed Lines]",
          "282:  (pj_stricmp(&chal->algorithm, &pjsip_MD5_STR)==0 ||",
          "283:   pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5_STR)==0))",
          "285:  ;",
          "",
          "[Added Lines]",
          "401:     pj_bool_t algo_sha256 = PJ_FALSE;",
          "404: #if PJSIP_AUTH_HAS_DIGEST_SHA256",
          "405:     algo_sha256 = (pj_stricmp(&chal->algorithm, &pjsip_SHA256_STR)==0);",
          "406: #endif",
          "410:         (algo_sha256 ||",
          "411:   pj_stricmp(&chal->algorithm, &pjsip_MD5_STR)==0 ||",
          "412:          pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5_STR)==0))",
          "414:  PJ_LOG(4,(THIS_FILE, \"Digest algorithm is \\\"%.*s\\\"\",",
          "415:     chal->algorithm.slen, chal->algorithm.ptr));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299:     pj_strdup(pool, &cred->opaque, &chal->opaque);",
          "305:     if (chal->qop.slen == 0) {",
          "",
          "[Removed Lines]",
          "302:     cred->response.ptr = (char*) pj_pool_alloc(pool, PJSIP_MD5STRLEN);",
          "303:     cred->response.slen = PJSIP_MD5STRLEN;",
          "",
          "[Added Lines]",
          "432:     cred->response.slen = algo_sha256? PJSIP_SHA256STRLEN : PJSIP_MD5STRLEN;",
          "433:     cred->response.ptr = (char*) pj_pool_alloc(pool, cred->response.slen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:  }",
          "313:  else {",
          "318:  }",
          "320:     } else if (has_auth_qop(pool, &chal->qop)) {",
          "",
          "[Removed Lines]",
          "315:      pjsip_auth_create_digest( &cred->response, &cred->nonce, NULL,",
          "316:           NULL,  NULL, uri, &chal->realm,",
          "317:           cred_info, method);",
          "",
          "[Added Lines]",
          "445:      if (algo_sha256) {",
          "446:   pjsip_auth_create_digestSHA256(",
          "447:        &cred->response, &cred->nonce, NULL,",
          "448:        NULL,  NULL, uri, &chal->realm,",
          "449:        cred_info, method);",
          "450:      } else {",
          "451:   pjsip_auth_create_digest( &cred->response, &cred->nonce, NULL,",
          "452:        NULL,  NULL, uri, &chal->realm,",
          "453:        cred_info, method);",
          "454:      }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:          method, cred);",
          "339:  }",
          "340:  else {",
          "344:  }",
          "346:     } else {",
          "",
          "[Removed Lines]",
          "341:      pjsip_auth_create_digest( &cred->response, &cred->nonce,",
          "342:           &cred->nc, &cred->cnonce, &pjsip_AUTH_STR,",
          "343:           uri, &chal->realm, cred_info, method );",
          "",
          "[Added Lines]",
          "479:      if (algo_sha256) {",
          "480:   pjsip_auth_create_digestSHA256(",
          "481:        &cred->response, &cred->nonce,",
          "482:        &cred->nc, &cred->cnonce,",
          "483:        &pjsip_AUTH_STR, uri,",
          "484:        &chal->realm, cred_info,",
          "485:        method);",
          "486:      } else {",
          "487:   pjsip_auth_create_digest( &cred->response, &cred->nonce,",
          "488:        &cred->nc, &cred->cnonce,",
          "489:        &pjsip_AUTH_STR, uri,",
          "490:        &chal->realm, cred_info,",
          "491:        method);",
          "492:      }",
          "",
          "---------------"
        ],
        "pjsip/src/pjsip/sip_auth_parser.c||pjsip/src/pjsip/sip_auth_parser.c": [
          "File: pjsip/src/pjsip/sip_auth_parser.c -> pjsip/src/pjsip/sip_auth_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   pjsip_BEARER_STR =          { \"Bearer\", 6 },",
          "63:   pjsip_MD5_STR =      { \"md5\", 3 },",
          "64:   pjsip_QUOTED_MD5_STR =     { \"\\\"md5\\\"\", 5},",
          "65:   pjsip_AUTH_STR =     { \"auth\", 4},",
          "66:   pjsip_QUOTED_AUTH_STR =     { \"\\\"auth\\\"\", 6 };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   pjsip_SHA256_STR =     { \"SHA-256\", 7 },",
          "66:   pjsip_QUOTED_SHA256_STR =   { \"\\\"SHA-256\\\"\", 9},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03890531c56835b71a006c21faa6e0a5a899b191",
      "candidate_info": {
        "commit_hash": "03890531c56835b71a006c21faa6e0a5a899b191",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/03890531c56835b71a006c21faa6e0a5a899b191",
        "files": [
          "pjsip/include/pjsip/sip_auth.h",
          "pjsip/src/pjsip/sip_auth_aka.c",
          "pjsip/src/pjsip/sip_auth_client.c",
          "pjsip/src/pjsip/sip_auth_server.c",
          "pjsip/src/pjsua-lib/pjsua_core.c"
        ],
        "message": "Use PJ_ASSERT_RETURN() on pjsip_auth_create_digest() and pjsua_init_tpselector() (#3009)\n\n* Use PJ_ASSERT_RETURN on pjsip_auth_create_digest\n\n* Use PJ_ASSERT_RETURN on pjsua_init_tpselector()\n\n* Fix incorrect check.\n\n* Add return value to pjsip_auth_create_digest() and pjsip_auth_create_digestSHA256()\n\n* Modification based on comments.",
        "before_after_code_files": [
          "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
          "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c",
          "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c",
          "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c",
          "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
            "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c",
            "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c",
            "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c",
            "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c"
          ],
          "candidate": [
            "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h",
            "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c",
            "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c",
            "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c",
            "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c"
          ]
        }
      },
      "candidate_diff": {
        "pjsip/include/pjsip/sip_auth.h||pjsip/include/pjsip/sip_auth.h": [
          "File: pjsip/include/pjsip/sip_auth.h -> pjsip/include/pjsip/sip_auth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "588: PJ_DECL(void) pjsip_auth_create_digest(pj_str_t *result,",
          "589:            const pj_str_t *nonce,",
          "590:            const pj_str_t *nc,",
          "591:            const pj_str_t *cnonce,",
          "592:            const pj_str_t *qop,",
          "593:            const pj_str_t *uri,",
          "594:            const pj_str_t *realm,",
          "595:            const pjsip_cred_info *cred_info,",
          "596:            const pj_str_t *method);",
          "",
          "[Added Lines]",
          "590: PJ_DECL(pj_status_t) pjsip_auth_create_digest(pj_str_t *result,",
          "591:            const pj_str_t *nonce,",
          "592:            const pj_str_t *nc,",
          "593:            const pj_str_t *cnonce,",
          "594:            const pj_str_t *qop,",
          "595:            const pj_str_t *uri,",
          "596:            const pj_str_t *realm,",
          "597:            const pjsip_cred_info *cred_info,",
          "598:            const pj_str_t *method);",
          "618: PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t* result,",
          "619:          const pj_str_t* nonce,",
          "620:          const pj_str_t* nc,",
          "621:          const pj_str_t* cnonce,",
          "622:          const pj_str_t* qop,",
          "623:          const pj_str_t* uri,",
          "624:          const pj_str_t* realm,",
          "625:          const pjsip_cred_info* cred_info,",
          "626:          const pj_str_t* method);",
          "",
          "---------------"
        ],
        "pjsip/src/pjsip/sip_auth_aka.c||pjsip/src/pjsip/sip_auth_aka.c": [
          "File: pjsip/src/pjsip/sip_auth_aka.c -> pjsip/src/pjsip/sip_auth_aka.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     pj_uint8_t xmac[PJSIP_AKA_MACLEN];",
          "58:     pjsip_cred_info aka_cred;",
          "59:     int i, len;",
          "63:     if (chal->algorithm.slen==0 || pj_stricmp2(&chal->algorithm, \"md5\") == 0) {",
          "73:     } else if (pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5) == 0) {",
          "",
          "[Removed Lines]",
          "60:     pj_status_t status;",
          "68:  pjsip_auth_create_digest(&auth->response, &auth->nonce, &auth->nc,",
          "69:      &auth->cnonce, &auth->qop, &auth->uri,",
          "70:      &auth->realm, cred, method);",
          "71:  return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "60:     pj_status_t status = PJ_SUCCESS;",
          "68:  status = pjsip_auth_create_digest(&auth->response, &auth->nonce,",
          "69:             &auth->nc, &auth->cnonce, &auth->qop,",
          "70:             &auth->uri, &auth->realm, cred, method);",
          "72:  return status;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  aka_cred.data.ptr = (char*)res;",
          "148:  aka_cred.data.slen = PJSIP_AKA_RESLEN;",
          "151:      &auth->nc, &auth->cnonce, &auth->qop,",
          "154:     } else if (aka_version == 2) {",
          "",
          "[Removed Lines]",
          "150:  pjsip_auth_create_digest(&auth->response, &chal->nonce,",
          "152:      &auth->uri, &chal->realm, &aka_cred, method);",
          "",
          "[Added Lines]",
          "151:  status = pjsip_auth_create_digest(&auth->response, &chal->nonce,",
          "153:      &auth->uri, &chal->realm, &aka_cred, method);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:                   aka_cred.data.ptr, &len);",
          "187:  aka_cred.data.slen = hmac64_len;",
          "190:      &auth->nc, &auth->cnonce, &auth->qop,",
          "191:      &auth->uri, &chal->realm, &aka_cred, method);",
          "",
          "[Removed Lines]",
          "189:  pjsip_auth_create_digest(&auth->response, &chal->nonce,",
          "",
          "[Added Lines]",
          "190:  status = pjsip_auth_create_digest(&auth->response, &chal->nonce,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:     }",
          "200: }",
          "",
          "[Removed Lines]",
          "199:     return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "200:     return status;",
          "",
          "---------------"
        ],
        "pjsip/src/pjsip/sip_auth_client.c||pjsip/src/pjsip/sip_auth_client.c": [
          "File: pjsip/src/pjsip/sip_auth_client.c -> pjsip/src/pjsip/sip_auth_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: {",
          "173:     char ha1[PJSIP_MD5STRLEN];",
          "174:     char ha2[PJSIP_MD5STRLEN];",
          "",
          "[Removed Lines]",
          "163: PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,",
          "164:            const pj_str_t *nonce,",
          "165:            const pj_str_t *nc,",
          "166:            const pj_str_t *cnonce,",
          "167:            const pj_str_t *qop,",
          "168:            const pj_str_t *uri,",
          "169:            const pj_str_t *realm,",
          "170:            const pjsip_cred_info *cred_info,",
          "171:            const pj_str_t *method)",
          "",
          "[Added Lines]",
          "163: PJ_DEF(pj_status_t) pjsip_auth_create_digest( pj_str_t *result,",
          "164:            const pj_str_t *nonce,",
          "165:            const pj_str_t *nc,",
          "166:            const pj_str_t *cnonce,",
          "167:            const pj_str_t *qop,",
          "168:            const pj_str_t *uri,",
          "169:            const pj_str_t *realm,",
          "170:            const pjsip_cred_info *cred_info,",
          "171:            const pj_str_t *method)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:  digestNtoStr(digest, 16, ha1);",
          "196:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST) {",
          "198:  pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );",
          "199:     } else {",
          "200:  pj_assert(!\"Invalid data_type\");",
          "201:     }",
          "203:     AUTH_TRACE_((THIS_FILE, \"  ha1=%.32s\", ha1));",
          "",
          "[Removed Lines]",
          "197:  pj_assert(cred_info->data.slen == 32);",
          "",
          "[Added Lines]",
          "197:  if (cred_info->data.slen != 32) {",
          "198:      pj_assert(!\"Invalid cred_info data length\");",
          "199:      pj_bzero(result->ptr, result->slen);",
          "200:      result->slen = 0;",
          "201:      return PJ_EINVAL;",
          "202:  }",
          "206:  pj_bzero(result->ptr, result->slen);",
          "207:  result->slen = 0;",
          "208:  return PJ_EINVAL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:     AUTH_TRACE_((THIS_FILE, \"  digest=%.32s\", result->ptr));",
          "247:     AUTH_TRACE_((THIS_FILE, \"Digest created\"));",
          "248: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:     return PJ_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:          const pj_str_t *nonce,",
          "257:          const pj_str_t *nc,",
          "258:          const pj_str_t *cnonce,",
          "",
          "[Removed Lines]",
          "255: PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,",
          "",
          "[Added Lines]",
          "264: PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t *result,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST)",
          "293:     {",
          "295:  pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );",
          "296:     } else {",
          "297:  pj_assert(!\"Invalid data_type\");",
          "298:     }",
          "300:     AUTH_TRACE_((THIS_FILE, \" ha1=%.64s\", ha1));",
          "",
          "[Removed Lines]",
          "294:  pj_assert(cred_info->data.slen == 32);",
          "",
          "[Added Lines]",
          "303:  if (cred_info->data.slen != 64) {",
          "304:      pj_assert(!\"Invalid cred_info data length\");",
          "305:      pj_bzero(result->ptr, result->slen);",
          "306:      result->slen = 0;",
          "307:      return PJ_EINVAL;",
          "308:  }",
          "312:  pj_bzero(result->ptr, result->slen);",
          "313:  result->slen = 0;",
          "314:  return PJ_EINVAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "354:     PJ_UNUSED_ARG(cred_info);",
          "355:     PJ_UNUSED_ARG(method);",
          "356: #endif",
          "357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:     return PJ_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408: {",
          "409:     const pj_str_t pjsip_AKAv1_MD5_STR = { \"AKAv1-MD5\", 9 };",
          "410:     pj_bool_t algo_sha256 = PJ_FALSE;",
          "413: #if PJSIP_AUTH_HAS_DIGEST_SHA256",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:     pj_status_t status = PJ_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "452:  else {",
          "454:      if (algo_sha256) {",
          "456:        &cred->response, &cred->nonce, NULL,",
          "457:        NULL,  NULL, uri, &chal->realm,",
          "458:        cred_info, method);",
          "459:      } else {",
          "463:      }",
          "464:  }",
          "",
          "[Removed Lines]",
          "455:   pjsip_auth_create_digestSHA256(",
          "460:   pjsip_auth_create_digest( &cred->response, &cred->nonce, NULL,",
          "461:        NULL,  NULL, uri, &chal->realm,",
          "462:        cred_info, method);",
          "",
          "[Added Lines]",
          "474:   status = pjsip_auth_create_digestSHA256(",
          "479:   status = pjsip_auth_create_digest( &cred->response,",
          "480:        &cred->nonce, NULL, NULL, NULL, uri,",
          "481:        &chal->realm, cred_info, method);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "486:  else {",
          "488:      if (algo_sha256) {",
          "490:        &cred->response, &cred->nonce,",
          "491:        &cred->nc, &cred->cnonce,",
          "492:        &pjsip_AUTH_STR, uri,",
          "493:        &chal->realm, cred_info,",
          "494:        method);",
          "495:      } else {",
          "501:      }",
          "502:  }",
          "",
          "[Removed Lines]",
          "489:   pjsip_auth_create_digestSHA256(",
          "496:   pjsip_auth_create_digest( &cred->response, &cred->nonce,",
          "497:        &cred->nc, &cred->cnonce,",
          "498:        &pjsip_AUTH_STR, uri,",
          "499:        &chal->realm, cred_info,",
          "500:        method);",
          "",
          "[Added Lines]",
          "508:   status = pjsip_auth_create_digestSHA256(",
          "515:   status = pjsip_auth_create_digest( &cred->response,",
          "516:        &cred->nonce, &cred->nc,",
          "517:               &cred->cnonce, &pjsip_AUTH_STR,",
          "518:        uri, &chal->realm,",
          "519:        cred_info, method);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "508:  return PJSIP_EINVALIDQOP;",
          "509:     }",
          "512: }",
          "514: #if defined(PJSIP_AUTH_QOP_SUPPORT) && PJSIP_AUTH_QOP_SUPPORT!=0",
          "",
          "[Removed Lines]",
          "511:     return PJ_SUCCESS;",
          "",
          "[Added Lines]",
          "530:     return status;",
          "",
          "---------------"
        ],
        "pjsip/src/pjsip/sip_auth_server.c||pjsip/src/pjsip/sip_auth_server.c": [
          "File: pjsip/src/pjsip/sip_auth_server.c -> pjsip/src/pjsip/sip_auth_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {",
          "80:  char digest_buf[PJSIP_MD5STRLEN];",
          "81:  pj_str_t digest;",
          "82:  const pjsip_digest_credential *dig = &hdr->credential.digest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  pj_status_t status;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:  digest.slen = PJSIP_MD5STRLEN;",
          "99:      &hdr->credential.digest.nonce,",
          "100:      &hdr->credential.digest.nc,",
          "101:      &hdr->credential.digest.cnonce,",
          "",
          "[Removed Lines]",
          "98:  pjsip_auth_create_digest(&digest,",
          "",
          "[Added Lines]",
          "99:  status = pjsip_auth_create_digest(&digest,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:      cred_info,",
          "106:      method );",
          "109:  return (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?",
          "110:         PJ_SUCCESS : PJSIP_EAUTHINVALIDDIGEST;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  if (status != PJ_SUCCESS)",
          "110:      return status;",
          "",
          "---------------"
        ],
        "pjsip/src/pjsua-lib/pjsua_core.c||pjsip/src/pjsua-lib/pjsua_core.c": [
          "File: pjsip/src/pjsua-lib/pjsua_core.c -> pjsip/src/pjsua-lib/pjsua_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3126:     if (tp_id == PJSUA_INVALID_ID)",
          "3127:  return;",
          "3130:     tpdata = &pjsua_var.tpdata[tp_id];",
          "3132:     flag = pjsip_transport_get_flag_from_type(tpdata->type);",
          "",
          "[Removed Lines]",
          "3129:     pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));",
          "",
          "[Added Lines]",
          "3129:     PJ_ASSERT_RETURN(tp_id >= 0 &&",
          "3130:        tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );",
          "",
          "---------------"
        ]
      }
    }
  ]
}