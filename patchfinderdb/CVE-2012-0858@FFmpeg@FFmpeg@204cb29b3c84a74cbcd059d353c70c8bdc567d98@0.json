{
  "cve_id": "CVE-2012-0858",
  "cve_desc": "The Shorten codec (shorten.c) in libavcodec in FFmpeg 0.7.x before 0.7.12 and 0.8.x before 0.8.11, and in Libav 0.5.x before 0.5.9, 0.6.x before 0.6.6, 0.7.x before 0.7.5, and 0.8.x before 0.8.1, allows remote attackers to cause a denial of service (application crash) and possibly execute arbitrary code via a crafted Shorten file, related to an \"invalid free\".",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "204cb29b3c84a74cbcd059d353c70c8bdc567d98",
  "patch_info": {
    "commit_hash": "204cb29b3c84a74cbcd059d353c70c8bdc567d98",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/204cb29b3c84a74cbcd059d353c70c8bdc567d98",
    "files": [
      "libavcodec/shorten.c"
    ],
    "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>",
    "before_after_code_files": [
      "libavcodec/shorten.c||libavcodec/shorten.c"
    ]
  },
  "patch_diff": {
    "libavcodec/shorten.c||libavcodec/shorten.c": [
      "File: libavcodec/shorten.c -> libavcodec/shorten.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:     int channels;",
      "88:     int32_t *decoded[MAX_CHANNELS];",
      "89:     int32_t *offset[MAX_CHANNELS];",
      "90:     int *coeffs;",
      "91:     uint8_t *bitstream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:     int32_t *decoded_base[MAX_CHANNELS];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:             return AVERROR(ENOMEM);",
      "141:         s->offset[chan] = tmp_ptr;",
      "144:         if (!tmp_ptr)",
      "145:             return AVERROR(ENOMEM);",
      "147:         for (i=0; i<s->nwrap; i++)",
      "150:     }",
      "152:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
      "",
      "[Removed Lines]",
      "143:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
      "146:         s->decoded[chan] = tmp_ptr;",
      "148:             s->decoded[chan][i] = 0;",
      "149:         s->decoded[chan] += s->nwrap;",
      "",
      "[Added Lines]",
      "144:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
      "145:                              sizeof(s->decoded_base[0][0]));",
      "148:         s->decoded_base[chan] = tmp_ptr;",
      "150:             s->decoded_base[chan][i] = 0;",
      "151:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "615:     int i;",
      "617:     for (i = 0; i < s->channels; i++) {",
      "620:         av_freep(&s->offset[i]);",
      "621:     }",
      "622:     av_freep(&s->bitstream);",
      "",
      "[Removed Lines]",
      "618:         s->decoded[i] -= s->nwrap;",
      "619:         av_freep(&s->decoded[i]);",
      "",
      "[Added Lines]",
      "620:         s->decoded[i] = NULL;",
      "621:         av_freep(&s->decoded_base[i]);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cfad9930ff1e53452fc9664be62c975943acf353",
      "candidate_info": {
        "commit_hash": "cfad9930ff1e53452fc9664be62c975943acf353",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/cfad9930ff1e53452fc9664be62c975943acf353",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 204cb29b3c84a74cbcd059d353c70c8bdc567d98)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit 6fc3287b9ccece290c5881b92948772bbf72e68c)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit 96ed18cab1048f03ff1c825f46b25d49218f1da4)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     int channels;",
          "84:     int32_t *decoded[MAX_CHANNELS];",
          "85:     int32_t *offset[MAX_CHANNELS];",
          "86:     int *coeffs;",
          "87:     uint8_t *bitstream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:             return AVERROR(ENOMEM);",
          "132:         s->offset[chan] = tmp_ptr;",
          "135:         if (!tmp_ptr)",
          "136:             return AVERROR(ENOMEM);",
          "138:         for (i=0; i<s->nwrap; i++)",
          "141:     }",
          "143:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
          "",
          "[Removed Lines]",
          "134:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "137:         s->decoded[chan] = tmp_ptr;",
          "139:             s->decoded[chan][i] = 0;",
          "140:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "135:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
          "136:                              sizeof(s->decoded_base[0][0]));",
          "139:         s->decoded_base[chan] = tmp_ptr;",
          "141:             s->decoded_base[chan][i] = 0;",
          "142:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:     int i;",
          "547:     for (i = 0; i < s->channels; i++) {",
          "550:         av_freep(&s->offset[i]);",
          "551:     }",
          "552:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "548:         s->decoded[i] -= s->nwrap;",
          "549:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "550:         s->decoded[i] = NULL;",
          "551:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fc3287b9ccece290c5881b92948772bbf72e68c",
      "candidate_info": {
        "commit_hash": "6fc3287b9ccece290c5881b92948772bbf72e68c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6fc3287b9ccece290c5881b92948772bbf72e68c",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 204cb29b3c84a74cbcd059d353c70c8bdc567d98)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     int channels;",
          "88:     int32_t *decoded[MAX_CHANNELS];",
          "89:     int32_t *offset[MAX_CHANNELS];",
          "90:     int *coeffs;",
          "91:     uint8_t *bitstream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:             return AVERROR(ENOMEM);",
          "141:         s->offset[chan] = tmp_ptr;",
          "144:         if (!tmp_ptr)",
          "145:             return AVERROR(ENOMEM);",
          "147:         for (i=0; i<s->nwrap; i++)",
          "150:     }",
          "152:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
          "",
          "[Removed Lines]",
          "143:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "146:         s->decoded[chan] = tmp_ptr;",
          "148:             s->decoded[chan][i] = 0;",
          "149:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "144:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
          "145:                              sizeof(s->decoded_base[0][0]));",
          "148:         s->decoded_base[chan] = tmp_ptr;",
          "150:             s->decoded_base[chan][i] = 0;",
          "151:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:     int i;",
          "617:     for (i = 0; i < s->channels; i++) {",
          "620:         av_freep(&s->offset[i]);",
          "621:     }",
          "622:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "618:         s->decoded[i] -= s->nwrap;",
          "619:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "620:         s->decoded[i] = NULL;",
          "621:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9def5c466648d970f8d3e03d4b3947a6852d9c61",
      "candidate_info": {
        "commit_hash": "9def5c466648d970f8d3e03d4b3947a6852d9c61",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/9def5c466648d970f8d3e03d4b3947a6852d9c61",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 204cb29b3c84a74cbcd059d353c70c8bdc567d98)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     int channels;",
          "84:     int32_t *decoded[MAX_CHANNELS];",
          "85:     int32_t *offset[MAX_CHANNELS];",
          "86:     uint8_t *bitstream;",
          "87:     int bitstream_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:             return AVERROR(ENOMEM);",
          "130:         s->offset[chan] = tmp_ptr;",
          "133:         if (!tmp_ptr)",
          "134:             return AVERROR(ENOMEM);",
          "136:         for (i=0; i<s->nwrap; i++)",
          "139:     }",
          "140:     return 0;",
          "141: }",
          "",
          "[Removed Lines]",
          "132:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "135:         s->decoded[chan] = tmp_ptr;",
          "137:             s->decoded[chan][i] = 0;",
          "138:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "133:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
          "134:                              sizeof(s->decoded_base[0][0]));",
          "137:         s->decoded_base[chan] = tmp_ptr;",
          "139:             s->decoded_base[chan][i] = 0;",
          "140:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "523:     int i;",
          "525:     for (i = 0; i < s->channels; i++) {",
          "528:         av_freep(&s->offset[i]);",
          "529:     }",
          "530:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "526:         s->decoded[i] -= s->nwrap;",
          "527:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "528:         s->decoded[i] = NULL;",
          "529:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96ed18cab1048f03ff1c825f46b25d49218f1da4",
      "candidate_info": {
        "commit_hash": "96ed18cab1048f03ff1c825f46b25d49218f1da4",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/96ed18cab1048f03ff1c825f46b25d49218f1da4",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: Use separate pointers for the allocated memory for decoded samples.\n\nFixes invalid free() if any of the buffers are not allocated due to either\nnot decoding a header or an error prior to allocating all buffers.\n\nFixes CVE-2012-0858\nCC: libav-stable@libav.org\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\nSigned-off-by: Justin Ruggles <justin.ruggles@gmail.com>\n(cherry picked from commit 204cb29b3c84a74cbcd059d353c70c8bdc567d98)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit 6fc3287b9ccece290c5881b92948772bbf72e68c)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     int channels;",
          "83:     int32_t *decoded[MAX_CHANNELS];",
          "84:     int32_t *offset[MAX_CHANNELS];",
          "85:     int *coeffs;",
          "86:     uint8_t *bitstream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     int32_t *decoded_base[MAX_CHANNELS];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:             return AVERROR(ENOMEM);",
          "131:         s->offset[chan] = tmp_ptr;",
          "134:         if (!tmp_ptr)",
          "135:             return AVERROR(ENOMEM);",
          "137:         for (i=0; i<s->nwrap; i++)",
          "140:     }",
          "142:     coeffs = av_realloc(s->coeffs, s->nwrap * sizeof(*s->coeffs));",
          "",
          "[Removed Lines]",
          "133:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "136:         s->decoded[chan] = tmp_ptr;",
          "138:             s->decoded[chan][i] = 0;",
          "139:         s->decoded[chan] += s->nwrap;",
          "",
          "[Added Lines]",
          "134:         tmp_ptr = av_realloc(s->decoded_base[chan], (s->blocksize + s->nwrap) *",
          "135:                              sizeof(s->decoded_base[0][0]));",
          "138:         s->decoded_base[chan] = tmp_ptr;",
          "140:             s->decoded_base[chan][i] = 0;",
          "141:         s->decoded[chan] = s->decoded_base[chan] + s->nwrap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "542:     int i;",
          "544:     for (i = 0; i < s->channels; i++) {",
          "547:         av_freep(&s->offset[i]);",
          "548:     }",
          "549:     av_freep(&s->bitstream);",
          "",
          "[Removed Lines]",
          "545:         s->decoded[i] -= s->nwrap;",
          "546:         av_freep(&s->decoded[i]);",
          "",
          "[Added Lines]",
          "547:         s->decoded[i] = NULL;",
          "548:         av_freep(&s->decoded_base[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e5e2c2d010c05c10337e9c1ec9d0d61495e0c9c",
      "candidate_info": {
        "commit_hash": "9e5e2c2d010c05c10337e9c1ec9d0d61495e0c9c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/9e5e2c2d010c05c10337e9c1ec9d0d61495e0c9c",
        "files": [
          "libavcodec/shorten.c"
        ],
        "message": "shorten: check for realloc failure",
        "before_after_code_files": [
          "libavcodec/shorten.c||libavcodec/shorten.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ],
          "candidate": [
            "libavcodec/shorten.c||libavcodec/shorten.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/shorten.c||libavcodec/shorten.c": [
          "File: libavcodec/shorten.c -> libavcodec/shorten.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: {",
          "117:     int i, chan;",
          "118:     int *coeffs;",
          "120:     for (chan=0; chan<s->channels; chan++) {",
          "121:         if(FFMAX(1, s->nmean) >= UINT_MAX/sizeof(int32_t)){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     void *tmp_ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:             return -1;",
          "128:         }",
          "133:         for (i=0; i<s->nwrap; i++)",
          "134:             s->decoded[chan][i] = 0;",
          "135:         s->decoded[chan] += s->nwrap;",
          "",
          "[Removed Lines]",
          "130:         s->offset[chan] = av_realloc(s->offset[chan], sizeof(int32_t)*FFMAX(1, s->nmean));",
          "132:         s->decoded[chan] = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "",
          "[Added Lines]",
          "131:         tmp_ptr = av_realloc(s->offset[chan], sizeof(int32_t)*FFMAX(1, s->nmean));",
          "132:         if (!tmp_ptr)",
          "133:             return AVERROR(ENOMEM);",
          "134:         s->offset[chan] = tmp_ptr;",
          "136:         tmp_ptr = av_realloc(s->decoded[chan], sizeof(int32_t)*(s->blocksize + s->nwrap));",
          "137:         if (!tmp_ptr)",
          "138:             return AVERROR(ENOMEM);",
          "139:         s->decoded[chan] = tmp_ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:     int i, input_buf_size = 0;",
          "377:     int16_t *samples = data;",
          "378:     if(s->max_framesize == 0){",
          "379:         s->max_framesize= 1024; // should hopefully be enough for the first header",
          "381:     }",
          "383:     if(1 && s->max_framesize){//FIXME truncated",
          "",
          "[Removed Lines]",
          "380:         s->bitstream= av_fast_realloc(s->bitstream, &s->allocated_bitstream_size, s->max_framesize);",
          "",
          "[Added Lines]",
          "386:         void *tmp_ptr;",
          "388:         tmp_ptr = av_fast_realloc(s->bitstream, &s->allocated_bitstream_size,",
          "389:                                   s->max_framesize);",
          "390:         if (!tmp_ptr) {",
          "391:             av_log(avctx, AV_LOG_ERROR, \"error allocating bitstream buffer\\n\");",
          "392:             return AVERROR(ENOMEM);",
          "393:         }",
          "394:         s->bitstream = tmp_ptr;",
          "",
          "---------------"
        ]
      }
    }
  ]
}