{
  "cve_id": "CVE-2016-3722",
  "cve_desc": "Jenkins before 2.3 and LTS before 1.651.2 allow remote authenticated users with multiple accounts to cause a denial of service (unable to login) by editing the \"full name.\"",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "d1d1ab152bfd67a2a737d7b530eb011982157f83",
  "patch_info": {
    "commit_hash": "d1d1ab152bfd67a2a737d7b530eb011982157f83",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/d1d1ab152bfd67a2a737d7b530eb011982157f83",
    "files": [
      "core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
      "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java"
    ],
    "message": "[SECURITY-243] APIToken auth needs to create the user.\n\nIn the case the user is valid but not saved the user need to be created.\nThis catches the case where the user has not saved anything and is using\ntheir default API token.",
    "before_after_code_files": [
      "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
      "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java": [
      "File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java -> core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:         }",
      "137:         {// attempt to authenticate as API token",
      "149:                 }",
      "150:             }",
      "151:         }",
      "",
      "[Removed Lines]",
      "138:             User u = User.getById(username, false);",
      "139:             if (u != null) {",
      "140:                 ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "141:                 if (t!=null && t.matchesPassword(password)) {",
      "142:                     SecurityContextHolder.getContext().setAuthentication(u.impersonate());",
      "143:                     try {",
      "144:                         chain.doFilter(request,response);",
      "145:                     } finally {",
      "146:                         SecurityContextHolder.clearContext();",
      "147:                     }",
      "148:                     return;",
      "",
      "[Added Lines]",
      "140:             User u = User.getById(username, true);",
      "141:             ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "142:             if (t!=null && t.matchesPassword(password)) {",
      "143:                 SecurityContextHolder.getContext().setAuthentication(u.impersonate());",
      "144:                 try {",
      "145:                     chain.doFilter(request,response);",
      "146:                 } finally {",
      "147:                     SecurityContextHolder.clearContext();",
      "149:                 return;",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java": [
      "File: core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:     @Override",
      "25:     public Authentication authenticate(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws ServletException {",
      "41:             }",
      "42:         }",
      "43:         return null;",
      "",
      "[Removed Lines]",
      "27:         User u = User.getById(username, false);",
      "28:         if (u != null) {",
      "29:             ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "30:             if (t!=null && t.matchesPassword(password)) {",
      "31:                 try {",
      "32:                     return u.impersonate();",
      "33:                 } catch (UsernameNotFoundException x) {",
      "36:                     LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
      "37:                     throw new ServletException(x);",
      "38:                 } catch (DataAccessException x) {",
      "39:                     throw new ServletException(x);",
      "40:                 }",
      "",
      "[Added Lines]",
      "27:         User u = User.getById(username, true);",
      "28:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "29:         if (t!=null && t.matchesPassword(password)) {",
      "30:             try {",
      "31:                 return u.impersonate();",
      "32:             } catch (UsernameNotFoundException x) {",
      "35:                 LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
      "36:                 throw new ServletException(x);",
      "37:             } catch (DataAccessException x) {",
      "38:                 throw new ServletException(x);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49d10a9034b280b5e59535519c3f0d12d96c9f2d",
      "candidate_info": {
        "commit_hash": "49d10a9034b280b5e59535519c3f0d12d96c9f2d",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/49d10a9034b280b5e59535519c3f0d12d96c9f2d",
        "files": [
          "core/src/main/java/hudson/model/User.java",
          "core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
          "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java",
          "core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java",
          "test/src/test/java/hudson/model/UserTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java"
        ],
        "message": "[SECURITY-243] introduce a new API to get a user by their id.\n\nIntroduce a new API User.getById that will only ever get a user by their\nID as suggested by @jglick (adapted from the original suggestion).",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java",
          "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
          "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java||core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java||core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java",
          "core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java||core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java",
          "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
            "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
            "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/User.java||core/src/main/java/hudson/model/User.java": [
          "File: core/src/main/java/hudson/model/User.java -> core/src/main/java/hudson/model/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:     public static @Nonnull User getUnknown() {",
          "348:     }",
          "",
          "[Removed Lines]",
          "347:         return get(UKNOWN_USERNAME);",
          "",
          "[Added Lines]",
          "347:         return getById(UKNOWN_USERNAME, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:         String id = a.getName();",
          "508:     }",
          "510:     private static volatile long lastScanned;",
          "",
          "[Removed Lines]",
          "507:         return getOrCreate(id, id, true);",
          "",
          "[Added Lines]",
          "508:         return getById(id, true);",
          "509:     }",
          "523:     public static @Nullable User getById(String id, boolean create) {",
          "524:         return getOrCreate(id, id, create);",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/BasicAuthenticationFilter.java||core/src/main/java/hudson/security/BasicAuthenticationFilter.java": [
          "File: core/src/main/java/hudson/security/BasicAuthenticationFilter.java -> core/src/main/java/hudson/security/BasicAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         }",
          "137:         {// attempt to authenticate as API token",
          "146:                 }",
          "148:             }",
          "149:         }",
          "",
          "[Removed Lines]",
          "138:             User u = User.get(username);",
          "139:             ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "140:             if (t!=null && t.matchesPassword(password)) {",
          "141:                 SecurityContextHolder.getContext().setAuthentication(u.impersonate());",
          "142:                 try {",
          "143:                     chain.doFilter(request,response);",
          "144:                 } finally {",
          "145:                     SecurityContextHolder.clearContext();",
          "147:                 return;",
          "",
          "[Added Lines]",
          "138:             User u = User.getById(username, false);",
          "139:             if (u != null) {",
          "140:                 ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "141:                 if (t!=null && t.matchesPassword(password)) {",
          "142:                     SecurityContextHolder.getContext().setAuthentication(u.impersonate());",
          "143:                     try {",
          "144:                         chain.doFilter(request,response);",
          "145:                     } finally {",
          "146:                         SecurityContextHolder.clearContext();",
          "147:                     }",
          "148:                     return;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java||core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java": [
          "File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java -> core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     @Override",
          "171:     public Details loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {",
          "173:         Details p = u!=null ? u.getProperty(Details.class) : null;",
          "174:         if(p==null)",
          "175:             throw new UsernameNotFoundException(\"Password is not set: \"+username);",
          "",
          "[Removed Lines]",
          "172:         User u = User.get(username,false);",
          "",
          "[Added Lines]",
          "172:         User u = User.getById(username, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:         if(si.username==null || si.username.length()==0)",
          "325:             si.errorMessage = Messages.HudsonPrivateSecurityRealm_CreateAccount_UserNameRequired();",
          "326:         else {",
          "328:             if (null != user)",
          "330:                 if (user.getProperty(Details.class) != null)",
          "",
          "[Removed Lines]",
          "327:             User user = User.get(si.username, false);",
          "",
          "[Added Lines]",
          "327:             User user = User.get(si.username, false); // TODO why false? use getById?",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "375:     public User createAccount(String userName, String password) throws IOException {",
          "377:         user.addProperty(Details.fromPlainPassword(password));",
          "378:         return user;",
          "379:     }",
          "",
          "[Removed Lines]",
          "376:         User user = User.get(userName);",
          "",
          "[Added Lines]",
          "376:         User user = User.getById(userName, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "418:     public User getUser(String id) {",
          "420:     }",
          "",
          "[Removed Lines]",
          "419:         return User.get(id);",
          "",
          "[Added Lines]",
          "419:         return User.getById(id, true);",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java||core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java": [
          "File: core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java -> core/src/main/java/jenkins/security/BasicHeaderApiTokenAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     @Override",
          "25:     public Authentication authenticate(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws ServletException {",
          "39:             }",
          "40:         }",
          "42:         return null;",
          "43:     }",
          "",
          "[Removed Lines]",
          "27:         User u = User.get(username);",
          "28:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "29:         if (t!=null && t.matchesPassword(password)) {",
          "30:             try {",
          "31:                 return u.impersonate();",
          "32:             } catch (UsernameNotFoundException x) {",
          "35:                 LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
          "36:                 throw new ServletException(x);",
          "37:             } catch (DataAccessException x) {",
          "38:                 throw new ServletException(x);",
          "",
          "[Added Lines]",
          "27:         User u = User.getById(username, false);",
          "28:         if (u != null) {",
          "29:             ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "30:             if (t!=null && t.matchesPassword(password)) {",
          "31:                 try {",
          "32:                     return u.impersonate();",
          "33:                 } catch (UsernameNotFoundException x) {",
          "36:                     LOGGER.log(WARNING, \"API token matched for user \"+username+\" but the impersonation failed\",x);",
          "37:                     throw new ServletException(x);",
          "38:                 } catch (DataAccessException x) {",
          "39:                     throw new ServletException(x);",
          "40:                 }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java||core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java": [
          "File: core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java -> core/src/main/java/jenkins/security/ImpersonatingUserDetailsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     protected UserDetails attemptToImpersonate(String username, RuntimeException e) {",
          "43:         if (u!=null) {",
          "44:             LastGrantedAuthoritiesProperty p = u.getProperty(LastGrantedAuthoritiesProperty.class);",
          "45:             if (p!=null)",
          "",
          "[Removed Lines]",
          "42:         User u = User.get(username, false, emptyMap());",
          "",
          "[Added Lines]",
          "42:         User u = User.get(username, false, emptyMap()); // TODO why false? use getById?",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java||core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java": [
          "File: core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java -> core/src/main/java/jenkins/security/LastGrantedAuthoritiesProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         @Override",
          "101:         protected void loggedIn(@Nonnull String username) {",
          "102:             try {",
          "104:                 LastGrantedAuthoritiesProperty o = u.getProperty(LastGrantedAuthoritiesProperty.class);",
          "105:                 if (o==null)",
          "106:                     u.addProperty(o=new LastGrantedAuthoritiesProperty());",
          "",
          "[Removed Lines]",
          "103:                 User u = User.get(username);",
          "",
          "[Added Lines]",
          "105:                 User u = User.getById(username, true);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/UserTest.java||test/src/test/java/hudson/model/UserTest.java": [
          "File: test/src/test/java/hudson/model/UserTest.java -> test/src/test/java/hudson/model/UserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         assertEquals(\"'user2' should resolve to u2\", u2.getId(), u.getId());",
          "585:     }",
          "587:      public static class SomeUserProperty extends UserProperty {",
          "589:         @TestExtension",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:     @Test",
          "588:     public void resolveById() throws Exception {",
          "589:         User u1 = User.get(\"user1\");",
          "590:         u1.setFullName(\"User One\");",
          "591:         u1.save();",
          "593:         User u2 = User.get(\"user2\");",
          "594:         u2.setFullName(\"User Two\");",
          "595:         u2.save();",
          "597:         assertNotSame(\"Users should not have the same id.\", u1.getId(), u2.getId());",
          "600:         User u = User.getById(\"user1\", false);",
          "601:         assertSame(\"'user1' should return u1\", u1, u);",
          "604:         u = User.getById(\"user1\", true);",
          "605:         assertSame(\"'user1' should return u1\", u1, u);",
          "608:         u = User.getById(\"User One\", false);",
          "609:         assertNull(\"'User One' should not resolve to any user\", u);",
          "612:         u = User.getById(\"user2\", false);",
          "613:         assertSame(\"'user2' should return u2\", u2, u);",
          "616:         u = User.getById(\"user2\", true);",
          "617:         assertSame(\"'user2' should return u1\", u2, u);",
          "620:         u = User.getById(\"User Two\", false);",
          "621:         assertNull(\"'User Two' should not resolve to any user\", u);",
          "623:         u1.setFullName(\"user1\");",
          "624:         u1.save();",
          "625:         u2.setFullName(\"user1\");",
          "626:         u2.save();",
          "627:         u = User.getById(\"user1\", false);",
          "628:         assertSame(\"'user1' should resolve to u1\", u1, u);",
          "629:         u = User.getById(\"user2\", false);",
          "630:         assertSame(\"'user2' should resolve to u2\", u2, u);",
          "631:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java": [
          "File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java -> test/src/test/java/hudson/security/HudsonPrivateSecurityRealmTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import static org.junit.Assert.assertFalse;",
          "7: import static org.junit.Assert.assertTrue;",
          "8: import static org.junit.Assert.assertThat;",
          "10: import static org.hamcrest.Matchers.is;",
          "13: import static org.hamcrest.xml.HasXPath.hasXPath;",
          "15: import java.io.UnsupportedEncodingException;",
          "27: import org.junit.Rule;",
          "28: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "9: import static org.hamcrest.Matchers.containsString;",
          "11: import static org.hamcrest.Matchers.not;",
          "12: import static org.hamcrest.Matchers.nullValue;",
          "16: import java.util.regex.Pattern;",
          "18: import org.apache.commons.httpclient.Credentials;",
          "19: import org.apache.commons.httpclient.auth.AuthScheme;",
          "20: import org.apache.commons.httpclient.auth.CredentialsNotAvailableException;",
          "21: import org.apache.commons.httpclient.auth.CredentialsProvider;",
          "22: import org.hamcrest.Description;",
          "23: import org.hamcrest.TypeSafeDiagnosingMatcher;",
          "24: import org.apache.commons.httpclient.UsernamePasswordCredentials;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}