{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8085d53d3c5f853c592cb2ffdb7e49a219c962be",
      "candidate_info": {
        "commit_hash": "8085d53d3c5f853c592cb2ffdb7e49a219c962be",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8085d53d3c5f853c592cb2ffdb7e49a219c962be",
        "files": [
          "ext/expert/expert1.test",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "src/window.c",
          "test/minmax4.test",
          "test/nulls1.test",
          "test/pg_common.tcl",
          "test/window7.test",
          "test/window8.tcl",
          "test/window8.test",
          "tool/mkkeywordhash.c"
        ],
        "message": "Add support for \"ORDER BY ... NULLS FIRST\" and \"ORDER BY ... NULLS LAST\". Use this to fix ticket [f8a7060e].\n\nFossilOrigin-Name: 94085fb3e756bc984237b74b6e29c68462ad860870c64dcb5124feaeec387660",
        "before_after_code_files": [
          "ext/expert/expert1.test||ext/expert/expert1.test",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c",
          "test/minmax4.test||test/minmax4.test",
          "test/nulls1.test||test/nulls1.test",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window7.test||test/window7.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/expert1.test||ext/expert/expert1.test": [
          "File: ext/expert/expert1.test -> ext/expert/expert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   SEARCH TABLE t1 USING COVERING INDEX t1_idx_000123a7 (a=?)",
          "135: }",
          "137: do_setup_rec_test $tn.6 {",
          "138:   CREATE TABLE t1(a, b, c);",
          "139: } {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: if 0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   CREATE INDEX t1_idx_00000061 ON t1(a);",
          "143:   SEARCH TABLE t1 USING COVERING INDEX t1_idx_00000061",
          "144: }",
          "146: do_setup_rec_test $tn.7 {",
          "147:   CREATE TABLE t1(a, b, c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 336235db2b1167cdb2feb64b47eb6368c97c43ee9641b7bfccc5775a41dd0d0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:     pTab->keyConf = (u8)onError;",
          "1444:     assert( autoInc==0 || autoInc==1 );",
          "1445:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1447:   }else if( autoInc ){",
          "1448: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1449:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortOrder;",
          "",
          "[Added Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1894:     if( IN_RENAME_OBJECT ){",
          "1895:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1896:     }",
          "1898:     assert( pParse->pNewTable==pTab );",
          "1899:     pTab->iPKey = -1;",
          "1900:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "1897:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "",
          "[Added Lines]",
          "1897:     pList->a[0].sortFlags = pParse->iPkSortOrder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3153:   return p;",
          "3154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161: int sqlite3HasExplicitNulls(Parse *pParse, ExprList *pList){",
          "3162:   if( pList ){",
          "3163:     int i;",
          "3164:     for(i=0; i<pList->nExpr; i++){",
          "3165:       if( pList->a[i].bNulls ){",
          "3166:         u8 sf = pList->a[i].sortFlags;",
          "3167:         sqlite3ErrorMsg(pParse, \"unsupported use of NULLS %s\",",
          "3168:             (sf==0 || sf==3) ? \"FIRST\" : \"LAST\"",
          "3169:         );",
          "3170:         return 1;",
          "3171:       }",
          "3172:     }",
          "3173:   }",
          "3174:   return 0;",
          "3175: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3204:   if( SQLITE_OK!=sqlite3ReadSchema(pParse) ){",
          "3205:     goto exit_create_index;",
          "3206:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3228:   if( sqlite3HasExplicitNulls(pParse, pList) ){",
          "3229:     goto exit_create_index;",
          "3230:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3368:               sqlite3ExprAlloc(db, TK_ID, &prevCol, 0));",
          "3369:     if( pList==0 ) goto exit_create_index;",
          "3370:     assert( pList->nExpr==1 );",
          "3372:   }else{",
          "3373:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3374:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "",
          "[Added Lines]",
          "3395:     sqlite3ExprListSetSortOrder(pList, sortOrder, SQLITE_SO_UNDEFINED);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3486:       goto exit_create_index;",
          "3487:     }",
          "3488:     pIndex->azColl[i] = zColl;",
          "3490:     pIndex->aSortOrder[i] = (u8)requestedSortOrder;",
          "3491:   }",
          "",
          "[Removed Lines]",
          "3489:     requestedSortOrder = pListItem->sortOrder & sortOrderMask;",
          "",
          "[Added Lines]",
          "3513:     requestedSortOrder = pListItem->sortFlags & sortOrderMask;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4704:       const char *zColl = pIdx->azColl[i];",
          "4705:       pKey->aColl[i] = zColl==sqlite3StrBINARY ? 0 :",
          "4706:                         sqlite3LocateCollSeq(pParse, zColl);",
          "4708:     }",
          "4709:     if( pParse->nErr ){",
          "4710:       assert( pParse->rc==SQLITE_ERROR_MISSING_COLLSEQ );",
          "",
          "[Removed Lines]",
          "4707:       pKey->aSortOrder[i] = pIdx->aSortOrder[i];",
          "",
          "[Added Lines]",
          "4731:       pKey->aSortFlags[i] = pIdx->aSortOrder[i];",
          "4732:       assert( 0==(pKey->aSortFlags[i] & KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409:     }",
          "1410:     pItem->zName = sqlite3DbStrDup(db, pOldItem->zName);",
          "1411:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1413:     pItem->done = 0;",
          "1414:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "1415:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "1416:     pItem->u = pOldItem->u;",
          "",
          "[Removed Lines]",
          "1412:     pItem->sortOrder = pOldItem->sortOrder;",
          "",
          "[Added Lines]",
          "1412:     pItem->sortFlags = pOldItem->sortFlags;",
          "1414:     pItem->bNulls = pOldItem->bNulls;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1670:   if( p==0 ) return;",
          "1672:   assert( p->nExpr>0 );",
          "1676:   }",
          "1678: }",
          "",
          "[Removed Lines]",
          "1669: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){",
          "1671:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC>=0 && SQLITE_SO_DESC>0 );",
          "1673:   if( iSortOrder<0 ){",
          "1674:     assert( p->a[p->nExpr-1].sortOrder==SQLITE_SO_ASC );",
          "1675:     return;",
          "1677:   p->a[p->nExpr-1].sortOrder = (u8)iSortOrder;",
          "",
          "[Added Lines]",
          "1670: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1671:   struct ExprList_item *pItem;",
          "1675:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC==0 && SQLITE_SO_DESC>0 );",
          "1676:   assert( iSortOrder==SQLITE_SO_UNDEFINED",
          "1677:        || iSortOrder==SQLITE_SO_ASC",
          "1678:        || iSortOrder==SQLITE_SO_DESC",
          "1679:   );",
          "1680:   assert( eNulls==SQLITE_SO_UNDEFINED",
          "1681:        || eNulls==SQLITE_SO_ASC",
          "1682:        || eNulls==SQLITE_SO_DESC",
          "1683:   );",
          "1685:   pItem = &p->a[p->nExpr-1];",
          "1686:   assert( pItem->bNulls==0 );",
          "1687:   if( iSortOrder==SQLITE_SO_UNDEFINED ){",
          "1688:     iSortOrder = SQLITE_SO_ASC;",
          "1689:   }",
          "1690:   pItem->sortFlags = (u8)iSortOrder;",
          "1692:   if( eNulls!=SQLITE_SO_UNDEFINED ){",
          "1693:     pItem->bNulls = 1;",
          "1694:     if( iSortOrder!=eNulls ){",
          "1695:       pItem->sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "1696:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4935:   for(i=0; i<pA->nExpr; i++){",
          "4936:     Expr *pExprA = pA->a[i].pExpr;",
          "4937:     Expr *pExprB = pB->a[i].pExpr;",
          "4939:     if( sqlite3ExprCompare(0, pExprA, pExprB, iTab) ) return 1;",
          "4940:   }",
          "4941:   return 0;",
          "",
          "[Removed Lines]",
          "4938:     if( pA->a[i].sortOrder!=pB->a[i].sortOrder ) return 1;",
          "",
          "[Added Lines]",
          "4958:     if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:               pTab->zName);",
          "834:       goto insert_cleanup;",
          "835:     }",
          "836:     pTabList->a[0].iCursor = iDataCur;",
          "837:     pUpsert->pUpsertSrc = pTabList;",
          "838:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "837:       goto insert_cleanup;",
          "838:     }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   IGNORE IMMEDIATE INITIALLY INSTEAD LIKE_KW MATCH NO PLAN",
          "212:   QUERY KEY OF OFFSET PRAGMA RAISE RECURSIVE RELEASE REPLACE RESTRICT ROW ROWS",
          "213:   ROLLBACK SAVEPOINT TEMP TRIGGER VACUUM VIEW VIRTUAL WITH WITHOUT",
          "214: %ifdef SQLITE_OMIT_COMPOUND_SELECT",
          "215:   EXCEPT INTERSECT UNION",
          "216: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   NULLS FIRST LAST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: orderby_opt(A) ::= .                          {A = 0;}",
          "783: orderby_opt(A) ::= ORDER BY sortlist(X).      {A = X;}",
          "785:   A = sqlite3ExprListAppend(pParse,A,Y);",
          "787: }",
          "791: }",
          "793: %type sortorder {int}",
          "",
          "[Removed Lines]",
          "784: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z). {",
          "786:   sqlite3ExprListSetSortOrder(A,Z);",
          "788: sortlist(A) ::= expr(Y) sortorder(Z). {",
          "790:   sqlite3ExprListSetSortOrder(A,Z);",
          "",
          "[Added Lines]",
          "785: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z) nulls(X). {",
          "787:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "789: sortlist(A) ::= expr(Y) sortorder(Z) nulls(X). {",
          "791:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: sortorder(A) ::= DESC.          {A = SQLITE_SO_DESC;}",
          "797: sortorder(A) ::= .              {A = SQLITE_SO_UNDEFINED;}",
          "799: %type groupby_opt {ExprList*}",
          "800: %destructor groupby_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "801: groupby_opt(A) ::= .                      {A = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: %type nulls {int}",
          "801: nulls(A) ::= NULLS FIRST.       {A = SQLITE_SO_ASC;}",
          "802: nulls(A) ::= NULLS LAST.        {A = SQLITE_SO_DESC;}",
          "803: nulls(A) ::= .                  {A = SQLITE_SO_UNDEFINED;}",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);",
          "1276:   KeyInfo *p = sqlite3DbMallocRawNN(db, sizeof(KeyInfo) + nExtra);",
          "1277:   if( p ){",
          "1279:     p->nKeyField = (u16)N;",
          "1280:     p->nAllField = (u16)(N+X);",
          "1281:     p->enc = ENC(db);",
          "",
          "[Removed Lines]",
          "1278:     p->aSortOrder = (u8*)&p->aColl[N+X];",
          "",
          "[Added Lines]",
          "1278:     p->aSortFlags = (u8*)&p->aColl[N+X];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:     assert( sqlite3KeyInfoIsWriteable(pInfo) );",
          "1353:     for(i=iStart, pItem=pList->a+iStart; i<nExpr; i++, pItem++){",
          "1354:       pInfo->aColl[i-iStart] = sqlite3ExprNNCollSeq(pParse, pItem->pExpr);",
          "1356:     }",
          "1357:   }",
          "1358:   return pInfo;",
          "",
          "[Removed Lines]",
          "1355:       pInfo->aSortOrder[i-iStart] = pItem->sortOrder;",
          "",
          "[Added Lines]",
          "1355:       pInfo->aSortFlags[i-iStart] = pItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2253:       }",
          "2254:       assert( sqlite3KeyInfoIsWriteable(pRet) );",
          "2255:       pRet->aColl[i] = pColl;",
          "2257:     }",
          "2258:   }",
          "",
          "[Removed Lines]",
          "2256:       pRet->aSortOrder[i] = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "2256:       pRet->aSortFlags[i] = pOrderBy->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3228:       assert( sqlite3KeyInfoIsWriteable(pKeyDup) );",
          "3229:       for(i=0; i<nExpr; i++){",
          "3230:         pKeyDup->aColl[i] = multiSelectCollSeq(pParse, p, i);",
          "3232:       }",
          "3233:     }",
          "3234:   }",
          "",
          "[Removed Lines]",
          "3231:         pKeyDup->aSortOrder[i] = 0;",
          "",
          "[Added Lines]",
          "3231:         pKeyDup->aSortFlags[i] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4404:   ExprList *pOrderBy;",
          "4407:   assert( *ppMinMax==0 );",
          "4408:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "",
          "[Removed Lines]",
          "4405:   u8 sortOrder;",
          "",
          "[Added Lines]",
          "4405:   u8 sortFlags;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4413:   zFunc = pFunc->u.zToken;",
          "4414:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4415:     eRet = WHERE_ORDERBY_MIN;",
          "4417:   }else if( sqlite3StrICmp(zFunc, \"max\")==0 ){",
          "4418:     eRet = WHERE_ORDERBY_MAX;",
          "4420:   }else{",
          "4421:     return eRet;",
          "4422:   }",
          "4424:   assert( pOrderBy!=0 || db->mallocFailed );",
          "4426:   return eRet;",
          "4427: }",
          "",
          "[Removed Lines]",
          "4416:     sortOrder = SQLITE_SO_ASC;",
          "4419:     sortOrder = SQLITE_SO_DESC;",
          "4425:   if( pOrderBy ) pOrderBy->a[0].sortOrder = sortOrder;",
          "",
          "[Added Lines]",
          "4416:     sortFlags = KEYINFO_ORDER_BIGNULL;",
          "4419:     sortFlags = KEYINFO_ORDER_DESC;",
          "4425:   if( pOrderBy ) pOrderBy->a[0].sortFlags = sortFlags;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2143: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2145: #define KEYINFO_ORDER_DESC    0x01",
          "2146: #define KEYINFO_ORDER_BIGNULL 0x02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3888: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "3889: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3890: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3892: void sqlite3ExprListSetName(Parse*,ExprList*,Token*,int);",
          "3893: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3894: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "",
          "[Removed Lines]",
          "3891: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Added Lines]",
          "3895: void sqlite3ExprListSetSortOrder(ExprList*,int,int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4365: KeyInfo *sqlite3KeyInfoRef(KeyInfo*);",
          "4366: KeyInfo *sqlite3KeyInfoOfIndex(Parse*, Index*);",
          "4367: KeyInfo *sqlite3KeyInfoFromExprList(Parse*, ExprList*, int, int);",
          "4369: #ifdef SQLITE_DEBUG",
          "4370: int sqlite3KeyInfoIsWriteable(KeyInfo*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4372: int sqlite3HasExplicitNulls(Parse*, ExprList*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     pTriggerStep->pIdList = pColumn;",
          "464:     pTriggerStep->pUpsert = pUpsert;",
          "465:     pTriggerStep->orconf = orconf;",
          "466:   }else{",
          "467:     testcase( pColumn );",
          "468:     sqlite3IdListDelete(db, pColumn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if( pUpsert ){",
          "467:       sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget);",
          "468:     }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:     REGISTER_TRACE(p2+idx, &aMem[p2+idx]);",
          "2228:     assert( i<pKeyInfo->nKeyField );",
          "2229:     pColl = pKeyInfo->aColl[i];",
          "2231:     iCompare = sqlite3MemCompare(&aMem[p1+idx], &aMem[p2+idx], pColl);",
          "2232:     if( iCompare ){",
          "2233:       if( bRev ) iCompare = -iCompare;",
          "2234:       break;",
          "2235:     }",
          "",
          "[Removed Lines]",
          "2230:     bRev = pKeyInfo->aSortOrder[i];",
          "",
          "[Added Lines]",
          "2230:     bRev = (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC);",
          "2233:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "2234:        && ((aMem[p1+idx].flags & MEM_Null) || (aMem[p2+idx].flags & MEM_Null))",
          "2235:       ){",
          "2236:         iCompare = -iCompare;",
          "2237:       }",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:     case P4_KEYINFO: {",
          "1494:       int j;",
          "1495:       KeyInfo *pKeyInfo = pOp->p4.pKeyInfo;",
          "1497:       sqlite3_str_appendf(&x, \"k(%d\", pKeyInfo->nKeyField);",
          "1498:       for(j=0; j<pKeyInfo->nKeyField; j++){",
          "1499:         CollSeq *pColl = pKeyInfo->aColl[j];",
          "1500:         const char *zColl = pColl ? pColl->zName : \"\";",
          "1501:         if( strcmp(zColl, \"BINARY\")==0 ) zColl = \"B\";",
          "1504:       }",
          "1505:       sqlite3_str_append(&x, \")\", 1);",
          "1506:       break;",
          "",
          "[Removed Lines]",
          "1496:       assert( pKeyInfo->aSortOrder!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s\",",
          "1503:                pKeyInfo->aSortOrder[j] ? \"-\" : \"\", zColl);",
          "",
          "[Added Lines]",
          "1496:       assert( pKeyInfo->aSortFlags!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s%s\",",
          "1503:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_DESC) ? \"-\" : \"\",",
          "1504:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_BIGNULL)? \"N.\" : \"\",",
          "1505:                zColl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3813:   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);",
          "3814:   if( !p ) return 0;",
          "3815:   p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];",
          "3817:   p->pKeyInfo = pKeyInfo;",
          "3818:   p->nField = pKeyInfo->nKeyField + 1;",
          "3819:   return p;",
          "",
          "[Removed Lines]",
          "3816:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3818:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3912:   if( szHdr1>98307 ) return SQLITE_CORRUPT;",
          "3913:   d1 = szHdr1;",
          "3914:   assert( pKeyInfo->nAllField>=pPKey2->nField || CORRUPT_DB );",
          "3916:   assert( pKeyInfo->nKeyField>0 );",
          "3917:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "3918:   do{",
          "",
          "[Removed Lines]",
          "3915:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3917:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3943:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "3944:     if( rc!=0 ){",
          "3948:       }",
          "3949:       goto debugCompareEnd;",
          "",
          "[Removed Lines]",
          "3946:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Added Lines]",
          "3948:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "3949:        && ((mem1.flags & MEM_Null) || (pPKey2->aMem[i].flags & MEM_Null))",
          "3950:       ){",
          "3951:         rc = -rc;",
          "3952:       }",
          "3953:       if( pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4320:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "4321:        || CORRUPT_DB );",
          "4323:   assert( pPKey2->pKeyInfo->nKeyField>0 );",
          "4324:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "4325:   do{",
          "",
          "[Removed Lines]",
          "4322:   assert( pPKey2->pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "4329:   assert( pPKey2->pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4442:     }",
          "4444:     if( rc!=0 ){",
          "4447:       }",
          "4448:       assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );",
          "",
          "[Removed Lines]",
          "4445:       if( pPKey2->pKeyInfo->aSortOrder[i] ){",
          "4446:         rc = -rc;",
          "",
          "[Added Lines]",
          "4452:       int sortFlags = pPKey2->pKeyInfo->aSortFlags[i];",
          "4453:       if( sortFlags ){",
          "4454:         if( (sortFlags & KEYINFO_ORDER_BIGNULL)==0",
          "4455:          || ((sortFlags & KEYINFO_ORDER_DESC)",
          "4456:            !=(serial_type==0 || (pRhs->flags&MEM_Null)))",
          "4457:         ){",
          "4458:           rc = -rc;",
          "4459:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4661:   if( p->pKeyInfo->nAllField<=13 ){",
          "4662:     int flags = p->aMem[0].flags;",
          "4664:       p->r1 = 1;",
          "4665:       p->r2 = -1;",
          "4666:     }else{",
          "",
          "[Removed Lines]",
          "4663:     if( p->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "4676:     if( p->pKeyInfo->aSortFlags[0] ){",
          "4677:       if( p->pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL ){",
          "4678:         return sqlite3VdbeRecordCompare;",
          "4679:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5006:   preupdate.keyinfo.db = db;",
          "5007:   preupdate.keyinfo.enc = ENC(db);",
          "5008:   preupdate.keyinfo.nKeyField = pTab->nCol;",
          "5010:   preupdate.iKey1 = iKey1;",
          "5011:   preupdate.iKey2 = iKey2;",
          "5012:   preupdate.pTab = pTab;",
          "",
          "[Removed Lines]",
          "5009:   preupdate.keyinfo.aSortOrder = (u8*)&fakeSortOrder;",
          "",
          "[Added Lines]",
          "5025:   preupdate.keyinfo.aSortFlags = (u8*)&fakeSortOrder;",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:       );",
          "830:     }",
          "831:   }else{",
          "833:       res = res * -1;",
          "834:     }",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:     if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "832:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "833:     if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:           pTask, pbKey2Cached, pKey1, nKey1, pKey2, nKey2",
          "898:       );",
          "899:     }",
          "901:     res = res * -1;",
          "902:   }",
          "",
          "[Removed Lines]",
          "900:   }else if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "901:   }else if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "902:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     if( pKeyInfo->nAllField<13",
          "1014:      && (pKeyInfo->aColl[0]==0 || pKeyInfo->aColl[0]==db->pDfltColl)",
          "1015:     ){",
          "1016:       pSorter->typeMask = SORTER_TYPE_INTEGER | SORTER_TYPE_TEXT;",
          "1017:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1017:      && (pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL)==0",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:     for(i=0; i<n; i++){",
          "935:       Expr *pExpr = pOrderBy->a[i].pExpr;",
          "936:       if( pExpr->op!=TK_COLUMN || pExpr->iTable!=pSrc->iCursor ) break;",
          "937:     }",
          "938:     if( i==n){",
          "939:       nOrderBy = n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:       if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1032:   for(i=0; i<nOrderBy; i++){",
          "1033:     Expr *pExpr = pOrderBy->a[i].pExpr;",
          "1034:     pIdxOrderBy[i].iColumn = pExpr->iColumn;",
          "1036:   }",
          "",
          "[Removed Lines]",
          "1035:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "1036:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3805:         if( pIndex ){",
          "3806:           iColumn = pIndex->aiColumn[j];",
          "3808:           if( iColumn==pIndex->pTable->iPKey ) iColumn = XN_ROWID;",
          "3809:         }else{",
          "3810:           iColumn = XN_ROWID;",
          "",
          "[Removed Lines]",
          "3807:           revIdx = pIndex->aSortOrder[j];",
          "",
          "[Added Lines]",
          "3808:           revIdx = pIndex->aSortOrder[j] & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3858:           if( revSet ){",
          "3860:           }else{",
          "3862:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3863:             revSet = 1;",
          "3864:           }",
          "3865:         }",
          "3866:         if( isMatch ){",
          "3867:           if( iColumn==XN_ROWID ){",
          "3868:             testcase( distinctColumns==0 );",
          "3869:             distinctColumns = 1;",
          "3870:           }",
          "3871:           obSat |= MASKBIT(i);",
          "3875:         }else{",
          "3877:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "3859:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortOrder ) isMatch = 0;",
          "3861:             rev = revIdx ^ pOrderBy->a[i].sortOrder;",
          "3872:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3873:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3874:           }",
          "",
          "[Added Lines]",
          "3860:             if( (rev ^ revIdx)!=(pOrderBy->a[i].sortFlags&KEYINFO_ORDER_DESC) ){",
          "3861:               isMatch = 0;",
          "3862:             }",
          "3864:             rev = revIdx ^ (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC);",
          "3869:         if( isMatch && (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL) ){",
          "3870:           if( j==pLoop->u.btree.nEq ){",
          "3871:             pLoop->wsFlags |= WHERE_BIGNULL_SORT;",
          "3872:           }else{",
          "3873:             isMatch = 0;",
          "3874:           }",
          "3875:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5065:         sqlite3VdbeSetP4KeyInfo(pParse, pIx);",
          "5066:         if( (pLoop->wsFlags & WHERE_CONSTRAINT)!=0",
          "5067:          && (pLoop->wsFlags & (WHERE_COLUMN_RANGE|WHERE_SKIPSCAN))==0",
          "5068:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5069:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5070:         ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5075:          && (pLoop->wsFlags & WHERE_BIGNULL_SORT)==0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5206:       VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5207:       VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "5208:       VdbeCoverageIf(v, pLevel->op==OP_VNext);",
          "5209: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5210:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "5211: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5217:       if( pLevel->regBignull ){",
          "5218:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5219:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "5220:       }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1555:     pIdx = pLoop->u.btree.pIndex;",
          "1556:     iIdxCur = pLevel->iIdxCur;",
          "1557:     assert( nEq>=pLoop->nSkip );",
          "",
          "[Removed Lines]",
          "1567:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1568:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1569:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1570:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1571:       assert( pWInfo->nOBSat );",
          "1572:       assert( pIdx->nColumn>nEq );",
          "1573:       assert( pLoop->nSkip==0 );",
          "1574:       bSeekPastNull = 1;",
          "1575:       nExtraReg = 1;",
          "1576:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1615:     }",
          "1616:     assert( pRangeEnd==0 || (pRangeEnd->wtFlags & TERM_VNULL)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1606:     if( (pLoop->wsFlags & (WHERE_TOP_LIMIT|WHERE_BTM_LIMIT))==0",
          "1607:      && (pLoop->wsFlags & WHERE_BIGNULL_SORT)!=0",
          "1608:     ){",
          "1609:       assert( bSeekPastNull==0 && nExtraReg==0 && nBtm==0 && nTop==0 );",
          "1610:       assert( pRangeEnd==0 && pRangeStart==0 );",
          "1611:       assert( pLoop->nSkip==0 );",
          "1612:       nExtraReg = 1;",
          "1613:       bSeekPastNull = 1;",
          "1614:       pLevel->regBignull = regBignull = ++pParse->nMem;",
          "1615:       pLevel->addrBignull = sqlite3VdbeMakeLabel(pParse);",
          "1616:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1637:     if( zStartAff && nTop ){",
          "1638:       zEndAff = sqlite3DbStrDup(db, &zStartAff[nEq]);",
          "1639:     }",
          "1642:     testcase( pRangeStart && (pRangeStart->eOperator & WO_LE)!=0 );",
          "1643:     testcase( pRangeStart && (pRangeStart->eOperator & WO_GE)!=0 );",
          "",
          "[Removed Lines]",
          "1640:     addrNxt = pLevel->addrNxt;",
          "",
          "[Added Lines]",
          "1640:     addrNxt = (regBignull ? pLevel->addrBignull : pLevel->addrNxt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1671:       }",
          "1672:       bSeekPastNull = 0;",
          "1673:     }else if( bSeekPastNull ){",
          "1674:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1675:       nConstraint++;",
          "1677:       start_constraints = 1;",
          "1678:     }",
          "1679:     codeApplyAffinity(pParse, regBase, nConstraint - bSeekPastNull, zStartAff);",
          "1680:     if( pLoop->nSkip>0 && nConstraint==pLoop->nSkip ){",
          "",
          "[Removed Lines]",
          "1676:       startEq = 0;",
          "",
          "[Added Lines]",
          "1674:       startEq = 0;",
          "1676:       start_constraints = 1;",
          "1678:     }else if( regBignull ){",
          "1679:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1681:       nConstraint++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1685:       if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1686:         sqlite3VdbeAddOp1(v, OP_SeekHit, iIdxCur);",
          "1687:       }",
          "1688:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1689:       assert( op!=0 );",
          "1690:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1694:         VdbeComment((v, \"NULL-scan pass ctr\"));",
          "1695:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1697:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1708:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1713:         VdbeCoverage(v);",
          "1714:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1715:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1716:       }",
          "1717:     }",
          "",
          "[Removed Lines]",
          "1699:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1705:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1706:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1707:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1710:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1711:         assert( op==OP_SeekGE || op==OP_SeekLE );",
          "1712:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Added Lines]",
          "1708:       assert( bSeekPastNull==0 || bStopAtNull==0 );",
          "1709:       if( regBignull ){",
          "1710:         assert( bSeekPastNull==1 || bStopAtNull==1 );",
          "1711:         assert( bSeekPastNull==!bStopAtNull );",
          "1712:         assert( bStopAtNull==startEq );",
          "1714:         op = aStartOp[(nConstraint>1)*4 + 2 + bRev];",
          "1715:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1716:                              nConstraint-startEq);",
          "1718:         VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1719:         VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1722:         assert( op==OP_Rewind || op==OP_Last || op==OP_SeekGE || op==OP_SeekLE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1745:         endEq = 1;",
          "1746:       }",
          "1747:     }else if( bStopAtNull ){",
          "1750:       nConstraint++;",
          "1751:     }",
          "1752:     sqlite3DbFree(db, zStartAff);",
          "",
          "[Removed Lines]",
          "1748:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1749:       endEq = 0;",
          "",
          "[Added Lines]",
          "1755:       if( regBignull==0 ){",
          "1756:         sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1757:         endEq = 0;",
          "1758:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1759:     if( nConstraint ){",
          "1760:       op = aEndOp[bRev*2 + endEq];",
          "1761:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1762:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1769:       if( regBignull ){",
          "1771:         sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1772:         VdbeComment((v, \"If NULL-scan 2nd pass\"));",
          "1773:         VdbeCoverage(v);",
          "1774:       }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1764:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1765:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1766:     }",
          "1768:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1769:       sqlite3VdbeAddOp2(v, OP_SeekHit, iIdxCur, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1781:     }",
          "1782:     if( regBignull ){",
          "1785:       assert( bSeekPastNull==!bStopAtNull );",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1788:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1789:       VdbeComment((v, \"If NULL-scan 1st pass\"));",
          "1790:       VdbeCoverage(v);",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1793:                            nConstraint+bSeekPastNull);",
          "1794:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1795:       testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1797:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "889:       }",
          "890:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "892:     }",
          "893:   }",
          "894:   return pList;",
          "",
          "[Removed Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortOrder = pAppend->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1315:       pWin->regApp = pParse->nMem+1;",
          "1316:       pParse->nMem += 3;",
          "1317:       if( pKeyInfo && pWin->pFunc->zName[1]=='i' ){",
          "1320:       }",
          "1321:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pWin->csrApp, 2);",
          "1322:       sqlite3VdbeAppendP4(v, pKeyInfo, P4_KEYINFO);",
          "",
          "[Removed Lines]",
          "1318:         assert( pKeyInfo->aSortOrder[0]==0 );",
          "1319:         pKeyInfo->aSortOrder[0] = 1;",
          "",
          "[Added Lines]",
          "1318:         assert( pKeyInfo->aSortFlags[0]==0 );",
          "1319:         pKeyInfo->aSortFlags[0] = KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1876:   int reg2 = sqlite3GetTempReg(pParse);",
          "1877:   int arith = OP_Add;",
          "1878:   int addrGe;",
          "1880:   int regString = ++pParse->nMem;",
          "1882:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1885:     switch( op ){",
          "1886:       case OP_Ge: op = OP_Le; break;",
          "1887:       case OP_Gt: op = OP_Lt; break;",
          "",
          "[Removed Lines]",
          "1883:   assert( p->pMWin->pOrderBy && p->pMWin->pOrderBy->nExpr==1 );",
          "1884:   if( p->pMWin->pOrderBy->a[0].sortOrder ){",
          "",
          "[Added Lines]",
          "1879:   ExprList *pOrderBy = p->pMWin->pOrderBy;",
          "1884:   assert( pOrderBy && pOrderBy->nExpr==1 );",
          "1885:   if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_DESC ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1901:   VdbeCoverage(v);",
          "1902:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1903:   sqlite3VdbeJumpHere(v, addrGe);",
          "1904:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1905:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1906:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1905:   if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_BIGNULL ){",
          "1906:     int addr;",
          "1907:     addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1908:     switch( op ){",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1910:       case OP_Gt:",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "1912:         VdbeCoverage(v);",
          "1913:         break;",
          "1914:       case OP_Le:",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1916:         VdbeCoverage(v);",
          "1917:         break;",
          "1919:     }",
          "1920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1921:     sqlite3VdbeJumpHere(v, addr);",
          "1922:     sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "1923:     if( op==OP_Gt || op==OP_Ge ){",
          "1924:       sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1925:     }",
          "1926:   }",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   SELECT MIN(a) FROM t1 WHERE a=123;",
          "201: } {123}",
          "203: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: #-------------------------------------------------------------------------",
          "204: # Tests for ticket f8a7060ece.",
          "205: #",
          "206: reset_db",
          "207: do_execsql_test 6.1.0 {",
          "208:   CREATE TABLE t1(a, b, c);",
          "209:   INSERT INTO t1 VALUES(NULL, 1, 'x');",
          "210:   CREATE INDEX i1 ON t1(a);",
          "211: }",
          "212: do_execsql_test 6.1.1 {",
          "213:   SELECT min(a), b, c FROM t1 WHERE c='x';",
          "214: } {{} 1 x}",
          "215: do_execsql_test 6.1.2 {",
          "216:   INSERT INTO t1 VALUES(1,    2, 'y');",
          "217: } {}",
          "218: do_execsql_test 6.1.3 {",
          "219:   SELECT min(a), b, c FROM t1 WHERE c='x';",
          "220: } {{} 1 x}",
          "222: do_execsql_test 6.2.0 {",
          "223:   CREATE TABLE t0(c0 UNIQUE, c1);",
          "224:   INSERT INTO t0(c1) VALUES (0);",
          "225:   INSERT INTO t0(c0) VALUES (0);",
          "226:   CREATE VIEW v0(c0, c1) AS",
          "227:       SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;",
          "228: }",
          "229: do_execsql_test 6.2.1 {",
          "230:   SELECT c0, c1 FROM v0;",
          "231: } {0 {}}",
          "232: do_execsql_test 6.2.2 {",
          "233:   SELECT v0.c0, MIN(v0.c1) FROM v0;",
          "234: } {0 {}}",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 August 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix nulls1",
          "18: do_execsql_test 1.0 {",
          "19:   DROP TABLE IF EXISTS t3;",
          "20:   CREATE TABLE t3(a INTEGER);",
          "21:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "22: } {}",
          "24: for {set a 0} {$a < 3} {incr a} {",
          "25:   foreach {tn limit} {",
          "26:     1 \"\"",
          "27:     2 \"LIMIT 10\"",
          "28:   } {",
          "29:     do_execsql_test 1.$a.$tn.1 \"",
          "30:       SELECT a FROM t3 ORDER BY a nULLS FIRST $limit",
          "31:     \" {{}   {}   10   20   30}",
          "33:     do_execsql_test 1.$a.$tn.2 \"",
          "34:       SELECT a FROM t3 ORDER BY a nULLS LAST $limit",
          "35:     \" {10   20   30   {}   {}}",
          "37:     do_execsql_test 1.$a.$tn.3 \"",
          "38:       SELECT a FROM t3 ORDER BY a DESC nULLS FIRST $limit",
          "39:     \" {{}   {}   30   20   10}",
          "41:     do_execsql_test 1.$a.$tn.4 \"",
          "42:       SELECT a FROM t3 ORDER BY a DESC nULLS LAST $limit",
          "43:     \" {30   20   10   {}   {}}",
          "44:   }",
          "46:   switch $a {",
          "47:     0 {",
          "48:       execsql { CREATE INDEX i1 ON t3(a) }",
          "49:     }",
          "50:     1 {",
          "51:       execsql { DROP INDEX i1 ; CREATE INDEX i1 ON t3(a DESC) }",
          "52:     }",
          "53:   }",
          "54: }",
          "56: #-------------------------------------------------------------------------",
          "57: reset_db",
          "58: do_execsql_test 2.0 {",
          "59:   CREATE TABLE t2(a, b, c);",
          "60:   CREATE INDEX i2 ON t2(a, b);",
          "61:   INSERT INTO t2 VALUES(1, 1, 1);",
          "62:   INSERT INTO t2 VALUES(1, NULL, 2);",
          "63:   INSERT INTO t2 VALUES(1, NULL, 3);",
          "64:   INSERT INTO t2 VALUES(1, 4, 4);",
          "65: }",
          "67: do_execsql_test 2.1 {",
          "68:   SELECT * FROM t2 WHERE a=1 ORDER BY b NULLS LAST",
          "69: } {",
          "70:   1 1 1    1 4 4   1 {} 2   1 {} 3",
          "71: }",
          "73: do_execsql_test 2.2 {",
          "74:   SELECT * FROM t2 WHERE a=1 ORDER BY b DESC NULLS FIRST",
          "75: } {",
          "76:   1 {} 3",
          "77:   1 {} 2",
          "78:   1 4 4",
          "79:   1 1 1",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: #",
          "84: reset_db",
          "85: do_execsql_test 3.0 {",
          "86:   CREATE TABLE t1(a, b, c, d, UNIQUE (b));",
          "87: }",
          "88: foreach {tn sql err}  {",
          "89:   1 { CREATE INDEX i1 ON t1(a ASC NULLS LAST) }           LAST",
          "90:   2 { CREATE INDEX i1 ON t1(a ASC NULLS FIRST) }          FIRST",
          "91:   3 { CREATE INDEX i1 ON t1(a, b ASC NULLS LAST) }        LAST",
          "92:   4 { CREATE INDEX i1 ON t1(a, b ASC NULLS FIRST) }       FIRST",
          "93:   5 { CREATE INDEX i1 ON t1(a DESC NULLS LAST) }          LAST",
          "94:   6 { CREATE INDEX i1 ON t1(a DESC NULLS FIRST) }         FIRST",
          "95:   7 { CREATE INDEX i1 ON t1(a, b DESC NULLS LAST) }       LAST",
          "96:   8 { CREATE INDEX i1 ON t1(a, b DESC NULLS FIRST) }      FIRST",
          "97:   9  { CREATE TABLE t2(a, b, PRIMARY KEY(a DESC, b NULLS FIRST)) } FIRST",
          "98:   10 { CREATE TABLE t2(a, b, UNIQUE(a DESC NULLS FIRST, b)) }      FIRST",
          "99:   11 { INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "100:           ON CONFLICT (b DESC NULLS LAST) DO UPDATE SET a = a+1 } LAST",
          "101:   12 {",
          "102:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "103:       INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "104:       ON CONFLICT (b DESC NULLS FIRST) DO UPDATE SET a = a+1;",
          "105:     END",
          "106:   } FIRST",
          "107: } {",
          "108:   do_catchsql_test 3.1.$tn $sql \"1 {unsupported use of NULLS $err}\"",
          "109: }",
          "111: do_execsql_test 3.2 {",
          "112:   CREATE TABLE first(nulls, last);",
          "113:   INSERT INTO first(last, nulls) VALUES(100,200), (300,400), (200,300);",
          "114:   SELECT * FROM first ORDER BY nulls;",
          "115: } {",
          "116:   200 100",
          "117:   300 200",
          "118:   400 300",
          "119: }",
          "121: #-------------------------------------------------------------------------",
          "122: #",
          "123: ifcapable vtab {",
          "124:   register_echo_module db",
          "125:   do_execsql_test 4.0 {",
          "126:     CREATE TABLE tx(a INTEGER PRIMARY KEY, b, c);",
          "127:     CREATE INDEX i1 ON tx(b);",
          "128:     INSERT INTO tx VALUES(1, 1, 1);",
          "129:     INSERT INTO tx VALUES(2, NULL, 2);",
          "130:     INSERT INTO tx VALUES(3, 3, 3);",
          "131:     INSERT INTO tx VALUES(4, NULL, 4);",
          "132:     INSERT INTO tx VALUES(5, 5, 5);",
          "133:     CREATE VIRTUAL TABLE te USING echo(tx);",
          "134:   }",
          "136:   do_execsql_test 4.1 {",
          "137:     SELECT * FROM tx ORDER BY b NULLS FIRST;",
          "138:   } {2 {} 2  4 {} 4  1 1 1  3 3 3  5 5 5}",
          "139:   do_execsql_test 4.2 {",
          "140:     SELECT * FROM te ORDER BY b NULLS FIRST;",
          "141:   } {2 {} 2  4 {} 4  1 1 1  3 3 3  5 5 5}",
          "143:   do_execsql_test 4.3 {",
          "144:     SELECT * FROM tx ORDER BY b NULLS LAST;",
          "145:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "146:   do_execsql_test 4.4 {",
          "147:     SELECT * FROM te ORDER BY b NULLS LAST;",
          "148:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "149: }",
          "151: #-------------------------------------------------------------------------",
          "152: #",
          "153: do_execsql_test 5.0 {",
          "154:   CREATE TABLE t4(a, b, c);",
          "155:   INSERT INTO t4 VALUES(1, 1, 11);",
          "156:   INSERT INTO t4 VALUES(1, 2, 12);",
          "157:   INSERT INTO t4 VALUES(1, NULL, 1);",
          "159:   INSERT INTO t4 VALUES(2, NULL, 1);",
          "160:   INSERT INTO t4 VALUES(2, 2, 12);",
          "161:   INSERT INTO t4 VALUES(2, 1, 11);",
          "163:   INSERT INTO t4 VALUES(3, NULL, 1);",
          "164:   INSERT INTO t4 VALUES(3, 2, 12);",
          "165:   INSERT INTO t4 VALUES(3, NULL, 3);",
          "166: }",
          "168: do_execsql_test 5.1 {",
          "169:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "170: } {",
          "171:   1 1 11   1 2 12   1 {} 1",
          "172:   2 1 11   2 2 12   2 {} 1",
          "173:   3 2 12   3 {} 1   3 {} 3",
          "174: }",
          "175: do_execsql_test 5.2 {",
          "176:   CREATE INDEX t4ab ON t4(a, b);",
          "177:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "178: } {",
          "179:   1 1 11   1 2 12   1 {} 1",
          "180:   2 1 11   2 2 12   2 {} 1",
          "181:   3 2 12   3 {} 1   3 {} 3",
          "182: }",
          "183: do_eqp_test 5.3 {",
          "184:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "185: } {",
          "186:   QUERY PLAN",
          "187:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "188: }",
          "190: do_execsql_test 5.4 {",
          "191:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "192: } {",
          "193:   3 {} 3   3 {} 1   3 2 12",
          "194:   2 {} 1   2 2 12   2 1 11",
          "195:   1 {} 1   1 2 12   1 1 11",
          "196: }",
          "197: do_eqp_test 5.5 {",
          "198:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "199: } {",
          "200:   QUERY PLAN",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "204: #-------------------------------------------------------------------------",
          "205: #",
          "206: do_execsql_test 6.0 {",
          "207:   CREATE TABLE t5(a, b, c);",
          "208:   WITH s(i) AS (",
          "209:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<200",
          "210:   )",
          "211:   INSERT INTO t5 SELECT i%2, CASE WHEN (i%10)==0 THEN NULL ELSE i END, i FROM s;",
          "212: }",
          "214: set res1 [db eval { SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c }]",
          "215: set res2 [db eval {",
          "216:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "217: }]",
          "219: do_execsql_test 6.1.1 {",
          "220:   CREATE INDEX t5ab ON t5(a, b, c);",
          "221:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c;",
          "222: } $res1",
          "223: do_eqp_test 6.1.2 {",
          "224:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b NULLS LAST, c;",
          "225: } {",
          "226:   QUERY PLAN",
          "227:   `--SEARCH TABLE t5 USING COVERING INDEX t5ab (a=?)",
          "228: }",
          "229: do_execsql_test 6.2.1 {",
          "230:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "231: } $res2",
          "232: do_eqp_test 6.2.2 {",
          "233:   SELECT a,b FROM t5 WHERE a=1 ORDER BY b DESC NULLS FIRST, c DESC",
          "234: } {",
          "235:   QUERY PLAN",
          "236:   `--SEARCH TABLE t5 USING COVERING INDEX t5ab (a=?)",
          "237: }",
          "240: finish_test",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: proc execsql_test {tn sql} {",
          "71:   set res [execsql $sql]",
          "72:   set sql [string map {string_agg group_concat} $sql]",
          "75:   puts $::fd \"do_execsql_test $tn {\"",
          "76:   puts $::fd \"  [string trim $sql]\"",
          "77:   puts $::fd \"} {$res}\"",
          "",
          "[Removed Lines]",
          "73:   set sql [string map [list {NULLS FIRST} {}] $sql]",
          "74:   set sql [string map [list {NULLS LAST} {}] $sql]",
          "",
          "[Added Lines]",
          "73:   # set sql [string map [list {NULLS FIRST} {}] $sql]",
          "74:   # set sql [string map [list {NULLS LAST} {}] $sql]",
          "",
          "---------------"
        ],
        "test/window7.test||test/window7.test": [
          "File: test/window7.test -> test/window7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_execsql_test 1.1 {",
          "43:   SELECT a, sum(b) FROM t3 GROUP BY a ORDER BY 1;",
          "46: do_execsql_test 1.2 {",
          "47:   SELECT a, sum(b) OVER (",
          "48:     ORDER BY a GROUPS BETWEEN CURRENT ROW AND CURRENT ROW",
          "49:   ) FROM t3 ORDER BY 1;",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT a, sum(b) OVER (",
          "54:     ORDER BY a GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "55:   ) FROM t3 ORDER BY 1;",
          "58: do_execsql_test 1.4 {",
          "59:   SELECT a, sum(b) OVER (",
          "60:     ORDER BY a GROUPS BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "61:   ) FROM t3 ORDER BY 1;",
          "64: do_execsql_test 1.5 {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "67:   ) FROM t3 ORDER BY 1;",
          "70: do_execsql_test 1.6 {",
          "71:   SELECT a, sum(b) OVER (",
          "72:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "73:   ) FROM t3 ORDER BY 1;",
          "76: do_execsql_test 1.7 {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t3 ORDER BY 1;",
          "82: do_execsql_test 1.8.1 {",
          "83:   SELECT a, sum(b) OVER (",
          "84:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "85:   ) FROM t3 ORDER BY 1;",
          "88: do_execsql_test 1.8.2 {",
          "89:   SELECT a, sum(b) OVER (",
          "90:     ORDER BY a DESC RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "91:   ) FROM t3 ORDER BY 1;",
          "94: finish_test",
          "",
          "[Removed Lines]",
          "44: } {0 550   1 460   2 470   3 480   4 490   5 500   6 510   7 520   8 530   9 540}",
          "50: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "56: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "62: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "68: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "74: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "80: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "86: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "92: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070}",
          "",
          "[Added Lines]",
          "44: } {0 550   1 460   2 470   3 480   4 490   5 500   6 510   7 520   8 530",
          "45:   9 540}",
          "51: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550",
          "52:   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460",
          "53:   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470",
          "54:   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480",
          "55:   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490",
          "56:   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500",
          "57:   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510",
          "58:   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520",
          "59:   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530",
          "60:   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530",
          "61:   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540",
          "62:   9 540}",
          "68: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550",
          "69:   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460",
          "70:   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470",
          "71:   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480",
          "72:   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490",
          "73:   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500",
          "74:   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510",
          "75:   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520",
          "76:   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530",
          "77:   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530",
          "78:   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540",
          "79:   9 540}",
          "85: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480",
          "86:   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960",
          "87:   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450",
          "88:   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400",
          "89:   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400",
          "90:   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450",
          "91:   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500",
          "92:   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550",
          "93:   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600",
          "94:   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600",
          "95:   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100",
          "96:   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590",
          "97:   9 1590   9 1590   9 1590   9 1590}",
          "103: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550",
          "104:   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460",
          "105:   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470",
          "106:   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480",
          "107:   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490",
          "108:   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500",
          "109:   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510",
          "110:   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520",
          "111:   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530",
          "112:   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530",
          "113:   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540",
          "114:   9 540}",
          "120: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480",
          "121:   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960",
          "122:   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450",
          "123:   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400",
          "124:   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400",
          "125:   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450",
          "126:   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500",
          "127:   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550",
          "128:   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600",
          "129:   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600",
          "130:   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100",
          "131:   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590",
          "132:   9 1590   9 1590   9 1590   9 1590}",
          "138: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010",
          "139:   0 1010   0 1010   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480",
          "140:   1 1480   1 1480   1 1480   1 1480   2 1960   2 1960   2 1960   2 1960",
          "141:   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   3 1900   3 1900",
          "142:   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900",
          "143:   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940",
          "144:   4 1940   4 1940   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980",
          "145:   5 1980   5 1980   5 1980   5 1980   6 2020   6 2020   6 2020   6 2020",
          "146:   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   7 2060   7 2060",
          "147:   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060",
          "148:   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100",
          "149:   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590",
          "150:   9 1590   9 1590   9 1590   9 1590}",
          "156: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010",
          "157:   0 1010   0 1010   1 930   1 930   1 930   1 930   1 930   1 930   1 930",
          "158:   1 930   1 930   1 930   2 950   2 950   2 950   2 950   2 950   2 950",
          "159:   2 950   2 950   2 950   2 950   3 970   3 970   3 970   3 970   3 970",
          "160:   3 970   3 970   3 970   3 970   3 970   4 990   4 990   4 990   4 990",
          "161:   4 990   4 990   4 990   4 990   4 990   4 990   5 1010   5 1010   5 1010",
          "162:   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   6 1030",
          "163:   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030",
          "164:   6 1030   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050",
          "165:   7 1050   7 1050   7 1050   8 1070   8 1070   8 1070   8 1070   8 1070",
          "166:   8 1070   8 1070   8 1070   8 1070   8 1070   9 540   9 540   9 540   9 540",
          "167:   9 540   9 540   9 540   9 540   9 540   9 540}",
          "173: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550",
          "174:   0 550   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010",
          "175:   1 1010   1 1010   1 1010   2 930   2 930   2 930   2 930   2 930   2 930",
          "176:   2 930   2 930   2 930   2 930   3 950   3 950   3 950   3 950   3 950",
          "177:   3 950   3 950   3 950   3 950   3 950   4 970   4 970   4 970   4 970",
          "178:   4 970   4 970   4 970   4 970   4 970   4 970   5 990   5 990   5 990",
          "179:   5 990   5 990   5 990   5 990   5 990   5 990   5 990   6 1010   6 1010",
          "180:   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010",
          "181:   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030",
          "182:   7 1030   7 1030   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050",
          "183:   8 1050   8 1050   8 1050   8 1050   9 1070   9 1070   9 1070   9 1070",
          "184:   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070}",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "198:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "199: }",
          "201: execsql_test 4.2.2 {",
          "202:   SELECT sum(b) OVER (",
          "203:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "204:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "205: }",
          "207: execsql_test 4.3.1 {",
          "208:   SELECT sum(b) OVER (",
          "209:     ORDER BY a NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "210:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "211: }",
          "213: execsql_test 4.4.1 {",
          "214:   SELECT sum(b) OVER (",
          "215:     ORDER BY a NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "216:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "217: }",
          "219: execsql_test 4.4.2 {",
          "220:   SELECT sum(b) OVER (",
          "221:     ORDER BY a DESC NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "222:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "223: }",
          "225: ==========",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   SELECT sum(b) OVER (",
          "202:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "203:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "204: }",
          "206: execsql_test 4.2.3 {",
          "211: execsql_test 4.2.4 {",
          "212:   SELECT sum(b) OVER (",
          "213:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "214:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "215: }",
          "222: execsql_test 4.3.2 {",
          "223:   SELECT sum(b) OVER (",
          "224:     ORDER BY a NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "225:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "226: }",
          "234:   SELECT sum(b) OVER (",
          "235:     ORDER BY a NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "236:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "237: }",
          "239: execsql_test 4.4.3 {",
          "244: execsql_test 4.4.4 {",
          "245:   SELECT sum(b) OVER (",
          "246:     ORDER BY a DESC NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "247:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "248: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:     6 { ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING }",
          "249:     7 { ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "250:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING }",
          "251:   } {",
          "252:     execsql_test 5.$tn.$tn2.1 \"",
          "253:       SELECT max(c) OVER win,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     8 { RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING }",
          "278:     9 { ORDER BY a NULLS LAST",
          "279:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING }",
          "280:    10 { PARTITION BY coalesce(a, '')",
          "281:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING }",
          "282:    11 { ORDER BY a NULLS LAST GROUPS 6 PRECEDING }",
          "283:    12 { ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING }",
          "284:    13 { ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING }",
          "285:    14 { ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "286:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3522: do_execsql_test 4.2.1 {",
          "3523:   SELECT sum(b) OVER (",
          "3524:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "3526: } {{}   {}   6   6   6}",
          "3528: do_execsql_test 4.2.2 {",
          "3529:   SELECT sum(b) OVER (",
          "3530:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "3532: } {{}   {}   6   6   6}",
          "3534: do_execsql_test 4.3.1 {",
          "3535:   SELECT sum(b) OVER (",
          "3538: } {6   6   6   15   15}",
          "3540: do_execsql_test 4.4.1 {",
          "3541:   SELECT sum(b) OVER (",
          "3544: } {3   6   9   9   12}",
          "3546: do_execsql_test 4.4.2 {",
          "3547:   SELECT sum(b) OVER (",
          "3550: } {5   6   8   9   10}",
          "3552: #==========================================================================",
          "",
          "[Removed Lines]",
          "3525:   ) FROM t1 ORDER BY 1 ;",
          "3531:   ) FROM t1 ORDER BY 1 ;",
          "3536:     ORDER BY a  RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3537:   ) FROM t1 ORDER BY 1 ;",
          "3542:     ORDER BY a  ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3543:   ) FROM t1 ORDER BY 1 ;",
          "3548:     ORDER BY a DESC  ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3549:   ) FROM t1 ORDER BY 1 ;",
          "",
          "[Added Lines]",
          "3525:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "3529:   SELECT sum(b) OVER (",
          "3530:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "3531:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3532: } {6   6   6   {}   {}}",
          "3534: do_execsql_test 4.2.3 {",
          "3537:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "3540: do_execsql_test 4.2.4 {",
          "3541:   SELECT sum(b) OVER (",
          "3542:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "3543:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3544: } {6   6   6   {}   {}}",
          "3548:     ORDER BY a NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3549:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "3552: do_execsql_test 4.3.2 {",
          "3553:   SELECT sum(b) OVER (",
          "3554:     ORDER BY a NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "3555:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3556: } {9   9   15   15   15}",
          "3560:     ORDER BY a NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3561:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "3566:     ORDER BY a NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3567:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "3568: } {5   6   8   9   10}",
          "3570: do_execsql_test 4.4.3 {",
          "3571:   SELECT sum(b) OVER (",
          "3572:     ORDER BY a DESC NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3573:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "3574: } {5   6   8   9   10}",
          "3576: do_execsql_test 4.4.4 {",
          "3577:   SELECT sum(b) OVER (",
          "3578:     ORDER BY a DESC NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "3579:   ) FROM t1 ORDER BY 1 NULLS LAST;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3564:              count(a) OVER win",
          "3565:       FROM t3",
          "3566:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3568: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3569:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3570:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "",
          "[Removed Lines]",
          "3567:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3597:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3587:              dense_rank() OVER win",
          "3588:       FROM t3",
          "3589:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3591: } {23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3592:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3593:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "",
          "[Removed Lines]",
          "3590:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3620:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3609:              min(c) OVER win,",
          "3610:              count(a) OVER win",
          "3611:       FROM t3",
          "3613:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3615: } {899 113 9   899 113 9   899 113 9   899 113 9   899 113 9   899 113 9",
          "3616:   899 113 9   899 113 9   899 113 9   899 113 16   899 113 16   899 113 16",
          "3617:   899 113 16   899 113 16   899 113 16   899 113 16   979 102 44   979 102 44",
          "",
          "[Removed Lines]",
          "3612:       WINDOW win AS (  ORDER BY a",
          "3614:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3642:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "3644:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3633:              rank() OVER win,",
          "3634:              dense_rank() OVER win",
          "3635:       FROM t3",
          "3637:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3639: } {2947 81 11   2947 81 11   2947 81 11   2947 81 11   2947 81 11   2947 81 11",
          "3640:   2947 81 11   2947 81 11   2947 81 11   5287 74 10   5287 74 10   5287 74 10",
          "3641:   5287 74 10   5287 74 10   5287 74 10   5287 74 10   8400 65 9   8400 65 9",
          "",
          "[Removed Lines]",
          "3636:       WINDOW win AS (  ORDER BY a",
          "3638:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3666:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "3668:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3659:       FROM t3",
          "3660:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "3661:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3663: } {777 113 5   777 113 5   777 113 5   777 113 5   777 113 5   805 250 7",
          "3664:   805 250 7   805 250 7   805 250 7   805 250 7   805 250 7   805 250 7",
          "3665:   822 158 6   822 158 6   822 158 6   822 158 6   822 158 6   822 158 6",
          "",
          "[Removed Lines]",
          "3662:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3692:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3683:       FROM t3",
          "3684:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "3685:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3687: } {962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1",
          "3688:   962 1 1   962 1 1   962 1 1   962 1 1   1264 1 1   1264 1 1   1264 1 1",
          "3689:   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1366 1 1   1366 1 1",
          "",
          "[Removed Lines]",
          "3686:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3716:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3703:              min(c) OVER win,",
          "3704:              count(a) OVER win",
          "3705:       FROM t3",
          "3708: } {870 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0",
          "3709:   934 158 8   934 158 8   934 158 8   934 158 8   934 158 8   934 158 8",
          "3710:   934 158 8   934 158 8   934 158 21   934 158 21   934 158 21   934 158 21",
          "",
          "[Removed Lines]",
          "3706:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "3707:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3736:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "3737:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3726:              rank() OVER win,",
          "3727:              dense_rank() OVER win",
          "3728:       FROM t3",
          "3731: } {2050 1 1   2050 1 1   2050 1 1   2050 1 1   2050 1 1   2050 1 1   4359 7 2",
          "3732:   4359 7 2   4359 7 2   4359 7 2   4359 7 2   4359 7 2   4359 7 2   4359 7 2",
          "3733:   7840 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3",
          "",
          "[Removed Lines]",
          "3729:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "3730:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3759:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "3760:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3750:              min(c) OVER win,",
          "3751:              count(a) OVER win",
          "3752:       FROM t3",
          "3755: } {102 102 1   113 113 2   113 113 2   133 133 1   148 148 1   160 158 2",
          "3756:   160 158 2   160 158 2   208 208 1   224 223 2   224 223 2   239 234 3",
          "3757:   239 234 3   239 234 3   252 247 3   257 247 5   257 247 5   257 250 4",
          "",
          "[Removed Lines]",
          "3753:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3754:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3783:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3784:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3773:              rank() OVER win,",
          "3774:              dense_rank() OVER win",
          "3775:       FROM t3",
          "3778: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 25 23   {} 34 29",
          "3779:   {} 36 31   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 43 37   {} 43 37",
          "3780:   {} 50 42   {} 60 51   {} 61 52   {} 64 55   {} 64 55   {} 67 57   {} 68 58",
          "",
          "[Removed Lines]",
          "3776:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3777:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3806:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3807:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3795:              min(c) OVER win,",
          "3796:              count(a) OVER win",
          "3797:       FROM t3",
          "3800: } {102 102 1   113 113 2   113 113 2   133 133 1   148 148 1   158 158 1",
          "3801:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "3802:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "",
          "[Removed Lines]",
          "3798:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3799:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3828:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3829:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3818:              rank() OVER win,",
          "3819:              dense_rank() OVER win",
          "3820:       FROM t3",
          "3823: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 11 9   {} 12 10",
          "3824:   {} 13 11   {} 16 14   {} 17 15   {} 18 16   {} 22 20   {} 24 22   {} 25 23",
          "3825:   {} 26 24   {} 31 27   {} 34 29   {} 36 31   {} 38 33   {} 38 33   {} 40 34",
          "",
          "[Removed Lines]",
          "3821:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3822:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3851:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "3852:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3840:              min(c) OVER win,",
          "3841:              count(a) OVER win",
          "3842:       FROM t3",
          "3844:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3846: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3847:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "3848:   979 158 78   979 160 77   979 208 76   979 223 75   979 224 74   979 234 73",
          "",
          "[Removed Lines]",
          "3843:       WINDOW win AS (  ORDER BY c , b , a",
          "3845:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3873:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "3875:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3864:              rank() OVER win,",
          "3865:              dense_rank() OVER win",
          "3866:       FROM t3",
          "3868:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3870: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "3871:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "3872:   8968 73 73   8968 74 74   8968 75 75   8968 76 76   8968 77 77   9745 69 69",
          "",
          "[Removed Lines]",
          "3867:       WINDOW win AS (  ORDER BY c , b , a",
          "3869:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "3897:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "3899:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3885:   22796 16 16   22929 10 10   23042 9 9   23155 1 1   23155 2 2   23155 3 3",
          "3886:   23155 4 4   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "3889:   SELECT max(c) OVER win,",
          "3890:              min(c) OVER win,",
          "3891:              count(a) OVER win",
          "3892:       FROM t3",
          "3912:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "3913:              rank() OVER win,",
          "3914:              dense_rank() OVER win",
          "3915:       FROM t3",
          "3925:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3926:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3927:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "",
          "[Removed Lines]",
          "3888: do_execsql_test 5.2.1.1 {",
          "3893:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "3894:       ORDER BY 1 , 2 , 3",
          "3895: } {963 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3896:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3897:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3898:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3899:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3900:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3901:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3902:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3903:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3904:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3905:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3906:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3907:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3908:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 83   979 102 83",
          "3909:   979 102 83   979 102 83   979 102 83   979 102 83   979 113 82}",
          "3911: do_execsql_test 5.2.1.2 {",
          "3916:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "3917:       ORDER BY 1 , 2 , 3",
          "3918: } {22176 1 1   22192 1 1   22196 1 1   22226 1 1   22244 1 1   22256 1 1",
          "3919:   22310 1 1   22316 1 1   22316 1 1   22350 1 1   22378 1 1   22396 1 1",
          "3920:   22444 1 1   22450 1 1   22472 1 1   22484 1 1   22488 1 1   22488 1 1",
          "3921:   22522 1 1   22526 1 1   22526 1 1   22528 1 1   22548 1 1   22712 1 1",
          "3922:   22734 1 1   22756 1 1   22756 1 1   22762 1 1   22762 1 1   22800 1 1",
          "3923:   22800 1 1   22820 1 1   22846 1 1   22860 1 1   22898 1 1   22908 1 1",
          "3924:   22916 1 1   22932 1 1   23022 1 1   23042 1 1   23042 1 1   23155 1 1",
          "",
          "[Added Lines]",
          "3918: do_execsql_test 5.1.8.1 {",
          "3923:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3924:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "3925: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3926:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3927:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3928:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3929:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3930:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3931:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3932:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3933:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3934:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3935:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3936:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3937:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3938:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3939:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83}",
          "3941: do_execsql_test 5.1.8.2 {",
          "3946:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3947:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "3948: } {23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3949:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3950:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3951:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3952:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3953:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3954:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3931:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "3932:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1}",
          "3935:   SELECT max(c) OVER win,",
          "3936:              min(c) OVER win,",
          "3937:              count(a) OVER win",
          "3938:       FROM t3",
          "3953:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3959:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "3960:              rank() OVER win,",
          "3961:              dense_rank() OVER win",
          "3962:       FROM t3",
          "3983:   SELECT max(c) OVER win,",
          "3984:              min(c) OVER win,",
          "3985:              count(a) OVER win",
          "3986:       FROM t3",
          "3987:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4007:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4008:              rank() OVER win,",
          "4009:              dense_rank() OVER win",
          "4010:       FROM t3",
          "4011:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4026:   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1}",
          "4029:   SELECT max(c) OVER win,",
          "4030:              min(c) OVER win,",
          "4031:              count(a) OVER win",
          "4032:       FROM t3",
          "4052:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4053:              rank() OVER win,",
          "4054:              dense_rank() OVER win",
          "4055:       FROM t3",
          "4076:   SELECT max(c) OVER win,",
          "4077:              min(c) OVER win,",
          "4078:              count(a) OVER win",
          "4079:       FROM t3",
          "4099:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4100:              rank() OVER win,",
          "4101:              dense_rank() OVER win",
          "4102:       FROM t3",
          "4113:   335 24 22   355 27 25   355 27 25   504 16 14   504 17 15   705 58 49",
          "4114:   710 26 24   711 57 48   711 59 50   759 63 54   929 84 71   959 88 74",
          "4115:   963 87 73   1185 32 28   1185 32 28   1191 29 26   1191 29 26   1334 51 43",
          "",
          "[Removed Lines]",
          "3934: do_execsql_test 5.2.2.1 {",
          "3939:       WINDOW win AS (  ORDER BY a",
          "3940:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "3941:       ORDER BY 1 , 2 , 3",
          "3942: } {839 113 8   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8",
          "3943:   899 113 8   899 113 8   899 113 15   899 113 15   899 113 15   899 113 15",
          "3944:   899 113 15   899 113 15   899 113 15   899 234 8   963 113 24   979 102 43",
          "3945:   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43",
          "3946:   979 102 43   979 102 43   979 102 43   979 102 48   979 102 48   979 102 48",
          "3947:   979 102 48   979 102 48   979 102 55   979 102 55   979 102 55   979 102 55",
          "3948:   979 102 55   979 102 55   979 102 55   979 102 61   979 102 61   979 102 61",
          "3949:   979 102 61   979 102 61   979 102 61   979 102 74   979 102 74   979 102 74",
          "3950:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74",
          "3951:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 82   979 102 82",
          "3952:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "3954:   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24",
          "3955:   979 113 24   979 113 24   979 113 32   979 113 32   979 113 32   979 113 32",
          "3956:   979 113 32   979 113 32   979 113 32   979 113 32   979 113 43}",
          "3958: do_execsql_test 5.2.2.2 {",
          "3963:       WINDOW win AS (  ORDER BY a",
          "3964:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "3965:       ORDER BY 1 , 2 , 3",
          "3966: } {2048 81 11   2108 81 11   2108 81 11   2690 81 11   2834 81 11   2947 81 11",
          "3967:   2947 81 11   2947 81 11   2947 81 11   4482 74 10   4616 74 10   4844 74 10",
          "3968:   4866 74 10   5287 74 10   5287 74 10   5287 74 10   7421 65 9   7437 65 9",
          "3969:   7717 65 9   8045 65 9   8267 65 9   8400 65 9   8400 65 9   8400 65 9",
          "3970:   8400 65 9   8735 57 8   9329 57 8   9664 57 8   9664 57 8   9664 57 8",
          "3971:   9664 57 8   9664 57 8   9664 57 8   9959 46 7   10331 46 7   10626 46 7",
          "3972:   10626 46 7   10626 46 7   10626 46 7   10626 46 7   10626 46 7   10626 46 7",
          "3973:   10626 46 7   10626 46 7   11368 41 6   11516 41 6   12032 41 6   12145 41 6",
          "3974:   12145 41 6   12990 34 5   13104 34 5   13949 34 5   13949 34 5   13949 34 5",
          "3975:   13949 34 5   13949 34 5   14556 28 4   14708 28 4   15315 28 4   15315 28 4",
          "3976:   15315 28 4   15315 28 4   18085 15 3   18091 15 3   18163 15 3   18397 15 3",
          "3977:   18403 15 3   18403 15 3   18549 15 3   18796 15 3   18796 15 3   18796 15 3",
          "3978:   18796 15 3   18796 15 3   18796 15 3   20194 7 2   20478 7 2   20796 7 2",
          "3979:   20866 7 2   20882 7 2   21105 7 2   21105 7 2   21105 7 2   22488 1 1",
          "3980:   22526 1 1   22756 1 1   22800 1 1   23155 1 1   23155 1 1}",
          "3982: do_execsql_test 5.2.3.1 {",
          "3988:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "3989:       ORDER BY 1 , 2 , 3",
          "3990: } {667 158 0   671 250 6   759 158 5   768 113 4   777 113 4   777 113 4",
          "3991:   777 113 4   777 252 4   792 247 12   805 250 6   805 250 6   805 250 6",
          "3992:   805 250 6   805 250 6   805 398 6   822 158 5   822 158 5   822 158 5",
          "3993:   822 158 5   822 346 5   839 113 8   840 247 12   840 247 12   840 247 12",
          "3994:   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12",
          "3995:   840 247 12   840 247 12   840 393 12   845 224 6   870 102 10   870 158 0",
          "3996:   870 158 0   870 158 0   870 158 0   870 355 0   899 113 8   899 113 8",
          "3997:   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8   899 234 8",
          "3998:   911 223 7   929 148 7   934 223 7   934 223 7   934 223 7   934 223 7",
          "3999:   934 223 7   934 223 7   934 239 7   938 102 10   938 102 10   938 102 10",
          "4000:   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10",
          "4001:   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7",
          "4002:   938 160 7   938 208 10   959 224 6   959 224 6   959 224 6   959 224 6",
          "4003:   959 224 6   959 238 6   963 133 8   979 133 8   979 133 8   979 133 8",
          "4004:   979 133 8   979 133 8   979 133 8   979 133 8   979 330 8}",
          "4006: do_execsql_test 5.2.3.2 {",
          "4012:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4013:       ORDER BY 1 , 2 , 3",
          "4014: } {295 1 1   335 1 1   607 1 1   667 1 1   742 1 1   759 1 1   845 1 1",
          "4015:   890 1 1   929 1 1   959 1 1   962 1 1   962 1 1   962 1 1   962 1 1",
          "4016:   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   1264 1 1   1264 1 1",
          "4017:   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1366 1 1   1366 1 1   1366 1 1",
          "4018:   1366 1 1   1383 1 1   1398 1 1   1406 1 1   1421 1 1   1519 1 1   1519 1 1",
          "4019:   1535 1 1   1651 1 1   1669 1 1   1682 1 1   1695 1 1   1804 1 1   1804 1 1",
          "4020:   1804 1 1   1804 1 1   1804 1 1   1897 1 1   1919 1 1   2000 1 1   2048 1 1",
          "4021:   2050 1 1   2050 1 1   2070 1 1   2086 1 1   2108 1 1   2108 1 1   2134 1 1",
          "4022:   2150 1 1   2309 1 1   2309 1 1   2309 1 1   2340 1 1   2340 1 1   2340 1 1",
          "4023:   2430 1 1   2690 1 1   2758 1 1   2770 1 1   2776 1 1   2834 1 1   2848 1 1",
          "4024:   2947 1 1   2947 1 1   2947 1 1   2947 1 1   2980 1 1   3082 1 1   3088 1 1",
          "4025:   3088 1 1   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3234 1 1   3481 1 1",
          "4028: do_execsql_test 5.2.4.1 {",
          "4033:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4034:       ORDER BY 1 , 2 , 3",
          "4035: } {667 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 355 0",
          "4036:   911 158 7   934 158 7   934 158 7   934 158 7   934 158 7   934 158 7",
          "4037:   934 158 7   934 158 7   934 158 20   934 158 20   934 158 20   934 158 20",
          "4038:   934 158 20   934 158 20   934 158 20   934 158 20   934 158 20   934 158 20",
          "4039:   934 158 20   934 158 20   934 158 20   934 158 26   934 158 26   934 158 26",
          "4040:   934 158 26   934 158 26   934 158 26   934 158 33   959 102 49   959 102 49",
          "4041:   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49",
          "4042:   959 102 49   959 102 49   959 102 57   959 102 57   959 102 57   959 102 57",
          "4043:   959 102 57   959 102 57   959 102 57   959 102 57   959 113 38   959 113 38",
          "4044:   959 113 38   959 113 38   959 113 49   959 158 33   959 158 33   959 158 33",
          "4045:   959 158 33   959 158 33   959 158 33   959 158 38   963 102 58   979 102 52",
          "4046:   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52",
          "4047:   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55",
          "4048:   979 102 55   979 102 55   979 102 55   979 102 58   979 102 58   979 102 58",
          "4049:   979 102 58   979 102 58   979 102 58   979 102 58   979 102 58}",
          "4051: do_execsql_test 5.2.4.2 {",
          "4056:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4057:       ORDER BY 1 , 2 , 3",
          "4058: } {1383 1 1   1421 1 1   1651 1 1   1695 1 1   2050 1 1   2050 1 1   3448 7 2",
          "4059:   3732 7 2   4050 7 2   4120 7 2   4136 7 2   4359 7 2   4359 7 2   4359 7 2",
          "4060:   7129 15 3   7135 15 3   7207 15 3   7441 15 3   7447 15 3   7447 15 3",
          "4061:   7593 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3",
          "4062:   7840 15 3   8447 28 4   8599 28 4   9206 28 4   9206 28 4   9206 28 4",
          "4063:   9206 28 4   10051 34 5   10165 34 5   11010 34 5   11010 34 5   11010 34 5",
          "4064:   11010 34 5   11010 34 5   11563 74 10   11697 74 10   11752 41 6",
          "4065:   11776 57 8   11900 41 6   11925 74 10   11947 74 10   12368 74 10",
          "4066:   12368 74 10   12368 74 10   12370 57 8   12416 41 6   12529 41 6",
          "4067:   12529 41 6   12530 65 9   12546 65 9   12705 57 8   12705 57 8   12705 57 8",
          "4068:   12705 57 8   12705 57 8   12705 57 8   12824 46 7   12826 65 9",
          "4069:   13050 81 11   13110 81 11   13110 81 11   13154 65 9   13196 46 7",
          "4070:   13376 65 9   13491 46 7   13491 46 7   13491 46 7   13491 46 7   13491 46 7",
          "4071:   13491 46 7   13491 46 7   13491 46 7   13491 46 7   13509 65 9   13509 65 9",
          "4072:   13509 65 9   13509 65 9   13692 81 11   13836 81 11   13949 81 11",
          "4073:   13949 81 11   13949 81 11   13949 81 11}",
          "4075: do_execsql_test 5.2.5.1 {",
          "4080:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4081:       ORDER BY 1 , 2 , 3",
          "4082: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4083:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4084:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   113 113 1",
          "4085:   113 113 1   158 158 1   160 158 1   160 158 2   223 223 1   224 224 1",
          "4086:   238 234 2   239 234 2   239 238 2   252 250 2   256 252 2   257 247 4",
          "4087:   257 247 4   257 250 3   335 330 2   336 330 2   336 335 2   355 354 1",
          "4088:   355 354 2   355 355 1   399 393 3   399 393 3   399 393 3   399 393 3",
          "4089:   399 393 4   480 480 1   480 480 1   572 572 1   574 574 1   618 618 1",
          "4090:   618 618 1   633 629 2   634 627 3   634 627 3   634 627 4   634 629 3",
          "4091:   667 667 1   670 667 2   671 667 2   671 667 2   671 667 3   711 711 1",
          "4092:   711 711 1   716 705 2   726 726 1   730 730 1   762 762 1   768 759 3",
          "4093:   768 762 2   768 762 2   792 790 2   792 790 2   794 786 3   794 786 3",
          "4094:   844 839 4   845 839 4   845 839 4   845 839 4   845 839 4   870 870 1",
          "4095:   870 870 1   870 870 2   934 934 1   938 929 3   938 934 2   938 934 2",
          "4096:   959 959 1   963 963 1}",
          "4098: do_execsql_test 5.2.5.2 {",
          "4103:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4104:       ORDER BY 1 , 2 , 3",
          "4105: } {{} 1 1   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 10 8",
          "4106:   {} 14 12   {} 15 13   {} 19 17   {} 20 18   {} 21 19   {} 23 21   {} 25 23",
          "4107:   {} 34 29   {} 35 30   {} 36 31   {} 37 32   {} 38 33   {} 38 33   {} 40 34",
          "4108:   {} 41 35   {} 42 36   {} 43 37   {} 43 37   {} 50 42   {} 56 47   {} 60 51",
          "4109:   {} 61 52   {} 62 53   {} 64 55   {} 64 55   {} 66 56   {} 67 57   {} 68 58",
          "4110:   {} 69 59   {} 70 60   {} 71 61   {} 72 62   {} 78 67   {} 78 67   {} 78 67",
          "4111:   {} 81 68   {} 82 69   {} 83 70   {} 85 72   {} 85 72   {} 89 75   113 2 2",
          "4112:   113 2 2   223 11 9   239 12 10   239 13 11   257 18 16   335 22 20",
          "",
          "[Added Lines]",
          "3964: do_execsql_test 5.1.9.1 {",
          "3969:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "3970:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3971:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "3972: } {870 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0",
          "3973:   899 113 9   899 113 9   899 113 9   899 113 9   899 113 9   899 113 9",
          "3974:   899 113 9   899 113 9   899 113 9   899 113 16   899 113 16   899 113 16",
          "3975:   899 113 16   899 113 16   899 113 16   899 113 16   979 102 44   979 102 44",
          "3976:   979 102 44   979 102 44   979 102 44   979 102 44   979 102 44   979 102 44",
          "3977:   979 102 44   979 102 44   979 102 44   979 102 49   979 102 49   979 102 49",
          "3978:   979 102 49   979 102 49   979 102 56   979 102 56   979 102 56   979 102 56",
          "3979:   979 102 56   979 102 56   979 102 56   979 102 62   979 102 62   979 102 62",
          "3980:   979 102 62   979 102 62   979 102 62   979 102 75   979 102 75   979 102 75",
          "3981:   979 102 75   979 102 75   979 102 75   979 102 75   979 102 75   979 102 75",
          "3982:   979 102 75   979 102 75   979 102 75   979 102 75   979 102 83   979 102 83",
          "3984:   979 113 25   979 113 25   979 113 25   979 113 25   979 113 25   979 113 25",
          "3985:   979 113 25   979 113 25   979 113 25   979 113 33   979 113 33   979 113 33",
          "3986:   979 113 33   979 113 33   979 113 33   979 113 33   979 113 33}",
          "3988: do_execsql_test 5.1.9.2 {",
          "3993:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "3994:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "3995:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "3996: } {2050 84 11   2050 84 11   2050 84 11   2050 84 11   2050 84 11   2050 84 11",
          "3997:   4997 75 10   4997 75 10   4997 75 10   4997 75 10   4997 75 10   4997 75 10",
          "3998:   4997 75 10   4997 75 10   4997 75 10   7337 68 9   7337 68 9   7337 68 9",
          "3999:   7337 68 9   7337 68 9   7337 68 9   7337 68 9   10450 59 8   10450 59 8",
          "4000:   10450 59 8   10450 59 8   10450 59 8   10450 59 8   10450 59 8   10450 59 8",
          "4001:   10450 59 8   11714 51 7   11714 51 7   11714 51 7   11714 51 7   11714 51 7",
          "4002:   11714 51 7   11714 51 7   11714 51 7   12676 40 6   12676 40 6   12676 40 6",
          "4003:   12676 40 6   12676 40 6   12676 40 6   12676 40 6   12676 40 6   12676 40 6",
          "4004:   12676 40 6   12676 40 6   14195 35 5   14195 35 5   14195 35 5   14195 35 5",
          "4005:   14195 35 5   15999 28 4   15999 28 4   15999 28 4   15999 28 4   15999 28 4",
          "4006:   15999 28 4   15999 28 4   17365 22 3   17365 22 3   17365 22 3   17365 22 3",
          "4007:   17365 22 3   17365 22 3   20846 9 2   20846 9 2   20846 9 2   20846 9 2",
          "4008:   20846 9 2   20846 9 2   20846 9 2   20846 9 2   20846 9 2   20846 9 2",
          "4009:   20846 9 2   20846 9 2   20846 9 2   23155 1 1   23155 1 1   23155 1 1",
          "4010:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1}",
          "4012: do_execsql_test 5.1.10.1 {",
          "4018:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "4019:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4020: } {777 113 5   777 113 5   777 113 5   777 113 5   777 113 5   805 250 7",
          "4021:   805 250 7   805 250 7   805 250 7   805 250 7   805 250 7   805 250 7",
          "4022:   822 158 6   822 158 6   822 158 6   822 158 6   822 158 6   822 158 6",
          "4023:   840 247 13   840 247 13   840 247 13   840 247 13   840 247 13   840 247 13",
          "4024:   840 247 13   840 247 13   840 247 13   840 247 13   840 247 13   840 247 13",
          "4025:   840 247 13   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0",
          "4026:   870 158 0   899 113 9   899 113 9   899 113 9   899 113 9   899 113 9",
          "4027:   899 113 9   899 113 9   899 113 9   899 113 9   934 223 8   934 223 8",
          "4028:   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8",
          "4029:   938 102 11   938 102 11   938 102 11   938 102 11   938 102 11   938 102 11",
          "4030:   938 102 11   938 102 11   938 102 11   938 102 11   938 102 11   938 148 8",
          "4031:   938 148 8   938 148 8   938 148 8   938 148 8   938 148 8   938 148 8",
          "4032:   938 148 8   959 224 7   959 224 7   959 224 7   959 224 7   959 224 7",
          "4033:   959 224 7   959 224 7   979 133 9   979 133 9   979 133 9   979 133 9",
          "4034:   979 133 9   979 133 9   979 133 9   979 133 9   979 133 9}",
          "4036: do_execsql_test 5.1.10.2 {",
          "4042:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "4043:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4044: } {962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1",
          "4045:   962 1 1   962 1 1   962 1 1   962 1 1   1264 1 1   1264 1 1   1264 1 1",
          "4046:   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1366 1 1   1366 1 1",
          "4047:   1366 1 1   1366 1 1   1366 1 1   1366 1 1   1519 1 1   1519 1 1   1519 1 1",
          "4048:   1519 1 1   1519 1 1   1804 1 1   1804 1 1   1804 1 1   1804 1 1   1804 1 1",
          "4049:   1804 1 1   1804 1 1   2050 1 1   2050 1 1   2050 1 1   2050 1 1   2050 1 1",
          "4050:   2050 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1",
          "4051:   2309 1 1   2309 1 1   2340 1 1   2340 1 1   2340 1 1   2340 1 1   2340 1 1",
          "4052:   2340 1 1   2340 1 1   2947 1 1   2947 1 1   2947 1 1   2947 1 1   2947 1 1",
          "4053:   2947 1 1   2947 1 1   2947 1 1   2947 1 1   3113 1 1   3113 1 1   3113 1 1",
          "4054:   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3481 1 1",
          "4055:   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1",
          "4058: do_execsql_test 5.1.11.1 {",
          "4063:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "4064:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4065: } {934 158 27   934 158 27   934 158 27   934 158 27   934 158 27   934 158 27",
          "4066:   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8",
          "4067:   934 223 8   934 223 8   934 223 21   934 223 21   934 223 21   934 223 21",
          "4068:   934 223 21   934 223 21   934 223 21   934 223 21   934 223 21   934 223 21",
          "4069:   934 223 21   934 223 21   934 223 21   959 102 50   959 102 50   959 102 50",
          "4070:   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50",
          "4071:   959 102 50   959 102 50   959 102 58   959 102 58   959 102 58   959 102 58",
          "4072:   959 102 58   959 102 58   959 102 58   959 102 58   959 113 39   959 113 39",
          "4073:   959 113 39   959 113 39   959 113 39   959 158 34   959 158 34   959 158 34",
          "4074:   959 158 34   959 158 34   959 158 34   959 158 34   979 102 49   979 102 49",
          "4075:   979 102 49   979 102 49   979 102 49   979 102 49   979 102 53   979 102 53",
          "4076:   979 102 53   979 102 53   979 102 53   979 102 53   979 102 53   979 102 56",
          "4077:   979 102 56   979 102 56   979 102 56   979 102 56   979 102 56   979 102 56",
          "4078:   979 102 56   979 102 56   979 102 59   979 102 59   979 102 59   979 102 59",
          "4079:   979 102 59   979 102 59   979 102 59   979 102 59   979 102 59}",
          "4081: do_execsql_test 5.1.11.2 {",
          "4086:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE NO OTHERS  )",
          "4087:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4088: } {2309 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1   2309 1 1",
          "4089:   2309 1 1   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2",
          "4090:   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2",
          "4091:   7156 22 3   7156 22 3   7156 22 3   7156 22 3   7156 22 3   7156 22 3",
          "4092:   8960 28 4   8960 28 4   8960 28 4   8960 28 4   8960 28 4   8960 28 4",
          "4093:   8960 28 4   10479 35 5   10479 35 5   10479 35 5   10479 35 5   10479 35 5",
          "4094:   11441 40 6   11441 40 6   11441 40 6   11441 40 6   11441 40 6   11441 40 6",
          "4095:   11441 40 6   11441 40 6   11441 40 6   11441 40 6   11441 40 6   12368 68 9",
          "4096:   12368 68 9   12368 68 9   12368 68 9   12368 68 9   12368 68 9   12368 68 9",
          "4097:   12705 51 7   12705 51 7   12705 51 7   12705 51 7   12705 51 7   12705 51 7",
          "4098:   12705 51 7   12705 51 7   13509 59 8   13509 59 8   13509 59 8   13509 59 8",
          "4099:   13509 59 8   13509 59 8   13509 59 8   13509 59 8   13509 59 8",
          "4100:   13949 75 10   13949 75 10   13949 75 10   13949 75 10   13949 75 10",
          "4101:   13949 75 10   13949 75 10   13949 75 10   13949 75 10   14195 84 11",
          "4102:   14195 84 11   14195 84 11   14195 84 11   14195 84 11   14195 84 11}",
          "4104: do_execsql_test 5.1.12.1 {",
          "4109:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "4110:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4111: } {102 102 1   113 113 2   113 113 2   133 133 1   148 148 1   160 158 2",
          "4112:   160 158 2   160 158 2   208 208 1   224 223 2   224 223 2   239 234 3",
          "4113:   239 234 3   239 234 3   252 247 3   257 247 5   257 247 5   257 250 4",
          "4114:   257 252 3   295 295 1   309 309 1   336 330 3   336 330 3   336 330 3",
          "4115:   346 346 1   355 354 2   355 354 2   355 354 2   399 393 4   399 393 4",
          "4116:   399 393 4   399 393 4   399 393 4   412 412 1   421 421 1   430 430 1",
          "4117:   443 443 1   480 480 2   480 480 2   574 572 2   574 572 2   607 607 1",
          "4118:   618 618 2   618 618 2   634 627 4   634 627 4   634 627 4   634 627 4",
          "4119:   634 629 3   652 652 1   667 660 2   671 667 3   671 667 3   671 667 3",
          "4120:   671 667 3   683 683 1   711 705 2   716 705 3   716 711 2   730 726 2",
          "4121:   730 726 2   762 759 2   768 759 4   768 762 3   768 762 3   777 777 1",
          "4122:   792 786 3   794 786 4   794 786 4   794 790 3   805 805 1   822 822 1",
          "4123:   845 839 5   845 839 5   845 839 5   845 839 5   845 839 5   870 870 2",
          "4124:   870 870 2   870 870 2   899 899 1   911 911 1   934 929 2   938 929 4",
          "4125:   938 934 3   938 934 3   963 959 2   963 959 2   979 979 1}",
          "4127: do_execsql_test 5.1.12.2 {",
          "4132:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE NO OTHERS  )",
          "4133:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4134: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 25 23   {} 34 29",
          "4135:   {} 36 31   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 43 37   {} 43 37",
          "4136:   {} 50 42   {} 60 51   {} 61 52   {} 64 55   {} 64 55   {} 67 57   {} 68 58",
          "4137:   {} 69 59   {} 70 60   {} 72 62   {} 78 67   {} 78 67   {} 78 67   {} 85 72",
          "4138:   {} 85 72   133 4 3   223 10 8   223 11 9   226 2 2   226 2 2   239 12 10",
          "4139:   239 13 11   239 14 12   247 15 13   257 18 16   257 19 17   295 20 18",
          "4140:   309 21 19   335 22 20   335 23 21   335 24 22   421 35 30   443 37 32",
          "4141:   504 16 14   504 17 15   607 42 36   683 56 47   710 26 24   710 27 25",
          "4142:   710 27 25   711 59 50   759 62 53   759 63 54   777 66 56   805 71 61",
          "4143:   899 81 68   911 82 69   929 83 70   929 84 71   979 89 75   1334 51 43",
          "4144:   1416 57 48   1416 58 49   1584 29 26   1584 29 26   1584 31 27   1584 32 28",
          "4145:   1584 32 28   1891 49 41   1922 87 73   1922 88 74   2005 52 44   2005 52 44",
          "4146:   2005 54 45   2005 55 46   2518 45 38   2518 46 39   2518 46 39   2518 48 40",
          "4147:   2523 73 63   2523 73 63   2523 75 64   2523 76 65   2523 77 66}",
          "4149: do_execsql_test 5.1.13.1 {",
          "4150:   SELECT max(c) OVER win,",
          "4151:              min(c) OVER win,",
          "4152:              count(a) OVER win",
          "4153:       FROM t3",
          "4154:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "4155:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4156: } {102 102 1   113 113 2   113 113 2   133 133 1   148 148 1   158 158 1",
          "4157:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "4158:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "4159:   257 257 1   295 295 1   309 309 1   330 330 1   335 335 1   336 336 1",
          "4160:   346 346 1   354 354 1   355 355 1   355 355 1   393 393 2   393 393 2",
          "4161:   398 398 1   399 399 1   399 399 1   412 412 1   421 421 1   430 430 1",
          "4162:   443 443 1   480 480 2   480 480 2   572 572 1   574 574 1   607 607 1",
          "4163:   618 618 2   618 618 2   627 627 1   629 629 1   629 629 1   633 633 1",
          "4164:   634 634 1   652 652 1   660 660 1   667 667 1   667 667 1   670 670 1",
          "4165:   671 671 1   683 683 1   705 705 1   711 711 1   716 716 1   726 726 1",
          "4166:   730 730 1   759 759 1   762 762 1   768 768 2   768 768 2   777 777 1",
          "4167:   786 786 1   790 790 1   792 792 1   794 794 1   805 805 1   822 822 1",
          "4168:   839 839 2   839 839 2   840 840 1   844 844 1   845 845 1   870 870 2",
          "4169:   870 870 2   870 870 2   899 899 1   911 911 1   929 929 1   934 934 1",
          "4170:   938 938 2   938 938 2   959 959 1   963 963 1   979 979 1}",
          "4172: do_execsql_test 5.1.13.2 {",
          "4173:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4174:              rank() OVER win,",
          "4175:              dense_rank() OVER win",
          "4176:       FROM t3",
          "4177:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE NO OTHERS  )",
          "4178:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4179: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 11 9   {} 12 10",
          "4180:   {} 13 11   {} 16 14   {} 17 15   {} 18 16   {} 22 20   {} 24 22   {} 25 23",
          "4181:   {} 26 24   {} 31 27   {} 34 29   {} 36 31   {} 38 33   {} 38 33   {} 40 34",
          "4182:   {} 41 35   {} 43 37   {} 43 37   {} 49 41   {} 50 42   {} 51 43   {} 54 45",
          "4183:   {} 59 50   {} 60 51   {} 61 52   {} 63 54   {} 64 55   {} 64 55   {} 67 57",
          "4184:   {} 68 58   {} 69 59   {} 70 60   {} 72 62   {} 75 64   {} 76 65   {} 78 67",
          "4185:   {} 78 67   {} 78 67   {} 84 71   {} 85 72   {} 85 72   133 4 3   223 10 8",
          "4186:   226 2 2   226 2 2   239 14 12   247 15 13   257 19 17   295 20 18",
          "4187:   309 21 19   335 23 21   421 35 30   443 37 32   607 42 36   627 45 38",
          "4188:   633 48 40   671 55 46   683 56 47   705 57 48   710 27 25   710 27 25",
          "4189:   711 58 49   759 62 53   777 66 56   786 29 26   786 29 26   798 32 28",
          "4190:   798 32 28   805 71 61   845 77 66   899 81 68   911 82 69   929 83 70",
          "4191:   959 87 73   963 88 74   979 89 75   1258 46 39   1258 46 39   1334 52 44",
          "4192:   1334 52 44   1678 73 63   1678 73 63}",
          "4194: do_execsql_test 5.1.14.1 {",
          "4195:   SELECT max(c) OVER win,",
          "4196:              min(c) OVER win,",
          "4197:              count(a) OVER win",
          "4198:       FROM t3",
          "4199:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "4200:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "4201:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4202: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "4203:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "4204:   979 158 78   979 160 77   979 208 76   979 223 75   979 224 74   979 234 73",
          "4205:   979 238 72   979 239 71   979 247 70   979 250 69   979 252 68   979 256 67",
          "4206:   979 257 66   979 295 65   979 309 64   979 330 63   979 335 62   979 336 61",
          "4207:   979 346 60   979 354 59   979 355 57   979 355 58   979 393 56   979 393 57",
          "4208:   979 398 55   979 399 53   979 399 54   979 412 53   979 421 52   979 430 51",
          "4209:   979 443 50   979 480 48   979 480 49   979 572 47   979 574 46   979 607 45",
          "4210:   979 618 43   979 618 44   979 627 42   979 629 40   979 629 41   979 633 40",
          "4211:   979 634 39   979 652 38   979 660 37   979 667 35   979 667 36   979 670 35",
          "4212:   979 671 34   979 683 33   979 705 32   979 711 31   979 716 30   979 726 29",
          "4213:   979 730 28   979 759 27   979 762 26   979 768 24   979 768 25   979 777 23",
          "4214:   979 786 22   979 790 21   979 792 20   979 794 19   979 805 18   979 822 17",
          "4215:   979 839 15   979 839 16   979 840 14   979 844 13   979 845 12   979 870 9",
          "4216:   979 870 10   979 870 11   979 899 9   979 911 8   979 929 7}",
          "4218: do_execsql_test 5.1.14.2 {",
          "4219:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4220:              rank() OVER win,",
          "4221:              dense_rank() OVER win",
          "4222:       FROM t3",
          "4223:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "4224:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "4225:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4226: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "4227:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "4228:   8968 73 73   8968 74 74   8968 75 75   8968 76 76   8968 77 77   9745 69 69",
          "4229:   9745 70 70   9745 71 71   9745 72 72   10504 65 65   10504 66 66",
          "4230:   10504 67 67   10504 68 68   11215 64 64   11920 63 63   12603 62 62",
          "4231:   13274 60 60   13274 61 61   13941 59 59   14608 55 55   14608 56 56",
          "4232:   14608 57 57   14608 58 58   15241 54 54   15870 53 53   16499 52 52",
          "4233:   17126 49 49   17126 50 50   17126 51 51   17733 44 44   17733 45 45",
          "4234:   17733 46 46   17733 47 47   17733 48 48   18176 42 42   18176 43 43",
          "4235:   18597 40 40   18597 41 41   18996 39 39   19395 37 37   19395 38 38",
          "4236:   19788 36 36   20181 35 35   20536 34 34   20891 30 30   20891 31 31",
          "4237:   20891 32 32   20891 33 33   21226 28 28   21226 29 29   21535 27 27",
          "4238:   21830 26 26   22087 22 22   22087 23 23   22087 24 24   22087 25 25",
          "4239:   22334 21 21   22573 17 17   22573 18 18   22573 19 19   22573 20 20",
          "4240:   22796 11 11   22796 12 12   22796 13 13   22796 14 14   22796 15 15",
          "4241:   22796 16 16   22929 10 10   23042 9 9   23155 1 1   23155 2 2   23155 3 3",
          "4242:   23155 4 4   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "4244: do_execsql_test 5.2.1.1 {",
          "4245:   SELECT max(c) OVER win,",
          "4246:              min(c) OVER win,",
          "4247:              count(a) OVER win",
          "4248:       FROM t3",
          "4249:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4250:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4251: } {963 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4252:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4253:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4254:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4255:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4256:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4257:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4258:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4259:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4260:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4261:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4262:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4263:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4264:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 83   979 102 83",
          "4265:   979 102 83   979 102 83   979 102 83   979 102 83   979 113 82}",
          "4267: do_execsql_test 5.2.1.2 {",
          "4268:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4269:              rank() OVER win,",
          "4270:              dense_rank() OVER win",
          "4271:       FROM t3",
          "4272:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4273:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4274: } {22176 1 1   22192 1 1   22196 1 1   22226 1 1   22244 1 1   22256 1 1",
          "4275:   22310 1 1   22316 1 1   22316 1 1   22350 1 1   22378 1 1   22396 1 1",
          "4276:   22444 1 1   22450 1 1   22472 1 1   22484 1 1   22488 1 1   22488 1 1",
          "4277:   22522 1 1   22526 1 1   22526 1 1   22528 1 1   22548 1 1   22712 1 1",
          "4278:   22734 1 1   22756 1 1   22756 1 1   22762 1 1   22762 1 1   22800 1 1",
          "4279:   22800 1 1   22820 1 1   22846 1 1   22860 1 1   22898 1 1   22908 1 1",
          "4280:   22916 1 1   22932 1 1   23022 1 1   23042 1 1   23042 1 1   23155 1 1",
          "4281:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4282:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4283:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4284:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4285:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4286:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4287:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4288:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1}",
          "4290: do_execsql_test 5.2.2.1 {",
          "4291:   SELECT max(c) OVER win,",
          "4292:              min(c) OVER win,",
          "4293:              count(a) OVER win",
          "4294:       FROM t3",
          "4295:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "4296:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4297:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4298: } {839 113 8   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8",
          "4299:   899 113 8   899 113 8   899 113 15   899 113 15   899 113 15   899 113 15",
          "4300:   899 113 15   899 113 15   899 113 15   899 234 8   963 113 24   979 102 43",
          "4301:   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43",
          "4302:   979 102 43   979 102 43   979 102 43   979 102 48   979 102 48   979 102 48",
          "4303:   979 102 48   979 102 48   979 102 55   979 102 55   979 102 55   979 102 55",
          "4304:   979 102 55   979 102 55   979 102 55   979 102 61   979 102 61   979 102 61",
          "4305:   979 102 61   979 102 61   979 102 61   979 102 74   979 102 74   979 102 74",
          "4306:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74",
          "4307:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 82   979 102 82",
          "4308:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4309:   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "4310:   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24",
          "4311:   979 113 24   979 113 24   979 113 32   979 113 32   979 113 32   979 113 32",
          "4312:   979 113 32   979 113 32   979 113 32   979 113 32   979 113 43}",
          "4314: do_execsql_test 5.2.2.2 {",
          "4315:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4316:              rank() OVER win,",
          "4317:              dense_rank() OVER win",
          "4318:       FROM t3",
          "4319:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "4320:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4321:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4322: } {2048 81 11   2108 81 11   2108 81 11   2690 81 11   2834 81 11   2947 81 11",
          "4323:   2947 81 11   2947 81 11   2947 81 11   4482 74 10   4616 74 10   4844 74 10",
          "4324:   4866 74 10   5287 74 10   5287 74 10   5287 74 10   7421 65 9   7437 65 9",
          "4325:   7717 65 9   8045 65 9   8267 65 9   8400 65 9   8400 65 9   8400 65 9",
          "4326:   8400 65 9   8735 57 8   9329 57 8   9664 57 8   9664 57 8   9664 57 8",
          "4327:   9664 57 8   9664 57 8   9664 57 8   9959 46 7   10331 46 7   10626 46 7",
          "4328:   10626 46 7   10626 46 7   10626 46 7   10626 46 7   10626 46 7   10626 46 7",
          "4329:   10626 46 7   10626 46 7   11368 41 6   11516 41 6   12032 41 6   12145 41 6",
          "4330:   12145 41 6   12990 34 5   13104 34 5   13949 34 5   13949 34 5   13949 34 5",
          "4331:   13949 34 5   13949 34 5   14556 28 4   14708 28 4   15315 28 4   15315 28 4",
          "4332:   15315 28 4   15315 28 4   18085 15 3   18091 15 3   18163 15 3   18397 15 3",
          "4333:   18403 15 3   18403 15 3   18549 15 3   18796 15 3   18796 15 3   18796 15 3",
          "4334:   18796 15 3   18796 15 3   18796 15 3   20194 7 2   20478 7 2   20796 7 2",
          "4335:   20866 7 2   20882 7 2   21105 7 2   21105 7 2   21105 7 2   22488 1 1",
          "4336:   22526 1 1   22756 1 1   22800 1 1   23155 1 1   23155 1 1}",
          "4338: do_execsql_test 5.2.3.1 {",
          "4339:   SELECT max(c) OVER win,",
          "4340:              min(c) OVER win,",
          "4341:              count(a) OVER win",
          "4342:       FROM t3",
          "4343:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4344:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4345:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4346: } {667 158 0   671 250 6   759 158 5   768 113 4   777 113 4   777 113 4",
          "4347:   777 113 4   777 252 4   792 247 12   805 250 6   805 250 6   805 250 6",
          "4348:   805 250 6   805 250 6   805 398 6   822 158 5   822 158 5   822 158 5",
          "4349:   822 158 5   822 346 5   839 113 8   840 247 12   840 247 12   840 247 12",
          "4350:   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12",
          "4351:   840 247 12   840 247 12   840 393 12   845 224 6   870 102 10   870 158 0",
          "4352:   870 158 0   870 158 0   870 158 0   870 355 0   899 113 8   899 113 8",
          "4353:   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8   899 234 8",
          "4354:   911 223 7   929 148 7   934 223 7   934 223 7   934 223 7   934 223 7",
          "4355:   934 223 7   934 223 7   934 239 7   938 102 10   938 102 10   938 102 10",
          "4356:   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10",
          "4357:   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7",
          "4358:   938 160 7   938 208 10   959 224 6   959 224 6   959 224 6   959 224 6",
          "4359:   959 224 6   959 238 6   963 133 8   979 133 8   979 133 8   979 133 8",
          "4360:   979 133 8   979 133 8   979 133 8   979 133 8   979 330 8}",
          "4362: do_execsql_test 5.2.3.2 {",
          "4363:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4364:              rank() OVER win,",
          "4365:              dense_rank() OVER win",
          "4366:       FROM t3",
          "4367:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4368:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4369:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4370: } {295 1 1   335 1 1   607 1 1   667 1 1   742 1 1   759 1 1   845 1 1",
          "4371:   890 1 1   929 1 1   959 1 1   962 1 1   962 1 1   962 1 1   962 1 1",
          "4372:   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   1264 1 1   1264 1 1",
          "4373:   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1366 1 1   1366 1 1   1366 1 1",
          "4374:   1366 1 1   1383 1 1   1398 1 1   1406 1 1   1421 1 1   1519 1 1   1519 1 1",
          "4375:   1535 1 1   1651 1 1   1669 1 1   1682 1 1   1695 1 1   1804 1 1   1804 1 1",
          "4376:   1804 1 1   1804 1 1   1804 1 1   1897 1 1   1919 1 1   2000 1 1   2048 1 1",
          "4377:   2050 1 1   2050 1 1   2070 1 1   2086 1 1   2108 1 1   2108 1 1   2134 1 1",
          "4378:   2150 1 1   2309 1 1   2309 1 1   2309 1 1   2340 1 1   2340 1 1   2340 1 1",
          "4379:   2430 1 1   2690 1 1   2758 1 1   2770 1 1   2776 1 1   2834 1 1   2848 1 1",
          "4380:   2947 1 1   2947 1 1   2947 1 1   2947 1 1   2980 1 1   3082 1 1   3088 1 1",
          "4381:   3088 1 1   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3234 1 1   3481 1 1",
          "4382:   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1}",
          "4384: do_execsql_test 5.2.4.1 {",
          "4385:   SELECT max(c) OVER win,",
          "4386:              min(c) OVER win,",
          "4387:              count(a) OVER win",
          "4388:       FROM t3",
          "4389:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4390:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4391: } {667 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 355 0",
          "4392:   911 158 7   934 158 7   934 158 7   934 158 7   934 158 7   934 158 7",
          "4393:   934 158 7   934 158 7   934 158 20   934 158 20   934 158 20   934 158 20",
          "4394:   934 158 20   934 158 20   934 158 20   934 158 20   934 158 20   934 158 20",
          "4395:   934 158 20   934 158 20   934 158 20   934 158 26   934 158 26   934 158 26",
          "4396:   934 158 26   934 158 26   934 158 26   934 158 33   959 102 49   959 102 49",
          "4397:   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49",
          "4398:   959 102 49   959 102 49   959 102 57   959 102 57   959 102 57   959 102 57",
          "4399:   959 102 57   959 102 57   959 102 57   959 102 57   959 113 38   959 113 38",
          "4400:   959 113 38   959 113 38   959 113 49   959 158 33   959 158 33   959 158 33",
          "4401:   959 158 33   959 158 33   959 158 33   959 158 38   963 102 58   979 102 52",
          "4402:   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52",
          "4403:   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55",
          "4404:   979 102 55   979 102 55   979 102 55   979 102 58   979 102 58   979 102 58",
          "4405:   979 102 58   979 102 58   979 102 58   979 102 58   979 102 58}",
          "4407: do_execsql_test 5.2.4.2 {",
          "4408:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4409:              rank() OVER win,",
          "4410:              dense_rank() OVER win",
          "4411:       FROM t3",
          "4412:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4413:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4414: } {1383 1 1   1421 1 1   1651 1 1   1695 1 1   2050 1 1   2050 1 1   3448 7 2",
          "4415:   3732 7 2   4050 7 2   4120 7 2   4136 7 2   4359 7 2   4359 7 2   4359 7 2",
          "4416:   7129 15 3   7135 15 3   7207 15 3   7441 15 3   7447 15 3   7447 15 3",
          "4417:   7593 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3   7840 15 3",
          "4418:   7840 15 3   8447 28 4   8599 28 4   9206 28 4   9206 28 4   9206 28 4",
          "4419:   9206 28 4   10051 34 5   10165 34 5   11010 34 5   11010 34 5   11010 34 5",
          "4420:   11010 34 5   11010 34 5   11563 74 10   11697 74 10   11752 41 6",
          "4421:   11776 57 8   11900 41 6   11925 74 10   11947 74 10   12368 74 10",
          "4422:   12368 74 10   12368 74 10   12370 57 8   12416 41 6   12529 41 6",
          "4423:   12529 41 6   12530 65 9   12546 65 9   12705 57 8   12705 57 8   12705 57 8",
          "4424:   12705 57 8   12705 57 8   12705 57 8   12824 46 7   12826 65 9",
          "4425:   13050 81 11   13110 81 11   13110 81 11   13154 65 9   13196 46 7",
          "4426:   13376 65 9   13491 46 7   13491 46 7   13491 46 7   13491 46 7   13491 46 7",
          "4427:   13491 46 7   13491 46 7   13491 46 7   13491 46 7   13509 65 9   13509 65 9",
          "4428:   13509 65 9   13509 65 9   13692 81 11   13836 81 11   13949 81 11",
          "4429:   13949 81 11   13949 81 11   13949 81 11}",
          "4431: do_execsql_test 5.2.5.1 {",
          "4432:   SELECT max(c) OVER win,",
          "4433:              min(c) OVER win,",
          "4434:              count(a) OVER win",
          "4435:       FROM t3",
          "4436:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4437:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4438: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4439:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4440:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   113 113 1",
          "4441:   113 113 1   158 158 1   160 158 1   160 158 2   223 223 1   224 224 1",
          "4442:   238 234 2   239 234 2   239 238 2   252 250 2   256 252 2   257 247 4",
          "4443:   257 247 4   257 250 3   335 330 2   336 330 2   336 335 2   355 354 1",
          "4444:   355 354 2   355 355 1   399 393 3   399 393 3   399 393 3   399 393 3",
          "4445:   399 393 4   480 480 1   480 480 1   572 572 1   574 574 1   618 618 1",
          "4446:   618 618 1   633 629 2   634 627 3   634 627 3   634 627 4   634 629 3",
          "4447:   667 667 1   670 667 2   671 667 2   671 667 2   671 667 3   711 711 1",
          "4448:   711 711 1   716 705 2   726 726 1   730 730 1   762 762 1   768 759 3",
          "4449:   768 762 2   768 762 2   792 790 2   792 790 2   794 786 3   794 786 3",
          "4450:   844 839 4   845 839 4   845 839 4   845 839 4   845 839 4   870 870 1",
          "4451:   870 870 1   870 870 2   934 934 1   938 929 3   938 934 2   938 934 2",
          "4452:   959 959 1   963 963 1}",
          "4454: do_execsql_test 5.2.5.2 {",
          "4455:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4456:              rank() OVER win,",
          "4457:              dense_rank() OVER win",
          "4458:       FROM t3",
          "4459:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4460:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4461: } {{} 1 1   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 10 8",
          "4462:   {} 14 12   {} 15 13   {} 19 17   {} 20 18   {} 21 19   {} 23 21   {} 25 23",
          "4463:   {} 34 29   {} 35 30   {} 36 31   {} 37 32   {} 38 33   {} 38 33   {} 40 34",
          "4464:   {} 41 35   {} 42 36   {} 43 37   {} 43 37   {} 50 42   {} 56 47   {} 60 51",
          "4465:   {} 61 52   {} 62 53   {} 64 55   {} 64 55   {} 66 56   {} 67 57   {} 68 58",
          "4466:   {} 69 59   {} 70 60   {} 71 61   {} 72 62   {} 78 67   {} 78 67   {} 78 67",
          "4467:   {} 81 68   {} 82 69   {} 83 70   {} 85 72   {} 85 72   {} 89 75   113 2 2",
          "4468:   113 2 2   223 11 9   239 12 10   239 13 11   257 18 16   335 22 20",
          "4469:   335 24 22   355 27 25   355 27 25   504 16 14   504 17 15   705 58 49",
          "4470:   710 26 24   711 57 48   711 59 50   759 63 54   929 84 71   959 88 74",
          "4471:   963 87 73   1185 32 28   1185 32 28   1191 29 26   1191 29 26   1334 51 43",
          "4472:   1334 55 46   1338 52 44   1338 52 44   1584 31 27   1678 77 66   1684 73 63",
          "4473:   1684 73 63   1885 48 40   1889 46 39   1889 46 39   1891 45 38   1891 49 41",
          "4474:   2005 54 45   2523 75 64   2523 76 65}",
          "4476: do_execsql_test 5.2.6.1 {",
          "4477:   SELECT max(c) OVER win,",
          "4478:              min(c) OVER win,",
          "4479:              count(a) OVER win",
          "4480:       FROM t3",
          "4481:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4482:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4483: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4484:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4485:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4486:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4487:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4488:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4489:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4490:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4491:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   113 113 1",
          "4492:   113 113 1   158 158 0   158 158 1   355 355 0   355 355 1   393 393 1",
          "4493:   393 393 1   399 399 0   399 399 1   480 480 1   480 480 1   618 618 1",
          "4494:   618 618 1   629 629 0   629 629 1   667 667 0   667 667 1   768 768 1",
          "4495:   768 768 1   839 839 1   839 839 1   870 870 1   870 870 1   870 870 2",
          "4496:   938 938 1   938 938 1}",
          "4498: do_execsql_test 5.2.6.2 {",
          "4499:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4500:              rank() OVER win,",
          "4501:              dense_rank() OVER win",
          "4502:       FROM t3",
          "4503:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4504:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4505: } {{} 1 1   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 10 8",
          "4506:   {} 11 9   {} 12 10   {} 13 11   {} 14 12   {} 15 13   {} 16 14   {} 17 15",
          "4507:   {} 18 16   {} 19 17   {} 20 18   {} 21 19   {} 22 20   {} 23 21   {} 24 22",
          "4508:   {} 25 23   {} 26 24   {} 31 27   {} 34 29   {} 35 30   {} 36 31   {} 37 32",
          "4509:   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 42 36   {} 43 37   {} 43 37",
          "4510:   {} 45 38   {} 48 40   {} 49 41   {} 50 42   {} 51 43   {} 54 45   {} 55 46",
          "4511:   {} 56 47   {} 57 48   {} 58 49   {} 59 50   {} 60 51   {} 61 52   {} 62 53",
          "4512:   {} 63 54   {} 64 55   {} 64 55   {} 66 56   {} 67 57   {} 68 58   {} 69 59",
          "4513:   {} 70 60   {} 71 61   {} 72 62   {} 75 64   {} 76 65   {} 77 66   {} 78 67",
          "4514:   {} 78 67   {} 78 67   {} 81 68   {} 82 69   {} 83 70   {} 84 71   {} 85 72",
          "4515:   {} 85 72   {} 87 73   {} 88 74   {} 89 75   113 2 2   113 2 2   355 27 25",
          "4516:   355 27 25   393 29 26   393 29 26   399 32 28   399 32 28   629 46 39",
          "4517:   629 46 39   667 52 44   667 52 44   839 73 63   839 73 63}",
          "4519: do_execsql_test 5.2.7.1 {",
          "4520:   SELECT max(c) OVER win,",
          "4521:              min(c) OVER win,",
          "4522:              count(a) OVER win",
          "4523:       FROM t3",
          "4524:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "4525:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4526:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4527: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4528:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "4529:   979 158 76   979 158 77   979 160 76   979 208 75   979 223 74   979 224 73",
          "4530:   979 234 72   979 238 71   979 239 70   979 247 69   979 250 68   979 252 67",
          "4531:   979 256 66   979 257 65   979 295 64   979 309 64   979 330 62   979 335 61",
          "4532:   979 336 60   979 346 59   979 354 59   979 355 57   979 355 57   979 393 55",
          "4533:   979 393 56   979 398 54   979 399 53   979 399 53   979 412 52   979 421 51",
          "4534:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 47   979 574 45",
          "4535:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 41",
          "4536:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 35   979 667 35",
          "4537:   979 670 34   979 671 33   979 683 32   979 705 31   979 711 30   979 716 29",
          "4538:   979 726 28   979 730 27   979 759 26   979 762 25   979 768 23   979 768 24",
          "4539:   979 777 22   979 786 21   979 790 20   979 792 19   979 794 18   979 805 17",
          "4540:   979 822 17   979 839 14   979 839 15   979 840 13   979 844 12   979 845 11",
          "4541:   979 870 9   979 870 10   979 870 10   979 899 8   979 911 7}",
          "4543: do_execsql_test 5.2.7.2 {",
          "4544:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4545:              rank() OVER win,",
          "4546:              dense_rank() OVER win",
          "4547:       FROM t3",
          "4548:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "4549:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4550:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4551: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "4552:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "4553:   8129 74 74   8163 78 78   8163 79 79   8940 71 71   8968 75 75   8968 76 76",
          "4554:   9727 66 66   9745 69 69   9745 70 70   9745 72 72   10504 65 65",
          "4555:   10504 67 67   10504 68 68   11215 64 64   11844 62 62   11920 63 63",
          "4556:   13274 60 60   13274 61 61   13897 58 58   13903 57 57   13925 56 56",
          "4557:   13937 55 55   13941 59 59   15203 53 53   15241 54 54   15832 52 52",
          "4558:   17100 48 48   17104 46 46   17104 47 47   17106 45 45   17126 49 49",
          "4559:   17126 50 50   17126 51 51   17569 42 42   17733 44 44   18176 43 43",
          "4560:   18597 40 40   18597 41 41   18952 37 37   18996 39 39   19395 38 38",
          "4561:   19760 35 35   19788 36 36   20492 32 32   20492 33 33   20498 30 30",
          "4562:   20536 34 34   20833 29 29   20871 28 28   20891 31 31   21180 27 27",
          "4563:   21752 23 23   21830 26 26   22025 21 21   22087 22 22   22087 24 24",
          "4564:   22087 25 25   22278 20 20   22316 19 19   22549 15 15   22557 14 14",
          "4565:   22573 17 17   22573 18 18   22706 10 10   22796 11 11   22796 12 12",
          "4566:   22796 13 13   22796 16 16   23022 4 4   23042 2 2   23042 3 3   23042 9 9",
          "4567:   23155 1 1   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "4569: do_execsql_test 5.2.8.1 {",
          "4570:   SELECT max(c) OVER win,",
          "4571:              min(c) OVER win,",
          "4572:              count(a) OVER win",
          "4573:       FROM t3",
          "4574:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4575:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4576: } {963 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4577:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4578:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4579:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4580:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4581:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4582:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4583:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4584:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4585:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4586:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4587:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4588:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4589:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 83   979 102 83",
          "4590:   979 102 83   979 102 83   979 102 83   979 102 83   979 113 82}",
          "4592: do_execsql_test 5.2.8.2 {",
          "4593:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4594:              rank() OVER win,",
          "4595:              dense_rank() OVER win",
          "4596:       FROM t3",
          "4597:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4598:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4599: } {22176 1 1   22192 1 1   22196 1 1   22226 1 1   22244 1 1   22256 1 1",
          "4600:   22310 1 1   22316 1 1   22316 1 1   22350 1 1   22378 1 1   22396 1 1",
          "4601:   22444 1 1   22450 1 1   22472 1 1   22484 1 1   22488 1 1   22488 1 1",
          "4602:   22522 1 1   22526 1 1   22526 1 1   22528 1 1   22548 1 1   22712 1 1",
          "4603:   22734 1 1   22756 1 1   22756 1 1   22762 1 1   22762 1 1   22800 1 1",
          "4604:   22800 1 1   22820 1 1   22846 1 1   22860 1 1   22898 1 1   22908 1 1",
          "4605:   22916 1 1   22932 1 1   23022 1 1   23042 1 1   23042 1 1   23155 1 1",
          "4606:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4607:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4608:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4609:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4610:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4611:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4612:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1",
          "4613:   23155 1 1   23155 1 1   23155 1 1   23155 1 1   23155 1 1}",
          "4615: do_execsql_test 5.2.9.1 {",
          "4616:   SELECT max(c) OVER win,",
          "4617:              min(c) OVER win,",
          "4618:              count(a) OVER win",
          "4619:       FROM t3",
          "4620:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "4621:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4622:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4623: } {667 158 0   870 113 8   870 158 0   870 158 0   870 158 0   870 158 0",
          "4624:   870 355 0   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8",
          "4625:   899 113 8   899 113 8   899 113 15   899 113 15   899 113 15   899 113 15",
          "4626:   899 113 15   899 113 15   899 113 15   899 158 8   963 113 24   979 102 43",
          "4627:   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43   979 102 43",
          "4628:   979 102 43   979 102 43   979 102 43   979 102 48   979 102 48   979 102 48",
          "4629:   979 102 48   979 102 48   979 102 55   979 102 55   979 102 55   979 102 55",
          "4630:   979 102 55   979 102 55   979 102 55   979 102 61   979 102 61   979 102 61",
          "4631:   979 102 61   979 102 61   979 102 61   979 102 74   979 102 74   979 102 74",
          "4632:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74   979 102 74",
          "4633:   979 102 74   979 102 74   979 102 74   979 102 74   979 102 82   979 102 82",
          "4634:   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4635:   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24   979 113 24",
          "4636:   979 113 24   979 113 24   979 113 32   979 113 32   979 113 32   979 113 32",
          "4637:   979 113 32   979 113 32   979 113 32   979 113 32   979 113 43}",
          "4639: do_execsql_test 5.2.9.2 {",
          "4640:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4641:              rank() OVER win,",
          "4642:              dense_rank() OVER win",
          "4643:       FROM t3",
          "4644:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "4645:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4646:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4647: } {1383 84 11   1421 84 11   1651 84 11   1695 84 11   2050 84 11   2050 84 11",
          "4648:   4098 75 10   4158 75 10   4158 75 10   4740 75 10   4884 75 10   4997 75 10",
          "4649:   4997 75 10   4997 75 10   4997 75 10   6532 68 9   6666 68 9   6894 68 9",
          "4650:   6916 68 9   7337 68 9   7337 68 9   7337 68 9   9471 59 8   9487 59 8",
          "4651:   9767 59 8   10095 59 8   10317 59 8   10450 59 8   10450 59 8   10450 59 8",
          "4652:   10450 59 8   10785 51 7   11379 51 7   11714 51 7   11714 51 7   11714 51 7",
          "4653:   11714 51 7   11714 51 7   11714 51 7   12009 40 6   12381 40 6   12676 40 6",
          "4654:   12676 40 6   12676 40 6   12676 40 6   12676 40 6   12676 40 6   12676 40 6",
          "4655:   12676 40 6   12676 40 6   13418 35 5   13566 35 5   14082 35 5   14195 35 5",
          "4656:   14195 35 5   15040 28 4   15154 28 4   15999 28 4   15999 28 4   15999 28 4",
          "4657:   15999 28 4   15999 28 4   16606 22 3   16758 22 3   17365 22 3   17365 22 3",
          "4658:   17365 22 3   17365 22 3   20135 9 2   20141 9 2   20213 9 2   20447 9 2",
          "4659:   20453 9 2   20453 9 2   20599 9 2   20846 9 2   20846 9 2   20846 9 2",
          "4660:   20846 9 2   20846 9 2   20846 9 2   22244 1 1   22528 1 1   22846 1 1",
          "4661:   22916 1 1   22932 1 1   23155 1 1   23155 1 1   23155 1 1}",
          "4663: do_execsql_test 5.2.10.1 {",
          "4664:   SELECT max(c) OVER win,",
          "4665:              min(c) OVER win,",
          "4666:              count(a) OVER win",
          "4667:       FROM t3",
          "4668:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4669:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4670:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4671: } {667 158 0   671 250 6   759 158 5   768 113 4   777 113 4   777 113 4",
          "4672:   777 113 4   777 252 4   792 247 12   805 250 6   805 250 6   805 250 6",
          "4673:   805 250 6   805 250 6   805 398 6   822 158 5   822 158 5   822 158 5",
          "4674:   822 158 5   822 346 5   839 113 8   840 247 12   840 247 12   840 247 12",
          "4675:   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12   840 247 12",
          "4676:   840 247 12   840 247 12   840 393 12   845 224 6   870 102 10   870 158 0",
          "4677:   870 158 0   870 158 0   870 158 0   870 355 0   899 113 8   899 113 8",
          "4678:   899 113 8   899 113 8   899 113 8   899 113 8   899 113 8   899 234 8",
          "4679:   911 223 7   929 148 7   934 223 7   934 223 7   934 223 7   934 223 7",
          "4680:   934 223 7   934 223 7   934 239 7   938 102 10   938 102 10   938 102 10",
          "4681:   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10   938 102 10",
          "4682:   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7   938 148 7",
          "4683:   938 160 7   938 208 10   959 224 6   959 224 6   959 224 6   959 224 6",
          "4684:   959 224 6   959 238 6   963 133 8   979 133 8   979 133 8   979 133 8",
          "4685:   979 133 8   979 133 8   979 133 8   979 133 8   979 330 8}",
          "4687: do_execsql_test 5.2.10.2 {",
          "4688:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4689:              rank() OVER win,",
          "4690:              dense_rank() OVER win",
          "4691:       FROM t3",
          "4692:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4693:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4694:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4695: } {295 1 1   335 1 1   607 1 1   667 1 1   742 1 1   759 1 1   845 1 1",
          "4696:   890 1 1   929 1 1   959 1 1   962 1 1   962 1 1   962 1 1   962 1 1",
          "4697:   962 1 1   962 1 1   962 1 1   962 1 1   962 1 1   1264 1 1   1264 1 1",
          "4698:   1264 1 1   1264 1 1   1264 1 1   1264 1 1   1366 1 1   1366 1 1   1366 1 1",
          "4699:   1366 1 1   1383 1 1   1398 1 1   1406 1 1   1421 1 1   1519 1 1   1519 1 1",
          "4700:   1535 1 1   1651 1 1   1669 1 1   1682 1 1   1695 1 1   1804 1 1   1804 1 1",
          "4701:   1804 1 1   1804 1 1   1804 1 1   1897 1 1   1919 1 1   2000 1 1   2048 1 1",
          "4702:   2050 1 1   2050 1 1   2070 1 1   2086 1 1   2108 1 1   2108 1 1   2134 1 1",
          "4703:   2150 1 1   2309 1 1   2309 1 1   2309 1 1   2340 1 1   2340 1 1   2340 1 1",
          "4704:   2430 1 1   2690 1 1   2758 1 1   2770 1 1   2776 1 1   2834 1 1   2848 1 1",
          "4705:   2947 1 1   2947 1 1   2947 1 1   2947 1 1   2980 1 1   3082 1 1   3088 1 1",
          "4706:   3088 1 1   3113 1 1   3113 1 1   3113 1 1   3113 1 1   3234 1 1   3481 1 1",
          "4707:   3481 1 1   3481 1 1   3481 1 1   3481 1 1   3481 1 1}",
          "4709: do_execsql_test 5.2.11.1 {",
          "4710:   SELECT max(c) OVER win,",
          "4711:              min(c) OVER win,",
          "4712:              count(a) OVER win",
          "4713:       FROM t3",
          "4714:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4715:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4716: } {911 223 7   934 158 26   934 158 26   934 158 26   934 158 26   934 158 26",
          "4717:   934 158 33   934 223 7   934 223 7   934 223 7   934 223 7   934 223 7",
          "4718:   934 223 7   934 223 20   934 223 20   934 223 20   934 223 20   934 223 20",
          "4719:   934 223 20   934 223 20   934 223 20   934 223 20   934 223 20   934 223 20",
          "4720:   934 223 20   934 223 20   934 223 26   934 239 7   959 102 49   959 102 49",
          "4721:   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49   959 102 49",
          "4722:   959 102 49   959 102 49   959 102 57   959 102 57   959 102 57   959 102 57",
          "4723:   959 102 57   959 102 57   959 102 57   959 102 57   959 113 38   959 113 38",
          "4724:   959 113 38   959 113 38   959 113 49   959 158 33   959 158 33   959 158 33",
          "4725:   959 158 33   959 158 33   959 158 33   959 158 38   963 102 58   979 102 49",
          "4726:   979 102 49   979 102 49   979 102 49   979 102 49   979 102 49   979 102 52",
          "4727:   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52   979 102 52",
          "4728:   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55   979 102 55",
          "4729:   979 102 55   979 102 55   979 102 55   979 102 58   979 102 58   979 102 58",
          "4730:   979 102 58   979 102 58   979 102 58   979 102 58   979 102 58}",
          "4732: do_execsql_test 5.2.11.2 {",
          "4733:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4734:              rank() OVER win,",
          "4735:              dense_rank() OVER win",
          "4736:       FROM t3",
          "4737:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE CURRENT ROW  )",
          "4738:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4739: } {1398 1 1   1682 1 1   2000 1 1   2070 1 1   2086 1 1   2309 1 1   2309 1 1",
          "4740:   2309 1 1   5079 9 2   5085 9 2   5157 9 2   5391 9 2   5397 9 2   5397 9 2",
          "4741:   5543 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2   5790 9 2",
          "4742:   6397 22 3   6549 22 3   7156 22 3   7156 22 3   7156 22 3   7156 22 3",
          "4743:   8001 28 4   8115 28 4   8960 28 4   8960 28 4   8960 28 4   8960 28 4",
          "4744:   8960 28 4   9702 35 5   9850 35 5   10366 35 5   10479 35 5   10479 35 5",
          "4745:   10774 40 6   11146 40 6   11441 40 6   11441 40 6   11441 40 6   11441 40 6",
          "4746:   11441 40 6   11441 40 6   11441 40 6   11441 40 6   11441 40 6   11563 68 9",
          "4747:   11697 68 9   11776 51 7   11925 68 9   11947 68 9   12368 68 9   12368 68 9",
          "4748:   12368 68 9   12370 51 7   12530 59 8   12546 59 8   12705 51 7   12705 51 7",
          "4749:   12705 51 7   12705 51 7   12705 51 7   12705 51 7   12826 59 8",
          "4750:   13050 75 10   13110 75 10   13110 75 10   13154 59 8   13376 59 8",
          "4751:   13509 59 8   13509 59 8   13509 59 8   13509 59 8   13528 84 11",
          "4752:   13566 84 11   13692 75 10   13796 84 11   13836 75 10   13840 84 11",
          "4753:   13949 75 10   13949 75 10   13949 75 10   13949 75 10   14195 84 11",
          "4754:   14195 84 11}",
          "4756: do_execsql_test 5.2.12.1 {",
          "4757:   SELECT max(c) OVER win,",
          "4758:              min(c) OVER win,",
          "4759:              count(a) OVER win",
          "4760:       FROM t3",
          "4761:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4762:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4763: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4764:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4765:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   113 113 1",
          "4766:   113 113 1   158 158 1   160 158 1   160 158 2   223 223 1   224 224 1",
          "4767:   238 234 2   239 234 2   239 238 2   252 250 2   256 252 2   257 247 4",
          "4768:   257 247 4   257 250 3   335 330 2   336 330 2   336 335 2   355 354 1",
          "4769:   355 354 2   355 355 1   399 393 3   399 393 3   399 393 3   399 393 3",
          "4770:   399 393 4   480 480 1   480 480 1   572 572 1   574 574 1   618 618 1",
          "4771:   618 618 1   633 629 2   634 627 3   634 627 3   634 627 4   634 629 3",
          "4772:   667 667 1   670 667 2   671 667 2   671 667 2   671 667 3   711 711 1",
          "4773:   711 711 1   716 705 2   726 726 1   730 730 1   762 762 1   768 759 3",
          "4774:   768 762 2   768 762 2   792 790 2   792 790 2   794 786 3   794 786 3",
          "4775:   844 839 4   845 839 4   845 839 4   845 839 4   845 839 4   870 870 1",
          "4776:   870 870 1   870 870 2   934 934 1   938 929 3   938 934 2   938 934 2",
          "4777:   959 959 1   963 963 1}",
          "4779: do_execsql_test 5.2.12.2 {",
          "4780:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4781:              rank() OVER win,",
          "4782:              dense_rank() OVER win",
          "4783:       FROM t3",
          "4784:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4785:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4786: } {{} 1 1   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 10 8",
          "4787:   {} 14 12   {} 15 13   {} 19 17   {} 20 18   {} 21 19   {} 23 21   {} 25 23",
          "4788:   {} 34 29   {} 35 30   {} 36 31   {} 37 32   {} 38 33   {} 38 33   {} 40 34",
          "4789:   {} 41 35   {} 42 36   {} 43 37   {} 43 37   {} 50 42   {} 56 47   {} 60 51",
          "4790:   {} 61 52   {} 62 53   {} 64 55   {} 64 55   {} 66 56   {} 67 57   {} 68 58",
          "4791:   {} 69 59   {} 70 60   {} 71 61   {} 72 62   {} 78 67   {} 78 67   {} 78 67",
          "4792:   {} 81 68   {} 82 69   {} 83 70   {} 85 72   {} 85 72   {} 89 75   113 2 2",
          "4793:   113 2 2   223 11 9   239 12 10   239 13 11   257 18 16   335 22 20",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4117:   1684 73 63   1885 48 40   1889 46 39   1889 46 39   1891 45 38   1891 49 41",
          "4118:   2005 54 45   2523 75 64   2523 76 65}",
          "4121:   SELECT max(c) OVER win,",
          "4122:              min(c) OVER win,",
          "4123:              count(a) OVER win",
          "4124:       FROM t3",
          "4127: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4128:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4129:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "",
          "[Removed Lines]",
          "4120: do_execsql_test 5.2.6.1 {",
          "4125:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4126:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4801: do_execsql_test 5.2.13.1 {",
          "4806:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4807:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4139:   768 768 1   839 839 1   839 839 1   870 870 1   870 870 1   870 870 2",
          "4140:   938 938 1   938 938 1}",
          "4143:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4144:              rank() OVER win,",
          "4145:              dense_rank() OVER win",
          "4146:       FROM t3",
          "4149: } {{} 1 1   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 10 8",
          "4150:   {} 11 9   {} 12 10   {} 13 11   {} 14 12   {} 15 13   {} 16 14   {} 17 15",
          "4151:   {} 18 16   {} 19 17   {} 20 18   {} 21 19   {} 22 20   {} 23 21   {} 24 22",
          "",
          "[Removed Lines]",
          "4142: do_execsql_test 5.2.6.2 {",
          "4147:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4148:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4823: do_execsql_test 5.2.13.2 {",
          "4828:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4829:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4160:   355 27 25   393 29 26   393 29 26   399 32 28   399 32 28   629 46 39",
          "4161:   629 46 39   667 52 44   667 52 44   839 73 63   839 73 63}",
          "4164:   SELECT max(c) OVER win,",
          "4165:              min(c) OVER win,",
          "4166:              count(a) OVER win",
          "4167:       FROM t3",
          "4169:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4171: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4172:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "4173:   979 158 76   979 158 77   979 160 76   979 208 75   979 223 74   979 224 73",
          "4174:   979 234 72   979 238 71   979 239 70   979 247 69   979 250 68   979 252 67",
          "4181:   979 670 34   979 671 33   979 683 32   979 705 31   979 711 30   979 716 29",
          "4182:   979 726 28   979 730 27   979 759 26   979 762 25   979 768 23   979 768 24",
          "4183:   979 777 22   979 786 21   979 790 20   979 792 19   979 794 18   979 805 17",
          "4188:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4189:              rank() OVER win,",
          "4190:              dense_rank() OVER win",
          "4191:       FROM t3",
          "4193:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "4195: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "4196:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "4197:   8129 74 74   8163 78 78   8163 79 79   8940 71 71   8968 75 75   8968 76 76",
          "",
          "[Removed Lines]",
          "4163: do_execsql_test 5.2.7.1 {",
          "4168:       WINDOW win AS (  ORDER BY c , b , a",
          "4170:       ORDER BY 1 , 2 , 3",
          "4175:   979 256 66   979 257 65   979 295 64   979 309 64   979 330 62   979 335 61",
          "4176:   979 336 60   979 346 59   979 354 59   979 355 57   979 355 57   979 393 55",
          "4177:   979 393 56   979 398 54   979 399 53   979 399 53   979 412 52   979 421 51",
          "4178:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 47   979 574 45",
          "4179:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 41",
          "4180:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 35   979 667 35",
          "4184:   979 822 17   979 839 14   979 839 15   979 840 13   979 844 12   979 845 11",
          "4185:   979 870 9   979 870 10   979 870 10   979 899 8   979 911 7}",
          "4187: do_execsql_test 5.2.7.2 {",
          "4192:       WINDOW win AS (  ORDER BY c , b , a",
          "4194:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4844: do_execsql_test 5.2.14.1 {",
          "4849:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "4851:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "4856:   979 256 66   979 257 65   979 295 64   979 309 63   979 330 63   979 335 61",
          "4857:   979 336 60   979 346 59   979 354 58   979 355 56   979 355 58   979 393 55",
          "4858:   979 393 56   979 398 54   979 399 52   979 399 53   979 412 52   979 421 51",
          "4859:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 46   979 574 46",
          "4860:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 40",
          "4861:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 34   979 667 35",
          "4865:   979 822 16   979 839 15   979 839 15   979 840 13   979 844 12   979 845 11",
          "4866:   979 870 8   979 870 9   979 870 10   979 899 8   979 911 7}",
          "4868: do_execsql_test 5.2.14.2 {",
          "4873:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "4875:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4216:              count(a) OVER win",
          "4217:       FROM t3",
          "4218:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4220: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4221:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4222:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "",
          "[Removed Lines]",
          "4219:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4900:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4237:              dense_rank() OVER win",
          "4238:       FROM t3",
          "4239:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4241: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4242:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4243:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "",
          "[Removed Lines]",
          "4240:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4921:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4256:              min(c) OVER win,",
          "4257:              count(a) OVER win",
          "4258:       FROM t3",
          "4260:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4262: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4263:   {} {} 0   {} {} 0   899 113 9   899 113 9   899 113 9   899 113 9",
          "4264:   899 113 9   899 113 9   899 113 9   899 113 16   899 113 16   899 113 16",
          "",
          "[Removed Lines]",
          "4259:       WINDOW win AS (  ORDER BY a",
          "4261:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4940:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "4942:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4280:              rank() OVER win,",
          "4281:              dense_rank() OVER win",
          "4282:       FROM t3",
          "4284:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4286: } {{} 81 11   {} 81 11   {} 81 11   {} 81 11   {} 81 11   {} 81 11   {} 81 11",
          "4287:   {} 81 11   {} 81 11   2947 74 10   2947 74 10   2947 74 10   2947 74 10",
          "4288:   2947 74 10   2947 74 10   2947 74 10   5287 65 9   5287 65 9   5287 65 9",
          "",
          "[Removed Lines]",
          "4283:       WINDOW win AS (  ORDER BY a",
          "4285:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4964:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "4966:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4306:       FROM t3",
          "4307:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4308:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4310: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4311:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4312:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "",
          "[Removed Lines]",
          "4309:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "4990:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4328:       FROM t3",
          "4329:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4330:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4332: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4333:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4334:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "",
          "[Removed Lines]",
          "4331:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5012:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4347:              min(c) OVER win,",
          "4348:              count(a) OVER win",
          "4349:       FROM t3",
          "4352: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   870 158 0",
          "4353:   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0",
          "4354:   870 158 0   934 158 8   934 158 8   934 158 8   934 158 8   934 158 8",
          "",
          "[Removed Lines]",
          "4350:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "4351:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5031:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "5032:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4370:              rank() OVER win,",
          "4371:              dense_rank() OVER win",
          "4372:       FROM t3",
          "4375: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   2050 7 2   2050 7 2",
          "4376:   2050 7 2   2050 7 2   2050 7 2   2050 7 2   2050 7 2   2050 7 2   4359 15 3",
          "4377:   4359 15 3   4359 15 3   4359 15 3   4359 15 3   4359 15 3   4359 15 3",
          "",
          "[Removed Lines]",
          "4373:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "4374:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5054:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "5055:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4388:   11441 57 8   12529 46 7   12529 46 7   12529 46 7   12529 46 7   12529 46 7",
          "4389:   12529 46 7   12529 46 7   12529 46 7   12529 46 7   12529 46 7   12529 46 7}",
          "4392:   SELECT max(c) OVER win,",
          "4393:              min(c) OVER win,",
          "4394:              count(a) OVER win",
          "4395:       FROM t3",
          "4398: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4399:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4400:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "",
          "[Removed Lines]",
          "4391: do_execsql_test 5.3.5.1 {",
          "4396:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "4397:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5072: do_execsql_test 5.3.5.1 {",
          "5073:   SELECT max(c) OVER win,",
          "5074:              min(c) OVER win,",
          "5075:              count(a) OVER win",
          "5076:       FROM t3",
          "5077:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "5078:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5079: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5080:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5081:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5082:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5083:   {} {} 0   158 158 1   160 160 1   160 160 1   223 223 1   224 224 1",
          "5084:   238 234 2   239 234 2   239 238 2   252 250 2   256 252 2   257 247 4",
          "5085:   257 247 4   257 250 3   335 330 2   336 330 2   336 335 2   354 354 1",
          "5086:   354 354 1   355 355 1   398 393 3   398 393 3   399 393 3   399 398 2",
          "5087:   399 398 2   572 572 1   574 574 1   633 629 2   634 627 3   634 627 3",
          "5088:   634 627 3   634 629 3   667 667 1   670 667 2   671 667 2   671 670 2",
          "5089:   671 670 2   711 711 1   711 711 1   716 705 2   726 726 1   730 730 1",
          "5090:   762 762 1   762 762 1   762 762 1   768 759 3   792 790 2   792 790 2",
          "5091:   794 786 3   794 786 3   844 839 4   845 839 4   845 839 4   845 840 3",
          "5092:   845 840 3   934 934 1   934 934 1   934 934 1   938 929 3   959 959 1",
          "5093:   963 963 1}",
          "5095: do_execsql_test 5.3.5.2 {",
          "5096:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5097:              rank() OVER win,",
          "5098:              dense_rank() OVER win",
          "5099:       FROM t3",
          "5100:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "5101:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5102: } {{} 1 1   {} 2 2   {} 2 2   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6",
          "5103:   {} 9 7   {} 10 8   {} 14 12   {} 15 13   {} 19 17   {} 20 18   {} 21 19",
          "5104:   {} 23 21   {} 25 23   {} 27 25   {} 27 25   {} 34 29   {} 35 30   {} 36 31",
          "5105:   {} 37 32   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 42 36   {} 43 37",
          "5106:   {} 43 37   {} 50 42   {} 56 47   {} 60 51   {} 61 52   {} 62 53   {} 64 55",
          "5107:   {} 64 55   {} 66 56   {} 67 57   {} 68 58   {} 69 59   {} 70 60   {} 71 61",
          "5108:   {} 72 62   {} 78 67   {} 78 67   {} 78 67   {} 81 68   {} 82 69   {} 83 70",
          "5109:   {} 85 72   {} 85 72   {} 89 75   223 11 9   239 12 10   239 13 11",
          "5110:   257 18 16   335 22 20   335 24 22   504 16 14   504 17 15   671 52 44",
          "5111:   671 52 44   705 58 49   710 26 24   711 57 48   711 59 50   759 63 54",
          "5112:   786 32 28   786 32 28   798 29 26   798 29 26   845 73 63   845 73 63",
          "5113:   929 84 71   959 88 74   963 87 73   1260 46 39   1260 46 39   1334 51 43",
          "5114:   1334 55 46   1584 31 27   1678 77 66   1885 48 40   1891 45 38   1891 49 41",
          "5115:   2005 54 45   2523 75 64   2523 76 65}",
          "5117: do_execsql_test 5.3.6.1 {",
          "5118:   SELECT max(c) OVER win,",
          "5119:              min(c) OVER win,",
          "5120:              count(a) OVER win",
          "5121:       FROM t3",
          "5122:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "5123:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5124: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5125:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5126:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5127:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5128:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5129:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5130:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5131:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5132:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5133:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5134:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5135:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5136:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0}",
          "5138: do_execsql_test 5.3.6.2 {",
          "5139:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5140:              rank() OVER win,",
          "5141:              dense_rank() OVER win",
          "5142:       FROM t3",
          "5143:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "5144:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5145: } {{} 1 1   {} 2 2   {} 2 2   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6",
          "5146:   {} 9 7   {} 10 8   {} 11 9   {} 12 10   {} 13 11   {} 14 12   {} 15 13",
          "5147:   {} 16 14   {} 17 15   {} 18 16   {} 19 17   {} 20 18   {} 21 19   {} 22 20",
          "5148:   {} 23 21   {} 24 22   {} 25 23   {} 26 24   {} 27 25   {} 27 25   {} 29 26",
          "5149:   {} 29 26   {} 31 27   {} 32 28   {} 32 28   {} 34 29   {} 35 30   {} 36 31",
          "5150:   {} 37 32   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 42 36   {} 43 37",
          "5151:   {} 43 37   {} 45 38   {} 46 39   {} 46 39   {} 48 40   {} 49 41   {} 50 42",
          "5152:   {} 51 43   {} 52 44   {} 52 44   {} 54 45   {} 55 46   {} 56 47   {} 57 48",
          "5153:   {} 58 49   {} 59 50   {} 60 51   {} 61 52   {} 62 53   {} 63 54   {} 64 55",
          "5154:   {} 64 55   {} 66 56   {} 67 57   {} 68 58   {} 69 59   {} 70 60   {} 71 61",
          "5155:   {} 72 62   {} 73 63   {} 73 63   {} 75 64   {} 76 65   {} 77 66   {} 78 67",
          "5156:   {} 78 67   {} 78 67   {} 81 68   {} 82 69   {} 83 70   {} 84 71   {} 85 72",
          "5157:   {} 85 72   {} 87 73   {} 88 74   {} 89 75}",
          "5159: do_execsql_test 5.3.7.1 {",
          "5160:   SELECT max(c) OVER win,",
          "5161:              min(c) OVER win,",
          "5162:              count(a) OVER win",
          "5163:       FROM t3",
          "5164:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "5165:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5166:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5167: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "5168:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "5169:   979 158 76   979 158 77   979 160 76   979 208 75   979 223 74   979 224 73",
          "5170:   979 234 72   979 238 71   979 239 70   979 247 69   979 250 68   979 252 67",
          "5171:   979 256 66   979 257 65   979 295 64   979 309 64   979 330 62   979 335 61",
          "5172:   979 336 60   979 346 59   979 354 59   979 355 57   979 355 57   979 393 55",
          "5173:   979 393 56   979 398 54   979 399 53   979 399 53   979 412 52   979 421 51",
          "5174:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 47   979 574 45",
          "5175:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 41",
          "5176:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 35   979 667 35",
          "5177:   979 670 34   979 671 33   979 683 32   979 705 31   979 711 30   979 716 29",
          "5178:   979 726 28   979 730 27   979 759 26   979 762 25   979 768 23   979 768 24",
          "5179:   979 777 22   979 786 21   979 790 20   979 792 19   979 794 18   979 805 17",
          "5180:   979 822 17   979 839 14   979 839 15   979 840 13   979 844 12   979 845 11",
          "5181:   979 870 9   979 870 10   979 870 10   979 899 8   979 911 7}",
          "5183: do_execsql_test 5.3.7.2 {",
          "5184:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5185:              rank() OVER win,",
          "5186:              dense_rank() OVER win",
          "5187:       FROM t3",
          "5188:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "5189:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5190:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5191: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "5192:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "5193:   8129 74 74   8163 78 78   8163 79 79   8940 71 71   8968 75 75   8968 76 76",
          "5194:   9727 66 66   9745 69 69   9745 70 70   9745 72 72   10504 65 65",
          "5195:   10504 67 67   10504 68 68   11215 64 64   11844 62 62   11920 63 63",
          "5196:   13274 60 60   13274 61 61   13897 58 58   13903 57 57   13925 56 56",
          "5197:   13937 55 55   13941 59 59   15203 53 53   15241 54 54   15832 52 52",
          "5198:   17100 48 48   17104 46 46   17104 47 47   17106 45 45   17126 49 49",
          "5199:   17126 50 50   17126 51 51   17569 42 42   17733 44 44   18176 43 43",
          "5200:   18597 40 40   18597 41 41   18952 37 37   18996 39 39   19395 38 38",
          "5201:   19760 35 35   19788 36 36   20492 32 32   20492 33 33   20498 30 30",
          "5202:   20536 34 34   20833 29 29   20871 28 28   20891 31 31   21180 27 27",
          "5203:   21752 23 23   21830 26 26   22025 21 21   22087 22 22   22087 24 24",
          "5204:   22087 25 25   22278 20 20   22316 19 19   22549 15 15   22557 14 14",
          "5205:   22573 17 17   22573 18 18   22706 10 10   22796 11 11   22796 12 12",
          "5206:   22796 13 13   22796 16 16   23022 4 4   23042 2 2   23042 3 3   23042 9 9",
          "5207:   23155 1 1   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "5209: do_execsql_test 5.3.8.1 {",
          "5210:   SELECT max(c) OVER win,",
          "5211:              min(c) OVER win,",
          "5212:              count(a) OVER win",
          "5213:       FROM t3",
          "5214:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5215:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5216: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5217:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5218:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5219:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5220:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5221:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5222:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5223:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5224:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5225:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5226:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5227:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5228:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0}",
          "5230: do_execsql_test 5.3.8.2 {",
          "5231:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5232:              rank() OVER win,",
          "5233:              dense_rank() OVER win",
          "5234:       FROM t3",
          "5235:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5236:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5237: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5238:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5239:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5240:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5241:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5242:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5243:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5244:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5245:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5246:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5247:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5248:   {} 1 1}",
          "5250: do_execsql_test 5.3.9.1 {",
          "5251:   SELECT max(c) OVER win,",
          "5252:              min(c) OVER win,",
          "5253:              count(a) OVER win",
          "5254:       FROM t3",
          "5255:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "5256:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5257:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5258: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   870 158 0",
          "5259:   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0   870 158 0",
          "5260:   870 158 0   870 158 0   899 113 9   899 113 9   899 113 9   899 113 9",
          "5261:   899 113 9   899 113 9   899 113 9   899 113 16   899 113 16   899 113 16",
          "5262:   899 113 16   899 113 16   899 113 16   899 113 16   899 113 16   899 113 16",
          "5263:   979 102 44   979 102 44   979 102 44   979 102 44   979 102 44   979 102 49",
          "5264:   979 102 49   979 102 49   979 102 49   979 102 49   979 102 49   979 102 49",
          "5265:   979 102 56   979 102 56   979 102 56   979 102 56   979 102 56   979 102 56",
          "5266:   979 102 62   979 102 62   979 102 62   979 102 62   979 102 62   979 102 62",
          "5267:   979 102 62   979 102 62   979 102 62   979 102 62   979 102 62   979 102 62",
          "5268:   979 102 62   979 102 75   979 102 75   979 102 75   979 102 75   979 102 75",
          "5269:   979 102 75   979 102 75   979 102 75   979 113 25   979 113 25   979 113 25",
          "5270:   979 113 25   979 113 25   979 113 25   979 113 25   979 113 25   979 113 33",
          "5271:   979 113 33   979 113 33   979 113 33   979 113 33   979 113 33   979 113 33",
          "5272:   979 113 33   979 113 33   979 113 33   979 113 33}",
          "5274: do_execsql_test 5.3.9.2 {",
          "5275:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5276:              rank() OVER win,",
          "5277:              dense_rank() OVER win",
          "5278:       FROM t3",
          "5279:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "5280:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5281:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5282: } {{} 84 11   {} 84 11   {} 84 11   {} 84 11   {} 84 11   {} 84 11",
          "5283:   2050 75 10   2050 75 10   2050 75 10   2050 75 10   2050 75 10   2050 75 10",
          "5284:   2050 75 10   2050 75 10   2050 75 10   4997 68 9   4997 68 9   4997 68 9",
          "5285:   4997 68 9   4997 68 9   4997 68 9   4997 68 9   7337 59 8   7337 59 8",
          "5286:   7337 59 8   7337 59 8   7337 59 8   7337 59 8   7337 59 8   7337 59 8",
          "5287:   7337 59 8   10450 51 7   10450 51 7   10450 51 7   10450 51 7   10450 51 7",
          "5288:   10450 51 7   10450 51 7   10450 51 7   11714 40 6   11714 40 6   11714 40 6",
          "5289:   11714 40 6   11714 40 6   11714 40 6   11714 40 6   11714 40 6   11714 40 6",
          "5290:   11714 40 6   11714 40 6   12676 35 5   12676 35 5   12676 35 5   12676 35 5",
          "5291:   12676 35 5   14195 28 4   14195 28 4   14195 28 4   14195 28 4   14195 28 4",
          "5292:   14195 28 4   14195 28 4   15999 22 3   15999 22 3   15999 22 3   15999 22 3",
          "5293:   15999 22 3   15999 22 3   17365 9 2   17365 9 2   17365 9 2   17365 9 2",
          "5294:   17365 9 2   17365 9 2   17365 9 2   17365 9 2   17365 9 2   17365 9 2",
          "5295:   17365 9 2   17365 9 2   17365 9 2   20846 1 1   20846 1 1   20846 1 1",
          "5296:   20846 1 1   20846 1 1   20846 1 1   20846 1 1   20846 1 1}",
          "5298: do_execsql_test 5.3.10.1 {",
          "5299:   SELECT max(c) OVER win,",
          "5300:              min(c) OVER win,",
          "5301:              count(a) OVER win",
          "5302:       FROM t3",
          "5303:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "5304:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5305:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5306: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5307:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5308:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5309:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5310:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5311:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5312:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5313:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5314:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5315:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5316:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5317:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5318:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0}",
          "5320: do_execsql_test 5.3.10.2 {",
          "5321:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5322:              rank() OVER win,",
          "5323:              dense_rank() OVER win",
          "5324:       FROM t3",
          "5325:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "5326:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "5327:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5328: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5329:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5330:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5331:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5332:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5333:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5334:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5335:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5336:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5337:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5338:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5339:   {} 1 1}",
          "5341: do_execsql_test 5.3.11.1 {",
          "5342:   SELECT max(c) OVER win,",
          "5343:              min(c) OVER win,",
          "5344:              count(a) OVER win",
          "5345:       FROM t3",
          "5346:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "5347:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5348: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "5349:   {} {} 0   934 158 27   934 158 27   934 158 27   934 158 27   934 158 27",
          "5350:   934 158 27   934 158 27   934 223 8   934 223 8   934 223 8   934 223 8",
          "5351:   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8   934 223 8",
          "5352:   934 223 8   934 223 8   934 223 8   934 223 21   934 223 21   934 223 21",
          "5353:   934 223 21   934 223 21   934 223 21   959 102 50   959 102 50   959 102 50",
          "5354:   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50",
          "5355:   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50   959 102 50",
          "5356:   959 102 50   959 102 50   959 113 39   959 113 39   959 113 39   959 113 39",
          "5357:   959 113 39   959 113 39   959 113 39   959 113 39   959 113 39   959 113 39",
          "5358:   959 113 39   959 158 34   959 158 34   959 158 34   959 158 34   959 158 34",
          "5359:   979 102 46   979 102 46   979 102 46   979 102 46   979 102 46   979 102 46",
          "5360:   979 102 46   979 102 47   979 102 47   979 102 47   979 102 47   979 102 47",
          "5361:   979 102 47   979 102 47   979 102 47   979 102 47   979 102 49   979 102 49",
          "5362:   979 102 49   979 102 49   979 102 49   979 102 49}",
          "5364: do_execsql_test 5.3.11.2 {",
          "5365:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5366:              rank() OVER win,",
          "5367:              dense_rank() OVER win",
          "5368:       FROM t3",
          "5369:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE GROUP  )",
          "5370:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5371: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5372:   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2",
          "5373:   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   5790 22 3",
          "5374:   5790 22 3   5790 22 3   5790 22 3   5790 22 3   5790 22 3   7156 28 4",
          "5375:   7156 28 4   7156 28 4   7156 28 4   7156 28 4   7156 28 4   7156 28 4",
          "5376:   8960 35 5   8960 35 5   8960 35 5   8960 35 5   8960 35 5   10028 68 9",
          "5377:   10028 68 9   10028 68 9   10028 68 9   10028 68 9   10028 68 9   10028 68 9",
          "5378:   10396 59 8   10396 59 8   10396 59 8   10396 59 8   10396 59 8   10396 59 8",
          "5379:   10396 59 8   10396 59 8   10396 59 8   10479 40 6   10479 40 6   10479 40 6",
          "5380:   10479 40 6   10479 40 6   10479 40 6   10479 40 6   10479 40 6   10479 40 6",
          "5381:   10479 40 6   10479 40 6   11002 75 10   11002 75 10   11002 75 10",
          "5382:   11002 75 10   11002 75 10   11002 75 10   11002 75 10   11002 75 10",
          "5383:   11002 75 10   11441 51 7   11441 51 7   11441 51 7   11441 51 7",
          "5384:   11441 51 7   11441 51 7   11441 51 7   11441 51 7   12145 84 11",
          "5385:   12145 84 11   12145 84 11   12145 84 11   12145 84 11   12145 84 11}",
          "5387: do_execsql_test 5.3.12.1 {",
          "5392:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "5393:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4411:   845 840 3   934 934 1   934 934 1   934 934 1   938 929 3   959 959 1",
          "4412:   963 963 1}",
          "4415:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4416:              rank() OVER win,",
          "4417:              dense_rank() OVER win",
          "4418:       FROM t3",
          "4421: } {{} 1 1   {} 2 2   {} 2 2   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6",
          "4422:   {} 9 7   {} 10 8   {} 14 12   {} 15 13   {} 19 17   {} 20 18   {} 21 19",
          "4423:   {} 23 21   {} 25 23   {} 27 25   {} 27 25   {} 34 29   {} 35 30   {} 36 31",
          "",
          "[Removed Lines]",
          "4414: do_execsql_test 5.3.5.2 {",
          "4419:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "4420:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5410: do_execsql_test 5.3.12.2 {",
          "5415:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE GROUP  )",
          "5416:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4433:   1334 55 46   1584 31 27   1678 77 66   1885 48 40   1891 45 38   1891 49 41",
          "4434:   2005 54 45   2523 75 64   2523 76 65}",
          "4437:   SELECT max(c) OVER win,",
          "4438:              min(c) OVER win,",
          "4439:              count(a) OVER win",
          "4440:       FROM t3",
          "4443: } {{} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4444:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4445:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "",
          "[Removed Lines]",
          "4436: do_execsql_test 5.3.6.1 {",
          "4441:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "4442:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5432: do_execsql_test 5.3.13.1 {",
          "5437:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "5438:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4454:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0",
          "4455:   {} {} 0   {} {} 0   {} {} 0   {} {} 0   {} {} 0}",
          "4458:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4459:              rank() OVER win,",
          "4460:              dense_rank() OVER win",
          "4461:       FROM t3",
          "4464: } {{} 1 1   {} 2 2   {} 2 2   {} 4 3   {} 5 4   {} 6 5   {} 6 5   {} 8 6",
          "4465:   {} 9 7   {} 10 8   {} 11 9   {} 12 10   {} 13 11   {} 14 12   {} 15 13",
          "4466:   {} 16 14   {} 17 15   {} 18 16   {} 19 17   {} 20 18   {} 21 19   {} 22 20",
          "",
          "[Removed Lines]",
          "4457: do_execsql_test 5.3.6.2 {",
          "4462:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "4463:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5453: do_execsql_test 5.3.13.2 {",
          "5458:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE GROUP  )",
          "5459:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4475:   {} 78 67   {} 78 67   {} 81 68   {} 82 69   {} 83 70   {} 84 71   {} 85 72",
          "4476:   {} 85 72   {} 87 73   {} 88 74   {} 89 75}",
          "4479:   SELECT max(c) OVER win,",
          "4480:              min(c) OVER win,",
          "4481:              count(a) OVER win",
          "4482:       FROM t3",
          "4484:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4486: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4487:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "4488:   979 158 76   979 158 77   979 160 76   979 208 75   979 223 74   979 224 73",
          "4489:   979 234 72   979 238 71   979 239 70   979 247 69   979 250 68   979 252 67",
          "4496:   979 670 34   979 671 33   979 683 32   979 705 31   979 711 30   979 716 29",
          "4497:   979 726 28   979 730 27   979 759 26   979 762 25   979 768 23   979 768 24",
          "4498:   979 777 22   979 786 21   979 790 20   979 792 19   979 794 18   979 805 17",
          "4503:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "4504:              rank() OVER win,",
          "4505:              dense_rank() OVER win",
          "4506:       FROM t3",
          "4508:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "4510: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "4511:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "4512:   8129 74 74   8163 78 78   8163 79 79   8940 71 71   8968 75 75   8968 76 76",
          "",
          "[Removed Lines]",
          "4478: do_execsql_test 5.3.7.1 {",
          "4483:       WINDOW win AS (  ORDER BY c , b , a",
          "4485:       ORDER BY 1 , 2 , 3",
          "4490:   979 256 66   979 257 65   979 295 64   979 309 64   979 330 62   979 335 61",
          "4491:   979 336 60   979 346 59   979 354 59   979 355 57   979 355 57   979 393 55",
          "4492:   979 393 56   979 398 54   979 399 53   979 399 53   979 412 52   979 421 51",
          "4493:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 47   979 574 45",
          "4494:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 41",
          "4495:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 35   979 667 35",
          "4499:   979 822 17   979 839 14   979 839 15   979 840 13   979 844 12   979 845 11",
          "4500:   979 870 9   979 870 10   979 870 10   979 899 8   979 911 7}",
          "4502: do_execsql_test 5.3.7.2 {",
          "4507:       WINDOW win AS (  ORDER BY c , b , a",
          "4509:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5474: do_execsql_test 5.3.14.1 {",
          "5479:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "5481:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5486:   979 256 66   979 257 65   979 295 64   979 309 63   979 330 63   979 335 61",
          "5487:   979 336 60   979 346 59   979 354 58   979 355 56   979 355 58   979 393 55",
          "5488:   979 393 56   979 398 54   979 399 52   979 399 53   979 412 52   979 421 51",
          "5489:   979 430 50   979 443 49   979 480 47   979 480 48   979 572 46   979 574 46",
          "5490:   979 607 44   979 618 42   979 618 43   979 627 41   979 629 40   979 629 40",
          "5491:   979 633 39   979 634 38   979 652 37   979 660 36   979 667 34   979 667 35",
          "5495:   979 822 16   979 839 15   979 839 15   979 840 13   979 844 12   979 845 11",
          "5496:   979 870 8   979 870 9   979 870 10   979 899 8   979 911 7}",
          "5498: do_execsql_test 5.3.14.2 {",
          "5503:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "5505:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4531:              count(a) OVER win",
          "4532:       FROM t3",
          "4533:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4535: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "4536:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "4537:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "",
          "[Removed Lines]",
          "4534:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5530:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4554:              dense_rank() OVER win",
          "4555:       FROM t3",
          "4556:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4558: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4559:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4560:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "",
          "[Removed Lines]",
          "4557:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5553:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4573:              min(c) OVER win,",
          "4574:              count(a) OVER win",
          "4575:       FROM t3",
          "4577:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4579: } {113 113 1   234 234 1   257 257 1   336 336 1   354 354 1   768 768 1",
          "4580:   839 839 1   839 839 1   899 113 10   899 113 10   899 113 10   899 113 10",
          "4581:   899 113 10   899 113 10   899 113 10   899 113 17   899 113 17   899 113 17",
          "",
          "[Removed Lines]",
          "4576:       WINDOW win AS (  ORDER BY a",
          "4578:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5572:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "5574:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4597:              rank() OVER win,",
          "4598:              dense_rank() OVER win",
          "4599:       FROM t3",
          "4601:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4603: } {{} 81 11   {} 81 11   {} 81 11   {} 81 11   113 81 11   257 81 11",
          "4604:   839 81 11   839 81 11   899 81 11   2947 74 10   2947 74 10   2947 74 10",
          "4605:   3368 74 10   3390 74 10   3618 74 10   3752 74 10   5287 65 9   5287 65 9",
          "",
          "[Removed Lines]",
          "4600:       WINDOW win AS (  ORDER BY a",
          "4602:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5596:       WINDOW win AS (  ORDER BY a NULLS FIRST",
          "5598:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4623:       FROM t3",
          "4624:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4625:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4627: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "4628:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "4629:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "",
          "[Removed Lines]",
          "4626:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5622:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4647:       FROM t3",
          "4648:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "4649:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4651: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4652:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "4653:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "",
          "[Removed Lines]",
          "4650:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5646:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4666:              min(c) OVER win,",
          "4667:              count(a) OVER win",
          "4668:       FROM t3",
          "4671: } {158 158 0   355 355 0   399 399 0   629 629 0   667 667 0   870 158 1",
          "4672:   870 158 1   870 158 1   870 158 1   870 158 1   870 158 1   870 870 0",
          "4673:   911 158 1   934 158 1   934 158 9   934 158 9   934 158 9   934 158 9",
          "",
          "[Removed Lines]",
          "4669:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "4670:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5665:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "5666:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4689:              rank() OVER win,",
          "4690:              dense_rank() OVER win",
          "4691:       FROM t3",
          "4694: } {{} 1 1   {} 1 1   355 1 1   399 1 1   629 1 1   667 1 1   2050 7 2",
          "4695:   2050 7 2   2050 7 2   2273 7 2   2289 7 2   2359 7 2   2677 7 2   2961 7 2",
          "4696:   4359 15 3   4359 15 3   4359 15 3   4359 15 3   4359 15 3   4359 15 3",
          "",
          "[Removed Lines]",
          "4692:       WINDOW win AS (  ORDER BY a  GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "4693:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5688:       WINDOW win AS (  ORDER BY a NULLS FIRST GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "5689:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4713:              min(c) OVER win,",
          "4714:              count(a) OVER win",
          "4715:       FROM t3",
          "4718: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   160 158 1",
          "4719:   160 158 2   160 158 2   208 208 1   224 223 2   224 223 2   239 234 3",
          "4720:   239 234 3   239 234 3   252 247 3   257 247 5   257 247 5   257 250 4",
          "",
          "[Removed Lines]",
          "4716:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "4717:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5712:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "5713:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4736:              rank() OVER win,",
          "4737:              dense_rank() OVER win",
          "4738:       FROM t3",
          "4741: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 25 23   {} 34 29",
          "4742:   {} 36 31   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 43 37   {} 43 37",
          "4743:   {} 50 42   {} 60 51   {} 61 52   {} 64 55   {} 64 55   {} 67 57   {} 68 58",
          "",
          "[Removed Lines]",
          "4739:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "4740:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5735:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "5736:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4758:              min(c) OVER win,",
          "4759:              count(a) OVER win",
          "4760:       FROM t3",
          "4763: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "4764:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "4765:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "",
          "[Removed Lines]",
          "4761:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "4762:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5757:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "5758:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4781:              rank() OVER win,",
          "4782:              dense_rank() OVER win",
          "4783:       FROM t3",
          "4786: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 11 9   {} 12 10",
          "4787:   {} 13 11   {} 16 14   {} 17 15   {} 18 16   {} 22 20   {} 24 22   {} 25 23",
          "4788:   {} 26 24   {} 31 27   {} 34 29   {} 36 31   {} 38 33   {} 38 33   {} 40 34",
          "",
          "[Removed Lines]",
          "4784:       WINDOW win AS (  ORDER BY c  RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "4785:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5780:       WINDOW win AS (  ORDER BY c NULLS FIRST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "5781:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4803:              min(c) OVER win,",
          "4804:              count(a) OVER win",
          "4805:       FROM t3",
          "4807:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4809: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "4810:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "4811:   979 158 78   979 160 77   979 208 76   979 223 75   979 224 74   979 234 73",
          "",
          "[Removed Lines]",
          "4806:       WINDOW win AS (  ORDER BY c , b , a",
          "4808:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5802:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "5804:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4827:              rank() OVER win,",
          "4828:              dense_rank() OVER win",
          "4829:       FROM t3",
          "4831:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "4833: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "4834:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "4835:   8968 73 73   8968 74 74   8968 75 75   8968 76 76   8968 77 77   9745 69 69",
          "",
          "[Removed Lines]",
          "4830:       WINDOW win AS (  ORDER BY c , b , a",
          "4832:       ORDER BY 1 , 2 , 3",
          "",
          "[Added Lines]",
          "5826:       WINDOW win AS (  ORDER BY c NULLS FIRST, b NULLS FIRST, a NULLS FIRST",
          "5827:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5828:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5829: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "5830:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "5831:   8968 73 73   8968 74 74   8968 75 75   8968 76 76   8968 77 77   9745 69 69",
          "5832:   9745 70 70   9745 71 71   9745 72 72   10504 65 65   10504 66 66",
          "5833:   10504 67 67   10504 68 68   11215 64 64   11920 63 63   12603 62 62",
          "5834:   13274 60 60   13274 61 61   13941 59 59   14608 55 55   14608 56 56",
          "5835:   14608 57 57   14608 58 58   15241 54 54   15870 53 53   16499 52 52",
          "5836:   17126 49 49   17126 50 50   17126 51 51   17733 44 44   17733 45 45",
          "5837:   17733 46 46   17733 47 47   17733 48 48   18176 42 42   18176 43 43",
          "5838:   18597 40 40   18597 41 41   18996 39 39   19395 37 37   19395 38 38",
          "5839:   19788 36 36   20181 35 35   20536 34 34   20891 30 30   20891 31 31",
          "5840:   20891 32 32   20891 33 33   21226 28 28   21226 29 29   21535 27 27",
          "5841:   21830 26 26   22087 22 22   22087 23 23   22087 24 24   22087 25 25",
          "5842:   22334 21 21   22573 17 17   22573 18 18   22573 19 19   22573 20 20",
          "5843:   22796 11 11   22796 12 12   22796 13 13   22796 14 14   22796 15 15",
          "5844:   22796 16 16   22929 10 10   23042 9 9   23155 1 1   23155 2 2   23155 3 3",
          "5845:   23155 4 4   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "5847: do_execsql_test 5.4.8.1 {",
          "5848:   SELECT max(c) OVER win,",
          "5849:              min(c) OVER win,",
          "5850:              count(a) OVER win",
          "5851:       FROM t3",
          "5852:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5853:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5854: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "5855:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "5856:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "5857:   257 257 1   295 295 1   309 309 1   330 330 1   335 335 1   336 336 1",
          "5858:   346 346 1   354 354 1   355 355 0   355 355 1   393 393 1   393 393 1",
          "5859:   398 398 1   399 399 0   399 399 1   412 412 1   421 421 1   430 430 1",
          "5860:   443 443 1   480 480 1   480 480 1   572 572 1   574 574 1   607 607 1",
          "5861:   618 618 1   618 618 1   627 627 1   629 629 0   629 629 1   633 633 1",
          "5862:   634 634 1   652 652 1   660 660 1   667 667 0   667 667 1   670 670 1",
          "5863:   671 671 1   683 683 1   705 705 1   711 711 1   716 716 1   726 726 1",
          "5864:   730 730 1   759 759 1   762 762 1   768 768 1   768 768 1   777 777 1",
          "5865:   786 786 1   790 790 1   792 792 1   794 794 1   805 805 1   822 822 1",
          "5866:   839 839 1   839 839 1   840 840 1   844 844 1   845 845 1   870 870 0",
          "5867:   870 870 1   870 870 1   899 899 1   911 911 1   929 929 1   934 934 1",
          "5868:   938 938 1   938 938 1   959 959 1   963 963 1   979 979 1}",
          "5870: do_execsql_test 5.4.8.2 {",
          "5871:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5872:              rank() OVER win,",
          "5873:              dense_rank() OVER win",
          "5874:       FROM t3",
          "5875:       WINDOW win AS (  RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5876:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5877: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5878:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5879:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5880:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5881:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5882:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5883:   113 1 1   113 1 1   133 1 1   223 1 1   239 1 1   247 1 1   257 1 1",
          "5884:   295 1 1   309 1 1   335 1 1   355 1 1   355 1 1   393 1 1   393 1 1",
          "5885:   399 1 1   399 1 1   421 1 1   443 1 1   607 1 1   627 1 1   629 1 1",
          "5886:   629 1 1   633 1 1   667 1 1   667 1 1   671 1 1   683 1 1   705 1 1",
          "5887:   711 1 1   759 1 1   777 1 1   805 1 1   839 1 1   839 1 1   845 1 1",
          "5888:   899 1 1   911 1 1   929 1 1   959 1 1   963 1 1   979 1 1}",
          "5890: do_execsql_test 5.4.9.1 {",
          "5891:   SELECT max(c) OVER win,",
          "5892:              min(c) OVER win,",
          "5893:              count(a) OVER win",
          "5894:       FROM t3",
          "5895:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "5896:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5897:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5898: } {158 158 0   355 355 0   399 399 0   629 629 0   667 667 0   870 113 1",
          "5899:   870 158 1   870 158 1   870 158 1   870 158 1   870 158 1   870 158 1",
          "5900:   870 158 1   870 870 0   899 113 10   899 113 10   899 113 10   899 113 10",
          "5901:   899 113 10   899 113 10   899 113 10   899 113 17   899 113 17   899 113 17",
          "5902:   899 113 17   899 113 17   899 113 17   899 113 17   899 158 1   963 113 17",
          "5903:   979 102 34   979 102 45   979 102 45   979 102 45   979 102 45   979 102 45",
          "5904:   979 102 50   979 102 50   979 102 50   979 102 50   979 102 50   979 102 50",
          "5905:   979 102 50   979 102 57   979 102 57   979 102 57   979 102 57   979 102 57",
          "5906:   979 102 57   979 102 63   979 102 63   979 102 63   979 102 63   979 102 63",
          "5907:   979 102 63   979 102 63   979 102 63   979 102 63   979 102 63   979 102 63",
          "5908:   979 102 63   979 102 63   979 102 76   979 102 76   979 102 76   979 102 76",
          "5909:   979 102 76   979 102 76   979 102 76   979 102 76   979 113 17   979 113 26",
          "5910:   979 113 26   979 113 26   979 113 26   979 113 26   979 113 26   979 113 26",
          "5911:   979 113 26   979 113 34   979 113 34   979 113 34   979 113 34   979 113 34",
          "5912:   979 113 34   979 113 34   979 113 34   979 113 34   979 113 34}",
          "5914: do_execsql_test 5.4.9.2 {",
          "5915:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5916:              rank() OVER win,",
          "5917:              dense_rank() OVER win",
          "5918:       FROM t3",
          "5919:       WINDOW win AS (  ORDER BY a NULLS LAST",
          "5920:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5921:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5922: } {{} 84 11   {} 84 11   355 84 11   399 84 11   629 84 11   667 84 11",
          "5923:   2050 75 10   2050 75 10   2050 75 10   2050 75 10   2163 75 10   2307 75 10",
          "5924:   2889 75 10   2889 75 10   2949 75 10   4997 68 9   4997 68 9   4997 68 9",
          "5925:   5418 68 9   5440 68 9   5668 68 9   5802 68 9   7337 59 8   7337 59 8",
          "5926:   7337 59 8   7337 59 8   7470 59 8   7692 59 8   8020 59 8   8300 59 8",
          "5927:   8316 59 8   10450 51 7   10450 51 7   10450 51 7   10450 51 7   10450 51 7",
          "5928:   10450 51 7   10785 51 7   11379 51 7   11714 40 6   11714 40 6   11714 40 6",
          "5929:   11714 40 6   11714 40 6   11714 40 6   11714 40 6   11714 40 6   11714 40 6",
          "5930:   12009 40 6   12381 40 6   12676 35 5   12676 35 5   12789 35 5   13305 35 5",
          "5931:   13453 35 5   14195 28 4   14195 28 4   14195 28 4   14195 28 4   14195 28 4",
          "5932:   15040 28 4   15154 28 4   15999 22 3   15999 22 3   15999 22 3   15999 22 3",
          "5933:   16606 22 3   16758 22 3   17365 9 2   17365 9 2   17365 9 2   17365 9 2",
          "5934:   17365 9 2   17365 9 2   17612 9 2   17758 9 2   17758 9 2   17764 9 2",
          "5935:   17998 9 2   18070 9 2   18076 9 2   20846 1 1   20846 1 1   20846 1 1",
          "5936:   21069 1 1   21085 1 1   21155 1 1   21473 1 1   21757 1 1}",
          "5938: do_execsql_test 5.4.10.1 {",
          "5939:   SELECT max(c) OVER win,",
          "5940:              min(c) OVER win,",
          "5941:              count(a) OVER win",
          "5942:       FROM t3",
          "5943:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "5944:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5945:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5946: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "5947:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "5948:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "5949:   257 257 1   295 295 1   309 309 1   330 330 1   335 335 1   336 336 1",
          "5950:   346 346 1   354 354 1   355 355 0   355 355 1   393 393 1   393 393 1",
          "5951:   398 398 1   399 399 0   399 399 1   412 412 1   421 421 1   430 430 1",
          "5952:   443 443 1   480 480 1   480 480 1   572 572 1   574 574 1   607 607 1",
          "5953:   618 618 1   618 618 1   627 627 1   629 629 0   629 629 1   633 633 1",
          "5954:   634 634 1   652 652 1   660 660 1   667 667 0   667 667 1   670 670 1",
          "5955:   671 671 1   683 683 1   705 705 1   711 711 1   716 716 1   726 726 1",
          "5956:   730 730 1   759 759 1   762 762 1   768 768 1   768 768 1   777 777 1",
          "5957:   786 786 1   790 790 1   792 792 1   794 794 1   805 805 1   822 822 1",
          "5958:   839 839 1   839 839 1   840 840 1   844 844 1   845 845 1   870 870 0",
          "5959:   870 870 1   870 870 1   899 899 1   911 911 1   929 929 1   934 934 1",
          "5960:   938 938 1   938 938 1   959 959 1   963 963 1   979 979 1}",
          "5962: do_execsql_test 5.4.10.2 {",
          "5963:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "5964:              rank() OVER win,",
          "5965:              dense_rank() OVER win",
          "5966:       FROM t3",
          "5967:       WINDOW win AS (  PARTITION BY coalesce(a, '')",
          "5968:         RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "5969:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5970: } {{} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5971:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5972:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5973:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5974:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5975:   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1   {} 1 1",
          "5976:   113 1 1   113 1 1   133 1 1   223 1 1   239 1 1   247 1 1   257 1 1",
          "5977:   295 1 1   309 1 1   335 1 1   355 1 1   355 1 1   393 1 1   393 1 1",
          "5978:   399 1 1   399 1 1   421 1 1   443 1 1   607 1 1   627 1 1   629 1 1",
          "5979:   629 1 1   633 1 1   667 1 1   667 1 1   671 1 1   683 1 1   705 1 1",
          "5980:   711 1 1   759 1 1   777 1 1   805 1 1   839 1 1   839 1 1   845 1 1",
          "5981:   899 1 1   911 1 1   929 1 1   959 1 1   963 1 1   979 1 1}",
          "5983: do_execsql_test 5.4.11.1 {",
          "5984:   SELECT max(c) OVER win,",
          "5985:              min(c) OVER win,",
          "5986:              count(a) OVER win",
          "5987:       FROM t3",
          "5988:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "5989:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "5990: } {223 223 1   239 239 1   309 309 1   572 572 1   627 627 1   870 870 1",
          "5991:   911 911 1   934 158 22   934 158 28   934 158 28   934 158 28   934 158 28",
          "5992:   934 158 28   934 158 28   934 223 9   934 223 9   934 223 9   934 223 9",
          "5993:   934 223 9   934 223 9   934 223 9   934 223 9   934 223 9   934 223 9",
          "5994:   934 223 9   934 223 9   934 223 9   934 223 22   934 223 22   934 223 22",
          "5995:   934 223 22   934 223 22   934 934 1   959 102 40   959 102 51   959 102 51",
          "5996:   959 102 51   959 102 51   959 102 51   959 102 51   959 102 51   959 102 51",
          "5997:   959 102 51   959 102 51   959 102 51   959 102 51   959 102 51   959 102 51",
          "5998:   959 102 51   959 113 35   959 113 40   959 113 40   959 113 40   959 113 40",
          "5999:   959 113 40   959 113 40   959 113 40   959 113 40   959 113 40   959 113 40",
          "6000:   959 158 28   959 158 35   959 158 35   959 158 35   959 158 35   963 102 51",
          "6001:   979 102 47   979 102 47   979 102 47   979 102 47   979 102 47   979 102 47",
          "6002:   979 102 47   979 102 48   979 102 48   979 102 48   979 102 48   979 102 48",
          "6003:   979 102 48   979 102 48   979 102 48   979 102 48   979 102 49   979 102 49",
          "6004:   979 102 49   979 102 49   979 102 49   979 102 49   979 102 51}",
          "6006: do_execsql_test 5.4.11.2 {",
          "6007:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "6008:              rank() OVER win,",
          "6009:              dense_rank() OVER win",
          "6010:       FROM t3",
          "6011:       WINDOW win AS (  ORDER BY a NULLS LAST GROUPS 6 PRECEDING   EXCLUDE TIES  )",
          "6012:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6013: } {{} 1 1   {} 1 1   {} 1 1   223 1 1   239 1 1   309 1 1   627 1 1   911 1 1",
          "6014:   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2309 9 2   2556 9 2",
          "6015:   2702 9 2   2702 9 2   2708 9 2   2942 9 2   3014 9 2   3020 9 2   5790 22 3",
          "6016:   5790 22 3   5790 22 3   5790 22 3   6397 22 3   6549 22 3   7156 28 4",
          "6017:   7156 28 4   7156 28 4   7156 28 4   7156 28 4   8001 28 4   8115 28 4",
          "6018:   8960 35 5   8960 35 5   9073 35 5   9589 35 5   9737 35 5   10028 68 9",
          "6019:   10028 68 9   10028 68 9   10396 59 8   10396 59 8   10396 59 8   10396 59 8",
          "6020:   10449 68 9   10471 68 9   10479 40 6   10479 40 6   10479 40 6   10479 40 6",
          "6021:   10479 40 6   10479 40 6   10479 40 6   10479 40 6   10479 40 6   10529 59 8",
          "6022:   10699 68 9   10751 59 8   10774 40 6   10833 68 9   11002 75 10",
          "6023:   11002 75 10   11002 75 10   11002 75 10   11079 59 8   11115 75 10",
          "6024:   11146 40 6   11259 75 10   11359 59 8   11375 59 8   11441 51 7",
          "6025:   11441 51 7   11441 51 7   11441 51 7   11441 51 7   11441 51 7   11776 51 7",
          "6026:   11841 75 10   11841 75 10   11901 75 10   12145 84 11   12145 84 11",
          "6027:   12370 51 7   12500 84 11   12544 84 11   12774 84 11   12812 84 11}",
          "6029: do_execsql_test 5.4.12.1 {",
          "6030:   SELECT max(c) OVER win,",
          "6031:              min(c) OVER win,",
          "6032:              count(a) OVER win",
          "6033:       FROM t3",
          "6034:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "6035:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6036: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   160 158 1",
          "6037:   160 158 2   160 158 2   208 208 1   224 223 2   224 223 2   239 234 3",
          "6038:   239 234 3   239 234 3   252 247 3   257 247 5   257 247 5   257 250 4",
          "6039:   257 252 3   295 295 1   309 309 1   336 330 3   336 330 3   336 330 3",
          "6040:   346 346 1   355 354 1   355 354 2   355 354 2   399 393 3   399 393 3",
          "6041:   399 393 3   399 393 4   399 393 4   412 412 1   421 421 1   430 430 1",
          "6042:   443 443 1   480 480 1   480 480 1   574 572 2   574 572 2   607 607 1",
          "6043:   618 618 1   618 618 1   634 627 3   634 627 4   634 627 4   634 627 4",
          "6044:   634 629 3   652 652 1   667 660 2   671 667 2   671 667 3   671 667 3",
          "6045:   671 667 3   683 683 1   711 705 2   716 705 3   716 711 2   730 726 2",
          "6046:   730 726 2   762 759 2   768 759 4   768 762 2   768 762 2   777 777 1",
          "6047:   792 786 3   794 786 4   794 786 4   794 790 3   805 805 1   822 822 1",
          "6048:   845 839 4   845 839 4   845 839 5   845 839 5   845 839 5   870 870 0",
          "6049:   870 870 1   870 870 1   899 899 1   911 911 1   934 929 2   938 929 4",
          "6050:   938 934 2   938 934 2   963 959 2   963 959 2   979 979 1}",
          "6052: do_execsql_test 5.4.12.2 {",
          "6053:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "6054:              rank() OVER win,",
          "6055:              dense_rank() OVER win",
          "6056:       FROM t3",
          "6057:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 6 PRECEDING AND 7 FOLLOWING   EXCLUDE TIES  )",
          "6058:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6059: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 25 23   {} 34 29",
          "6060:   {} 36 31   {} 38 33   {} 38 33   {} 40 34   {} 41 35   {} 43 37   {} 43 37",
          "6061:   {} 50 42   {} 60 51   {} 61 52   {} 64 55   {} 64 55   {} 67 57   {} 68 58",
          "6062:   {} 69 59   {} 70 60   {} 72 62   {} 78 67   {} 78 67   {} 78 67   {} 85 72",
          "6063:   {} 85 72   113 2 2   113 2 2   133 4 3   223 10 8   223 11 9   239 12 10",
          "6064:   239 13 11   239 14 12   247 15 13   257 18 16   257 19 17   295 20 18",
          "6065:   309 21 19   335 22 20   335 23 21   335 24 22   355 27 25   355 27 25",
          "6066:   421 35 30   443 37 32   504 16 14   504 17 15   607 42 36   683 56 47",
          "6067:   710 26 24   711 59 50   759 62 53   759 63 54   777 66 56   805 71 61",
          "6068:   899 81 68   911 82 69   929 83 70   929 84 71   979 89 75   1185 32 28",
          "6069:   1185 32 28   1191 29 26   1191 29 26   1334 51 43   1338 52 44   1338 52 44",
          "6070:   1416 57 48   1416 58 49   1584 31 27   1684 73 63   1684 73 63   1889 46 39",
          "6071:   1889 46 39   1891 49 41   1922 87 73   1922 88 74   2005 54 45   2005 55 46",
          "6072:   2518 45 38   2518 48 40   2523 75 64   2523 76 65   2523 77 66}",
          "6074: do_execsql_test 5.4.13.1 {",
          "6075:   SELECT max(c) OVER win,",
          "6076:              min(c) OVER win,",
          "6077:              count(a) OVER win",
          "6078:       FROM t3",
          "6079:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "6080:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6081: } {102 102 1   113 113 1   113 113 1   133 133 1   148 148 1   158 158 0",
          "6082:   158 158 1   160 160 1   208 208 1   223 223 1   224 224 1   234 234 1",
          "6083:   238 238 1   239 239 1   247 247 1   250 250 1   252 252 1   256 256 1",
          "6084:   257 257 1   295 295 1   309 309 1   330 330 1   335 335 1   336 336 1",
          "6085:   346 346 1   354 354 1   355 355 0   355 355 1   393 393 1   393 393 1",
          "6086:   398 398 1   399 399 0   399 399 1   412 412 1   421 421 1   430 430 1",
          "6087:   443 443 1   480 480 1   480 480 1   572 572 1   574 574 1   607 607 1",
          "6088:   618 618 1   618 618 1   627 627 1   629 629 0   629 629 1   633 633 1",
          "6089:   634 634 1   652 652 1   660 660 1   667 667 0   667 667 1   670 670 1",
          "6090:   671 671 1   683 683 1   705 705 1   711 711 1   716 716 1   726 726 1",
          "6091:   730 730 1   759 759 1   762 762 1   768 768 1   768 768 1   777 777 1",
          "6092:   786 786 1   790 790 1   792 792 1   794 794 1   805 805 1   822 822 1",
          "6093:   839 839 1   839 839 1   840 840 1   844 844 1   845 845 1   870 870 0",
          "6094:   870 870 1   870 870 1   899 899 1   911 911 1   929 929 1   934 934 1",
          "6095:   938 938 1   938 938 1   959 959 1   963 963 1   979 979 1}",
          "6097: do_execsql_test 5.4.13.2 {",
          "6098:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "6099:              rank() OVER win,",
          "6100:              dense_rank() OVER win",
          "6101:       FROM t3",
          "6102:       WINDOW win AS (  ORDER BY c NULLS LAST RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING   EXCLUDE TIES  )",
          "6103:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6104: } {{} 1 1   {} 5 4   {} 6 5   {} 6 5   {} 8 6   {} 9 7   {} 11 9   {} 12 10",
          "6105:   {} 13 11   {} 16 14   {} 17 15   {} 18 16   {} 22 20   {} 24 22   {} 25 23",
          "6106:   {} 26 24   {} 31 27   {} 34 29   {} 36 31   {} 38 33   {} 38 33   {} 40 34",
          "6107:   {} 41 35   {} 43 37   {} 43 37   {} 49 41   {} 50 42   {} 51 43   {} 54 45",
          "6108:   {} 59 50   {} 60 51   {} 61 52   {} 63 54   {} 64 55   {} 64 55   {} 67 57",
          "6109:   {} 68 58   {} 69 59   {} 70 60   {} 72 62   {} 75 64   {} 76 65   {} 78 67",
          "6110:   {} 78 67   {} 78 67   {} 84 71   {} 85 72   {} 85 72   113 2 2   113 2 2",
          "6111:   133 4 3   223 10 8   239 14 12   247 15 13   257 19 17   295 20 18",
          "6112:   309 21 19   335 23 21   355 27 25   355 27 25   393 29 26   393 29 26",
          "6113:   399 32 28   399 32 28   421 35 30   443 37 32   607 42 36   627 45 38",
          "6114:   629 46 39   629 46 39   633 48 40   667 52 44   667 52 44   671 55 46",
          "6115:   683 56 47   705 57 48   711 58 49   759 62 53   777 66 56   805 71 61",
          "6116:   839 73 63   839 73 63   845 77 66   899 81 68   911 82 69   929 83 70",
          "6117:   959 87 73   963 88 74   979 89 75}",
          "6119: do_execsql_test 5.4.14.1 {",
          "6120:   SELECT max(c) OVER win,",
          "6121:              min(c) OVER win,",
          "6122:              count(a) OVER win",
          "6123:       FROM t3",
          "6124:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "6125:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "6126:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "6127: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "6128:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "6129:   979 158 78   979 160 77   979 208 76   979 223 75   979 224 74   979 234 73",
          "6130:   979 238 72   979 239 71   979 247 70   979 250 69   979 252 68   979 256 67",
          "6131:   979 257 66   979 295 65   979 309 64   979 330 63   979 335 62   979 336 61",
          "6132:   979 346 60   979 354 59   979 355 57   979 355 58   979 393 56   979 393 57",
          "6133:   979 398 55   979 399 53   979 399 54   979 412 53   979 421 52   979 430 51",
          "6134:   979 443 50   979 480 48   979 480 49   979 572 47   979 574 46   979 607 45",
          "6135:   979 618 43   979 618 44   979 627 42   979 629 40   979 629 41   979 633 40",
          "6136:   979 634 39   979 652 38   979 660 37   979 667 35   979 667 36   979 670 35",
          "6137:   979 671 34   979 683 33   979 705 32   979 711 31   979 716 30   979 726 29",
          "6138:   979 730 28   979 759 27   979 762 26   979 768 24   979 768 25   979 777 23",
          "6139:   979 786 22   979 790 21   979 792 20   979 794 19   979 805 18   979 822 17",
          "6140:   979 839 15   979 839 16   979 840 14   979 844 13   979 845 12   979 870 9",
          "6141:   979 870 10   979 870 11   979 899 9   979 911 8   979 929 7}",
          "6143: do_execsql_test 5.4.14.2 {",
          "6144:   SELECT sum(c) FILTER (WHERE (c%2)!=0) OVER win,",
          "6145:              rank() OVER win,",
          "6146:              dense_rank() OVER win",
          "6147:       FROM t3",
          "6148:       WINDOW win AS (  ORDER BY c NULLS LAST, b NULLS LAST, a NULLS LAST",
          "6150:       ORDER BY 1 NULLS FIRST, 2 NULLS FIRST, 3 NULLS FIRST",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4861: do_execsql_test 6.1 {",
          "4862:   SELECT group_concat(a, '.') OVER (",
          "4864:   )",
          "4865:   FROM t2",
          "4866: } {A.B   A.B   {}}",
          "4868: do_execsql_test 6.2 {",
          "4869:   SELECT group_concat(a, '.') OVER (",
          "4871:   )",
          "4872:   FROM t2",
          "4873: } {{}   A.B   A.B}",
          "",
          "[Removed Lines]",
          "4863:     ORDER BY b  RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "4870:     ORDER BY b DESC  RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "",
          "[Added Lines]",
          "6181:     ORDER BY b NULLS FIRST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "6188:     ORDER BY b DESC NULLS LAST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "211:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "212:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "213:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "214:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "215:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "236:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "237:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "238:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "239:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "240:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "246:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "247:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "248:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "249:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "250:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9bcf7ca600ab8a94018adc2eac4115441a09d89",
      "candidate_info": {
        "commit_hash": "b9bcf7ca600ab8a94018adc2eac4115441a09d89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9bcf7ca600ab8a94018adc2eac4115441a09d89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/analyze.c",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/upsert.c",
          "src/vdbeapi.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Refactor names of column index transformation functions, for clarity. Get generated columns working with ALTER TABLE RENAME COLUMN.\n\nFossilOrigin-Name: 27ab41c9102e7801ff829488fc123a8040da008bef373d6704efbe2f93e1da90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/upsert.c||src/upsert.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1334:           sqlite3WalkExprList(&sWalker, pIdx->aColExpr);",
          "1335:         }",
          "1336:       }",
          "1338:       for(pFKey=sParse.pNewTable->pFKey; pFKey; pFKey=pFKey->pNextFrom){",
          "1339:         for(i=0; i<pFKey->nCol; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1337: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1338:       for(i=0; i<sParse.pNewTable->nCol; i++){",
          "1339:         sqlite3WalkExpr(&sWalker, sParse.pNewTable->aCol[i].pDflt);",
          "1340:       }",
          "1341: #endif",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:       int j, k, regKey;",
          "1183:       regKey = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1184:       for(j=0; j<pPk->nKeyCol; j++){",
          "1186:         assert( k>=0 && k<pIdx->nColumn );",
          "1187:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, regKey+j);",
          "1188:         VdbeComment((v, \"%s\", pTab->aCol[pPk->aiColumn[j]].zName));",
          "",
          "[Removed Lines]",
          "1185:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "[Added Lines]",
          "1185:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: }",
          "884:   int i;",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "",
          "[Removed Lines]",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "",
          "[Added Lines]",
          "885: i16 sqlite3TableColumnToIndex(Index *pIdx, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889: }",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "906:   if( pTab->tabFlags & TF_HasVirtual ){",
          "907:     int i;",
          "908:     for(i=0; i<=iCol; i++){",
          "",
          "[Removed Lines]",
          "905: i16 sqlite3ColumnOfStorage(Table *pTab, i16 iCol){",
          "",
          "[Added Lines]",
          "907: i16 sqlite3StorageColumnToTable(Table *pTab, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:   int i;",
          "929:   i16 n;",
          "930:   assert( iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "927: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "",
          "[Added Lines]",
          "929: i16 sqlite3TableColumnToStorage(Table *pTab, i16 iCol){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1577:   u8 eType = COLFLAG_VIRTUAL;",
          "1578:   Table *pTab = pParse->pNewTable;",
          "1579:   Column *pCol;",
          "1583:   if( pTab==0 ) goto generated_done;",
          "1584:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1585:   if( pCol->pDflt ) goto generated_error;",
          "1586:   if( pType ){",
          "1587:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "",
          "[Removed Lines]",
          "1580:   if( IN_RENAME_OBJECT ){",
          "1581:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1582:   }",
          "",
          "[Added Lines]",
          "1584:   if( IN_DECLARE_VTAB ){",
          "1585:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "1586:     goto generated_done;",
          "1587:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1597:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1598:   assert( TF_HasStored==COLFLAG_STORED );",
          "1599:   pTab->tabFlags |= eType;",
          "1601:   goto generated_done;",
          "1603: generated_error:",
          "",
          "[Removed Lines]",
          "1600:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "",
          "[Added Lines]",
          "1603:   pCol->pDflt = pExpr;",
          "1604:   pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3653:   assert( HasRowid(pTab)",
          "3655:   recomputeColumnsNotIndexed(pIndex);",
          "3656:   if( pTblName!=0 && pIndex->nColumn>=pTab->nCol ){",
          "3657:     pIndex->isCovering = 1;",
          "3658:     for(j=0; j<pTab->nCol; j++){",
          "3659:       if( j==pTab->iPKey ) continue;",
          "3661:       pIndex->isCovering = 0;",
          "3662:       break;",
          "3663:     }",
          "",
          "[Removed Lines]",
          "3654:       || pTab->iPKey<0 || sqlite3ColumnOfIndex(pIndex, pTab->iPKey)>=0 );",
          "3660:       if( sqlite3ColumnOfIndex(pIndex,j)>=0 ) continue;",
          "",
          "[Added Lines]",
          "3658:       || pTab->iPKey<0 || sqlite3TableColumnToIndex(pIndex, pTab->iPKey)>=0 );",
          "3664:       if( sqlite3TableColumnToIndex(pIndex,j)>=0 ) continue;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3410:       return;",
          "3411: #endif",
          "3412:     }else if( !HasRowid(pTab) ){",
          "3414:       op = OP_Column;",
          "3415:     }else{",
          "3417:       op = OP_Column;",
          "3418:     }",
          "3419:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "",
          "[Removed Lines]",
          "3413:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3416:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "",
          "[Added Lines]",
          "3413:       x = sqlite3TableColumnToIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3416:       x = sqlite3TableColumnToStorage(pTab,iCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3591:             return -1-pParse->iSelfTab;",
          "3592:           }",
          "3593:           pCol = pTab->aCol + pExpr->iColumn;",
          "3595: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3596:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3597:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "",
          "[Removed Lines]",
          "3594:           iSrc = sqlite3ColumnOfTable(pTab, pExpr->iColumn) - pParse->iSelfTab;",
          "",
          "[Added Lines]",
          "3594:           iSrc = sqlite3TableColumnToStorage(pTab, pExpr->iColumn)",
          "3595:                       - pParse->iSelfTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5320: static int exprIdxCover(Walker *pWalker, Expr *pExpr){",
          "5321:   if( pExpr->op==TK_COLUMN",
          "5322:    && pExpr->iTable==pWalker->u.pIdxCover->iCur",
          "5324:   ){",
          "5325:     pWalker->eCode = 1;",
          "5326:     return WRC_Abort;",
          "",
          "[Removed Lines]",
          "5323:    && sqlite3ColumnOfIndex(pWalker->u.pIdxCover->pIdx, pExpr->iColumn)<0",
          "",
          "[Added Lines]",
          "5324:    && sqlite3TableColumnToIndex(pWalker->u.pIdxCover->pIdx, pExpr->iColumn)<0",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:       int k;",
          "1056:       u32 colFlags;",
          "1057:       assert( i>=nHidden );",
          "1059:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1058:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "",
          "[Added Lines]",
          "1058:       assert( iRegStore==sqlite3TableColumnToStorage(pTab,i)+regRowid+1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1464:       pParse->iSelfTab = 0;",
          "1465:       if( onError==OE_Replace ) onError = OE_Abort;",
          "1466:     }else{",
          "1468:     }",
          "1469:     switch( onError ){",
          "1470:       case OE_Replace: {",
          "",
          "[Removed Lines]",
          "1467:       iReg = sqlite3ColumnOfTable(pTab, i) + regNewData + 1;",
          "",
          "[Added Lines]",
          "1467:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1782:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1783: #endif",
          "1784:       }else{",
          "1786:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1787:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "1788:       }",
          "",
          "[Removed Lines]",
          "1785:         x = sqlite3ColumnOfTable(pTab, iField) + regNewData + 1;",
          "",
          "[Added Lines]",
          "1785:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1873:         if( pIdx!=pPk ){",
          "1874:           for(i=0; i<pPk->nKeyCol; i++){",
          "1875:             assert( pPk->aiColumn[i]>=0 );",
          "1877:             sqlite3VdbeAddOp3(v, OP_Column, iThisCur, x, regR+i);",
          "1878:             VdbeComment((v, \"%s.%s\", pTab->zName,",
          "1879:                          pTab->aCol[pPk->aiColumn[i]].zName));",
          "",
          "[Removed Lines]",
          "1876:             x = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "[Added Lines]",
          "1876:             x = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3952: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "3953: void sqlite3OpenMasterTable(Parse *, int);",
          "3954: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3956: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3959: #else",
          "3962: #endif",
          "3963: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3964: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "",
          "[Removed Lines]",
          "3955: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3960:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3961:   i16 sqlite3ColumnOfStorage(Table*, i16);",
          "",
          "[Added Lines]",
          "3968: i16 sqlite3TableColumnToIndex(Index*, i16);",
          "3973:   i16 sqlite3TableColumnToStorage(Table*, i16);",
          "3974:   i16 sqlite3StorageColumnToTable(Table*, i16);",
          "",
          "---------------"
        ],
        "src/upsert.c||src/upsert.c": [
          "File: src/upsert.c -> src/upsert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:       for(i=0; i<nPk; i++){",
          "227:         int k;",
          "228:         assert( pPk->aiColumn[i]>=0 );",
          "230:         sqlite3VdbeAddOp3(v, OP_Column, iCur, k, iPk+i);",
          "231:         VdbeComment((v, \"%s.%s\", pIdx->zName,",
          "232:                     pTab->aCol[pPk->aiColumn[i]].zName));",
          "",
          "[Removed Lines]",
          "229:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "[Added Lines]",
          "229:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[i]);",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1831:     goto preupdate_old_out;",
          "1832:   }",
          "1833:   if( p->pPk ){",
          "1835:   }",
          "1836:   if( iIdx>=p->pCsr->nField || iIdx<0 ){",
          "1837:     rc = SQLITE_RANGE;",
          "",
          "[Removed Lines]",
          "1834:     iIdx = sqlite3ColumnOfIndex(p->pPk, iIdx);",
          "",
          "[Added Lines]",
          "1834:     iIdx = sqlite3TableColumnToIndex(p->pPk, iIdx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1921:     goto preupdate_new_out;",
          "1922:   }",
          "1923:   if( p->pPk && p->op!=SQLITE_UPDATE ){",
          "1925:   }",
          "1926:   if( iIdx>=p->pCsr->nField || iIdx<0 ){",
          "1927:     rc = SQLITE_RANGE;",
          "",
          "[Removed Lines]",
          "1924:     iIdx = sqlite3ColumnOfIndex(p->pPk, iIdx);",
          "",
          "[Added Lines]",
          "1924:     iIdx = sqlite3TableColumnToIndex(p->pPk, iIdx);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5379:             x = pPk->aiColumn[x];",
          "5380:             assert( x>=0 );",
          "5381:           }else{",
          "5383:           }",
          "5385:           if( x>=0 ){",
          "5386:             pOp->p2 = x;",
          "5387:             pOp->p1 = pLevel->iIdxCur;",
          "",
          "[Removed Lines]",
          "5382:             x = sqlite3ColumnOfStorage(pTab,x);",
          "5384:           x = sqlite3ColumnOfIndex(pIdx, x);",
          "",
          "[Added Lines]",
          "5382:             x = sqlite3StorageColumnToTable(pTab,x);",
          "5384:           x = sqlite3TableColumnToIndex(pIdx, x);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:   assert( pHint->pIdx!=0 );",
          "824:   if( pExpr->op==TK_COLUMN",
          "825:    && pExpr->iTable==pHint->iTabCur",
          "827:   ){",
          "828:     pWalker->eCode = 1;",
          "829:   }",
          "",
          "[Removed Lines]",
          "826:    && sqlite3ColumnOfIndex(pHint->pIdx, pExpr->iColumn)<0",
          "",
          "[Added Lines]",
          "826:    && sqlite3TableColumnToIndex(pHint->pIdx, pExpr->iColumn)<0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:       pExpr->iTable = reg;",
          "892:     }else if( pHint->pIdx!=0 ){",
          "893:       pExpr->iTable = pHint->iIdxCur;",
          "895:       assert( pExpr->iColumn>=0 );",
          "896:     }",
          "897:   }else if( pExpr->op==TK_AGG_FUNCTION ){",
          "",
          "[Removed Lines]",
          "894:       pExpr->iColumn = sqlite3ColumnOfIndex(pHint->pIdx, pExpr->iColumn);",
          "",
          "[Added Lines]",
          "894:       pExpr->iColumn = sqlite3TableColumnToIndex(pHint->pIdx, pExpr->iColumn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1826:       Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1827:       iRowidReg = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "1828:       for(j=0; j<pPk->nKeyCol; j++){",
          "1830:         sqlite3VdbeAddOp3(v, OP_Column, iIdxCur, k, iRowidReg+j);",
          "1831:       }",
          "1832:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iCur, addrCont,",
          "",
          "[Removed Lines]",
          "1829:         k = sqlite3ColumnOfIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "[Added Lines]",
          "1829:         k = sqlite3TableColumnToIndex(pIdx, pPk->aiColumn[j]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd717a4d2e5797027b8203a6f68af24be78e4f93",
      "candidate_info": {
        "commit_hash": "bd717a4d2e5797027b8203a6f68af24be78e4f93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bd717a4d2e5797027b8203a6f68af24be78e4f93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/nulls1.test"
        ],
        "message": "Improve vdbe branch coverage of NULLS LAST code.\n\nFossilOrigin-Name: e8e9f77d52974f6ba0a536d05837b280a996745deb3a2169bb29379f10e49df4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 96ff2ba9c4bb71d5f7c6f359986a76a5364b7ac3e1a612441543a9eabecf31df",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5216:       VdbeCoverageIf(v, pLevel->op==OP_VNext);",
          "5217:       if( pLevel->regBignull ){",
          "5218:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5220:         VdbeCoverage(v);",
          "5221:       }",
          "5222: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "5219:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "",
          "[Added Lines]",
          "5219:         sqlite3VdbeAddOp2(v, OP_DecrJumpZero, pLevel->regBignull, pLevel->p2-1);",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:   `--SEARCH TABLE t5 USING COVERING INDEX t5ab (a=?)",
          "237: }",
          "240: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: #-------------------------------------------------------------------------",
          "240: do_execsql_test 7.0 {",
          "241:   CREATE TABLE t71(a, b, c);",
          "242:   CREATE INDEX t71abc ON t71(a, b, c);",
          "244:   SELECT * FROM t71 WHERE a=1 AND b=2 ORDER BY c NULLS LAST;",
          "245:   SELECT * FROM t71 WHERE a=1 AND b=2 ORDER BY c DESC NULLS FIRST;",
          "247:   SELECT * FROM t71 ORDER BY a NULLS LAST;",
          "248:   SELECT * FROM t71 ORDER BY a DESC NULLS FIRST;",
          "249: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
      "candidate_info": {
        "commit_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4merge5.test",
          "test/permutations.test"
        ],
        "message": "Fix a long-standing problem in fts4 incrmental merge.\n\nFossilOrigin-Name: 67da31e24ebb49c4cac81c9e7cfca37ca422555fd0fdb01d8f180890783c84ff",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4merge5.test||test/fts4merge5.test",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4296:         NodeReader reader;",
          "4297:         pNode = &pWriter->aNodeWriter[i];",
          "4301:           while( reader.aNode && rc==SQLITE_OK ) rc = nodeReaderNext(&reader);",
          "4302:           blobGrowBuffer(&pNode->key, reader.term.n, &rc);",
          "4303:           if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4299:         rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "4300:         if( reader.aNode ){",
          "",
          "[Added Lines]",
          "4299:         if( pNode->block.a){",
          "4300:           rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f4035f91a9f914797c67afbf19139b2cd25aea48595f7254fe5d18cd693d972",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge5.test||test/fts4merge5.test": [
          "File: test/fts4merge5.test -> test/fts4merge5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 October 02",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS4 module.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4merge5",
          "19: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "20: ifcapable !fts3 {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: source $testdir/genesis.tcl",
          "27: do_execsql_test 1.1 {",
          "28:   CREATE TABLE t1(docid, words);",
          "29: }",
          "30: fts_kjv_genesis",
          "32: do_execsql_test 1.2 {",
          "33:   CREATE VIRTUAL TABLE x1 USING fts3;",
          "34:   INSERT INTO x1(x1) VALUES('nodesize=64');",
          "35:   INSERT INTO x1(x1) VALUES('maxpending=64');",
          "36: }",
          "38: do_execsql_test 1.3 {",
          "39:   INSERT INTO x1(docid, content) SELECT * FROM t1;",
          "40: }",
          "42: for {set tn 1} {1} {incr tn} {",
          "43:   set tc1 [db total_changes]",
          "44:   do_execsql_test 1.4.$tn.1 {",
          "45:     INSERT INTO x1(x1) VALUES('merge=1,2');",
          "46:   }",
          "47:   set tc2 [db total_changes]",
          "49:   if {($tc2 - $tc1)<2} break",
          "51:   do_execsql_test 1.4.$tn.1 {",
          "52:     INSERT INTO x1(x1) VALUES('integrity-check');",
          "53:   }",
          "54: }",
          "58: finish_test",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   walcrash2.test e_fkey.test backup.test",
          "128:   fts4merge.test fts4merge2.test fts4merge4.test fts4check.test",
          "129:   fts3cov.test fts3snippet.test fts3corrupt2.test fts3an.test",
          "130:   fts3defer.test fts4langid.test fts3sort.test fts5unicode.test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:   fts4merge5.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
      "candidate_info": {
        "commit_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/where.c",
          "test/fts3fuzz001.test"
        ],
        "message": "Use the new SQLITE_IDXTYPE_IPK values (3) on Index.idxType to indicate the fake INTEGER PRIMARY KEY index used during query planning.\n\nFossilOrigin-Name: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   rc = whereLoopXfer(db, p, pTemplate);",
          "2211:   if( (p->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "2212:     Index *pIndex = p->u.btree.pIndex;",
          "2214:       p->u.btree.pIndex = 0;",
          "2215:     }",
          "2216:   }",
          "",
          "[Removed Lines]",
          "2213:     if( pIndex && pIndex->tnum==0 ){",
          "",
          "[Added Lines]",
          "2213:     if( pIndex && pIndex->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2878:     sPk.onError = OE_Replace;",
          "2879:     sPk.pTable = pTab;",
          "2880:     sPk.szIdxRow = pTab->szTabRow;",
          "2881:     aiRowEstPk[0] = pTab->nRowLogEst;",
          "2882:     aiRowEstPk[1] = 0;",
          "2883:     pFirst = pSrc->pTab->pIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     sPk.idxType = SQLITE_IDXTYPE_IPK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2968:     b = indexMightHelpWithOrderBy(pBuilder, pProbe, pSrc->iCursor);",
          "2970:     assert( (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 );",
          "2973:       pNew->wsFlags = WHERE_IPK;",
          "",
          "[Removed Lines]",
          "2971:     if( pProbe->tnum<=0 ){",
          "",
          "[Added Lines]",
          "2972:     if( pProbe->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "",
          "[Removed Lines]",
          "105: } {0 {}}",
          "",
          "[Added Lines]",
          "105: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}