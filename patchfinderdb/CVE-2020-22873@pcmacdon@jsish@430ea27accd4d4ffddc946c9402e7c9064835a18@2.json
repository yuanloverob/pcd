{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7fb899fb788187da0f9c608e57af220b364b98da",
      "candidate_info": {
        "commit_hash": "7fb899fb788187da0f9c608e57af220b364b98da",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/7fb899fb788187da0f9c608e57af220b364b98da",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiFunc.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.10\": Fix typeCheck issue\n\nFossilOrigin-Name: 43033b4cbf679a8b238439f16b752e167c1eb82376102075af45e16af1c443f3",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "421: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "422: {",
          "423:     Jsi_Interp *interp = p->interp;",
          "426:         return;",
          "427:     if (name && isdigit(name[0]))",
          "428:         return;",
          "",
          "[Removed Lines]",
          "424:     if (interp->noCheck) return;",
          "425:     if (name == NULL || interp->typeCheck.funcdecl)",
          "",
          "[Added Lines]",
          "424:     if (interp->noCheck || name == NULL || !interp->typeCheck.funcdecl)",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "287: System.prototype.printf = function(format:string, ...):void {};",
          "288: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, options:object=void):void {};",
          "290: System.prototype.quote = function(val:string):string {};",
          "291: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "292: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "",
          "[Removed Lines]",
          "289: System.prototype.puts = function(val, ...):void {};",
          "",
          "[Added Lines]",
          "289: System.prototype.puts = function(val:any, ...):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363: console.prototype.log = function(val, ...):void {};",
          "364: console.prototype.logp = function(val, ...):void {};",
          "365: console.prototype.printf = function(format:string, ...):void {};",
          "367: console.prototype.warn = function(val, ...):void {};",
          "368: var decodeURI = function(val:string):string {};",
          "369: var encodeURI = function(val:string):string {};",
          "",
          "[Removed Lines]",
          "366: console.prototype.puts = function(val, ...):void {};",
          "",
          "[Added Lines]",
          "366: console.prototype.puts = function(val:any, ...):void {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "386: var printf = function(format:string, ...):void {};",
          "387: var provide = function(name:string|null|function=void, version:number|string=void, options:object=void):void {};",
          "389: var quote = function(val:string):string {};",
          "390: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "391: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "",
          "[Removed Lines]",
          "388: var puts = function(val, ...):void {};",
          "",
          "[Added Lines]",
          "388: var puts = function(val:any, ...):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: |memLeakCnt|*INT*|Leak memory count due to object added to self.|initOnly|",
          "289: |name|*STRKEY*|Optional text name for this interp.||",
          "290: |noAutoLoad|*BOOL*|Disable autoload.||",
          "291: |noConfig|*BOOL*|Disable use of Interp.conf to change options after create.|initOnly|",
          "292: |noEval|*BOOL*|Disable eval: just parses file to check syntax.|initOnly|",
          "293: |noInput|*BOOL*|Disable use of console.input().||",
          "294: |noLoad|*BOOL*|Disable load of shared libs.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: |noCheck|*BOOL*|Disable type checking.||",
          "293: |noError|*BOOL*|Type checks failures are warning.||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: |traceCall|*ARRAY*|Trace commands. (zero or more of: **funcs**, **cmds**, **new**, **return**, **args**, **notrunc**, **noparent**, **full**, **before**)||",
          "315: |traceOp|*INT*|Set debugging level for OPCODE execution.||",
          "316: |tracePuts|*BOOL*|Trace puts by making it use logOpts.||",
          "318: |typeWarnMax|*INT*|Type checking is silently disabled after this many warnings (50).||",
          "319: |udata|*OBJ*|User data.||",
          "320: |testMode|*UINT*|Unit test control bits: 1=subst, 2=Puts with file:line prefix.||",
          "",
          "[Removed Lines]",
          "317: |typeCheck|*ARRAY*|Type-check control options. (zero or more of: **none**, **parse**, **run**, **all**, **error**, **strict**, **noundef**, **nowith**, **funcsig**)||",
          "",
          "[Added Lines]",
          "319: |typeCheck|*ARRAY*|Type-check control options. (zero or more of: **noreturn**, **noundef**, **nowith**, **builtins**, **funcdecl**)||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876: |parseOpts|(self:object&#124;userobj, options:object, conf:object&#124;null&#124;undefined):object |Parse module options: similar to moduleOpts but arg order different and no freeze.|",
          "877: |printf|(format:string, ...):void |Formatted output to stdout.|",
          "878: |provide|([options](#options-systemprovide):object=void):void |Provide a package for use with require.. Default is the file tail-rootname|",
          "880: |quote|(val:string):string |Return quoted string.|",
          "881: |require|([options](#options-systemrequire):object=void):number&#124;array&#124;object |Load/query packages. With no arguments, returns the list of all loaded packages. With one argument, loads the package (if necessary) and returns its version. With two arguments, returns object containing: version, loadFile, func. A third argument sets options for package or module. Note an error is thrown if requested version is greater than actual version.|",
          "882: |runModule|(cmd:string&#124;null&#124;function=void, conf:array=undefined) |Invoke named module. If name is empty, uses file basename. If isMain invokes function with same name as file. With no args will invoke provide.|",
          "",
          "[Removed Lines]",
          "879: |puts|(val, ...):void |Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.|",
          "",
          "[Added Lines]",
          "881: |puts|(val:any, ...):void |Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.|",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1262: |log|(val, ...):void |Like System.puts, but goes to stderr and includes file:line..|",
          "1263: |logp|(val, ...):void |Same as console.log, but first arg is string prefix and if second is a boolean it controls output.|",
          "1264: |printf|(format:string, ...):void |Same as System.printf but goes to stderr.|",
          "1266: |warn|(val, ...):void |Same as log.|",
          "1267: ### Options \"console.assert\"",
          "1268: |Option|Type|Description|Flags|",
          "",
          "[Removed Lines]",
          "1265: |puts|(val, ...):void |Same as System.puts, but goes to stderr.|",
          "",
          "[Added Lines]",
          "1267: |puts|(val:any, ...):void |Same as System.puts, but goes to stderr.|",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f56367b712b0d56dbeac4c40c280e690f3f391f8",
      "candidate_info": {
        "commit_hash": "f56367b712b0d56dbeac4c40c280e690f3f391f8",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f56367b712b0d56dbeac4c40c280e690f3f391f8",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.15\": Enforce LOCKSAFE options.\n\nFossilOrigin-Name: 0c09596da715047cf00e101834e9b694feeaac6e6e85060e0d4e779aae802711",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 14",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 15",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:                 Jsi_PkgOpts po = {};",
          "1002:                 Jsi_Value *nopts = NULL;",
          "1003:                 if (opts) {",
          "1006:                     po.info = nopts;",
          "1007:                 }",
          "1008:                 Jsi_RC rc = Jsi_PkgProvideEx(interp->topInterp, name, version, initProc, &po);",
          "1009:                 if (rc != JSI_OK)",
          "1010:                     return JSI_ERROR;",
          "1011:                 ptr = jsi_PkgGet(interp->topInterp, name);",
          "",
          "[Removed Lines]",
          "1004:                     nopts = Jsi_ValueNew(interp);",
          "1005:                     Jsi_CleanValue(interp, interp->topInterp, po.info, &nopts);",
          "",
          "[Added Lines]",
          "1004:                     nopts = Jsi_ValueNew1(interp->topInterp);",
          "1005:                     Jsi_CleanValue(interp, interp->topInterp, opts, &nopts);",
          "1009:                 if (nopts)",
          "1010:                     Jsi_DecrRefCount(interp->topInterp, nopts);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     JSI_OPT(ARRAY, Jsi_Interp, autoFiles,   .help=\"File(s) to source for loading Jsi_Auto to handle unknown commands\"),",
          "89:     JSI_OPT(CUSTOM,Jsi_Interp, busyCallback,.help=\"Command in parent interp (or noOp) to periodically call\", .flags=0, .custom=Jsi_Opt_SwitchParentFunc, .data=(void*)\"interpName:string, opCnt:number\"),",
          "90:     JSI_OPT(INT   ,Jsi_Interp, busyInterval,.help=\"Call busyCallback command after this many op-code evals (100000)\"),",
          "92:     JSI_OPT(BOOL,  Jsi_Interp, coverage,    .help=\"On exit generate detailed code coverage for function calls (with profile)\"),",
          "93:     JSI_OPT(CUSTOM,Jsi_Interp, debugOpts,   .help=\"Options for debugging\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpDebugOptions),",
          "94:     JSI_OPT(BOOL,  Jsi_Interp, interactive, .help=\"Force interactive mode. ie. ignore no_interactive flag\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "91:     JSI_OPT(STRKEY,Jsi_Interp, confFile,    .help=\"Config file of options in non-strict JSON form\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "91:     JSI_OPT(STRKEY,Jsi_Interp, confFile,    .help=\"Config file of options in JSON non-strict format\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "118:     JSI_OPT(FUNC,  Jsi_Interp, onComplete,  .help=\"Function to return commands completions for interactive mode.  Default uses Info.completions \", .flags=0, .custom=0, .data=(void*)\"prefix:string, start:number, end:number\" ),",
          "119:     JSI_OPT(FUNC,  Jsi_Interp, onEval,      .help=\"Function to get control for interactive evals\", .flags=0, .custom=0, .data=(void*)\"cmd:string\" ),",
          "120:     JSI_OPT(FUNC,  Jsi_Interp, onExit,      .help=\"Command to call in parent on exit, returns true to continue\", jsi_IIOF , .custom=0, .data=(void*)\"\"),",
          "",
          "[Removed Lines]",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\" ),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noNetwork,   .help=\"Disable new Socket/WebSocket, or load of builtin MySql\" ),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noStderr,    .help=\"Make puts, log, assert, etc use stdout\" ),",
          "117:     JSI_OPT(BOOL,  Jsi_Interp, noSubInterps,.help=\"Disallow sub-interp creation\"),",
          "",
          "[Added Lines]",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "115:     JSI_OPT(BOOL,  Jsi_Interp, noNetwork,   .help=\"Disable new Socket/WebSocket, or load of builtin MySql\", .flags=JSI_OPT_LOCKSAFE),",
          "116:     JSI_OPT(BOOL,  Jsi_Interp, noStderr,    .help=\"Make puts, log, assert, etc use stdout\", .flags=JSI_OPT_LOCKSAFE),",
          "117:     JSI_OPT(BOOL,  Jsi_Interp, noSubInterps,.help=\"Disallow sub-interp creation\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     JSI_OPT(STRING,Jsi_Interp, scriptFile,  .help=\"Interp init script file\"),",
          "130:     JSI_OPT(STRING,Jsi_Interp, stdinStr,    .help=\"String to use as stdin for console.input()\"),",
          "131:     JSI_OPT(STRING,Jsi_Interp, stdoutStr,   .help=\"String to collect stdout for puts()\"),",
          "133:     JSI_OPT(CUSTOM,Jsi_Interp, subOpts,     .help=\"Infrequently used sub-options\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=InterpSubOptions),",
          "134:     JSI_OPT(BOOL,  Jsi_Interp, subthread,   .help=\"Create a threaded Interp\", jsi_IIOF|JSI_OPT_LOCKSAFE),",
          "135:     JSI_OPT(CUSTOM,Jsi_Interp, traceCall,   .help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "132:     JSI_OPT(BOOL,  Jsi_Interp, strict,      .help=\"Globally enable strict: same as 'use strict' in main program\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:     int len, iskey;",
          "227:     Jsi_Obj *obj;",
          "228:     switch (val->vt) {",
          "230:         case JSI_VT_NULL: Jsi_ValueMakeNull(tointerp, ret); return rc;",
          "231:         case JSI_VT_BOOL: Jsi_ValueMakeBool(tointerp, ret, val->d.val); return rc;",
          "232:         case JSI_VT_NUMBER: Jsi_ValueMakeNumber(tointerp, ret, val->d.num); return rc;",
          "",
          "[Removed Lines]",
          "229:         case JSI_VT_UNDEF: Jsi_ValueMakeUndef(interp, ret); return rc;",
          "",
          "[Added Lines]",
          "229:         case JSI_VT_UNDEF: Jsi_ValueMakeUndef(tointerp, ret); return rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1418:     if (parent && parent->isSafe) {",
          "1419:         interp->isSafe = 1;",
          "1420:         interp->safeMode = parent->safeMode;",
          "1422:         if (interp->safeWriteDirs || interp->safeReadDirs || interp->safeExecPattern) {",
          "1423:             Jsi_LogWarn(\"ignoring safe* options in safe sub-sub-interp\");",
          "1424:             if (interp->safeWriteDirs) Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "",
          "[Removed Lines]",
          "1421:         interp->maxOpCnt = parent->maxOpCnt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1426:             interp->safeWriteDirs = interp->safeReadDirs = NULL;",
          "1427:             interp->safeExecPattern = NULL;",
          "1428:         }",
          "1429:     }",
          "1431:     jsi_InterpConfFiles(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429:         interp->maxDepth = parent->maxDepth;",
          "1430:         interp->maxArrayList = parent->maxArrayList;",
          "1431:         interp->maxIncDepth = parent->maxIncDepth;",
          "1432:         interp->maxInterpDepth = parent->maxInterpDepth;",
          "1433:         interp->maxUserObjs = parent->maxUserObjs;",
          "1434:         interp->maxOpCnt = parent->maxOpCnt;",
          "1435:         interp->memLeakCnt = parent->memLeakCnt;",
          "1436:         if (parent->noLoad) interp->noLoad = 1;",
          "1437:         if (parent->noNetwork) interp->noNetwork = 1;",
          "1438:         if (parent->noStderr) interp->noStderr = 1;",
          "1439:         if (parent->noSubInterps) interp->noSubInterps = 1;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: <tr><td>autoFiles</td><td><i>ARRAY</i></td><td>File(s) to source for loading Jsi_Auto to handle unknown commands.</td><td><i></i></td></tr>",
          "623: <tr><td>busyCallback</td><td><i>CUSTOM</i></td><td>Command in parent interp (or noOp) to periodically call.</td><td><i></i></td></tr>",
          "624: <tr><td>busyInterval</td><td><i>INT</i></td><td>Call busyCallback command after this many op-code evals (100000).</td><td><i></i></td></tr>",
          "626: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "627: <tr><td>debugOpts</td><td><i><a href='#debugOptsOptions'>options</a></i></td><td>Options for debugging.</td><td><i></i></td></tr>",
          "628: <tr><td>interactive</td><td><i>BOOL</i></td><td>Force interactive mode. ie. ignore no_interactive flag.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "625: <tr><td>confFile</td><td><i>STRKEY</i></td><td>Config file of options in non-strict JSON form.</td><td><i>initOnly</i></td></tr>",
          "",
          "[Added Lines]",
          "625: <tr><td>confFile</td><td><i>STRKEY</i></td><td>Config file of options in JSON non-strict format.</td><td><i>initOnly</i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cedfa95b3f53a34284ceed42a59f803daef52843",
      "candidate_info": {
        "commit_hash": "cedfa95b3f53a34284ceed42a59f803daef52843",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/cedfa95b3f53a34284ceed42a59f803daef52843",
        "files": [
          "lib/DebugUI/DebugUI.jsi",
          "lib/SqliteUI/SqliteUI.jsi",
          "lib/UnitTest.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiOptions.c",
          "src/jsiProto.c",
          "src/jsiPstate.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tests/assert.jsi",
          "tests/evalthrow.jsi",
          "tests/logging.jsi",
          "tests/strict.jsi",
          "tests/syntax.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.36\": Add stack-dump, change runtime params, cleanup.\n\nFossilOrigin-Name: ed08ddd8563d5f86248f6fa596fe975ad2fb56500021a52717c6074106a12e7f",
        "before_after_code_files": [
          "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi",
          "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi",
          "lib/UnitTest.jsi||lib/UnitTest.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tests/assert.jsi||tests/assert.jsi",
          "tests/evalthrow.jsi||tests/evalthrow.jsi",
          "tests/logging.jsi||tests/logging.jsi",
          "tests/strict.jsi||tests/strict.jsi",
          "tests/syntax.jsi||tests/syntax.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiOptions.c||src/jsiOptions.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiOptions.c||src/jsiOptions.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/DebugUI.jsi||lib/DebugUI/DebugUI.jsi": [
          "File: lib/DebugUI/DebugUI.jsi -> lib/DebugUI/DebugUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:         stopped:false,",
          "52:         toplev:0,",
          "53:         version:1.0,",
          "55:         browsers: {                     // Not used, yet.",
          "56:             unix:[ \"xdg-open\", \"gnome-open\", \"firefox\", \"google-chrome\" ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:         Debug:false,",
          "55:         Trace:false,",
          "",
          "---------------"
        ],
        "lib/SqliteUI/SqliteUI.jsi||lib/SqliteUI/SqliteUI.jsi": [
          "File: lib/SqliteUI/SqliteUI.jsi -> lib/SqliteUI/SqliteUI.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: function SqliteUI(files:array|string, conf:object=void)",
          "9: {",
          "10:     var options = { // Provide an sqlite user interface via a browser.",
          "13:         closeTimeout:5000,              // Time til exit after close of final client websocket (ms).",
          "14:         browser     :'',                // Browser program to use.",
          "15:         dump        :false,             // Dump database.",
          "",
          "[Removed Lines]",
          "11:         Debug       :false,             // LogDebug output.",
          "12:         Trace       :false,             // LogTrace output.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:     function main() {",
          "557:         debugger;",
          "558:         self.done = 0;",
          "559:         var req = require(\"SqliteUI\", 1.0);",
          "560:         if (!self.rootdir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:         LogTrace('Starting', files);",
          "",
          "---------------"
        ],
        "lib/UnitTest.jsi||lib/UnitTest.jsi": [
          "File: lib/UnitTest.jsi -> lib/UnitTest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         outfile:'/tmp/utest.txt',",
          "30:         startTime:0,",
          "31:         version:1.0,",
          "33:     };",
          "34:     moduleOpts(self, options);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:         Trace:false,",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 35",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 36",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:         if (JSI_OK != jsi_csCDataNew(interp, name, structName, help, varParm, vd+i))",
          "377:             return JSI_ERROR;",
          "394:     }",
          "395:     return JSI_OK;",
          "396: }",
          "",
          "[Removed Lines]",
          "378: #if 0",
          "379:         Jsi_DString dStr;",
          "380:         Jsi_DSInit(&dStr);",
          "381:         Jsi_DSPrintf(&dStr, \"var %s = new CData({name:\\\"%s\\\", structName:\\\"%s\\\"});\", name, name, structName);",
          "382:         if (help)",
          "383:             Jsi_DSPrintf(&dStr, \", help:\\\"%s\\\"\", help);",
          "386:         if (varParm)",
          "387:             Jsi_DSPrintf(&dStr, \", varParam:\\\"%s\\\"\", varParm);",
          "388:         Jsi_DSPrintf(&dStr, \"});\");",
          "389:         Jsi_RC rc = Jsi_EvalString(interp, Jsi_DSValue(&dStr), 0);",
          "390:         Jsi_DSFree(&dStr);",
          "391:         if (rc != JSI_OK)",
          "392:             return JSI_ERROR;",
          "393: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602: static Jsi_RC SysPutsCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret,",
          "1603:     Jsi_Func *funcPtr, bool stdErr, jsi_LogOptions *popts, const char *argStr, bool conLog, int islog)",
          "1604: {",
          "1606:     bool isbool = 0;",
          "1607:     const char *fn = NULL;",
          "1608:     Jsi_DString dStr, oStr;",
          "1609:     Jsi_Value *v;",
          "1611:         v = Jsi_ValueArrayIndex(interp, args, 1);",
          "1612:         if ((isbool=Jsi_ValueIsBoolean(interp, v)))",
          "1613:             if (Jsi_ValueIsFalse(interp, v)) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1605:     int i = 0, cnt = 0, quote = (popts->file);",
          "1610:     if (islog == 2) {",
          "",
          "[Added Lines]",
          "1605:     int i = 0, cnt = 0, argc = 0, quote = (popts->file);",
          "1610:     if (args)",
          "1611:         argc = Jsi_ValueGetLength(interp, args);",
          "1612:     if (islog == 2 && argc > 2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1629:         jsi_SysPutsCmdPrefix(interp, popts, &dStr, &quote, &fn);",
          "1630:     if (argStr)",
          "1631:         Jsi_DSAppend(&dStr, argStr, NULL);",
          "1634:         if (conLog && argc>0 && (argStr=Jsi_ValueString(interp, Jsi_ValueArrayIndex(interp, args, 0), NULL))) {",
          "1635:             if (   ((!(interp->log&(1<<JSI_LOG_ERROR))) && jsi_PrefixMatch(argStr, \"ERROR: \"))",
          "1636:                 || ((!(interp->log&(1<<JSI_LOG_WARN))) && jsi_PrefixMatch(argStr, \"WARN: \"))",
          "",
          "[Removed Lines]",
          "1632:     if (args) {",
          "1633:         int argc = Jsi_ValueGetLength(interp, args);",
          "",
          "[Added Lines]",
          "1634:     if (args) { // Assert may call with a null args",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1953:             ms = atof(rv+1);",
          "1954:             rv += 4;",
          "1955:         }",
          "1969:         {",
          "1970:             int th, ts;",
          "1971:             char ss[3];",
          "",
          "[Removed Lines]",
          "1956: #if 0",
          "1957:         if (!isUtc) {",
          "1958: #ifdef __WIN32",
          "1959: #ifdef JSI_IS64BIT",
          "1960:             t = internal_timegm(&tm);",
          "1961: #else",
          "1962:             t = _mkgmtime(&tm); // TODO: undefined in mingw 64",
          "1963: #endif",
          "1964: #else",
          "1965:             t = timegm(&tm);",
          "1966: #endif",
          "1967:         } else",
          "1968: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4505:         rc = Jsi_LogError(\"unknown command: %s\", (mod?mod:\"\"));",
          "4506:         goto done;",
          "4507:     }",
          "4509:         goto done;",
          "4512:     if (!v2) {",
          "4513:         obj = Jsi_ObjNewArray(interp, NULL, 0, 0);",
          "",
          "[Removed Lines]",
          "4508:     if (!isMain && cmd->d.obj->d.fobj->func->filePtr->fileName == interp->framePtr->filePtr->fileName)",
          "",
          "[Added Lines]",
          "4496:     if (!isMain && cmd->d.obj->d.fobj->func->filePtr->fileName == interp->framePtr->filePtr->fileName) {",
          "4497:         interp->framePtr->filePtr->pkg->loadLine = interp->curIp->Line; // for backtrace.",
          "4499:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4805:             pf->pkg->log = mo->log;",
          "4806:         }",
          "4807:         uint i;",
          "4809:             Jsi_Value *vlv;",
          "4810:             uint iff = (1<<i);",
          "4811:             if ((vlv = Jsi_ValueObjLookup(interp, v1, jsi_LogCodesU[i], 0))) {",
          "4812:                  if (Jsi_ValueIsFalse(interp, vlv)) {",
          "4813:                      pf->pkg->logmask |= iff;",
          "",
          "[Removed Lines]",
          "4808:         for (i=JSI_LOG_DEBUG; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Added Lines]",
          "4797:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "4800:             if ((mo->log&iff))",
          "4801:                 continue;",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     ret->code_size = a->code_len + b->code_len;",
          "171:     ret->code_len = ret->code_size;",
          "172:     ret->expr_counter = a->expr_counter + b->expr_counter;",
          "179:     Jsi_Free(a->codes);",
          "180:     Jsi_Free(b->codes);",
          "181: #ifdef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "173: #if 0",
          "174:     a->code_len=0;",
          "175:     jsi_FreeOpcodes(a);",
          "176:     b->code_len=0;",
          "177:     jsi_FreeOpcodes(b);",
          "178: #else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186: #endif",
          "187:     Jsi_Free(a);",
          "188:     Jsi_Free(b);",
          "190:     jsiOpCodesCnt[1]++;",
          "191:     jsiOpCodesCnt[2]-=2;",
          "192:     return ret;",
          "",
          "[Removed Lines]",
          "189: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:     Jsi_Value **ret, Jsi_Value *tocall, int discard)",
          "711: {",
          "712:     Jsi_RC rc = JSI_OK;",
          "714:     jsi_OpCode *ip = interp->curIp;",
          "715:     int adds, as_constructor = (ip->op == OP_NEWFCALL);",
          "716:     int calltrc = 0;",
          "",
          "[Removed Lines]",
          "713:     const char *oldCurFunc = interp->curFunction, *spnam = \"\";",
          "",
          "[Added Lines]",
          "713:     const char *spnam = \"\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740:         Jsi_DecrRefCount(interp, _this);",
          "741:         if (rc==JSI_OK)",
          "742:             rc = JSI_CONTINUE;",
          "",
          "[Removed Lines]",
          "739:         interp->curFunction = oldCurFunc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "762:     if (adds && (cs->flags&JSI_CMDSPEC_NONTHIS))",
          "763:         adds = 0;",
          "769:         Jsi_Obj *newobj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "",
          "[Removed Lines]",
          "765:     Jsi_Func *pprevActive = interp->prevActiveFunc;",
          "766:     interp->prevActiveFunc = interp->activeFunc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "791:     if (!onam)",
          "792:         funcPtr->name = NULL;",
          "794:     if (as_constructor && rc == JSI_OK) {",
          "795:         if (_this->vt == JSI_VT_OBJECT)",
          "796:             _this->d.obj->constructor = tocall->d.obj;",
          "",
          "[Removed Lines]",
          "793:     interp->prevActiveFunc = pprevActive;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "801:     }",
          "803:     Jsi_DecrRefCount(interp, _this);",
          "806:     return rc;",
          "807: }",
          "",
          "[Removed Lines]",
          "804:     interp->curFunction = oldCurFunc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2005:     return rc;",
          "2006: }",
          "2009: Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "2010:          jsi_ScopeChain *scope, Jsi_Value *fargs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2003: void jsi_DumpStackTrace(Jsi_Interp *interp) {",
          "2004:     int firstLev = 1, max = interp->maxDumpStack, amax=interp->maxDumpArgs;",
          "2005:     if (interp->dumpedStack || !max) return;",
          "2006:     interp->dumpedStack = 1;",
          "2007:     jsi_Frame *fp = interp->topFrame.child;",
          "2008:     Jsi_DString dStr = {}, aStr = {};",
          "2009:     Jsi_DSAppend(&dStr, \"CALL BACKTRACE:\\n\", NULL);",
          "2010:     if (interp->framePtr->level > max) {",
          "2011:         firstLev = (interp->framePtr->level-max);",
          "2012:         while (fp && fp->level<firstLev)",
          "2013:             fp = fp->child;",
          "2014:     }",
          "2015:     while (fp) {",
          "2016:         const char *fn = fp->filePtr->fileName, *func = fp->funcName, *cp;",
          "2017:         int line = fp->line;",
          "2018:         Jsi_Value *args = fp->incsc;",
          "2019:         if (func && fp->level == 1 && interp->args && !Jsi_Strcmp(func, \"moduleRun\")) {",
          "2020:             args = interp->args;",
          "2021:             if (!*fn && fp->child && fp->child->filePtr) {",
          "2022:                 fn = fp->child->filePtr->fileName;",
          "2023:                 line = fp->child->filePtr->pkg->loadLine;",
          "2024:             }",
          "2025:         }",
          "2026:         if (fn && ((cp=Jsi_Strrchr(fn, '/'))))",
          "2027:             fn = cp +1;",
          "2028:         Jsi_DSPrintf(&dStr, \"#%d: %s:%d: \", fp->level, fn, line);",
          "2029:         if (func && fp->incsc) {",
          "2030:             Jsi_ValueGetDString(interp, args, &aStr, 1);",
          "2031:             char *sp = Jsi_DSValue(&aStr);",
          "2032:             int len = Jsi_Strlen(sp);",
          "2033:             if (len>1) {",
          "2034:                 sp[0] = '(';",
          "2035:                 sp[len-1]=')';",
          "2036:             }",
          "2037:             if (len>amax) {",
          "2038:                 Jsi_DSSetLength(&aStr, amax);",
          "2039:                 cp = Jsi_DSAppend(&aStr, \" ...)\", NULL);",
          "2040:             }",
          "2041:             Jsi_DSPrintf(&dStr, \" in %s%s\",  func, sp);",
          "2042:         }",
          "2043:         Jsi_DSAppend(&dStr, \"\\n\", NULL);",
          "2044:         Jsi_DSSetLength(&aStr, 0);",
          "2045:         fp = fp->child;",
          "2046:     }",
          "2047:     Jsi_DSAppend(&dStr, \"\\n\", NULL);",
          "2048:     fputs(Jsi_DSValue(&dStr), stderr);",
          "2049:     Jsi_DSFree(&aStr);",
          "2050:     Jsi_DSFree(&dStr);",
          "2051: }",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:     return 1;",
          "491: }",
          "505: Jsi_Func *jsi_FuncMake(jsi_Pstate *pstate, Jsi_ScopeStrs *args, Jsi_OpCodes *ops, jsi_Pline* line, const char *name, int isArrow)",
          "506: {",
          "",
          "[Removed Lines]",
          "493: #if 0",
          "495: const char* jsi_GetDirective(Jsi_Interp *interp, Jsi_OpCodes *ops, const char *str) {",
          "496:     if (!ops) return NULL;",
          "497:     if (!ops->code_len) return NULL;",
          "498:     if (ops->codes[0].op != OP_PUSHSTR || !ops->codes[0].data) return NULL;",
          "499:     if (Jsi_Strncmp((char*)ops->codes[0].data, str, Jsi_Strlen(str))) return NULL;",
          "500:     return (char*)ops->codes[0].data;",
          "501: }",
          "502: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: #define __DBL_DECIMAL_DIG__ 17",
          "229: #endif",
          "232: #ifndef uint",
          "233: typedef unsigned int uint;",
          "234: #endif",
          "",
          "[Removed Lines]",
          "231: #if 0",
          "",
          "[Added Lines]",
          "231: #ifdef __JSI_DEF_UNSIGNED__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "905:     Jsi_Value *info;",
          "906:     Jsi_PkgOpts popts;",
          "907:     jsi_FileInfo* filePtr;",
          "909: } jsi_PkgInfo;",
          "911: typedef struct {",
          "",
          "[Removed Lines]",
          "908:     int log, logmask;",
          "",
          "[Added Lines]",
          "907:     int log, logmask; // Runtime values set by moduleOps.",
          "908:     int loadLine; // set by moduleRun",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "963: } Jsi_TypeCheck;",
          "965: typedef enum {",
          "966:     jsi_AssertModeLog,",
          "969: } jsi_AssertMode;",
          "971: typedef struct {",
          "",
          "[Removed Lines]",
          "967:     jsi_AssertModePuts,",
          "968:     jsi_AssertModeThrow",
          "",
          "[Added Lines]",
          "966:     jsi_AssertModeThrow,",
          "968:     jsi_AssertModePuts",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1267:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
          "1268:     int cur_scope;",
          "1269:     uint maxArrayList;",
          "1270:     int delRBCnt;",
          "1271:     Jsi_Func *activeFunc;  // Currently active function call.",
          "1272:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1270:     uint maxDumpStack, maxDumpArgs;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1298:     InterpStrEvent *interpStrEvents;",
          "1300:     bool typeInit;",
          "1301:     Jsi_Number cdataIncrVal;",
          "1302:     Jsi_CData_Static *statics;",
          "1303:     Jsi_VarSpec *cdataNewVal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:     bool dumpedStack;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1523: extern Jsi_RC jsi_RegExpMatches(Jsi_Interp *interp, Jsi_Value *pattern, const char *str, int slen, Jsi_Value *ret, int *ofs, bool match);",
          "1524: extern Jsi_RC Jsi_CleanValue(Jsi_Interp *interp, Jsi_Interp *tointerp, Jsi_Value *val, Jsi_Value **ret); //TODO: EXPORT",
          "1525: extern void jsi_SysPutsCmdPrefix(Jsi_Interp *interp, jsi_LogOptions *popts,Jsi_DString *dStr, int* quote, const char **fnPtr);",
          "1527: extern char jsi_toHexChar(char code);",
          "1528: extern char jsi_fromHexChar(char ch);",
          "1529: extern bool Jsi_StrIsAlnum(const char *cp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1528: extern void jsi_DumpStackTrace(Jsi_Interp *interp);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
          "101:     JSI_OPT(CUSTOM,Jsi_Interp, log,         .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
          "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
          "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
          "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     JSI_OPT(UINT,  Jsi_Interp, maxDumpStack,.help=\"Maximum stack dump length (100)\", .flags=JSI_OPT_LOCKSAFE),",
          "104:     JSI_OPT(UINT,  Jsi_Interp, maxDumpArgs, .help=\"Maximum arg length in stack dump (80)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "743: #endif",
          "744:     const char *ext = NULL, *ai1, *iext = (argc<=1?NULL:Jsi_Strrchr(argv[1], '.'));",
          "745:     if (interp->selfZvfs && iext && Jsi_Strcmp(iext,\".fossil\")==0) {",
          "747:         goto done;",
          "748:     }",
          "749:     Jsi_ShiftArgs(interp, NULL);",
          "",
          "[Removed Lines]",
          "746:         rc = Jsi_EvalString(interp, \"runModule('Archive');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "748:         rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:         if (argc>2) {",
          "759:             if (Jsi_PkgRequire(interp, \"Help\", 0)>=0) {",
          "760:                 char tbuf[BUFSIZ];",
          "762:                 Jsi_RC rc = Jsi_EvalString(interp, tbuf, 0);",
          "763:                 const char *hstr = Jsi_ValueToString(interp, interp->retValue, NULL);",
          "764:                 if (rc == JSI_OK)",
          "",
          "[Removed Lines]",
          "761:                 snprintf(tbuf, sizeof(tbuf), \"return runModule('Help', '%s'.trim().split(null));\", argv[2]);",
          "",
          "[Added Lines]",
          "763:                 snprintf(tbuf, sizeof(tbuf), \"return moduleRun('Help', '%s'.trim().split(null));\", argv[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "771:           \"\\nPREFIX-OPTS:\\n\"",
          "772:           \"  --C FILE\\tOption file of config options.\\n\"",
          "773:           \"  --F\\t\\tTrace all function calls and returns.\\n\"",
          "776:           \"  --S PATH\\tSet safeMode to \\\"lockdown\\\" using PATH for safe(Read/Write)Dirs.\\n\"",
          "777:           \"  --U\\t\\tDisplay unittest output, minus pass/fail compare.\\n\"",
          "778:           \"  --V\\t\\tSame as --U, but adds file and line number to output.\\n\"",
          "779:           \"\\nCOMMAND-OPTS:\\n\"",
          "780:           \"  -a\\t\\tArchive: mount an archive (zip, sqlar or fossil repo) and run module.\\n\"",
          "781:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "",
          "[Removed Lines]",
          "774:           \"  --I OPT:VAL\\tInterp option: equivalent to Interp.conf({OPT:VAL}).\\n\"",
          "775:           \"  --L OPT\\tLog settings: equivalent to Interp.conf({log:'+XXX'})..\\n\"",
          "",
          "[Added Lines]",
          "776:           \"  --I OPT=VAL\\tInterp option bits: equivalent to Interp.conf({OPT:VAL}).\\n\"",
          "777:           \"  --L OPT\\tLogging bits: equivalent to Interp.conf({log:'XXX'})..\\n\"",
          "779:           \"  --T OPT\\tTypechecking bits: equivalent to Interp.conf({typeCheck:'XXX'})..\\n\"",
          "782:           \"  --X OPT\\tTracing bits: equivalent to Interp.conf({traceCall:'XXX'})..\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "801:     if (ai1[0] == '-') {",
          "802:         switch (ai1[1]) {",
          "803:             case 'a':",
          "805:                 break;",
          "806:             case 'c':",
          "808:                 break;",
          "809:             case 'd':",
          "810:                 interp->debugOpts.isDebugger = 1;",
          "812:                 break;",
          "813:             case 'D':",
          "814:                 interp->debugOpts.isDebugger = 1;",
          "816:                 break;",
          "817:             case 'e':",
          "818:                 if (argc < 3)",
          "",
          "[Removed Lines]",
          "804:                 rc = Jsi_EvalString(interp, \"runModule('Archive');\", JSI_EVAL_ISMAIN);",
          "807:                 rc = Jsi_EvalString(interp, \"runModule('Cdata');\", JSI_EVAL_ISMAIN);",
          "811:                 rc = Jsi_EvalString(interp, \"runModule('Debug');\", JSI_EVAL_ISMAIN);",
          "815:                 rc = Jsi_EvalString(interp, \"runModule('DebugUI');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "808:                 rc = Jsi_EvalString(interp, \"moduleRun('Archive');\", JSI_EVAL_ISMAIN);",
          "811:                 rc = Jsi_EvalString(interp, \"moduleRun('Cdata');\", JSI_EVAL_ISMAIN);",
          "815:                 rc = Jsi_EvalString(interp, \"moduleRun('Debug');\", JSI_EVAL_ISMAIN);",
          "819:                 rc = Jsi_EvalString(interp, \"moduleRun('DebugUI');\", JSI_EVAL_ISMAIN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "825:             case 'h':",
          "826:                 goto dohelp;",
          "827:             case 'J':",
          "829:                 break;",
          "830:             case 'm':",
          "831:                 if (argc <= 2 || argv[2][0] == '-')",
          "833:                 else {",
          "834:                     Jsi_DString dStr = {}, eStr = {};",
          "835:                     const char *cps, *cpe;",
          "",
          "[Removed Lines]",
          "828:                 rc = Jsi_EvalString(interp, \"runModule('Jspp');\", JSI_EVAL_ISMAIN);",
          "832:                     rc = Jsi_EvalString(interp, \"runModule('Module');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "832:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "836:                     rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "841:                         Jsi_DSPrintf(&dStr, \"source(\\\"%s\\\");\", argv[2]);",
          "842:                     else",
          "843:                         Jsi_DSPrintf(&dStr, \"require(\\\"%s\\\");\", argv[2]);",
          "845:                     rc = Jsi_EvalString(interp, Jsi_DSValue(&dStr), JSI_EVAL_NOSKIPBANG);",
          "846:                     Jsi_DSFree(&dStr);",
          "847:                     Jsi_DSFree(&eStr);",
          "848:                 }",
          "849:                 break;",
          "850:             case 's':",
          "852:                 break;",
          "853:             case 'S':",
          "855:                 break;",
          "856:             case 'u':",
          "858:                 break;",
          "859:             case 'v': {",
          "860:                 char str[200] = \"\\n\";",
          "",
          "[Removed Lines]",
          "844:                     Jsi_DSPrintf(&dStr, \"puts(runModule(\\\"%.*s\\\",console.args.slice(1)));\", len, cps);",
          "851:                 rc = Jsi_EvalString(interp, \"runModule('Safe');\", JSI_EVAL_ISMAIN);",
          "854:                 rc = Jsi_EvalString(interp, \"runModule('SqliteUI');\", JSI_EVAL_ISMAIN);",
          "857:                 rc = Jsi_EvalString(interp, \"exit(runModule('UnitTest'));\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "848:                     Jsi_DSPrintf(&dStr, \"puts(moduleRun(\\\"%.*s\\\",console.args.slice(1)));\", len, cps);",
          "855:                 rc = Jsi_EvalString(interp, \"moduleRun('Safe');\", JSI_EVAL_ISMAIN);",
          "858:                 rc = Jsi_EvalString(interp, \"moduleRun('SqliteUI');\", JSI_EVAL_ISMAIN);",
          "861:                 rc = Jsi_EvalString(interp, \"exit(moduleRun('UnitTest'));\", JSI_EVAL_ISMAIN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "872:                 return jsi_DoExit(interp, 1);",
          "873:             }",
          "874:             case 'w':",
          "876:                 break;",
          "877:             case 'W':",
          "879:                 break;",
          "880:             case 'z':",
          "882:                 break;",
          "883:             default:",
          "885:                 \"| -a | -c | -d | -D | -h | -m | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "886:                 return jsi_DoExit(interp, 1);",
          "887:         }",
          "",
          "[Removed Lines]",
          "875:                 rc = Jsi_EvalString(interp, \"runModule('Wget');\", JSI_EVAL_ISMAIN);",
          "878:                 rc = Jsi_EvalString(interp, \"runModule('Websrv');\", JSI_EVAL_ISMAIN);",
          "881:                 rc = Jsi_EvalString(interp, \"runModule('Zip');\", JSI_EVAL_ISMAIN);",
          "884:                 puts(\"usage: jsish [  --C FILE | --I OPT:VAL | --L OPT | --T OPT | --S PATH | --U | --V | --F ] | -e STRING |\\n\\t\"",
          "",
          "[Added Lines]",
          "879:                 rc = Jsi_EvalString(interp, \"moduleRun('Wget');\", JSI_EVAL_ISMAIN);",
          "882:                 rc = Jsi_EvalString(interp, \"moduleRun('Websrv');\", JSI_EVAL_ISMAIN);",
          "885:                 rc = Jsi_EvalString(interp, \"moduleRun('Zip');\", JSI_EVAL_ISMAIN);",
          "888:                 puts(\"usage: jsish [  --C FILE | --I OPT:VAL | --L OPT | --T OPT | --X OPT | --S PATH | --U | --V | --F ] | -e STRING |\\n\\t\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "902:             }",
          "903:         } else if (ext && !Jsi_Strcmp(ext,\".jsc\")) {",
          "904:             Jsi_DString dStr = {};",
          "906:             rc = Jsi_EvalString(interp, Jsi_DSValue(&dStr), JSI_EVAL_ISMAIN|JSI_EVAL_NOSKIPBANG);",
          "907:             Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "905:             Jsi_DSPrintf(&dStr, \"console.args.unshift('%s'); runModule('CData');\", argv[first]);",
          "",
          "[Added Lines]",
          "909:             Jsi_DSPrintf(&dStr, \"console.args.unshift('%s'); moduleRun('CData');\", argv[first]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1083:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
          "1084:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
          "1085:     interp->maxArrayList = MAX_ARRAY_LIST;",
          "1086:     interp->typeWarnMax = 50;",
          "1087:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
          "1088:     interp->subOpts.prompt = \"$ \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090:     interp->maxDumpStack = 100;",
          "1091:     interp->maxDumpArgs = 80;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1141:             break;",
          "1142:         else {",
          "1143:             switch (aio[2]) {",
          "1145:                     continue;",
          "1146:                 case 'F': case 'U': case 'V':  iocnt--;",
          "1147:                     continue;",
          "",
          "[Removed Lines]",
          "1144:                 case 'T': case 'S': case 'C': case 'L':",
          "",
          "[Added Lines]",
          "1150:                 case 'T': case 'S': case 'C': case 'L': case 'X':",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1263:                     interp->iskips+=2;",
          "1264:                     continue;",
          "1265:                 }",
          "1273:                     Jsi_IncrRefCount(interp, lv);",
          "1274:                     if (aio[2]=='L')",
          "1275:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"log\", lv, 0);",
          "1277:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"typeCheck\", lv, 0);",
          "1278:                     Jsi_DecrRefCount(interp, lv);",
          "1280:                     if (JSI_OK != rc) {",
          "1282:                         Jsi_InterpDelete(interp);",
          "",
          "[Removed Lines]",
          "1266:                 case 'T': case 'L': {",
          "1267:                     Jsi_DString tStr = {};",
          "1268:                     if (argv[iocnt+1][0]=='=')",
          "1269:                         Jsi_DSAppend(&tStr, argv[iocnt+1]+1, NULL);",
          "1270:                     else",
          "1271:                         Jsi_DSAppend(&tStr, \"+\", argv[iocnt+1], NULL);",
          "1272:                     Jsi_Value *lv = Jsi_ValueNewStringConst(interp, Jsi_DSValue(&tStr), -1);",
          "1276:                     else",
          "1279:                     Jsi_DSFree(&tStr);",
          "",
          "[Added Lines]",
          "1272:                 case 'T': case 'L': case 'X': {",
          "1273:                     Jsi_Value *lv = Jsi_ValueNewStringConst(interp, argv[iocnt+1], -1);",
          "1277:                     else if (aio[2]=='T')",
          "1279:                     else",
          "1280:                         rc = Jsi_OptionsSet(interp, InterpOptions, interp, \"traceCall\", lv, 0);",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:     if (m)",
          "404:         return Jsi_LogError(\"fetch failed: %s\", mysql_error(jdb->db));",
          "405:     return JSI_OK;",
          "415: }",
          "417: static void mdbRelease1Stmt( MySqlObj *jdb, MysqlPrep *prep ) {",
          "",
          "[Removed Lines]",
          "406: #if 0",
          "407:     if( eval->pArray ) {",
          "408:         mdbEvalRowInfo(eval, 0, 0, 0);",
          "409:     }",
          "410:     if (release==0)",
          "411:         return JSI_BREAK;",
          "412:     eval->prep = 0;",
          "413:     return JSI_OK;",
          "414: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569: static Jsi_RC jsi_ValueToBitset(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value *inValue, const char *inStr, void *record, Jsi_Wide flags)",
          "1570: {",
          "1573:     char *s =(((char*)record) + spec->offset);",
          "1574:     char **argv;",
          "1575:     const char *cp, **list = (const char**)spec->data;",
          "",
          "[Removed Lines]",
          "1572:     int i, argc, n;",
          "",
          "[Added Lines]",
          "1572:     Jsi_RC rc = JSI_OK;",
          "1573:     int i, argc, n, ass;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:         inStr = Jsi_ValueString(interp, inValue, NULL);",
          "1592: #endif",
          "1593:     if (inStr) {",
          "1595:             inStr++;",
          "1596:             m = im;",
          "1598:         if (*inStr) {",
          "1599:             Jsi_DString sStr;",
          "1600:             Jsi_DSInit(&sStr);",
          "",
          "[Removed Lines]",
          "1594:         if (*inStr == '+') {",
          "1597:         }",
          "",
          "[Added Lines]",
          "1595:         if ((ass=(*inStr == '=')))",
          "1597:         else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1603:             for (i=0; i<argc; i++) {",
          "1604:                 int isnot = 0;",
          "1605:                 cp = argv[i];",
          "1607:                 if (JSI_OK != Jsi_GetIndex(interp, cp, list, \"enum\", fflags, &n))",
          "1609:                 if (n >= (int)(spec->size*8))",
          "1611:                 if (isnot)",
          "1612:                     m &= ~(1<<n);",
          "1613:                 else",
          "1614:                     m |= (1<<n);",
          "1615:             }",
          "1616:             Jsi_DSFree(&sStr);",
          "1617:         }",
          "1618:     } else {",
          "1619: #ifndef JSI_LITE_ONLY",
          "1620:         if (!inValue) {",
          "1622:             return JSI_OK;",
          "",
          "[Removed Lines]",
          "1606:                 if (*cp == '!') { isnot = 1; cp++; }",
          "1608:                     return JSI_ERROR;",
          "1610:                     return Jsi_LogError(\"list larger than field size: %s\", spec->name);",
          "",
          "[Added Lines]",
          "1607:                 if (*cp == '!') {",
          "1608:                     if (ass)",
          "1609:                         rc = Jsi_LogError(\"Can not use '!' in a string starting with '='\");",
          "1610:                     isnot = 1; cp++;",
          "1611:                 }",
          "1613:                     rc = JSI_ERROR;",
          "1615:                     rc = Jsi_LogError(\"list larger than field size: %s\", spec->name);",
          "1622:             if (rc != JSI_OK)",
          "1623:                 return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1663:             if (!cp)",
          "1664:                 return Jsi_LogError(\"expected string\");",
          "1665:             if (i == 0) {",
          "1668:                     continue;",
          "1670:             }",
          "1671:             if (*cp == '!') { isnot = 1; cp++; }",
          "1672:             if (JSI_OK != Jsi_GetIndex(interp, cp, list, \"bitset\", fflags, &n))",
          "",
          "[Removed Lines]",
          "1666:                 if (*cp == '+' && !cp[1]) {",
          "1667:                     m = im;",
          "1669:                 }",
          "",
          "[Added Lines]",
          "1674:                 if (*cp == '=' && !cp[1])",
          "1676:                 else",
          "1677:                     m = im;",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: Jsi_RC jsi_FuncCallSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *callee,",
          "172:     Jsi_Value **ret, Jsi_Func *funcPtr, Jsi_Value *fthis, int calltrc)",
          "173: {",
          "174:     Jsi_Func *prevActive = interp->activeFunc;",
          "176:     Jsi_IncrRefCount(interp, args);",
          "177:     Jsi_RC rc = jsi_SharedArgs(interp, args, funcPtr, 1);",
          "178:     if (rc == JSI_OK) {",
          "180:         int profile = interp->profile, coverage = interp->coverage;",
          "181:         int tc = interp->traceCall;",
          "182:         double timStart = 0;",
          "",
          "[Removed Lines]",
          "175:     interp->activeFunc = funcPtr;",
          "",
          "[Added Lines]",
          "174:     Jsi_Func *pprevActive = interp->prevActiveFunc;",
          "178:     const char *oldCurFunc = interp->curFunction;",
          "179:     if (funcPtr->name && funcPtr->name[0] && funcPtr->type == FC_NORMAL)",
          "180:         interp->curFunction = funcPtr->name;",
          "183:         interp->prevActiveFunc = interp->activeFunc;",
          "184:         interp->activeFunc = funcPtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:     }",
          "262:     jsi_SharedArgs(interp, args, funcPtr, 0);",
          "263:     interp->activeFunc = prevActive;",
          "264:     Jsi_DecrRefCount(interp, args);",
          "265:     return rc;",
          "266: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     interp->curFunction = oldCurFunc;",
          "270:     interp->prevActiveFunc = pprevActive;",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     return jsi_ScopeStrsDup(ps, interp->scopes[interp->cur_scope]);",
          "172: }",
          "187: static Jsi_RC jsi_StringFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *d) {",
          "188:     Jsi_String *s = (Jsi_String *)d;",
          "189:     if (s->flags&1)",
          "",
          "[Removed Lines]",
          "174: #if 0",
          "175: static int fastVarFree(Jsi_Interp *interp, void *ptr) {",
          "176:     FastVar *fv = ptr;",
          "177:     Jsi_Value *v = fv->var.lval;",
          "178:     if (v) {",
          "181:     }",
          "182:     return JSI_OK;",
          "183: }",
          "184: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1732: }",
          "",
          "[Removed Lines]",
          "1736: #if 0",
          "1737: static void dbEvalRowInfo(",
          "1741:     int **papColType",
          "1742: ) {",
          "1746:     if( 0==p->apColName ) {",
          "1747:         sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
          "1751:         int *apColType = 0;",
          "1755:         p->nCol = nCol = sqlite3_column_count(pStmt);",
          "1756:         if( nCol>0 && (papColName || p->pArray) ) {",
          "1757:             int cnLen = sizeof(char*)*nCol, cnStart = cnLen;",
          "1758:             for(i=0; i<nCol && cnLen<sizeof(p->staticColNames); i++)",
          "1759:                 cnLen += Jsi_Strlen(sqlite3_column_name(pStmt,i))+1;",
          "1760:             if (cnLen>=sizeof(p->staticColNames)) {",
          "1761:                 apColName = (char**)Jsi_Calloc(nCol, sizeof(char*) );",
          "1762:                 cnStart = 0;",
          "1763:             } else {",
          "1764:                 apColName = (char**)p->staticColNames;",
          "1765:             }",
          "1766:             if (papColType) {",
          "1767:                 if (nCol < SQL_MAX_STATIC_TYPES)",
          "1768:                     apColType = p->staticColTypes;",
          "1769:                 else",
          "1770:                     apColType = (int*)Jsi_Calloc(nCol, sizeof(int));",
          "1771:             }",
          "1772:             for(i=0; i<nCol; i++) {",
          "1773:                 zColName = sqlite3_column_name(pStmt,i);",
          "1774:                 if (cnStart==0)",
          "1775:                     apColName[i] = Jsi_Strdup(zColName);",
          "1776:                 else {",
          "1777:                     apColName[i] = p->staticColNames+cnStart;",
          "1778:                     Jsi_Strcpy(apColName[i], zColName);",
          "1779:                     cnStart += Jsi_Strlen(zColName)+1;",
          "1780:                 }",
          "1781:                 if (apColType)",
          "1782:                     apColType[i] = sqlite3_column_type(pStmt,i);",
          "1784:                 if ((i == 0 || numRid>0) &&",
          "1785:                         (zColName[0] == 'r' && Jsi_Strcmp(zColName,\"rowid\") == 0)) {",
          "1786:                     numRid++;",
          "1787:                 }",
          "1788:             }",
          "1790:             if (numRid > 1) {",
          "1791:                 if (apColName != (char**)p->staticColNames) {",
          "1792:                     Jsi_Free(apColName[0]);",
          "1793:                     apColName[0] = Jsi_Strdup(\"oid\");",
          "1794:                 } else {",
          "1795:                     Jsi_Strcpy(apColName[0], \"oid\");",
          "1796:                 }",
          "1797:             }",
          "1798:             p->apColName = apColName;",
          "1799:             p->apColType = apColType;",
          "1800:         }",
          "1801:     }",
          "1802:     if( papColName ) {",
          "1804:     }",
          "1805:     if( papColType ) {",
          "1807:     }",
          "1808:     if( pnCol ) {",
          "1810:     }",
          "1811: }",
          "1812: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     const char *pps = \"\", *curFile = \"\";",
          "129:     char *ss = interp->lastPushStr;",
          "130:     uint log = jsi_GetLogFlag(interp, code);",
          "131:     if (!log)",
          "132:         return JSI_OK;",
          "133:     if (interp==NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     jsi_Frame *fp = interp->framePtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     }",
          "151:     curFile = jsi_GetCurFile(interp);",
          "152:     if (code == JSI_LOG_ERROR) {",
          "154:             && (!interp->tryList || !(interp->tryList->inCatch|interp->tryList->inFinal))) {",
          "156:             if (!interp->errMsgBuf[0]) {",
          "",
          "[Removed Lines]",
          "153:         if ((interp->framePtr->tryDepth - interp->framePtr->withDepth)>0 && interp->inParse<=0",
          "",
          "[Added Lines]",
          "154:         if (interp->framePtr->level > 1 && !fp->tryDepth)",
          "155:             jsi_DumpStackTrace(interp);",
          "157:         if ((fp->tryDepth - fp->withDepth)>0 && interp->inParse<=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:         line = interp->parsePs->lexer->cur_line;",
          "198:         lofs = interp->parsePs->lexer->cur_char;",
          "199:     } else if (interp->curIp) {",
          "202:             line = fptr->line;",
          "203:             lofs = 0;",
          "204:             curFile = fptr->filePtr->fileName;",
          "",
          "[Removed Lines]",
          "200:         if (interp->callerErr && interp->framePtr && interp->framePtr->parent) {",
          "201:             jsi_Frame *fptr = interp->framePtr->parent;",
          "",
          "[Added Lines]",
          "204:         if (interp->callerErr && fp && fp->parent) {",
          "205:             jsi_Frame *fptr = fp->parent;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206:             line = interp->curIp->Line;",
          "207:             lofs = interp->curIp->Lofs;",
          "208:             if (line<=0)",
          "210:         }",
          "211:     }",
          "212:     islog = (interp->parent && interp->debugOpts.msgCallback && code != JSI_LOG_BUG);",
          "",
          "[Removed Lines]",
          "209:                 line = interp->framePtr->line;",
          "",
          "[Added Lines]",
          "213:                 line = fp->line;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1152:                 if (hasHelp) {",
          "1153:                     wantHelp = 1;",
          "1154:                     char tbuf[BUFSIZ];",
          "1156:                     rc = Jsi_EvalString(interp, tbuf, JSI_RETURN);",
          "1157:                 }",
          "1158:             }",
          "",
          "[Removed Lines]",
          "1155:                     snprintf(tbuf, sizeof(tbuf), \"return runModule('Help', '%s'.trim().split(null));\", buf+4);",
          "",
          "[Added Lines]",
          "1159:                     snprintf(tbuf, sizeof(tbuf), \"return moduleRun('Help', '%s'.trim().split(null));\", buf+4);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2646: #define FN_wshandler JSI_INFO(\"\\",
          "2647: With no args, returns list of handlers.  With one arg, returns value for that handler.\\n\\",
          "2649: If a cmd is a function, it is called with a single arg: the file name.\")",
          "2650: static Jsi_RC WebSocketHandlerCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2651:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "2648: Otherwise, sets the handler. When cmd is a string, the call is via runModule([cmd], arg).\\n\\",
          "",
          "[Added Lines]",
          "2648: Otherwise, sets the handler. When cmd is a string, the call is via moduleRun([cmd], arg).\\n\\",
          "",
          "---------------"
        ],
        "tests/assert.jsi||tests/assert.jsi": [
          "File: tests/assert.jsi -> tests/assert.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "6: try {",
          "7:     assert(false,'false');",
          "8: } catch(e) {",
          "9:     puts('caught error');",
          "10: }",
          "11: ;Interp.conf({log:{assert:false}});",
          "14: ;assert(false,'false2');",
          "15: ;assert(false===true);",
          "18: var i=1, j=2;",
          "19: ;assert(function () { return (i<j); },'fail');",
          "",
          "[Removed Lines]",
          "2: Interp.conf({log:{assert:false}});",
          "4: assert(true,'true');",
          "5: assert(2*3 == 6,'math');",
          "12: var x = 1;",
          "13: ;x;",
          "16: ;Interp.conf({log:{assert:false}});",
          "",
          "[Added Lines]",
          "2: Interp.conf({log:{assert:true}});",
          "4: ;assert(true,'true');",
          "5: ;assert(2*3 == 6,'math');",
          "12: var x;",
          "13: ;x = 1;",
          "16: ;Interp.conf({log:{assert:true}});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: =!EXPECTSTART!=",
          "42: Interp.conf({log:{assert:false}}) ==> undefined",
          "44: assert(false,'false2') ==> undefined",
          "45: assert(false===true) ==> undefined",
          "47: assert(function () { return (i<j); },'fail') ==> undefined",
          "50: Interp.conf({assertMode:'puts', noStderr:true}) ==> undefined",
          "53: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "43: x ==> 1",
          "46: Interp.conf({log:{assert:false}}) ==> undefined",
          "48: assert(false,'false') ==> undefined",
          "49: assert(false,'this assert failed',{mode:'puts', noStderr:true}) ==> undefined",
          "51: assert(true===false) ==> undefined",
          "52: assert(false,'assert also failed') ==> undefined",
          "",
          "[Added Lines]",
          "42: assert(true,'true') ==> undefined",
          "43: assert(2*3 == 6,'math') ==> undefined",
          "44: caught error",
          "46: x = 1 ==> 1",
          "49: Interp.conf({log:{assert:true}}) ==> undefined",
          "51: caught error2: assert(false==true)",
          "52: assert(false,'false') ==> caught error2: false",
          "53: assert(false,'this assert failed',{mode:'puts', noStderr:true}) ==> this assert failed",
          "54: undefined",
          "56: assert(true===false) ==> assert(true===false)`),puts(assert(true===false))",
          "57: undefined",
          "58: assert(false,'assert also failed') ==> assert also failed",
          "59: undefined",
          "",
          "---------------"
        ],
        "tests/evalthrow.jsi||tests/evalthrow.jsi": [
          "File: tests/evalthrow.jsi -> tests/evalthrow.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "3: try {",
          "4:     eval(\"throw('abc');\");",
          "5: } catch(e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Interp.conf({maxDumpStack:0});",
          "",
          "---------------"
        ],
        "tests/logging.jsi||tests/logging.jsi": [
          "File: tests/logging.jsi -> tests/logging.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: =!EXPECTSTART!=",
          "33: \"Starting\", logging.jsi:3,",
          "35: Interp.conf({noStderr:true}) ==> undefined",
          "36: log('hello worm') ==> \"hello worm\", logging.jsi:14, foo()",
          "37: undefined",
          "",
          "[Removed Lines]",
          "34: \"DEBUG:  testing 1, 2, 3: call2\", logging.jsi:6, test()",
          "",
          "[Added Lines]",
          "34: \"DEBUG:  testing 1, 2, 3: call2\", logging.jsi:6,",
          "",
          "---------------"
        ],
        "tests/strict.jsi||tests/strict.jsi": [
          "File: tests/strict.jsi -> tests/strict.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "5: function foo() {",
          "6:   x = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Interp.conf({maxDumpStack:0});",
          "",
          "---------------"
        ],
        "tests/syntax.jsi||tests/syntax.jsi": [
          "File: tests/syntax.jsi -> tests/syntax.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "4: function foo() {",
          "5:   var i = Info; // Prevents static type check detections.",
          "6:   i.cmds(1,2,3,4);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({typeCheck:['error']});",
          "",
          "[Added Lines]",
          "3: Interp.conf({typeCheck:['error'], maxDumpStack:0});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: =!EXPECTSTART!=",
          "17: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: foo() ==> e ==> extra args, expected \"cmds(val:string|regexp='*', options:object=void)\"",
          "",
          "[Added Lines]",
          "16: foo() ==> e ==> got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
          "635: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "636: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
          "637: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
          "638: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
          "639: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637: <tr><td>maxDumpStack</td><td><i>UINT</i></td><td>Maximum stack dump length (100).</td><td><i></i></td></tr>",
          "638: <tr><td>maxDumpArgs</td><td><i>UINT</i></td><td>Maximum arg length in stack dump (80).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1647: <tr><td>conf</td><td>conf(<a href='#WebSocket.confOptions'>options</a>:string|object=void) </td><td>Configure options.</td></tr>",
          "1648: <tr><td>file</td><td>file(name:string=void):array|void </td><td>Add file to hash, or with no args return file hash.</td></tr>",
          "1649: <tr><td>handler</td><td>handler(extension:string=void, cmd:string|function=void, flags:number=0):string|array|function|void </td><td>Get/Set handler command for an extension. With no args, returns list of handlers.  With one arg, returns value for that handler.",
          "1651: If a cmd is a function, it is called with a single arg: the file name.</td></tr>",
          "1652: <tr><td>header</td><td>header(id:number, name:string=void):string|array|void </td><td>Get one or all input headers for connect id.</td></tr>",
          "1653: <tr><td>idconf</td><td>idconf(id:number, <a href='#WebSocket.idconfOptions'>options</a>:string|object=void) </td><td>Configure options for connect id.</td></tr>",
          "",
          "[Removed Lines]",
          "1650: Otherwise, sets the handler. When cmd is a string, the call is via runModule([cmd], arg).",
          "",
          "[Added Lines]",
          "1652: Otherwise, sets the handler. When cmd is a string, the call is via moduleRun([cmd], arg).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "858da537bde4de9d8c92466d5a866505310bc328",
      "candidate_info": {
        "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCData.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
          "268:         else if (!Jsi_ValueIsUndef(interp, t))",
          "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
          "271:             return Jsi_LogError(\"array size exceeded\");",
          "272:     }",
          "273:     return rc;",
          "",
          "[Removed Lines]",
          "270:         if ((++n + clen)>interp->maxArrayList)",
          "",
          "[Added Lines]",
          "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
          "1277:         }",
          "1278:         if (sf->arrSize) {",
          "1281:                 goto bail;",
          "1282:             }",
          "1283:             if (sf->bits || isEnum) {",
          "",
          "[Removed Lines]",
          "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
          "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
          "",
          "[Added Lines]",
          "1279:             if (sf->arrSize>interp->maxArrayList) {",
          "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1259:     Jsi_Value *Top_object;",
          "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
          "1261:     int cur_scope;",
          "1263:     int delRBCnt;",
          "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
          "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
          "",
          "[Removed Lines]",
          "1262:     int maxArrayList;",
          "",
          "[Added Lines]",
          "1262:     uint maxArrayList;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
          "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
          "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
          "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
          "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
          "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
          "",
          "[Removed Lines]",
          "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Added Lines]",
          "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1146:     }",
          "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
          "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
          "1149:     interp->typeWarnMax = 50;",
          "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
          "1151:     interp->subOpts.prompt = \"$ \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482: #endif",
          "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
          "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "1486:     if (!jsiIntData.isInit) {",
          "1487:         jsiIntData.isInit = 1;",
          "1488:         jsi_InitValue(interp, 0);",
          "",
          "[Removed Lines]",
          "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         if (!cp || !isdigit(*cp))",
          "77:             return JSI_OK;",
          "78:         n = (int)strtol(cp, &ep, 0);",
          "80:             return JSI_OK;",
          "81:         hPtr->f.bits.isarrlist = 1;",
          "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "",
          "[Removed Lines]",
          "79:         if (n<0 || n >= interp->maxArrayList)",
          "",
          "[Added Lines]",
          "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
          "416: {",
          "418:     assert(obj->isarrlist);",
          "419:     if (mod>1)",
          "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
          "423:         return 0;",
          "424:     }",
          "425:     if (len >= obj->arrMaxSize) {",
          "",
          "[Removed Lines]",
          "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
          "421:     if (nsiz > MAX_ARRAY_LIST) {",
          "422:         Jsi_LogError(\"array size too large\");",
          "",
          "[Added Lines]",
          "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
          "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
          "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:     }",
          "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1042:     }",
          "",
          "[Removed Lines]",
          "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
          "",
          "[Added Lines]",
          "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:     Jsi_Obj *obj = target->d.obj;",
          "1375:     if (obj->isarrlist) {",
          "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
          "1378:             return JSI_OK;",
          "1379:         }",
          "",
          "[Removed Lines]",
          "1376:         if (key >= 0 && key < interp->maxArrayList) {",
          "",
          "[Added Lines]",
          "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
          "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
          "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
          "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
          "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
          "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51abbe4a942e406133022d900df8dcb3e18b4031",
      "candidate_info": {
        "commit_hash": "51abbe4a942e406133022d900df8dcb3e18b4031",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/51abbe4a942e406133022d900df8dcb3e18b4031",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiJSON.c",
          "src/jsiSqlite.c",
          "src/parser.y",
          "tests/export.jsi",
          "tests/imports/imp1.jsi",
          "tests/imports/imp2.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.50\": fix sqlite memleak, export/import update and tests.\n\nFossilOrigin-Name: 8674e05d00c540fac8b45e405b1f3b8ed79636a47df2b48d46a1635412860cb5",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiJSON.c||src/jsiJSON.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/parser.y||src/parser.y",
          "tests/export.jsi||tests/export.jsi",
          "tests/imports/imp1.jsi||tests/imports/imp1.jsi",
          "tests/imports/imp2.jsi||tests/imports/imp2.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiJSON.c||src/jsiJSON.c",
            "src/jsiSqlite.c||src/jsiSqlite.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiJSON.c||src/jsiJSON.c",
            "src/jsiSqlite.c||src/jsiSqlite.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 49",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 50",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     JSI_OPT(BOOL,   SourceData, autoIndex,  .help=\"Look for and load Jsi_Auto.jsi auto-index file\" ),",
          "82:     JSI_OPT(BOOL,   SourceData, exists, .help=\"Source file only if exists\" ),",
          "83:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "85:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "86:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "87:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "[Removed Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap in a function closure\" ),",
          "",
          "[Added Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap file contents in a return/function closure\" ),",
          "",
          "---------------"
        ],
        "src/jsiJSON.c||src/jsiJSON.c": [
          "File: src/jsiJSON.c -> src/jsiJSON.c"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1888:                 str = (char*)sqlite3_column_text(pStmt, iCol );",
          "1889:                 if (JSI_OK != Jsi_JSONParse(interp, str, &v, 0))",
          "1890:                     Jsi_LogWarnExt(\"JSON parse failure for CHARJSON column\");",
          "1891:                 return v;",
          "1892:             }",
          "1893:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1891:                 if (!v)",
          "1892:                     v = Jsi_ValueNew(interp);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident itemfunc",
          "45: %type <opcodes> fcall_exprs for_cond for_init for_statement func_expr func_statement func_statement_block if_statement item items iterstatement lvalue",
          "47: %type <scopes> args args_opt argsa arrowargs",
          "48: %type <inum> typeid inof rettype argtype localvar",
          "49: %type <sstr> identifier_opt label_opt func_prefix",
          "",
          "[Removed Lines]",
          "46: %type <opcodes> object objectident statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "",
          "[Added Lines]",
          "46: %type <opcodes> object objexport statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     | LOCALCONST { $$ = LOCALCONST; }",
          "153: ;",
          "156:     object { $$ = $1; }",
          "158:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "159:         $$ = lval;",
          "160:         lval->lvalue_flag = 1;",
          "161:         lval->lvalue_name = $1;",
          "163:     | '*' {",
          "164:         $$ = code_push_null();",
          "165:     }",
          "",
          "[Removed Lines]",
          "155: objectident:",
          "",
          "[Added Lines]",
          "155: objexport:",
          "157:     | IDENTIFIER {",
          "162:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     | ';'                   { $$ = code_nop(); }",
          "187:     | '{' statements '}'    { $$ = $2; }",
          "188:     | func_statement        { $$ = $1; }",
          "190: ;",
          "192: func_statement:",
          "",
          "[Removed Lines]",
          "189:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "189:     | EXPORT DEFAULT objexport { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "---------------"
        ],
        "tests/export.jsi||tests/export.jsi": [
          "File: tests/export.jsi -> tests/export.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var a = (function() {",
          "3:    var x = 1;",
          "4:    function foo() {}",
          "5:    function bar() {}",
          "6:    export default *;",
          "7: })();",
          "8: ;a;",
          "10: var b = (function() {",
          "11:    var x = 1;",
          "12:    function foo() {}",
          "13:    function bar() {}",
          "14:    export default +;",
          "15: })();",
          "16: ;b;",
          "18: var c = (function() {",
          "19:    var x = 1;",
          "20:    function foo() {}",
          "21:    function bar() {}",
          "22:    export default { x:x, foo };",
          "23: })();",
          "24: ;c;",
          "26: var d = (function() {",
          "27:    var x = 1;",
          "28:    function foo() {}",
          "29:    function bar() {}",
          "30:    var e = {x:x, bar};",
          "31:    export default e;",
          "32: })();",
          "33: ;d;",
          "35: var i1 = import('imports/imp1.jsi');",
          "36: ;i1;",
          "38: var i2 = import('imports/imp2.jsi');",
          "39: ;i2;",
          "41: var i3 = source('imports/imp1.jsi');",
          "42: ;i3;",
          "44: var i4 = source('imports/imp2.jsi');",
          "45: ;i4;",
          "48: =!EXPECTSTART!=",
          "49: a ==> { bar:\"function bar() {...}\", foo:\"function foo() {...}\" }",
          "50: b ==> { bar:\"function bar() {...}\", foo:\"function foo() {...}\", x:1 }",
          "51: c ==> { foo:\"function foo() {...}\", x:1 }",
          "52: d ==> { bar:\"function bar() {...}\", x:1 }",
          "53: i1 ==> { foo:\"function foo() {...}\", x:1 }",
          "54: i2 ==> { bar2:\"function bar2() {...}\", foo2:\"function foo2() {...}\" }",
          "55: i3 ==> { foo:\"function foo() {...}\", x:1 }",
          "56: i4 ==> null",
          "57: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tests/imports/imp1.jsi||tests/imports/imp1.jsi": [
          "File: tests/imports/imp1.jsi -> tests/imports/imp1.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x = 1;",
          "2: function foo() {}",
          "3: function bar() {}",
          "4: export default { x:x, foo };",
          "",
          "---------------"
        ],
        "tests/imports/imp2.jsi||tests/imports/imp2.jsi": [
          "File: tests/imports/imp2.jsi -> tests/imports/imp2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var x2 = 1;",
          "2: function foo2() {}",
          "3: function bar2() {}",
          "4: export default *",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1082: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1083: |exists|*BOOL*|Source file only if exists.||",
          "1084: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1086: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1087: |level|*UINT*|Frame to source file in.||",
          "1088: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "1085: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "[Added Lines]",
          "1085: |import|*BOOL*|Wrap file contents in a return/function closure.||",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1117: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1118: |exists|*BOOL*|Source file only if exists.||",
          "1119: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1121: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1122: |level|*UINT*|Frame to source file in.||",
          "1123: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "1120: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "[Added Lines]",
          "1120: |import|*BOOL*|Wrap file contents in a return/function closure.||",
          "",
          "---------------"
        ]
      }
    }
  ]
}