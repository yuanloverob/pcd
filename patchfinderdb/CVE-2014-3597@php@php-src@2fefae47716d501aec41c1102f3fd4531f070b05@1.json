{
  "cve_id": "CVE-2014-3597",
  "cve_desc": "Multiple buffer overflows in the php_parserr function in ext/standard/dns.c in PHP before 5.4.32 and 5.5.x before 5.5.16 allow remote DNS servers to cause a denial of service (application crash) or possibly execute arbitrary code via a crafted DNS record, related to the dns_get_record function and the dn_expand function.  NOTE: this issue exists because of an incomplete fix for CVE-2014-4049.",
  "repo": "php/php-src",
  "patch_hash": "2fefae47716d501aec41c1102f3fd4531f070b05",
  "patch_info": {
    "commit_hash": "2fefae47716d501aec41c1102f3fd4531f070b05",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/2fefae47716d501aec41c1102f3fd4531f070b05",
    "files": [
      "ext/standard/dns.c"
    ],
    "message": "Fixed Sec Bug #67717 segfault in dns_get_record CVE-2014-3597\n\nIncomplete fix for CVE-2014-4049\n\nCheck possible buffer overflow\n- pass real buffer end to dn_expand calls\n- check buffer len before each read",
    "before_after_code_files": [
      "ext/standard/dns.c||ext/standard/dns.c"
    ]
  },
  "patch_diff": {
    "ext/standard/dns.c||ext/standard/dns.c": [
      "File: ext/standard/dns.c -> ext/standard/dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413: #if HAVE_FULL_DNS_FUNCS",
      "417: {",
      "418:  u_short type, class, dlen;",
      "419:  u_long ttl;",
      "",
      "[Removed Lines]",
      "416: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
      "",
      "[Added Lines]",
      "415: #define CHECKCP(n) do { \\",
      "416:  if (cp + n > end) { \\",
      "417:   return NULL; \\",
      "418:  } \\",
      "419: } while (0)",
      "422: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "429:  if (n < 0) {",
      "430:   return NULL;",
      "431:  }",
      "432:  cp += n;",
      "434:  GETSHORT(type, cp);",
      "435:  GETSHORT(class, cp);",
      "436:  GETLONG(ttl, cp);",
      "437:  GETSHORT(dlen, cp);",
      "438:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
      "439:   cp += dlen;",
      "440:   return cp;",
      "",
      "[Removed Lines]",
      "428:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
      "",
      "[Added Lines]",
      "434:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
      "440:  CHECKCP(10);",
      "445:  CHECKCP(dlen);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:  switch (type) {",
      "463:   case DNS_T_A:",
      "464:    add_assoc_string(*subarray, \"type\", \"A\", 1);",
      "465:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
      "466:    add_assoc_string(*subarray, \"ip\", name, 1);",
      "467:    cp += dlen;",
      "468:    break;",
      "469:   case DNS_T_MX:",
      "470:    add_assoc_string(*subarray, \"type\", \"MX\", 1);",
      "471:    GETSHORT(n, cp);",
      "472:    add_assoc_long(*subarray, \"pri\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:    CHECKCP(4);",
      "479:    CHECKCP(2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "485:    if (type == DNS_T_PTR) {",
      "486:     add_assoc_string(*subarray, \"type\", \"PTR\", 1);",
      "487:    }",
      "489:    if (n < 0) {",
      "490:     return NULL;",
      "491:    }",
      "",
      "[Removed Lines]",
      "488:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "498:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "495:   case DNS_T_HINFO:",
      "497:    add_assoc_string(*subarray, \"type\", \"HINFO\", 1);",
      "498:    n = *cp & 0xFF;",
      "499:    cp++;",
      "500:    add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);",
      "501:    cp += n;",
      "502:    n = *cp & 0xFF;",
      "503:    cp++;",
      "504:    add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);",
      "505:    cp += n;",
      "506:    break;",
      "507:   case DNS_T_TXT:",
      "508:    {",
      "510:     zval *entries = NULL;",
      "512:     add_assoc_string(*subarray, \"type\", \"TXT\", 1);",
      "",
      "[Removed Lines]",
      "509:     int ll = 0;",
      "",
      "[Added Lines]",
      "508:    CHECKCP(1);",
      "511:    CHECKCP(n);",
      "514:    CHECKCP(1);",
      "517:    CHECKCP(n);",
      "523:     int l1 = 0, l2 = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "515:     MAKE_STD_ZVAL(entries);",
      "516:     array_init(entries);",
      "523:      }",
      "527:     }",
      "529:     cp += dlen;",
      "532:     add_assoc_zval(*subarray, \"entries\", entries);",
      "533:    }",
      "534:    break;",
      "535:   case DNS_T_SOA:",
      "536:    add_assoc_string(*subarray, \"type\", \"SOA\", 1);",
      "538:    if (n < 0) {",
      "539:     return NULL;",
      "540:    }",
      "541:    cp += n;",
      "542:    add_assoc_string(*subarray, \"mname\", name, 1);",
      "544:    if (n < 0) {",
      "545:     return NULL;",
      "546:    }",
      "547:    cp += n;",
      "548:    add_assoc_string(*subarray, \"rname\", name, 1);",
      "549:    GETLONG(n, cp);",
      "550:    add_assoc_long(*subarray, \"serial\", n);",
      "551:    GETLONG(n, cp);",
      "",
      "[Removed Lines]",
      "518:     while (ll < dlen) {",
      "519:      n = cp[ll];",
      "520:      if ((ll + n) >= dlen) {",
      "522:       n = dlen - (ll + 1);",
      "524:      memcpy(tp + ll , cp + ll + 1, n);",
      "525:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
      "526:      ll = ll + n + 1;",
      "528:     tp[dlen] = '\\0';",
      "531:     add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);",
      "537:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
      "543:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
      "",
      "[Added Lines]",
      "532:     while (l1 < dlen) {",
      "533:      n = cp[l1];",
      "534:      if ((l1 + n) >= dlen) {",
      "536:       n = dlen - (l1 + 1);",
      "537:      }",
      "538:      if (n) {",
      "539:       memcpy(tp + l2 , cp + l1 + 1, n);",
      "540:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
      "542:      l1 = l1 + n + 1;",
      "543:      l2 = l2 + n;",
      "545:     tp[l2] = '\\0';",
      "548:     add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);",
      "554:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
      "560:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
      "566:    CHECKCP(5*4);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "559:    break;",
      "560:   case DNS_T_AAAA:",
      "561:    tp = (u_char*)name;",
      "562:    for(i=0; i < 8; i++) {",
      "563:     GETSHORT(s, cp);",
      "564:     if (s != 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580:    CHECKCP(8*2);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "593:   case DNS_T_A6:",
      "594:    p = cp;",
      "595:    add_assoc_string(*subarray, \"type\", \"A6\", 1);",
      "596:    n = ((int)cp[0]) & 0xFF;",
      "597:    cp++;",
      "598:    add_assoc_long(*subarray, \"masklen\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "615:    CHECKCP(1);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "628:     cp++;",
      "629:    }",
      "630:    for (i = (n + 8) / 16; i < 8; i++) {",
      "631:     GETSHORT(s, cp);",
      "632:     if (s != 0) {",
      "633:      if (tp > (u_char *)name) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:     CHECKCP(2);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "657:    tp[0] = '\\0';",
      "658:    add_assoc_string(*subarray, \"ipv6\", name, 1);",
      "659:    if (cp < p + dlen) {",
      "661:     if (n < 0) {",
      "662:      return NULL;",
      "663:     }",
      "",
      "[Removed Lines]",
      "660:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "681:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "666:    }",
      "667:    break;",
      "668:   case DNS_T_SRV:",
      "669:    add_assoc_string(*subarray, \"type\", \"SRV\", 1);",
      "670:    GETSHORT(n, cp);",
      "671:    add_assoc_long(*subarray, \"pri\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "690:    CHECKCP(3*2);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "673:    add_assoc_long(*subarray, \"weight\", n);",
      "674:    GETSHORT(n, cp);",
      "675:    add_assoc_long(*subarray, \"port\", n);",
      "677:    if (n < 0) {",
      "678:     return NULL;",
      "679:    }",
      "",
      "[Removed Lines]",
      "676:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "698:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "681:    add_assoc_string(*subarray, \"target\", name, 1);",
      "682:    break;",
      "683:   case DNS_T_NAPTR:",
      "684:    add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);",
      "685:    GETSHORT(n, cp);",
      "686:    add_assoc_long(*subarray, \"order\", n);",
      "687:    GETSHORT(n, cp);",
      "688:    add_assoc_long(*subarray, \"pref\", n);",
      "689:    n = (cp[0] & 0xFF);",
      "691:    cp += n;",
      "692:    n = (cp[0] & 0xFF);",
      "694:    cp += n;",
      "695:    n = (cp[0] & 0xFF);",
      "697:    cp += n;",
      "699:    if (n < 0) {",
      "700:     return NULL;",
      "701:    }",
      "",
      "[Removed Lines]",
      "690:    add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);",
      "693:    add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);",
      "696:    add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);",
      "698:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "706:    CHECKCP(2*2);",
      "713:    CHECKCP(1);",
      "715:    cp++;",
      "716:    CHECKCP(n);",
      "717:    add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);",
      "720:    CHECKCP(1);",
      "722:    cp++;",
      "723:    CHECKCP(n);",
      "724:    add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);",
      "727:    CHECKCP(1);",
      "729:    cp++;",
      "730:    CHECKCP(n);",
      "731:    add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);",
      "734:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "888:    while (an-- && cp && cp < end) {",
      "889:     zval *retval;",
      "892:     if (retval != NULL && store_results) {",
      "893:      add_next_index_zval(return_value, retval);",
      "894:     }",
      "",
      "[Removed Lines]",
      "891:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
      "",
      "[Added Lines]",
      "927:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "901:     while (ns-- > 0 && cp && cp < end) {",
      "902:      zval *retval = NULL;",
      "905:      if (retval != NULL) {",
      "906:       add_next_index_zval(authns, retval);",
      "907:      }",
      "",
      "[Removed Lines]",
      "904:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
      "",
      "[Added Lines]",
      "940:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "913:     while (ar-- > 0 && cp && cp < end) {",
      "914:      zval *retval = NULL;",
      "917:      if (retval != NULL) {",
      "918:       add_next_index_zval(addtl, retval);",
      "919:      }",
      "",
      "[Removed Lines]",
      "916:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
      "",
      "[Added Lines]",
      "952:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14e656f81d12677d69d5faec6a8d19e7e056297c",
      "candidate_info": {
        "commit_hash": "14e656f81d12677d69d5faec6a8d19e7e056297c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/14e656f81d12677d69d5faec6a8d19e7e056297c",
        "files": [
          "ext/standard/dns.c"
        ],
        "message": "fix merge for #67717",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412: #if HAVE_FULL_DNS_FUNCS",
          "416: {",
          "417:  u_short type, class, dlen;",
          "418:  u_long ttl;",
          "",
          "[Removed Lines]",
          "415: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval *subarray)",
          "",
          "[Added Lines]",
          "414: #define CHECKCP(n) do { \\",
          "415:  if (cp + n > end) { \\",
          "416:   return NULL; \\",
          "417:  } \\",
          "418: } while (0)",
          "421: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval *subarray)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:  ZVAL_UNDEF(subarray);",
          "428:  if (n < 0) {",
          "429:   return NULL;",
          "430:  }",
          "431:  cp += n;",
          "433:  GETSHORT(type, cp);",
          "434:  GETSHORT(class, cp);",
          "435:  GETLONG(ttl, cp);",
          "436:  GETSHORT(dlen, cp);",
          "437:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
          "438:   cp += dlen;",
          "439:   return cp;",
          "",
          "[Removed Lines]",
          "427:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
          "",
          "[Added Lines]",
          "433:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
          "439:  CHECKCP(10);",
          "444:  CHECKCP(dlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:  switch (type) {",
          "461:   case DNS_T_A:",
          "462:    add_assoc_string(subarray, \"type\", \"A\");",
          "463:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
          "464:    add_assoc_string(subarray, \"ip\", name);",
          "465:    cp += dlen;",
          "466:    break;",
          "467:   case DNS_T_MX:",
          "468:    add_assoc_string(subarray, \"type\", \"MX\");",
          "469:    GETSHORT(n, cp);",
          "470:    add_assoc_long(subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:    CHECKCP(4);",
          "477:    CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:    if (type == DNS_T_PTR) {",
          "484:     add_assoc_string(subarray, \"type\", \"PTR\");",
          "485:    }",
          "487:    if (n < 0) {",
          "488:     return NULL;",
          "489:    }",
          "",
          "[Removed Lines]",
          "486:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "496:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:   case DNS_T_HINFO:",
          "495:    add_assoc_string(subarray, \"type\", \"HINFO\");",
          "496:    n = *cp & 0xFF;",
          "497:    cp++;",
          "498:    add_assoc_stringl(subarray, \"cpu\", (char*)cp, n);",
          "499:    cp += n;",
          "500:    n = *cp & 0xFF;",
          "501:    cp++;",
          "502:    add_assoc_stringl(subarray, \"os\", (char*)cp, n);",
          "503:    cp += n;",
          "504:    break;",
          "505:   case DNS_T_TXT:",
          "506:    {",
          "508:     zval entries;",
          "509:     zend_string *tp;",
          "",
          "[Removed Lines]",
          "507:     int ll = 0;",
          "",
          "[Added Lines]",
          "506:    CHECKCP(1);",
          "509:    CHECKCP(n);",
          "512:    CHECKCP(1);",
          "515:    CHECKCP(n);",
          "521:     int l1 = 0, l2 = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "514:     array_init(&entries);",
          "521:      }",
          "525:     }",
          "528:     cp += dlen;",
          "530:     add_assoc_str(subarray, \"txt\", tp);",
          "",
          "[Removed Lines]",
          "516:     while (ll < dlen) {",
          "517:      n = cp[ll];",
          "518:      if ((ll + n) >= dlen) {",
          "520:       n = dlen - (ll + 1);",
          "522:      memcpy(tp->val + ll , cp + ll + 1, n);",
          "523:      add_next_index_stringl(&entries, (char*)cp + ll + 1, n);",
          "524:      ll = ll + n + 1;",
          "526:     tp->val[dlen] = '\\0';",
          "527:     tp->len = dlen;",
          "",
          "[Added Lines]",
          "530:     while (l1 < dlen) {",
          "531:      n = cp[l1];",
          "532:      if ((l1 + n) >= dlen) {",
          "534:       n = dlen - (l1 + 1);",
          "535:      }",
          "536:      if (n) {",
          "537:       memcpy(tp->val + l2 , cp + l1 + 1, n);",
          "538:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
          "540:      l1 = l1 + n + 1;",
          "541:      l2 = l2 + n;",
          "543:     tp->val[l2] = '\\0';",
          "544:     tp->len = l2;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "533:    break;",
          "534:   case DNS_T_SOA:",
          "535:    add_assoc_string(subarray, \"type\", \"SOA\");",
          "537:    if (n < 0) {",
          "538:     return NULL;",
          "539:    }",
          "540:    cp += n;",
          "541:    add_assoc_string(subarray, \"mname\", name);",
          "543:    if (n < 0) {",
          "544:     return NULL;",
          "545:    }",
          "546:    cp += n;",
          "547:    add_assoc_string(subarray, \"rname\", name);",
          "548:    GETLONG(n, cp);",
          "549:    add_assoc_long(subarray, \"serial\", n);",
          "550:    GETLONG(n, cp);",
          "",
          "[Removed Lines]",
          "536:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "542:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "",
          "[Added Lines]",
          "553:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "559:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "565:    CHECKCP(5*4);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "558:    break;",
          "559:   case DNS_T_AAAA:",
          "560:    tp = (u_char*)name;",
          "561:    for(i=0; i < 8; i++) {",
          "562:     GETSHORT(s, cp);",
          "563:     if (s != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:    CHECKCP(8*2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "592:   case DNS_T_A6:",
          "593:    p = cp;",
          "594:    add_assoc_string(subarray, \"type\", \"A6\");",
          "595:    n = ((int)cp[0]) & 0xFF;",
          "596:    cp++;",
          "597:    add_assoc_long(subarray, \"masklen\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:    CHECKCP(1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "627:     cp++;",
          "628:    }",
          "629:    for (i = (n + 8) / 16; i < 8; i++) {",
          "630:     GETSHORT(s, cp);",
          "631:     if (s != 0) {",
          "632:      if (tp > (u_char *)name) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650:     CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:    tp[0] = '\\0';",
          "657:    add_assoc_string(subarray, \"ipv6\", name);",
          "658:    if (cp < p + dlen) {",
          "660:     if (n < 0) {",
          "661:      return NULL;",
          "662:     }",
          "",
          "[Removed Lines]",
          "659:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "680:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "665:    }",
          "666:    break;",
          "667:   case DNS_T_SRV:",
          "668:    add_assoc_string(subarray, \"type\", \"SRV\");",
          "669:    GETSHORT(n, cp);",
          "670:    add_assoc_long(subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:    CHECKCP(3*2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "672:    add_assoc_long(subarray, \"weight\", n);",
          "673:    GETSHORT(n, cp);",
          "674:    add_assoc_long(subarray, \"port\", n);",
          "676:    if (n < 0) {",
          "677:     return NULL;",
          "678:    }",
          "",
          "[Removed Lines]",
          "675:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "697:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "680:    add_assoc_string(subarray, \"target\", name);",
          "681:    break;",
          "682:   case DNS_T_NAPTR:",
          "683:    add_assoc_string(subarray, \"type\", \"NAPTR\");",
          "684:    GETSHORT(n, cp);",
          "685:    add_assoc_long(subarray, \"order\", n);",
          "686:    GETSHORT(n, cp);",
          "687:    add_assoc_long(subarray, \"pref\", n);",
          "688:    n = (cp[0] & 0xFF);",
          "689:    add_assoc_stringl(subarray, \"flags\", (char*)++cp, n);",
          "690:    cp += n;",
          "691:    n = (cp[0] & 0xFF);",
          "693:    cp += n;",
          "694:    n = (cp[0] & 0xFF);",
          "696:    cp += n;",
          "698:    if (n < 0) {",
          "699:     return NULL;",
          "700:    }",
          "",
          "[Removed Lines]",
          "692:    add_assoc_stringl(subarray, \"services\", (char*)++cp, n);",
          "695:    add_assoc_stringl(subarray, \"regex\", (char*)++cp, n);",
          "697:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "705:    CHECKCP(2*2);",
          "712:    CHECKCP(1);",
          "714:    CHECKCP(n);",
          "718:    CHECKCP(1);",
          "720:    cp++;",
          "721:    CHECKCP(n);",
          "722:    add_assoc_stringl(subarray, \"services\", (char*)cp, n);",
          "725:    CHECKCP(1);",
          "727:    cp++;",
          "728:    CHECKCP(n);",
          "729:    add_assoc_stringl(subarray, \"regex\", (char*)cp, n);",
          "732:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "887:    while (an-- && cp && cp < end) {",
          "888:     zval retval;",
          "891:     if (Z_TYPE(retval) != IS_UNDEF && store_results) {",
          "892:      add_next_index_zval(return_value, &retval);",
          "893:     }",
          "",
          "[Removed Lines]",
          "890:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "[Added Lines]",
          "925:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "900:     while (ns-- > 0 && cp && cp < end) {",
          "901:      zval retval;",
          "904:      if (Z_TYPE(retval) != IS_UNDEF) {",
          "905:       add_next_index_zval(authns, &retval);",
          "906:      }",
          "",
          "[Removed Lines]",
          "903:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "[Added Lines]",
          "938:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "912:     while (ar-- > 0 && cp && cp < end) {",
          "913:      zval retval;",
          "916:      if (Z_TYPE(retval) != IS_UNDEF) {",
          "917:       add_next_index_zval(addtl, &retval);",
          "918:      }",
          "",
          "[Removed Lines]",
          "915:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "[Added Lines]",
          "950:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7d7d23fcffddb21eb72f8deba15ebba0cedc624",
      "candidate_info": {
        "commit_hash": "d7d7d23fcffddb21eb72f8deba15ebba0cedc624",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d7d7d23fcffddb21eb72f8deba15ebba0cedc624",
        "files": [
          "ext/standard/dns.c"
        ],
        "message": "Fixed Sec Bug #67717 segfault in dns_get_record CVE-2014-3597\n\nIncomplete fix for CVE-2014-4049\n\nCheck possible buffer overflow\n- pass real buffer end to dn_expand calls\n- check buffer len before each read",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: #if HAVE_FULL_DNS_FUNCS",
          "417: {",
          "418:  u_short type, class, dlen;",
          "419:  u_long ttl;",
          "",
          "[Removed Lines]",
          "416: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "[Added Lines]",
          "415: #define CHECKCP(n) do { \\",
          "416:  if (cp + n > end) { \\",
          "417:   return NULL; \\",
          "418:  } \\",
          "419: } while (0)",
          "422: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  if (n < 0) {",
          "430:   return NULL;",
          "431:  }",
          "432:  cp += n;",
          "434:  GETSHORT(type, cp);",
          "435:  GETSHORT(class, cp);",
          "436:  GETLONG(ttl, cp);",
          "437:  GETSHORT(dlen, cp);",
          "438:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
          "439:   cp += dlen;",
          "440:   return cp;",
          "",
          "[Removed Lines]",
          "428:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
          "",
          "[Added Lines]",
          "434:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
          "440:  CHECKCP(10);",
          "445:  CHECKCP(dlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  switch (type) {",
          "463:   case DNS_T_A:",
          "464:    add_assoc_string(*subarray, \"type\", \"A\", 1);",
          "465:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
          "466:    add_assoc_string(*subarray, \"ip\", name, 1);",
          "467:    cp += dlen;",
          "468:    break;",
          "469:   case DNS_T_MX:",
          "470:    add_assoc_string(*subarray, \"type\", \"MX\", 1);",
          "471:    GETSHORT(n, cp);",
          "472:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:    CHECKCP(4);",
          "479:    CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "485:    if (type == DNS_T_PTR) {",
          "486:     add_assoc_string(*subarray, \"type\", \"PTR\", 1);",
          "487:    }",
          "489:    if (n < 0) {",
          "490:     return NULL;",
          "491:    }",
          "",
          "[Removed Lines]",
          "488:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "498:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:   case DNS_T_HINFO:",
          "497:    add_assoc_string(*subarray, \"type\", \"HINFO\", 1);",
          "498:    n = *cp & 0xFF;",
          "499:    cp++;",
          "500:    add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);",
          "501:    cp += n;",
          "502:    n = *cp & 0xFF;",
          "503:    cp++;",
          "504:    add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);",
          "505:    cp += n;",
          "506:    break;",
          "507:   case DNS_T_TXT:",
          "508:    {",
          "510:     zval *entries = NULL;",
          "512:     add_assoc_string(*subarray, \"type\", \"TXT\", 1);",
          "",
          "[Removed Lines]",
          "509:     int ll = 0;",
          "",
          "[Added Lines]",
          "508:    CHECKCP(1);",
          "511:    CHECKCP(n);",
          "514:    CHECKCP(1);",
          "517:    CHECKCP(n);",
          "523:     int l1 = 0, l2 = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515:     MAKE_STD_ZVAL(entries);",
          "516:     array_init(entries);",
          "523:      }",
          "527:     }",
          "529:     cp += dlen;",
          "532:     add_assoc_zval(*subarray, \"entries\", entries);",
          "533:    }",
          "534:    break;",
          "535:   case DNS_T_SOA:",
          "536:    add_assoc_string(*subarray, \"type\", \"SOA\", 1);",
          "538:    if (n < 0) {",
          "539:     return NULL;",
          "540:    }",
          "541:    cp += n;",
          "542:    add_assoc_string(*subarray, \"mname\", name, 1);",
          "544:    if (n < 0) {",
          "545:     return NULL;",
          "546:    }",
          "547:    cp += n;",
          "548:    add_assoc_string(*subarray, \"rname\", name, 1);",
          "549:    GETLONG(n, cp);",
          "550:    add_assoc_long(*subarray, \"serial\", n);",
          "551:    GETLONG(n, cp);",
          "",
          "[Removed Lines]",
          "518:     while (ll < dlen) {",
          "519:      n = cp[ll];",
          "520:      if ((ll + n) >= dlen) {",
          "522:       n = dlen - (ll + 1);",
          "524:      memcpy(tp + ll , cp + ll + 1, n);",
          "525:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
          "526:      ll = ll + n + 1;",
          "528:     tp[dlen] = '\\0';",
          "531:     add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);",
          "537:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "543:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "",
          "[Added Lines]",
          "532:     while (l1 < dlen) {",
          "533:      n = cp[l1];",
          "534:      if ((l1 + n) >= dlen) {",
          "536:       n = dlen - (l1 + 1);",
          "537:      }",
          "538:      if (n) {",
          "539:       memcpy(tp + l2 , cp + l1 + 1, n);",
          "540:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
          "542:      l1 = l1 + n + 1;",
          "543:      l2 = l2 + n;",
          "545:     tp[l2] = '\\0';",
          "548:     add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);",
          "554:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "560:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "566:    CHECKCP(5*4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "559:    break;",
          "560:   case DNS_T_AAAA:",
          "561:    tp = (u_char*)name;",
          "562:    for(i=0; i < 8; i++) {",
          "563:     GETSHORT(s, cp);",
          "564:     if (s != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:    CHECKCP(8*2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "593:   case DNS_T_A6:",
          "594:    p = cp;",
          "595:    add_assoc_string(*subarray, \"type\", \"A6\", 1);",
          "596:    n = ((int)cp[0]) & 0xFF;",
          "597:    cp++;",
          "598:    add_assoc_long(*subarray, \"masklen\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:    CHECKCP(1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "628:     cp++;",
          "629:    }",
          "630:    for (i = (n + 8) / 16; i < 8; i++) {",
          "631:     GETSHORT(s, cp);",
          "632:     if (s != 0) {",
          "633:      if (tp > (u_char *)name) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "657:    tp[0] = '\\0';",
          "658:    add_assoc_string(*subarray, \"ipv6\", name, 1);",
          "659:    if (cp < p + dlen) {",
          "661:     if (n < 0) {",
          "662:      return NULL;",
          "663:     }",
          "",
          "[Removed Lines]",
          "660:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "681:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "666:    }",
          "667:    break;",
          "668:   case DNS_T_SRV:",
          "669:    add_assoc_string(*subarray, \"type\", \"SRV\", 1);",
          "670:    GETSHORT(n, cp);",
          "671:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690:    CHECKCP(3*2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "673:    add_assoc_long(*subarray, \"weight\", n);",
          "674:    GETSHORT(n, cp);",
          "675:    add_assoc_long(*subarray, \"port\", n);",
          "677:    if (n < 0) {",
          "678:     return NULL;",
          "679:    }",
          "",
          "[Removed Lines]",
          "676:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "698:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "681:    add_assoc_string(*subarray, \"target\", name, 1);",
          "682:    break;",
          "683:   case DNS_T_NAPTR:",
          "684:    add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);",
          "685:    GETSHORT(n, cp);",
          "686:    add_assoc_long(*subarray, \"order\", n);",
          "687:    GETSHORT(n, cp);",
          "688:    add_assoc_long(*subarray, \"pref\", n);",
          "689:    n = (cp[0] & 0xFF);",
          "691:    cp += n;",
          "692:    n = (cp[0] & 0xFF);",
          "694:    cp += n;",
          "695:    n = (cp[0] & 0xFF);",
          "697:    cp += n;",
          "699:    if (n < 0) {",
          "700:     return NULL;",
          "701:    }",
          "",
          "[Removed Lines]",
          "690:    add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);",
          "693:    add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);",
          "696:    add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);",
          "698:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "706:    CHECKCP(2*2);",
          "713:    CHECKCP(1);",
          "715:    cp++;",
          "716:    CHECKCP(n);",
          "717:    add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);",
          "720:    CHECKCP(1);",
          "722:    cp++;",
          "723:    CHECKCP(n);",
          "724:    add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);",
          "727:    CHECKCP(1);",
          "729:    cp++;",
          "730:    CHECKCP(n);",
          "731:    add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);",
          "734:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "888:    while (an-- && cp && cp < end) {",
          "889:     zval *retval;",
          "892:     if (retval != NULL && store_results) {",
          "893:      add_next_index_zval(return_value, retval);",
          "894:     }",
          "",
          "[Removed Lines]",
          "891:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "[Added Lines]",
          "927:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "901:     while (ns-- > 0 && cp && cp < end) {",
          "902:      zval *retval = NULL;",
          "905:      if (retval != NULL) {",
          "906:       add_next_index_zval(authns, retval);",
          "907:      }",
          "",
          "[Removed Lines]",
          "904:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "[Added Lines]",
          "940:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "913:     while (ar-- > 0 && cp && cp < end) {",
          "914:      zval *retval = NULL;",
          "917:      if (retval != NULL) {",
          "918:       add_next_index_zval(addtl, retval);",
          "919:      }",
          "",
          "[Removed Lines]",
          "916:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "[Added Lines]",
          "952:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbceec5861e08b10e75af36a097da35d9f808ef6",
      "candidate_info": {
        "commit_hash": "fbceec5861e08b10e75af36a097da35d9f808ef6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/fbceec5861e08b10e75af36a097da35d9f808ef6",
        "files": [
          "ext/standard/dns.c"
        ],
        "message": "Fixed bug #67717 - segfault in dns_get_record",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: #if HAVE_FULL_DNS_FUNCS",
          "417: {",
          "418:  u_short type, class, dlen;",
          "419:  u_long ttl;",
          "",
          "[Removed Lines]",
          "416: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "[Added Lines]",
          "415: #define CHECKCP(n) do { \\",
          "416:  if (cp + n > end) { \\",
          "417:   return NULL; \\",
          "418:  } \\",
          "419: } while (0)",
          "422: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  if (n < 0) {",
          "430:   return NULL;",
          "431:  }",
          "432:  cp += n;",
          "434:  GETSHORT(type, cp);",
          "435:  GETSHORT(class, cp);",
          "436:  GETLONG(ttl, cp);",
          "437:  GETSHORT(dlen, cp);",
          "438:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
          "439:   cp += dlen;",
          "440:   return cp;",
          "",
          "[Removed Lines]",
          "428:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
          "",
          "[Added Lines]",
          "434:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
          "440:  CHECKCP(10);",
          "445:  CHECKCP(dlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  switch (type) {",
          "463:   case DNS_T_A:",
          "464:    add_assoc_string(*subarray, \"type\", \"A\", 1);",
          "465:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
          "466:    add_assoc_string(*subarray, \"ip\", name, 1);",
          "467:    cp += dlen;",
          "468:    break;",
          "469:   case DNS_T_MX:",
          "470:    add_assoc_string(*subarray, \"type\", \"MX\", 1);",
          "471:    GETSHORT(n, cp);",
          "472:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:    CHECKCP(4);",
          "479:    CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "485:    if (type == DNS_T_PTR) {",
          "486:     add_assoc_string(*subarray, \"type\", \"PTR\", 1);",
          "487:    }",
          "489:    if (n < 0) {",
          "490:     return NULL;",
          "491:    }",
          "",
          "[Removed Lines]",
          "488:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "498:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:   case DNS_T_HINFO:",
          "497:    add_assoc_string(*subarray, \"type\", \"HINFO\", 1);",
          "498:    n = *cp & 0xFF;",
          "499:    cp++;",
          "500:    add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);",
          "501:    cp += n;",
          "502:    n = *cp & 0xFF;",
          "503:    cp++;",
          "504:    add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);",
          "505:    cp += n;",
          "506:    break;",
          "507:   case DNS_T_TXT:",
          "508:    {",
          "510:     zval *entries = NULL;",
          "512:     add_assoc_string(*subarray, \"type\", \"TXT\", 1);",
          "",
          "[Removed Lines]",
          "509:     int ll = 0;",
          "",
          "[Added Lines]",
          "508:    CHECKCP(1);",
          "511:    CHECKCP(n);",
          "514:    CHECKCP(1);",
          "517:    CHECKCP(n);",
          "523:     int l1 = 0, l2 = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515:     MAKE_STD_ZVAL(entries);",
          "516:     array_init(entries);",
          "523:      }",
          "527:     }",
          "529:     cp += dlen;",
          "532:     add_assoc_zval(*subarray, \"entries\", entries);",
          "533:    }",
          "534:    break;",
          "535:   case DNS_T_SOA:",
          "536:    add_assoc_string(*subarray, \"type\", \"SOA\", 1);",
          "538:    if (n < 0) {",
          "539:     return NULL;",
          "540:    }",
          "541:    cp += n;",
          "542:    add_assoc_string(*subarray, \"mname\", name, 1);",
          "544:    if (n < 0) {",
          "545:     return NULL;",
          "546:    }",
          "547:    cp += n;",
          "548:    add_assoc_string(*subarray, \"rname\", name, 1);",
          "549:    GETLONG(n, cp);",
          "550:    add_assoc_long(*subarray, \"serial\", n);",
          "551:    GETLONG(n, cp);",
          "",
          "[Removed Lines]",
          "518:     while (ll < dlen) {",
          "519:      n = cp[ll];",
          "520:      if ((ll + n) >= dlen) {",
          "522:       n = dlen - (ll + 1);",
          "524:      memcpy(tp + ll , cp + ll + 1, n);",
          "525:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
          "526:      ll = ll + n + 1;",
          "528:     tp[dlen] = '\\0';",
          "531:     add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);",
          "537:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "543:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "",
          "[Added Lines]",
          "532:     while (l1 < dlen) {",
          "533:      n = cp[l1];",
          "534:      if ((l1 + n) >= dlen) {",
          "536:       n = dlen - (l1 + 1);",
          "537:      }",
          "538:      if (n) {",
          "539:       memcpy(tp + l2 , cp + l1 + 1, n);",
          "540:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
          "542:      l1 = l1 + n + 1;",
          "543:      l2 = l2 + n;",
          "545:     tp[l2] = '\\0';",
          "548:     add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);",
          "554:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "560:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "566:    CHECKCP(5*4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "559:    break;",
          "560:   case DNS_T_AAAA:",
          "561:    tp = (u_char*)name;",
          "562:    for(i=0; i < 8; i++) {",
          "563:     GETSHORT(s, cp);",
          "564:     if (s != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:    CHECKCP(8*2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "593:   case DNS_T_A6:",
          "594:    p = cp;",
          "595:    add_assoc_string(*subarray, \"type\", \"A6\", 1);",
          "596:    n = ((int)cp[0]) & 0xFF;",
          "597:    cp++;",
          "598:    add_assoc_long(*subarray, \"masklen\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:    CHECKCP(1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "628:     cp++;",
          "629:    }",
          "630:    for (i = (n + 8) / 16; i < 8; i++) {",
          "631:     GETSHORT(s, cp);",
          "632:     if (s != 0) {",
          "633:      if (tp > (u_char *)name) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "657:    tp[0] = '\\0';",
          "658:    add_assoc_string(*subarray, \"ipv6\", name, 1);",
          "659:    if (cp < p + dlen) {",
          "661:     if (n < 0) {",
          "662:      return NULL;",
          "663:     }",
          "",
          "[Removed Lines]",
          "660:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "681:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "666:    }",
          "667:    break;",
          "668:   case DNS_T_SRV:",
          "669:    add_assoc_string(*subarray, \"type\", \"SRV\", 1);",
          "670:    GETSHORT(n, cp);",
          "671:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690:    CHECKCP(3*2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "673:    add_assoc_long(*subarray, \"weight\", n);",
          "674:    GETSHORT(n, cp);",
          "675:    add_assoc_long(*subarray, \"port\", n);",
          "677:    if (n < 0) {",
          "678:     return NULL;",
          "679:    }",
          "",
          "[Removed Lines]",
          "676:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "698:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "681:    add_assoc_string(*subarray, \"target\", name, 1);",
          "682:    break;",
          "683:   case DNS_T_NAPTR:",
          "684:    add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);",
          "685:    GETSHORT(n, cp);",
          "686:    add_assoc_long(*subarray, \"order\", n);",
          "687:    GETSHORT(n, cp);",
          "688:    add_assoc_long(*subarray, \"pref\", n);",
          "689:    n = (cp[0] & 0xFF);",
          "691:    cp += n;",
          "692:    n = (cp[0] & 0xFF);",
          "694:    cp += n;",
          "695:    n = (cp[0] & 0xFF);",
          "697:    cp += n;",
          "699:    if (n < 0) {",
          "700:     return NULL;",
          "701:    }",
          "",
          "[Removed Lines]",
          "690:    add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);",
          "693:    add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);",
          "696:    add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);",
          "698:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "706:    CHECKCP(2*2);",
          "713:    CHECKCP(1);",
          "715:    cp++;",
          "716:    CHECKCP(n);",
          "717:    add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);",
          "720:    CHECKCP(1);",
          "722:    cp++;",
          "723:    CHECKCP(n);",
          "724:    add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);",
          "727:    CHECKCP(1);",
          "729:    cp++;",
          "730:    CHECKCP(n);",
          "731:    add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);",
          "734:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "888:    while (an-- && cp && cp < end) {",
          "889:     zval *retval;",
          "892:     if (retval != NULL && store_results) {",
          "893:      add_next_index_zval(return_value, retval);",
          "894:     }",
          "",
          "[Removed Lines]",
          "891:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "[Added Lines]",
          "927:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "901:     while (ns-- > 0 && cp && cp < end) {",
          "902:      zval *retval = NULL;",
          "905:      if (retval != NULL) {",
          "906:       add_next_index_zval(authns, retval);",
          "907:      }",
          "",
          "[Removed Lines]",
          "904:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "[Added Lines]",
          "940:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "913:     while (ar-- > 0 && cp && cp < end) {",
          "914:      zval *retval = NULL;",
          "917:      if (retval != NULL) {",
          "918:       add_next_index_zval(addtl, retval);",
          "919:      }",
          "",
          "[Removed Lines]",
          "916:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "[Added Lines]",
          "952:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "---------------"
        ]
      }
    }
  ]
}