{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
      "candidate_info": {
        "commit_hash": "29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29974f7b91417afa9eb237ac5dd37f2219cd5a0f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/gencol1.test"
        ],
        "message": "Add a few simple TCL test cases for generated columns.  (Full test coverage of the generated column logic is provided separately by TH3.)\n\nFossilOrigin-Name: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329820673a12ff6a6c8759f40989d4ccf272441064b0366a5f491695b55ad0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   SELECT * FROM t1;",
          "25: } {integer 0}",
          "27: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: foreach {tn schema} {",
          "28: 1 {",
          "29:    CREATE TABLE t1(",
          "30:      a INT,",
          "31:      b TEXT,",
          "32:      c ANY,",
          "33:      w INT GENERATED ALWAYS AS (a*10),",
          "34:      x TEXT AS (typeof(c)),",
          "35:      y TEXT AS (substr(b,a,a+2))",
          "36:    );",
          "37:   }",
          "38: 2 {",
          "39:    CREATE TABLE t1(",
          "40:      w INT GENERATED ALWAYS AS (a*10),",
          "41:      x TEXT AS (typeof(c)),",
          "42:      y TEXT AS (substr(b,a,a+2)),",
          "43:      a INT,",
          "44:      b TEXT,",
          "45:      c ANY",
          "46:    );",
          "47:   }",
          "48: 3 {",
          "49:    CREATE TABLE t1(",
          "50:      w INT GENERATED ALWAYS AS (a*10),",
          "51:      a INT,",
          "52:      x TEXT AS (typeof(c)) STORED,",
          "53:      b TEXT,",
          "54:      y TEXT AS (substr(b,a,a+2)),",
          "55:      c ANY",
          "56:    );",
          "57:   }",
          "58: 4 {",
          "59:    CREATE TABLE t1(",
          "60:      a INTEGER PRIMARY KEY,",
          "61:      w INT GENERATED ALWAYS AS (a*10),",
          "62:      b TEXT,",
          "63:      x TEXT AS (typeof(c)),",
          "64:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "65:      c ANY",
          "66:    );",
          "67:   }",
          "68: 5 {",
          "69:    CREATE TABLE t1(",
          "70:      w INT GENERATED ALWAYS AS (a*10),",
          "71:      a INT,",
          "72:      x TEXT AS (typeof(c)),",
          "73:      b TEXT,",
          "74:      y TEXT AS (substr(b,a,a+2)) STORED,",
          "75:      c ANY,",
          "76:      PRIMARY KEY(a,b)",
          "77:    ) WITHOUT ROWID;",
          "78:   }",
          "79: 6 {",
          "80:    CREATE TABLE t1(",
          "81:      w INT GENERATED ALWAYS AS (m*5),",
          "82:      m INT AS (a*2) STORED,",
          "83:      a INT,",
          "84:      x TEXT AS (typeof(c)),",
          "85:      b TEXT,",
          "86:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "87:      c ANY,",
          "88:      PRIMARY KEY(a,b)",
          "89:    );",
          "90:   }",
          "91: 7 {",
          "92:    CREATE TABLE t1(",
          "93:      w INT GENERATED ALWAYS AS (m*5),",
          "94:      m INT AS (a*2) NOT NULL,",
          "95:      a INT,",
          "96:      x TEXT AS (typeof(c)) CHECK (x<>'blank'),",
          "97:      b TEXT,",
          "98:      y TEXT AS (substr(b,m/2,m/2+2)) STORED,",
          "99:      c ANY,",
          "100:      PRIMARY KEY(b,a)",
          "101:    ) WITHOUT ROWID;",
          "102:   }",
          "103: } {",
          "104:   catch {db close}",
          "105:   sqlite3 db :memory:",
          "106:   db eval $schema",
          "107:   do_execsql_test gencol1-2.$tn.100 {",
          "108:     INSERT INTO t1(a,b,c) VALUES(1,'abcdef',5.5),(3,'cantaloupe',NULL);",
          "109:     SELECT w, x, y, '|' FROM t1 ORDER BY a;",
          "110:   } {10 real abc | 30 null ntalo |}",
          "111:   do_execsql_test gencol1-2.$tn.101 {",
          "112:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "113:   } {10 real abc | 30 null ntalo |}",
          "114:   do_execsql_test gencol1-2.$tn.102 {",
          "115:     SELECT a FROM t1 WHERE w=30;",
          "116:   } {3}",
          "117:   do_execsql_test gencol1-2.$tn.103 {",
          "118:     SELECT a FROM t1 WHERE x='real';",
          "119:   } {1}",
          "120:   do_execsql_test gencol1-2.$tn.104 {",
          "121:     SELECT a FROM t1 WHERE y LIKE '%tal%' OR x='real' ORDER BY b;",
          "122:   } {1 3}",
          "123:   do_execsql_test gencol1-2.$tn.110 {",
          "124:     CREATE INDEX t1w ON t1(w);",
          "125:     SELECT a FROM t1 WHERE w=10;",
          "126:   } {1}",
          "127:   do_execsql_test gencol1-2.$tn.120 {",
          "128:     CREATE INDEX t1x ON t1(x) WHERE w BETWEEN 20 AND 40;",
          "129:     SELECT a FROM t1 WHERE x='null' AND w BETWEEN 20 AND 40;",
          "130:   } {3}",
          "131:   do_execsql_test gencol1-2.$tn.121 {",
          "132:     SELECT a FROM t1 WHERE x='real';",
          "133:   } {1}",
          "134:   do_execsql_test gencol1-2.$tn.130 {",
          "135:     VACUUM;",
          "136:     PRAGMA integrity_check;",
          "137:   } {ok}",
          "138:   do_execsql_test gencol1-2.$tn.140 {",
          "139:     UPDATE t1 SET a=a+100 WHERE w<20;",
          "140:     SELECT a, w, '|' FROM t1 ORDER BY w;",
          "141:   } {3 30 | 101 1010 |}",
          "142:   do_execsql_test gencol1-2.$tn.150 {",
          "143:     INSERT INTO t1 VALUES(4,'jambalaya','Chef John'),(15,87719874135,0);",
          "144:     SELECT w, x, y, '|' FROM t1 ORDER BY w;",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
      "candidate_info": {
        "commit_hash": "7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ac2ee0a74ad3055140d614261c7e9d7620e74c2",
        "files": [
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Sync up the autoconf makefile for MSVC.\n\nFossilOrigin-Name: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
        "before_after_code_files": [
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # will run on the platform that is doing the build.",
          "434: #",
          "435: !IF $(USE_FULLWARN)!=0",
          "437: !ELSE",
          "439: !ENDIF",
          "441: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "436: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "436: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: # Command line prefixes for compiling code, compiling resources,",
          "809: # linking, etc.",
          "810: #",
          "812: LTRCOMPILE = $(RCC) -r",
          "813: LTLIB = lib.exe",
          "814: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 908c4c891fa7472b43d232bde7d3789105c5f5b2cfaf6652bf6d5829236933cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59c56796917a28041e8f315abe1a376508413961",
      "candidate_info": {
        "commit_hash": "59c56796917a28041e8f315abe1a376508413961",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/59c56796917a28041e8f315abe1a376508413961",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix incorrect SQL generated by the Lemon change of the previous check-in.\n\nFossilOrigin-Name: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 329cbb372d4d77f774f01a87d104c40ef42d713afbe76195b65f5ca205c5ea7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4234:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4235:       assert( i==rp->iRule );",
          "4236:       fprintf(sql,",
          "4238:         rp->iRule, rp->lhs->index",
          "4239:       );",
          "4240:       writeRuleText(sql, rp);",
          "",
          "[Removed Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d,'\",",
          "",
          "[Added Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs,txt)VALUES(%d,%d,'\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
      "candidate_info": {
        "commit_hash": "9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a6d01bff53cc0dd705f8d73525774d5cde52cb9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Performance improvement in the parsing of options to %-formats in the printf implementation.\n\nFossilOrigin-Name: 40d8f8ae87abf928542c4e558a4c3a3eab18776a3e8db7ca1c5e5f744ca0bce3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ca9d5d53d41d08fbce29f9da8cc0948df9c4c3136210af88b499cf889b5ccb8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     flag_leftjustify = flag_prefix = cThousand =",
          "238:      flag_alternateform = flag_altform2 = flag_zeropad = 0;",
          "239:     done = 0;",
          "240:     do{",
          "241:       switch( c ){",
          "242:         case '-':   flag_leftjustify = 1;     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     width = 0;",
          "241:     flag_long = 0;",
          "242:     precision = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:         case '0':   flag_zeropad = 1;         break;",
          "248:         case ',':   cThousand = ',';          break;",
          "249:         default:    done = 1;                 break;",
          "274: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "278: #endif",
          "288:         }",
          "292:         }",
          "297:           c = *++fmt;",
          "306: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "310: #endif",
          "320:       }",
          "325:     infop = &fmtinfo[0];",
          "326:     xtype = etINVALID;",
          "",
          "[Removed Lines]",
          "250:       }",
          "251:     }while( !done && (c=(*++fmt))!=0 );",
          "253:     if( c=='*' ){",
          "254:       if( bArgList ){",
          "255:         width = (int)getIntArg(pArgList);",
          "256:       }else{",
          "257:         width = va_arg(ap,int);",
          "258:       }",
          "259:       if( width<0 ){",
          "260:         flag_leftjustify = 1;",
          "261:         width = width >= -2147483647 ? -width : 0;",
          "262:       }",
          "263:       c = *++fmt;",
          "264:     }else{",
          "265:       unsigned wx = 0;",
          "266:       while( c>='0' && c<='9' ){",
          "267:         wx = wx*10 + c - '0';",
          "268:         c = *++fmt;",
          "269:       }",
          "270:       testcase( wx>0x7fffffff );",
          "271:       width = wx & 0x7fffffff;",
          "272:     }",
          "273:     assert( width>=0 );",
          "275:     if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "276:       width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "277:     }",
          "281:     if( c=='.' ){",
          "282:       c = *++fmt;",
          "283:       if( c=='*' ){",
          "284:         if( bArgList ){",
          "285:           precision = (int)getIntArg(pArgList);",
          "286:         }else{",
          "287:           precision = va_arg(ap,int);",
          "289:         c = *++fmt;",
          "290:         if( precision<0 ){",
          "291:           precision = precision >= -2147483647 ? -precision : -1;",
          "293:       }else{",
          "294:         unsigned px = 0;",
          "295:         while( c>='0' && c<='9' ){",
          "296:           px = px*10 + c - '0';",
          "298:         }",
          "299:         testcase( px>0x7fffffff );",
          "300:         precision = px & 0x7fffffff;",
          "301:       }",
          "302:     }else{",
          "303:       precision = -1;",
          "304:     }",
          "305:     assert( precision>=(-1) );",
          "307:     if( precision>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "308:       precision = SQLITE_PRINTF_PRECISION_LIMIT;",
          "309:     }",
          "314:     if( c=='l' ){",
          "315:       flag_long = 1;",
          "316:       c = *++fmt;",
          "317:       if( c=='l' ){",
          "318:         flag_long = 2;",
          "319:         c = *++fmt;",
          "321:     }else{",
          "322:       flag_long = 0;",
          "323:     }",
          "",
          "[Added Lines]",
          "253:         case 'l': {",
          "254:           flag_long = 1;",
          "255:           c = *++fmt;",
          "256:           if( c=='l' ){",
          "257:             c = *++fmt;",
          "258:             flag_long = 2;",
          "259:           }",
          "260:           done = 1;",
          "261:           break;",
          "262:         }",
          "263:         case '1': case '2': case '3': case '4': case '5':",
          "264:         case '6': case '7': case '8': case '9': {",
          "265:           unsigned wx = c - '0';",
          "266:           while( (c = *++fmt)>='0' && c<='9' ){",
          "267:             wx = wx*10 + c - '0';",
          "268:           }",
          "269:           testcase( wx>0x7fffffff );",
          "270:           width = wx & 0x7fffffff;",
          "272:           if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "273:             width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "274:           }",
          "276:           if( c!='.' && c!='l' ){",
          "277:             done = 1;",
          "278:           }else{",
          "279:             fmt--;",
          "280:           }",
          "281:           break;",
          "283:         case '*': {",
          "284:           if( bArgList ){",
          "285:             width = (int)getIntArg(pArgList);",
          "286:           }else{",
          "287:             width = va_arg(ap,int);",
          "288:           }",
          "289:           if( width<0 ){",
          "290:             flag_leftjustify = 1;",
          "291:             width = width >= -2147483647 ? -width : 0;",
          "292:           }",
          "293: #ifdef SQLITE_PRINTF_PRECISION_LIMIT",
          "294:           if( width>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "295:             width = SQLITE_PRINTF_PRECISION_LIMIT;",
          "296:           }",
          "297: #endif",
          "298:           if( (c = fmt[1])!='.' && c!='l' ){",
          "299:             c = *++fmt;",
          "300:             done = 1;",
          "301:           }",
          "302:           break;",
          "304:         case '.': {",
          "306:           if( c=='*' ){",
          "307:             if( bArgList ){",
          "308:               precision = (int)getIntArg(pArgList);",
          "309:             }else{",
          "310:               precision = va_arg(ap,int);",
          "311:             }",
          "312:             if( precision<0 ){",
          "313:               precision = precision >= -2147483647 ? -precision : -1;",
          "314:             }",
          "315:             c = *++fmt;",
          "316:           }else{",
          "317:             unsigned px = 0;",
          "318:             while( c>='0' && c<='9' ){",
          "319:               px = px*10 + c - '0';",
          "320:               c = *++fmt;",
          "321:             }",
          "322:             testcase( px>0x7fffffff );",
          "323:             precision = px & 0x7fffffff;",
          "324:           }",
          "326:           if( precision>SQLITE_PRINTF_PRECISION_LIMIT ){",
          "327:             precision = SQLITE_PRINTF_PRECISION_LIMIT;",
          "328:           }",
          "330:           if( c=='l' ){",
          "331:             --fmt;",
          "332:           }else{",
          "333:             done = 1;",
          "334:           }",
          "335:           break;",
          "336:         }",
          "338:     }while( !done && (c=(*++fmt))!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a6873bfd65233d242fd17ec818ac57593f25540",
      "candidate_info": {
        "commit_hash": "0a6873bfd65233d242fd17ec818ac57593f25540",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a6873bfd65233d242fd17ec818ac57593f25540",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Add SQLITE_DBCONFIG options LEGACY_ALTER_TABLE, NO_DQS_SCHEMA, and NO_DQS.\n\nFossilOrigin-Name: 1fad20925efa70d0c242e9cba8fa55456fb07a81229c1068da84c6e27d0c0be8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e49f9984f74f242602c6e56bfc645585c7c86bcdd585c322ab0d8e20958d86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:       };",
          "849:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "849:         { SQLITE_DBCONFIG_NO_DQS_SCHEMA,         SQLITE_NoDQSSchema    },",
          "850:         { SQLITE_DBCONFIG_NO_DQS,                SQLITE_NoDQS          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3071:   db->nextPagesize = 0;",
          "3072:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3073:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3074: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3075:                  | SQLITE_AutoIndex",
          "3076: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_NoDQSSchema",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "481:     ){",
          "",
          "[Removed Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "[Added Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "481:      && 0==(db->flags & SQLITE_NoDQS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1773:   sNC.ncFlags = type;",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "1776:   }",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "",
          "[Removed Lines]",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "",
          "[Added Lines]",
          "1775:   if( (pParse->db->flags & SQLITE_NoDQS)!=0",
          "1776:    || (!pParse->db->init.busy",
          "1777:         && !sqlite3WritableSchema(pParse->db)",
          "1778:         && (pParse->db->flags & SQLITE_NoDQSSchema)!=0",
          "1779:       )",
          "1780:   ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7075:       const char *zName;",
          "7076:       int op;",
          "7077:     } aDbConfig[] = {",
          "7087:     };",
          "7088:     int ii, v;",
          "7089:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7078:         { \"enable_fkey\",      SQLITE_DBCONFIG_ENABLE_FKEY            },",
          "7079:         { \"enable_trigger\",   SQLITE_DBCONFIG_ENABLE_TRIGGER         },",
          "7080:         { \"fts3_tokenizer\",   SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER  },",
          "7081:         { \"load_extension\",   SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION  },",
          "7082:         { \"no_ckpt_on_close\", SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE       },",
          "7083:         { \"enable_qpsg\",      SQLITE_DBCONFIG_ENABLE_QPSG            },",
          "7084:         { \"trigger_eqp\",      SQLITE_DBCONFIG_TRIGGER_EQP            },",
          "7085:         { \"reset_database\",   SQLITE_DBCONFIG_RESET_DATABASE         },",
          "7086:         { \"defensive\",        SQLITE_DBCONFIG_DEFENSIVE              },",
          "",
          "[Added Lines]",
          "7078:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7079:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7080:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7081:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7082:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7083:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"no_dqs_schema\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA         },",
          "7090:         { \"no_dqs\",             SQLITE_DBCONFIG_NO_DQS                },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7608:     const char *zName;",
          "7609:     int eVal;",
          "7610:   } aSetting[] = {",
          "7620:   };",
          "7621:   int i;",
          "7622:   int v;",
          "",
          "[Removed Lines]",
          "7611:     { \"FKEY\",            SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",         SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",  SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",  SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",            SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",     SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",        SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",       SQLITE_DBCONFIG_DEFENSIVE },",
          "",
          "[Added Lines]",
          "7611:     { \"FKEY\",               SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",            SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",               SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",        SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",           SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7622:     { \"NO_DQS_SCHEMA\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA },",
          "7623:     { \"NO_DQS\",             SQLITE_DBCONFIG_NO_DQS },",
          "",
          "---------------"
        ]
      }
    }
  ]
}