{
  "cve_id": "CVE-2018-15861",
  "cve_desc": "Unchecked NULL pointer usage in ExprResolveLhs in xkbcomp/expr.c in xkbcommon before 0.8.2 could be used by local attackers to crash (NULL pointer dereference) the xkbcommon parser by supplying a crafted keymap file that triggers an xkb_intern_atom failure.",
  "repo": "xkbcommon/libxkbcommon",
  "patch_hash": "38e1766bc6e20108948aec8a0b222a4bad0254e9",
  "patch_info": {
    "commit_hash": "38e1766bc6e20108948aec8a0b222a4bad0254e9",
    "repo": "xkbcommon/libxkbcommon",
    "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/38e1766bc6e20108948aec8a0b222a4bad0254e9",
    "files": [
      "src/xkbcomp/expr.c"
    ],
    "message": "xkbcomp: Don't falsely promise from ExprResolveLhs\n\nEvery user of ExprReturnLhs goes on to unconditionally dereference the\nfield return, which can be NULL if xkb_intern_atom fails. Return false\nif this is the case, so we fail safely.\n\ntestcase: splice geometry data into interp\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
    "before_after_code_files": [
      "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
    ]
  },
  "patch_diff": {
    "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
      "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:     case EXPR_FIELD_REF:",
      "",
      "[Removed Lines]",
      "45:         return true;",
      "",
      "[Added Lines]",
      "45:         return (*field_rtrn != NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
      "candidate_info": {
        "commit_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
        "files": [
          "src/xkbcomp/expr.c"
        ],
        "message": "xkbcomp: Don't explode on invalid virtual modifiers\n\ntestcase: 'virtualModifiers=LevelThreC'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [
            "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
          ],
          "candidate": [
            "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
          "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         return false;",
          "103:     str = xkb_atom_text(ctx, field);",
          "105:     if (istreq(str, \"all\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     if (!str)",
          "105:         return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
      "candidate_info": {
        "commit_hash": "4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/4fcbc47059aa6c714fa87bc24115edcad86ca5bb",
        "files": [
          "src/darray.h"
        ],
        "message": "darray: Don't call memcpy() on NULL\n\nThe only time we could ever hit this was with count == 0, which seems\nunnecessarily pedantic. But OK.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/darray.h||src/darray.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/darray.h||src/darray.h": [
          "File: src/darray.h -> src/darray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: #define darray_from_items(arr, items, count) do { \\",
          "105:     unsigned __count = (count); \\",
          "106:     darray_resize(arr, __count); \\",
          "108: } while (0)",
          "110: #define darray_copy(arr_to, arr_from) \\",
          "",
          "[Removed Lines]",
          "107:     memcpy((arr).item, items, __count * sizeof(*(arr).item)); \\",
          "",
          "[Added Lines]",
          "107:     if (count != 0) \\",
          "108:         memcpy((arr).item, items, __count * sizeof(*(arr).item)); \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}