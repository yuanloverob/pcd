{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
      "candidate_info": {
        "commit_hash": "569b1d9119c0b05564236f1494c5c328e3fcc757",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/569b1d9119c0b05564236f1494c5c328e3fcc757",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Omit the \".progress\" command from the shell if it is compiled with the SQLITE_OMIT_PROGRESS_CALLBACK option.\n\nFossilOrigin-Name: 4d0a949fd92e19fbf243a2e3a1a7c2cdb111f9a6943949d2420dd846bc7d9285",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2f468da4e9fb3edb5e902fa5d3c528726d1fb64d749d29e558ba3243c76bcb95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1792:   }",
          "1793: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1795: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3496:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3497:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3498:   \".print STRING...         Print literal STRING\",",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "3504:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3505:   \".quit                    Exit this program\",",
          "3506:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3501: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "3507: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7033:     raw_printf(p->out, \"\\n\");",
          "7034:   }else",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int nn = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7040: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
      "candidate_info": {
        "commit_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a resource leak in fts5 that could occur if an auxiliary function is called from within a query that does not use the full-text index.\n\nFossilOrigin-Name: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void sqlite3Fts5IterClose(Fts5IndexIter*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: void sqlite3Fts5IndexCloseReader(Fts5Index*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   if( p->pReader ){",
          "619:     sqlite3_blob *pReader = p->pReader;",
          "620:     p->pReader = 0;",
          "",
          "[Removed Lines]",
          "617: static void fts5CloseReader(Fts5Index *p){",
          "",
          "[Added Lines]",
          "617: void sqlite3Fts5IndexCloseReader(Fts5Index *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:       assert( p->pReader==0 );",
          "644:       p->pReader = pBlob;",
          "645:       if( rc!=SQLITE_OK ){",
          "647:       }",
          "648:       if( rc==SQLITE_ABORT ) rc = SQLITE_OK;",
          "649:     }",
          "",
          "[Removed Lines]",
          "646:         fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "646:         sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5204: int sqlite3Fts5IndexSync(Fts5Index *p){",
          "5205:   assert( p->rc==SQLITE_OK );",
          "5206:   fts5IndexFlush(p);",
          "5208:   return fts5IndexReturn(p);",
          "5209: }",
          "",
          "[Removed Lines]",
          "5207:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5207:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5217: int sqlite3Fts5IndexRollback(Fts5Index *p){",
          "5219:   fts5IndexDiscardData(p);",
          "5220:   fts5StructureInvalidate(p);",
          "",
          "[Removed Lines]",
          "5218:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5218:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:     if( p->rc ){",
          "5457:       sqlite3Fts5IterClose((Fts5IndexIter*)pRet);",
          "5458:       pRet = 0;",
          "5460:     }",
          "",
          "[Removed Lines]",
          "5459:       fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5459:       sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5529:     Fts5Iter *pIter = (Fts5Iter*)pIndexIter;",
          "5530:     Fts5Index *pIndex = pIter->pIndex;",
          "5531:     fts5MultiIterFree(pIter);",
          "5533:   }",
          "5534: }",
          "",
          "[Removed Lines]",
          "5532:     fts5CloseReader(pIndex);",
          "",
          "[Added Lines]",
          "5532:     sqlite3Fts5IndexCloseReader(pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:     sqlite3_free(pCsr->zRankArgs);",
          "745:   }",
          "747:   memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan - (u8*)pCsr));",
          "748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   sqlite3Fts5IndexCloseReader(pTab->p.pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   SELECT matchinfo(x1, 'd') FROM x1('a b c');",
          "492: } {1 {unrecognized matchinfo flag: d}}",
          "494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #-------------------------------------------------------------------------",
          "495: # Test using matchinfo() and similar on a non-full-text query",
          "496: #",
          "497: do_execsql_test 15.0 {",
          "498:   CREATE VIRTUAL TABLE t1 USING fts5(x, y);",
          "499:   INSERT INTO t1 VALUES('a', 'b');",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "505: } {X'02000000'}",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "510: } {X'02000000'}",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "514:   SELECT fts5_test_all(t1) FROM t1 LIMIT 1;",
          "515: } {",
          "516:   {columnsize {0 0} columntext {c d} columntotalsize {2 2} poslist {} tokenize {c d} rowcount 2}",
          "517: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9dc0d34586eebf6705d9bd81494c417ac76707b8625d1ff99eda18b4ca2d8a50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5f73433974bb186237917997550307177d0378",
      "candidate_info": {
        "commit_hash": "9c5f73433974bb186237917997550307177d0378",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c5f73433974bb186237917997550307177d0378",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/walfault2.test"
        ],
        "message": "Avoid attempting to delete a file while it is still open in walfault2.test.\n\nFossilOrigin-Name: 9d54a63d6e3cd47b483cf0ee868a5e7f638bcb0e3cbdeaecc667f293b87a3e99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/walfault2.test||test/walfault2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4371a0c46ee7bfbc0a1507796bd9eefd3371adad81b8dda214d018854316727b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   catch { db close }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
      "candidate_info": {
        "commit_hash": "21f6daa2cd32c5773a606981320c3a5e956a7726",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21f6daa2cd32c5773a606981320c3a5e956a7726",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/vdbe.c"
        ],
        "message": "Faster response to sqlite3_interrupt() in the OP_IntegrityCk and OP_Count opcodes.\n\nFossilOrigin-Name: bf875dc59909f9c22f7c1fc843bc4d9e5d97af5cb4ef43c4fa1d566ddfdeaacb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9455643eecb74c8ac93ad3b3566f30e380dd912cdce3de993da5af42973ac59c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9462: int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){",
          "",
          "[Added Lines]",
          "9462: int sqlite3BtreeCount(sqlite3 *db, BtCursor *pCur, i64 *pnEntry){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9475:   while( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "9475:   while( rc==SQLITE_OK && !db->u1.isInterrupted ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9598:     checkAppendMsg(pCheck, \"2nd reference to page %d\", iPage);",
          "9599:     return 1;",
          "9600:   }",
          "9601:   setPageReferenced(pCheck, iPage);",
          "9602:   return 0;",
          "9603: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9601:   if( pCheck->db->u1.isInterrupted ) return 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10058:   assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );",
          "10059:   VVA_ONLY( nRef = sqlite3PagerRefcount(pBt->pPager) );",
          "10060:   assert( nRef>=0 );",
          "10061:   sCheck.pBt = pBt;",
          "10062:   sCheck.pPager = pBt->pPager;",
          "10063:   sCheck.nPage = btreePagecount(sCheck.pBt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10063:   sCheck.db = db;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "315: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "318: struct Pager *sqlite3BtreePager(Btree*);",
          "319: i64 sqlite3BtreeRowCountEst(BtCursor*);",
          "",
          "[Removed Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);",
          "",
          "[Added Lines]",
          "317: char *sqlite3BtreeIntegrityCheck(sqlite3*,Btree*,int*aRoot,int nRoot,int,int*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: int sqlite3BtreeCursorIsValidNN(BtCursor*);",
          "337: #ifndef SQLITE_OMIT_BTREECOUNT",
          "339: #endif",
          "341: #ifdef SQLITE_TEST",
          "",
          "[Removed Lines]",
          "338: int sqlite3BtreeCount(BtCursor *, i64 *);",
          "",
          "[Added Lines]",
          "338: int sqlite3BtreeCount(sqlite3*, BtCursor*, i64*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3143:   pCrsr = p->apCsr[pOp->p1]->uc.pCursor;",
          "3144:   assert( pCrsr );",
          "3147:   if( rc ) goto abort_due_to_error;",
          "3148:   pOut = out2Prerelease(p, pOp);",
          "3149:   pOut->u.i = nEntry;",
          "3151: }",
          "3152: #endif",
          "",
          "[Removed Lines]",
          "3146:   rc = sqlite3BtreeCount(pCrsr, &nEntry);",
          "3150:   break;",
          "",
          "[Added Lines]",
          "3146:   rc = sqlite3BtreeCount(db, pCrsr, &nEntry);",
          "3150:   goto check_for_interrupt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6104:   pIn1 = &aMem[pOp->p1];",
          "6105:   assert( pOp->p5<db->nDb );",
          "6106:   assert( DbMaskTest(p->btreeMask, pOp->p5) );",
          "6108:                                  (int)pnErr->u.i+1, &nErr);",
          "6109:   sqlite3VdbeMemSetNull(pIn1);",
          "6110:   if( nErr==0 ){",
          "",
          "[Removed Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "[Added Lines]",
          "6107:   z = sqlite3BtreeIntegrityCheck(db, db->aDb[pOp->p5].pBt, &aRoot[1], nRoot,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6117:   }",
          "6118:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "6119:   sqlite3VdbeChangeEncoding(pIn1, encoding);",
          "6121: }",
          "",
          "[Removed Lines]",
          "6120:   break;",
          "",
          "[Added Lines]",
          "6120:   goto check_for_interrupt;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
      "candidate_info": {
        "commit_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a677eecad3dc751db19aaf27b6c0674200ecef21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/where.c",
          "src/whereexpr.c",
          "test/affinity2.test",
          "test/where.test",
          "test/whereG.test"
        ],
        "message": "Merge fixes from trunk.  Also fix a reference to the KeyInfo.aSortOrder field, which should now be KeyInfo.aSortFlags\n\nFossilOrigin-Name: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/affinity2.test||test/affinity2.test",
          "test/where.test||test/where.test",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1cbcdc6eb42cca0c42a05e0d6ba4c6c7f09adff0c59ecfc5b434a94dec07a41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2181:   u8 op;",
          "2182:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2184:   op = p->op;",
          "2185:   if( op==TK_REGISTER ) op = p->op2;",
          "2186:   switch( op ){",
          "",
          "[Removed Lines]",
          "2183:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2194:   int unaryMinus = 0;",
          "2196:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2197:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2198:     p = p->pLeft;",
          "2199:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2191:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2192:     }",
          "2193:     case TK_STRING: {",
          "2195:     }",
          "2196:     case TK_BLOB: {",
          "2198:     }",
          "2199:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2194:       return aff==SQLITE_AFF_TEXT;",
          "2197:       return 1;",
          "",
          "[Added Lines]",
          "2210:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2213:       return !unaryMinus;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3400: static void exprToRegister(Expr *pExpr, int iReg){",
          "3402:   p->op2 = p->op;",
          "3403:   p->op = TK_REGISTER;",
          "3404:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3401:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3417:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4207: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4208:   int r2;",
          "4210:   if( ConstFactorOk(pParse)",
          "4211:    && pExpr->op!=TK_REGISTER",
          "4212:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4209:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4225:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4950: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4951:   return sqlite3ExprCompare(0,",
          "4954:              iTab);",
          "4955: }",
          "",
          "[Removed Lines]",
          "4952:              sqlite3ExprSkipCollate(pA),",
          "4953:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4968:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4969:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5159: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5160:   Walker w;",
          "5162:   while( p ){",
          "5163:     if( p->op==TK_NOTNULL ){",
          "5164:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5161:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5177:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4278: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4279: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4280: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4281: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4282: int sqlite3WritableSchema(sqlite3*);",
          "4283: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4281: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4132:   pC->deferredMoveto = 0;",
          "4133:   pC->cacheStatus = CACHE_STALE;",
          "4134:   if( pC->isTable ){",
          "4136:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4137:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4135:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4142:     pIn3 = &aMem[pOp->p3];",
          "4144:       applyNumericAffinity(pIn3, 0);",
          "4145:     }",
          "4153:           VdbeBranchTaken(1,2);",
          "4154:           goto jump_to_p2;",
          "4155:         }else{",
          "",
          "[Removed Lines]",
          "4143:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4146:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4150:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4151:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4152:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4144:     flags3 = pIn3->flags;",
          "4145:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4154:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4155:       if( (newType & MEM_Real)==0 ){",
          "4156:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5022:   preupdate.keyinfo.db = db;",
          "5023:   preupdate.keyinfo.enc = ENC(db);",
          "5024:   preupdate.keyinfo.nKeyField = pTab->nCol;",
          "5026:   preupdate.iKey1 = iKey1;",
          "5027:   preupdate.iKey2 = iKey2;",
          "5028:   preupdate.pTab = pTab;",
          "",
          "[Removed Lines]",
          "5025:   preupdate.keyinfo.aSortOrder = (u8*)&fakeSortOrder;",
          "",
          "[Added Lines]",
          "5025:   preupdate.keyinfo.aSortFlags = (u8*)&fakeSortOrder;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2770:   if( pIndex->bUnordered ) return 0;",
          "2771:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2772:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2774:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2775:       if( pExpr->iColumn<0 ) return 1;",
          "2776:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2774:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3711:     for(i=0; i<nOrderBy; i++){",
          "3712:       if( MASKBIT(i) & obSat ) continue;",
          "3714:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3715:       if( pOBExpr->iTable!=iCur ) continue;",
          "3716:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3714:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3830:         isMatch = 0;",
          "3831:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3832:           if( MASKBIT(i) & obSat ) continue;",
          "3834:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3835:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3836:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3834:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}