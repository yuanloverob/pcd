{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
      "candidate_info": {
        "commit_hash": "8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8caeaac36871c7d8953c8f78b28ed883ce152aa7",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.47\": source/import merge.\n\nFossilOrigin-Name: a116d3c3400cbeaf5257a3cc3cfe306701f366aebeedea328f7733eecb87e597",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 46",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:     JSI_EVAL_EXISTS         =0x80, // Source if exists.",
          "139:     JSI_EVAL_ERRIGNORE      =0x100,// Source ignores errors.",
          "140:     JSI_EVAL_NOEVAL         =0x200,// Source parses only.",
          "143:     JSI_CALL_CONSTRUCTOR    =0x1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     JSI_EVAL_IMPORT         =0x400,// Source closure.",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct {",
          "68:     bool trace;",
          "69:     bool once;",
          "70:     bool noError;",
          "71:     bool noEval;",
          "72:     bool autoIndex;",
          "74:     bool global;",
          "75:     bool exists;",
          "76:     uint level;",
          "",
          "[Removed Lines]",
          "73:     bool isMain;",
          "",
          "[Added Lines]",
          "70:     bool isMain;",
          "74:     bool import;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     JSI_OPT(BOOL,   SourceData, autoIndex,  .help=\"Look for and load Jsi_Auto.jsi auto-index file\" ),",
          "81:     JSI_OPT(BOOL,   SourceData, exists, .help=\"Source file only if exists\" ),",
          "82:     JSI_OPT(BOOL,   SourceData, global, .help=\"File is to be sourced in global frame rather than local\" ),",
          "83:     JSI_OPT(BOOL,   SourceData, isMain, .help=\"Coerce to true the value of Info.isMain()\" ),",
          "84:     JSI_OPT(UINT,   SourceData, level,  .help=\"Frame to source file in\" ),",
          "85:     JSI_OPT(BOOL,   SourceData, noEval, .help=\"Disable eval: just parses file to check syntax\" ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     JSI_OPT(BOOL,   SourceData, import, .help=\"Wrap in a function closure\" ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: };",
          "95: {",
          "96:     jsi_Pstate *ps = interp->ps;",
          "97:     Jsi_RC rc = JSI_OK;",
          "98:     int flags = 0;",
          "99:     int i, argc = 1;",
          "101:     Jsi_Value *v, *va = Jsi_ValueArrayIndex(interp, args, 0);",
          "102:     Jsi_Value *vo = Jsi_ValueArrayIndex(interp, args, 1);",
          "103:     if (vo) {",
          "105:             Jsi_LogError(\"arg2: expected object 'options'\");",
          "",
          "[Removed Lines]",
          "93: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "94:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "100:     SourceData data = {.trace = interp->debugOpts.includeTrace, .once = interp->debugOpts.includeOnce};",
          "",
          "[Added Lines]",
          "95: static Jsi_RC SysSourceCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "96:     Jsi_Value **ret, Jsi_Func *funcPtr, bool isimp)",
          "102:     SourceData data = {",
          "103:         .trace = interp->debugOpts.includeTrace,",
          "104:         .once = interp->debugOpts.includeOnce,",
          "105:         .import = isimp",
          "106:     };",
          "109:     if (!va) return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:         flags|= JSI_EVAL_ERRIGNORE;",
          "122:     if (data.noEval)",
          "123:         flags|= JSI_EVAL_NOEVAL;",
          "124:     if (data.global) {",
          "125:         flags|= JSI_EVAL_GLOBAL;",
          "126:         if (data.level)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     if (data.import) {",
          "132:         flags|= JSI_EVAL_IMPORT;",
          "133:         if (va && Jsi_ValueIsArray(interp, va))",
          "134:             return Jsi_LogError(\"import can not use array of files\");",
          "135:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:     return rc;",
          "165: }",
          "167: static void jsiGetTime(long *seconds, long *milliseconds)",
          "168: {",
          "169:     struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static Jsi_RC SysSourceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "180:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "181: {",
          "182:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "183: }",
          "186: static Jsi_RC SysImportCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "187:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "188: {",
          "189:     return SysSourceCmdEx(interp, args, _this, ret, funcPtr, 1);",
          "190: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4958:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "4959:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "4960:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "4962:     { \"isFinite\",   isFiniteCmd,     1,  1, \"val\", .help=\"Return true if is a finite number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4963:     { \"isMain\",     InfoIsMainCmd,   0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4964:     { \"isNaN\",      isNaNCmd,        1,  1, \"val\", .help=\"Return true if not a number\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4961:     { \"import\",     SysSourceCmd,    1,  2, \"val:string|array, options:object=void\",  .help=\"Same as source\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "[Added Lines]",
          "4986:     { \"import\",     SysImportCmd,    1,  2, \"file:string, options:object=void\",  .help=\"Same as source with {import:true}\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=0, .opts=SourceOptions},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2341:             uint ilen;",
          "2342:             char buf[JSI_BUFSIZ*2];",
          "2343:             const char *jpp;",
          "2344:             while (cnt<MAX_LOOP_COUNT) {",
          "2345:                 if (!Jsi_Gets(interp, input, buf, sizeof(buf)))",
          "2346:                     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344:             if (flags&JSI_EVAL_IMPORT)",
          "2345:                 Jsi_DSAppend(&dStr, \"return (function(){ \", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2374:             }",
          "2375:             if (cnt>=MAX_LOOP_COUNT)",
          "2376:                 Jsi_LogError(\"source file too large\");",
          "2377:             str = Jsi_DSValue(&dStr);",
          "2379:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2380:             if (flags&JSI_EVAL_IMPORT)",
          "2381:                 Jsi_DSAppend(&dStr, \"})(); \", NULL);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "303: System.prototype.exit = function(code:number=0):void {};",
          "304: System.prototype.format = function(format:string, ...):string {};",
          "306: System.prototype.isFinite = function(val):boolean {};",
          "307: System.prototype.isMain = function():boolean {};",
          "308: System.prototype.isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "305: System.prototype.import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "305: System.prototype.import = function(file:string, options:object=void):any {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397: var exec = function(val:string, options:string|object=void):any {};",
          "398: var exit = function(code:number=0):void {};",
          "399: var format = function(format:string, ...):string {};",
          "401: var isFinite = function(val):boolean {};",
          "402: var isMain = function():boolean {};",
          "403: var isNaN = function(val):boolean {};",
          "",
          "[Removed Lines]",
          "400: var import = function(val:string|array, options:object=void):any {};",
          "",
          "[Added Lines]",
          "400: var import = function(file:string, options:object=void):any {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1030: |exec|([options](#options-systemexec):string&#124;object=void) |Execute an OS command. If the command ends with '&', set the 'bg' option to true. The second argument can be a string, which is the same as setting the 'inputStr' option. By default, returns the string output, unless the 'bg', 'inputStr', 'retCode' or 'retAll' options are used|",
          "1031: |exit|(code:number=0):void |Exit the current interpreter.|",
          "1032: |format|(format:string, ...):string |Printf style formatting: adds %q and %S.|",
          "1034: |isFinite|(val):boolean |Return true if is a finite number.|",
          "1035: |isMain|():boolean |Return true if current script was the main script invoked from command-line.|",
          "1036: |isNaN|(val):boolean |Return true if not a number.|",
          "",
          "[Removed Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source.|",
          "",
          "[Added Lines]",
          "1033: |import|([options](#options-systemimport):object=void) |Same as source with {import:true}.|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1081: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1082: |exists|*BOOL*|Source file only if exists.||",
          "1083: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1084: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1085: |level|*UINT*|Frame to source file in.||",
          "1086: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115: |autoIndex|*BOOL*|Look for and load Jsi_Auto.jsi auto-index file.||",
          "1116: |exists|*BOOL*|Source file only if exists.||",
          "1117: |global|*BOOL*|File is to be sourced in global frame rather than local.||",
          "1118: |isMain|*BOOL*|Coerce to true the value of Info.isMain().||",
          "1119: |level|*UINT*|Frame to source file in.||",
          "1120: |noEval|*BOOL*|Disable eval: just parses file to check syntax.||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119: |import|*BOOL*|Wrap in a function closure.||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
      "candidate_info": {
        "commit_hash": "2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2b62d3be72c3b11ec5cc91cdcfb00973107f9807",
        "files": [
          "lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js",
          "src/jsi.h",
          "src/jsiFunc.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.38\": jsi.js fix array warning\n\nFossilOrigin-Name: caad90672ef0d161fccc72177578f9e6d5af37bee5e7133ef4470788fe5d2ad0",
        "before_after_code_files": [
          "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli",
          "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli",
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiFunc.c||src/jsiFunc.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli": [
          "File: lib/DebugUI/html/main.htmli -> lib/DebugUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: ?>",
          "14:   </head>",
          "15:   <body id=\"body\" onload=\"onload()\" style=\"display: flex; height: 97%; flex-direction: column; margin:3px\">",
          "16:     <div>",
          "17:       <button class=\"topmenu panel\" id=\"mainbut\" class=\"mainbuts\" onclick='TogglePanel(\"uibutton\",this)' title=\"Click to toggle menu visibility\">Jsi Debug-</button>",
          "18:       <div id=\"uibutton\" style=\"display: none;\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: <noscript>",
          "17: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "18: </noscript>",
          "",
          "---------------"
        ],
        "lib/SqliteUI/html/main.htmli||lib/SqliteUI/html/main.htmli": [
          "File: lib/SqliteUI/html/main.htmli -> lib/SqliteUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: </head>",
          "18: <body id=body_main'>",
          "21: <div id=frame_main>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: <noscript>",
          "20: <h1>SORRY: THIS SITE REQUIRES JAVASCRIPT!!!</h1>",
          "21: </noscript>",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:                     case \"string\":  if (vtyp === 'string') return; break;",
          "306:                     case \"boolean\": if (vtyp === 'boolean') return; break;",
          "307:                     case \"function\":if (vtyp === 'function') return; break;",
          "309:                     case \"regexp\":  if (vtyp === 'object' && val && val.constructor === RegExp) return; break;",
          "310:                     case \"object\":  if (vtyp === 'object' && val && val.constructor !== Array) return; break;",
          "311:                     case \"any\":     return; break;",
          "",
          "[Removed Lines]",
          "308:                     case \"array\":   if (vtyp === 'object' && val && val.constructor === Array) return; break;",
          "",
          "[Added Lines]",
          "308:                     case \"array\":   if (vtyp === 'array') return; break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 37",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 38",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:         goto done;",
          "808:     }",
          "809:     if ((cp=Jsi_Strchr(argStr, '='))) {",
          "811:         goto done;",
          "812:     }",
          "813:     if (Jsi_Strstr(argStr, \"...\")) {",
          "815:         goto done;",
          "816:     }",
          "817:     if (argStr[0]) {",
          "",
          "[Removed Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: %s\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "810:         Jsi_LogWarn(\"may not have default value in option, expected: (%s)\", argStr);",
          "814:         Jsi_LogWarn(\"may not have ... in args, expected: (%s)\", argStr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:     }",
          "822:     if (!f->argnames) {",
          "823:         if (argStr[0])",
          "825:         else",
          "826:             rc = 1;",
          "827:         goto done;",
          "828:     } else {",
          "829:         if (f->argnames->varargs) { // TODO: could allow varargs...",
          "830:             if (argc < f->argnames->argCnt) {",
          "832:                 goto done;",
          "833:             }",
          "834:         }",
          "835:         else if (f->argnames->argCnt != argc) {",
          "836:             if (argc)",
          "838:             else",
          "839:                 Jsi_LogWarn(\"function should have no arguments\");",
          "840:             goto done;",
          "",
          "[Removed Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: %s\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: %s\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: %s\", argStr);",
          "",
          "[Added Lines]",
          "824:             Jsi_LogWarn(\"function has no args, expected: (%s)\", argStr);",
          "831:                 Jsi_LogWarn(\"vararg argument mismatch, expected: (%s)\", argStr);",
          "837:                 Jsi_LogWarn(\"argument mismatch, expected: (%s)\", argStr);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
      "candidate_info": {
        "commit_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "files": [
          "js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/web/jsi.js",
          "lib/web/markdeep.js",
          "lib/web/markdeep/DeepDoc.md",
          "lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.28\": Prepare to remove curFile bloat.  Fix logTrace bug. Ready to move to Vue. WebSocket fixes.\n\nFossilOrigin-Name: 9dc3a45b1f96e7966b961bc11986dea9da313140922a815363489a10c66790b6",
        "before_after_code_files": [
          "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi||lib/GenDeep.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/web/jsi.js||lib/web/jsi.js",
          "lib/web/markdeep.js||lib/web/markdeep.js",
          "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml": [
          "File: js-demos/shtml/index.shtml -> js-demos/shtml/index.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <!-- File: index.shtml -->",
          "2: <!--#include file=\"header.html\"-->",
          "3: <!--#include file=\"body.shtml\"-->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--#set pig='METOO'-->",
          "2: <!--#echo 'Echo Me'-->",
          "3: <!--#echo 'Echo Me ${pig}'-->",
          "",
          "---------------"
        ],
        "lib/GenDeep.jsi||lib/GenDeep.jsi": [
          "File: lib/GenDeep.jsi -> lib/GenDeep.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "45:         urlPrefix   :'/Websrv', // Prefix for urls",
          "46:         useridPass  :'',        // USER:PASS for web GUI.",
          "47:         wsdebug     :0,         // Debug option for websockets.",
          "48:         wsOpts      :{},        // Websocket options.",
          "49:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         return true;",
          "110:     }",
          "113:         if (!opts) opts = {};",
          "115:         data = JSON.stringify(data);",
          "117:         LogTrace(\"SENDING: \"+data);",
          "118:         self.ws.send(id, data);",
          "119:     }",
          "",
          "[Removed Lines]",
          "112:     function wsSend(chan:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "114:         var data = { chan:chan, cmd:cmd, data:obj, opts:opts };",
          "116:         puts(\"SEND:\",data);",
          "",
          "[Added Lines]",
          "113:     function wsSend(mod:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "115:         var data = { mod:mod, cmd:cmd, data:obj, opts:opts };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     }",
          "299:     function onModify(ws:userobj, fname:string) {",
          "302:     }",
          "304:     function WebAdmin(ws:userobj, id:number, url:string, query:array) {",
          "",
          "[Removed Lines]",
          "300:         puts(\"MODIFY\");",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {}); }, 300);",
          "",
          "[Added Lines]",
          "300:         LogDebug(\"onModify\", fname);",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {fname:fname}); }, 300);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:         self.done = 1;",
          "350:     }",
          "352:     function main() {",
          "353:         var urlarg, urlOrig = self.url;",
          "354:         if (typeof args === 'string')",
          "355:             args = [args];",
          "356:         urlarg = args[0];",
          "357:         args.shift();",
          "358:         if (urlarg) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:     function ConvertVue(fn:string) { // Now builtin.",
          "354:         var s = File.read(fn);",
          "355:         var ts = s.indexOf('<template>');",
          "356:         var te = s.lastIndexOf('\\n</template>');",
          "357:         var sxs = '<script>\\nexport default {';",
          "358:         var sx = s.indexOf(sxs);",
          "359:         var se = s.lastIndexOf('\\n</script>');",
          "360:         if (ts<0||te<0||se<0||sx<0) puts('bad template:',fn);",
          "361:         var tmpl = s.substr(ts+10, te-ts-9);",
          "362:         var sxb = sx+sxs.length;",
          "363:         var scr = s.substr(sxb, se-sxb);",
          "364:         var out = s.substr(0, ts)+'let template=`' + tmpl + '`;\\n\\nexport default {\\n  template, '+scr + s.substr(se+10);",
          "365:         return out;",
          "366:     }",
          "368:     function vueConvAll(args:array) {",
          "369:         for (var f of args) {",
          "370:             var fb = File.rootname(f);",
          "371:             if (File.extension(f) !== '.vue')",
          "372:                 throw('file extension must be .vue'+f);",
          "373:             var to = fb+'.js';",
          "374:             if (self.rootdir)",
          "375:                 to = File.join(self.rootdir, File.tail(to));",
          "376:             var out = ConvertVue(f);",
          "377:             File.write(to, out);",
          "378:         }",
          "379:     }",
          "385:         if (self.vueConvert) {",
          "386:             return vueConvAll(args);",
          "387:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:         for (var i in self.wsOpts)",
          "466:             wo[i] = self.wsOpts[i];",
          "469:         LogTrace(\"Listening on port:\",self.port);",
          "471:         if (!self.noGui && self.url && self.url.length) {",
          "",
          "[Removed Lines]",
          "468:         OpenWebsock();",
          "",
          "[Added Lines]",
          "500:         OpenWebsock();",
          "501:         if (!self.ws.conf('extHandlers'))",
          "502:             self.ws.handler('vue', ConvertVue); // VUE BUILTIN NOW",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: Jsi_Auto.Archive    = 'source(\"'+Info.scriptDir()+'/Archive.jsi\")';",
          "33: Jsi_Auto.Module     = 'source(\"'+Info.scriptDir()+'/Module.jsi\")';",
          "34: Jsi_Auto.Help       = 'source(\"'+Info.scriptDir()+'/Help.jsi\")';",
          "36: Jsi_Auto.DebugUI        = 'source(\"'+Info.scriptDir()+'/DebugUI/DebugUI.jsi\")';",
          "37: Jsi_Auto.SqliteUI       = 'source(\"'+Info.scriptDir()+'/SqliteUI/SqliteUI.jsi\")';",
          "",
          "[Removed Lines]",
          "35: Jsi_Auto.GenDeep    = 'source(\"'+Info.scriptDir()+'/GenDeep.jsi\")';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:         return (function() {});",
          "289:     },",
          "291:     jsigImpl: function(sig, args) { // Check function arguments",
          "292:         function ArgCheckType(o, aind, val) {",
          "293:             var af = o.args[aind];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     gettype:gettype,",
          "292:     matchType: function(v1, v2) {",
          "293:         return gettype(v1) === getype(v2);",
          "294:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631:     websock:function(opts) { // Create websocket connection.",
          "632:         var ws;",
          "640:                 }",
          "648:         if (self.wsstarted) {",
          "649:             console.log('websock already started');",
          "650:             return;",
          "651:         }",
          "652:         self.wsstarted = 1;",
          "654:         if (opts) {",
          "655:             for (var i in opts) {",
          "658:                 w[i] = opts[i];",
          "659:             }",
          "660:         }",
          "",
          "[Removed Lines]",
          "633:         function onmessage(obj) {",
          "635:             var msg=JSON.parse(obj.data);",
          "636:             if (msg.mod === '!') {",
          "637:                 switch (msg.cmd) {",
          "638:                     case 'reload': location.reload(); return;",
          "639:                     default: puts('unknown * cmd');",
          "641:                 return;",
          "642:             }",
          "643:             if (msg.mod === '*') {",
          "644:                 puts('TODO: broadcast');",
          "645:                 return;",
          "646:             }",
          "647:         }",
          "653:         var w = {prot:'ws', onmessage:onmessage};",
          "656:                 if (w[opts[i]]===undefined)",
          "657:                     throw('expected: '+Object.keys(w));",
          "",
          "[Added Lines]",
          "637:         var w = {",
          "638:             prot:'ws',",
          "639:             debug:false,",
          "640:             noreloadexts:'',",
          "641:             onchange(fname) {",
          "642:                 location.reload();",
          "643:             },",
          "644:             onmessage(obj) {",
          "646:                 var msg=JSON.parse(obj.data);",
          "647:                 if (msg.mod === '!') {",
          "648:                     switch (msg.cmd) {",
          "649:                         case 'reload':",
          "650:                             var fname = msg.data.fname, fext, fia;",
          "651:                             if (fname)",
          "652:                                 fia = fname.lastIndexOf('.');",
          "653:                             if (fia && fia>0)",
          "654:                                 fext = fname.substr(fia+1);",
          "655:                             if (w.noreloadexts != '' && fname) {",
          "656:                                 if (typeof(w.noreloadexts)==='string')",
          "657:                                     w.noreloadexts = w.noreloadexts.split(',');",
          "658:                                 if (fext && w.noreloadexts.indexOf(fext)>=0) {",
          "659:                                     if (w.debug)",
          "660:                                         puts('ignoring changed file: '+fname);",
          "661:                                     return;",
          "662:                                 }",
          "663:                             }",
          "664:                             if (w.onchange)",
          "665:                                 w.onchange(fname, fext)",
          "666:                         return;",
          "667:                         default: puts('unknown * cmd');",
          "668:                     }",
          "669:                     return;",
          "671:                 if (msg.mod === '*') {",
          "672:                     puts('TODO: broadcast');",
          "673:                     return;",
          "674:                 }",
          "675:             },",
          "676:         };",
          "683:             if (typeof(opts) === 'string') {",
          "684:                 var nops = {}, flst = opts.split('|');",
          "685:                 for (var fli in flst) {",
          "686:                     var fnn = flst[fli].split(':');",
          "687:                     nops[fnn[0]] = fnn[1];",
          "688:                 }",
          "689:                 opts = nops;",
          "690:             }",
          "692:                 if (w[i]===undefined)",
          "693:                     puts('expected: '+Object.keys(w));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:         puts('Websock Started');",
          "665:         return ws;",
          "666:     },",
          "668:         function validate(msg, match, partial) { //msg:object,match:string=void,partial=false",
          "669:             function typeGet(msg) {",
          "670:                 var tt = gettype(msg);",
          "671:                 if (tt !== 'object')",
          "672:                     throw('expected object');",
          "673:                 var pat = '{', pre = '';",
          "676:                     pre = ',';",
          "677:                 }",
          "678:                 pat += '}';",
          "",
          "[Removed Lines]",
          "667:     matchObj:function(msg, match, partial, noerror) { //msg:object,match:string=void,partial=false,noerror=false",
          "674:                 for (var i in msg) {",
          "675:                     pat += pre + i + ':' + gettype(msg[i]);",
          "",
          "[Added Lines]",
          "703:     matchObj:function(msg, match, partial, noerror, pfx) { //msg:object,match:string=void,partial=false,noerror=false",
          "710:                 var keys = Object.keys(msg).sort();",
          "711:                 for (var i=0; i<keys.length; i++) {",
          "712:                     var nni = keys[i];",
          "713:                     pat += pre + nni + ':' + gettype(msg[nni]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "701:             }",
          "702:         }",
          "704:         if (!match)",
          "705:             return validate(msg, match, partial);",
          "706:         try {",
          "707:             validate(msg, match, partial);",
          "708:         } catch(e) {",
          "709:             if (config.interp.asserts && console.assert && !noerror)",
          "711:             else if (console.warn)",
          "713:             else",
          "715:         }",
          "716:         return (function() {});",
          "717:     },",
          "",
          "[Removed Lines]",
          "710:                 return console.assert.bind(console.window, false, 'ASSERT:'+e);",
          "712:                 return console.warn.bind(console.window, 'WARN: '+e);",
          "714:                 return console.log.bind(console.window, 'LOG: '+e);",
          "",
          "[Added Lines]",
          "741:         if (!pfx) pfx = '';",
          "748:                 return console.assert.bind(console.window, false, 'ASSERT:'+pfx+e);",
          "750:                 return console.warn.bind(console.window, 'WARN: '+pfx+e);",
          "752:                 return console.log.bind(console.window, 'LOG: '+pfx+e);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:         if (jsi.config.onload)",
          "741:             jsi.config.onload();",
          "745:     }",
          "746: };",
          "",
          "[Removed Lines]",
          "742:         var scr = $('script[src$=\"/jsi.js?websock=true')[0];",
          "743:         if (scr)",
          "744:             jsi.websock();",
          "",
          "[Added Lines]",
          "780:         var scr = $('script[src*=\"/jsi.js?websock=\"]')[0];",
          "781:         if (scr) {",
          "782:             var ss = scr.src.indexOf('=');",
          "783:             var ssv;",
          "784:             if (ss>0) {",
          "785:                 ssv = scr.src.substr(ss+1);",
          "786:                 if (ssv==='false') return;",
          "787:                 if (ssv==='true') ssv = undefined;",
          "788:             }",
          "789:             jsi.websock(ssv);",
          "790:         }",
          "",
          "---------------"
        ],
        "lib/web/markdeep.js||lib/web/markdeep.js": [
          "File: lib/web/markdeep.js -> lib/web/markdeep.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css": [
          "File: lib/web/markdeep/apidoc.css -> lib/web/markdeep/apidoc.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html": [
          "File: lib/web/markdeep/apidoc.md.html -> lib/web/markdeep/apidoc.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css": [
          "File: lib/web/markdeep/dark.css -> lib/web/markdeep/dark.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html": [
          "File: lib/web/markdeep/dark.md.html -> lib/web/markdeep/dark.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml": [
          "File: lib/web/markdeep/include.shtml -> lib/web/markdeep/include.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css": [
          "File: lib/web/markdeep/jsistyle.css -> lib/web/markdeep/jsistyle.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css": [
          "File: lib/web/markdeep/latex.css -> lib/web/markdeep/latex.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html": [
          "File: lib/web/markdeep/latex.md.html -> lib/web/markdeep/latex.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf": [
          "File: lib/web/markdeep/nginx_deepdoc.conf -> lib/web/markdeep/nginx_deepdoc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css": [
          "File: lib/web/markdeep/slides.css -> lib/web/markdeep/slides.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html": [
          "File: lib/web/markdeep/slides.md.html -> lib/web/markdeep/slides.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html": [
          "File: lib/web/markdeep/starter.md.html -> lib/web/markdeep/starter.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 27",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4712:         }",
          "4713:         Jsi_TreeSearchDone(&search);",
          "4714:     }",
          "4716:         jsi_Frame *fptr = interp->framePtr;",
          "4717:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4718:         Jsi_ModuleConf *mo = NULL;",
          "4719:         if (pf && pf->pkg)",
          "4720:             mo = &pf->pkg->popts.modConf;",
          "4721:         if (jsi_ModLogEnabled(interp, v1, \"Debug\") || (mo && mo->Debug)) {",
          "4722:             jsi_evalStrFile(interp, NULL, \"this.LogDebug = console.log.bind(null, 'DEBUG:');\", 0, fptr->level);",
          "4724:         }",
          "4725:         if (jsi_ModLogEnabled(interp, v1, \"Trace\") || (mo && mo->Trace)) {",
          "4726:             jsi_evalStrFile(interp, NULL, \"this.LogTrace = console.log.bind(null, 'TRACE:');\", 0, fptr->level);",
          "4728:         }",
          "4729:         if (jsi_ModLogEnabled(interp, v1, \"Test\") || (mo && mo->Test)) {",
          "4730:             jsi_evalStrFile(interp, NULL, \"this.LogTest = console.log.bind(null, 'TEST: ');\", 0, fptr->level);",
          "4732:         }",
          "4733:     }",
          "4734:     return rc;",
          "",
          "[Removed Lines]",
          "4715:     if (rc == JSI_OK) {",
          "4723:             fptr->logflag |= (1<<jsi_Oplf_debug);",
          "4727:             fptr->logflag |= (1<<jsi_Oplf_trace);",
          "4731:             fptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "[Added Lines]",
          "4715:     if (rc == JSI_OK && interp->framePtr->filePtr) {",
          "4717:         jsi_FileInfo *cptr = fptr->filePtr;",
          "4724:             cptr->logflag |= (1<<jsi_Oplf_debug);",
          "4728:             cptr->logflag |= (1<<jsi_Oplf_trace);",
          "4732:             cptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "71:         interp->ps = newps;",
          "73:         if (r) {",
          "74:             Jsi_ValueDup2(interp, &ps->last_exception, newps->last_exception);",
          "75:         }",
          "",
          "[Removed Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret);",
          "",
          "[Added Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:       }}\\",
          "1070:     continue;\\",
          "1071: }",
          "1074:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1075:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "[Added Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && (interp->framePtr->filePtr && !(interp->framePtr->filePtr->logflag &(1<<n)))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2017: Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "2018:          jsi_ScopeChain *scope, Jsi_Value *fargs,",
          "2019:          Jsi_Value *_this,",
          "2021: {",
          "2022:     Jsi_Interp *interp = ps->interp;",
          "2023:     if (interp->exited)",
          "",
          "[Removed Lines]",
          "2020:          Jsi_Value **vret)",
          "",
          "[Added Lines]",
          "2020:          Jsi_Value **vret, jsi_FileInfo* fi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2032:     frame.incsc = fargs;",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "2036:     frame.funcName = interp->curFunction;",
          "2037:     frame.dirName = interp->curDir;",
          "2042:     frame.level = frame.parent->level+1;",
          "2043:     frame.evalFuncPtr = func;",
          "2044:     frame.arguments = NULL;",
          "",
          "[Removed Lines]",
          "2038:     if (frame.fileName && frame.fileName == frame.parent->fileName)",
          "2039:         frame.logflag = frame.parent->logflag;",
          "2040:     else",
          "2041:         frame.logflag = 0;",
          "",
          "[Added Lines]",
          "2035:     frame.filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2161:     int oldSp, uskip = 0, fncOfs = 0, fnLen;",
          "2162:     int oldef = interp->evalFlags;",
          "2163:     jsi_Pstate *oldps = interp->ps;",
          "2164:     const char *oldFile = interp->curFile;",
          "2165:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2166:     const char *fname = origFile;",
          "2167:     char *oldDir = interp->curDir, *cp;",
          "2168:     char dirBuf[PATH_MAX];",
          "2169:     jsi_Pstate *ps = NULL;",
          "2171:     int exists = (flags&JSI_EVAL_EXISTS);",
          "2172:     int ignore = (flags&JSI_EVAL_ERRIGNORE);",
          "2173:     if (flags & JSI_EVAL_GLOBAL)",
          "",
          "[Removed Lines]",
          "2170:     jsi_FileInfo *fi = NULL;",
          "",
          "[Added Lines]",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2364:         const char *curFile = interp->curFile;",
          "2366:         if (level <= 0)",
          "2368:         else {",
          "2369:             jsi_Frame *fptr = interp->framePtr;",
          "2370:             while (fptr && fptr->level > level)",
          "",
          "[Removed Lines]",
          "2367:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue);",
          "",
          "[Added Lines]",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2372:             if (!fptr)",
          "2373:                 rc = JSI_ERROR;",
          "2374:             else",
          "2376:         }",
          "2377:         interp->curFile = curFile;",
          "2378:         if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2375:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue);",
          "",
          "[Added Lines]",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1079:      interp->funcCnt++;",
          "1080:      return func;",
          "1081: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "684: typedef struct jsi_Frame {",
          "685:     int level;",
          "686:     const char *fileName;",
          "687:     const char *funcName;",
          "688:     const char *dirName;",
          "689:     int line;",
          "690:     jsi_OpCode *ip;",
          "691:     int Sp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:     Jsi_Value *inthis;",
          "697:     Jsi_OpCodes *opcodes;",
          "698:     struct jsi_Pstate *ps;",
          "700:     Jsi_Func *evalFuncPtr;",
          "701:     struct jsi_Frame *parent, *child;",
          "702:     Jsi_Value *arguments; // Set when arguments are accessed.",
          "",
          "[Removed Lines]",
          "699:     int logflag;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:     Jsi_FuncObj *fobj;",
          "850:     struct jsi_PkgInfo *pkg;",
          "851:     bool isArrow;",
          "852: };",
          "862: enum {",
          "863:     STACK_INIT_SIZE=1024, STACK_INCR_SIZE=1024, STACK_MIN_PAD=100,",
          "",
          "[Removed Lines]",
          "854: typedef struct {",
          "859:     int useCnt;",
          "860: } jsi_FileInfo;",
          "",
          "[Added Lines]",
          "861:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:     Jsi_Value *console;",
          "1191:     const char *scriptStr;",
          "1192:     const char *curFile;",
          "1193:     const char *curFunction;",
          "1194:     const char *homeDir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1400: extern Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "1401:         jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1402:         Jsi_Value *_this,",
          "1405: typedef Jsi_RC (*Jsi_Constructor)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1406:     Jsi_Value **ret, int flags, void *privData);",
          "",
          "[Removed Lines]",
          "1403:         Jsi_Value **vret);",
          "",
          "[Added Lines]",
          "1407:         Jsi_Value **vret, jsi_FileInfo* fi);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "783:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "784:           \"  -e CODE ...\\tEvaluate javascript CODE.\\n\"",
          "786:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "787:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "788:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "",
          "[Removed Lines]",
          "785:           \"  -g\\t\\tGendeep: generate html output from markdeep source.\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:                     }",
          "830:                 }",
          "831:                 break;",
          "835:             case 'h':",
          "836:                 goto dohelp;",
          "837:             case 'J':",
          "",
          "[Removed Lines]",
          "832:             case 'g':",
          "833:                 rc = Jsi_EvalString(interp, \"runModule('GenDeep');\", JSI_EVAL_ISMAIN);",
          "834:                 break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:     if (opts && parent && (Jsi_ValueIsObjType(parent, opts, JSI_OT_OBJECT)==0 ||",
          "1133:         Jsi_TreeSize(opts->d.obj->tree)<=0))",
          "1134:         opts = NULL;",
          "1137:     if (!parent)",
          "1138:         interp->maxInterpDepth = JSI_MAX_SUBINTERP_DEPTH;",
          "1139:     else {",
          "",
          "[Removed Lines]",
          "1135:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp) + sizeof(jsi_Frame));",
          "1136:     interp->framePtr = (jsi_Frame*)(((uchar*)interp)+sizeof(*interp));",
          "",
          "[Added Lines]",
          "1131:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp));",
          "1132:     interp->framePtr = &interp->topFrame;",
          "1133:     interp->framePtr->filePtr = &interp->topFile;",
          "1134:     interp->topFile.fileName = interp->topFile.dirName = interp->topFile.origFile =\"\";",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         int as_cons = funcPtr->callflags.bits.iscons;",
          "214:         if (funcPtr->type == FC_NORMAL) {",
          "215:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, callee->d.obj->d.fobj->scope,",
          "217:             interp->funcCallCnt++;",
          "218:         } else if (!funcPtr->callback) {",
          "219:             rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "",
          "[Removed Lines]",
          "216:                        args, fthis, ret);",
          "",
          "[Added Lines]",
          "216:                        args, fthis, ret, funcPtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     int unused;",
          "227: } jsi_wsUser;",
          "229: typedef struct {",
          "230:     Jsi_Value *val, *objVar;",
          "231:     int triedLoad;",
          "232:     int flags;",
          "233: } jsi_wsHander;",
          "235: typedef struct {",
          "236:     Jsi_Value *fileVal;",
          "237:     time_t loadLast, loadFirst;",
          "238:     int flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: typedef Jsi_RC (*jsi_wsHandlerCmd)(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr);",
          "232:     jsi_wsHandlerCmd proc;",
          "239:     const char *fname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:             else {",
          "862:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "863:                 fPtr->fileVal = name;",
          "864:                 fPtr->loadFirst = time(NULL);",
          "865:                 Jsi_IncrRefCount(interp, name);",
          "866:                 fPtr->flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:                 fPtr->fname = sname;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:     }",
          "950:     char *cp, *se, pref[] = \"<!--#\", suffix[] = \"-->\";",
          "952:     struct {",
          "953:         int inif, inelse, matched, elide;",
          "954:     } II[11] = {};",
          "",
          "[Removed Lines]",
          "951:     const char *sp, *msg = NULL;",
          "",
          "[Added Lines]",
          "956:     const char *sp, *msg = NULL, *seq;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1002:                     rc = JSI_OK;",
          "1003:                 Jsi_DecrRefCount(interp, fval);",
          "1004:             }",
          "1021:                 }",
          "1022:             }",
          "1024:         } else if (!Jsi_Strncmp(cp, \"#if expr=\\\"\", 10) || !Jsi_Strncmp(cp, \"#elif expr=\\\"\", 12)) {",
          "1025:             if (llen<11 || cp[llen-1] != '\"' || cp[llen-2] == '=') { msg = \"missing end quote\"; break; }",
          "1026:             Jsi_DSSetLength(&lStr, llen-1);",
          "",
          "[Removed Lines]",
          "1005:         } else if (!Jsi_Strncmp(cp, \"#echo \\\"${\", 9)) {",
          "1006:             if (cp[llen-1] != '\"' || cp[llen-2] != '}') { msg = \"missing end quote\"; break; }",
          "1007:             Jsi_DSSetLength(&lStr, llen-2);",
          "1008:             cp += 9;",
          "1009:             llen -= 9;",
          "1010:             if (!Jsi_Strcmp(cp, \"#\")) {",
          "1011:                 if (!pss->key[0])",
          "1012:                     snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1013:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1014:             } else {",
          "1015:                 Jsi_Value *val = NULL;",
          "1016:                 if (!cmdPtr->udata) {",
          "1017:                     val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1018:                     if (!val) { msg = \"udata lookup failure\"; break; }",
          "1019:                     cp = Jsi_ValueString(interp, val, NULL);",
          "1020:                     Jsi_DSPrintf(dStr, \"'%s'\", cp);",
          "",
          "[Added Lines]",
          "1010:         } else if (cmdPtr->udata && !Jsi_Strncmp(cp, \"#set \", 5) && cp[5] != '=' && ((seq=Jsi_Strchr(cp,'='))) && (seq[1]=='\\'' || seq[1]=='\\\"') && cp[llen-1]==seq[1] ) {",
          "1011:             Jsi_DSSetLength(&lStr, llen-1);",
          "1012:             Jsi_Value *val = Jsi_ValueNewStringDup(interp, (seq+2));",
          "1013:             Jsi_DString tStr = {};",
          "1014:             const char *key = Jsi_DSAppendLen(&tStr, cp+5, seq-cp-5);",
          "1015:             Jsi_ValueInsert(interp, cmdPtr->udata, key, val, 0);",
          "1016:             Jsi_DSFree(&tStr);",
          "1017:         } else if (!Jsi_Strncmp(cp, \"#echo \", 6) && (cp[6]=='\\'' || cp[6]=='\\\"') && cp[llen-1]==cp[6] ) {",
          "1018:             char *esq, *vsq = Jsi_Strstr(cp,\"${\");",
          "1019:             int ptlen = (vsq?((vsq-cp)-7):llen-8);",
          "1020:             if (vsq && !(esq=Jsi_Strchr(vsq+2,'}'))) { msg = \"'${' missing end brace '}'\"; break; }",
          "1021:             Jsi_DSAppendLen(dStr, cp+7, ptlen);",
          "1022:             if (vsq) {",
          "1023:                 Jsi_DSSetLength(&lStr, llen-1);",
          "1024:                 cp = vsq+2;",
          "1026:                 if (cp[0]== '#' && !cp[1]) {",
          "1027:                     if (!pss->key[0])",
          "1028:                         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1029:                     Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1030:                 } else {",
          "1031:                     Jsi_Value *val = NULL;",
          "1032:                     if (cmdPtr->udata) {",
          "1033:                         val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1034:                         if (!val) { msg = \"udata lookup failure\"; break; }",
          "1035:                         cp = Jsi_ValueString(interp, val, NULL);",
          "1036:                         Jsi_DSAppend(dStr, cp, NULL);",
          "1037:                     }",
          "1039:                 Jsi_DSAppend(dStr, esq+1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1101:             if (ii>0)",
          "1102:                 ii--;",
          "1103:         } else {",
          "1105:             break;",
          "1106:         }",
          "1107:         cs = se + 3;",
          "",
          "[Removed Lines]",
          "1104:             msg = \"expected directive #include/#if/#elif/#else/#endif\";",
          "",
          "[Added Lines]",
          "1122:             msg = \"expected directive #include/#if/#elif/#else/#endif/#echo/#set\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1206:     \"jsi\", \"application/x-javascript\", \"cssi\", \"text/css\",",
          "1207:     \"shtml\", \"text/html\",  \"scss\", \"text/css\", \"vtt\", \"text/vtt\",",
          "1208:     \"sjs\", \"application/x-javascript\",",
          "1209:     0, 0",
          "1210: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227:     \"vue\", \"application/x-javascript\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1451:         isSSI = jsi_wsIsSSIExt(interp, cmdPtr, pss, eext);",
          "1455:             Jsi_DString jStr = {};",
          "1456:             Jsi_Value *vrc = NULL;",
          "",
          "[Removed Lines]",
          "1453:         if ((hPtr = Jsi_HashEntryFind(cmdPtr->handlers, ext)) && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "1472:         if (eext && (hPtr = Jsi_HashEntryFind(cmdPtr->handlers, eext)) && !cmdPtr->deleted) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1463:                 jsi_wsServeString(pss, wsi, \"Can not handle quotes in url\", 404, NULL, NULL);",
          "1464:                 return -1;",
          "1465:             }",
          "1466:             cmdPtr->handlersPkg=1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485:             if (hdlPtr->proc) {",
          "1486:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1487:                 Jsi_IncrRefCount(interp, fname);",
          "1488:                 Jsi_DString tStr = {};",
          "1489:                 rc = hdlPtr->proc(interp, cmdPtr, pss, fname, &tStr);",
          "1490:                 if (rc != JSI_OK)",
          "1491:                     hrc = -1;",
          "1492:                 else {",
          "1493:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1494:                     jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1495:                 }",
          "1496:                 Jsi_DecrRefCount(interp, fname);",
          "1497:                 return hrc;",
          "1498:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1548:                 Jsi_DecrRefCount(interp, vrc);",
          "1549:             if (hrc<=0)",
          "1550:                 return -1;",
          "1551:             return 1;",
          "1552:         }",
          "1553:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:             if (cmdPtr->onModify) {",
          "1585:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1586:                 Jsi_IncrRefCount(interp, fname);",
          "1587:                 jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1588:                 Jsi_DecrRefCount(interp, fname);",
          "1589:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2547:     return rc;",
          "2548: }",
          "2552: {",
          "2553:     Jsi_HashEntry *hPtr;",
          "2554:     jsi_wsHander *hdlPtr;",
          "2556:     hPtr = Jsi_HashEntryNew(cmdPtr->handlers, ext, NULL);",
          "2557:     if (!hPtr)",
          "2558:         return JSI_ERROR;",
          "2559:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2560:     hdlPtr->val = valPtr;",
          "2561:     hdlPtr->flags = flags;",
          "2562:     Jsi_HashValueSet(hPtr, hdlPtr);",
          "2563:     Jsi_IncrRefCount(interp, valPtr);",
          "2564:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2551: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags)",
          "2555:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, cmd);",
          "",
          "[Added Lines]",
          "2589: static Jsi_RC jsi_wsHandleVue(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr) {",
          "2591:     Jsi_DString dStr = {};",
          "2592:     Jsi_RC rc = jsi_wsFileRead(interp, fn, &dStr, cmdPtr, pss);",
          "2593:     if (rc != JSI_OK)",
          "2594:         return JSI_ERROR;",
          "2595:     char *s = Jsi_DSValue(&dStr),",
          "2601:     if (ts<0||te<0||se<0||sx<0)",
          "2602:         rc = Jsi_LogError(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "2603:     else {",
          "2604:         Jsi_DSAppendLen(tStr, s, ts-s);",
          "2605:         Jsi_DSAppend(tStr, \"let template=`\", NULL);",
          "2606:         Jsi_DSAppendLen(tStr, ts+10, te-ts-9);",
          "2607:         Jsi_DSAppend(tStr, \"`;\\n\\nexport default {\\n  template, \", NULL);",
          "2608:         sxb = sx+Jsi_Strlen(sxs);",
          "2609:         Jsi_DSAppendLen(tStr, sxb, se-sxb);",
          "2610:         Jsi_DSAppend(tStr, se+10, NULL);",
          "2611:     }",
          "2612:     return rc;",
          "2613: }",
          "2615: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags, jsi_wsHandlerCmd proc)",
          "2619:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, (cmd?cmd:\"\"));",
          "2626:     hdlPtr->proc = proc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2598:         return JSI_OK;",
          "2599:     }",
          "2600:     const char *key = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2601:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "2602:     if (Jsi_ValueIsNull(interp, valPtr)) {",
          "2603:         hPtr = Jsi_HashEntryFind(cmdPtr->handlers, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666:     if (!key || !*key)",
          "2667:         return Jsi_LogError(\"handler: extension key must not be empty: %s\", key);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2625:     if (!hPtr)",
          "2626:         return JSI_ERROR;",
          "2627:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2629:     Jsi_Number fl = 0;",
          "2630:     if (flagPtr && Jsi_ValueIsNumber(interp, flagPtr))",
          "2631:         Jsi_ValueGetNumber(interp, flagPtr, &fl);",
          "",
          "[Removed Lines]",
          "2628:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Added Lines]",
          "2695:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 3);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2729:             int n = Jsi_Stat(interp, fPtr->fileVal, &sb);",
          "2730:             if (!n && sb.st_mtime > ll) {",
          "2731:                 changed = fPtr->fileVal;",
          "2732:                 break;",
          "2733:             }",
          "2734:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:                 cmdPtr->lastModifyNotify = sb.st_mtime;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2755:         cmdPtr->onModify = NULL;",
          "2756:     }",
          "2757:     cmdPtr->lastModifyCheck = time(NULL);",
          "2759: }",
          "2761: static int jsi_wsService(jsi_wsCmdObj *cmdPtr)",
          "",
          "[Removed Lines]",
          "2758:     cmdPtr->lastModifyNotify = time(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3209:     cmdPtr->handlers = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_wsfreeHandlers);",
          "3210:     if (cmdPtr->extHandlers) {",
          "3214:     }",
          "3215:     cmdPtr->fobj = fobj;",
          "3216: #ifdef LWS_LIBRARY_VERSION_NUMBER",
          "",
          "[Removed Lines]",
          "3211:         jsi_wsHandlerAdd(interp, cmdPtr, \".jsi\",   \"Jspp\",     1);",
          "3212:         jsi_wsHandlerAdd(interp, cmdPtr, \".htmli\", \"Htmlpp\",   1);",
          "3213:         jsi_wsHandlerAdd(interp, cmdPtr, \".cssi\",  \"Csspp\",    1);",
          "",
          "[Added Lines]",
          "3279:         jsi_wsHandlerAdd(interp, cmdPtr, \"jsi\",   \"Jspp\",     1, NULL);",
          "3280:         jsi_wsHandlerAdd(interp, cmdPtr, \"htmli\", \"Htmlpp\",   1, NULL);",
          "3281:         jsi_wsHandlerAdd(interp, cmdPtr, \"cssi\",  \"Csspp\",    1, NULL);",
          "3282:         jsi_wsHandlerAdd(interp, cmdPtr, \"vue\",   NULL,       1, jsi_wsHandleVue);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
      "candidate_info": {
        "commit_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "files": [
          "lib/Module.jsi",
          "lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js",
          "lib/www/md/Misc.md",
          "lib/www/md/Reference.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tests/json2.jsi",
          "tests/utf.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.7\": fix unzip hang, add jsonify/es5lint\n\nFossilOrigin-Name: af3732676198b6641b7fb06b41dfa73d922e1ab67db4a3a31232892554c4cbc2",
        "before_after_code_files": [
          "lib/Module.jsi||lib/Module.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tests/json2.jsi||tests/json2.jsi",
          "tests/utf.jsi||tests/utf.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     const options = { // Run or create a Jsi module.",
          "8:         create  :'',        // Create a Jsi module template with this name.",
          "9:         force   :false,     // Remove output if exists.",
          "10:         output  :'',        // Override the output filename default of create + .jsi.",
          "11:         quiet   :false,     // No messages.",
          "12:         setup   :'',        // Download and setup fossil repos from jsish.org.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:         es5lint :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "11:         json    :'',        // Json file to normalize",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         File.write('run_'+app+'.sh', \"#!\\njsish -a -update true \"+app+'.fossil $*\\n');",
          "28:     }",
          "30:     function main() {",
          "31:         LogTrace('Starting');",
          "32:         if (self.rootdir === '')",
          "33:             self.rootdir=Info.scriptDir();",
          "34:         debugger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     function jsonify(name) {",
          "33:         var d = File.read(name);",
          "34:         d = JSON.parse(d, false);",
          "35:         d = JSON.stringify(d, null, 4);",
          "36:         if (self.output == '-')",
          "37:             puts(d);",
          "38:         else if (self.output == '.')",
          "39:             File.write(name, d);",
          "40:         else if (self.output)",
          "41:             File.write(self.output, d);",
          "42:         else",
          "43:             return d;",
          "44:     }",
          "46:     function es5lint(d) {",
          "47:         var i, lst;",
          "48:         if (File.isdir(d))",
          "49:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "50:         else",
          "51:             lst = [d];",
          "52:         for (i of lst) {",
          "53:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "54:             delete int;",
          "55:         }",
          "56:     }",
          "60:         if (self.json)",
          "61:             return jsonify(self.json);",
          "62:         if (self.es5lint)",
          "63:             return es5lint(self.es5lint);",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "",
          "---------------"
        ],
        "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js": [
          "File: lib/www/js/httpVueLoader.js -> lib/www/js/httpVueLoader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1172:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) * 3 + 1), *pbuf = buf;",
          "1173:   while (*pstr) {",
          "1176:     else if (*pstr == ' ')",
          "",
          "[Removed Lines]",
          "1171: static char *url_encode(char *str) {",
          "1174:     if (isalnum(*pstr) || *pstr == '-' || *pstr == '_' || *pstr == '.' || *pstr == '~')",
          "",
          "[Added Lines]",
          "1171: static char *url_encode(char *str, bool comp) {",
          "1172:   const char *ncomps = \"-_.!~*'()\", *comps = \";,/?:@&=+$#\";",
          "1176:     if (isalnum(*pstr) || (!Jsi_Strchr(ncomps, *pstr) && (!comp || !Jsi_Strchr(comps, *pstr))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183:   return buf;",
          "1184: }",
          "1189:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "1190:   while (*pstr) {",
          "1191:     if (*pstr == '%') {",
          "1192:       if (pstr[1] && pstr[2]) {",
          "1195:       }",
          "1196:     } else if (*pstr == '+') {",
          "",
          "[Removed Lines]",
          "1188: static char *url_decode(char *str, int *len) {",
          "1194:         pstr += 2;",
          "",
          "[Added Lines]",
          "1190: static char *url_decode(char *str, int *len, bool comp) {",
          "1191:   char *comps = \";,/?:@&=+$#\", cc;",
          "1196:         cc = jsi_fromHexChar(pstr[1]) << 4 | jsi_fromHexChar(pstr[2]);",
          "1197:         if (!comp && Jsi_Strchr(comps, cc))",
          "1199:         else {",
          "1200:             pstr += 2;",
          "1202:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1209:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1210: {",
          "1211:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1213:     Jsi_ValueMakeString(interp, ret, cp);",
          "1214:     return JSI_OK;",
          "1215: }",
          "",
          "[Removed Lines]",
          "1212:     cp = url_encode(str);",
          "",
          "[Added Lines]",
          "1220:     cp = url_encode(str,0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1219: {",
          "1220:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1221:     int len;",
          "1223:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1224:     return JSI_OK;",
          "1225: }",
          "",
          "[Removed Lines]",
          "1222:     cp = url_decode(str, &len);",
          "",
          "[Added Lines]",
          "1230:     cp = url_decode(str, &len,0);",
          "1231:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1232:     return JSI_OK;",
          "1233: }",
          "1235: static Jsi_RC EncodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1236:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1237: {",
          "1238:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1239:     cp = url_encode(str,1);",
          "1240:     Jsi_ValueMakeString(interp, ret, cp);",
          "1241:     return JSI_OK;",
          "1242: }",
          "1244: static Jsi_RC DecodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1245:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1246: {",
          "1247:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1248:     int len;",
          "1249:     cp = url_decode(str, &len,1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5083:     { \"clearInterval\",clearIntervalCmd,1,1, \"id:number\", .help=\"Delete event id returned from setInterval/setTimeout/info.events()\", .retType=(uint)JSI_TT_VOID },",
          "5084: #endif",
          "5085:     { \"decodeURI\",  DecodeURICmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5086:     { \"encodeURI\",  EncodeURICmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5087:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "5088:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "5089:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5113:     { \"decodeURIComponent\",  DecodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5115:     { \"encodeURIComponent\",  EncodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         pZvfs->hPtr = pEntry;",
          "624:         Jsi_HashValueSet(pEntry, (void*) pZvfs);",
          "626:         if (nFile < 0)",
          "627:             break;",
          "633:         Jsi_Seek(interp, chan, lenExtra, SEEK_CUR);",
          "634:     }",
          "635:     pArchive->chan = chan;",
          "",
          "[Removed Lines]",
          "632: skip:",
          "",
          "[Added Lines]",
          "626: skip:",
          "",
          "---------------"
        ],
        "tests/json2.jsi||tests/json2.jsi": [
          "File: tests/json2.jsi -> tests/json2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "5: ;JSON.check(x,false);",
          "6: ;JSON.check(x);",
          "7: ;JSON.check(x2,false);",
          "",
          "[Removed Lines]",
          "3: var x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "4: var x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "[Added Lines]",
          "3: var x, x2, o;",
          "4: ;x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "5: ;x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: x = JSON.parse('{ \"Columns\": [ 1, 2, {\"ABC\":1, \"B\":[2,3]}, 2], \"A\" : 1 }');",
          "26: ;x.toString();",
          "29: =!EXPECTSTART!=",
          "30: JSON.check(x,false) ==> true",
          "31: JSON.check(x) ==> true",
          "32: JSON.check(x2,false) ==> true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: ;o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9};",
          "30: ;JSON.stringify(o);",
          "31: ;JSON.stringify(o, null);",
          "32: ;JSON.stringify(o, false, 4);",
          "36: x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}",
          "37: x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: JSON.stringify(dat) ==> { \"able\":1 }",
          "39: x.toString() ==> [ \"ABC\", 1 ]",
          "40: x.toString() ==> { A:1, Columns:[ 1, 2, { ABC:1, B:[ 2, 3 ] }, 2 ] }",
          "41: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9} ==> { a:1, b:2, c:{ d:1, e:{ a:1 }, g:[ 1, 2 ] }, d:9 }",
          "50: JSON.stringify(o) ==> { \"a\":1, \"b\":2, \"c\":{ \"d\":1, \"e\":{ \"a\":1 }, \"g\":[ 1, 2 ] }, \"d\":9 }",
          "51: JSON.stringify(o, null) ==> {",
          "52:   \"a\":1,",
          "53:   \"b\":2,",
          "54:   \"c\":{",
          "55:     \"d\":1,",
          "56:     \"e\":{",
          "57:       \"a\":1",
          "58:     },",
          "59:     \"g\":[ 1, 2 ]",
          "60:   },",
          "61:   \"d\":9",
          "62: }",
          "63: JSON.stringify(o, false, 4) ==> {",
          "64:     a:1,",
          "65:     b:2,",
          "66:     c:{",
          "67:         d:1,",
          "68:         e:{",
          "69:             a:1",
          "70:         },",
          "71:         g:[ 1, 2 ]",
          "72:     },",
          "73:     d:9",
          "74: }",
          "",
          "---------------"
        ],
        "tests/utf.jsi||tests/utf.jsi": [
          "File: tests/utf.jsi -> tests/utf.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: ;d[9];",
          "31: b = '\u2665' ==> \u2665",
          "32: b.length ==> 1",
          "33: b+'a' ==> \u2665a",
          "35: c = '\u2764' ==> \u2764",
          "36: c.length ==> 1",
          "37: c+'a' ==> \u2764a",
          "",
          "[Removed Lines]",
          "30: =!EXPECTSTART!=",
          "34: encodeURI(b) ==> %e2%99%a5",
          "",
          "[Added Lines]",
          "30: =!EX=!EXPECTSTART!=",
          "34: encodeURI(b) ==> \u2665",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: d[2] ==> c",
          "49: d[3] ==> undefined",
          "50: d[9] ==> undefined",
          "",
          "[Removed Lines]",
          "51: =!EXPECTEND!=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "268: System.prototype.clearInterval = function(id:number):void {};",
          "269: System.prototype.decodeURI = function(val:string):string {};",
          "270: System.prototype.encodeURI = function(val:string):string {};",
          "271: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "272: System.prototype.exit = function(code:number=0):void {};",
          "273: System.prototype.format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: System.prototype.decodeURIComponent = function(val:string):string {};",
          "272: System.prototype.encodeURIComponent = function(val:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367: console.prototype.puts = function(val:any, ...):void {};",
          "368: console.prototype.warn = function(val, ...):void {};",
          "369: var decodeURI = function(val:string):string {};",
          "370: var encodeURI = function(val:string):string {};",
          "371: var exec = function(val:string, options:string|object=void):any {};",
          "372: var exit = function(code:number=0):void {};",
          "373: var format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: var decodeURIComponent = function(val:string):string {};",
          "374: var encodeURIComponent = function(val:string):string {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
      "candidate_info": {
        "commit_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "files": [
          "lib/Htmlpp.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiSqlite.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tools/protos.jsi",
          "tools/testsys.sh"
        ],
        "message": "Release \"3.4.3\": add check for duplicates in objects\n\nFossilOrigin-Name: 9e70b043b48f51f13e250b6285eb4cf979820040f07705ff6f89d0589bfaca4d",
        "before_after_code_files": [
          "lib/Htmlpp.jsi||lib/Htmlpp.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/testsys.sh||tools/testsys.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Htmlpp.jsi||lib/Htmlpp.jsi": [
          "File: lib/Htmlpp.jsi -> lib/Htmlpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     var self = {",
          "26:         package:\"Htmlpp\",",
          "27:         intOpts:{},",
          "29:         jsifiles:[], cssfiles:[], mdfiles:[],",
          "30:         Trace       :false,",
          "31:     };",
          "",
          "[Removed Lines]",
          "28:         rc:'', files:[], files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "[Added Lines]",
          "28:         rc:'', files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "",
          "[Removed Lines]",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Added Lines]",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         else",
          "409:             lst = [d];",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: Jsi_Auto.MySql          = 'require(\"MySql\");';",
          "34: Jsi_Auto.WebSocket      = 'require(\"WebSocket\");';",
          "35: Jsi_Auto.Socket         = 'require(\"Socket\");';",
          "38: source(Info.scriptDir()+'/user/autoload.jsi', {exists:true, once:true});",
          "",
          "[Removed Lines]",
          "36: Jsi_Auto.DebugUI        = 'require(\"DebugUI\");';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4708:     return \"\";",
          "4709: }",
          "4711: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4712:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "4713: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "4713: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4833:                 break;",
          "4834:             }",
          "4835:             Jsi_vtype oTyp, vTyp = jsi_getValType(val);",
          "4837:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4838:                 oVal = NULL;",
          "4839:             } else if (!v2) {",
          "",
          "[Removed Lines]",
          "4836:             if (!parse && (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"))) {",
          "",
          "[Added Lines]",
          "4840:             if (!parse && jsi_isDebugKey(key)) {",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     jsiOpCodesCnt[2]-=2;",
          "187:     return ret;",
          "188: }",
          "190: static Jsi_OpCodes *codes_join3(Jsi_OpCodes *a, Jsi_OpCodes *b, Jsi_OpCodes *c)",
          "191: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: static Jsi_OpCodes *codes_join_item(Jsi_OpCodes *a, Jsi_OpCodes *b)",
          "190: {",
          "191:     if (a->code_len == 1 && a->codes[0].op == OP_PUSHSTR &&",
          "192:         b->code_len>1)",
          "193:         b->codes[0].itemLen = b->code_len;",
          "194:     return codes_join(a,b);",
          "195: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330: static Jsi_OpCodes *code_jfalse_np(int off) { JSI_NEW_CODES(0,OP_JFALSE_NP, off); }",
          "331: static Jsi_OpCodes *code_jtrue_np(int off) { JSI_NEW_CODES(0,OP_JTRUE_NP, off); }",
          "332: static Jsi_OpCodes *code_jmp(int off) { JSI_NEW_CODES(0,OP_JMP, off); }",
          "334: static Jsi_OpCodes *code_array(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_ARRAY, c); }",
          "335: static Jsi_OpCodes *code_key() { JSI_NEW_CODES(0,OP_KEY, 0); }",
          "336: static Jsi_OpCodes *code_next() { JSI_NEW_CODES(0,OP_NEXT, 0); }",
          "",
          "[Removed Lines]",
          "333: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_OBJECT, c); }",
          "",
          "[Added Lines]",
          "340: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, Jsi_OpCodes* cv) {",
          "341:     int c = cv->expr_counter, nested = (c*2 != cv->code_len);",
          "342:     Jsi_Interp *interp = p->interp;",
          "343:     if (c>0 && interp->noEval) {",
          "344:         int i, n;",
          "345:         bool isNew;",
          "346:         const char *cp;",
          "347:         Jsi_Hash *h = Jsi_HashNew(interp, JSI_KEYS_STRINGKEY, NULL);",
          "348:         for (i=0, n=0; i<c; i++, n+=2) {",
          "349:             if (cv->codes[n].op == OP_PUSHSTR && !cv->codes[n].setget",
          "350:                 && Jsi_HashEntryNew(h, cp=(char*)cv->codes[n].data, &isNew) && !isNew) {",
          "351:                 Jsi_LogWarn(\"duplicate key: %s\", cp);",
          "352:             }",
          "353:             if (nested && cv->codes[n+1].itemLen)",
          "354:                 n += cv->codes[n+1].itemLen-1;",
          "355:         }",
          "356:         Jsi_HashDelete(h);",
          "357:     }",
          "358:     JSI_NEW_CODESLN(0, OP_OBJECT, c);",
          "359: }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:         Jsi_ValueMakeUndef(interp, &src);",
          "993:         if (obj && obj->freeze && obj->freezeReadCheck) {",
          "994:             const char *keyStr = Jsi_ValueToString(interp, idx, NULL);",
          "996:         }",
          "997:     }",
          "998:     else {",
          "",
          "[Removed Lines]",
          "995:             rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "[Added Lines]",
          "995:             if (!jsi_isDebugKey(keyStr))",
          "996:                 rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439: typedef struct jsi_OpCode {",
          "440:     jsi_Eopcode op;",
          "442:     unsigned int Line:16;",
          "443:     unsigned int Lofs:7;",
          "444:     unsigned int  readonly:1;",
          "",
          "[Removed Lines]",
          "441:     void *data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:     unsigned char isof:1;",
          "449:     unsigned char local:1;",
          "450:     unsigned char logidx:3;",
          "451:     jsi_FileInfo* filePtr;",
          "452: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     unsigned char setget:1;",
          "451:     unsigned int itemLen:24;",
          "452:     void *data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     bool full;    // Show full file path.",
          "1014:     bool ftail;   // Show tail of file only, even in LogWarn, etc.",
          "1015:     bool func;    // Ouput function at end.",
          "1022:     bool time;    // Prefix with time",
          "1023:     bool date;    // Prefix with date",
          "1024:     bool before;  // Print file:line before message instead of at end.",
          "",
          "[Removed Lines]",
          "1017:     bool Trace;",
          "1018:     bool Test;",
          "1019:     bool Info;",
          "1020:     bool Warn;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1506: extern Jsi_RC jsi_ObjSetFlag(Jsi_Interp *interp, Jsi_Obj *obj, int flag, int on);",
          "1507: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags);",
          "1508: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "1510: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1505: extern bool jsi_isDebugKey(const char *key);",
          "1506: extern Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     return v;",
          "21: }",
          "24:     Jsi_Tree *treePtr = obj->tree;",
          "25:     bool isNew;",
          "26:     Jsi_TreeEntry *hPtr;",
          "",
          "[Removed Lines]",
          "23: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "",
          "[Added Lines]",
          "23: Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "41:     if (val)",
          "42:         SIGASSERT(val,VALUE);",
          "43:     if (!isNew)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew)",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     return hPtr;",
          "63: }",
          "67: bool Jsi_ObjIsArray(Jsi_Interp *interp, Jsi_Obj *o)  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "68:     return jsi_TreeObjSetValue(obj, key, val, isstrkey, 0);",
          "69: }",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "364:     JSI_OPT(OBJ,    Jsi_Db, udata,      .help=\"User data\" ),",
          "365:     JSI_OPT(OBJ,    Jsi_Db, version,    .help=\"Sqlite version info\", jsi_IIRO),",
          "367:     JSI_OPT(STRING, Jsi_Db, vfs,        .help=\"VFS to use\", jsi_IIOF),",
          "368:     JSI_OPT_END(Jsi_Db, .help=\"Options for source command\")",
          "369: };",
          "",
          "[Removed Lines]",
          "366:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "[Added Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1420:     if (val->vt == JSI_VT_OBJECT)",
          "1421:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1423:     if ((flags&JSI_OM_DONTDEL))",
          "1424:         val->f.bits.dontdel = hPtr->f.bits.dontdel = 1;",
          "1425:     if ((flags&JSI_OM_READONLY))",
          "",
          "[Removed Lines]",
          "1422:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Added Lines]",
          "1422:     hPtr = jsi_TreeObjSetValue(obj, key, val, 0, unique);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1435:     if (target->vt != JSI_VT_OBJECT)",
          "1436:         return Jsi_LogError(\"Target is not object\");",
          "1437:     target->f.flag |= flags;",
          "1439: }",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags);",
          "",
          "[Added Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags, 0);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "839: ;",
          "841: object:",
          "843: ;",
          "845: itemfunc:",
          "",
          "[Removed Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "",
          "[Added Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, $2)); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:         lval->lvalue_flag = 1;",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate, \"object shorthand func\");",
          "852:         jsi_PstatePop(pstate);",
          "853:     }",
          "854: ;",
          "",
          "[Removed Lines]",
          "851:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "851:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "861:         lval->lvalue_flag = 1;",
          "862:         lval->lvalue_name = $1;",
          "864:     }",
          "865:     | item  { $$ = $1; }",
          "",
          "[Removed Lines]",
          "863:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "863:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914: ;",
          "916: item:",
          "925:     | OBJSET IDENTIFIER '(' IDENTIFIER ')' func_statement_block {",
          "926:         Jsi_ScopeStrs *args = jsi_argInsert(pstate, NULL, $4, NULL, &@4, 0 );",
          "928:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $6, &@1, $2, 2)));",
          "929:     }",
          "930:     | OBJGET IDENTIFIER '(' ')' func_statement_block {",
          "931:         Jsi_ScopeStrs *args = jsi_ArgsOptAdd(pstate, jsi_ScopeStrsNew());",
          "933:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $5, &@1, $2, 4)));",
          "934:     }",
          "935: ;",
          "",
          "[Removed Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join(code_push_null(), $3);  }",
          "927:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "",
          "[Added Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join_item(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join_item(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join_item($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join_item(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join_item(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join_item(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join_item(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join_item(code_push_null(), $3);  }",
          "927:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "934:         $$->codes[0].setget = 1;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "tools/testsys.sh||tools/testsys.sh": [
          "File: tools/testsys.sh -> tools/testsys.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         #echo $i",
          "14:         continue",
          "15:     fi",
          "16:     jsish --I noEval=true $i",
          "17: done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     echo $i",
          "",
          "---------------"
        ]
      }
    }
  ]
}