{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5eac8d6739cda9a07d75528a17b115b225b196e8",
      "candidate_info": {
        "commit_hash": "5eac8d6739cda9a07d75528a17b115b225b196e8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5eac8d6739cda9a07d75528a17b115b225b196e8",
        "files": [
          "lib/http.js"
        ],
        "message": "Fix #3179 HTTP memory leak using ClientRequest.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1126:   var method = self.method = (options.method || 'GET').toUpperCase();",
          "1127:   self.path = options.path || '/';",
          "1128:   if (cb) {",
          "1130:   }",
          "1132:   if (!Array.isArray(options.headers)) {",
          "",
          "[Removed Lines]",
          "1129:     self.on('response', cb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4784ea1a29dc4bace1c9a20f9f6a6376a7eecb7d",
      "candidate_info": {
        "commit_hash": "4784ea1a29dc4bace1c9a20f9f6a6376a7eecb7d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4784ea1a29dc4bace1c9a20f9f6a6376a7eecb7d",
        "files": [
          "deps/http_parser/.gitignore",
          "deps/http_parser/.mailmap",
          "deps/http_parser/AUTHORS",
          "deps/http_parser/Makefile",
          "deps/http_parser/http_parser.c",
          "deps/http_parser/http_parser.h",
          "deps/http_parser/test.c",
          "deps/http_parser/url_parser.c"
        ],
        "message": "deps: upgrade http_parser to ad3b631",
        "before_after_code_files": [
          "deps/http_parser/http_parser.c||deps/http_parser/http_parser.c",
          "deps/http_parser/http_parser.h||deps/http_parser/http_parser.h",
          "deps/http_parser/test.c||deps/http_parser/test.c",
          "deps/http_parser/url_parser.c||deps/http_parser/url_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/http_parser/http_parser.c||deps/http_parser/http_parser.c": [
          "File: deps/http_parser/http_parser.c -> deps/http_parser/http_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: # define MIN(a,b) ((a) < (b) ? (a) : (b))",
          "38: #endif",
          "41: #if HTTP_PARSER_DEBUG",
          "42: #define SET_ERRNO(e)                                                 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #ifndef ARRAY_SIZE",
          "41: # define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "42: #endif",
          "44: #ifndef BIT_AT",
          "45: # define BIT_AT(a, i)                                                \\",
          "46:   (!!((unsigned int) (a)[(unsigned int) (i) >> 3] &                  \\",
          "47:    (1 << ((unsigned int) (i) & 7))))",
          "48: #endif",
          "50: #ifndef ELEM_AT",
          "51: # define ELEM_AT(a, i, v) ((unsigned int) (i) < ARRAY_SIZE(a) ? (a)[(i)] : (v))",
          "52: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   };",
          "222: enum state",
          "",
          "[Removed Lines]",
          "187: static const uint8_t normal_url_char[256] = {",
          "189:         0,       0,       0,       0,       0,       0,       0,       0,",
          "191:         0,       0,       0,       0,       0,       0,       0,       0,",
          "193:         0,       0,       0,       0,       0,       0,       0,       0,",
          "195:         0,       0,       0,       0,       0,       0,       0,       0,",
          "197:         0,       1,       1,       0,       1,       1,       1,       1,",
          "199:         1,       1,       1,       1,       1,       1,       1,       1,",
          "201:         1,       1,       1,       1,       1,       1,       1,       1,",
          "203:         1,       1,       1,       1,       1,       1,       1,       0,",
          "205:         1,       1,       1,       1,       1,       1,       1,       1,",
          "207:         1,       1,       1,       1,       1,       1,       1,       1,",
          "209:         1,       1,       1,       1,       1,       1,       1,       1,",
          "211:         1,       1,       1,       1,       1,       1,       1,       1,",
          "213:         1,       1,       1,       1,       1,       1,       1,       1,",
          "215:         1,       1,       1,       1,       1,       1,       1,       1,",
          "217:         1,       1,       1,       1,       1,       1,       1,       1,",
          "219:         1,       1,       1,       1,       1,       1,       1,       0, };",
          "",
          "[Added Lines]",
          "200: #if HTTP_PARSER_STRICT",
          "201: # define T(v) 0",
          "202: #else",
          "203: # define T(v) v",
          "204: #endif",
          "207: static const uint8_t normal_url_char[32] = {",
          "209:         0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,",
          "211:         0    | T(2)   |   0    |   0    | T(16)  |   0    |   0    |   0,",
          "213:         0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,",
          "215:         0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,",
          "217:         0    |   2    |   4    |   0    |   16   |   32   |   64   |  128,",
          "219:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "221:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "223:         1    |   2    |   4    |   8    |   16   |   32   |   64   |   0,",
          "225:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "227:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "229:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "231:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "233:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "235:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "237:         1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,",
          "239:         1    |   2    |   4    |   8    |   16   |   32   |   64   |   0, };",
          "241: #undef T",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   , s_req_schema",
          "246:   , s_req_schema_slash",
          "247:   , s_req_schema_slash_slash",
          "255:   , s_req_path",
          "256:   , s_req_query_string_start",
          "257:   , s_req_query_string",
          "",
          "[Removed Lines]",
          "248:   , s_req_host_start",
          "249:   , s_req_host_v6_start",
          "250:   , s_req_host_v6",
          "251:   , s_req_host_v6_end",
          "252:   , s_req_host",
          "253:   , s_req_port_start",
          "254:   , s_req_port",
          "",
          "[Added Lines]",
          "269:   , s_req_server_start",
          "270:   , s_req_server",
          "271:   , s_req_server_with_at",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:   , h_connection_close",
          "330:   };",
          "334: #define CR                  '\\r'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349: enum http_host_state",
          "350:   {",
          "351:     s_http_host_dead = 1",
          "352:   , s_http_userinfo_start",
          "353:   , s_http_userinfo",
          "354:   , s_http_host_start",
          "355:   , s_http_host_v6_start",
          "356:   , s_http_host",
          "357:   , s_http_host_v6",
          "358:   , s_http_host_v6_end",
          "359:   , s_http_host_port_start",
          "360:   , s_http_host_port",
          "361: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338: #define IS_NUM(c)           ((c) >= '0' && (c) <= '9')",
          "339: #define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))",
          "340: #define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))",
          "342: #if HTTP_PARSER_STRICT",
          "343: #define TOKEN(c)            (tokens[(unsigned char)c])",
          "345: #define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')",
          "346: #else",
          "347: #define TOKEN(c)            ((c == ' ') ? ' ' : tokens[(unsigned char)c])",
          "348: #define IS_URL_CHAR(c)                                                         \\",
          "350: #define IS_HOST_CHAR(c)                                                        \\",
          "351:   (IS_ALPHANUM(c) || (c) == '.' || (c) == '-' || (c) == '_')",
          "352: #endif",
          "",
          "[Removed Lines]",
          "344: #define IS_URL_CHAR(c)      (normal_url_char[(unsigned char) (c)])",
          "349:   (normal_url_char[(unsigned char) (c)] || ((c) & 0x80))",
          "",
          "[Added Lines]",
          "371: #define IS_MARK(c)          ((c) == '-' || (c) == '_' || (c) == '.' || \\",
          "372:   (c) == '!' || (c) == '~' || (c) == '*' || (c) == '\\'' || (c) == '(' || \\",
          "373:   (c) == ')')",
          "374: #define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \\",
          "375:   (c) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \\",
          "376:   (c) == '$' || (c) == ',')",
          "380: #define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))",
          "385:   (BIT_AT(normal_url_char, (unsigned char)c) || ((c) & 0x80))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "380: };",
          "381: #undef HTTP_STRERROR_GEN",
          "",
          "[Removed Lines]",
          "383: int http_message_needs_eof(http_parser *parser);",
          "",
          "[Added Lines]",
          "419: int http_message_needs_eof(const http_parser *parser);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396: static enum state",
          "397: parse_url_char(enum state s, const char ch)",
          "398: {",
          "401:   switch (s) {",
          "402:     case s_req_spaces_before_url:",
          "",
          "[Removed Lines]",
          "399:   assert(!isspace(ch));",
          "",
          "[Added Lines]",
          "435:   if (ch == ' ' || ch == '\\r' || ch == '\\n') {",
          "436:     return s_dead;",
          "437:   }",
          "439: #if HTTP_PARSER_STRICT",
          "440:   if (ch == '\\t' || ch == '\\f') {",
          "441:     return s_dead;",
          "442:   }",
          "443: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "435:     case s_req_schema_slash_slash:",
          "436:       if (ch == '/') {",
          "438:       }",
          "440:       break;",
          "445:       }",
          "469:       }",
          "476:       }",
          "482:       }",
          "498:       }",
          "500:       break;",
          "",
          "[Removed Lines]",
          "437:         return s_req_host_start;",
          "442:     case s_req_host_start:",
          "443:       if (ch == '[') {",
          "444:         return s_req_host_v6_start;",
          "447:       if (IS_HOST_CHAR(ch)) {",
          "448:         return s_req_host;",
          "449:       }",
          "451:       break;",
          "453:     case s_req_host:",
          "454:       if (IS_HOST_CHAR(ch)) {",
          "455:         return s_req_host;",
          "456:       }",
          "459:     case s_req_host_v6_end:",
          "460:       switch (ch) {",
          "461:         case ':':",
          "462:           return s_req_port_start;",
          "464:         case '/':",
          "465:           return s_req_path;",
          "467:         case '?':",
          "468:           return s_req_query_string_start;",
          "471:       break;",
          "473:     case s_req_host_v6:",
          "474:       if (ch == ']') {",
          "475:         return s_req_host_v6_end;",
          "479:     case s_req_host_v6_start:",
          "480:       if (IS_HEX(ch) || ch == ':') {",
          "481:         return s_req_host_v6;",
          "483:       break;",
          "485:     case s_req_port:",
          "486:       switch (ch) {",
          "487:         case '/':",
          "488:           return s_req_path;",
          "490:         case '?':",
          "491:           return s_req_query_string_start;",
          "492:       }",
          "495:     case s_req_port_start:",
          "496:       if (IS_NUM(ch)) {",
          "497:         return s_req_port;",
          "",
          "[Added Lines]",
          "481:         return s_req_server_start;",
          "486:     case s_req_server_with_at:",
          "487:       if (ch == '@') {",
          "488:         return s_dead;",
          "492:     case s_req_server_start:",
          "493:     case s_req_server:",
          "494:       if (ch == '/') {",
          "495:         return s_req_path;",
          "498:       if (ch == '?') {",
          "499:         return s_req_query_string_start;",
          "502:       if (ch == '@') {",
          "503:         return s_req_server_with_at;",
          "506:       if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {",
          "507:         return s_req_server;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "616:   case s_req_schema:",
          "617:   case s_req_schema_slash:",
          "618:   case s_req_schema_slash_slash:",
          "626:   case s_req_query_string_start:",
          "627:   case s_req_query_string:",
          "628:   case s_req_fragment_start:",
          "",
          "[Removed Lines]",
          "619:   case s_req_host_start:",
          "620:   case s_req_host_v6_start:",
          "621:   case s_req_host_v6:",
          "622:   case s_req_host_v6_end:",
          "623:   case s_req_host:",
          "624:   case s_req_port_start:",
          "625:   case s_req_port:",
          "",
          "[Added Lines]",
          "629:   case s_req_server_start:",
          "630:   case s_req_server:",
          "631:   case s_req_server_with_at:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "984:         MARK(url);",
          "985:         if (parser->method == HTTP_CONNECT) {",
          "987:         }",
          "989:         parser->state = parse_url_char((enum state)parser->state, ch);",
          "",
          "[Removed Lines]",
          "986:           parser->state = s_req_host_start;",
          "",
          "[Added Lines]",
          "992:           parser->state = s_req_server_start;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "998:       case s_req_schema:",
          "999:       case s_req_schema_slash:",
          "1000:       case s_req_schema_slash_slash:",
          "1005:       {",
          "1006:         switch (ch) {",
          "",
          "[Removed Lines]",
          "1001:       case s_req_host_start:",
          "1002:       case s_req_host_v6_start:",
          "1003:       case s_req_host_v6:",
          "1004:       case s_req_port_start:",
          "",
          "[Added Lines]",
          "1007:       case s_req_server_start:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1021:         break;",
          "1022:       }",
          "1027:       case s_req_path:",
          "1028:       case s_req_query_string_start:",
          "1029:       case s_req_query_string:",
          "",
          "[Removed Lines]",
          "1024:       case s_req_host:",
          "1025:       case s_req_host_v6_end:",
          "1026:       case s_req_port:",
          "",
          "[Added Lines]",
          "1027:       case s_req_server:",
          "1028:       case s_req_server_with_at:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1854: int",
          "1856: {",
          "1857:   if (parser->type == HTTP_REQUEST) {",
          "1858:     return 0;",
          "",
          "[Removed Lines]",
          "1855: http_message_needs_eof (http_parser *parser)",
          "",
          "[Added Lines]",
          "1857: http_message_needs_eof (const http_parser *parser)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1877: int",
          "1879: {",
          "1880:   if (parser->http_major > 0 && parser->http_minor > 0) {",
          "",
          "[Removed Lines]",
          "1878: http_should_keep_alive (http_parser *parser)",
          "",
          "[Added Lines]",
          "1880: http_should_keep_alive (const http_parser *parser)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1893: }",
          "1897: {",
          "1899: }",
          "",
          "[Removed Lines]",
          "1896: const char * http_method_str (enum http_method m)",
          "1898:   return method_strings[m];",
          "",
          "[Added Lines]",
          "1898: const char *",
          "1899: http_method_str (enum http_method m)",
          "1901:   return ELEM_AT(method_strings, m, \"<unknown>\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1922:   return http_strerror_tab[err].description;",
          "1923: }",
          "1925: int",
          "1926: http_parser_parse_url(const char *buf, size_t buflen, int is_connect,",
          "1927:                       struct http_parser_url *u)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928: static enum http_host_state",
          "1929: http_parse_host_char(enum http_host_state s, const char ch) {",
          "1930:   switch(s) {",
          "1931:     case s_http_userinfo:",
          "1932:     case s_http_userinfo_start:",
          "1933:       if (ch == '@') {",
          "1934:         return s_http_host_start;",
          "1935:       }",
          "1937:       if (IS_USERINFO_CHAR(ch)) {",
          "1938:         return s_http_userinfo;",
          "1939:       }",
          "1940:       break;",
          "1942:     case s_http_host_start:",
          "1943:       if (ch == '[') {",
          "1944:         return s_http_host_v6_start;",
          "1945:       }",
          "1947:       if (IS_HOST_CHAR(ch)) {",
          "1948:         return s_http_host;",
          "1949:       }",
          "1951:       break;",
          "1953:     case s_http_host:",
          "1954:       if (IS_HOST_CHAR(ch)) {",
          "1955:         return s_http_host;",
          "1956:       }",
          "1959:     case s_http_host_v6_end:",
          "1960:       if (ch == ':') {",
          "1961:         return s_http_host_port_start;",
          "1962:       }",
          "1964:       break;",
          "1966:     case s_http_host_v6:",
          "1967:       if (ch == ']') {",
          "1968:         return s_http_host_v6_end;",
          "1969:       }",
          "1972:     case s_http_host_v6_start:",
          "1973:       if (IS_HEX(ch) || ch == ':') {",
          "1974:         return s_http_host_v6;",
          "1975:       }",
          "1977:       break;",
          "1979:     case s_http_host_port:",
          "1980:     case s_http_host_port_start:",
          "1981:       if (IS_NUM(ch)) {",
          "1982:         return s_http_host_port;",
          "1983:       }",
          "1985:       break;",
          "1987:     default:",
          "1988:       break;",
          "1989:   }",
          "1990:   return s_http_host_dead;",
          "1991: }",
          "1993: static int",
          "1994: http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {",
          "1995:   enum http_host_state s;",
          "1997:   const char *p;",
          "1998:   size_t buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;",
          "2000:   u->field_data[UF_HOST].len = 0;",
          "2002:   s = found_at ? s_http_userinfo_start : s_http_host_start;",
          "2004:   for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {",
          "2005:     enum http_host_state new_s = http_parse_host_char(s, *p);",
          "2007:     if (new_s == s_http_host_dead) {",
          "2008:       return 1;",
          "2009:     }",
          "2011:     switch(new_s) {",
          "2012:       case s_http_host:",
          "2013:         if (s != s_http_host) {",
          "2014:           u->field_data[UF_HOST].off = p - buf;",
          "2015:         }",
          "2016:         u->field_data[UF_HOST].len++;",
          "2017:         break;",
          "2019:       case s_http_host_v6:",
          "2020:         if (s != s_http_host_v6) {",
          "2021:           u->field_data[UF_HOST].off = p - buf;",
          "2022:         }",
          "2023:         u->field_data[UF_HOST].len++;",
          "2024:         break;",
          "2026:       case s_http_host_port:",
          "2027:         if (s != s_http_host_port) {",
          "2028:           u->field_data[UF_PORT].off = p - buf;",
          "2029:           u->field_data[UF_PORT].len = 0;",
          "2030:           u->field_set |= (1 << UF_PORT);",
          "2031:         }",
          "2032:         u->field_data[UF_PORT].len++;",
          "2033:         break;",
          "2035:       case s_http_userinfo:",
          "2036:         if (s != s_http_userinfo) {",
          "2037:           u->field_data[UF_USERINFO].off = p - buf ;",
          "2038:           u->field_data[UF_USERINFO].len = 0;",
          "2039:           u->field_set |= (1 << UF_USERINFO);",
          "2040:         }",
          "2041:         u->field_data[UF_USERINFO].len++;",
          "2042:         break;",
          "2044:       default:",
          "2045:         break;",
          "2046:     }",
          "2047:     s = new_s;",
          "2048:   }",
          "2051:   switch (s) {",
          "2052:     case s_http_host_start:",
          "2053:     case s_http_host_v6_start:",
          "2054:     case s_http_host_v6:",
          "2055:     case s_http_host_port_start:",
          "2056:     case s_http_userinfo:",
          "2057:     case s_http_userinfo_start:",
          "2058:       return 1;",
          "2059:     default:",
          "2060:       break;",
          "2061:   }",
          "2063:   return 0;",
          "2064: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1929:   enum state s;",
          "1930:   const char *p;",
          "1931:   enum http_parser_url_fields uf, old_uf;",
          "1933:   u->port = u->field_set = 0;",
          "1935:   uf = old_uf = UF_MAX;",
          "1937:   for (p = buf; p < buf + buflen; p++) {",
          "",
          "[Removed Lines]",
          "1934:   s = is_connect ? s_req_host_start : s_req_spaces_before_url;",
          "",
          "[Added Lines]",
          "2073:   int found_at = 0;",
          "2076:   s = is_connect ? s_req_server_start : s_req_spaces_before_url;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1946:       case s_req_schema_slash:",
          "1947:       case s_req_schema_slash_slash:",
          "1952:       case s_req_query_string_start:",
          "1953:       case s_req_fragment_start:",
          "1954:         continue;",
          "",
          "[Removed Lines]",
          "1948:       case s_req_host_start:",
          "1949:       case s_req_host_v6_start:",
          "1950:       case s_req_host_v6_end:",
          "1951:       case s_req_port_start:",
          "",
          "[Added Lines]",
          "2090:       case s_req_server_start:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1957:         uf = UF_SCHEMA;",
          "1958:         break;",
          "1967:         break;",
          "1969:       case s_req_path:",
          "",
          "[Removed Lines]",
          "1960:       case s_req_host:",
          "1961:       case s_req_host_v6:",
          "1962:         uf = UF_HOST;",
          "1963:         break;",
          "1965:       case s_req_port:",
          "1966:         uf = UF_PORT;",
          "",
          "[Added Lines]",
          "2099:       case s_req_server_with_at:",
          "2100:         found_at = 1;",
          "2103:       case s_req_server:",
          "2104:         uf = UF_HOST;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1996:     old_uf = uf;",
          "1997:   }",
          "2002:   }",
          "2011:     return 1;",
          "2014:   }",
          "2016:   if (u->field_set & (1 << UF_PORT)) {",
          "",
          "[Removed Lines]",
          "2000:   if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {",
          "2001:     return 1;",
          "2005:   switch (s) {",
          "2006:   case s_req_host_v6_start:",
          "2007:   case s_req_host_v6:",
          "2008:   case s_req_host_v6_end:",
          "2009:   case s_req_host:",
          "2010:   case s_req_port_start:",
          "2012:   default:",
          "2013:     break;",
          "",
          "[Added Lines]",
          "2139:   if ((u->field_set & ((1 << UF_SCHEMA) | (1 << UF_HOST))) != 0) {",
          "2140:     if (http_parse_host(buf, u, found_at) != 0) {",
          "2141:       return 1;",
          "2142:     }",
          "2146:   if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {",
          "",
          "---------------"
        ],
        "deps/http_parser/http_parser.h||deps/http_parser/http_parser.h": [
          "File: deps/http_parser/http_parser.h -> deps/http_parser/http_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <sys/types.h>",
          "31: #if defined(_WIN32) && !defined(__MINGW32__) && (!defined(_MSC_VER) || _MSC_VER<1600)",
          "32: typedef __int8 int8_t;",
          "33: typedef unsigned __int8 uint8_t;",
          "34: typedef __int16 int16_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <BaseTsd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: typedef unsigned __int32 uint32_t;",
          "38: typedef __int64 int64_t;",
          "39: typedef unsigned __int64 uint64_t;",
          "43: #else",
          "44: #include <stdint.h>",
          "45: #endif",
          "",
          "[Removed Lines]",
          "41: typedef unsigned int size_t;",
          "42: typedef int ssize_t;",
          "",
          "[Added Lines]",
          "41: typedef SIZE_T size_t;",
          "42: typedef SSIZE_T ssize_t;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:   , UF_PATH             = 3",
          "257:   , UF_QUERY            = 4",
          "258:   , UF_FRAGMENT         = 5",
          "260:   };",
          "",
          "[Removed Lines]",
          "259:   , UF_MAX              = 6",
          "",
          "[Added Lines]",
          "259:   , UF_USERINFO         = 6",
          "260:   , UF_MAX              = 7",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299: const char *http_method_str(enum http_method m);",
          "",
          "[Removed Lines]",
          "296: int http_should_keep_alive(http_parser *parser);",
          "",
          "[Added Lines]",
          "297: int http_should_keep_alive(const http_parser *parser);",
          "",
          "---------------"
        ],
        "deps/http_parser/test.c||deps/http_parser/test.c": [
          "File: deps/http_parser/test.c -> deps/http_parser/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   enum http_parser_type type;",
          "45:   enum http_method method;",
          "46:   int status_code;",
          "47:   char request_url[MAX_ELEMENT_SIZE];",
          "48:   char body[MAX_ELEMENT_SIZE];",
          "49:   size_t body_size;",
          "50:   int num_headers;",
          "51:   enum { NONE=0, FIELD, VALUE } last_header_element;",
          "52:   char headers [MAX_HEADERS][2][MAX_ELEMENT_SIZE];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   char request_path[MAX_ELEMENT_SIZE];",
          "49:   char fragment[MAX_ELEMENT_SIZE];",
          "50:   char query_string[MAX_ELEMENT_SIZE];",
          "53:   const char *host;",
          "54:   const char *userinfo;",
          "55:   uint16_t port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: static struct message messages[5];",
          "69: static int num_messages;",
          "72: const struct message requests[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: static http_parser_settings *current_pause_parser;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   ,.http_major= 1",
          "84:   ,.http_minor= 1",
          "85:   ,.method= HTTP_GET",
          "86:   ,.request_url= \"/test\"",
          "87:   ,.num_headers= 3",
          "88:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   ,.query_string= \"\"",
          "94:   ,.fragment= \"\"",
          "95:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   ,.http_major= 1",
          "112:   ,.http_minor= 1",
          "113:   ,.method= HTTP_GET",
          "114:   ,.request_url= \"/favicon.ico\"",
          "115:   ,.num_headers= 8",
          "116:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:   ,.query_string= \"\"",
          "125:   ,.fragment= \"\"",
          "126:   ,.request_path= \"/favicon.ico\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:   ,.http_major= 1",
          "138:   ,.http_minor= 1",
          "139:   ,.method= HTTP_GET",
          "140:   ,.request_url= \"/dumbfuck\"",
          "141:   ,.num_headers= 1",
          "142:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:   ,.query_string= \"\"",
          "154:   ,.fragment= \"\"",
          "155:   ,.request_path= \"/dumbfuck\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:   ,.http_major= 1",
          "156:   ,.http_minor= 1",
          "157:   ,.method= HTTP_GET",
          "159:   ,.request_url= \"/forums/1/topics/2375?page=1#posts-17408\"",
          "160:   ,.num_headers= 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   ,.query_string= \"page=1\"",
          "175:   ,.fragment= \"posts-17408\"",
          "176:   ,.request_path= \"/forums/1/topics/2375\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:   ,.http_major= 1",
          "172:   ,.http_minor= 1",
          "173:   ,.method= HTTP_GET",
          "174:   ,.request_url= \"/get_no_headers_no_body/world\"",
          "175:   ,.num_headers= 0",
          "176:   ,.body= \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   ,.query_string= \"\"",
          "194:   ,.fragment= \"\"",
          "195:   ,.request_path= \"/get_no_headers_no_body/world\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:   ,.http_major= 1",
          "188:   ,.http_minor= 1",
          "189:   ,.method= HTTP_GET",
          "190:   ,.request_url= \"/get_one_header_no_body\"",
          "191:   ,.num_headers= 1",
          "192:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:   ,.query_string= \"\"",
          "213:   ,.fragment= \"\"",
          "214:   ,.request_path= \"/get_one_header_no_body\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:   ,.http_major= 1",
          "208:   ,.http_minor= 0",
          "209:   ,.method= HTTP_GET",
          "210:   ,.request_url= \"/get_funky_content_length_body_hello\"",
          "211:   ,.num_headers= 1",
          "212:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:   ,.query_string= \"\"",
          "236:   ,.fragment= \"\"",
          "237:   ,.request_path= \"/get_funky_content_length_body_hello\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "229:   ,.http_major= 1",
          "230:   ,.http_minor= 1",
          "231:   ,.method= HTTP_POST",
          "232:   ,.request_url= \"/post_identity_body_world?q=search#hey\"",
          "233:   ,.num_headers= 3",
          "234:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:   ,.query_string= \"q=search\"",
          "261:   ,.fragment= \"hey\"",
          "262:   ,.request_path= \"/post_identity_body_world\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "253:   ,.http_major= 1",
          "254:   ,.http_minor= 1",
          "255:   ,.method= HTTP_POST",
          "256:   ,.request_url= \"/post_chunked_all_your_base\"",
          "257:   ,.num_headers= 1",
          "258:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:   ,.query_string= \"\"",
          "288:   ,.fragment= \"\"",
          "289:   ,.request_path= \"/post_chunked_all_your_base\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "276:   ,.http_major= 1",
          "277:   ,.http_minor= 1",
          "278:   ,.method= HTTP_POST",
          "279:   ,.request_url= \"/two_chunks_mult_zero_end\"",
          "280:   ,.num_headers= 1",
          "281:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:   ,.query_string= \"\"",
          "314:   ,.fragment= \"\"",
          "315:   ,.request_path= \"/two_chunks_mult_zero_end\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "301:   ,.http_major= 1",
          "302:   ,.http_minor= 1",
          "303:   ,.method= HTTP_POST",
          "304:   ,.request_url= \"/chunked_w_trailing_headers\"",
          "305:   ,.num_headers= 3",
          "306:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:   ,.query_string= \"\"",
          "342:   ,.fragment= \"\"",
          "343:   ,.request_path= \"/chunked_w_trailing_headers\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "326:   ,.http_major= 1",
          "327:   ,.http_minor= 1",
          "328:   ,.method= HTTP_POST",
          "329:   ,.request_url= \"/chunked_w_bullshit_after_length\"",
          "330:   ,.num_headers= 1",
          "331:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:   ,.query_string= \"\"",
          "370:   ,.fragment= \"\"",
          "371:   ,.request_path= \"/chunked_w_bullshit_after_length\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "343:   ,.http_major= 1",
          "344:   ,.http_minor= 1",
          "345:   ,.method= HTTP_GET",
          "346:   ,.request_url= \"/with_\\\"stupid\\\"_quotes?foo=\\\"bar\\\"\"",
          "347:   ,.num_headers= 0",
          "348:   ,.headers= { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:   ,.query_string= \"foo=\\\"bar\\\"\"",
          "390:   ,.fragment= \"\"",
          "391:   ,.request_path= \"/with_\\\"stupid\\\"_quotes\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "366:   ,.http_major= 1",
          "367:   ,.http_minor= 0",
          "368:   ,.method= HTTP_GET",
          "369:   ,.request_url= \"/test\"",
          "370:   ,.num_headers= 3",
          "371:   ,.headers= { { \"Host\", \"0.0.0.0:5000\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:   ,.query_string= \"\"",
          "416:   ,.fragment= \"\"",
          "417:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "386:   ,.http_major= 1",
          "387:   ,.http_minor= 1",
          "388:   ,.method= HTTP_GET",
          "389:   ,.request_url= \"/test.cgi?foo=bar?baz\"",
          "390:   ,.num_headers= 0",
          "391:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   ,.query_string= \"foo=bar?baz\"",
          "439:   ,.fragment= \"\"",
          "440:   ,.request_path= \"/test.cgi\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "404:   ,.http_major= 1",
          "405:   ,.http_minor= 1",
          "406:   ,.method= HTTP_GET",
          "407:   ,.request_url= \"/test\"",
          "408:   ,.num_headers= 0",
          "409:   ,.headers= { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:   ,.query_string= \"\"",
          "460:   ,.fragment= \"\"",
          "461:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "428:   ,.http_major= 1",
          "429:   ,.http_minor= 1",
          "430:   ,.method= HTTP_GET",
          "431:   ,.request_url= \"/demo\"",
          "432:   ,.num_headers= 7",
          "433:   ,.upgrade=\"Hot diggity dogg\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:   ,.query_string= \"\"",
          "487:   ,.fragment= \"\"",
          "488:   ,.request_path= \"/demo\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "456:   ,.http_major= 1",
          "457:   ,.http_minor= 0",
          "458:   ,.method= HTTP_CONNECT",
          "459:   ,.request_url= \"0-home0.netscape.com:443\"",
          "460:   ,.num_headers= 2",
          "461:   ,.upgrade=\"some data\\r\\nand yet even more data\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:   ,.query_string= \"\"",
          "518:   ,.fragment= \"\"",
          "519:   ,.request_path= \"\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "475:   ,.http_major= 1",
          "476:   ,.http_minor= 1",
          "477:   ,.method= HTTP_REPORT",
          "478:   ,.request_url= \"/test\"",
          "479:   ,.num_headers= 0",
          "480:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:   ,.query_string= \"\"",
          "540:   ,.fragment= \"\"",
          "541:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "491:   ,.http_major= 0",
          "492:   ,.http_minor= 9",
          "493:   ,.method= HTTP_GET",
          "494:   ,.request_url= \"/\"",
          "495:   ,.num_headers= 0",
          "496:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:   ,.query_string= \"\"",
          "559:   ,.fragment= \"\"",
          "560:   ,.request_path= \"/\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "510:   ,.http_major= 1",
          "511:   ,.http_minor= 1",
          "512:   ,.method= HTTP_MSEARCH",
          "513:   ,.request_url= \"*\"",
          "514:   ,.num_headers= 3",
          "515:   ,.headers= { { \"HOST\", \"239.255.255.250:1900\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:   ,.query_string= \"\"",
          "581:   ,.fragment= \"\"",
          "582:   ,.request_path= \"*\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "519:   ,.body= \"\"",
          "520:   }",
          "523: , {.name= \"line folding in header value\"",
          "524:   ,.type= HTTP_REQUEST",
          "525:   ,.raw= \"GET / HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "522: #define LINE_FOLDING_IN_HEADER 20",
          "",
          "[Added Lines]",
          "592: #define LINE_FOLDING_IN_HEADER 21",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "536:   ,.http_major= 1",
          "537:   ,.http_minor= 1",
          "538:   ,.method= HTTP_GET",
          "539:   ,.request_url= \"/\"",
          "540:   ,.num_headers= 2",
          "541:   ,.headers= { { \"Line1\", \"abcdefghijklmno qrs\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609:   ,.query_string= \"\"",
          "610:   ,.fragment= \"\"",
          "611:   ,.request_path= \"/\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "545:   }",
          "549: , {.name= \"host terminated by a query string\"",
          "550:   ,.type= HTTP_REQUEST",
          "551:   ,.raw= \"GET http://hypnotoad.org?hail=all HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "548: #define QUERY_TERMINATED_HOST 21",
          "",
          "[Added Lines]",
          "621: #define QUERY_TERMINATED_HOST 22",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "555:   ,.http_major= 1",
          "556:   ,.http_minor= 1",
          "557:   ,.method= HTTP_GET",
          "558:   ,.request_url= \"http://hypnotoad.org?hail=all\"",
          "559:   ,.num_headers= 0",
          "560:   ,.headers= { }",
          "561:   ,.body= \"\"",
          "562:   }",
          "565: , {.name= \"host:port terminated by a query string\"",
          "566:   ,.type= HTTP_REQUEST",
          "567:   ,.raw= \"GET http://hypnotoad.org:1234?hail=all HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "564: #define QUERY_TERMINATED_HOSTPORT 22",
          "",
          "[Added Lines]",
          "631:   ,.query_string= \"hail=all\"",
          "632:   ,.fragment= \"\"",
          "633:   ,.request_path= \"\"",
          "635:   ,.host= \"hypnotoad.org\"",
          "641: #define QUERY_TERMINATED_HOSTPORT 23",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "571:   ,.http_major= 1",
          "572:   ,.http_minor= 1",
          "573:   ,.method= HTTP_GET",
          "574:   ,.request_url= \"http://hypnotoad.org:1234?hail=all\"",
          "575:   ,.num_headers= 0",
          "576:   ,.headers= { }",
          "577:   ,.body= \"\"",
          "578:   }",
          "581: , {.name= \"host:port terminated by a space\"",
          "582:   ,.type= HTTP_REQUEST",
          "583:   ,.raw= \"GET http://hypnotoad.org:1234 HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "580: #define SPACE_TERMINATED_HOSTPORT 23",
          "",
          "[Added Lines]",
          "651:   ,.query_string= \"hail=all\"",
          "652:   ,.fragment= \"\"",
          "653:   ,.request_path= \"\"",
          "655:   ,.host= \"hypnotoad.org\"",
          "656:   ,.port= 1234",
          "662: #define SPACE_TERMINATED_HOSTPORT 24",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "587:   ,.http_major= 1",
          "588:   ,.http_minor= 1",
          "589:   ,.method= HTTP_GET",
          "590:   ,.request_url= \"http://hypnotoad.org:1234\"",
          "591:   ,.num_headers= 0",
          "592:   ,.headers= { }",
          "593:   ,.body= \"\"",
          "594:   }",
          "596: #if !HTTP_PARSER_STRICT",
          "598: , {.name= \"utf-8 path request\"",
          "599:   ,.type= HTTP_REQUEST",
          "600:   ,.raw= \"GET /\u03b4\u00b6/\u03b4t/pope?q=1#narf HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "597: #define UTF8_PATH_REQ 24",
          "",
          "[Added Lines]",
          "672:   ,.query_string= \"\"",
          "673:   ,.fragment= \"\"",
          "674:   ,.request_path= \"\"",
          "676:   ,.host= \"hypnotoad.org\"",
          "677:   ,.port= 1234",
          "683: #define PATCH_REQ 25",
          "684: , {.name = \"PATCH request\"",
          "685:   ,.type= HTTP_REQUEST",
          "686:   ,.raw= \"PATCH /file.txt HTTP/1.1\\r\\n\"",
          "687:          \"Host: www.example.com\\r\\n\"",
          "688:          \"Content-Type: application/example\\r\\n\"",
          "689:          \"If-Match: \\\"e0023aa4e\\\"\\r\\n\"",
          "690:          \"Content-Length: 10\\r\\n\"",
          "691:          \"\\r\\n\"",
          "692:          \"cccccccccc\"",
          "693:   ,.should_keep_alive= TRUE",
          "694:   ,.message_complete_on_eof= FALSE",
          "695:   ,.http_major= 1",
          "696:   ,.http_minor= 1",
          "697:   ,.method= HTTP_PATCH",
          "698:   ,.query_string= \"\"",
          "699:   ,.fragment= \"\"",
          "700:   ,.request_path= \"/file.txt\"",
          "701:   ,.request_url= \"/file.txt\"",
          "702:   ,.num_headers= 4",
          "703:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "704:              , { \"Content-Type\", \"application/example\" }",
          "705:              , { \"If-Match\", \"\\\"e0023aa4e\\\"\" }",
          "706:              , { \"Content-Length\", \"10\" }",
          "707:              }",
          "708:   ,.body= \"cccccccccc\"",
          "709:   }",
          "711: #define CONNECT_CAPS_REQUEST 26",
          "712: , {.name = \"connect caps request\"",
          "713:   ,.type= HTTP_REQUEST",
          "714:   ,.raw= \"CONNECT HOME0.NETSCAPE.COM:443 HTTP/1.0\\r\\n\"",
          "715:          \"User-agent: Mozilla/1.1N\\r\\n\"",
          "716:          \"Proxy-authorization: basic aGVsbG86d29ybGQ=\\r\\n\"",
          "717:          \"\\r\\n\"",
          "718:   ,.should_keep_alive= FALSE",
          "719:   ,.message_complete_on_eof= FALSE",
          "720:   ,.http_major= 1",
          "721:   ,.http_minor= 0",
          "722:   ,.method= HTTP_CONNECT",
          "723:   ,.query_string= \"\"",
          "724:   ,.fragment= \"\"",
          "725:   ,.request_path= \"\"",
          "726:   ,.request_url= \"HOME0.NETSCAPE.COM:443\"",
          "727:   ,.num_headers= 2",
          "728:   ,.upgrade=\"\"",
          "729:   ,.headers= { { \"User-agent\", \"Mozilla/1.1N\" }",
          "730:              , { \"Proxy-authorization\", \"basic aGVsbG86d29ybGQ=\" }",
          "731:              }",
          "732:   ,.body= \"\"",
          "733:   }",
          "736: #define UTF8_PATH_REQ 27",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "605:   ,.http_major= 1",
          "606:   ,.http_minor= 1",
          "607:   ,.method= HTTP_GET",
          "608:   ,.request_url= \"/\u03b4\u00b6/\u03b4t/pope?q=1#narf\"",
          "609:   ,.num_headers= 1",
          "610:   ,.headers= { {\"Host\", \"github.com\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   ,.query_string= \"q=1\"",
          "748:   ,.fragment= \"narf\"",
          "749:   ,.request_path= \"/\u03b4\u00b6/\u03b4t/pope\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "612:   ,.body= \"\"",
          "613:   }",
          "616: , {.name = \"hostname underscore\"",
          "617:   ,.type= HTTP_REQUEST",
          "618:   ,.raw= \"CONNECT home_0.netscape.com:443 HTTP/1.0\\r\\n\"",
          "",
          "[Removed Lines]",
          "615: #define HOSTNAME_UNDERSCORE 25",
          "",
          "[Added Lines]",
          "757: #define HOSTNAME_UNDERSCORE 28",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "624:   ,.http_major= 1",
          "625:   ,.http_minor= 0",
          "626:   ,.method= HTTP_CONNECT",
          "627:   ,.request_url= \"home_0.netscape.com:443\"",
          "628:   ,.num_headers= 2",
          "629:   ,.upgrade=\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:   ,.query_string= \"\"",
          "770:   ,.fragment= \"\"",
          "771:   ,.request_path= \"\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "634:   }",
          "641:          \"Host: www.example.com\\r\\n\"",
          "645:          \"\\r\\n\"",
          "647:   ,.should_keep_alive= TRUE",
          "648:   ,.message_complete_on_eof= FALSE",
          "649:   ,.http_major= 1",
          "650:   ,.http_minor= 1",
          "653:   ,.num_headers= 4",
          "654:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "658:              }",
          "660:   }",
          "664:   ,.type= HTTP_REQUEST",
          "668:          \"\\r\\n\"",
          "670:   ,.message_complete_on_eof= FALSE",
          "671:   ,.http_major= 1",
          "680:   ,.body= \"\"",
          "681:   }",
          "684: };",
          "",
          "[Removed Lines]",
          "637: #define PATCH_REQ 26",
          "638: , {.name = \"PATCH request\"",
          "639:   ,.type= HTTP_REQUEST",
          "640:   ,.raw= \"PATCH /file.txt HTTP/1.1\\r\\n\"",
          "642:          \"Content-Type: application/example\\r\\n\"",
          "643:          \"If-Match: \\\"e0023aa4e\\\"\\r\\n\"",
          "644:          \"Content-Length: 10\\r\\n\"",
          "646:          \"cccccccccc\"",
          "651:   ,.method= HTTP_PATCH",
          "652:   ,.request_url= \"/file.txt\"",
          "655:              , { \"Content-Type\", \"application/example\" }",
          "656:              , { \"If-Match\", \"\\\"e0023aa4e\\\"\" }",
          "657:              , { \"Content-Length\", \"10\" }",
          "659:   ,.body= \"cccccccccc\"",
          "662: #define CONNECT_CAPS_REQUEST 27",
          "663: , {.name = \"connect caps request\"",
          "665:   ,.raw= \"CONNECT HOME0.NETSCAPE.COM:443 HTTP/1.0\\r\\n\"",
          "666:          \"User-agent: Mozilla/1.1N\\r\\n\"",
          "667:          \"Proxy-authorization: basic aGVsbG86d29ybGQ=\\r\\n\"",
          "669:   ,.should_keep_alive= FALSE",
          "672:   ,.http_minor= 0",
          "673:   ,.method= HTTP_CONNECT",
          "674:   ,.request_url= \"HOME0.NETSCAPE.COM:443\"",
          "675:   ,.num_headers= 2",
          "676:   ,.upgrade=\"\"",
          "677:   ,.headers= { { \"User-agent\", \"Mozilla/1.1N\" }",
          "678:              , { \"Proxy-authorization\", \"basic aGVsbG86d29ybGQ=\" }",
          "679:              }",
          "",
          "[Added Lines]",
          "783: #define EAT_TRAILING_CRLF_NO_CONNECTION_CLOSE 29",
          "784: , {.name = \"eat CRLF between requests, no \\\"Connection: close\\\" header\"",
          "785:   ,.raw= \"POST / HTTP/1.1\\r\\n\"",
          "787:          \"Content-Type: application/x-www-form-urlencoded\\r\\n\"",
          "788:          \"Content-Length: 4\\r\\n\"",
          "795:   ,.method= HTTP_POST",
          "796:   ,.query_string= \"\"",
          "797:   ,.fragment= \"\"",
          "798:   ,.request_path= \"/\"",
          "799:   ,.request_url= \"/\"",
          "800:   ,.num_headers= 3",
          "801:   ,.upgrade= 0",
          "802:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "803:              , { \"Content-Type\", \"application/x-www-form-urlencoded\" }",
          "804:              , { \"Content-Length\", \"4\" }",
          "805:              }",
          "806:   ,.body= \"q=42\"",
          "807:   }",
          "810: #define EAT_TRAILING_CRLF_WITH_CONNECTION_CLOSE 30",
          "811: , {.name = \"eat CRLF between requests even if \\\"Connection: close\\\" is set\"",
          "812:   ,.raw= \"POST / HTTP/1.1\\r\\n\"",
          "813:          \"Host: www.example.com\\r\\n\"",
          "814:          \"Content-Type: application/x-www-form-urlencoded\\r\\n\"",
          "815:          \"Content-Length: 4\\r\\n\"",
          "816:          \"Connection: close\\r\\n\"",
          "817:          \"\\r\\n\"",
          "819:   ,.should_keep_alive= FALSE",
          "821:   ,.http_major= 1",
          "822:   ,.http_minor= 1",
          "823:   ,.method= HTTP_POST",
          "824:   ,.query_string= \"\"",
          "825:   ,.fragment= \"\"",
          "826:   ,.request_path= \"/\"",
          "827:   ,.request_url= \"/\"",
          "829:   ,.upgrade= 0",
          "831:              , { \"Content-Type\", \"application/x-www-form-urlencoded\" }",
          "832:              , { \"Content-Length\", \"4\" }",
          "833:              , { \"Connection\", \"close\" }",
          "835:   ,.body= \"q=42\"",
          "838: #define PURGE_REQ 31",
          "839: , {.name = \"PURGE request\"",
          "841:   ,.raw= \"PURGE /file.txt HTTP/1.1\\r\\n\"",
          "842:          \"Host: www.example.com\\r\\n\"",
          "844:   ,.should_keep_alive= TRUE",
          "847:   ,.http_minor= 1",
          "848:   ,.method= HTTP_PURGE",
          "849:   ,.query_string= \"\"",
          "850:   ,.fragment= \"\"",
          "851:   ,.request_path= \"/file.txt\"",
          "852:   ,.request_url= \"/file.txt\"",
          "853:   ,.num_headers= 1",
          "854:   ,.headers= { { \"Host\", \"www.example.com\" } }",
          "855:   ,.body= \"\"",
          "856:   }",
          "858: #define SEARCH_REQ 32",
          "859: , {.name = \"SEARCH request\"",
          "860:   ,.type= HTTP_REQUEST",
          "861:   ,.raw= \"SEARCH / HTTP/1.1\\r\\n\"",
          "862:          \"Host: www.example.com\\r\\n\"",
          "863:          \"\\r\\n\"",
          "864:   ,.should_keep_alive= TRUE",
          "865:   ,.message_complete_on_eof= FALSE",
          "866:   ,.http_major= 1",
          "867:   ,.http_minor= 1",
          "868:   ,.method= HTTP_SEARCH",
          "869:   ,.query_string= \"\"",
          "870:   ,.fragment= \"\"",
          "871:   ,.request_path= \"/\"",
          "872:   ,.request_url= \"/\"",
          "873:   ,.num_headers= 1",
          "874:   ,.headers= { { \"Host\", \"www.example.com\" } }",
          "875:   ,.body= \"\"",
          "876:   }",
          "878: #define PROXY_WITH_BASIC_AUTH 33",
          "879: , {.name= \"host:port and basic_auth\"",
          "880:   ,.type= HTTP_REQUEST",
          "881:   ,.raw= \"GET http://a%12:b!&*$@hypnotoad.org:1234/toto HTTP/1.1\\r\\n\"",
          "882:          \"\\r\\n\"",
          "883:   ,.should_keep_alive= TRUE",
          "884:   ,.message_complete_on_eof= FALSE",
          "885:   ,.http_major= 1",
          "886:   ,.http_minor= 1",
          "887:   ,.method= HTTP_GET",
          "888:   ,.fragment= \"\"",
          "889:   ,.request_path= \"/toto\"",
          "890:   ,.request_url= \"http://a%12:b!&*$@hypnotoad.org:1234/toto\"",
          "891:   ,.host= \"hypnotoad.org\"",
          "892:   ,.userinfo= \"a%12:b!&*$\"",
          "893:   ,.port= 1234",
          "894:   ,.num_headers= 0",
          "895:   ,.headers= { }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "780: , {.name= \"404 no headers no body\"",
          "781:   ,.type= HTTP_RESPONSE",
          "782:   ,.raw= \"HTTP/1.1 404 Not Found\\r\\n\\r\\n\"",
          "785:   ,.http_major= 1",
          "786:   ,.http_minor= 1",
          "787:   ,.status_code= 404",
          "",
          "[Removed Lines]",
          "783:   ,.should_keep_alive= TRUE",
          "784:   ,.message_complete_on_eof= FALSE",
          "",
          "[Added Lines]",
          "1000:   ,.should_keep_alive= FALSE",
          "1001:   ,.message_complete_on_eof= TRUE",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "795: , {.name= \"301 no response phrase\"",
          "796:   ,.type= HTTP_RESPONSE",
          "797:   ,.raw= \"HTTP/1.1 301\\r\\n\\r\\n\"",
          "800:   ,.http_major= 1",
          "801:   ,.http_minor= 1",
          "802:   ,.status_code= 301",
          "",
          "[Removed Lines]",
          "798:   ,.should_keep_alive = TRUE",
          "799:   ,.message_complete_on_eof= FALSE",
          "",
          "[Added Lines]",
          "1015:   ,.should_keep_alive = FALSE",
          "1016:   ,.message_complete_on_eof= TRUE",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "945:   ,.body= \"\"",
          "946:   }",
          "983: , {.name= \"field underscore\"",
          "984:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "948: #define SPACE_IN_FIELD_RES 9",
          "950: , {.name= \"field space\"",
          "951:   ,.type= HTTP_RESPONSE",
          "952:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "953:          \"Server: Microsoft-IIS/6.0\\r\\n\"",
          "954:          \"X-Powered-By: ASP.NET\\r\\n\"",
          "956:          \"Content-Type: text/xml\\r\\n\"",
          "957:          \"Content-Length: 16\\r\\n\"",
          "958:          \"Date: Fri, 23 Jul 2010 18:45:38 GMT\\r\\n\"",
          "959:          \"Connection: keep-alive\\r\\n\"",
          "960:          \"\\r\\n\"",
          "962:   ,.should_keep_alive= TRUE",
          "963:   ,.message_complete_on_eof= FALSE",
          "964:   ,.http_major= 1",
          "965:   ,.http_minor= 1",
          "966:   ,.status_code= 200",
          "967:   ,.num_headers= 7",
          "968:   ,.headers=",
          "969:     { { \"Server\",  \"Microsoft-IIS/6.0\" }",
          "970:     , { \"X-Powered-By\", \"ASP.NET\" }",
          "971:     , { \"en-US Content-Type\", \"text/xml\" }",
          "972:     , { \"Content-Type\", \"text/xml\" }",
          "973:     , { \"Content-Length\", \"16\" }",
          "974:     , { \"Date\", \"Fri, 23 Jul 2010 18:45:38 GMT\" }",
          "975:     , { \"Connection\", \"keep-alive\" }",
          "976:     }",
          "977:   ,.body= \"<xml>hello</xml>\"",
          "978:   }",
          "981: #define RES_FIELD_UNDERSCORE 10",
          "",
          "[Added Lines]",
          "1165: #define RES_FIELD_UNDERSCORE 9",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1018:   ,.body= \"\"",
          "1019:   }",
          "1023: , {.name= \"non-ASCII in status line\"",
          "1024:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "1021: #define NON_ASCII_IN_STATUS_LINE 11",
          "",
          "[Added Lines]",
          "1205: #define NON_ASCII_IN_STATUS_LINE 10",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1041:   ,.body= \"\"",
          "1042:   }",
          "1046: , {.name= \"http version 0.9\"",
          "1047:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "1044: #define HTTP_VERSION_0_9 12",
          "",
          "[Added Lines]",
          "1228: #define HTTP_VERSION_0_9 11",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1054:   ,.status_code= 200",
          "1055:   ,.num_headers= 0",
          "1056:   ,.headers=",
          "1059:   }",
          "1062: };",
          "1064: int",
          "",
          "[Removed Lines]",
          "1057:     {}",
          "1058:   ,.body= \"\"",
          "",
          "[Added Lines]",
          "1241:     {}",
          "1242:   ,.body= \"\"",
          "1243:   }",
          "1245: #define NO_CONTENT_LENGTH_NO_TRANSFER_ENCODING_RESPONSE 12",
          "1250: , {.name= \"neither content-length nor transfer-encoding response\"",
          "1251:   ,.type= HTTP_RESPONSE",
          "1252:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1253:          \"Content-Type: text/plain\\r\\n\"",
          "1254:          \"\\r\\n\"",
          "1255:          \"hello world\"",
          "1256:   ,.should_keep_alive= FALSE",
          "1257:   ,.message_complete_on_eof= TRUE",
          "1258:   ,.http_major= 1",
          "1259:   ,.http_minor= 1",
          "1260:   ,.status_code= 200",
          "1261:   ,.num_headers= 1",
          "1262:   ,.headers=",
          "1263:     { { \"Content-Type\", \"text/plain\" }",
          "1264:     }",
          "1265:   ,.body= \"hello world\"",
          "1266:   }",
          "1268: #define NO_BODY_HTTP10_KA_200 13",
          "1269: , {.name= \"HTTP/1.0 with keep-alive and EOF-terminated 200 status\"",
          "1270:   ,.type= HTTP_RESPONSE",
          "1271:   ,.raw= \"HTTP/1.0 200 OK\\r\\n\"",
          "1272:          \"Connection: keep-alive\\r\\n\"",
          "1273:          \"\\r\\n\"",
          "1274:   ,.should_keep_alive= FALSE",
          "1275:   ,.message_complete_on_eof= TRUE",
          "1276:   ,.http_major= 1",
          "1277:   ,.http_minor= 0",
          "1278:   ,.status_code= 200",
          "1279:   ,.num_headers= 1",
          "1280:   ,.headers=",
          "1281:     { { \"Connection\", \"keep-alive\" }",
          "1282:     }",
          "1283:   ,.body_size= 0",
          "1284:   ,.body= \"\"",
          "1285:   }",
          "1287: #define NO_BODY_HTTP10_KA_204 14",
          "1288: , {.name= \"HTTP/1.0 with keep-alive and a 204 status\"",
          "1289:   ,.type= HTTP_RESPONSE",
          "1290:   ,.raw= \"HTTP/1.0 204 No content\\r\\n\"",
          "1291:          \"Connection: keep-alive\\r\\n\"",
          "1292:          \"\\r\\n\"",
          "1293:   ,.should_keep_alive= TRUE",
          "1294:   ,.message_complete_on_eof= FALSE",
          "1295:   ,.http_major= 1",
          "1296:   ,.http_minor= 0",
          "1297:   ,.status_code= 204",
          "1298:   ,.num_headers= 1",
          "1299:   ,.headers=",
          "1300:     { { \"Connection\", \"keep-alive\" }",
          "1301:     }",
          "1302:   ,.body_size= 0",
          "1303:   ,.body= \"\"",
          "1304:   }",
          "1306: #define NO_BODY_HTTP11_KA_200 15",
          "1307: , {.name= \"HTTP/1.1 with an EOF-terminated 200 status\"",
          "1308:   ,.type= HTTP_RESPONSE",
          "1309:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1310:          \"\\r\\n\"",
          "1311:   ,.should_keep_alive= FALSE",
          "1312:   ,.message_complete_on_eof= TRUE",
          "1313:   ,.http_major= 1",
          "1314:   ,.http_minor= 1",
          "1315:   ,.status_code= 200",
          "1316:   ,.num_headers= 0",
          "1317:   ,.headers={}",
          "1318:   ,.body_size= 0",
          "1319:   ,.body= \"\"",
          "1320:   }",
          "1322: #define NO_BODY_HTTP11_KA_204 16",
          "1323: , {.name= \"HTTP/1.1 with a 204 status\"",
          "1324:   ,.type= HTTP_RESPONSE",
          "1325:   ,.raw= \"HTTP/1.1 204 No content\\r\\n\"",
          "1326:          \"\\r\\n\"",
          "1327:   ,.should_keep_alive= TRUE",
          "1328:   ,.message_complete_on_eof= FALSE",
          "1329:   ,.http_major= 1",
          "1330:   ,.http_minor= 1",
          "1331:   ,.status_code= 204",
          "1332:   ,.num_headers= 0",
          "1333:   ,.headers={}",
          "1334:   ,.body_size= 0",
          "1335:   ,.body= \"\"",
          "1336:   }",
          "1338: #define NO_BODY_HTTP11_NOKA_204 17",
          "1339: , {.name= \"HTTP/1.1 with a 204 status and keep-alive disabled\"",
          "1340:   ,.type= HTTP_RESPONSE",
          "1341:   ,.raw= \"HTTP/1.1 204 No content\\r\\n\"",
          "1342:          \"Connection: close\\r\\n\"",
          "1343:          \"\\r\\n\"",
          "1344:   ,.should_keep_alive= FALSE",
          "1345:   ,.message_complete_on_eof= FALSE",
          "1346:   ,.http_major= 1",
          "1347:   ,.http_minor= 1",
          "1348:   ,.status_code= 204",
          "1349:   ,.num_headers= 1",
          "1350:   ,.headers=",
          "1351:     { { \"Connection\", \"close\" }",
          "1352:     }",
          "1353:   ,.body_size= 0",
          "1354:   ,.body= \"\"",
          "1355:   }",
          "1357: #define NO_BODY_HTTP11_KA_CHUNKED_200 18",
          "1358: , {.name= \"HTTP/1.1 with chunked endocing and a 200 response\"",
          "1359:   ,.type= HTTP_RESPONSE",
          "1360:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1361:          \"Transfer-Encoding: chunked\\r\\n\"",
          "1362:          \"\\r\\n\"",
          "1363:          \"0\\r\\n\"",
          "1364:          \"\\r\\n\"",
          "1365:   ,.should_keep_alive= TRUE",
          "1366:   ,.message_complete_on_eof= FALSE",
          "1367:   ,.http_major= 1",
          "1368:   ,.http_minor= 1",
          "1369:   ,.status_code= 200",
          "1370:   ,.num_headers= 1",
          "1371:   ,.headers=",
          "1372:     { { \"Transfer-Encoding\", \"chunked\" }",
          "1373:     }",
          "1374:   ,.body_size= 0",
          "1375:   ,.body= \"\"",
          "1376:   }",
          "1378: #if !HTTP_PARSER_STRICT",
          "1379: #define SPACE_IN_FIELD_RES 19",
          "1381: , {.name= \"field space\"",
          "1382:   ,.type= HTTP_RESPONSE",
          "1383:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1384:          \"Server: Microsoft-IIS/6.0\\r\\n\"",
          "1385:          \"X-Powered-By: ASP.NET\\r\\n\"",
          "1387:          \"Content-Type: text/xml\\r\\n\"",
          "1388:          \"Content-Length: 16\\r\\n\"",
          "1389:          \"Date: Fri, 23 Jul 2010 18:45:38 GMT\\r\\n\"",
          "1390:          \"Connection: keep-alive\\r\\n\"",
          "1391:          \"\\r\\n\"",
          "1393:   ,.should_keep_alive= TRUE",
          "1394:   ,.message_complete_on_eof= FALSE",
          "1395:   ,.http_major= 1",
          "1396:   ,.http_minor= 1",
          "1397:   ,.status_code= 200",
          "1398:   ,.num_headers= 7",
          "1399:   ,.headers=",
          "1400:     { { \"Server\",  \"Microsoft-IIS/6.0\" }",
          "1401:     , { \"X-Powered-By\", \"ASP.NET\" }",
          "1402:     , { \"en-US Content-Type\", \"text/xml\" }",
          "1403:     , { \"Content-Type\", \"text/xml\" }",
          "1404:     , { \"Content-Length\", \"16\" }",
          "1405:     , { \"Date\", \"Fri, 23 Jul 2010 18:45:38 GMT\" }",
          "1406:     , { \"Connection\", \"keep-alive\" }",
          "1407:     }",
          "1408:   ,.body= \"<xml>hello</xml>\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1148:                     \"value in both on_message_complete and on_headers_complete \"",
          "1149:                     \"but it doesn't! ***\\n\\n\");",
          "1150:     assert(0);",
          "1152:   }",
          "1153:   messages[num_messages].message_complete_cb_called = TRUE;",
          "",
          "[Removed Lines]",
          "1151:     exit(1);",
          "",
          "[Added Lines]",
          "1502:     abort();",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1158:   return 0;",
          "1159: }",
          "1161: static http_parser_settings settings =",
          "1162:   {.on_message_begin = message_begin_cb",
          "1163:   ,.on_header_field = header_field_cb",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1514: int",
          "1515: dontcall_message_begin_cb (http_parser *p)",
          "1516: {",
          "1517:   if (p) { } // gcc",
          "1518:   fprintf(stderr, \"\\n\\n*** on_message_begin() called on paused parser ***\\n\\n\");",
          "1519:   abort();",
          "1520: }",
          "1522: int",
          "1523: dontcall_header_field_cb (http_parser *p, const char *buf, size_t len)",
          "1524: {",
          "1525:   if (p || buf || len) { } // gcc",
          "1526:   fprintf(stderr, \"\\n\\n*** on_header_field() called on paused parser ***\\n\\n\");",
          "1527:   abort();",
          "1528: }",
          "1530: int",
          "1531: dontcall_header_value_cb (http_parser *p, const char *buf, size_t len)",
          "1532: {",
          "1533:   if (p || buf || len) { } // gcc",
          "1534:   fprintf(stderr, \"\\n\\n*** on_header_value() called on paused parser ***\\n\\n\");",
          "1535:   abort();",
          "1536: }",
          "1538: int",
          "1539: dontcall_request_url_cb (http_parser *p, const char *buf, size_t len)",
          "1540: {",
          "1541:   if (p || buf || len) { } // gcc",
          "1542:   fprintf(stderr, \"\\n\\n*** on_request_url() called on paused parser ***\\n\\n\");",
          "1543:   abort();",
          "1544: }",
          "1546: int",
          "1547: dontcall_body_cb (http_parser *p, const char *buf, size_t len)",
          "1548: {",
          "1549:   if (p || buf || len) { } // gcc",
          "1550:   fprintf(stderr, \"\\n\\n*** on_body_cb() called on paused parser ***\\n\\n\");",
          "1551:   abort();",
          "1552: }",
          "1554: int",
          "1555: dontcall_headers_complete_cb (http_parser *p)",
          "1556: {",
          "1557:   if (p) { } // gcc",
          "1558:   fprintf(stderr, \"\\n\\n*** on_headers_complete() called on paused \"",
          "1559:                   \"parser ***\\n\\n\");",
          "1560:   abort();",
          "1561: }",
          "1563: int",
          "1564: dontcall_message_complete_cb (http_parser *p)",
          "1565: {",
          "1566:   if (p) { } // gcc",
          "1567:   fprintf(stderr, \"\\n\\n*** on_message_complete() called on paused \"",
          "1568:                   \"parser ***\\n\\n\");",
          "1569:   abort();",
          "1570: }",
          "1572: static http_parser_settings settings_dontcall =",
          "1573:   {.on_message_begin = dontcall_message_begin_cb",
          "1574:   ,.on_header_field = dontcall_header_field_cb",
          "1575:   ,.on_header_value = dontcall_header_value_cb",
          "1576:   ,.on_url = dontcall_request_url_cb",
          "1577:   ,.on_body = dontcall_body_cb",
          "1578:   ,.on_headers_complete = dontcall_headers_complete_cb",
          "1579:   ,.on_message_complete = dontcall_message_complete_cb",
          "1580:   };",
          "1586: int",
          "1587: pause_message_begin_cb (http_parser *p)",
          "1588: {",
          "1589:   http_parser_pause(p, 1);",
          "1591:   return message_begin_cb(p);",
          "1592: }",
          "1594: int",
          "1595: pause_header_field_cb (http_parser *p, const char *buf, size_t len)",
          "1596: {",
          "1597:   http_parser_pause(p, 1);",
          "1599:   return header_field_cb(p, buf, len);",
          "1600: }",
          "1602: int",
          "1603: pause_header_value_cb (http_parser *p, const char *buf, size_t len)",
          "1604: {",
          "1605:   http_parser_pause(p, 1);",
          "1607:   return header_value_cb(p, buf, len);",
          "1608: }",
          "1610: int",
          "1611: pause_request_url_cb (http_parser *p, const char *buf, size_t len)",
          "1612: {",
          "1613:   http_parser_pause(p, 1);",
          "1615:   return request_url_cb(p, buf, len);",
          "1616: }",
          "1618: int",
          "1619: pause_body_cb (http_parser *p, const char *buf, size_t len)",
          "1620: {",
          "1621:   http_parser_pause(p, 1);",
          "1623:   return body_cb(p, buf, len);",
          "1624: }",
          "1626: int",
          "1627: pause_headers_complete_cb (http_parser *p)",
          "1628: {",
          "1629:   http_parser_pause(p, 1);",
          "1631:   return headers_complete_cb(p);",
          "1632: }",
          "1634: int",
          "1635: pause_message_complete_cb (http_parser *p)",
          "1636: {",
          "1637:   http_parser_pause(p, 1);",
          "1639:   return message_complete_cb(p);",
          "1640: }",
          "1642: static http_parser_settings settings_pause =",
          "1643:   {.on_message_begin = pause_message_begin_cb",
          "1644:   ,.on_header_field = pause_header_field_cb",
          "1645:   ,.on_header_value = pause_header_value_cb",
          "1646:   ,.on_url = pause_request_url_cb",
          "1647:   ,.on_body = pause_body_cb",
          "1648:   ,.on_headers_complete = pause_headers_complete_cb",
          "1649:   ,.on_message_complete = pause_message_complete_cb",
          "1650:   };",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1227:   return nparsed;",
          "1228: }",
          "1230: static inline int",
          "1231: check_str_eq (const struct message *m,",
          "1232:               const char *prop,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1721: size_t parse_pause (const char *buf, size_t len)",
          "1722: {",
          "1723:   size_t nparsed;",
          "1724:   http_parser_settings s = settings_pause;",
          "1726:   currently_parsing_eof = (len == 0);",
          "1727:   current_pause_parser = &s;",
          "1728:   nparsed = http_parser_execute(parser, current_pause_parser, buf, len);",
          "1729:   return nparsed;",
          "1730: }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1267: #define MESSAGE_CHECK_NUM_EQ(expected, found, prop) \\",
          "1268:   if (!check_num_eq(expected, #prop, expected->prop, found->prop)) return 0",
          "1271: int",
          "1272: message_eq (int index, const struct message *expected)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1772: #define MESSAGE_CHECK_URL_EQ(u, expected, found, prop, fn)           \\",
          "1773: do {                                                                 \\",
          "1774:   char ubuf[256];                                                    \\",
          "1775:                                                                      \\",
          "1776:   if ((u)->field_set & (1 << (fn))) {                                \\",
          "1777:     memcpy(ubuf, (found)->request_url + (u)->field_data[(fn)].off,   \\",
          "1778:       (u)->field_data[(fn)].len);                                    \\",
          "1779:     ubuf[(u)->field_data[(fn)].len] = '\\0';                          \\",
          "1780:   } else {                                                           \\",
          "1781:     ubuf[0] = '\\0';                                                  \\",
          "1782:   }                                                                  \\",
          "1783:                                                                      \\",
          "1784:   check_str_eq(expected, #prop, expected->prop, ubuf);               \\",
          "1785: } while(0)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1294:   MESSAGE_CHECK_STR_EQ(expected, m, request_url);",
          "1295:   if (expected->body_size) {",
          "1296:     MESSAGE_CHECK_NUM_EQ(expected, m, body_size);",
          "1297:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1815:   if (*m->request_url && m->method != HTTP_CONNECT) {",
          "1816:     struct http_parser_url u;",
          "1818:     if (http_parser_parse_url(m->request_url, strlen(m->request_url), 0, &u)) {",
          "1819:       fprintf(stderr, \"\\n\\n*** failed to parse URL %s ***\\n\\n\",",
          "1820:         m->request_url);",
          "1821:       abort();",
          "1822:     }",
          "1824:     if (expected->host) {",
          "1825:       MESSAGE_CHECK_URL_EQ(&u, expected, m, host, UF_HOST);",
          "1826:     }",
          "1828:     if (expected->userinfo) {",
          "1829:       MESSAGE_CHECK_URL_EQ(&u, expected, m, userinfo, UF_USERINFO);",
          "1830:     }",
          "1832:     m->port = (u.field_set & (1 << UF_PORT)) ?",
          "1833:       u.port : 0;",
          "1835:     MESSAGE_CHECK_URL_EQ(&u, expected, m, query_string, UF_QUERY);",
          "1836:     MESSAGE_CHECK_URL_EQ(&u, expected, m, fragment, UF_FRAGMENT);",
          "1837:     MESSAGE_CHECK_URL_EQ(&u, expected, m, request_path, UF_PATH);",
          "1838:     MESSAGE_CHECK_NUM_EQ(expected, m, port);",
          "1839:   }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1360:       if (!check_str_eq(m, \"upgrade\", body + off, body + nread)) {",
          "1362:       }",
          "",
          "[Removed Lines]",
          "1361:         exit(1);",
          "",
          "[Added Lines]",
          "1907:         abort();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1374:   va_end(ap);",
          "1375:   printf(\"\\n\\n*** Error: expected a message with upgrade ***\\n\");",
          "1378: }",
          "1380: static void",
          "",
          "[Removed Lines]",
          "1377:   exit(1);",
          "",
          "[Added Lines]",
          "1923:   abort();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1420:   fprintf(stderr, \"^\\n\\nerror location: %u\\n\", (unsigned int)error_location);",
          "1421: }",
          "1424: void",
          "1425: test_message (const struct message *message)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1969: void",
          "1970: test_preserve_data (void)",
          "1971: {",
          "1972:   char my_data[] = \"application-specific data\";",
          "1973:   http_parser parser;",
          "1974:   parser.data = my_data;",
          "1975:   http_parser_init(&parser, HTTP_REQUEST);",
          "1976:   if (parser.data != my_data) {",
          "1977:     printf(\"\\n*** parser.data not preserved accross http_parser_init ***\\n\\n\");",
          "1978:     abort();",
          "1979:   }",
          "1980: }",
          "1982: struct url_test {",
          "1983:   const char *name;",
          "1984:   const char *url;",
          "1985:   int is_connect;",
          "1986:   struct http_parser_url u;",
          "1987:   int rv;",
          "1988: };",
          "1990: const struct url_test url_tests[] =",
          "1991: { {.name=\"proxy request\"",
          "1992:   ,.url=\"http://hostname/\"",
          "1993:   ,.is_connect=0",
          "1994:   ,.u=",
          "1995:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PATH)",
          "1996:     ,.port=0",
          "1997:     ,.field_data=",
          "2005:       }",
          "2006:     }",
          "2007:   ,.rv=0",
          "2008:   }",
          "2010: , {.name=\"proxy request with port\"",
          "2011:   ,.url=\"http://hostname:444/\"",
          "2012:   ,.is_connect=0",
          "2013:   ,.u=",
          "2014:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PORT) | (1 << UF_PATH)",
          "2015:     ,.port=444",
          "2016:     ,.field_data=",
          "2024:       }",
          "2025:     }",
          "2026:   ,.rv=0",
          "2027:   }",
          "2029: , {.name=\"CONNECT request\"",
          "2030:   ,.url=\"hostname:443\"",
          "2031:   ,.is_connect=1",
          "2032:   ,.u=",
          "2033:     {.field_set=(1 << UF_HOST) | (1 << UF_PORT)",
          "2034:     ,.port=443",
          "2035:     ,.field_data=",
          "2043:       }",
          "2044:     }",
          "2045:   ,.rv=0",
          "2046:   }",
          "2048: , {.name=\"CONNECT request but not connect\"",
          "2049:   ,.url=\"hostname:443\"",
          "2050:   ,.is_connect=0",
          "2051:   ,.rv=1",
          "2052:   }",
          "2054: , {.name=\"proxy ipv6 request\"",
          "2055:   ,.url=\"http://[1:2::3:4]/\"",
          "2056:   ,.is_connect=0",
          "2057:   ,.u=",
          "2058:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PATH)",
          "2059:     ,.port=0",
          "2060:     ,.field_data=",
          "2068:       }",
          "2069:     }",
          "2070:   ,.rv=0",
          "2071:   }",
          "2073: , {.name=\"proxy ipv6 request with port\"",
          "2074:   ,.url=\"http://[1:2::3:4]:67/\"",
          "2075:   ,.is_connect=0",
          "2076:   ,.u=",
          "2077:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PORT) | (1 << UF_PATH)",
          "2078:     ,.port=67",
          "2079:     ,.field_data=",
          "2087:       }",
          "2088:     }",
          "2089:   ,.rv=0",
          "2090:   }",
          "2092: , {.name=\"CONNECT ipv6 address\"",
          "2093:   ,.url=\"[1:2::3:4]:443\"",
          "2094:   ,.is_connect=1",
          "2095:   ,.u=",
          "2096:     {.field_set=(1 << UF_HOST) | (1 << UF_PORT)",
          "2097:     ,.port=443",
          "2098:     ,.field_data=",
          "2106:       }",
          "2107:     }",
          "2108:   ,.rv=0",
          "2109:   }",
          "2111: , {.name=\"extra ? in query string\"",
          "2112:   ,.url=\"http://a.tbcdn.cn/p/fp/2010c/??fp-header-min.css,fp-base-min.css,\"",
          "2113:   \"fp-channel-min.css,fp-product-min.css,fp-mall-min.css,fp-category-min.css,\"",
          "2114:   \"fp-sub-min.css,fp-gdp4p-min.css,fp-css3-min.css,fp-misc-min.css?t=20101022.css\"",
          "2115:   ,.is_connect=0",
          "2116:   ,.u=",
          "2117:     {.field_set=(1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_QUERY)",
          "2118:     ,.port=0",
          "2119:     ,.field_data=",
          "2127:       }",
          "2128:     }",
          "2129:   ,.rv=0",
          "2130:   }",
          "2132: , {.name=\"space URL encoded\"",
          "2133:   ,.url=\"/toto.html?toto=a%20b\"",
          "2134:   ,.is_connect=0",
          "2135:   ,.u=",
          "2136:     {.field_set= (1<<UF_PATH) | (1<<UF_QUERY)",
          "2137:     ,.port=0",
          "2138:     ,.field_data=",
          "2146:       }",
          "2147:     }",
          "2148:   ,.rv=0",
          "2149:   }",
          "2152: , {.name=\"URL fragment\"",
          "2153:   ,.url=\"/toto.html#titi\"",
          "2154:   ,.is_connect=0",
          "2155:   ,.u=",
          "2156:     {.field_set= (1<<UF_PATH) | (1<<UF_FRAGMENT)",
          "2157:     ,.port=0",
          "2158:     ,.field_data=",
          "2166:       }",
          "2167:     }",
          "2168:   ,.rv=0",
          "2169:   }",
          "2171: , {.name=\"complex URL fragment\"",
          "2172:   ,.url=\"http://www.webmasterworld.com/r.cgi?f=21&d=8405&url=\"",
          "2173:     \"http://www.example.com/index.html?foo=bar&hello=world#midpage\"",
          "2174:   ,.is_connect=0",
          "2175:   ,.u=",
          "2176:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_QUERY) |\\",
          "2177:       (1<<UF_FRAGMENT)",
          "2178:     ,.port=0",
          "2179:     ,.field_data=",
          "2187:       }",
          "2188:     }",
          "2189:   ,.rv=0",
          "2190:   }",
          "2192: , {.name=\"complex URL from node js url parser doc\"",
          "2193:   ,.url=\"http://host.com:8080/p/a/t/h?query=string#hash\"",
          "2194:   ,.is_connect=0",
          "2195:   ,.u=",
          "2196:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PORT) | (1<<UF_PATH) |\\",
          "2197:       (1<<UF_QUERY) | (1<<UF_FRAGMENT)",
          "2198:     ,.port=8080",
          "2199:     ,.field_data=",
          "2207:       }",
          "2208:     }",
          "2209:   ,.rv=0",
          "2210:   }",
          "2212: , {.name=\"complex URL with basic auth from node js url parser doc\"",
          "2213:   ,.url=\"http://a:b@host.com:8080/p/a/t/h?query=string#hash\"",
          "2214:   ,.is_connect=0",
          "2215:   ,.u=",
          "2216:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PORT) | (1<<UF_PATH) |\\",
          "2217:       (1<<UF_QUERY) | (1<<UF_FRAGMENT) | (1<<UF_USERINFO)",
          "2218:     ,.port=8080",
          "2219:     ,.field_data=",
          "2227:       }",
          "2228:     }",
          "2229:   ,.rv=0",
          "2230:   }",
          "2232: , {.name=\"double @\"",
          "2233:   ,.url=\"http://a:b@@hostname:443/\"",
          "2234:   ,.is_connect=0",
          "2235:   ,.rv=1",
          "2236:   }",
          "2238: , {.name=\"proxy empty host\"",
          "2239:   ,.url=\"http://:443/\"",
          "2240:   ,.is_connect=0",
          "2241:   ,.rv=1",
          "2242:   }",
          "2244: , {.name=\"proxy empty port\"",
          "2245:   ,.url=\"http://hostname:/\"",
          "2246:   ,.is_connect=0",
          "2247:   ,.rv=1",
          "2248:   }",
          "2250: , {.name=\"CONNECT with basic auth\"",
          "2251:   ,.url=\"a:b@hostname:443\"",
          "2252:   ,.is_connect=1",
          "2253:   ,.rv=1",
          "2254:   }",
          "2256: , {.name=\"CONNECT empty host\"",
          "2257:   ,.url=\":443\"",
          "2258:   ,.is_connect=1",
          "2259:   ,.rv=1",
          "2260:   }",
          "2262: , {.name=\"CONNECT empty port\"",
          "2263:   ,.url=\"hostname:\"",
          "2264:   ,.is_connect=1",
          "2265:   ,.rv=1",
          "2266:   }",
          "2268: , {.name=\"CONNECT with extra bits\"",
          "2269:   ,.url=\"hostname:443/\"",
          "2270:   ,.is_connect=1",
          "2271:   ,.rv=1",
          "2272:   }",
          "2274: , {.name=\"space in URL\"",
          "2275:   ,.url=\"/foo bar/\"",
          "2277:   }",
          "2279: , {.name=\"proxy basic auth with space url encoded\"",
          "2280:   ,.url=\"http://a%20:b@host.com/\"",
          "2281:   ,.is_connect=0",
          "2282:   ,.u=",
          "2283:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_USERINFO)",
          "2284:     ,.port=0",
          "2285:     ,.field_data=",
          "2293:       }",
          "2294:     }",
          "2295:   ,.rv=0",
          "2296:   }",
          "2298: , {.name=\"carriage return in URL\"",
          "2299:   ,.url=\"/foo\\rbar/\"",
          "2301:   }",
          "2303: , {.name=\"proxy double : in URL\"",
          "2304:   ,.url=\"http://hostname::443/\"",
          "2306:   }",
          "2308: , {.name=\"proxy basic auth with double :\"",
          "2309:   ,.url=\"http://a::b@host.com/\"",
          "2310:   ,.is_connect=0",
          "2311:   ,.u=",
          "2312:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_USERINFO)",
          "2313:     ,.port=0",
          "2314:     ,.field_data=",
          "2322:       }",
          "2323:     }",
          "2324:   ,.rv=0",
          "2325:   }",
          "2327: , {.name=\"line feed in URL\"",
          "2328:   ,.url=\"/foo\\nbar/\"",
          "2330:   }",
          "2332: , {.name=\"proxy empty basic auth\"",
          "2333:   ,.url=\"http://@hostname/fo\"",
          "2334:   ,.u=",
          "2335:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH)",
          "2336:     ,.port=0",
          "2337:     ,.field_data=",
          "2345:       }",
          "2346:     }",
          "2347:   ,.rv=0",
          "2348:   }",
          "2349: , {.name=\"proxy line feed in hostname\"",
          "2350:   ,.url=\"http://host\\name/fo\"",
          "2352:   }",
          "2354: , {.name=\"proxy % in hostname\"",
          "2355:   ,.url=\"http://host%name/fo\"",
          "2357:   }",
          "2359: , {.name=\"proxy ; in hostname\"",
          "2360:   ,.url=\"http://host;ame/fo\"",
          "2362:   }",
          "2364: , {.name=\"proxy basic auth with unreservedchars\"",
          "2365:   ,.url=\"http://a!;-_!=+$@host.com/\"",
          "2366:   ,.is_connect=0",
          "2367:   ,.u=",
          "2368:     {.field_set= (1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_USERINFO)",
          "2369:     ,.port=0",
          "2370:     ,.field_data=",
          "2378:       }",
          "2379:     }",
          "2380:   ,.rv=0",
          "2381:   }",
          "2383: , {.name=\"proxy only empty basic auth\"",
          "2384:   ,.url=\"http://@/fo\"",
          "2386:   }",
          "2388: , {.name=\"proxy only basic auth\"",
          "2389:   ,.url=\"http://toto@/fo\"",
          "2391:   }",
          "2393: , {.name=\"proxy emtpy hostname\"",
          "2394:   ,.url=\"http:///fo\"",
          "2396:   }",
          "2398: , {.name=\"proxy = in URL\"",
          "2399:   ,.url=\"http://host=ame/fo\"",
          "2401:   }",
          "2403: #if HTTP_PARSER_STRICT",
          "2405: , {.name=\"tab in URL\"",
          "2406:   ,.url=\"/foo\\tbar/\"",
          "2408:   }",
          "2410: , {.name=\"form feed in URL\"",
          "2411:   ,.url=\"/foo\\fbar/\"",
          "2413:   }",
          "2417: , {.name=\"tab in URL\"",
          "2418:   ,.url=\"/foo\\tbar/\"",
          "2419:   ,.u=",
          "2420:     {.field_set=(1 << UF_PATH)",
          "2421:     ,.field_data=",
          "2429:       }",
          "2430:     }",
          "2431:   ,.rv=0",
          "2432:   }",
          "2434: , {.name=\"form feed in URL\"",
          "2435:   ,.url=\"/foo\\fbar/\"",
          "2436:   ,.u=",
          "2437:     {.field_set=(1 << UF_PATH)",
          "2438:     ,.field_data=",
          "2446:       }",
          "2447:     }",
          "2448:   ,.rv=0",
          "2449:   }",
          "2450: #endif",
          "2451: };",
          "2453: void",
          "2454: dump_url (const char *url, const struct http_parser_url *u)",
          "2455: {",
          "2456:   unsigned int i;",
          "2458:   printf(\"\\tfield_set: 0x%x, port: %u\\n\", u->field_set, u->port);",
          "2459:   for (i = 0; i < UF_MAX; i++) {",
          "2460:     if ((u->field_set & (1 << i)) == 0) {",
          "2461:       printf(\"\\tfield_data[%u]: unset\\n\", i);",
          "2462:       continue;",
          "2463:     }",
          "2465:     printf(\"\\tfield_data[%u]: off: %u len: %u part: \\\"%.*s\\n\",",
          "2466:            i,",
          "2467:            u->field_data[i].off,",
          "2468:            u->field_data[i].len,",
          "2469:            u->field_data[i].len,",
          "2470:            url + u->field_data[i].off);",
          "2471:   }",
          "2472: }",
          "2474: void",
          "2475: test_parse_url (void)",
          "2476: {",
          "2477:   struct http_parser_url u;",
          "2478:   const struct url_test *test;",
          "2479:   unsigned int i;",
          "2480:   int rv;",
          "2482:   for (i = 0; i < (sizeof(url_tests) / sizeof(url_tests[0])); i++) {",
          "2483:     test = &url_tests[i];",
          "2484:     memset(&u, 0, sizeof(u));",
          "2486:     rv = http_parser_parse_url(test->url,",
          "2487:                                strlen(test->url),",
          "2488:                                test->is_connect,",
          "2489:                                &u);",
          "2491:     if (test->rv == 0) {",
          "2492:       if (rv != 0) {",
          "2493:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" test failed, \"",
          "2494:                \"unexpected rv %d ***\\n\\n\", test->url, test->name, rv);",
          "2495:         abort();",
          "2496:       }",
          "2498:       if (memcmp(&u, &test->u, sizeof(u)) != 0) {",
          "2499:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" failed ***\\n\",",
          "2500:                test->url, test->name);",
          "2502:         printf(\"target http_parser_url:\\n\");",
          "2503:         dump_url(test->url, &test->u);",
          "2504:         printf(\"result http_parser_url:\\n\");",
          "2505:         dump_url(test->url, &u);",
          "2507:         abort();",
          "2508:       }",
          "2509:     } else {",
          "2511:       if (rv == 0) {",
          "2512:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" test failed, \"",
          "2513:                \"unexpected rv %d ***\\n\\n\", test->url, test->name, rv);",
          "2514:         abort();",
          "2515:       }",
          "2516:     }",
          "2517:   }",
          "2518: }",
          "2520: void",
          "2521: test_method_str (void)",
          "2522: {",
          "2523:   assert(0 == strcmp(\"GET\", http_method_str(HTTP_GET)));",
          "2524:   assert(0 == strcmp(\"<unknown>\", http_method_str(1337)));",
          "2525: }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1445:       if (read != msg1len) {",
          "1446:         print_error(msg1, read);",
          "1448:       }",
          "1449:     }",
          "",
          "[Removed Lines]",
          "1447:         exit(1);",
          "",
          "[Added Lines]",
          "2550:         abort();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1459:     if (read != msg2len) {",
          "1460:       print_error(msg2, read);",
          "1462:     }",
          "1464:     read = parse(NULL, 0);",
          "1466:     if (read != 0) {",
          "1467:       print_error(message->raw, read);",
          "1469:     }",
          "1471:   test:",
          "1473:     if (num_messages != 1) {",
          "1474:       printf(\"\\n*** num_messages != 1 after testing '%s' ***\\n\\n\", message->name);",
          "1476:     }",
          "1480:     parser_free();",
          "1481:   }",
          "",
          "[Removed Lines]",
          "1461:       exit(1);",
          "1468:       exit(1);",
          "1475:       exit(1);",
          "1478:     if(!message_eq(0, message)) exit(1);",
          "",
          "[Added Lines]",
          "2564:       abort();",
          "2571:       abort();",
          "2578:       abort();",
          "2581:     if(!message_eq(0, message)) abort();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1496:     read = parse_count_body(message->raw + i, toread);",
          "1497:     if (read != toread) {",
          "1498:       print_error(message->raw, read);",
          "1500:     }",
          "1501:   }",
          "",
          "[Removed Lines]",
          "1499:       exit(1);",
          "",
          "[Added Lines]",
          "2602:       abort();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1504:   read = parse_count_body(NULL, 0);",
          "1505:   if (read != 0) {",
          "1506:     print_error(message->raw, read);",
          "1508:   }",
          "1510:   if (num_messages != 1) {",
          "1511:     printf(\"\\n*** num_messages != 1 after testing '%s' ***\\n\\n\", message->name);",
          "1513:   }",
          "1517:   parser_free();",
          "1518: }",
          "",
          "[Removed Lines]",
          "1507:     exit(1);",
          "1512:     exit(1);",
          "1515:   if(!message_eq(0, message)) exit(1);",
          "",
          "[Added Lines]",
          "2610:     abort();",
          "2615:     abort();",
          "2618:   if(!message_eq(0, message)) abort();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1544: #endif",
          "1545:     fprintf(stderr, \"\\n*** test_simple expected %s, but saw %s ***\\n\\n%s\\n\",",
          "1546:         http_errno_name(err_expected), http_errno_name(err), buf);",
          "1548:   }",
          "1549: }",
          "",
          "[Removed Lines]",
          "1547:     exit(1);",
          "",
          "[Added Lines]",
          "2650:     abort();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1573:   }",
          "1575:   fprintf(stderr, \"\\n*** Error expected but none in header overflow test ***\\n\");",
          "1577: }",
          "1579: void",
          "",
          "[Removed Lines]",
          "1576:   exit(1);",
          "",
          "[Added Lines]",
          "2679:   abort();",
          "2680: }",
          "2682: static void",
          "2683: test_content_length_overflow (const char *buf, size_t buflen, int expect_ok)",
          "2684: {",
          "2685:   http_parser parser;",
          "2686:   http_parser_init(&parser, HTTP_RESPONSE);",
          "2687:   http_parser_execute(&parser, &settings_null, buf, buflen);",
          "2689:   if (expect_ok)",
          "2690:     assert(HTTP_PARSER_ERRNO(&parser) == HPE_OK);",
          "2691:   else",
          "2692:     assert(HTTP_PARSER_ERRNO(&parser) == HPE_INVALID_CONTENT_LENGTH);",
          "2693: }",
          "2695: void",
          "2696: test_header_content_length_overflow_error (void)",
          "2697: {",
          "2698: #define X(size)                                                               \\",
          "2699:   \"HTTP/1.1 200 OK\\r\\n\"                                                       \\",
          "2700:   \"Content-Length: \" #size \"\\r\\n\"                                             \\",
          "2701:   \"\\r\\n\"",
          "2705: #undef X",
          "2709: }",
          "2711: void",
          "2712: test_chunk_content_length_overflow_error (void)",
          "2713: {",
          "2714: #define X(size)                                                               \\",
          "2715:     \"HTTP/1.1 200 OK\\r\\n\"                                                     \\",
          "2716:     \"Transfer-Encoding: chunked\\r\\n\"                                          \\",
          "2717:     \"\\r\\n\"                                                                    \\",
          "2718:     #size \"\\r\\n\"                                                              \\",
          "2719:     \"...\"",
          "2723: #undef X",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1584:   size_t parsed;",
          "1585:   size_t i;",
          "1586:   char buf1[3000];",
          "1589:   parsed = http_parser_execute(&parser, &settings_null, buf1, buf1len);",
          "1590:   if (parsed != buf1len)",
          "1591:     goto err;",
          "",
          "[Removed Lines]",
          "1587:   size_t buf1len = sprintf(buf1, \"%s\\r\\nConnection: Keep-Alive\\r\\nContent-Length: %zu\\r\\n\\r\\n\",",
          "1588:       req ? \"POST / HTTP/1.0\" : \"HTTP/1.0 200 OK\", length);",
          "",
          "[Added Lines]",
          "2737:   size_t buf1len = sprintf(buf1, \"%s\\r\\nConnection: Keep-Alive\\r\\nContent-Length: %lu\\r\\n\\r\\n\",",
          "2738:       req ? \"POST / HTTP/1.0\" : \"HTTP/1.0 200 OK\", (unsigned long)length);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1604:  err:",
          "1605:   fprintf(stderr,",
          "1607:           req ? \"REQUEST\" : \"RESPONSE\",",
          "1610: }",
          "1612: void",
          "",
          "[Removed Lines]",
          "1606:           \"\\n*** error in test_no_overflow_long_body %s of length %zu ***\\n\",",
          "1608:           length);",
          "1609:   exit(1);",
          "",
          "[Added Lines]",
          "2756:           \"\\n*** error in test_no_overflow_long_body %s of length %lu ***\\n\",",
          "2758:           (unsigned long)length);",
          "2759:   abort();",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1639:   if (read != strlen(total)) {",
          "1640:     print_error(total, read);",
          "1642:   }",
          "1644:   read = parse(NULL, 0);",
          "1646:   if (read != 0) {",
          "1647:     print_error(total, read);",
          "1649:   }",
          "1651: test:",
          "1653:   if (message_count != num_messages) {",
          "1654:     fprintf(stderr, \"\\n\\n*** Parser didn't see 3 messages only %d *** \\n\", num_messages);",
          "1656:   }",
          "1662:   parser_free();",
          "1663: }",
          "",
          "[Removed Lines]",
          "1641:     exit(1);",
          "1648:     exit(1);",
          "1655:     exit(1);",
          "1658:   if (!message_eq(0, r1)) exit(1);",
          "1659:   if (message_count > 1 && !message_eq(1, r2)) exit(1);",
          "1660:   if (message_count > 2 && !message_eq(2, r3)) exit(1);",
          "",
          "[Added Lines]",
          "2791:     abort();",
          "2798:     abort();",
          "2805:     abort();",
          "2808:   if (!message_eq(0, r1)) abort();",
          "2809:   if (message_count > 1 && !message_eq(1, r2)) abort();",
          "2810:   if (message_count > 2 && !message_eq(2, r3)) abort();",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1780:   fprintf(stderr, \"buf1 (%u) %s\\n\\n\", (unsigned int)buf1_len, buf1);",
          "1781:   fprintf(stderr, \"buf2 (%u) %s\\n\\n\", (unsigned int)buf2_len , buf2);",
          "1782:   fprintf(stderr, \"buf3 (%u) %s\\n\", (unsigned int)buf3_len, buf3);",
          "1784: }",
          "",
          "[Removed Lines]",
          "1783:   exit(1);",
          "",
          "[Added Lines]",
          "2933:   abort();",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1814:   return buf;",
          "1815: }",
          "1818: int",
          "1819: main (void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2969: void",
          "2970: test_message_pause (const struct message *msg)",
          "2971: {",
          "2972:   char *buf = (char*) msg->raw;",
          "2973:   size_t buflen = strlen(msg->raw);",
          "2974:   size_t nread;",
          "2976:   parser_init(msg->type);",
          "2978:   do {",
          "2979:     nread = parse_pause(buf, buflen);",
          "2983:     if (messages[0].message_complete_cb_called &&",
          "2984:         msg->upgrade &&",
          "2985:         parser->upgrade) {",
          "2986:       messages[0].upgrade = buf + nread;",
          "2987:       goto test;",
          "2988:     }",
          "2990:     if (nread < buflen) {",
          "2993:       if (HTTP_PARSER_ERRNO(parser) == HPE_STRICT) {",
          "2994:         parser_free();",
          "2995:         return;",
          "2996:       }",
          "2998:       assert (HTTP_PARSER_ERRNO(parser) == HPE_PAUSED);",
          "2999:     }",
          "3001:     buf += nread;",
          "3002:     buflen -= nread;",
          "3003:     http_parser_pause(parser, 0);",
          "3004:   } while (buflen > 0);",
          "3006:   nread = parse_pause(NULL, 0);",
          "3007:   assert (nread == 0);",
          "3009: test:",
          "3010:   if (num_messages != 1) {",
          "3011:     printf(\"\\n*** num_messages != 1 after testing '%s' ***\\n\\n\", msg->name);",
          "3012:     abort();",
          "3013:   }",
          "3015:   if(!message_eq(0, msg)) abort();",
          "3017:   parser_free();",
          "3018: }",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1828:   for (request_count = 0; requests[request_count].name; request_count++);",
          "1829:   for (response_count = 0; responses[response_count].name; response_count++);",
          "1833:   test_header_overflow_error(HTTP_REQUEST);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3034:   test_preserve_data();",
          "3035:   test_parse_url();",
          "3036:   test_method_str();",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1838:   test_no_overflow_long_body(HTTP_RESPONSE, 1000);",
          "1839:   test_no_overflow_long_body(HTTP_RESPONSE, 100000);",
          "1843:   for (i = 0; i < response_count; i++) {",
          "1844:     test_message(&responses[i]);",
          "1845:   }",
          "1847:   for (i = 0; i < response_count; i++) {",
          "1848:     if (!responses[i].should_keep_alive) continue;",
          "1849:     for (j = 0; j < response_count; j++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3048:   test_header_content_length_overflow_error();",
          "3049:   test_chunk_content_length_overflow_error();",
          "3057:   for (i = 0; i < response_count; i++) {",
          "3058:     test_message_pause(&responses[i]);",
          "3059:   }",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1889:   printf(\"response scan 1/2      \");",
          "1890:   test_scan( &responses[TRAILING_SPACE_ON_CHUNKED_BODY]",
          "1892:            , &responses[NO_REASON_PHRASE]",
          "1893:            );",
          "",
          "[Removed Lines]",
          "1891:            , &responses[NO_HEADERS_NO_BODY_404]",
          "",
          "[Added Lines]",
          "3105:            , &responses[NO_BODY_HTTP10_KA_204]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2019:     test_message(&requests[i]);",
          "2020:   }",
          "2024:   for (i = 0; i < request_count; i++) {",
          "2025:     if (!requests[i].should_keep_alive) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3236:   for (i = 0; i < request_count; i++) {",
          "3237:     test_message_pause(&requests[i]);",
          "3238:   }",
          "",
          "---------------"
        ],
        "deps/http_parser/url_parser.c||deps/http_parser/url_parser.c": [
          "File: deps/http_parser/url_parser.c -> deps/http_parser/url_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"http_parser.h\"",
          "2: #include <stdio.h>",
          "3: #include <string.h>",
          "5: void",
          "6: dump_url (const char *url, const struct http_parser_url *u)",
          "7: {",
          "8:   unsigned int i;",
          "10:   printf(\"\\tfield_set: 0x%x, port: %u\\n\", u->field_set, u->port);",
          "11:   for (i = 0; i < UF_MAX; i++) {",
          "12:     if ((u->field_set & (1 << i)) == 0) {",
          "13:       printf(\"\\tfield_data[%u]: unset\\n\", i);",
          "14:       continue;",
          "15:     }",
          "17:     printf(\"\\tfield_data[%u]: off: %u len: %u part: \\\"%.*s\\n\",",
          "18:            i,",
          "19:            u->field_data[i].off,",
          "20:            u->field_data[i].len,",
          "21:            u->field_data[i].len,",
          "22:            url + u->field_data[i].off);",
          "23:   }",
          "24: }",
          "26: int main(int argc, char ** argv) {",
          "27:   if (argc != 3) {",
          "28:     printf(\"Syntax : %s connect|get url\\n\", argv[0]);",
          "29:     return 1;",
          "30:   }",
          "31:   struct http_parser_url u;",
          "32:   int len = strlen(argv[2]);",
          "33:   int connect = strcmp(\"connect\", argv[1]) == 0 ? 1 : 0;",
          "34:   printf(\"Parsing %s, connect %d\\n\", argv[2], connect);",
          "36:   int result = http_parser_parse_url(argv[2], len, connect, &u);",
          "37:   if (result != 0) {",
          "38:     printf(\"Parse error : %d\\n\", result);",
          "39:     return result;",
          "40:   }",
          "41:   printf(\"Parse ok, result : \\n\");",
          "42:   dump_url(argv[2], &u);",
          "43:   return 0;",
          "44: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "085a09874b03a1e5401d911ef61e9451b6ea3b30",
      "candidate_info": {
        "commit_hash": "085a09874b03a1e5401d911ef61e9451b6ea3b30",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/085a09874b03a1e5401d911ef61e9451b6ea3b30",
        "files": [
          "lib/child_process.js",
          "lib/cluster.js",
          "lib/net.js",
          "test/simple/test-cluster-basic.js"
        ],
        "message": "cluster: do not use internal server API",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/cluster.js||licluster.js",
          "lib/net.js||linet.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       var self = this;",
          "103:       var server = new net.Server();",
          "105:         emit(server);",
          "106:       });",
          "107:     }",
          "",
          "[Removed Lines]",
          "104:       server.listen(handle, function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: var messageHandler = {};",
          "161: function handleMessage(worker, inMessage, inHandle) {",
          "164:   var message = util._extend({}, inMessage);",
          "165:   message.cmd = inMessage.cmd.substr(INTERNAL_PREFIX.length);",
          "168:   function respond(outMessage, outHandler) {",
          "170:     handleResponse(outMessage, outHandler, inMessage, inHandle, worker);",
          "171:   }",
          "174:   if (messageHandler[message.cmd]) {",
          "175:     messageHandler[message.cmd](message, worker, respond);",
          "180:     respond();",
          "181:   }",
          "182: }",
          "",
          "[Removed Lines]",
          "167:   var respondUsed = false;",
          "169:     respondUsed = true;",
          "176:   }",
          "179:   if (respondUsed === false) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185: if (cluster.isMaster) {",
          "189:     worker.state = 'online';",
          "190:     debug('Worker ' + worker.process.pid + ' online');",
          "191:     worker.emit('online');",
          "192:     cluster.emit('online', worker);",
          "193:   };",
          "",
          "[Removed Lines]",
          "188:   messageHandler.online = function(message, worker) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     if (serverHandlers.hasOwnProperty(key)) {",
          "211:     }",
          "215:   };",
          "220:     worker.state = 'listening';",
          "235:   };",
          "239:     worker.suicide = true;",
          "240:   };",
          "242: }",
          "",
          "[Removed Lines]",
          "200:     var args = [message.address,",
          "201:                 message.port,",
          "202:                 message.addressType,",
          "203:                 message.fd];",
          "204:     var key = args.join(':');",
          "205:     var handler;",
          "208:       handler = serverHandlers[key];",
          "209:     } else {",
          "210:       handler = serverHandlers[key] = net._createServerHandle.apply(net, args);",
          "214:     send({}, handler);",
          "218:   messageHandler.listening = function(message, worker) {",
          "223:     worker.emit('listening', {",
          "224:       address: message.address,",
          "225:       port: message.port,",
          "226:       addressType: message.addressType,",
          "227:       fd: message.fd",
          "228:     });",
          "229:     cluster.emit('listening', worker, {",
          "230:       address: message.address,",
          "231:       port: message.port,",
          "232:       addressType: message.addressType,",
          "233:       fd: message.fd",
          "234:     });",
          "238:   messageHandler.suicide = function(message, worker) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245: else if (cluster.isWorker) {",
          "249:     worker.disconnect();",
          "250:   };",
          "251: }",
          "",
          "[Removed Lines]",
          "248:   messageHandler.disconnect = function(message, worker) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521: };",
          "",
          "[Removed Lines]",
          "524: cluster._getServer = function(tcpSelf, address, port, addressType, fd, cb) {",
          "526:   assert(cluster.isWorker);",
          "529:   var key = [address, port, addressType, fd].join(':');",
          "530:   serverListeners[key] = tcpSelf;",
          "533:   tcpSelf.once('listening', function() {",
          "534:     cluster.worker.state = 'listening';",
          "535:     sendInternalMessage(cluster.worker, {",
          "536:       cmd: 'listening',",
          "537:       address: address,",
          "538:       port: port,",
          "539:       addressType: addressType,",
          "540:       fd: fd",
          "541:     });",
          "542:   });",
          "545:   var message = {",
          "546:     cmd: 'queryServer',",
          "547:     address: address,",
          "548:     port: port,",
          "549:     addressType: addressType,",
          "550:     fd: fd",
          "551:   };",
          "554:   sendInternalMessage(cluster.worker, message, function(msg, handle) {",
          "555:     cb(handle);",
          "556:   });",
          "558: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: function toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }",
          "839:   var r = 0;",
          "841:   var handle;",
          "",
          "[Removed Lines]",
          "837: var createServerHandle = exports._createServerHandle =",
          "838:     function(address, port, addressType, fd) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "924: function listen(self, address, port, addressType, backlog, fd) {",
          "938:     if (!self._handle) {",
          "958:       process.nextTick(function() {",
          "960:       });",
          "961:       return;",
          "962:     }",
          "970:   }",
          "975:   var self = this;",
          "977:   var lastArg = arguments[arguments.length - 1];",
          "",
          "[Removed Lines]",
          "925:   if (!cluster) cluster = require('cluster');",
          "927:   if (cluster.isWorker) {",
          "928:     cluster._getServer(self, address, port, addressType, fd, function(handle) {",
          "929:       self._handle = handle;",
          "930:       var r = self._listen2(address, port, addressType, backlog, fd);",
          "931:       if (r === 0) {",
          "932:         self.emit('listening');",
          "933:       }",
          "934:     });",
          "935:   } else {",
          "939:       self._handle = createServerHandle(address, port, addressType, fd);",
          "940:       if (!self._handle) {",
          "941:         process.nextTick(function() {",
          "942:           self.emit('error', errnoException(errno, 'listen'));",
          "943:         });",
          "944:         return;",
          "945:       }",
          "946:     }",
          "950:     if (self.listeners('connection').length === 0) {",
          "951:       self.on('newListener', function removeme(name) {",
          "952:         if (name !== 'connection') return;",
          "954:         self.removeListener('newListener', removeme);",
          "955:         self._listen2(address, port, addressType, backlog, fd);",
          "956:       });",
          "959:         self.emit('listening');",
          "964:     var r = self._listen2(address, port, addressType, backlog, fd);",
          "965:     if (r === 0) {",
          "966:       process.nextTick(function() {",
          "967:         self.emit('listening');",
          "968:       });",
          "969:     }",
          "971: }",
          "974: Server.prototype.listen = function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1030:   return self;",
          "1031: };",
          "1033: Server.prototype.address = function() {",
          "1034:   if (this._handle && this._handle.getsockname) {",
          "1035:     return this._handle.getsockname();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:           assert.equal(arguments.length, 1);",
          "137:           var expect = { address: '127.0.0.1',",
          "138:                          port: common.PORT,",
          "141:           assert.deepEqual(arguments[0], expect);",
          "142:           break;",
          "",
          "[Removed Lines]",
          "139:                          addressType: 4,",
          "140:                          fd: undefined };",
          "",
          "[Added Lines]",
          "139:                          family: 'IPv4'};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "208d1715a788562dbdb8f7eae17ddfb254690e5b",
      "candidate_info": {
        "commit_hash": "208d1715a788562dbdb8f7eae17ddfb254690e5b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/208d1715a788562dbdb8f7eae17ddfb254690e5b",
        "files": [
          "src/slab_allocator.cc"
        ],
        "message": "slab_allocator: fix leak of Persistent handles",
        "before_after_code_files": [
          "src/slab_allocator.cc||src/slab_allocator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/slab_allocator.cc||src/slab_allocator.cc": [
          "File: src/slab_allocator.cc -> src/slab_allocator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: SlabAllocator::~SlabAllocator() {",
          "51:   if (!initialized_) return;",
          "53:   slab_sym_.Dispose();",
          "55:   slab_.Dispose();",
          "56: }",
          "",
          "[Removed Lines]",
          "52:   slab_sym_.Clear();",
          "54:   slab_.Clear();",
          "",
          "[Added Lines]",
          "53:   slab_sym_.Clear();",
          "55:   slab_.Clear();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   }",
          "94:   if (slab_.IsEmpty() || offset_ + size > size_) {",
          "96:     slab_.Dispose();",
          "97:     slab_ = Persistent<Object>::New(NewSlab(size_));",
          "98:     offset_ = 0;",
          "99:     last_ptr_ = NULL;",
          "",
          "[Removed Lines]",
          "95:     slab_.Clear();",
          "",
          "[Added Lines]",
          "96:     slab_.Clear();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10f85fadfea0fade0642861116f7df79ee281e9a",
      "candidate_info": {
        "commit_hash": "10f85fadfea0fade0642861116f7df79ee281e9a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/10f85fadfea0fade0642861116f7df79ee281e9a",
        "files": [
          "lib/child_process.js",
          "src/node.js"
        ],
        "message": "Fix child_process.kill oddities\n\n* When the process is already dead, but the `exit` signal wasn't raised\n  yet, the ESRCH error should be ignored.\n\n* When an invalid signal is specified, kill() should throw.\n\n* Like process.kill(), child_process.kill() now preserves a `0` signal\n  which can be used to check the liveliness of the child process.\n\n* process.kill() and child_process.kill() will now return true if the\n  signal was actually delivered, and false otherwise.\n\n* When an `exec`-ed process is automatically killed because a time or\n  buffer limit is exceeded, and the kill() fails, this error should be\n  reported through the `exec` callback.\n\nFixes: #3409",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "537:   }",
          "539:   function kill() {",
          "540:     killed = true;",
          "545:   }",
          "547:   if (options.timeout > 0) {",
          "",
          "[Removed Lines]",
          "541:     child.kill(options.killSignal);",
          "542:     process.nextTick(function() {",
          "543:       exithandler(null, options.killSignal);",
          "544:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:   });",
          "573:   child.addListener('close', exithandler);",
          "575:   return child;",
          "576: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "824: ChildProcess.prototype.kill = function(sig) {",
          "825:   if (!constants) {",
          "826:     constants = process.binding('constants');",
          "827:   }",
          "833:     throw new Error('Unknown signal: ' + sig);",
          "834:   }",
          "836:   if (this._handle) {",
          "838:     var r = this._handle.kill(signal);",
          "840:       this.emit('error', errnoException(errno, 'kill'));",
          "842:     }",
          "843:   }",
          "844: };",
          "",
          "[Removed Lines]",
          "829:   sig = sig || 'SIGTERM';",
          "830:   var signal = constants[sig];",
          "832:   if (!signal) {",
          "837:     this.killed = true;",
          "839:     if (r === -1) {",
          "841:       return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:       if (r) {",
          "431:         throw errnoException(errno, 'kill');",
          "432:       }",
          "433:     };",
          "434:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:       return true;",
          "",
          "---------------"
        ]
      }
    }
  ]
}